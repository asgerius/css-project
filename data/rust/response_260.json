[{"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1577884025, "post_id": 59548004, "comment_id": 105274041, "body": "The code you posted was not compiling. Could you edit it to show us the workflow better? Also, why are you returning early? Is there a specific reason? To me, this code would be better served using <code>map</code> with a single return point."}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1577895333, "post_id": 59548004, "comment_id": 105276560, "body": "@DanielFath see my edit"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1577930266, "post_id": 59548004, "comment_id": 105283480, "body": "It looks like your question might be answered by the answers of <a href=\"https://stackoverflow.com/q/52027634/155423\">Is there any way to return from a function from inside a closure?</a>. If not, please <b><a href=\"https://stackoverflow.com/posts/59548004/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1577930339, "post_id": 59548004, "comment_id": 105283490, "body": "You should also read <a href=\"https://stackoverflow.com/q/42584368/155423\">How do you define custom <code>Error</code> types in Rust?</a>, which discusses how to make <code>?</code> automatically wrap underlying errors."}], "answers": [{"comments": [{"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577822421, "post_id": 59548028, "comment_id": 105265075, "body": "That would work indeed in the code I provided :) However, in my &#39;real&#39; code, I have more and_then&#39;s and they are mapping types and errors, this way wouldn&#39;t be sufficient sadly :( Thanks for the answer anyway, I will update my question to make it more clear"}, {"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577822689, "post_id": 59548028, "comment_id": 105265128, "body": "@J.Doe: Can you create a more realistic example/show the true code, then? You can\u2019t use <code>return</code> like that, so any alternative will probably need more context. (Also, is this targeting stable Rust or are <code>#![feature]</code>s okay?)"}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577823321, "post_id": 59548028, "comment_id": 105265270, "body": "Well to make it simple, I am chaining multiple and_then&#39;s and sometimes, I just want to say (inside a and_then block): ok, just return this value to the caller if something is true, else just call the next and_then. This is stable rust. To wrap it up: a return statement inside a and_then block will not actually return the function but maps the given type to the returning value, making it available in the next and_then block?"}, {"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577823437, "post_id": 59548028, "comment_id": 105265303, "body": "@J.Doe: <code>return</code> returns from the closure being passed as an argument to <code>and_then</code>, yeah."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577883712, "post_id": 59548028, "comment_id": 105273943, "body": "@J.Doe could you change example to have multiple <code>and_then</code>?"}], "tags": [], "owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "is_accepted": false, "score": 1, "last_activity_date": 1577822283, "creation_date": 1577822283, "answer_id": 59548028, "question_id": 59548004, "link": "https://stackoverflow.com/questions/59548004/early-exit-when-matching-result-type/59548028#59548028", "title": "Early exit when matching result type", "body": "<p>Not a clean one. How about breaking out to <code>?</code> instead?</p>\n\n<pre><code>fn s(r: Result&lt;Good, ()&gt;) -&gt; Result&lt;Food, ()&gt; {\n    let p = match r? {\n        // Should be called in the next and_then block\n        Good::Ok =&gt; Pizza::Tomato,\n        // Should be called in the next and_then block\n        Good::Good =&gt; Pizza::Pineapple,\n        Good::VeryGood =&gt; {\n            return Ok(Food::Burger(Burger::Cow));\n        },\n    };\n\n    Ok(Food::Pizza(p))\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 1, "last_activity_date": 1577931332, "last_edit_date": 1577931332, "creation_date": 1577926277, "answer_id": 59557309, "question_id": 59548004, "link": "https://stackoverflow.com/questions/59548004/early-exit-when-matching-result-type/59557309#59557309", "title": "Early exit when matching result type", "body": "<p>Looking at your edited example, I've created an <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9c0efade1c4875d50b577da9919595ef\" rel=\"nofollow noreferrer\">approximate example</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// ...\n    .and_then(|b| b.into_rows().ok_or(TechnicalServerError::SERVER_RETRY))\n    .and_then(|mut c| {\n        if let Some(row) = c.pop() {\n            User::try_from_row(row).map_err(|e| {\n                error!(\"{:?}\", e);\n                TechnicalServerError::SERVER_INVALID\n            })\n        } else {\n            return Ok(Login::Other(LoginResult::UNKNOWN_USER))\n        }\n    }).and_then(|u| {\n        // 'u' should be of type 'user' at this point\n        // some user code here...\n</code></pre>\n\n<p>I think there is a basic misunderstanding about what <code>and_then</code> does.  </p>\n\n<ul>\n<li><p><code>and_then</code> takes a <code>Result&lt;T, E&gt;</code>, and a function that converts <code>T</code> into <code>Result&lt;U, E&gt;</code> (i.e. <code>FnOnce(T) -&gt; Result&lt;U, E&gt;</code>. Use this when you want to manipulate both the <code>Ok(val)</code> and the <code>Error</code>, for example you want to change remap the error and do some value processing.</p></li>\n<li><p><code>map</code> takes a <code>Result&lt;T, E&gt;</code> and a function that converts <code>T</code> into another value <code>U</code> (i.e. <code>FnOnce(T) -&gt; U</code>). Use this when you want to change <code>Ok(val)</code> without influencing the <code>Error</code> part.</p></li>\n</ul>\n\n<p>You say you want to change the user, and that's possible like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>db_session\n    .query_with_values(true)\n    .map_err(|e| {\n        println!(\"{:?}\", e);\n        MyError::ServerRetry\n    })\n    .and_then(|f| f.get_body(true).map_err(|e2|{\n        println!(\"{:?}\", e2);\n        MyError::ServerRetry\n    }))\n    .and_then(|b| b.into_rows(true).ok_or(MyError::ServerRetry))\n    .and_then(|mut c|{\n        if let Some(row) = c.pop() {\n            User::from_row(row).map_err(|e3| {\n                println!(\"{:?}\", e3);\n                MyError::ServerRetry\n            })\n        } else {\n            return Ok(User{ name: \"X\".to_string()})\n        }\n    })\n    .map(|mut user| {\n        user.name = \"CHANGED\".to_string();\n        user\n    });\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a052f26ea68a6ae1c8a1e9b10744d256\" rel=\"nofollow noreferrer\">Rust playground</a>.</p>\n\n<p>However, as you can see the value of query will always be <code>Result&lt;User, Error&gt;</code> the only way to operate on the value directly is to <code>unwrap</code> but that panics if it encounters an error. Alternatively you can use <code>if let</code> to get the value without panicking.</p>\n"}], "owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 59557309, "answer_count": 2, "score": 1, "last_activity_date": 1577931332, "creation_date": 1577822058, "last_edit_date": 1577930234, "question_id": 59548004, "link": "https://stackoverflow.com/questions/59548004/early-exit-when-matching-result-type", "title": "Early exit when matching result type", "body": "<p>I have a method with a parameter of type <code>Result</code>. I like chaining a lot, so I use <code>and_then</code> on the parameter. At some point, I want to return the whole method from inside the <code>and_then</code> conditionally (so there is a chance another <code>and_then</code> method can be called):</p>\n\n<pre><code>enum Good {\n    Ok,\n    Good,\n    VeryGood,\n}\nenum Pizza {\n    Tomato,\n    Pineapple,\n}\nenum Burger {\n    Cow,\n}\n\nenum Food {\n    Pizza(Pizza),\n    Burger(Burger),\n}\n\nfn main() {}\n\nfn s(r: Result&lt;Good, ()&gt;) -&gt; Result&lt;Food, ()&gt; {\n    r.and_then(|o| {\n        match o {\n            // Should be called in the next and_then block\n            Good::Ok =&gt; Ok(Pizza::Tomato),\n            // Should be called in the next and_then block\n            Good::Good =&gt; Ok(Pizza::Pineapple),\n            Good::VeryGood =&gt; {\n                // I am done. Don't call the next and_then block, but rather return the whole value to the caller.\n                return Ok(Food::Burger(Burger::Cow));\n            }\n        }\n    })\n    .and_then(|p: Pizza| {\n        // At this point, the closure input value should be pizza, because that's the only returned value\n        Ok(Food::Pizza(p))\n    })\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8c3751e11b8debb322081758026dc962\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>I get all kinds of compiler errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:30:27\n   |\n30 |                 return Ok(Food::Burger(Burger::Cow));\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Pizza`, found enum `Food`\n   |\n   = note: expected type `Pizza`\n              found type `Food`\n</code></pre>\n\n<p>I hope there is a way to make it compile. I could break down the method and get rid of the <code>and_then</code>, but maybe there is a way with <code>and_then</code>.</p>\n\n<p>In my real code, I have more <code>and_then</code>'s which maps types to other types, error mapping etc, so this is a simplified reproduction path of the problem I am facing. </p>\n\n<p>This is copy-pasted code from my codebase, showing the multiple <code>and_then</code>. I am mapping errors from external libraries into my own error type, so errors can be returned automatically if there are any. I want to keep changing the type that I got from the <code>and_then</code> so I can eventually get type <code>User</code> (although it is currently not working). An option is to not chain the blocks and create separate values, but I was hoping I could directly return values to the caller inside a closure.</p>\n\n<pre><code>db_session\n    .query_with_values(query, values)\n    .map_err(|e| {\n        error!(\"{:?}\", e);\n        TechnicalServerError::SERVER_RETRY\n    })\n    .and_then(|f| {\n        f.get_body().map_err(|e| {\n            error!(\"{:?}\", e);\n            TechnicalServerError::SERVER_RETRY\n        })\n    })\n    .and_then(|b| b.into_rows().ok_or(TechnicalServerError::SERVER_RETRY))\n    .and_then(|mut c| {\n        if let Some(row) = c.pop() {\n            User::try_from_row(row).map_err(|e| {\n                error!(\"{:?}\", e);\n                TechnicalServerError::SERVER_INVALID\n            })\n        } else {\n            return Ok(Login::Other(LoginResult::UNKNOWN_USER));\n        }\n    })\n    .and_then(|u| {\n        // 'u' should be of type 'user' at this point\n        // some user code here...\n    })\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1577815582, "post_id": 59547014, "comment_id": 105263528, "body": "Because <code>*</code> is the start of a possible dereference expression. Once matched, it cannot stop or backtrack resulting in an error."}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "edited": false, "score": 0, "creation_date": 1577815663, "post_id": 59547014, "comment_id": 105263546, "body": "Try <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0d4206c0ada6aedaa0029a46de2b7279\" rel=\"nofollow noreferrer\">this</a>"}], "owner": {"reputation": 2826, "user_id": 1575632, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/SPw2f.jpg?s=128&g=1", "display_name": "amin", "link": "https://stackoverflow.com/users/1575632/amin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 39, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1577813542, "creation_date": 1577813542, "question_id": 59547014, "link": "https://stackoverflow.com/questions/59547014/using-expr-and-tt-in-the-same-macro-rules", "title": "using expr and tt in the same macro_rules", "body": "<p>Consider this macro</p>\n\n<pre><code>macro_rules! cmd_format {\n    ($value: expr) =&gt; {\n        $value\n    };\n    ($value: tt) =&gt; {\n        stringify!($value)\n    };\n}\n</code></pre>\n\n<p>the compiler complains about <code>cmd_format!(*)</code>.</p>\n\n<pre><code>|     cmd_format!(*);\n|                  ^ expected expression\n</code></pre>\n\n<p>Why <code>*</code> is not being matched as a token tree?</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1577807456, "post_id": 59546104, "comment_id": 105261157, "body": "You beat me to it by 37 seconds! I&#39;ll delete mine - it&#39;s basically the same."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1577807494, "post_id": 59546104, "comment_id": 105261164, "body": "@PeterHall yeah :P"}, {"owner": {"reputation": 95, "user_id": 4410276, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05868aa4f5d0bcbf9557b8e173a7c7da?s=128&d=identicon&r=PG&f=1", "display_name": "weary", "link": "https://stackoverflow.com/users/4410276/weary"}, "edited": false, "score": 0, "creation_date": 1577807755, "post_id": 59546104, "comment_id": 105261246, "body": "Nice! Indeed it works. So will specifying i32 generate a 32-bit comparison and break if var_of_type_integer happens to be larger?"}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 95, "user_id": 4410276, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05868aa4f5d0bcbf9557b8e173a7c7da?s=128&d=identicon&r=PG&f=1", "display_name": "weary", "link": "https://stackoverflow.com/users/4410276/weary"}, "edited": false, "score": 0, "creation_date": 1577807852, "post_id": 59546104, "comment_id": 105261279, "body": "@weary in that case, you can change the trait bound like so: <code>T: PartialOrd&lt;i64&gt;</code>. Or even multiple bounds <code>T: PartialOrd&lt;i32&gt; + PartialOrd&lt;i64&gt;,</code> or more."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 95, "user_id": 4410276, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05868aa4f5d0bcbf9557b8e173a7c7da?s=128&d=identicon&r=PG&f=1", "display_name": "weary", "link": "https://stackoverflow.com/users/4410276/weary"}, "edited": false, "score": 0, "creation_date": 1577809686, "post_id": 59546104, "comment_id": 105261799, "body": "@weary if <code>var_of_type_integer</code> is actually larger and you only specify <code>PartialOrd&lt;i32&gt;</code>, it is a type error and the code won&#39;t compile. Rust will not implicitly cast the value and generate binary that breaks at runtime."}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 4, "last_activity_date": 1577809471, "last_edit_date": 1577809471, "creation_date": 1577807274, "answer_id": 59546104, "question_id": 59546024, "link": "https://stackoverflow.com/questions/59546024/in-rust-what-trait-do-i-need-to-compare-a-generic-to-an-integer/59546104#59546104", "title": "In Rust, what trait do I need to compare a generic to an integer", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"nofollow noreferrer\"><code>PartialOrd</code></a> trait can take a generic parameter to specify what type it can be compared against:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait PartialOrd&lt;Rhs = Self&gt;: PartialEq&lt;Rhs&gt;\nwhere\n    Rhs: ?Sized,\n{\n    // ...\n}\n</code></pre>\n\n<p>So this compiles:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn reproduction&lt;T&gt;(val: T) -&gt; bool\nwhere\n    T: PartialOrd&lt;i32&gt;,\n{\n    let var_of_type_integer = 7;\n    if val &lt; var_of_type_integer {\n        return true;\n    }\n    false\n}\n</code></pre>\n\n<p>Being able to compile if of course only half of the story. When you or users actually call the function with value of some concrete type, that type has to satisfy the specified <code>PartialOrd&lt;i32&gt;</code> trait bound.</p>\n"}], "owner": {"reputation": 95, "user_id": 4410276, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/05868aa4f5d0bcbf9557b8e173a7c7da?s=128&d=identicon&r=PG&f=1", "display_name": "weary", "link": "https://stackoverflow.com/users/4410276/weary"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 288, "favorite_count": 0, "accepted_answer_id": 59546104, "answer_count": 1, "score": 0, "last_activity_date": 1577809471, "creation_date": 1577806757, "question_id": 59546024, "link": "https://stackoverflow.com/questions/59546024/in-rust-what-trait-do-i-need-to-compare-a-generic-to-an-integer", "title": "In Rust, what trait do I need to compare a generic to an integer", "body": "<p>How can I compare the result of a calculation to a generic?\nT is always some unsigned integer type(u64, u32, etc), so the in the snippet should work, but how can i convince the rust-compiler?</p>\n\n<pre><code>fn reproduction&lt;T&gt;(val: T) -&gt; bool\nwhere\n    T: PartialOrd\n{\n    let var_of_type_integer = 7; // actually the result of a calculation\n    if val &lt; var_of_type_integer { // ERROR: expected type parameter, found integer\n        return true;\n    }\n    false\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "edited": false, "score": 2, "creation_date": 1577817264, "post_id": 59545450, "comment_id": 105263999, "body": "Maybe a hint that this will not work: <a href=\"https://github.com/rust-lang/rust/issues/40666\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/40666</a> ."}, {"owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "reply_to_user": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "edited": false, "score": 0, "creation_date": 1577819011, "post_id": 59545450, "comment_id": 105264400, "body": "Hah, thanks! I think this is the actual <i>answer</i> to this problem :("}], "answers": [{"comments": [{"owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "edited": false, "score": 0, "creation_date": 1577815455, "post_id": 59546807, "comment_id": 105263488, "body": "Thanks, however as stated in my question, I do <i>not</i> want to bind <code>x1</code>, ... explicitly."}, {"owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "reply_to_user": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "edited": false, "score": 0, "creation_date": 1577816657, "post_id": 59546807, "comment_id": 105263828, "body": "Sorry you are right, I misinterpreted your statement. Thanks for clarifying."}], "tags": [], "owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "is_accepted": false, "score": 1, "last_activity_date": 1577811939, "creation_date": 1577811939, "answer_id": 59546807, "question_id": 59545450, "link": "https://stackoverflow.com/questions/59545450/how-to-access-an-enum-variants-field-without-explicitly-binding-it-during-match/59546807#59546807", "title": "How to access an enum variant&#39;s field without explicitly binding it during match?", "body": "<p>I think the following could help:</p>\n\n<pre><code>fn f(e: &amp;E) {\n  match e {\n   E::A {x1, .. } =&gt; {dbg!(x1);},\n    _ =&gt; {}\n  };\n}\n</code></pre>\n\n<p><code>E::A {x1,..}</code> is short for <code>bad @ E::A {x1:x1, ..}</code> and binds the value of <code>bad.x1</code> to a new local variable <code>x1</code> that is available in the body scope.</p>\n"}, {"tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": false, "score": 1, "last_activity_date": 1577825972, "creation_date": 1577825972, "answer_id": 59548404, "question_id": 59545450, "link": "https://stackoverflow.com/questions/59545450/how-to-access-an-enum-variants-field-without-explicitly-binding-it-during-match/59548404#59548404", "title": "How to access an enum variant&#39;s field without explicitly binding it during match?", "body": "<p>You may use a macro with variadic args, so <strong>the compiler</strong> does the typing long names twice, and it binds as many as parameters you need. You may call your function inside the macro instead of println:  </p>\n\n<pre><code>    f!(&amp;e, x1);\n    f!(&amp;e, x2, x1);\n</code></pre>\n\n<pre><code>macro_rules! f {\n    ($e: expr, $( $name:ident ),+ ) =&gt; {\n        match $e {\n            E::A {   $($name),* , ..} =&gt; {\n                println!(\"{:?}\", &amp;[$($name),*]); // call your function here.\n            }\n            _ =&gt; {}\n        }\n    };\n}\n</code></pre>\n\n<p>Try it on the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=569c5fc4d8f360dad92665beb9e3055c\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n"}], "owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 268, "favorite_count": 0, "answer_count": 2, "score": 7, "last_activity_date": 1577826930, "creation_date": 1577803144, "last_edit_date": 1577816180, "question_id": 59545450, "link": "https://stackoverflow.com/questions/59545450/how-to-access-an-enum-variants-field-without-explicitly-binding-it-during-match", "title": "How to access an enum variant&#39;s field without explicitly binding it during match?", "body": "<p>Lets say I have an enum <code>E</code>, that might be auto-generated or outside of my control, with many variants and each variant having a number of fields.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum E {\n    A {\n        x1: u8,\n        x2: u8,\n        x3: u8,\n        // ...\n        x9: u8,\n    },\n    B,\n}\n</code></pre>\n\n<p>In reality the fields might be longer and neither nice to remember, nor nice to type. </p>\n\n<p>I now want to write functions that operate on (variants of) <code>E</code>. However, I am also lazy, <strong>and I don't want to repeat myself, <em>declaring</em> each used field explicitly when destructuring the enum*</strong>.</p>\n\n<p>Intuitively I would have expected the binding operator <code>@</code> to do the job here, but it only binds the whole enum <code>e</code>, not the given variant <code>E::A</code>. </p>\n\n<p>What is the shortest / most elegant way to achieve the following intention?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn f(e: &amp;E) {\n    match e {\n        bad @ E::A { .. } =&gt; dbg!(bad.x1),\n        _ =&gt; {}\n    }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>*Update</strong> since this has been brought up in two answers already, I do <strong>not</strong> want to match with <code>E::A { x1, .. }</code>, as this gets tedious when needing multiple fields with long names. In the example below, I would have to type out <code>some_other_field_with_an_impossibly_long_name</code> twice in my own code (once when binding it, once when using it), whereas in the hypothetical <code>bad @ E::A</code> case I'd have to type it out only once.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>match e {\n    E::A { some_field_with_a_long_name, some_other_field_with_an_impossibly_long_name, yet_another_field, .. } =&gt; dbg!(some_other_field_with_an_impossibly_long_name),\n    _ =&gt; {}\n}\n</code></pre>\n"}, {"tags": ["for-loop", "enums", "rust"], "answers": [{"comments": [{"owner": {"reputation": 109, "user_id": 11128127, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13efa329b269f6353dc2f3ed41c24c63?s=128&d=identicon&r=PG&f=1", "display_name": "St&#233;phane", "link": "https://stackoverflow.com/users/11128127/st%c3%a9phane"}, "edited": false, "score": 1, "creation_date": 1577802890, "post_id": 59545015, "comment_id": 105259599, "body": "Thanks it works, is it possible to simplify on one line ?"}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 109, "user_id": 11128127, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13efa329b269f6353dc2f3ed41c24c63?s=128&d=identicon&r=PG&f=1", "display_name": "St&#233;phane", "link": "https://stackoverflow.com/users/11128127/st%c3%a9phane"}, "edited": false, "score": 0, "creation_date": 1577803874, "post_id": 59545015, "comment_id": 105259948, "body": "@St&#233;phane sure, but I&#39;m not gonna tell you :P"}, {"owner": {"reputation": 109, "user_id": 11128127, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13efa329b269f6353dc2f3ed41c24c63?s=128&d=identicon&r=PG&f=1", "display_name": "St&#233;phane", "link": "https://stackoverflow.com/users/11128127/st%c3%a9phane"}, "edited": false, "score": 0, "creation_date": 1577809801, "post_id": 59545015, "comment_id": 105261824, "body": "It works fine ! Sorry I made a mistake, it is not round::half_up, simply round::floor. So don&#39;t need to + 1 or - 1"}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 1, "last_activity_date": 1577805771, "last_edit_date": 1577805771, "creation_date": 1577800666, "answer_id": 59545015, "question_id": 59544953, "link": "https://stackoverflow.com/questions/59544953/simplify-for-loop-for-the-iteration-using-the-crate-strum/59545015#59545015", "title": "Simplify for loop for the iteration (using the crate strum)", "body": "<p>You want <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.enumerate\" rel=\"nofollow noreferrer\"><code>Iterator::enumerate</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for (i, s) in Signs::iter().enumerate() {\n    if (i + 1) == sign_calc {\n        sign = s;\n        break;\n    }\n}\n</code></pre>\n\n<p>The <code>i</code> here is zero-based, so you may need to adjust the code accordingly.</p>\n\n<hr>\n\n<p>It can, indeed, be further simplified and made easier to read:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn myfunction(ddeg: f64) -&gt; Signs {\n    let sign_calc = round::half_up(ddeg / 30.0, 0) as usize;\n\n    Signs::iter().nth(sign_calc - 1).unwrap_or(Signs::Aries)\n}\n</code></pre>\n"}], "owner": {"reputation": 109, "user_id": 11128127, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13efa329b269f6353dc2f3ed41c24c63?s=128&d=identicon&r=PG&f=1", "display_name": "St&#233;phane", "link": "https://stackoverflow.com/users/11128127/st%c3%a9phane"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 59545015, "answer_count": 1, "score": 0, "last_activity_date": 1577805771, "creation_date": 1577800339, "last_edit_date": 1577801937, "question_id": 59544953, "link": "https://stackoverflow.com/questions/59544953/simplify-for-loop-for-the-iteration-using-the-crate-strum", "title": "Simplify for loop for the iteration (using the crate strum)", "body": "<p>I have a question about how a could simplify my code</p>\n\n<p>I am using the crate strum (<a href=\"https://docs.rs/strum/0.17.1/strum/\" rel=\"nofollow noreferrer\">https://docs.rs/strum/0.17.1/strum/</a>) and my question is how to simplify .iter() (macro EnumIter) to the array number without passing in a for loop</p>\n\n<p>Const file :</p>\n\n<pre><code>#[derive(Debug, Clone, Display, EnumIter)]\npub enum Signs {\n    Aries = 1,\n    Taurus = 2,\n    Gemini = 3,\n    Cancer = 4,\n    Leo = 5,\n    Virgo = 6,\n    Libra = 7,\n    Scorpio = 8,\n    Sagittarius = 9,\n    Capricorn = 10,\n    Aquarius = 11,\n    Pisces = 12,\n}\n</code></pre>\n\n<p>And the code:</p>\n\n<pre><code>extern crate math;\nuse crate::sweconst::Signs;\nuse math::round;\nuse strum::IntoEnumIterator;\npub fn myfunction(ddeg: f64) -&gt; Signs {\n    // Convert deg to sign 30\u00b0\n    let sign_calc = round::half_up(ddeg / 30.0, 0) as i32;\n\n    // And the ugly code\n    let mut sign = Signs::Aries;\n    let mut i = 0;\n    for s in Signs::iter() {\n        i += 1;\n        if i == sign_calc as i32 {\n            sign = s;\n            break;\n        }\n    }\n    sign\n}\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker", "borrowing"], "comments": [{"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1577799450, "post_id": 59544774, "comment_id": 105258548, "body": "In short, use &quot;interior mutability&#39;&quot;: <code>std::cell::RefCell</code>."}, {"owner": {"reputation": 21282, "user_id": 140367, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/686b6807a5e05236c44c9472e99e146a?s=128&d=identicon&r=PG", "display_name": "Tam&#225;s Szelei", "link": "https://stackoverflow.com/users/140367/tam%c3%a1s-szelei"}, "reply_to_user": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1577801426, "post_id": 59544774, "comment_id": 105259149, "body": "If using RefCell is the answer, I&#39;d appreciate a complete example of using it (and explaining why Cell isn&#39;t the right choice). I feel like the proposed duplicate is far more generic than this question and as a Rust beginner I have trouble applying those answers to my case."}, {"owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "edited": false, "score": 1, "creation_date": 1577802065, "post_id": 59544774, "comment_id": 105259326, "body": "<code>_dir_handles</code> should be <code>RefCell&lt;HashMap&lt;u64, String&gt;&gt;</code>, <code>_last_dir_handle</code>should be <code>Call&lt;u64&gt;</code>. <code>Cell</code> is for value (Copy) types, <code>RefCell</code> reference types (not <code>Copy</code>)."}], "owner": {"reputation": 21282, "user_id": 140367, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/686b6807a5e05236c44c9472e99e146a?s=128&d=identicon&r=PG", "display_name": "Tam&#225;s Szelei", "link": "https://stackoverflow.com/users/140367/tam%c3%a1s-szelei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 25, "favorite_count": 0, "closed_date": 1577804646, "answer_count": 0, "score": 0, "last_activity_date": 1577799192, "creation_date": 1577799192, "question_id": 59544774, "link": "https://stackoverflow.com/questions/59544774/how-to-modify-private-mutable-state-when-the-trait-dictates-a-non-mutable-self-r", "closed_reason": "Duplicate", "title": "How to modify private mutable state when the trait dictates a non-mutable self reference?", "body": "<p>I'm working on a fuse filesystem using <code>fuse_mt</code>. In the process, I'm implementing a <a href=\"https://github.com/wfraser/fuse-mt/blob/master/src/types.rs#L354\" rel=\"nofollow noreferrer\">method</a> of the <code>FileSystemMT</code> trait that looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    fn opendir(&amp;self, _req: RequestInfo, _path: &amp;Path, _flags: u32) -&gt; ResultOpen {\n        Err(libc::ENOSYS)\n    }\n</code></pre>\n\n<p><code>opendir</code> is supposed to return a unique handle that identifies the directory.</p>\n\n<p>In my implementation, I wanted to maintain a HashMap of directory handles that I can return when opendir is called. I have the following struct:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct RtFS {\n  pub rt: Box&lt;Artifactory&gt;,\n  pub repo: String,\n  _dir_handles: HashMap&lt;u64, String&gt;,\n  _last_dir_handle: u64,\n  _last_file_handle: u64,\n}\n</code></pre>\n\n<p>My plan was to initialize <code>_last_dir_handle</code> with a random value, then increment it for each opendir call. Then, I would store each allocated handle in the <code>_dir_handles</code> HashMap. This is where I ran into a problem. If I attempt to do this in the opendir function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>        self._last_dir_handle += 1;\n        self._dir_handles.insert(\n          self._last_dir_handle,\n          path.to_str().expect(\"Could not convert path\").to_string(),\n        );\n</code></pre>\n\n<p>then the borrow checker will (unsurprisingly) complain:</p>\n\n<pre><code>error[E0594]: cannot assign to `self._last_dir_handle` which is behind a `&amp;` reference                                                  \u2502\n   --&gt; src/rtfs.rs:117:7                                                                                                                \u2502\n    |                                                                                                                                   \u2502\n110 |   fn opendir(&amp;self, _req: RequestInfo, path: &amp;Path, _flags: u32) -&gt; ResultOpen {                                                  \u2502\n    |              ----- help: consider changing this to be a mutable reference: `&amp;mut self`                                            \u2502\n...                                                                                                                                     \u2502\n117 |       self._last_dir_handle += 1;                                                                                                 \u2502\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&amp;` reference, so the data it refers to cannot be written                            \u2502\n                                                                                                                                        \u2502\nerror[E0596]: cannot borrow `self._dir_handles` as mutable, as it is behind a `&amp;` reference                                             \u2502\n   --&gt; src/rtfs.rs:118:7                                                                                                                \u2502\n    |                                                                                                                                   \u2502\n110 |   fn opendir(&amp;self, _req: RequestInfo, path: &amp;Path, _flags: u32) -&gt; ResultOpen {                                                  \u2502\n    |              ----- help: consider changing this to be a mutable reference: `&amp;mut self`                                            \u2502\n...                                                                                                                                     \u2502\n118 |       self._dir_handles.insert(                                                                                                   \u2502\n    |       ^^^^^^^^^^^^^^^^^ `self` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n</code></pre>\n\n<p>Adding <code>mut</code> like the message suggests is not a solution because then the function won't match the trait. How can I solve this? I considered moving the state to the module level, but theoretically there could be more instances and I don't want them to clash. </p>\n"}, {"tags": ["mongodb", "rust"], "comments": [{"owner": {"reputation": 1750, "user_id": 11640763, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tS29l.png?s=128&g=1", "display_name": "stud3nt", "link": "https://stackoverflow.com/users/11640763/stud3nt"}, "edited": false, "score": 0, "creation_date": 1577796221, "post_id": 59544264, "comment_id": 105257453, "body": "I don&#39;t see any <code>connect</code> method being called to mongodb ? can you please check."}, {"owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "reply_to_user": {"reputation": 1750, "user_id": 11640763, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tS29l.png?s=128&g=1", "display_name": "stud3nt", "link": "https://stackoverflow.com/users/11640763/stud3nt"}, "edited": false, "score": 0, "creation_date": 1577797576, "post_id": 59544264, "comment_id": 105257899, "body": "You are correct, I can&#39;t see it either. Thanks for spotting that. I will have a look and report back."}, {"owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "edited": false, "score": 0, "creation_date": 1577797887, "post_id": 59544264, "comment_id": 105257996, "body": "It looks like; the following code connects:  let client = Client::with_options(client_options)?; but am looking into it, tricky finding info."}, {"owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "reply_to_user": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1577798520, "post_id": 59544264, "comment_id": 105258201, "body": "@edwardw not sure it does answer the question I have. Although I will look more into it.  Maybe I should log a new request for a working code example to connect and use a mongo db in rust?"}, {"owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "edited": false, "score": 0, "creation_date": 1577799987, "post_id": 59544264, "comment_id": 105258715, "body": "I have re-read the supplied link that edwardw shared (thanks). I have managed to reduce the errors. I moved the mongo code into a function, and called it from main. Im now only getting one error:"}, {"owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "edited": false, "score": 0, "creation_date": 1577800003, "post_id": 59544264, "comment_id": 105258720, "body": "The error is:   error: expected one of <code>(</code> or <code>&lt;</code>, found <code>TestMongo</code>   --&gt; src\\main.rs:10:11    | 10 | fn Result TestMongo() {    |           ^^^^^^^^^ expected one of <code>(</code> or <code>&lt;</code> here  error: aborting due to previous error  error: could not compile <code>mongo</code>."}, {"owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "edited": false, "score": 0, "creation_date": 1577800007, "post_id": 59544264, "comment_id": 105258722, "body": "I might have to revisit the general documentation on Rust and the book im reading. Thanks for the help so far. Should anyone have an answer for the last error that would be great. Regardless, im going to re-read the link edwardw shared and the book I have in more detail (not to mention more internet searching)."}], "owner": {"reputation": 69, "user_id": 12474884, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4188b135cafbbf47a9e4107f2abf5fd?s=128&d=identicon&r=PG&f=1", "display_name": "yogibear", "link": "https://stackoverflow.com/users/12474884/yogibear"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 41, "favorite_count": 0, "closed_date": 1577800050, "answer_count": 0, "score": 1, "last_activity_date": 1600428697, "creation_date": 1577795865, "last_edit_date": 1600428697, "question_id": 59544264, "link": "https://stackoverflow.com/questions/59544264/rust-mongo-mongo-sample-code-doesnt-seem-to-work", "closed_reason": "Duplicate", "title": "Rust Mongo - Mongo Sample Code Doesn&#39;t Seem to Work", "body": "<p>Hi I am new to Rust (started a few days ago). Just getting used to Mongo itself, mainly with Java and C#). Having got some of the basics sorted with Rust I want to incorporate Mongo DB.</p>\n<p>I found this page from 19th Dec this year; <a href=\"https://www.mongodb.com/blog/post/announcing-the-official-mongodb-rust-driver\" rel=\"nofollow noreferrer\">Offical Mongo Driver</a></p>\n<p>I have tried following the sample code on that page and I have the following dependancies in my Cargo.toml file.</p>\n<pre><code>[dependencies]\nmongodb = &quot;0.9.0&quot;\nbson = &quot;0.14.0&quot;\n</code></pre>\n<p>The Mongo.rs code file I have is as follows: -</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use mongodb::{Client, options::ClientOptions};\n\nfn main() {\n\n    // Parse a connection string into an options struct.\n    let mut client_options =\n        ClientOptions::parse(&quot;mongodb://localhost:27017&quot;)?;\n\n    // Manually set an option.\n    client_options.app_name = Some(&quot;My App&quot;.to_string());\n\n    // Get a handle to the deployment.\n    let client = Client::with_options(client_options)?;\n\n    // List the names of the databases in that deployment.\n    for db_name in client.list_database_names(None)? {\n        println!(&quot;{}&quot;, db_name);\n    }\n\n}\n</code></pre>\n<p>When using cargo build im seeing the following errors shown below. There is a lot in Rust itself im still not understanding. Presently working through the book &quot;The Rust Programming Language&quot; by Steve and Carol. But often when learning new things I like to take a side tour of something else and was expecting the code sample to work.</p>\n<p>Is anyone able to help, I would like to learn whats wrong and why on the way to getting the code working. I think it will be good way to learn more about Rust.</p>\n<p>Thanks in advance.</p>\n<pre><code>   Compiling mongo v0.1.0 (C:\\Users\\Russell\\OneDrive\\GIT_RUST\\RustMongo)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n --&gt; src\\main.rs:7:9\n  |\n7 |         ClientOptions::parse(&quot;mongodb://localhost:27017&quot;)?;\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `std::ops::Try` is not implemented for `()`\n  = note: required by `std::ops::Try::from_error`\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n  --&gt; src\\main.rs:13:18\n   |\n13 |     let client = Client::with_options(client_options)?;\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n  --&gt; src\\main.rs:16:20\n   |\n16 |     for db_name in client.list_database_names(None)? {\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `mongo`.\n\nTo learn more, run the command again with --verbose.\nPS C:\\Users\\Russell\\OneDrive\\GIT_RUST\\RustMongo&gt; cargo build\n    Updating crates.io index\n   Compiling mongo v0.1.0 (C:\\Users\\Russell\\OneDrive\\GIT_RUST\\RustMongo)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n --&gt; src\\main.rs:7:9\n  |\n7 |         ClientOptions::parse(&quot;mongodb://localhost:27017&quot;)?;\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `std::ops::Try` is not implemented for `()`\n  = note: required by `std::ops::Try::from_error`\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n  --&gt; src\\main.rs:13:18\n   |\n13 |     let client = Client::with_options(client_options)?;\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n  --&gt; src\\main.rs:16:20\n   |\n16 |     for db_name in client.list_database_names(None)? {\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `mongo`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 3, "last_activity_date": 1577797181, "creation_date": 1577797181, "answer_id": 59544434, "question_id": 59544106, "link": "https://stackoverflow.com/questions/59544106/how-to-solve-lifetime-must-be-valid-for-the-static-lifetime-in-calling-thread/59544434#59544434", "title": "How to solve &quot;lifetime must be valid for the static lifetime&quot; in calling thread methods", "body": "<p>If you examine the signature of <a href=\"https://doc.rust-lang.org/stable/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>std::thread::spawn</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;\nwhere\n    F: FnOnce() -&gt; T,\n    F: Send + 'static,\n    T: Send + 'static,\n</code></pre>\n\n<p>and its documentation closely:</p>\n\n<blockquote>\n  <p>The <code>'static</code> constraint means that the closure and its return value must have a lifetime of the whole program execution. The reason for this is that threads can detach and outlive the lifetime they have been created in.</p>\n</blockquote>\n\n<p>However, the <code>&amp;mut self</code> value closure closes over may not live long enough. One way to overcome that is to clone the value the closure actually uses:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Clone)]\nstruct SenderStruct;\n\n#[derive(Clone)]\nstruct ReceiveStruct;\n\nimpl SendReceiveStruct {\n    fn start(&amp;mut self) {\n        let (tx, rx): (Sender&lt;Option&lt;String&gt;&gt;, Receiver&lt;Option&lt;String&gt;&gt;) = channel();\n\n        thread::spawn({\n            let ss = self.m_ss.clone();\n            move || ss.send(tx)\n        });\n        self.m_recv_hndlr = Some(thread::spawn({\n            let sos = self.m_sos.clone();\n            move || sos.receive(rx)\n        }));\n    }\n\n    fn wait_for_recevier(&amp;mut self) {\n        self.m_recv_hndlr.take().unwrap().join();\n    }\n}\n</code></pre>\n\n<p>Except for several other minor issues, your code now compiles.</p>\n"}], "owner": {"reputation": 182, "user_id": 6602000, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e5dcac1b0f7352f6750312830062607?s=128&d=identicon&r=PG&f=1", "display_name": "Ronin Goda", "link": "https://stackoverflow.com/users/6602000/ronin-goda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 314, "favorite_count": 0, "accepted_answer_id": 59544434, "answer_count": 1, "score": 0, "last_activity_date": 1577797181, "creation_date": 1577794952, "question_id": 59544106, "link": "https://stackoverflow.com/questions/59544106/how-to-solve-lifetime-must-be-valid-for-the-static-lifetime-in-calling-thread", "title": "How to solve &quot;lifetime must be valid for the static lifetime&quot; in calling thread methods", "body": "<p>I am a Rust beginner and I can\u2019t get the following code to compile. I know this problem might be not new, tried searching all over the place but couldn't find a proper answer to the below problem.</p>\n\n<p>Basically i m trying to call methods from thread, and also using different structs for sending and receiving objects between the threads.</p>\n\n<pre><code>use std::{thread, time};\n\nstruct SenderStruct;\n\nimpl SenderStruct {\n    fn send(&amp;self, sndr: Sender&lt;(Option&lt;String&gt;)&gt;) {\n        let count = 0;\n        loop {\n            sndr.send(Some(String::from(\"Hello\"))).unwrap();\n            thread::sleep(time::Duration::from_millis(1000));\n            count = count + 1;\n\n            if count == 50 {\n                break;\n            }\n        }\n\n        sndr.send(None);\n    }\n}\n\nstruct ReceiveStruct;\n\nimpl ReceiveStruct {\n    fn receive(&amp;self, rec: Receiver&lt;Option&lt;String&gt;&gt;) {\n        loop {\n            let recv_out = rec.recv().unwrap();\n            match recv_out {\n                Some(some_str) =&gt; println!(\"{}\", some_str),\n                None =&gt; break,\n            }\n        }\n    }\n}\n\nstruct SendReceiveStruct {\n    m_ss: SenderStruct,\n    m_sos: ReceiveStruct,\n    m_recv_hndlr: Option&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n\nimpl SendReceiveStruct {\n    fn new() -&gt; Self {\n        SendReceiveStruct {\n            m_ss: SenderStruct {},\n            m_sos: ReceiveStruct {},\n            m_recv_hndlr: None,\n        }\n    }\n\n    fn start(&amp;mut self) {\n        let (tx, rx): (Sender&lt;(Option&lt;String&gt;)&gt;, Receiver&lt;Option&lt;String&gt;&gt;) = channel();\n\n        thread::spawn(move || self.m_ss.send(tx));\n        self.m_recv_hndlr = Some(thread::spawn(move || self.m_sos.receive(rx)));\n    }\n\n    fn wait_for_recevier(&amp;mut self) {\n        self.m_recv_hndlr.unwrap().join();\n    }\n}\nfn main() {\n    println!(\"Hello, world!\");\n\n    let mut ubs = SendReceiveStruct::new();\n    ubs.start();\n\n    ubs.wait_for_recevier();\n}\n</code></pre>\n\n<p>But i m getting lifetime issues all over the place</p>\n\n<pre><code>$ cargo build\n   Compiling threads v0.1.0 (/root/learn-rust/threads)\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:55:23\n   |\n55 |         thread::spawn(move || self.m_ss.send(tx));\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 52:5...\n  --&gt; src/main.rs:52:5\n   |\n52 | /     fn start(&amp;mut self) {\n53 | |         let (tx, rx): (Sender&lt;(Option&lt;String&gt;)&gt;, Receiver&lt;Option&lt;String&gt;&gt;) = channel();\n54 | |\n55 | |         thread::spawn(move || self.m_ss.send(tx));\n56 | |         self.m_recv_hndlr = Some(thread::spawn(move || self.m_sos.receive(rx)));\n57 | |     }\n   | |_____^\n   = note: ...so that the types are compatible:\n           expected &amp;mut SendReceiveStruct\n              found &amp;mut SendReceiveStruct\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@src/main.rs:55:23: 55:49 self:&amp;mut SendReceiveStruct, tx:std::sync::mpsc::Sender&lt;std::option::Option&lt;std::string::String&gt;&gt;]` will meet its required lifetime bounds\n  --&gt; src/main.rs:55:9\n   |\n55 |         thread::spawn(move || self.m_ss.send(tx));\n</code></pre>\n\n<p>Any pointers (or other references) would really help, and also any other possible approaches for the above problem ?</p>\n"}, {"tags": ["rust", "iterator", "closures"], "comments": [{"owner": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "edited": false, "score": 1, "creation_date": 1577793167, "post_id": 59543625, "comment_id": 105256403, "body": "Does this answer your question? <a href=\"https://stackoverflow.com/questions/26368288/how-do-i-stop-iteration-and-return-an-error-when-iteratormap-returns-a-result\">How do I stop iteration and return an error when Iterator::map returns a Result::Err?</a>"}, {"owner": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "edited": false, "score": 0, "creation_date": 1577793249, "post_id": 59543625, "comment_id": 105256432, "body": "It seems that you&#39;d like to either return a <code>Vec&lt;DirEntry&gt;</code> if all results are successful or return the first error if any errors are found. The <code>collect()</code> trick that turns <code>Vec&lt;Result&lt;T, E&gt;</code> into <code>Result&lt;Vec&lt;T&gt;, E&gt;</code> in the linked question should do the trick."}, {"owner": {"reputation": 1, "user_id": 12631930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80604351d57e5e184c4797af1dbc8771?s=128&d=identicon&r=PG&f=1", "display_name": "DawidKubis", "link": "https://stackoverflow.com/users/12631930/dawidkubis"}, "reply_to_user": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "edited": false, "score": 0, "creation_date": 1577794470, "post_id": 59543625, "comment_id": 105256840, "body": "@justinas thanks, that&#39;s exactly what i need."}], "owner": {"reputation": 1, "user_id": 12631930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80604351d57e5e184c4797af1dbc8771?s=128&d=identicon&r=PG&f=1", "display_name": "DawidKubis", "link": "https://stackoverflow.com/users/12631930/dawidkubis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 31, "favorite_count": 0, "closed_date": 1577794420, "answer_count": 0, "score": 0, "last_activity_date": 1577792244, "creation_date": 1577792244, "question_id": 59543625, "link": "https://stackoverflow.com/questions/59543625/how-do-i-return-from-top-function-inside-a-closure", "closed_reason": "Duplicate", "title": "How do I return from top function inside a closure?", "body": "<p>Consider this code :</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::Result;\nuse std::fs::{read_dir, DirEntry};\n\nfn f() -&gt; Result&lt;Vec&lt;DirEntry&gt;&gt; {\n    read_dir(\"some_dir\")?\n        .map(|x| {\n            match x {\n                Ok(s) =&gt; s,\n                Err(e) =&gt; return Err(e),\n            }\n        })\n        .collect()\n}\n</code></pre>\n\n<p>gives me a compilation error : </p>\n\n<pre><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:9:26\n  |\n9 |                 Ok(s) =&gt; s,\n  |                          ^ expected enum `std::result::Result`, found struct `std::fs::DirEntry`\n  |\n  = note: expected type `std::result::Result&lt;_, std::io::Error&gt;`\n             found type `std::fs::DirEntry`\n</code></pre>\n\n<p>This makes sense, since I am returning inside a closure so the <code>return Err(e)</code> is a return of the closure not the <code>f</code> function. How do I do this correctly though?\nI don't want to use <code>for</code> loops, as I am trying to do this functionally.\nMy first attempt was writing something like <code>.map(|x| x?)</code> but of course that doesn't work for the same reasons.\nPlease help.</p>\n"}, {"tags": ["rust", "rust-actix", "actix-web"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578067850, "post_id": 59543184, "comment_id": 105329651, "body": "It&#39;s hard to answer your question because it doesn&#39;t include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. We can&#39;t tell what crates (and their versions), types, traits, fields, etc. are present in the code. It would make it easier for us to help you if you try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project, then <a href=\"https://stackoverflow.com/posts/59543184/edit\">edit</a> your question to include the additional info. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MRE tips</a> you can use to reduce your original code for posting here. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578068213, "post_id": 59543184, "comment_id": 105329819, "body": "It looks like your question might be answered by the answers of <a href=\"https://stackoverflow.com/q/30661046/155423\">How do I return an instance of a trait from a method?</a>; <a href=\"https://stackoverflow.com/q/52001592/155423\">Why can impl trait not be used to return multiple / conditional types?</a>; <a href=\"https://stackoverflow.com/q/39482131/155423\">Is it possible to use <code>impl Trait</code> as a function&#39;s return type in a trait definition?</a>. If not, please <b><a href=\"https://stackoverflow.com/posts/59543184/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 1290, "user_id": 3950006, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c1299133342d886c09212b760cf23de9?s=128&d=identicon&r=PG&f=1", "display_name": "Rasmus Hansen", "link": "https://stackoverflow.com/users/3950006/rasmus-hansen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578068515, "post_id": 59543184, "comment_id": 105329980, "body": "MRE created at <a href=\"https://github.com/zlepper/actix_web_mre\" rel=\"nofollow noreferrer\">github.com/zlepper/actix_web_mre</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578068600, "post_id": 59543184, "comment_id": 105330034, "body": "<a href=\"https://meta.stackoverflow.com/q/380194/155423\">To make Stack Overflow a useful resource for future visitors beyond the context of your repository</a>, please <a href=\"https://stackoverflow.com/posts/59543184/edit\">edit</a> your question to add a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> in the question itself, in addition to the link to your repository."}, {"owner": {"reputation": 1290, "user_id": 3950006, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c1299133342d886c09212b760cf23de9?s=128&d=identicon&r=PG&f=1", "display_name": "Rasmus Hansen", "link": "https://stackoverflow.com/users/3950006/rasmus-hansen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578068753, "post_id": 59543184, "comment_id": 105330122, "body": "Please calm down with all that. I&#39;m working on that, i can only type so fast :)"}], "answers": [{"tags": [], "owner": {"reputation": 24, "user_id": 8736487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff8bfb5b5948eb801339f4b1b9a5c623?s=128&d=identicon&r=PG&f=1", "display_name": "Fazer", "link": "https://stackoverflow.com/users/8736487/fazer"}, "is_accepted": true, "score": 1, "last_activity_date": 1578075864, "last_edit_date": 1578075864, "creation_date": 1578073429, "answer_id": 59583040, "question_id": 59543184, "link": "https://stackoverflow.com/questions/59543184/how-to-return-a-mapped-future-in-an-actix-web-fromrequest-trait-implementation/59583040#59583040", "title": "How to return a mapped future in an actix_web FromRequest trait implementation?", "body": "<p>FnOnce is a trait and as such doesn't have a known size at compile time. However we can wrap it in a Box, which has a known size, to make it compile:</p>\n\n<pre><code>impl ::actix_web::FromRequest for Box&lt;dyn SessionRepository&gt; {\n    type Error = ::actix_web::Error;\n    type Future = ::futures::future::MapOk&lt;\n        ::futures::future::Ready&lt;Result&lt;RealSessionRepository, Self::Error&gt;&gt;,\n        Box&lt;dyn FnOnce(RealSessionRepository) -&gt; Box&lt;(dyn SessionRepository)&gt;&gt;,\n    &gt;;\n    type Config = ();\n\n    fn from_request(\n        req: &amp;::actix_web::HttpRequest,\n        payload: &amp;mut actix_web::dev::Payload,\n    ) -&gt; Self::Future {\n        RealSessionRepository::from_request(&amp;req, payload).map_ok(Box::new(|dep| Box::new(dep)))\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1290, "user_id": 3950006, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c1299133342d886c09212b760cf23de9?s=128&d=identicon&r=PG&f=1", "display_name": "Rasmus Hansen", "link": "https://stackoverflow.com/users/3950006/rasmus-hansen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 599, "favorite_count": 0, "closed_date": 1578073618, "accepted_answer_id": 59583040, "answer_count": 1, "score": 1, "last_activity_date": 1578075864, "creation_date": 1577789986, "last_edit_date": 1578068702, "question_id": 59543184, "link": "https://stackoverflow.com/questions/59543184/how-to-return-a-mapped-future-in-an-actix-web-fromrequest-trait-implementation", "closed_reason": "Duplicate", "title": "How to return a mapped future in an actix_web FromRequest trait implementation?", "body": "<p>I have the following implementation of the  actix_web <code>FromRequest</code> trait:</p>\n\n<pre><code>impl ::actix_web::FromRequest for Box&lt;dyn SessionRepository&gt; {\n    type Error = ::actix_web::Error;\n    type Future =\n        ::futures::future::MapOk&lt;::futures::future::Ready&lt;Result&lt;Self, Self::Error&gt;&gt;, ???&gt;;\n    type Config = ();\n\n    fn from_request(\n        req: &amp;::actix_web::HttpRequest,\n        payload: &amp;mut actix_web::dev::Payload,\n    ) -&gt; Self::Future {\n        RealSessionRepository::from_request(&amp;req, payload).map_ok(|dep| Box::new(dep))\n    }\n}\n</code></pre>\n\n<p>As the return type is an <code>FnOnce</code>, I cannot figure out how to actually set the return type. According to the error message it should be <code>FnOnce&lt;(std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt;,)&gt;</code>, however that tells me that <code>fnOnce</code> is not valid because it's not a known size at compile time. </p>\n\n<p><code>RealSessionRepository::from_request</code> returns a future, also being an implementation of the <code>FromRequest</code> trait.</p>\n\n<p>Inserting the FnOnce definition like this:</p>\n\n<pre><code>impl ::actix_web::FromRequest for Box&lt;dyn SessionRepository&gt; {\n    type Error = ::actix_web::Error;\n    type Future = ::futures::future::MapOk&lt;\n        ::futures::future::Ready&lt;Result&lt;Self, Self::Error&gt;&gt;,\n        FnOnce(RealSessionRepository) -&gt; Box&lt;(dyn SessionRepository + 'static)&gt;,\n    &gt;;\n    type Config = ();\n\n    fn from_request(\n        req: &amp;::actix_web::HttpRequest,\n        payload: &amp;mut actix_web::dev::Payload,\n    ) -&gt; Self::Future {\n        RealSessionRepository::from_request(&amp;req, payload).map_ok(|dep| Box::new(dep))\n    }\n}\n</code></pre>\n\n<p>gives the following set of error messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)` cannot be known at compilation time\n  --&gt; api-server\\src\\db\\sessions.rs:32:6\n   |\n32 | impl ::actix_web::FromRequest for Box&lt;dyn SessionRepository&gt; {\n   |      ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: required because of the requirements on the impl of `core::future::future::Future` for `futures_util::future::try_future::map_ok::MapOk&lt;futures_util::future::ready::Ready&lt;std::result::Result&lt;std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt;, actix_web::Error&gt;&gt;, (dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)&gt;`\n\nerror[E0277]: expected a `std::ops::FnOnce&lt;(std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt;,)&gt;` closure, found `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)`\n  --&gt; api-server\\src\\db\\sessions.rs:32:6\n   |\n32 | impl ::actix_web::FromRequest for Box&lt;dyn SessionRepository&gt; {\n   |      ^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce&lt;(std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt;,)&gt;` closure, found `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)`\n   |\n   = help: the trait `std::ops::FnOnce&lt;(std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt;,)&gt;` is not implemented for `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)`\n   = note: required because of the requirements on the impl of `core::future::future::Future` for `futures_util::future::try_future::map_ok::MapOk&lt;futures_util::future::ready::Ready&lt;std::result::Result&lt;std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt;, actix_web::Error&gt;&gt;, (dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)&gt;`\n\nerror[E0277]: the size for values of type `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)` cannot be known at compilation time\n  --&gt; api-server\\src\\db\\sessions.rs:34:5\n   |\n34 | /     type Future = ::futures::future::MapOk&lt;\n35 | |         ::futures::future::Ready&lt;Result&lt;Self, Self::Error&gt;&gt;,\n36 | |         FnOnce(RealSessionRepository) -&gt; Box&lt;(dyn SessionRepository + 'static)&gt;,\n37 | |     &gt;;\n   | |______^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: required by `futures_util::future::try_future::map_ok::MapOk`\n\nerror[E0277]: the size for values of type `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)` cannot be known at compilation time\n  --&gt; api-server\\src\\db\\sessions.rs:40:5\n   |\n40 | /     fn from_request(\n41 | |         req: &amp;::actix_web::HttpRequest,\n42 | |         payload: &amp;mut actix_web::dev::Payload,\n43 | |     ) -&gt; Self::Future {\n44 | |         RealSessionRepository::from_request(&amp;req, payload).map_ok(|dep| Box::new(dep))\n45 | |     }\n   | |_____^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce(db::sessions::RealSessionRepository) -&gt; std::boxed::Box&lt;(dyn db::sessions::SessionRepository + 'static)&gt; + 'static)`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: required by `futures_util::future::try_future::map_ok::MapOk`\n</code></pre>\n\n<p>MRE is available at: <a href=\"https://github.com/zlepper/actix_web_mre\" rel=\"nofollow noreferrer\">https://github.com/zlepper/actix_web_mre</a> since it requires actix, which is not available on the rust playground. </p>\n\n<p>This is specially about how to handle this when i want a dynamic trait reference, in an associated type, which I do not own, and thus can't do a lot about changing. More specifically, how would i do it with an FnOnce, where the actual implementation is only generated at compile time (I would think).</p>\n\n<p>I know I can shorten the type definitions slightly so they are not fully qualified, however this is something I would like to generate using a macro, so as far as I know it is better to use the full types. </p>\n\n<p>Is there a better way to type out the return future? The current definition is quite hairy.. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3525, "user_id": 517529, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c2a5bc0633a2eef9274744bd273063a4?s=128&d=identicon&r=PG", "display_name": "hakunin", "link": "https://stackoverflow.com/users/517529/hakunin"}, "edited": false, "score": 0, "creation_date": 1577788216, "post_id": 59542731, "comment_id": 105254680, "body": "Thank you so much! I&#39;ll test it out and accept the answer later today."}], "tags": [], "owner": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "is_accepted": true, "score": 2, "last_activity_date": 1577787484, "creation_date": 1577787484, "answer_id": 59542731, "question_id": 59542448, "link": "https://stackoverflow.com/questions/59542448/how-to-send-websocket-event-asynchronously-using-ws-rs/59542731#59542731", "title": "How to send websocket event asynchronously using ws-rs?", "body": "<p>Adapted from the <a href=\"https://github.com/housleyjk/ws-rs/blob/master/examples/server.rs\" rel=\"nofollow noreferrer\">server example</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::thread;\nuse std::time;\n\nuse ws::listen;\n\nfn main() {\n    listen(\"127.0.0.1:3012\", |out| {\n        let out2 = out.clone();\n\n        // Periodic\n        thread::spawn(move || loop {\n            thread::sleep(time::Duration::from_secs(1));\n            if let Err(e) = out2.send(format!(\"{:?}\", time::Instant::now())) {\n                println!(\"Error sending a periodic message: {:?}\", e);\n            }\n        });\n\n        // Echo\n        move |msg| {\n            println!(\"Server got message {:?}. \", msg);\n            out.send(msg)\n        }\n    })\n    .expect(\"Failed to create a websocket server\");\n}\n</code></pre>\n\n<p><code>listen</code> gives you <code>Sender</code> (called <code>out</code> here) and expects you to return a closure that is executed whenever the server receives a message.</p>\n\n<p>However, you can clone the sender (<code>out2</code>), move it to another thread and send messages independently of client.</p>\n\n<p>Testing via websocat:</p>\n\n<pre><code>$ websocat ws://localhost:3012\nInstant { tv_sec: 1303759, tv_nsec: 406805996 }\nInstant { tv_sec: 1303760, tv_nsec: 407008101 }\nabc     # &lt;--- what I sent\nabc\nInstant { tv_sec: 1303761, tv_nsec: 407154068 }\n</code></pre>\n"}], "owner": {"reputation": 3525, "user_id": 517529, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c2a5bc0633a2eef9274744bd273063a4?s=128&d=identicon&r=PG", "display_name": "hakunin", "link": "https://stackoverflow.com/users/517529/hakunin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 59542731, "answer_count": 1, "score": 1, "last_activity_date": 1577787484, "creation_date": 1577786053, "question_id": 59542448, "link": "https://stackoverflow.com/questions/59542448/how-to-send-websocket-event-asynchronously-using-ws-rs", "title": "How to send websocket event asynchronously using ws-rs?", "body": "<p>Using the <a href=\"https://github.com/housleyjk/ws-rs\" rel=\"nofollow noreferrer\">ws-rs library</a>, how do I send a websocket message asynchronously?</p>\n\n<p>In the examples I see <code>on_message</code> being used to <em>reply</em> to a message but how would a server send a message out of the blue?</p>\n\n<p>For example:</p>\n\n<ul>\n<li>Client sends request to start processing data</li>\n<li>Server responds using <code>on_message</code> with \"yes I am starting to process your data\"</li>\n<li>Every 1% change server responds with an update</li>\n</ul>\n\n<p>In my case processing takes a long time and should report data in the meantime the user is going to be playing with while data is being processed so I really want the server to report the progress data while processing.</p>\n\n<p>If I do that in the <code>on_message</code>, it simply responds with a message at the end of processing which defeats the purpose of using websockets. <a href=\"https://github.com/housleyjk/ws-rs/issues/271\" rel=\"nofollow noreferrer\">See related issue on github</a>.</p>\n\n<p>I am open to switching the websocket library if there is another one that is simpler to use.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 920, "user_id": 6677437, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fdfe2432cdce6e35079355784c05993c?s=128&d=identicon&r=PG&f=1", "display_name": "asky", "link": "https://stackoverflow.com/users/6677437/asky"}, "is_accepted": true, "score": 3, "last_activity_date": 1583132784, "last_edit_date": 1583132784, "creation_date": 1577794737, "answer_id": 59544064, "question_id": 59542378, "link": "https://stackoverflow.com/questions/59542378/conditional-compilation-for-nightly-vs-stable-rust-or-compiler-version/59544064#59544064", "title": "Conditional compilation for &#39;nightly&#39; vs &#39;stable&#39; Rust or compiler version", "body": "<p>I recommend creating a <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\" rel=\"nofollow noreferrer\">feature</a> for your nightly-only code that is disabled by default, i.e. not included in</p>\n\n<p><code>Cargo.toml</code></p>\n\n<pre><code>[features]\ndefault= []\n</code></pre>\n\n<p>Since the feature is not default, compilation with the stable toolchain works out of the box. If you called it <code>nightly-features</code> you could use <code>#[cfg(feature = \"nightly-features\")]</code>. This method has the added benefit of allowing you (and your users) to test the nightly features independently of the compiler (i.e. answer the question: did the compiler break my code, or does my <code>nightly-features</code> code contain bugs?).</p>\n"}], "owner": {"reputation": 772, "user_id": 2177445, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/70a2a5ad356c78484d79a3ad4b99209f?s=128&d=identicon&r=PG", "display_name": "likebike", "link": "https://stackoverflow.com/users/2177445/likebike"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 346, "favorite_count": 0, "accepted_answer_id": 59544064, "answer_count": 1, "score": 1, "last_activity_date": 1583132784, "creation_date": 1577785791, "question_id": 59542378, "link": "https://stackoverflow.com/questions/59542378/conditional-compilation-for-nightly-vs-stable-rust-or-compiler-version", "title": "Conditional compilation for &#39;nightly&#39; vs &#39;stable&#39; Rust or compiler version", "body": "<p>I am using some Rust unstable features, but I still want to be able to compile a reduced version of my library with stable Rust.  I am happy to only include those unstable features when the compiler supports them, and exclude them when they are not supported.</p>\n\n<p>I thought it would be easy to achieve this goal using conditional compilation like <code>#[cfg(rust_version = \"nightly\")]</code>, but it seems like 'stable' vs 'nightly' are not <a href=\"https://doc.rust-lang.org/nightly/reference/conditional-compilation.html\" rel=\"nofollow noreferrer\">cfg options</a>.</p>\n\n<p>How do you guys perform conditional compilation based on 'stable' vs 'nightly', or based on the compiler version?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "edited": false, "score": 1, "creation_date": 1577795300, "post_id": 59540825, "comment_id": 105257130, "body": "Leaking means that the referenced <code>Box</code> will never be removed from memory later on."}], "tags": [], "owner": {"reputation": 2568, "user_id": 4411558, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90e851e46386fc187059016dd06bbd36?s=128&d=identicon&r=PG", "display_name": "\u5f20\u5b9e\u552f", "link": "https://stackoverflow.com/users/4411558/%e5%bc%a0%e5%ae%9e%e5%94%af"}, "is_accepted": false, "score": 0, "last_activity_date": 1577776327, "creation_date": 1577776327, "answer_id": 59540825, "question_id": 59540064, "link": "https://stackoverflow.com/questions/59540064/insert-constructed-string-into-vec-in-rust/59540825#59540825", "title": "Insert constructed string into Vec in Rust", "body": "<p>The problem is that <code>arr</code> only holds references, and the strings inside must be owned elsewhere. A possible fix is to simply leak the transient String you created inside the loop.</p>\n\n<pre><code>fn main() {\n    let mut arr = vec![\"_\"; 5];\n    for (i, chr) in \"abcde\".char_indices() {\n        arr[i] = Box::leak(Box::new(chr.to_string().repeat(3)));\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 920, "user_id": 6677437, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fdfe2432cdce6e35079355784c05993c?s=128&d=identicon&r=PG&f=1", "display_name": "asky", "link": "https://stackoverflow.com/users/6677437/asky"}, "edited": false, "score": 0, "creation_date": 1577836192, "post_id": 59540890, "comment_id": 105267457, "body": "While this solved the OP&#39;s problem, it should be noted that @wasmup&#39;s answer produces the same result using more idiomatic Rust"}], "tags": [], "owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "is_accepted": true, "score": 5, "last_activity_date": 1577776819, "creation_date": 1577776819, "answer_id": 59540890, "question_id": 59540064, "link": "https://stackoverflow.com/questions/59540064/insert-constructed-string-into-vec-in-rust/59540890#59540890", "title": "Insert constructed string into Vec in Rust", "body": "<p>The lifetime of <code>arr</code> is the scope of the <code>main</code> method while <code>chr.to_string()</code> is only valid in the body of the for loop. Assigning it causes the error.</p>\n\n<p>You can avoid this problem by using a <code>Vec&lt;String&gt;</code> instead of <code>Vec&lt;&amp;str&gt;</code>.</p>\n\n<pre><code>fn main() {\n  let mut arr = vec![\"_\".to_string(); 5];\n  for (i, chr) in \"abcde\".char_indices() {\n    arr[i] = chr.to_string().repeat(3);\n  }\n}\n</code></pre>\n\n<p>Here we see the String <code>\"_\".to_string()</code> copied five times (which is not very efficient). I suspect this is not the case in your real code.</p>\n"}, {"tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": false, "score": 4, "last_activity_date": 1577777913, "creation_date": 1577777913, "answer_id": 59541057, "question_id": 59540064, "link": "https://stackoverflow.com/questions/59540064/insert-constructed-string-into-vec-in-rust/59541057#59541057", "title": "Insert constructed string into Vec in Rust", "body": "<p>Using String try <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=374fc70d4a93a47f274a980fc6529c7e\" rel=\"nofollow noreferrer\">this</a> one liner too:  </p>\n\n<pre><code>let arr: Vec&lt;String&gt; = \"abcde\".chars().map(|c| c.to_string().repeat(3)).collect();\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 7543, "user_id": 1794051, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4fc6d765eadabca02bdd7b44d6504720?s=128&d=identicon&r=PG", "display_name": "val", "link": "https://stackoverflow.com/users/1794051/val"}, "is_accepted": false, "score": 1, "last_activity_date": 1577782692, "creation_date": 1577782692, "answer_id": 59541825, "question_id": 59540064, "link": "https://stackoverflow.com/questions/59540064/insert-constructed-string-into-vec-in-rust/59541825#59541825", "title": "Insert constructed string into Vec in Rust", "body": "<p>As others have mentioned, the <code>String</code> that you are creating <em>have</em> to be owned by someone, otherwise they end up being dropped. As the compiler detects that this drop occurs while your arrays still holds references to them, it will complain.</p>\n\n<p>You need to think about who needs to own these values. If your eventual array is the natural place for them to live, just <code>move</code> them there:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut arr = Vec::with_capacity(5);\n    for (i, chr) in \"abcde\".char_indices() {\n        arr.push(chr.to_string().repeat(3));\n    }\n}\n</code></pre>\n\n<p>If you absolutely need an array of <code>&amp;str</code>, you still need to maintain these values 'alive' for at least as long as the references themselves:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn i_only_consume_refs(data: Vec&lt;&amp;String&gt;) -&gt; () {}\n\nfn main() {\n    let mut arr = Vec::with_capacity(5);\n    for (i, chr) in \"abcde\".char_indices() {\n        arr.push(chr.to_string().repeat(3));\n    }\n    let refs = arr.iter().collect();\n    i_only_consume_refs(refs)\n}\n</code></pre>\n\n<p>Here, we are still moving all the created <code>String</code>s to the vector <code>arr</code>, and THEN taking references on its elements. This way, the vector of references is valid as long as <code>arr</code> (who owns the strings) is. </p>\n\n<p>TL;DR: Someone needs to own these <code>String</code>s while you keep references to them. You cannot create temporary strings, and only store the reference, otherwise you will have a reference to a dropped value, which is very bad indeed, and the compiler will not let you do that.</p>\n"}], "owner": {"reputation": 73, "user_id": 6036645, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-i8Q7oZ6d1NA/AAAAAAAAAAI/AAAAAAAAAEE/yulFb5FQK6g/photo.jpg?sz=128", "display_name": "Sam S.", "link": "https://stackoverflow.com/users/6036645/sam-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 357, "favorite_count": 0, "accepted_answer_id": 59540890, "answer_count": 4, "score": 1, "last_activity_date": 1577782692, "creation_date": 1577770991, "question_id": 59540064, "link": "https://stackoverflow.com/questions/59540064/insert-constructed-string-into-vec-in-rust", "title": "Insert constructed string into Vec in Rust", "body": "<p>Right now I am writing a program where I am updating a <code>Vec</code> with a string constructed based on conditions in a for loop. A (very contrived) simplified form of what I'm trying to do is the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut arr = vec![\"_\"; 5];\n    for (i, chr) in \"abcde\".char_indices() {\n        arr[i] = &amp;chr.to_string().repeat(3);\n    }\n}\n</code></pre>\n\n<p>However, I am getting the error <code>temporary value dropped while borrowed</code>. Any pointers on what to do here?</p>\n"}, {"tags": ["javascript", "rust", "rust-rocket"], "comments": [{"owner": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577773046, "post_id": 59539742, "comment_id": 105250012, "body": "Please provide the working (GET) and non-working code (fetch) too. Connection refused indicates that the client is connecting to a URL where nobody is listening, so you might actually use a different ip:port combination as target or you might try to connect from a different machine. I&#39;m not sure that you aware that connections to localhost only work on the actual machine where the server is running and not on some other machine."}, {"owner": {"reputation": 168, "user_id": 4358599, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hPFO9.jpg?s=128&g=1", "display_name": "Sanjay S B", "link": "https://stackoverflow.com/users/4358599/sanjay-s-b"}, "reply_to_user": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577773143, "post_id": 59539742, "comment_id": 105250027, "body": "You can see in my question that the server is running on my machine. Will add the code."}, {"owner": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577773359, "post_id": 59539742, "comment_id": 105250070, "body": "<i>&quot;You can see in my question that the server is running on my machine.&quot;</i> - Yes, you say that the server is running on your machine. But you don&#39;t say explicitly that the clients (browser, postman, your Javascript client) are running on the same machine too."}, {"owner": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577774035, "post_id": 59539742, "comment_id": 105250244, "body": "Code and error message don&#39;t really match. Code is using port 8000, error message and description of server say instead that port 4200 is used. Please explain this mismatch."}, {"owner": {"reputation": 168, "user_id": 4358599, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hPFO9.jpg?s=128&g=1", "display_name": "Sanjay S B", "link": "https://stackoverflow.com/users/4358599/sanjay-s-b"}, "reply_to_user": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577774170, "post_id": 59539742, "comment_id": 105250279, "body": "I have updated the server to run on different port. Still error persists. On any port the browser call works but the code with same url fails. If I try the same call from Postman it works too. Edited the question for uniformity."}, {"owner": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577774538, "post_id": 59539742, "comment_id": 105250357, "body": "You might check with strace (Linux) or similar tools on what your nodejs code is actually doing. Maybe you have a proxy configured which only affects the nodejs code (like as environment variable)? Maybe it is is physically the same machine but nodejs is running inside some container or similar (docker, lxc, virtual machine ...) where &quot;localhost&quot; is the container itself and not the interface the other tools consider localhost. Too much unknowns about your actual setup."}, {"owner": {"reputation": 168, "user_id": 4358599, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hPFO9.jpg?s=128&g=1", "display_name": "Sanjay S B", "link": "https://stackoverflow.com/users/4358599/sanjay-s-b"}, "reply_to_user": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577774844, "post_id": 59539742, "comment_id": 105250446, "body": "I am not using any sort of virtual machine. I am running the node js code and rust server from two different cmd windows which are on the same machine. The browser is also installed on the same machine and postman is also on the same machine. I am not using any proxy and there are no proxy related environment variables set."}, {"owner": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577775392, "post_id": 59539742, "comment_id": 105250574, "body": "Please check if your nodejs is able to access other URL (like google etc) to reduce the scope of your problem."}, {"owner": {"reputation": 168, "user_id": 4358599, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hPFO9.jpg?s=128&g=1", "display_name": "Sanjay S B", "link": "https://stackoverflow.com/users/4358599/sanjay-s-b"}, "reply_to_user": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577775553, "post_id": 59539742, "comment_id": 105250613, "body": "If I replace the localhost url with <code>http:&#47;&#47;dummy.restapiexample.com&#47;api&#47;v1&#47;employees</code>  it works. I get a response"}, {"owner": {"reputation": 89578, "user_id": 3081018, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z2NYm.png?s=128&g=1", "display_name": "Steffen Ullrich", "link": "https://stackoverflow.com/users/3081018/steffen-ullrich"}, "edited": false, "score": 0, "creation_date": 1577775885, "post_id": 59539742, "comment_id": 105250711, "body": "This is really strange. Then I don&#39;t know either what the problem can be."}, {"owner": {"reputation": 1865, "user_id": 2272617, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d37782227e26a130ced333e9a4409946?s=128&d=identicon&r=PG", "display_name": "Justin", "link": "https://stackoverflow.com/users/2272617/justin"}, "edited": false, "score": 1, "creation_date": 1579642400, "post_id": 59539742, "comment_id": 105832463, "body": "Have you resolved this issue? If you are using Rocket, I&#39;d like to suggest configuring the server to listen on 127.0.0.1 instead of localhost. By default it seems that localhost maps only to ::1 which makes it inaccessible over ipv4. The answer posted by nwpointer touches on this."}, {"owner": {"reputation": 168, "user_id": 4358599, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hPFO9.jpg?s=128&g=1", "display_name": "Sanjay S B", "link": "https://stackoverflow.com/users/4358599/sanjay-s-b"}, "edited": false, "score": 0, "creation_date": 1579673261, "post_id": 59539742, "comment_id": 105839788, "body": "I had not got the time to try this as I moved ahead using a temporary work around with curl and exec. using [::1] instead of localhost completely fine."}], "answers": [{"tags": [], "owner": {"reputation": 66, "user_id": 3291248, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0bfaedc17db945743c19d95de7374d3a?s=128&d=identicon&r=PG&f=1", "display_name": "nwpointer", "link": "https://stackoverflow.com/users/3291248/nwpointer"}, "is_accepted": true, "score": 4, "last_activity_date": 1578588293, "creation_date": 1578588293, "answer_id": 59668606, "question_id": 59539742, "link": "https://stackoverflow.com/questions/59539742/request-to-rust-rocket-server-getting-error-connection-refused-from-javascript-a/59668606#59668606", "title": "Request to rust rocket server getting error connection refused from JavaScript app", "body": "<p>Try hitting <a href=\"http://[::1]\" rel=\"nofollow noreferrer\">http://[::1]</a> instead of <a href=\"http://localhost\" rel=\"nofollow noreferrer\">http://localhost</a></p>\n\n<p>I ran into a similar issue recently trying to do performance testing on Rocket. Rocket as of v0.4.2 does not seem to respond correctly to both ipv4 and ipv6 requests.</p>\n\n<p><a href=\"https://github.com/SergioBenitez/Rocket/issues/541\" rel=\"nofollow noreferrer\">https://github.com/SergioBenitez/Rocket/issues/541</a>\n<a href=\"https://github.com/SergioBenitez/Rocket/issues/209\" rel=\"nofollow noreferrer\">https://github.com/SergioBenitez/Rocket/issues/209</a></p>\n\n<p>example:</p>\n\n<pre><code>const fetch = require(\"node-fetch\");\n\nvar requestOptions = {\n  method: \"GET\",\n  headers: { \"Content-Type\": \"application/json\" }\n};\n\nfetch(\"http://[::1]:4200/createOffer/1/license\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log(\"error\", error));\n</code></pre>\n"}], "owner": {"reputation": 168, "user_id": 4358599, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/hPFO9.jpg?s=128&g=1", "display_name": "Sanjay S B", "link": "https://stackoverflow.com/users/4358599/sanjay-s-b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 870, "favorite_count": 0, "accepted_answer_id": 59668606, "answer_count": 1, "score": 0, "last_activity_date": 1578588293, "creation_date": 1577768004, "last_edit_date": 1577774331, "question_id": 59539742, "link": "https://stackoverflow.com/questions/59539742/request-to-rust-rocket-server-getting-error-connection-refused-from-javascript-a", "title": "Request to rust rocket server getting error connection refused from JavaScript app", "body": "<p>I have a rust server running in my machine at localhost, port:4200. I am trying to make requests to this server using a JavaScript client that uses axios library. </p>\n\n<p>The code when run gives the following error:</p>\n\n<blockquote>\n  <p>Error: connect ECONNREFUSED 127.0.0.1:4200\n      at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1191:14)</p>\n</blockquote>\n\n<p>I tried rewriting the code to use fetch library. That is also returning a connection refused error.</p>\n\n<p>The API is working as required when tried from Postman. The Get call is working from the browser as well. Could not find out why the connection is refused for this call when calling from JavaScript. </p>\n\n<p>I have enabled CORS options in the rust server. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let options = rocket_cors::Cors::default();\n\n    rocket::ignite()\n        .mount(\"/\", routes![index, sign, generate])\n        .attach(options)\n        .launch();\n}\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>client code that is giving above error when run from my machine:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const fetch = require(\"node-fetch\");\n\nvar requestOptions = {\n  method: \"GET\",\n  headers: { \"Content-Type\": \"application/json\" }\n};\n\nfetch(\"http://localhost:4200/createOffer/1/license\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log(\"error\", error));\n</code></pre>\n\n<p>browser request that is working from my machine:\n<a href=\"http://localhost:4200/createOffer/1/license\" rel=\"nofollow noreferrer\">http://localhost:4200/createOffer/1/license</a></p>\n"}, {"tags": ["rust", "async-await"], "answers": [{"tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 6, "last_activity_date": 1577759351, "last_edit_date": 1577759351, "creation_date": 1577758702, "answer_id": 59538858, "question_id": 59538812, "link": "https://stackoverflow.com/questions/59538812/why-recursive-async-functions-require-static-parameters-in-rust/59538858#59538858", "title": "Why recursive async functions require &#39;static parameters in Rust?", "body": "<p>Trait objects (<code>dyn Trait</code>) will by default have a static lifetime, unless otherwise specified. Because of this, boxed futures (and other traits) without a specified lifetime cannot depend on borrowed data, unless that data is borrowed for the <code>'static</code> lifetime. (Which is what your error message complains about).</p>\n\n<p>To solve this, you can either specify the lifetime explicitly, or you can just use <code>'_</code>, in which case it will use the elided lifetime of the <code>n: &amp;usize</code> parameter:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>//        .--  will use elided lifetime from here\n//        v                      v--  give the future a non-'static lifetime\nfn foo(n: &amp;usize) -&gt; Pin&lt;Box&lt;dyn '_ + Future&lt;Output = usize&gt;&gt;&gt; {\n// or: fn foo&lt;'a&gt;(n: &amp;'a usize) -&gt; Pin&lt;Box&lt;dyn 'a + Future&lt;Output = usize&gt;&gt;&gt;\n    Box::pin(async move {\n        if *n &gt; 0 {\n            foo(&amp;n).await // &lt;-- no error, as the future lifetime now depends on the\n                          //     lifetime of n instead of having a 'static lifetime\n        } else {\n            0\n        }\n    })\n}\n</code></pre>\n"}], "owner": {"reputation": 2826, "user_id": 1575632, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/SPw2f.jpg?s=128&g=1", "display_name": "amin", "link": "https://stackoverflow.com/users/1575632/amin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 701, "favorite_count": 1, "accepted_answer_id": 59538858, "answer_count": 1, "score": 6, "last_activity_date": 1577759351, "creation_date": 1577758272, "question_id": 59538812, "link": "https://stackoverflow.com/questions/59538812/why-recursive-async-functions-require-static-parameters-in-rust", "title": "Why recursive async functions require &#39;static parameters in Rust?", "body": "<p>Given a simple async function:</p>\n\n<pre><code>async fn foo(n: usize) -&gt; usize {\n    if n &gt; 0 { foo(n - 1).await }\n    else { 0 }\n}\n</code></pre>\n\n<p>The compiler complains that <code>async fn</code> must be rewritten to return a boxed <code>dyn Future</code>.</p>\n\n<pre><code>\n| async fn foo(n: usize) -&gt; usize {\n|                           ^^^^^ recursive `async fn`\n  = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n\nFor more information about this error, try `rustc --explain E0733`.\n</code></pre>\n\n<hr>\n\n<p>Compiler explanation (<code>rustc --explain E0733</code>):  </p>\n\n<p>To achieve async recursion, the <code>async fn</code> needs to be desugared\nsuch that the <code>Future</code> is explicit in the return type:</p>\n\n<pre><code>use std::future::Future;\nfn foo_desugared(n: usize) -&gt; impl Future&lt;Output = ()&gt; {\n    async move {\n        if n &gt; 0 {\n            foo_desugared(n - 1).await;\n        }\n    }\n}\n</code></pre>\n\n<p>Finally, the future is wrapped in a pinned box:</p>\n\n<pre><code>use std::future::Future;\nuse std::pin::Pin;\nfn foo_recursive(n: usize) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = ()&gt;&gt;&gt; {\n    Box::pin(async move {\n        if n &gt; 0 {\n            foo_recursive(n - 1).await;\n        }\n    })\n}\n</code></pre>\n\n<p>The <code>Box&lt;...&gt;</code> ensures that the result is of known size,\nand the pin is required to keep it in the same place in memory.</p>\n\n<hr>\n\n<p>Now consider this code: </p>\n\n<pre><code>fn foo(n: &amp;usize) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = usize&gt;&gt;&gt; {\n    Box::pin(async move {\n        if *n &gt; 0 {\n            foo(&amp;n).await\n        } else {\n            0\n        }\n    })\n}\n</code></pre>\n\n<p>The compiler complains that the lifetime of <code>&amp;n</code> should be <code>'static</code>.</p>\n\n<pre><code>|   fn foo(n: &amp;usize) -&gt; Pin&lt;Box&lt;dyn Future&lt;Output = usize&gt;&gt;&gt; {\n|             ------ help: add explicit lifetime `'static` to the type of `n`: `&amp;'static usize`\n| /     Box::pin(async move {\n| |         if *n &gt; 0 {\n| |             foo(&amp;n).await\n| |         } else {\n| |             0\n| |         }\n| |     })\n| |______^ lifetime `'static` required\n\n</code></pre>\n\n<p><strong>Please help me understand what is going on</strong>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3, "user_id": 12628746, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-siyFjvmjgLg/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rc4s8GroBemnpKgr2OpKi9bplxhXA/photo.jpg?sz=128", "display_name": "12345654321", "link": "https://stackoverflow.com/users/12628746/12345654321"}, "edited": false, "score": 0, "creation_date": 1577755565, "post_id": 59538577, "comment_id": 105247210, "body": "Thank you very much! How do I know there is no better solution?"}, {"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "reply_to_user": {"reputation": 3, "user_id": 12628746, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-siyFjvmjgLg/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rc4s8GroBemnpKgr2OpKi9bplxhXA/photo.jpg?sz=128", "display_name": "12345654321", "link": "https://stackoverflow.com/users/12628746/12345654321"}, "edited": false, "score": 0, "creation_date": 1577755717, "post_id": 59538577, "comment_id": 105247241, "body": "It depends, what do you need for a better solution? This is typically how I solve this, and I&#39;ve yet to see a better pattern to solve this problem, based on how closures work in Rust."}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 2, "last_activity_date": 1577755478, "creation_date": 1577755478, "answer_id": 59538577, "question_id": 59538460, "link": "https://stackoverflow.com/questions/59538460/how-use-rc-refcell-in-rust-and-stdweb/59538577#59538577", "title": "How use Rc Refcell in rust (and stdweb)", "body": "<p>When using <code>Rc</code> with <code>move</code> closures, you need to clone <em>first</em>, and then move the variable into the closure. With the code you've written, you're first cloning the variable <em>after</em>  it has been moved into the closure, meaning that it is not available when the second closure tries to do the same.</p>\n\n<p>An example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let counter = Rc::new(RefCell::new(ClickCounter::new()));\n\n{\n    // Clone into a new variable outside of the closure.\n    let cloned_counter = counter.clone();\n\n    counter_div.add_event_listener(move |_: MouseDownEvent| {\n        // Note: We're no longer cloning here.\n        cloned_counter.borrow_mut().increment();\n    });\n}\n\n// ...\n\n{\n    // Clone the counter variable on line 1 again.\n    let cloned_counter = counter.clone();\n    upgrade_div.add_event_listener(move |_: MouseDownEvent| {\n        cloned_counter.borrow_mut().upgrade_click(upgrade);\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 3, "user_id": 12628746, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-siyFjvmjgLg/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rc4s8GroBemnpKgr2OpKi9bplxhXA/photo.jpg?sz=128", "display_name": "12345654321", "link": "https://stackoverflow.com/users/12628746/12345654321"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 59538577, "answer_count": 1, "score": 0, "last_activity_date": 1577755478, "creation_date": 1577753978, "question_id": 59538460, "link": "https://stackoverflow.com/questions/59538460/how-use-rc-refcell-in-rust-and-stdweb", "title": "How use Rc Refcell in rust (and stdweb)", "body": "<p>i have a litle problem with this code:</p>\n\n<p>I have two closure and I want the variable <em>counter</em> to be used in both of them.</p>\n\n<pre><code>fn main() {\n    stdweb::initialize();\n\n\n    let counter_div = document().query_selector(DIV_SELECTOR_NAME).unwrap().unwrap();\n    // create Rc RefCell struct here \n    let mut counter = Rc::new(RefCell::new(ClickCounter::new()));\n\n    counter_div.clone().add_event_listener(move |_: MouseDownEvent| {\n        // ERROR move How make this work?\n        counter.clone().borrow_mut().increment();\n    });\n\n\n    let upgrade_div = document().query_selector(UPGRADE_DIV_SELECTOR_NAME).unwrap().unwrap();\n    upgrade_div.clone().add_event_listener( move |_: MouseDownEvent|{\n\n       // ERROR move! \n       counter.clone().borrow_mut().upgrade_click(upgrade);\n    });\n\n\n    stdweb::event_loop();\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 39, "user_id": 11194430, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c1316fdc387b8402bbe135670efe71d?s=128&d=identicon&r=PG&f=1", "display_name": "picked name", "link": "https://stackoverflow.com/users/11194430/picked-name"}, "edited": false, "score": 0, "creation_date": 1577755038, "post_id": 59538404, "comment_id": 105247114, "body": "Thanks, But how can I turn an array into an iterator?"}, {"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "reply_to_user": {"reputation": 39, "user_id": 11194430, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c1316fdc387b8402bbe135670efe71d?s=128&d=identicon&r=PG&f=1", "display_name": "picked name", "link": "https://stackoverflow.com/users/11194430/picked-name"}, "edited": false, "score": 0, "creation_date": 1577755378, "post_id": 59538404, "comment_id": 105247173, "body": "That&#39;s not possible, as arrays to do implement the <code>IntoIterator</code> trait, like <code>Vec</code> does. So if you need to extend by exactly one value (like in your example), <code>std::iter::once</code> is probably best, otherwise if you don&#39;t already have an iterator you can use it&#39;s probably easiest to just use <code>Vec</code>."}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 1, "last_activity_date": 1577753145, "creation_date": 1577753145, "answer_id": 59538404, "question_id": 59538349, "link": "https://stackoverflow.com/questions/59538349/is-there-a-way-to-write-a-generic-function-that-will-extend-an-entity-by-an-arra/59538404#59538404", "title": "Is there a way to write a generic function that will extend an entity by an array in rust?", "body": "<p>The <code>Extend</code> trait lets you pass in any type that implements <code>IntoIterator</code> (including any iterator).</p>\n\n<p>The simplest iterator for a single value is <code><a href=\"https://doc.rust-lang.org/std/iter/fn.once.html\" rel=\"nofollow noreferrer\">std::iter::once</a>(value)</code>, which will yield that value exactly once. It will also move the value (like <code>Vec::into_iter</code> does), so you don't need for the type to be <code>Copy</code> or <code>Clone</code>. So the simplest way to extend with a single value is:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Clone)]\nstruct Q{}\n\nfn extending_function&lt;A: Extend&lt;Q&gt;&gt;(out: &amp;mut A) {\n   let p = Q{};\n   out.extend(std::iter::once(p));\n}\n</code></pre>\n"}], "owner": {"reputation": 39, "user_id": 11194430, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c1316fdc387b8402bbe135670efe71d?s=128&d=identicon&r=PG&f=1", "display_name": "picked name", "link": "https://stackoverflow.com/users/11194430/picked-name"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 36, "favorite_count": 0, "accepted_answer_id": 59538404, "answer_count": 1, "score": 0, "last_activity_date": 1577753145, "creation_date": 1577752584, "question_id": 59538349, "link": "https://stackoverflow.com/questions/59538349/is-there-a-way-to-write-a-generic-function-that-will-extend-an-entity-by-an-arra", "title": "Is there a way to write a generic function that will extend an entity by an array in rust?", "body": "<p>My goal is to write a function that looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Clone)]\nstruct Q{}\n\nfn extending_function&lt;A: Extend&lt;Q&gt;&gt;(out: &amp;mut A) {\n   let p = Q{};\n   out.extend(&amp;[p]);\n}\n</code></pre>\n\n<p><code>Vec</code> impls <code>Extend</code>, so since I can write the following code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn extending_function_vec(out: &amp;mut Vec&lt;Q&gt;) {\n   let p = Q{};\n   out.extend(vec![p].into_iter());\n}\n</code></pre>\n\n<p>or </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Copy, Clone)]\nstruct Q{}\nfn extending_function_vec(out: &amp;mut Vec&lt;Q&gt;) {\n   let p = Q{};\n   out.extend(&amp;[p]);\n}\n</code></pre>\n\n<p>Although here too, I have a small issue: <em>Either</em> Q has to be Copy or I have to stick it into a <code>vec</code>.</p>\n\n<p>But when I try to genericize it, the only way I could get it to work is to make my code look like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Copy, Clone)]\nstruct Q{}\n\nfn extending_function&lt;A: Extend&lt;Q&gt;&gt;(out: &amp;mut A) {\n   let p = Q{};\n   out.extend(vec![p].into_iter());\n}\n</code></pre>\n\n<p>Where I have to <em>both</em> use a <code>vec</code> <em>and</em> make Q copy.</p>\n\n<p>The issue is:</p>\n\n<ol>\n<li><code>Q</code> must be <code>Copy</code>. Even if I try <code>out.extend(vec![Q{}].into_iter().cloned());</code>, I get a syntax error.</li>\n<li>I have to put it into a <code>vec</code>. Is there a way to extend from a static array?</li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 746, "user_id": 4206430, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f3ec30c1016fb375912c7ae161847f34?s=128&d=identicon&r=PG&f=1", "display_name": "zbrojny120", "link": "https://stackoverflow.com/users/4206430/zbrojny120"}, "edited": false, "score": 0, "creation_date": 1577802548, "post_id": 59539580, "comment_id": 105259476, "body": "Yes, this seems to be exactly the thing addressed by <a href=\"https://github.com/rust-lang/rfcs/pull/2353\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/2353</a>"}], "tags": [], "owner": {"reputation": 1684, "user_id": 627579, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3c7db7759a0aa3de754c4f64e993d4c1?s=128&d=identicon&r=PG", "display_name": "Nathan Jhaveri", "link": "https://stackoverflow.com/users/627579/nathan-jhaveri"}, "is_accepted": true, "score": 3, "last_activity_date": 1577766433, "creation_date": 1577766433, "answer_id": 59539580, "question_id": 59538071, "link": "https://stackoverflow.com/questions/59538071/the-trait-bound-t-stddefaultdefault-is-not-satisfied-when-using-phantomda/59539580#59539580", "title": "The trait bound `T: std::default::Default` is not satisfied when using PhantomData&lt;T&gt;", "body": "<p>Checkout the link from @mcarton, because <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=a843fc231252847d7b5f17c340d6c23f\" rel=\"nofollow noreferrer\">manually implementing the default trait does compile</a>.</p>\n\n<pre><code>//#[derive(Default)]\nstruct A&lt;T&gt; {\n    field: std::marker::PhantomData&lt;T&gt;\n}\n\nstruct B;\n\nimpl&lt;T&gt; Default for A&lt;T&gt; {\n    fn default() -&gt; Self {\n        Self { field: Default::default() }\n    }\n}\n\nfn main() {\n    let a = A::&lt;B&gt; {\n         ..Default::default()\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 746, "user_id": 4206430, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f3ec30c1016fb375912c7ae161847f34?s=128&d=identicon&r=PG&f=1", "display_name": "zbrojny120", "link": "https://stackoverflow.com/users/4206430/zbrojny120"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 868, "favorite_count": 0, "closed_date": 1577775293, "accepted_answer_id": 59539580, "answer_count": 1, "score": 3, "last_activity_date": 1600412368, "creation_date": 1577749833, "last_edit_date": 1600412368, "question_id": 59538071, "link": "https://stackoverflow.com/questions/59538071/the-trait-bound-t-stddefaultdefault-is-not-satisfied-when-using-phantomda", "closed_reason": "Duplicate", "title": "The trait bound `T: std::default::Default` is not satisfied when using PhantomData&lt;T&gt;", "body": "<p>In my current project, I am trying to write something that can be represented by this minimal example:</p>\n<pre><code>#[derive(Default)]\nstruct A&lt;T&gt; {\n    field: std::marker::PhantomData&lt;T&gt;\n}\n\nstruct B;\n\nfn main() {\n    let a = A::&lt;B&gt; {\n        ..Default::default()\n    };\n}\n</code></pre>\n<p>However, this code does not compile.</p>\n<pre><code>error[E0277]: the trait bound `B: std::default::Default` is not satisfied\n  --&gt; src/main.rs:10:11\n   |\n10 |         ..Default::default()\n   |           ^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `B`\n   |\n   = note: required because of the requirements on the impl of `std::default::Default` for `A&lt;B&gt;`\n   = note: required by `std::default::Default::default`\n\nerror: aborting due to previous error\n</code></pre>\n<p>Which for me, is a little bit strange, as <code>Default</code> is derived for <code>A</code> and for <code>PhantomData&lt;T&gt;</code>, so why does it matter if it's not implemented for <code>B</code>?</p>\n"}, {"tags": ["rust", "optional"], "answers": [{"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 3, "last_activity_date": 1601631927, "last_edit_date": 1601631927, "creation_date": 1577743319, "answer_id": 59537330, "question_id": 59537128, "link": "https://stackoverflow.com/questions/59537128/understand-rust-option-as-mut-method/59537330#59537330", "title": "Understand rust Option as_mut method", "body": "<p>Here Rust's <code>.</code> operator does what you mean and implicitly borrows the variable. If it didn't, working with non-borrowed values would be annoying, because a value declared as e.g. <code>let mut v = vec![1, 2, 3]</code> couldn't be manipulated with <code>v.push(4)</code> without first borrowing <code>v</code>. The same restriction would apply to fields, so if a struct <em>contained</em> a vector, you'd be unable to call <code>container.vec.push(element)</code> without first borrowing <code>container.vec</code> (even if <code>container</code> itself was already a reference).</p>\n<p>To prevent such noise C has two operators for field access, <code>.</code> and <code>-&gt;</code>, where the latter automatically dereferences. Rust's <code>.</code> intentionally goes ahead and does the borrowing or dereferencing needed for the method call to work.</p>\n"}], "owner": {"reputation": 169523, "user_id": 4983450, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/NR2ko.jpg?s=128&g=1", "display_name": "Psidom", "link": "https://stackoverflow.com/users/4983450/psidom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 392, "favorite_count": 0, "closed_date": 1577752182, "accepted_answer_id": 59537330, "answer_count": 1, "score": 1, "last_activity_date": 1601631927, "creation_date": 1577742022, "question_id": 59537128, "link": "https://stackoverflow.com/questions/59537128/understand-rust-option-as-mut-method", "closed_reason": "Duplicate", "title": "Understand rust Option as_mut method", "body": "<p>Given a rust option:</p>\n\n<pre><code>let mut x = Some(3);\n</code></pre>\n\n<p>Why can I directly call <code>x.as_mut()</code>? As I can see from <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut\" rel=\"nofollow noreferrer\">the doc</a>, <code>as_mut</code> is defined as:</p>\n\n<blockquote>\n  <p><code>pub fn as_mut(&amp;mut self) -&gt; Option&lt;&amp;mut T&gt;</code> Converts from &amp;mut\n  Option to Option&lt;&amp;mut T>.</p>\n</blockquote>\n\n<p>which expects the first parameter to be <code>&amp;mut self</code>, i.e. <code>&amp;mut Option&lt;T&gt;</code>. Shouldn't I use <code>(&amp;mut x).as_mut()</code> instead?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577744982, "post_id": 59537177, "comment_id": 105244966, "body": "Thanks for your answer! However, I just can not get it working with the code I linked in my question. This is a reproduction path: <a href=\"https://github.com/Jasperav/ClosureRust\" rel=\"nofollow noreferrer\">github.com/Jasperav/ClosureRust</a>, just 1 dependency and some code in main.rs. This is the error: expected an <code>FnOnce&lt;()&gt;</code> closure, found <code>()</code>. Also, are there references to the syntax you are using, because I haven&#39;t seen it in the Rust Book?: the use of move before || and omitting the || after calling the spawn method. Putting back the initial || in the spawn closure will throw a different error in my project though :("}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577780802, "post_id": 59537177, "comment_id": 105252165, "body": "@J.Doe You have an extra semicolon after the closure, so <code>spawn</code> doesn&#39;t receive the closure, but the implicit empty tuple. In my code a similar construct works because I put braces around the closure body, allowing you to add things other than the call to <code>closure_boi</code>. But note that there is no semicolon <i>after</i> the closing (inner) brace, which ensures that the closure (the last expression in the outer brace) is actually passed to <code>thread::spawn</code>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577781355, "post_id": 59537177, "comment_id": 105252324, "body": "<code>move</code> before <code>||</code> should be covered by any decent rust book, e.g. O&#39;Reilly&#39;s &quot;Programming Rust&quot; or the official book <a href=\"https://doc.rust-lang.org/stable/book/ch13-01-closures.html#capturing-the-environment-with-closures\" rel=\"nofollow noreferrer\">here</a>. It just tells the closure to move the captured variables into it, rather than keep a reference."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577781700, "post_id": 59537177, "comment_id": 105252429, "body": "<code>{ ... }</code> passed to <code>thread::spawn</code> is allowed because every Rust block is an expression evaluating to the last expression inside it, which in my code is the closure. The block enclosed in braces came useful to &quot;prepare&quot; the cloned <code>val</code> to move into the closure. I could have written the same thing <a href=\"https://pastebin.com/1yRVTz1j\" rel=\"nofollow noreferrer\">like this</a>, but the formulation in the answer is somewhat more idiomatic."}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1577807652, "post_id": 59537177, "comment_id": 105261214, "body": "Thanks for the extra explanation :)"}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 0, "last_activity_date": 1577781446, "last_edit_date": 1577781446, "creation_date": 1577742381, "answer_id": 59537177, "question_id": 59536752, "link": "https://stackoverflow.com/questions/59536752/change-value-in-other-thread-and-assert-the-later-in-the-main-thread/59537177#59537177", "title": "Change value in other thread and assert the later (in the &#39;main&#39; thread)", "body": "<p>There are several problems that can prevent the above code from working:</p>\n\n<ul>\n<li>Rust won't allow you to share a value between two threads if it can't prove that the threads that use it won't outlive the the value itself (in this case a scoep in <code>main</code>). The fix is to either heap-allocate the value and use <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a> to track it or to create the thread using <a href=\"https://docs.rs/crossbeam/0.7.3/crossbeam/thread/fn.scope.html\" rel=\"nofollow noreferrer\"><code>crossbeam_utils::thread::scope</code></a>, which does provide such a guarantee. Since you likely need the spawned thread to keep running in parallel, let's go for the <code>Arc</code>.</li>\n<li><code>SurfingDog</code> can't just contain a boolean, it must either contain a <em>reference</em> to a boolean, or the whole <code>SurfingDog</code> instance must be available in <code>main</code>. In the current code, the boolean modified by the other thread resides in the <code>SurfingDog</code> value <code>closure_boi</code> obtains from the closure it receives, which is a distinct value from the <code>val</code> checked in <code>main</code>.</li>\n<li>Rust won't allow the other thread to <em>modify</em> the value the first thread is reading without synchronization because that would constitute a <a href=\"https://doc.rust-lang.org/nomicon/races.html\" rel=\"nofollow noreferrer\">data race</a>. The fix is to either use a lock like <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a> or an atomic type like <a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html\" rel=\"nofollow noreferrer\"><code>AtomicBool</code></a>.</li>\n</ul>\n\n<p>Taking the above into account, here is a modification of the code that compiles and works (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e3e832f256fe3cb84a13c6a2e611905a\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::sync::{Arc, Mutex};\nuse std::thread::sleep;\nuse std::time::Duration;\n\ntrait Surf {\n    fn will_be_called_after_two_seconds(&amp;mut self);\n}\n\nstruct SurfingDog&lt;'a&gt;(&amp;'a Mutex&lt;bool&gt;);\n\nimpl&lt;'a&gt; Surf for SurfingDog&lt;'a&gt; {\n    fn will_be_called_after_two_seconds(&amp;mut self) {\n        let mut state = self.0.lock().unwrap();\n        *state = true;\n    }\n}\n\nfn closure_boi&lt;S: Surf&gt;(mut x: impl FnMut() -&gt; S) {\n    let mut surfer = x();\n    sleep(Duration::from_secs(2));\n    surfer.will_be_called_after_two_seconds();\n    sleep(Duration::from_secs(10)); // keep running\n}\n\nfn main() {\n    let val = Arc::new(Mutex::new(false));\n    std::thread::spawn({\n        let val = Arc::clone(&amp;val);\n        move || {\n            closure_boi(|| SurfingDog(&amp;*val));\n        }\n    });\n    sleep(Duration::from_secs(5));\n    assert_eq!(true, *val.lock().unwrap());\n}\n</code></pre>\n"}], "owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "accepted_answer_id": 59537177, "answer_count": 1, "score": 1, "last_activity_date": 1577781446, "creation_date": 1577739366, "question_id": 59536752, "link": "https://stackoverflow.com/questions/59536752/change-value-in-other-thread-and-assert-the-later-in-the-main-thread", "title": "Change value in other thread and assert the later (in the &#39;main&#39; thread)", "body": "<p>Link to playground (or below is the code as well): <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d6a8e4e6b9fa6aa647b2651e58402aa0\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d6a8e4e6b9fa6aa647b2651e58402aa0</a></p>\n\n<p>I want to write a test for code from a library. The code outside the <code>main</code> method has the same structure as the library (<a href=\"https://github.com/housleyjk/ws-rs/blob/master/src/lib.rs#L110\" rel=\"nofollow noreferrer\">https://github.com/housleyjk/ws-rs/blob/master/src/lib.rs#L110</a>). </p>\n\n<p>At some point, I want to supply a value that can be changed over time in a thread. I must assert that value later in a different thread. Hard part is, the instantiation of the type holding the changing value is constructed in a <code>FnMut</code> closure. </p>\n\n<p>I tried moving it, I tried <code>RefCell</code>, I tried <code>Arc</code> but I failed miserably. Any suggestions?</p>\n\n<pre><code>use std::thread::sleep;\nuse std::time::Duration;\n\ntrait Fly {}\n\ntrait Surf {\n    fn will_be_called_after_two_seconds(&amp;mut self);\n}\n\nstruct Roll;\n\nstruct FlyingBird;\n\nimpl Fly for FlyingBird {}\n\nstruct SurfingDog(bool);\n\nimpl Surf for SurfingDog {\n    fn will_be_called_after_two_seconds(&amp;mut self) {\n        self.0 = true;\n    }\n}\n\nfn closure_boi&lt;F, S&gt;(x: F) where F: FnMut(Roll) -&gt; S, S: Surf {}\n\nfn main() {\n    let val = false;\n\n    std::thread::spawn(|| {\n        closure_boi(|_| {\n            SurfingDog(val)\n        });\n    });\n\n    sleep(Duration::from_secs(5));\n\n    assert_eq!(true, val);\n}\n</code></pre>\n"}, {"tags": ["rust", "hyper"], "answers": [{"tags": [], "owner": {"reputation": 1480, "user_id": 3680119, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/x7ea1.png?s=128&g=1", "display_name": "Cormac O&#39;Brien", "link": "https://stackoverflow.com/users/3680119/cormac-obrien"}, "is_accepted": true, "score": 1, "last_activity_date": 1577833516, "last_edit_date": 1577833516, "creation_date": 1577832646, "answer_id": 59548968, "question_id": 59536493, "link": "https://stackoverflow.com/questions/59536493/append-new-line-character-to-hyper-body-struct/59548968#59548968", "title": "Append new line character to Hyper Body struct", "body": "<p>The closure passed to <code>map_ok()</code> returns <code>()</code>, not the <code>Vec&lt;u8&gt;</code> you are expecting.</p>\n\n<p>This is because <code>Vec::append()</code>, which you use to append the newline, returns <code>()</code>, not the modified <code>Vec</code>.</p>\n\n<p>Simple solution: modify the closure to return the <code>Vec&lt;u8&gt;</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>|c| {\n    let mut v = c.iter()\n        .map(|byte| byte.to_ascii_uppercase())\n        .collect::&lt;Vec&lt;u8&gt;&gt;();\n    v.append(&amp;mut newline);\n    v\n}\n</code></pre>\n\n<p>Since a newline is a one-byte character, it might make more sense to just add it to the <code>Vec</code> directly:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>v.push(b'\\n');\n</code></pre>\n\n<p>This avoids the unnecessary allocation of the newline <code>Vec</code> for every request.</p>\n"}], "owner": {"reputation": 179, "user_id": 2008301, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/9c2cfe5c1e45ed7d5052c4e8a81085d1?s=128&d=identicon&r=PG", "display_name": "Mike F", "link": "https://stackoverflow.com/users/2008301/mike-f"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 59548968, "answer_count": 1, "score": 1, "last_activity_date": 1577833516, "creation_date": 1577737637, "question_id": 59536493, "link": "https://stackoverflow.com/questions/59536493/append-new-line-character-to-hyper-body-struct", "title": "Append new line character to Hyper Body struct", "body": "<p>I am trying to modify the response that gets returned back from the echo example when using hyper. Their code sample is <a href=\"https://hyper.rs/guides/client/advanced/\" rel=\"nofollow noreferrer\">here</a>. </p>\n\n<p>The only thing that is different in my code is that I am trying to append a new line character to the end of my collection </p>\n\n<pre><code>(&amp;Method::POST, \"/echo/uppercase\") =&gt; {\n  let newLine = \"\\n\".as_bytes().to_vec();\n  let m = req.into_body()\n    .map_ok(|c| {\n        c.iter()\n        .map(|byte| byte.to_ascii_uppercase())\n        .collect::&lt;Vec&lt;u8&gt;&gt;()\n        .append(&amp;mut newLine) &lt;-- this line\n    });\n\n  *response.body_mut() = Body::wrap_stream(m);\n},\n</code></pre>\n\n<p>The compiler is returning </p>\n\n<pre><code>*response.body_mut() = Body::wrap_stream(m);\n                                         ^ the trait `std::convert::From&lt;()&gt;` is not implemented for `bytes::bytes::Bytes`\n</code></pre>\n\n<p>Does the append modify the type of the collection so that it is no longer considered a Future stream for the <code>wrap_stream</code> method? </p>\n\n<p>Also is this the preferred way to append things to a <code>Body</code> struct in hyper?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 1, "creation_date": 1577736719, "post_id": 59536290, "comment_id": 105242235, "body": "Remove the <code>&amp;</code> in the first match: <code>match ILIST[0].as_mut()</code>."}], "answers": [{"tags": [], "owner": {"reputation": 36, "user_id": 8885185, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/L390Q.jpg?s=128&g=1", "display_name": "BJF", "link": "https://stackoverflow.com/users/8885185/bjf"}, "is_accepted": true, "score": 1, "last_activity_date": 1577744549, "creation_date": 1577744549, "answer_id": 59537483, "question_id": 59536290, "link": "https://stackoverflow.com/questions/59536290/how-to-properly-reassign-a-value-in-an-array-of-options/59537483#59537483", "title": "How to properly reassign a value in an array of options?", "body": "<p>You don't need the reference:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>static mut ILIST: [Option&lt;u32&gt;; 5] = [None, None, None, None, None];\n\nfn main() {\n\n    unsafe {\n        ILIST[0] = Some(10);\n        // not a ref\n        match ILIST[0].as_mut() {\n            None =&gt; println!(\"Is none\"),\n            Some(n) =&gt; *n = 5,\n        }\n\n        match ILIST[0] {\n            None =&gt; println!(\"Is none\"),\n            Some(n) =&gt; assert_eq!(n, 5),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 419, "user_id": 3878723, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/566726f89bb35db7ce1c1b992c9513c6?s=128&d=identicon&r=PG&f=1", "display_name": "tyler124", "link": "https://stackoverflow.com/users/3878723/tyler124"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 47, "favorite_count": 0, "accepted_answer_id": 59537483, "answer_count": 1, "score": 0, "last_activity_date": 1577744549, "creation_date": 1577736357, "question_id": 59536290, "link": "https://stackoverflow.com/questions/59536290/how-to-properly-reassign-a-value-in-an-array-of-options", "title": "How to properly reassign a value in an array of options?", "body": "<p>Trying to update a value in an array of options:</p>\n\n<pre><code>static mut ILIST: [Option&lt;u32&gt;; 5] = [None, None, None, None, None];\n\nfn main() {\n\n    unsafe {\n        ILIST[0] = Some(10);\n\n        match &amp;ILIST[0].as_mut() {\n            None =&gt; println!(\"Is none\"),\n            Some(n) =&gt; {\n                *n = 5;\n            },\n        }\n\n        match ILIST[0] {\n            None =&gt; println!(\"Is none\"),\n            Some(n) =&gt; {\n                assert_eq!(n, 5);\n            },\n        }\n    }\n}\n</code></pre>\n\n<p>Gives the following compiler error:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:17:10\n   |\n17 |                 *n = 5;\n   |                      ^ expected `&amp;mut u32`, found integer\n   |\nhelp: consider dereferencing here to assign to the mutable borrowed piece of memory\n   |\n17 |                 **n = 5;\n   |                 ^^^\n</code></pre>\n\n<p>Updating the specified code to the following:</p>\n\n<pre><code>        Some(n) =&gt; {\n            **n = 5;\n        },\n</code></pre>\n\n<p>Results in another compiler error:</p>\n\n<pre><code>error[E0594]: cannot assign to `**n` which is behind a `&amp;` reference\n  --&gt; src/main.rs:17:5\n   |\n17 |                 **n = 5;\n   |                 ^^^^^^^ `n` is a `&amp;` reference, so the data it refers to cannot be written\n</code></pre>\n\n<p>Any insight into what's going wrong here? Thanks!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1211, "user_id": 10051099, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-zEhaK71cFsM/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7pY3uj2Rs4X15NaJSIsOYxNzX4COQ/mo/photo.jpg?sz=128", "display_name": "Yohei", "link": "https://stackoverflow.com/users/10051099/yohei"}, "edited": false, "score": 0, "creation_date": 1577762457, "post_id": 59535042, "comment_id": 105248217, "body": "Related doc: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md#limitation-to-freeinherent-functions\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>"}, {"owner": {"reputation": 1211, "user_id": 10051099, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-zEhaK71cFsM/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7pY3uj2Rs4X15NaJSIsOYxNzX4COQ/mo/photo.jpg?sz=128", "display_name": "Yohei", "link": "https://stackoverflow.com/users/10051099/yohei"}, "edited": false, "score": 0, "creation_date": 1577763249, "post_id": 59535042, "comment_id": 105248349, "body": "I understood that <code>impl trait</code> is now a syntax for unboxed abstraction, thus it cannot be used to abstract different functions, that essentially requires boxed abstraction."}], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1577736385, "post_id": 59535663, "comment_id": 105242120, "body": "I think you can eliminate the outer box: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=81d39fafa8b243bda31a9c13023a319c\" rel=\"nofollow noreferrer\">playground</a>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1577737530, "post_id": 59535663, "comment_id": 105242521, "body": "Thanks. Further, one can extract the creation of the closure into a helper function that (effectively) returns an <code>impl [trait behind StrFn]</code>. Unfortunately type aliases don&#39;t work for traits, so the function can&#39;t name a nice symbolic impl. Still, here it is: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=977a9f55cd8876a79da37ce936e869bb\" rel=\"nofollow noreferrer\">playground</a>."}, {"owner": {"reputation": 1211, "user_id": 10051099, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-zEhaK71cFsM/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7pY3uj2Rs4X15NaJSIsOYxNzX4COQ/mo/photo.jpg?sz=128", "display_name": "Yohei", "link": "https://stackoverflow.com/users/10051099/yohei"}, "edited": false, "score": 0, "creation_date": 1577763302, "post_id": 59535663, "comment_id": 105248354, "body": "I understood that impl trait is now a syntax for unboxed abstraction, thus it cannot be used to abstract different functions, that essentially requires boxed abstraction."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1604941740, "post_id": 59535663, "comment_id": 114494892, "body": "Looking at <a href=\"https://stackoverflow.com/a/64746208/1600898\">this nice answer</a> I learned that you can emulate trait aliases using a new trait with a blanket impl. In case anyone cares, here is the version that has a helper function and still avoids the ugly repetition of <code>Fn(...)</code>: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e5961bcec51b3f704f369c594a9e563c\" rel=\"nofollow noreferrer\">playground</a>."}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": false, "score": 0, "last_activity_date": 1577736541, "last_edit_date": 1577736541, "creation_date": 1577732432, "answer_id": 59535663, "question_id": 59535042, "link": "https://stackoverflow.com/questions/59535042/how-to-use-fn-trait-with-return-type-of-impl-trait-in-rust/59535663#59535663", "title": "How to use `Fn` trait with return type of `impl trait` in Rust?", "body": "<p>Besides the fact that <code>impl Trait</code> can only be used in limited places syntactically right now, semantically it only means there will be <em>one concrete type</em> in it place. It is not a license for heterogeneous types or dynamic dispatching.</p>\n\n<p>This can be done, but it is becoming unwieldy rather quickly:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type StrFn&lt;'a&gt; = &amp;'a dyn Fn(&amp;'static str) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;'static str&gt;&gt;;\n\nfn main() {\n    let f1: StrFn = &amp;|s: &amp;'static str| Box::new(s.split_whitespace());\n    let f2: StrFn = &amp;|s: &amp;'static str| Box::new(s.split_ascii_whitespace());\n    let fs = vec![f1, f2];\n\n    fs[0](\"rust 2020\").for_each(|s| println!(\"{}\", s));\n}\n</code></pre>\n\n<p>Maybe there are better ways.</p>\n"}, {"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1577743991, "post_id": 59535740, "comment_id": 105244684, "body": "The members of the array need to be trait objects, but they don&#39;t need to be <i>boxed</i> - the other answer gives an example. (The inner <code>Box</code> is unavoidable, though, as the signatures of the <code>Fn</code> trait bounds must be the same.)"}], "tags": [], "owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "is_accepted": false, "score": 0, "last_activity_date": 1577732912, "creation_date": 1577732912, "answer_id": 59535740, "question_id": 59535042, "link": "https://stackoverflow.com/questions/59535042/how-to-use-fn-trait-with-return-type-of-impl-trait-in-rust/59535740#59535740", "title": "How to use `Fn` trait with return type of `impl trait` in Rust?", "body": "<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace\" rel=\"nofollow noreferrer\"><code>str::split_whitespace</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.split_ascii_whitespace\" rel=\"nofollow noreferrer\"><code>str::split_ascii_whitespace</code></a> have different return types. You cannot construct an array of varying types. Instead, you can create an array of <a href=\"https://doc.rust-lang.org/1.30.0/book/2018-edition/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\">boxed trait objects</a>. This will perform dynamic dispatch where the specific method called is determined at runtime (instead of static dispatch which is where the specific method version is known at compile-time)</p>\n\n<p>Essentially, the goal is to have all the functions' signatures be:</p>\n\n<pre><code>for&lt;'a&gt; fn(&amp;'a str) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;'a str&gt; + 'a&gt;\n</code></pre>\n\n<p>which is a function that takes a <code>&amp;str</code> and returns some iterator over <code>&amp;str</code>s determined at runtime.</p>\n\n<p>Now, this is where it starts getting messy and I hope someone can suggest a much better way to do this.</p>\n\n<p>One way to get this to work is by creating wrapper functions around <code>str::split_whitespace</code> and <code>str::split_ascii_whitespace</code> to return a boxed trait instead of their respective <code>SplitWhitespace</code> and <code>SplitAsciiWhitespace</code> structs. I've used a helper macro to simply wrap the returned value from the function call in a Box</p>\n\n<pre><code>macro_rules! boxed_return {\n    ($fn_new:ident, $fn:path) =&gt; {\n        fn $fn_new&lt;'a&gt;(s: &amp;'a str) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;'a str&gt; + 'a&gt; {\n            Box::new($fn(s))\n        }\n    }\n}\n\nboxed_return!(split_whitespace_wrapper, str::split_whitespace);\nboxed_return!(split_ascii_whitespace_wrapper, str::split_ascii_whitespace);\n</code></pre>\n\n<p>Then we can simply create the array of splitter functions as follows</p>\n\n<pre><code>let funcs = [split_whitespace_wrapper, split_ascii_whitespace_wrapper];\n</code></pre>\n"}], "owner": {"reputation": 1211, "user_id": 10051099, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-zEhaK71cFsM/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7pY3uj2Rs4X15NaJSIsOYxNzX4COQ/mo/photo.jpg?sz=128", "display_name": "Yohei", "link": "https://stackoverflow.com/users/10051099/yohei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 117, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1577736541, "creation_date": 1577729334, "question_id": 59535042, "link": "https://stackoverflow.com/questions/59535042/how-to-use-fn-trait-with-return-type-of-impl-trait-in-rust", "title": "How to use `Fn` trait with return type of `impl trait` in Rust?", "body": "<p>I want to use <code>Fn</code> trait whose return type is <code>impl Trait</code>.\nFor example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let funcs: [&amp;Fn(&amp;str) -&gt; impl Iterator&lt;Item = &amp;str&gt;] =\n    [&amp;str::split_whitespace, &amp;str::split_ascii_whitespace];\n</code></pre>\n\n<p>However, this code cannot be compiled with the below error message:</p>\n\n<pre><code>`impl Trait` not allowed outside of function and inherent method return types\n</code></pre>\n\n<p>How should I do?</p>\n"}, {"tags": ["asynchronous", "compiler-errors", "rust", "traits", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 442, "user_id": 10357591, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/70fc4f478127a18ed0f3c6be00fe4bb3?s=128&d=identicon&r=PG&f=1", "display_name": "\ub108\ub97c \uc18d\uc600\ub2e4", "link": "https://stackoverflow.com/users/10357591/%eb%84%88%eb%a5%bc-%ec%86%8d%ec%98%80%eb%8b%a4"}, "edited": false, "score": 0, "creation_date": 1605979082, "post_id": 59532781, "comment_id": 114821741, "body": "I&#39;ve been stuck at this for so long. After reading this, I just did <code>cargo update</code> and it started working again. Thanks"}], "tags": [], "owner": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "is_accepted": true, "score": 5, "last_activity_date": 1577717878, "creation_date": 1577717878, "answer_id": 59532781, "question_id": 59532617, "link": "https://stackoverflow.com/questions/59532617/the-trait-bound-tokionettcpstreamtcpstream-tokio-ioasync-readasync/59532781#59532781", "title": "the trait bound `tokio::net::tcp::stream::TcpStream: tokio_io::async_read::AsyncRead` is not satisfied", "body": "<p><code>tokio-codec</code> is an outdated crate that depends on a pre-async/await version of Tokio (0.1.7)</p>\n\n<p>Codecs <a href=\"https://github.com/tokio-rs/tokio/tree/master/tokio-util/src/codec\" rel=\"noreferrer\">seem to have been moved</a> to <a href=\"https://crates.io/crates/tokio-util\" rel=\"noreferrer\">tokio-util</a> that depends on Tokio 0.2, so you should have more luck with that.</p>\n\n<p>Generally, when the compiler tells you that a type does not implement a trait, but in documentation you see it does, this means you have two different versions of the crate that defines the trait in your project (Tokio 0.1 and 0.2 in this case).</p>\n"}], "owner": {"reputation": 47, "user_id": 4027128, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56aebc4ee93b2b6ed126e771e4c923d4?s=128&d=identicon&r=PG&f=1", "display_name": "Henk de Marie", "link": "https://stackoverflow.com/users/4027128/henk-de-marie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1160, "favorite_count": 0, "accepted_answer_id": 59532781, "answer_count": 1, "score": 2, "last_activity_date": 1577717878, "creation_date": 1577717098, "question_id": 59532617, "link": "https://stackoverflow.com/questions/59532617/the-trait-bound-tokionettcpstreamtcpstream-tokio-ioasync-readasync", "title": "the trait bound `tokio::net::tcp::stream::TcpStream: tokio_io::async_read::AsyncRead` is not satisfied", "body": "<p>I can't compile a simple application to test tokio-codec.\ntokio::net::tcp::stream::TcpStream implements AsyncRead and -Write.\nBut when i try to compile the code below, i get the error below.\nI am still new to Rust and Tokio, so no doubt im missing something obvious (i hope)...</p>\n\n<p>main.rs:</p>\n\n<pre><code>use tokio::net::TcpListener;\nuse tokio::prelude::*;\nuse tokio_codec::{ Framed, LinesCodec };\n\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n  let mut listener = TcpListener::bind(\"127.0.0.1:12321\").await?;\n\n  loop {\n    let (socket, _addr) = listener.accept().await?;\n\n    tokio::spawn(async move {\n      let (_sink, mut stream) = Framed::new(socket, LinesCodec::new()).split();\n\n      while let Some(Ok(line)) = stream.next().await {\n        println!(\"{:?}\", line);\n      }\n    });\n  }\n}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[dependencies]\ntokio = { version = \"0.2.6\", features = [\"full\"] }\ntokio-codec = \"0.1.1\"\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>error[E0277]: the trait bound `tokio::net::tcp::stream::TcpStream: tokio_io::async_read::AsyncRead` is not satisfied\n  --&gt; src\\main.rs:14:36\n   |\n14 |       let (mut sink, mut stream) = Framed::new(socket, LinesCodec::new()).split();\n   |                                    ^^^^^^^^^^^ the trait `tokio_io::async_read::AsyncRead` is not implemented for `tokio::net::tcp::stream::TcpStream`\n   |\n   = note: required by `tokio_io::_tokio_codec::framed::Framed::&lt;T, U&gt;::new`\n\nerror[E0277]: the trait bound `tokio::net::tcp::stream::TcpStream: tokio_io::async_write::AsyncWrite` is not satisfied\n  --&gt; src\\main.rs:14:36\n   |\n14 |       let (mut sink, mut stream) = Framed::new(socket, LinesCodec::new()).split();\n   |                                    ^^^^^^^^^^^ the trait `tokio_io::async_write::AsyncWrite` is not implemented for `tokio::net::tcp::stream::TcpStream`\n   |\n   = note: required by `tokio_io::_tokio_codec::framed::Framed::&lt;T, U&gt;::new`\n\nerror[E0599]: no method named `split` found for type `tokio_io::_tokio_codec::framed::Framed&lt;tokio::net::tcp::stream::TcpStream, tokio_codec::lines_codec::LinesCodec&gt;` in the current scope\n  --&gt; src\\main.rs:14:75\n   |\n14 |       let (mut sink, mut stream) = Framed::new(socket, LinesCodec::new()).split();\n   |                                                                           ^^^^^ method not found in `tokio_io::_tokio_codec::framed::Framed&lt;tokio::net::tcp::stream::TcpStream, tokio_codec::lines_codec::LinesCodec&gt;`\n   |\n   = note: the method `split` exists but the following trait bounds were not satisfied:\n           `&amp;mut tokio_io::_tokio_codec::framed::Framed&lt;tokio::net::tcp::stream::TcpStream, tokio_codec::lines_codec::LinesCodec&gt; : tokio::io::util::async_buf_read_ext::AsyncBufReadExt`\n           `&amp;tokio_io::_tokio_codec::framed::Framed&lt;tokio::net::tcp::stream::TcpStream, tokio_codec::lines_codec::LinesCodec&gt; : tokio::io::util::async_buf_read_ext::AsyncBufReadExt`\n           `tokio_io::_tokio_codec::framed::Framed&lt;tokio::net::tcp::stream::TcpStream, tokio_codec::lines_codec::LinesCodec&gt; : tokio::io::util::async_buf_read_ext::AsyncBufReadExt`\n</code></pre>\n\n<p>How can i solve this?</p>\n"}, {"tags": ["rust", "webassembly"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1577706593, "post_id": 59529289, "comment_id": 105230236, "body": "Hi there! Could you link the exact video you were watching? Is it <a href=\"https://www.youtube.com/watch?v=p7DtoeuDT5Y\" rel=\"nofollow noreferrer\">this one</a>? It&#39;s only 1 day old, thus I&#39;m not sure. Please <a href=\"https://stackoverflow.com/posts/59529289/edit\">edit</a> your question to include the video. Thanks! :)"}, {"owner": {"reputation": 41, "user_id": 4676967, "user_type": "registered", "profile_image": "https://graph.facebook.com/10153162327650883/picture?type=large", "display_name": "Joey Vico", "link": "https://stackoverflow.com/users/4676967/joey-vico"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1577741746, "post_id": 59529289, "comment_id": 105243925, "body": "Yes. that is the tutorial"}, {"owner": {"reputation": 41, "user_id": 4676967, "user_type": "registered", "profile_image": "https://graph.facebook.com/10153162327650883/picture?type=large", "display_name": "Joey Vico", "link": "https://stackoverflow.com/users/4676967/joey-vico"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1577775918, "post_id": 59529289, "comment_id": 105250725, "body": "Solved: You use wasm-build via webpack.config.js this way: 1.- import the wasm-pack-plugin into the config file <code>const WasmPackPlugin = require(&quot;@wasm-tool&#47;wasm-pack-plugin&quot;);</code> 2.- add a new instance in the plugins section: <code>new WasmPackPlugin({ crateDirectory: path.resolve(__dirname, &quot;.&quot;) })</code> After this the pkg directory is generated :)"}], "answers": [{"tags": [], "owner": {"reputation": 41, "user_id": 4676967, "user_type": "registered", "profile_image": "https://graph.facebook.com/10153162327650883/picture?type=large", "display_name": "Joey Vico", "link": "https://stackoverflow.com/users/4676967/joey-vico"}, "is_accepted": true, "score": 0, "last_activity_date": 1577781558, "last_edit_date": 1577781558, "creation_date": 1577776197, "answer_id": 59540807, "question_id": 59529289, "link": "https://stackoverflow.com/questions/59529289/cargo-build-not-generating-the-pkg-directory-on-wasm-project/59540807#59540807", "title": "Cargo build not generating the pkg directory on wasm project", "body": "<p>You use <code>wasm-build</code> via <code>webpack.config.js</code> this way:</p>\n\n<ol>\n<li>import the <code>wasm-pack-plugin</code> into the config file\n<code>const WasmPackPlugin = require(\"@wasm-tool/wasm-pack-plugin\");</code></li>\n<li>add a new instance in the plugins section:\n<code>new WasmPackPlugin({ crateDirectory: path.resolve(__dirname, \".\") })</code>\nAfter this the pkg directory is generated :)</li>\n</ol>\n"}], "owner": {"reputation": 41, "user_id": 4676967, "user_type": "registered", "profile_image": "https://graph.facebook.com/10153162327650883/picture?type=large", "display_name": "Joey Vico", "link": "https://stackoverflow.com/users/4676967/joey-vico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 155, "favorite_count": 0, "accepted_answer_id": 59540807, "answer_count": 1, "score": 0, "last_activity_date": 1577781558, "creation_date": 1577701694, "question_id": 59529289, "link": "https://stackoverflow.com/questions/59529289/cargo-build-not-generating-the-pkg-directory-on-wasm-project", "title": "Cargo build not generating the pkg directory on wasm project", "body": "<p>As mentioned in the title the cargo build fails to generate the pkg directory. I am following a tutorial where I run the command <code>cargo build --target wasm-unknown-unknown</code> which runs fine and I get no errors there. Then in my index.js file I would need to import the wasm file with the following statement: <code>import './pkg/rust_3d_demo'</code>. But there is no pkg directory generated after running the cargo build command. The tutorial is only 3 days old on youtube by Mr Doug Milford so there are no version issues here and my rustc and rustup and cargo are all up to date. Any thoughts on the matter? Much appreciated.</p>\n\n<p>Here is my Cargo.toml file:</p>\n\n<pre><code>[package]\nname = \"rust-3d-demo\"\nversion = \"0.1.0\"\nauthors = [\"Steel\"]\nedition = \"2018\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nconsole_error_panic_hook = \"=0.1.5\"\njs-sys = \"0.3.19\"\nlazy_static = \"1.3.0\"\nnalgebra = \"0.18.0\"\nwasm-bindgen = \"0.2.44\"\n\n[dependencies.web-sys]\nversion = \"0.3.4\"\n\nfeatures = [\n'Document',\n'Element',\n'EventTarget',\n'HtmlCanvasElement',\n'MouseEvent',\n'WebGlBuffer',\n'WebGlProgram',\n'WebGlRenderingContext',\n'WebGlShader',\n'WebGlUniformLocation',\n'Window'\n]\n</code></pre>\n\n<p>and the devDependencies section in my package.json file here:</p>\n\n<pre><code>\"devDependencies\": {\n\"@wasm-tool/wasm-pack-plugin\": \"^1.1.0\",\n\"html-webpack-plugin\": \"^3.2.0\",\n\"text-encoding\": \"^0.7.0\",\n\"webpack\": \"^4.41.5\",\n\"webpack-cli\": \"^3.3.10\",\n\"webpack-dev-server\": \"^3.10.1\"\n}\n</code></pre>\n\n<p>Other info that might help:</p>\n\n<p><code>rustc --version</code> => rust 1.40.0 (73528e339 2019-12-16)</p>\n\n<p><code>rustup --version</code> => rust 1.21.1</p>\n\n<p><code>cargo --version</code> => cargo 1.40.0</p>\n"}, {"tags": ["rust", "type-inference"], "comments": [{"owner": {"reputation": 952, "user_id": 12521158, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8e745b4953a3ecbe3a1f7147089a7a7?s=128&d=identicon&r=PG&f=1", "display_name": "kopecs", "link": "https://stackoverflow.com/users/12521158/kopecs"}, "edited": false, "score": 0, "creation_date": 1577672575, "post_id": 59524738, "comment_id": 105220982, "body": "I <i>think</i> the function signature you want is <code>pub fn as_row&lt;&#39;a&gt;(self) -&gt; Row&lt;std::slice::Iter&lt;&#39;a, String&gt;, &amp;&#39;a String&gt;</code> although I&#39;m pretty sure you&#39;re going to run into some issues with the lifetimes, mainly the fact that you&#39;ll have an iterator into an array that&#39;ll get dropped the second you return from that function. I don&#39;t have any insight there, but someone more experienced than I likely will."}], "answers": [{"tags": [], "owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "is_accepted": true, "score": 4, "last_activity_date": 1577685229, "creation_date": 1577685229, "answer_id": 59526301, "question_id": 59524738, "link": "https://stackoverflow.com/questions/59524738/specialise-type-for-polymorphic-type/59526301#59526301", "title": "Specialise type for polymorphic type", "body": "<p>@kopecs is right. <code>Row&lt;std::slice::Iter&lt;'a, String&gt;, &amp;'a String&gt;</code> would be the correct return type but as they explained, it would cause lifetime issues since it would be returning references to a local variable.</p>\n\n<p><code>tui::widgets::Row</code> requires its type <code>D</code> to be an <code>Iterator</code>. The issue with using an array and <code>into_iter</code> on the array is that <code>IntoIterator</code> is only <a href=\"https://doc.rust-lang.org/stable/std/primitive.array.html\" rel=\"nofollow noreferrer\">\"implemented for &amp;[T; N] and &amp;mut [T; N]\"</a> i.e. references. This is best explained by <a href=\"https://www.reddit.com/r/rust/comments/7lhhj8/iterating_over_array/drm868b/\" rel=\"nofollow noreferrer\">this Reddit thread</a></p>\n\n<blockquote>\n  <p>any such implementation needing to move elements out of an array, which leaves holes in the array, ... can cause Bad Things to happen if a panic happens during iteration</p>\n  \n  <p>...</p>\n  \n  <p>I believe Vec gets around this by leaking memory in the case of a panic</p>\n</blockquote>\n\n<p>Anyways, one way to fix this is to just use <code>Vec</code> instead of arrays. Then, your iterator can own the String instead of only holding a reference to the String in the original array. The fixed method looks as follows:</p>\n\n<pre><code>pub fn as_row(self) -&gt; Row&lt;impl Iterator&lt;Item=String&gt;, String&gt; {  // &lt;-- correct return type\n    let ret = vec![  // &lt;-- use a Vec\n        format!(\"{}\", self.id),\n        format!(\"{}\", self.duration),\n        self.ticket_id.unwrap_or(String::new()),\n        self.note.unwrap_or(String::new()),\n    ];\n    Row::Data(ret.into_iter())\n}\n</code></pre>\n"}], "owner": {"reputation": 14781, "user_id": 630160, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/4445f21326af525a8ad19af7e3ae41a8?s=128&d=identicon&r=PG", "display_name": "epsilonhalbe", "link": "https://stackoverflow.com/users/630160/epsilonhalbe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 59526301, "answer_count": 1, "score": 3, "last_activity_date": 1577685229, "creation_date": 1577668795, "last_edit_date": 1577683512, "question_id": 59524738, "link": "https://stackoverflow.com/questions/59524738/specialise-type-for-polymorphic-type", "title": "Specialise type for polymorphic type", "body": "<p>I'm learning rust (coming from a haskell background).\nAnd I am struggling to use polymorphic types - where in haskell I would use type holes/GHC's type inference to figure out what the return type of a function is I am stuck in rust, to specialise a generic parameter.</p>\n\n<ul>\n<li><em>rustc</em>: 1.39.0</li>\n<li><em>cargo</em>: 1.39.0</li>\n<li><em>tui</em>-library: 0.8.0</li>\n<li><em>os</em>: linux mint</li>\n</ul>\n\n<h2>my current problem</h2>\n\n<p>Say I have a type describing a pomodoro-session (I store this data in a sqllite-database) and I want to display this data in a <a href=\"https://docs.rs/tui/0.8.0/tui/widgets/struct.Table.html\" rel=\"nofollow noreferrer\">tui-table</a></p>\n\n<pre><code>use tui::widgets::Row;\n\npub struct Pom {\n    pub id: i32,\n    pub duration: i64,\n    pub ticket_id: Option&lt;String&gt;,\n    pub note: Option&lt;String&gt;,\n}\n\nimpl Pom {\n    pub fn as_row(self) -&gt; ? {\n        let ret : [String; 4] = [\n            format!(\"{}\", self.id),\n            format!(\"{}\", self.duration),\n            self.ticket_id.unwrap_or(String::new()),\n            self.note.unwrap_or(String::new()),\n        ];\n        Row::Data(ret.into_iter())\n    }\n}\n</code></pre>\n\n<p>The compiler is quite helpful, when I substitute <code>?</code> with <code>i32</code> (as suggested in (<a href=\"https://stackoverflow.com/questions/21747136/\">How do I print the type of a variable in Rust?</a>), it tells me it expects something of type <code>Row</code>.</p>\n\n<p>I know that <code>Row</code> is an enum with the following definition:</p>\n\n<pre><code>pub enum Row&lt;D, I&gt; where\n    D: Iterator&lt;Item = I&gt;,\n    I: Display,  {\n    Data(D),\n    StyledData(D, Style),\n}\n</code></pre>\n\n<p>I've tried to insert incorrect types into the specialised type signature</p>\n\n<pre><code>pub fn as_row(self) -&gt; Row&lt;?,?&gt; {\n</code></pre>\n\n<p>i.e. substitute the <code>?</code> with <code>i32</code> again the compiler tells me that <code>i32</code> is not an iterator, but then I don't know how to further specialise.</p>\n\n<h2>For completeness sake</h2>\n\n<p>To make investigation easier here:\n<a href=\"https://github.com/epsilonhalbe/pomodorust/tree/4f8c4929201ed90ddaef8af8d21076dbde78782b\" rel=\"nofollow noreferrer\">https://github.com/epsilonhalbe/pomodorust/tree/4f8c4929201ed90ddaef8af8d21076dbde78782b</a> is a link to the project on github that can be cloned and built. The errors I have posted here can be reproduced by modyfing <code>src/database.rs</code> to make compilation fail</p>\n\n<h2>Bonus:</h2>\n\n<p>If there was something equivalent to <code>_</code> in haskell that could tell me what type the rust compiler is inferencing, then I could go pick apart the examples in the documentation</p>\n\n<pre><code>let row_style = Style::default().fg(Color::White);\nTable::new(\n        [\"Col1\", \"Col2\", \"Col3\"].into_iter(),\n        vec![\n            Row::StyledData([\"Row11\", \"Row12\", \"Row13\"].into_iter(), row_style),\n            Row::StyledData([\"Row21\", \"Row22\", \"Row23\"].into_iter(), row_style),\n            Row::StyledData([\"Row31\", \"Row32\", \"Row33\"].into_iter(), row_style),\n            Row::Data([\"Row41\", \"Row42\", \"Row43\"].into_iter())\n        ].into_iter()\n    )\n    .block(Block::default().title(\"Table\"))\n    .header_style(Style::default().fg(Color::Yellow))\n    .widths(&amp;[Constraint::Length(5), Constraint::Length(5), Constraint::Length(10)])\n    .style(Style::default().fg(Color::White))\n    .column_spacing(1);\n</code></pre>\n"}, {"tags": ["autocomplete", "rust", "clion"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 2, "last_activity_date": 1577653122, "creation_date": 1577653122, "answer_id": 59523231, "question_id": 59523165, "link": "https://stackoverflow.com/questions/59523165/rust-autocompletion-not-working-with-certain-crates/59523231#59523231", "title": "Rust autocompletion not working with certain crates", "body": "<p>Auto-completion engines have known issues with Rust macros and generated code.</p>\n\n<p>This is likely what is causing the issue with <code>pnet</code>.</p>\n\n<p><code>pnet::packet</code> is <a href=\"https://github.com/libpnet/libpnet/blob/dc2203a32a00981995b548eed4b4a90010e9491e/src/lib.rs\" rel=\"nofollow noreferrer\">defined as</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate pnet_packet;\n\n/// Support for packet parsing and manipulation.\npub mod packet {\n    pub use pnet_packet::*;\n}\n</code></pre>\n\n<p>with <code>pnet_packet</code> being a crate with a <a href=\"https://github.com/libpnet/libpnet/tree/dc2203a32a00981995b548eed4b4a90010e9491e/pnet_packet\" rel=\"nofollow noreferrer\"><code>build.rs</code> script</a> that generates most of the code.</p>\n\n<p>There is not much you can do to help your IDE as far as I know.</p>\n"}], "owner": {"reputation": 13, "user_id": 9313604, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/863fbf2ebe14c73d106622b0854e7e3e?s=128&d=identicon&r=PG&f=1", "display_name": "p4ddy", "link": "https://stackoverflow.com/users/9313604/p4ddy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 284, "favorite_count": 0, "accepted_answer_id": 59523231, "answer_count": 1, "score": 1, "last_activity_date": 1577654179, "creation_date": 1577652614, "last_edit_date": 1577654179, "question_id": 59523165, "link": "https://stackoverflow.com/questions/59523165/rust-autocompletion-not-working-with-certain-crates", "title": "Rust autocompletion not working with certain crates", "body": "<p>I am experiencing issues with the autocompletion feature of my IDE when using certain crates, like <a href=\"https://crates.io/crates/pnet\" rel=\"nofollow noreferrer\"><code>pnet</code></a>. I am using CLion with the Rust extension but the problem also occurs with VSCode. It seems like the IDE is completely unaware of certain parts of the library.</p>\n\n<p><code>let packet = pnet::packet::ipv4::Ipv4Packet::new(&amp;data);</code></p>\n\n<p>Here for example I am losing autocompletion after <code>ipv4::</code>. Also syntax highlighting does not work.</p>\n\n<p>Does this have something to do with the way this crate is utilizing macros? Has anybody an idea on how to make autocompletion work?</p>\n"}, {"tags": ["compiler-errors", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 346, "user_id": 8365552, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/99cee20944238afd311778c090048c7c?s=128&d=identicon&r=PG&f=1", "display_name": "Hanzy", "link": "https://stackoverflow.com/users/8365552/hanzy"}, "edited": false, "score": 0, "creation_date": 1577644667, "post_id": 59522174, "comment_id": 105215321, "body": "Thank you very much; I had an inclination to try this but I was stubborn in believing my understanding of elision rules and didn&#39;t try it.  I just assumed that since the output lifetime matching the lifetime of <code>&amp;self</code> would be inferred to be longer than the lifetime of <code>text</code> and wouldn&#39;t need to specify.  But clearly that&#39;s not the case."}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 3, "last_activity_date": 1577645106, "last_edit_date": 1592644375, "creation_date": 1577644311, "answer_id": 59522174, "question_id": 59522097, "link": "https://stackoverflow.com/questions/59522097/rust-lifetime-mismatch-in-trait-method/59522174#59522174", "title": "Rust Lifetime mismatch in trait method", "body": "<p>You were tripped over by <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\" rel=\"nofollow noreferrer\">lifetime elision rules</a>:</p>\n<blockquote>\n<p>Each elided lifetime in input position becomes a distinct lifetime parameter.</p>\n<p>If there is exactly one input lifetime position (elided or not), that lifetime is assigned to all elided output lifetimes.</p>\n<p>If there are multiple input lifetime positions, but one of them is <code>&amp;self</code> or <code>&amp;mut self</code>, the lifetime of <code>self</code> is assigned to all elided output lifetimes.</p>\n<p>Otherwise, it is an error to elide an output lifetime.</p>\n</blockquote>\n<p>In your code <code>fn add_text(&amp;self, text: &amp;str) -&gt; &amp;str</code>, the returned <code>&amp;str</code> picks up the elided lifetime from <code>&amp;self</code>, but then it is actually the second parameter. A mismatch as if it were:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn add_text&lt;'a, 'b&gt;(&amp;'a self, text: &amp;'b str) -&gt; &amp;'a str {\n    text\n}\n</code></pre>\n<p>The trick is to make lifetime explicit here:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait State {\n    fn add_text&lt;'a&gt;(&amp;'a self, text: &amp;'a str) -&gt; &amp;'a str;\n}\n\nimpl State for Draft {\n    fn add_text&lt;'a&gt;(&amp;'a self, text: &amp;'a str) -&gt; &amp;'a str {\n        text\n    }\n}\n</code></pre>\n<p>If you want a slightly more general version:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait State {\n    fn add_text&lt;'a, 'b: 'a&gt;(&amp;'a self, text: &amp;'b str) -&gt; &amp;'a str;\n}\n\nimpl State for Draft {\n    fn add_text&lt;'a, 'b: 'a&gt;(&amp;'a self, text: &amp;'b str) -&gt; &amp;'a str {\n        text\n    }\n}\n</code></pre>\n<p>Here it says as long as <code>text</code> outlives <code>&amp;self</code> all is good. You decide if the extra generic lifetime is worth the trouble.</p>\n"}], "owner": {"reputation": 346, "user_id": 8365552, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/99cee20944238afd311778c090048c7c?s=128&d=identicon&r=PG&f=1", "display_name": "Hanzy", "link": "https://stackoverflow.com/users/8365552/hanzy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 603, "favorite_count": 0, "accepted_answer_id": 59522174, "answer_count": 1, "score": 2, "last_activity_date": 1577645106, "creation_date": 1577643643, "last_edit_date": 1592644375, "question_id": 59522097, "link": "https://stackoverflow.com/questions/59522097/rust-lifetime-mismatch-in-trait-method", "title": "Rust Lifetime mismatch in trait method", "body": "<p>I'm working through the Rust book, and trying to implement logic to allow text to only be added to a blog <code>Post</code> if its in the <code>Draft</code> state, as can be found <a href=\"https://doc.rust-lang.org/stable/book/ch17-03-oo-design-patterns.html\" rel=\"nofollow noreferrer\">here</a> (one of the suggested exercises).</p>\n<p>The idea is to implement the state pattern in Rust using structs and traits.  I simply want to pass a string slice to a default implementation of <code>add_text</code> which returns an empty string slice if not in the <code>Draft</code> state.  Then I'll override the default implementation for the <code>Draft</code> state and return the string slice that was passed in for the text in the <code>Draft</code> state.</p>\n<pre><code>pub struct Post {\n    state: Option&lt;Box&lt;dyn State&gt;&gt;,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -&gt; Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&amp;mut self, text: &amp;str) {\n        let text = self.state.as_ref().unwrap().add_text(text);\n        // self.state.as_ref().unwrap().add_content(text)\n        self.content.push_str(text);\n    }\n\n    //snip\n\ntrait State {\n    fn request_review(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt;;\n    fn approve(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt;;\n    fn content&lt;'a&gt;(&amp;self, post: &amp;'a Post) -&gt; &amp;'a str {\n        &quot;&quot;\n    }\n    fn reject(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt;;\n    fn add_text(&amp;self, text: &amp;str) -&gt; &amp;str {\n        &quot;&quot;\n    }\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt; {\n        Box::new(PendingReview {})\n    }\n    fn approve(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt; {\n        self // don't want to approve a draft before review!\n    }\n    fn reject(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn State&gt; {\n        self // reject doesn't do anything on a draft!\n    }\n    fn add_text(&amp;self, text: &amp;str) -&gt; &amp;str {\n        text\n    }\n}\n</code></pre>\n<p>I'm getting a lifetime mismatch on the very last method above <code>add_text</code> inside <code>impl State for Draft</code>.  The message reads:</p>\n<pre><code>lifetime mismatch\n\n...but data from `text` is returned hererustc(E0623)\nlib.rs(67, 30): this parameter and the return type are declared with different lifetimes...\nlib.rs(67, 39):\nlib.rs(68, 9): ...but data from `text` is returned here\n</code></pre>\n<p>I'm new to Rust and can't get the lifetime annotations right in this case.  I tried explicit lifetime annotations but it didn't help.  Also, I know that since one of the references is <code>&amp;self</code> all lifetime parameters should have the same lifetime as <code>&amp;self</code> automatically (I think?).</p>\n<p>Can someone enlighten me on getting this code to compile? It also may be useful to those using the book in the future.</p>\n"}, {"tags": ["rust", "stream", "future"], "owner": {"reputation": 4272, "user_id": 766412, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/678838012/picture?type=large", "display_name": "bloveless", "link": "https://stackoverflow.com/users/766412/bloveless"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 40, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1577639322, "creation_date": 1577639322, "question_id": 59521539, "link": "https://stackoverflow.com/questions/59521539/converting-a-future-to-a-stream-in-kube-rs-library", "title": "Converting a future to a stream in kube-rs library", "body": "<p>I'm trying to implement a project where I can tail the logs of multiple Kubernetes container logs simultaneously. Think tmux split pane with two tails in each pane. Anyway, I'm far far away from my actual project because I'm stuck right at the beginning. If you look at the following code then the commented out line for lp.follow = true will keep the log stream open and stream logs forever. I'm not sure how to actually use this. I found a function called <code>.into_stream()</code> that I can tack onto the pods.log function, but then I'm not sure how to actually use the stream. I'm not experienced enough to know if this is a limitation of the kube library, or if I'm just doing something wrong. Anyway, here is the repo if you want to look at anything else. <a href=\"https://github.com/bloveless/kube-logger\" rel=\"nofollow noreferrer\">https://github.com/bloveless/kube-logger</a></p>\n\n<p>I'd be forever grateful for any advice or resources I can look at. Thanks!</p>\n\n<pre><code>use kube::{\n    api::Api,\n    client::APIClient,\n    config,\n};\nuse kube::api::{LogParams, RawApi};\nuse futures::{FutureExt, Stream, future::IntoStream, StreamExt};\n\n#[tokio::main]\nasync fn main() -&gt; anyhow::Result&lt;()&gt; {\n    std::env::set_var(\"RUST_LOG\", \"info,kube=trace\");\n    let config = config::load_kube_config().await?;\n    let client = APIClient::new(config);\n\n    // Manage pods\n    let pods = Api::v1Pod(client).within(\"fritzandandre\");\n    let mut lp = LogParams::default();\n    lp.container = Some(\"php\".to_string());\n// lp.follow = true;\n    lp.tail_lines = Some(100);\n\n    let log_string = pods.log(\"fritzandandre-php-0\", &amp;lp).await?;\n    println!(\"FnA Log: {}\", log_string);\n\n    Ok(())\n}\n</code></pre>\n\n<p>Originally posted here <a href=\"https://www.reddit.com/r/learnrust/comments/eg49tx/help_with_futuresstreams_and_the_kubers_library/\" rel=\"nofollow noreferrer\">https://www.reddit.com/r/learnrust/comments/eg49tx/help_with_futuresstreams_and_the_kubers_library/</a></p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1577664444, "post_id": 59520619, "comment_id": 105219719, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d4274dc353d2d0dfa930600451120a38\" rel=\"nofollow noreferrer\">Smaller example</a>."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1577713009, "post_id": 59520619, "comment_id": 105232971, "body": "I think this is a <a href=\"https://github.com/rust-lang/rust/issues/20671\" rel=\"nofollow noreferrer\">known issue</a>."}, {"owner": {"reputation": 161, "user_id": 3727547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/5adXT.png?s=128&g=1", "display_name": "Skeletonxf", "link": "https://stackoverflow.com/users/3727547/skeletonxf"}, "edited": false, "score": 1, "creation_date": 1577744339, "post_id": 59520619, "comment_id": 105244784, "body": "From looking around how some libraries are doing this I&#39;ve found this test in <code>num-traits</code> where <code>RefNum</code> seems to be able to express the &amp;T + &amp;T constraint: <a href=\"https://docs.rs/num-traits/0.2.10/src/num_traits/lib.rs.html#547\" rel=\"nofollow noreferrer\">docs.rs/num-traits/0.2.10/src/num_traits/lib.rs.html#547</a>, I don&#39;t really understand the trait declaration at <a href=\"https://docs.rs/num-traits/0.2.10/src/num_traits/lib.rs.html#112\" rel=\"nofollow noreferrer\">docs.rs/num-traits/0.2.10/src/num_traits/lib.rs.html#112</a> but it seems kinda like what I&#39;m after?"}], "answers": [{"tags": [], "owner": {"reputation": 161, "user_id": 3727547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/5adXT.png?s=128&g=1", "display_name": "Skeletonxf", "link": "https://stackoverflow.com/users/3727547/skeletonxf"}, "is_accepted": false, "score": 4, "last_activity_date": 1577814678, "creation_date": 1577814678, "answer_id": 59547146, "question_id": 59520619, "link": "https://stackoverflow.com/questions/59520619/how-do-i-specify-a-generic-trait-for-operations-on-references-to-types/59547146#59547146", "title": "How do I specify a generic trait for operations on references to types?", "body": "<p>I suppose I've managed to answer my own question after staring at how <code>num-traits</code> did it for quite a while and trail and error.</p>\n\n<p>This altered version of my initial example creates two extra traits to allow you to get very close to the original goal. Although you still need a where clause it will not increase in size as you add more constraints for other operations.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ops::Add;\n\n/**\n * Trait defining what a numeric type is, in this case just something\n * that can be added to a right hand side and yield itself as output\n */\ntrait NumericByValue&lt;Rhs = Self, Output = Self&gt;: Sized + Add&lt;Rhs, Output = Output&gt; {}\n\n/**\n * All types implemeting the by value operations are NumericByValue\n */\nimpl &lt;T, Rhs, Output&gt; NumericByValue&lt;Rhs, Output&gt; for T where\n    T: Add&lt;Rhs, Output = Output&gt; {}\n\n/**\n * The trait to define &amp;T op T and &amp;T op &amp;T versions for NumericByValue\n * based off the MIT/Apache 2.0 licensed code from num-traits 0.2.10\n * http://opensource.org/licenses/MIT\n * https://docs.rs/num-traits/0.2.10/src/num_traits/lib.rs.html#112\n *\n * The trick is that all types implementing this trait will be references,\n * so the first constraint expresses some &amp;T which can be operated on with\n * some right hand side type T to yield a value of type T.\n *\n * In a similar way the second constraint expresses &amp;T op &amp;T -&gt; T operations\n */\ntrait NumericRef&lt;T&gt;:\n    // &amp;T op T -&gt; T\n    NumericByValue&lt;T, T&gt;\n    // &amp;T op &amp;T -&gt; T\n    + for&lt;'a&gt; NumericByValue&lt;&amp;'a T, T&gt; {}\n\n/**\n * All types implementing the operations from NumericByValue by reference,\n * are NumericRef&lt;T&gt;, ie a type like &amp;u8 is NumericRef&lt;u8&gt;.\n */\nimpl &lt;RefT, T&gt; NumericRef&lt;T&gt; for RefT where\n    RefT: NumericByValue&lt;T, T&gt;\n    + for&lt;'a&gt; NumericByValue&lt;&amp;'a T, T&gt; {}\n\n/**\n * A trait extending the constraints in NumericByValue to\n * types which also support the operations with a right hand side type\n * by reference.\n *\n * When used together with NumericRef this can express all 4 by value\n * and by reference combinations for the operations using the\n * following\n *\n * ```ignore\n *  fn function_name&lt;T: Numeric&gt;()\n *  where for&lt;'a&gt; &amp;'a T: NumericRef&lt;T&gt; {\n * ```\n */\ntrait Numeric: NumericByValue + for&lt;'a&gt; NumericByValue&lt;&amp;'a Self&gt; {}\n\n/**\n * All types implemeting the operations in NumericByValue with a right hand\n * side type by reference are Numeric.\n */\nimpl &lt;T&gt; Numeric for T where T: NumericByValue + for&lt;'a&gt; NumericByValue&lt;&amp;'a T&gt; {}\n\nfn generic_add_0&lt;T: Numeric&gt;(a: T, b: T) -&gt; T\nwhere for&lt;'a&gt; &amp;'a T: NumericRef&lt;T&gt; {\n    a + b\n}\n\nfn generic_add_1&lt;T: Numeric&gt;(a: T, b: &amp;T) -&gt; T\nwhere for&lt;'a&gt; &amp;'a T: NumericRef&lt;T&gt; {\n    a + b\n}\n\nfn generic_add_2&lt;T: Numeric&gt;(a: &amp;T, b: T) -&gt; T\nwhere for&lt;'a&gt; &amp;'a T: NumericRef&lt;T&gt; {\n    a + b\n}\n\nfn generic_add_3&lt;T: Numeric&gt;(a: &amp;T, b: &amp;T) -&gt; T\nwhere for&lt;'a&gt; &amp;'a T: NumericRef&lt;T&gt; {\n    a + b\n}\n\nfn main() {\n    generic_add_0(1.0, 2.0);\n    generic_add_1(1.0, &amp;2.0);\n    generic_add_2(&amp;1.0, 2.0);\n    generic_add_3(&amp;1.0, &amp;2.0);\n}\n\n</code></pre>\n"}], "owner": {"reputation": 161, "user_id": 3727547, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/5adXT.png?s=128&g=1", "display_name": "Skeletonxf", "link": "https://stackoverflow.com/users/3727547/skeletonxf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 437, "favorite_count": 1, "answer_count": 1, "score": 8, "last_activity_date": 1577814678, "creation_date": 1577632486, "last_edit_date": 1577664638, "question_id": 59520619, "link": "https://stackoverflow.com/questions/59520619/how-do-i-specify-a-generic-trait-for-operations-on-references-to-types", "title": "How do I specify a generic trait for operations on references to types?", "body": "<p>I'm trying to create a trait abstracting over generic number types. Specifying that I want the trait to require <code>T + T</code> (i.e. <code>T: Add&lt;T&gt;</code>) is easy. I can even specify <code>T + &amp;T</code> in the trait and then use that in generic functions on some type that implements that trait. </p>\n\n<p>I'm running into problems however when I try to add a constraint for <code>&amp;T + T</code> (i.e. <code>for&lt;'a&gt; &amp;'a Self: Add&lt;Self&gt;</code>) and <code>&amp;T + &amp;T</code> to the trait. Strangely I can specify these same constraints without any issues when writing a blanket <code>impl</code> for the numeric trait, and also when writing a generic function for any type of that trait, but I can't get the compiler to let me just specify these constraints once on the trait instead.</p>\n\n<p>Simplified example</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ops::Add;\n\ntrait Numeric where\n    Self: Sized,\n    // T + T\n    Self: Add&lt;Output = Self&gt;,\n    // T + &amp;T\n    Self: for&lt;'a&gt; Add&lt;&amp;'a Self, Output = Self&gt;,\n    // &amp;T + T\n    // should specify &amp;T + T on this trait but instead causes compile\n    // errors everywhere I try to use Numeric claiming no implementation\n    // for &amp;T + T\n//  for&lt;'a&gt; &amp;'a Self: Add&lt;Self, Output = Self&gt;,\n    // &amp;T + &amp;T\n    // should specify &amp;T + &amp;T on this trait but instead causes compile\n    // errors everywhere I try to use Numeric claiming no implementation\n    // for &amp;T + &amp;T\n//  for&lt;'a, 'b&gt; &amp;'a Self: Add&lt;&amp;'b Self, Output = Self&gt;,\n{}\n\nimpl &lt;T&gt; Numeric for T where\n    // T + T\n    T: Add&lt;Output = Self&gt;\n    + Sized,\n    // T + &amp;T\n    for&lt;'a&gt; T: Add&lt;&amp;'a T, Output = T&gt;,\n    // &amp;T + T\n    for&lt;'a&gt; &amp;'a T: Add&lt;T, Output = T&gt;,\n    // &amp;T + &amp;T\n    for&lt;'a, 'b&gt; &amp;'a T: Add&lt;&amp;'b T, Output = T&gt;,\n{}\n\n// works\nfn generic_add_0&lt;T: Numeric&gt;(a: T, b: T) -&gt; T {\n    a + b\n}\n\n// works\nfn generic_add_1&lt;T: Numeric&gt;(a: T, b: &amp;T) -&gt; T {\n    a + b\n}\n\n// doesn't infer &amp;T + T from the trait?\nfn generic_add_2&lt;T: Numeric&gt;(a: &amp;T, b: T) -&gt; T {\n    a + b\n}\n\n// doesn't infer &amp;T + &amp;T from the trait?\nfn generic_add_3&lt;T: Numeric&gt;(a: &amp;T, b: &amp;T) -&gt; T {\n    a + b\n}\n\n// works\nfn generic_add_4&lt;T: Numeric&gt;(a: &amp;T, b: &amp;T) -&gt; T\n// I want to not have to specify this every time I use Numeric,\n// I want Numeric to imply this constraint for me\nwhere for&lt;'a, 'b&gt; &amp;'a T: Add&lt;&amp;'b T, Output = T&gt; {\n    a + b\n}\n\nfn main() {\n    generic_add_0(1.0, 2.0);\n    generic_add_1(1.0, &amp;2.0);\n    generic_add_2(&amp;1.0, 2.0);\n    generic_add_3(&amp;1.0, &amp;2.0);\n    generic_add_4(&amp;1.0, &amp;2.0);\n}\n</code></pre>\n"}, {"tags": ["rust", "macros", "match", "guard"], "comments": [{"owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "edited": false, "score": 1, "creation_date": 1577632269, "post_id": 59520139, "comment_id": 105212185, "body": "This seems like an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a>. What are you trying to accomplish with all of this? It seems to me the easiest would be to add the <code>new</code> method to all 3 types and always use that. Also your statement: &quot;Sadly it didn&#39;t and instead complained about the second (impossible) clause being impossible to compile.&quot; is incorrect. Rust cannot determine at compile time whether certain arms/branches will be taken or not and the code within these arms must still be syntactically correct <i>even</i> if they are never called"}, {"owner": {"reputation": 928, "user_id": 4141219, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh4.googleusercontent.com/-d32iaz7YS1g/AAAAAAAAAAI/AAAAAAAAAao/vl5qXOl_78g/photo.jpg?sz=128", "display_name": "Charlie", "link": "https://stackoverflow.com/users/4141219/charlie"}, "reply_to_user": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "edited": false, "score": 0, "creation_date": 1577640773, "post_id": 59520139, "comment_id": 105214332, "body": "@sshashank124 Indeed; I want to save myself from making <code>new</code> functions for structs that don&#39;t need it (because it doesn&#39;t have fields or they are all public), so I tried to make a helper macro, but I guess that&#39;s not possible then."}, {"owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "edited": false, "score": 0, "creation_date": 1577640934, "post_id": 59520139, "comment_id": 105214380, "body": "Yeah personally I would say a new function doesn&#39;t really take more than 2-3 lines and is universally understood in Rust. I&#39;m not sure replacing that with a macro wrapper that not everyone might be familiar with is necessarily better. Again, just my personal opinion"}, {"owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "edited": false, "score": 2, "creation_date": 1577641006, "post_id": 59520139, "comment_id": 105214399, "body": "You could also derive the Default trait for your structs which would give you the benefit of less code and also a uniform way to instantiate instances without arguments"}, {"owner": {"reputation": 18942, "user_id": 894328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3db17c5296335f63e856be44aa821bf6?s=128&d=identicon&r=PG", "display_name": "Ahmed Masud", "link": "https://stackoverflow.com/users/894328/ahmed-masud"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577654607, "post_id": 59520139, "comment_id": 105217851, "body": "@mcarton&#39;s answer is probably the most effective one.  However it seems like a Rust anti-pattern to set things up like this. Why would you not create a macro that applies a template to each class as needed."}], "answers": [{"comments": [{"owner": {"reputation": 928, "user_id": 4141219, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh4.googleusercontent.com/-d32iaz7YS1g/AAAAAAAAAAI/AAAAAAAAAao/vl5qXOl_78g/photo.jpg?sz=128", "display_name": "Charlie", "link": "https://stackoverflow.com/users/4141219/charlie"}, "edited": false, "score": 0, "creation_date": 1577662391, "post_id": 59523300, "comment_id": 105219408, "body": "While indeed not the perfect solution to the problem, it does give a perfect answer to the question. Thanks."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 3, "last_activity_date": 1577653640, "creation_date": 1577653640, "answer_id": 59523300, "question_id": 59520139, "link": "https://stackoverflow.com/questions/59520139/is-there-a-way-to-match-the-parameters-to-a-rust-macro/59523300#59523300", "title": "Is there a way to match the parameters to a Rust macro?", "body": "<p>While it does seem that your is an X/Y problem and would be more elegantly solved using a trait such as <code>Default</code>, it is possible to match macro parameters to some extent.</p>\n\n<p>Your macro could be re-written as</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! create {\n    (C) =&gt; {\n        Box::new(C::new()) as Box&lt;dyn Trait&gt;\n    };\n\n    ($type:ident) =&gt; {\n        Box::new($type {}) as Box&lt;dyn Trait&gt;\n    };\n}\n</code></pre>\n\n<p>The compiler stops at the first successful match.</p>\n\n<p>Note that this has some limitation: As you might expect, the compiler makes a literal comparison of tokens, and for example things like the following will fail:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type D = C;\n\nlet really_just_another_c: Box&lt;dyn Trait&gt; = create!(D);\n</code></pre>\n\n<p>with</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0063]: missing field `created_time` in initializer of `C`\n  --&gt; src/main.rs:41:18\n   |\n41 |         Box::new($type {}) as Box&lt;dyn Trait&gt;\n   |                  ^^^^^ missing `created_time`\n...\n51 |     let c: Box&lt;dyn Trait&gt; = create!(D);\n   |                             ---------- in this macro invocation\n</code></pre>\n"}], "owner": {"reputation": 928, "user_id": 4141219, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh4.googleusercontent.com/-d32iaz7YS1g/AAAAAAAAAAI/AAAAAAAAAao/vl5qXOl_78g/photo.jpg?sz=128", "display_name": "Charlie", "link": "https://stackoverflow.com/users/4141219/charlie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 336, "favorite_count": 0, "accepted_answer_id": 59523300, "answer_count": 1, "score": 1, "last_activity_date": 1577653640, "creation_date": 1577628842, "last_edit_date": 1577653365, "question_id": 59520139, "link": "https://stackoverflow.com/questions/59520139/is-there-a-way-to-match-the-parameters-to-a-rust-macro", "title": "Is there a way to match the parameters to a Rust macro?", "body": "<p>Consider the following code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Trait {\n    fn x(&amp;self) -&gt; u32;\n}\n\nstruct A {}\nimpl Trait for A {\n    fn x(&amp;self) -&gt; u32 {\n        10\n    }\n}\n\nstruct B {}\nimpl Trait for B {\n    fn x(&amp;self) -&gt; u32 {\n        20\n    }\n}\n\nstruct C {\n    created_time: u64,\n}\n\nimpl Trait for C {\n    fn x(&amp;self) -&gt; u32 {\n        30\n    }\n}\n\nimpl C {\n    pub fn new() -&gt; C {\n        C { created_time: 1000 } // for simplicity\n    }\n}\n\nmacro_rules! create {\n    ($type:ident) =&gt; {\n        match stringify!($type) {\n            \"C\" =&gt; Box::new(C::new()) as Box&lt;dyn Trait&gt;,\n            _ =&gt; Box::new($type {}) as Box&lt;dyn Trait&gt;,\n        }\n    };\n}\n\nfn main() {\n    let a: Box&lt;dyn Trait&gt; = create!(A);\n    let b: Box&lt;dyn Trait&gt; = create!(B);\n    let c: Box&lt;dyn Trait&gt; = create!(C);\n\n    assert_eq!(a.x(), 10);\n    assert_eq!(b.x(), 20);\n    assert_eq!(c.x(), 30);\n}\n</code></pre>\n\n<p>If you ask the compiler to expand the macro, this resolves to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let a: Box&lt;dyn T&gt; =\n    match \"A\" {\n        \"C\" =&gt; Box::new(C::new()) as Box&lt;dyn T&gt;,\n        _ =&gt; Box::new(A{}) as Box&lt;dyn T&gt;,\n    };\nlet b: Box&lt;dyn T&gt; =\n    match \"B\" {\n        \"C\" =&gt; Box::new(C::new()) as Box&lt;dyn T&gt;,\n        _ =&gt; Box::new(B{}) as Box&lt;dyn T&gt;,\n    };\nlet c: Box&lt;dyn T&gt; =\n    match \"C\" {\n        \"C\" =&gt; Box::new(C::new()) as Box&lt;dyn T&gt;,\n        _ =&gt; Box::new(C{}) as Box&lt;dyn T&gt;,\n    };\n</code></pre>\n\n<p>and this explains nicely why the compiler gives the following error when trying to compile it:</p>\n\n<pre><code>error[E0063]: missing field `created_time` in initializer of `C`\n  --&gt; mwe.rs:29:27\n   |\n29 |             _ =&gt; Box::new($type { }) as Box&lt;dyn T&gt;,\n   |                           ^^^^^ missing `created_time`\n...\n37 |     let c: Box&lt;dyn T&gt; = create!(C);\n   |                         ---------- in this macro invocation\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>However, I had expected the compiler to notice the <code>match \"C\" { \"C\" =&gt; ..., _ =&gt; ... }</code> case and drop the second clause because it can't ever be run anyhow. Sadly it didn't and instead complained about the second (impossible) clause being impossible to compile.</p>\n\n<p>I also tried replacing the <code>match</code> with <code>if</code> in the macro as follows, but to no avail:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! create {\n    ($type:ident) =&gt; {\n        if stringify!($type) == \"C\" {\n            Box::new(C::new()) as Box&lt;dyn T&gt;\n        } else {\n            Box::new($type { }) as Box&lt;dyn T&gt;\n        }\n    }\n}\n</code></pre>\n\n<p>leads to</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let c: Box&lt;dyn T&gt; =\n    if \"C\" == \"C\" { Box::new(C::new()) as Box&lt;dyn T&gt; }\n    else { Box::new(C{}) as Box&lt;dyn T&gt; };\n</code></pre>\n\n<p>with the same error as the <code>match</code> attempt.</p>\n\n<p>Hopeful that Haskell's guard pipe syntax would somehow work in Rust, I finally also tried the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! create {\n    ($type:ident) | (stringify!($type) == \"C\") =&gt; {\n        Box::new(C::new()) as Box&lt;dyn T&gt;\n    },\n    ($type:ident) | (stringify!($type) != \"C\") =&gt; {\n        Box::new($type { }) as Box&lt;dyn T&gt;\n    },\n}\n</code></pre>\n\n<p>but that gave an <code>error: no rules expected the token '|'</code></p>\n\n<hr>\n\n<p>Which ultimately leads me back to the question in the title:</p>\n\n<p>Is there a way to add \"guards\" to the macro rules to tell the compiler \"Only run A if this parameter is passed, or run B on something else\" ?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 0, "creation_date": 1577659435, "post_id": 59518825, "comment_id": 105218875, "body": "This macro can also easily be expanded to work with arbitrary mutable expressions as well: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7c09c723155110b76748d34de897355c\" rel=\"nofollow noreferrer\">playground example</a>."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 5, "last_activity_date": 1577617573, "creation_date": 1577617573, "answer_id": 59518825, "question_id": 59518695, "link": "https://stackoverflow.com/questions/59518695/how-to-implement-a-post-increment-macro-in-rust/59518825#59518825", "title": "How to implement a post increment macro in Rust", "body": "<p>Yes! This is pretty easy:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! post_inc {\n    ($i:ident) =&gt; { // the macro is callable with any identifier (eg. a variable)\n        { // the macro evaluates to a block expression\n            let old = $i; // save the old value\n            $i += 1; // increment the argument\n            old // the value of the block is `old`\n        }\n    };\n}\n\nfn main() {\n    let mut i = 0usize;\n    let v = vec![0, 1, 2, 3];\n    println!(\"{}\", post_inc!(i)); // 0\n    println!(\"{}\", post_inc!(i)); // 1\n                                  // i = 3\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bca1eb0e9b39c02981c83c9201260b87\" rel=\"noreferrer\">(Permalink to the playground)</a></p>\n"}], "owner": {"reputation": 527, "user_id": 12029705, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd1de2d386e583758ff0fb8ca08e980e?s=128&d=identicon&r=PG&f=1", "display_name": "Hossain Adnan", "link": "https://stackoverflow.com/users/12029705/hossain-adnan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 143, "favorite_count": 0, "accepted_answer_id": 59518825, "answer_count": 1, "score": 0, "last_activity_date": 1577617573, "creation_date": 1577616271, "question_id": 59518695, "link": "https://stackoverflow.com/questions/59518695/how-to-implement-a-post-increment-macro-in-rust", "title": "How to implement a post increment macro in Rust", "body": "<p>Is it possible to implement a post increment macro in Rust?  </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut i = 0usize;\n    let v = vec!(0,1,2,3,);\n    println!(\"{}\", post_inc!(i)); // 0\n    println!(\"{}\", post_inc!(i)); // 1\n    // i = 3\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 23, "user_id": 5991373, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-3Zh20dyQfqo/AAAAAAAAAAI/AAAAAAAAAEI/mKX4FhhsxBo/photo.jpg?sz=128", "display_name": "Christian Svensson", "link": "https://stackoverflow.com/users/5991373/christian-svensson"}, "edited": false, "score": 0, "creation_date": 1577639302, "post_id": 59519429, "comment_id": 105213957, "body": "Thanks, very interesting! I accepted the other answer as an answer as it has an example of how I could proceed today, but I loved your details about upcoming features. Thanks!"}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": false, "score": 3, "last_activity_date": 1577622623, "creation_date": 1577622623, "answer_id": 59519429, "question_id": 59518597, "link": "https://stackoverflow.com/questions/59518597/specifying-lifetime-of-the-associated-type-in-the-iterator-trait/59519429#59519429", "title": "Specifying lifetime of the associated type in the Iterator trait", "body": "<p>You can't, yet. This would require <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\">generic associated types (GATs)</a>. As of today, it is still just a RFC.</p>\n\n<p>The current <code>Iterator</code> /  <code>Stream</code> API is sometimes called \"detached\":</p>\n\n<blockquote>\n  <p>The idea is that <code>Item</code> that gets returned by <code>Stream</code> is \u201cdetached\u201d from <code>self</code>, which means that it can be stored and moved about independently from <code>self</code>.</p>\n</blockquote>\n\n<p>Hypothetically, after GAT is landed, one would be able to write something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait AttachedStream {\n    type Item&lt;'s&gt; where Self: 's;\n    //       note the `'s` here!\n\n    fn poll_next&lt;'s&gt;(\n        self: Pin&lt;&amp;'s mut Self&gt;,\n        cx: &amp;mut Context&lt;'_&gt;,\n    ) -&gt; Poll&lt;Option&lt;Self::Item&lt;'s&gt;&gt;&gt;;\n    //                         ^^^^\n    // `'s` is the lifetime of the `self` reference.\n    // Thus, the `Item` that gets returned may\n    // borrow from `self`.\n}\n</code></pre>\n\n<p>That's exactly what you want. Check out <a href=\"https://smallcultfollowing.com/babysteps/blog/2019/12/10/async-interview-2-cramertj-part-2/\" rel=\"nofollow noreferrer\">Niko's async interview #2</a> for more interesting details.</p>\n"}, {"tags": [], "owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "is_accepted": true, "score": 3, "last_activity_date": 1577622897, "creation_date": 1577622897, "answer_id": 59519455, "question_id": 59518597, "link": "https://stackoverflow.com/questions/59518597/specifying-lifetime-of-the-associated-type-in-the-iterator-trait/59519455#59519455", "title": "Specifying lifetime of the associated type in the Iterator trait", "body": "<p>The lifetime on <code>&amp;mut self</code> in <code>next</code> isn't in scope when defining the type <code>Item</code>, so <code>Item</code> can't depend on that lifetime. Instead, it's typical to have <code>ThingIterator</code> hold references instead of owned data. If there's still a structure that has owned data, you'll probably implement <code>IntoIterator</code> for <code>&amp;OwnsData</code> to convert into the type that uses references.</p>\n\n<pre><code>// ThingIterator is now generic in the lifetime 'a\n// and it holds references rather than owned Strings.\nstruct ThingIterator&lt;'a&gt; {\n    current: &amp;'a str,\n    stop: &amp;'a str,\n}\n\nimpl&lt;'a&gt; Iterator for ThingIterator&lt;'a&gt; {\n    // Now we can use the lifetime from ThingIterator here.\n    type Item = &amp;'a str;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a str&gt; {\n        if self.current == self.stop {\n            return None;\n        }\n        // For testing\n        self.current = self.stop;\n        Some(self.current)\n    }\n}\n\n// Typically, you'll have a type that owns its data\n// Like Vec&lt;T&gt;, HashSet&lt;T&gt;, etc.\nstruct OwnsData {\n    current: String,\n    stop: String,\n}\n\nimpl OwnsData {\n    // We'll have the traditional method that takes a reference\n    // to self and returns an iterator over references into self.\n\n    // Explicit lifetimes aren't needed, but it might help with understanding.\n    // fn iter&lt;'a&gt;(&amp;'a self) -&gt; ThingIterator&lt;'a&gt; {\n\n    fn iter(&amp;self) -&gt; ThingIterator {\n        ThingIterator {\n            current: &amp;self.current,\n            stop: &amp;self.stop,\n        }\n    }\n}\n\n// Then, we'll implement IntoIterator for references to OwnsData\n// using the OwnsData::iter method defined above.\n// This is helpful because for loops and many iterator methods\n// use IntoIterator to work.\nimpl&lt;'a&gt; IntoIterator for &amp;'a OwnsData {\n    // We'll be converting into ThingIterator\n    type IntoIter = ThingIterator&lt;'a&gt;;\n    type Item = &amp;'a str;\n\n    fn into_iter(self) -&gt; ThingIterator&lt;'a&gt; {\n        self.iter()\n    }\n}\n\nfn main() {\n    let pi = ThingIterator {\n        current: \"Ask\",\n        stop: \"Zoo\",\n    };\n    println!(\"Number of things={}\", pi.count());\n\n    // Alternatively, we could start with Strings\n    // and use OwnsData\n    let tau = OwnsData {\n        current: \"Ask\".to_string(),\n        stop: \"Zoo\".to_string(),\n    };\n    println!(\"Number of things={}\", tau.iter().count());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=39aee58beba4182ab4791da80a18cb0c\" rel=\"nofollow noreferrer\">(playground)</a></p>\n\n<p>See also</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter\">What is the difference between iter and into_iter?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/54379841/how-to-properly-implement-iterable-structure-in-rust\">How to properly implement Iterable structure in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30218886/how-to-implement-iterator-and-intoiterator-for-a-simple-struct\">How to implement Iterator and IntoIterator for a simple struct?</a></li>\n</ul>\n\n<p>P.S. the word you're looking for is \"elided\".</p>\n"}], "owner": {"reputation": 23, "user_id": 5991373, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-3Zh20dyQfqo/AAAAAAAAAAI/AAAAAAAAAEI/mKX4FhhsxBo/photo.jpg?sz=128", "display_name": "Christian Svensson", "link": "https://stackoverflow.com/users/5991373/christian-svensson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 59519455, "answer_count": 2, "score": 2, "last_activity_date": 1577622897, "creation_date": 1577615529, "last_edit_date": 1577622800, "question_id": 59518597, "link": "https://stackoverflow.com/questions/59518597/specifying-lifetime-of-the-associated-type-in-the-iterator-trait", "title": "Specifying lifetime of the associated type in the Iterator trait", "body": "<p>I'm a Rust newbie and I'm trying to figure out what the best way to do the following in Rust is:</p>\n\n<pre><code>struct ThingIterator {\n    current: String,\n    stop: String,\n}\n\nimpl Iterator for ThingIterator {\n    type Item = &amp;str;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;str&gt; {\n        if self.current == self.stop {\n            return None;\n        }\n        // For testing\n        self.current = self.stop;\n        Some(&amp;self.current)\n    }\n}\n\nfn main() {\n    let pi = ThingIterator {\n        current: String::from(\"Ask\"),\n        stop: String::from(\"Zoo\"),\n    };\n    println!(\"Number of things={}\", pi.count());\n}\n</code></pre>\n\n<p>My error is:</p>\n\n<pre><code>error[E0106]: missing lifetime specifier\n --&gt; src/main.rs:7:17\n  |\n7 |     type Item = &amp;str;\n  |                 ^ expected lifetime parameter\n\nerror: aborting due to previous error\n\n</code></pre>\n\n<p>This makes sense, I need to specify how long the reference returned from next() is going to be valid. I'm guessing for the function itself it's fine as the lifetime is elissed (not sure about the conjugation of elission) - but I somehow need to define the lifetime of the \"type Item = &amp;str\" row.</p>\n\n<p>In my case it will be valid as long as \"current\" is valid, i.e. the same lifetime as \"self\".</p>\n\n<p>I haven't seen anything in the Rust book or other documentation that helps me figure out this case.</p>\n\n<p>P.S. Sorry if I'm butchering the nomenclature, I'm very much new to Rust.\nThanks</p>\n"}, {"tags": ["rust", "binary-tree"], "comments": [{"owner": {"reputation": 209014, "user_id": 125816, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f5aa40b1e7a95599c7a19451f88ff3a?s=128&d=identicon&r=PG", "display_name": "Sergio Tulentsev", "link": "https://stackoverflow.com/users/125816/sergio-tulentsev"}, "edited": false, "score": 1, "creation_date": 1577613959, "post_id": 59518411, "comment_id": 105207960, "body": "This might be a useful read: <a href=\"https://rust-unofficial.github.io/too-many-lists/\" rel=\"nofollow noreferrer\">rust-unofficial.github.io/too-many-lists</a>"}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "edited": false, "score": 0, "creation_date": 1577617432, "post_id": 59518411, "comment_id": 105208583, "body": "What exactly is <code>to_vec</code> supposed to do? Why does it take both a <code>Node</code> (<code>self</code>) and a vector of <code>Node</code>s?"}, {"owner": {"reputation": 1016, "user_id": 927687, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1be4ac81206ec06500f79d1b9972f25d?s=128&d=identicon&r=PG", "display_name": "Bhoomtawath Plinsut", "link": "https://stackoverflow.com/users/927687/bhoomtawath-plinsut"}, "edited": false, "score": 0, "creation_date": 1577622838, "post_id": 59518411, "comment_id": 105209789, "body": "It suppose to return a vector of children of nodes that are passed into it. Basically, an nodes on a deeper level. Idf I passed root node, then it will return nodes on level 2 of the tree. If I passed nodes on level 2, then it will return nodes on level 3. My bad, <code>&amp;self</code> isn&#39;t necessary and should be removed."}], "answers": [{"tags": [], "owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "is_accepted": true, "score": 1, "last_activity_date": 1577718566, "creation_date": 1577718566, "answer_id": 59532933, "question_id": 59518411, "link": "https://stackoverflow.com/questions/59518411/cant-do-breadth-first-search-on-a-binary-tree-in-rust/59532933#59532933", "title": "Can&#39;t do breadth-first search on a binary tree in Rust", "body": "<p>Copying my answer from <a href=\"https://www.reddit.com/r/rust/comments/eh49ov/newbie_please_help_me_with_transversing_a_binary/fcg1bnq/\" rel=\"nofollow noreferrer\">this reddit comment</a>:</p>\n\n<p>There's a way to directly fix your problem, but I think there are better options for making the code easier to write and understand. For the direct fix, you can make some lifetime adjustments. Instead of </p>\n\n<pre><code>fn to_vec(&amp;self, nodes: &amp;'a Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt;) -&gt; Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt; {\n</code></pre>\n\n<p>You need:</p>\n\n<pre><code>fn to_vec&lt;'b&gt;(&amp;self, nodes: &amp;Vec&lt;Option&lt;&amp;'b Node&lt;'a, T&gt;&gt;&gt;) -&gt; Vec&lt;Option&lt;&amp;'b Node&lt;'a, T&gt;&gt;&gt;\n</code></pre>\n\n<p>What's the difference there? In the first case we're saying that <code>nodes</code> is a <code>&amp;'a Vec</code>. That is, a borrow of a <code>Vec</code> that lives as long as the <code>value</code> references inside your tree. That's a long time to live, and it's what the compiler's getting angry about.</p>\n\n<p>Now, if you just take the <code>'a</code> off of that <code>&amp;Vec</code>, the compiler complains about something else:</p>\n\n<pre><code>   |\n42 |     fn to_vec(&amp;self, nodes: &amp;Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt;) -&gt; Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt; {\n   |                                         ------------       -------------------------\n   |                                         |\n   |                                         this parameter and the return type are declared with different lifetimes...\n...\n76 |         children\n   |         ^^^^^^^^ ...but data from `nodes` is returned here\n</code></pre>\n\n<p>Maybe this is the error that pushed you to put the <code>'a</code> on the <code>&amp;Vec</code> in the first place. We need to solve it a different way. The important thing to understand here is that the return value doesn't contain references directly into the <code>nodes</code> vector, but it does contain copies of the <code>nodes</code> vector's contents, the <code>&amp;Node</code> references. We need to tell the compiler that even though the <code>nodes</code> reference <em>doesn't</em> live very long, its contents <em>do</em> live longer. That's why we create the new lifetime <code>'b</code> in my fix above.</p>\n\n<p>This is objectively very confusing. Personally, I prefer to avoid solving these tricky problems, by just keeping things alive longer instead of reasoning about exactly how long they live. The source of the difficulty is that we're destroying the <code>children</code> vector on line 39. If we were able to keep it around, and just keep emptying it and refilling it, Rust would give us a much easier time. Have you considered using a <code>std::collections::VecDeque</code> instead of a <code>Vec</code> here? You could construct it once outside of your while-loop, and then you could pass <code>&amp;mut children</code> around, without worrying very much about its lifetime. I think a queue is usually the go-to data structure for a breadth-first traversal, with new children added to the back, and the traversal itself reading from the front.</p>\n"}], "owner": {"reputation": 1016, "user_id": 927687, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1be4ac81206ec06500f79d1b9972f25d?s=128&d=identicon&r=PG", "display_name": "Bhoomtawath Plinsut", "link": "https://stackoverflow.com/users/927687/bhoomtawath-plinsut"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 154, "favorite_count": 0, "accepted_answer_id": 59532933, "answer_count": 1, "score": 0, "last_activity_date": 1577718566, "creation_date": 1577613798, "question_id": 59518411, "link": "https://stackoverflow.com/questions/59518411/cant-do-breadth-first-search-on-a-binary-tree-in-rust", "title": "Can&#39;t do breadth-first search on a binary tree in Rust", "body": "<p>I've implemented a binary tree in Rust as a learning project but failed to transverse it to print the tree in a breadth-first search fashion.</p>\n\n<p>The issue is that I can't reassign the search queue (<code>children</code>) because it's borrowed and doesn't live long enough.</p>\n\n<p><a href=\"https://gist.github.com/varshard/3874803cd035e27facb67c59e89c3c1c#file-binary_tree-rs-L39\" rel=\"nofollow noreferrer\">https://gist.github.com/varshard/3874803cd035e27facb67c59e89c3c1c#file-binary_tree-rs-L39</a></p>\n\n<p>How can I correct this?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt::Display;\n\ntype Branch&lt;'a, T&gt; = Option&lt;Box&lt;Node&lt;'a, T&gt;&gt;&gt;;\n\nstruct Node&lt;'a, T: PartialOrd + Display&gt; {\n    value: &amp;'a T,\n    left: Branch&lt;'a, T&gt;,\n    right: Branch&lt;'a, T&gt;\n}\n\nimpl&lt;'a, T: PartialOrd + Display&gt; Node&lt;'a, T&gt; {\n    fn insert(&amp;mut self, value: &amp;'a T) {\n        let target_node = if value &gt; self.value { &amp;mut self.right } else { &amp;mut self.left };\n        match target_node {\n            Some(ref mut node) =&gt; node.insert(value),\n            None =&gt; {\n                let new_node = Node{ value: value, left: None, right: None};\n                *target_node = Some(Box::new(new_node))\n            }\n        }\n    }\n    fn display(&amp;'a self) {\n        let mut children: Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt; = Vec::new();\n        children.push(Some(self));\n\n        while children.len() &gt; 0 {\n            for child in &amp;children {\n                match child {\n                    Some(node) =&gt; {\n                        print!(\"{} \", node.value);\n                    },\n                    None =&gt; {\n                        print!(\" \")\n                    }\n                }\n            }\n            println!(\"\");\n            // Error: children doesn't live long enough;\n            children = self.to_vec(&amp;children);\n        }\n    }\n    fn to_vec(&amp;self, nodes: &amp;'a Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt;) -&gt; Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt; {\n        let mut children: Vec&lt;Option&lt;&amp;Node&lt;'a, T&gt;&gt;&gt; = Vec::new();\n        for node_option in nodes {\n            match node_option {\n                Some(node) =&gt; {\n                    match &amp;node.left {\n                        Some(left) =&gt; {\n                            children.push(Some(left));\n                            match &amp;node.right {\n                                Some(right) =&gt; {\n                                    children.push(Some(right));\n                                },\n                                None =&gt; {\n                                    children.push(None);\n                                }\n                            }\n                        },\n                        None =&gt; {\n                            children.push(None);\n                            match &amp;node.right {\n                                Some(right) =&gt; {\n                                    children.push(Some(right));\n                                },\n                                None =&gt; {\n                                    children.push(None);\n                                }\n                            }\n                        }\n                    }\n                },\n                None =&gt; {}\n            }\n        }\n\n        children\n    }\n}\n\nfn main() {\n    let root_val = 5;\n    let mut root = Node{ value: &amp;root_val, left: None, right: None };\n    root.insert(&amp;3);\n    root.insert(&amp;4);\n    root.insert(&amp;1);\n    root.insert(&amp;6);\n\n    root.display();\n}\n\n</code></pre>\n"}, {"tags": ["rust", "iterator", "documentation", "collect"], "comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1577588799, "post_id": 59515668, "comment_id": 105204622, "body": "<code>from_iter</code> is doing more than just calling <code>into_iter()</code>. Did you look up the definition of <code>iter::process_results</code>?"}, {"owner": {"reputation": 41, "user_id": 12376353, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mCbYT4co2JxFY0jUs1LeLjcaW66LOh9uoJD3aaaTQ=k-s128", "display_name": "Late Nighter", "link": "https://stackoverflow.com/users/12376353/late-nighter"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1577601332, "post_id": 59515668, "comment_id": 105205996, "body": "@BenjaminLindley can you point me to the implementation for process_results ?"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 1, "creation_date": 1577606583, "post_id": 59515668, "comment_id": 105206738, "body": "<a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/iter/adapters/mod.rs#L2580\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/libcore/iter/adapt&zwnj;&#8203;ers/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 12376353, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mCbYT4co2JxFY0jUs1LeLjcaW66LOh9uoJD3aaaTQ=k-s128", "display_name": "Late Nighter", "link": "https://stackoverflow.com/users/12376353/late-nighter"}, "edited": false, "score": 0, "creation_date": 1577582679, "post_id": 59515696, "comment_id": 105203953, "body": "Thanks, but what I want to understand is not why we get all values in a vector and only one in the result, but a. where is the code/logic to select the first Err from a list of values and b. why are multiple Err values selected when the result is collected in a list (when according to the documentation it should be only the first Err value). I will also modify the question to make that clear."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 41, "user_id": 12376353, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mCbYT4co2JxFY0jUs1LeLjcaW66LOh9uoJD3aaaTQ=k-s128", "display_name": "Late Nighter", "link": "https://stackoverflow.com/users/12376353/late-nighter"}, "edited": false, "score": 0, "creation_date": 1577592568, "post_id": 59515696, "comment_id": 105204983, "body": "@LateNighter &quot;what I want to understand is not why we get all values in a vector and only one in the result,&quot; how many are you inside you ?"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 4, "last_activity_date": 1617719222, "last_edit_date": 1617719222, "creation_date": 1577575266, "answer_id": 59515696, "question_id": 59515668, "link": "https://stackoverflow.com/questions/59515668/how-does-the-iteratorcollect-function-work/59515696#59515696", "title": "How does the Iterator::collect function work?", "body": "<p>In this example</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let result: Vec&lt;Result&lt;i32, &amp;str&gt;&gt; = results.iter().cloned().collect();\n</code></pre>\n<p>you do not collect into a <code>Result</code>, but into a <code>Vec</code>, hence all values are collected, untouched. This is expected from <code>Vec</code>.</p>\n<p>This is fundamentally different from</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let result: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = results.iter().cloned().collect();\n</code></pre>\n<p>where you collect into a <code>Result</code>, which does filter elements depending on whether an <code>Err</code> is found or not. This comes from <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#impl-FromIterator%3CResult%3CA%2C%20E%3E%3E\" rel=\"nofollow noreferrer\"><code>impl&lt;A, E, V&gt; FromIterator&lt;Result&lt;A, E&gt;&gt; for Result&lt;V, E&gt; where V: FromIterator&lt;A&gt;,</code></a>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1617719826, "creation_date": 1617719826, "answer_id": 66970759, "question_id": 59515668, "link": "https://stackoverflow.com/questions/59515668/how-does-the-iteratorcollect-function-work/66970759#66970759", "title": "How does the Iterator::collect function work?", "body": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>Iterator::collect</code></a> is defined as:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn collect&lt;B: FromIterator&lt;Self::Item&gt;&gt;(self) -&gt; B\nwhere\n    Self: Sized,\n{\n    FromIterator::from_iter(self)\n}\n</code></pre>\n<p>All of the interesting implementation is done via the <a href=\"https://doc.rust-lang.org/std/iter/trait.FromIterator.html\" rel=\"nofollow noreferrer\"><code>FromIterator</code></a> trait. Every type can choose how to implement this trait as makes sense.</p>\n<p>The implementation for <code>Result</code> and <code>Vec</code> are both optimized and abstracted, so it's not trivial to point to one line of code and say &quot;here's where it is&quot;.</p>\n<h3><code>Result</code></h3>\n<p>This calls <code>iter::process_results</code>, an internal helper method for &quot;lifting&quot; an iterator of <code>Result</code>s (you can see something similar in <a href=\"https://docs.rs/itertools/0.10.0/itertools/fn.process_results.html\" rel=\"nofollow noreferrer\"><code>Itertools::process_results</code></a>). If any <code>Result::Err</code> is encountered, then the iteration stops with that error. Otherwise, the closure is executed with an iterator containing only the success values. The closure calls <code>Iterator::collect</code> on the inner collection type, producing a <code>Vec</code> of the successful values.</p>\n<h3><code>Vec</code></h3>\n<p>This performs some internal specialization indirection via the <code>SpecFromIter</code> helper trait. Following through all of that, you'll see that an empty <code>Vec</code> is created and then <a href=\"https://doc.rust-lang.org/std/iter/trait.Extend.html#tymethod.extend\" rel=\"nofollow noreferrer\"><code>extend</code></a>ed with all of the items in the iterator.</p>\n"}], "owner": {"reputation": 41, "user_id": 12376353, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mCbYT4co2JxFY0jUs1LeLjcaW66LOh9uoJD3aaaTQ=k-s128", "display_name": "Late Nighter", "link": "https://stackoverflow.com/users/12376353/late-nighter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 922, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1617719826, "creation_date": 1577574944, "last_edit_date": 1617718913, "question_id": 59515668, "link": "https://stackoverflow.com/questions/59515668/how-does-the-iteratorcollect-function-work", "title": "How does the Iterator::collect function work?", "body": "<p>I am trying to understand the full capabilities of <code>collect</code> function by going through <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#provided-methods\" rel=\"nofollow noreferrer\">some documentation</a>. I am running into some challenges, specifically in the last example quoted on the page (also listed below, with my comments inline)</p>\n<pre><code>let results = [Ok(1), Err(&quot;nope&quot;), Ok(3), Err(&quot;bad&quot;)];\n\nlet result: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = results.iter().cloned().collect();\n\n// gives us the first error &lt;-- Point 1\nassert_eq!(Err(&quot;nope&quot;), result);\n\nlet results = [Ok(1), Ok(3)];\n\nlet result: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = results.iter().cloned().collect();\n\n// gives us the list of answers\nassert_eq!(Ok(vec![1, 3]), result);\n</code></pre>\n<p>I followed up this code with some of my own (shown below)</p>\n<pre><code>let results: [std::result::Result&lt;i32, &amp;str&gt;; 2] = [Err(&quot;nope&quot;), Err(&quot;bad&quot;)];\n\nlet result: Vec&lt;Result&lt;i32, &amp;str&gt;&gt; = results.iter().cloned().collect();\n\n// The following prints &lt;-- Point 2\n// &quot;nope&quot;\n// &quot;bad&quot;\nfor x in result{\n    println!(&quot;{:?}&quot;, x.unwrap_err());\n}\n</code></pre>\n<p>Looking at the implementation of <a href=\"https://doc.rust-lang.org/src/core/result.rs.html#283-288\" rel=\"nofollow noreferrer\">the <code>FromIterator</code> trait on the <code>Result</code> struct</a>, we see that it mentions that &quot;Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no further elements are taken, and the <code>Err</code> is returned. Should no <code>Err</code> occur, a container with the values of each <code>Result</code> is returned.</p>\n<p>This explanation is in line with the result that is seen at Point 1 but doesn't seem to work with Point 2. In point 2 I was expecting only &quot;nope&quot; to be printed instead of both values.</p>\n<p>Hence, I am trying to understand where this (selective) conversion is happening and running into a challenge.</p>\n<p>If we look at the method definition itself we see the following.</p>\n<pre><code>#[inline]\nfn from_iter&lt;I: IntoIterator&lt;Item=Result&lt;A, E&gt;&gt;&gt;(iter: I) -&gt; Result&lt;V, E&gt; {\n    // FIXME(#11084): This could be replaced with Iterator::scan when this\n    // performance bug is closed.\n\n    iter::process_results(iter.into_iter(), |i| i.collect())\n}\n</code></pre>\n<p>It shows that the <code>into_iter()</code> method is being called on the iterator. Searching for <code>into_iter</code> gives two implementations</p>\n<pre><code>#[stable(feature = &quot;rust1&quot;, since = &quot;1.0.0&quot;)]\nimpl&lt;T, E&gt; IntoIterator for Result&lt;T, E&gt; {\n    type Item = T;\n    type IntoIter = IntoIter&lt;T&gt;;\n\n    /// Returns a consuming iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(5);\n    /// let v: Vec&lt;u32&gt; = x.into_iter().collect();\n    /// assert_eq!(v, [5]);\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(&quot;nothing!&quot;);\n    /// let v: Vec&lt;u32&gt; = x.into_iter().collect();\n    /// assert_eq!(v, []);\n    /// ```\n    #[inline]\n    fn into_iter(self) -&gt; IntoIter&lt;T&gt; {\n        IntoIter { inner: self.ok() }\n    }\n}\n\n#[stable(since = &quot;1.4.0&quot;, feature = &quot;result_iter&quot;)]\nimpl&lt;'a, T, E&gt; IntoIterator for &amp;'a Result&lt;T, E&gt; {\n    type Item = &amp;'a T;\n    type IntoIter = Iter&lt;'a, T&gt;;\n\n    fn into_iter(self) -&gt; Iter&lt;'a, T&gt; {\n        self.iter()\n    }\n}\n</code></pre>\n<p>However, in my limited understanding of the language none seem to be able to explain what the documentation says as well as what is happening in Point 2.</p>\n<p>Could someone please explain how this is working or point me to the right place in source where such selection logic is implemented?</p>\n<p>What I want to understand is not why we get all values in a vector and only one in the result, but a. where is the code/logic to select the first <code>Err</code> from a list of values and b. why are multiple <code>Err</code> values selected when the result is collected in a list (when according to the documentation it should be only the first <code>Err</code> value)</p>\n"}, {"tags": ["rust", "constants", "move"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 21, "last_activity_date": 1577573891, "creation_date": 1577573891, "answer_id": 59515575, "question_id": 59515419, "link": "https://stackoverflow.com/questions/59515419/how-do-global-consts-that-are-not-copy-or-clone-work-in-rust/59515575#59515575", "title": "How do global consts that are not copy or clone work in Rust?", "body": "<p>Constants are always inlined. Your example is essentially the same as</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct A {\n    pub val: u32\n}\n\nfn main() {\n    let some_a: A = A {val: 2};\n    let other_a: A = A {val: 2};\n\n    println!(\"double val = {}\", some_a.val + other_a.val);\n}\n</code></pre>\n\n<p>The value is reconstructed twice, so it doesn't need to be <code>Copy</code> or <code>Clone</code>.</p>\n\n<p>On the other hand, <code>static</code>s are not inlined:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct A {\n    pub val: u32\n}\n\nstatic GLOBAL_A: A = A {val: 2};\n\nfn main() {\n    let some_a: A = GLOBAL_A;\n}\n</code></pre>\n\n<p>results in</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of static item `GLOBAL_A`\n --&gt; src/main.rs:8:21\n  |\n8 |     let some_a: A = GLOBAL_A;\n  |                     ^^^^^^^^\n  |                     |\n  |                     move occurs because `GLOBAL_A` has type `A`, which does not implement the `Copy` trait\n  |                     help: consider borrowing here: `&amp;GLOBAL_A`\n</code></pre>\n"}], "owner": {"reputation": 552, "user_id": 4398194, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/27aa20e586603771aac6489468530905?s=128&d=identicon&r=PG&f=1", "display_name": "RecursiveExceptionException", "link": "https://stackoverflow.com/users/4398194/recursiveexceptionexception"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 553, "favorite_count": 0, "accepted_answer_id": 59515575, "answer_count": 1, "score": 20, "last_activity_date": 1577573891, "creation_date": 1577572276, "question_id": 59515419, "link": "https://stackoverflow.com/questions/59515419/how-do-global-consts-that-are-not-copy-or-clone-work-in-rust", "title": "How do global consts that are not copy or clone work in Rust?", "body": "<p>Say I have the following snippet (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eb5aed8b9018452171d41bf6ba7e469c\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct A {\n    pub val: u32\n}\n\nconst GLOBAL_A: A = A {val: 2};\n\nfn main() {\n    let some_a: A = GLOBAL_A;\n    let other_a: A = GLOBAL_A;\n\n    println!(\"double val = {}\", some_a.val + other_a.val);\n}\n</code></pre>\n\n<p>Since <code>A</code> is neither <code>Clone</code> nor <code>Copy</code>, I would assume the value of <code>GLOBAL_A</code> would be moved. That does not make much sense for a const and as shown cannot be the case anyways since it can be \"moved\" twice.</p>\n\n<p>What are the rules that allow the above snippet to work considering <code>A</code> is not <code>Clone</code> nor <code>Copy</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1321, "user_id": 1291664, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/95854ef7aaf132a9f9ed8fd61366f7df?s=128&d=identicon&r=PG", "display_name": "\u0110or\u0111e Zelji\u0107", "link": "https://stackoverflow.com/users/1291664/%c4%90or%c4%91e-zelji%c4%87"}, "edited": false, "score": 2, "creation_date": 1577570644, "post_id": 59515197, "comment_id": 105202127, "body": "I think this can be useful to you <a href=\"http://gradebot.org/doc/ipur/concurrency.html#mutable-shared-data\" rel=\"nofollow noreferrer\">gradebot.org/doc/ipur/concurrency.html#mutable-shared-data</a>"}], "answers": [{"tags": [], "owner": {"reputation": 1321, "user_id": 1291664, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/95854ef7aaf132a9f9ed8fd61366f7df?s=128&d=identicon&r=PG", "display_name": "\u0110or\u0111e Zelji\u0107", "link": "https://stackoverflow.com/users/1291664/%c4%90or%c4%91e-zelji%c4%87"}, "is_accepted": false, "score": 1, "last_activity_date": 1577571855, "creation_date": 1577571855, "answer_id": 59515389, "question_id": 59515197, "link": "https://stackoverflow.com/questions/59515197/spawning-threads-and-keeping-data-from-them/59515389#59515389", "title": "Spawning threads and keeping data from them", "body": "<p>Here is very simple example of code based on source you have provieded:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\nuse std::thread;\n\nfn main() {\n    let item_array: HashMap&lt;i32, i32&gt; = HashMap::new();\n    let array: [i32; 3] = [0, 1, 2];\n    let mut handles = vec![];\n\n    let mutex = std::sync::Mutex::new(item_array);\n    let arc = std::sync::Arc::new(mutex);\n\n    for item in &amp;array {\n        let item = item.to_owned();\n        let arc_cloned = std::sync::Arc::clone(&amp;arc);\n\n        let th = thread::spawn(move || {\n            let mut guard = arc_cloned.lock().unwrap();\n\n            guard.insert(item, item);\n        });\n\n        handles.push(th);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"{:?}\", arc.lock().unwrap());\n}\n</code></pre>\n\n<p>And you can play it here on <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=111b4a9dcd04ab83b9eafa5e5843ee68\" rel=\"nofollow noreferrer\">rust playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 1, "creation_date": 1577595027, "post_id": 59515703, "comment_id": 105205247, "body": "Ack! A misconception; <code>&#39;static</code> does not mean will live for the entire lifetime of the program. It means it <i>could</i> live for that long. Or, in other words, that its existence (And therefore its own lifetime) is not dependent on the lifetime of other things. You can, for example, pass a (Non <code>Copy</code>) struct like <code>File</code> into another thread without issue, but the <code>File</code> is not inlined in the binary. In the case of <code>&amp;&#39;static _</code> (Where _ is anything), it will live for the entire lifetime of the program, but that&#39;s not what <code>&#39;static</code> says there, <code>&#39;static</code> is just a side effect of that."}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": false, "score": 2, "last_activity_date": 1577640499, "last_edit_date": 1592644375, "creation_date": 1577575341, "answer_id": 59515703, "question_id": 59515197, "link": "https://stackoverflow.com/questions/59515197/spawning-threads-and-keeping-data-from-them/59515703#59515703", "title": "Spawning threads and keeping data from them", "body": "<p>There are two problems here (which are typical problems with multithreaded Rust):</p>\n<ol>\n<li>Your thread cannot borrow any data that may outlive it (which, when using <a href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>std::thread::spawn</code></a>, is any data<sup>1</sup>).</li>\n<li>Multiple thread cannot borrow the same mutable data.</li>\n</ol>\n<p>The first problem is typically solved by:</p>\n<ol>\n<li>Copying data instead of referencing it. This is particularly useful for primitive types, such as integers.</li>\n<li>Using <a href=\"https://docs.rs/crossbeam/0.7.3/crossbeam/fn.scope.html\" rel=\"nofollow noreferrer\">scoped threads</a>.</li>\n<li>Using <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a> for thread-safe shared pointer, to ensure that data outlives all threads using it.</li>\n</ol>\n<p>Not all are possible in all cases, but I'd recommend the above solutions in that order.</p>\n<p>The second problem is typically solved with locks such as <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a> or <a href=\"https://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"nofollow noreferrer\"><code>RwLock</code></a>, which allows only a single thread to get a mutable reference at a time.</p>\n<p>Combining these, I'd solve your example like this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// mutable data is wrapped in a Mutex\nlet item_array: Mutex&lt;HashMap&lt;i32, i32&gt;&gt; = Mutex::new(HashMap::new());\n\n// immutable data does not have to be wrapped with scoped threads\nlet array: [i32; 3] = [0, 1, 2];\n\n// using crossbeam::scope from the crossbeam library, which lets\n// us reference variables outside the scope (item_array and array)\ncrossbeam::scope(|s| {\n    for item in &amp;array {\n        // copy item (since it is an integer)\n        let item = *item;\n        \n        // explicitly reference item_array, since we'll later need to move this\n        let item_array_ref = &amp;item_array;\n        \n        // move item and item_array_ref into the closure (instead of referencing,\n        // which is by default)\n        s.spawn(move |_| {\n            // need to call .lock() to aquire a mutable reference to the HashMap\n            // will wait until the mutable reference is not used by any other threads\n            let mut item_array_lock = item_array_ref.lock().unwrap();\n            \n            item_array_lock.insert(item, item);\n        });\n    }\n\n    // the scope will persist until all threads spawned inside it (with s.spawn) have completed, blocking the current thread,\n    // ensuring that any referenced data outlives all the threads\n})\n.unwrap();\n\n// need to call .lock() here as well to get a reference to the HashMap\nprintln!(&quot;{:?}&quot;, item_array.lock().unwrap());\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=872b49e8945ed3e0c7c1a440401cc6dd\" rel=\"nofollow noreferrer\">Run in playground</a></p>\n<hr />\n<p><sup>1</sup>Except when the data has <code>'static</code> lifetime, i.e. can exist for the entire lifetime of the program.</p>\n"}], "owner": {"reputation": 10822, "user_id": 16645, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/p90Tz.jpg?s=128&g=1", "display_name": "Glen Solsberry", "link": "https://stackoverflow.com/users/16645/glen-solsberry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1577640499, "creation_date": 1577570288, "question_id": 59515197, "link": "https://stackoverflow.com/questions/59515197/spawning-threads-and-keeping-data-from-them", "title": "Spawning threads and keeping data from them", "body": "<p>This is a super contrived example that shows what I want to do; I have a HashMap that I want to push data in to, but I want to do it in a set of threads - the real example is that I'm connecting to a remote service inside the <code>thread::spawn</code> and so I want to have all of it happen in the background as much as possible so it doesn't block the primary thread.</p>\n\n<p>I'm not sure how to refactor my code to allow what I'm wanting to do - any suggestions would be helpful!</p>\n\n<pre><code>let mut item_array : HashMap&lt;i32, i32&gt; = HashMap::new();\nlet mut array: [i32; 3] = [0, 1, 2];\n\nfor item in &amp;array {\n    thread::spawn(|| {\n        item_array.insert(*item, *item);\n    });\n}\nprintln!(\"{:?}\", item_array);\n</code></pre>\n\n<p>The errors I receive are below</p>\n\n<pre><code>error[E0597]: `array` does not live long enough\n   --&gt; src/main.rs:87:17\n    |\n87  |     for item in &amp;array {\n    |                 ^^^^^^\n    |                 |\n    |                 borrowed value does not live long enough\n    |                 argument requires that `array` is borrowed for `'static`\n...\n153 | }\n    | - `array` dropped here while still borrowed\n\nerror[E0499]: cannot borrow `item_array` as mutable more than once at a time\n  --&gt; src/main.rs:88:23\n   |\n88 |           thread::spawn(|| {\n   |           -             ^^ mutable borrow starts here in previous iteration of loop\n   |  _________|\n   | |\n89 | |             item_array.insert(*item, *item);\n   | |             ---------- borrows occur due to use of `item_array` in closure\n90 | |         });\n   | |__________- argument requires that `item_array` is borrowed for `'static`\n\nerror[E0373]: closure may outlive the current function, but it borrows `item`, which is owned by the current function\n  --&gt; src/main.rs:88:23\n   |\n88 |         thread::spawn(|| {\n   |                       ^^ may outlive borrowed value `item`\n89 |             item_array.insert(*item, *item);\n   |                                ---- `item` is borrowed here\n   |\nnote: function requires argument type to outlive `'static`\n  --&gt; src/main.rs:88:9\n   |\n88 | /         thread::spawn(|| {\n89 | |             item_array.insert(*item, *item);\n90 | |         });\n   | |__________^\nhelp: to force the closure to take ownership of `item` (and any other referenced variables), use the `move` keyword\n   |\n88 |         thread::spawn(move || {\n   |                       ^^^^^^^\n\nerror[E0373]: closure may outlive the current function, but it borrows `item_array`, which is owned by the current function\n  --&gt; src/main.rs:88:23\n   |\n88 |         thread::spawn(|| {\n   |                       ^^ may outlive borrowed value `item_array`\n89 |             item_array.insert(*item, *item);\n   |             ---------- `item_array` is borrowed here\n   |\nnote: function requires argument type to outlive `'static`\n  --&gt; src/main.rs:88:9\n   |\n88 | /         thread::spawn(|| {\n89 | |             item_array.insert(*item, *item);\n90 | |         });\n   | |__________^\nhelp: to force the closure to take ownership of `item_array` (and any other referenced variables), use the `move` keyword\n   |\n88 |         thread::spawn(move || {\n   |                       ^^^^^^^\n\nerror[E0502]: cannot borrow `item_array` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:92:22\n   |\n88 |           thread::spawn(|| {\n   |           -             -- mutable borrow occurs here\n   |  _________|\n   | |\n89 | |             item_array.insert(*item, *item);\n   | |             ---------- first borrow occurs due to use of `item_array` in closure\n90 | |         });\n   | |__________- argument requires that `item_array` is borrowed for `'static`\n91 |       }\n92 |       println!(\"{:?}\", item_array);\n   |                        ^^^^^^^^^^ immutable borrow occurs here\n</code></pre>\n"}, {"tags": ["rust", "type-conversion"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577574209, "post_id": 59514966, "comment_id": 105202754, "body": "Interestingly, the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md#definition-of-constructs\" rel=\"nofollow noreferrer\">RFC did use <code>Into</code></a>, but had <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md#semantics-for-upcasting\" rel=\"nofollow noreferrer\">a section on whether the right trait to use was <code>From</code>, <code>Into</code> or something else</a>. I can&#39;t find any reference to where this issue was solved, but the <a href=\"https://github.com/rust-lang/rust/pull/31954/files#diff-645fefb36415d1b63ac301829ab54fc8R1617\" rel=\"nofollow noreferrer\">initial implementation ended-up using <code>From</code></a>."}], "answers": [{"comments": [{"owner": {"reputation": 1585, "user_id": 3193180, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ZJHYL.jpg?s=128&g=1", "display_name": "kreo", "link": "https://stackoverflow.com/users/3193180/kreo"}, "edited": false, "score": 2, "creation_date": 1577603767, "post_id": 59516150, "comment_id": 105206352, "body": "Wow, I thought Rust disallows implementing external traits on external types. Is From a &quot;special case&quot; to this rule or there is something I am missing?"}, {"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "reply_to_user": {"reputation": 1585, "user_id": 3193180, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ZJHYL.jpg?s=128&g=1", "display_name": "kreo", "link": "https://stackoverflow.com/users/3193180/kreo"}, "edited": false, "score": 0, "creation_date": 1577640464, "post_id": 59516150, "comment_id": 105214251, "body": "@kreo I&#39;m not actually sure <i>why</i> it works, I think the general rule is still that you&#39;re not allowed to do that (for instance <code>impl&lt;T&gt; From&lt;MyType&lt;T&gt;&gt; for ForeignType&lt;T&gt;</code> won&#39;t work) but sometimes it seems to be allowed nonetheless. Does not seem to be special to <code>From</code> though, as you can do the same with e.g. <code>AsRef</code>."}], "tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 4, "last_activity_date": 1577581907, "last_edit_date": 1577581907, "creation_date": 1577581452, "answer_id": 59516150, "question_id": 59514966, "link": "https://stackoverflow.com/questions/59514966/why-does-operator-use-from-instead-of-into/59516150#59516150", "title": "Why does &#39;?&#39; operator use From instead of Into?", "body": "<p>The <code>is_ok!</code> macro was <a href=\"https://github.com/rust-lang/rust/commit/ece8a8f520697be50cbe543bebe065c5198dae4d#diff-f7ad4a5ae3364771b775302f47d00063R201-R204\" rel=\"nofollow noreferrer\">initally implemented</a> without implicitly error conversion. That macro was <a href=\"https://github.com/rust-lang/rust/commit/7bb498bd7a09f024fe46fc58ea17fe44cbc68df0#diff-f7ad4a5ae3364771b775302f47d00063L358-R358\" rel=\"nofollow noreferrer\">renamed</a> to <code>try!</code>, and when error conversion was later <a href=\"https://github.com/rust-lang/rust/commit/6815c2e8e8dae3d8dedfe95e985a79c57841bdb2#diff-f7ad4a5ae3364771b775302f47d00063R324\" rel=\"nofollow noreferrer\">implemented</a>, they chose to use the <code>FromError</code> trait, which <a href=\"https://github.com/rust-lang/rust/commit/e17f4fc1d4545f5c17b21805c5145b05495484ee#diff-f7ad4a5ae3364771b775302f47d00063L100-R100\" rel=\"nofollow noreferrer\">later</a> was replaced with the <code>From&lt;E&gt;</code> trait after the more generic conversion traits were <a href=\"https://github.com/rust-lang/rust/commit/8389253df0431e58bfe0a8e0e3949d58ebe7400f#diff-da707dc4d90c85e7074dbdecebfe8785R42-R45\" rel=\"nofollow noreferrer\">implemented</a> around 6 months later.</p>\n\n<p>As @mcarton mentioned, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md\" rel=\"nofollow noreferrer\">the RFC for the <code>?</code> operator</a> used the <code>Into</code> trait for error conversion. It also says that \"<em>The postfix <code>?</code> operator can be applied to <code>Result</code> values and is equivalent to the current <code>try!()</code> macro.</em>\" However, as noted in <a href=\"https://github.com/rust-lang/rust/issues/31436#issuecomment-299638299\" rel=\"nofollow noreferrer\">this comment</a> by stbuehler:</p>\n\n<blockquote>\n  <p>Sadly there would be a regression. If no (non-trivial) <code>From&lt;...&gt;</code> instance for an error type is implemented, the compiler can deduce the type in certain cases, where it cannot deduce it when using <code>Into</code> (the set of <code>From</code> instances is limited by the current crate, the full set of Into instances is not known while compiling a crate).</p>\n</blockquote>\n\n<p>So my interpretation of this is that the <code>try!</code> macro added error conversion support before the <code>From</code>and <code>Into</code> traits existed, and because the <code>?</code> operator should behave the same as the <code>try!</code> macro, and that changing to <code>Into</code> would break type deduction, the <code>?</code> operator was implemented using <code>From</code> instead.</p>\n\n<hr>\n\n<p>That being said, you're allowed to implement <code>From&lt;MyType&gt; for ForeignType</code>, as long as <code>MyType</code> is a type in your crate:</p>\n\n<pre><code>struct MyError;\n\nimpl From&lt;MyError&gt; for ExternalError {\n    fn from(err: MyError) -&gt; external_module::ExternalError {\n        ExternalError {}\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e3aa7a107d7b59e68697f100225669bf\" rel=\"nofollow noreferrer\">Example in playground</a></p>\n"}], "owner": {"reputation": 1585, "user_id": 3193180, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ZJHYL.jpg?s=128&g=1", "display_name": "kreo", "link": "https://stackoverflow.com/users/3193180/kreo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 135, "favorite_count": 0, "accepted_answer_id": 59516150, "answer_count": 1, "score": 3, "last_activity_date": 1577581907, "creation_date": 1577567987, "question_id": 59514966, "link": "https://stackoverflow.com/questions/59514966/why-does-operator-use-from-instead-of-into", "title": "Why does &#39;?&#39; operator use From instead of Into?", "body": "<p>Suppose there is an external module (provided by a third-party library):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub mod external_module {\n    #[derive(Debug)]\n    pub struct ExternalError;\n\n    pub trait SomeTrait {\n        fn do_stuff(&amp;self) -&gt; Result&lt;i32, ExternalError&gt;;\n    }\n}\n</code></pre>\n\n<p>I need to implent <code>SomeTrait</code> in my code. There are some internal errors that my code could face, so I define my own error type and make it convertible into <code>ExternalError</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyError;\n\nimpl Into&lt;ExternalError&gt; for MyError {\n    fn into(self) -&gt; external_module::ExternalError {\n        ExternalError {}\n    }\n}\n</code></pre>\n\n<p>Notice that I can not implement <code>from&lt;MyError&gt; for ExternalError</code> because <code>ExternalError</code> is defined outside of my namespace (in reality even outside of my crate).</p>\n\n<p>Now I implement <code>SomeTrait</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn do_my_things() -&gt; Result&lt;(), MyError&gt; {\n    Ok(())\n}\n\nstruct MyStruct;\n\nimpl SomeTrait for MyStruct {\n    fn do_stuff(&amp;self) -&gt; Result&lt;i32, ExternalError&gt; {\n        do_my_things()?;\n        Ok(200)\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=18c7f0e73c690e55c5117197cc477f47\" rel=\"nofollow noreferrer\">Full code in the playground</a>. However, this won't compile:</p>\n\n<pre><code>error[E0277]: `?` couldn't convert the error to `external_module::ExternalError`\n  --&gt; src/main.rs:28:23\n   |\n28 |         do_my_things()?;\n   |                       ^ the trait `std::convert::From&lt;MyError&gt;` is not implemented for `external_module::ExternalError`\n   |\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = note: required by `std::convert::From::from`\n</code></pre>\n\n<p>To make it compile, I can explicitly use <code>into()</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    do_my_things().map_err(|e| e.into())?;\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3d71dc91700890e02f2eda9119227966\" rel=\"nofollow noreferrer\">Playground</a>. Two questions here:</p>\n\n<ol>\n<li>Why does '?' operator use <code>From</code> instead of <code>Into</code>? The latter seems much more reasonable because it would be more permissive: <code>From&lt;A&gt; for B</code> implies <code>Into&lt;B&gt; for A</code>, but not the other way around.</li>\n<li>What is the best way to handle error conversion in my particular case? Writing <code>.map_err(|e| e.into())</code> looks unreasonably verbose (sometimes I even have to explicitly specify types in the closure because the compiler can not deduce them!)</li>\n</ol>\n\n<p>Some context: I was playing with <a href=\"https://github.com/hyperium/tonic\" rel=\"nofollow noreferrer\">tonic</a> when I got into this situation. The library generates traits from <code>.proto</code> files and then expects you to implement them (see <a href=\"https://github.com/hyperium/tonic/blob/master/examples/src/helloworld/server.rs\" rel=\"nofollow noreferrer\">the basic helloworld</a>). In case of failure you need to return <code>Err(tonic::Status)</code>, which basically contains a GRPC error code and an error message. I don't want my inner error type to have anything to do with GRPC error codes, I only want to add them when my error gets converted into <code>tonic::Status</code>.</p>\n"}, {"tags": ["rust", "java-native-interface"], "answers": [{"comments": [{"owner": {"reputation": 47, "user_id": 5424687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43f5d448a52114f9ff525da03f070020?s=128&d=identicon&r=PG&f=1", "display_name": "madde", "link": "https://stackoverflow.com/users/5424687/madde"}, "edited": false, "score": 0, "creation_date": 1577557725, "post_id": 59513634, "comment_id": 105199168, "body": "Thanks for your help. That&#39;s what I tried before - when trying to run        // Add items         env.call_method(             arraylist,             &quot;add&quot;,             &quot;(Ljava/lang/String;)Z&quot;,             JObject::from(                 &amp;env.new_string(question_details_array[1].to_owned())                     .unwrap()                     .to_owned(),             ),         )         .unwrap();  It results in:  ^^^^^^^^^^^^^ the trait <code>std::convert::From&lt;&amp;jni::wrapper::objects::jstring::JString&lt;&zwnj;&#8203;&#39;_&gt;&gt;</code> is not implemented for `jni::wrapper::objects::jobject::JObject&lt;&#39;_&gt;"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 47, "user_id": 5424687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43f5d448a52114f9ff525da03f070020?s=128&d=identicon&r=PG&f=1", "display_name": "madde", "link": "https://stackoverflow.com/users/5424687/madde"}, "edited": false, "score": 0, "creation_date": 1577558452, "post_id": 59513634, "comment_id": 105199367, "body": "Why do you pass a reference? There is a <code>impl&lt;&#39;a&gt; From&lt;JString&lt;&#39;a&gt;&gt; for JObject&lt;&#39;a&gt;</code>, not a <code>impl&lt;&#39;a&gt; From&lt;&amp;&#39;a JString&lt;&#39;a&gt;&gt; for JObject&lt;&#39;a&gt;</code>."}, {"owner": {"reputation": 47, "user_id": 5424687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43f5d448a52114f9ff525da03f070020?s=128&d=identicon&r=PG&f=1", "display_name": "madde", "link": "https://stackoverflow.com/users/5424687/madde"}, "edited": false, "score": 0, "creation_date": 1577653118, "post_id": 59513634, "comment_id": 105217504, "body": "You are certainly right - I rewrote it to:     let cls_arraylist = env.find_class(&quot;java/util/ArrayList&quot;).unwrap();     let arraylist = env.new_object(cls_arraylist, &quot;()O&quot;, &amp;[]).unwrap();     let mut i = 0;     while i &lt; 7 {         // Add items         env.call_method(             arraylist,             &quot;add&quot;,             &quot;(Ljava/lang/Object;)Z&quot;,             &amp;[JValue::from(JObject::from(env.new_string(&quot;PETER&quot;.to_strin&zwnj;&#8203;g()).unwrap()))],         )         .unwrap();         i += 1;     }&#39; But now it crashes with a SIGABRT when trying to access it as an Arraylist of Objects in Java."}, {"owner": {"reputation": 15619, "user_id": 1548468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0745dce203d52699e63a575b3103ad70?s=128&d=identicon&r=PG", "display_name": "Botje", "link": "https://stackoverflow.com/users/1548468/botje"}, "edited": false, "score": 1, "creation_date": 1577719317, "post_id": 59513634, "comment_id": 105235721, "body": "The signature on your constructor is extremely suspect. The return type should be void (V), not O."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 2, "last_activity_date": 1577556939, "creation_date": 1577556939, "answer_id": 59513634, "question_id": 59513518, "link": "https://stackoverflow.com/questions/59513518/trying-to-create-and-add-strings-to-a-arraylist-in-jni/59513634#59513634", "title": "Trying to Create and Add Strings to a Arraylist in JNI", "body": "<blockquote>\n  <p>I [\u2026] have found no way to convert my <code>JString</code> to a <code>JObject</code></p>\n</blockquote>\n\n<p>The <a href=\"https://docs.rs/jni/0.4.2/jni/objects/struct.JObject.html\" rel=\"nofollow noreferrer\">documentation of <code>JObject</code></a> clearly mentions that there is an</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; From&lt;JString&lt;'a&gt;&gt; for JObject&lt;'a&gt;\n</code></pre>\n\n<p>This means you can use <code>JObject::from(some_jstring)</code> or if type inference is clear <code>some_jstring.into()</code>.</p>\n"}], "owner": {"reputation": 47, "user_id": 5424687, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43f5d448a52114f9ff525da03f070020?s=128&d=identicon&r=PG&f=1", "display_name": "madde", "link": "https://stackoverflow.com/users/5424687/madde"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 401, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1577557357, "creation_date": 1577556219, "last_edit_date": 1577557357, "question_id": 59513518, "link": "https://stackoverflow.com/questions/59513518/trying-to-create-and-add-strings-to-a-arraylist-in-jni", "title": "Trying to Create and Add Strings to a Arraylist in JNI", "body": "<p>I have a rust vector of an unknown size only filled with Strings, which I try to pass to Java as an <code>Arraylist</code> with the JNI crate. Passing a <code>JArray</code> with <code>JStrings</code> (<code>getQuestionDetails</code>) works flawlessly (passing them in Rust and reading them in Java) and I have been able to get it to build an <code>Arraylist</code> (<code>getArrayList</code>) when adding and initializing with integers, but I just can't figure out how to add Strings and to initialize it correctly.</p>\n\n<p>I know, that my code can't work with a <code>JValue</code> required at this position (docs: <a href=\"https://docs.rs/jni/0.9.3/jni/struct.JNIEnv.html#method.call_method\" rel=\"nofollow noreferrer\">https://docs.rs/jni/0.9.3/jni/struct.JNIEnv.html#method.call_method</a>) and me passing a <code>JString</code>. So the compiler is of course correct when telling me:</p>\n\n<pre><code>error[E0308]: mismatched types\n   --&gt; src/lib.rs:140:70\n    |\n140 |           env.call_method(arraylist, \"add\", \"(Ljava/lang/String;)Z\", &amp;[env.new_string(\n    |  ______________________________________________________________________^\n141 | |                 question_details_array\n142 | |                     [1]\n143 | |                 .to_owned(),\n144 | |             )\n145 | |             .unwrap()\n146 | |             .to_owned()]\n    | |_______________________^ expected enum `jni::wrapper::objects::jvalue::JValue`, found struct `jni::wrapper::objects::jstring::JString`\n    |\n    = note: expected type `jni::wrapper::objects::jvalue::JValue&lt;'_&gt;`\n               found type `jni::wrapper::objects::jstring::JString&lt;'_&gt;`\n</code></pre>\n\n<p>I have seen that in the docs for <a href=\"https://docs.rs/jni/0.4.2/jni/objects/enum.JValue.html\" rel=\"nofollow noreferrer\"><code>JValue</code></a>, <code>JString</code> is not an accepted type, but I can't pass my string as a value and have found no way to convert my <code>JString</code> to a <code>JObject</code>.</p>\n\n<p>My unsuccessful coding attempt:</p>\n\n<p>lib.rs (full code: <a href=\"https://github.com/mad-de/lib_impp_android\" rel=\"nofollow noreferrer\">https://github.com/mad-de/lib_impp_android</a>):</p>\n\n<pre><code>#[allow(dead_code)]\nmod lib_impp;\n\nuse jni::objects::{JObject, JString, JValue};\nuse jni::sys::{jarray, jobject, jobjectArray, jstring};\nuse jni::JNIEnv;\nuse std::convert::TryFrom;\nuse std::ffi::{CStr, CString};\n\n// Return Arraylist - use Array as source for easier testing instead of Vec\n#[no_mangle]\npub unsafe extern \"C\" fn Java_com_example_android_MainActivity_getArraylist(\n    env: JNIEnv,\n    _: JObject,\n    question_num: i32,\n    jeopardy_mode: bool,\n) -&gt; jobject {\n    let question_details_array: [String; 4] =\n        lib_impp::get_mc_distractors(question_num, jeopardy_mode, &amp;FILES_PATH);\n    let cls_arraylist = env.find_class(\"java/util/ArrayList\").unwrap();\n    let arraylist = env.new_object(cls_arraylist, \"()String\", &amp;[]).unwrap();\n    let mut i = 0;\n    while i &lt; 4 {\n        // Add items\n        env.call_method(\n            arraylist,\n            \"add\",\n            \"(Ljava/lang/String;)Z\",\n            &amp;[env\n                .new_string(question_details_array[1].to_owned())\n                .unwrap()\n                .to_owned()],\n        )\n        .unwrap();\n        i += 1;\n    }\n    *arraylist\n}\n\n// Return Array with a Question Element\n#[no_mangle]\npub unsafe extern \"C\" fn Java_com_example_android_MainActivity_getQuestionDetails(\n    env: JNIEnv,\n    _: JObject,\n    question_num: i32,\n) -&gt; jarray {\n    let question_details_array: [String; 4] =\n        lib_impp::get_question_details(question_num, &amp;FILES_PATH);\n    // Initialize our array with 4 empty Strings\n    let array: jobjectArray = env\n        .new_object_array(\n            4,\n            env.find_class(\"java/lang/String\").unwrap(),\n            *env.new_string(\"\").unwrap(),\n        )\n        .unwrap();\n    let mut i = 0;\n    while i &lt; 4 {\n        // Edit every Item of the Array to give it the values we want\n        env.set_object_array_element(\n            array,\n            i,\n            *env.new_string(\n                question_details_array\n                    [usize::try_from(i).expect(\"Variable i could not be converted to usize.\")]\n                .to_owned(),\n            )\n            .unwrap()\n            .to_owned(),\n        )\n        .expect(\"Could not perform set_object_array_element on array element.\");\n        i += 1;\n    }\n    array\n}\n</code></pre>\n\n<p>So how can I pass a <code>Arraylist</code> with strings (<code>JStrings</code>)? I probably took a completely wrong turn somewhere, so many thanks for your help in advance!</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577549465, "post_id": 59512452, "comment_id": 105196912, "body": "Why would you want to do that? Also, your solution cannot work because generics and <code>impl Trait</code> can only be one type at a time. They can&#39;t be chosen at runtime."}, {"owner": {"reputation": 669, "user_id": 258622, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/3163faf8c9751ed7d2e3c3735c0fcbc8?s=128&d=identicon&r=PG", "display_name": "ZeDalaye", "link": "https://stackoverflow.com/users/258622/zedalaye"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577549987, "post_id": 59512452, "comment_id": 105197055, "body": "@mcarton for educational purposes"}], "answers": [{"tags": [], "owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "is_accepted": false, "score": 0, "last_activity_date": 1577549645, "creation_date": 1577549645, "answer_id": 59512596, "question_id": 59512452, "link": "https://stackoverflow.com/questions/59512452/rust-generic-local-variable/59512596#59512596", "title": "Rust generic local variable", "body": "<p>Firstly, the method approach (with <code>impl BufRead</code>) nor the <code>if/else</code> approach will work since the types of the two <code>BufRead</code> implementers are different (namely <code>StdinLock</code> and <code>BufReader</code>). The issue with both of these methods is that they expect a single concrete type. I wouldn't worry too much about trying to factor out something as trivial as this.</p>\n\n<p>In general however, if you wish to have polymorphism at runtime, you can use the <code>Box&lt;dyn Trait&gt;</code> pattern to create a trait object. More information on this can be found in the rust book here: <a href=\"https://doc.rust-lang.org/1.30.0/book/2018-edition/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/1.30.0/book/2018-edition/ch17-02-trait-objects.html</a></p>\n"}, {"comments": [{"owner": {"reputation": 669, "user_id": 258622, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/3163faf8c9751ed7d2e3c3735c0fcbc8?s=128&d=identicon&r=PG", "display_name": "ZeDalaye", "link": "https://stackoverflow.com/users/258622/zedalaye"}, "edited": false, "score": 0, "creation_date": 1577555224, "post_id": 59512752, "comment_id": 105198492, "body": "Thank you @edwardw, can you also teach me how to deal with Stdin::lock reference ?"}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": false, "score": 1, "last_activity_date": 1577550813, "creation_date": 1577550813, "answer_id": 59512752, "question_id": 59512452, "link": "https://stackoverflow.com/questions/59512452/rust-generic-local-variable/59512752#59512752", "title": "Rust generic local variable", "body": "<p>As @sshashank124 has stated, returning <code>impl SomeTrait</code> only means the function is to return <em>one concrete type</em> that implements <code>SomeTrait</code>. It doesn't give the function license to return heterogeneous types.</p>\n\n<p>The fact that <a href=\"https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lock\" rel=\"nofollow noreferrer\"><code>Stdin::lock</code></a> takes a reference also doesn't help here. It will go out of scope as soon as the function returns or the local scope which it is in ends.</p>\n\n<p>Ignore the issue of <code>Stdin::lock</code> for a moment, you can do:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let stdin = io::stdin();\nlet reader: Box&lt;dyn BufRead&gt; = if input == \"-\" {\n    Box::new(stdin.lock())\n} else {\n    let f = File::open(input).unwrap();\n    Box::new(BufReader::new(f))\n};\nprocess_lines(reader, re);\n</code></pre>\n\n<p>Or with third party crate such as <code>either</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use either::Either;\n\nlet stdin = io::stdin();\nlet reader = if input == \"-\" {\n    Either::Left(stdin.lock())\n} else {\n    let f = File::open(input).unwrap();\n    Either::Right(BufReader::new(f))\n};\nprocess_lines(reader, re);\n</code></pre>\n\n<p>It seems trivial in this case. But it may help you in the future.</p>\n"}], "owner": {"reputation": 669, "user_id": 258622, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/3163faf8c9751ed7d2e3c3735c0fcbc8?s=128&d=identicon&r=PG", "display_name": "ZeDalaye", "link": "https://stackoverflow.com/users/258622/zedalaye"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 245, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1577559016, "creation_date": 1577548694, "last_edit_date": 1577559016, "question_id": 59512452, "link": "https://stackoverflow.com/questions/59512452/rust-generic-local-variable", "title": "Rust generic local variable", "body": "<p>From the book \"Rust in Action\" (Manning, currently MEAP), the final example of Chapter 2 shows a way to implement a generic function that can work on <code>BufRead + Sized</code> parameters:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn process_lines&lt;T: BufRead + Sized&gt;(reader: T, re: Regex) {\n  for line_ in reader.lines() {\n    let line = line_.unwrap();\n    match re.find(&amp;line) {\n        Some(_) =&gt; println!(\"{}\", line),\n        None =&gt; (),\n    }\n  }\n}\n</code></pre>\n\n<p>The code that uses it looks like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let input = args.value_of(\"input\").unwrap_or(\"-\");\nif input == \"-\" {\n  let stdin = io::stdin();\n  let reader = stdin.lock();\n  process_lines(reader, re);\n} else {\n  let f = File::open(input).unwrap();\n  let reader = BufReader::new(f);\n  process_lines(reader, re);\n}\n</code></pre>\n\n<p>I'm wondering if it is possible to declare the <code>reader</code> variable earlier with a generic type so the process_lines() call can be factored out?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let reader: ????;\nlet input = args.value_of(\"input\").unwrap_or(\"-\");\nif input == \"-\" {\n  let stdin = io::stdin();\n  reader = stdin.lock();\n} else {\n  let f = File::open(input).unwrap();\n  reader = BufReader::new(f);\n}\nprocess_lines(reader, re);\n</code></pre>\n\n<p>Or by using an (anonymous) method that would return <code>impl BufRead + Sized</code> ?</p>\n\n<p>Something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn build_reader(input: &amp;str) -&gt; impl BufRead + Sized {\n  if input == \"-\" {\n    let stdin = io::stdin();\n    stdin.lock()  \n  } else {\n    let f = File::open(input).unwrap();\n    BufReader::new(f)\n  }\n}\n</code></pre>\n\n<p>But compiler is not very happy, see <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0e74d3e96de0bbf61b9f61d44d305e5e\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0e74d3e96de0bbf61b9f61d44d305e5e</a></p>\n\n<p><strong>Edit</strong></p>\n\n<p>I succeeded building a BufRead builder using the advice from <a href=\"https://stackoverflow.com/a/49964042/258622\">https://stackoverflow.com/a/49964042/258622</a> </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn build_reader(input: &amp;str) -&gt; Box&lt;dyn BufRead&gt; {\n  if input == \"-\" { \n    Box::new(BufReader::new(io::stdin()))\n  } else {\n    let f = File::open(input).unwrap();\n    Box::new(BufReader::new(f))\n  }\n}\n</code></pre>\n\n<p>Compiler is happy, I wonder what are the consequences of not using <code>stdin.lock()</code>...</p>\n\n<p>Main now looks like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n ...\n let input = args.value_of(\"input\").unwrap_or(\"-\");\n let reader = build_reader(input);\n process_lines(reader, re)\n}\n</code></pre>\n\n<p>Code that compiles: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c5218ef4a266597da6a36c21e060bcda\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c5218ef4a266597da6a36c21e060bcda</a></p>\n\n<p><strong>Edit 2</strong> : A more idiomatic version taking advantage of the fact that <a href=\"https://docs.rs/clap/2.33.0/clap/struct.ArgMatches.html#method.value_of\" rel=\"nofollow noreferrer\"><code>clap::ArgMatches::value_of()</code></a> returns an <code>Option&lt;&amp;str&gt;</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn build_reader(input: Option&lt;&amp;str&gt;) -&gt; Box&lt;dyn BufRead&gt; {\n  match input {\n    None =&gt; Box::new(BufReader::new(io::stdin())),\n    Some(filename) =&gt; {\n      let f = File::open(filename).unwrap();\n      Box::new(BufReader::new(f))\n    }\n  }\n}\n\nfn main() {\n  ...\n  let input = args.value_of(\"input\");\n  let reader = build_reader(input);\n  process_lines(reader, re)\n}\n</code></pre>\n"}, {"tags": ["intellij-idea", "rust", "ide", "clion", "rustfmt"], "answers": [{"tags": [], "owner": {"reputation": 976, "user_id": 1308890, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5473493af9a893863cb3fd6cf52134a?s=128&d=identicon&r=PG", "display_name": "bit2pixel", "link": "https://stackoverflow.com/users/1308890/bit2pixel"}, "is_accepted": false, "score": 2, "last_activity_date": 1577546874, "creation_date": 1577546874, "answer_id": 59512215, "question_id": 59512214, "link": "https://stackoverflow.com/questions/59512214/execute-rustfmt-on-file-save-in-intellij-or-clion/59512215#59512215", "title": "Execute rustfmt on file save in IntelliJ or CLion", "body": "<ol>\n<li><p>Make sure you have <code>File Watchers</code> plugin via <code>Preferences -&gt; Plugins -&gt; Installed</code>. If it's not installed, go to the <code>Marketplace</code> tab and search for <code>File Watchers</code>, install it, and restart your IDE.</p></li>\n<li><p>Go to <code>Preferences -&gt; Tools -&gt; File Watchers</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/A54IO.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/A54IO.png\" alt=\"File Watchers\"></a></p></li>\n<li><p>Add a new watcher and name it <code>rustfmt</code>. </p>\n\n<p><a href=\"https://i.stack.imgur.com/QTfQ2.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/QTfQ2.png\" alt=\"File Watchers\"></a></p></li>\n<li><p>Configure the watcher by following the screenshot below. Enter the path to <code>rustfmt</code> into the <code>Program</code> field; it can be found in your <code>Cargo bin directory</code>. </p></li>\n</ol>\n\n<blockquote>\n  <p>If you don't know where <code>Cargo bin directory</code> directory is, type <code>which rustfmt</code> in your terminal and copy the path. If you still can't find it, make sure you followed the instructions in <a href=\"https://doc.rust-lang.org/book/ch01-01-installation.html\" rel=\"nofollow noreferrer\">Installing Rust</a>.</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/jmHha.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/jmHha.png\" alt=\"enter image description here\"></a></p>\n"}, {"tags": [], "owner": {"reputation": 900, "user_id": 1094711, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ee1f1aa7108ec48219abc991444c542a?s=128&d=identicon&r=PG", "display_name": "woodm1979", "link": "https://stackoverflow.com/users/1094711/woodm1979"}, "is_accepted": false, "score": 11, "last_activity_date": 1584470255, "last_edit_date": 1592644375, "creation_date": 1584470255, "answer_id": 60728382, "question_id": 59512214, "link": "https://stackoverflow.com/questions/59512214/execute-rustfmt-on-file-save-in-intellij-or-clion/60728382#60728382", "title": "Execute rustfmt on file save in IntelliJ or CLion", "body": "<p>It should be noted that while bit2pixel's answer will work, (and indeed is how I did it for a good long while), there's a newer (better?) way.  The rust-plugin has an option to handle this automatically.</p>\n<p><a href=\"https://i.stack.imgur.com/STSMr.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/STSMr.png\" alt=\"enter image description here\" /></a></p>\n"}], "owner": {"reputation": 976, "user_id": 1308890, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5473493af9a893863cb3fd6cf52134a?s=128&d=identicon&r=PG", "display_name": "bit2pixel", "link": "https://stackoverflow.com/users/1308890/bit2pixel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1163, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1584470255, "creation_date": 1577546874, "question_id": 59512214, "link": "https://stackoverflow.com/questions/59512214/execute-rustfmt-on-file-save-in-intellij-or-clion", "title": "Execute rustfmt on file save in IntelliJ or CLion", "body": "<p>How do I run <code>rustfmt</code> automatically when I save a file in IntelliJ or CLion?</p>\n"}, {"tags": ["performance", "rust", "compilation", "rust-cargo"], "comments": [{"owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "edited": false, "score": 0, "creation_date": 1577543684, "post_id": 59511731, "comment_id": 105195396, "body": "After the initial compilation, incremental builds would be much faster. Why is this a concern?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "edited": false, "score": 0, "creation_date": 1577544550, "post_id": 59511731, "comment_id": 105195604, "body": "@sshashank124 &quot;in reality there are [\u2026], clean builds, cicd pipelines&quot; CI/CD typically does clean builds, if he is compiling in both release and debug mode there, he might be afraid to waste resources."}], "owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 96, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1577543206, "creation_date": 1577542989, "last_edit_date": 1577543206, "question_id": 59511731, "link": "https://stackoverflow.com/questions/59511731/share-compiled-dependencies-between-dev-and-release-builds", "title": "Share compiled dependencies between dev and release builds", "body": "<p>I can compile Rust dependencies in optimized mode, while compiling your own code in debug mode:</p>\n\n<pre><code># Cargo.toml\n[profile.dev.package.\"*\"]\nopt-level = 3\ndebug = false\n</code></pre>\n\n<p>But this still compiles all my dependencies twice: once for debug mode and once for release mode, which seems wasteful (even with sccache):</p>\n\n<pre><code>$ cargo clean\n$ cargo build\n... all the dependencies ...\nFinished dev [unoptimized + debuginfo] target(s) in 1m 44s\n$ cargo build --release\n... all the dependencies ...\nFinished release [optimized] target(s) in 2m 08s\n</code></pre>\n\n<p>Theoretically it's only once, but in reality there are multiple developers, clean builds, cicd pipelines...</p>\n\n<p>How can I make dev mode and release mode share compiled targets?</p>\n"}, {"tags": ["loops", "rust"], "answers": [{"tags": [], "owner": {"reputation": 27886, "user_id": 3337070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8974b88c4bd084f5928ad99d4e8033da?s=128&d=identicon&r=PG", "display_name": "sshashank124", "link": "https://stackoverflow.com/users/3337070/sshashank124"}, "is_accepted": true, "score": 3, "last_activity_date": 1577543999, "creation_date": 1577543999, "answer_id": 59511863, "question_id": 59511721, "link": "https://stackoverflow.com/questions/59511721/rust-access-mutable-argument-in-while-let/59511863#59511863", "title": "Rust: access mutable argument in &quot;while let&quot;", "body": "<p>The issue is not with your <code>BTreeMap</code> but rather with the lifetime of your <code>Node</code>. You are creating a node inside the method <code>build_string</code> and trying to insert a reference to it into the map. However, once the method <code>build_string</code> goes out of scope, the local <code>insert_node</code> gets dropped but the reference would still exist in the tree. This is not allowed.</p>\n\n<p>Therefore, you could change the <code>BTreeMap</code> to have values of <code>Node</code> instead of <code>&amp;Node</code>. Then you would simply insert the <code>insert_node</code> into the tree which would take ownership of the node thus avoiding any reference leaks</p>\n"}], "owner": {"reputation": 6394, "user_id": 3060739, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/d3f6899a9bbad79b7c7c0e11b0800b5e?s=128&d=identicon&r=PG", "display_name": "Haven", "link": "https://stackoverflow.com/users/3060739/haven"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 58, "favorite_count": 0, "accepted_answer_id": 59511863, "answer_count": 1, "score": 0, "last_activity_date": 1577543999, "creation_date": 1577542895, "last_edit_date": 1577542963, "question_id": 59511721, "link": "https://stackoverflow.com/questions/59511721/rust-access-mutable-argument-in-while-let", "title": "Rust: access mutable argument in &quot;while let&quot;", "body": "<p>But for example in the following code, I want to insert a value into a mutable BTreeMap/Hashmap in each loop, my simple solution triggered an error, what is the elegant way to do that in Rust?</p>\n\n<p>Do I need clone the <code>BTreeMap</code> at the beginning of each loop?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn build_string(word: &amp;str, trie: &amp;mut BTreeMap&lt;&amp;str, &amp;Node&gt;, word_index: usize) {\n    for char in  word.chars() {\n        let char_label = char.to_string();\n        let insert_node = Node::new(&amp;char_label, word_index);\n        let insert_result = trie.insert(&amp;char_label, &amp;insert_node);\n        println!(\"char: {}, at index\", char);\n    }\n}\n</code></pre>\n\n<p>error is </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>error[E0597]: `insert_node` does not live long enough\n  --&gt; src/lib.rs:69:54\n   |\n65 | pub fn build_string(word: &amp;str, trie: &amp;mut BTreeMap&lt;&amp;str, &amp;Node&gt;, word_index: usize) {\n   |                                                           - let's call the lifetime of this reference `'1`\n...\n69 |         let insert_result = trie.insert(&amp;char_label, &amp;insert_node);\n   |                             -------------------------^^^^^^^^^^^^-\n   |                             |                        |\n   |                             |                        borrowed value does not live long enough\n   |                             argument requires that `insert_node` is borrowed for `'1`\n70 |         println!(\"char: {}, at index\", char);\n71 |     }\n   |     - `insert_node` dropped here while still borrowed\n\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577535708, "post_id": 59510207, "comment_id": 105193530, "body": "Actually better please do a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>"}, {"owner": {"reputation": 1127, "user_id": 6171872, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/2wfQM.jpg?s=128&g=1", "display_name": "StarSheriff", "link": "https://stackoverflow.com/users/6171872/starsheriff"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577549034, "post_id": 59510207, "comment_id": 105196795, "body": "@Stargateur added minimal example"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577549901, "post_id": 59510207, "comment_id": 105197037, "body": "you first talk about a design problem than you give a compile error problem please keep your original answer don&#39;t continue/modify an question because there is an answer. Choice."}, {"owner": {"reputation": 1127, "user_id": 6171872, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/2wfQM.jpg?s=128&g=1", "display_name": "StarSheriff", "link": "https://stackoverflow.com/users/6171872/starsheriff"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577553053, "post_id": 59510207, "comment_id": 105197898, "body": "I did not change the question. It is exactly the same. I only specified more clearly the challenges of coming up with a nicer solution for matching the errors. Also I added the minimal example without changing anything else, since that was a valid criticism of my original question."}], "answers": [{"comments": [{"owner": {"reputation": 1127, "user_id": 6171872, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/2wfQM.jpg?s=128&g=1", "display_name": "StarSheriff", "link": "https://stackoverflow.com/users/6171872/starsheriff"}, "edited": false, "score": 0, "creation_date": 1577531847, "post_id": 59510277, "comment_id": 105192764, "body": "True, using expect makes it more concise. The matching doesn&#39;t work though. <code>code</code> returns a reference to <code>SqlState</code>:  ``` expected <code>&amp;postgres_shared::error::sqlstate::SqlState</code>, found struct <code>postgres_shared::error::sqlstate::SqlState</code> ```  When I try to match on a reference <code>&amp;UNIQUE_VIOLATION</code>, I get this:  ``` error: to use a constant of type <code>std::borrow::Cow</code> in a pattern, <code>std::borrow::Cow</code> must be annotated with <code>#[derive(PartialEq, Eq)]</code> ```"}, {"owner": {"reputation": 1127, "user_id": 6171872, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/2wfQM.jpg?s=128&g=1", "display_name": "StarSheriff", "link": "https://stackoverflow.com/users/6171872/starsheriff"}, "edited": false, "score": 0, "creation_date": 1577549130, "post_id": 59510277, "comment_id": 105196825, "body": "cool, thanks for the explanation. I was stuck and didn&#39;t find any good explanations. It is a pity though that the errors have to be handled in such a cumbersome way."}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 3, "last_activity_date": 1577539636, "last_edit_date": 1577539636, "creation_date": 1577530865, "answer_id": 59510277, "question_id": 59510207, "link": "https://stackoverflow.com/questions/59510207/why-does-the-same-const-struct-as-match-guard-compile-but-not-as-match-pattern/59510277#59510277", "title": "Why does the same const struct as match guard compile but not as match pattern?", "body": "<p>No, I'm afraid that you can't do much better than this. One \"obvious\" improvement seems to be:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>match e.code().expect(\"not a sql error\") {\n    &amp;UNIQUE_VIOLATION =&gt; {\n        // do something\n    },\n    _ =&gt; panic!(\"unexpected error\"),\n}\n</code></pre>\n\n<p>But it fails to compile with the error:</p>\n\n<blockquote>\n  <p>error: to use a constant of type <code>std::borrow::Cow</code> in a pattern, <code>std::borrow::Cow</code> must be annotated with <code>#[derive(PartialEq, Eq)]</code></p>\n</blockquote>\n\n<p>The reason why it should fail isn't obvious. The Rust reference has this <a href=\"https://doc.rust-lang.org/reference/patterns.html#path-patterns\" rel=\"nofollow noreferrer\">passing sentence</a>:</p>\n\n<blockquote>\n  <p>(...in a path patterns...) Struct and enum constants must have <code>#[derive(PartialEq, Eq)]</code> (not merely implemented).</p>\n</blockquote>\n\n<p>Turns out this is deliberate on the part of <code>rustc</code>. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md\" rel=\"nofollow noreferrer\">RFC 1445</a> explains why and how. In short,</p>\n\n<blockquote>\n  <p>When expanding constants of struct or enum type into equivalent patterns, require that the struct or enum type is decorated with <code>#[structural_match]</code>.</p>\n</blockquote>\n\n<p>The feature gate <code>#[structural_match]</code> will be kept unstable. This feature gate is only automatically applied if a struct or enum is marked as <code>#[derive(Eq)]</code> but not if manually implemented. The <code>std::borrow::Cow</code> struct, which is part of <code>SqlState</code> you tried to match against, unfortunately falls into later category.</p>\n\n<p>The <code>==</code> operator, however, is not subject to such restriction. So a constant struct or enum can still be used in match guards as you did in the question.</p>\n"}], "owner": {"reputation": 1127, "user_id": 6171872, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/2wfQM.jpg?s=128&g=1", "display_name": "StarSheriff", "link": "https://stackoverflow.com/users/6171872/starsheriff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 59510277, "answer_count": 1, "score": 1, "last_activity_date": 1577564112, "creation_date": 1577530123, "last_edit_date": 1577564112, "question_id": 59510207, "link": "https://stackoverflow.com/questions/59510207/why-does-the-same-const-struct-as-match-guard-compile-but-not-as-match-pattern", "title": "Why does the same const struct as match guard compile but not as match pattern?", "body": "<p>I was struggling a bit to handle errors from the <code>postgres</code> crate. Specifically, the <code>SqlState</code> in <code>postgres::error</code>. Since the constants are using <code>Cow</code>, I did not manage to use it in a simple way in match patterns. </p>\n\n<p>For example, <code>UNIQUE_VIOLATION</code> is defined as</p>\n\n<pre><code>/// 23505\npub const UNIQUE_VIOLATION: SqlState = SqlState(Cow::Borrowed(\"23505\"));\n</code></pre>\n\n<p>I ended up with doing the following, but I am sure there is a more ergonomic/canonical way of matching the errors.</p>\n\n<pre><code>        let maybe_user: postgres::Result&lt;User&gt; = create_user(&amp;conn, email);\n        match maybe_user {\n            Err(e) =&gt; {\n                // e.code() returns Option&lt;&amp;postgres::SqlState&gt;\n                match e.code() {\n                    None =&gt; panic!(\"not a sql error\"),\n                    Some(sqlstate) if sqlstate == &amp;UNIQUE_VIOLATION =&gt; {\n                        // do something...\n                    },\n                    Some(sqlstate) =&gt; panic!(\"unexpected error\"),\n                }\n            }\n            Ok(user) =&gt; {\n                assert_eq!(user.email, email);\n            }\n        }\n</code></pre>\n\n<p>If I want to explicitly handle a large quantity of errors, it gets really tedious to repeat lines like</p>\n\n<pre><code>Some(sqlstate) if sqlstate == &amp;UNIQUE_VIOLATION =&gt; {},\n</code></pre>\n\n<p>So, my question is, is there a simpler, more ergonomic way of matching on these errors?</p>\n\n<h1>Update: What I tried</h1>\n\n<p>The suggestion of @edwardw is what I wanted to achieve but everything I tried did not compile.</p>\n\n<ol>\n<li>Using <code>UNIQUE_VIOLATION</code> in the match pattern gives the error:</li>\n</ol>\n\n<pre><code>expected &amp;postgres_shared::error::sqlstate::SqlState, found struct postgres_shared::error::sqlstate::SqlState\n</code></pre>\n\n<ol start=\"2\">\n<li>Using <code>&amp;UNIQUE_VIOLATION</code> in the match patterns gives the error:</li>\n</ol>\n\n<pre><code>error: to use a constant of type std::borrow::Cow in a pattern, std::borrow::Cow must be annotated with #[derive(PartialEq, Eq)] \n</code></pre>\n\n<h1>Update 2: Minimal Example</h1>\n\n<p>Heres a minimal example to quickly reproduce the errors:</p>\n\n<pre><code>use postgres::error::UNIQUE_VIOLATION;\nuse postgres::Result;\n\nfn example() {\n    let sql_state = &amp;UNIQUE_VIOLATION;\n\n    match sql_state {\n        // this match arm works\n        s if s == &amp;UNIQUE_VIOLATION =&gt; {\n            // do something...\n        }\n        // this match arm does not compile\n        &amp;UNIQUE_VIOLATION =&gt; {},\n        _ =&gt; panic!(\"unexpected state\"),\n    }\n}\n</code></pre>\n\n<p>Requires <code>postgres</code> as dependency in <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies]\npostgres = \"0.15.2\"\n</code></pre>\n"}, {"tags": ["types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 108213, "user_id": 27423, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/CoNYx.jpg?s=128&g=1", "display_name": "Daniel Earwicker", "link": "https://stackoverflow.com/users/27423/daniel-earwicker"}, "is_accepted": false, "score": 3, "last_activity_date": 1577491399, "creation_date": 1577491399, "answer_id": 59507125, "question_id": 59507109, "link": "https://stackoverflow.com/questions/59507109/how-to-fix-implicitly-returns-as-its-body-has-no-tail-or-return-expressi/59507125#59507125", "title": "How to fix &quot;implicitly returns &#39;()&#39; as its body has no tail or &#39;return&#39; expression?", "body": "<p>Add <code>words</code> at the end of the function, to state what the final value should be. In your current version it is declared as returning <code>String</code>, but ends with a call to a function that returns nothing.</p>\n"}, {"tags": [], "owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "is_accepted": false, "score": 11, "last_activity_date": 1577492269, "creation_date": 1577492269, "answer_id": 59507179, "question_id": 59507109, "link": "https://stackoverflow.com/questions/59507109/how-to-fix-implicitly-returns-as-its-body-has-no-tail-or-return-expressi/59507179#59507179", "title": "How to fix &quot;implicitly returns &#39;()&#39; as its body has no tail or &#39;return&#39; expression?", "body": "<p>To return a value from a function you have two options in rust:</p>\n\n<ol>\n<li>Use a <code>return &lt;some value&gt;;</code> expression</li>\n<li>End the function with an expression or a value without a semicolon</li>\n</ol>\n\n<pre><code>// returns the value '1' of type 'u8' without using a 'return'\nfn return_one() -&gt; u8 {\n    1\n}\n</code></pre>\n\n<p>When neither of these options is used i.e. the function block ends with a semicolon like your function does, then the value that is returned is <code>()</code> aka the unit type.\nThis value is also returned from functions that do not declare a return type like this one:</p>\n\n<pre><code>// This function returns the unit type '()', \n// because it ends with a semicolon and has no return expressions.\nfn print_to_console(message: &amp;str) {\n    println!(message);\n}\n</code></pre>\n"}], "owner": {"reputation": 89, "user_id": 3494760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/912417f9a6249e9a17af59a15a9c7342?s=128&d=identicon&r=PG&f=1", "display_name": "muffledcry", "link": "https://stackoverflow.com/users/3494760/muffledcry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1151, "favorite_count": 1, "answer_count": 2, "score": 5, "last_activity_date": 1577492269, "creation_date": 1577491246, "question_id": 59507109, "link": "https://stackoverflow.com/questions/59507109/how-to-fix-implicitly-returns-as-its-body-has-no-tail-or-return-expressi", "title": "How to fix &quot;implicitly returns &#39;()&#39; as its body has no tail or &#39;return&#39; expression?", "body": "<p>New to Rust and programming. I'm trying to code a program to calculate the state sales tax on items entered by the user. With some help, I think I\"m near the end, but I have this one error I don't understand:</p>\n\n<p>4 fn read_one() -> String {\n     expected struct 'st::string::String', found ()\nimplicitly returns '()' as its body has no tail or 'return' expression</p>\n\n<h2>The code is below:</h2>\n\n<pre><code>use::std::io;\nuse::std::collections::HashMap;\n\nfn read_one() -&gt; String {\n    let mut words = String::new();\n    io::stdin().read_line(&amp;mut words)\n        .ok()\n        .expect(\"Failed to read line.\");\n}\n\nfn main() {\n\n    let mut tax_rates = HashMap::new();\n    tax_rates.insert(\"AL\".to_string(), 0.04);\n    tax_rates.insert(\"AK\".to_string(), 0.00);\n    tax_rates.insert(\"AZ\".to_string(), 0.056);\n    tax_rates.insert(\"AR\".to_string(), 0.65);\n    tax_rates.insert(\"CA\".to_string(), 0.725);\n    tax_rates.insert(\"CO\".to_string(), 0.029);\n    tax_rates.insert(\"CT\".to_string(), 0.635);\n    tax_rates.insert(\"DE\".to_string(), 0.00);\n    tax_rates.insert(\"DC\".to_string(), 0.06);\n    tax_rates.insert(\"FL\".to_string(), 0.06);\n    tax_rates.insert(\"GA\".to_string(), 0.04);\n    tax_rates.insert(\"HI\".to_string(), 0.04);\n    tax_rates.insert(\"ID\".to_string(), 0.06);\n    tax_rates.insert(\"IL\".to_string(), 0.0625);\n    tax_rates.insert(\"IN\".to_string(), 0.07);\n    tax_rates.insert(\"IA\".to_string(), 0.06);\n    tax_rates.insert(\"KS\".to_string(), 0.065);\n    tax_rates.insert(\"KY\".to_string(), 0.06);\n    tax_rates.insert(\"LA\".to_string(), 0.0445);\n    tax_rates.insert(\"ME\".to_string(), 0.055);\n    tax_rates.insert(\"MD\".to_string(), 0.06);\n    tax_rates.insert(\"MA\".to_string(), 0.0625);\n    tax_rates.insert(\"MI\".to_string(), 0.06);\n    tax_rates.insert(\"MN\".to_string(), 0.06875);\n    tax_rates.insert(\"MS\".to_string(), 0.07);\n    tax_rates.insert(\"MO\".to_string(), 0.0425);\n    tax_rates.insert(\"MT\".to_string(), 0.00);\n    tax_rates.insert(\"NE\".to_string(), 0.055);\n    tax_rates.insert(\"NV\".to_string(), 0.0685);\n    tax_rates.insert(\"NH\".to_string(), 0.00);\n    tax_rates.insert(\"NJ\".to_string(), 0.06625);\n    tax_rates.insert(\"NM\".to_string(), 0.05125);\n    tax_rates.insert(\"NY\".to_string(), 0.04);\n    tax_rates.insert(\"NC\".to_string(), 0.0475);\n    tax_rates.insert(\"ND\".to_string(), 0.05);\n    tax_rates.insert(\"OH\".to_string(), 0.0575);\n    tax_rates.insert(\"OK\".to_string(), 0.045);\n    tax_rates.insert(\"OR\".to_string(), 0.00);\n    tax_rates.insert(\"PA\".to_string(), 0.06);\n    tax_rates.insert(\"RI\".to_string(), 0.07);\n    tax_rates.insert(\"PR\".to_string(), 0.115);\n    tax_rates.insert(\"SC\".to_string(), 0.06);\n    tax_rates.insert(\"SD\".to_string(), 0.045);\n    tax_rates.insert(\"TN\".to_string(), 0.07);\n    tax_rates.insert(\"TX\".to_string(), 0.0625);\n    tax_rates.insert(\"UT\".to_string(), 0.0485);\n    tax_rates.insert(\"VA\".to_string(), 0.043);\n    tax_rates.insert(\"VT\".to_string(), 0.06);\n    tax_rates.insert(\"WA\".to_string(), 0.065);\n    tax_rates.insert(\"WV\".to_string(), 0.06);\n    tax_rates.insert(\"WI\".to_string(), 0.05);\n    tax_rates.insert(\"WY\".to_string(), 0.04);\n\n    println!(\"In what state are you making your purchase?\");\n    let state = read_one();\n    let state = state.trim().to_uppercase();\n\n    println!(\"How many items are you purchasing?\");\n    let mut purchase_number = read_one();\n    let mut purchase_number = purchase_number.trim().parse::&lt;i32&gt;().unwrap();\n\n    match tax_rates.get(&amp;state) {\n        Some(rate) =&gt; {\n            println!(\"The tax rate for {} is ({}).\", state, rate);\n        }\n        None =&gt; {\n            println!(\"None.\");\n        }\n    }\n\n    let mut tax_vec = Vec::new();\n    let mut cost_vec = Vec::new();\n\n    for item_number in 0..purchase_number {\n        println!(\"What is the cost of item number {}?\", item_number);\n        let item_cost = read_one();\n        let item_cost = item_cost.trim().parse::&lt;f64&gt;().unwrap();\n\n        match tax_rates.get(&amp;state) {\n            Some(rate) =&gt; {\n                let tax_amount = item_cost * rate;\n                let fin_cost = item_cost + tax_amount;\n                println!(\"The tax amount for item {} is: {:.2}\", \n                item_number, tax_amount);\n                println!(\"The final cost of item number {} is: {:.2}\",\n                item_number, fin_cost);\n\n                tax_vec.push(tax_amount);\n                cost_vec.push(fin_cost);\n            }\n\n            None =&gt; {\n                println!(\"None.\");\n            }\n        }   \n    }\n\n    println!(\"{:?}\", tax_vec);\n    println!(\"{:?}\", cost_vec);\n}\n</code></pre>\n"}, {"tags": ["rust", "closures", "actix-web"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577488929, "post_id": 59506750, "comment_id": 105186517, "body": "I don&#39;t know what <code>web::block</code> is, but it looks like it returns a future, and therefore cannot borrow local variables. The first use of <code>pagination</code> works because you <i>move</i> it, the second use would likely be fixed by also moving it."}, {"owner": {"reputation": 1, "user_id": 12610232, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/573257de441a8822e9b66a6331c5c06d?s=128&d=identicon&r=PG&f=1", "display_name": "BoudBoud", "link": "https://stackoverflow.com/users/12610232/boudboud"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577531688, "post_id": 59506750, "comment_id": 105192727, "body": "@mcarton Thank you for your answer    web :: block (Actix-Web) is not important it is to execute code in a thread pool (Diesel does not support tokio, so we have to run it in separate threads.) <a href=\"https://docs.rs/actix-web/1.0.5/actix_web/web/fn.block.html\" rel=\"nofollow noreferrer\">docs.rs/actix-web/1.0.5/actix_web/web/fn.block.html</a>  I don&#39;t understand how I can make a second move. Can you illustrate with an example?"}], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 1, "last_activity_date": 1577626140, "creation_date": 1577626140, "answer_id": 59519858, "question_id": 59506750, "link": "https://stackoverflow.com/questions/59506750/borrowed-value-does-not-live-long-enough-moved-due-to-use-in-closure-e0597/59519858#59519858", "title": "Borrowed value does not live long enough, moved due to use in closure E0597", "body": "<p>The first use of <code>pagination</code> works because you move it, the second use would be fixed by also moving it:</p>\n\n<pre><code>web::block(move || database::get_exercises(pool, pagination)).then(move |res| { \u2026 })\n//         ^^^^                                                    ^^^^\n</code></pre>\n\n<p>Since you are returning a <code>Future</code>, it cannot borrow local variables, as it could live longer.</p>\n\n<p>You can move <code>pagination</code> twice because <code>PaginationQuery</code> is <code>Copy</code>.</p>\n"}], "owner": {"reputation": 1, "user_id": 12610232, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/573257de441a8822e9b66a6331c5c06d?s=128&d=identicon&r=PG&f=1", "display_name": "BoudBoud", "link": "https://stackoverflow.com/users/12610232/boudboud"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 487, "favorite_count": 0, "accepted_answer_id": 59519858, "answer_count": 1, "score": -1, "last_activity_date": 1583335461, "creation_date": 1577487149, "last_edit_date": 1583335461, "question_id": 59506750, "link": "https://stackoverflow.com/questions/59506750/borrowed-value-does-not-live-long-enough-moved-due-to-use-in-closure-e0597", "title": "Borrowed value does not live long enough, moved due to use in closure E0597", "body": "<p>I am taking my first steps on Actix-Web. But this closure causes me errors</p>\n\n<pre><code>#[derive(Deserialize, Serialize, Debug, Copy, Clone)]\npub struct PaginationQuery {\n    pub limit: Option&lt;u32&gt;,\n    pub offset: Option&lt;u32&gt;,\n}\n\npub fn get_all_trainings_2(\n    query: web::Query&lt;PaginationQuery&gt;,\n    pool: web::Data&lt;Pool&gt;,\n) -&gt; impl Future&lt;Item = HttpResponse, Error = Error&gt; {\n    let mut pagination = query.0;\n\n    // Thread Blocking\n    web::block(move || database::get_exercises(pool, pagination)).then(|res| {\n        match res {\n            Ok((trainings_list, total)) =&gt; {\n                // let mut list: Vec&lt;TrainingsResponse&gt; = Vec::new();\n\n                let list: Vec&lt;TrainingsResponse&gt; = trainings_list\n                    .into_iter()\n                    .map(|tr| TrainingsResponse::from(tr))\n                    .collect();\n\n                Ok(HttpResponse::Ok().json(ListResult {\n                    offset: pagination.offset.unwrap_or(0),\n                    total: total as u32,\n                    items: list,\n                }))\n            }\n            Err(_) =&gt; Ok(HttpResponse::InternalServerError().into()),\n        }\n    })\n}\n</code></pre>\n\n<p>Error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `pagination` does not live long enough\n  --&gt; src\\handler.rs:66:29\n   |\n51 | ) -&gt; impl Future&lt;Item = HttpResponse, Error = Error&gt; {\n   |      ----------------------------------------------- opaque type requires that `pagination` is borrowed for `'static`\n...\n55 |     web::block(move || database::get_exercises(pool, pagination)).then(|res| {\n   |                                                                        ----- value captured here\n...\n66 |                     offset: pagination.offset.unwrap_or(0),\n   |                             ^^^^^^^^^^ borrowed value does not live long enough\n...\n74 | }\n   | - `pagination` dropped here while still borrowed\n</code></pre>\n\n<p>I don't understand why I can't use the paging value a second time. What is the problem here?</p>\n"}, {"tags": ["compiler-errors", "rust", "iterator", "return"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577486692, "post_id": 59506641, "comment_id": 105186048, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=04297c9ec4a641b971519cd6516751a0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>, you need to understand branching logic"}, {"owner": {"reputation": 1327, "user_id": 3656414, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/e61d1247b5d7ea2f20d4b7371d671dc7?s=128&d=identicon&r=PG&f=1", "display_name": "rapidclock", "link": "https://stackoverflow.com/users/3656414/rapidclock"}, "edited": false, "score": 0, "creation_date": 1577491581, "post_id": 59506641, "comment_id": 105186988, "body": "yes that link answers my question! I never knew that. So thanks a lot! Learnt something new today :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578082301, "post_id": 59506641, "comment_id": 105335919, "body": "re <a href=\"https://stackoverflow.com/questions/59584485/can-you-return-a-result-that-works-with-any-possible-error-type?noredirect=1#comment105335742_59584485\" title=\"can you return a result that works with any possible error type\">stackoverflow.com/questions/59584485/&hellip;</a> \u2014 the downvote was only because you hadn&#39;t pasted the complete error. Once you had edited that in, the question would no longer be deserving of the downvote."}], "owner": {"reputation": 1327, "user_id": 3656414, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/e61d1247b5d7ea2f20d4b7371d671dc7?s=128&d=identicon&r=PG&f=1", "display_name": "rapidclock", "link": "https://stackoverflow.com/users/3656414/rapidclock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 51, "favorite_count": 1, "closed_date": 1577491599, "answer_count": 0, "score": 1, "last_activity_date": 1577486085, "creation_date": 1577486085, "question_id": 59506641, "link": "https://stackoverflow.com/questions/59506641/why-does-returning-a-value-the-idiomatic-way-results-in-a-compilation-error", "closed_reason": "Duplicate", "title": "Why does returning a value the idiomatic way results in a compilation error?", "body": "<p>I recently broke my head in trying to figure out the root cause of a compilation error with a small snippet of code that i wrote.</p>\n\n<p>Basically, I wrote a generic collection called Tuple and wanted to implement a <code>std::iter::FromIterator</code> for the struct. Code below:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::FromIterator;\n\npub struct Tuple&lt;T&gt;\n    where T: Clone {\n    pub left: T,\n    pub right: T,\n}\n\nimpl&lt;T&gt; FromIterator&lt;T&gt; for Tuple&lt;T&gt;\n    where T: Clone {\n    fn from_iter&lt;I: IntoIterator&lt;Item=T&gt;&gt;(iter: I) -&gt; Tuple&lt;T&gt; {\n        let mut iterator = iter.into_iter();\n        if let Some(left) = iterator.next() {\n            if let Some(right) = iterator.next() {\n                Tuple {left, right}\n            }\n        }\n        panic!(\"not enough elements\");\n    }\n}\n\nfn main() {\n    let v = vec![1,2,3,4];\n    let t = v.into_iter().collect::&lt;Tuple&lt;i32&gt;&gt;();\n    println!(\"{}, {}\", t.left, t.right);\n}\n</code></pre>\n\n<p>The basic idea is I take the first two elements from the iterator for my Tuple and ignore the rest. If it has less than 2 elements, i panic. </p>\n\n<p>Now i understand this might not be the best way to do it, but I was just prototyping, so bear with me.</p>\n\n<p>I get a compiler error for the above code.</p>\n\n<pre><code>   Compiling playground v0.0.1 (/playground)\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:15:17\n   |\n14 | /             if let Some(right) = iterator.next() {\n15 | |                 Tuple {left, right}\n   | |                 ^^^^^^^^^^^^^^^^^^^ expected (), found struct `Tuple`\n16 | |             }\n   | |             -- help: consider using a semicolon here\n   | |_____________|\n   |               expected this to be `()`\n   |\n   = note: expected type `()`\n              found type `Tuple&lt;T&gt;`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `playground`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>This makes no sense to me, since I say I will return a Tuple in the function signature, and I do return a Tuple, but the compiler expects a void <code>()</code> type?</p>\n\n<p>Finally I figured out that by changing the line to a return statement, my error goes away and everything works as expected. i.e. <code>return Tuple {left, right};</code> instead of <code>Tuple {left, right}</code></p>\n\n<p>Here is the link to the working version of the code: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e1bddd88b973f724800d57e5b5a0817e\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>Can someone explain why? Isn't the no-return keyword method the idiomatic way to return values from a function in rust?</p>\n\n<p>I cannot understand what went wrong. Any guidance is appreciated. Makes me think there is something fundamental i have misunderstood in the language and that worries me.</p>\n"}, {"tags": ["rust"], "owner": {"reputation": 187, "user_id": 11852538, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/633771f3bee22ba05ecfceabdb4322f8?s=128&d=identicon&r=PG&f=1", "display_name": "jm4ier", "link": "https://stackoverflow.com/users/11852538/jm4ier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 52, "favorite_count": 0, "closed_date": 1577484893, "answer_count": 0, "score": 1, "last_activity_date": 1577484723, "creation_date": 1577484432, "last_edit_date": 1577484723, "question_id": 59506459, "link": "https://stackoverflow.com/questions/59506459/rust-cant-use-trait-const-in-trait-function", "closed_reason": "Duplicate", "title": "Rust can&#39;t use trait const in trait function", "body": "<p>So I try to define a trait that has a constant and uses that constant in the function 'header', but it gives me an error that there is no such associated constant.</p>\n\n<p>Code:</p>\n\n<pre><code>trait SizedBuffer {   \n    const SIZE: usize;\n    fn read(&amp;mut self, buf: &amp;mut [u8; Self::SIZE]);\n    fn write(&amp;mut self, buf: &amp;[u8; Self::SIZE]);\n}\n\nfn main() {\n    println!(\"It compiled!\");\n}\n</code></pre>\n\n<p>Expected result:</p>\n\n<pre><code>It compiled!\n</code></pre>\n\n<p>Instead I got:</p>\n\n<pre><code>error[E0599]: no associated item named `SIZE` found for type `Self` in the current scope\n --&gt; src/main.rs:3:45\n  |\n3 |     fn read(&amp;mut self, buf: &amp;mut [u8; Self::SIZE]);\n  |                                             ^^^^ associated item not found in `Self`\n  |\n  = help: items from traits can only be used if the type parameter is bounded by the trait\nhelp: the following trait defines an item `SIZE`, perhaps you need to restrict type parameter `Self` with it:\n  |\n1 | Self: SizedBuffer\n  |\n\nerror[E0599]: no associated item named `SIZE` found for type `Self` in the current scope\n --&gt; src/main.rs:4:42\n  |\n4 |     fn write(&amp;mut self, buf: &amp;[u8; Self::SIZE]);\n  |                                          ^^^^ associated item not found in `Self`\n  |\n  = help: items from traits can only be used if the type parameter is bounded by the trait\nhelp: the following trait defines an item `SIZE`, perhaps you need to restrict type parameter `Self` with it:\n  |\n1 | Self: SizedBuffer\n  |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `trait_const`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 66, "user_id": 9415314, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-5BNurw9u9BE/AAAAAAAAAAI/AAAAAAAAvK0/uROd-sKvSQw/photo.jpg?sz=128", "display_name": "Harrison", "link": "https://stackoverflow.com/users/9415314/harrison"}, "edited": false, "score": 0, "creation_date": 1577487624, "post_id": 59506466, "comment_id": 105186239, "body": "Not quite what I&#39;m looking for, as that returns strings like this:56.74000000000001 8.940000000000001 89.63000000000001 103.42999999999998"}, {"owner": {"reputation": 952, "user_id": 12521158, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8e745b4953a3ecbe3a1f7147089a7a7?s=128&d=identicon&r=PG&f=1", "display_name": "kopecs", "link": "https://stackoverflow.com/users/12521158/kopecs"}, "reply_to_user": {"reputation": 66, "user_id": 9415314, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-5BNurw9u9BE/AAAAAAAAAAI/AAAAAAAAvK0/uROd-sKvSQw/photo.jpg?sz=128", "display_name": "Harrison", "link": "https://stackoverflow.com/users/9415314/harrison"}, "edited": false, "score": 0, "creation_date": 1577490273, "post_id": 59506466, "comment_id": 105186782, "body": "That just looks like a natural fact of floating point imprecision, you&#39;d just have to choose when you&#39;re close enough for your purposes to round."}], "tags": [], "owner": {"reputation": 952, "user_id": 12521158, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8e745b4953a3ecbe3a1f7147089a7a7?s=128&d=identicon&r=PG&f=1", "display_name": "kopecs", "link": "https://stackoverflow.com/users/12521158/kopecs"}, "is_accepted": false, "score": 1, "last_activity_date": 1577484472, "creation_date": 1577484472, "answer_id": 59506466, "question_id": 59506403, "link": "https://stackoverflow.com/questions/59506403/how-to-format-a-float-without-trailing-zeros-in-rust/59506466#59506466", "title": "How to format a float without trailing zeros in Rust?", "body": "<p>You can just do</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>format!(\"{}\", x)\n</code></pre>\n\n<p>The <code>{:.8}</code> requires 8 places of precision, and thus, prints out extra zeros to that precision.</p>\n"}, {"tags": [], "owner": {"reputation": 66, "user_id": 9415314, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-5BNurw9u9BE/AAAAAAAAAAI/AAAAAAAAvK0/uROd-sKvSQw/photo.jpg?sz=128", "display_name": "Harrison", "link": "https://stackoverflow.com/users/9415314/harrison"}, "is_accepted": true, "score": 1, "last_activity_date": 1577488168, "creation_date": 1577488168, "answer_id": 59506841, "question_id": 59506403, "link": "https://stackoverflow.com/questions/59506403/how-to-format-a-float-without-trailing-zeros-in-rust/59506841#59506841", "title": "How to format a float without trailing zeros in Rust?", "body": "<p>This currently solves <a href=\"https://stackoverflow.com/questions/50361151/how-to-deal-with-inexact-floating-point-arithmetic-results-in-rust\">the issue</a> for me:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let y = (x * 100_000_000.0).round() / 100_000_000.0;\nformat!(\"{}\", y);\n</code></pre>\n\n<p>I will keep an eye out for any better solutions. Thank you!</p>\n"}], "owner": {"reputation": 66, "user_id": 9415314, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-5BNurw9u9BE/AAAAAAAAAAI/AAAAAAAAvK0/uROd-sKvSQw/photo.jpg?sz=128", "display_name": "Harrison", "link": "https://stackoverflow.com/users/9415314/harrison"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 503, "favorite_count": 0, "accepted_answer_id": 59506841, "answer_count": 2, "score": 2, "last_activity_date": 1577488168, "creation_date": 1577483936, "last_edit_date": 1577487732, "question_id": 59506403, "link": "https://stackoverflow.com/questions/59506403/how-to-format-a-float-without-trailing-zeros-in-rust", "title": "How to format a float without trailing zeros in Rust?", "body": "<p>I'm formatting <code>f64</code> like this:</p>\n\n<pre><code>format!(\"{:.8}\", x)\n</code></pre>\n\n<p>This returns strings like this:</p>\n\n<pre><code>110.00000000\n601.47000000\n4.50000000\n</code></pre>\n\n<p>I'm looking to remove all the extra zeros at the end of each so that the output is this:</p>\n\n<pre><code>110\n601.47\n4.5\n</code></pre>\n\n<p>I'm hoping to do this without any external crates or libraries (not a big deal if it has to happen though). Is there something built-in to Rust that can accomplish this? Or will I have to write a custom function to do so?</p>\n\n<p>Edit:</p>\n\n<p>I should add that I can't simple do <code>format(\"{}\", x)</code> because that will return strings like this:</p>\n\n<pre><code>40.019999999999996\n1192.6499999999999\n2733.9599999999996\n</code></pre>\n\n<p>Is there a way around that?</p>\n"}, {"tags": ["rust", "petgraph"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577486197, "post_id": 59505664, "comment_id": 105185925, "body": "your question don&#39;t make sense did you inverted your two use case ?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577486396, "post_id": 59505664, "comment_id": 105185973, "body": "your <code>new()</code> function can&#39;t work in its state <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9596fa07eefbf02d62e145e9b7c417a0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "edited": false, "score": 0, "creation_date": 1577516556, "post_id": 59505664, "comment_id": 105190017, "body": "What if you just call <code>new</code> with the owned value instead of the reference? Like <code>let mut sm = StateMachine::new(sn, &quot;a&quot;).unwrap();</code>."}, {"owner": {"reputation": 2304, "user_id": 2126889, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/ZLkKF.jpg?s=128&g=1", "display_name": "timthelion", "link": "https://stackoverflow.com/users/2126889/timthelion"}, "reply_to_user": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "edited": false, "score": 0, "creation_date": 1577540388, "post_id": 59505664, "comment_id": 105194548, "body": "@CoronA the traits are implemented only for references to <code>Graph</code> not for <code>Graph</code> itself. So I get an error saying that <code>IntoEdgeReferences</code> is not implemented for <code>Graph...</code>"}], "answers": [{"tags": [], "owner": {"reputation": 6608, "user_id": 4497253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc929d11ae26463d18e337d295c86fcc?s=128&d=identicon&r=PG&f=1", "display_name": "CoronA", "link": "https://stackoverflow.com/users/4497253/corona"}, "is_accepted": true, "score": 1, "last_activity_date": 1577549809, "creation_date": 1577549809, "answer_id": 59512615, "question_id": 59505664, "link": "https://stackoverflow.com/questions/59505664/how-can-i-store-a-type-directly-in-a-struct-when-all-the-traits-i-need-are-imple/59512615#59512615", "title": "How can I store a type directly in a struct when all the traits I need are implemented for references to that type?", "body": "<p>I am not familiar with <code>petgraph</code> and its concepts now. From my experience storing references in structs almost always ends with complete rewrites so my approach would have been something like this:</p>\n\n<pre><code>struct StateMachine&lt;G, E, N&gt;\nwhere\n  G: GraphBase&lt;EdgeId = E, NodeId = N&gt;,\n  E: Copy + PartialEq,\n  N: Copy + PartialEq,\n{\n  state_network: G,\n  state: N,\n}\n\nimpl&lt;G, E, N, EW, NW&gt; StateMachine&lt;G, E, N&gt;\nwhere\n  G: Data&lt;NodeWeight = NW, EdgeWeight = EW&gt;\n    + NodeIndexable\n    + GraphProp\n    + DataMap\n    + GraphBase&lt;EdgeId = E, NodeId = N&gt;,\n  E: Copy + PartialEq,\n  N: Copy + PartialEq,\n  for&lt;'a&gt; &amp;'a G: IntoNodeReferences\n    + IntoEdgeReferences\n    + IntoEdges\n    + Data&lt;NodeWeight = NW, EdgeWeight = EW&gt;\n    + GraphBase&lt;EdgeId = E, NodeId = N&gt;,\n  EW: Eq + Copy,\n  NW: Eq + Copy,\n{\n  pub fn next&lt;'a, 'b: 'a&gt;(&amp;'a mut self, input: EW) -&gt; Option&lt;NW&gt; {\n    for edge in (&amp;self.state_network).edges(self.state) {\n      if *edge.weight() == input {\n        self.state = edge.target();\n        return match self.state_network.node_weight(self.state) {\n          Option::Some(weight) =&gt; Some(*weight),\n          Option::None =&gt; Option::None,\n        };\n      }\n    }\n    return Option::None;\n  }\n\n  pub fn new(\n    network: G,\n    start: NW,\n  ) -&gt; Option&lt;StateMachine&lt;G, &lt;G as GraphBase&gt;::EdgeId, &lt;G as GraphBase&gt;::NodeId&gt;&gt; {\n    let mut found = Option::None;\n\n    for nr in network.node_references() {\n      if *(network.node_weight(nr.id())).unwrap() == start {\n        found = Option::Some(nr.id());\n      }\n    }\n    found.map(|id| StateMachine {\n      state_network: network,\n      state: id,\n    })\n  }\n}\n</code></pre>\n\n<p><code>EdgeId</code> and <code>NodeId</code> get generic parameters (<code>E</code>,<code>N</code>)since these are reused in the implementation of <code>StateMachine</code>, <code>NodeWeight</code> and <code>EdgeWeight</code> also get generic (<code>NW</code>, <code>EW</code>) but only to join the associated types of <code>&amp;Graph</code> and <code>Graph</code>.</p>\n"}], "owner": {"reputation": 2304, "user_id": 2126889, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/ZLkKF.jpg?s=128&g=1", "display_name": "timthelion", "link": "https://stackoverflow.com/users/2126889/timthelion"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "accepted_answer_id": 59512615, "answer_count": 1, "score": 2, "last_activity_date": 1580252331, "creation_date": 1577477975, "last_edit_date": 1580252331, "question_id": 59505664, "link": "https://stackoverflow.com/questions/59505664/how-can-i-store-a-type-directly-in-a-struct-when-all-the-traits-i-need-are-imple", "title": "How can I store a type directly in a struct when all the traits I need are implemented for references to that type?", "body": "<p>Petgraph implements all its traits for references to it's internal graph type. How can I store and use a <code>Graph</code> rather than an <code>&amp;Graph</code> in a struct?</p>\n\n<p>This works but stores a reference to the graph:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate petgraph;\n\nuse crate::petgraph::visit::*;\nuse petgraph::data::*;\nuse petgraph::*;\n\nstruct StateMachine&lt;G&gt;\nwhere\n    G: GraphBase,\n{\n    state_network: G,\n    state: &lt;G as GraphBase&gt;::NodeId,\n}\n\nimpl&lt;G&gt; StateMachine&lt;G&gt;\nwhere\n    G: IntoNodeReferences\n        + IntoEdgeReferences\n        + IntoEdges\n        + Data\n        + NodeIndexable\n        + GraphProp\n        + DataMap\n        + GraphBase,\n    &lt;G as Data&gt;::NodeWeight: Eq + Copy,\n    &lt;G as Data&gt;::EdgeWeight: Eq + Copy,\n{\n    pub fn next(&amp;mut self, input: &lt;G as Data&gt;::EdgeWeight) -&gt; Option&lt;&lt;G as Data&gt;::NodeWeight&gt; {\n        for edge in self.state_network.edges(self.state) {\n            if *edge.weight() == input {\n                self.state = edge.target();\n                return match self.state_network.node_weight(self.state) {\n                    Option::Some(weight) =&gt; Some(*weight),\n                    Option::None =&gt; Option::None,\n                };\n            }\n        }\n        return Option::None;\n    }\n\n    pub fn new(network: G, start: &lt;G as Data&gt;::NodeWeight) -&gt; Option&lt;StateMachine&lt;G&gt;&gt; {\n        for nr in network.node_references() {\n            if *(network.node_weight(nr.id())).unwrap() == start {\n                return Option::Some(StateMachine {\n                    state_network: network,\n                    state: nr.id(),\n                });\n            }\n        }\n        return Option::None;\n    }\n}\n\nfn main() {\n    let mut sn: Graph&lt;&amp;str, u32, petgraph::Directed&gt; = Graph::new();\n    let sn_item1 = sn.add_node(\"a\");\n    let sn_item2 = sn.add_node(\"b\");\n    let sn_item3 = sn.add_node(\"c\");\n    let sn_item4 = sn.add_node(\"d\");\n    let sn_item5 = sn.add_node(\"e\");\n    sn.add_edge(sn_item1, sn_item2, 1);\n    sn.add_edge(sn_item1, sn_item3, 2);\n    sn.add_edge(sn_item2, sn_item4, 1);\n    sn.add_edge(sn_item2, sn_item5, 2);\n    sn.add_edge(sn_item5, sn_item1, 2);\n    sn.add_edge(sn_item5, sn_item3, 1);\n    let mut sm = StateMachine::new(&amp;sn, \"a\").unwrap();\n    println!(\"{}\", sm.next(1).unwrap());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f81b4ce9deae3860b64d715a22b88ffe\" rel=\"nofollow noreferrer\">Link to rust playground</a></p>\n\n<p>But storing the Graph directly doesn't work</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate petgraph;\n\nuse crate::petgraph::visit::*;\nuse petgraph::data::*;\nuse petgraph::*;\n\nstruct StateMachine&lt;'a, G&gt;\nwhere\n    &amp;'a G: GraphBase,\n{\n    state_network: G,\n    state: &lt;&amp;'a G as GraphBase&gt;::NodeId,\n}\n\nimpl&lt;'a, G&gt; StateMachine&lt;'a, G&gt;\nwhere\n    &amp;'a G: IntoNodeReferences\n        + IntoEdgeReferences\n        + IntoEdges\n        + Data\n        + NodeIndexable\n        + GraphProp\n        + DataMap\n        + GraphBase,\n    &lt;&amp;'a G as Data&gt;::NodeWeight: Eq + Copy,\n    &lt;&amp;'a G as Data&gt;::EdgeWeight: Eq + Copy,\n{\n    pub fn next(&amp;mut self, input: &lt;&amp;'a G as Data&gt;::EdgeWeight) -&gt; Option&lt;&lt;&amp;'a G as Data&gt;::NodeWeight&gt; {\n        for edge in (&amp;self.state_network).edges(self.state) {\n            if *edge.weight() == input {\n                self.state = edge.target();\n                return match (&amp;self.state_network).node_weight(self.state) {\n                    Option::Some(weight) =&gt; Some(*weight),\n                    Option::None =&gt; Option::None,\n                };\n            }\n        }\n        return Option::None;\n    }\n\n    pub fn new(network: G, start: &lt;&amp;'a G as Data&gt;::NodeWeight) -&gt; Option&lt;StateMachine&lt;'a, G&gt;&gt; {\n        for nr in network.node_references() {\n            if *((&amp;network).node_weight(nr.id())).unwrap() == start {\n                return Option::Some(StateMachine {\n                    state_network: network,\n                    state: nr.id(),\n                });\n            }\n        }\n        return Option::None;\n    }\n}\n\nfn main() {\n    let mut sn: Graph&lt;&amp;str, u32, petgraph::Directed&gt; = Graph::new();\n    let sn_item1 = sn.add_node(\"a\");\n    let sn_item2 = sn.add_node(\"b\");\n    let sn_item3 = sn.add_node(\"c\");\n    let sn_item4 = sn.add_node(\"d\");\n    let sn_item5 = sn.add_node(\"e\");\n    sn.add_edge(sn_item1, sn_item2, 1);\n    sn.add_edge(sn_item1, sn_item3, 2);\n    sn.add_edge(sn_item2, sn_item4, 1);\n    sn.add_edge(sn_item2, sn_item5, 2);\n    sn.add_edge(sn_item5, sn_item1, 2);\n    sn.add_edge(sn_item5, sn_item3, 1);\n    let mut sm = StateMachine::new(sn, \"a\").unwrap();\n    println!(\"{}\", sm.next(1).unwrap());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=76d04515b4282a605e4e75ddea2b9026\" rel=\"nofollow noreferrer\">Link to rust playgound</a></p>\n\n<pre><code>  Compiling playground v0.0.1 (/playground)\nerror[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n  --&gt; src/main.rs:29:21\n   |\n29 |         for edge in (&amp;self.state_network).edges(self.state) {\n   |                     ^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 28:5...\n  --&gt; src/main.rs:28:5\n   |\n28 | /     pub fn next(&amp;mut self, input: &lt;&amp;'a G as Data&gt;::EdgeWeight) -&gt; Option&lt;&lt;&amp;'a G as Data&gt;::NodeWeight&gt; {\n29 | |         for edge in (&amp;self.state_network).edges(self.state) {\n30 | |             if *edge.weight() == input {\n31 | |                 self.state = edge.target();\n...  |\n38 | |         return Option::None;\n39 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:29:21\n   |\n29 |         for edge in (&amp;self.state_network).edges(self.state) {\n   |                     ^^^^^^^^^^^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n  --&gt; src/main.rs:15:6\n   |\n15 | impl&lt;'a, G&gt; StateMachine&lt;'a, G&gt;\n   |      ^^\n   = note: ...so that the expression is assignable:\n           expected &lt;&amp;G as petgraph::visit::GraphBase&gt;::NodeId\n              found &lt;&amp;'a G as petgraph::visit::GraphBase&gt;::NodeId\n\nerror[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n  --&gt; src/main.rs:32:30\n   |\n32 |                 return match (&amp;self.state_network).node_weight(self.state) {\n   |                              ^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 28:5...\n  --&gt; src/main.rs:28:5\n   |\n28 | /     pub fn next(&amp;mut self, input: &lt;&amp;'a G as Data&gt;::EdgeWeight) -&gt; Option&lt;&lt;&amp;'a G as Data&gt;::NodeWeight&gt; {\n29 | |         for edge in (&amp;self.state_network).edges(self.state) {\n30 | |             if *edge.weight() == input {\n31 | |                 self.state = edge.target();\n...  |\n38 | |         return Option::None;\n39 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:32:30\n   |\n32 |                 return match (&amp;self.state_network).node_weight(self.state) {\n   |                              ^^^^^^^^^^^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n  --&gt; src/main.rs:15:6\n   |\n15 | impl&lt;'a, G&gt; StateMachine&lt;'a, G&gt;\n   |      ^^\n   = note: ...so that the expression is assignable:\n           expected &lt;&amp;G as petgraph::visit::GraphBase&gt;::NodeId\n              found &lt;&amp;'a G as petgraph::visit::GraphBase&gt;::NodeId\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0495`.\nerror: could not compile `playground`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577463973, "post_id": 59503227, "comment_id": 105179243, "body": "&quot;The goal was to have these nodes not own their neighbours, so std::rc::Rc was out of the question.&quot; ???"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577464101, "post_id": 59503227, "comment_id": 105179292, "body": "&quot;So I did some testing which went fine&quot; define &quot;fine&quot; because running your code blow the stack."}, {"owner": {"reputation": 13, "user_id": 12608252, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ee81c7d96b79b8781d5c69281a7ebd2a?s=128&d=identicon&r=PG&f=1", "display_name": "Jonas", "link": "https://stackoverflow.com/users/12608252/jonas"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577464450, "post_id": 59503227, "comment_id": 105179432, "body": "regarding std::rc::Rc : my understanding is, that it causes the pointer to be owned by multiple entities by calling .clone().  regarding &quot;fine&quot; : yes, admittedly that was very loose. &quot;went fine&quot; may be substituted with &quot;compiled&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 1, "last_activity_date": 1577475029, "creation_date": 1577475029, "answer_id": 59505255, "question_id": 59503227, "link": "https://stackoverflow.com/questions/59503227/borrowed-value-does-not-live-long-enough-after-implementing-drop-trait/59505255#59505255", "title": "&quot;borrowed value does not live long enough&quot; after implementing Drop trait", "body": "<p>What would happen if in your <code>drop()</code> implementation you use <code>self.next.unwrap()...</code>? Since one of your variables will necessarily be dropped before the other, the last one will have a dangling reference, and so <em>undefined behavior</em>. So you code is correct in not to compile.</p>\n\n<p>IMO, the solution is to use some kind of reference counted pointers. If you do not want <code>Rc</code>, because they do not own the neighbors (it will create a reference loop and thus leak your objects), you can use <code>Weak</code> references. Something like this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=49506ab9fffa9583f461d1ec4bb482da\" rel=\"nofollow noreferrer\">(playground)</a>:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::ops::Drop;\nuse std::rc::{Rc, Weak};\n\n#[derive(Debug)]\nstruct Container {\n    next : Option&lt;Weak&lt;RefCell&lt;Container&gt;&gt;&gt;,\n}\n\nimpl Container {\n    fn new() -&gt; Container {\n        Container { next: None }\n    }\n    fn set(&amp;mut self, next: &amp;Rc&lt;RefCell&lt;Container&gt;&gt;) {\n        self.next = Some(Rc::downgrade(next));\n    }\n}\n\nimpl Drop for Container{\n    fn drop(&amp;mut self) {}\n}\n\nfn main() {\n    // items:\n    let cont_1 = Rc::new(RefCell::new(Container::new()));\n    let cont_2 = Rc::new(RefCell::new(Container::new()));\n\n    cont_1.borrow_mut().set(&amp;cont_1);\n    cont_2.borrow_mut().set(&amp;cont_2);\n\n    println!(\"{:?}\", cont_1.borrow());\n}\n</code></pre>\n"}], "owner": {"reputation": 13, "user_id": 12608252, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ee81c7d96b79b8781d5c69281a7ebd2a?s=128&d=identicon&r=PG&f=1", "display_name": "Jonas", "link": "https://stackoverflow.com/users/12608252/jonas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 59505255, "answer_count": 1, "score": 1, "last_activity_date": 1577475029, "creation_date": 1577462741, "question_id": 59503227, "link": "https://stackoverflow.com/questions/59503227/borrowed-value-does-not-live-long-enough-after-implementing-drop-trait", "title": "&quot;borrowed value does not live long enough&quot; after implementing Drop trait", "body": "<p>Being new to rust I wanted to play with some data structures and ended up with something like a node type without payload.</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::collections::HashMap;\nuse std::ops::Drop;\n\n#[derive(Debug)]\nstruct Container&lt;'a&gt; {\n    next : Option&lt;&amp;'a RefCell&lt;Container&lt;'a&gt;&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Container&lt;'a&gt; {\n    fn new() -&gt; Container&lt;'a&gt; {\n        Container { next: None }\n    }\n\n    fn set(&amp;mut self, next: &amp;'a RefCell&lt;Container&lt;'a&gt;&gt;) {\n        self.next = Some(next);\n    }\n}\n</code></pre>\n\n<p>The goal was to have these nodes <strong>not</strong> own their neighbours, so std::rc::Rc was out of the question.\nSo I did some testing which went fine:</p>\n\n<pre><code>fn main() {\n    // items:\n    let cont_1 = RefCell::new(Container::new());\n    let cont_2 = RefCell::new(Container::new());\n\n    let b_1 = &amp;cont_1;\n    let b_2 = &amp;cont_2;\n\n    (*b_2).borrow_mut().set(b_1);\n    (*b_1).borrow_mut().set(b_2);\n\n    println!(\"{:?}\", b_1.borrow());\n}\n</code></pre>\n\n<p>Since I was playing around I then tried to implement the Drop trait on the Container type</p>\n\n<pre><code>impl&lt;'a&gt; Drop for Container&lt;'a&gt;{\n    fn drop(&amp;mut self) {}\n}\n</code></pre>\n\n<p>which results in two of      (the other one for cont_2)</p>\n\n<pre><code>error[E0597]: `cont_1` does not live long enough\n  --&gt; src/main.rs:11:15\n   |\n11 |     let b_1 = &amp;cont_1;\n   |               ^^^^^^^ borrowed value does not live long enough\n...\n18 | }\n   | -\n   | |\n   | `cont_1` dropped here while still borrowed\n   | borrow might be used here, when `cont_1` is dropped and runs the destructor for type `std::cell::RefCell&lt;Container&lt;'_&gt;&gt;`\n</code></pre>\n\n<p>Now, I believe, that Drop causes the deallocation to be at the end of scopes otherwise it would usually take place after the last use? But either way the complaint is about the value not living <strong>long</strong> enough... I have tried adding drop(...) in between, but failed. I guess I dont even understand how exactly the order of deallocation changed. I would expect that <code>cont_1</code> would be deallocated last since it was initialized/declared first meaning that I don't really understand how it could still be borrowed.</p>\n"}, {"tags": ["rust", "macros", "metaprogramming"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577463540, "post_id": 59503201, "comment_id": 105179064, "body": "I think it&#39;s only possible with procedural macro or build script ofc. You can&#39;t count or do anything like that in declarative macro thus the name."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577463609, "post_id": 59503201, "comment_id": 105179094, "body": "Does this answer your question? <a href=\"https://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros\">Is there a way to count with macros?</a>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577463825, "post_id": 59503201, "comment_id": 105179174, "body": "I&#39;m unsure I understand your requirement can you give more example or clarify the question somehow ?"}, {"owner": {"reputation": 13, "user_id": 9852802, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Gobbs", "link": "https://stackoverflow.com/users/9852802/gobbs"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577464052, "post_id": 59503201, "comment_id": 105179268, "body": "Not exacly, but i think a procedural macro solve my question. I ll read more about, thanks"}], "answers": [{"tags": [], "owner": {"reputation": 1106, "user_id": 4208022, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8PLXt.jpg?s=128&g=1", "display_name": "Brandon Dyer", "link": "https://stackoverflow.com/users/4208022/brandon-dyer"}, "is_accepted": false, "score": 0, "last_activity_date": 1577466386, "creation_date": 1577466386, "answer_id": 59503875, "question_id": 59503201, "link": "https://stackoverflow.com/questions/59503201/using-rust-macros-to-procedurally-call-functions/59503875#59503875", "title": "Using rust macros to procedurally call functions", "body": "<p>Yes, it is possible using <code>concat_idents</code> in Rust Nightly.</p>\n\n<p><a href=\"https://doc.rust-lang.org/std/macro.concat_idents.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/std/macro.concat_idents.html</a></p>\n\n<p>This should be something like what you're looking for:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(concat_idents)]\n\nmacro_rules! problem_call {\n    ($x:ident) =&gt; {\n        concat_idents!(problem_, $x)();\n    }\n}\n\nfn problem_abc() {\n    println!(\"abc\");\n}\n\nproblem_call!(abc);\n</code></pre>\n"}], "owner": {"reputation": 13, "user_id": 9852802, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Gobbs", "link": "https://stackoverflow.com/users/9852802/gobbs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 147, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1577466386, "creation_date": 1577462582, "question_id": 59503201, "link": "https://stackoverflow.com/questions/59503201/using-rust-macros-to-procedurally-call-functions", "title": "Using rust macros to procedurally call functions", "body": "<p>Can i do something like</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! problem_call {\n    ($x:expr) =&gt; {\n        problem_x();\n    }\n}\n</code></pre>\n\n<p>So i can call a series of functions that have names like: (problem_1, problem_2, problem_3, ...)</p>\n\n<p>with a variable like: problem_call(2) or maybe problem_call('2')</p>\n\n<p>(This code obviously doesn't work, but is there any way to reproduce something like that?)</p>\n"}, {"tags": ["arrays", "syntax", "rust", "iterator"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1577452434, "post_id": 59501157, "comment_id": 105174919, "body": "If the vector is large enough that you wouldn&#39;t want to 0-initialize it, you probably don&#39;t want it on the stack anyway: Use <code>Vec</code>."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1577452558, "post_id": 59501157, "comment_id": 105174951, "body": "Also &quot;it does not allow variables to be left uninitialized when they are declared&quot; is not true. It&#39;s perfectly fine not to initialize a variable as long as the compiler can prove that it has always been initialized once before reading it. This is similar to, eg. how C# treats variables and is definitely not just a Rust thing."}], "owner": {"reputation": 71, "user_id": 12185226, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e9f928e2f1251693cb0061ba54b8bf01?s=128&d=identicon&r=PG&f=1", "display_name": "Deuchie", "link": "https://stackoverflow.com/users/12185226/deuchie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 74, "favorite_count": 0, "closed_date": 1577456684, "answer_count": 0, "score": 1, "last_activity_date": 1577452592, "creation_date": 1577451479, "last_edit_date": 1577452592, "question_id": 59501157, "link": "https://stackoverflow.com/questions/59501157/how-to-initialize-an-array-with-an-iterator-in-rust", "closed_reason": "Duplicate", "title": "How to initialize an array with an iterator in Rust?", "body": "<p>I am learning Rust and I find that it does not allow variables to be left uninitialized when they are declared. Question is, I am trying to load input into an array but I don't want to initialize it because the size of the array may be rather large and I think initializing it with some temp value is not good. Currently, this piece of code does not pass the compilation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut height: [u8; maxn];\nlet mut i = 1; // I want to start from 1, not 0, but this is not the main problem.\nwhile i &lt;= n {\n    height[i] = s_it.next().unwrap().parse().unwrap();\n    i += 1;\n}\n</code></pre>\n\n<p>So, is there any way I can use?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 1157, "user_id": 2653567, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RNYoa.png?s=128&g=1", "display_name": "HMLDude", "link": "https://stackoverflow.com/users/2653567/hmldude"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577475330, "post_id": 59492825, "comment_id": 105183015, "body": "If you click on the first link, you can see the instructions/rules as comments towards the top of the file. They are not that helpful. What is helpful is executing the command for the &quot;hint&quot;, which yields : <code>If other functions can return a `Result`, why shouldn&#39;t `main`?</code>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577485658, "post_id": 59492825, "comment_id": 105185812, "body": "I didn&#39;t answer why you get their error because I think there is no point to explain it. The TL;DR is that <code>ParseIntError</code> can&#39;t be convert to a <code>String</code> because <code>String</code> doesn&#39;t not implement <code>From&lt;ParseIntError&gt;</code> because ... not one need this feature. Your conversion could work if it was implement by std."}], "answers": [{"comments": [{"owner": {"reputation": 1157, "user_id": 2653567, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RNYoa.png?s=128&g=1", "display_name": "HMLDude", "link": "https://stackoverflow.com/users/2653567/hmldude"}, "edited": false, "score": 1, "creation_date": 1577560989, "post_id": 59506558, "comment_id": 105200024, "body": "Based on the pattern from the previous couple of exercises in the course, I believe they want you to handle an &quot;error case for each function&quot;. for <code>total_cost</code> the <code>ParseIntError</code> return should be triggered in the case that something other than an <code>i32</code> type is entered. I am less sure about main, but I believe they want the <code>OK || Err</code> returns to be triggered from inside the <code>if&#47;else</code> statement."}, {"owner": {"reputation": 1157, "user_id": 2653567, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RNYoa.png?s=128&g=1", "display_name": "HMLDude", "link": "https://stackoverflow.com/users/2653567/hmldude"}, "edited": false, "score": 0, "creation_date": 1577565745, "post_id": 59506558, "comment_id": 105201108, "body": "After looking at the problem again, in the context of the previous exercises. I now believe you are correct. My concern was, that I could not figure out the purpose of this exercise in the series. I now realize that what is unique about this problem is that the <code>?</code> syntax in main &quot;inherits&quot; its error handling from the <code>total_cost</code> function."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 3, "last_activity_date": 1577485308, "creation_date": 1577485308, "answer_id": 59506558, "question_id": 59492825, "link": "https://stackoverflow.com/questions/59492825/rustlings-errors3-rs-convert-from-string-error-trait-not-implemented-for-std/59506558#59506558", "title": "Rustlings Errors3.rs Convert From String Error - Trait Not Implemented for `std::string::String`", "body": "<p>You tried to change the behaviour of the original program, the program must print something not return a String from the main (actually you can't return a String from the main, you must return something that implement <a href=\"https://doc.rust-lang.org/std/process/trait.Termination.html\" rel=\"nofollow noreferrer\"><code>Termination</code></a>).</p>\n\n<p>The solution is close to what you did, <code>main()</code> must also return an error, there is two way, use real type or use dynamic trait. Your case is very simple so real type is the most simple:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::num::ParseIntError;\n\nfn main() -&gt; Result&lt;(), ParseIntError&gt; {\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n\n    let cost = total_cost(pretend_user_input)?;\n\n    if cost &gt; tokens {\n        println!(\"You can't afford that many!\");\n    } else {\n        tokens -= cost;\n        println!(\"You now have {} tokens.\", tokens);\n    }\n\n    // we just return ok with nothing in it, this mean program terminated without error\n    Ok(())\n}\n\npub fn total_cost(item_quantity: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::&lt;i32&gt;()?;\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n</code></pre>\n\n<p>But you could also use a dynamic trait, it's more advance but not particular better:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::num::ParseIntError;\nuse std::error::Error;\n\nfn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n\n    let cost = total_cost(pretend_user_input)?;\n\n    if cost &gt; tokens {\n        println!(\"You can't afford that many!\");\n    } else {\n        tokens -= cost;\n        println!(\"You now have {} tokens.\", tokens);\n    }\n\n    Ok(())\n}\n\npub fn total_cost(item_quantity: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::&lt;i32&gt;()?;\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n</code></pre>\n\n<p>There is a lot of way to handle error in Rust. You can learn a lot on <a href=\"https://blog.yoshuawuyts.com/error-handling-survey/\" rel=\"nofollow noreferrer\">this blog post</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 13622971, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/e0147f40dfa5eb5ab3c6e034f146ebe5?s=128&d=identicon&r=PG", "display_name": "Mark Tranter", "link": "https://stackoverflow.com/users/13622971/mark-tranter"}, "is_accepted": false, "score": 1, "last_activity_date": 1590525356, "creation_date": 1590525356, "answer_id": 62030983, "question_id": 59492825, "link": "https://stackoverflow.com/questions/59492825/rustlings-errors3-rs-convert-from-string-error-trait-not-implemented-for-std/62030983#62030983", "title": "Rustlings Errors3.rs Convert From String Error - Trait Not Implemented for `std::string::String`", "body": "<p>The hints say to use a different method which avoids the \"?\" operator.\nThis is my solution.</p>\n\n<pre><code>// errors3.rs\n// This is a program that is trying to use a completed version of the\n// `total_cost` function from the previous exercise. It's not working though!\n// Why not? What should we do to fix it?\n// Execute `rustlings hint errors3` for hints!\n\n\n// I AM NOT DONE\n\nuse std::num::ParseIntError;\n\nfn main() -&gt; Result&lt;(),ParseIntError&gt;{\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n    let cost = total_cost(pretend_user_input);\n    match cost {\n        Ok(x) if x &gt; tokens =&gt; \n            println!(\"You can't afford that many!\"),\n        Ok(x) =&gt; { \n            tokens -= x;\n            println!(\"You now have {} tokens.\", tokens);\n        },\n        Err(e) =&gt; (), \n    }\n    Ok(())\n}\n\npub fn total_cost(item_quantity: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::&lt;i32&gt;()?;\n\n    Ok(qty * cost_per_item + processing_fee)    \n}\n</code></pre>\n"}], "owner": {"reputation": 1157, "user_id": 2653567, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/RNYoa.png?s=128&g=1", "display_name": "HMLDude", "link": "https://stackoverflow.com/users/2653567/hmldude"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1285, "favorite_count": 0, "accepted_answer_id": 59506558, "answer_count": 2, "score": 3, "last_activity_date": 1590525356, "creation_date": 1577389724, "last_edit_date": 1577484644, "question_id": 59492825, "link": "https://stackoverflow.com/questions/59492825/rustlings-errors3-rs-convert-from-string-error-trait-not-implemented-for-std", "title": "Rustlings Errors3.rs Convert From String Error - Trait Not Implemented for `std::string::String`", "body": "<p>I am working on the Rustlings course <a href=\"https://github.com/rust-lang/rustlings/blob/master/exercises/error_handling/errors3.rs\" rel=\"nofollow noreferrer\">Errors3.rs</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// This is a program that is trying to use a completed version of the\n// `total_cost` function from the previous exercise. It's not working though!\n// Why not? What should we do to fix it?\n\nuse std::num::ParseIntError;\n\nfn main() {\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n\n    let cost = total_cost(pretend_user_input)?;\n\n    if cost &gt; tokens {\n        println!(\"You can't afford that many!\");\n    } else {\n        tokens -= cost;\n        println!(\"You now have {} tokens.\", tokens);\n    }\n}\n\npub fn total_cost(item_quantity: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::&lt;i32&gt;()?;\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n</code></pre>\n\n<p>Here is my current code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::num::ParseIntError;\n\nfn main() -&gt; Result&lt;String, String&gt;  {\n    let mut tokens = 100;\n    let pretend_user_input = \"8\";\n\n    let cost = total_cost(pretend_user_input)?;\n\n    if cost &gt; tokens {\n        //println!(\"You can't afford that many!\");\n        Ok(format!(\"You can't afford that many!\"))\n    } else {\n        tokens -= cost;\n        //println!(\"You now have {} tokens.\", tokens);\n        Err(format!(\"You now have {} tokens.\", tokens).to_string())\n    }\n\n}\n\npub fn total_cost(item_quantity: &amp;str) -&gt; Result&lt;i32, ParseIntError&gt; {\n    let processing_fee = 1;\n    let cost_per_item = 5;\n    let qty = item_quantity.parse::&lt;i32&gt;()?;\n\n    Ok(qty * cost_per_item + processing_fee)\n}\n</code></pre>\n\n<p>I am at a loss as to how to correct the first error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `?` couldn't convert the error to `std::string::String`\n --&gt; src/main.rs:7:46\n  |\n7 |     let cost = total_cost(pretend_user_input)?;\n  |                                              ^ the trait `std::convert::From&lt;std::num::ParseIntError&gt;` is not implemented for `std::string::String`\n  |\n  = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n  = help: the following implementations were found:\n            &lt;std::string::String as std::convert::From&lt;&amp;std::string::String&gt;&gt;\n            &lt;std::string::String as std::convert::From&lt;&amp;str&gt;&gt;\n            &lt;std::string::String as std::convert::From&lt;std::borrow::Cow&lt;'a, str&gt;&gt;&gt;\n            &lt;std::string::String as std::convert::From&lt;std::boxed::Box&lt;str&gt;&gt;&gt;\n  = note: required by `std::convert::From::from`\n\nerror[E0277]: `main` has invalid return type `std::result::Result&lt;std::string::String, std::string::String&gt;`\n --&gt; src/main.rs:3:14\n  |\n3 | fn main() -&gt; Result&lt;String, String&gt;  {\n  |              ^^^^^^^^^^^^^^^^^^^^^^ `main` can only return types that implement `std::process::Termination`\n  |\n  = help: consider using `()`, or a `Result`\n</code></pre>\n\n<p>Based on the suggestions, regarding <code>From</code>, I tried changing <code>Ok(format!(\"You can't afford that many!\"))</code> to <code>Ok(String::from(\"You can't afford that many!\"))</code>. But it results in virtually the same error message. </p>\n\n<p>I have tried looking at the Rust documentation for <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\">std::convert::From</a>. This gave me the idea of trying:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>\nlet slug: &amp;'static str = \"You can't afford that many!\";\nif cost &gt; tokens {\n    //println!(\"You can't afford that many!\");\n    Ok(std::convert::From(slug))\n} else {\n    tokens -= cost;\n    //println!(\"You now have {} tokens.\", tokens);\n    Err(format!(\"You now have {} tokens.\", tokens).to_string())\n}\n\n</code></pre>\n\n<p>Which results in the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0423]: expected function, tuple struct or tuple variant, found trait `std::convert::From`\n  --&gt; src/main.rs:12:12\n   |\n12 |         Ok(std::convert::From(slug))\n   |            ^^^^^^^^^^^^^^^^^^ not a function, tuple struct or tuple variant\n</code></pre>\n"}, {"tags": ["rust", "traits", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "is_accepted": true, "score": 2, "last_activity_date": 1577385863, "creation_date": 1577385863, "answer_id": 59492259, "question_id": 59491563, "link": "https://stackoverflow.com/questions/59491563/cannot-define-appropriate-rust-lifetime-requirements/59492259#59492259", "title": "Cannot define appropriate rust lifetime requirements", "body": "<p>This error almost always means that you are trying to store a value in a way where it can exist longer than it's lifetime.</p>\n\n<p>Let's look at a specific piece of code, annotated with explicit types and lifetimes:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; MainState {\n    fn new(ctx: &amp;'a Context) -&gt; GameResult&lt;MainState&gt; {\n        let kbd_input: KeyboardInput&lt;'a&gt; = KeyboardInput::new(ctx, KeyCode::Left, KeyCode::Right);\n        let kbd_input: Box&lt;dyn Input + 'a&gt; = Box::new(kbd_input);\n\n        let s: MainState = MainState {\n            last_update: Instant::now(),\n            players: vec![\n                Player::new(kbd_input as Box&lt;dyn Input + 'static&gt;)\n            ]\n        };\n        Ok(s)\n    }\n}\n</code></pre>\n\n<p>On line 9, you're trying to assign <code>kbd_input</code> to <code>Box&lt;dyn Input&gt;</code>. But <code>Box&lt;dyn Input&gt;</code> has no explicit lifetime, it is implicitly equivalent to <code>Box&lt;dyn Input + 'static&gt;</code>. So you're trying to assign a value with lifetime <code>'a</code> to a type with a static lifetime, which is not allowed.</p>\n\n<p>The solution is to explicitly set the lifetime of the trait object type: <code>Box&lt;dyn Input + 'a&gt;</code>. This cascades and means that you'll need to add a lifetime to the <code>MainState</code> struct as well, as it now will contain a type with a non-static lifetime:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MainState&lt;'a&gt; {\n  /* ... */\n  players: Vec&lt;Box&lt;dyn Input + 'a&gt;&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 128, "user_id": 2521574, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5639b006726507baf6d5e7f355113907?s=128&d=identicon&r=PG", "display_name": "hcf", "link": "https://stackoverflow.com/users/2521574/hcf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 100, "favorite_count": 0, "accepted_answer_id": 59492259, "answer_count": 1, "score": 0, "last_activity_date": 1577385863, "creation_date": 1577381439, "question_id": 59491563, "link": "https://stackoverflow.com/questions/59491563/cannot-define-appropriate-rust-lifetime-requirements", "title": "Cannot define appropriate rust lifetime requirements", "body": "<p>TL;DR\nHaving problems with lifetime with nested objects. Code is below.</p>\n\n<p>Long Version:</p>\n\n<p>I'm writing a multiplayer game using <code>ggez</code>, and I'm trying to create an abstraction layer for the input (to allow local and remote players play together).</p>\n\n<p>In order to so, I've created an <code>Input</code> trait, and implemented <code>KeyboardInput</code> for local input, which uses <code>ggez</code> keyboard state querying methods.</p>\n\n<p>Now the tricky part: <code>ggez</code> creates <code>Context</code> object at startup, and expects a reference to it in most of the functions that is exposes.</p>\n\n<p>because my <code>KeyboardInput</code> implementation is using <code>ggez</code> input method (specifically, <code>is_key_pressed</code>), it has to pass <code>&amp;Context</code> to this method. However, since the trait itself should be generic, it won't need a <code>Context</code> reference for any other implementation (for example, <code>NetworkInput</code>). </p>\n\n<p>my solution was to add a reference to <code>Context</code> as field in the <code>KeyboardInput</code> struct. However, that caused a lifetime error that I'm still unable to resolve.</p>\n\n<p>I also tried to make the lifetime <code>'static</code>, but that did not work either.</p>\n\n<p>here is the relevant code:</p>\n\n<pre><code>pub trait Input {\n    fn get_direction(&amp;self) -&gt; Direction;\n}\n\npub struct KeyboardInput&lt;'a&gt; {\n    left_key: KeyCode,\n    right_key: KeyCode,\n    _ctx: &amp;'a Context\n}\n\nimpl KeyboardInput&lt;'_&gt; {\n    pub fn new(_ctx: &amp;Context, left_key: KeyCode, right_key: KeyCode) -&gt; KeyboardInput {\n        KeyboardInput{\n            _ctx,\n            left_key,\n            right_key\n        }\n    }\n}\n\nimpl Input for KeyboardInput&lt;'_&gt; {\n    fn get_direction(&amp;self) -&gt; Direction {\n        if ggez::input::keyboard::is_key_pressed(self._ctx, self.left_key) {\n            return Direction::Left;\n        }\n        if ggez::input::keyboard::is_key_pressed(self._ctx, self.right_key) {\n            return Direction::Right;\n        }\n        Direction::Unchanged\n    }\n}\n\nstruct Player {\n    angle: f32,\n    pos_x: f32,\n    pos_y: f32,\n    input_manager: Box&lt;dyn Input&gt;,\n}\n\nimpl &lt;'a&gt;MainState {\n    fn new(ctx: &amp;'a Context) -&gt; GameResult&lt;MainState&gt; {\n\n        let kbd_input = KeyboardInput::new(ctx, KeyCode::Left, KeyCode::Right);\n        let kbd_input = Box::new(kbd_input);\n\n        let s = MainState { \n            last_update: Instant::now(),\n            players: vec![\n                Player::new(kbd_input)\n            ]\n        };\n        Ok(s)\n    }\n\n}\n\npub fn main() -&gt; GameResult {\n    let cb = ggez::ContextBuilder::new(\"My game\", \"ggez\");\n    let (ctx, event_loop) = &amp;mut cb.build()?;\n    let state = &amp;mut MainState::new(&amp;ctx)?;\n    event::run(ctx, event_loop, state)\n}\n\n</code></pre>\n\n<p>and the compiler error:</p>\n\n<pre><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n  --&gt; src\\main.rs:75:25\n   |\n75 |         let kbd_input = KeyboardInput::new(ctx, KeyCode::Left, KeyCode::Right);\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the lifetime `'a` as defined on the impl at 72:7...\n  --&gt; src\\main.rs:72:7\n   |\n72 | impl &lt;'a&gt;MainState {\n   |       ^^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src\\main.rs:75:44\n   |\n75 |         let kbd_input = KeyboardInput::new(ctx, KeyCode::Left, KeyCode::Right);\n   |                                            ^^^\n   = note: but, the lifetime must be valid for the static lifetime...\n   = note: ...so that the expression is assignable:\n           expected std::boxed::Box&lt;(dyn input_manager::Input + 'static)&gt;\n              found std::boxed::Box&lt;dyn input_manager::Input&gt;\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 245138, "user_id": 2069064, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/e4V2X.jpg?s=128&g=1", "display_name": "Barry", "link": "https://stackoverflow.com/users/2069064/barry"}, "edited": false, "score": 0, "creation_date": 1577371847, "post_id": 59489834, "comment_id": 105154225, "body": "Mildly annoying that the accumulator semantics are actually different between <code>scan</code> and <code>fold</code>, but I guess this lets you write a <code>scan</code> which early exits."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 245138, "user_id": 2069064, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/e4V2X.jpg?s=128&g=1", "display_name": "Barry", "link": "https://stackoverflow.com/users/2069064/barry"}, "edited": false, "score": 1, "creation_date": 1577375956, "post_id": 59489834, "comment_id": 105155677, "body": "@Barry yeah, the <code>scan</code> API is indeed a bit unusual. I guess the ownership semantic has something to do with it. A <code>fold</code>-compatible accumulator would mean that the state is to be both returned and saved for the next iteration. So it would have to be cloneable. Instead, it has a mutable state being threaded and <code>Option</code> type to have early return ability."}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 6, "last_activity_date": 1577371341, "last_edit_date": 1577371341, "creation_date": 1577370895, "answer_id": 59489834, "question_id": 59489777, "link": "https://stackoverflow.com/questions/59489777/fold-algorithm-that-yields-each-partial-result/59489834#59489834", "title": "fold algorithm that yields each partial result", "body": "<p>You want <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.scan\" rel=\"nofollow noreferrer\"><code>Iterator::scan</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let v = vec![1, 2, 3];\n    let res = v\n        .iter()\n        .scan(0, |acc, &amp;x| {\n            *acc += x;\n            Some(*acc)\n        })\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n    assert_eq!(res, vec![1, 3, 6]);\n}\n</code></pre>\n"}], "owner": {"reputation": 245138, "user_id": 2069064, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/e4V2X.jpg?s=128&g=1", "display_name": "Barry", "link": "https://stackoverflow.com/users/2069064/barry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 0, "accepted_answer_id": 59489834, "answer_count": 1, "score": 4, "last_activity_date": 1577371744, "creation_date": 1577370520, "last_edit_date": 1577371744, "question_id": 59489777, "link": "https://stackoverflow.com/questions/59489777/fold-algorithm-that-yields-each-partial-result", "title": "fold algorithm that yields each partial result", "body": "<p>The rust standard library has a <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold\" rel=\"nofollow noreferrer\"><code>fold()</code></a> which collapses an iterator into a single result:</p>\n\n<blockquote>\n<pre><code>let a = [1, 2, 3];\n\n// the sum of all of the elements of the array\nlet sum = a.iter().fold(0, |acc, x| acc + x);\n\nassert_eq!(sum, 6);\n</code></pre>\n</blockquote>\n\n<p>Does the standard library have an equivalent version that yields each element? That is, something like:</p>\n\n<pre><code>let partial_sums = a.iter()\n   .what_goes_here(0, |acc, x| acc + x)\n   .collect::&lt;Vec&lt;_&gt;&gt;();\nassert_eq!(partial_sums, vec![1, 3, 6]);\n</code></pre>\n\n<p>Effectively, <code>iter.fold(init, f)</code> is semantically equivalent to </p>\n\n<pre><code>iter\n    .what_goes_here(init, f)\n    .last()\n    .unwrap_or(init)\n</code></pre>\n\n<hr />\n\n<p>For anyone in the same boat as me, I'm looking for the Rust equivalent of the C++ algorithm <a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\" rel=\"nofollow noreferrer\"><code>partial_sum</code></a>.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 1, "creation_date": 1577370806, "post_id": 59489602, "comment_id": 105153886, "body": "If you read the entire error message, it should contain a hint about what to add to solve this problem. Specifically, it should tell you to add <code>use num_traits::cast::ToPrimitive</code>."}, {"owner": {"reputation": 51, "user_id": 7931169, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76ad88b14bd40b9855834d4cbb091411?s=128&d=identicon&r=PG&f=1", "display_name": "P Cresswell", "link": "https://stackoverflow.com/users/7931169/p-cresswell"}, "reply_to_user": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 0, "creation_date": 1577371790, "post_id": 59489602, "comment_id": 105154203, "body": "Interesting, I didn&#39;t see that in the error message. All I got were ideas for other types that the trait was implemented for (<code>std::box::Boxed</code>, etc). That fixed the issue though, thanks! What did that do that resolved the problem?"}, {"owner": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 1, "creation_date": 1577371976, "post_id": 59489602, "comment_id": 105154258, "body": "You can see in the documentation for <code>BigUint</code> <a href=\"https://docs.rs/num-bigint/0.2.3/num_bigint/struct.BigUint.html#impl-ToPrimitive\" rel=\"nofollow noreferrer\">here</a> that the <code>to_u8</code> method is part of the <code>ToPrimitive</code> trait. Methods from traits can only be used when the traits are in scope. (This is what the &quot;help:&quot; part of your error message refers to.) Also I got the error message by <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2c4bf36330fed11e0e5667b412c8d4cb\" rel=\"nofollow noreferrer\">attempting to compile your code in playground</a>, which gives the hint about <code>ToPrimitive</code>."}, {"owner": {"reputation": 51, "user_id": 7931169, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76ad88b14bd40b9855834d4cbb091411?s=128&d=identicon&r=PG&f=1", "display_name": "P Cresswell", "link": "https://stackoverflow.com/users/7931169/p-cresswell"}, "reply_to_user": {"reputation": 29810, "user_id": 423170, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/H9kNQ.png?s=128&g=1", "display_name": "Frxstrem", "link": "https://stackoverflow.com/users/423170/frxstrem"}, "edited": false, "score": 0, "creation_date": 1577465479, "post_id": 59489602, "comment_id": 105179834, "body": "Ah I see, ToPrimitive was the trait that I wasn&#39;t including. I was compiling using MSVC on VSCode and didn&#39;t have that very useful information. Thanks for the help."}], "answers": [{"tags": [], "owner": {"reputation": 51, "user_id": 7931169, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76ad88b14bd40b9855834d4cbb091411?s=128&d=identicon&r=PG&f=1", "display_name": "P Cresswell", "link": "https://stackoverflow.com/users/7931169/p-cresswell"}, "is_accepted": false, "score": 1, "last_activity_date": 1577371903, "creation_date": 1577371903, "answer_id": 59490005, "question_id": 59489602, "link": "https://stackoverflow.com/questions/59489602/error-items-from-traits-can-only-be-used-if-the-trait-is-in-scope-when-trying/59490005#59490005", "title": "Error &quot;items from traits can only be used if the trait is in scope&quot; when trying to use a trait from an imported crate&#39;s struct", "body": "<p>From @Frxstrem's helpful comment!</p>\n\n<p>Importing the crate num-traits and doing the following fixed this:</p>\n\n<pre><code>        use num_traits::cast::ToPrimitive;\n        let c = shifted.to_u8();\n</code></pre>\n"}], "owner": {"reputation": 51, "user_id": 7931169, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76ad88b14bd40b9855834d4cbb091411?s=128&d=identicon&r=PG&f=1", "display_name": "P Cresswell", "link": "https://stackoverflow.com/users/7931169/p-cresswell"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 732, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1577371903, "creation_date": 1577369533, "question_id": 59489602, "link": "https://stackoverflow.com/questions/59489602/error-items-from-traits-can-only-be-used-if-the-trait-is-in-scope-when-trying", "title": "Error &quot;items from traits can only be used if the trait is in scope&quot; when trying to use a trait from an imported crate&#39;s struct", "body": "<p>I'm trying to implement a function:</p>\n\n<pre><code>extern crate num_bigint as bigint;\n\nuse bigint::{BigUint};\n\nfn encode(bytes: BigUint) -&gt; Vec&lt;char&gt; {\n\n    // determine padding length\n    let num_bits = bytes.bits();\n    let padding: bool = num_bits % 6 != 0;\n    let num_chars: usize = num_bits / 6;\n\n    let bitmask = BigUint::parse_bytes(b\"7\", 16);\n\n    let mut base64_chars: Vec&lt;char&gt; = Vec::new();\n\n    for idx in num_chars..0 {\n        let shifted = bytes &lt;&lt; (num_chars * 6);\n        use BigUint;\n        let c = shifted.to_u8();\n    }\n\n    return base64_chars;\n}\n</code></pre>\n\n<p>it fails on <code>let c = shifted.to_u8()</code></p>\n\n<blockquote>\n  <p>no method named <code>to_u8</code> found for type <code>bigint::BigUint</code> in the current scope. \n  method not found in <code>bigint::BigUint</code>. \n  help: items from traits can only be used if the trait is in scope</p>\n</blockquote>\n\n<p>Coming from a c++ background I'm having more of a struggle with learning Rust than I expected. What is that help text trying to let me know? I tried adding <code>using BigUint</code> before the line, but that just states I'm doing something redundant. How do I get to use this trait?</p>\n"}, {"tags": ["rust", "ffi", "primitive-types"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577358752, "post_id": 59487544, "comment_id": 105149935, "body": "&quot;can my FFI break because of a different sized primitive type?&quot; yes &quot;How can I guard against that? &quot; not really, however because all people make assumption that int == 32 bits it&#39;s unlikely to broke still nothing prevent int to be 42 bits. Also, libc crate give an useful abstraction that protect a little versus this kind of problem."}], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 1, "creation_date": 1577374649, "post_id": 59488848, "comment_id": 105155214, "body": "No need to use libc if all you need are the primitive types. The standard library has them all defined in <a href=\"https://doc.rust-lang.org/stable/std/os/raw/index.html\" rel=\"nofollow noreferrer\"><code>std::os::raw</code></a>."}], "tags": [], "owner": {"reputation": 1795, "user_id": 6099096, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/623gR.jpg?s=128&g=1", "display_name": "Inline", "link": "https://stackoverflow.com/users/6099096/inline"}, "is_accepted": false, "score": 4, "last_activity_date": 1577367381, "last_edit_date": 1577367381, "creation_date": 1577365219, "answer_id": 59488848, "question_id": 59487544, "link": "https://stackoverflow.com/questions/59487544/ffi-primitive-type-size/59488848#59488848", "title": "FFI Primitive Type Size", "body": "<p><code>int</code> in C is guaranteed to have at least size of 2 bytes. Exact size is implementation defined.</p>\n\n<p>C ABI is generally stable across one operating system and architecture.</p>\n\n<p>Rust doesn't have integer types that can vary by size between different architectures (except <code>isize</code> and <code>usize</code>). It's choice by design, but you can try to use variable sized types that are guaranteed to correspond with target system C ABI.</p>\n\n<pre><code>use libc::c_int;\n</code></pre>\n\n<p>C types from <a href=\"https://crates.io/libc\" rel=\"nofollow noreferrer\">libc</a> crate are exactly what you need.</p>\n\n<p>But I will recommend to not rely on types that can have variable size and instead use fixed width integer types like <a href=\"https://en.cppreference.com/w/c/types/integer\" rel=\"nofollow noreferrer\">int32_t</a> in C and <code>i32</code> in Rust. Coding correctly with different sizes of primitive types in mind can be sometimes challenging.</p>\n\n<p><strong>EDIT</strong>: By byte I mean byte which has exactly 8 bits, not byte defined by C standard.</p>\n"}], "owner": {"reputation": 29, "user_id": 7678265, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9306ddd41efac42e10c28ace2becc51e?s=128&d=identicon&r=PG&f=1", "display_name": "Erik Schulze", "link": "https://stackoverflow.com/users/7678265/erik-schulze"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1577367381, "creation_date": 1577358440, "question_id": 59487544, "link": "https://stackoverflow.com/questions/59487544/ffi-primitive-type-size", "title": "FFI Primitive Type Size", "body": "<p>Assume, I have a C/C++ Header with a type definition like this:</p>\n\n<pre><code>typedef int WORD;\n</code></pre>\n\n<p>And a function like this:</p>\n\n<pre><code>WORD test(WORD input);\n</code></pre>\n\n<p>Now, as I understand it, a int in C/C++ can be of a different size, depending on the platform.\nIf I now link Rust Code to a dll with said function, can my FFI break because of a different sized primitive type?\nHow can I guard against that? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 675, "user_id": 11759324, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21a203b04e986490ef45fe9d09e29467?s=128&d=identicon&r=PG&f=1", "display_name": "dronte7", "link": "https://stackoverflow.com/users/11759324/dronte7"}, "edited": false, "score": 0, "creation_date": 1577351662, "post_id": 59486168, "comment_id": 105147518, "body": "Is String::from somehow better than <code>.to_string()</code> or <code>.to_owned()</code> ? And is it possible to use the product of <code>s.trim()</code> in the condition as the return value? without double invoking in case of supposed <code>s.trim()</code> for the <code>Ok(s) if s.trim() != &quot;&quot;</code> arm?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 675, "user_id": 11759324, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21a203b04e986490ef45fe9d09e29467?s=128&d=identicon&r=PG&f=1", "display_name": "dronte7", "link": "https://stackoverflow.com/users/11759324/dronte7"}, "edited": false, "score": 0, "creation_date": 1577352013, "post_id": 59486168, "comment_id": 105147629, "body": "&quot;And is it possible to use the product of s.trim() in the condition as the return value?&quot; no match guard are very limited that why I never use them"}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 2, "last_activity_date": 1577351345, "creation_date": 1577351345, "answer_id": 59486168, "question_id": 59486107, "link": "https://stackoverflow.com/questions/59486107/logical-and-in-matching-branches/59486168#59486168", "title": "logical &#39;and&#39; in matching branches", "body": "<p>Use a <a href=\"https://doc.rust-lang.org/rust-by-example/flow_control/match/guard.html\" rel=\"nofollow noreferrer\">match</a> <a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards\" rel=\"nofollow noreferrer\">guard</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let expr: Result&lt;_, ()&gt; = Ok(String::from(\"hello\"));\n    let _res = match expr {\n        Ok(s) if s.trim() != \"\" =&gt; s,\n        _ =&gt; String::from(\"None\"),\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 675, "user_id": 11759324, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21a203b04e986490ef45fe9d09e29467?s=128&d=identicon&r=PG&f=1", "display_name": "dronte7", "link": "https://stackoverflow.com/users/11759324/dronte7"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 48, "favorite_count": 0, "accepted_answer_id": 59486168, "answer_count": 1, "score": 1, "last_activity_date": 1577351386, "creation_date": 1577351023, "last_edit_date": 1577351386, "question_id": 59486107, "link": "https://stackoverflow.com/questions/59486107/logical-and-in-matching-branches", "title": "logical &#39;and&#39; in matching branches", "body": "<p>How to express logical 'and' in <code>match</code>' arms ?</p>\n\n<p>Like the following: </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let expr: Result&lt;_, ()&gt; = Ok(String::from(\"hello\"));\n    let _res = match expr {\n        Ok(s) &amp;&amp; s.trim() != \"\" =&gt; s,\n        _ =&gt; String::from(\"None\"),\n    };\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577326262, "post_id": 59483183, "comment_id": 105142500, "body": "I really didn&#39;t understand a thing. You can&#39;t have a mutate reference and a immutable reference in Rust period It&#39;s UB whatever the situation."}, {"owner": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577327697, "post_id": 59483183, "comment_id": 105142653, "body": "Data races are UB, certainly, but the mere co-existence of mutable and immutable references doesn&#39;t guarantee races, just makes them possible. It seems like this courts a dangerous territory, but should be possible by some use of UnsafeCell."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577328579, "post_id": 59483183, "comment_id": 105142751, "body": "no, it&#39;s UB period, UB is UB, Rust clearly state that just the create of it is UB. Please, don&#39;t confuse java like language that make it &quot;safe&quot; with rust life language where UB is a thing. Rust make assumption that this can&#39;t happen, if it happen you have UB. Note that it&#39;s can&#39;t happen without use of unsafe. If this kind of magic solution where really working programming would be easier. But magic don&#39;t exist. You can&#39;t read and write something in the same time it&#39;s unsafe and unlogical."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1577328765, "post_id": 59483183, "comment_id": 105142775, "body": "@Stargateur this is a matter of terminology. You are right about <i>references</i>, but I would assume that OP would be satisfied with some kind of smart pointer or wrapper around raw pointers, which won&#39;t necessarily trigger UB."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1577328860, "post_id": 59483183, "comment_id": 105142784, "body": "@PeterHall &quot;The core of the question is: What should the type of SomeReferenceType be to allow to allow these mutable and immutable references to co-exist without something like an ReadWriteLock?&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "edited": false, "score": 0, "creation_date": 1577328029, "post_id": 59483313, "comment_id": 105142688, "body": "It&#39;s guaranteed that only one thread will hold a mutable reference to the collection because it&#39;s owned by the update thread.  There is no guarantee that a read and update won&#39;t overlap, the point of the question is how to make that safe without locking. If it would halp I can illustrate how this works in the java version to show that it can be safe in <i>some</i> language."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "edited": false, "score": 0, "creation_date": 1577328652, "post_id": 59483313, "comment_id": 105142761, "body": "@CoryKolbeck If you mean <a href=\"https://github.com/urbanairship/sarlacc-pit/blob/master/sarlacc-client/src/main/java/com/urbanairship/sarlacc/client/structures/container/UpdatingCollection.java#L8\" rel=\"nofollow noreferrer\">this</a> it&#39;s essentially using a locking structure because of the <code>synchronized</code> method. It&#39;s equivalent to using a <code>RwLock</code>."}, {"owner": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "edited": false, "score": 0, "creation_date": 1577328819, "post_id": 59483313, "comment_id": 105142778, "body": "Updates are infrequent, generally every 10s at most frequent. In your example wouldn&#39;t you still need shared state with a single mutator to perform swaps?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "edited": false, "score": 0, "creation_date": 1577328973, "post_id": 59483313, "comment_id": 105142795, "body": "To be safe, you&#39;d still need to coordinate across threads with atomic counters or similar. The third copy is to avoid the need for blocking. I believe your Java code will block if a read and write overlap \u2014 though I&#39;m not a Java expert so I could be wrong there."}, {"owner": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "edited": false, "score": 0, "creation_date": 1577329456, "post_id": 59483313, "comment_id": 105142848, "body": "The analogue in the java version is here: <a href=\"https://github.com/urbanairship/sarlacc-pit/blob/master/sarlacc-client/src/main/java/com/urbanairship/sarlacc/client/structures/container/UpdatingSet.java#L12\" rel=\"nofollow noreferrer\">github.com/urbanairship/sarlacc-pit/blob/master/sarlacc-clie&zwnj;&#8203;nt/&hellip;</a>  The lone update thread executes <code>set()</code> operations on this atomic reference, where any readers issue get()s. There is no guarantee that the reference won&#39;t be swapped out while a reader is somewhere in the guts of the previous collection, but that is fine."}, {"owner": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "edited": false, "score": 0, "creation_date": 1577329578, "post_id": 59483313, "comment_id": 105142861, "body": "(those set and get operations claim no locks, they rely on assignment/dereference being atomic by nature)"}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1577328310, "last_edit_date": 1577328310, "creation_date": 1577327708, "answer_id": 59483313, "question_id": 59483183, "link": "https://stackoverflow.com/questions/59483183/lock-free-sharing-of-data-with-a-single-mutator-in-rust/59483313#59483313", "title": "Lock-free sharing of data with a single mutator in Rust", "body": "<p>If <code>update_collection</code> is called from another thread, what guarantees do you have that the main thread isn't in the middle of reading from the collection at the same time? With the information you have provided, you need something like a <code>RwLock</code> or <code>Mutex</code> to make this safe.</p>\n\n<p>You have asserted that you believe this to be safe. If there is an undisclosed constraint on your system that allows you to guarantee that a simultaneous read and write cannot happen then there may be a way to incorporate that into the types. But a better answer can't be given otherwise.</p>\n\n<p>For example, if updates are infrequent, it might satisfy your use case to use three copies of your collection, and swap them over after each modification:</p>\n\n<ol>\n<li>One for reading,</li>\n<li>One for writing,</li>\n<li>One for transitioning clients while swapping the collections</li>\n</ol>\n\n<p>This would not be a \"beginner\" level Rust project though.</p>\n"}], "owner": {"reputation": 11, "user_id": 12597867, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AAuE7mACOsNXn_GgC8levDKYRGr4bSJkRXJGKNhKdoGT=k-s128", "display_name": "Cory Kolbeck", "link": "https://stackoverflow.com/users/12597867/cory-kolbeck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1577328310, "creation_date": 1577325891, "question_id": 59483183, "link": "https://stackoverflow.com/questions/59483183/lock-free-sharing-of-data-with-a-single-mutator-in-rust", "title": "Lock-free sharing of data with a single mutator in Rust", "body": "<p><strong>Context</strong></p>\n\n<p>As an exercise, I'm attempting to re-implement <a href=\"https://github.com/urbanairship/sarlacc-pit\" rel=\"nofollow noreferrer\">https://github.com/urbanairship/sarlacc-pit</a> in Rust.</p>\n\n<p>Sarlacc-pit mirrors an external source into an in memory data structure (Set/Map/Etc). Clients of the library operate purely in terms of the collection with no knowledge that its contents are changing under the hood. </p>\n\n<p><strong>Problem</strong></p>\n\n<p>Clients need to keep an immutable reference to the collection, while a single update thread keeps a mutable reference in order to update its contents. This directly violates rust's guarantees but should be safe in this case with the following rough structure:</p>\n\n<pre><code>pub struct Map&lt;K, V&gt; {\n  delegate: SomeReferenceType&lt;Arc&lt;HashMap&lt;K, V&gt;&gt;&gt;\n}\n\nimpl&lt;K, V&gt; Map&lt;K, V&gt; {\n  pub fn get(&amp;self, k: &amp;K) -&gt; Option&lt;&amp;V&gt; {\n    self.delegate.borrow().get(k)\n  } \n\n  fn update(&amp;mut self, new_delegate: HashMap&lt;K, V&gt;) {\n    self.delegate.set(Arc::new(new_delegate));\n  }\n}\n\npub struct UpdateService&lt;K, V&gt; {\n  collection: Arc&lt;Map&lt;K, V&gt;&gt;\n}\n\nimpl&lt;K, V&gt; UpdateService&lt;K ,V&gt; {\n  pub fn get_collection(&amp;self) -&gt; Arc&lt;Map&lt;K, V&gt;&gt; {\n    collection.clone()\n  }\n\n  // Called from a thread run on a cadence\n  fn update_collection(&amp;mut self) {\n    let new_value = /* fetch and process value from backing store */\n    self.collection.borrow_mut().update(new_value);\n  }\n}\n</code></pre>\n\n<p>This doesn't compile for a number of reasons, I realize.</p>\n\n<p>The core of the question is: What should the type of SomeReferenceType be to allow to allow these mutable and immutable references to co-exist without something like an ReadWriteLock? Am I missing something? </p>\n"}]