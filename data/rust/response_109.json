[{"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486585862, "post_id": 42121299, "comment_id": 71414103, "body": "See also <a href=\"http://stackoverflow.com/q/41604107/155423\">Rust Trait object conversion</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1486593277, "post_id": 42123422, "comment_id": 71417913, "body": "&quot;an unsized type &quot; trait objects have a size; two <code>usizes</code>. A bare trait by itself, without an object, is an unsized type."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486596069, "post_id": 42123422, "comment_id": 71419046, "body": "Can you explain why the <code>as_trait()</code> method is needed, and <code>use_trait(self as &amp;Trait)</code> doesn&#39;t work directly in <code>provided()</code>?"}, {"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486624987, "post_id": 42123422, "comment_id": 71428054, "body": "@ChrisEmerson, I&#39;ll add the explanation to the question itself. It is pretty obvious why it does not work the simple way."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user3179290"}, "is_accepted": false, "score": 2, "last_activity_date": 1486619704, "last_edit_date": 1486619704, "creation_date": 1486587325, "answer_id": 42123422, "question_id": 42121299, "link": "https://stackoverflow.com/questions/42121299/provided-method-casting-self-to-trait-object/42123422#42123422", "title": "Provided method casting &amp;self to trait object", "body": "<p>You need an additional <code>as_trait</code> function on <code>Trait</code> and its implementations:</p>\n\n<pre><code>trait Trait {\n    fn needed(&amp;self) -&gt; &amp;str;\n\n    fn provided(&amp;self) {\n        use_trait(self.as_trait());\n    }\n\n    fn as_trait(&amp;self) -&gt; &amp;Trait;\n}\n\nstruct Struct();\n\nimpl Trait for Struct {\n    fn needed(&amp;self) -&gt; &amp;str {\n        \"Hello, world!\"\n    }\n\n    fn as_trait(&amp;self) -&gt; &amp;Trait {\n        self as &amp;Trait\n    }\n}\n</code></pre>\n\n<p>You can try it on the playground. (<a href=\"https://play.rust-lang.org/?gist=e5aa203cac8f221c2f9afe10a7c9606e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">trait objects</a>)</p>\n"}, {"tags": [], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "is_accepted": true, "score": 1, "last_activity_date": 1500831282, "last_edit_date": 1592644375, "creation_date": 1486626755, "answer_id": 42131006, "question_id": 42121299, "link": "https://stackoverflow.com/questions/42121299/provided-method-casting-self-to-trait-object/42131006#42131006", "title": "Provided method casting &amp;self to trait object", "body": "<p>Enhanced version of <a href=\"https://stackoverflow.com/a/42123422/201725\">@JoshuaEntrekin's answer</a>:</p>\n<p>The helper <code>as_trait</code> function can be put in an auxiliary trait that gets blanket implementation for all <code>Sized</code> types trying to implement <code>Trait</code>. Then the implementer of <code>Trait</code> does not have to do anything special and the conversion works.</p>\n<pre><code>fn use_trait(x: &amp;Trait) {\n    println!(&quot;object says {}&quot;, x.needed());\n}\n\ntrait Trait : AsTrait {\n    fn needed(&amp;self) -&gt; &amp;str;\n\n    fn provided(&amp;self) where Self : AsTrait {\n        use_trait(self.as_trait());\n    }\n}\n\ntrait AsTrait {\n    fn as_trait(&amp;self) -&gt; &amp;Trait;\n}\n\nimpl&lt;T : Trait + Sized&gt; AsTrait for T {\n    fn as_trait(&amp;self) -&gt; &amp;Trait { self }\n}\n\nstruct Struct();\n\nimpl Trait for Struct {\n    fn needed(&amp;self) -&gt; &amp;str {\n        &quot;Hello, world!&quot;\n    }\n}\n\nfn main() {\n    Struct().provided();\n}\n</code></pre>\n<p>(on <a href=\"https://play.rust-lang.org/?gist=d80593f060c05f1de5a7fa3ccf271c19&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play</a>).</p>\n<p><s>It would also be possible to simply put <code>provided</code> in the auxiliary trait, but then it would have to dynamically dispatch to the other methods of <code>Self</code> unnecessarily.</s></p>\n<hr />\n<p>Update: Actually, the point is that it should still be possible to override <code>provided</code>.</p>\n<p>Now the above can be improved further by making it generic. There is <a href=\"https://doc.rust-lang.org/std/marker/trait.Unsize.html\" rel=\"nofollow noreferrer\">std::makrer::Unsize</a>, which is unstable at the time of this writing. We can't make</p>\n<pre><code>trait Trait : Unsize&lt;Trait&gt;\n</code></pre>\n<p>because Rust does not allow <a href=\"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\" rel=\"nofollow noreferrer\">CRTP</a>, but fortunately it is enough to put the constraint on the method. So</p>\n<pre><code>fn use_trait(x: &amp;Trait) {\n    println!(&quot;object says {}&quot;, x.needed());\n}\n\ntrait Trait {\n    fn needed(&amp;self) -&gt; &amp;str;\n\n    fn provided(&amp;self) where Self: AsObj&lt;Trait&gt; {\n        use_trait(self.as_obj());\n    }\n}\n\ntrait AsObj&lt;Tr: ?Sized&gt; {\n    fn as_obj(&amp;self) -&gt; &amp;Trait;\n}\n\n// For &amp;'a Type for Sized Type\nimpl&lt;Type: Trait&gt; AsObj&lt;Trait&gt; for Type {\n    fn as_obj(&amp;self) -&gt; &amp;Trait { self }\n}\n\n// For trait objects\nimpl AsObj&lt;Trait&gt; for Trait {\n    fn as_obj(&amp;self) -&gt; &amp;Trait { self }\n}\n\nstruct Struct();\n\nimpl Trait for Struct {\n    fn needed(&amp;self) -&gt; &amp;str {\n        &quot;Hello, world!&quot;\n    }\n    \n    fn provided(&amp;self) {\n        println!(&quot;Aber dieses Objekt sagt Gr\u00fc\u00df Gott, Welt!&quot;); // pardon my German, it is rusty.\n    }\n}\n\nfn main() {\n    let s: &amp;Trait = &amp;Struct();\n    s.provided();\n}\n</code></pre>\n<p>(on <a href=\"https://play.rust-lang.org/?code=fn%20use_trait(x%3A%20%26Trait)%20%7B%0A%20%20%20%20println!(%22object%20says%20%7B%7D%22%2C%20x.needed())%3B%0A%7D%0A%0Atrait%20Trait%20%7B%0A%20%20%20%20fn%20needed(%26self)%20-%3E%20%26str%3B%0A%0A%20%20%20%20fn%20provided(%26self)%20where%20Self%3A%20AsObj%3CTrait%3E%20%7B%0A%20%20%20%20%20%20%20%20use_trait(self.as_obj())%3B%0A%20%20%20%20%7D%0A%7D%0A%0Atrait%20AsObj%3CTr%3A%20%3FSized%3E%20%7B%0A%20%20%20%20fn%20as_obj(%26self)%20-%3E%20%26Trait%3B%0A%7D%0A%0A%2F%2F%20For%20%26%27a%20Type%20for%20Sized%20Type%0Aimpl%3CType%3A%20Trait%3E%20AsObj%3CTrait%3E%20for%20Type%20%7B%0A%20%20%20%20fn%20as_obj(%26self)%20-%3E%20%26Trait%20%7B%20self%20%7D%0A%7D%0A%0A%2F%2F%20For%20trait%20objects%0Aimpl%20AsObj%3CTrait%3E%20for%20Trait%20%7B%0A%20%20%20%20fn%20as_obj(%26self)%20-%3E%20%26Trait%20%7B%20self%20%7D%0A%7D%0A%0Astruct%20Struct()%3B%0A%0Aimpl%20Trait%20for%20Struct%20%7B%0A%20%20%20%20fn%20needed(%26self)%20-%3E%20%26str%20%7B%0A%20%20%20%20%20%20%20%20%22Hello%2C%20world!%22%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fn%20provided(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22Aber%20dieses%20Objekt%20sagt%20Gr%C3%BC%C3%9F%20Gott%2C%20Welt!%22)%3B%20%2F%2F%20pardon%20my%20German%2C%20it%20is%20rusty.%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20s%3A%20%26Trait%20%3D%20%26Struct()%3B%0A%20%20%20%20s.provided()%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play</a>)</p>\n<p>This finally makes it transparent for the implementors of other versions.</p>\n<p>See also <a href=\"https://users.rust-lang.org/t/specifying-that-trait-should-be-object-safe-for-purpose-of-casting-to-object/11564/\" rel=\"nofollow noreferrer\">this users thread</a>.</p>\n"}], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 855, "favorite_count": 1, "accepted_answer_id": 42131006, "answer_count": 2, "score": 8, "last_activity_date": 1500831282, "creation_date": 1486579813, "last_edit_date": 1486625435, "question_id": 42121299, "link": "https://stackoverflow.com/questions/42121299/provided-method-casting-self-to-trait-object", "title": "Provided method casting &amp;self to trait object", "body": "<p>I have a trait in which I want to provide a method. The method is to be implemented in terms of some helpers that have no business being inside the trait and are non-trivial enough that dynamic polymorphism makes more sense than making them generic. So I have code along the lines of</p>\n\n<pre><code>fn use_trait(x: &amp;Trait) {\n    println!(\"object says {}\", x.needed());\n}\n\ntrait Trait {\n    fn needed(&amp;self) -&gt; &amp;str;\n\n    fn provided(&amp;self) {\n        use_trait(self);\n    }\n}\n\nstruct Struct();\n\nimpl Trait for Struct {\n    fn needed(&amp;self) -&gt; &amp;str {\n        \"Hello, world!\"\n    }\n}\n\nfn main() {\n    Struct().provided();\n}\n</code></pre>\n\n<p>Which, however, <a href=\"https://play.rust-lang.org/?gist=647f6e1a104daf70a961a4f82e347b7c&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">does not compile</a>, with error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Self: std::marker::Sized` is not satisfied\n --&gt; &lt;anon&gt;:9:19\n  |\n9 |         use_trait(self);\n  |                   ^^^^ the trait `std::marker::Sized` is not implemented for `Self`\n  |\n  = help: consider adding a `where Self: std::marker::Sized` bound\n  = note: required for the cast to the object type `Trait`\n</code></pre>\n\n<p>I understand why\u2014it is not guaranteed somebody won't implement the trait for an unsized type (converting from <code>&amp;T where T: Trait</code> to <code>&amp;Trait</code> requires <code>T: Sized</code>, but the declaration does not require that).</p>\n\n<p>However, the advice will not do what I need. I can add</p>\n\n<pre><code>fn needed(&amp;self) -&gt; &amp;str where Self: Sized\n</code></pre>\n\n<p>but then the <code>needed()</code> method <em>won't</em> be accessible on <code>&amp;Trait</code> (because <code>Trait : ?Sized</code>), which renders the thing useless, because the type (the actual one that does something useful) is <em>always</em> handled as <code>Arc&lt;Trait&gt;</code>. And adding</p>\n\n<pre><code>trait Trait: Sized\n</code></pre>\n\n<p>is even worse, because that does not permit <code>&amp;Trait</code> at all (<code>Trait</code> as a type is unsized, so <code>Trait</code> type does <em>not</em> implement trait <code>Trait</code>).</p>\n\n<p>Of course I can simply make</p>\n\n<pre><code>fn use_trait&lt;T: Trait&gt;(x: &amp;T)\n</code></pre>\n\n<p>but there is a lot behind it in the real code, so I don't want monomorphisation there especially since the trait is otherwise always handled as trait object.</p>\n\n<p>Is there any way to tell Rust that all types that <code>impl Trait</code> must be sized and here is a definition of a method that should work for all of them?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 0, "creation_date": 1486577600, "post_id": 42120604, "comment_id": 71409391, "body": "try using <code>:?</code> instead?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486577737, "post_id": 42120604, "comment_id": 71409463, "body": "<code>println!(&quot;a: {0}, b: {1:?}, c: {2}&quot;, a, b, c)</code>. Using the numbers in <i>this</i> case is silly though, you should just use <code>println!(&quot;a: {}, b: {:?}, c: {}&quot;, a, b, c)</code>. Refer to the <a href=\"https://doc.rust-lang.org/stable/std/fmt/\" rel=\"nofollow noreferrer\"><code>fmt</code> module documentation</a> for the complete list of what you can use to format and the appropriate syntax."}, {"owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 0, "creation_date": 1486577758, "post_id": 42120604, "comment_id": 71409472, "body": "how do I mention the position and :? together?"}, {"owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 0, "creation_date": 1486577902, "post_id": 42120604, "comment_id": 71409548, "body": "Thanks, this was helpful :)"}], "owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 46, "favorite_count": 0, "closed_date": 1486577676, "answer_count": 0, "score": 0, "last_activity_date": 1486577706, "creation_date": 1486577538, "last_edit_date": 1486577706, "question_id": 42120604, "link": "https://stackoverflow.com/questions/42120604/print-vec-using-a-placeholder", "closed_reason": "Duplicate", "title": "Print Vec using a placeholder", "body": "<p>I am trying to print a <code>Vec</code> with variables of other datatypes:</p>\n\n<pre><code>let a = 4;\nlet b = vec![1,2,3,4];\nlet c = 3;\n\n// printing input\nprintln!(\"a: {0}, b: {1}, c: {2}\", a, b, c);\n</code></pre>\n\n<p>but I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;{integer}&gt;: std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:23:43\n   |\n23 |     println!(\"a: {0}, b: {1}, c: {2}\", a, b, c);\n   |                                           ^ trait `std::vec::Vec&lt;{integer}&gt;: std::fmt::Display` not satisfied\n   |\n   = note: `std::vec::Vec&lt;{integer}&gt;` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>How do I print the <code>Vec</code> at a particular position in the output string?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 0, "creation_date": 1486576748, "post_id": 42120335, "comment_id": 71408878, "body": "Okay, but that&#39;s the least important part of the question ;-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 2, "creation_date": 1486577188, "post_id": 42120335, "comment_id": 71409154, "body": "@zwol with your high reputation, I&#39;d think you&#39;d know <a href=\"http://meta.stackexchange.com/questions/39223/one-post-with-multiple-questions-or-multiple-posts\">not to ask multiple questions in one post</a>. Doing so allows valid answers like this."}, {"owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486577294, "post_id": 42120335, "comment_id": 71409214, "body": "@Shepmaster It is one question, namely &quot;how do I write a macro that does <i>all</i> of the following things: ...?&quot;"}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1486578507, "last_edit_date": 1486578507, "creation_date": 1486576627, "answer_id": 42120335, "question_id": 42120206, "link": "https://stackoverflow.com/questions/42120206/macro-rules-macro-takes-string-literal-expands-to-both-and-b/42120335#42120335", "title": "macro_rules! macro takes string literal &quot;...&quot;, expands to both &quot;...&quot; and b&quot;...&quot;", "body": "<blockquote>\n  <p>I also don't know how to reject <code>tt</code>s that aren't string literals.</p>\n</blockquote>\n\n<p>If you make use of the fact that the arguments are strings, then the typechecker will take care of producing errors.</p>\n\n<pre><code>macro_rules! all_s {\n    ($what: ident, $( $str: tt ),* ) =&gt; {{\n        $(\n            assert!($what($str));\n            assert!(str::chars($str).all(|c| char::is_alphabetic(c)));\n            assert!(str::chars($str).all(|c| char::is_alphabetic(c)));\n        )*\n    }}\n}\n</code></pre>\n\n<p>In your question code, you are trying to use the same <code>isalpha</code> with values of both <code>char</code> and <code>u8</code>. You'll have to convert the <code>char</code>s to <code>u8</code>s first:</p>\n\n<pre><code>assert!(str::chars($str)\n            .map(|c| c as u8) // this is safe given the assumption you stated\n            .all(|b| b &lt; 0x7F));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 0, "creation_date": 1486583828, "post_id": 42120629, "comment_id": 71412922, "body": "Well, that&#39;s a disappointing limitation in the macro system, but this will probably do for a workaround for something used only for tests."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 0, "creation_date": 1486583940, "post_id": 42120629, "comment_id": 71412991, "body": "@zwol it&#39;s no more a &quot;limitation&quot; than the fact that you can&#39;t transform an macro argument of an <code>ident</code> into a <code>type</code>; or a <code>String</code> to a <code>Vec</code>, for that matter. Different types mean different things."}, {"owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 2, "creation_date": 1486584638, "post_id": 42120629, "comment_id": 71413426, "body": "Frankly, I think <i>all</i> of the things you mention <i>should</i> be possible in a macro.  You&#39;re rewriting the text of the program.  You should be able to do so arbitrarily."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 2, "creation_date": 1486584982, "post_id": 42120629, "comment_id": 71413608, "body": "@zwol ah, perhaps that root of the problem. Rust macros do <b>not</b> work on the <i>text</i> of the program, they operate on the AST; they are not C macros. That&#39;s why the macro arguments take types like <code>ident</code> - those map to a grammar production."}, {"owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "edited": false, "score": 4, "creation_date": 1486585480, "post_id": 42120629, "comment_id": 71413877, "body": "I understand that they operate on the AST, but that should only limit them to producing well-formed ASTs -- they should still be able to do things like changing the types of literals."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1486577611, "creation_date": 1486577611, "answer_id": 42120629, "question_id": 42120206, "link": "https://stackoverflow.com/questions/42120206/macro-rules-macro-takes-string-literal-expands-to-both-and-b/42120629#42120629", "title": "macro_rules! macro takes string literal &quot;...&quot;, expands to both &quot;...&quot; and b&quot;...&quot;", "body": "<p>You cannot convert a literal to another type of literal; it's just not how macros work.</p>\n\n<p>You <em>can</em> convert a <code>&amp;str</code> to a <code>&amp;[u8]</code> via <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\" rel=\"nofollow noreferrer\"><code>str::as_bytes</code></a>:</p>\n\n<pre><code>fn is_alpha&lt;T&gt;(_: T) -&gt; bool { true }\n\nmacro_rules! all_s {\n    ($what: ident, $str: tt) =&gt; {{\n        assert!($what($str));\n        assert!($str.chars().all(|b| $what(b)));\n        assert!($what($str.as_bytes()));\n        assert!($str.as_bytes().iter().all(|b| $what(b)));\n    }};\n}\n\nfn main() {\n    all_s!(is_alpha, \"abcdefghijklmnopqrstuvwxyz\");\n}\n</code></pre>\n"}], "owner": {"reputation": 121127, "user_id": 388520, "user_type": "registered", "accept_rate": 51, "profile_image": "https://www.gravatar.com/avatar/dd7cc06b1b1c347e172c6ba532937173?s=128&d=identicon&r=PG", "display_name": "zwol", "link": "https://stackoverflow.com/users/388520/zwol"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5171, "favorite_count": 1, "answer_count": 2, "score": 7, "last_activity_date": 1486578507, "creation_date": 1486576205, "last_edit_date": 1486577453, "question_id": 42120206, "link": "https://stackoverflow.com/questions/42120206/macro-rules-macro-takes-string-literal-expands-to-both-and-b", "title": "macro_rules! macro takes string literal &quot;...&quot;, expands to both &quot;...&quot; and b&quot;...&quot;", "body": "<p>I would like to write a <code>macro_rules!</code> macro whose arguments are one <code>ident</code> and a list of string literals.  The expansion of the macro needs to contain both the string literals, and the corresponding <em>byte</em> literals. The macro is for tests, and will only ever be used with strings containing only characters in the U+0000 ... U+007F range.  It is OK if supplying anything other than string literals to the macro causes a compile-time error.</p>\n\n<p>If this isn't currently possible without resorting to procedural macros, just tell me so, don't bother actually writing the procedural macro ;-)</p>\n\n<p>The desired invocation and expansion is like this:</p>\n\n<pre><code>all_s! isalpha [ \"abcdefghijklmnopqrstuvwxyz\" /* , ... */ ];\n</code></pre>\n\n<p>=></p>\n\n<pre><code>assert!(isalpha(\"abcdefghijklmnopqrstuvwxyz\"));\nassert!(\"abcdefghijklmnopqrstuvwxyz\".chars().all(|b| isalpha(b));\nassert!(isalpha(b\"abcdefghijklmnopqrstuvwxyz\"));\nassert!(b\"abcdefghijklmnopqrstuvwxyz\".iter().all(|b| isalpha(b)));\n/* ... */\n</code></pre>\n\n<p>This is as far as I've gotten:</p>\n\n<pre><code>macro_rules! all_s {\n    ($what: ident, $( $str: tt ),* ) =&gt; {{\n        $(\n            assert!($what($str));\n            assert!($str.chars().all(|b| $what(b));\n            assert!($what(BYTE_LITERAL!($str)));\n            assert!(BYTE_LITERAL!($str).iter().all(|b| $what(b)));\n        )*\n    }}\n}\n</code></pre>\n\n<p>but I don't know what to put where it says <code>BYTE_LITERAL!</code>, and also I'm getting error messages that suggest that I haven't written the match pattern correctly, e.g. \"macro all_s! expects no ident argument, given 'isalpha'\" when '$what:ident' is right there.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1486574772, "post_id": 42119218, "comment_id": 71407683, "body": "The docs for CStr::from_bytes_with_nul say &quot;This function will cast the provided bytes to a CStr wrapper after ensuring that it is null terminated and does not contain any interior nul bytes.&quot;"}, {"owner": {"reputation": 566, "user_id": 4247881, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-Yc0botpVHKw/AAAAAAAAAAI/AAAAAAAAAAA/1vXyVePSuKM/photo.jpg?sz=128", "display_name": "Glenn Pierce", "link": "https://stackoverflow.com/users/4247881/glenn-pierce"}, "edited": false, "score": 0, "creation_date": 1486574975, "post_id": 42119218, "comment_id": 71407802, "body": "The accepted solution there is scanning the array for a null byte which doesn&#39;t seem optimised. It also uses unsafe which I would like to avoid. I would like to know why from_bytes_with null asserts in this case. Also how to pass in a slice instead of an array. Thanks"}, {"owner": {"reputation": 566, "user_id": 4247881, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-Yc0botpVHKw/AAAAAAAAAAI/AAAAAAAAAAA/1vXyVePSuKM/photo.jpg?sz=128", "display_name": "Glenn Pierce", "link": "https://stackoverflow.com/users/4247881/glenn-pierce"}, "edited": false, "score": 0, "creation_date": 1486575182, "post_id": 42119218, "comment_id": 71407909, "body": "I thought the function may stop after encountering the first null. As I am passing in a slice at position twelve (77) I though it may just read up to the following NULL but obviously I must be wrong."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486575458, "post_id": 42119218, "comment_id": 71408092, "body": "@GlennPierce if you disagree with or just plain dislike the answers on a duplicate question, it is recommended that you place a bounty on that question to draw more attention to it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486575667, "post_id": 42119218, "comment_id": 71408220, "body": "Also, you don&#39;t <b>need</b> <code>unsafe</code>; that&#39;s only due to the fact that OP &quot;knows&quot; it to be UTF-8. Substitute the safe variant instead."}], "owner": {"reputation": 566, "user_id": 4247881, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-Yc0botpVHKw/AAAAAAAAAAI/AAAAAAAAAAA/1vXyVePSuKM/photo.jpg?sz=128", "display_name": "Glenn Pierce", "link": "https://stackoverflow.com/users/4247881/glenn-pierce"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 216, "favorite_count": 0, "closed_date": 1486575288, "answer_count": 0, "score": 1, "last_activity_date": 1486575386, "creation_date": 1486573072, "last_edit_date": 1486575386, "question_id": 42119218, "link": "https://stackoverflow.com/questions/42119218/read-a-nul-terminated-string-in-a-byte-stream", "closed_reason": "Duplicate", "title": "Read a NUL terminated string in a byte stream", "body": "<p>I have a packet of bytes that I have read from a TCP connection:</p>\n\n<pre><code>let x = [82, 0, 0, 0, 10, 53, 46, 53, 46, 53, 48, 45, 77, 97, 114,\n         105, 97, 68, 66, 0, 235, 16, 194, 9, 65, 41, 73, 112,\n         122, 53, 53, 76, 0, 255, 247, 8, 2, 0, 15, 160, 21, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 92, 108, 41, 37, 124, 99, 93, 42,\n         84, 75, 92, 108, 0, 109, 121, 115, 113, 108, 95, 110, 97,\n         116, 105, 118, 101, 95, 112, 97, 115, 115, 119, 111, 114,\n         100, 0];\n</code></pre>\n\n<p>In there is a NUL-terminated C string:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>77, 97, 114, 105, 97, 68, 66, 0\n</code></pre>\n\n<p>How can I read that NUL terminated into a standard Rust <code>&amp;str</code> or <code>String</code>.</p>\n\n<p>At the moment I am trying something like</p>\n\n<pre><code>let cstr = CStr::from_bytes_with_nul(&amp;x[12 ..]);\nassert!(cstr.is_ok());\nprintln!(\"username {:?}\", cstr);\n</code></pre>\n\n<p>But the assert is failing. I'm sure I am missing something simple.</p>\n"}, {"tags": ["types", "rust", "introspection"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1486553083, "post_id": 42111590, "comment_id": 71392312, "body": "Maybe adding an example of how it would work can help. Would it be something like <code>TypeId::of::&lt;MyStruct::value&gt;</code>? Note that this syntax does not exist, but I think it serves as an example of what you are trying to achieve"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1486553888, "post_id": 42111590, "comment_id": 71392834, "body": "Added example to the question"}], "answers": [{"comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1486553682, "post_id": 42111851, "comment_id": 71392712, "body": "This is great! I didn&#39;t think it would be possible"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1486555466, "post_id": 42111851, "comment_id": 71393840, "body": "@aochagavia: Once you know how to write <code>offset_of</code>, the rest is easy. It&#39;s not universal though because <code>TypeId::of</code> has this annoying restriction that <code>T</code> must be <code>&#39;static</code> but I guess there&#39;s nothing <i>I</i> can do about that."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1486553236, "last_edit_date": 1495541331, "creation_date": 1486553236, "answer_id": 42111851, "question_id": 42111590, "link": "https://stackoverflow.com/questions/42111590/possible-to-access-the-typeid-of-a-struct-member/42111851#42111851", "title": "Possible to access the &#39;TypeId&#39; of a struct member?", "body": "<p>You can use type detection to deduce the <code>TypeId</code> of any field of a value you have, as long as it's <code>'static</code> (other <code>TypeId::of</code> doesn't work):</p>\n\n<pre><code>fn type_id&lt;T: 'static + ?Sized&gt;(_: &amp;T) -&gt; TypeId {\n    TypeId::of::&lt;T&gt;()\n}\n\nfn main() {\n    let m = MyStruct { value: 4 };\n    println!(\"{:?} {:?}\", TypeId::of::&lt;i64&gt;(), type_id(&amp;m.value));\n}\n</code></pre>\n\n<p>Then, leveraging the strategy in the <a href=\"https://stackoverflow.com/questions/41823321/how-to-get-pointer-offset-of-an-enum-member-in-bytes\"><code>offsetof</code></a> question you asked, you can make a macro to get it from a type without having an instance:</p>\n\n<pre><code>macro_rules! type_id_of {\n    ($t:ty, $f:ident) =&gt; {\n        {\n            fn type_of&lt;T: 'static + ?Sized&gt;(_: &amp;T) -&gt; TypeId {\n                TypeId::of::&lt;T&gt;()\n            }\n            let base: $t = unsafe { ::std::mem::uninitialized() };\n            let result = type_of(&amp;base.$f);\n            ::std::mem::forget(base);\n            result\n        }\n    }\n}\n\nfn main() {\n    println!(\"{:?} {:?}\", TypeId::of::&lt;i64&gt;(), type_id_of!(MyStruct, value));\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 588, "favorite_count": 0, "accepted_answer_id": 42111851, "answer_count": 1, "score": 3, "last_activity_date": 1486561557, "creation_date": 1486552464, "last_edit_date": 1495541331, "question_id": 42111590, "link": "https://stackoverflow.com/questions/42111590/possible-to-access-the-typeid-of-a-struct-member", "title": "Possible to access the &#39;TypeId&#39; of a struct member?", "body": "<p>Is there a way to access the <code>TypeId</code> (<code>std::any::TypeId::of::&lt;T&gt;</code>) of a struct member by name?</p>\n\n<p>If I have a basic struct:</p>\n\n<pre><code>MyStruct {\n    value: i64,\n}\n</code></pre>\n\n<p>And I only know <code>MyStruct</code> and <code>value</code>, is there a way to access <code>TypeId::of::&lt;i64&gt;</code> - where <code>i64</code> depends on the type of <code>value</code>?</p>\n\n<pre><code>main () {\n    assert_eq!(\n        TypeId::of::&lt;i64&gt;,\n        // ^^^ this works\n        type_id_of!(MyStruct, value),\n        // ^^^ this is what I'm looking for\n    );\n}\n</code></pre>\n\n<hr>\n\n<p>See related question: <a href=\"https://stackoverflow.com/questions/40573055/is-it-possible-to-access-the-type-of-a-struct-member-for-function-signatures-or\">Is it possible to access the type of a struct member for function signatures or declarations?</a></p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489259751, "post_id": 42107668, "comment_id": 72596819, "body": "If you have your own answer, you are encouraged to <b>post an answer</b> (yes, you can answer your own question). However, it needs to be complete and not just a link."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486552411, "post_id": 42109820, "comment_id": 71391839, "body": "It&#39;s interesting. This is like encoding a state-machine piecemeal in the future: each time you return a future it gives the &quot;next action&quot; to be taken, which can be to attempt to connect, attempt to reconnect, send a message, wait for a reply, ..."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486552734, "post_id": 42109820, "comment_id": 71392072, "body": "I learned this the hard way using Boost.Asio in C++. You need to be very careful to avoid dangling pointers, since the closures usually outlive their environment... Anyway, it is a pattern that seems very weird at first, if you are used to writing sequential code."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1486555170, "post_id": 42109820, "comment_id": 71393659, "body": "It might be worth noting that the <i>recursion</i> here this isn&#39;t recursion in the classic sense of the function calling itself, thus accumulating stack frames. The &quot;recursive&quot; call to <code>get_connection</code> is inside the closure that will be executed only later, after <code>get_connection</code> has exited."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1486561791, "post_id": 42109820, "comment_id": 71398317, "body": "@user4815162342 in other contexts, this is usually referred to as a <a href=\"https://en.wikipedia.org/wiki/Trampoline_(computing)#High-level_programming\" rel=\"nofollow noreferrer\">trampoline</a>."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 2, "creation_date": 1486568095, "post_id": 42109820, "comment_id": 71403001, "body": "@user4815162342 Just added a comment to clarify :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486594778, "post_id": 42109820, "comment_id": 71418566, "body": "Some <a href=\"https://gitter.im/tokio-rs/tokio?at=589b968ade50490822a3b9bc\" rel=\"nofollow noreferrer\">discussion in the Tokio gitter</a> suggests that while this doesn&#39;t accumulate stack frames, it does have unbounded memory usage. I don&#39;t know one way or the other; just relaying the message ^_^."}, {"owner": {"reputation": 293, "user_id": 5914783, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206866191308280/picture?type=large", "display_name": "Danilo Silva", "link": "https://stackoverflow.com/users/5914783/danilo-silva"}, "edited": false, "score": 0, "creation_date": 1487077450, "post_id": 42109820, "comment_id": 71613276, "body": "the sample with the using of <code>loop_fn</code> doesn&#39;t work, but thanks (again) for the suggestion, I will try to make it working"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1487084075, "post_id": 42109820, "comment_id": 71617897, "body": "what is the concrete problem?"}, {"owner": {"reputation": 293, "user_id": 5914783, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206866191308280/picture?type=large", "display_name": "Danilo Silva", "link": "https://stackoverflow.com/users/5914783/danilo-silva"}, "edited": false, "score": 0, "creation_date": 1487086062, "post_id": 42109820, "comment_id": 71619426, "body": "it does not loop infinitely :) if the server is not listening the program exit if the server is listening, the client start connection to it, but when I stop the server the program exit without retrying (p.s. I have removed the panic from the get_connection function)"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1487100716, "post_id": 42109820, "comment_id": 71628750, "body": "That sounds pretty strange. Please post here if you figure out what the problem was, so I can update my answer"}, {"owner": {"reputation": 293, "user_id": 5914783, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206866191308280/picture?type=large", "display_name": "Danilo Silva", "link": "https://stackoverflow.com/users/5914783/danilo-silva"}, "edited": false, "score": 0, "creation_date": 1487102184, "post_id": 42109820, "comment_id": 71629583, "body": "sorry, my fault (obviously :))   I had removed the <code>panic!()</code> but I put a return of an <code>Err</code> instead, and it doesn&#39;t works because the <code>Loop::Continue(())</code> is returned only when <code>get_connection</code> doesn&#39;t returns an error. Trying to add the <code>map_err</code> to the <code>get_connection(..)</code> doesn&#39;t works again;  finally I map errors to an Ok(())  in the <code>get_connection</code> method with an <code>let client = client.or_else(|_| Ok(()));</code>  Thank you so much!"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 19, "last_activity_date": 1486631872, "last_edit_date": 1486631872, "creation_date": 1486547692, "answer_id": 42109820, "question_id": 42107668, "link": "https://stackoverflow.com/questions/42107668/asynchronously-reconnecting-a-client-to-a-server-in-an-infinite-loop/42109820#42109820", "title": "Asynchronously reconnecting a client to a server in an infinite loop", "body": "<p>The key question seems to be: <em>how do I implement an infinite loop using Tokio</em>? By answering this question, we can tackle the problem of reconnecting infinitely upon disconnection. <s>From my experience writing asynchronous code, recursion seems to be a straightforward solution to this problem.</s></p>\n\n<p><strong>UPDATE</strong>: as pointed out by Shepmaster (and the folks of the Tokio Gitter), my original answer leaks memory since we build a chain of futures that grows on each iteration. Here follows a new one:</p>\n\n<h1>Updated answer: use <code>loop_fn</code></h1>\n\n<p>There is a function in the <code>futures</code> crate that does exactly what you need. It is called <a href=\"https://docs.rs/futures/0.1.10/futures/future/fn.loop_fn.html\" rel=\"noreferrer\"><code>loop_fn</code></a>. You can use it by changing your main function to the following:</p>\n\n<pre><code>fn main() {\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n    let client = future::loop_fn((), |_| {\n        // Run the get_connection function and loop again regardless of its result\n        get_connection(&amp;handle).map(|_| -&gt; Loop&lt;(), ()&gt; {\n            Loop::Continue(())\n        })\n    });\n\n    core.run(client).unwrap();\n}\n</code></pre>\n\n<p>The function resembles a for loop, which can continue or break depending on the result of <code>get_connection</code> (see the documentation for the <a href=\"https://docs.rs/futures/0.1.10/futures/future/enum.Loop.html\" rel=\"noreferrer\"><code>Loop</code></a> enum). In this case, we choose to always continue, so it will infinitely keep reconnecting.</p>\n\n<p>Note that your version of <code>get_connection</code> will panic if there is an error (e.g. if the client cannot connect to the server). If you also want to retry after an error, you should remove the call to <code>panic!</code>.</p>\n\n<hr>\n\n<h1>Old answer: use recursion</h1>\n\n<p>Here follows my old answer, in case anyone finds it interesting.</p>\n\n<p><strong>WARNING</strong>: using the code below results in unbounded memory growth.</p>\n\n<h2>Making <code>get_connection</code> loop infinitely</h2>\n\n<p>We want to call the <code>get_connection</code> function each time the client is disconnected, so that is exactly what we are going to do (look at the comment after <code>reader.and_then</code>):</p>\n\n<pre><code>fn get_connection(handle: &amp;Handle) -&gt; Box&lt;Future&lt;Item = (), Error = io::Error&gt;&gt; {\n    let remote_addr = \"127.0.0.1:9876\".parse().unwrap();\n    let tcp = TcpStream::connect(&amp;remote_addr, handle);\n    let handle_clone = handle.clone();\n\n    let client = tcp.and_then(|stream| {\n        let (sink, from_server) = stream.framed(LineCodec).split();\n        let reader = from_server.for_each(|message| {\n            println!(\"{}\", message);\n            Ok(())\n        });\n\n        reader.and_then(move |_| {\n            println!(\"CLIENT DISCONNECTED\");\n            // Attempt to reconnect in the future\n            get_connection(&amp;handle_clone)\n        })\n    });\n\n    let client = client.map_err(|_| { panic!()});\n    Box::new(client)\n}\n</code></pre>\n\n<p>Remember that <code>get_connection</code> is non-blocking. It just constructs a <code>Box&lt;Future&gt;</code>. This means that when calling it recursively, we still don't block. Instead, we get a new future, which we can link to the previous one by using <code>and_then</code>. As you can see, this is different to normal recursion since the stack doesn't grow on each iteration.</p>\n\n<p>Note that we need to clone the <code>handle</code> (see <code>handle_clone</code>), and move it into the closure passed to <code>reader.and_then</code>. This is necessary because the closure is going to live longer than the function (it will be contained in the future we are returning).</p>\n\n<h2>Handling errors</h2>\n\n<p>The code you provided doesn't handle the case in which the client is unable to connect to the server (nor any other errors). Following the same principle shown above, we can handle errors by changing the end of <code>get_connection</code> to the following:</p>\n\n<pre><code>let handle_clone = handle.clone();\nlet client = client.or_else(move |err| {\n    // Note: this code will infinitely retry, but you could pattern match on the error\n    // to retry only on certain kinds of error\n    println!(\"Error connecting to server: {}\", err);\n    get_connection(&amp;handle_clone)\n});\nBox::new(client)\n</code></pre>\n\n<p>Note that <code>or_else</code> is like <code>and_then</code>, but it operates on the error produced by the future.</p>\n\n<h2>Removing unnecessary code from <code>main</code></h2>\n\n<p>Finally, it is not necessary to use <code>and_then</code> in the <code>main</code> function. You can replace your <code>main</code> by the following code:</p>\n\n<pre><code>fn main() {\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n    let client = get_connection(&amp;handle);\n    core.run(client).unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 293, "user_id": 5914783, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206866191308280/picture?type=large", "display_name": "Danilo Silva", "link": "https://stackoverflow.com/users/5914783/danilo-silva"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3467, "favorite_count": 7, "accepted_answer_id": 42109820, "answer_count": 1, "score": 24, "last_activity_date": 1489259708, "creation_date": 1486541028, "last_edit_date": 1489259708, "question_id": 42107668, "link": "https://stackoverflow.com/questions/42107668/asynchronously-reconnecting-a-client-to-a-server-in-an-infinite-loop", "title": "Asynchronously reconnecting a client to a server in an infinite loop", "body": "<p>I'm not able to create a client that tries to connect to a server and: </p>\n\n<ul>\n<li>if the server is down it has to try again in an infinite loop</li>\n<li>if the server is up and connection is successful, when the connection is lost (i.e. server disconnects the client) the client has to restart the infinite loop to try to connect to the server</li>\n</ul>\n\n<p>Here's the code to connect to a server; currently when the connection is lost the program exits. I'm not sure what the best way to implement it is; maybe I have to create a <code>Future</code> with an infinite loop? </p>\n\n<pre><code>extern crate tokio_line;\nuse tokio_line::LineCodec;\n\nfn get_connection(handle: &amp;Handle) -&gt; Box&lt;Future&lt;Item = (), Error = io::Error&gt;&gt; {                                                                                                                                   \n    let remote_addr = \"127.0.0.1:9876\".parse().unwrap();                                                                                                                                                            \n    let tcp = TcpStream::connect(&amp;remote_addr, handle);                                                                                                                                                             \n\n    let client = tcp.and_then(|stream| {                                                                                                                                                                            \n        let (sink, from_server) = stream.framed(LineCodec).split();                                                                                                                                                 \n        let reader = from_server.for_each(|message| {                                                                                                                                                               \n            println!(\"{}\", message);                                                                                                                                                                                \n            Ok(())                                                                                                                                                                                                  \n        });                                                                                                                                                                                                         \n\n        reader.map(|_| {                                                                                                                                                                                            \n            println!(\"CLIENT DISCONNECTED\");                                                                                                                                                                        \n            ()                                                                                                                                                                                                      \n        }).map_err(|err| err)                                                                                                                                                                                       \n    });                                                                                                                                                                                                             \n\n    let client = client.map_err(|_| { panic!()});                                                                                                                                                                   \n    Box::new(client)                                                                                                                                                                                                \n}                                                                                                                                                                                                                   \n\nfn main() {                                                                                                                                                                                                         \n    let mut core = Core::new().unwrap();                                                                                                                                                                            \n    let handle = core.handle();                                                                                                                                                                                     \n    let client = get_connection(&amp;handle);                                                                                                                                                                           \n\n    let client = client.and_then(|c| {                                                                                                                                                                              \n        println!(\"Try to reconnect\");                                                                                                                                                                               \n        get_connection(&amp;handle);                                                                                                                                                                                    \n        Ok(())                                                                                                                                                                                                      \n    });                                                                                                                                                                                                             \n\n    core.run(client).unwrap();                                                                                                                                                                                      \n}\n</code></pre>\n\n<p>Add the tokio-line crate with: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>tokio-line = { git = \"https://github.com/tokio-rs/tokio-line\" }\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 4, "last_activity_date": 1486546115, "creation_date": 1486546115, "answer_id": 42109253, "question_id": 42107104, "link": "https://stackoverflow.com/questions/42107104/how-to-pass-a-macro-containing-multiple-items-into-a-macro/42109253#42109253", "title": "How to pass a macro containing multiple items into a macro?", "body": "<p>From looking into this, it seems that its not possible to expand a list inside a macro using a macro or <code>include</code>.</p>\n\n<p>Although code-generation is an option, its quite involved so will leave it out of this answer.</p>\n\n<p>It is possible to get similar functionality by swapping macro use around, instead of passing the list into a macro, pass a macro name into a generic macro that expand it with a list.</p>\n\n<p>Heres a working example:</p>\n\n<pre><code>macro_rules! print_structs {\n    ($($t:ty)*) =&gt; ($(\n        println!(\"{:?}\", ::std::any::TypeId::of::&lt;$t&gt;());\n    )*)\n}\n\nmacro_rules! apply_macro_to_structs {\n    ($macro_id:ident) =&gt; {\n        $macro_id! {\n            i8 i16 usize String\n        }\n    }\n}\n\nfn test_a() {\n    // expands one println per type!\n    print_structs! { i8 i16 usize String }\n}\n\nfn test_b() {\n    // expand using a macro\n    apply_macro_to_structs!(print_structs);\n\n}\n\nfn main() {\n    test_a();\n    test_b();\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 448, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1486598019, "creation_date": 1486538861, "last_edit_date": 1486598019, "question_id": 42107104, "link": "https://stackoverflow.com/questions/42107104/how-to-pass-a-macro-containing-multiple-items-into-a-macro", "title": "How to pass a macro containing multiple items into a macro?", "body": "<p>Given this simple macro that expands multiple items, how could this take a macro as an argument?</p>\n\n<pre><code>macro_rules! print_structs {\n    ($($t:ty)*) =&gt; ($(\n        println!(\"{:?}\", TypeId::of::&lt;$t&gt;());\n    )*)\n}\n\n// expands one println per type!\nprint_structs! { i8 i16 usize String }\n</code></pre>\n\n<p>How could a pre-defined macro of types be passed in?</p>\n\n<p>Example of non-working macro:</p>\n\n<pre><code>macro_rules! some_types {\n    () =&gt; {\n        i8 i16 usize String\n    }\n}\n\nprint_structs! { some_types!() }\n</code></pre>\n\n<p>See <a href=\"https://play.rust-lang.org/?gist=b0d849097a7ae94560f055a6bc6b6cec&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org</a> example, uncomment <code>UNCOMMENT TO TEST</code> lines to see the problem. </p>\n\n<p>Gives the error: <code>macro expansion ignores token `i16` and any following</code></p>\n\n<hr>\n\n<p>I also tried to put the list in a file to include, eg:</p>\n\n<pre><code>print_structs! {\n    include!(\"some_types.in\")\n}\n</code></pre>\n\n<p>... however this gives an error: <code>expected type, found `include!(\"../struct_list.rs\")`</code></p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "edited": false, "score": 0, "creation_date": 1486547490, "post_id": 42108651, "comment_id": 71388398, "body": "I read about the second way but I could not get that working. Thank you for the example. But in short this means that I cannot store a method function callback, right? Or is there a way to get the boxed function copied/cloned? What I really want is to store a callback which gets the object reference and some arguments passed when being called from a method..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "edited": false, "score": 0, "creation_date": 1486550500, "post_id": 42108651, "comment_id": 71390481, "body": "@user2525536: Storing an instance to self in self is a cyclic reference, which is not allowed. It&#39;s also useless since you can just pass <code>&amp;self</code>/<code>&amp;mut self</code> as a parameter like I do in the last example (though it&#39;s a bit involved). And no, you cannot (today) clone arbitrary closures. They don&#39;t know how to clone themselves."}, {"owner": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "edited": false, "score": 0, "creation_date": 1486566835, "post_id": 42108651, "comment_id": 71402131, "body": "There is no point at which I would store an instance to self in self, as this is only passed as parameter and not stored anywhere. I was hoping to store the callback and call it with a reference to the instance of self without modifying self for this but as long as the callback remains uncloneable and a reborrowing does not work I will stick to the solution provided."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "edited": false, "score": 0, "creation_date": 1486567667, "post_id": 42108651, "comment_id": 71402713, "body": "@user2525536: Note that if the callback took <code>self</code> by <i>immutable</i> reference, it would be possible to avoid the &quot;dance&quot;. The issue otherwise is that you could, in the callback, overwrite the <code>self.func</code> field whilst you are holding a reference pointing into it. This would be... BAD. Another solution would be to split your struct in two: the callback in its field, and everything else in another private &quot;substruct&quot;. This way you can pass a mutable reference to the substruct, as done with <code>i32</code>."}, {"owner": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "edited": false, "score": 0, "creation_date": 1486569078, "post_id": 42108651, "comment_id": 71403721, "body": "But doesn&#39;t this also means that I am not able to call any method with a <i>mutable</i> reference to <code>self</code> within <code>exec</code> as this could invalidate existing references? So even if the boxed function object would be cloneable I would be still stuck at the same issue..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "edited": false, "score": 0, "creation_date": 1486569182, "post_id": 42108651, "comment_id": 71403806, "body": "@user2525536: Not whilst <code>f</code> is borrowed (during the <code>if</code> block), before and after you can."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1486544365, "creation_date": 1486544365, "answer_id": 42108651, "question_id": 42106118, "link": "https://stackoverflow.com/questions/42106118/reference-lifetime-conflicts-with-same-lifetime-range/42108651#42108651", "title": "Reference lifetime conflicts with same lifetime range", "body": "<p>You have a borrow issue here:</p>\n\n<ol>\n<li>You are borrowing <code>self.func</code> immutably</li>\n<li>You are attempting to borrow <code>self</code> mutably at the same time</li>\n</ol>\n\n<p>This is not allowed, because it could allow you to change <code>func</code> while using it, which heralds troubles.</p>\n\n<hr>\n\n<p>You could attempt to change <code>Callback</code> to only pass in <code>&amp;mut i32</code> instead, but then you would hit lifetime unification issues:</p>\n\n<ul>\n<li>if you specify that <code>exec</code> takes <code>&amp;'a mut self</code>, then you <em>anchor</em> the object, borrowing it for the rest of its lifetime,</li>\n<li>on the other hand, if you specify a fresh lifetime, then by definition it's <em>less</em> than <code>'a</code>, and you required <code>'a</code> in the signature of <code>Callback</code>.</li>\n</ul>\n\n<p>Neither situation works.</p>\n\n<hr>\n\n<p>The solution, thus, is to avoid the lifetime in the first place.</p>\n\n<p>It's also easier (on borrowing) NOT to pass an instance of <code>self</code> but just to pass a reference to <code>self.val</code> so I present that first:</p>\n\n<pre><code>type Callback = Fn(&amp;mut i32, i32) -&gt; i32;\n\nstruct Func {\n    val: i32,\n    func: Option&lt;Box&lt;Callback&gt;&gt;,\n}\n\nimpl Func {\n    fn exec(&amp;mut self, val: i32) -&gt; i32 {\n        if let Some(ref f) = self.func {\n            return f(&amp;mut self.val, val);\n        };\n        0i32\n    }\n}\n\nfn main() {\n    let mut a32 = Func{\n        val: 10i32,\n        func: Some(Box::new(|s: &amp;mut i32, val: i32| -&gt; i32 {\n            let v = *s;\n            *s += 1;\n            val * 32 + v\n        }))\n    };\n    println!(\"a32(4) = {}\", a32.exec(4i32));\n    println!(\"a32(4) = {}\", a32.exec(4i32));\n}\n</code></pre>\n\n<p>If you want to really pass <code>Func</code>, you need to \"option dance\":</p>\n\n<pre><code>impl Func {\n    fn exec(&amp;mut self, val: i32) -&gt; i32 {\n        let func = self.func.take();\n        let res = if let Some(ref f) = func {\n            f(self, val)\n        } else {\n            0i32\n        };\n        self.func = func;\n        res\n    }\n}\n</code></pre>\n\n<p>And be aware that <code>self.func</code> is empty in the callback.</p>\n"}], "owner": {"reputation": 246, "user_id": 2525536, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/030c2fbb4d320d91381ecf066c01e8eb?s=128&d=identicon&r=PG", "display_name": "user2525536", "link": "https://stackoverflow.com/users/2525536/user2525536"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 188, "favorite_count": 0, "accepted_answer_id": 42108651, "answer_count": 1, "score": 3, "last_activity_date": 1486544365, "creation_date": 1486535159, "last_edit_date": 1486541924, "question_id": 42106118, "link": "https://stackoverflow.com/questions/42106118/reference-lifetime-conflicts-with-same-lifetime-range", "title": "Reference lifetime conflicts with same lifetime range", "body": "<p>I am trying to store and use an optional callback handle in Rust which works like a method to the structure I am storing it in. It works as long as I do not pass a reference to itself to the callback. But doing so gives me a lifetime error for the used object references (E0312). The lifetime seems to be the same and I cannot figure out what to change to get this working.</p>\n\n<pre><code>type Callback&lt;'a&gt; = Fn(&amp;'a mut Func, i32) -&gt; i32;\n\nstruct Func&lt;'a&gt; {\n    val: i32,\n    func: Option&lt;Box&lt;Callback&lt;'a&gt;&gt;&gt;,\n}\n\nimpl&lt;'a, 'b&gt; Func&lt;'b&gt; {\n    fn exec(&amp;'a mut self, val: i32) -&gt; i32 {\n        if let Some(ref f) = self.func {\n            return f(self, val);\n        };\n        0i32\n    }\n}\n\nfn main() {\n    let mut a32 = Func{\n        val: 10i32,\n        func: Some(Box::new(|ref mut s, val: i32| -&gt; i32 {\n            let v = s.val;\n            s.val += 1;\n            val * 32 + v\n        }))\n    };\n    println!(\"a32(4) = {}\", a32.exec(4i32));\n    println!(\"a32(4) = {}\", a32.exec(4i32));\n}\n</code></pre>\n\n<p>Is there a way to fix this or did I come across a compiler bug?  </p>\n\n<p>Using rustc 1.15.0 (10893a9a3 2017-01-19). </p>\n\n<p>See also on Rust <a href=\"https://play.rust-lang.org/?gist=2a66419d925492dba20764ef97c0e474&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\" title=\"playground\">playground</a>.  </p>\n\n<p>I also tried the same without explicit lifetimes but then I run into the problem that I cannot alias references in Rust (E0502).  </p>\n\n<p>I know that Rust tries to prevent this to avoid data races but would this mean that I always need to create a copy of my object in these cases?<br>\nThe following does not work either giving me an error, that borrowed content cannot be moved out (E0507).</p>\n\n<pre><code>impl Func {\n    fn exec(&amp;mut self, val: i32) -&gt; i32 {\n        if self.func.is_some() {\n            return self.func.unwrap()(self, val);\n        };\n        0i32\n    }\n}\n</code></pre>\n\n<p>But I could not find a way to clone the boxed function...</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486541370, "post_id": 42105580, "comment_id": 71384436, "body": "I suppose that you are invoking those methods from macros? Because that&#39;s the only way to have polymorphism without traits."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486545926, "post_id": 42105580, "comment_id": 71387167, "body": "Yes, from macros or just in regular code, where its convenient from a user-pov to know there is consistency in the API even though its not necessarily required."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486533506, "post_id": 42105649, "comment_id": 71380741, "body": "Turns out there is an <code>RFC</code> for this: <a href=\"https://github.com/rust-lang/rfcs/issues/1880\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1880</a> - worth adding to answer?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1486533613, "post_id": 42105649, "comment_id": 71380778, "body": "That&#39;s not an RFC; it&#39;s an issue on the tracker. I don&#39;t think it&#39;s worth changing the answer until it&#39;s actually in the language, rather than a random idea proposed."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486534653, "post_id": 42105649, "comment_id": 71381170, "body": "Ah right, even so - anyone stumbling on this page may be interested to know Rust developers are aware of this and the suggestion has been made - I&#39;ve linked to it in the question."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486544925, "post_id": 42105649, "comment_id": 71386493, "body": "It would also seem like a bad idea.  What if another trait somewhere else also provided <code>calc_value</code>?  At some point you have to explicitly say which trait is involved."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486546017, "post_id": 42105649, "comment_id": 71387228, "body": "@ChrisEmerson: Making common things easy and rare things possible is a great UI principle; it means that you could say that if <code>calc_value</code> is defined by an impl in the same module as the current trait, it&#39;s automatically picked up, unless there&#39;s a conflict in which case the user has to specify the intent."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486546353, "post_id": 42105649, "comment_id": 71387458, "body": "@MatthieuM. True, and maybe that&#39;s fine as long as it&#39;s local like that.  Personally I think there&#39;s a risk that special-cased conveniences like that can accumulate and interact into hard to understand behaviour."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486546664, "post_id": 42105649, "comment_id": 71387732, "body": "@ChrisEmerson: It&#39;s definitely a risk. It increases the number of rules to remember (eating at the complexity budget). It&#39;s also backward incompatible."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 7, "last_activity_date": 1486533016, "creation_date": 1486533016, "answer_id": 42105649, "question_id": 42105580, "link": "https://stackoverflow.com/questions/42105580/how-to-ensure-structs-implement-functions-consistently-without-callers-having-t/42105649#42105649", "title": "How to ensure structs implement functions consistently, without callers having to explicitly &#39;use&#39; the trait?", "body": "<blockquote>\n  <p>Is there some way to define a trait that can be used without having to ensure its in the name-space?</p>\n</blockquote>\n\n<p>In short, no. To use a trait, you must import it. Without a trait, you can't ensure that the signatures are the same.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 336, "favorite_count": 0, "accepted_answer_id": 42105649, "answer_count": 1, "score": 2, "last_activity_date": 1486561356, "creation_date": 1486532696, "last_edit_date": 1486561356, "question_id": 42105580, "link": "https://stackoverflow.com/questions/42105580/how-to-ensure-structs-implement-functions-consistently-without-callers-having-t", "title": "How to ensure structs implement functions consistently, without callers having to explicitly &#39;use&#39; the trait?", "body": "<p>Given multiple similar structs, it may be useful to implement functions matching a signature.</p>\n\n<p>The simple example below works nicely, but doesn't ensure all functions follow the same function signature.</p>\n\n<pre><code>impl FooStruct {\n    pub fn calc_value(seed: i64) -&gt; i64 { /* function body! */ }\n}\nimpl BarStruct {\n    pub fn calc_value(seed: i64) -&gt; i64 { /* function body! */ }\n}\n</code></pre>\n\n<p>Using a trait resolves this:</p>\n\n<pre><code>pub trait CanCalcValue {\n    fn calc_value(seed: i64) -&gt; i64;        \n}\n\nimpl CanCalcValue for FooStruct {\n    fn calc_value(seed: i64) -&gt; i64 { /* function body! */ }\n}\nimpl CanCalcValue for BarStruct {\n    fn calc_value(seed: i64) -&gt; i64 { /* function body! */ }\n}\n</code></pre>\n\n<p>However, now I have to add <code>use some_module::CanCalcValue;</code> everywhere I wan't to call <code>calc_value</code>.</p>\n\n<p>Is there some way to define a trait that can be used without having to ensure it's in the namespace?</p>\n\n<p>Said differently, there are times when logically a trait makes sense in that multiple structs share a signature, but I avoid using it because it becomes annoying to have to <code>use</code> the trait all over the codebase.</p>\n\n<hr>\n\n<p><strong>Note:</strong> there is discussion on this topic in the <a href=\"https://github.com/rust-lang/rfcs/issues/1880\" rel=\"nofollow noreferrer\">RFC issue tracker</a>, although no RFC currently.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1486544751, "creation_date": 1486544751, "answer_id": 42108781, "question_id": 42104247, "link": "https://stackoverflow.com/questions/42104247/possible-to-apply-constraints-on-identifiers-passed-into-a-macro/42108781#42108781", "title": "Possible to apply constraints on identifiers passed into a macro?", "body": "<p>No, but you can make it easier to spot mistakes by adding structure to the macro instead of just passing comma-separated names:</p>\n\n<pre><code>macro_rules! my_macro {\n    // Note: parameter must be in the right order; they're not general\n    // keyword arguments.\n    ($name:ident, set=$set:ident, get=$get:ident, toggle=$toggle:ident)\n    =&gt;\n    (\n        {}\n    )\n}\n\nfn main() {\n    // Correct usage\n    my_macro!(foo, set=my_set, get=my_get, toggle=my_toggle);\n    // Not right, but easier to spot with the keyword argument-style usage.\n    my_macro!(foo, set=my_set, get=my_toggle, toggle=my_get);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=92b3c68ba4e62905bec9fc28eb771d1f&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n\n<p>I've used something that looks like keyword arguments, but you could invent things with some operators like <code>my_macro!(foo, =my_set, *my_get, !my_toggle)</code> if that worked better for you.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 42108781, "answer_count": 1, "score": 4, "last_activity_date": 1486561483, "creation_date": 1486525077, "last_edit_date": 1486561483, "question_id": 42104247, "link": "https://stackoverflow.com/questions/42104247/possible-to-apply-constraints-on-identifiers-passed-into-a-macro", "title": "Possible to apply constraints on identifiers passed into a macro?", "body": "<p>Since Rust doesn't yet support <a href=\"https://doc.rust-lang.org/stable/std/macro.concat_idents.html\" rel=\"nofollow noreferrer\"><code>concat_idents</code></a> in stable, it may be necessary to pass in multiple similar identifiers as arguments.</p>\n\n<p>This allows for accidentally passing in the wrong positional arguments.</p>\n\n<p>Is there a way to check the identifiers match some basic rules such as \"contains text\", \"starts with\", \"ends with\", etc.</p>\n\n<pre><code>struct_bitflag_flag_fn_impl!(\n    MyStructType, my_struct_flag::SELECT,\n    select_test, select_set, select_clear, select_set_bool, select_toggle);\nstruct_bitflag_flag_fn_impl!(\n    MyStructType, my_struct_flag::HIDDEN,\n    hidden_test, hidden_set, hidden_clear, hidden_toggle, hidden_set_bool);\n\n//  Humans make mistakes, how to prevent?     -&gt;  ^^^^^^         ^^^^^^^^\n//  (arguments may be transposed by accident)\n</code></pre>\n"}, {"tags": ["iterator", "rust", "type-inference"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1486513552, "post_id": 42102513, "comment_id": 71375161, "body": "Damn, got about 2/3rd of the way through writing mine up."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1486514163, "post_id": 42102513, "comment_id": 71375336, "body": "@DK. maybe you&#39;ve got a better / different / more understandable explanation?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1486514468, "post_id": 42102513, "comment_id": 71375415, "body": "Nah, it was more or less the same thing, written in reverse order."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1486513427, "creation_date": 1486513427, "answer_id": 42102513, "question_id": 42102270, "link": "https://stackoverflow.com/questions/42102270/why-are-the-strings-in-my-iterator-being-concatenated/42102513#42102513", "title": "Why are the strings in my iterator being concatenated?", "body": "<p>A simpler reproduction:</p>\n\n<pre><code>use std::collections::HashSet;\nuse std::iter::FromIterator;\n\nfn stopword_set() -&gt; Result&lt;HashSet&lt;String&gt;, u8&gt; {\n    let input: Vec&lt;Result&lt;_, u8&gt;&gt; = vec![Ok(\"foo\".to_string()), Ok(\"bar\".to_string())];\n    let words = Result::from_iter(input.into_iter());\n    Ok(HashSet::from_iter(words))\n}\n\nfn main() {\n    let set = stopword_set().unwrap();\n    println!(\"{:?}\", set);\n    assert_eq!(set.len(), 2);\n}\n</code></pre>\n\n<p>The problem is that here, we are collecting from the iterator twice. The type of <code>words</code> is <code>Result&lt;_, u8&gt;</code>. However, <code>Result</code> <em>also</em> implements <code>Iterator</code> itself, so when we call <code>from_iter</code> on that at the end, the compiler sees that the <code>Ok</code> type must be <code>String</code> due to the method signature. Working backwards, you can construct a <code>String</code> from an iterator of <code>Strings</code>, so that's what the compiler picks.</p>\n\n<p>Removing the second <code>from_iter</code> would solve it:</p>\n\n<pre><code>fn stopword_set() -&gt; Result&lt;HashSet&lt;String&gt;, u8&gt; {\n    let input: Vec&lt;Result&lt;_, u8&gt;&gt; = vec![Ok(\"foo\".to_string()), Ok(\"bar\".to_string())];\n    Result::from_iter(input.into_iter())\n}\n</code></pre>\n\n<p>Or for your original:</p>\n\n<pre><code>fn stopword_set() -&gt; io::Result&lt;HashSet&lt;String&gt;&gt; {\n    Result::from_iter(\n        BufReader::new(File::open(\"stopwords.txt\")?)\n                .lines()\n                .filter(|r| match r {\n                    &amp;Ok(ref l) =&gt; !l.starts_with('#'),\n                    _ =&gt; true\n                }))\n}\n</code></pre>\n\n<hr>\n\n<p>Of course, I'd normally recommend using <code>collect</code> instead, as I prefer the chaining:</p>\n\n<pre><code>fn stopword_set() -&gt; io::Result&lt;HashSet&lt;String&gt;&gt; {\n    BufReader::new(File::open(\"stopwords.txt\")?)\n        .lines()\n        .filter(|r| match r {\n            &amp;Ok(ref l) =&gt; !l.starts_with('#'),\n            _ =&gt; true,\n        })\n        .collect()\n}\n</code></pre>\n"}], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 97, "favorite_count": 0, "accepted_answer_id": 42102513, "answer_count": 1, "score": 8, "last_activity_date": 1486513427, "creation_date": 1486511920, "last_edit_date": 1486512516, "question_id": 42102270, "link": "https://stackoverflow.com/questions/42102270/why-are-the-strings-in-my-iterator-being-concatenated", "title": "Why are the strings in my iterator being concatenated?", "body": "<p>My original goal is to fetch a list of words, one on each line, and to put them in a <code>HashSet</code>, while discarding comment lines and raising I/O errors properly. Given the file \"stopwords.txt\":</p>\n\n<pre><code>a\n# this is actually a comment\nof\nthe\nthis\n</code></pre>\n\n<p>I managed to make the code compile like this:</p>\n\n<pre><code>fn stopword_set() -&gt; io::Result&lt;HashSet&lt;String&gt;&gt; {\n    let words = Result::from_iter(\n        BufReader::new(File::open(\"stopwords.txt\")?)\n                .lines()\n                .filter(|r| match r {\n                    &amp;Ok(ref l) =&gt; !l.starts_with('#'),\n                    _ =&gt; true\n                }));\n    Ok(HashSet::from_iter(words))\n}\n\nfn main() {\n    let set = stopword_set().unwrap();\n    println!(\"{:?}\", set);\n    assert_eq!(set.len(), 4);\n}\n</code></pre>\n\n<p>Here's a <a href=\"https://play.rust-lang.org/?gist=41b23fab7d3336f239862d33aefbffb1&amp;version=stable&amp;backtrace=0\">playground</a> that also creates the file above.</p>\n\n<p>I would expect to have a set of 4 strings at the end of the program. To my surprise, the function actually returns a set containing a single string with all words concatenated:</p>\n\n<pre><code>{\"aofthethis\"}\nthread 'main' panicked at 'assertion failed: `(left == right)` (left: `1`, right: `4`)'\n</code></pre>\n\n<p>Led by a piece of advice in the docs for <a href=\"https://doc.rust-lang.org/std/iter/trait.FromIterator.html\"><code>FromIterator</code></a>, I got rid of all calls to <code>from_iter</code> and used <code>collect</code> instead (<a href=\"https://play.rust-lang.org/?gist=b00e617dd0c52832af99f6967cd0835b&amp;version=stable&amp;backtrace=0\">Playground</a>), which has indeed solved the problem.</p>\n\n<pre><code>fn stopword_set() -&gt; io::Result&lt;HashSet&lt;String&gt;&gt; {\n    BufReader::new(File::open(\"stopwords.txt\")?)\n            .lines()\n            .filter(|r| match r {\n                &amp;Ok(ref l) =&gt; !l.starts_with('#'),\n                _ =&gt; true\n            }).collect()\n}\n</code></pre>\n\n<p>Why are the previous calls to <code>from_iter</code> leading to unexpected inferences, while <code>collect()</code> works just as intended?</p>\n"}, {"tags": ["rust", "io-redirection"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 3, "creation_date": 1486510666, "post_id": 42101920, "comment_id": 71374268, "body": "Briefly looking at the API I&#39;d say this is not possible. Perhaps an issue should be raised for this where the <code>stdout</code> method could accept a <code>Writer</code> instance instead?"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1486517828, "creation_date": 1486517828, "answer_id": 42103184, "question_id": 42101920, "link": "https://stackoverflow.com/questions/42101920/how-to-redirect-child-process-output-to-stderr/42103184#42103184", "title": "How to redirect child process output to stderr?", "body": "<p>As of Rust 1.15.0, <code>Stdio</code> doesn't expose this functionality in a portable API, but there are platform-specific extension traits that you can use for this purpose.</p>\n\n<p>On Unix-like platforms, <a href=\"https://doc.rust-lang.org/std/process/struct.Stdio.html#implementations\">the <code>std::os::unix::io::FromRawFd</code> trait is implemented on <code>Stdio</code></a>. This trait provides a single method, <code>from_raw_fd</code>, that can turn a file descriptor into the type that implements the trait. Since standard error is defined as file descriptor 2, you could simply use <code>.stdout(Stdio::from_raw_fd(2))</code>.</p>\n\n<p>On Windows, <a href=\"https://github.com/rust-lang/rust/blob/a797b6e2feb1c6cd60868a2d3b59029a0ca5df64/src/libstd/sys/windows/ext/process.rs#L20-L27\">there's a similar trait called <code>FromRawHandle</code> implemented on <code>Stdio</code></a>. Unfortunately, it's not listed in the online documentation; it only contains the Unix-specific variants. You would call <code>GetStdHandle(STD_ERROR_HANDLE)</code> to obtain a handle to the standard error.</p>\n"}], "owner": {"reputation": 345, "user_id": 7531353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57f473941e4e084bbf4e68c737457af6?s=128&d=identicon&r=PG&f=1", "display_name": "Heap Underflow", "link": "https://stackoverflow.com/users/7531353/heap-underflow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 767, "favorite_count": 0, "accepted_answer_id": 42103184, "answer_count": 1, "score": 9, "last_activity_date": 1486539588, "creation_date": 1486510053, "last_edit_date": 1486539588, "question_id": 42101920, "link": "https://stackoverflow.com/questions/42101920/how-to-redirect-child-process-output-to-stderr", "title": "How to redirect child process output to stderr?", "body": "<p>I am trying to start a process with the <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"nofollow noreferrer\"><code>Command</code></a> API and redirect its standard output to standard error. The following fails:</p>\n\n<pre><code>Command::new(\"tput\").arg(\"rc\")\n    .stdout(io::stderr())\n    .status()\n    .expect(\"failed to run tput\");\n</code></pre>\n\n<p>because <code>Command::new(\"tput\").arg(\"rc\").stdout(&lt;XXX&gt;)</code> expects a <code>std::process::Stdio</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>expected struct `std::process::Stdio`, found struct `std::io::Stderr`\n</code></pre>\n\n<p>The equivalent in Bash would probably be <code>tput rc &gt; /dev/stderr</code>.</p>\n\n<p>I would like to know how to do this properly.</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1486506816, "post_id": 42101262, "comment_id": 71372817, "body": "I trying to answer but you are always too fast, I block on &quot;Can we use <a href=\"https://doc.rust-lang.org/std/ffi/struct.OsStr.html\" rel=\"nofollow noreferrer\">PartialEq&lt;str&gt;</a>&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1486507053, "post_id": 42101262, "comment_id": 71372915, "body": "@Stargateur I may be fast, but that doesn&#39;t mean that I always provide the best (or sometimes even <i>correct</i>) answer. Make sure to always look for alternative solutions to what I propose, or see if they won&#39;t work for the OP for some reason."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 16, "last_activity_date": 1486562060, "last_edit_date": 1495539926, "creation_date": 1486506667, "answer_id": 42101262, "question_id": 42101070, "link": "https://stackoverflow.com/questions/42101070/how-to-match-a-file-extension-represented-as-an-osstr/42101262#42101262", "title": "How to match a file extension represented as an OsStr?", "body": "<p><a href=\"https://doc.rust-lang.org/std/ffi/struct.OsStr.html\" rel=\"noreferrer\"><code>OsStr</code></a> and <a href=\"https://doc.rust-lang.org/std/ffi/struct.OsString.html\" rel=\"noreferrer\"><code>OsString</code></a> exist precisely because filenames are <strong>not</strong> UTF-8. A Rust string literal is UTF-8. That means you must deal with converting between the two representations.</p>\n\n<p>One solution is to give up the <code>match</code> and use if-else statements. See <a href=\"https://stackoverflow.com/a/42101478/155423\">Stargateur's answer</a> for an example.</p>\n\n<p>You can also convert the extension to a string. Since the extension might not be UTF-8, this returns another <code>Option</code>:</p>\n\n<pre><code>fn main() {\n    let file_path = std::path::Path::new(\"index.html\");\n    let content_type = match file_path.extension() {\n        None =&gt; \"\",\n        Some(os_str) =&gt; {\n            match os_str.to_str() {\n                Some(\"html\") =&gt; \"text/html\",\n                Some(\"css\") =&gt; \"text/css\",\n                Some(\"js\") =&gt; \"application/javascript\",\n                _ =&gt; panic!(\"You forgot to specify this case!\"),\n            }\n        }\n    };\n}\n</code></pre>\n\n<hr>\n\n<p>If you want all cases to use an empty string as the fallback, you can do something like:</p>\n\n<pre><code>use std::ffi::OsStr;\n\nfn main() {\n    let file_path = std::path::Path::new(\"index.html\");\n    let content_type = match file_path.extension().and_then(OsStr::to_str) {\n        Some(\"html\") =&gt; \"text/html\",\n        Some(\"css\") =&gt; \"text/css\",\n        Some(\"js\") =&gt; \"application/javascript\",\n        _ =&gt; \"\",\n    };\n}\n</code></pre>\n\n<p>Or if you want to use <code>None</code> as the fallback:</p>\n\n<pre><code>use std::ffi::OsStr;\n\nfn main() {\n    let file_path = std::path::Path::new(\"index.html\");\n\n    let content_type = file_path.extension().and_then(OsStr::to_str).and_then(|ext| {\n        match ext {\n            \"html\" =&gt; Some(\"text/html\"),\n            \"css\" =&gt; Some(\"text/css\"),\n            \"js\" =&gt; Some(\"application/javascript\"),\n            _ =&gt; None,\n        }\n    });\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 9, "last_activity_date": 1486507721, "creation_date": 1486507721, "answer_id": 42101478, "question_id": 42101070, "link": "https://stackoverflow.com/questions/42101070/how-to-match-a-file-extension-represented-as-an-osstr/42101478#42101478", "title": "How to match a file extension represented as an OsStr?", "body": "<p>You could use <a href=\"https://doc.rust-lang.org/std/ffi/struct.OsStr.html\"><code>PartialEq&lt;str&gt;</code></a> trait for <code>OsStr</code>.</p>\n\n<pre><code>fn main() {\n    let file_path = std::path::Path::new(\"index.html\");\n    let content_type = match file_path.extension() {\n        None =&gt; \"\",\n        Some(os_str) =&gt; {\n            if os_str == \"html\" {\n                \"text/html\"\n            } else if os_str == \"css\" {\n                \"text/css\"\n            } else if os_str == \"js\" {\n                \"application/javascript\"\n            } else {\n                \"\"\n            }\n        }\n    };\n    println!(\"{:?}\", content_type);\n}\n</code></pre>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3449, "favorite_count": 0, "accepted_answer_id": 42101262, "answer_count": 2, "score": 8, "last_activity_date": 1532005676, "creation_date": 1486505803, "last_edit_date": 1532005676, "question_id": 42101070, "link": "https://stackoverflow.com/questions/42101070/how-to-match-a-file-extension-represented-as-an-osstr", "title": "How to match a file extension represented as an OsStr?", "body": "<p>I am trying to <code>match</code> against a file extension:</p>\n\n<pre><code>let file_path = std::path::Path::new(\"index.html\");\nlet content_type = match file_path.extension() {\n    None =&gt; \"\",\n    Some(os_str) =&gt; match os_str {\n        \"html\" =&gt; \"text/html\",\n        \"css\" =&gt; \"text/css\",\n        \"js\" =&gt; \"application/javascript\",\n    },\n};\n</code></pre>\n\n<p>The compiler says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:6:13\n  |\n6 |             \"html\" =&gt; \"text/html\",\n  |             ^^^^^^ expected struct `std::ffi::OsStr`, found str\n  |\n  = note: expected type `&amp;std::ffi::OsStr`\n             found type `&amp;'static str`\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 1, "creation_date": 1486493910, "post_id": 42097611, "comment_id": 71365932, "body": "Perhaps the names come from a small set, and you&#39;d like to intern the strings? Rather than Cow, you&#39;d like to always have the same string value refer to some lightweight identifier?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486493959, "post_id": 42097611, "comment_id": 71365963, "body": "Are you saying you want to remove the clones but will not allow for the use of lifetimes?"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1486494284, "post_id": 42097611, "comment_id": 71366150, "body": "I guess I should have clarified that I can&#39;t use lifetimes in associated types right? It seemed to me that it&#39;s a form of HKT."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1486494316, "post_id": 42097611, "comment_id": 71366176, "body": "I&#39;m open to any suggestion as I have struggled trying to use string slices and the <code>Cow</code> type."}], "answers": [{"comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1486496209, "post_id": 42098198, "comment_id": 71367269, "body": "I think an <code>Rc&lt;String&gt;</code> is a simple fix, yes. I totally overlooked that. My <code>MetricType</code> is an enum. I&#39;m purely concerned with a <code>Metric</code>&#39;s name field in this case."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 3, "creation_date": 1486539081, "post_id": 42098198, "comment_id": 71383334, "body": "Note: <code>Rc&lt;String&gt;</code> implies two indirections, use <code>Rc&lt;str&gt;</code> instead if possible."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1486576415, "post_id": 42098198, "comment_id": 71408670, "body": "Is it possible to make an <code>Rc&lt;str&gt;</code>? I did some research and am looking into the owning_ref crate for now."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1486576745, "post_id": 42098198, "comment_id": 71408876, "body": "@squiguy: The type accepts it, but I can find no way to instantiate such a type because <code>new</code> doesn&#39;t... bummer..."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1486495290, "creation_date": 1486495290, "answer_id": 42098198, "question_id": 42097611, "link": "https://stackoverflow.com/questions/42097611/how-can-i-better-store-a-string-to-avoid-many-clones/42098198#42098198", "title": "How can I better store a string to avoid many clones?", "body": "<p>Expanding on @Josh's suggestion, I would suggest using interning.</p>\n\n<p>Depending on how memory or CPU intensive your task is, make your pick between:</p>\n\n<ul>\n<li>A double hash-map: <code>ID</code> &lt;-> <code>String</code>, shared between components</li>\n<li>A single hash-map: <code>String</code> -> <code>Rc&lt;str&gt;</code></li>\n</ul>\n\n<p>If you can afford the latter, I definitely advise it. Also note that you can likely fold <code>MetricType</code> within the <code>Rc</code>: <code>Rc&lt;(MetricType, str)&gt;</code>.</p>\n\n<p>Then you still need to call <code>clone</code> left and right, but each is just a cheap non-atomic increment operation... and moving to multithread is as simple as swapping <code>Arc</code> for <code>Rc</code>.</p>\n"}], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 468, "favorite_count": 0, "accepted_answer_id": 42098198, "answer_count": 1, "score": 3, "last_activity_date": 1486495290, "creation_date": 1486493334, "last_edit_date": 1486494500, "question_id": 42097611, "link": "https://stackoverflow.com/questions/42097611/how-can-i-better-store-a-string-to-avoid-many-clones", "title": "How can I better store a string to avoid many clones?", "body": "<p>I am using tokio's <a href=\"https://docs.rs/tokio-core/0.1.4/tokio_core/net/trait.UdpCodec.html\" rel=\"nofollow noreferrer\"><code>UdpCodec</code></a> trait:</p>\n\n<pre><code>pub trait UdpCodec {\n    type In;\n    type Out;\n    fn decode(&amp;mut self, src: &amp;SocketAddr, buf: &amp;[u8]) -&gt; Result&lt;Self::In&gt;;\n    fn encode(&amp;mut self, msg: Self::Out, buf: &amp;mut Vec&lt;u8&gt;) -&gt; SocketAddr;\n}\n</code></pre>\n\n<p>My associated type for <code>In</code> is a <code>(SocketAddr, Vec&lt;Metric&gt;)</code>. <code>Metric</code> is defined as:</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\npub struct Metric {\n    pub name: String,\n    pub value: f64,\n    pub metric_type: MetricType,\n    pub sample_rate: Option&lt;f64&gt;,\n}\n</code></pre>\n\n<p>I have used owned strings to avoid lifetime constraints with the associated types. However I also do <code>HashMap</code> lookups and inserts with these metric names which involves a lot of cloning since I borrow metrics in other functions.</p>\n\n<p>How can I better store a string within this <code>Metric</code> type to avoid many inefficient clones? Using the <code>Cow</code> type has crossed my mind but it also obviously has a lifetime association.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1486483161, "post_id": 42094284, "comment_id": 71359048, "body": "Right, I apologize. Noticed right after pushing the comment. :x Have you followed the advice of making a <code>PhantomData</code>?"}, {"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1486483246, "post_id": 42094284, "comment_id": 71359120, "body": "@E_net4 I&#39;m not really sure how to do that?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1486483278, "post_id": 42094284, "comment_id": 71359149, "body": "<a href=\"http://stackoverflow.com/a/40487993/1233251\">stackoverflow.com/a/40487993/1233251</a>"}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 4, "last_activity_date": 1486490629, "last_edit_date": 1486490629, "creation_date": 1486490307, "answer_id": 42096747, "question_id": 42094284, "link": "https://stackoverflow.com/questions/42094284/struct-with-a-generic-trait-which-is-also-a-generic-trait/42096747#42096747", "title": "Struct with a generic trait which is also a generic trait", "body": "<p>The error message gives you a suggestion to use a marker, like <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\">PhantomData</a>. You can do it like this:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct MyIterThing&lt;'a, R: Read, T: MyReader&lt;R&gt; + 'a&gt; {\n    inner: &amp;'a mut T,\n    marker: PhantomData&lt;R&gt;,\n}\n</code></pre>\n\n<p>Instances of <code>PhantomData</code> have zero runtime cost, so it's better to use that than to just create a field of type <code>R</code>.</p>\n\n<hr>\n\n<p>Another solution would be to use an associated type instead of a type parameter:</p>\n\n<pre><code>trait MyReader {\n    type Source: Read;\n\n    fn new(Self::Source) -&gt; Self;\n    fn into_inner(self) -&gt; Self::Source;\n\n    fn get_next(&amp;mut self) -&gt; Option&lt;u32&gt;;\n    fn do_thingie(&amp;mut self);\n}\n\nstruct MyIterThing&lt;'a, T: MyReader + 'a&gt; {\n    inner: &amp;'a mut T,\n}\n</code></pre>\n\n<p>This is a little less flexible as there can only be one choice of <code>Source</code> per implementation of <code>MyReader</code>, but it could be sufficient, depending on your needs.</p>\n"}, {"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1486490868, "post_id": 42096822, "comment_id": 71364271, "body": "Thanks - some insightful links there."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1486490557, "last_edit_date": 1495540429, "creation_date": 1486490557, "answer_id": 42096822, "question_id": 42094284, "link": "https://stackoverflow.com/questions/42094284/struct-with-a-generic-trait-which-is-also-a-generic-trait/42096822#42096822", "title": "Struct with a generic trait which is also a generic trait", "body": "<p>You probably don't want a type parameter, you want an <em>associated type</em>:</p>\n\n<pre><code>use std::io::Read;\n\ntrait MyReader {\n    type R: Read;\n\n    fn new(Self::R) -&gt; Self;\n    fn into_inner(self) -&gt; Self::R;\n\n    fn get_next(&amp;mut self) -&gt; Option&lt;u32&gt;;\n    fn do_thingie(&amp;mut self);\n}\n\nstruct MyIterThing&lt;'a, T&gt;\n    where T: MyReader + 'a\n{\n    inner: &amp;'a mut T,\n}\n\nfn main() {}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32059370/155423\">When is it appropriate to use an associated type versus a generic type?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32053402/155423\">Why am I getting &quot;parameter is never used [E0392]&quot;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29878950/155423\">How can I have an unused type parameter in a struct?</a></li>\n</ul>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 938, "favorite_count": 0, "accepted_answer_id": 42096822, "answer_count": 2, "score": 3, "last_activity_date": 1486490629, "creation_date": 1486482884, "last_edit_date": 1486483369, "question_id": 42094284, "link": "https://stackoverflow.com/questions/42094284/struct-with-a-generic-trait-which-is-also-a-generic-trait", "title": "Struct with a generic trait which is also a generic trait", "body": "<p>In Rust 1.15, I have created a trait to abstract over reading &amp; parsing file format(s). I'm trying to create a struct which has this generic trait inside.</p>\n\n<p>I have this trait:</p>\n\n<pre><code>use std::io::Read;\n\ntrait MyReader&lt;R: Read&gt; {\n    fn new(R) -&gt; Self;\n    fn into_inner(self) -&gt; R;\n\n    fn get_next(&amp;mut self) -&gt; Option&lt;u32&gt;;\n    fn do_thingie(&amp;mut self);\n}\n</code></pre>\n\n<p>I want to make a struct which has a reference to something that implements this.</p>\n\n<pre><code>struct MyIterThing&lt;'a, T: MyReader&lt;R&gt;+'a&gt; {\n    inner: &amp;'a mut T,\n}\n</code></pre>\n\n<p>Gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0412]: type name `R` is undefined or not in scope\n  --&gt; &lt;anon&gt;:11:36\n   |\n11 | struct MyIterThing&lt;'a, T: MyReader&lt;R&gt;+'a&gt; {\n   |                                    ^ undefined or not in scope\n   |\n   = help: no candidates by the name of `R` found in your project; maybe you misspelled the name or forgot to import an external crate?\n</code></pre>\n\n<p><code>T: MyReader+'a</code>, I get the error: <code>\"error[E0243]: wrong number of type arguments: expected 1, found 0\"</code>, <code>T: MyReader&lt;R: Read&gt;+'a</code> gives a low level syntax error, it's not expecting a <code>:</code> there.</p>\n\n<p>And this doesn't work either:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `R` is never used\n  --&gt; &lt;anon&gt;:11:24\n   |\n11 | struct MyIterThing&lt;'a, R: Read, T: MyReader&lt;R&gt;+'a&gt; {\n   |                        ^ unused type parameter\n   |\n   = help: consider removing `R` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>How do I create my <code>MyIterThing</code> struct?</p>\n"}, {"tags": ["module", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 4, "last_activity_date": 1486482684, "last_edit_date": 1486482684, "creation_date": 1486475980, "answer_id": 42091759, "question_id": 42091347, "link": "https://stackoverflow.com/questions/42091347/how-to-divide-my-program-in-modules/42091759#42091759", "title": "How to divide my program in modules?", "body": "<p>At this point it's a bit of a mess. I would recommend starting with the creation of an additional <code>lib.rs</code> file in your <code>src</code> folder and declaring all the modules and external crates in it:</p>\n\n<pre><code>pub mod operator;\npub mod token;\npub mod runtime_context;\npub mod lexer;\npub mod recursive_descent_parser;\n\nextern crate regex;\n</code></pre>\n\n<p>note the slightly modified module names (this also applies to their file names); as per The Rust Book: </p>\n\n<blockquote>\n  <p>Module names follow the conventions for other Rust identifiers:\n  lower_snake_case.</p>\n</blockquote>\n\n<p>Afterwards you can just <code>use</code> them in your <code>main.rs</code>. I recommend reading The Rust Book's <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">chapter on Crates and Modules</a>.</p>\n"}], "owner": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "accepted_answer_id": 42091759, "answer_count": 1, "score": 0, "last_activity_date": 1487188194, "creation_date": 1486474814, "last_edit_date": 1487188194, "question_id": 42091347, "link": "https://stackoverflow.com/questions/42091347/how-to-divide-my-program-in-modules", "title": "How to divide my program in modules?", "body": "<p>I'm having problems dividing my code into modules, I have a lot of compilation errors but I've tried something. The single file program works and evaluates expressions with the four basic math operators (+-*/), nested with parentheses or not.</p>\n\n<p>I'm new to Rust so I'm having trouble understanding the module system and I want you to help me understand it and do it well from the beginning.</p>\n\n<p>Here is the code (all files are in the src/ folder of the cargo project):</p>\n\n<p>Operator.rs</p>\n\n<pre><code>// An attribute to hide warnings for unused code.\n#![allow(dead_code)]\n\npub enum Operator {\n    Plus,\n    Minus,\n    Mul,\n    Div,\n}\n</code></pre>\n\n<p>RuntimeContext.rs</p>\n\n<pre><code>pub struct RuntimeContext;\n</code></pre>\n\n<p>Token.rs</p>\n\n<pre><code>// An attribute to hide warnings for unused code.\n#![allow(dead_code)]\n\n#[derive(Debug, PartialEq)]\npub enum Token {\n    IllegalToken, // invalid token, error\n    TokPlus, // +\n    TokMinus, // -\n    TokMul, // *\n    TokDiv, // /\n    TokOparen, // (\n    TokCparen, // )\n    TokFloating, // number\n    TokEos, // end of string\n}\n</code></pre>\n\n<p>lexer.rs</p>\n\n<pre><code>pub use Token;\n\nmod lexer {\n    use Token::Token;\n    use Token::Token::*;\n    use regex::Regex;\n\n    pub fn lexer(input: &amp;str) -&gt; Vec&lt;(Token, Option&lt;f64&gt;)&gt; {\n        let re = Regex::new(r\"([-+*/)(])|([0-9]+\\.[0-9]+)|([0-9]+)\").unwrap();\n        let mut tokens_and_values: Vec&lt;(Token, Option&lt;f64&gt;)&gt; = Vec::new();\n        let mut number: f64;\n\n        for cap in re.captures_iter(&amp;input) {\n            let cap1 = cap.get(1);\n            let cap2 = cap.get(2);\n            let cap3 = cap.get(3);\n            if cap1.is_some() {\n                tokens_and_values.push((match cap1.unwrap().as_str() {\n                                            \"+\" =&gt; Token::TokPlus,\n                                            \"-\" =&gt; Token::TokMinus,\n                                            \"*\" =&gt; Token::TokMul,\n                                            \"/\" =&gt; Token::TokDiv,\n                                            \"(\" =&gt; Token::TokOparen,\n                                            \")\" =&gt; Token::TokCparen,\n                                            _ =&gt; Token::IllegalToken,\n                                        },\n                                        None));\n            } else if cap2.is_some() {\n                number = cap2.unwrap().as_str().parse().unwrap();\n                tokens_and_values.push((Token::TokFloating, Some(number)));\n            } else if cap3.is_some() {\n                number = cap3.unwrap().as_str().parse().unwrap();\n                tokens_and_values.push((Token::TokFloating, Some(number)));\n            }\n            //println!(\"{:?}\", cap);\n        }\n        tokens_and_values.push((TokEos, None));\n        tokens_and_values\n    }\n}\n</code></pre>\n\n<p>recursive_descent_parser.rs</p>\n\n<pre><code>pub use Token;\npub use Operator;\n\nmod recursive_descent_parser {\n    use Token::Token;\n    use Token::Token::*;\n    use Operator::Operator::*;\n\n    pub fn recursive_descent_parser(input: &amp;str) -&gt; Box&lt;Exp&gt; {\n        let tokens_and_values = lexer(&amp;input);\n        fn expr(tokens_and_values: &amp;Vec&lt;(Token, Option&lt;f64&gt;)&gt;, mut index: &amp;mut usize) -&gt; Box&lt;Exp&gt; {\n            // println!(\"index = {}\", index);\n            let term = term(&amp;tokens_and_values, index);\n\n            match tokens_and_values[*index] {\n                (TokPlus, None) =&gt; {\n                    *index += 1;\n                    Box::new(BinaryExp {\n                        exp1: term,\n                        exp2: expr(&amp;tokens_and_values, &amp;mut index),\n                        op: Plus,\n                    })\n                }\n                (TokMinus, None) =&gt; {\n                    *index += 1;\n                    Box::new(BinaryExp {\n                        exp1: term,\n                        exp2: expr(&amp;tokens_and_values, &amp;mut index),\n                        op: Minus,\n                    })\n                }\n                _ =&gt; term, \n            }\n        }\n\n        // &lt;Term&gt; ::= &lt;Factor&gt; | &lt;Factor&gt; {*|/} &lt;Term&gt;\n        fn term(tokens_and_values: &amp;Vec&lt;(Token, Option&lt;f64&gt;)&gt;, mut index: &amp;mut usize) -&gt; Box&lt;Exp&gt; {\n            // println!(\"index = {}\", index);\n            let factor = factor(&amp;tokens_and_values, index);\n            //*index += 1;\n            match tokens_and_values[*index] {\n                (TokMul, None) =&gt; {\n                    *index += 1;\n                    Box::new(BinaryExp {\n                        exp1: factor,\n                        exp2: term(&amp;tokens_and_values, &amp;mut index),\n                        op: Mul,\n                    })\n                }\n                (TokDiv, None) =&gt; {\n                    *index += 1;\n                    Box::new(BinaryExp {\n                        exp1: factor,\n                        exp2: term(&amp;tokens_and_values, &amp;mut index),\n                        op: Div,\n                    })\n                }\n                _ =&gt; factor,\n            }\n        }\n\n        // &lt;Factor&gt;::= &lt;number&gt; | ( &lt;Expr&gt; ) | {+|-} &lt;Factor&gt;\n        fn factor(tokens_and_values: &amp;Vec&lt;(Token, Option&lt;f64&gt;)&gt;,\n                  mut index: &amp;mut usize)\n                  -&gt; Box&lt;Exp&gt; {\n            //println!(\"index = {}\", index);\n\n            match tokens_and_values[*index].1 {\n                Some(num) =&gt; {\n                    *index += 1;\n                    return Box::new(NumericConstant { value: num });\n                }\n                None =&gt; {}\n            };\n\n            //println!(\"number = {}\", number);\n            match tokens_and_values[*index] {\n                (TokOparen, None) =&gt; {\n                    // println!(\"oparen\");\n                    *index += 1;\n                    let result = Box::new(expr(&amp;tokens_and_values, &amp;mut index));\n\n                    if tokens_and_values[*index].0 != TokCparen {\n                        println!(\"unclosed paren\");\n                    }\n\n                    *index += 1;\n                    result\n                }\n                (TokPlus, None) =&gt; {\n                    *index += 1;\n                    Box::new(UnaryExp {\n                        exp1: factor(&amp;tokens_and_values, &amp;mut index),\n                        op: Plus,\n                    })\n                }\n                (TokMinus, None) =&gt; {\n                    *index += 1;\n                    Box::new(UnaryExp {\n                        exp1: factor(&amp;tokens_and_values, index),\n                        op: Minus,\n                    })\n                }\n                _ =&gt; return Box::new(NumericConstant { value: 288 as f64 }),\n            }\n        }\n        let mut index = 0;\n        expr(&amp;tokens_and_values, &amp;mut index)\n    }\n}\n</code></pre>\n\n<p>main.rs</p>\n\n<pre><code>use Operator;\nuse Token;\nuse RuntimeContext;\nuse lexer;\nuse recursive_descent_parser;\n\nextern crate regex;\nuse regex::Regex;\n\nuse std::ops::Deref;\nuse std::cmp::PartialEq;\n\ntrait Exp {\n    fn evaluate(&amp;self, &amp;mut RuntimeContext) -&gt; f64;\n}\n\nimpl Exp for Box&lt;Exp&gt; {\n    fn evaluate(&amp;self, runtime_context: &amp;mut RuntimeContext) -&gt; f64 {\n        self.deref().evaluate(runtime_context)\n    }\n}\n\nstruct NumericConstant {\n    value: f64, \n    // marker: PhantomData&lt;T&gt;,\n}\n\nimpl Exp for NumericConstant {\n    fn evaluate(&amp;self, runtime_context: &amp;mut RuntimeContext) -&gt; f64 {\n        self.value\n    }\n}\n\nimpl Exp for Box&lt;NumericConstant&gt; {\n    fn evaluate(&amp;self, runtime_context: &amp;mut RuntimeContext) -&gt; f64 {\n        self.deref().value\n    }\n}\n\nstruct BinaryExp&lt;T: Exp, U: Exp&gt; {\n    exp1: T,\n    exp2: U,\n    op: Operator,\n}\n\nimpl&lt;T: Exp, U: Exp&gt; Exp for BinaryExp&lt;T, U&gt; {\n    fn evaluate(&amp;self, runtime_context: &amp;mut RuntimeContext) -&gt; f64 {\n        use Operator::*;\n        match self.op {\n            Plus =&gt; self.exp1.evaluate(runtime_context) + self.exp2.evaluate(runtime_context),\n            Minus =&gt; self.exp1.evaluate(runtime_context) - self.exp2.evaluate(runtime_context),\n            Mul =&gt; self.exp1.evaluate(runtime_context) * self.exp2.evaluate(runtime_context),\n            Div =&gt; self.exp1.evaluate(runtime_context) / self.exp2.evaluate(runtime_context),\n        }\n    }\n}\n\nstruct UnaryExp&lt;T: Exp&gt; {\n    exp1: T,\n    op: Operator,\n}\n\nimpl&lt;T: Exp&gt; Exp for UnaryExp&lt;T&gt; {\n    fn evaluate(&amp;self, runtime_context: &amp;mut RuntimeContext) -&gt; f64 {\n        use Operator::*;\n        match self.op {\n            Minus =&gt; -self.exp1.evaluate(runtime_context),\n            _ =&gt; self.exp1.evaluate(runtime_context),\n        }\n    }\n}\n\nfn main() {\n    use Operator::*;\n\n    let expressions = vec![\"2+2\",\n                           \"5*10\",\n                           \"(2+5)*10\",\n                           \"(10 + (30 + 50 ))\",\n                           \"(100 / 25)\",\n                           \"(25 * 4 * 8)\",\n                           \"25 * 4 * 8 + 100 / 25\",\n                           \"-2*3+3\",\n                           \"(25 * 4 * 8) + (100 / 25)\"];\n\n    for expression in expressions {\n        //println!(\"{}\", );\n        //println!(\"{:?}\", lexer(&amp;expression));\n        let parsed = recursive_descent_parser(expression);\n        let mut runtime_context = RuntimeContext;\n        let result = parsed.evaluate(&amp;mut runtime_context);\n        println!(\"{} = {}\", &amp;expression, result);\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 9, "last_activity_date": 1486426852, "last_edit_date": 1486426852, "creation_date": 1486426492, "answer_id": 42079598, "question_id": 42079539, "link": "https://stackoverflow.com/questions/42079539/downcasting-a-borrowed-box/42079598#42079598", "title": "Downcasting a borrowed box", "body": "<p>There is an alternative, but it's not a method of <code>Box</code>: it's <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref\"><code>Any::downcast_ref()</code></a>. Thanks to deref coersion and <code>Box</code>es <code>Deref</code>-impl, you can call <code>T</code>'s methods on a <code>Box&lt;T&gt;</code> directly. Thus you can call <code>Any::downcast_ref()</code> on your <code>Box&lt;Any&gt;</code> directly:</p>\n\n<pre><code>let b: Box&lt;Any&gt; = Box::new(27u64);\n\n// The type of `ref_a` and `ref_b` is `&amp;u64`\nlet ref_a = b.downcast_ref::&lt;u64&gt;().unwrap();\nlet ref_b = b.downcast_ref::&lt;u64&gt;().unwrap();\nprintln!(\"{} == {}\", ref_a, ref_b);\n</code></pre>\n\n<p>There is also <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut\"><code>Any::downcast_mut()</code></a> to obtain a mutable reference.</p>\n"}], "owner": {"reputation": 531, "user_id": 1129180, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b019579587da874e2910428d2c23c63c?s=128&d=identicon&r=PG", "display_name": "Flaise", "link": "https://stackoverflow.com/users/1129180/flaise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 401, "favorite_count": 1, "accepted_answer_id": 42079598, "answer_count": 1, "score": 6, "last_activity_date": 1486426852, "creation_date": 1486426098, "last_edit_date": 1486426341, "question_id": 42079539, "link": "https://stackoverflow.com/questions/42079539/downcasting-a-borrowed-box", "title": "Downcasting a borrowed box", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast\" rel=\"noreferrer\"><code>downcast()</code></a> method of Rust's <code>Box</code> type requires the call site to have full ownership of the Box instance. There doesn't appear to be an equivalent that can work with a borrowed reference. Is there a reason for this? Is there a workaround that will work on a borrowed instance?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486422957, "post_id": 42076770, "comment_id": 71329562, "body": "See also <a href=\"http://stackoverflow.com/q/34438755/155423\">stackoverflow.com/q/34438755/155423</a> and <a href=\"http://stackoverflow.com/q/29256519/155423\">stackoverflow.com/q/29256519/155423</a>."}], "answers": [{"tags": [], "owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "is_accepted": true, "score": 5, "last_activity_date": 1486422944, "last_edit_date": 1486422944, "creation_date": 1486422656, "answer_id": 42078961, "question_id": 42076770, "link": "https://stackoverflow.com/questions/42076770/trait-implements-iterator-but-cannot-use-a-struct-implementing-my-trait-as-an-i/42078961#42078961", "title": "Trait implements Iterator, but cannot use a struct implementing my trait as an Iterator", "body": "<p>This line doesn't do what you think it does.</p>\n\n<pre><code>impl Iterator for MyReader {\n</code></pre>\n\n<p>This implements <code>Iterator</code> for the <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"noreferrer\"><em>trait object</em></a> <code>MyReader</code>. What you want is to implement <code>Iterator</code> for every type which also implements <code>MyReader</code>. Unfortunately, this is not possible due to the coherence rules. </p>\n\n<p>In Rust, you can only implement a trait in either the crate that defines the trait, or the crate that defines the type you are implementing it on. (Things are a bit more complicated for generic types, but that's the basic idea.) In this case, <code>Iterator</code> is a trait from the standard library, so there is no way for you to implement it on arbitrary types that you didn't define. If you think about it, this makes sense, because otherwise you'd get ambiguity if one of those types has a pre-existing implementation of <code>Iterator</code> - which one would be used?</p>\n\n<p>One solution is to wrap the type implementing <code>MyReader</code> in a newtype, and implement <code>Iterator</code> on that. Since you defined the newtype yourself, you are free to implement <code>Iterator</code> on it.</p>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 392, "favorite_count": 1, "accepted_answer_id": 42078961, "answer_count": 1, "score": 4, "last_activity_date": 1486423024, "creation_date": 1486413191, "last_edit_date": 1486423024, "question_id": 42076770, "link": "https://stackoverflow.com/questions/42076770/trait-implements-iterator-but-cannot-use-a-struct-implementing-my-trait-as-an-i", "title": "Trait implements Iterator, but cannot use a struct implementing my trait as an Iterator", "body": "<p>I have a trait and I want to say that if a struct implements this trait then it can also act as an <code>Iterator</code>. However I'm getting a compiler error when trying to use a struct as an iterator.</p>\n\n<p>I am writing a library to read the same type of data from many different file formats. I want to create a generic \"reader\" trait, which will return the proper rust objects. I want to say that each reader can operate as an Iterator, yielding that object.</p>\n\n<p>Here's the code</p>\n\n<pre><code>/// A generic trait for reading u32s\ntrait MyReader {\n    fn get_next(&amp;mut self) -&gt; Option&lt;u32&gt;;\n}\n\n/// Which means we should be able to iterate over the reader, yielding u32s\nimpl Iterator for MyReader {\n    type Item = u32;\n    fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        self.get_next()\n    }\n}\n\n/// Example of a 'reader'\nstruct MyVec {\n    buffer: Vec&lt;u32&gt;,\n}\n\n/// This can act as a reader\nimpl MyReader for MyVec {\n    fn get_next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        self.buffer.pop()\n    }\n}\n\nfn main() {\n    // Create a reader\n    let mut veccy = MyVec { buffer: vec![1, 2, 3, 4, 5] };\n\n    // Doesn't work :(\n    let res = veccy.next();\n}\n</code></pre>\n\n<p>The compiler output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.15.0 (10893a9a3 2017-01-19)\nerror: no method named `next` found for type `MyVec` in the current scope\n  --&gt; &lt;anon&gt;:31:21\n   |\n31 |     let res = veccy.next();\n   |                     ^^^^\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope; the following traits define an item `next`, perhaps you need to implement one of them:\n   = help: candidate #1: `std::iter::Iterator`\n   = help: candidate #2: `std::iter::ZipImpl`\n   = help: candidate #3: `std::str::pattern::Searcher`\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8cb1cf9c86647da59bd6a4017d6b2b42&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Here</a> is the code on the rust playground.</p>\n\n<p>In my mind, since <code>MyVec</code> implements <code>MyReader</code>, then it should be usable as an iterator, and hence I should be able to call <code>.next()</code> on it. Since I have implemented <code>MyReader</code>, then I should get an implementation for <code>Iterator</code> for free, right? The line <code>impl Iterator for ...</code> shows that <code>Iterator</code> is in scope, so I can't understand where the error comes from.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 0, "creation_date": 1486458659, "post_id": 42084586, "comment_id": 71341850, "body": "Well, this does not really answer my question, Maybe the note about target types was unnecessary. I will accept your answer since now my question really probably has no good answer. I should&#39;ve formatted my question more towards why the assembly is not equivalent between these cases for i32."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1486469383, "post_id": 42084586, "comment_id": 71349033, "body": "I guess the question isn&#39;t about which version is more efficient, but about why there is <i>any</i> difference between the value and reference based versions, given that the compiler &quot;sees&quot; all relevant definitions and can inline the functions. An answer to that question would likely involving the details of the particular version of rustc and llvm."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1486454477, "creation_date": 1486454477, "answer_id": 42084586, "question_id": 42076205, "link": "https://stackoverflow.com/questions/42076205/why-is-the-produced-assembly-not-equivalent-between-returning-by-reference-and-c/42084586#42084586", "title": "Why is the produced assembly not equivalent between returning by reference and copy when inlined?", "body": "<p><strong>TL;DR:</strong> Microbenchmarks are trickery, instruction count does not directly translate into high/low performance.</p>\n\n<hr>\n\n<blockquote>\n  <p>Later on, I plan to switch to a non-Copy type instead of an i32, so I decided to use references.</p>\n</blockquote>\n\n<p>Then, you should check the generated assembly for your new type.</p>\n\n<p>In your optimized example, the compiler is being very crafty:</p>\n\n<blockquote>\n<pre><code>pub fn testing_direct(f: Foo) -&gt; i32 {\n    let mut sum = 0;\n\n    sum += f.a + f.b;\n    sum += f.b + f.c;\n    sum += f.c + f.a;\n\n    sum\n}\n</code></pre>\n</blockquote>\n\n<p>Yields:</p>\n\n<blockquote>\n<pre><code>example::testing_direct:\n        push    rbp\n        mov     rbp, rsp\n        mov     eax, dword ptr [rdi + 4]\n        add     eax, dword ptr [rdi]\n        add     eax, dword ptr [rdi + 8]\n        add     eax, eax\n        pop     rbp\n        ret\n</code></pre>\n</blockquote>\n\n<p>Which is roughly <code>sum += f.a; sum += f.b; sum += f.c; sum += sum;</code>.</p>\n\n<p>That is, the compiler realized that:</p>\n\n<ol>\n<li><code>f.X</code> was added twice</li>\n<li><code>f.X * 2</code> was equivalent to adding it twice</li>\n</ol>\n\n<p>While the former may be inhibited in the other cases by the use of indirection, the latter is <em>VERY</em> specific to <code>i32</code> (and addition being commutative).</p>\n\n<p>For example, switching your code to <code>f32</code> (still <code>Copy</code>, but addition is not longer commutative), I get the very same assembly for both <code>testing_direct</code> and <code>testing</code> (and slightly different for <code>testing_ref</code>):</p>\n\n<blockquote>\n<pre><code>example::testing:\n        push    rbp\n        mov     rbp, rsp\n        movss   xmm1, dword ptr [rdi]\n        movss   xmm2, dword ptr [rdi + 4]\n        movss   xmm0, dword ptr [rdi + 8]\n        movaps  xmm3, xmm1\n        addss   xmm3, xmm2\n        xorps   xmm4, xmm4\n        addss   xmm4, xmm3\n        addss   xmm2, xmm0\n        addss   xmm2, xmm4\n        addss   xmm0, xmm1\n        addss   xmm0, xmm2\n        pop     rbp\n        ret\n</code></pre>\n</blockquote>\n\n<p>And there's no trickery any longer.</p>\n\n<p>So it's really not possible to infer much from your example, check with the real type.</p>\n"}], "owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 0, "accepted_answer_id": 42084586, "answer_count": 1, "score": 6, "last_activity_date": 1486467511, "creation_date": 1486411073, "last_edit_date": 1486467511, "question_id": 42076205, "link": "https://stackoverflow.com/questions/42076205/why-is-the-produced-assembly-not-equivalent-between-returning-by-reference-and-c", "title": "Why is the produced assembly not equivalent between returning by reference and copy when inlined?", "body": "<p>I have a small struct:  </p>\n\n<pre><code>pub struct Foo {\n    pub a: i32,\n    pub b: i32,\n    pub c: i32,\n}\n</code></pre>\n\n<p>I was using pairs of the fields in the form <code>(a,b) (b,c) (c,a)</code>. To avoid duplication of the code, I created a utility function which would allow me to iterate over the pairs:  </p>\n\n<pre><code>fn get_foo_ref(&amp;self) -&gt; [(&amp;i32, &amp;i32); 3] {\n    [(&amp;self.a, &amp;self.b), (&amp;self.b, &amp;self.c), (&amp;self.c, &amp;self.a)]\n}\n</code></pre>\n\n<p>I had to decide if I should return the values as references or copy the <code>i32</code>. Later on, I plan to switch to a non-<code>Copy</code> type instead of an <code>i32</code>, so I decided to use references. I expected the resulting code should be equivalent since everything would be inlined.</p>\n\n<p>I am generally optimistic about optimizations, so I suspected that the code would be equivalent when using this function as compared to hand written code examples.</p>\n\n<p>First the variant using the function:</p>\n\n<pre><code>pub fn testing_ref(f: Foo) -&gt; i32 {\n    let mut sum = 0;\n\n    for i in 0..3 {\n        let (l, r) = f.get_foo_ref()[i];\n\n        sum += *l + *r;\n    }\n\n    sum\n}\n</code></pre>\n\n<p>Then the <em>hand-written</em> variant:  </p>\n\n<pre><code>pub fn testing_direct(f: Foo) -&gt; i32 {\n    let mut sum = 0;\n\n    sum += f.a + f.b;\n    sum += f.b + f.c;\n    sum += f.c + f.a;\n\n    sum\n}\n</code></pre>\n\n<p>To my disappointment, all 3 methods resulted in different assembly code. The worst code was generated for the case with references, and the best code was the one that didn't use my utility function at all. Why is that? Shouldn't the compiler generate equivalent code in this case?</p>\n\n<p>You can view the <a href=\"https://godbolt.org/g/3tNxVx\" rel=\"nofollow noreferrer\">resulting assembly code on Godbolt</a>; I also have the 'equivalent' <a href=\"https://godbolt.org/g/SaB7gt\" rel=\"nofollow noreferrer\">assembly code from C++</a>.</p>\n\n<p>In C++, the compiler generated equivalent code between <code>get_foo</code> and <code>get_foo_ref</code>, although I don't understand why the code for all 3 cases is not equivalent.</p>\n\n<p>Why did the compiler did not generate equivalent code for all 3 cases?</p>\n\n<p><strong>Update</strong>:  </p>\n\n<p>I've modified slightly code to use arrays and to add one more <em>direct</em> case.<br>\n<a href=\"https://godbolt.org/g/52S4sV\" rel=\"nofollow noreferrer\">Rust version with f64 and arrays</a><br>\n<a href=\"https://godbolt.org/g/HqnXGn\" rel=\"nofollow noreferrer\">C++ version with f64 and arrays</a><br>\nThis time the generated code between in C++ is exactly the same. However the Rust' assembly differs, and returning by references results in worse assembly. </p>\n\n<p>Well, I guess this is another example that nothing can be taken for granted.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1486409243, "post_id": 42075710, "comment_id": 71322825, "body": "Can you tell us what <code>rustc -V</code> and <code>cargo -V</code> print?"}, {"owner": {"reputation": 1540, "user_id": 3198349, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/5mbn4.png?s=128&g=1", "display_name": "balloneij", "link": "https://stackoverflow.com/users/3198349/balloneij"}, "edited": false, "score": 0, "creation_date": 1486411094, "post_id": 42075710, "comment_id": 71323795, "body": "I added the versions of cargo and rustc.  Also I included the Cargo.toml from the example I&#39;m having issues with."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486453511, "post_id": 42075710, "comment_id": 71339012, "body": "You may want to upgrade rustc (and cargo). Version 1.15.0 was released last week, which is clearly twice as mature as 1.7.0 going by the numbers :) There&#39;s been lot of polish since 1.7.0, notably much clearer error messages, increased stable APIs, ... I advise you to use <code>rustup</code> to get 1.15.0, really."}], "answers": [{"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1486418437, "post_id": 42077878, "comment_id": 71327660, "body": "It is wise to keep this answer unaccepted. Piston does not strictly depend on SDL 2, and it should not be needed at all for the dependencies that you have mentioned."}], "tags": [], "owner": {"reputation": 1540, "user_id": 3198349, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/5mbn4.png?s=128&g=1", "display_name": "balloneij", "link": "https://stackoverflow.com/users/3198349/balloneij"}, "is_accepted": false, "score": 2, "last_activity_date": 1486417868, "creation_date": 1486417868, "answer_id": 42077878, "question_id": 42075710, "link": "https://stackoverflow.com/questions/42075710/given-version-requirement-is-invalid-while-downloading-dependencies/42077878#42077878", "title": "&quot;given version requirement is invalid&quot; while downloading dependencies", "body": "<p>I ended up using</p>\n\n<pre><code>$ sudo apt install libsdl2-dev\n</code></pre>\n\n<p>and then it started to work.  However, I do not know if this is the true solution because I removed libsdl2 and it continued to work after that.  A theory of mine is that because Piston uses sdl2, it corrected something to make it work, maybe.</p>\n\n<p>If anyone has found a better solution for the next guy to have issues, I'll leave this post unanswered for a while longer.</p>\n"}], "owner": {"reputation": 1540, "user_id": 3198349, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/5mbn4.png?s=128&g=1", "display_name": "balloneij", "link": "https://stackoverflow.com/users/3198349/balloneij"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 399, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1486417868, "creation_date": 1486409127, "last_edit_date": 1486411039, "question_id": 42075710, "link": "https://stackoverflow.com/questions/42075710/given-version-requirement-is-invalid-while-downloading-dependencies", "title": "&quot;given version requirement is invalid&quot; while downloading dependencies", "body": "<p>Following <a href=\"https://github.com/PistonDevelopers/Piston-Tutorials/tree/master/getting-started\" rel=\"nofollow noreferrer\">this example</a>: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build --verbose\nUpdating registry `https://github.com/rust-lang/crates.io-index`\nfailed to parse registry's information for: wayland-client\n\nCaused by:\nthe given version requirement is invalid\n</code></pre>\n\n<p>This happens on every example and builds from other repos. I am running Ubuntu 16.04 LTS and I installed Cargo and Rustc through apt.  Using versions:  rustc 1.7.0 and cargo 0.8.0.</p>\n\n<p>My Cargo.toml from the example:</p>\n\n<pre><code>[package]\n\nname = \"spinning-square\"\nversion = \"0.1.0\"\nauthors = [\n    \"TyOverby &lt;ty@pre-alpha.com&gt;\",\n    \"Nikita Pekin &lt;contact@nikitapek.in&gt;\"\n]\n\n[[bin]]\nname = \"spinning-square\"\n\n[dependencies]\npiston = \"0.31.1\"\npiston2d-graphics = \"0.21.1\"\npistoncore-glutin_window = \"0.35.0\"\npiston2d-opengl_graphics = \"0.40.0\"\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486409502, "post_id": 42075409, "comment_id": 71322978, "body": "<code>(current_dist == None) | (state.cost &lt; *current_dist.unwrap())</code> I can&#39;t imagine that you want a bitwise OR operation there."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486409885, "post_id": 42075409, "comment_id": 71323188, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. You haven&#39;t defined what <code>Node</code>, <code>State</code> or <code>heap</code> are."}, {"owner": {"reputation": 402, "user_id": 5213451, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/66687cc776cdd41e3600bf53368d187d?s=128&d=identicon&r=PG&f=1", "display_name": "Thrastylon", "link": "https://stackoverflow.com/users/5213451/thrastylon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486432598, "post_id": 42075409, "comment_id": 71332138, "body": "I corrected the <code>||</code>. The definition of <code>State</code> seemed implied by the creation of <code>state</code>, and <code>Node</code> and <code>heap</code> didn&#39;t seem relevant (<code>Node</code> is a set of coordinates, <code>heap</code> is a heap)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486436084, "post_id": 42075409, "comment_id": 71333019, "body": "<i>and <code>Node</code> and <code>heap</code> didn&#39;t seem relevant</i> \u2014 then <b>remove them from your question</b>. Again, I strongly encourage you to review what we mean by a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>; emphasis on the <b>Minimal</b>. The reason for doing this is twofold: 1. by reducing the problem, you are more likely to solve it yourself, 2. a reduced problem is easier for <i>other</i> people to quickly understand. These people include answerers <i>and</i> future question askers who find your question."}], "answers": [{"comments": [{"owner": {"reputation": 402, "user_id": 5213451, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/66687cc776cdd41e3600bf53368d187d?s=128&d=identicon&r=PG&f=1", "display_name": "Thrastylon", "link": "https://stackoverflow.com/users/5213451/thrastylon"}, "edited": false, "score": 0, "creation_date": 1486432675, "post_id": 42075975, "comment_id": 71332159, "body": "I corrected the (im)mutable, that was a typo. The pointers given are exactly what I needed."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1574258751, "last_edit_date": 1574258751, "creation_date": 1486410192, "answer_id": 42075975, "question_id": 42075409, "link": "https://stackoverflow.com/questions/42075409/drop-a-immutable-borrow-to-make-a-mutable-borrow/42075975#42075975", "title": "Drop a immutable borrow to make a mutable borrow", "body": "<h1>After non-lexical lifetimes</h1>\n\n<p>Since <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> are now enabled, the original code compiles. That being said, you should still use the <a href=\"https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html\" rel=\"nofollow noreferrer\"><em>entry API</em></a> for efficiency, otherwise you have to hash the key multiple times:</p>\n\n<pre><code>use std::collections::hash_map::Entry;\nuse std::collections::HashMap;\n\nfn main() {\n    let mut dist: HashMap&lt;u8, u8&gt; = HashMap::new();\n\n    let cost = 21;\n\n    match dist.entry(42) {\n        Entry::Vacant(entry) =&gt; {\n            entry.insert(42);\n        }\n        Entry::Occupied(mut entry) =&gt; {\n            if *entry.get() &lt; cost {\n                entry.insert(42);\n            }\n        }\n    }\n}\n</code></pre>\n\n<h1>Before non-lexical lifetimes</h1>\n\n<blockquote>\n  <p>because <code>dist.get</code> triggers a mutable borrow</p>\n</blockquote>\n\n<p>No, <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get\" rel=\"nofollow noreferrer\">it's just an immutable borrow</a>:</p>\n\n<pre><code>pub fn get&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt;\nwhere\n    K: Borrow&lt;Q&gt;,\n    Q: Hash + Eq, \n</code></pre>\n\n<blockquote>\n  <p>I tried a <code>drop</code></p>\n</blockquote>\n\n<p><a href=\"https://stackoverflow.com/q/35765440/155423\">Explicit drops do not affect lifetimes</a>. </p>\n\n<blockquote>\n<pre><code>let current_dist;\n{\n    current_dist = dist.get(&amp;state.node);\n}\n</code></pre>\n</blockquote>\n\n<p>Here you aren't fooling anyone. If the compiler was confused by this, it wouldn't be very good. This <strong>still</strong> has a borrow to the <code>HashMap</code>, there's just some extra blocks scattered about.</p>\n\n<blockquote>\n<pre><code>let current_dist = {|| dist.get(&amp;state.node)}();\n</code></pre>\n</blockquote>\n\n<p>Same here. Returning the reference from a closure is <em>still returning a reference</em>. You really cannot easily trick the compiler into thinking that your reference to the <code>HashMap</code> doesn't exist.</p>\n\n<hr>\n\n<p>You need to use a block to constrain how long the borrow exists. the simplest transformation is something akin to:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut dist: HashMap&lt;u8, u8&gt; = HashMap::new();\n\n    let do_it = {\n        let current_dist = dist.get(&amp;42);\n        current_dist == None || true\n    };\n\n    if do_it {\n        dist.insert(42, 42);\n    }\n}\n</code></pre>\n\n<p>This isn't the prettiest, but some combinators can clean it up:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut dist: HashMap&lt;u8, u8&gt; = HashMap::new();\n\n    let cost = 21;\n\n    if dist.get(&amp;42).map_or(true, |&amp;val| val &lt; cost) {\n        dist.insert(42, 42);\n    }\n}\n</code></pre>\n\n<p>Note that now there's no more implicit panic from the <code>unwrap</code> call.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/47395171/155423\">How to update-or-insert on a Vec?</a></li>\n</ul>\n"}], "owner": {"reputation": 402, "user_id": 5213451, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/66687cc776cdd41e3600bf53368d187d?s=128&d=identicon&r=PG&f=1", "display_name": "Thrastylon", "link": "https://stackoverflow.com/users/5213451/thrastylon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 737, "favorite_count": 0, "accepted_answer_id": 42075975, "answer_count": 1, "score": 3, "last_activity_date": 1574258751, "creation_date": 1486408146, "last_edit_date": 1486432245, "question_id": 42075409, "link": "https://stackoverflow.com/questions/42075409/drop-a-immutable-borrow-to-make-a-mutable-borrow", "title": "Drop a immutable borrow to make a mutable borrow", "body": "<p>I am still learning Rust and when trying to implement Dikjstra as part of a training project, I encountered this peculiar catch. First I define a <code>HashMap</code>:</p>\n\n<pre><code>let mut dist: HashMap&lt;Node, usize&gt; = HashMap::new();\n</code></pre>\n\n<p>And later:</p>\n\n<pre><code>let state = State { node: next_node.clone(), cost: cost + 1 };\nlet current_dist = dist.get(&amp;state.node);\nif (current_dist == None) || (state.cost &lt; *current_dist.unwrap()) {\n    dist.insert(state.node.clone(), state.cost);\n    heap.push(state);\n}\n</code></pre>\n\n<p>Which yields a compile error because <code>dist.get</code> triggers a immutable borrow which stays in scope until after the <code>if ... {...}</code> statement, and in particular when I <code>dist.insert</code>, asking for a mutable borrow.</p>\n\n<p>I think I miss a pattern or a keyword allowing me this type of process. For now I tried a <code>drop</code> at the beginning of the <code>if</code> scope, and other <code>current_dist</code> evaluation such as</p>\n\n<pre><code>let current_dist;\n{\n    current_dist = dist.get(&amp;state.node);\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>let current_dist = {|| dist.get(&amp;state.node)}();\n</code></pre>\n\n<p>but the end of scope of the immutable borrow still happen after the <code>if</code> statement.</p>\n"}, {"tags": ["c++11", "macros", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486385498, "post_id": 42067701, "comment_id": 71307719, "body": "I think in Rust this would be handled directly by the macro, rather than using traits (though you could create the trait yourself). Remember than Rust macros operate on the Abstract Syntax Tree, not text, so you can actually <i>parse</i> your arguments in the macro."}, {"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 0, "creation_date": 1486388569, "post_id": 42067701, "comment_id": 71309704, "body": "Deref can turn &amp;T into T, but if I&#39;m not mistaken there&#39;s no way to know that T isn&#39;t itself some &amp;."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486391298, "post_id": 42067701, "comment_id": 71311520, "body": "@MatthieuM. I don&#39;t think macro can help, e.g. <code>type I32Ref = &amp;&#39;static i32; ...; decay!(I32Ref)</code> should produce <code>i32</code>, but there is no way this is known in the lexical level."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1486392012, "post_id": 42067701, "comment_id": 71311968, "body": "@kennytm: Ah, indeed in the presence of aliases..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1486393570, "post_id": 42067701, "comment_id": 71313102, "body": "@kennytm: I had an idea of creating a <code>trait Decay { type Type; }</code> however... while it can be implemented for both <code>&amp;&#39;a T</code> and <code>&amp;&#39;a mut T</code>, I cannot also implement it for just <code>T</code> as that conflicts."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486394624, "post_id": 42067701, "comment_id": 71313868, "body": "@MatthieuM. You could use specialization to resolve the conflict, but <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md#the-default-keyword\" rel=\"nofollow noreferrer\">then <code>&lt;T as Decay&gt;::Type</code> would never be resolved</a>."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486452769, "post_id": 42072906, "comment_id": 71338675, "body": "Nice! I didn&#39;t know specialization could apply to associated types (never thought about it, really)."}, {"owner": {"reputation": 145, "user_id": 844564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f94dd76e35de04e243fc26a447080f60?s=128&d=identicon&r=PG", "display_name": "Donald Whyte", "link": "https://stackoverflow.com/users/844564/donald-whyte"}, "edited": false, "score": 0, "creation_date": 1486822228, "post_id": 42072906, "comment_id": 71517063, "body": "Nice! This does the job. I&#39;d rather not make my library unstable-only though. I&#39;m going to continue looking into this and see if I can come up with a way to do this using stable-only features."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1486399278, "creation_date": 1486399278, "answer_id": 42072906, "question_id": 42067701, "link": "https://stackoverflow.com/questions/42067701/c11-like-type-decay-in-rust/42072906#42072906", "title": "C+11-Like Type Decay in Rust", "body": "<p>As suggested by <a href=\"https://stackoverflow.com/users/147192/matthieu-m\">Matthieu M.</a> and <a href=\"https://stackoverflow.com/users/224671/kennytm\">kennytm</a> in comments, you can define a trait and use specialization (an unstable feature as of Rust 1.15.0) to achieve this.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(specialization)]\n\nuse std::any::TypeId;\n\ntrait Decay {\n    type Type;\n}\n\nimpl&lt;T&gt; Decay for T {\n    default type Type = T;\n}\n\nimpl&lt;'a, T&gt; Decay for &amp;'a T {\n    type Type = &lt;T as Decay&gt;::Type;\n}\n\nimpl&lt;'a, T&gt; Decay for &amp;'a mut T {\n    type Type = &lt;T as Decay&gt;::Type;\n}\n\nfn foo&lt;T: 'static&gt;() {\n    println!(\"{:?}\", TypeId::of::&lt;T&gt;());\n}\n\nfn bar&lt;T&gt;() where &lt;T as Decay&gt;::Type: 'static {\n    println!(\"{:?}\", TypeId::of::&lt;&lt;T as Decay&gt;::Type&gt;());\n}\n\nfn main() {\n    foo::&lt;&lt;i32 as Decay&gt;::Type&gt;();\n    foo::&lt;&lt;&amp;i32 as Decay&gt;::Type&gt;();\n    foo::&lt;&lt;&amp;mut i32 as Decay&gt;::Type&gt;();\n    foo::&lt;&lt;&amp;&amp;i32 as Decay&gt;::Type&gt;();\n\n    bar::&lt;i32&gt;();\n    bar::&lt;&amp;i32&gt;();\n    bar::&lt;&amp;mut i32&gt;();\n    bar::&lt;&amp;&amp;i32&gt;();\n}\n</code></pre>\n"}], "owner": {"reputation": 145, "user_id": 844564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f94dd76e35de04e243fc26a447080f60?s=128&d=identicon&r=PG", "display_name": "Donald Whyte", "link": "https://stackoverflow.com/users/844564/donald-whyte"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 159, "favorite_count": 0, "accepted_answer_id": 42072906, "answer_count": 1, "score": 4, "last_activity_date": 1486399278, "creation_date": 1486383714, "question_id": 42067701, "link": "https://stackoverflow.com/questions/42067701/c11-like-type-decay-in-rust", "title": "C+11-Like Type Decay in Rust", "body": "<p>In C++11, you can decay a generic type to a value type, removing reference/rvalue semantics and cv-qualifiers, e.g.</p>\n\n<pre><code>decay&lt;int&gt;::type // type is `int`\ndecay&lt;const int&amp;&gt;::type // type is `int`\ndecay&lt;int&amp;&amp;&gt;::type // type is `int`\n</code></pre>\n\n<p>Is there a known mechanism to achieve the same in Rust, that strips reference modifiers, lifetimes and the <code>mut</code> qualifier? e.g.:</p>\n\n<pre><code>decay&lt;u32&gt;::type &lt;--- type is `u32`\ndecay&lt;&amp;u32&gt;::type &lt;--- type is `u32`\ndecay&lt;&amp;mut u32&gt;::type &lt;--- type is `u32`\ndecay&lt;&amp;static u32&gt;::type &lt;--- type is `u32`\n</code></pre>\n\n<p>For background, I'm trying to write a macro that generates a <code>struct</code> that stores the values of a bunch of function arguments matched by the macro. e.g., the macro might contain the args <code>foo: i32, bar: &amp;Vec&lt;String&gt;</code>, and the resultant struct should be:</p>\n\n<pre><code>struct GeneratedStruct {\n    foo: i32,\n    bar: Vec&lt;String&gt;,\n}\n</code></pre>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 20158, "user_id": 254415, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/89d887b50262bbe10225d36d974fdb0c?s=128&d=identicon&r=PG", "display_name": "whitequark", "link": "https://stackoverflow.com/users/254415/whitequark"}, "edited": false, "score": 2, "creation_date": 1486380043, "post_id": 42066381, "comment_id": 71304376, "body": "note that your overall function should be also <code>unsafe</code>; it requires the caller to ensure that utf8_src is indeed in UTF-8 to avoid UB."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1486381109, "post_id": 42066381, "comment_id": 71304991, "body": "<code>let last_index = utf8_src.position(|&amp;b| b == 0).map_or(utf8_src.len(), |i| i - 1)</code>?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486381230, "post_id": 42066381, "comment_id": 71305069, "body": "In this case the first index of a nul byte is needed: eg: <code>memchr(utf8, 0, utf8.len())</code>"}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1486381414, "post_id": 42066381, "comment_id": 71305192, "body": "Ah I misread. If you know there is a null, then <code>let last_index = utf8_src.position(|&amp;b| b == 0).unwrap()</code>?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486381540, "post_id": 42066381, "comment_id": 71305269, "body": "eh, naming <code>last_index</code> may be confusing, though it makes sense in context of being last-index that is checked, and early-exit once nul is found."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1486381931, "post_id": 42066381, "comment_id": 71305494, "body": "@ker, dont think this is code-review, instead I&#39;ll remove my code and post as possible answer."}], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 1, "last_activity_date": 1486575905, "last_edit_date": 1486575905, "creation_date": 1486381972, "answer_id": 42067150, "question_id": 42066381, "link": "https://stackoverflow.com/questions/42066381/how-to-get-a-str-from-a-nul-terminated-byte-slice-if-the-nul-terminator-isnt/42067150#42067150", "title": "How to get a &#39;&amp;str&#39; from a NUL-terminated byte slice if the NUL terminator isn&#39;t at the end of the slice?", "body": "<p>This example finds the first NUL byte using a simple <code>for</code> loop, then uses Rust's standard library to return the slice as a <code>&amp;str</code> (referencing the original data - zero copy).</p>\n\n<p>There may well be a better way to find the first NUL byte using closures:</p>\n\n<pre><code>pub unsafe fn str_from_u8_nul_utf8_unchecked(utf8_src: &amp;[u8]) -&gt; &amp;str {\n    // does Rust have a built-in 'memchr' equivalent? \n    let mut nul_range_end = 1_usize;\n    for b in utf8_src {\n        if *b == 0 {\n            break;\n        }\n        nul_range_end += 1;\n    }\n    return ::std::str::from_utf8_unchecked(&amp;utf8_src[0..nul_range_end]);\n}\n</code></pre>\n\n<hr>\n\n<p>While <code>utf8_src.iter().position(|&amp;c| c == b'\\0').unwrap_or(utf8_src.len());</code> returns the first NUL byte (or the total length), Rust 1.15 does not optimize it into something like <code>memchr</code>, so a <code>for</code> loop might not be such a bad option for now.</p>\n"}, {"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1486383319, "post_id": 42067321, "comment_id": 71306305, "body": "This isn&#39;t an optimal solution since <code>position</code> will take quite a bit longer than, say, something like <code>memchr</code> would on a large string."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1486384614, "post_id": 42067321, "comment_id": 71307150, "body": "@BurntSushi5: Doesn&#39;t seem to be optimized indeed :("}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1486575791, "last_edit_date": 1486575791, "creation_date": 1486382498, "answer_id": 42067321, "question_id": 42066381, "link": "https://stackoverflow.com/questions/42066381/how-to-get-a-str-from-a-nul-terminated-byte-slice-if-the-nul-terminator-isnt/42067321#42067321", "title": "How to get a &#39;&amp;str&#39; from a NUL-terminated byte slice if the NUL terminator isn&#39;t at the end of the slice?", "body": "<p>I would use iterator adaptors to find the index of the first zero byte:</p>\n\n<pre><code>pub unsafe fn str_from_u8_nul_utf8_unchecked(utf8_src: &amp;[u8]) -&gt; &amp;str {\n    let nul_range_end = utf8_src.iter()\n        .position(|&amp;c| c == b'\\0')\n        .unwrap_or(utf8_src.len()); // default to length if no `\\0` present\n    ::std::str::from_utf8_unchecked(&amp;utf8_src[0..nul_range_end])\n}\n</code></pre>\n\n<p>This has the major advantage of requiring one to catch all cases (like no 0 in the array).</p>\n\n<p>If you want the version that checks for well-formed UTF-8:</p>\n\n<pre><code>pub fn str_from_u8_nul_utf8(utf8_src: &amp;[u8]) -&gt; Result&lt;&amp;str, std::str::Utf8Error&gt; {\n    let nul_range_end = utf8_src.iter()\n        .position(|&amp;c| c == b'\\0')\n        .unwrap_or(utf8_src.len()); // default to length if no `\\0` present\n    ::std::str::from_utf8(&amp;utf8_src[0..nul_range_end])\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486779884, "post_id": 42171453, "comment_id": 71507731, "body": "I&#39;d also encourage you to show the non-unchecked version, for the other people who find this answer but can&#39;t / don&#39;t want to guarantee the string is already UTF-8."}], "tags": [], "owner": {"reputation": 304, "user_id": 465831, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/HdNQj.jpg?s=128&g=1", "display_name": "David Wood", "link": "https://stackoverflow.com/users/465831/david-wood"}, "is_accepted": false, "score": 2, "last_activity_date": 1486788857, "last_edit_date": 1486788857, "creation_date": 1486779316, "answer_id": 42171453, "question_id": 42066381, "link": "https://stackoverflow.com/questions/42066381/how-to-get-a-str-from-a-nul-terminated-byte-slice-if-the-nul-terminator-isnt/42171453#42171453", "title": "How to get a &#39;&amp;str&#39; from a NUL-terminated byte slice if the NUL terminator isn&#39;t at the end of the slice?", "body": "<p>Three possible other ways of doing this, mostly using only functions from std.</p>\n\n<pre><code>use std::ffi::CStr;\nuse std::str;\n\nfn str_from_null_terminated_utf8_safe(s: &amp;[u8]) -&gt; &amp;str {\n    if s.iter().any(|&amp;x| x == 0) {\n        unsafe { str_from_null_terminated_utf8(s) }\n    } else {\n        str::from_utf8(s).unwrap()\n    }\n}\n\n// unsafe: s must contain a null byte\nunsafe fn str_from_null_terminated_utf8(s: &amp;[u8]) -&gt; &amp;str {\n    CStr::from_ptr(s.as_ptr() as *const _).to_str().unwrap()\n}\n\n// unsafe: s must contain a null byte, and be valid utf-8\nunsafe fn str_from_null_terminated_utf8_unchecked(s: &amp;[u8]) -&gt; &amp;str {\n    str::from_utf8_unchecked(CStr::from_ptr(s.as_ptr() as *const _).to_bytes())\n}\n</code></pre>\n\n<hr>\n\n<p>As a slight aside: benchmark results for all the options in this thread:</p>\n\n<p>With <code>s = b\"\\0\"</code></p>\n\n<pre><code>test dtwood::bench_str_from_null_terminated_utf8           ... bench:           9 ns/iter (+/- 0)\ntest dtwood::bench_str_from_null_terminated_utf8_safe      ... bench:          10 ns/iter (+/- 3)\ntest dtwood::bench_str_from_null_terminated_utf8_unchecked ... bench:           5 ns/iter (+/- 1)\ntest ideasman42::bench_str_from_u8_nul_utf8_unchecked      ... bench:           1 ns/iter (+/- 0)\ntest ker::bench_str_from_u8_nul_utf8                       ... bench:           4 ns/iter (+/- 0)\ntest ker::bench_str_from_u8_nul_utf8_unchecked             ... bench:           1 ns/iter (+/- 0)\n</code></pre>\n\n<p>with <code>s = b\"abcdefghij\\0klmnop\"</code></p>\n\n<pre><code>test dtwood::bench_str_from_null_terminated_utf8           ... bench:          15 ns/iter (+/- 2)\ntest dtwood::bench_str_from_null_terminated_utf8_safe      ... bench:          20 ns/iter (+/- 2)\ntest dtwood::bench_str_from_null_terminated_utf8_unchecked ... bench:           6 ns/iter (+/- 0)\ntest ideasman42::bench_str_from_u8_nul_utf8_unchecked      ... bench:           7 ns/iter (+/- 0)\ntest ker::bench_str_from_u8_nul_utf8                       ... bench:          15 ns/iter (+/- 2)\ntest ker::bench_str_from_u8_nul_utf8_unchecked             ... bench:           5 ns/iter (+/- 0)\n</code></pre>\n\n<p>with <code>s = b\"abcdefghij\" * 512 + \"\\0klmnopqrs\"</code></p>\n\n<pre><code>test dtwood::bench_str_from_null_terminated_utf8           ... bench:         351 ns/iter (+/- 35)\ntest dtwood::bench_str_from_null_terminated_utf8_safe      ... bench:       1,987 ns/iter (+/- 274)\ntest dtwood::bench_str_from_null_terminated_utf8_unchecked ... bench:         170 ns/iter (+/- 18)\ntest ideasman42::bench_str_from_u8_nul_utf8_unchecked      ... bench:       2,466 ns/iter (+/- 292)\ntest ker::bench_str_from_u8_nul_utf8                       ... bench:       1,971 ns/iter (+/- 209)\ntest ker::bench_str_from_u8_nul_utf8_unchecked             ... bench:       1,828 ns/iter (+/- 205)\n</code></pre>\n\n<p>So if you're super concerned about performance, probably best to benchmark with your particular data set - <code>dtwood::str:from_null_terminated_utf8_unchecked</code> seems to perform better with longer strings, but <code>ker::bench_str_from_u8_nul_utf8_unchecked</code> does better on small (&lt; 20 character) strings.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1839, "favorite_count": 0, "accepted_answer_id": 42067321, "answer_count": 3, "score": 5, "last_activity_date": 1486788857, "creation_date": 1486379571, "last_edit_date": 1486575574, "question_id": 42066381, "link": "https://stackoverflow.com/questions/42066381/how-to-get-a-str-from-a-nul-terminated-byte-slice-if-the-nul-terminator-isnt", "title": "How to get a &#39;&amp;str&#39; from a NUL-terminated byte slice if the NUL terminator isn&#39;t at the end of the slice?", "body": "<p>While <code>CStr</code> is typically used for FFI, I am reading from a <code>&amp;[u8]</code> which is NUL-terminated and is ensured to be valid UTF-8 so no checks are needed.</p>\n\n<p>However the NUL terminator isn't necessarily at the end of the slice. What's a good way to get this as a <code>&amp;str</code>?</p>\n\n<p>It was suggested to use <code>CStr::from_bytes_with_nul</code>, but this panics on an interior <code>\\0</code> character (when the <code>\\0</code> isn't the last character).</p>\n"}, {"tags": ["rust", "rusoto"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486375619, "post_id": 42064853, "comment_id": 71301583, "body": "Does <code>fn get_task_definition_revisions&lt;P,D&gt;(client: &amp;EcsClient&lt;P, D&gt;) {...}</code> work?  You need to declare any type parameters you use in the signature."}, {"owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486376104, "post_id": 42064853, "comment_id": 71301868, "body": "@ChrisEmerson Unfortunately not. I get the errors <code>the trait rusoto::ProvideAwsCredentials is not implemented for ProvideAwsCredentials</code> and <code>the trait rusoto::ProvideAwsCredentials is not implemented for ProvideAwsCredentials</code>. What should the calling signature look like? I still have it as <code>get_task_definition_revisions(&amp;client);</code>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486383546, "post_id": 42067179, "comment_id": 71306452, "body": "Note: you can also say <code>fn get_task_definition_revisions&lt;P, D&gt;(client: &amp;EcsClient&lt;P, D&gt;) where P: ProvideAwsCredentials, D: DispatchSignedRequest { }</code> which makes the signature more readable (IMHO)"}], "tags": [], "owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "is_accepted": false, "score": 1, "last_activity_date": 1486382082, "creation_date": 1486382082, "answer_id": 42067179, "question_id": 42064853, "link": "https://stackoverflow.com/questions/42064853/how-do-i-pass-a-struct-with-type-parameters-as-a-function-argument/42067179#42067179", "title": "How do I pass a struct with type parameters as a function argument?", "body": "<p>I was understanding the syntax incorrectly. It seems that <code>P</code> and <code>D</code> are placeholders, like <code>T</code> would be. I need to specify <em>what those types are</em>, so the signature now looks like this:</p>\n\n<pre><code>fn get_task_definition_revisions&lt;P: ProvideAwsCredentials, D: DispatchSignedRequest&gt;(client: &amp;EcsClient&lt;P, D&gt;) {\n    ...\n}\n</code></pre>\n\n<p>I don't use <code>P</code> or <code>D</code> in the function body, but they must be declared.</p>\n\n<p>The full example now looks like:</p>\n\n<pre><code>extern crate rusoto;\n\nuse std::default::Default;\n\nuse rusoto::{\n    DefaultCredentialsProvider,\n    Region,\n    ProvideAwsCredentials,\n    DispatchSignedRequest\n};\nuse rusoto::ecs::{ StringList, EcsClient, ListTaskDefinitionsRequest };\nuse rusoto::default_tls_client;\n\nfn get_task_definition_revisions&lt;P: ProvideAwsCredentials, D: DispatchSignedRequest&gt;(client: &amp;EcsClient&lt;P, D&gt;) {\n    let res = client.list_task_definitions(&amp;ListTaskDefinitionsRequest {\n        family_prefix: None,\n        max_results: None,\n        next_token: None,\n        sort: None,\n        status: Some(\"ACTIVE\".to_string()),\n    });\n\n    // ...\n}\n\nfn main() {\n    let provider = DefaultCredentialsProvider::new().unwrap();\n    let client = EcsClient::new(default_tls_client().unwrap(), provider, Region::EuWest1);\n\n    get_task_definition_revisions(&amp;client);\n}\n</code></pre>\n\n<p>I'm still not entirely sure why this works or is required but I hope this answer helps someone else.</p>\n"}, {"comments": [{"owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "edited": false, "score": 0, "creation_date": 1486388623, "post_id": 42067858, "comment_id": 71309739, "body": "Thank you very much, this clarifies the problem for me. I ended up writing <code>fn get_task_definition_revisions&lt;P: ProvideAwsCredentials, D: DispatchSignedRequest&gt;(client: &amp;EcsClient&lt;P, D&gt;) {</code>. Is this equivalent? I read that <code>where</code> is helpful when one wants to use many types, but as I know I&#39;m only ever going to use <code>ProvideAwsCredentials</code> and <code>DispatchSignedRequest</code> is it acceptable to use the syntax that I did?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "edited": false, "score": 1, "creation_date": 1486392052, "post_id": 42067858, "comment_id": 71312005, "body": "@Bojangles: Both are strictly equivalent. I myself prefer using <code>where</code> clauses to have the list of arguments close to the function name."}, {"owner": {"reputation": 2146, "user_id": 3909469, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/296075c108bc9259244cbf2ed16a1298?s=128&d=identicon&r=PG&f=1", "display_name": "confused00", "link": "https://stackoverflow.com/users/3909469/confused00"}, "edited": false, "score": 0, "creation_date": 1543092155, "post_id": 42067858, "comment_id": 93795762, "body": "this sounds like it violates DRY principles, and if a struct changes its trait bounds, i have to change all functions that take the struct as an argument..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2146, "user_id": 3909469, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/296075c108bc9259244cbf2ed16a1298?s=128&d=identicon&r=PG&f=1", "display_name": "confused00", "link": "https://stackoverflow.com/users/3909469/confused00"}, "edited": false, "score": 0, "creation_date": 1543147350, "post_id": 42067858, "comment_id": 93805100, "body": "@confused00: It doesn&#39;t, actually, violates DRY. DRY is not about the absence of repetition for its own sake, it&#39;s about the absence of duplication which will later down the road cause you to fix one instance of the &quot;pattern&quot; and not the other. Since the Rust compiler enforces that the bounds be explicit in all use sites, you cannot forget to update one, and therefore the repetition does not cause latent bugs."}, {"owner": {"reputation": 2146, "user_id": 3909469, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/296075c108bc9259244cbf2ed16a1298?s=128&d=identicon&r=PG&f=1", "display_name": "confused00", "link": "https://stackoverflow.com/users/3909469/confused00"}, "edited": false, "score": 0, "creation_date": 1543149576, "post_id": 42067858, "comment_id": 93805676, "body": "if the original trait bounds relax, then the compiler won&#39;t enforce you to also relax your functions, no?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2146, "user_id": 3909469, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/296075c108bc9259244cbf2ed16a1298?s=128&d=identicon&r=PG&f=1", "display_name": "confused00", "link": "https://stackoverflow.com/users/3909469/confused00"}, "edited": false, "score": 0, "creation_date": 1543150966, "post_id": 42067858, "comment_id": 93806033, "body": "@confused00: I don&#39;t think so, no. The function would still be correct, albeit possibly unnecessarily constrained; since you could voluntarily over-constrain a function definition to leave yourself room for future backward-compatible changes, the compiler would not be allowed to reject the code. There may be warnings, from either compiler or linters, to help catch such cases, but I&#39;ve never run into this case (or never realized I did). Fortunately, it&#39;s an easily-fixed mistake, as loosening a function requirement is backward-compatible API-wise."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1486384178, "creation_date": 1486384178, "answer_id": 42067858, "question_id": 42064853, "link": "https://stackoverflow.com/questions/42064853/how-do-i-pass-a-struct-with-type-parameters-as-a-function-argument/42067858#42067858", "title": "How do I pass a struct with type parameters as a function argument?", "body": "<p>The problem is that <code>EcsClient</code> is not a type, it's a blueprint to build a type (also known as \"type constructor\").</p>\n\n<p>As a result, you cannot use <em>just</em> <code>EcsClient</code> when a type is required, be it in functions or for struct members; instead, each time, you must use it to build a type by specifying its generic parameters.</p>\n\n<p>Thus, the first step is to introduce the type parameters:</p>\n\n<pre><code>fn get_task_definition_revisions&lt;P, D&gt;(client: &amp;EcsClient&lt;P, D&gt;) {}\n</code></pre>\n\n<p>Now, however, the compiler will complain that the <code>P</code> and <code>D</code> are insufficiently constrained: <code>EcsClient</code> only accept a very specific kind of <code>P</code> and <code>D</code>!</p>\n\n<p>The next step, thus, is to look-up the bounds that are specified for <code>P</code> and <code>D</code> in the definition of <code>EcsClient</code> and apply them. It's just copy/paste at this point:</p>\n\n<pre><code>fn get_task_definition_revisions&lt;P, D&gt;(client: &amp;EcsClient&lt;P, D&gt;)\n    where P: ProvideAwsCredentials,\n          D: DispatchSignedRequest\n{\n}\n</code></pre>\n\n<p>And then you're golden.</p>\n\n<p>If you need <em>more</em> capabilities of <code>P</code> or <code>D</code> for this specific function, feel free to constrain them adequately by adding more bounds using <code>+</code>:</p>\n\n<pre><code>fn get_task_definition_revisions&lt;P, D&gt;(client: &amp;EcsClient&lt;P, D&gt;)\n    where P: ProvideAwsCredentials + 'static,\n          D: DispatchSignedRequest\n{\n}\n</code></pre>\n\n<hr>\n\n<p><em>If you wonder why Rust chose to have you repeat the bounds for <code>P</code> and <code>D</code> when it could perfectly infer them, it's because it cares about you. More specifically, it cares about you 6 months from now, and the next maintainer to come. So, taking the stance that you write once and read many, it forces you to copy the bounds so that later you don't have to wonder what they are, and drill down recursively in each type/function used to painfully aggregate all the pieces. In Rust, the next time you read the function, you'll have all the information right there.</em></p>\n"}], "owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3816, "favorite_count": 1, "accepted_answer_id": 42067858, "answer_count": 2, "score": 2, "last_activity_date": 1486388379, "creation_date": 1486374979, "last_edit_date": 1495540900, "question_id": 42064853, "link": "https://stackoverflow.com/questions/42064853/how-do-i-pass-a-struct-with-type-parameters-as-a-function-argument", "title": "How do I pass a struct with type parameters as a function argument?", "body": "<p>How do I pass an instance of <a href=\"https://rusoto.github.io/rusoto/rusoto/ecs/struct.EcsClient.html\" rel=\"nofollow noreferrer\"><code>EcsClient</code></a> with the signature <code>impl&lt;P, D&gt; EcsClient&lt;P, D&gt; where P: ProvideAwsCredentials, D: DispatchSignedRequest</code> to a function as a reference in Rust? My attempt is thus:</p>\n\n<pre><code>extern crate rusoto;\n\nuse std::default::Default;\n\nuse rusoto::{ DefaultCredentialsProvider, Region };\nuse rusoto::ecs::{ EcsClient };\nuse rusoto::default_tls_client;\n\nfn get_task_definition_revisions(client: &amp;EcsClient) {\n    // Use EscClient instance here\n}\n\nfn main() {\n    let provider = DefaultCredentialsProvider::new().unwrap();\n    let client = EcsClient::new(default_tls_client().unwrap(), provider, Region::EuWest1).unwrap();\n\n    get_task_definition_revisions(&amp;client);\n\n}\n</code></pre>\n\n<p>This gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0243]: wrong number of type arguments: expected 2, found 0\n --&gt; src/main.rs:9:43\n  |\n9 | fn get_task_definition_revisions(client: &amp;EcsClient) {\n  |                                           ^^^^^^^^^ expected 2 type arguments\n</code></pre>\n\n<p>My attempted fix for this is such:</p>\n\n<pre><code>extern crate rusoto;\n\nuse std::default::Default;\n\nuse rusoto::{\n    DefaultCredentialsProvider,\n    Region,\n    ProvideAwsCredentials,\n    DispatchSignedRequest\n};\nuse rusoto::ecs::{ EcsClient, ListTaskDefinitionsRequest };\nuse rusoto::default_tls_client;\n\nfn get_task_definition_revisions(client: &amp;EcsClient&lt;ProvideAwsCredentials, DispatchSignedRequest&gt;) {\n    // Use EcsClient instance here\n}\n\nfn main() {\n    let provider = DefaultCredentialsProvider::new().unwrap();\n    let client = EcsClient::new(default_tls_client().unwrap(), provider, Region::EuWest1);\n\n    get_task_definition_revisions(&amp;client);\n}\n</code></pre>\n\n<p>Which gives me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `rusoto::ProvideAwsCredentials + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:14:1\n   |\n14 |   fn get_task_definition_revisions(client: &amp;EcsClient&lt;P, D&gt;) {\n   |  _^ starting here...\n15 | |  let defs = client.list_task_definitions(&amp;ListTaskDefinitionsRequest {\n16 | |      family_prefix: None,\n17 | |      max_results: None,\n18 | |      next_token: None,\n19 | |      sort: None,\n20 | |      status: Some(\"ACTIVE\".to_string()),\n21 | |  });\n22 | | }\n   | |_^ ...ending here: the trait `std::marker::Sized` is not implemented for `rusoto::ProvideAwsCredentials + 'static`\n   |\n   = note: `rusoto::ProvideAwsCredentials + 'static` does not have a constant size known at compile-time\n   = note: required by `rusoto::ecs::EcsClient`\n\nerror[E0277]: the trait bound `rusoto::DispatchSignedRequest + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:14:1\n   |\n14 |   fn get_task_definition_revisions(client: &amp;EcsClient&lt;P, D&gt;) {\n   |  _^ starting here...\n15 | |  let defs = client.list_task_definitions(&amp;ListTaskDefinitionsRequest {\n16 | |      family_prefix: None,\n17 | |      max_results: None,\n18 | |      next_token: None,\n19 | |      sort: None,\n20 | |      status: Some(\"ACTIVE\".to_string()),\n21 | |  });\n22 | | }\n   | |_^ ...ending here: the trait `std::marker::Sized` is not implemented for `rusoto::DispatchSignedRequest + 'static`\n   |\n   = note: `rusoto::DispatchSignedRequest + 'static` does not have a constant size known at compile-time\n   = note: required by `rusoto::ecs::EcsClient`\n</code></pre>\n\n<p>This feels like a rabbit hole I shouldn't be going down.</p>\n\n<p>I've also tried changing the function signature to accept generics, however the <code>EcsClient</code> is a struct not a trait. Googling doesn't provide much help because I don't know the correct terms to search for.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/19649005/why-using-rust-does-passing-a-mutable-struct-to-a-function-result-in-immutable-f\">This question</a> seems to imply that I should be able to declare a function like <code>fn my_func(client: &amp;EcsClient) { ... }</code> and it will work, so why doesn't the above example?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "edited": false, "score": 0, "creation_date": 1486372050, "post_id": 42063537, "comment_id": 71299357, "body": "Why are you deriving and the manually implementing <code>Serialize</code> for <code>User</code>? Just use the derived Serialization and it should work as far as I can tell."}, {"owner": {"reputation": 5, "user_id": 6096414, "user_type": "registered", "profile_image": "https://graph.facebook.com/1841760542630981/picture?type=large", "display_name": "Lion Orange", "link": "https://stackoverflow.com/users/6096414/lion-orange"}, "reply_to_user": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "edited": false, "score": 0, "creation_date": 1486373031, "post_id": 42063537, "comment_id": 71299898, "body": "I thought that I do not need that.  However, it is required at compile time.  1. Comment out <code>impl Serialize for User</code> 2. Comment out <code>let serialized = serde_json :: to_string (&amp; query) .unwrap ();</code> 3. <code>$ cargo run</code>  <code>Template::render(&quot;index&quot;, &amp;query) &#47;&#47; error the trait &#39;serde::ser::Serialize&#39; is not implemented for &#39;mlib::models::User&#39;</code>"}, {"owner": {"reputation": 5, "user_id": 6096414, "user_type": "registered", "profile_image": "https://graph.facebook.com/1841760542630981/picture?type=large", "display_name": "Lion Orange", "link": "https://stackoverflow.com/users/6096414/lion-orange"}, "reply_to_user": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "edited": false, "score": 0, "creation_date": 1486374256, "post_id": 42063537, "comment_id": 71300744, "body": "@belst Please let me teach if you do not mind."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486388607, "post_id": 42063537, "comment_id": 71309728, "body": "Welcome to Stack Overflow! Your English is fine, but the code is not up to the standards expected here. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Ideally, you would to provide a single code block, <i>inside this question</i>, that an answerer could copy and paste locally to generate the same error. I can almost guarantee that you can remove some large part of your question (maybe Diesel?) and replace it with hard-coded values to eliminate it as a possible source of the error."}, {"owner": {"reputation": 5, "user_id": 6096414, "user_type": "registered", "profile_image": "https://graph.facebook.com/1841760542630981/picture?type=large", "display_name": "Lion Orange", "link": "https://stackoverflow.com/users/6096414/lion-orange"}, "edited": false, "score": 0, "creation_date": 1486397825, "post_id": 42063537, "comment_id": 71316128, "body": "Thank you for editing. I would like to ask questions from the next carefully."}], "answers": [{"comments": [{"owner": {"reputation": 5, "user_id": 6096414, "user_type": "registered", "profile_image": "https://graph.facebook.com/1841760542630981/picture?type=large", "display_name": "Lion Orange", "link": "https://stackoverflow.com/users/6096414/lion-orange"}, "edited": false, "score": 0, "creation_date": 1486398305, "post_id": 42069738, "comment_id": 71316455, "body": "Apparently I seemed to be terribly confused.  As you said, i could implement it with HashMap. However, it was lost sight of all the time due to other errors. Thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1486390014, "creation_date": 1486390014, "answer_id": 42069738, "question_id": 42063537, "link": "https://stackoverflow.com/questions/42063537/how-to-display-the-value-retrieved-using-diesel-in-html-using-a-tera-template-in/42069738#42069738", "title": "How to display the value retrieved using Diesel in HTML using a Tera template in Rocket.rs", "body": "<p>The error message is telling you everything you need to know:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>context isn't an object\n</code></pre>\n\n<p>And what is <code>context</code>? Check out the docs for <code>Template::render</code>:</p>\n\n<pre><code>fn render&lt;S, T&gt;(name: S, context: &amp;T) -&gt; Template \n    where S: AsRef&lt;str&gt;,\n          T: Serialize,\n</code></pre>\n\n<p>This <a href=\"/help/mcve\">MCVE</a> shows the problem:</p>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>#![feature(plugin)]\n#![plugin(rocket_codegen)]\n\nextern crate rocket;\nextern crate rocket_contrib;\n\nuse rocket_contrib::Template;\n\n#[get(\"/\")]\nfn index() -&gt; Template {\n    let serialized = \"hello\".to_string();\n    Template::render(\"index\", &amp;serialized)\n}\n\nfn main() {\n    rocket::ignite().mount(\"/\", routes![index]).launch();\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[dependencies]\nrocket = \"0.1.6\"\nrocket_codegen = \"0.1.6\"\n\n[dependencies.rocket_contrib]\nversion = \"0.1.6\"\nfeatures = ['tera_templates']\n</code></pre>\n\n<p><strong>templates/index.html.tera</strong></p>\n\n<pre><code>&lt;html /&gt;\n</code></pre>\n\n<p>Most templating engines work against a data structure that maps a name to a value. In many cases, this is something as simple as a <code>HashMap</code>, but Rocket allows you to pass in anything that can be serialized. This is <em>intended</em> to allow passing in a struct, but it also allows you to pass in things that <em>do not map names to values</em>, like a pure string.</p>\n\n<p>You have two choices:</p>\n\n<ol>\n<li>Create a <code>HashMap</code> (or maybe a <code>BTreeMap</code>) of values.</li>\n<li>Implement <code>Serialize</code> for a struct and pass that in.</li>\n</ol>\n\n<p>Here's the first option:</p>\n\n<pre><code>use std::collections::HashMap;\n\nlet mut serialized = HashMap::new();\nserialized.insert(\"greeting\", \"hello\");\nTemplate::render(\"index\", &amp;serialized)\n</code></pre>\n"}], "owner": {"reputation": 5, "user_id": 6096414, "user_type": "registered", "profile_image": "https://graph.facebook.com/1841760542630981/picture?type=large", "display_name": "Lion Orange", "link": "https://stackoverflow.com/users/6096414/lion-orange"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 42069738, "answer_count": 1, "score": -1, "last_activity_date": 1486390014, "creation_date": 1486370591, "last_edit_date": 1486389529, "question_id": 42063537, "link": "https://stackoverflow.com/questions/42063537/how-to-display-the-value-retrieved-using-diesel-in-html-using-a-tera-template-in", "title": "How to display the value retrieved using Diesel in HTML using a Tera template in Rocket.rs", "body": "<p>I want to display a value retrieved from the database with Diesel and serve it as HTML with Rocket.rs. </p>\n\n<p><a href=\"https://github.com/lion-man44/sandbox-rocket/tree/6ed2db440e3543c32406cf5c6aade6930e114f6a/src\" rel=\"nofollow noreferrer\">The sample code is here.</a></p>\n\n<p>It receives <code>User {id: 1, name: \"yamada\"}</code> from the DB in <code># [get (\"/\")]</code> of <strong>src/main.rs</strong> and tries to render it with a template.</p>\n\n<p>This error is returned:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Error: Error rendering Tera template 'index': Failed to value_render 'index.html.tera': context isn't an object\n</code></pre>\n"}, {"tags": ["string", "utf-8", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486372557, "post_id": 42063590, "comment_id": 71299625, "body": "Wouldn&#39;t it be better to write <code>let mut last_index = ::std::cmp::min(utf8_dst_len - 1, str_src.len());</code> for the second example? This way its not counting down one-by-one when the string is smaller then the <code>[u8]</code>?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486373822, "post_id": 42063590, "comment_id": 71300422, "body": "Have a slight preference for this version of the second example, <a href=\"https://bitbucket.org/snippets/ideasman42/GqB8o\" rel=\"nofollow noreferrer\">bitbucket.org/snippets/ideasman42/GqB8o</a> - maybe its just personal preference, but it avoids running <code>is_char_boundary</code> when its not needed, making it more explicit when the string needs to be truncated."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486374031, "post_id": 42063590, "comment_id": 71300565, "body": "I&#39;d probably also return an <code>enum</code> with a different variant if it were truncated, but I decided that was out of scope here."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1486374785, "post_id": 42063590, "comment_id": 71301077, "body": "@ideasman42: Note that <code>is_char_boundary</code> is VERY simple (<a href=\"http://blog.vrinek.io/rust/doc/src/core/str/mod.rs.html#1553-1560\" rel=\"nofollow noreferrer\">blog.vrinek.io/rust/doc/src/core/str/mod.rs.html#1553-1560</a>)&zwnj;&#8203;, it&#39;s basically <code>byte &lt; 128u8 || byte &gt;= 192u8</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486374878, "post_id": 42063590, "comment_id": 71301126, "body": "@ChrisEmerson: The <code>last_index &gt; 0</code> is unnecessary in your while loop. if <code>last_index</code> is 0, then it&#39;s a char boundary because of <code>str</code> invariants."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486375331, "post_id": 42063590, "comment_id": 71301429, "body": "@MatthieuM. Yes, good point!  Though I&#39;d have to add a comment to explain why it&#39;s not needed."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486376235, "post_id": 42063590, "comment_id": 71301962, "body": "@Matthieu M. right, the point is more that the common-code-path for non-truncating string copying can be kept simple, so it may as well be: ( updated <a href=\"http://bitbucket.org/snippets/ideasman42/GqB8o\" rel=\"nofollow noreferrer\">bitbucket.org/snippets/ideasman42/GqB8o</a> )"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486376523, "post_id": 42063590, "comment_id": 71302140, "body": "@ideasman42: Maybe... to be honest I&#39;m not sure which is more readable or which generates better code. I somehow do wish that there was a <code>str.truncate</code> method, to be honest, that would take care of that... though how to define whether it truncates before or after the character when it falls straight in the middle could make things &quot;interesting&quot;."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 4, "last_activity_date": 1486372780, "last_edit_date": 1486372780, "creation_date": 1486370827, "answer_id": 42063590, "question_id": 42063162, "link": "https://stackoverflow.com/questions/42063162/efficient-truncating-string-copy-str-to-u8-utf8-aware-strlcpy/42063590#42063590", "title": "Efficient truncating string copy `str` to `[u8]` (utf8 aware strlcpy)?", "body": "<p>Rust's <code>str</code> has a handy method <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.char_indices\" rel=\"nofollow noreferrer\"><code>char_indices</code></a> for when you need to know the actual character boundaries.  This would immediately simplify your function somewhat:</p>\n\n<pre><code>pub fn strlcpy_utf8(utf8_dst: &amp;mut [u8], str_src: &amp;str) -&gt; usize {\n    let utf8_dst_len = utf8_dst.len();\n    if utf8_dst_len == 0 {\n        return 0;\n    }\n    let mut last_index = 0;\n    for (idx, _) in str_src.char_indices() {\n        if (idx+1) &gt; utf8_dst_len {\n            break;\n        }\n        last_index = idx;\n    }\n    utf8_dst[0..last_index].copy_from_slice(&amp;str_src.as_bytes()[0..last_index]);\n    utf8_dst[last_index] = 0;\n    return last_index + 1;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0bdca1ca8da4afe0a137e81d591f6fec&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>However you don't actually need to iterate through every character except when copying, as it turns out it's easy to find a boundary in UTF8; Rust has <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.is_char_boundary\" rel=\"nofollow noreferrer\"><code>str::is_char_boundary()</code></a>.  This lets you instead look backwards from the end:</p>\n\n<pre><code>pub fn strlcpy_utf8(utf8_dst: &amp;mut [u8], str_src: &amp;str) -&gt; usize {\n    let utf8_dst_len = utf8_dst.len();\n    if utf8_dst_len == 0 {\n        return 0;\n    }\n    let mut last_index = min(utf8_dst_len-1, str_src.len());\n    while last_index &gt; 0 &amp;&amp; !str_src.is_char_boundary(last_index) {\n        last_index -= 1;\n    }\n    utf8_dst[0..last_index].copy_from_slice(&amp;str_src.as_bytes()[0..last_index]);\n    utf8_dst[last_index] = 0;\n    return last_index + 1;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=713e8cc7298bc31351e49da68d70dca5&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": -1, "last_activity_date": 1486426585, "last_edit_date": 1486426585, "creation_date": 1486376622, "answer_id": 42065393, "question_id": 42063162, "link": "https://stackoverflow.com/questions/42063162/efficient-truncating-string-copy-str-to-u8-utf8-aware-strlcpy/42065393#42065393", "title": "Efficient truncating string copy `str` to `[u8]` (utf8 aware strlcpy)?", "body": "<p>Based on Chris Emerson's answer and @Matthieu-m's suggestion to remove a redundant check.</p>\n\n<pre><code>// returns the number of bytes written to\npub fn strlcpy_utf8(utf8_dst: &amp;mut [u8], str_src: &amp;str) -&gt; usize {\n    let utf8_dst_len = utf8_dst.len();\n    if utf8_dst_len == 0 {\n        return 0;\n    }\n    // truncate if 'str_src' is too long\n    let mut last_index = str_src.len();\n    if last_index &gt;= utf8_dst_len {\n        last_index = utf8_dst_len - 1;\n        // no need to check last_index &gt; 0 here,\n        // is_char_boundary covers that case\n        while !str_src.is_char_boundary(last_index) {\n            last_index -= 1;\n        }\n    }\n    utf8_dst[0..last_index].clone_from_slice(&amp;str_src.as_bytes()[0..last_index]);\n    utf8_dst[last_index] = 0;\n    return last_index + 1;\n}\n</code></pre>\n\n<hr>\n\n<p><em>@ChrisEmerson: I'm posting this since it's the code I'm going to use for my project, feel free to update your answer with the changes if you like and I'll remove this answer.</em></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 238, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1486524344, "creation_date": 1486369196, "last_edit_date": 1486524344, "question_id": 42063162, "link": "https://stackoverflow.com/questions/42063162/efficient-truncating-string-copy-str-to-u8-utf8-aware-strlcpy", "title": "Efficient truncating string copy `str` to `[u8]` (utf8 aware strlcpy)?", "body": "<p>While Rust provides <code>str.as_bytes</code>, I'm looking to copy a string into a fixed sized buffer, where only full unicode-scalar-values are copied into the buffer, and are instead truncated with a null terminator written at the end, in C terms, I'd call this a <code>utf8</code> aware <code>strlcpy</code> <em>(that is - it copies into a fixed size buffer and ensures its null terminated)</em>.</p>\n\n<hr>\n\n<p>This is a function I came up with, but I expect there are better ways to do this in Rust:</p>\n\n<pre><code>// return the number of bytes written to\npub fn strlcpy_utf8(utf8_dst: &amp;mut [u8], str_src: &amp;str) -&gt; usize {\n    let utf8_dst_len = utf8_dst.len();\n    if utf8_dst_len == 0 {\n        return 0;\n    }\n    let mut index: usize = 0;\n    if utf8_dst_len &gt; 1 {\n        let mut utf8_buf: [u8; 4] = [0; 4];\n        for c in str_src.chars() {\n            let len_utf8 = c.len_utf8();\n            let index_next = index + len_utf8;\n            c.encode_utf8(&amp;mut utf8_buf);\n            if index_next &gt;= utf8_dst_len {\n                break;\n            }\n            utf8_dst[index..index_next].clone_from_slice(&amp;utf8_buf[0..len_utf8]);\n            index = index_next;\n        }\n    }\n    utf8_dst[index] = 0;\n    return index + 1;\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Note):</strong> I realize this isn't ideal since multiple <code>UCS</code> may make up a single glyph, however the result will at least be able to decoded back into a <code>str</code>.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 1518, "user_id": 802500, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54cb6e5f1e23129af9e91ea9b31eaace?s=128&d=identicon&r=PG", "display_name": "Justin Blank", "link": "https://stackoverflow.com/users/802500/justin-blank"}, "edited": false, "score": 0, "creation_date": 1486324167, "post_id": 42056422, "comment_id": 71285394, "body": "I&#39;m too new to the language to tell you all of your options, but it looks a bit like you&#39;re trying to do OO style sub-typing. Have you tried using an enum of some kind?"}, {"owner": {"reputation": 111, "user_id": 7520158, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e80a6f8085c0270eedc79bf1c00dc09a?s=128&d=identicon&r=PG", "display_name": "Jack Lund", "link": "https://stackoverflow.com/users/7520158/jack-lund"}, "reply_to_user": {"reputation": 1518, "user_id": 802500, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54cb6e5f1e23129af9e91ea9b31eaace?s=128&d=identicon&r=PG", "display_name": "Justin Blank", "link": "https://stackoverflow.com/users/802500/justin-blank"}, "edited": false, "score": 1, "creation_date": 1486326640, "post_id": 42056422, "comment_id": 71286328, "body": "@JustinBlank Tried that, but there&#39;s nowhere to put the num AFAICT - you can&#39;t add an enum to a trait, and if I make a global enum, it feels very kludgey. The docs for Any imply that if your type is an Any, you should be able to do the kind of casting I&#39;m doing - hence my question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486327485, "post_id": 42056422, "comment_id": 71286637, "body": "Your edit doesn&#39;t make sense to me, and I&#39;m thinking that there&#39;s a terminology difference. You are trying to convert a <code>&amp;Foo</code> to an <code>&amp;Any</code>, <i>going upward in the hierarchy</i>. That&#39;s upcasting. Why do you say you are trying to downcast? <a href=\"https://play.rust-lang.org/?gist=3aae5b8349e3420497f3aa24f9e8ea7b&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">@JoshuaEntrekin also provides an example</a> that seems to work."}, {"owner": {"reputation": 111, "user_id": 7520158, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e80a6f8085c0270eedc79bf1c00dc09a?s=128&d=identicon&r=PG", "display_name": "Jack Lund", "link": "https://stackoverflow.com/users/7520158/jack-lund"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486332130, "post_id": 42056422, "comment_id": 71288282, "body": "@Shepmaster Sorry, I commented on his response, but didn&#39;t update my post. See above."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486327837, "post_id": 42057047, "comment_id": 71286753, "body": "Thank you very much for doing the right thing and pointing out the duplicate. I hope you hang around <a href=\"https://stackoverflow.com/questions/tagged/rust\">rust</a> and help identify more dupes, and maybe have the chance to answer some non-duplicates too! ^_^"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user3179290"}, "is_accepted": false, "score": 11, "last_activity_date": 1486327703, "last_edit_date": 1495542263, "creation_date": 1486327249, "answer_id": 42057047, "question_id": 42056422, "link": "https://stackoverflow.com/questions/42056422/using-any-with-traits-in-rust/42057047#42057047", "title": "Using Any with traits in Rust", "body": "<p>This is a duplicate of <a href=\"https://stackoverflow.com/questions/28632968/why-doesnt-rust-support-trait-object-upcasting\">Why doesn't Rust support trait object upcasting?</a> because you are trying to upcast from <code>Foo</code> to <code>Any</code>. If you add an <code>as_any</code> method to <code>Foo</code> and implement on it, this code can be made to work:</p>\n\n<pre><code>use std::any::Any;\n\ntrait Foo: Any {\n    fn as_any(&amp;self) -&gt; &amp;Any;\n}\n\nimpl&lt;T: Any&gt; Foo for T {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n}\n\nstruct Bar {}\n\nstruct Baz {}\n\nimpl PartialEq for Foo {\n    fn eq(&amp;self, other: &amp;Foo) -&gt; bool {\n        let me = self.as_any();\n        let you = other.as_any();\n        if me.is::&lt;Bar&gt;() &amp;&amp; you.is::&lt;Bar&gt;() {\n            true\n        } else if me.is::&lt;Baz&gt;() &amp;&amp; you.is::&lt;Baz&gt;() {\n            true\n        } else {\n            false\n        }\n    }\n}\n\nfn main() {\n    let bar: Bar = Bar {};\n    let baz: Baz = Baz {};\n    let foo1: &amp;Foo = &amp;bar;\n    let foo2: &amp;Foo = &amp;baz;\n    println!(\"{:?}\", foo1 == foo2);\n}\n</code></pre>\n\n<p>I show it here in the <a href=\"https://play.rust-lang.org/?gist=3aae5b8349e3420497f3aa24f9e8ea7b&amp;version=nightly&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>.</p>\n"}], "owner": {"reputation": 111, "user_id": 7520158, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e80a6f8085c0270eedc79bf1c00dc09a?s=128&d=identicon&r=PG", "display_name": "Jack Lund", "link": "https://stackoverflow.com/users/7520158/jack-lund"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3931, "favorite_count": 2, "closed_date": 1486327646, "answer_count": 1, "score": 9, "last_activity_date": 1486332675, "creation_date": 1486323671, "last_edit_date": 1495540406, "question_id": 42056422, "link": "https://stackoverflow.com/questions/42056422/using-any-with-traits-in-rust", "closed_reason": "Duplicate", "title": "Using Any with traits in Rust", "body": "<p>I'm trying to implement <code>PartialEq</code> in Rust for a trait that has subtypes, so that I can add them as boxed pointers to a container and later compare them.</p>\n\n<p>Here's my scaled-down implementation:</p>\n\n<pre><code>use std::any::Any;\n\ntrait Foo: Any {}\n\nstruct Bar {}\n\nimpl Foo for Bar {}\n\nstruct Baz {}\n\nimpl Foo for Baz {}\n\nimpl PartialEq for Foo {\n    fn eq(&amp;self, other: &amp;Foo) -&gt; bool {\n        let me = self as &amp;Any;\n        let you = other as &amp;Any;\n        if me.is::&lt;Bar&gt;() &amp;&amp; you.is::&lt;Bar&gt;() {\n            true\n        } else if me.is::&lt;Baz&gt;() &amp;&amp; you.is::&lt;Baz&gt;() {\n            true\n        } else {\n            false\n        }\n    }\n}\n\nfn main() {\n    let bar: Bar = Bar {};\n    let baz: Baz = Baz {};\n    let foo1: &amp;Foo = &amp;bar;\n    let foo2: &amp;Foo = &amp;baz;\n    println!(\"{:?}\", foo1 == foo2);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Aany%3A%3AAny%3B%0A%0Atrait%20Foo%3A%20Any%20%7B%7D%0A%0Astruct%20Bar%20%7B%7D%0A%0Aimpl%20Foo%20for%20Bar%20%7B%7D%0A%0Astruct%20Baz%20%7B%7D%0A%0Aimpl%20Foo%20for%20Baz%20%7B%7D%0A%0Aimpl%20PartialEq%20for%20Foo%20%7B%0A%20%20%20%20fn%20eq(%26self%2C%20other%3A%20%26Foo)%20-%3E%20bool%20%7B%0A%20%20%20%20%20%20%20%20let%20me%20%3D%20self%20as%20%26Any%3B%0A%20%20%20%20%20%20%20%20let%20you%20%3D%20other%20as%20%26Any%3B%0A%20%20%20%20%20%20%20%20if%20me.is%3A%3A%3CBar%3E()%20%26%26%20you.is%3A%3A%3CBar%3E()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20true%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20me.is%3A%3A%3CBaz%3E()%20%26%26%20you.is%3A%3A%3CBaz%3E()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20true%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20false%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20bar%3A%20Bar%20%3D%20Bar%20%7B%7D%3B%0A%20%20%20%20let%20baz%3A%20Baz%20%3D%20Baz%20%7B%7D%3B%0A%20%20%20%20let%20foo1%3A%20%26Foo%20%3D%20%26bar%3B%0A%20%20%20%20let%20foo2%3A%20%26Foo%20%3D%20%26baz%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20foo1%20%3D%3D%20foo2)%3B%0A%7D%0A&amp;version=nightly&amp;backtrace=0\" rel=\"noreferrer\">Code example in Rust Playground</a>.</p>\n\n<p>When I build this, I get:</p>\n\n<pre><code>rustc 1.17.0-nightly (0648517fa 2017-02-03)\nerror: non-scalar cast: `&amp;Foo + 'static` as `&amp;std::any::Any + 'static`\n  --&gt; &lt;anon&gt;:15:18\n   |\n15 |         let me = self as &amp;Any;\n   |                  ^^^^^^^^^^^^\n\nerror: non-scalar cast: `&amp;Foo + 'static` as `&amp;std::any::Any + 'static`\n  --&gt; &lt;anon&gt;:16:19\n   |\n16 |         let you = other as &amp;Any;\n   |                   ^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>which is confusing. Any ideas what I'm doing wrong here?</p>\n\n<p><strong>Edit</strong>: I don't believe this is a duplicate of <a href=\"https://stackoverflow.com/questions/28632968\">Why doesn't Rust support trait object upcasting?</a>, because what I'm trying to do is downcast using <code>Any</code>, not upcast.</p>\n\n<p><strong>Further Edit</strong>: Yes, this is a duplicate - sorry, I was thinking about what I was trying to do (downcast to the <code>Bar</code> and <code>Baz</code> types) rather than how I was doing that (upcasting to <code>Any</code>). However, that being said, I guess I still don't understand why the <a href=\"https://doc.rust-lang.org/std/any/\" rel=\"noreferrer\">Any example</a>, where they do this: <code>let value_any = value as &amp;Any;</code> works, where mine doesn't. That being said, <a href=\"https://stackoverflow.com/users/3179290/joshua-entrekin\">Joshua Entrekin</a> did give a great answer.</p>\n\n<p><strong>Final Edit</strong> An, never mind, it's because I'm upcasting a trait rather than a type - <strong>Doh!</strong>. Thanks, everyone!</p>\n"}, {"tags": ["algorithm", "hashmap", "geometry", "rust", "iteration"], "comments": [{"owner": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 0, "creation_date": 1486332506, "post_id": 42056287, "comment_id": 71288412, "body": "how did you come to this problem?"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 0, "creation_date": 1486332725, "post_id": 42056287, "comment_id": 71288477, "body": "@JoeBlow This problem is basically the heart of what makes FEM hard to program. A bunch of calculations are elementwise, but they get hooked up into a larger calculation at the end of the algorithm by gathering up sets of them organized by their adjacency. Those elementwise calculations produce small matrices of their own, even."}, {"owner": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 0, "creation_date": 1486333956, "post_id": 42056287, "comment_id": 71288813, "body": "so you&#39;re addressing a problem in finite element method.  trying to solve a partial differential equation maybe?  is it in the abstract, or something to do with image processing, laminar flow, or ??  Sorry, I was just nosey!  :) chees..."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 1, "creation_date": 1486334240, "post_id": 42056287, "comment_id": 71288897, "body": "Hahahaha I didn&#39;t know what you meant. I&#39;m implementing it for electrostatics now, namely Laplace&#39;s equation. It seems to work for anything where you can define tractable element functions that form integrands of some larger functional."}, {"owner": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 0, "creation_date": 1486334569, "post_id": 42056287, "comment_id": 71288988, "body": "fascinating.  are you actually doing engineering (ie &quot;to build an antenna&quot; / &quot;death ray&quot;) or some such, or abstract math?  Again, sorry, just being nosey - far too drunk to assist  :)"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 0, "creation_date": 1486334926, "post_id": 42056287, "comment_id": 71289085, "body": "Well, it&#39;s true that I could model some death rays with this if I could finish the danged thing ;)"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 29735, "user_id": 294884, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/f8675693dfeb3908195657eb3a3fdda4?s=128&d=identicon&r=PG", "display_name": "Fattie", "link": "https://stackoverflow.com/users/294884/fattie"}, "edited": false, "score": 0, "creation_date": 1486357401, "post_id": 42056287, "comment_id": 71293457, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/134940/discussion-between-bright-star-and-joe-blow\">continue this discussion in chat</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486373673, "post_id": 42056287, "comment_id": 71300320, "body": "@bright-star: I am sorry but being partially color-blind I just don&#39;t get your figure at all... would you have some naive code for computing S(8, 8) and S(8, 9) instead? Also, what are the range of values (element index, node index, local element vertex index and coordinates), it seems to me the vertex index is in <code>0..3</code> from the diagram. Finally, have you thought about eliminating bounds-checking by having a &quot;null&quot; outer-layer?"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486397450, "post_id": 42056287, "comment_id": 71315838, "body": "@MatthieuM. Crap, sorry! I didn&#39;t think of that. Let me change the palette to something more accessible."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1486397556, "post_id": 42056287, "comment_id": 71315929, "body": "@bright-star: no worries; as mentioned a textual description might be easier anyway (don&#39;t know if any blind developer frequents SO, but images would be inaccessible to them)."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486400709, "post_id": 42056287, "comment_id": 71317942, "body": "@MatthieuM. I added ranges to the index descriptions. I don&#39;t think it makes sense in Rust to have a <code>Option</code> type (nullable) as an outer layer for this structure, but you&#39;re welcome to propose it. I&#39;m not sure I can offer any naive code for <code>S()</code>, but I&#39;ll add a remark that <code>V()</code> is irrelevant to the problem."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1486501935, "post_id": 42056287, "comment_id": 71370347, "body": "<i>I considered keying a <code>HashMap</code> with multiple keys, but the Rust docs didn&#39;t say anything about a <code>HashMap</code> with multiple keys.</i> A tuple can be a <code>HashMap</code> key; would that help?"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1486503744, "post_id": 42056287, "comment_id": 71371283, "body": "@user4815162342 That&#39;s a good idea. I sort of encoded the relevant value in the order of a fixed array, as you can see in the answer I posted."}], "answers": [{"comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1486326914, "post_id": 42056937, "comment_id": 71286435, "body": "Since the function for generating elements starts with the knowledge of which nodes to generate when (in the triangular case, a pair of  elements whose &quot;upper/lower left&quot; vertex is the current node under iteration), this could be parameterized by the node index in the same way. That might be overcomplicating things again."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1486328333, "post_id": 42056937, "comment_id": 71286943, "body": "Generating elements on the fly while iterating as previous comment suggests is too complicated: elements will be generated repeatedly, since they&#39;re adjacent to three nodes."}], "tags": [], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "is_accepted": false, "score": 0, "last_activity_date": 1486498909, "last_edit_date": 1486498909, "creation_date": 1486326557, "answer_id": 42056937, "question_id": 42056287, "link": "https://stackoverflow.com/questions/42056287/how-do-i-organize-these-related-indices-into-something-that-can-be-looked-up-eff/42056937#42056937", "title": "How do I organize these related indices into something that can be looked up efficiently in Rust?", "body": "<p>I think this is a possible workaround, but I hope there's something better:</p>\n\n<p>Nest one <code>HashMap</code> in another as per <a href=\"https://stackoverflow.com/questions/14677993/how-to-create-a-hashmap-with-two-keys-key-pair-value\">this question</a>, with the node index as the first key, the element index as the second key/first value, and the element itself as the second value.</p>\n\n<p>So, the iteration can look like this:</p>\n\n<ol>\n<li>Iterate through grid node index <code>N</code></li>\n<li>Get all elements with <code>N</code> as the first key</li>\n<li><p>Note that the vertex indices and (relative) element indices have the following patterns, depending on where you number from:</p>\n\n<p>Node index numbering beginning from matrix top-left (usual in this programming domain):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>| Element (index ordinal) | Vertex |\n|-------------------------|--------|\n| 0 (min)                 | 1      |\n| 1                       | 2      |\n| 2                       | 1      |\n| 3                       | 2      |\n| 4                       | 0      |\n| 5                       | 0      |\n</code></pre>\n\n<p>Node index numbering beginning as picture, from lower-left:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>| Element (index ordinal) | Vertex |\n|-------------------------|--------|\n| 0 (min)                 | 2      |\n| 1                       | 0      |\n| 2                       | 0      |\n| 3                       | 2      |\n| 4                       | 1      |\n| 5                       | 1      |\n</code></pre></li>\n</ol>\n\n<p>Since you can hardcode the relative order of elements like this, it might be better to use a <code>HashMap&lt;usize, Vec&lt;Element&gt;&gt;</code>, or even <code>HashMap&lt;usize, [Element; 6]&gt;</code>.</p>\n\n<p>This method brings up the question of how to relate node index to element indices dynamically. How do you know which elements to insert into that <code>HashMap</code>? One way to accomplish this is to record the nodes the element vertices correspond to in the element struct as well, in the same order.</p>\n\n<p>At that point, you can compute a list like <code>adjacent_elements</code> as you iterate through the matrix, and use the above patterns to figure out what to access (sadly, with bounds checking).</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 116, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1486498909, "creation_date": 1486323015, "last_edit_date": 1486400893, "question_id": 42056287, "link": "https://stackoverflow.com/questions/42056287/how-do-i-organize-these-related-indices-into-something-that-can-be-looked-up-eff", "title": "How do I organize these related indices into something that can be looked up efficiently in Rust?", "body": "<h2>Background</h2>\n\n<p>In an algorithm called finite element method, a continuous region is discretized into repeated sections with consistent geometry, over which linked equations are formed based on the assumption of continuity between them.</p>\n\n<p>In this case, I have chosen to divide a shape up into an arbitrary grid, and am now trying to connect the elements' values together as I iterate through the elements. Here is an example of the kind of grid I am talking about:</p>\n\n<p><a href=\"https://i.stack.imgur.com/nv5Lx.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/nv5Lx.png\" alt=\"Example grid adapted from https://people.sc.fsu.edu/~jburkardt/m_src/fem2d_poisson_rectangle/rectangle_elements.png\"></a></p>\n\n<h2>Indices</h2>\n\n<p>There are a bunch of related indices:</p>\n\n<ul>\n<li>The element index (teal numbers), linear, row-major, range <code>0..ROWS*2</code>.</li>\n<li>The node index (brown numbers), linear, row-major, range <code>0..ROWS*COLS</code>.</li>\n<li>The local element vertex index (lavender numbers), counter-clockwise by element, range <code>0..2</code>.</li>\n<li>The coordinates of the actual point in space (stored with the element's struct, as well as the grid's struct)</li>\n</ul>\n\n<h2>Problem</h2>\n\n<p>In order to get to the next step in the algorithm, I need to iterate over each node and compute some sums of values indexed by local element indices and store them in another matrix. If, for example, I'm on node 8, my element lookup/access function is generically <code>V(el_index, start_vertex, end_vertex)</code>, and my matrix of outputs is <code>S(start_node, end_node)</code>:</p>\n\n<ol>\n<li><code>S(8,8) = V(el_14, vert_1, vert_1) + V(el_15, vert_1, vert_1) + V(el_04, vert_0, vert_0) + V(el_03, vert_0, vert_0) + V(el_2, vert_2, vert_2) + V(el_13, vert_2, vert_2)</code></li>\n<li><code>S(8,9) = V(el_15, vert_1, vert_2) + V(el_4, vert_0, vert_2)</code></li>\n</ol>\n\n<p>and so on, for all of the connections (teal lines) from node 8. (The connections are symmetric, so once I compute <code>S(7,8)</code>, I don't need to compute <code>S(8,7)</code>.)</p>\n\n<p>The problem is, the grid (and therefore everything else) is parameterized at runtime, so which node index + adjacency direction corresponds to which element index is dynamically determined. I need to tell the program, \"Get me the element indices where the node index of <code>vert_x</code> is my current node index.\" That's the instruction that tells the program which element to access in <code>V()</code>.</p>\n\n<p><strong>Is there a way I can relate these indices in a simple and transparent manner in Rust?</strong></p>\n\n<h3>Attempts</h3>\n\n<ol>\n<li>I tried computing some simple arithmetic functions modulo the row stride of the node matrix, but the result is messy and hard to debug, as well as requiring verbose bounds checking.</li>\n<li>I tried creating three <code>HashMap</code>s keyed by the different vertices of each triangular element, holding the values at each vertex, but the problem is that adjacent triangles share vertex numbers as well as spatial coordinates.</li>\n<li>I considered keying a <code>HashMap</code> with multiple keys, but the Rust docs didn't say anything about a <code>HashMap</code> with multiple keys.</li>\n</ol>\n"}, {"tags": ["multidimensional-array", "rust"], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 2, "last_activity_date": 1486310429, "last_edit_date": 1486310429, "creation_date": 1486309907, "answer_id": 42054043, "question_id": 42053779, "link": "https://stackoverflow.com/questions/42053779/how-do-i-create-a-multidimensional-matrix-arrayd-using-ndarray/42054043#42054043", "title": "How do I create a multidimensional matrix (ArrayD) using ndarray?", "body": "<p>You can pass a <code>&amp;[usize]</code> (or <code>Vec&lt;usize&gt;</code>) containing N values with the shape of the array to create an N-dimensional array to any constructor function which accepts the shape of the array, like <code>Array::zeros</code>. For example, the following code creates an <code>Array</code> with 9 dimensions of shape <code>4 * 7 * 6 * 5 * 2 * 10 * 9 * 3 * 8</code>:</p>\n\n<pre><code>//! ```cargo\n//! [dependencies]\n//! ndarray = \"*\"\n//! ```\nextern crate ndarray;\nuse ndarray::ArrayD;\n\nfn main() {\n    let mut array = ArrayD::zeros([4, 7, 6, 5, 2, 10, 9, 3, 8].as_ref());\n    array[[1; 9].as_ref()] = 123;\n\n    println!(\"{:?}\", array[[0; 9].as_ref()]);\n    println!(\"{:?}\", array[[1; 9].as_ref()]);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>0\n123\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user4187476"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 451, "favorite_count": 0, "accepted_answer_id": 42054043, "answer_count": 1, "score": 3, "last_activity_date": 1544948933, "creation_date": 1486308557, "last_edit_date": 1544948933, "question_id": 42053779, "link": "https://stackoverflow.com/questions/42053779/how-do-i-create-a-multidimensional-matrix-arrayd-using-ndarray", "title": "How do I create a multidimensional matrix (ArrayD) using ndarray?", "body": "<p>I would like to create a multidimensional matrix in Rust (the product of which exceeds 1e6). I found the <code>ndarray</code> crate, however the <a href=\"https://docs.rs/ndarray/\" rel=\"nofollow noreferrer\">documentation</a> gives no explanation on how to use the <code>ArrayD</code> type which seems to correspond to my needs.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486307485, "post_id": 42052180, "comment_id": 71279302, "body": "See also <a href=\"http://stackoverflow.com/q/27415011/155423\">stackoverflow.com/q/27415011/155423</a>, <a href=\"http://stackoverflow.com/q/24905160/155423\">stackoverflow.com/q/24905160/155423</a>, many others."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486307523, "post_id": 42052254, "comment_id": 71279324, "body": "I&#39;d suggest you remove this answer from this question and move it to the duplicate."}], "tags": [], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "is_accepted": false, "score": 2, "last_activity_date": 1486307205, "last_edit_date": 1486307205, "creation_date": 1486299009, "answer_id": 42052254, "question_id": 42052180, "link": "https://stackoverflow.com/questions/42052180/how-can-i-use-a-macro-value-as-a-part-of-a-function-name-in-stable-rust/42052254#42052254", "title": "How can I use a macro value as a part of a function name in stable Rust?", "body": "<p>As a reasonable workaround, you can add the function names as extra parameters. It's not elegant but it works:</p>\n\n<pre><code>macro_rules! impl_numeric_cast_methods {\n    ($($ty:ty, $from_ty:ident),*) =&gt; {\n        $(\n            fn $from_ty(v: $ty) -&gt; Self {\n                v as Self\n            }\n        )*\n    }\n}\n</code></pre>\n\n<p>Then call like:</p>\n\n<pre><code>impl_numeric_cast_methods(i8, from_i8, u8, from_u8);\n</code></pre>\n\n<p>A second macro could make the invocation shorter, but that would overcomplicate things in my case.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 197, "favorite_count": 0, "closed_date": 1486307498, "answer_count": 1, "score": 2, "last_activity_date": 1486307248, "creation_date": 1486298507, "last_edit_date": 1486307248, "question_id": 42052180, "link": "https://stackoverflow.com/questions/42052180/how-can-i-use-a-macro-value-as-a-part-of-a-function-name-in-stable-rust", "closed_reason": "Duplicate", "title": "How can I use a macro value as a part of a function name in stable Rust?", "body": "<p>I'm trying to write a macro like this:</p>\n\n<pre><code>macro_rules! impl_numeric_cast_methods {\n    ($($ty:ty)*) =&gt; {\n        $(\n            fn from_$ty(v: $ty) -&gt; Self {\n                v as Self\n            }\n        )*\n    }\n}\n</code></pre>\n\n<p>The <code>from_$ty</code> bit doesn't work due to macro hygiene. I found that if <code>$ty</code> was an <code>ident</code> then I could (on unstable) possibly use <a href=\"https://doc.rust-lang.org/std/macro.concat_idents.html\" rel=\"nofollow noreferrer\"><code>concat_idents!</code></a> except that that <a href=\"https://github.com/rust-lang/rust/issues/12249\" rel=\"nofollow noreferrer\">apparently doesn't work either</a>.</p>\n\n<p>There's <a href=\"http://www.ncameron.org/blog/untitledconcat_idents-and-macros-in-ident-position/\" rel=\"nofollow noreferrer\">a blog post about this issue</a> and future plans to fix it, but my question is: how can I do this at all in today's Rust stable (1.15)? Is there a workaround?</p>\n"}, {"tags": ["rust", "mutable"], "answers": [{"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 3, "last_activity_date": 1584985634, "last_edit_date": 1584985634, "creation_date": 1486303134, "answer_id": 42052916, "question_id": 42052065, "link": "https://stackoverflow.com/questions/42052065/how-can-i-introduce-a-copied-variable-as-mutable-in-a-if-let-statement/42052916#42052916", "title": "How can I introduce a copied variable as mutable in a if-let statement?", "body": "<p>Your approach #1 is a perfectly correct match, you just need to make the <code>y</code> variable mutable. One possibility is to convert <code>Option&lt;&amp;i8&gt;</code> to <code>Option&lt;i8&gt;</code>, enabling the use of <code>mut y</code> in the pattern. For example, <code>Option::map</code> can dereference the value:</p>\n\n<pre><code>if let Some(mut y) = x.get(&amp;3).map(|ref| *ref) {\n</code></pre>\n\n<p>Since <code>Copy</code> implies (cheap) <code>Clone</code>, you can express the same using <code>Option::cloned()</code>:</p>\n\n<pre><code>if let Some(mut y) = x.get(&amp;3).cloned() {\n</code></pre>\n\n<p>As of Rust 1.35, you can use <code>Option::copied()</code>, which is only defined for <code>Copy</code> types and just copies the value:</p>\n\n<pre><code>if let Some(mut y) = x.get(&amp;3).copied() {\n</code></pre>\n\n<p>Another possibility is to leave your approach #1 as-is, but correct it simply by introducing a separate mutable variable inside the <code>if let</code> block:</p>\n\n<pre><code>if let Some(&amp;y) = x.get(&amp;3) {\n    let mut y = y;\n    ...\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 291, "user_id": 3735355, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9712cc38a6a18bbb7aaee2b510514b6d?s=128&d=identicon&r=PG", "display_name": "pixunil", "link": "https://stackoverflow.com/users/3735355/pixunil"}, "edited": false, "score": 0, "creation_date": 1486395429, "post_id": 42055533, "comment_id": 71314427, "body": "Even it is cleaner removing the <code>&#236;f let</code>, the <code>if</code> is necessary in my specific use-case."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1486318541, "creation_date": 1486318541, "answer_id": 42055533, "question_id": 42052065, "link": "https://stackoverflow.com/questions/42052065/how-can-i-introduce-a-copied-variable-as-mutable-in-a-if-let-statement/42055533#42055533", "title": "How can I introduce a copied variable as mutable in a if-let statement?", "body": "<p>Your code basically works:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut x: HashMap&lt;i8, i8&gt; = HashMap::new();\n    x.insert(1, 6);\n    x.insert(3, 5);\n    x.insert(5, 1);\n\n    let mut key = 3;\n    while let Some(&amp;z) = x.get(&amp;key) {\n        key = z;\n    }\n\n    println!(\"{}\", key);\n\n    x.insert(key, 0);\n}\n</code></pre>\n\n<p>Here, <code>key</code> is left as the last key that did not match.</p>\n"}], "owner": {"reputation": 291, "user_id": 3735355, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9712cc38a6a18bbb7aaee2b510514b6d?s=128&d=identicon&r=PG", "display_name": "pixunil", "link": "https://stackoverflow.com/users/3735355/pixunil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1416, "favorite_count": 0, "accepted_answer_id": 42052916, "answer_count": 2, "score": 2, "last_activity_date": 1584985634, "creation_date": 1486297834, "last_edit_date": 1486309393, "question_id": 42052065, "link": "https://stackoverflow.com/questions/42052065/how-can-i-introduce-a-copied-variable-as-mutable-in-a-if-let-statement", "title": "How can I introduce a copied variable as mutable in a if-let statement?", "body": "<p>I have a <code>HashMap&lt;i8, i8&gt;</code> which could contain cycles:</p>\n\n<pre><code>let mut x: HashMap&lt;i8, i8&gt; = HashMap::new();\nx.insert(1, 6);\nx.insert(3, 5);\nx.insert(5, 1);\n</code></pre>\n\n<p>To get the final value for <code>3</code>, it should first lookup <code>x[3]</code>, then <code>x[5]</code> and finally <code>x[1]</code> which should yield <code>6</code>. I decided to use a <code>while let</code> loop:</p>\n\n<pre><code>let mut y = x[&amp;3]; // y: i8\nwhile let Some(&amp;z) = x.get(&amp;y) {\n    y = z;\n}\n\nprintln!(\"{}\", y);\n\nx.insert(0, 0);\n</code></pre>\n\n<p>This works fine, but it would <code>panic!</code> if <code>3</code> is not in the map. As I don't want to do anything about the <code>None</code> case, I want to use a <code>if let</code> (similar to the <code>while let</code> used).</p>\n\n<p>I have tried some notations:</p>\n\n<ol>\n<li><code>if let Some(&amp;y) = x.get(&amp;3)</code>: copies the value, but y is immutable (<code>y: i8</code>)</li>\n<li><code>if let Some(mut y) = x.get(&amp;3)</code>: y is mutable, but the value is borrowed (<code>mut y: &amp;i8</code>)</li>\n<li><code>if let mut Some(&amp;y) = x.get(&amp;3)</code>: my target: mutable copy, but invalid syntax (<code>mut y: i8</code>)</li>\n</ol>\n\n<p>(All variants are available at <a href=\"https://play.rust-lang.org/?gist=8b4c4dbc59ac6293f1c65b260338c63f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Rust Playground</a>, but you need to comment out the third try, as it is invalid syntax)</p>\n\n<p>I would not argue about the second variant, but I need to insert values into my map in the body of the <code>if let</code>. As the map remains borrowed, I can't insert anymore. All I would need is that the value in <code>Some(y)</code> is copied, and <code>y</code> is mutable, so that the borrow checker is satisfied and I can do my recursive lookups.</p>\n"}, {"tags": ["json", "serialization", "rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 91, "user_id": 3731958, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3a1d2efd8cc240f7978ee0567b0651cd?s=128&d=identicon&r=PG&f=1", "display_name": "Cobrand", "link": "https://stackoverflow.com/users/3731958/cobrand"}, "is_accepted": true, "score": 3, "last_activity_date": 1486307819, "last_edit_date": 1486307819, "creation_date": 1486293586, "answer_id": 42051441, "question_id": 42051216, "link": "https://stackoverflow.com/questions/42051216/how-to-use-serde-to-deserialize-a-tuple-struct-from-json-named-values-instead/42051441#42051441", "title": "How to use Serde to (de)serialize a tuple struct from JSON named values instead of an array?", "body": "<pre><code>#[derive(Serialize, Deserialize, Debug)]\npub struct TeamSize(\n    #[serde(rename = \"min\")]\n    pub i64,\n    #[serde(rename = \"max\")]\n    pub i64\n);\n</code></pre>\n\n<p>is not valid code, the Serde <code>rename</code> attribute only renames what is being serialized and deserialized, it does not change your code. In a tuple struct (your first one), you can (and must) omit names because you simply access them via self.0 and self.1, but a struct doesn't have a <code>first</code> or a <code>second</code> field, so you must add a name to them. </p>\n\n<p>Like so:</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug)]\npub struct TeamSize {\n    pub max: i64,\n    pub min: i64,\n};\n</code></pre>\n\n<p>Since the name of your attribute is the name of the JSON property (both <code>min</code> and <code>max</code>), you do not need to use <code>serde(rename)</code>. You would have needed it if your Rust struct used the fields <code>value_max</code> and <code>value_min</code> but your JSON still used <code>max</code> and <code>min</code>.</p>\n\n<p>If you absolutely want to parse it to a tuple struct, you must implement <code>Serialize</code> and <code>Deserialize</code> for your custom struct yourself. I don't think it's worth the hassle though, just switch to a struct instead of a tuple struct.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1768, "favorite_count": 0, "accepted_answer_id": 42051441, "answer_count": 1, "score": 2, "last_activity_date": 1486307819, "creation_date": 1486292290, "last_edit_date": 1486307737, "question_id": 42051216, "link": "https://stackoverflow.com/questions/42051216/how-to-use-serde-to-deserialize-a-tuple-struct-from-json-named-values-instead", "title": "How to use Serde to (de)serialize a tuple struct from JSON named values instead of an array?", "body": "<p>I have a JSON object:</p>\n\n<pre><code>{ \"min\": 2, \"max\": 15 }\n</code></pre>\n\n<p>I'd like to parse it to this tuple struct:</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug)]\nstruct TeamSize(pub i64, pub i64);\n#[derive(Serialize, Deserialize, Debug)]\nstruct Match {\n    size: TeamSize,\n}\n</code></pre>\n\n<p>The current Serde serialization mechanism does not seem to provide the functionality of (de)serializing a tuple structure from named values instead of an array.</p>\n\n<p>The generated (de)serialization mechanism expects the following:</p>\n\n<pre><code>{\"size\": [2, 15]}\n</code></pre>\n\n<p>I've tried to use Serde attributes, but I can't find one that does what I want:</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug)]\npub struct TeamSize(\n    #[serde(rename = \"min\")]\n    pub i64,\n    #[serde(rename = \"max\")]\n    pub i64\n);\n</code></pre>\n\n<p>How to parse it? Should I implement everything by myself?</p>\n\n<p>I've opened an <a href=\"https://github.com/serde-rs/serde/issues/751\" rel=\"nofollow noreferrer\">issue on the Serde repository</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "edited": false, "score": 0, "creation_date": 1486451790, "post_id": 42049342, "comment_id": 71338160, "body": "Thank you for all of your answers. I have decided to go with the answer of mine because it does not require creating any additional functions."}], "answers": [{"tags": [], "owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "is_accepted": true, "score": 1, "last_activity_date": 1486288390, "last_edit_date": 1495535370, "creation_date": 1486287988, "answer_id": 42050602, "question_id": 42049342, "link": "https://stackoverflow.com/questions/42049342/how-to-express-integers-other-than-zero-and-one-in-generic-code-using-the-num-cr/42050602#42050602", "title": "How to express integers other than zero and one in generic code using the num crate?", "body": "<p>One way of representing arbitrary integers in generic code is to use the <a href=\"http://rust-num.github.io/num/num/trait.NumCast.html\" rel=\"nofollow noreferrer\"><code>num::NumCast</code></a> trait:</p>\n\n<pre><code>impl&lt;T: num::Integer + num::NumCast&gt; IsTwo for T {\n    fn is_two(self) -&gt; bool {\n        self == T::from(2).unwrap()\n    }\n}\n</code></pre>\n\n<p>A related way is to use the <a href=\"http://rust-num.github.io/num/num/cast/trait.FromPrimitive.html\" rel=\"nofollow noreferrer\"><code>num::FromPrimitive</code></a> trait:</p>\n\n<pre><code>impl&lt;T: num::Integer + num::FromPrimitive&gt; IsTwo for T {\n    fn is_two(self) -&gt; bool {\n        self == T::from_i32(2).unwrap()\n    }\n}\n</code></pre>\n\n<p>Related questions and answers: [<a href=\"https://stackoverflow.com/q/26042703/2580955\">1</a>, <a href=\"https://stackoverflow.com/q/41506857/2580955\">2</a>].</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486373192, "post_id": 42053899, "comment_id": 71299997, "body": "Note that even in Debug mode, it&#39;s relatively trivial to build big integers with a relatively small number of calls: 2 = 1 + 1, 4 = 2 * 2 (aka (1 + 1) ^ 2), 8 = 2 * 2 * 2 (aka (1 + 1) ^ 3), ... so 2 is easy to get, and with 2 you finally have a base to work with."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486387858, "post_id": 42053899, "comment_id": 71309220, "body": "@MatthieuM. a numbering system based on 2? Sounds interesting, but I can&#39;t imagine that we&#39;d ever use something like that ;-) More seriously, the downside to that is that every value would have to be hand-expanded; the loop allows for one-stop shopping."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486392225, "post_id": 42053899, "comment_id": 71312114, "body": "Oh certainly, with optimizations the loop is more elegant. The problem is that if you want <code>1 &lt;&lt; 56</code> in Debug, it&#39;s gonna be complicated... As for the downside: I think you misunderstood how I was thinking to do it. I&#39;ll post an answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1486309190, "creation_date": 1486309190, "answer_id": 42053899, "question_id": 42049342, "link": "https://stackoverflow.com/questions/42049342/how-to-express-integers-other-than-zero-and-one-in-generic-code-using-the-num-cr/42053899#42053899", "title": "How to express integers other than zero and one in generic code using the num crate?", "body": "<p>You can write a function:</p>\n\n<pre><code>fn two&lt;T&gt;() -&gt; T \n    where T: num::Integer,\n{\n    let mut v = T::zero();\n    for _ in 0..2 {\n        v = v + T::one();\n    }\n    v\n}\n</code></pre>\n\n<p>I've chosen this form because it's easily made into a macro, which can be reused for any set of values:</p>\n\n<pre><code>num_constant!(two, 2);\nnum_constant!(forty_two, 42);\n</code></pre>\n\n<p>I hear the concerns now... \"but that's a loop and inefficient!\". That's what optimizing compilers are for. Here's the LLVM IR for <code>two</code> when compiled in release mode:</p>\n\n<pre><code>; Function Attrs: noinline readnone uwtable\ndefine internal fastcc i32 @_ZN10playground3two17hbef99995c3606e93E() unnamed_addr #3 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\nbb3:\n  br label %bb8\n\nbb8:                                              ; preds = %bb3\n  ret i32 2\n}\n</code></pre>\n\n<p>That's right - it's been optimized to the value <code>2</code>. No loops.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486394273, "post_id": 42070852, "comment_id": 71313616, "body": "Ah, you are right that I misunderstood. You still have the loop in there to do the conversion. Nice!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486394649, "post_id": 42070852, "comment_id": 71313878, "body": "You can do <code>fn convert&lt;T: Integer&gt;(mut n: usize)</code> to save that line in the body."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486395052, "post_id": 42070852, "comment_id": 71314145, "body": "@Shepmaster: I know, just prefer keeping my signatures short. The client doesn&#39;t care whether I mutate <code>n</code> or not."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486395882, "post_id": 42070852, "comment_id": 71314749, "body": "Which is why the <code>mut</code> in <code>foo(mut bar)</code> doesn&#39;t show up in the API documentation - it&#39;s an implementation detail ;-)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486397277, "post_id": 42070852, "comment_id": 71315740, "body": "@Shepmaster: Oh nice! You&#39;ve got to love the attention to details in the docs :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1486393260, "creation_date": 1486393260, "answer_id": 42070852, "question_id": 42049342, "link": "https://stackoverflow.com/questions/42049342/how-to-express-integers-other-than-zero-and-one-in-generic-code-using-the-num-cr/42070852#42070852", "title": "How to express integers other than zero and one in generic code using the num crate?", "body": "<p>It's relatively simple to forge any number from 0 and 1:</p>\n\n<ul>\n<li>you need to create 2, which is hardly difficult</li>\n<li>you then proceed in converting your number to base 2, which takes O(log2(N)) operations</li>\n</ul>\n\n<p>The algorithm is dead simple:</p>\n\n<pre><code>fn convert&lt;T: Integer&gt;(n: usize) -&gt; T {\n    let two = T::one() + T::one();\n\n    let mut n = n;\n    let mut acc = T::one();\n    let mut result = T::zero();\n\n    while n &gt; 0 {\n        if n % 2 != 0 {\n            result += acc;\n        }\n        acc *= two;\n        n /= 2;\n    }\n\n    result\n}\n</code></pre>\n\n<p>And will be efficient both in Debug (O(log2(N)) iterations) and Release (the compiler optimizes it out completely).</p>\n\n<p>For those who wish to see it in action, <a href=\"https://play.rust-lang.org/?gist=d8e52cfff0d94206562521c0b1a2b50a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here on the playground</a> we can see that <code>convert::&lt;i32&gt;(12345)</code> is optimized to <code>12345</code> as expected.</p>\n\n<hr>\n\n<p><em>As an exercise to the reader, implement a generic version of <code>convert</code> which takes any <code>Integer</code> parameter, there's not much operations required on <code>n</code> after all.</em></p>\n"}], "owner": {"reputation": 6933, "user_id": 2580955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/WZR9N.jpg?s=128&g=1", "display_name": "s3rvac", "link": "https://stackoverflow.com/users/2580955/s3rvac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 158, "favorite_count": 0, "accepted_answer_id": 42050602, "answer_count": 3, "score": 2, "last_activity_date": 1486394602, "creation_date": 1486277482, "last_edit_date": 1486394602, "question_id": 42049342, "link": "https://stackoverflow.com/questions/42049342/how-to-express-integers-other-than-zero-and-one-in-generic-code-using-the-num-cr", "title": "How to express integers other than zero and one in generic code using the num crate?", "body": "<p>The <a href=\"http://rust-num.github.io/num/num/index.html\" rel=\"nofollow noreferrer\">num</a> crate in Rust provides a way of representing zeros and ones via <a href=\"http://rust-num.github.io/num/num/trait.Zero.html#tymethod.zero\" rel=\"nofollow noreferrer\"><code>T::zero()</code></a> and <a href=\"http://rust-num.github.io/num/num/trait.One.html#tymethod.one\" rel=\"nofollow noreferrer\"><code>T::one()</code></a>. Is there a way of representing other integers, such as two, three, etc.?</p>\n\n<p>Consider the following (artificial) example:</p>\n\n<pre><code>extern crate num;\n\ntrait IsTwo {\n    fn is_two(self) -&gt; bool;\n}\n\nimpl&lt;T: num::Integer&gt; IsTwo for T {\n    fn is_two(self) -&gt; bool {\n        self == (T::one() + T::one())\n    }\n}\n</code></pre>\n\n<p>Is there a better way of representing <code>T::one() + T::one()</code> as <code>2</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 4, "creation_date": 1486288512, "post_id": 42048589, "comment_id": 71273765, "body": "No you can&#39;t use unstable features in stable Rust. What are you trying to do?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1486335722, "last_edit_date": 1486335722, "creation_date": 1486306215, "answer_id": 42053410, "question_id": 42048589, "link": "https://stackoverflow.com/questions/42048589/is-there-a-way-to-use-unstable-modules-from-rust-stable/42053410#42053410", "title": "Is there a way to use unstable modules from Rust stable?", "body": "<p>No, you cannot use unstable features on stable Rust. <a href=\"https://blog.rust-lang.org/2014/10/30/Stability.html\" rel=\"noreferrer\"><strong>That's the entire point of unstable features</strong></a>:</p>\n\n<blockquote>\n  <p>There are three problems with allowing unstable features on the stable\n  release.</p>\n  \n  <p>First, as the web has shown numerous times, merely advertising\n  instability doesn\u2019t work. Once features are in wide use it is very\n  hard to change them \u2013 and once features are available at all, it is\n  very hard to prevent them from being used. Mechanisms like \u201cvendor\n  prefixes\u201d on the web that were meant to support experimentation\n  instead led to de facto standardization.</p>\n  \n  <p>Second, unstable features are by definition work in progress. But the\n  beta/stable snapshots freeze the feature at scheduled points in time,\n  while library authors will want to work with the latest version of the\n  feature.</p>\n  \n  <p>Finally, we simply cannot deliver stability for Rust unless we enforce\n  it. Our promise is that, if you are using the stable release of Rust,\n  you will never dread upgrading to the next release. If libraries could\n  opt in to instability, then we could only keep this promise if all\n  library authors guaranteed the same thing by supporting all three\n  release channels simultaneously.</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p>How does Rust compile its <code>std</code>?</p>\n</blockquote>\n\n<p>There's no guarantee that Rust is built by a <em>stable compiler</em>, or that it is built by the same stable compiler that is offered for download. It would be pretty straight-forward to have a special compiler that is used to <em>bootstrap</em> the official compiler. See <a href=\"https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf\" rel=\"noreferrer\"><em>Reflections on Trusting Trust</em></a> for ways this could be done nefariously.</p>\n\n<p>Indeed, Rust previously used a special bootstrapping compiler, but <a href=\"https://github.com/rust-lang/rust/issues/29557\" rel=\"noreferrer\">nowadays it doesn't</a>. Instead, there's a magic configuration value that allows unstable features to be used with the stable compiler. This was done so that Linux distributions could choose to build their own versions of Rust with their own toolchains.</p>\n\n<p>I don't feel it appropriate to publicly share the exact details out of respect. The effort of finding the answer should be enough to dissuade most people from using it without a good reason. It doesn't seem ideal if theres a one-line answer that anyone can trivially find using a search engine without thinking about the consequences. If one cares enough, they can research the Rust source code and build system, which is of course open.</p>\n\n<p><strong>Use a nightly version of Rust</strong> if you need to use unstable features. This is the most honest method.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1975, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1486338193, "creation_date": 1486269474, "last_edit_date": 1486338193, "question_id": 42048589, "link": "https://stackoverflow.com/questions/42048589/is-there-a-way-to-use-unstable-modules-from-rust-stable", "title": "Is there a way to use unstable modules from Rust stable?", "body": "<p>If you cannot use unstable modules with a stable compiler, how does Rust compile its <code>std</code>? For example, <code>std::Vec</code> uses <code>alloc::raw_vec</code>, an unstable feature.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1251, "user_id": 4324721, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/w57jr.jpg?s=128&g=1", "display_name": "Turtle", "link": "https://stackoverflow.com/users/4324721/turtle"}, "is_accepted": true, "score": 1, "last_activity_date": 1486249914, "last_edit_date": 1486249914, "creation_date": 1486248043, "answer_id": 42046465, "question_id": 42046367, "link": "https://stackoverflow.com/questions/42046367/include-module-rust/42046465#42046465", "title": "Include Module Rust", "body": "<p>Change <strong>sys.rs</strong> to:</p>\n\n<pre><code>fn read_num_lines(file: File, num_lines: i32) -&gt; bool {\n    //do bar with foo\n}\npub fn get_cpu_stats() {\n    //call read_num_lines\n    //doo foo\n}\n</code></pre>\n\n<p>since the file <strong>sys.rs</strong> is already a module scope. I could have also written <code>sys::sys::get_cpu_stats();</code></p>\n\n<p>Thanks to June in IRC!</p>\n"}], "owner": {"reputation": 1251, "user_id": 4324721, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/w57jr.jpg?s=128&g=1", "display_name": "Turtle", "link": "https://stackoverflow.com/users/4324721/turtle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 42046465, "answer_count": 1, "score": 1, "last_activity_date": 1486249914, "creation_date": 1486247400, "last_edit_date": 1495540816, "question_id": 42046367, "link": "https://stackoverflow.com/questions/42046367/include-module-rust", "title": "Include Module Rust", "body": "<p>My question is pretty similar to <a href=\"https://stackoverflow.com/questions/26388861/how-to-include-module-from-another-file-from-the-same-project\">How to include module from another file from the same project?</a>, in that I am trying to import a <code>mod</code> into my <strong>main.rs</strong> and use it, except my <code>mod</code> has a private and public function. </p>\n\n<p><strong>sys.rs</strong></p>\n\n<pre><code>mod sys {\n    fn read_num_lines(file: File, num_lines: i32) -&gt; bool {\n        //do bar with foo\n    }\n    pub fn get_cpu_stats() {\n        //call read_num_lines\n        //doo foo\n    }\n}\n</code></pre>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>mod sys;\nfn main() {\n    sys::get_cpu_stats();\n}\n</code></pre>\n\n<p>I get the following build error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>unresolved name sys::get_cpu_stats\n</code></pre>\n\n<p>Since this is my first Rust project, I'm sure I'm doing something wrong, but am unsure as to what that something is.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1486250193, "creation_date": 1486250193, "answer_id": 42046760, "question_id": 42046327, "link": "https://stackoverflow.com/questions/42046327/conditionally-derive-based-on-feature-flag/42046760#42046760", "title": "Conditionally derive based on feature flag", "body": "<p>Like many other pieces of feature-based conditional compilation, use <code>cfg_attr</code>:</p>\n\n<pre><code>#[cfg_attr(feature = \"example\", derive(Debug))]\nstruct Foo;\n\nfn main() {\n    println!(\"{:?}\", Foo);\n}\n</code></pre>\n\n<p>With this, <code>cargo run</code> will fail to compile as <code>Debug</code> is not implemented for <code>Foo</code>, but <code>cargo run --features example</code> will compile and run successfully.</p>\n"}], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 474, "favorite_count": 1, "closed_date": 1596464484, "accepted_answer_id": 42046760, "answer_count": 1, "score": 7, "last_activity_date": 1486250193, "creation_date": 1486247107, "last_edit_date": 1486249342, "question_id": 42046327, "link": "https://stackoverflow.com/questions/42046327/conditionally-derive-based-on-feature-flag", "closed_reason": "Duplicate", "title": "Conditionally derive based on feature flag", "body": "<p>I want to add a feature to my crate that will optionally make certain structs serializable, and in particular, I want to use Serde's custom derive macros. The Serde dependencies are optional and <code>extern crate</code> declarations are conditionally included behind the feature.  Consider the following:</p>\n\n<pre><code>#[derive(Eq, PartialEq, Serialize)]\nstruct MyStruct {\n    a: u8,\n    b: u8\n}\n</code></pre>\n\n<p>With the feature flag enabled, it all works fine. With it disabled, I get this warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: '#[derive]' for custom traits is not stable enough for use. It is deprecated and will be removed in v1.15 (see issue #29644)\n</code></pre>\n\n<p>Is there a way to conditionally include derived traits? I'm using Rust 1.15 stable.</p>\n\n<p>Should I submit an issue for the error message? It seems misleading.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486232413, "post_id": 42043823, "comment_id": 71260939, "body": "Your <code>struct</code> definition and <code>impl</code> do not line up. In the definition it has one member (<code>handle</code>) and in the implementation of <code>new</code> it has two members (<code>thread</code> and <code>alive</code>). I kinda guess what it should be, but it&#39;d be better if they matched what you have in your code."}, {"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486232454, "post_id": 42043823, "comment_id": 71260953, "body": "I&#39;ll work on cleaning it up more, I simplified a lot of the code in order to keep the example concise."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486232496, "post_id": 42043823, "comment_id": 71260966, "body": "Yes, I can see it&#39;s been distilled down to its essentials and I appreciate the effort you put in :) Just trying to dot the is."}], "answers": [{"comments": [{"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486234741, "post_id": 42044143, "comment_id": 71261725, "body": "Thanks. My example didn&#39;t clearly emphasize that I would like the thread closure to be able to operate over additional state in the <code>Timer</code>. E.g., the loop function would like to signal a condition variable that users can wait for. Your approach (which passes in an external callable) still doesn&#39;t let me do this. Any additional thoughts on that? I&#39;m going to keep playing with this example now, thanks again."}, {"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486234820, "post_id": 42044143, "comment_id": 71261748, "body": "For full transparency, I&#39;m fiddling around by reimplementing this class: <a href=\"https://github.com/sholsapp/gallocy/blob/master/gallocy/include/gallocy/consensus/timer.h\" rel=\"nofollow noreferrer\">github.com/sholsapp/gallocy/blob/master/gallocy/include/gall&zwnj;&#8203;ocy/&hellip;</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486236601, "post_id": 42044143, "comment_id": 71262418, "body": "@sholsapp: The key is to deal with that like I dealt with <code>alive</code>. You don&#39;t need a reference-counted self, just reference-counted <i>members</i> of self. You can either have a single <code>data</code> member which is <code>Arc&lt;(Mutex&lt;YourData&gt;, CondVar)&gt;</code> or you can have multiple members each reference-counted independently."}, {"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486236884, "post_id": 42044143, "comment_id": 71262535, "body": "Ah... this makes sense... and while I&#39;ve been playing around that&#39;s starting to become clear. Based on my full C++ example I linked to, really the only reference counted members I need to pass to the closure are <code>alive</code> and <code>timed_out</code>, relinquishing all other state directly to the closure. Thanks!"}, {"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486236954, "post_id": 42044143, "comment_id": 71262568, "body": "As an aside, I&#39;m confused why the compiler won&#39;t let me use <code>self.loop()</code> in the closure. If I inline this directly in the closure, things work. Is there a way to &quot;cast&quot; the mutable reference to a immutable one to satisfy the borrow checker?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486237685, "post_id": 42044143, "comment_id": 71262827, "body": "@sholsapp: mutability is not the issue, lifetime is. The signature of <code>spawn</code> requires that the closure be <code>&#39;static</code>, because the thread spawned could outlive... well anything really. Since the lifetime of <code>Timer</code> is not static, you cannot pass <code>&amp;self</code> or <code>&amp;mut self</code> to <code>spawn</code>, and therefore you cannot call any method of <code>self</code> inside the closure passed to <code>spawn</code>. In your code, you attempted to work around that by using <code>&#39;static</code> as the lifetime of <code>self</code>, but that&#39;s not how lifetimes work. Lifetime are like Oxygen, they exist whether we name them or not, naming is documenting not directing."}, {"owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "edited": false, "score": 0, "creation_date": 1486259419, "post_id": 42044143, "comment_id": 71268279, "body": "Thank you again, this was a big help, and I understand the problem with my former approach. Thanks for the example that used the <code>Atomic</code> type, too, I knew nothing about these before."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1486233856, "creation_date": 1486233856, "answer_id": 42044143, "question_id": 42043823, "link": "https://stackoverflow.com/questions/42043823/design-help-threading-within-a-struct/42044143#42044143", "title": "Design help: threading within a struct", "body": "<p>I think you are pretty close to getting it to work.</p>\n\n<p>There are only two hurdles:</p>\n\n<ul>\n<li><code>thread::spawn</code> will not allow sharing references</li>\n<li><code>alive</code> and <code>loop</code> for you to share in this design</li>\n</ul>\n\n<p>The solution is two-fold:</p>\n\n<ul>\n<li>split up things between the controller (<code>Timer</code>) and the worker (the closure)</li>\n<li>share state between the two using <code>Arc</code> since references are forbidden</li>\n</ul>\n\n<p>Here is a minimal example for you to toy with:</p>\n\n<pre><code>use std::{sync, thread, time};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\npub struct Timer {\n    handle: Option&lt;thread::JoinHandle&lt;()&gt;&gt;,\n    alive: sync::Arc&lt;AtomicBool&gt;,\n}\n\nimpl Timer {\n    pub fn new() -&gt; Timer {\n        Timer {\n            handle: None,\n            alive: sync::Arc::new(AtomicBool::new(false)),\n        }\n    }\n\n    pub fn start&lt;F&gt;(&amp;mut self, fun: F)\n        where F: 'static + Send + FnMut() -&gt; ()\n    {\n        self.alive.store(true, Ordering::SeqCst);\n\n        let alive = self.alive.clone();\n\n        self.handle = Some(thread::spawn(move || {\n            let mut fun = fun;\n            while alive.load(Ordering::SeqCst) {\n                fun();\n                thread::sleep(time::Duration::from_millis(10));\n            }\n        }));\n    }\n\n    pub fn stop(&amp;mut self) {\n        self.alive.store(false, Ordering::SeqCst);\n        self.handle\n            .take().expect(\"Called stop on non-running thread\")\n            .join().expect(\"Could not join spawned thread\");\n    }\n}\n\nfn main() {\n    let mut timer = Timer::new();\n    timer.start(|| println!(\"Hello, World!\") );\n\n    println!(\"Feeling sleepy...\");\n    thread::sleep(time::Duration::from_millis(100));\n\n    println!(\"Time for dinner!\");\n    timer.stop();\n}\n</code></pre>\n\n<p>I invite you to poke holes at it one at a time (ie, change one thing that is different from your example, check the error message, and try to understand how the difference solved it).</p>\n\n<p>On the playground, it printed for me:</p>\n\n<pre><code>Feeling sleepy...\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nHello, World!\nTime for dinner!\n</code></pre>\n\n<p>Though I would not rely on (1) the number of times <code>\"Hello, World!\"</code> appears and (2) <code>\"Feeling sleepy...\"</code> appearing first.</p>\n\n<p><em>And damned, is <code>Atomic</code> verbose... I kinda wish there was a <code>get</code>/<code>set</code> with <code>SeqCst</code> (the stronger ordering) available.</em></p>\n"}], "owner": {"reputation": 13539, "user_id": 319006, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG", "display_name": "sholsapp", "link": "https://stackoverflow.com/users/319006/sholsapp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2487, "favorite_count": 3, "accepted_answer_id": 42044143, "answer_count": 1, "score": 6, "last_activity_date": 1486233856, "creation_date": 1486232074, "last_edit_date": 1486232510, "question_id": 42043823, "link": "https://stackoverflow.com/questions/42043823/design-help-threading-within-a-struct", "title": "Design help: threading within a struct", "body": "<p>I'm new to Rust. As a learning exercise I'm trying to write a simple timer struct that I once wrote in C++. The interface and implementation looks something like this:</p>\n\n<pre><code>pub struct Timer {\n    handle: Option&lt;std::thread::JoinHandle&lt;()&gt;&gt;,\n    alive: bool,\n}\n\nimpl Timer {\n    pub fn new() {\n        Timer {\n            handle: None,\n            alive: false,\n        }\n    }\n\n    pub fn start(&amp;'static mut self) {\n        // Oops! How do I do this?\n        self.handle = Some(std::thread::spawn(move || {\n            self.alive = true;\n            self.loop()\n        }));\n    }\n\n    pub fn stop(&amp;mut self) {\n        self.alive = false;\n        self.handle.unwrap().join()\n    }\n\n    pub fn loop(&amp;self) {\n        // while alive\n    }\n}\n</code></pre>\n\n<p>I understand why this is an error because of <code>use of moved value: self</code> within the <code>start</code> function, but I'm wondering how I'm supposed to <em>design</em> my struct so that something like this would work. In every scenario I can think of, I'll always have a double borrow situation.</p>\n\n<p>I have a hunch that I need to learn more about interior mutability, but figured I would ask for design guidance before going down any more rabbit holes.</p>\n"}, {"tags": ["rust", "api-design", "type-safety"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1486198814, "post_id": 42036826, "comment_id": 71250514, "body": "Just to clarify: both methods have to be called at some point within the enclosing function? Is the order relevant? Or do you just want to make sure that, <i>if</i> <code>move_right()</code> is called, <code>move_left()</code> is called, too? Also: can you describe the enclosing function? Does it return anything?"}, {"owner": {"reputation": 3583, "user_id": 1391026, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/af98bdbeea8772f2d90d47d507098256?s=128&d=identicon&r=PG", "display_name": "musicmatze", "link": "https://stackoverflow.com/users/1391026/musicmatze"}, "edited": false, "score": 0, "creation_date": 1486213348, "post_id": 42036826, "comment_id": 71254773, "body": "OP, if you have to call <code>move_left()</code> after <code>move_right()</code> was called, you could bundle these functionalities to return a custom type (kind of a handler) that automatically calls <code>move_left()</code> on <code>Drop</code> - though that might not be possible if your second fn has to return values and so on ... It <i>might</i> be an idea, but it might get ugly rather quickly."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486221265, "post_id": 42036826, "comment_id": 71257169, "body": "If you can express the serie of calls to be performed as a state machine, then states can be encoded as types and transitions as method calls on <code>self</code> (which consume the current state and produce a new one). Would it be possible, or is not flexible enough?"}, {"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1486237559, "post_id": 42036826, "comment_id": 71262791, "body": "@LukasKalbertodt It&#39;s the second one: if you move right, you have to move left afterwards. It can&#39;t be a Drop like what musicmatze suggested because that would rely on the compiler to drop the value at the right time. We need more control than that. The enclosing function would be other operations that also move right and then move left by the same amount. It&#39;s important to always <i>eventually</i> return to the reference by moving left again."}], "answers": [{"comments": [{"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1486238053, "post_id": 42040701, "comment_id": 71262942, "body": "Thanks for your answer! Unfortunately, the closure method doesn&#39;t work well because it needs to be a bit more flexible than that. I added another example in the question to clarify. The second approach is interesting, but what if I want to explicitly perform the inverse operation explicitly? It&#39;s hard to rely on the compiler to drop in time."}, {"owner": {"reputation": 10895, "user_id": 158226, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/1b171ce1f20ce82a31999e843a7fe9b6?s=128&d=identicon&r=PG", "display_name": "djc", "link": "https://stackoverflow.com/users/158226/djc"}, "reply_to_user": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 2, "creation_date": 1486374325, "post_id": 42040701, "comment_id": 71300783, "body": "@SunjayVarma in Rust, because of how ownership works, dropping should be fully deterministic; also you could wrap your original <code>Foo</code> in some type that has the <code>drop()</code> method, and you could make sure this wrapper object&#39;s ownership goes out of scope at the right time. To me, it feels like the drop-based solution is probably the right way to go."}, {"owner": {"reputation": 670, "user_id": 359949, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/6d53d805cceba967c1f16d034dc5c867?s=128&d=identicon&r=PG", "display_name": "silmeth", "link": "https://stackoverflow.com/users/359949/silmeth"}, "edited": false, "score": 3, "creation_date": 1486386080, "post_id": 42040701, "comment_id": 71308094, "body": "I agree that dropping is the right way. If you really need the drop to happen before the end of a scope, you can also just call en empty function which takes the ownership of the value, like here: <a href=\"https://gist.github.com/silmeth/f1d66c819862b418fd8862e3dc36875a\" rel=\"nofollow noreferrer\">gist.github.com/silmeth/f1d66c819862b418fd8862e3dc36875a</a> \u2013 but when you forget to do it manually, the drop will happen eventually at the end of a scope, so you won\u2019t miss calling the <code>move_right()</code> method."}, {"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1486398617, "post_id": 42040701, "comment_id": 71316678, "body": "When I said &quot;it&#39;s hard to rely on the compiler to drop in time&quot;, I meant that sometimes I&#39;ll need to drop the value explicitly. While dropping is completely deterministic, it usually happens at the end of the scope so while that accomplishes the goal of calling the method eventually, it doesn&#39;t allow me to explicitly see when the method was called. Thank you for your responses this discussion is very interesting!"}], "tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": false, "score": 6, "last_activity_date": 1486216529, "last_edit_date": 1486216529, "creation_date": 1486213377, "answer_id": 42040701, "question_id": 42036826, "link": "https://stackoverflow.com/questions/42036826/using-the-rust-compiler-to-prevent-forgetting-to-call-a-method/42040701#42040701", "title": "Using the Rust compiler to prevent forgetting to call a method", "body": "<p>I don't think <code>#[must_use]</code> is really what you want in this case. Here's two different approaches to solving your problem. The first one is to just wrap up what you need to do in a closure, and abstract away the direct calls:</p>\n\n<pre><code>#[derive(Debug)]\npub struct Foo {\n    x: isize,\n    y: isize,\n}\n\nimpl Foo {\n    pub fn new(x: isize, y: isize) -&gt; Foo {\n        Foo { x: x, y: y }\n    }\n\n    fn move_left_by(&amp;mut self, steps: isize) {\n        self.x -= steps;\n    }\n\n    fn move_right_by(&amp;mut self, steps: isize) {\n        self.x += steps;\n    }\n\n    pub fn do_while_right&lt;F&gt;(&amp;mut self, steps: isize, f: F)\n        where F: FnOnce(&amp;mut Self)\n    {\n        self.move_right_by(steps);\n        f(self);\n        self.move_left_by(steps);\n    }\n}\n\nfn main() {\n    let mut x = Foo::new(0, 0);\n    println!(\"{:?}\", x);\n    x.do_while_right(10, |foo| {\n        println!(\"{:?}\", foo);\n    });\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<p>The second approach is to create a wrapper type which calls the function when dropped (similar to how <code>Mutex::lock</code> produces a <code>MutexGuard</code> which unlocks the <code>Mutex</code> when dropped):</p>\n\n<pre><code>#[derive(Debug)]\npub struct Foo {\n    x: isize,\n    y: isize,\n}\n\nimpl Foo {\n    fn new(x: isize, y: isize) -&gt; Foo {\n        Foo { x: x, y: y }\n    }\n\n    fn move_left_by(&amp;mut self, steps: isize) {\n        self.x -= steps;\n    }\n\n    fn move_right_by(&amp;mut self, steps: isize) {\n        self.x += steps;\n    }\n\n    pub fn returning_move_right(&amp;mut self, x: isize) -&gt; MovedFoo {\n        self.move_right_by(x);\n        MovedFoo {\n            inner: self,\n            move_x: x,\n            move_y: 0,\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct MovedFoo&lt;'a&gt; {\n    inner: &amp;'a mut Foo,\n    move_x: isize,\n    move_y: isize,\n}\n\nimpl&lt;'a&gt; Drop for MovedFoo&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        self.inner.move_left_by(self.move_x);\n    }\n}\n\nfn main() {\n    let mut x = Foo::new(0, 0);\n    println!(\"{:?}\", x);\n    {\n        let wrapped = x.returning_move_right(5);\n        println!(\"{:?}\", wrapped);\n    }\n    println!(\"{:?}\", x);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1486238156, "post_id": 42040725, "comment_id": 71262969, "body": "That&#39;s an interesting approach! Great way to get the compiler involved to make sure that it happens."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 17, "last_activity_date": 1548172920, "last_edit_date": 1548172920, "creation_date": 1486213532, "answer_id": 42040725, "question_id": 42036826, "link": "https://stackoverflow.com/questions/42036826/using-the-rust-compiler-to-prevent-forgetting-to-call-a-method/42040725#42040725", "title": "Using the Rust compiler to prevent forgetting to call a method", "body": "<p>You can use phantom types to carry around additional information, which can be used for type checking without any runtime cost. A limitation is that <code>move_left_by</code> and <code>move_right_by</code> must return a new owned object because they need to change the type, but often this won't be a problem.</p>\n\n<p>Additionally, the compiler will complain if you don't actually use the types in your struct, so you have to add fields that use them. Rust's <code>std</code> provides the zero-sized <code>PhantomData</code> type as a convenience for this purpose.</p>\n\n<p>Your constraint could be encoded like this:</p>\n\n<pre><code>use std::marker::PhantomData;\n\npub struct GoneLeft;\npub struct GoneRight;\npub type Completed = (GoneLeft, GoneRight);\n\npub struct Thing&lt;S = ((), ())&gt; {\n    pub position: i32,\n    phantom: PhantomData&lt;S&gt;,\n}\n\n\n// private to control how Thing can be constructed\nfn new_thing&lt;S&gt;(position: i32) -&gt; Thing&lt;S&gt; {\n    Thing {\n        position: position,\n        phantom: PhantomData,\n    }\n}\n\nimpl Thing {\n    pub fn new() -&gt; Thing {\n        new_thing(0)\n    }\n}\n\nimpl&lt;L, R&gt; Thing&lt;(L, R)&gt; {\n    pub fn move_left_by(self, by: i32) -&gt; Thing&lt;(GoneLeft, R)&gt; {\n        new_thing(self.position - by)\n    }\n\n    pub fn move_right_by(self, by: i32) -&gt; Thing&lt;(L, GoneRight)&gt; {\n        new_thing(self.position + by)\n    }\n}\n</code></pre>\n\n<p>You can use it like this:</p>\n\n<pre><code>// This function can only be called if both move_right_by and move_left_by\n// have been called on Thing already\nfn do_something(thing: &amp;Thing&lt;Completed&gt;) {\n    println!(\"It's gone both ways: {:?}\", thing.position);\n}\n\nfn main() {\n    let thing = Thing::new()\n          .move_right_by(4)\n          .move_left_by(1);\n    do_something(&amp;thing);\n}\n</code></pre>\n\n<p>And if you miss one of the required methods,</p>\n\n<pre><code>fn main(){\n    let thing = Thing::new()\n          .move_right_by(3);\n    do_something(&amp;thing);\n}\n</code></pre>\n\n<p>then you'll get a compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:49:18\n   |\n49 |     do_something(&amp;thing);\n   |                  ^^^^^^ expected struct `GoneLeft`, found ()\n   |\n   = note: expected type `&amp;Thing&lt;GoneLeft, GoneRight&gt;`\n   = note:    found type `&amp;Thing&lt;(), GoneRight&gt;`\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1488555433, "post_id": 42124710, "comment_id": 72298221, "body": "This is similar to my answer, but actually a bit simpler. I think there are a few similar approaches, and you could probably even create a macro that could generate the type-level states and transitions."}], "tags": [], "owner": {"reputation": 2434, "user_id": 508716, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/77d190c42f3d57f3ee3ea864ab216016?s=128&d=identicon&r=PG", "display_name": "Tommi Komulainen", "link": "https://stackoverflow.com/users/508716/tommi-komulainen"}, "is_accepted": false, "score": 1, "last_activity_date": 1486592818, "last_edit_date": 1486592818, "creation_date": 1486592364, "answer_id": 42124710, "question_id": 42036826, "link": "https://stackoverflow.com/questions/42036826/using-the-rust-compiler-to-prevent-forgetting-to-call-a-method/42124710#42124710", "title": "Using the Rust compiler to prevent forgetting to call a method", "body": "<p>I only looked at the initial description and probably missed the details in the conversation but one way to enforce the actions is to <em>consume</em> the original object (going right) and replace it with one that forces you to to move left by same amount before you can do whatever you wanted to do to finish the task.</p>\n\n<p>The new type can forbid / require different calls to be made before getting to a finished state. For example (untested):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct CanGoRight { .. }\nimpl CanGoRight {\n    fn move_right_by(self, steps: usize) -&gt; MustGoLeft {\n        // Note: self is consumed and only `MustGoLeft` methods are allowed\n        MustGoLeft{steps: steps}\n    }\n}\nstruct MustGoLeft {\n    steps: usize;\n}\nimpl MustGoLeft {\n    fn move_left_by(self, steps: usize) -&gt; Result&lt;CanGoRight, MustGoLeft&gt; {\n        // Totally making this up as I go here...\n        // If you haven't moved left at least the same amount of steps,\n        // you must move a bit further to the left; otherwise you must\n        // switch back to `CanGoRight` again\n        if steps &lt; self.steps {\n            Err(MustGoLeft{ steps: self.steps - steps })\n        } else {\n            Ok(CanGoRight{ steps: steps - self.steps })\n        }\n    }\n    fn open_box(self) -&gt; MustGoLeftCanCloseBox {..}\n}\n\nlet foo = foo.move_right_by(10); // can't move right anymore\n</code></pre>\n\n<p>At this point <code>foo</code> can no longer move right as it isn't allowed by <code>MustGoLeft</code> but it can move left or open the box. If it moves left far enough it gets back to the <code>CanGoRight</code> state again. But if it opens the box then totally new rules apply. Either way you'll have to deal with both possibilities.</p>\n\n<p>There's probably going to be some duplication between the states, but should be easy enough to refactor. Adding a custom trait might help.</p>\n\n<p>In the end it sounds like you're making a state machine of sorts. Maybe <a href=\"https://hoverbear.org/2016/10/12/rust-state-machine-pattern/\" rel=\"nofollow noreferrer\">https://hoverbear.org/2016/10/12/rust-state-machine-pattern/</a> will be of use.</p>\n"}], "owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1877, "favorite_count": 5, "answer_count": 3, "score": 11, "last_activity_date": 1548172920, "creation_date": 1486186011, "last_edit_date": 1545065459, "question_id": 42036826, "link": "https://stackoverflow.com/questions/42036826/using-the-rust-compiler-to-prevent-forgetting-to-call-a-method", "title": "Using the Rust compiler to prevent forgetting to call a method", "body": "<p>I have some code like this:</p>\n\n<pre><code>foo.move_right_by(10);\n//do some stuff\nfoo.move_left_by(10);\n</code></pre>\n\n<p>It's really important that I perform both of those operations <em>eventually</em>, but I often forget to do the second one after the first. It causes a lot of bugs and I'm wondering if there is an idiomatic Rust way to avoid this problem. Is there a way to get the rust compiler to let me know when I forget?</p>\n\n<p>My idea was to maybe somehow have something like this:</p>\n\n<pre><code>// must_use will prevent us from forgetting this if it is returned by a function\n#[must_use]\npub struct MustGoLeft {\n    steps: usize;\n}\n\nimpl MustGoLeft {\n    fn move(&amp;self, foo: &amp;mut Foo) {\n        foo.move_left_by(self.steps);\n    }\n}\n\n// If we don't use left, we'll get a warning about an unused variable\nlet left = foo.move_left_by(10);\n\n// Downside: move() can be called multiple times which is still a bug\n// Downside: left is still available after this call, it would be nice if it could be dropped when move is called\nleft.move();\n</code></pre>\n\n<p>Is there a better way to accomplish this?</p>\n\n<p>Another idea is to implement <code>Drop</code> and <code>panic!</code> if the struct is dropped without having called that method. This isn't as good though because it's a runtime check and that is highly undesirable. </p>\n\n<p><strong>Edit:</strong> I realized my example may have been too simple. The logic involved can get quite complex. For example, we have something like this:</p>\n\n<pre><code>foo.move_right_by(10);\nfoo.open_box(); // like a cardboard box, nothing to do with Box&lt;T&gt;\nfoo.move_left_by(10);\n// do more stuff...\nfoo.close_box();\n</code></pre>\n\n<p>Notice how the operations aren't performed in a nice, properly nested order. The only thing that's important is that the inverse operation is always called afterwards. The order sometimes needs to be specified in a certain way in order to make the code work as expected.</p>\n\n<p>We can even have something like this:</p>\n\n<pre><code>foo.move_right_by(10);\nfoo.open_box(); // like a cardboard box, nothing to do with Box&lt;T&gt;\nfoo.move_left_by(10);\n// do more stuff...\nfoo.move_right_by(10);\nfoo.close_box();\nfoo.move_left_by(10);\n// do more stuff...\n</code></pre>\n"}, {"tags": ["vector", "reference", "linked-list", "rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1486147817, "last_edit_date": 1495540900, "creation_date": 1486147501, "answer_id": 42031015, "question_id": 42030833, "link": "https://stackoverflow.com/questions/42030833/what-is-the-right-way-to-have-multiple-linked-lists-and-move-data-between-them-i/42031015#42031015", "title": "What is the right way to have multiple linked lists and move data between them in Rust?", "body": "<p>There is no <strong>right</strong> approach. One possibility is to use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>split_at_mut</code></a>. This creates two separate slices, each of which can be mutated separately from the other:</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn main() {\n    let mut v = vec![LinkedList::new(), LinkedList::new()];\n    v[0].push_back(1);\n    v[1].push_back(3);\n\n    {\n        let (head, tail) = v.split_at_mut(1);\n        head[0].append(&amp;mut tail[0]);\n    }\n\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>See:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30073684/155423\">How to get mutable references to two array elements at the same time?</a></li>\n<li><a href=\"https://stackoverflow.com/q/39604042/155423\">How can I write data from a slice to the same slice?</a></li>\n<li><a href=\"https://stackoverflow.com/q/36244762/155423\">How to operate on 2 mutable slices of a Rust array</a></li>\n<li>etc.</li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1486239507, "creation_date": 1486239507, "answer_id": 42045144, "question_id": 42030833, "link": "https://stackoverflow.com/questions/42030833/what-is-the-right-way-to-have-multiple-linked-lists-and-move-data-between-them-i/42045144#42045144", "title": "What is the right way to have multiple linked lists and move data between them in Rust?", "body": "<p>Most collections have an <a href=\"https://doc.rust-lang.org/stable/std/collections/linked_list/struct.LinkedList.html#method.iter_mut\" rel=\"nofollow noreferrer\"><code>iter_mut</code></a> method that returns an iterator that yields mutable references to each item in the collection. And these references can all be used at the same time! (But the references must come from the same iterator; you can't use references coming from separate calls to <code>iter_mut</code> concurrently.)</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn listtest() {\n    let mut v: Vec&lt;LinkedList&lt;i32&gt;&gt; = Vec::new();\n    v.push(LinkedList::new()); // first list\n    v.push(LinkedList::new()); // second list\n    v[0].push_back(1); // fill with data\n    v[1].push_back(3); // fill with data\n    let mut vi = v.iter_mut();\n    let first = vi.next().unwrap();\n    let second = vi.next().unwrap();\n    first.append(second); // merge lists\n}\n\nfn main() {\n    listtest();\n}\n</code></pre>\n\n<p>Also remember that iterators have the <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.nth\" rel=\"nofollow noreferrer\"><code>nth</code></a> method for doing the equivalent of <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#tymethod.next\" rel=\"nofollow noreferrer\"><code>next</code></a> in a loop.</p>\n"}], "owner": {"reputation": 302, "user_id": 3878470, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/7zbZs.png?s=128&g=1", "display_name": "supinf", "link": "https://stackoverflow.com/users/3878470/supinf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 201, "favorite_count": 0, "accepted_answer_id": 42031015, "answer_count": 2, "score": 2, "last_activity_date": 1486239507, "creation_date": 1486146789, "last_edit_date": 1486148016, "question_id": 42030833, "link": "https://stackoverflow.com/questions/42030833/what-is-the-right-way-to-have-multiple-linked-lists-and-move-data-between-them-i", "title": "What is the right way to have multiple linked lists and move data between them in Rust?", "body": "<p>What is the right way to have multiple <code>std::collections::LinkedList</code>s where the number of those lists is unknown at compile time?</p>\n\n<p>I'm filling them with data as well as merging them (e.g. using <code>append()</code>).\nI thought it would be good to have a vector that contains those lists, or contains references to those lists.</p>\n\n<p>I have tried the following:</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn listtest() {\n    let mut v: Vec&lt;LinkedList&lt;i32&gt;&gt; = Vec::new();\n    v.push(LinkedList::new()); // first list\n    v.push(LinkedList::new()); // second list\n    v[0].push_back(1); // fill with data\n    v[1].push_back(3); // fill with data\n    v[0].append(&amp;mut v[1]); // merge lists\n}\n\nfn main() {\n    listtest();\n}\n</code></pre>\n\n<p>This fails to compile because I have two mutable references of <code>v</code> when using <code>append()</code>. I also tried using <code>Vec&lt;&amp;mut LinkedList&lt;i32&gt;&gt;</code>, but did not succeed.</p>\n\n<p>What would be the right approach to this problem?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486146170, "post_id": 42030429, "comment_id": 71235779, "body": "I&#39;ve updated your question because the tuple struct is a red-herring here. Regardless of the type of struct, you&#39;ll run into the same type of problem. Sadly, I&#39;m pretty sure that the answer is &quot;you can&#39;t&quot;."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1486146487, "post_id": 42030429, "comment_id": 71235953, "body": "<code>Display</code> is generally reserved for <code>String</code> conversion, if the type implements <code>Debug</code> (and it should, in general), you can display it with <code>println!(&quot;{:?}&quot;, value)</code>. As such, I have two questions: (1) do you really need <code>Display</code>? and, if it is, (2) would implementing a proxy (over a reference to this type) and only constructing the proxy when <code>Display</code> is needed suitable for your problem?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486148232, "post_id": 42030429, "comment_id": 71236833, "body": "@MatthieuM. nice thinking outside of the box! A <code>println!(&quot;{}&quot;, DisplayMap(&amp;my_map))</code> would be pretty <i>and</i> idiomatic."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486148447, "post_id": 42030429, "comment_id": 71236932, "body": "@Shepmaster: I&#39;ve used the proxy scheme in C++ enough that it&#39;s second nature... but it won&#39;t help if the OP needs to use this type in generic with <code>T: Display</code> bound :/"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1486152985, "last_edit_date": 1486152985, "creation_date": 1486146315, "answer_id": 42030697, "question_id": 42030429, "link": "https://stackoverflow.com/questions/42030429/how-do-i-access-the-targets-associated-functions-when-using-deref/42030697#42030697", "title": "How do I access the target&#39;s associated functions when using `Deref`?", "body": "<p>Newtypes are specifically designed to provide encapsulation, so they do not necessarily lend them well to just \"adding new stuff\".</p>\n\n<p>That being said, a combination of:</p>\n\n<ul>\n<li><code>Deref</code> and <code>DerefMut</code> to get access to the methods</li>\n<li><code>From</code> and <code>Into</code> to easily convert from one to the other</li>\n<li>OR making the inner type <code>pub</code></li>\n</ul>\n\n<p>should be able to tackle this.</p>\n\n<p>The <code>From</code>/<code>Into</code> recommendation comes from the fact that most associated functions are generally constructors<sup>1</sup>.</p>\n\n<pre><code>impl From&lt;ObjectComingFromAnExternalCrate&lt;char, char&gt;&gt; for CustomMap { ... }\n</code></pre>\n\n<p>and then you can do:</p>\n\n<pre><code>let cm: CustomMap = ObjectComingFromAnExternalCrate&lt;char, char&gt;::with_capacity(10).into();\n</code></pre>\n\n<p>The other solution is to define <code>CustomMap</code> as:</p>\n\n<pre><code>struct CustomMap(pub ObjectComingFromAnExternalCrate&lt;char, char&gt;);\n</code></pre>\n\n<p>and then:</p>\n\n<pre><code>let cm = CustomMap(ObjectComingFromAnExternalCrate&lt;char, char&gt;::with_capacity(10));\n</code></pre>\n\n<p>If you do not wish to enforce any other invariant, and do not care about encapsulation, either should get you going.</p>\n\n<p><sup>1</sup> <em>Pointer types, such as <code>Rc</code>, use them heavily to avoid hiding methods of the Deref'ed to type.</em></p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user7512348"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 265, "favorite_count": 0, "accepted_answer_id": 42030697, "answer_count": 1, "score": 3, "last_activity_date": 1486152985, "creation_date": 1486145291, "last_edit_date": 1486146099, "question_id": 42030429, "link": "https://stackoverflow.com/questions/42030429/how-do-i-access-the-targets-associated-functions-when-using-deref", "title": "How do I access the target&#39;s associated functions when using `Deref`?", "body": "<p>I need to implement the <code>fmt::Display</code> method for an object coming from an external crate, so I created a wrapper for this object. I'd like to be able to use all the methods from the original object, without having to redefine all of them. I tried to implement <code>Deref</code> as advised on the awesome IRC channel <code>#rust-beginners</code>:</p>\n\n<pre><code>struct CustomMap(ObjectComingFromAnExternalCrate&lt;char, char&gt;);\n\nimpl std::ops::Deref for CustomMap {\n    type Target = ObjectComingFromAnExternalCrate&lt;char, char&gt;;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.0\n    }\n}\n\nfn main() {\n    let cm = CustomMap::with_capacity(10);\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>However, I'm getting this error :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no associated item named `with_capacity` found for type `CustomMap` in the current scope\n  --&gt; &lt;anon&gt;:16:13\n   |\n16 |     let a = CustomMap::with_capacity(10);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I assume it's because <code>deref()</code> doesn't work with associated functions. </p>\n\n<p>How can I work around this? Reimplementing every associated function I use, just to be able to implement one method I need seems like overkill.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1486145855, "post_id": 42030463, "comment_id": 71235578, "body": "Why those two ways? Is the second more idiomatic?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1486146121, "post_id": 42030463, "comment_id": 71235747, "body": "@Boiethios <code>parse()</code> uses <code>from_str()</code> internally. It only exists for convenience: you don&#39;t have to import the trait and you often don&#39;t have to mention the type name because type inference will do it for you (probably in your case as well). I <i>think</i> <code>parse()</code> is more idiomatic as in &quot;used more frequently&quot;."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1486146167, "post_id": 42030463, "comment_id": 71235777, "body": "Thanks for your answers."}, {"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 1, "creation_date": 1486146861, "post_id": 42030463, "comment_id": 71236165, "body": "The docs casually mention that <code>parse()</code> is used more often than <code>from_str()</code>, but don&#39;t say why. <a href=\"https://doc.rust-lang.org/std/primitive.bool.html#examples-1\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.bool.html#examples-1</a> I think being a method of str vs importing a trait, and being able to name the type (instead of using type ascription) are exactly the reasons."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1486145428, "creation_date": 1486145428, "answer_id": 42030463, "question_id": 42030345, "link": "https://stackoverflow.com/questions/42030345/how-to-create-an-ipaddr-without-knowing-the-specific-ip-version/42030463#42030463", "title": "How to create an `IpAddr` without knowing the specific IP version?", "body": "<p>Your friend is the <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html\" rel=\"noreferrer\"><code>FromStr</code></a> trait from the standard library. It abstracts types that can be created from a string. As you can see <a href=\"https://doc.rust-lang.org/std/net/enum.Ipv4Addr.html\" rel=\"noreferrer\"><code>Ipv4Addr</code></a>, <a href=\"https://doc.rust-lang.org/std/net/enum.Ipv6Addr.html\" rel=\"noreferrer\"><code>Ipv6Addr</code></a> and <a href=\"https://doc.rust-lang.org/std/net/enum.IpAddr.html\" rel=\"noreferrer\"><code>IpAddr</code></a> all implement that trait! So you could either write:</p>\n\n<pre><code>use std::str::FromStr;\n\nlet addr = IpAddr::from_str(\"127.0.0.1\");\n</code></pre>\n\n<p>Or, the slightly more common way, by using the <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"noreferrer\"><code>str::parse()</code></a> method:</p>\n\n<pre><code>let addr = \"127.0.0.1\".parse::&lt;IpAddr&gt;();\n</code></pre>\n\n<p>The <code>from_str()</code>/<code>parse()</code> methods return a <code>Result</code> to signal whether or not the string is valid.</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1825, "favorite_count": 0, "accepted_answer_id": 42030463, "answer_count": 1, "score": 1, "last_activity_date": 1486146846, "creation_date": 1486144955, "last_edit_date": 1486146846, "question_id": 42030345, "link": "https://stackoverflow.com/questions/42030345/how-to-create-an-ipaddr-without-knowing-the-specific-ip-version", "title": "How to create an `IpAddr` without knowing the specific IP version?", "body": "<p>I am playing with <code>Iron</code>, and I ran into this problem.</p>\n\n<pre><code>fn main() {\n    let mut router = Router::new();\n    let address = \"127.0.0.1\"; // or maybe \"::1/128\"\n    let port = 3000;\n    let ip = std::net::IpAddr::new(address); // does not exist\n\n    Iron::new(router).http((ip, port)).unwrap();\n}\n</code></pre>\n\n<p>The <code>http()</code> method takes a struct that implements <a href=\"https://doc.rust-lang.org/std/net/trait.ToSocketAddrs.html\" rel=\"nofollow noreferrer\"><code>ToSocketAddrs</code></a>. <code>(&amp;str, u16)</code> implements this trait, but I prefer to verify the validity of user input <strong>before</strong> the <code>http()</code> method is called.</p>\n\n<p>I saw that <code>(std::net::IpAddr, u16)</code> implements this trait, but I do not know how to build an <code>IpAddr</code> \u201cagnostically\u201d: maybe the user wrote an IPv4 address, maybe an IPv6.</p>\n\n<p>Is there a way to create an <code>IpAddr</code> from a string only? I think that it is possible because I can give to it a <code>(&amp;str, u16)</code>.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "edited": false, "score": 0, "creation_date": 1486140416, "post_id": 42028805, "comment_id": 71232569, "body": "Oh of course! I completely forgot that it isn&#39;t about Foo but the Iterator itself; I first thought the lifetime bound was on a struct... Thanks for clarifying this!"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 23, "last_activity_date": 1567372232, "last_edit_date": 1567372232, "creation_date": 1486139471, "answer_id": 42028805, "question_id": 42028470, "link": "https://stackoverflow.com/questions/42028470/why-is-adding-a-lifetime-to-a-trait-with-the-plus-operator-iteratoritem-foo/42028805#42028805", "title": "Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?", "body": "<p>There is one thing that is easily overlooked: if you have a trait <code>Bar</code> and you want to have a boxed trait object <code>Box&lt;dyn Bar&gt;</code>, the compiler automatically adds a <code>'static</code> lifetime bound (as specified in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\" rel=\"noreferrer\">RFC 599</a>). This means that <code>Box&lt;dyn Bar&gt;</code> and <code>Box&lt;dyn Bar + 'static&gt;</code> are equivalent!</p>\n\n<p>In your case, the compiler automatically adds the static bound such that this ...</p>\n\n<pre><code>fn into_iterator(myvec: &amp;Vec&lt;Foo&gt;) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;Foo&gt;&gt;\n</code></pre>\n\n<p>... is equivalent to that:</p>\n\n<pre><code>fn into_iterator(myvec: &amp;Vec&lt;Foo&gt;) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;Foo&gt; + 'static&gt;\n</code></pre>\n\n<p>Now lifetime elision rules kick in and \"connect\" the two lifetime-slots, such that the above code is equivalent to:</p>\n\n<pre><code>fn into_iterator&lt;'a&gt;(myvec: &amp;'a Vec&lt;Foo&gt;) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;'a Foo&gt; + 'static&gt;\n</code></pre>\n\n<p>But the type <code>Iter&lt;'a, Foo&gt;</code> (the specific iterator type for <code>Vec&lt;Foo&gt;</code>) obviously does not satisfy the bound <code>'static</code> (because it is borrowing the <code>Vec&lt;Foo&gt;</code>)! So we have to tell the compiler that we don't want the default <code>'static</code> bound by specifying our own lifetime bound:</p>\n\n<pre><code>fn into_iterator&lt;'a&gt;(myvec: &amp;'a Vec&lt;Foo&gt;) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;Foo&gt; + 'a&gt;\n</code></pre>\n\n<p>Now the compiler knows that the trait object is only valid for the lifetime <code>'a</code>. Note that we don't explicitly need to annotate the lifetime of the associated <code>Item</code> type! Lifetime elision rules take care of that.</p>\n"}], "owner": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1411, "favorite_count": 4, "accepted_answer_id": 42028805, "answer_count": 1, "score": 15, "last_activity_date": 1567372285, "creation_date": 1486138420, "last_edit_date": 1567372285, "question_id": 42028470, "link": "https://stackoverflow.com/questions/42028470/why-is-adding-a-lifetime-to-a-trait-with-the-plus-operator-iteratoritem-foo", "title": "Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?", "body": "<p>I'm applying a closure on the iterator and I want to use stable, so I want to return a boxed <code>Iterator</code>. The obvious way to do so is the following:</p>\n\n<pre><code>struct Foo;\n\nfn into_iterator(myvec: &amp;Vec&lt;Foo&gt;) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;Foo&gt;&gt; {\n    Box::new(myvec.iter())\n}\n</code></pre>\n\n<p>This fails because the borrow checker cannot infer the appropriate lifetimes.</p>\n\n<p>After some research, I've found <a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a>, which brought me to adding <code>+ 'a</code>:</p>\n\n<pre><code>fn into_iterator&lt;'a&gt;(myvec: &amp;'a Vec&lt;Foo&gt;) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;'a Foo&gt; + 'a&gt; {\n    Box::new(myvec.iter())\n}\n</code></pre>\n\n<p>But I don't understand</p>\n\n<ul>\n<li>What this does</li>\n<li>And why it is needed here</li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 93, "user_id": 13954423, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f92e1ed13323402c3f2d66f02fb4514?s=128&d=identicon&r=PG&f=1", "display_name": "cdecompilador", "link": "https://stackoverflow.com/users/13954423/cdecompilador"}, "edited": false, "score": 0, "creation_date": 1616415276, "post_id": 42026446, "comment_id": 117986256, "body": "Any new way of doing this??"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 93, "user_id": 13954423, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f92e1ed13323402c3f2d66f02fb4514?s=128&d=identicon&r=PG&f=1", "display_name": "cdecompilador", "link": "https://stackoverflow.com/users/13954423/cdecompilador"}, "edited": false, "score": 0, "creation_date": 1616430466, "post_id": 42026446, "comment_id": 117994179, "body": "@cdecompilador <a href=\"https://github.com/rust-lang/rust/issues/53667\" rel=\"nofollow noreferrer\">Still in development</a>. You can have more information <a href=\"https://rust-lang.github.io/rfcs/2497-if-let-chains.html\" rel=\"nofollow noreferrer\">here</a>."}], "answers": [{"tags": [], "owner": {"reputation": 3583, "user_id": 1391026, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/af98bdbeea8772f2d90d47d507098256?s=128&d=identicon&r=PG", "display_name": "musicmatze", "link": "https://stackoverflow.com/users/1391026/musicmatze"}, "is_accepted": true, "score": 9, "last_activity_date": 1486227380, "last_edit_date": 1486227380, "creation_date": 1486132176, "answer_id": 42026534, "question_id": 42026446, "link": "https://stackoverflow.com/questions/42026446/how-to-have-multiple-if-let-with-a-rust-iterator/42026534#42026534", "title": "How to have multiple `if let` with a Rust iterator?", "body": "<p>You can use a \u201cfused\u201d iterator to collect multiple values into a tuple and use <code>if let</code> with that:</p>\n\n<pre><code>fn main() {\n    let mut args = std::env::args().fuse();\n    if let (Some(a), Some(b)) = (args.next(), args.next()) {\n        println!(\"{}, {}\", a, b);\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=862a33d842f05d4281e0a35b6ddff07e&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Example on the playground</a>)</p>\n\n<p><code>fuse</code> guarantees that after <code>next</code> returns <code>None</code> once, every call to <code>next</code> will give <code>None</code>.</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 908, "favorite_count": 0, "accepted_answer_id": 42026534, "answer_count": 1, "score": 5, "last_activity_date": 1486309441, "creation_date": 1486131936, "last_edit_date": 1486309441, "question_id": 42026446, "link": "https://stackoverflow.com/questions/42026446/how-to-have-multiple-if-let-with-a-rust-iterator", "title": "How to have multiple `if let` with a Rust iterator?", "body": "<p>I have this code:</p>\n\n<pre><code>fn main() {\n    let mut args = std::env::args();\n\n    if let Some(name) = args.next() {\n        if let Some(first) = args.next() {\n            println!(\"One arg provided to {}: {}\", name, first);\n        }\n    }\n}\n</code></pre>\n\n<p>Is it possible to have two <code>if let</code>s? I tried:</p>\n\n<pre><code>fn main() {\n    if let Some(name) = args.next() &amp;&amp; Some(first) = args.next() {\n        println!(\"one arg provided to {}: {}\", name, first);\n    }\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>fn main() {\n    if let Some(name) = args.next() &amp;&amp; let Some(first) = args.next() {\n        println!(\"one arg provided to {}: {}\", name, first);\n    }\n}\n</code></pre>\n\n<p>But this does not work. How to do this?</p>\n"}, {"tags": ["tcp", "rust", "future"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1486075973, "post_id": 42013783, "comment_id": 71203099, "body": "Please continue to refine your code to produce a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>.The <b>best</b> thing you can provide is a single code block that we can copy into a file locally and see the same problem. Requiring us to go to 3 or more other webpages to <i>try</i> to compose together the same code you have locally is a sure-fire way to lose some important piece of information."}, {"owner": {"reputation": 594, "user_id": 1443481, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4dd92d46e793967128399d3af5357589?s=128&d=identicon&r=PG", "display_name": "Stuart", "link": "https://stackoverflow.com/users/1443481/stuart"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486131486, "post_id": 42013783, "comment_id": 71226528, "body": "@Shepmaster added a different project with the same error but less logic."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486132233, "post_id": 42013783, "comment_id": 71227025, "body": "And like that, your problem is solved."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486132371, "post_id": 42013783, "comment_id": 71227119, "body": "Also, <b>do not</b> use a prefixed underscore (<code>_</code>) on variables you use. The <b>meaning</b> of a leading underscore is &quot;this variable is unused&quot;, so calling it <code>_socket</code> is fine, <i>until</i> you then call <code>read_to_end(_socket, ...)</code>"}], "owner": {"reputation": 594, "user_id": 1443481, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4dd92d46e793967128399d3af5357589?s=128&d=identicon&r=PG", "display_name": "Stuart", "link": "https://stackoverflow.com/users/1443481/stuart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 180, "favorite_count": 0, "closed_date": 1486132220, "answer_count": 0, "score": 0, "last_activity_date": 1486131465, "creation_date": 1486075741, "last_edit_date": 1486131465, "question_id": 42013783, "link": "https://stackoverflow.com/questions/42013783/tokio-server-does-not-send-until-killed", "closed_reason": "Duplicate", "title": "Tokio server does not send until killed", "body": "<p>I'm writing a client and server using Tokio, closely following the <a href=\"https://tokio.rs/docs/getting-started/simple-server/\" rel=\"nofollow noreferrer\">echo server</a> and <a href=\"https://tokio.rs/docs/getting-started/tls/\" rel=\"nofollow noreferrer\">http client</a> tutorials on tokio's website. My project is <a href=\"https://github.com/shterrett/clrud/tree/client-lib\" rel=\"nofollow noreferrer\">here</a>. </p>\n\n<p>The actual problem is that the response generated by the server is not sent to the client until the server is killed.</p>\n\n<h1>The server's <code>Codec</code> encoding method</h1>\n\n<pre><code>fn encode(&amp;mut self, msg: Self::Out, buf: &amp;mut Vec&lt;u8&gt;) -&gt; io::Result&lt;()&gt; {\n    println!(\"server encoding\");\n    match msg.response_type {\n        CommandResult::SUCCESS =&gt; println!(\"server says success\"),\n        CommandResult::FAILURE =&gt; println!(\"server says failure\")\n    }\n\n    buf.extend(msg.response_type.as_bytes());\n    buf.push(b'\\n');\n\n    let mut length = vec![0; 8];\n    BigEndian::write_u64(&amp;mut length, msg.length);\n    buf.extend(length.as_slice());\n    buf.push(b'\\n');\n\n    buf.extend(msg.data);\n    Ok(())\n}\n</code></pre>\n\n<p>I have added a <code>println!</code> just below <code>buf.extend(msg.data);</code> and verified that it is executed before I manually kill the server.</p>\n\n<h1>The service main function</h1>\n\n<pre><code>fn main() {\n    let addr = \"0.0.0.0:8080\".parse().unwrap();\n\n    let server = TcpServer::new(CacheCommandProto, addr);\n    let cache = Arc::new(Mutex::new(LruCache::new(u64::pow(2, 9))));\n\n    server.serve(move || Ok(\n        CacheSrv {\n            cache: cache.clone()\n        }));\n}\n</code></pre>\n\n<h1>The client library function responsible for connecting to the server</h1>\n\n<pre><code>fn send_request(&amp;self, cmd: CacheCommand) -&gt; io::Result&lt;CacheResponse&gt; {\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n    let socket = TcpStream::connect(&amp;self.address, &amp;handle);\n\n    println!(\"socket connected\");\n\n    let mut codec = CacheClientCodec {};\n    let mut payload = vec![];\n    let _ = codec.encode(cmd, &amp;mut payload);\n\n    println!(\"encoded\");\n\n    core.run(\n        socket.and_then(|_socket| {\n            println!(\"write all\");\n            tokio_core::io::write_all(_socket, payload)\n        }).and_then(|(_socket, _)| {\n            println!(\"read to end\");\n            tokio_core::io::read_to_end(_socket, vec![])\n        }).map(move |(_, data)| {\n            println!(\"decode\");\n            codec.decode(&amp;mut EasyBuf::from(data))\n        }).and_then(|result| {\n            println!(\"coalesce\");\n            result.and_then(|option| option.ok_or(io::Error::new(io::ErrorKind::Other, \"no result\")))\n        })\n    )\n}\n</code></pre>\n\n<h1>Proto</h1>\n\n<p>I'm using the <code>pipeline::ServerProto</code> from the <code>tokio_proto</code> crate:</p>\n\n<pre><code>impl&lt;T: Io + 'static&gt; ServerProto&lt;T&gt; for CacheCommandProto {\n    type Request = CacheCommand;\n    type Response = CacheResponse;\n    type Transport = Framed&lt;T, CacheServerCodec&gt;;\n    type BindTransport = Result&lt;Self::Transport, io::Error&gt;;\n\n    fn bind_transport(&amp;self, io: T) -&gt; Self::BindTransport {\n        Ok(io.framed(CacheServerCodec {}))\n    }\n}\n</code></pre>\n\n<p>The structure of all of these is the same as in the tutorials; there was no explicit flush needed for the server to send the echo. </p>\n\n<p>I've tried adding an extra <code>\\n</code> byte to the end of the buffer in the encoding method; that had no effect. I don't know how to trigger a manual flush on the response stream, but I don't believe I should need to.</p>\n\n<h1>Runnable,  minimal example</h1>\n\n<h2>server/src/main.rs</h2>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\nextern crate tokio_proto;\nextern crate tokio_service;\n\nuse std::io;\nuse std::str;\nuse tokio_core::io::{ Codec, EasyBuf, Io, Framed };\nuse tokio_proto::TcpServer;\nuse tokio_proto::pipeline::ServerProto;\nuse tokio_service::Service;\nuse futures::{ future, Future, BoxFuture };\n\npub struct LineCodec;\n\nimpl Codec for LineCodec {\n    type In = String;\n    type Out = String;\n\n    fn decode(&amp;mut self, buf: &amp;mut EasyBuf) -&gt; io::Result&lt;Option&lt;Self::In&gt;&gt; {\n        if let Some(i) = buf.as_slice().iter().position(|&amp;b| b == b'\\n') {\n            let line = buf.drain_to(i);\n            buf.drain_to(1);\n\n            match str::from_utf8(line.as_slice()) {\n                Ok(s) =&gt; Ok(Some(s.to_string())),\n                Err(_) =&gt; Err(io::Error::new(io::ErrorKind::Other, \"invalid UTF-8\"))\n            }\n        } else {\n            Ok(None)\n        }\n    }\n\n    fn encode(&amp;mut self, msg: String, buf: &amp;mut Vec&lt;u8&gt;) -&gt; io::Result&lt;()&gt; {\n        buf.extend(msg.as_bytes());\n        buf.push(b'\\n');\n        Ok(())\n    }\n}\n\npub struct LineProto;\n\nimpl&lt;T: Io + 'static&gt; ServerProto&lt;T&gt; for LineProto {\n    type Request = String;\n    type Response = String;\n    type Transport = Framed&lt;T, LineCodec&gt;;\n    type BindTransport = Result&lt;Self::Transport, io::Error&gt;;\n\n    fn bind_transport(&amp;self, io: T) -&gt; Self::BindTransport {\n        Ok(io.framed(LineCodec))\n    }\n}\n\npub struct Echo;\n\nimpl Service for Echo {\n    type Request = String;\n    type Response = String;\n    type Error = io::Error;\n    type Future = BoxFuture&lt;Self::Response, Self::Error&gt;;\n\n    fn call(&amp;self, req: Self::Request) -&gt; Self::Future {\n        future::ok(req).boxed()\n    }\n}\n\nfn main() {\n    let addr = \"0.0.0.0:12345\".parse().unwrap();\n    let server = TcpServer::new(LineProto, addr);\n\n    server.serve(|| Ok(Echo));\n}\n</code></pre>\n\n<h2>client/src/main.rs</h2>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\n\nuse std::io;\nuse std::str;\nuse std::io::{ BufReader, BufRead };\nuse std::net::ToSocketAddrs;\nuse tokio_core::io::{ Codec, EasyBuf };\nuse tokio_core::net::TcpStream;\nuse tokio_core::reactor::Core;\nuse futures::Future;\n\npub struct LineCodec;\n\nimpl Codec for LineCodec {\n    type In = String;\n    type Out = String;\n\n    fn decode(&amp;mut self, buf: &amp;mut EasyBuf) -&gt; io::Result&lt;Option&lt;Self::In&gt;&gt; {\n        if let Some(i) = buf.as_slice().iter().position(|&amp;b| b == b'\\n') {\n            let line = buf.drain_to(i);\n            buf.drain_to(1);\n\n            match str::from_utf8(line.as_slice()) {\n                Ok(s) =&gt; Ok(Some(s.to_string())),\n                Err(_) =&gt; Err(io::Error::new(io::ErrorKind::Other, \"invalid UTF-8\"))\n            }\n        } else {\n            Ok(None)\n        }\n    }\n\n    fn encode(&amp;mut self, msg: String, buf: &amp;mut Vec&lt;u8&gt;) -&gt; io::Result&lt;()&gt; {\n        buf.extend(msg.as_bytes());\n        buf.push(b'\\n');\n        Ok(())\n    }\n}\n\nfn main() {\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n    let addr = \"0.0.0.0:12345\".to_socket_addrs().unwrap().next().unwrap();\n\n    let stdin = io::stdin();\n    let reader = BufReader::new(stdin);\n    for res in reader.lines() {\n        match res {\n            Ok(line) =&gt; {\n                let socket = TcpStream::connect(&amp;addr, &amp;handle);\n                let mut codec = LineCodec {};\n                let mut payload = vec![];\n                let _ = codec.encode(line, &amp;mut payload);\n\n                println!(\"encoded\");\n\n                let result = core.run(\n                    socket.and_then(|_socket| {\n                        println!(\"write all\");\n                        tokio_core::io::write_all(_socket, payload)\n                    }).and_then(|(_socket, _)| {\n                        println!(\"read to end\");\n                        tokio_core::io::read_to_end(_socket, vec![])\n                    }).map(move |(_, data)| {\n                        println!(\"decode\");\n                        codec.decode(&amp;mut EasyBuf::from(data))\n                    }).and_then(|result| {\n                        println!(\"coalesce\");\n                        result.and_then(|option| option.ok_or(io::Error::new(io::ErrorKind::Other, \"no result\")))\n                    })\n                );\n                match result {\n                    Ok(returned) =&gt; println!(\"{}\", returned),\n                    Err(e) =&gt; println!(\"Error: {}\", e)\n                }\n            }\n            Err(e) =&gt; println!(\"error: {}\", e)\n        }\n    }\n}\n</code></pre>\n\n<h2>[dependencies]</h2>\n\n<pre><code>futures = \"0.1\"\ntokio-core = \"0.1\"\ntokio-service = \"0.1\"\ntokio-proto = \"0.1\"\n</code></pre>\n\n<p>This does nothing more than echo the input back to the client. However, the response is not received by the client until the server is terminated.</p>\n\n<p>To run:\nIn one terminal, <code>cargo run</code> the server\nIn a second terminal, <code>cargo run</code> the client\nin the client window, type something, and hit enter. It will not be echoed.\nin the server window, ctrl-c; the typed string will be echoed into the client window on termination</p>\n"}, {"tags": ["macros", "rust", "metaprogramming", "encapsulation"], "answers": [{"comments": [{"owner": {"reputation": 1259, "user_id": 1814775, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea9a58ab403c34bc21cde3a006d2e6d8?s=128&d=identicon&r=PG", "display_name": "lloydmeta", "link": "https://stackoverflow.com/users/1814775/lloydmeta"}, "edited": false, "score": 0, "creation_date": 1486044219, "post_id": 42004038, "comment_id": 71184406, "body": "&quot;I&#39;d also just note that there&#39;s another case your macro doesn&#39;t yet account for: attributes on the fields, which is needed for doc-comments on them to work&quot; Ugh, thanks I knew I forgot something. Looking at your code (btw...amazing stuff), I now realise I forgot a <i>lot</i> of other stuff, like where clauses. You&#39;re right though, I essentially want a custom derive: Is there somewhere I can read more about how macros 1.1 helps there?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1259, "user_id": 1814775, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea9a58ab403c34bc21cde3a006d2e6d8?s=128&d=identicon&r=PG", "display_name": "lloydmeta", "link": "https://stackoverflow.com/users/1814775/lloydmeta"}, "edited": false, "score": 0, "creation_date": 1486044305, "post_id": 42004038, "comment_id": 71184485, "body": "@lloydmeta At this point, not that I know of.  I&#39;d just go poke at the source for something like <code>serde-derive</code>."}, {"owner": {"reputation": 1259, "user_id": 1814775, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea9a58ab403c34bc21cde3a006d2e6d8?s=128&d=identicon&r=PG", "display_name": "lloydmeta", "link": "https://stackoverflow.com/users/1814775/lloydmeta"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486051104, "post_id": 42004038, "comment_id": 71189374, "body": "Thanks @Shepmaster.  I also found this <a href=\"https://cbreeden.github.io/Macros11/\" rel=\"nofollow noreferrer\">cbreeden.github.io/Macros11</a>"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1486044171, "last_edit_date": 1486044171, "creation_date": 1486043735, "answer_id": 42004038, "question_id": 42003501, "link": "https://stackoverflow.com/questions/42003501/preserving-struct-field-visibility-with-a-macro/42004038#42004038", "title": "Preserving struct field visibility with a macro", "body": "<p>You can't.  At least, not with a single, non-recursive rule.  This is because Rust doesn't have a macro matcher for visibility.</p>\n\n<p>The <a href=\"https://crates.io/crates/parse-macros/\" rel=\"nofollow noreferrer\"><code>parse-macros</code></a> crate contains a <a href=\"https://github.com/DanielKeep/rust-parse-generics/blob/master/parse-macros/src/parse_struct.rs\" rel=\"nofollow noreferrer\"><code>parse_struct!</code></a> macro that shows the work necessary to completely parse a <code>struct</code> definition.  Short version: you need to parse each field individually, with one rule for each of \"has <code>pub</code>\" and \"doesn't have <code>pub</code>\".</p>\n\n<p>I'd also just note that there's <em>another</em> case your macro doesn't yet account for: attributes on the fields, which is needed for doc-comments on them to work.</p>\n\n<p>Quite soon, macros 1.1 should be stabilised, which might provide an easier approach (assuming you can express your macro as a derivation, and don't care about older versions of Rust).</p>\n"}, {"tags": [], "owner": {"reputation": 1259, "user_id": 1814775, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea9a58ab403c34bc21cde3a006d2e6d8?s=128&d=identicon&r=PG", "display_name": "lloydmeta", "link": "https://stackoverflow.com/users/1814775/lloydmeta"}, "is_accepted": false, "score": 1, "last_activity_date": 1486132648, "last_edit_date": 1486132648, "creation_date": 1486106878, "answer_id": 42018941, "question_id": 42003501, "link": "https://stackoverflow.com/questions/42003501/preserving-struct-field-visibility-with-a-macro/42018941#42018941", "title": "Preserving struct field visibility with a macro", "body": "<p>Rust 1.15 was <a href=\"https://blog.rust-lang.org/2017/02/02/Rust-1.15.html\" rel=\"nofollow noreferrer\">officially released</a> shortly after I asked this question and brings <a href=\"https://doc.rust-lang.org/book/procedural-macros.html\" rel=\"nofollow noreferrer\">procedural macros</a> (custom derive) support like @DK. has said. </p>\n\n<p>Going forward, I think custom derives w/ syn and quote will be the standard way of doing this kind of thing and side-steps this issue completely since you no longer need to manually re-emit the struct.</p>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 2, "last_activity_date": 1576867111, "creation_date": 1576867111, "answer_id": 59429942, "question_id": 42003501, "link": "https://stackoverflow.com/questions/42003501/preserving-struct-field-visibility-with-a-macro/59429942#59429942", "title": "Preserving struct field visibility with a macro", "body": "<p>Since Rust 1.30, you can match visibility keywords with the <code>vis</code> specifier. A <code>vis</code> metavariable will match nothing if there is no visibility keyword to match, so you don't even need to use it inside <code>$()*</code>. This change makes <code>with_generic</code> vastly simpler:</p>\n\n<pre><code>macro_rules! with_generic {\n    ($(#[$struct_meta:meta])*\n    $sv:vis struct $name:ident { $($fv:vis $fname:ident : $ftype:ty), *}\n    ) =&gt; {\n        // emit the struct here\n        $(#[$struct_meta])*\n        $sv struct $name {\n            $($fv $fname: $ftype,)*\n        }\n        // do whatever else you need here\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1259, "user_id": 1814775, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea9a58ab403c34bc21cde3a006d2e6d8?s=128&d=identicon&r=PG", "display_name": "lloydmeta", "link": "https://stackoverflow.com/users/1814775/lloydmeta"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 589, "favorite_count": 0, "accepted_answer_id": 42004038, "answer_count": 3, "score": 3, "last_activity_date": 1576867111, "creation_date": 1486042203, "last_edit_date": 1486132614, "question_id": 42003501, "link": "https://stackoverflow.com/questions/42003501/preserving-struct-field-visibility-with-a-macro", "title": "Preserving struct field visibility with a macro", "body": "<p>I'm trying to write a Rust macro that allows me to make use of the field names and types of a struct declaration, but I still need to emit the struct. </p>\n\n<p>I've got it working with optional attributes, visibility of the struct (thanks to <a href=\"https://danielkeep.github.io/tlborm/book/pat-visibility.html\" rel=\"nofollow noreferrer\">The Little Book of Rust Macros</a>), but can't figure out how to deal with the optional presence of <code>pub</code> in the individual fields.</p>\n\n<p>So far I've got:</p>\n\n<pre><code>macro_rules! with_generic {\n    ($(#[$struct_meta:meta])*\n    pub struct $name:ident { $($fname:ident : $ftype:ty), *}\n    ) =&gt; {\n        with_generic![(pub) $(#[$struct_meta])* struct $name {$($fname: $ftype) ,*}];\n    };\n\n    ($(#[$struct_meta:meta])*\n    struct $name:ident { $($fname:ident : $ftype:ty), *}\n    ) =&gt; {\n        with_generic![() $(#[$struct_meta])* struct $name {$($fname: $ftype), *}];\n    };\n\n    (\n    ($($vis:tt)*)\n    $(#[$struct_meta:meta])*\n    struct $name:ident { $($fname:ident : $ftype:ty), *}\n    ) =&gt; {\n        // emit the struct here\n        $(#[$struct_meta])*\n        $($vis)* struct $name {\n            $($fname: $ftype,)*\n        }\n\n        // I work with fname and ftypes here\n    }\n}\n</code></pre>\n\n<p>And it works with something like </p>\n\n<pre><code>with_generic! {\n    #[derive(PartialEq, Eq, Debug)]\n    pub struct Person {\n        first_name: String,\n        last_name:  String\n    }\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>with_generic! {\n    #[derive(PartialEq, Eq, Debug)]\n    struct PrivatePerson {\n        first_name: String,\n        last_name:  String\n    }\n}\n</code></pre>\n\n<p>but doesn't work with </p>\n\n<pre><code>with_generic! {\n    #[derive(PartialEq, Eq, Debug)]\n    struct MixedPerson {\n        pub first_name: String,\n        last_name:  String\n    }\n}\n</code></pre>\n\n<p>I'd like to get some help on how to make the macro work with that last case. I feel like I might be missing something basic here, such as the type used for binding visibility. If there's a way to bind the whole struct tree while getting the field names and types, that would also be fine.</p>\n\n<p>I'd also like to learn how to get it to work with structs that have lifetime parameters, but maybe that should be a separate question.</p>\n"}, {"tags": ["compiler-errors", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1486044591, "post_id": 41996784, "comment_id": 71184690, "body": "Related question: <a href=\"http://stackoverflow.com/questions/39595782/when-are-numeric-literals-assigned-to-default-types\">When are numeric literals assigned to default types?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 16556, "user_id": 839689, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eed3ee2db841be15bdb120f3ff38f02e?s=128&d=identicon&r=PG", "display_name": "Nayuki", "link": "https://stackoverflow.com/users/839689/nayuki"}, "edited": false, "score": 1, "creation_date": 1568306530, "post_id": 41996902, "comment_id": 102241834, "body": "<code>{integer}</code> can also coerce to the type <code>usize</code>."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": false, "score": 11, "last_activity_date": 1486022297, "creation_date": 1486022297, "answer_id": 41996902, "question_id": 41996784, "link": "https://stackoverflow.com/questions/41996784/what-is-the-integer-or-float-in-a-compiler-error-message/41996902#41996902", "title": "What is the {integer} or {float} in a compiler error message?", "body": "<p><code>{integer}</code> in error messages is a placeholder for any of the integer types (<code>{i,u}{8,16,32,64,128}</code>). (<a href=\"https://github.com/rust-lang/rust/pull/35080\">Source</a>)</p>\n\n<p>Integer literals in Rust are type inferred based on their usage. For example, in the following code, the type of <code>123</code> is <code>u8</code> in the first instance and <code>u64</code> in the second:</p>\n\n<pre><code>let a: u8 = 123;\nlet a: u64 = 123;\n</code></pre>\n\n<p><code>{integer}</code> is used to represent any integer type in error messages when the compiler hasn't figured out a concrete type of the value.</p>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1486023105, "post_id": 41996906, "comment_id": 71170816, "body": "Note: the <code>let () = x</code> assignment is an useful way of determining the type of a variable: <a href=\"http://stackoverflow.com/questions/21747136/how-do-i-print-the-type-of-a-variable-in-rust\">related SO question</a>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user74754"}, "edited": false, "score": 0, "creation_date": 1486023664, "post_id": 41996906, "comment_id": 71171074, "body": "That&#39;s essentially how I stumbled into this error.  Was trying to exponentiate a value that I had just retrieved from a hash map, but had only been inserting numeric literals into that hashmap (working through Rust Koans), giving the compiler no information as to what specific numeric type to use, and then trying to coerce those values into arbitrary types to figure out just what type I was trying to code against.  Another piece of the puzzle clicks into place."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 10, "last_activity_date": 1486046439, "last_edit_date": 1486046439, "creation_date": 1486022335, "answer_id": 41996906, "question_id": 41996784, "link": "https://stackoverflow.com/questions/41996784/what-is-the-integer-or-float-in-a-compiler-error-message/41996906#41996906", "title": "What is the {integer} or {float} in a compiler error message?", "body": "<p><code>{integer}</code> is an integral value whose concrete type was not specified and has not been inferred by the compiler yet; the following code:</p>\n\n<pre><code>fn main() {\n    let x = 1;\n    let () = x;\n}\n</code></pre>\n\n<p>Will result in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n\n --&gt; &lt;anon&gt;:3:9\n  |\n3 |     let () = x;\n  |         ^^ expected integral variable, found ()\n  |\n  = note: expected type `{integer}`\n  = note:    found type `()`\n</code></pre>\n\n<p>The same would happen with a floating number:</p>\n\n<pre><code>fn main() {\n    let x = 1.0;\n    let () = x;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; &lt;anon&gt;:3:9\n  |\n3 |     let () = x;\n  |         ^^ expected floating-point variable, found ()\n  |\n  = note: expected type `{float}`\n  = note:    found type `()`\n</code></pre>\n\n<p>Because the compilation error caused by the invalid assignment <code>let () = x</code> is thrown before the type inference can happen.</p>\n\n<p>In other words, until the compilation reaches the type inference stage where an integer or a float without a concrete type specified would be recognized (e.g. based on function application) or assigned the default type, <code>i32</code> for integers and <code>f64</code> for floats, compilation errors will refer to it as an <code>{integer}</code> or a <code>{float}</code>.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user74754"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1956, "favorite_count": 1, "accepted_answer_id": 41996906, "answer_count": 2, "score": 11, "last_activity_date": 1529458175, "creation_date": 1486021912, "last_edit_date": 1529458175, "question_id": 41996784, "link": "https://stackoverflow.com/questions/41996784/what-is-the-integer-or-float-in-a-compiler-error-message", "title": "What is the {integer} or {float} in a compiler error message?", "body": "<p>It is surprisingly hard to find this in the docs. This might even be a two part question:</p>\n\n<ol>\n<li><p>Are <code>{integer}</code> and <code>{float}</code> some sort of language alias for a specific primitive type?</p></li>\n<li><p>What does it mean for a type name to be enclosed in curly braces in\na compilation/syntax error message?</p></li>\n</ol>\n\n<p>Example:</p>\n\n<blockquote>\n  <p>error: no method named <code>pow</code> found for type <code>{integer}</code> in the current\n  scope</p>\n</blockquote>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1486024030, "post_id": 41997128, "comment_id": 71171259, "body": "You were right. <code>Cookie</code> holds a <code>cookie_string: Option&lt;Cow&lt;&#39;c, str&gt;&gt;</code>. But I deem such a smart pointer should be capable of copying the referenced data in an intelligent way? All members of <code>Cookie</code> are private, what is the proper way to do such a copy (rather than a bunch of set_xxx(get_xxx()))?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1486024233, "post_id": 41997128, "comment_id": 71171377, "body": "@FrederickZhang: You are stuck with the public API for the type (that&#39;s what an API is, after all); I would expect it has a constructor, so something like <code>Cookie::new(prev.get_xxx(), prev.get_yyy(), new_cookie_string, ...)</code>, if it doesn&#39;t you&#39;ll need to create a default cookie and use setters."}, {"owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1486024448, "post_id": 41997128, "comment_id": 71171479, "body": "Sadly there isn&#39;t such an API. Actually I cannot have a direct access to <code>cookie_string</code> but only to <code>domain</code>, <code>name</code>, etc via provided APIs. However this would be effectively the same as <code>let cookie = Cookie::parse(cookie.to_string()).unwrap();</code>, which is ugly and inefficient."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1486026009, "post_id": 41997128, "comment_id": 71172371, "body": "@FrederickZhang: Then it might be time to file a bug against the library and discuss with the author what could be done to facilitate this task; and if it&#39;s open-source, you can also fork in the mean time."}, {"owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1486026103, "post_id": 41997128, "comment_id": 71172423, "body": "Cool. Thanks for your time"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1486023126, "creation_date": 1486023126, "answer_id": 41997128, "question_id": 41995598, "link": "https://stackoverflow.com/questions/41995598/clone-a-general-struct-to-a-specific-lifetime/41997128#41997128", "title": "Clone a general struct to a specific lifetime?", "body": "<p><strong>No.</strong></p>\n\n<hr>\n\n<p>There is a fundamental misunderstanding here.</p>\n\n<p>When <code>Cookie</code> is declared with a lifetime parameter, it means that it encapsulate a reference to an object with this lifetime.</p>\n\n<p>In order to clone the <code>Cookie</code> for a longer lifetime, what you would have to do is to tease it apart, clone the referenced object for a longer lifetime, and then rebuild a brand new cookie referencing this new longer-lived object.</p>\n\n<p>However, that is not what <code>clone</code> does by default<sup>1</sup>; <code>clone</code> simply passes on the <em>same</em> reference.</p>\n\n<p>Therefore, the only change of lifetime you can get when cloning the <code>Cookie</code> is to <em>reduce</em> the lifetime, not extend it.</p>\n\n<p><sup>1</sup> <em>If you think about it, who would own the new object? Certainly not <code>Cookie</code>, it just has a reference!</em></p>\n"}], "owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 369, "favorite_count": 0, "accepted_answer_id": 41997128, "answer_count": 1, "score": 2, "last_activity_date": 1486023126, "creation_date": 1486017094, "question_id": 41995598, "link": "https://stackoverflow.com/questions/41995598/clone-a-general-struct-to-a-specific-lifetime", "title": "Clone a general struct to a specific lifetime?", "body": "<p>I'm playing around with the <code>cookie::Cookie</code> and would like to implement a simpler cookie jar for my own purpose.</p>\n\n<pre><code>pub struct NaiveCookieJar&lt;'a&gt; {\n    data: HashMap&lt;(String, String), Cookie&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; NaiveCookieJar&lt;'a&gt; {\n    pub fn add&lt;'b&gt;(&amp;mut self, domain: &amp;str, name: &amp;str, cookie: &amp;'b Cookie&lt;'b&gt;) -&gt; bool {\n        let cookie: &amp;'a Cookie = &amp;cookie.clone();  // not working\n        self.data\n            .insert((String::from(domain), String::from(name)), *cookie)\n            .is_some()\n    }\n}\n</code></pre>\n\n<p>This resulted in <code>error: E0495: cannot infer an appropriate lifetime for lifetime parameter 'c due to conflicting requirements</code></p>\n\n<p>What I want is for each of the arguments, they only need to live as long as the method itself, and I can make copies with <code>'a</code> lifetime to insert into the hash map. So if I've got something like</p>\n\n<pre><code>fn global_jar() -&gt; &amp;'static Mutex&lt;NaiveCookieJar&lt;'static&gt;&gt; {\n    lazy_static! {\n        static ref JAR: Mutex&lt;NaiveCookieJar&lt;'static&gt;&gt; = Mutex::new(NaiveCookieJar::new());\n    }\n    &amp;JAR\n}\n</code></pre>\n\n<p>...or in any cases that the cookie jar lives longer than the arguments, it won't trap me to instantiate structs with the corresponding lifetime.</p>\n\n<p>There's a <code>Cookie::into_owned() -&gt; Cookie&lt;'static&gt;</code> which fits this particular case but apparently I don't want the cookies to live longer than the jar if the jar isn't static itself.</p>\n\n<p>FYI <code>Cookie</code> derives <code>Clone</code> but not <code>ToOwned</code></p>\n"}, {"tags": ["rust", "rustup"], "answers": [{"tags": [], "owner": {"reputation": 1056, "user_id": 3497181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e384ad3cea4b2ccaf03271303a94f1f?s=128&d=identicon&r=PG&f=1", "display_name": "rnstlr", "link": "https://stackoverflow.com/users/3497181/rnstlr"}, "is_accepted": true, "score": 4, "last_activity_date": 1486046304, "last_edit_date": 1486046304, "creation_date": 1486025979, "answer_id": 41997933, "question_id": 41994283, "link": "https://stackoverflow.com/questions/41994283/why-are-the-beta-and-nightly-versions-from-rustup-the-same-version/41997933#41997933", "title": "Why are the beta and nightly versions from rustup the same version?", "body": "<p>Rust 1.15.0 will be released today, 2017-02-02. Apparently the beta channel has already been bumped to 1.16.0 and nightly will follow soon. Read about <a href=\"https://internals.rust-lang.org/t/rust-1-15-prerelease-testing/4708\" rel=\"nofollow noreferrer\">Rust 1.15 prerelease testing</a> for more information about the 1.15.0 release.</p>\n"}], "owner": {"reputation": 33471, "user_id": 1420279, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c799e8b3d14c4f149ce71455109f17eb?s=128&d=identicon&r=PG", "display_name": "Antimony", "link": "https://stackoverflow.com/users/1420279/antimony"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 365, "favorite_count": 0, "accepted_answer_id": 41997933, "answer_count": 1, "score": 3, "last_activity_date": 1486046304, "creation_date": 1486010184, "last_edit_date": 1486046203, "question_id": 41994283, "link": "https://stackoverflow.com/questions/41994283/why-are-the-beta-and-nightly-versions-from-rustup-the-same-version", "title": "Why are the beta and nightly versions from rustup the same version?", "body": "<p>As I understand it, Rust's beta channel is always one version ahead of stable, and nightly is always one version ahead of beta. However, for some reason, beta and nightly appear to both be 1.16 right now.</p>\n\n<p>If I run <code>rustup update</code>, I see</p>\n\n<pre><code>stable-x86_64-unknown-linux-gnu unchanged - rustc 1.14.0 (e8a012324 2016-12-16)\nbeta-x86_64-unknown-linux-gnu unchanged - rustc 1.16.0-beta.1 (5276ba72e 2017-01-31)\nnightly-x86_64-unknown-linux-gnu unchanged - rustc 1.16.0-nightly (df8debf6d 2017-01-25)\n</code></pre>\n\n<p>Why isn't beta on 1.15?</p>\n"}, {"tags": ["rust", "rust-compiler-plugin"], "owner": {"reputation": 463, "user_id": 5956418, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/c1e4d59c950208e2ebb83fc021f2278d?s=128&d=identicon&r=PG&f=1", "display_name": "Qoros", "link": "https://stackoverflow.com/users/5956418/qoros"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 135, "favorite_count": 0, "answer_count": 0, "score": 6, "last_activity_date": 1486086192, "creation_date": 1485995410, "last_edit_date": 1486086192, "question_id": 41992353, "link": "https://stackoverflow.com/questions/41992353/what-is-the-proper-way-to-create-a-span-when-inserting-a-new-field-with-a-rust-c", "title": "What is the proper way to create a Span when inserting a new field with a Rust compiler plugin?", "body": "<p>I want a compiler plugin to annotate a structure with some information. For example, the original struct has only one field:</p>\n\n<pre><code>struct X { x: i32 }\n</code></pre>\n\n<p>And I want to add another field:</p>\n\n<pre><code>struct X { x: i32, y: MARKTYPE }\n</code></pre>\n\n<p>As I looked into Rust compiler plugins, I decided to use the <code>MultiModifier</code>(<code>SyntaxExtension</code>) to do my work. <code>enum ItemKind</code> defines <code>Struct(VariantData, Generics)</code> and the <code>VariantData</code> stores the data fields:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\npub enum VariantData {\n    /// Struct variant.\n    ///\n    /// E.g. `Bar { .. }` as in `enum Foo { Bar { .. } }`\n    Struct(Vec&lt;StructField&gt;, NodeId),\n    /// Tuple variant.\n    ///\n    /// E.g. `Bar(..)` as in `enum Foo { Bar(..) }`\n    Tuple(Vec&lt;StructField&gt;, NodeId),\n    /// Unit variant.\n    ///\n    /// E.g. `Bar = ..` as in `enum Foo { Bar = .. }`\n    Unit(NodeId),\n}\n</code></pre>\n\n<p><code>StructField</code> is defined as:</p>\n\n<pre><code>#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\npub struct StructField {\n    pub span: Span,\n    pub ident: Option&lt;Ident&gt;,\n    pub vis: Visibility,\n    pub id: NodeId,\n    pub ty: P&lt;Ty&gt;,\n    pub attrs: Vec&lt;Attribute&gt;,\n}\n</code></pre>\n\n<p>I planned to insert a <code>StructField</code>, but I don't know how to make a <code>Span</code> for the field. Each <code>Span</code> contains a <code>lo</code> and a <code>hi</code> <code>BytePos</code>. The <code>StructField</code>s information looks like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Fields 0: StructField { \n    span: Span {\n        lo: BytePos(432),\n        hi: BytePos(437),\n        expn_id: ExpnId(4294967295)\n    }, \n    ident: Some(x#0),\n    vis: Inherited, \n    id: NodeId(4294967295), \n    ty: type(i32),\n    attrs: []\n}\n</code></pre>\n\n<p>What is the proper way to insert the new field?</p>\n\n<hr>\n\n<p>I know it would be easier to use a macro to do this job, but I want to know if it is plausible to insert the field by modifying the <code>VariantData</code>.</p>\n"}, {"tags": ["rust", "naming-conventions"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1486431697, "last_edit_date": 1486431697, "creation_date": 1486007079, "answer_id": 41993841, "question_id": 41992247, "link": "https://stackoverflow.com/questions/41992247/conventions-for-naming-mutable-immutable-api-functions/41993841#41993841", "title": "Conventions for naming mutable/immutable API functions?", "body": "<p>Yes, conventions for this are defined in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0199-ownership-variants.md\" rel=\"nofollow noreferrer\">RFC 199</a>. The important part is:</p>\n\n<blockquote>\n  <h2>The rules</h2>\n  \n  <h3>Immutably borrowed by default</h3>\n  \n  <p>If <code>foo</code> uses/produces an immutable borrow by default, use:</p>\n  \n  <ul>\n  <li>The <code>_mut</code> suffix (e.g. <code>foo_mut</code>) for the mutably borrowed variant.</li>\n  <li>The <code>_move</code> suffix (e.g. <code>foo_move</code>) for the owned variant.</li>\n  </ul>\n  \n  <p>However, in the case of iterators, the moving variant can also be understood as an <code>into</code> conversion, <code>into_iter</code>, and <code>for x in v.into_iter()</code> reads arguably better than <code>for x in v.iter_move()</code>, so the convention is <code>into_iter</code>.</p>\n  \n  <p><strong>NOTE</strong>: This convention covers only the <em>method</em> names for   iterators, not the names of the iterator types. That will be the subject of a follow up RFC.</p>\n  \n  <h3>Owned by default</h3>\n  \n  <p>If <code>foo</code> uses/produces owned data by default, use:</p>\n  \n  <ul>\n  <li>The <code>_ref</code> suffix (e.g. <code>foo_ref</code>) for the immutably borrowed variant.</li>\n  <li>The <code>_mut</code> suffix (e.g. <code>foo_mut</code>) for the mutably borrowed variant.</li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<p><code>Any::downcast_ref</code> isn't called <code>downcast</code> because there is a method named <code>downcast</code> on <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast\" rel=\"nofollow noreferrer\"><code>Box&lt;Any + 'static&gt;</code></a> and on <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast-1\" rel=\"nofollow noreferrer\"><code>Box&lt;Any + 'static + Send&gt;</code></a> that takes <code>self</code> by value. Naming the method on <code>Any</code> <code>downcast</code> would cause one to shadow the other. So the whole picture is:</p>\n\n<ul>\n<li><code>downcast</code>, takes <code>self</code>, defined on <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast\" rel=\"nofollow noreferrer\"><code>Box&lt;Any + 'static&gt;</code></a> and <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast-1\" rel=\"nofollow noreferrer\"><code>Box&lt;Any + 'static + Send&gt;</code></a></li>\n<li><code>downcast_ref</code>, takes <code>&amp;self</code>, defined on <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref\" rel=\"nofollow noreferrer\"><code>Any + 'static</code></a> and <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref-1\" rel=\"nofollow noreferrer\"><code>Any + 'static + Send</code></a></li>\n<li><code>downcast_mut</code>, takes <code>&amp;mut self</code>, defined on <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut\" rel=\"nofollow noreferrer\"><code>Any + 'static</code></a> and <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_mut-1\" rel=\"nofollow noreferrer\"><code>Any + 'static + Send</code></a></li>\n</ul>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 220, "favorite_count": 0, "accepted_answer_id": 41993841, "answer_count": 1, "score": 4, "last_activity_date": 1486435870, "creation_date": 1485994661, "last_edit_date": 1486435870, "question_id": 41992247, "link": "https://stackoverflow.com/questions/41992247/conventions-for-naming-mutable-immutable-api-functions", "title": "Conventions for naming mutable/immutable API functions?", "body": "<p>When writing APIs, it's common to have a mutable and an immutable version of a method.</p>\n\n<p>I expected the standard library to have clear conventions about how to name these, but it's not totally consistent<sup>1</sup>:</p>\n\n<p>What are good naming conventions for the following methods?</p>\n\n<pre><code>pub fn foo****(&amp;self) -&gt; &amp;Bar { ... }\npub fn foo****(&amp;mut self) -&gt; &amp;mut Bar { ... }\n</code></pre>\n\n<ul>\n<li><p><code>foo()</code> | <code>foo_mut()</code></p>\n\n<p>This seems the most common, and can be seen in <code>Vec.iter</code> and <code>Vec.iter_mut</code>.</p></li>\n<li><p><code>foo_ref()</code> | <code>foo_mut()</code></p>\n\n<p>Used for <code>Any.downcast_ref</code> and <code>Any.downcast_mut</code>.</p></li>\n</ul>\n\n<p>It seems the first case is more common, so what are the reasons for using the <code>_ref</code> suffix when naming API functions?</p>\n\n<hr>\n\n<p><strong>1</strong>: It is probably consistent and I'm just failing to notice the reasoning.</p>\n"}]