[{"tags": ["shared-libraries", "rust", "ffi"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1456327367, "post_id": 35604218, "comment_id": 58896449, "body": "have you tried moving the static method out of the impl and make it a regular function? Also why is the symbol <code>newb</code> when the function is <code>nomangle</code> and called <code>new</code>?"}, {"owner": {"reputation": 883, "user_id": 1509255, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/1bdbc7273bc265e4e92f2fcacbb6c419?s=128&d=identicon&r=PG", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/1509255/aleksandr"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1456328902, "post_id": 35604218, "comment_id": 58897536, "body": "@ker changed &quot;newb&quot; to &quot;new&quot;. just try &quot;new&quot; as regular function - the same result."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1456363812, "post_id": 35604218, "comment_id": 58916477, "body": "Please take some time to produce an <a href=\"/help/mcve\">MCVE</a>. This allows you to get an answer quicker and shows your respect for the time of the people you are asking for help from. Notably, your code cannot even compile because your <code>Result</code> from <code>load</code> is underspecified as it doesn&#39;t have two type parameters. Ideally, you should provide two pieces of code, one that can be compiled into the plugin and one that can be compiled into the main. Include everything needed."}], "owner": {"reputation": 883, "user_id": 1509255, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/1bdbc7273bc265e4e92f2fcacbb6c419?s=128&d=identicon&r=PG", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/1509255/aleksandr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 144, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1456362008, "creation_date": 1456322412, "last_edit_date": 1456362008, "question_id": 35604218, "link": "https://stackoverflow.com/questions/35604218/how-do-i-fix-a-segfault-when-the-lifetime-of-a-dynamically-loaded-library-expire", "title": "How do I fix a segfault when the lifetime of a dynamically loaded library expires?", "body": "<p>I'm using the following scheme:</p>\n\n<ol>\n<li>Start the main program.</li>\n<li>Dynamically load / unload necessary libraries without interrupting the main program.</li>\n<li>The main program terminates.</li>\n</ol>\n\n<p>All of the code (the main program, the dynamic library) is written in Rust and it is all compiled with <code>-Cprefer-dynamic</code>.</p>\n\n<p>The dynamic library contains a <code>Plugin</code> struct that implements the <code>plugin::Plugin</code> trait with a <code>new</code> function that returns a boxed trait object (<code>plugin::Plugin</code>).</p>\n\n<p>Dynamic library example:</p>\n\n<pre><code>#[derive(Debug)]\npub struct Plugin;\n\nimpl Plugin {\n    #[no_mangle]\n    pub fn new() -&gt; Box&lt;plugin::Plugin&gt; {\n        println!(\"IN NEW!\");\n        Box::new(Plugin)\n    }\n}\n\nimpl plugin::Plugin for Plugin {\n    fn test(&amp;mut self) -&gt; plugin::Result&lt;()&gt; {\n        println!(\"IN TEST!\");\n        Ok(())\n    }\n}\n</code></pre>\n\n<p><code>plugin::Plugin</code> is a trait:</p>\n\n<pre><code>pub trait Plugin: Debug {\n    fn test(&amp;mut self) -&gt; Result&lt;()&gt;;\n}\n</code></pre>\n\n<p>Main program:</p>\n\n<pre><code>fn main() {\n    env_logger::init().unwrap();\n    info!(\"[MAIN]&lt;-\");\n\n    if let Ok(mut plugins) = load(Path::new(\"plugins/\")) {\n        for (path, plugin) in plugins.iter_mut() {\n            debug!(\"path: {:?}, plugin: {:?}\", path, plugin);\n            plugin.plugin.test();\n        }\n        thread::sleep(Duration::from_secs(30));\n        // &lt;- as soon as the plugins is beyond his lifetime, segmentation fault.\n    }\n\n    info!(\"[MAIN]-&gt;\");\n}\n\nfn load(path: &amp; Path) -&gt; Result&lt;HashMap&lt;String, Plugin&gt;&gt; {\n    let mut plugins = HashMap::new();\n\n    let valid_extensions: [&amp; OsStr; 3] = [\"dylib\".as_ref(), \"so\".as_ref(), \"dll\".as_ref()];\n    for dir_entry in try!(path.read_dir()) {\n        let path = try!(dir_entry).path();\n        if path.extension().is_none() || !valid_extensions.contains(&amp; path.extension().unwrap()) {\n            warn!(\"invalid dynamic library extension; extension: {:?}\", path.extension());\n            continue\n        }\n        let key = path.clone().into_os_string().into_string().unwrap();\n\n        let lib = DynamicLibrary::open(Some(&amp; path)).unwrap();\n        let new: extern fn() -&gt; Box&lt;plugin::Plugin&gt; = unsafe {\n            std::mem::transmute(lib.symbol::&lt;u8&gt;(\"new\").unwrap())\n        };\n\n        let plugin = Plugin {\n            _lib: lib,\n            plugin: new(),\n        };\n\n        plugins.insert(key.clone(), plugin);\n    }\n\n    Ok(plugins)\n}\n\nstruct Plugin {\n    _lib: DynamicLibrary,\n    pub plugin: Box&lt;plugin::Plugin&gt;,\n}\n</code></pre>\n\n<p>Is it even correct to use FFI for this type of Rust-Rust interaction?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1456298241, "post_id": 35595491, "comment_id": 58876545, "body": "Awesome! This is really clear, thanks. Hopefully this will be the canonical answer for this question. As a follow up (and if you have a link, that would be fine, as it&#39;s a little beyond the scope of my original question I think): why are they <i>higher rank</i> trait bounds? Do they have anything to do with higher-kinded types (which I am slightly familiar with)?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 1, "creation_date": 1456300786, "post_id": 35595491, "comment_id": 58877799, "body": "@thirtythreeforty yes, I believe they are called like that exactly after HKTs, because they do resemble them. I can imagine that HKTs could also be written with <code>for</code>, if they were available: <code>for&lt;T&gt; Monad&lt;T&gt;</code>, or at least, they have similar concepts - designating an infinite number of trait bounds (or types, in case of HKTs), parameterized with something (lifetimes or types). That said, it is conceivable for HRTBs to support types as well of lifetimes, it&#39;s just no one came up with a concrete design yet."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1456314800, "post_id": 35595491, "comment_id": 58887420, "body": "I think higher kinded types are orthogonal to higher rank types. Higher rank types describe where quantification can occur in a type signature and higher kinded types refer to writing polymorphic code over type constructors. See also: <a href=\"http://stackoverflow.com/questions/13317768/kind-vs-rank-in-type-theory\" title=\"kind vs rank in type theory\">stackoverflow.com/questions/13317768/&hellip;</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1456314862, "post_id": 35595491, "comment_id": 58887475, "body": "@BurntSushi5 oh well, I always confuse them one for another :("}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1607459115, "post_id": 35595491, "comment_id": 115278217, "body": "Is HRTB the Rust name for Haskell&#39;s <code>QuantifiedConstraints</code>?"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 118, "last_activity_date": 1456303366, "last_edit_date": 1456303366, "creation_date": 1456297699, "answer_id": 35595491, "question_id": 35592750, "link": "https://stackoverflow.com/questions/35592750/how-does-for-syntax-differ-from-a-regular-lifetime-bound/35595491#35595491", "title": "How does for&lt;&gt; syntax differ from a regular lifetime bound?", "body": "<p><code>for&lt;&gt;</code> syntax is called <em>higher-ranked trait bound</em> (HRTB), and it was indeed introduced mostly because of closures.</p>\n\n<p>In short, the difference between <code>foo</code> and <code>bar</code> is that in <code>foo()</code> the lifetime for the internal <code>usize</code> reference is provided <em>by the caller</em> of the function, while in <code>bar()</code> the same lifetime is provided <em>by the function itself</em>. And this distinction is very important for the implementation of <code>foo</code>/<code>bar</code>.</p>\n\n<p>However, in this particular case, when <code>Trait</code> has no methods which use the type parameter, this distinction is pointless, so let's imagine that <code>Trait</code> looks like this:</p>\n\n<pre><code>trait Trait&lt;T&gt; {\n    fn do_something(&amp;self, value: T);\n}\n</code></pre>\n\n<p>Remember, lifetime parameters are very similar to generic type parameters. When you use a generic function, you always specify all of its type parameters, providing concrete types, and the compiler monomorphizes the function. Same thing goes with lifetime parameters: when you call a function which have a lifetime parameter, <em>you</em> specify the lifetime, albeit implicitly:</p>\n\n<pre><code>// imaginary explicit syntax\n// also assume that there is TraitImpl::new::&lt;T&gt;() -&gt; TraitImpl&lt;T&gt;,\n// and TraitImpl&lt;T&gt;: Trait&lt;T&gt;\n\n'a: {\n    foo::&lt;'a&gt;(Box::new(TraitImpl::new::&lt;&amp;'a usize&gt;()));\n}\n</code></pre>\n\n<p>And now there is a restriction on what <code>foo()</code> can do with this value, that is, with which arguments it may call <code>do_something()</code>. For example, this won't compile:</p>\n\n<pre><code>fn foo&lt;'a&gt;(b: Box&lt;Trait&lt;&amp;'a usize&gt;&gt;) {\n    let x: usize = 10;\n    b.do_something(&amp;x);\n}\n</code></pre>\n\n<p>This won't compile because local variables have lifetimes which are strictly smaller than lifetimes specified by the lifetime parameters (I think it is clear why it is so), therefore you can't call <code>b.do_something(&amp;x)</code> because it requires its argument to have lifetime <code>'a</code>, which is strictly greater than that of <code>x</code>.</p>\n\n<p>However, you can do this with <code>bar</code>:</p>\n\n<pre><code>fn bar(b: Box&lt;for&lt;'a&gt; Trait&lt;&amp;'a usize&gt;&gt;) {\n    let x: usize = 10;\n    b.do_something(&amp;x);\n}\n</code></pre>\n\n<p>This works because now <code>bar</code> can select the needed lifetime instead of the caller of <code>bar</code>.</p>\n\n<p>This does matter when you use closures which accept references. For example, suppose you want to write a <code>filter()</code> method on <code>Option&lt;T&gt;</code>:</p>\n\n<pre><code>impl&lt;T&gt; Option&lt;T&gt; {\n    fn filter&lt;F&gt;(self, f: F) -&gt; Option&lt;T&gt; where F: FnOnce(&amp;T) -&gt; bool {\n        match self {\n            Some(value) =&gt; if f(&amp;value) { Some(value) } else { None }\n            None =&gt; None\n        }\n    }\n}\n</code></pre>\n\n<p>The closure here must accept a reference to <code>T</code> because otherwise it would be impossible to return the value contained in the option (this is the same reasoning as with <code>filter()</code> on iterators).</p>\n\n<p>But what lifetime should <code>&amp;T</code> in <code>FnOnce(&amp;T) -&gt; bool</code> have? Remember, we don't specify lifetimes in function signatures only because there is lifetime elision in place; actually the compiler inserts a lifetime parameter for each reference inside a function signature. There <em>should</em> be <em>some</em> lifetime associated with <code>&amp;T</code> in <code>FnOnce(&amp;T) -&gt; bool</code>. So, the most \"obvious\" way to expand the signature above would be this:</p>\n\n<pre><code>fn filter&lt;'a, F&gt;(self, f: F) -&gt; Option&lt;T&gt; where F: FnOnce(&amp;'a T) -&gt; bool\n</code></pre>\n\n<p>However, this is not going to work. As in the example with <code>Trait</code> above, lifetime <code>'a</code> is <em>strictly longer</em> than the lifetime of any local variable in this function, including <code>value</code> inside the match statement. Therefore, it is not possible to apply <code>f</code> to <code>&amp;value</code> because of lifetime mismatch. The above function written with such signature won't compile.</p>\n\n<p>On the other hand, if we expand the signature of <code>filter()</code> like this (and this is actually how lifetime elision for closures works in Rust now):</p>\n\n<pre><code>fn filter&lt;F&gt;(self, f: F) -&gt; Option&lt;T&gt; where F: for&lt;'a&gt; FnOnce(&amp;'a T) -&gt; bool\n</code></pre>\n\n<p>then calling <code>f</code> with <code>&amp;value</code> as an argument is perfectly valid: <em>we</em> can choose the lifetime now, so using the lifetime of a local variable is absolutely fine. And that's why HRTBs are important: you won't be able to express a lot of useful patterns without them.</p>\n\n<p>You can also read another explanation of HRTBs in <a href=\"https://doc.rust-lang.org/nightly/nomicon/hrtb.html\">Nomicon</a>.</p>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6611, "favorite_count": 41, "accepted_answer_id": 35595491, "answer_count": 1, "score": 82, "last_activity_date": 1569511603, "creation_date": 1456284920, "last_edit_date": 1569511603, "question_id": 35592750, "link": "https://stackoverflow.com/questions/35592750/how-does-for-syntax-differ-from-a-regular-lifetime-bound", "title": "How does for&lt;&gt; syntax differ from a regular lifetime bound?", "body": "<p>Consider the following code:</p>\n\n<pre><code>trait Trait&lt;T&gt; {}\n\nfn foo&lt;'a&gt;(_b: Box&lt;dyn Trait&lt;&amp;'a usize&gt;&gt;) {}\nfn bar(_b: Box&lt;dyn for&lt;'a&gt; Trait&lt;&amp;'a usize&gt;&gt;) {}\n</code></pre>\n\n<p>Both functions <code>foo</code> and <code>bar</code> seem to accept a <code>Box&lt;Trait&lt;&amp;'a usize&gt;&gt;</code>, although <code>foo</code> does it more concisely than <code>bar</code>.  What is the difference between them?</p>\n\n<p>Additionally, in what situations would I need <code>for&lt;&gt;</code> syntax like that above?  I know the Rust standard library uses it internally (often related to closures), but why might my code need it?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 145, "user_id": 1334732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/331a38bf7140f4bef1f8de1bd7aa29e4?s=128&d=identicon&r=PG", "display_name": "Mastax", "link": "https://stackoverflow.com/users/1334732/mastax"}, "edited": false, "score": 0, "creation_date": 1456333967, "post_id": 35591693, "comment_id": 58901532, "body": "I&#39;ll assume by your username that you wrote the book that you linked. It&#39;s quite good! I wish Google would have suggested it to me when I was researching for this question."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 11, "last_activity_date": 1456277820, "creation_date": 1456277820, "answer_id": 35591693, "question_id": 35590450, "link": "https://stackoverflow.com/questions/35590450/how-do-i-generalize-a-rust-macro-over-different-types-of-functions/35591693#35591693", "title": "How do I generalize a Rust macro over different types of functions?", "body": "<p>Well, there are two ways.</p>\n\n<p>If you want to parse this <em>exact</em> syntax, then you'll need to use a <a href=\"https://danielkeep.github.io/tlborm/book/pat-incremental-tt-munchers.html\">muncher</a>.  So, something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! re_export {\n    () =&gt; {};\n\n    (\n        pub fn $i:ident($($arg:ident: $argty:ty)*) -&gt; $ret:ty;\n        $($tail:tt)*\n    ) =&gt; {\n        extern {\n            pub fn $i($($arg: $argty),*) -&gt; $ret;\n        }\n        re_export! { $($tail)* } \n    };\n\n    (\n        pub fn $i:ident($($arg:ident: $argty:ty)*);\n        $($tail:tt)*\n    ) =&gt; {\n        extern {\n            pub fn $i($($arg: $argty),*);\n        }\n        re_export! { $($tail)* }\n    };\n}\n</code></pre>\n\n<p>This involves breaking off one function signature at a time, processing them recursively.  This is the most flexible way of parsing things, but <em>does</em> mean that you can run up against the macro recursion limit.  The default limit is 64, so if you have more input than that, you'll need multiple top-level macro invocations, or you'll have to manually raise the recursion limit by adding a <code>#![recursion_limit=\"128\"]</code> attribute to your crate.</p>\n\n<p>The other is to change the syntax so that you split then process the signatures in two steps.  To do this, you must have some kind of regular top-level syntax for the signatures.  For example:</p>\n\n<pre><code>macro_rules! re_export {\n    ($({$($sigs:tt)*})*) =&gt; {\n        $(\n            re_export! { @fn $($sigs)* }\n        )*\n    };\n\n    (@fn pub fn $i:ident($($arg:ident: $argty:ty),*) -&gt; $ret:ty) =&gt; {\n        extern {\n            pub fn $i($($arg: $argty),*) -&gt; $ret;\n        }\n    };\n\n    (@fn pub fn $i:ident($($arg:ident: $argty:ty),*)) =&gt; {\n        extern {\n            pub fn $i($($arg: $argty),*);\n        }\n    };\n}\n</code></pre>\n\n<p>Here, we wrap each function signature in <code>{...}</code>s.  This is because matcher groups (<code>(...)</code>, <code>[...]</code>, and <code>{...}</code>) allow <code>macro_rules!</code> to match their contents blindly, without having to understand them.  This allows us to match the irregular function signatures in a regular fashion.  The top-level expansion simply forwards each individual function signature back to itself for actual processing.  The <code>@fn</code> is just an <a href=\"https://danielkeep.github.io/tlborm/book/pat-internal-rules.html\">internal rule</a> marker to make sure we select the correct rule during recursion.</p>\n\n<p>This doesn't have the same recursion limits that the previous one does... but requires you to use a slightly obtuse syntax:</p>\n\n<pre><code>re_export! {\n    { pub fn abs(i: c_int) -&gt; c_int }\n    { pub fn rand() -&gt; c_int }\n    { pub fn foo() }\n    { pub fn add(i: c_int, j: c_int) -&gt; c_int }\n}\n</code></pre>\n"}], "owner": {"reputation": 145, "user_id": 1334732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/331a38bf7140f4bef1f8de1bd7aa29e4?s=128&d=identicon&r=PG", "display_name": "Mastax", "link": "https://stackoverflow.com/users/1334732/mastax"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 604, "favorite_count": 2, "accepted_answer_id": 35591693, "answer_count": 1, "score": 9, "last_activity_date": 1456277820, "creation_date": 1456270600, "last_edit_date": 1456271699, "question_id": 35590450, "link": "https://stackoverflow.com/questions/35590450/how-do-i-generalize-a-rust-macro-over-different-types-of-functions", "title": "How do I generalize a Rust macro over different types of functions?", "body": "<p>I have a macro that takes a list of function declarations and turns them into different declarations.</p>\n\n<pre><code>macro_rules! re_export {\n    ($(pub fn $i:ident($($arg:ident: $argty:ty)*) -&gt; $ret:ty;)*) =&gt; ($(\n        extern {\n            pub fn $i($($arg: $argty),*) -&gt; $ret;\n        }\n    )*);\n    ($(pub fn $i:ident($($arg:ident: $argty:ty)*);)*) =&gt; ($(\n        extern {\n            pub fn $i($($arg: $argty),*);\n        }\n    )*);\n}\n</code></pre>\n\n<p>Which is used like this:</p>\n\n<pre><code>re_export! {\n    pub fn abs(i: c_int) -&gt; c_int;\n    pub fn rand() -&gt; c_int;\n    pub fn foo();\n    pub fn add(i: c_int, j: c_int) -&gt; c_int;\n}\n</code></pre>\n\n<p>How can I generalize the macro so that I can give it multiple functions with or without args and return types and have it work on all of them. It's easy to make a macro that works on several functions of the same type, but I can't figure out how to make it work for different types.</p>\n"}, {"tags": ["algorithm", "rust", "primes"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456271429, "post_id": 35590083, "comment_id": 58867410, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/33818141/155423\">stackoverflow.com/q/33818141/155423</a> or <a href=\"http://stackoverflow.com/q/28599334/155423\">stackoverflow.com/q/28599334/155423</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1456284289, "post_id": 35590083, "comment_id": 58871517, "body": "If you don&#39;t believe this to be a duplicate of either of them, I encourage you to <a href=\"https://stackoverflow.com/posts/35590083/edit\">edit</a> your question to acknowledge that you have read them and explain why your question is different. Then you should reduce your code. Remove commented-out junk code, remove all the complicated logic around prime numbers. Create an <a href=\"/help/mcve\">MCVE</a> that shows the error you are getting with a minimum of extra fluff. Include the error you are getting <i>in the question</i> so we can know what it is you are seeing!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456405209, "post_id": 35590083, "comment_id": 58937515, "body": "I see that you&#39;ve updated your code, but it&#39;s still very large, compared to the problem you are describing. If the problem is &quot;<i>The shared vector <code>prms</code> is not being updated by with index variable <code>nonprm</code></i>&quot;, then you can remove <b>all</b> of the code that isn&#39;t the vector or the index."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1457849295, "post_id": 35590083, "comment_id": 59588845, "body": "Your code doesn&#39;t actually run in parallel: each call to <code>crossbeam::scope</code> spawns one thread, waits for it to end, then returns. The scope needs to enclose the <code>for</code> loop so that the spawned threads actually execute concurrently. However, just moving the whole loop into the closure passed to <code>crossbeam::scope</code> causes errors, because we can&#39;t safely give direct mutable access to <code>prms</code> to several threads at once."}], "owner": {"reputation": 21, "user_id": 5286932, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-ZdfkYvlbzCM/AAAAAAAAAAI/AAAAAAAAAD0/R3OPl_JElXQ/photo.jpg?sz=128", "display_name": "Jabari Zakiya", "link": "https://stackoverflow.com/users/5286932/jabari-zakiya"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 186, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1456547172, "creation_date": 1456269000, "last_edit_date": 1456547172, "question_id": 35590083, "link": "https://stackoverflow.com/questions/35590083/making-parallel-prime-sieve-with-shared-memory-faster", "title": "Making parallel prime sieve with shared memory faster", "body": "<p>I have a prime sieve whose sequential version runs great. I finally figured out how to make the inner loop run in parallel, but (as I feared based on prior experience with other languages) the single threaded version is faster.</p>\n\n<p>Can this parallel version in Rust be optimized?</p>\n\n<pre><code>extern crate crossbeam;\n\nfn main() {\n\n    let residues = [1, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n                   71, 73, 79, 83, 89, 97,101,103,107,109,113,121,127,131,137,139,\n                  143,149,151,157,163,167,169,173,179,181,187,191,193,197,199,209,211];\n\n    let val = 1_000_000;\n    let md = 210;\n    let rescnt = 48;\n\n    println!(\"val = {}, mod = {}, rescnt = {}\", val, md, rescnt);\n\n    let mut posn = [0; 210];\n    for i in 1..rescnt {posn[residues[i]] = i - 1;}\n    posn[1] = rescnt - 1;\n\n    let mut modk;  let mut r;  let mut k;\n\n    let num = val - 1 | 1;\n    k = num / md;  modk = md * k; r = 1;\n    while num &gt;= modk + residues[r] {r += 1;}\n    let maxpcs = k * rescnt + r - 1; \n    let prms: Vec&lt;u8&gt; = vec![0; maxpcs];\n\n    println!(\"num = {}, k = {}, modk = {}, maxpcs = {}\", num, k, modk, maxpcs);\n\n    let sqrt_n = (num as f32).sqrt() as usize;\n    modk = 0;  r = 0;  k = 0;\n\n    // sieve to identify/eliminate nonprimes/locations in prms array\n    for i in 0..maxpcs {\n        r += 1; if r &gt; rescnt {r = 1; modk += md;  k += 1;};\n        if  prms[i] == 1 {continue;}\n        let prm_r = residues[r];\n        let prime = modk + prm_r;\n        if  prime &gt; sqrt_n {break;}\n        let prmstep = prime * rescnt;\n        for ri in &amp;residues[1..rescnt + 1] {\n          let prms = &amp;mut prms;\n          crossbeam::scope(|scope| {\n            scope.spawn(move || {\n                let prod = prm_r * ri;\n                let mut np = (k * (prime + ri) + (prod - 2) / md) * rescnt + posn[prod % md];\n                while np &lt; maxpcs {prms[np] = 1; np += prmstep;}\n            });\n          });\n        }\n    }\n    // the prms array now has all the positions for primes r1..N\n    // extract prime numbers and count from prms into prims array\n    let mut prmcnt = 4;\n    modk = 0; r = 0;\n    for i in 0..maxpcs {\n        r += 1; if r &gt; rescnt {r = 1; modk += md;};\n        if prms[i] == 0 {prmcnt += 1;}\n    }\n    println!(\"{}\", prmcnt);\n}\n</code></pre>\n\n<p>Using Rust 1.6 on Linux.</p>\n"}, {"tags": ["terminal", "rust", "posix", "readline"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456271537, "post_id": 35590410, "comment_id": 58867447, "body": "Can&#39;t some ANSI escapes move the cursor forwards or backwards, changing the overall width? Seems like transforming to an empty string wouldn&#39;t be complete if so."}, {"owner": {"reputation": 42737, "user_id": 4518274, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UPurS.png?s=128&g=1", "display_name": "Thomas Dickey", "link": "https://stackoverflow.com/users/4518274/thomas-dickey"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456271645, "post_id": 35590410, "comment_id": 58867496, "body": "You normally would not use those in your prompt, and you would not find their length by a character-type function.  OP&#39;s example does not go there, at any rate.  For instance, an escape sequence could save the cursor position, clear the screen and restore the cursor position.  Not topical for a prompt..."}], "tags": [], "owner": {"reputation": 42737, "user_id": 4518274, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UPurS.png?s=128&g=1", "display_name": "Thomas Dickey", "link": "https://stackoverflow.com/users/4518274/thomas-dickey"}, "is_accepted": true, "score": 1, "last_activity_date": 1456270380, "creation_date": 1456270380, "answer_id": 35590410, "question_id": 35587099, "link": "https://stackoverflow.com/questions/35587099/how-to-compute-the-display-width-of-a-prompt-on-the-cli-with-ansi-escape-codes/35590410#35590410", "title": "How to compute the display width of a prompt on the CLI with ANSI escape codes?", "body": "<p>You're not going to get the width of an escape-sequence using a Unicode width calculation, simply because none of the string is printable&mdash;on a terminal.</p>\n\n<p>If you control the content of the string, you could calculate the width by</p>\n\n<ul>\n<li>copying the string to a temporary variable</li>\n<li>substituting the escape sequences to empty strings, e.g., changing the pattern starting with <code>\\x1b</code>, allowing any combination of <code>[</code>, <code>]</code>, <code>&lt;</code>, <code>&gt;</code>', <code>=</code>, <code>?</code>, <code>;</code> or decimal digits <em>through</em> the \"final\" characters in the range <code>@</code> to <code>~</code></li>\n<li>measuring the length of what (if anything) is left.</li>\n</ul>\n\n<p>In your example</p>\n\n<pre><code>let prompt = \"\\x1b[1;32m&gt;&gt;\\x1b[0m \";\n</code></pre>\n\n<p>only <code>\"&gt;&gt; \"</code> would be left to measure.</p>\n\n<p>For patterns... you would start here: <a href=\"https://doc.rust-lang.org/regex/regex/enum.Regex.html\" rel=\"nofollow\">Regex</a></p>\n\n<p>Further reading:</p>\n\n<ul>\n<li><a href=\"http://docs.nickel.rs/regex/index.html\" rel=\"nofollow\">crate Regex</a></li>\n<li><a href=\"http://rustbyexample.com/std/str.html\" rel=\"nofollow\">17.3 Strings</a>, Rust by Example</li>\n</ul>\n"}], "owner": {"reputation": 45, "user_id": 5549604, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ceaaed756e22c566bfd8d68297d4e4e1?s=128&d=identicon&r=PG&f=1", "display_name": "Gwenn", "link": "https://stackoverflow.com/users/5549604/gwenn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 145, "favorite_count": 0, "accepted_answer_id": 35590410, "answer_count": 1, "score": 1, "last_activity_date": 1456270380, "creation_date": 1456257832, "last_edit_date": 1456257992, "question_id": 35587099, "link": "https://stackoverflow.com/questions/35587099/how-to-compute-the-display-width-of-a-prompt-on-the-cli-with-ansi-escape-codes", "title": "How to compute the display width of a prompt on the CLI with ANSI escape codes?", "body": "<p>A trivial implementation:</p>\n\n<pre><code>extern crate unicode_width;\n\nfn main () {\n    let prompt = \"\\x1b[1;32m&gt;&gt;\\x1b[0m \";\n    println!(\"{}\", unicode_width::UnicodeWidthStr::width(prompt));\n}\n</code></pre>\n\n<p>returns <code>12</code> but <code>3</code> is expected.</p>\n\n<p>I would also be happy to use a crate that already does this, if there is one.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456259636, "post_id": 35583148, "comment_id": 58861588, "body": "I&#39;d assume that <code>Vec</code> and <code>VecDeque</code> don&#39;t expose this method because it will always have to be an <code>O(n)</code> operation for these data structures. Maybe a different data structure would be more appropriate for your case?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1456260067, "post_id": 35583148, "comment_id": 58861820, "body": "@Shepmaster in fact, <code>Vec</code> does expose <code>contains()</code> through its deref to a slice: <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.contains\" rel=\"nofollow noreferrer\">here</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1456262734, "post_id": 35583148, "comment_id": 58863293, "body": "@VladimirMatveev that&#39;s what I get for assuming!"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456259623, "post_id": 35584008, "comment_id": 58861577, "body": "You could create a <code>Contains</code> extension trait and implement it for <code>VecDeque</code> (and other collections?) using this code. Then you get the shorter code, but still being aware of the algorithmic issues."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 4, "last_activity_date": 1456247863, "creation_date": 1456247863, "answer_id": 35584008, "question_id": 35583148, "link": "https://stackoverflow.com/questions/35583148/check-if-vecdeque-contains-an-element/35584008#35584008", "title": "Check if VecDeque contains an element", "body": "<p>The simpler way would probably be</p>\n\n<pre><code>deq.iter().any(|e| e == item)\n</code></pre>\n\n<p>but there seems to be no easier way.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1456263135, "creation_date": 1456263135, "answer_id": 35588606, "question_id": 35583148, "link": "https://stackoverflow.com/questions/35583148/check-if-vecdeque-contains-an-element/35588606#35588606", "title": "Check if VecDeque contains an element", "body": "<p>As Vladimir Matveev pointed out to me in comments, a slice has a <code>contains</code> method, so you could also use that on the inner slices:</p>\n\n<pre><code>let (a, b) = deq.as_slices();\na.contains(item) || b.contains(item)\n</code></pre>\n\n<p>As I mentioned in another comment, you can make a trait to give you the nice interface:</p>\n\n<pre><code>trait Contains&lt;T&gt; {\n    fn contains(&amp;self, item: &amp;T) -&gt; bool;\n}\n\nimpl&lt;T&gt; Contains&lt;T&gt; for VecDeque&lt;T&gt;\n    where T: PartialEq\n{\n    fn contains(&amp;self, item: &amp;T) -&gt; bool {\n        let (a, b) = self.as_slices();\n        a.contains(item) || b.contains(item)\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1475192040, "creation_date": 1475192040, "answer_id": 39781581, "question_id": 35583148, "link": "https://stackoverflow.com/questions/35583148/check-if-vecdeque-contains-an-element/39781581#39781581", "title": "Check if VecDeque contains an element", "body": "<p>In <a href=\"https://blog.rust-lang.org/2016/09/29/Rust-1.12.html\" rel=\"noreferrer\">Rust 1.12</a> a <strong><code>contains</code> method</strong> was stabilized for <a href=\"https://doc.rust-lang.org/std/collections/linked_list/struct.LinkedList.html#method.contains\" rel=\"noreferrer\"><code>LinkedList</code></a> and <a href=\"https://doc.rust-lang.org/std/collections/vec_deque/struct.VecDeque.html#method.contains\" rel=\"noreferrer\"><code>VecDeque</code></a>. Therefore the correct answer now is the obvious one:</p>\n\n<pre><code>deq.contains(item)\n</code></pre>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1509, "favorite_count": 0, "accepted_answer_id": 39781581, "answer_count": 3, "score": 3, "last_activity_date": 1475192119, "creation_date": 1456245628, "last_edit_date": 1495542283, "question_id": 35583148, "link": "https://stackoverflow.com/questions/35583148/check-if-vecdeque-contains-an-element", "title": "Check if VecDeque contains an element", "body": "<p>Having a <code>VecDeque</code> <code>deq</code> and an <code>item</code>, how can I find out if <code>deq</code> contains <code>item</code>? I can do it with an iterator:</p>\n\n<pre><code>deq.iter().find(|e| e == item).is_none()\n</code></pre>\n\n<p>But this is a lot of code. I just want to say <code>deq.contains(item)</code>, but <code>VecDeque</code> has no such method (<strong>edit</strong>: not true anymore, see <a href=\"https://stackoverflow.com/a/39781581/2408867\">my answer</a>). Any alternatives?</p>\n"}, {"tags": ["rust", "llvm", "atomic"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1456255750, "post_id": 35582847, "comment_id": 58859312, "body": "My reading of that text is more along the lines of &quot;<code>Cell</code> has interior mutability, so a method that accepts <code>&amp;Cell</code> might change it. This is unlike other Rust code where a <code>mut</code> keyword makes it clear that it will change&quot;. I <i>don&#39;t</i> read it as &quot;some thread somewhere might change the value at any time&quot;. Said another way, I don&#39;t think you need atomic checking or anything that complicated. Really, I read it as &quot;<code>Cell</code> operates like any other object in a traditional OO language and that can be confusing with mutability, so watch out!&quot;."}, {"owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1456257675, "post_id": 35582847, "comment_id": 58860469, "body": "Ah! You&#39;re right. For some reason I thought <code>Cell</code> impl&#39;d Sync"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1456309479, "creation_date": 1456309479, "answer_id": 35599410, "question_id": 35582847, "link": "https://stackoverflow.com/questions/35582847/is-there-a-way-to-check-and-set-the-value-of-a-stdcellcell/35599410#35599410", "title": "Is there a way to &quot;check and set&quot; the value of a `std::cell::Cell`?", "body": "<p><strong>TL;DR:</strong> No, there's not, because it's unnecessary.</p>\n\n<hr>\n\n<p>Compare and Set is only valuable in two actors (or more) are modifying the object in parallel.</p>\n\n<p>While <code>Cell</code> allows internal mutability, it is not thread-safe, so you will never be in a situation where two actors will be attempting to modify it in parallel.</p>\n\n<p>Therefore, you can just use <code>get()</code>, compare, and <code>set()</code> if it suits you. And nobody will change the value between your <code>get()</code> and <code>set()</code>, providing you do not call other code yourself.</p>\n"}], "owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 35599410, "answer_count": 1, "score": 3, "last_activity_date": 1456309479, "creation_date": 1456244879, "last_edit_date": 1456257697, "question_id": 35582847, "link": "https://stackoverflow.com/questions/35582847/is-there-a-way-to-check-and-set-the-value-of-a-stdcellcell", "title": "Is there a way to &quot;check and set&quot; the value of a `std::cell::Cell`?", "body": "<p>I was looking for something that would compile to the magical <a href=\"http://llvm.org/docs/LangRef.html#cmpxchg-instruction\" rel=\"nofollow\"><code>cmpxchg</code></a> instruction. After digging into\nthe documentation, I couldn't find anything that would accomplish this for <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow\"><code>Cell</code></a>.</p>\n\n<p>Maybe this is an antipattern?</p>\n\n<h2>Code:</h2>\n\n<p>After digging into the code I added the following to <code>Cell</code>'s implementation to see if it would work.</p>\n\n<pre><code>pub fn cmp_and_set(&amp;self, old: T, new: T) -&gt; T {\n    unsafe {\n        ::intrinsics::atomic_cxchg(self.value.get(), old, new)\n    }\n}\n// ^ there are many many reasons why this is not so great\n// this is just an example of what I'm looking for\n</code></pre>\n\n<p>simple usage</p>\n\n<pre><code>fn main() {\n    let c0 = Cell::new(10);\n    let val0 = c0.cmp_and_set(11, 5);\n    assert_eq!(c0.get(), 5);\n    let val1 = c0.cmp_and_set(10, 42);\n    assert_eq!(c0.get(), 42);\n}\n</code></pre>\n\n<p>As far as I can tell, for very basic cases it works, but again there are many many reasons why the particular implementation is less than stellar.\nThe fact that I edited the standard library to get what I was looking for means I'm certainly attempting to implement some sort of antipattern.</p>\n\n<h2>Background:</h2>\n\n<p>This was prompted from re-reading the following from <a href=\"https://doc.rust-lang.org/book/choosing-your-guarantees.html\" rel=\"nofollow\">The Rust Programming Language</a></p>\n\n<blockquote>\n  <p>It is still possible to violate your own invariants using this wrapper, so be careful when using it. If a field is wrapped in <code>Cell</code>, it's a nice indicator that the chunk of data is mutable and may not stay the same between the time you first read it and when you intend to use it.</p>\n</blockquote>\n"}, {"tags": ["rust", "ffi", "sbrk"], "answers": [{"comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 2, "creation_date": 1456258150, "post_id": 35583552, "comment_id": 58860743, "body": "Nota bene: <a href=\"http://doc.crates.io/faq.html#can-libraries-use--as-a-version-for-their-dependencies\" rel=\"nofollow noreferrer\">one should shy away from using <code>pkg = &quot;*&quot;</code></a>"}, {"owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "reply_to_user": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 0, "creation_date": 1456262897, "post_id": 35583552, "comment_id": 58863378, "body": "Thanks for catching my laziness! The post has been edited."}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "edited": false, "score": 0, "creation_date": 1456359896, "post_id": 35583552, "comment_id": 58915313, "body": "Cheers, that&#39;s perfect - I was close but thought I needed some <code>#[link(name = &quot;&quot;)]</code> thing in there, and couldn&#39;t figure out what to put as the name."}, {"owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "edited": false, "score": 1, "creation_date": 1456407473, "post_id": 35583552, "comment_id": 58939084, "body": "If you&#39;re writing an allocator, you may also be interested in this chapter on Rust <a href=\"https://doc.rust-lang.org/book/custom-allocators.html\" rel=\"nofollow noreferrer\">Custom Allocators</a>"}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "edited": false, "score": 0, "creation_date": 1456411842, "post_id": 35583552, "comment_id": 58942515, "body": "@DanielRobertson That looks like an interesting chapter, I&#39;ll have to give it a god once I&#39;ve sorted my allocator out. I&#39;m now having some trouble with global variables and FFI - I&#39;ve followed the chapter on it, but the linker is saying they&#39;re undefined but the names have had an underscore put before them. e.g. <code>PROT_WRITE</code> is showing as <code>_PROT_WRITE</code>. Any ideas?"}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "edited": false, "score": 0, "creation_date": 1456412957, "post_id": 35583552, "comment_id": 58943512, "body": "Just realised they aren&#39;t global variables, they&#39;re macro defined constants, which FFI can&#39;t handle."}], "tags": [], "owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "is_accepted": true, "score": 3, "last_activity_date": 1456260626, "last_edit_date": 1456260626, "creation_date": 1456246622, "answer_id": 35583552, "question_id": 35582527, "link": "https://stackoverflow.com/questions/35582527/is-there-a-way-to-use-functions-from-unistd-h-in-rust-code/35583552#35583552", "title": "Is there a way to use functions from unistd.h in Rust code?", "body": "<p><a href=\"https://doc.rust-lang.org/book/ffi.html\" rel=\"nofollow\">The Rust Programming Language</a> book as some good info on FFI. If you use <a href=\"https://crates.io/crates/libc\" rel=\"nofollow\"><code>libc</code></a>, and <a href=\"http://doc.crates.io/guide.html\" rel=\"nofollow\">cargo</a> you could use something like the following.</p>\n\n<pre><code>extern crate libc;\n\nuse libc;\n\nextern {\n    fn sbrk(x: usize) -&gt; *mut libc::c_void;\n}\n\nfn call_sbrk(x: usize) -&gt; *mut libc::c_void {\n    unsafe {\n        sbrk(x)\n    }\n}\n\nfn main() {\n    let x = call_sbrk(42);\n    println!(\"{:p}\", x);\n}\n</code></pre>\n\n<p>with something like the following in your <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies]\nlibc = \"^0.2.7\"\n</code></pre>\n"}], "owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 35583552, "answer_count": 1, "score": 4, "last_activity_date": 1456260626, "creation_date": 1456243914, "question_id": 35582527, "link": "https://stackoverflow.com/questions/35582527/is-there-a-way-to-use-functions-from-unistd-h-in-rust-code", "title": "Is there a way to use functions from unistd.h in Rust code?", "body": "<p>I'm trying to implement a malloc type function, but I can't figure out what to use instead of the sbrk function found in unistd.h for C. Is there any way to FFI unistd.h into a Rust program?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 136, "user_id": 2197294, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4c484d2ddc3ccaebb1d977de91bf19ca?s=128&d=identicon&r=PG", "display_name": "bugeats", "link": "https://stackoverflow.com/users/2197294/bugeats"}, "edited": false, "score": 0, "creation_date": 1593486682, "post_id": 35569079, "comment_id": 110791493, "body": "Re: &quot;methods all up in here&quot;:   Is there a quick way to &quot;proxy&quot; all the methods I want to keep from the type that I am wrapping? For example with a <code>struct MyList(Vec&lt;MyData&gt;)</code> I want to get all the enumerable stuffs without having to re-write all the methods."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 136, "user_id": 2197294, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4c484d2ddc3ccaebb1d977de91bf19ca?s=128&d=identicon&r=PG", "display_name": "bugeats", "link": "https://stackoverflow.com/users/2197294/bugeats"}, "edited": false, "score": 0, "creation_date": 1593522403, "post_id": 35569079, "comment_id": 110806269, "body": "@bugeats no, not really. See <a href=\"https://stackoverflow.com/q/45086595/155423\">Is it considered a bad practice to implement Deref for newtypes?</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 43, "last_activity_date": 1584560904, "last_edit_date": 1584560904, "creation_date": 1456203059, "answer_id": 35569079, "question_id": 35568871, "link": "https://stackoverflow.com/questions/35568871/is-it-possible-to-implement-methods-on-type-aliases/35569079#35569079", "title": "Is it possible to implement methods on type aliases?", "body": "<blockquote>\n  <p>Is there any fix</p>\n</blockquote>\n\n<p>Not really. A <em>type alias</em> (<code>type Foo = Bar</code>) does <em>not</em> create a new type. All it does is create a different name that refers to the existing type.</p>\n\n<p>In Rust, you are not allowed to implement inherent methods for a type that comes from another crate.</p>\n\n<blockquote>\n  <p>another way for me to implement</p>\n</blockquote>\n\n<p>The normal solution is to create a brand new type. In fact, it <a href=\"https://doc.rust-lang.org/stable/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction\" rel=\"noreferrer\">goes by the name <em>newtype</em></a>!</p>\n\n<pre><code>struct Link(Option&lt;Box&lt;Node&gt;&gt;);\n\nimpl Link {\n    // methods all up in here\n}\n</code></pre>\n\n<p>There's no runtime disadvantage to this - both versions will take the exact same amount of space. Additionally, you won't accidentally expose any methods you didn't mean to. For example, do you really want clients of your code to be able to call <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.take\" rel=\"noreferrer\"><code>Option::take</code></a>?</p>\n\n<p>Another solution is to create your own <em>trait</em>, and then implement it for your type. From the callers point of view, it looks basically the same:</p>\n\n<pre><code>type Link = Option&lt;Box&lt;Node&gt;&gt;;\n\ntrait LinkMethods {\n    fn cool_method(&amp;self);\n}\n\nimpl LinkMethods for Link {\n    fn cool_method(&amp;self) {\n        // ...\n    }\n}\n</code></pre>\n\n<p>The annoyance here is that the trait <code>LinkMethods</code> has to be in scope to call these methods. You also cannot implement a trait you don't own for a type you don't own.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25413201/155423\">How do I implement a trait I don&#39;t own for a type I don&#39;t own?</a></li>\n</ul>\n"}], "owner": {"reputation": 303, "user_id": 5966424, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/71508cccceae3995404848054fe6bbb1?s=128&d=identicon&r=PG", "display_name": "SantiBuenahora", "link": "https://stackoverflow.com/users/5966424/santibuenahora"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10267, "favorite_count": 3, "accepted_answer_id": 35569079, "answer_count": 1, "score": 30, "last_activity_date": 1584560904, "creation_date": 1456201843, "last_edit_date": 1561386015, "question_id": 35568871, "link": "https://stackoverflow.com/questions/35568871/is-it-possible-to-implement-methods-on-type-aliases", "title": "Is it possible to implement methods on type aliases?", "body": "<p>Consider the following implementation:</p>\n\n<pre><code>pub struct BST {\n    root: Link,\n}\n\ntype Link = Option&lt;Box&lt;Node&gt;&gt;;\n\nstruct Node {\n    left: Link,\n    elem: i32,\n    right: Link,\n}\n\nimpl Link { /* misc */ }\n\nimpl BST { /* misc */ }\n</code></pre>\n\n<p>I keep getting the error:</p>\n\n<blockquote>\n  <p>cannot define inherent <code>impl</code> for a type outside of the crate where the type is defined; define and implement a trait or new type instead</p>\n</blockquote>\n\n<p>I was able to find others <a href=\"https://github.com/rust-lang/rust/issues/9767\" rel=\"noreferrer\">had this same issue back in February</a>, but there was seemingly no solution at the time.</p>\n\n<p>Is there any fix or another way for me to implement my <code>Link</code> typedef in Rust?</p>\n"}, {"tags": ["hashmap", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1456187177, "post_id": 35566433, "comment_id": 58821327, "body": "FWIW, the error happens for any pointer to a trait."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1457846709, "post_id": 35566433, "comment_id": 59588283, "body": "I think the error comes from the fact that there is an <code>impl&lt;T&gt; Hash for *const T</code>, but <code>T</code> is implicitly required to be <code>Sized</code>, even though it is unnecessary."}], "answers": [{"tags": [], "owner": {"reputation": 3669, "user_id": 4876946, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/5dc4839a7e9466d54f3791122f8f5d75?s=128&d=identicon&r=PG&f=1", "display_name": "Matt", "link": "https://stackoverflow.com/users/4876946/matt"}, "is_accepted": true, "score": 1, "last_activity_date": 1457846564, "last_edit_date": 1457846564, "creation_date": 1456436023, "answer_id": 35638802, "question_id": 35566433, "link": "https://stackoverflow.com/questions/35566433/is-it-possible-to-create-a-hashmap-keyed-by-something-of-type-const-any/35638802#35638802", "title": "Is it possible to create a `HashMap` keyed by something of type `*const Any`?", "body": "<p>It's not the prettiest solution, but here is what I came up with:</p>\n\n<pre><code>use std::any::Any;\nuse std::collections::HashMap;\nuse std::hash::{Hasher, Hash};\nuse std::cmp;\n\nstruct Wrapper {\n    v: *const Any,\n}\n\nimpl Wrapper {\n    fn get_addr(&amp;self) -&gt; usize {\n        self.v as *const usize as usize\n    }\n}\n\nimpl Hash for Wrapper {\n    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n        self.get_addr().hash(state)\n    }\n}\n\nimpl cmp::PartialEq for Wrapper {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.get_addr() == other.get_addr()\n    }\n}\n\nimpl cmp::Eq for Wrapper {}\n\nfn main() {\n    let x: HashMap&lt;Wrapper, i32&gt; = HashMap::new();\n}\n</code></pre>\n"}], "owner": {"reputation": 3669, "user_id": 4876946, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/5dc4839a7e9466d54f3791122f8f5d75?s=128&d=identicon&r=PG&f=1", "display_name": "Matt", "link": "https://stackoverflow.com/users/4876946/matt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 760, "favorite_count": 0, "accepted_answer_id": 35638802, "answer_count": 1, "score": 8, "last_activity_date": 1457846564, "creation_date": 1456186196, "last_edit_date": 1456205331, "question_id": 35566433, "link": "https://stackoverflow.com/questions/35566433/is-it-possible-to-create-a-hashmap-keyed-by-something-of-type-const-any", "title": "Is it possible to create a `HashMap` keyed by something of type `*const Any`?", "body": "<p>This code</p>\n\n<pre><code>use std::any::Any;\nuse std::collections::HashMap;\n\nfn main() {\n    let x: HashMap&lt;*const Any, i32&gt; = HashMap::new();\n}\n</code></pre>\n\n<p>Gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait `core::marker::Sized` is not implemented for the type `core::any::Any` [E0277]\n\nlet x: HashMap&lt;*const Any, i32&gt; = HashMap::new();\n                                  ^~~~~~~~~~~~\n</code></pre>\n\n<p>First of all, I don't understand why it is complaining about <code>core::any::Any</code>, when the keys are of type <code>*const core::any::Any</code>.  Shouldn't <code>*const _</code> be sized regardless of what it is pointing to?  To test this, I tried:</p>\n\n<pre><code>use std::any::Any;\nuse std::mem::size_of;\n\nfn main() {\n    println!(\"size_of(*const Any) = {}\", size_of::&lt;*const Any&gt;());\n}\n</code></pre>\n\n<p>Which, as expected, produces:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>size_of(*const Any) = 16\n</code></pre>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1456186866, "last_edit_date": 1456186866, "creation_date": 1456186523, "answer_id": 35566487, "question_id": 35566342, "link": "https://stackoverflow.com/questions/35566342/how-would-i-use-trait-objects-for-function-callbacks/35566487#35566487", "title": "How would I use trait objects for function callbacks?", "body": "<p>If you want to use closures and functions as parameters, you cannot use your own traits. Instead, you use one of the <code>Fn*</code> family:</p>\n\n<pre><code>fn pass_callback&lt;F&gt;(f: F)\n    where F: Fn()\n{\n    f();\n}\n\nfn run_me() {\n    println!(\"Hello World!\");\n}\n\nfn main() {\n    pass_callback(run_me);\n    pass_callback(|| println!(\"Hello World!\"));\n}\n</code></pre>\n\n<ul>\n<li><a href=\"http://doc.rust-lang.org/std/ops/trait.Fn.html\"><code>Fn</code></a></li>\n<li><a href=\"http://doc.rust-lang.org/std/ops/trait.FnOnce.html\"><code>FnOnce</code></a></li>\n<li><a href=\"http://doc.rust-lang.org/std/ops/trait.FnMut.html\"><code>FnMut</code></a></li>\n</ul>\n\n<hr>\n\n<p>If you really want to use your own trait, you can, but then you need to implement the trait on something and pass that item into your function:</p>\n\n<pre><code>trait Callback {\n    fn callback(&amp;self, value: u8) -&gt; bool;\n}\n\nstruct IsEven;\nimpl Callback for IsEven {\n    fn callback(&amp;self, value: u8) -&gt; bool {\n        value % 2 == 0\n    }\n}\n\nfn pass_callback&lt;C&gt;(f: C)\n    where C: Callback\n{\n    if f.callback(42) {\n        println!(\"Callback passed\");\n    }\n}\n\nfn main() {\n    pass_callback(IsEven);\n}\n</code></pre>\n\n<hr>\n\n<p>As an aside, your comment</p>\n\n<blockquote>\n  <p>no arg void ret function</p>\n</blockquote>\n\n<p>isn't quite true. Rust doesn't have a <code>void</code> \"type\", it has the empty tuple, often called the <em>unit type</em>. </p>\n"}, {"tags": [], "owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "is_accepted": false, "score": 3, "last_activity_date": 1457147305, "creation_date": 1457147305, "answer_id": 35809514, "question_id": 35566342, "link": "https://stackoverflow.com/questions/35566342/how-would-i-use-trait-objects-for-function-callbacks/35809514#35809514", "title": "How would I use trait objects for function callbacks?", "body": "<p>The reason your code doesn't work is that the function <code>run_me</code> and closure <code>|| println!(\"Hello World!\")</code> don't have implementations for your callback trait. You can fix this by adding a <code>Callback</code> implementation for all types implementing the <code>Fn()</code> trait:</p>\n\n<pre><code>trait Callback {\n    fn callback(&amp;self);\n}\n\nfn pass_callback(f: &amp;Callback) {\n    f.callback();\n}\n\nfn run_me() {\n    println!(\"Hello World!\");\n}\n\n// For every type T that implements Fn(),\n// this is the Callback implementation.\nimpl&lt;T: Fn()&gt; Callback for T {\n    fn callback(&amp;self) {\n        self()\n    }\n}\n\nfn main() {\n    pass_callback(&amp;run_me); // a simple function\n    pass_callback(&amp;|| println!(\"Hello World!\")); // a closure\n}\n</code></pre>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 587, "favorite_count": 0, "accepted_answer_id": 35566487, "answer_count": 2, "score": 4, "last_activity_date": 1457147305, "creation_date": 1456185675, "last_edit_date": 1456186187, "question_id": 35566342, "link": "https://stackoverflow.com/questions/35566342/how-would-i-use-trait-objects-for-function-callbacks", "title": "How would I use trait objects for function callbacks?", "body": "<p>I'm trying to wrap my head around trait objects and how I can use them. One scenario is I might want to pass a function for a callback, when some condition is met that callback is called.</p>\n\n<pre><code>fn bind_callback( key: u64, /* pass function */) {\n    // when key is matched with the event, call the function\n}\n</code></pre>\n\n<p>How can I do this though? I hear I can use trait objects for something like this, but how would I go about implementing this? Can someone show me an example? Here's what I'm at:</p>\n\n<pre><code>trait Callback {\n    fn callback(self);\n}\n\nfn pass_callback(f: &amp;Callback) {\n    f.callback();\n}\n\nfn run_me() {\n    println!(\"Hello World!\");\n}\n\nfn main() {\n    pass_callback(&amp;run_me); // run simple no arg void ret function\n    pass_callback(|| println!(\"Hello World!\")); // same thing\n}\n</code></pre>\n\n<p>I know this is terribly wrong, I'm trying to understand how I would accomplish something like this. My error output is:</p>\n\n<pre><code>&lt;anon&gt;:14:19: 14:26 error: the trait `Callback` is not implemented for the type `fn() {run_me}` [E0277]\n&lt;anon&gt;:14     pass_callback(&amp;run_me);\n                            ^~~~~~~\n&lt;anon&gt;:14:19: 14:26 help: see the detailed explanation for E0277\n&lt;anon&gt;:14:19: 14:26 note: required for the cast to the object type `Callback`\n&lt;anon&gt;:15:19: 15:46 error: mismatched types:\n expected `&amp;Callback`,\n    found `[closure@&lt;anon&gt;:15:19: 15:46]`\n(expected &amp;-ptr,\n    found closure) [E0308]\n&lt;anon&gt;:15     pass_callback(|| println!(\"Hello World!\"));\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:15:19: 15:46 help: see the detailed explanation for E0308\nerror: aborting due to 2 previous errors\nplaypen: application terminated with error code 101\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 891, "user_id": 1307154, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4a008066c234905f35cf5a52214fc928?s=128&d=identicon&r=PG", "display_name": "Michael Plotke", "link": "https://stackoverflow.com/users/1307154/michael-plotke"}, "edited": false, "score": 0, "creation_date": 1456175429, "post_id": 35563378, "comment_id": 58816013, "body": "So <code>x =&gt;</code> acts like <code>_ =&gt;</code>, except that it assigns the value of the binding being matched to <code>x</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 891, "user_id": 1307154, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4a008066c234905f35cf5a52214fc928?s=128&d=identicon&r=PG", "display_name": "Michael Plotke", "link": "https://stackoverflow.com/users/1307154/michael-plotke"}, "edited": false, "score": 1, "creation_date": 1456176371, "post_id": 35563378, "comment_id": 58816571, "body": "@MichaelPlotke I tend to think of it the other way. Any <i>identifier</i> will pattern match anything (<code>a_name</code>, <code>x</code>, <code>_unused</code>, <code>_</code>). It&#39;s more that <code>_</code> is a special identifier that indicates that you do not wish to use that value but you need a binding for some reason."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1456173991, "last_edit_date": 1456173991, "creation_date": 1456173614, "answer_id": 35563378, "question_id": 35563141, "link": "https://stackoverflow.com/questions/35563141/match-shadowing-example-in-the-patterns-section-of-the-rust-book-is-very-perplex/35563378#35563378", "title": "Match shadowing example in the Patterns section of the Rust book is very perplexing", "body": "<p>Your two points are caused by the same root problem. Coincidentally, the reason that this section <em>exists</em> is to point out the problem you asking about! I'm afraid that I'm basically going to regurgitate what the book says, with different words.</p>\n\n<p>Check out this sample:</p>\n\n<pre><code>match some_variable {\n    a_name =&gt; {},\n}\n</code></pre>\n\n<p>In this case, the match arm will <strong>always succeed</strong>. Regardless of the value in <code>some_variable</code>, it will always be bound to the name <code>a_name</code> inside that match arm. It's important to get this part first \u2014 the name of the variable that is bound has no relation to anything outside of the <code>match</code>.</p>\n\n<p>Now we turn to your example:</p>\n\n<pre><code>match c {\n    x =&gt; println!(\"x: {} c: {}\", x, c),\n}\n</code></pre>\n\n<p>The <em>exact same</em> logic applies. The match arm with always match, and regardless of the value of <code>c</code>, it will always be bound to the name <code>x</code> inside the arm.</p>\n\n<p>The <em>value</em> of <code>x</code> from the outer scope (<code>'x'</code> in this case) has no bearing whatsoever in a pattern match.</p>\n\n<hr>\n\n<p>If you wanted to use the value of <code>x</code> to control the pattern match, you can use a <em>match guard</em>:</p>\n\n<pre><code>match c {\n    a if a == x =&gt; println!(\"yep\"),\n    _ =&gt; println!(\"nope\"),\n}\n</code></pre>\n\n<p>Note that in the match guard (<code>if a == x</code>), the variable bindings <code>a</code> and <code>x</code> go back to acting like normal variables that you can test.</p>\n"}, {"comments": [{"owner": {"reputation": 891, "user_id": 1307154, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4a008066c234905f35cf5a52214fc928?s=128&d=identicon&r=PG", "display_name": "Michael Plotke", "link": "https://stackoverflow.com/users/1307154/michael-plotke"}, "edited": false, "score": 1, "creation_date": 1456239318, "post_id": 35572221, "comment_id": 58848096, "body": "Section one of this answer seems strange. Without the capacity to branch on value, <code>match</code> has no utility. The fact that it leverages <code>pattern =&gt;</code> apparently gives it more power and flexibility, but the primary use is branching on value. Does that make sense, or am I still confused?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 891, "user_id": 1307154, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4a008066c234905f35cf5a52214fc928?s=128&d=identicon&r=PG", "display_name": "Michael Plotke", "link": "https://stackoverflow.com/users/1307154/michael-plotke"}, "edited": false, "score": 0, "creation_date": 1456243281, "post_id": 35572221, "comment_id": 58851228, "body": "@MichaelPlotke I would disagree that matching on value is the primary use. <i>Pattern matching</i> is about testing the &quot;shape&quot; of data more than the value. I&#39;d especially disagree that <code>match</code> &quot;has no utility&quot;! It&#39;s used all the time in Rust code (and similar constructs in other languages). Maybe skimming through some code that uses <code>match</code> would help fill in some details?"}, {"owner": {"reputation": 891, "user_id": 1307154, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4a008066c234905f35cf5a52214fc928?s=128&d=identicon&r=PG", "display_name": "Michael Plotke", "link": "https://stackoverflow.com/users/1307154/michael-plotke"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1456244713, "post_id": 35572221, "comment_id": 58852346, "body": "@Shepmaster None of the examples I&#39;ve seen, at <a href=\"http://rustbyexample.com/\" rel=\"nofollow noreferrer\">Rust by Example</a> and elsewhere, have yet disabused me. Also, I don&#39;t understand this notion of &quot;the &#39;shape&#39; of data&quot;."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1456215436, "creation_date": 1456215436, "answer_id": 35572221, "question_id": 35563141, "link": "https://stackoverflow.com/questions/35563141/match-shadowing-example-in-the-patterns-section-of-the-rust-book-is-very-perplex/35572221#35572221", "title": "Match shadowing example in the Patterns section of the Rust book is very perplexing", "body": "<p>There is a fundamental misconception of what <code>match</code> is about.</p>\n\n<p>Pattern-matching is NOT about matching on values but about matching on patterns, as the name imply. For convenience and safety, it also allows binding names to the innards of the matched pattern:</p>\n\n<pre><code>match some_option {\n    Some(x) =&gt; println!(\"Some({})\", x),\n    None    =&gt; println!(\"None\"),\n}\n</code></pre>\n\n<p>For convenience, <code>match</code> is extended to match the <em>values</em> when matching specifically against <em>literals</em> (integrals or booleans), which I think is at the root of your confusion.</p>\n\n<p>Why? Because a <code>match</code> must be <em>exhaustive</em>!</p>\n\n<p><code>match</code> expressions are there so the compiler can guarantee that you handle all possibilities; checking that you handle all patterns is easy because they are under the compiler's control, checking that you handle all values is hard in the presence of custom equality operators.</p>\n\n<hr>\n\n<p>When using just a name in the match clause, you create an <em>irrefutable pattern</em>: a pattern that cannot fail, ever. In this case, the entire value being matched is bound to this name.</p>\n\n<p>You can exhibit this by adding a second match clause afterward, the compiler will warn that the latter binding is unreachable:</p>\n\n<pre><code>fn main() {\n    let x = 42;\n    match x {\n        name =&gt; println!(\"{}\", name),\n        _    =&gt; println!(\"Other\"),\n    };\n}\n\n&lt;anon&gt;:6:5: 6:6 error: unreachable pattern [E0001]\n&lt;anon&gt;:6         _    =&gt; println!(\"Other\"),\n                 ^\n</code></pre>\n\n<hr>\n\n<p>Combined with the shadowing rules, which specifically allow hiding a binding in a scope by reusing its name to bind another value, you get the example:</p>\n\n<ul>\n<li>within the <code>match</code> arm, <code>x</code> is bound to the value of <code>'c'</code></li>\n<li>after the arm, the only <code>x</code> in scope is the original one bound to the value <code>'x'</code></li>\n</ul>\n"}], "owner": {"reputation": 891, "user_id": 1307154, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4a008066c234905f35cf5a52214fc928?s=128&d=identicon&r=PG", "display_name": "Michael Plotke", "link": "https://stackoverflow.com/users/1307154/michael-plotke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 544, "favorite_count": 0, "accepted_answer_id": 35563378, "answer_count": 2, "score": 4, "last_activity_date": 1456215436, "creation_date": 1456172763, "last_edit_date": 1456173224, "question_id": 35563141, "link": "https://stackoverflow.com/questions/35563141/match-shadowing-example-in-the-patterns-section-of-the-rust-book-is-very-perplex", "title": "Match shadowing example in the Patterns section of the Rust book is very perplexing", "body": "<p>In learning Rust, I encountered the following <a href=\"https://doc.rust-lang.org\" rel=\"nofollow\">in the official Rust book</a>:</p>\n\n<blockquote>\n  <p>There\u2019s one pitfall with patterns: like anything that introduces a new\n  binding, they introduce shadowing. For example:</p>\n\n<pre><code>let x = 'x';\nlet c = 'c';\n\nmatch c {\n    x =&gt; println!(\"x: {} c: {}\", x, c),\n}\n\nprintln!(\"x: {}\", x)\n</code></pre>\n  \n  <p>This prints:</p>\n\n<pre><code>x: c c: c\nx: x\n</code></pre>\n  \n  <p>In other words, <code>x =&gt;</code> matches the pattern and introduces a new binding\n  named <code>x</code> that\u2019s in scope for the match arm. Because we already have a\n  binding named <code>x</code>, this new <code>x</code> shadows it.</p>\n</blockquote>\n\n<p>I don't understand two things:</p>\n\n<ol>\n<li>Why does the match succeed?<br>\nShouldn't the differing value of <code>c</code> and <code>x</code> cause this to fail?</li>\n<li>How does the match arm <code>x</code> binding get set to <code>'c'</code>?<br>\nIs that somehow the return of the <code>println!</code> expression?</li>\n</ol>\n"}, {"tags": ["exception", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1456214635, "post_id": 35559417, "comment_id": 58830945, "body": "Note: one can use <code>take_handler</code> first to be able to restore the original handler after recovery."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1532428187, "post_id": 35559417, "comment_id": 89960488, "body": "You generally want to install a panic handler once in the beginning of main, before starting any threads and never uninstall it. Instead the panic handler should look at a thread-local variable to decide if it should call the next handler in the chain or if it should swallow the panic silently."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 22, "last_activity_date": 1548814560, "last_edit_date": 1548814560, "creation_date": 1456160280, "answer_id": 35559417, "question_id": 35559267, "link": "https://stackoverflow.com/questions/35559267/suppress-panic-output-in-rust-when-using-paniccatch-unwind/35559417#35559417", "title": "Suppress panic output in Rust when using panic::catch_unwind", "body": "<p>You need to register a <em>panic hook</em> with <a href=\"https://doc.rust-lang.org/std/panic/fn.set_hook.html\" rel=\"noreferrer\"><code>std::panic::set_hook</code></a> that does nothing. You can then catch it with <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"noreferrer\"><code>std::panic::catch_unwind</code></a>:</p>\n\n<pre><code>use std::panic;\n\nfn main() {\n    panic::set_hook(Box::new(|_info| {\n        // do nothing\n    }));\n\n    let result = panic::catch_unwind(|| {\n        panic!(\"test panic\");\n    });\n\n    match result {\n        Ok(res) =&gt; res,\n        Err(_) =&gt; println!(\"caught panic!\"),\n    }\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/35559267/suppress-panic-output-in-rust-when-using-panicrecover#comment58830945_35559417\">Matthieu M. notes</a>, you can get the current hook with <a href=\"https://doc.rust-lang.org/std/panic/fn.take_hook.html\" rel=\"noreferrer\"><code>std::panic::take_hook</code></a> in order to restore it afterwards, if you need to.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/33151317/155423\">Redirect panics to a specified buffer</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 271, "user_id": 2217151, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9UhE.jpg?s=128&g=1", "display_name": "mzabaluev", "link": "https://stackoverflow.com/users/2217151/mzabaluev"}, "is_accepted": false, "score": 1, "last_activity_date": 1511981493, "creation_date": 1511981493, "answer_id": 47559762, "question_id": 35559267, "link": "https://stackoverflow.com/questions/35559267/suppress-panic-output-in-rust-when-using-paniccatch-unwind/47559762#47559762", "title": "Suppress panic output in Rust when using panic::catch_unwind", "body": "<p>You can use <code>std::panic::set_hook</code> to suppress the output. Note however that the hook is process-global and it will suppress reporting on <em>all</em> panics that may occur within the program.</p>\n\n<p>As already <a href=\"https://stackoverflow.com/a/47559613/2217151\">plugged</a> in my answer to a similar question, I've written a crate that provides a way to suppress the hook with composable filters, including one that works on a per-thread basis.</p>\n"}, {"tags": [], "owner": {"reputation": 14218, "user_id": 440168, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/a5b33ee3aa7798d88427679a16d7ad25?s=128&d=identicon&r=PG", "display_name": "k06a", "link": "https://stackoverflow.com/users/440168/k06a"}, "is_accepted": false, "score": 2, "last_activity_date": 1575639991, "last_edit_date": 1575639991, "creation_date": 1575628772, "answer_id": 59211505, "question_id": 35559267, "link": "https://stackoverflow.com/questions/35559267/suppress-panic-output-in-rust-when-using-paniccatch-unwind/59211505#59211505", "title": "Suppress panic output in Rust when using panic::catch_unwind", "body": "<p>Use following <code>catch_unwind_silent</code> instead of regular <code>catch_unwind</code> to achieve silence for expected exceptions:</p>\n\n<pre><code>use std::panic;\n\nfn catch_unwind_silent&lt;F: FnOnce() -&gt; R + panic::UnwindSafe, R&gt;(f: F) -&gt; std::thread::Result&lt;R&gt; {\n    let prev_hook = panic::take_hook();\n    panic::set_hook(Box::new(|_| {}));\n    let result = panic::catch_unwind(f);\n    panic::set_hook(prev_hook);\n    result\n}\n</code></pre>\n"}], "owner": {"reputation": 3669, "user_id": 4876946, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/5dc4839a7e9466d54f3791122f8f5d75?s=128&d=identicon&r=PG&f=1", "display_name": "Matt", "link": "https://stackoverflow.com/users/4876946/matt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4172, "favorite_count": 1, "accepted_answer_id": 35559417, "answer_count": 3, "score": 19, "last_activity_date": 1575639991, "creation_date": 1456159909, "last_edit_date": 1511990568, "question_id": 35559267, "link": "https://stackoverflow.com/questions/35559267/suppress-panic-output-in-rust-when-using-paniccatch-unwind", "title": "Suppress panic output in Rust when using panic::catch_unwind", "body": "<p>I'm using <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"noreferrer\"><code>panic::catch_unwind</code></a> to catch a panic:</p>\n\n<pre><code>use std::panic;\n\nfn main() {\n    let result = panic::catch_unwind(|| {\n        panic!(\"test panic\");\n    });\n\n    match result {\n        Ok(res) =&gt; res,\n        Err(_) =&gt; println!(\"caught panic!\"),\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=d92d346014ce523136554fe607cfb53d&amp;version=stable\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>This seems to work just fine, but I am still getting the output of the panic to stdout. I'd like this to only print out:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>caught panic!\n</code></pre>\n\n<p>Instead of </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread '&lt;main&gt;' panicked at 'test panic', &lt;anon&gt;:6\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\ncaught panic!\n</code></pre>\n"}, {"tags": ["rust", "code-coverage", "rust-cargo", "kcov"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1456158871, "post_id": 35547710, "comment_id": 58805971, "body": "From a quick browsing of the source, I think the answer will be &quot;no&quot;, but I&#39;ll wait to see if someone more knowledgeable can answer. However, I would question the underlying premise. Examples in documentation exist to show consumers of your code how to use it in a easily-understandable manner. They are executed and validated mostly to prevent the examples from rotting over time. I wouldn&#39;t count a doc test as actually validating any functionality of the code, thus I wouldn&#39;t include it in coverage statistics."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1456179637, "post_id": 35547710, "comment_id": 58818411, "body": "Yeah, I would interpret doctests as testing the documentation, not the code. Coverage is implicitly 100% with doctests because it&#39;s testing all the code in the documentation."}], "answers": [{"comments": [{"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1457870259, "post_id": 35669152, "comment_id": 59594047, "body": "There is. You can intercept them and copy them, but it&#39;s a pain to write."}, {"owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1457890300, "post_id": 35669152, "comment_id": 59601088, "body": "Ok, let\u2019s say no easy way :)"}], "tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": false, "score": 2, "last_activity_date": 1456572614, "creation_date": 1456572614, "answer_id": 35669152, "question_id": 35547710, "link": "https://stackoverflow.com/questions/35547710/does-rustdoc-generate-runnable-binaries/35669152#35669152", "title": "Does rustdoc generate runnable binaries?", "body": "<p>Rustdoc compiles binaries in a temporary directory and runs them immediately:</p>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/acdd3b9f5a/src/librustdoc/test.rs#L248-L292\" rel=\"nofollow\">https://github.com/rust-lang/rust/blob/acdd3b9f5a/src/librustdoc/test.rs#L248-L292</a></p>\n\n<p>I think the <code>TempDir</code> destructor removes the temporary directory and its contents when the function end. There doesn\u2019t seem to be any way to get at the binaries in order to run them in <code>kcov</code>.</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 558, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1456572614, "creation_date": 1456125069, "question_id": 35547710, "link": "https://stackoverflow.com/questions/35547710/does-rustdoc-generate-runnable-binaries", "title": "Does rustdoc generate runnable binaries?", "body": "<p>I'm trying to run <a href=\"https://github.com/SimonKagstrom/kcov\" rel=\"noreferrer\">kcov</a> on a Rust project. This works really well for usual tests, but I haven't been able to figure out how to make it find doc tests.</p>\n\n<p>Does <code>rustdoc</code> create any binaries that I can pass to <code>kcov</code> to run coverage on?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1456123974, "post_id": 35546327, "comment_id": 58783273, "body": "Yeah it&#39;s one of my favorite things about Rust... I&#39;m trying to sprinkle it everywhere I can so that it becomes more searchable."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1456162243, "post_id": 35546327, "comment_id": 58808401, "body": "May also be helpful to note whether zero sized types like this count as &quot;Sized&quot; or not. (They do, right?)"}], "tags": [], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "is_accepted": false, "score": 8, "last_activity_date": 1456166326, "last_edit_date": 1456166326, "creation_date": 1456118754, "answer_id": 35546327, "question_id": 35546288, "link": "https://stackoverflow.com/questions/35546288/what-does-mean-as-an-argument-in-a-function-where-a-parameter-of-type-t-is-ex/35546327#35546327", "title": "What does () mean as an argument in a function where a parameter of type T is expected?", "body": "<p><code>()</code> is the empty <a href=\"http://rustbyexample.com/primitives/tuples.html\" rel=\"nofollow\">tuple</a>, also called the <a href=\"https://doc.rust-lang.org/grammar.html#unit-expressions\" rel=\"nofollow\">unit type</a> -- a tuple with no member types.  It is also the only valid value of said type.  It has <a href=\"https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts\" rel=\"nofollow\">a size of zero</a> (note that it is still <code>Sized</code>, just with a size of 0), making it nonexistent at runtime. This has several useful effects, one of which is being used here.</p>\n\n<p>Here, <code>()</code> is used to create a <code>Mutex</code> with no owned data -- it's just an unlockable and lockable mutex.  If we explicitly write out the type inference with the <a href=\"https://github.com/steveklabnik/rust/commit/4f22b4d1dbaa14da92be77434d9c94035f24ca5d#diff-ced4ae040c5c8672d936a581401ef9ceR1333\" rel=\"nofollow\">turbofish operator</a> <code>::&lt;&gt;</code>, we could also write:</p>\n\n<pre><code>Mutex::&lt;()&gt;::new( () )\n</code></pre>\n\n<p>That is, we're creating a <code>new</code> <code>Mutex</code> that contains a <code>()</code> with the initial value <code>()</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1456129139, "post_id": 35546350, "comment_id": 58785741, "body": "Maybe add the notion of &quot;void&quot;? Most programmers know &quot;void&quot;, so it would help, right?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1456129364, "post_id": 35546350, "comment_id": 58785865, "body": "@LukasKalbertodt: There is a cost to <code>void</code> though, it&#39;s irregular. In C++ template programming for example <code>void</code> is a nightmare. On the other hand, <code>()</code> is perfectly integrated in the type system =&gt; it&#39;s just a tuple like any other."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1456139026, "post_id": 35546350, "comment_id": 58791931, "body": "@MatthieuM. Right, but <b>I</b> still think that it would help programmers coming from other languages to compare it with <code>void</code>..."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1456166447, "post_id": 35546350, "comment_id": 58810859, "body": "@LukasKalbertodt I updated my answer to include a discussion of <code>void</code> and how <code>()</code> differs from it."}], "tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": true, "score": 6, "last_activity_date": 1456166413, "last_edit_date": 1456166413, "creation_date": 1456118917, "answer_id": 35546350, "question_id": 35546288, "link": "https://stackoverflow.com/questions/35546288/what-does-mean-as-an-argument-in-a-function-where-a-parameter-of-type-t-is-ex/35546350#35546350", "title": "What does () mean as an argument in a function where a parameter of type T is expected?", "body": "<p><code>()</code> is simply a tuple with no values; a 0-tuple. The type and the value are spelled the same, both <code>()</code>. The type is sometimes known as the \"unit type\"; it used to actually be a distinct type in the compiler, but now is just treated as a degenerate tuple. It is a 0-sized type; objects of this type won't ever actually take up any space, though it is a <a href=\"http://doc.rust-lang.org/std/marker/trait.Sized.html\" rel=\"nofollow\"><code>Sized</code></a> type, just with a size of 0.</p>\n\n<p>It is used for cases where you need to have a value or a type, but you have nothing relevant to put there. For instance, if you have a function that doesn't return a value, and call it in a place that expects a value, you find that it actually returns the value <code>()</code> of type <code>()</code>.</p>\n\n<pre><code>fn nothing() {}\n\nfn main() {\n    println!(\"{:?}\", nothing());\n}\n</code></pre>\n\n<p>That prints <code>()</code> (<a href=\"https://play.rust-lang.org/?gist=cd99c94c951220b00e17&amp;version=stable\" rel=\"nofollow\">playpen</a>).</p>\n\n<p>Another use is when you have a generic type like <code>Result&lt;T, E&gt;</code>, which indicates a success or failure of some operation, and can hold either the the result of the successful operation, or an error indicating why it failed. Some operations, such as <a href=\"http://doc.rust-lang.org/std/io/trait.Write.html\" rel=\"nofollow\"><code>std::io::write</code></a> which have no value to return if successful but want to be able to indicate an error, will return a <a href=\"http://doc.rust-lang.org/std/io/type.Result.html\" rel=\"nofollow\"><code>std::io::Result</code></a><code>&lt;()&gt;</code>, which is actually a synonym for <a href=\"http://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow\"><code>Result</code></a><code>&lt;(), std::io::Error&gt;</code>; that allows the function to return <code>Ok(())</code> in the success case, but some meaningful error when it fails.</p>\n\n<p>You might compare it to <code>void</code> in C or C++, which are also used for a lack of return value. However, you cannot ever write an object that has type <code>void</code>, which makes <code>void</code> much less useful in generic programming; you could never have an equivalent <code>Result&lt;void, Error&gt;</code> type, because you couldn't ever construct the <code>Ok</code> case.</p>\n\n<p>In this case, a <code>Mutex</code> normally wraps and object that you want to access; so you can put that object into the mutex, and then access it from the guard that you get when you lock the mutex. However, in this example there is no actual data being guarded, so <code>()</code> is used since you need to put something in there, and <code>Mutex</code> is generic over the type so it can accept any type.</p>\n"}], "owner": {"reputation": 258, "user_id": 2115632, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/LvnuB.png?s=128&g=1", "display_name": "Aleff", "link": "https://stackoverflow.com/users/2115632/aleff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 200, "favorite_count": 0, "accepted_answer_id": 35546350, "answer_count": 2, "score": 6, "last_activity_date": 1456166413, "creation_date": 1456118472, "last_edit_date": 1456152919, "question_id": 35546288, "link": "https://stackoverflow.com/questions/35546288/what-does-mean-as-an-argument-in-a-function-where-a-parameter-of-type-t-is-ex", "title": "What does () mean as an argument in a function where a parameter of type T is expected?", "body": "<p>I am new to Rust and I was reading the <a href=\"http://doc.rust-lang.org/book/dining-philosophers.html\" rel=\"nofollow\">Dining Philosophers' tutorial</a> when I found this:</p>\n\n<pre><code>Mutex::new(())\n</code></pre>\n\n<p>I don't know what the argument inside <code>new</code> means. I read the <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html#methods\" rel=\"nofollow\">documentation for <code>Mutex</code></a> and I still have no idea what it means. I would appreciate an explanation about what is happening under the hood.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1456109550, "last_edit_date": 1456109550, "creation_date": 1456108845, "answer_id": 35544970, "question_id": 35544667, "link": "https://stackoverflow.com/questions/35544667/idiomatically-access-an-element-of-a-vector-mutably-and-immutably/35544970#35544970", "title": "Idiomatically access an element of a vector mutably and immutably", "body": "<blockquote>\n  <p>immutable reference [...] to determine how you would need to mutate the vector? </p>\n</blockquote>\n\n<p>The short answer is you don't. Any mutation to the vector could <em>possibly</em> invalidate all existing references, making any future operations access invalid data, potentially causing segfaults. Safe Rust doesn't allow for that possibility. </p>\n\n<p>Your second example creates a <strong>copy</strong> of the value in the vector, so it no longer matters what happens to the vector; that value will continue to be valid.</p>\n\n<p>What's unfortunate about the first example is that if you follow the order of operations, a human can tell that the immutable value is retrieved before the mutation happens. In fact, that's why the multiple-statement version is possible at all! This is indeed a current limitation of the Rust borrow checker. There is <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow\">investigation ongoing</a> to see if some of these types of limitations can be lifted.</p>\n"}], "owner": {"reputation": 147, "user_id": 5818746, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f98e59d175ae95cd3e0b328637b9bd41?s=128&d=identicon&r=PG&f=1", "display_name": "lochnesscookie", "link": "https://stackoverflow.com/users/5818746/lochnesscookie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 0, "accepted_answer_id": 35544970, "answer_count": 1, "score": 3, "last_activity_date": 1456109550, "creation_date": 1456106486, "last_edit_date": 1456108636, "question_id": 35544667, "link": "https://stackoverflow.com/questions/35544667/idiomatically-access-an-element-of-a-vector-mutably-and-immutably", "title": "Idiomatically access an element of a vector mutably and immutably", "body": "<p>How would you mutate a vector in such a way where you would need an immutable reference to said vector to determine how you would need to mutate the vector? For example, I have a piece of code that looks something like this, and I want to duplicate the last element of the vector:</p>\n\n<pre><code>let mut vec: Vec&lt;usize&gt; = vec![123, 42, 10];\n// Doesn't work of course:\nvec.push(*vec.last().unwrap())\n// Works, but is this necessary?\nlet x = *vec.last().unwrap();\nvec.push(x);\n</code></pre>\n"}, {"tags": ["for-loop", "while-loop", "rust", "memmove"], "comments": [{"owner": {"reputation": 409, "user_id": 5150012, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/40c29ca36d80155da6f6c16d7b1b31a7?s=128&d=identicon&r=PG&f=1", "display_name": "EpicPotato", "link": "https://stackoverflow.com/users/5150012/epicpotato"}, "edited": false, "score": 0, "creation_date": 1456097893, "post_id": 35543197, "comment_id": 58775926, "body": "I have found that for some reason the <code>for</code> loop version of this code strangely fails with a Page Fault and a General Protection Fault (I am quite new to low-level development). For now I will be using the <code>while</code> loop version because of this."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1456128660, "post_id": 35543197, "comment_id": 58785496, "body": "There is no reason for the for loop to fail if the while loop doesn&#39;t; the problem is likely elsewhere."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1456096828, "post_id": 35543251, "comment_id": 58775612, "body": "Note that <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev\" rel=\"nofollow noreferrer\"><code>rev</code></a> is only available if the iterator implements <a href=\"http://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html\" rel=\"nofollow noreferrer\"><code>DoubleEndedIterator</code></a> and <i>generally</i> that is only implemented if access to the &quot;next last&quot; element is <code>O(1)</code>."}], "tags": [], "owner": {"reputation": 27697, "user_id": 4433386, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/hbHEL.png?s=128&g=1", "display_name": "Marcus M&#252;ller", "link": "https://stackoverflow.com/users/4433386/marcus-m%c3%bcller"}, "is_accepted": false, "score": 1, "last_activity_date": 1456096742, "last_edit_date": 1456096742, "creation_date": 1456095742, "answer_id": 35543251, "question_id": 35543197, "link": "https://stackoverflow.com/questions/35543197/which-is-faster-for-reverse-iteration-for-or-while-loops/35543251#35543251", "title": "Which is faster for reverse iteration, for or while loops?", "body": "<p>For small <code>N</code>, it really shouldn't matter. </p>\n\n<p>Rust is lazy on iterators; <code>0..n</code> won't cause any evaluation until you actually <em>ask</em> for an element. <code>rev()</code> asks for the last element first. As far as I know, the Rust counter iterator is clever and doesn't need to generate the first <code>N-1</code> elements to get the <code>N</code>th one. In this specific case, the <code>rev</code> method is probably even faster.</p>\n\n<p>In the general case, it depends on what kind of access paradigm and access time your iterator has; make sure that accessing the end takes constant time, and it doesn't make a difference.</p>\n\n<p>As with all benchmarking questions, it <em>depends</em>. Test for your <code>N</code> values yourself! </p>\n\n<p>Premature optimization is also evil, so if your <code>N</code> is small, and your loop isn't done very often... don't worry.</p>\n"}, {"comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1456132332, "post_id": 35548797, "comment_id": 58787594, "body": "It&#39;s a bad example, because the compiler noticed that both functions do nothing. It would be more interesting with some nontrivial computation (maybe compute and return the sum)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1456133470, "post_id": 35548797, "comment_id": 58788332, "body": "@starblue: Actually, the compiler noticing that it does nothing is (IMHO) a perfect example =&gt; it demonstrates exactly what I wanted, that the compiler can peel away the layers of abstractions involved in the <code>(0..n)</code> iterator, its reversal, and the iteration over its reversed form in a <code>for</code> loop. The risk with abstractions (such as the <code>for</code> loop) is always that the compiler does not manage to optimize them away; this example proves that this is not the case here."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1456134096, "post_id": 35548797, "comment_id": 58788723, "body": "@starblue: Here you go, using a better blackhole that LLVM cannot inline. Of course, the results are the same since in order to optimize something out LLVM first had to reduce it to its bare components."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1456134027, "last_edit_date": 1456134027, "creation_date": 1456129172, "answer_id": 35548797, "question_id": 35543197, "link": "https://stackoverflow.com/questions/35543197/which-is-faster-for-reverse-iteration-for-or-while-loops/35548797#35548797", "title": "Which is faster for reverse iteration, for or while loops?", "body": "<p><strong>TL;DR:</strong> Use the <code>for</code> loop.</p>\n\n<hr>\n\n<p>Both should be equally fast. We can check the compiler's ability to peel away the layers of abstraction involved in the <code>for</code> loop quite simply:</p>\n\n<pre><code>#[inline(never)]\nfn blackhole() {}\n\n#[inline(never)]\nfn with_for(n: usize) {\n    for i in (0..n).rev() { blackhole(); }\n}\n\n#[inline(never)]\nfn with_while(n: usize) {\n    let mut i = n;\n    while i &gt; 0 {\n        blackhole();\n        i -= 1;\n    }\n}\n</code></pre>\n\n<p>This generates this LLVM IR:</p>\n\n<pre><code>; Function Attrs: noinline nounwind readnone uwtable\ndefine internal void @_ZN8with_for20h645c385965fcce1fhaaE(i64) unnamed_addr #0 {\nentry-block:\n  ret void\n}\n\n; Function Attrs: noinline nounwind readnone uwtable\ndefine internal void @_ZN10with_while20hc09c3331764a9434yaaE(i64) unnamed_addr #0 {\nentry-block:\n  ret void\n}\n</code></pre>\n\n<p>Even if you are not versed in LLVM, it is obvious that both functions compiled down to the same IR (and thus obviously to the same assembly).</p>\n\n<p>Since their performance is the same, one should prefer the more explicit <code>for</code> loop and reserve the <code>while</code> loop to cases where the iteration is irregular.</p>\n\n<hr>\n\n<p><em>EDIT: to address starblue's concern of unfitness.</em></p>\n\n<pre><code>#[link(name = \"snappy\")]\nextern {\n    fn blackhole(i: libc::c_int) -&gt; libc::c_int;\n}\n\n#[inline(never)]\nfn with_for(n: i32) {\n    for i in (0..n).rev() { unsafe { blackhole(i as libc::c_int); } }\n}\n\n#[inline(never)]\nfn with_while(n: i32) {\n    let mut i = n;\n    while i &gt; 0 {\n        unsafe { blackhole(i as libc::c_int); }\n        i -= 1;\n    }\n}\n</code></pre>\n\n<p>compiles down to:</p>\n\n<pre><code>; Function Attrs: noinline nounwind uwtable\ndefine internal void @_ZN8with_for20h7cf06f33e247fa35maaE(i32) unnamed_addr #1 {\nentry-block:\n  %1 = icmp sgt i32 %0, 0\n  br i1 %1, label %match_case.preheader, label %clean_ast_95_\n\nmatch_case.preheader:                             ; preds = %entry-block\n  br label %match_case\n\nmatch_case:                                       ; preds = %match_case.preheader, %match_case\n  %.in = phi i32 [ %2, %match_case ], [ %0, %match_case.preheader ]\n  %2 = add i32 %.in, -1\n  %3 = tail call i32 @blackhole(i32 %2)\n  %4 = icmp sgt i32 %2, 0\n  br i1 %4, label %match_case, label %clean_ast_95_.loopexit\n\nclean_ast_95_.loopexit:                           ; preds = %match_case\n  br label %clean_ast_95_\n\nclean_ast_95_:                                    ; preds = %clean_ast_95_.loopexit, %entry-block\n  ret void\n}\n\n; Function Attrs: noinline nounwind uwtable\ndefine internal void @_ZN10with_while20hee8edd624cfe9293IaaE(i32) unnamed_addr #1 {\nentry-block:\n  %1 = icmp sgt i32 %0, 0\n  br i1 %1, label %while_body.preheader, label %while_exit\n\nwhile_body.preheader:                             ; preds = %entry-block\n  br label %while_body\n\nwhile_exit.loopexit:                              ; preds = %while_body\n  br label %while_exit\n\nwhile_exit:                                       ; preds = %while_exit.loopexit, %entry-block\n  ret void\n\nwhile_body:                                       ; preds = %while_body.preheader, %while_body\n  %i.05 = phi i32 [ %3, %while_body ], [ %0, %while_body.preheader ]\n  %2 = tail call i32 @blackhole(i32 %i.05)\n  %3 = add nsw i32 %i.05, -1\n  %4 = icmp sgt i32 %i.05, 1\n  br i1 %4, label %while_body, label %while_exit.loopexit\n}\n</code></pre>\n\n<p>The core loops are:</p>\n\n<pre><code>; -- for loop\nmatch_case:                                       ; preds = %match_case.preheader, %match_case\n  %.in = phi i32 [ %2, %match_case ], [ %0, %match_case.preheader ]\n  %2 = add i32 %.in, -1\n  %3 = tail call i32 @blackhole(i32 %2)\n  %4 = icmp sgt i32 %2, 0\n  br i1 %4, label %match_case, label %clean_ast_95_.loopexit\n\n; -- while loop\nwhile_body:                                       ; preds = %while_body.preheader, %while_body\n  %i.05 = phi i32 [ %3, %while_body ], [ %0, %while_body.preheader ]\n  %2 = tail call i32 @blackhole(i32 %i.05)\n  %3 = add nsw i32 %i.05, -1\n  %4 = icmp sgt i32 %i.05, 1\n  br i1 %4, label %while_body, label %while_exit.loopexit\n</code></pre>\n\n<p>And the only difference is that:</p>\n\n<ul>\n<li>for decrements before calling <code>blackhole</code>, while decrements after</li>\n<li>for compares against 0, while compares against 1</li>\n</ul>\n\n<p>otherwise, it's the same core loop.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1456139471, "last_edit_date": 1456139471, "creation_date": 1456138884, "answer_id": 35551912, "question_id": 35543197, "link": "https://stackoverflow.com/questions/35543197/which-is-faster-for-reverse-iteration-for-or-while-loops/35551912#35551912", "title": "Which is faster for reverse iteration, for or while loops?", "body": "<p><strong>In short</strong>: They are (nearly) equally fast -- use the <code>for</code> loop!</p>\n\n<hr>\n\n<p><strong>Longer version</strong>:</p>\n\n<p>First: <code>rev()</code> only works for iterators that implement <a href=\"https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html\" rel=\"nofollow\"><code>DoubleEndedIterator</code></a>, which provides a <code>next_back()</code> method. This method is expected to run in <code>o(n)</code> (sublinear time), usually even <code>O(1)</code> (constant time). And indeed, by looking at the <a href=\"https://github.com/rust-lang/rust/blob/5540605cd6cf68b73bbab5eb401447d23b8c55d5/src/libcore/iter.rs#L4547-L4554\" rel=\"nofollow\">implementation of <code>next_back()</code> for <code>Range</code></a>, we can see that it runs in constant time.</p>\n\n<p>Now we know that both versions have asymptotically identical runtime. If this is the case, you should usually stop thinking about it and use the solution that is more idiomatic (which is <code>for</code> in this case). Thinking about optimization too early often decreases programming productivity, because performance matters only in a tiny percentage of all code you write.</p>\n\n<p>But since you are implementing <code>memmove</code>, performance might actually really matter to you. So lets try to look at the resulting ASM. I used this code:</p>\n\n<pre><code>#![feature(start)]\n#![feature(test)]\n\nextern crate test;\n\n#[inline(never)]\n#[no_mangle]\nfn with_for(n: usize) {\n    for i in (0..n).rev() { \n        test::black_box(i); \n    }\n}\n\n#[inline(never)]\n#[no_mangle]\nfn with_while(n: usize) {\n    let mut i = n;\n    while i &gt; 0 {\n        test::black_box(i);\n        i -= 1;\n    }\n}\n\n#[start]\nfn main(_: isize, vargs: *const *const u8) -&gt; isize {\n    let random_enough_value = unsafe {\n        **vargs as usize\n    };\n\n    with_for(random_enough_value);\n    with_while(random_enough_value);\n    0\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/Wud7se\" rel=\"nofollow\">Playground Link</a>)</p>\n\n<p>The <code>#[no_mangle]</code> is to improve readability in the resulting ASM. The <code>#inline(never)</code> and the <code>random_enough_value</code> as well as the <code>black_box</code> are used to prevent LLVM to optimize things we don't want to be optimized. The generated ASM of this (in release mode!) with some cleanup looks like:</p>\n\n<pre><code>with_for:                       |   with_while:\n    testq   %rdi, %rdi          |       testq   %rdi, %rdi\n    je  .LBB0_3                 |       je  .LBB1_3\n    decq    %rdi                |   \n    leaq    -8(%rsp), %rax      |       leaq    -8(%rsp), %rax\n.LBB0_2:                        |   .LBB1_2:\n    movq    %rdi, -8(%rsp)      |       movq    %rdi, -8(%rsp)\n    decq    %rdi                |       decq    %rdi\n    cmpq    $-1, %rdi           |       \n    jne .LBB0_2                 |       jne .LBB1_2\n.LBB0_3:                        |   .LBB1_3:\n    retq                        |       retq\n</code></pre>\n\n<p>The only difference is that <code>with_while</code> has two instructions less, because it's counting down to 0 instead of -1, like <code>with_for</code> does.</p>\n\n<p><strong>Conclusion</strong>: if you can tell that the asymptotic runtime is optimal, you should probably not think about optimization at all. Modern optimizers are clever enough to compile high level constructs down to pretty perfect ASM. Often, data layout and resulting cache efficiency is much more important than a minimal count of instructions, anyway. </p>\n\n<p>If you actually need to think about optimization though, look at the ASM (or LLVM IR). In this case the <code>for</code> loop is actually a bit slower (more instructions, comparison with -1 instead of 0). But the number of cases where a Rust programmers should care about this, is probably miniscule.</p>\n"}], "owner": {"reputation": 409, "user_id": 5150012, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/40c29ca36d80155da6f6c16d7b1b31a7?s=128&d=identicon&r=PG&f=1", "display_name": "EpicPotato", "link": "https://stackoverflow.com/users/5150012/epicpotato"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1017, "favorite_count": 1, "accepted_answer_id": 35548797, "answer_count": 3, "score": 6, "last_activity_date": 1456139471, "creation_date": 1456095355, "last_edit_date": 1456096654, "question_id": 35543197, "link": "https://stackoverflow.com/questions/35543197/which-is-faster-for-reverse-iteration-for-or-while-loops", "title": "Which is faster for reverse iteration, for or while loops?", "body": "<p>I am trying to implement the standard <code>memmove</code> function in Rust and I was wondering which method is faster for downwards iteration (where <code>src</code> &lt; <code>dest</code>):</p>\n\n<pre><code>for i in (0..n).rev() {\n    //Do copying\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>let mut i = n;\nwhile i != 0 {\n    i -= 1;\n    // Do copying\n}\n</code></pre>\n\n<p>Will the <code>rev()</code> in the <code>for</code> loops version significantly slow it down?</p>\n"}, {"tags": ["macros", "rust", "rust-cargo", "rustdoc"], "answers": [{"comments": [{"owner": {"reputation": 968, "user_id": 358641, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MHVJK.jpg?s=128&g=1", "display_name": "Mike", "link": "https://stackoverflow.com/users/358641/mike"}, "edited": false, "score": 7, "creation_date": 1499644158, "post_id": 35541620, "comment_id": 76978216, "body": "Note that if a user explicitly imports the macro (<code>#[macro_use(public)] extern crate ...</code>) they&#39;ll receive an error and also need to include <code>hidden</code>: <code>#[macro_use(public, hidden)] extern crate...</code>."}, {"owner": {"reputation": 844, "user_id": 4109776, "user_type": "registered", "accept_rate": 36, "profile_image": "https://i.stack.imgur.com/UCe3g.png?s=128&g=1", "display_name": "Benjy Wiener", "link": "https://stackoverflow.com/users/4109776/benjy-wiener"}, "edited": false, "score": 0, "creation_date": 1613570187, "post_id": 35541620, "comment_id": 117114744, "body": "I wrote an attribute macro to handle this automatically: <a href=\"https://crates.io/crates/clean-macro-docs\" rel=\"nofollow noreferrer\">crates.io/crates/clean-macro-docs</a>"}], "tags": [], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "is_accepted": true, "score": 9, "last_activity_date": 1527871938, "last_edit_date": 1527871938, "creation_date": 1456086551, "answer_id": 35541620, "question_id": 35537758, "link": "https://stackoverflow.com/questions/35537758/is-there-a-way-to-hide-a-macro-pattern-from-docs/35541620#35541620", "title": "Is there a way to hide a macro pattern from docs?", "body": "<p>I guess this is the optimum solution:</p>\n\n<pre><code>/// Not meant to be called directly\n#[doc(hidden)]\n#[macro_export]\nmacro_rules! hidden {\n    ( $hidden_rule1:expr ) =&gt; { ... };\n    ( $hidden_rule2:expr ) =&gt; { ... };\n    ...\n}\n\n#[macro_export]\nmacro_rules! public {\n    ( $public:expr ) =&gt; ( hidden!($public) );\n}\n</code></pre>\n\n<p>This uses a separate <code>hidden</code> macro (which will probably need to be public) but which is not part of the documentation. All the rules that should be hidden will be hidden and the public one will be visible in the <code>public</code> macro which is part of the documentation.</p>\n"}, {"tags": [], "owner": {"reputation": 844, "user_id": 4109776, "user_type": "registered", "accept_rate": 36, "profile_image": "https://i.stack.imgur.com/UCe3g.png?s=128&g=1", "display_name": "Benjy Wiener", "link": "https://stackoverflow.com/users/4109776/benjy-wiener"}, "is_accepted": false, "score": 1, "last_activity_date": 1613285953, "last_edit_date": 1613285953, "creation_date": 1612908009, "answer_id": 66127849, "question_id": 35537758, "link": "https://stackoverflow.com/questions/35537758/is-there-a-way-to-hide-a-macro-pattern-from-docs/66127849#66127849", "title": "Is there a way to hide a macro pattern from docs?", "body": "<p>One option is to have a dummy macro with only the public arms, and use attributes to choose which one rustdoc sees:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>/// Do a thing\n///\n/// ```\n/// # extern crate my_crate;\n/// # use my_crate::mc;\n/// assert_eq!(mc!(58), 100);\n/// ```\n#[cfg(doc)]\n#[macro_export]\nmacro_rules! mc {\n    ($arg:expr) =&gt; { ... };\n}\n\n#[cfg(not(doc))]\n#[macro_export]\nmacro_rules! mc {\n    (@impl, $arg:expr) =&gt; { 42 + $arg };\n    ($arg:expr) =&gt; { mc!(@impl, $arg) };\n}\n</code></pre>\n<p>Note: this will only work if you don't use the macro internally.</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 785, "favorite_count": 0, "accepted_answer_id": 35541620, "answer_count": 2, "score": 12, "last_activity_date": 1613285953, "creation_date": 1456067247, "last_edit_date": 1527871898, "question_id": 35537758, "link": "https://stackoverflow.com/questions/35537758/is-there-a-way-to-hide-a-macro-pattern-from-docs", "title": "Is there a way to hide a macro pattern from docs?", "body": "<p>As of Rust 1.6.0, the generated documentation hides the implementation of each macro pattern:</p>\n\n<p><a href=\"https://i.stack.imgur.com/zoq1Q.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/zoq1Q.png\" alt=\"macro implementation hidden\"></a></p>\n\n<p>Is there a way to hide some of the patterns from the Cargo-generated docs? </p>\n\n<pre><code>macro_rules! mc {\n    // hide this entire pattern\n    (@impl, $arg:expr) =&gt; { 42 + $arg };\n    // but not this one\n    ($arg:expr) =&gt; { mc!(@impl, $arg) };\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1456059641, "creation_date": 1456059641, "answer_id": 35536452, "question_id": 35536273, "link": "https://stackoverflow.com/questions/35536273/rust-macro-does-not-match-passed-types/35536452#35536452", "title": "Rust macro does not match passed types", "body": "<p>This doesn't work and cannot be made to work.</p>\n\n<p>To summarise the <a href=\"https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html\">Captures and Expansion Redux chapter of The Little Book of Rust Macros</a>: the problem is that with the exception of <code>tt</code> and <code>ident</code> captures, <code>macro_rules!</code> is completely unable to destructure or examine captured tokens.  Once you capture something as <code>ty</code>, it irrevocably becomes a black box to <code>macro_rules!</code>.</p>\n\n<p>To put it another way: <code>&amp;str</code> is not a type, as far as <code>macro_rules!</code> is concerned: it's two tokens, <code>&amp;</code> and <code>str</code>.  When you capture and then substitute <code>&amp;str</code> as <code>ty</code>, though, it becomes a single \"meta token\": the type <code>&amp;str</code>.  The two are no longer the same, and as such don't match.</p>\n\n<p>If you intend to later match against or destructure tokens, you <strong>must</strong> capture them as <code>tt</code>s or <code>ident</code>s (if possible).  In this <em>specific</em> case, you could rewrite the rule for <code>around</code> to instead be <code>($($t:tt)*) =&gt; (mrtype!($($t)*));</code>, which preserves the original token sequence.</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 634, "favorite_count": 0, "accepted_answer_id": 35536452, "answer_count": 1, "score": 5, "last_activity_date": 1456059641, "creation_date": 1456058668, "question_id": 35536273, "link": "https://stackoverflow.com/questions/35536273/rust-macro-does-not-match-passed-types", "title": "Rust macro does not match passed types", "body": "<p>Types passed directly to macros pattern match the way you would expect, but if they're passed through another macro as <code>ty</code>, they stop matching:</p>\n\n<pre><code>macro_rules! mrtype {\n    ( bool )   =&gt; (\"b\");\n    ( i32 )    =&gt; (\"i\");\n    ( f64 )    =&gt; (\"f\");\n    ( &amp;str )   =&gt; (\"z\");\n    ( $_t:ty ) =&gt; (\"o\");\n}\n\nmacro_rules! around {\n    ( $t:ty ) =&gt; (mrtype!($t));\n}\n\nfn main() {\n    println!(\"{}{}{}\", mrtype!(i32), around!(i32), around!(&amp;str));\n}\n</code></pre>\n\n<p>This prints <code>ioo</code> instead of <code>iiz</code>.</p>\n\n<p>Passing <code>tt</code>s instead of <code>ty</code>s works, but if you have <code>&amp;str</code> you need 2 <code>tt</code>s, making everything unnecessarily complicated.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1456111841, "post_id": 35536199, "comment_id": 58779383, "body": "<i>feel free to laugh at them</i> \u2014 wait, is there a time when I&#39;m <i>not</i> supposed to laugh at people using my code? ;-)"}, {"owner": {"reputation": 197, "user_id": 11041613, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/DM5ik.png?s=128&g=1", "display_name": "Dull Bananas", "link": "https://stackoverflow.com/users/11041613/dull-bananas"}, "edited": false, "score": 0, "creation_date": 1604940854, "post_id": 35536199, "comment_id": 114494460, "body": "the <code>quote</code> crate does this"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1456058157, "creation_date": 1456058157, "answer_id": 35536199, "question_id": 35536030, "link": "https://stackoverflow.com/questions/35536030/is-there-any-way-to-use-private-functions-in-public-macros-in-rust/35536199#35536199", "title": "Is there any way to use private functions in public macros in Rust?", "body": "<p>The only thing you can do is hide such \"internal\" symbols such that they do not appear in the documentation.  For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_export]\nmacro_rules! custom_abort {\n    ($($args:tt)*) =&gt; {\n        match format!($($args)*) {\n            msg =&gt; $crate::custom_abort__(&amp;msg)\n        }\n    };\n}\n\n/// This is an implementation detail and *should not* be called directly!\n#[doc(hidden)]\npub fn custom_abort__(msg: &amp;str) -&gt; ! {\n    use std::io::Write;\n    let _ = writeln!(std::io::stderr(), \"{}\", msg);\n    std::process::exit(1);\n}\n</code></pre>\n\n<p>As you might expect, this absolutely <em>does not</em> prevent someone from calling <code>custom_abort__</code> directly.  But really, if someone ignores warnings in the comments and does so anyway, feel free to laugh at them when their code breaks.</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 857, "favorite_count": 0, "accepted_answer_id": 35536199, "answer_count": 1, "score": 7, "last_activity_date": 1456058157, "creation_date": 1456057219, "question_id": 35536030, "link": "https://stackoverflow.com/questions/35536030/is-there-any-way-to-use-private-functions-in-public-macros-in-rust", "title": "Is there any way to use private functions in public macros in Rust?", "body": "<p>There is a variadic C function that I cannot call outside of a macro. This macro is public which it should be, but the C function with variadic arguments should not be visible.</p>\n\n<p>Is there any way to only make it visible for inside of the macro? Or maybe a way to keep the function outside of the docs?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455984920, "post_id": 35525505, "comment_id": 58740793, "body": "Likely duplicate of <a href=\"https://stackoverflow.com/q/30440474/155423\">stackoverflow.com/q/30440474/155423</a> or <a href=\"https://stackoverflow.com/q/31809355/155423\">stackoverflow.com/q/31809355/155423</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455984790, "post_id": 35525682, "comment_id": 58740747, "body": "Do you think this question is a duplicate of <a href=\"http://stackoverflow.com/q/30440474/155423\">stackoverflow.com/q/30440474/155423</a> or <a href=\"http://stackoverflow.com/q/31809355/155423\">stackoverflow.com/q/31809355/155423</a>?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455985449, "post_id": 35525682, "comment_id": 58740995, "body": "@Shepmaster Eh, sorta, maybe? It falls in the same general pattern of replacing trait type parameters with associated types, and the same error message crops up in the second link, but the answers are quite different (and would still be different if I went into the <i>why</i> instead of just giving code)."}, {"owner": {"reputation": 1197, "user_id": 759738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5f75361c206345c3f01e207202ce7cda?s=128&d=identicon&r=PG", "display_name": "KilyenOrs", "link": "https://stackoverflow.com/users/759738/kilyenors"}, "edited": false, "score": 0, "creation_date": 1455985785, "post_id": 35525682, "comment_id": 58741117, "body": "Thank you for your time, it is the perfect answer!"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 4, "last_activity_date": 1455984736, "creation_date": 1455984736, "answer_id": 35525682, "question_id": 35525505, "link": "https://stackoverflow.com/questions/35525505/how-to-restrict-generic-implementation-of-a-trait-in-rust/35525682#35525682", "title": "How to restrict generic implementation of a trait in Rust?", "body": "<p>I've put a complete working version of this code <a href=\"https://play.rust-lang.org/?gist=9d66c3969ed377dd9314&amp;version=stable\" rel=\"nofollow\">on the playground</a> (except that I stubbed out the random parts).</p>\n\n<p>First, I removed the <code>IndividualType</code> parameter from <code>HasVectorGenome</code>. This is simply the type for which the trait is implemented, and your definition of the trait is inconsistent about this (<code>new_from_vec</code> returns <code>IndividualType</code> but <code>get_vec</code> consumes <code>Self</code>).</p>\n\n<p>Second, I made <code>BaseType</code> an associated type, meaning that there is a single unique base type for any individual type. This is technically a restriction, but in most circumstances you don't need the flexibility and it makes the types simpler (and is in fact the primary change needed to get rid of the error you're seeing). So the trait is now:</p>\n\n<pre><code>pub trait HasVectorGenome  {\n    type BaseType;\n    fn new_from_vec(genome: Vec&lt;Self::BaseType&gt;) -&gt; Self;\n    fn get_vec(&amp;self) -&gt; Vec&lt;Self::BaseType&gt;;\n}\n</code></pre>\n\n<p>Then, I adjusted the where clause of the <code>GeneralMutator</code> implementation:</p>\n\n<pre><code>impl&lt;T&gt; Mutator&lt;T&gt; for GeneralMutator\n  where T: HasVectorGenome,\n        T::BaseType : Rand\n</code></pre>\n"}], "owner": {"reputation": 1197, "user_id": 759738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5f75361c206345c3f01e207202ce7cda?s=128&d=identicon&r=PG", "display_name": "KilyenOrs", "link": "https://stackoverflow.com/users/759738/kilyenors"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1949, "favorite_count": 0, "accepted_answer_id": 35525682, "answer_count": 1, "score": 4, "last_activity_date": 1455984736, "creation_date": 1455983648, "last_edit_date": 1455984214, "question_id": 35525505, "link": "https://stackoverflow.com/questions/35525505/how-to-restrict-generic-implementation-of-a-trait-in-rust", "title": "How to restrict generic implementation of a trait in Rust?", "body": "<p>As an excuse to learn Rust, I'm working on code for genetic algorithms, and genetic programming later. </p>\n\n<p>I declared a trait for mutation operations:</p>\n\n<pre><code>pub trait Mutator&lt;IndvidualType&gt; {\n    fn mutate(&amp;self, individual: &amp;IndvidualType) -&gt; IndvidualType;\n}\n</code></pre>\n\n<p>It is easy to implement the trait for every single <code>IndividualType</code>, but I want something more general, a trait which is common for every list (vector) type genome, something like:</p>\n\n<pre><code>pub trait HasVectorGenome&lt;IndividualType, BaseType&gt;  {\n    fn new_from_vec(genome: Vec&lt;BaseType&gt;) -&gt; IndvidualType;\n    fn get_vec(&amp;self) -&gt; Vec&lt;BaseType&gt;;\n}\n</code></pre>\n\n<p>I want to have a generic mutator which is able to mutate every <code>HasVectorGenome</code> whose <code>BaseType</code> implements <code>Rand</code> (in order to be able to generate a new random value). Something like:</p>\n\n<pre><code>struct GeneralMutator;\n\nimpl&lt;B, T&gt; Mutator&lt;T&gt; for GeneralMutator\n    where T: HasVectorGenome&lt;T, B&gt;,\n          B: Rand\n{\n    fn mutate(&amp;self, individual: &amp;T) -&gt; T {\n        let genome: Vec&lt;B&gt; = individual.get_vec();\n        genome[0] = rand::random::&lt;B&gt;();\n        T::new_from_vec(genome)\n    }\n}\n</code></pre>\n\n<p>I've got the error <code>the type parameter `B` is not constrained by the impl trait, self type, or predicates</code>, and I can't compile. I do not know how to express this correctly.</p>\n"}, {"tags": ["hashmap", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1455981004, "post_id": 35524499, "comment_id": 58739443, "body": "Please <a href=\"https://stackoverflow.com/posts/35524499/edit\">edit</a> your question to explain why it is not a duplicate of one of the <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+cannot+borrow+also+borrowed+as+immutable\"><b>many</b> questions with the same error message</a>. Otherwise, we risk repeating previous answers, making it harder for people to search for a solution and not telling you anything new!"}], "answers": [{"tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": false, "score": 2, "last_activity_date": 1456111631, "last_edit_date": 1456111631, "creation_date": 1456064637, "answer_id": 35537304, "question_id": 35524499, "link": "https://stackoverflow.com/questions/35524499/cannot-borrow-variable-as-mutable-because-it-is-also-borrowed-as-immutable-while/35537304#35537304", "title": "cannot borrow variable as mutable because it is also borrowed as immutable while building a self-referential HashMap", "body": "<h1>Answer</h1>\n\n<p>These types of structures can be hard to make in Rust. The main thing missing from your sample is the use of <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a> which allows for shared references. <code>RefCell</code>s move Rust's borrow checking from compile-time to run-time, and thus allows you to pass around the memory location. However, don't start using <code>RefCell</code> everywhere, as it is only suitable for situations like this, and <code>RefCell</code>s will cause your program to <code>panic!</code> if you attempt to mutably borrow something while it is already mutably borrowed. This will only work with <code>Node</code>s created in <code>network</code>; you won't be able to create <code>Node</code>s that exist purely inside of a single <code>Node</code>.</p>\n\n<h1><a href=\"https://is.gd/UopVrb\" rel=\"nofollow\">Solution</a></h1>\n\n<pre><code>use std::collections::HashMap;\nuse std::cell::RefCell;\n#[derive(Debug)]\nstruct Node&lt;'a&gt; {\n    byte: u8,\n    map: HashMap&lt;i32, &amp;'a RefCell&lt;Node&lt;'a&gt;&gt;&gt;,\n}\n\nfn main() {\n    let mut network = HashMap::new();\n\n    network.insert(0, RefCell::new(Node { byte: 0, map: HashMap::new() }));\n    network.insert(1, RefCell::new(Node { byte: 1, map: HashMap::new() }));\n\n    let zero_node = network.get(&amp;0).unwrap();\n    zero_node.borrow_mut().byte = 2;\n\n    let first_node = network.get(&amp;1).unwrap();\n    first_node.borrow_mut().map.insert(-1, zero_node);\n\n    println!(\"{:#?}\", network);\n}\n</code></pre>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 193, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1456111631, "creation_date": 1455977943, "last_edit_date": 1455981868, "question_id": 35524499, "link": "https://stackoverflow.com/questions/35524499/cannot-borrow-variable-as-mutable-because-it-is-also-borrowed-as-immutable-while", "title": "cannot borrow variable as mutable because it is also borrowed as immutable while building a self-referential HashMap", "body": "<p>I'm trying to build a self-referential <code>HashMap</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Node&lt;'a&gt; {\n    byte: u8,\n    map: HashMap&lt;i32, &amp;'a Node&lt;'a&gt;&gt;,\n}\n\nfn main() {\n    let mut network = HashMap::&lt;u32, Node&gt;::new();\n\n    network.insert(0, Node { byte: 0, map: HashMap::&lt;i32, &amp;Node&gt;::new() });\n    network.insert(1, Node { byte: 1, map: HashMap::&lt;i32, &amp;Node&gt;::new() });\n\n    let zeroeth_node = network.get(&amp;0).unwrap();\n    let mut first_node = network.get_mut(&amp;1).unwrap();\n\n    first_node.map.insert(-1, zeroeth_node);\n}\n</code></pre>\n\n<p>I'm running into a borrow-checker error, but I don't understand its source -- is it my method of updating the <code>HashMap</code> that is wrong, or my self-referential usage of it?</p>\n\n<p>Error:</p>\n\n<pre><code>&lt;anon&gt;:15:26: 15:33 error: cannot borrow `network` as mutable because it is also borrowed as immutable [E0502]\n&lt;anon&gt;:15     let mut first_node = network.get_mut(&amp;1).unwrap();\n                                   ^~~~~~~\n&lt;anon&gt;:14:24: 14:31 note: previous borrow of `network` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `network` until the borrow ends\n&lt;anon&gt;:14     let zeroeth_node = network.get(&amp;0).unwrap();\n                                 ^~~~~~~\n&lt;anon&gt;:18:2: 18:2 note: previous borrow ends here\n&lt;anon&gt;:8 fn main() {\n...\n&lt;anon&gt;:18 }\n          ^\n</code></pre>\n"}, {"tags": ["rust", "heap"], "answers": [{"comments": [{"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455970168, "post_id": 35522985, "comment_id": 58735746, "body": "This makes sense. I <code>Clone</code> should be enough, but I can&#39;t really wrap my head around why <code>Copy</code> can&#39;t just make one more reference until everything just runs out of scope and the <code>Rc</code> reaches 0."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 1, "creation_date": 1455970606, "post_id": 35522985, "comment_id": 58735902, "body": "@dragostis <code>Copy</code> is plain <code>memcpy</code>. It literally just copies the bits that make up the object, it <i>can&#39;t</i> do anything more fancy, and it <i>isn&#39;t intended to</i>. The C++ style &quot;copy constructors&quot; which do additional work to maintain invariants (e.g. a correct refcount) are represented by <code>Clone</code>."}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455970846, "post_id": 35522985, "comment_id": 58735979, "body": "Got it. There is one more problem: what if I have a method in the <code>State</code> that has a <code>&amp;self</code> reference but needs to pass a <code>Rc&lt;State&gt;</code>?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455971614, "post_id": 35522985, "comment_id": 58736226, "body": "@dragostis What do you mean? <code>Rc</code> implements the <code>Deref</code> trait, so <code>some_rc.normal_method()</code> <i>just works</i> (and when it&#39;s not a method, e.g. you have <code>fn foo(x: &amp;State)</code>, you can call it via <code>foo(&amp;state_rc)</code> thanks to Deref coercions)."}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455971907, "post_id": 35522985, "comment_id": 58736335, "body": "Well, if <code>Value</code> has a <code>fn new(s: Rc&lt;State&gt;)</code> and I&#39;m going to create one from a <code>fn func(&amp;self) { Value::new(???) }</code> that&#39;s defined on <code>State</code>. How is this achievable?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455972301, "post_id": 35522985, "comment_id": 58736477, "body": "@dragostis Ah, I see. This is a bit complicated. You can&#39;t just implement it on <code>&amp;self</code>, since you need access to the <code>Rc</code> to increment the refcount (and you probably don&#39;t want to crate a whole new copy of the state every time you call <code>foo</code>). I would recommend adding a method to <code>Rc&lt;State&gt;</code> but this requires an &quot;extension trait&quot; because of coherence :( The other option is to not make it a method of <code>State</code> but rather a free function or move everything you need to do in <code>foo</code> into <code>Value::new</code>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455972551, "post_id": 35522985, "comment_id": 58736554, "body": "@dragostis if <code>func()</code> is defined on <code>State</code>, it can&#39;t use <code>Value::new(Rc&lt;State&gt;)</code>, because it would need to provide it <code>Rc&lt;State&gt;</code>, but <code>func()</code> accepts <code>&amp;self</code> and therefore it only has <code>&amp;State</code>. <code>Rc</code> means shared <i>ownership</i> (so you need to pass a <i>value</i> of type <code>T</code> to create <code>Rc&lt;T&gt;</code>), but <code>&amp;</code> means shared <i>borrowing</i>. You can&#39;t get a value out of a shared (immutable) reference, so you can&#39;t create a new <code>Rc</code> in this situation."}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1455972729, "post_id": 35522985, "comment_id": 58736613, "body": "@VladimirMatveev Sure, that&#39;s fine. But how can I have that immutable reference to <code>State</code> inside <code>Value</code> without having to give up on creating <code>Value</code>s in <code>State</code> methods? A very simple solution would be to just NOT have a reference in <code>Value</code> and implement all the functions in <code>State</code>, but that way I would turn the whole thing into a god class."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 3, "last_activity_date": 1455969880, "creation_date": 1455969880, "answer_id": 35522985, "question_id": 35522675, "link": "https://stackoverflow.com/questions/35522675/what-container-should-i-use-for-multiple-immutable-references-of-a-heap-allocate/35522985#35522985", "title": "What container should I use for multiple immutable references of a heap-allocated struct?", "body": "<p>What you're asking for is basically impossible. If you have many pointers to the heap allocation floating around, you need to somehow keep track of these pointers to be able to deallocate once all these pointers are destroyed. However, that requires doing <em>something</em> whenever one of the pointer is duplicated, and/or doing <em>something</em> when the pointers are destroyed.</p>\n\n<p>Well, that's not quite true, there are two ways around this:</p>\n\n<ul>\n<li>Don't deallocate, i.e., leak memory</li>\n<li>Have a garbage collector periodically going through all memory that might contain pointers to the allocation.</li>\n</ul>\n\n<p>But the first is impractical in most contexts (and quite dirty even when you can afford it), and the second has other costs and far-reaching consequences and is not really well supported in current Rust anyway.</p>\n\n<p>The only sane thing is to drop the <code>Copy</code> requirement. Perhaps you're confusing <code>Copy</code> with <code>Clone</code>? The primary difference between the two is that you have to call <code>clone()</code> explicitly while <code>Copy</code> works implicitly. <code>Rc&lt;anything&gt;</code> is <code>Clone</code> and cloning the reference counted pointer will only increment the refcount, not clone the thing behind the pointer. (And in this case you almost certainly can and should get rid of the <code>Box</code>, since <code>Rc&lt;T&gt;</code> already allocates the <code>T</code> on the heap, so the <code>Box</code> is just a pointless additional indirection.)</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 191, "favorite_count": 0, "accepted_answer_id": 35522985, "answer_count": 1, "score": 2, "last_activity_date": 1455969880, "creation_date": 1455968242, "last_edit_date": 1455968612, "question_id": 35522675, "link": "https://stackoverflow.com/questions/35522675/what-container-should-i-use-for-multiple-immutable-references-of-a-heap-allocate", "title": "What container should I use for multiple immutable references of a heap-allocated struct?", "body": "<p>Basically I have a heap-allocated <code>struct</code> <code>Box&lt;State&gt;</code>. I have multiple <code>Value</code> <code>struct</code>s that need to have an immutable reference to this heap-allocated <code>struct</code>.</p>\n\n<p>What kind of attribute can I use inside of <code>Value</code> for this reference? Using <code>Rc&lt;Box&lt;State&gt;&gt;</code> does not work because I need <code>Value</code> to implement <code>Copy</code> and <code>State</code> does not implement <code>Copy</code>. When it needs to copy itself, I just want to copy the pointer to that heap-allocated <code>State</code>.</p>\n"}, {"tags": ["pointers", "rust", "lifetime"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1455967864, "post_id": 35521601, "comment_id": 58735030, "body": "It&#39;s unclear to me what exactly the problem here is. Do you want to make a new heap allocation and copy the data there, so that <code>Foo</code> is self-contained? That would be easy, if you weren&#39;t using <code>no_std</code>. So why are you doing that? Does your target platform even <i>have</i> a heap? And if so, why are you using <code>no_std</code>? Please explain <i>what</i> you want to achieve, not <i>how</i> you want to achieve it, to prevent falling into the <a href=\"http://meta.stackexchange.com/q/66377\">XY problem</a>."}], "answers": [{"comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1456009546, "post_id": 35521863, "comment_id": 58749878, "body": "I could do like you said and allow the caller to specify the lifetime by passing a <code>&amp;mut Foo</code>. That would work fine for me, although now I need to figure out how to clone either a <code>Foo</code> or a slice."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1455978231, "last_edit_date": 1455978231, "creation_date": 1455963763, "answer_id": 35521863, "question_id": 35521601, "link": "https://stackoverflow.com/questions/35521601/prevent-drop-until-pointer-is-dropped-with-no-std/35521863#35521863", "title": "Prevent drop until pointer is dropped with no_std", "body": "<p><strong>You don't.</strong></p>\n\n<p>You're trying to escape a pointer to stack data, which is something Rust would forbid you from doing if you were using regular borrowed pointers.  However, by using raw pointers and <code>unsafe</code>, you've effectively stripped off the various protections the compiler would normally enforce.</p>\n\n<p>You really, <em>really</em> shouldn't be using <code>unsafe</code> unless you understand what's happening.</p>\n\n<p>You also cannot extend the lifetime of something created within a function without moving it out.  There is simply <em>no way</em> of passing out a pointer (or a borrow) of <code>x</code>.</p>\n\n<p>The fix for this is to just <em>not</em> do it in the first place.  Use borrowed pointers (<code>&amp;i32</code> or <code>&amp;[i32]</code>) or owned values (<code>i32</code>, <code>Vec&lt;i32&gt;</code>).</p>\n\n<p>Another possibility would be to allocate the necessary storage in the <em>caller</em> and pass a <code>&amp;mut</code> into <code>foo</code>, which you can then slice, mutate, and return a borrowed sub-slice to.  That, of course, requires that you can statically define an upper-bound on how much space <code>foo</code> will need, but such is life without <code>std</code>.</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 240, "favorite_count": 0, "accepted_answer_id": 35521863, "answer_count": 1, "score": 1, "last_activity_date": 1455978231, "creation_date": 1455962032, "question_id": 35521601, "link": "https://stackoverflow.com/questions/35521601/prevent-drop-until-pointer-is-dropped-with-no-std", "title": "Prevent drop until pointer is dropped with no_std", "body": "<p>I have a struct that stores a raw pointer to some data:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    x: *const T\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    fn new(x: &amp;[T]) -&gt; Foo&lt;T&gt; {\n        Foo {\n            x: &amp;x[0] as *const T\n        }\n    }\n}\n</code></pre>\n\n<p>The data is actually a slice, but I use the offset method to avoid directly storing the data. The constructor puts the a pointer to the data into the field, and returns the struct. However, if I try to return a <code>Foo</code> from a function:</p>\n\n<pre><code>fn foo() -&gt; Foo&lt;i32&gt; {\n    let x = [1, 2, 3];\n    Foo::new(&amp;x)\n}\n\nfn main() {\n    unsafe {\n        println!(\"{}\", &amp;*foo().x);\n    }\n}\n</code></pre>\n\n<p>The data is dropped too early, and the field <code>x</code> points to garbage. What I want to have happen is the data <code>x</code> points to is cloned, and the clone lives for as long as the struct does. How can I accomplish this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1455943224, "creation_date": 1455943224, "answer_id": 35519192, "question_id": 35518851, "link": "https://stackoverflow.com/questions/35518851/iterating-over-a-multidimensional-btreemap/35519192#35519192", "title": "Iterating over a multidimensional BTreeMap", "body": "<p>The core issue is that a <a href=\"http://alexcrichton.com/toml-rs/toml/enum.Value.html\" rel=\"nofollow\"><code>toml::Value</code></a> is a <em>single value</em>. Thus, it doesn't make sense to iterate over it. That would be akin to iterating over a boolean.</p>\n\n<p>A <code>Value</code> is an <a href=\"http://doc.rust-lang.org/stable/book/enums.html\" rel=\"nofollow\">enum</a>, which is a data type that can represent one of a fixed set of choices. in this case, it could be something like a <code>String</code> or a <code>Float</code> or a <code>Table</code>. Your example code shows that you have the <code>Table</code> variant. The <code>Value::Table</code> variant has a <a href=\"http://alexcrichton.com/toml-rs/toml/type.Table.html\" rel=\"nofollow\"><code>toml::Table</code></a> struct as the sole member. This type is just another <code>BTreeMap</code>.</p>\n\n<p>You have prove to the compiler that you are able of handling the specific variant that you care about. Usually, this is done with a <code>match</code> or an <code>if let</code> statement. Once you verify that the variant is one you care about, you can continue to poke into the nested values:</p>\n\n<pre><code>extern crate toml;\n\nuse toml::{Parser, Value};\n\nfn main() {\n    let config_string = r#\"config = { option = \"?\" }\"#;\n    let parsed = Parser::new(config_string).parse().unwrap();\n\n    for (key, value) in parsed {\n        println!(\"{:?}, {:?}\", key, value);\n\n        if let Value::Table(t) = value {\n            for (key, value) in t {\n                println!(\"{:?}, {:?}\", key, value);\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1072, "user_id": 2840647, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bbc7740efb4b280be4485f2f7c6c5742?s=128&d=identicon&r=PG&f=1", "display_name": "user2840647", "link": "https://stackoverflow.com/users/2840647/user2840647"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 530, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1455943224, "creation_date": 1455939744, "last_edit_date": 1455942632, "question_id": 35518851, "link": "https://stackoverflow.com/questions/35518851/iterating-over-a-multidimensional-btreemap", "title": "Iterating over a multidimensional BTreeMap", "body": "<p>I am using the <a href=\"https://crates.io/crates/toml\" rel=\"nofollow\"><code>toml</code></a> crate  to parse a <code>.toml</code> file which looks like this:</p>\n\n<pre><code>config = { option = \"?\" }\n\n\narray = [\n    { key1 = value1, key2 = value2, key3 = value3, key4 = value4 },\n    { key1 = value1, key2 = value2, key3 = value3, key4 = value4 }\n]\n</code></pre>\n\n<p>I have a <code>parser.rs</code> file which contains:</p>\n\n<pre><code>extern crate toml;\n\nuse std::collections::BTreeMap;\nuse std::fs::File;\nuse std::io::Read;\n\n#[derive(Debug)]\npub struct ConfigParser&lt;'a&gt; {\n    pub file: &amp;'a str\n}\n\nimpl&lt;'a&gt; ConfigParser&lt;'a&gt; {\n    pub fn new(file: &amp;'a str) -&gt; ConfigParser {\n        ConfigParser { file: file }\n    }\n\n    pub fn parse(&amp;self) -&gt; Option&lt;BTreeMap&lt;String, toml::Value&gt;&gt; {\n        let mut config_string = String::new();\n        File::open(self.file).and_then(|mut f| {\n            f.read_to_string(&amp;mut config_string)\n        }).unwrap();\n\n        return toml::Parser::new(&amp;config_string).parse();\n    }\n}\n</code></pre>\n\n<p>and use it in my <code>main.rs</code> file like so:</p>\n\n<pre><code>extern crate toml;\nmod parser;\n\nfn main() {\n    let config = parser::ConfigParser::new(\"config.toml\").parse().unwrap();\n    println!(\"{:?}\", config)\n}\n</code></pre>\n\n<p>which prints:</p>\n\n<pre><code>{\"config\": Table({\"option\": String(\"?\")})\n</code></pre>\n\n<p>I tried iterating over the <code>config</code> like so:</p>\n\n<pre><code>for (key, value) in config {\n    println!(\"{:?} {:?}\", key, value)\n}\n</code></pre>\n\n<p>which will produce:</p>\n\n<pre><code>\"config\" Table({\"option\": String(\"?\")})\n</code></pre>\n\n<p>but this:</p>\n\n<pre><code>for (key, value) in config {\n    for v in value {\n        println!(\"{:?}\", v)\n    }\n}\n</code></pre>\n\n<p>throws this error:</p>\n\n<pre><code>the trait `core::iter::Iterator` is not implemented for the type `toml::Value`\n</code></pre>\n"}, {"tags": ["iterator", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455941600, "post_id": 35517514, "comment_id": 58728317, "body": "Your code is really, <i>really</i> large. Please take some time to produce an <a href=\"/help/mcve\">MCVE</a>, emphasis on the <b>M</b>. Delete all methods that don&#39;t directly contribute to the error, replace function bodies with <code>unimplemented!</code>, remove parameters, struct members, enum variants. Combine all your code into <i>one</i> file. Ideally, produce an example that reproduces your code on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Playground</a>. Taking the time to produce a clear example will help you understand where the problem occurs and makes it more likely that you will get a helpful answer."}, {"owner": {"reputation": 119, "user_id": 1849963, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/2ff3a8bebdb18071a3a56d6202075e03?s=128&d=identicon&r=PG", "display_name": "robbepop", "link": "https://stackoverflow.com/users/1849963/robbepop"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455942097, "post_id": 35517514, "comment_id": 58728402, "body": "Thank you for the reformatting! I have found a solution to my problem with the help of a friend and I am going to update the initial post with the solution. ;) However, sometime - as in this case - the errors are everywhere in the code, even in methods where you wouldn&#39;t expect them."}, {"owner": {"reputation": 119, "user_id": 1849963, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/2ff3a8bebdb18071a3a56d6202075e03?s=128&d=identicon&r=PG", "display_name": "robbepop", "link": "https://stackoverflow.com/users/1849963/robbepop"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455943771, "post_id": 35517514, "comment_id": 58728745, "body": "Done! ;) Hope, everything is okay with that answer."}], "answers": [{"tags": [], "owner": {"reputation": 119, "user_id": 1849963, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/2ff3a8bebdb18071a3a56d6202075e03?s=128&d=identicon&r=PG", "display_name": "robbepop", "link": "https://stackoverflow.com/users/1849963/robbepop"}, "is_accepted": false, "score": 3, "last_activity_date": 1455943833, "last_edit_date": 1455943833, "creation_date": 1455943680, "answer_id": 35519236, "question_id": 35517514, "link": "https://stackoverflow.com/questions/35517514/error-cannot-infer-an-appropriate-lifetime-for-autoref-due-to-conflicting-requi/35519236#35519236", "title": "error: cannot infer an appropriate lifetime for autoref due to conflicting requirements [E0495]", "body": "<p>I found a solution to my problems and now everything compiles fine.</p>\n\n<p>The problem was in fact a lifetime problem but not only within the <code>TokenStream</code> trait. I had lifetime issues in several places across the entire code.</p>\n\n<p>Some notable places from the long code in the initial post:</p>\n\n<p>lexer.rs: line 46 - 58</p>\n\n<pre><code>fn scan_line_comment&lt;'b&gt;(&amp;self) -&gt; Token&lt;'b&gt; { Token::EndOfFile }\nfn scan_multi_line_comment&lt;'b&gt;(&amp;self) -&gt; Token&lt;'b&gt; { Token::EndOfFile }\n\n\nfn scan_identifier&lt;'b&gt;(&amp;self) -&gt; Token&lt;'b&gt; { Token::EndOfFile }\nfn scan_char_literal&lt;'b&gt;(&amp;self) -&gt; Token&lt;'b&gt; { Token::EndOfFile }\nfn scan_string_literal&lt;'b&gt;(&amp;self) -&gt; Token&lt;'b&gt; { Token::EndOfFile }\nfn scan_number_literal&lt;'b&gt;(&amp;self) -&gt; Token&lt;'b&gt; { Token::EndOfFile }\n\nfn consume_and_return&lt;'b&gt;(&amp;mut self, token: Token&lt;'b&gt;) -&gt; Token&lt;'b&gt; {\n    self.consume_next();\n    token\n}\n</code></pre>\n\n<p>I had to insert the lifetime <code>'b</code> to specify that the <code>Token</code> may outlive the <code>Lexer</code> instance.</p>\n\n<p>The <code>TokenStream</code> required a new lifetime parameter so that it can specify that extended lifetime as well:</p>\n\n<pre><code>pub trait TokenStream&lt;'a&gt; {\n    fn next_token(&amp;mut self) -&gt; Token&lt;'a&gt;;\n}\n</code></pre>\n\n<p>The <code>TokenStream</code> implementation for <code>Lexer</code> had to be adjusted for this change:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; TokenStream&lt;'b&gt; for Lexer&lt;'a&gt; {\n    fn next_token(&amp;mut self) -&gt; Token&lt;'b&gt; {\n        ...\n    }\n    ...\n}\n</code></pre>\n\n<p>As well as the <code>Iterator</code> implementation for <code>Lexer</code></p>\n\n<pre><code>impl&lt;'a&gt; Iterator for Lexer&lt;'a&gt; {\n    type Item = Token&lt;'a&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let token = self.next_token();\n        match token {\n            Token::EndOfFile =&gt; None,\n            _                =&gt; Some(token)\n        }\n    }\n}\n</code></pre>\n\n<p>That's it!</p>\n"}], "owner": {"reputation": 119, "user_id": 1849963, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/2ff3a8bebdb18071a3a56d6202075e03?s=128&d=identicon&r=PG", "display_name": "robbepop", "link": "https://stackoverflow.com/users/1849963/robbepop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1370, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1455943833, "creation_date": 1455927905, "last_edit_date": 1495541299, "question_id": 35517514, "link": "https://stackoverflow.com/questions/35517514/error-cannot-infer-an-appropriate-lifetime-for-autoref-due-to-conflicting-requi", "title": "error: cannot infer an appropriate lifetime for autoref due to conflicting requirements [E0495]", "body": "<p>First of all: I am fully aware of this post: <a href=\"https://stackoverflow.com/questions/30868665/cannot-infer-appropriate-lifetime-for-autoderef-in-iterator-impl\">Cannot infer appropriate lifetime for autoref in Iterator impl</a>\nand that the problem is probably similar to mine.\nHowever, I can't get it working with the knowledge of this thread.</p>\n\n<p>The code:</p>\n\n<pre><code>use std::str::Chars;\n\nuse super::token::*;\nuse super::token_stream::TokenStream;\n\npub struct Lexer&lt;'a&gt; {\n    input: Chars&lt;'a&gt;,\n    buffer: String,\n    cur_char: char\n}\n\nimpl&lt;'a&gt; Lexer&lt;'a&gt; {\n    pub fn new(iterator: Chars&lt;'a&gt;) -&gt; Lexer {\n        let mut lexer = Lexer {\n            input: iterator,\n            buffer: String::new(),\n            cur_char: '\\0' };\n        lexer.consume_next();\n        lexer\n    }\n\n    pub fn new_from_str(content : &amp;str) -&gt; Lexer {\n        Lexer::new(content.chars())\n    }\n\n    fn consume_next(&amp;mut self) -&gt; char {\n        let next = self.input.next();\n        if let Some(c) = next {\n            self.buffer.push(c);\n            self.cur_char = c;\n        }\n        else {\n            self.cur_char = '\\0';\n        }\n        self.current_char()\n    }\n\n    fn clear_buffer(&amp;mut self) {\n        self.buffer.clear();\n    }\n\n    fn current_char(&amp;self) -&gt; char {\n        self.cur_char\n    }\n\n    fn scan_line_comment(&amp;self) -&gt; Token { Token::EndOfFile }\n    fn scan_multi_line_comment(&amp;self) -&gt; Token { Token::EndOfFile }\n\n\n    fn scan_identifier(&amp;self) -&gt; Token { Token::EndOfFile }\n    fn scan_char_literal(&amp;self) -&gt; Token { Token::EndOfFile }\n    fn scan_string_literal(&amp;self) -&gt; Token { Token::EndOfFile }\n    fn scan_number_literal(&amp;self) -&gt; Token { Token::EndOfFile }\n\n    fn consume_and_return&lt;'b&gt;(&amp;mut self, token: Token&lt;'b&gt;) -&gt; Token&lt;'b&gt; {\n        self.consume_next();\n        token\n    }\n}\n\nimpl&lt;'a&gt; TokenStream for Lexer&lt;'a&gt; {\n    fn next_token(&amp;mut self) -&gt; Token {\n        match self.current_char() {\n            /* Skip whitespace */\n            ' '  |\n            '\\r' |\n            '\\n' |\n            '\\t' =&gt; {\n                self.clear_buffer();\n                self.consume_and_return(Token::Whitespace)\n            }\n\n            /* Opening delimiters */\n            '(' =&gt; self.consume_and_return(Token::OpenDelim(DelimitToken::Paren)),\n            '[' =&gt; self.consume_and_return(Token::OpenDelim(DelimitToken::Bracket)),\n            '{' =&gt; self.consume_and_return(Token::OpenDelim(DelimitToken::Brace)),\n\n            /* Opening delimiters */\n            ')' =&gt; self.consume_and_return(Token::CloseDelim(DelimitToken::Paren)),\n            ']' =&gt; self.consume_and_return(Token::CloseDelim(DelimitToken::Bracket)),\n            '}' =&gt; self.consume_and_return(Token::CloseDelim(DelimitToken::Brace)),\n\n            /* Special tokens which aren't the beginning\n               of any other token */\n            '?' =&gt; self.consume_and_return(Token::Question),\n            ';' =&gt; self.consume_and_return(Token::SemiColon),\n            ',' =&gt; self.consume_and_return(Token::Comma),\n\n            /* Dot, DotDot and DotDotDot tokens */\n            '.' =&gt; match self.consume_next() {\n                '.' =&gt; match self.consume_next() {\n                    '.' =&gt; self.consume_and_return(Token::DotDotDot),\n                    _   =&gt; Token::DotDot\n                },\n                _ =&gt; Token::Dot\n            },\n\n            /* Tokens starting with '+' */\n            '+' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Plus)),\n                _   =&gt; Token::BinOp(BinOpToken::Plus)\n            },\n\n            /* Tokens starting with '-' */\n            '-' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Minus)),\n                '&gt;' =&gt; self.consume_and_return(Token::Arrow),\n                _   =&gt; Token::BinOp(BinOpToken::Minus)\n            },\n\n            /* Tokens starting with '*' */\n            '*' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Star)),\n                _   =&gt; return Token::BinOp(BinOpToken::Star)\n            },\n\n            /* Tokens starting with '/' */\n            '/' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Slash)),\n                '/' =&gt; self.scan_line_comment(),\n                '*' =&gt; self.scan_multi_line_comment(),\n                _ =&gt; Token::BinOp(BinOpToken::Slash)\n            },\n\n            /* Tokens starting with '%' */\n            '%' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Percent)),\n                _   =&gt; Token::BinOp(BinOpToken::Percent)\n            },\n\n            /* Tokens starting with '^' */\n            '^' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Caret)),\n                _   =&gt; return Token::BinOp(BinOpToken::Caret)\n            },\n\n            /* Tokens starting with '!' */\n            '!' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::RelOp(RelOpToken::NotEq)),\n                _   =&gt; Token::Exclamation\n            },\n\n            /* Tokens starting with '=' */\n            '=' =&gt; match self.consume_next() {\n                '=' =&gt; self.consume_and_return(Token::RelOp(RelOpToken::EqEq)),\n                _   =&gt; Token::Eq\n            },\n\n            /* Tokens starting with '&amp;' */\n            '&amp;' =&gt; match self.consume_next() {\n                '&amp;' =&gt; self.consume_and_return(Token::LogicalOp(LogicalOpToken::AndAnd)),\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::And)),\n                _   =&gt; Token::BinOp(BinOpToken::And)\n            },\n\n            /* Tokens starting with '|' */\n            '|' =&gt; match self.consume_next() {\n                '|' =&gt; self.consume_and_return(Token::LogicalOp(LogicalOpToken::OrOr)),\n                '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Or)),\n                _   =&gt; Token::BinOp(BinOpToken::Or)\n            },\n\n            /* Tokens starting with '&lt;' */\n            '&lt;' =&gt; match self.consume_next() {\n                '&lt;' =&gt; match self.consume_next() {\n                    '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Shl)),\n                    _   =&gt; Token::BinOp(BinOpToken::Shl)\n                },\n                '=' =&gt; self.consume_and_return(Token::RelOp(RelOpToken::LessEq)),\n                _   =&gt; Token::RelOp(RelOpToken::LessThan)\n            },\n\n            /* Tokens starting with '&gt;' */\n            '&gt;' =&gt; match self.consume_next() {\n                '&gt;' =&gt; match self.consume_next() {\n                    '=' =&gt; self.consume_and_return(Token::BinOpEq(BinOpToken::Shr)),\n                    _   =&gt; Token::BinOp(BinOpToken::Shr)\n                },\n                '=' =&gt; self.consume_and_return(Token::RelOp(RelOpToken::GreaterEq)),\n                _   =&gt; Token::RelOp(RelOpToken::GreaterThan)\n            },\n\n            /* Char and string literals */\n            '\\'' =&gt; self.scan_char_literal(),\n            '\\\"' =&gt; self.scan_string_literal(),\n\n            /* Integer- and float literals and identifiers */\n            '0' ... '9' =&gt; self.scan_number_literal(),\n            'a' ... 'z' |\n            'A' ... 'Z' =&gt; self.scan_identifier(),\n\n            /* When end of iterator has been reached */\n            _ =&gt; Token::EndOfFile\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for Lexer&lt;'a&gt; {\n    type Item = Token&lt;'a&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let token = self.next_token();\n        match token {\n            Token::EndOfFile =&gt; None,\n            _                =&gt; Some(token)\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use super::super::token::*;\n    use super::super::token_stream::TokenStream;\n\n    #[test]\n    fn simple_tokens() {\n        let solution = [\n            Token::OpenDelim(DelimitToken::Paren),\n            Token::CloseDelim(DelimitToken::Paren),\n\n            Token::OpenDelim(DelimitToken::Bracket),\n            Token::CloseDelim(DelimitToken::Bracket),\n\n            Token::OpenDelim(DelimitToken::Brace),\n            Token::CloseDelim(DelimitToken::Brace),\n\n            Token::Question,\n            Token::SemiColon,\n            Token::Comma,\n\n            Token::EndOfFile\n        ];\n        let mut lexer = Lexer::new_from_str(\"()[]{}?;,\");\n        for expected in &amp;solution {\n            assert_eq!(lexer.next_token(), *expected);\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b19c6d0a1174519cd2c4&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>And its dependent module 'Token':</p>\n\n<pre><code>#[derive(Clone, PartialEq, Eq, Hash, Debug, Copy)]\npub enum BinOpToken {\n    Plus,    // +\n    Minus,   // -\n    Star,    // *\n    Slash,   // /\n    Percent, // %\n    Caret,   // ^\n    And,     // &amp;\n    Or,      // |\n    Shl,     // &lt;&lt;\n    Shr      // &gt;&gt;\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug, Copy)]\npub enum RelOpToken {\n    EqEq,        // ==\n    NotEq,       // !=\n    LessThan,    // &lt;\n    LessEq,      // &lt;=\n    GreaterThan, // &gt;\n    GreaterEq    // &gt;=\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug, Copy)]\npub enum LogicalOpToken {\n    AndAnd, // &amp;&amp;\n    OrOr    // ||\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug, Copy)]\npub enum DelimitToken {\n    Paren,   // ( or )\n    Bracket, // [ or ]\n    Brace,   // { or }\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug, Copy)]\npub enum LiteralToken&lt;'a&gt; {\n    Char(&amp;'a str),    // e.g. 'a'\n    Integer(&amp;'a str), // e.g. 5, 42, 1337, 0\n    Float(&amp;'a str),   // e.g. 0.1, 5.0, 13.37, 0.0\n    String(&amp;'a str)   // e.g. \"Hello, World!\"\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug, Copy)]\npub enum Token&lt;'a&gt; {\n    /* Logical operators, e.g. &amp;&amp; or || */\n    LogicalOp(LogicalOpToken),\n    /* Binary operators compatible with assignment, e.g. +, - */\n    BinOp(BinOpToken),\n    /* Binary assignment operators, e.g. +=, -= */\n    BinOpEq(BinOpToken),\n    /* Relational operators, e.g. &lt;, &lt;=, &gt;, &gt;=, ==, != */\n    RelOp(RelOpToken),\n\n    /* An opening delimiter, e.g. { or ( or [ */\n    OpenDelim(DelimitToken),\n\n    /* A closing delimiter, e.g. } or ) or ] */\n    CloseDelim(DelimitToken),\n\n    /* Identifiers with their given name */\n    Identifier(&amp;'a str),\n    /* Literal token, e.g. an integer, float or string literal */\n    Literal(LiteralToken&lt;'a&gt;),\n\n    /* Special tokens */\n    Eq,          // =\n    Colon,       // :\n    SemiColon,   // ;\n    ColonColon,  // ::\n    Dot,         // .\n    DotDot,      // ..\n    DotDotDot,   // ...\n    Comma,       // ,\n    Exclamation, // !\n    Question,    // ?\n    Arrow,       // -&gt;\n    FatArrow,    // =&gt;\n\n    /* Junk tokens which the parser doesn't require in order to parse the program. */\n    Whitespace,\n    Comment,\n\n    /* End of file (EOF) token indicating the end of stream for parsing */\n    EndOfFile\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b06bb97b5f97a8bd2d03&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>As well as the trait 'TokenStream':</p>\n\n<pre><code>pub use super::token::Token;\n\npub trait TokenStream {\n    fn next_token(&amp;mut self) -&gt; Token;\n}\n</code></pre>\n\n<p>I am getting the following error:</p>\n\n<pre><code>src/parser/lexer.rs:202:20: 202:32 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements [E0495]\nsrc/parser/lexer.rs:202         let token = self.next_token();\n                                                 ^~~~~~~~~~~~\n</code></pre>\n\n<p>I guess that it is a lifetime problem. My <code>next_token()</code> method returns a <code>Token</code> that has a lifetime independent of <code>Self</code>, however I am not sure if I did the annotation right.</p>\n\n<p>I also tried to do some more annotation for the <code>next()</code> method in <code>Iterator</code> but it all failed ...</p>\n\n<p>I get this error when I add a lifetime to the <code>&amp;mut self</code> parameter of the <code>next()</code> method in the implementation of the <code>Iterator</code> trait:</p>\n\n<pre><code>src/parser/lexer.rs:201:2: 207:3 error: method `next` has an incompatible type for trait:\n expected bound lifetime parameter ,\n    found concrete lifetime [E0053]\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1557773932, "last_edit_date": 1557773932, "creation_date": 1455910873, "answer_id": 35513621, "question_id": 35513318, "link": "https://stackoverflow.com/questions/35513318/can-rust-macros-create-compile-time-strings/35513621#35513621", "title": "Can Rust macros create compile-time strings?", "body": "<p>It sounds like you want <a href=\"http://doc.rust-lang.org/std/macro.stringify!.html\" rel=\"noreferrer\"><code>stringify!</code></a>:</p>\n\n<pre><code>macro_rules! some {\n    ( $var:expr ) =&gt; ( stringify!($var) );\n}\n\nfn main() {\n    let s = some!(1);\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>And you will probably want <a href=\"http://doc.rust-lang.org/std/macro.concat!.html\" rel=\"noreferrer\"><code>concat!</code></a> too.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32956050/155423\">How to create a static string at compile time</a></li>\n</ul>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4945, "favorite_count": 0, "accepted_answer_id": 35513621, "answer_count": 1, "score": 10, "last_activity_date": 1557773932, "creation_date": 1455909708, "last_edit_date": 1455910742, "question_id": 35513318, "link": "https://stackoverflow.com/questions/35513318/can-rust-macros-create-compile-time-strings", "title": "Can Rust macros create compile-time strings?", "body": "<p>Macro variables are escaped in Rust macros by default. Is there any way to have them not escaped?</p>\n\n<pre><code>macro_rules! some {\n    ( $var:expr ) =&gt; ( \"$var\" );\n}\n\nsome!(1) // returns \"$var\", not \"1\"\n</code></pre>\n\n<p>This is useful for concatenating compile-time strings and such.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "edited": false, "score": 0, "creation_date": 1455912169, "post_id": 35513561, "comment_id": 58718634, "body": "Nice! But personally, I always forget that there are methods like <code>by_ref</code>, <code>as_mut</code> and such which do all that Rust magic."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "edited": false, "score": 2, "creation_date": 1455949364, "post_id": 35513561, "comment_id": 58730017, "body": "@franza, also <code>take_while(|_| true)</code> is unnecessary, you can just as well call <code>collect()</code> directly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1455912002, "last_edit_date": 1495542224, "creation_date": 1455910673, "answer_id": 35513561, "question_id": 35513290, "link": "https://stackoverflow.com/questions/35513290/consume-parts-of-a-string-while-iterating-over-it/35513561#35513561", "title": "Consume parts of a string while iterating over it", "body": "<p>It's probably simplest to just <code>split</code> the string on the delimiters:</p>\n\n<pre><code>fn main() {\n    let s = \"prefix,body1:body2\";\n    let parts: Vec&lt;_&gt; = s.split(|c| c == ',' || c == ':').collect();\n    println!(\"{:?}\", parts);\n}\n</code></pre>\n\n<p>However, if you want to use the iterators, you can avoid consuming the <code>Chars</code> iterator by taking a mutable reference to it with <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>Iterator::by_ref</code></a>:</p>\n\n<pre><code>let str = \"prefix,body1:body2\";\nlet mut chars = str.chars();\nlet prefix: String = chars.by_ref().take_while(|&amp;c| c != ',').collect();\nlet body1: String = chars.by_ref().take_while(|&amp;c| c != ':').collect();\nlet body2: String = chars.take_while(|_| true).collect();\n</code></pre>\n\n<p>For more info on <code>by_ref</code>, see:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31374051/155423\">Why does Iterator::take_while take ownership of the iterator?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28776630/155423\">Implementing a &quot;cautious&quot; take_while using Peekable</a>.</li>\n</ul>\n"}], "owner": {"reputation": 2106, "user_id": 916384, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/38055799f271a72b7d50d91c322ce561?s=128&d=identicon&r=PG", "display_name": "franza", "link": "https://stackoverflow.com/users/916384/franza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 595, "favorite_count": 0, "accepted_answer_id": 35513561, "answer_count": 1, "score": 4, "last_activity_date": 1455912002, "creation_date": 1455909661, "last_edit_date": 1455910253, "question_id": 35513290, "link": "https://stackoverflow.com/questions/35513290/consume-parts-of-a-string-while-iterating-over-it", "title": "Consume parts of a string while iterating over it", "body": "<p>I am trying to parse a particular string which has format similar to this:</p>\n\n<pre><code>prefix,body1:body2\n</code></pre>\n\n<p>I would like to use <code>.chars</code> method and other methods like <code>.take_while</code> and others like this:</p>\n\n<pre><code>let chars = str.chars();\nlet prefix: String = chars.take_while(|&amp;c| c != ',').collect();\nlet body1: String = chars.take_while(|&amp;c| c != ':').collect();\nlet body2: String = chars.take_while(|_| true).collect();\n</code></pre>\n\n<p>(<a href=\"http://is.gd/M6krE5\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>But the compiler complains:</p>\n\n<pre><code>error: use of moved value: `chars` [E0382]\n     let body1: String = chars.take_while(|&amp;c| c != ':').collect();\n                         ^~~~~\nhelp: see the detailed explanation for E0382\nnote: `chars` moved here because it has type `core::str::Chars&lt;'_&gt;`, which is non-copyable\n     let prefix: String = chars.take_while(|&amp;c| c != ',').collect();\n                                  ^~~~~\n</code></pre>\n\n<p>I can rewrite it to a plain <code>for</code> loop and accumulate the value, but this is something I would like to avoid.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 0, "creation_date": 1455896820, "post_id": 35507941, "comment_id": 58709471, "body": "Thanks for correcting my poor English."}], "answers": [{"comments": [{"owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 0, "creation_date": 1455895049, "post_id": 35508568, "comment_id": 58708272, "body": "Thanks. This is exactly what I need."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 2, "last_activity_date": 1455894793, "creation_date": 1455894793, "answer_id": 35508568, "question_id": 35507941, "link": "https://stackoverflow.com/questions/35507941/mismatched-types-error-when-moving-a-method-from-a-trait-implementation-to-a-tra/35508568#35508568", "title": "Mismatched types error when moving a method from a trait implementation to a trait definition", "body": "<p>if you move execute in <code>Core</code>, there is nothing in the trait definition that says that <code>T</code> is the same type as <code>Self</code>.</p>\n\n<pre><code>trait Core&lt;T&gt; {\n  fn word(&amp;self) -&gt; &amp;Word&lt;T&gt;;\n  fn hello(&amp;self) { println!(\"Hello\"); }\n  fn execute(&amp;self) { \n      (self.word() // this is a &amp;Word&lt;T&gt;\n          .action) // this is a fn(T)\n          (self);  // this type is Self. T is not necessarily = Self\n  }\n}\n</code></pre>\n\n<p>When <code>execute</code> is in the <code>impl Core&lt;Control&gt; for Control</code>, the impl says that <code>Self</code> and <code>T</code> are both = <code>Control</code>, so <code>execute</code> works. But if T can be anything like in the definition of the trait, Rust can't let your code compile.</p>\n\n<p>How to fix it depends on what you need to do. </p>\n\n<p>If your trait is always meant to be implemented this way (<code>impl Core&lt;Something&gt; for Something</code> or <code>impl Core&lt;SomethingElse&gt; for SomethingElse</code> but NEVER as <code>impl Core&lt;Something&gt; for SomethingElse</code>), you can drop the parameter from the trait definition and have just:</p>\n\n<pre><code>trait Core: Sized {\n  fn word(&amp;self) -&gt; &amp;Word&lt;Self&gt;; // now you can't parametrize what \n                                 // Word to return. It will be Self.\n  fn hello(&amp;self) { println!(\"Hello\"); }\n  fn execute(&amp;self) { (self.word().action)(self); } // ...and this works\n}\n</code></pre>\n"}], "owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 35508568, "answer_count": 1, "score": 2, "last_activity_date": 1455895818, "creation_date": 1455892967, "last_edit_date": 1455895818, "question_id": 35507941, "link": "https://stackoverflow.com/questions/35507941/mismatched-types-error-when-moving-a-method-from-a-trait-implementation-to-a-tra", "title": "Mismatched types error when moving a method from a trait implementation to a trait definition", "body": "<p>I have two structs, <code>VM</code> and <code>Word</code>. I need a new struct <code>Control</code> which behaves just like <code>VM</code>, but with one more field <code>master</code>. Because Rust has no inheritance, I try to extend the struct through composition. I move the functions of <code>VM</code> into a new trait <code>Core</code>, and implement <code>Core</code> for <code>Control</code>. The resulting code works.</p>\n\n<pre><code>struct Word&lt;T&gt; {\n  action: fn(target: &amp;T)\n}\n\nstruct VM {\n  word: Word&lt;VM&gt;\n}\n\ntrait Core&lt;T&gt; {\n  fn word(&amp;self) -&gt; &amp;Word&lt;T&gt;;\n  fn hello(&amp;self) { println!(\"Hello\"); }\n  fn execute(&amp;self);\n}\n\nimpl Core&lt;VM&gt; for VM {\n  fn word(&amp;self) -&gt; &amp;Word&lt;VM&gt; { &amp;self.word }\n  fn execute(&amp;self) { (self.word().action)(self); }\n}\n\nstruct Control {\n  word: Word&lt;Control&gt;,\n  master: i32,\n}\n\nimpl Core&lt;Control&gt; for Control {\n  fn word(&amp;self) -&gt; &amp;Word&lt;Control&gt; { &amp;self.word }\n  fn execute(&amp;self) { (self.word().action)(self); }\n}\n\nfn main() {\n  let vm = VM{\n    word: Word {action: Core::hello}\n  };\n  vm.execute();\n  let control = Control{\n    word: Word {action: Core::hello},\n    master: 0,\n  };\n  vm.execute();\n}\n</code></pre>\n\n<p>The two implementation of <code>execute</code> are identical. So I move <code>execute</code> into trait <code>Core</code>.</p>\n\n<pre><code>trait Core&lt;T&gt; {\n  fn word(&amp;self) -&gt; &amp;Word&lt;T&gt;;\n  fn hello(&amp;self) { println!(\"Hello\"); }\n  fn execute(&amp;self) { (self.word().action)(self); }\n}\n\nimpl Core&lt;VM&gt; for VM {\n  fn word(&amp;self) -&gt; &amp;Word&lt;VM&gt; { &amp;self.word }\n}\n\nimpl Core&lt;Control&gt; for Control {\n  fn word(&amp;self) -&gt; &amp;Word&lt;Control&gt; { &amp;self.word }\n}\n</code></pre>\n\n<p>Which compiles with the following error:</p>\n\n<pre><code>main.rs:14:44: 14:48 error: mismatched types:\n expected `&amp;T`,\n    found `&amp;Self`\n(expected type parameter,\n    found Self) [E0308]\nmain.rs:14   fn execute(&amp;self) { (self.word().action)(self); }\n</code></pre>\n\n<p>How can I solve this problem?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455896069, "post_id": 35508706, "comment_id": 58708943, "body": "Any reason this question isn&#39;t a duplicate of the one <a href=\"http://stackoverflow.com/q/32270030/155423\">you already answered</a>?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455902382, "post_id": 35508706, "comment_id": 58713062, "body": "@Shepmaster only that I forgot that there was such a question and an answer :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455902517, "post_id": 35508706, "comment_id": 58713140, "body": "I remember <i>everything</i> ;-)"}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455907288, "post_id": 35508706, "comment_id": 58715919, "body": "@Shepmaster This is not really a duplicate. Only part of this answer is what I was searching for and is not available in the other one. (global state part) Anyway, I&#39;ve been able to solve this by finding a place to send some user data. :)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1455895179, "creation_date": 1455895179, "answer_id": 35508706, "question_id": 35507814, "link": "https://stackoverflow.com/questions/35507814/capture-variable-in-c-callback/35508706#35508706", "title": "Capture variable in C callback", "body": "<p>You can only do this if your callback accepts some \"user data\" argument which is injected by the calling side and set when this callback is configured, e.g. if you have an API like this:</p>\n\n<pre><code>type Callback = extern fn(*mut c_void);\nextern {\n    fn register_callback(callback: Callback, user_data: *mut c_void);\n}\n</code></pre>\n\n<p><strong>If this does not hold for your C API then there is no way to do it without some global state!</strong></p>\n\n<p>You can provide a closure to this callback like this:</p>\n\n<pre><code>fn register&lt;F: FnMut() + 'static&gt;(cb: F) {\n    extern fn internal_callback(user_data: *mut c_void) {\n        let callback = user_data as *mut Box&lt;FnMut()&gt;;\n        let callback = unsafe { &amp;mut *callback };\n        callback();\n    }\n\n    let cb: Box&lt;Box&lt;FnMut()&gt;&gt; = Box::new(Box::new(cb));\n    let cb_raw = Box::into_raw(cb) as *mut c_void;\n\n    unsafe {\n        register_callback(internal_callback, cb_raw);\n    }\n}\n</code></pre>\n\n<p>It probably makes sense to use <a href=\"http://doc.rust-lang.org/nightly/std/panic/fn.recover.html\" rel=\"nofollow\"><code>recover()</code></a> to protect against panics crossing language boundary, but I omitted it for the sake of simplicity.</p>\n\n<p>The above API has a problem, though: it allows callback environments to leak. I see no general solution for it; it heavily depends on your API. </p>\n\n<p>For example, you may have a function which only uses the passed callback only during its execution, i.e. there is no need to store the callback state anywhere. It may look like this:</p>\n\n<pre><code>type Callback = extern fn(i32, *mut c_void);\nextern {\n    fn c_do_something(arg: i32, user_data: *mut c_void, callback: Callback);\n}\n</code></pre>\n\n<p>Then it may be used like this:</p>\n\n<pre><code>fn do_something&lt;F: FnMut(i32)&gt;(arg: i32, mut cb: F) {\n    extern fn internal_callback(arg: i32, user_data: *mut c_void) {\n        let callback = user_data as *mut &amp;mut FnMut(i32);\n        let callback = unsafe { &amp;mut *user_data };\n        callback(arg);\n    }\n    let cb: &amp;mut &amp;mut FnMut = &amp;mut &amp;mut cb;\n    let cb_raw = cb as *mut _ as *mut c_void;\n\n    unsafe {\n        c_do_something(arg, cb_raw, internal_callback);\n    }\n}\n</code></pre>\n\n<p>In both these approaches we set up a proxy callback function which accepts the user data argument and interprets it as a pointer to the closure environment. BTW, maybe it is possible to make <code>internal_callback()</code> generic and avoid creating trait objects out of the closures, but this does not change the whole picture much.</p>\n\n<p>If your C API works more like in the first example (registering a callback), then you can probably store your callbacks inside some structure, passing only pointers into this structure to the C side. Then you need to make extra sure that the C side won't call these callbacks after your structure is dropped - after you convert references to your callbacks to raw pointers, the lifetime link from the callback use site to their definition will be severed, and you become responsible for enforcing the lifetime constraints. This may be okay if your callbacks are invoked by some entity which has limited lifetime on the C side as well. Then you can link its lifetime with the lifetime of the structure holding closures by designing the API carefully.</p>\n\n<p>And finally, in a dire situation when you have global callbacks which may change frequently, your only choice is to allocate a global state for your callbacks, one piece for each callback, which would store the \"current\" callback. Then you need your Rust wrappers for registration functions replace the old callback with the new one. It could look like this:</p>\n\n<pre><code>type Callback = extern fn(*mut c_void);\nextern {\n    fn register_callback(callback: Callback, user_data: *mut c_void);\n}\n\nfn register&lt;F: FnMut() + 'static&gt;(cb: F) {\n    extern fn internal_callback(user_data: *mut c_void) {\n        let callback = user_data as *mut Mutex&lt;Option&lt;Box&lt;Box&lt;FnMut()&gt;&gt;&gt;&gt;;\n        let callback = unsafe { &amp;mut *callback };\n        let callback = callback.lock();\n        if let Some(callback) = callback.as_mut() {\n            callback();\n        }\n    }\n    lazy_static! {\n        static ref CURRENT_CALLBACK: Mutex&lt;Option&lt;Box&lt;Box&lt;FnMut() + 'static&gt;&gt;&gt;&gt; = Mutex::new(None);\n    }\n    let cb: Box&lt;Box&lt;FnMut()&gt;&gt; = Box::new(Box::new(cb));\n    // extract the old callback and destroy it, if needed\n    mem::replace(&amp;mut *CURRENT_CALLBACK.lock(), Some(cb));\n    let cb_raw = &amp;mut *CURRENT_CALLBACK as *mut _;\n\n    unsafe {\n        register_callback(internal_callback, cb_raw);\n    }\n}\n</code></pre>\n\n<p>Here the inner wrapper is somewhat more complex; it takes care of synchronizing access to the callback state and only allows one callback to be set up at any single time, cleaning up the old callback when necessary. However, the C side must not use the old callback pointer when <code>register_callback()</code> is called with a new pointer, otherwise things will break.</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 360, "favorite_count": 0, "closed_date": 1455902480, "accepted_answer_id": 35508706, "answer_count": 1, "score": 2, "last_activity_date": 1455895179, "creation_date": 1455892608, "question_id": 35507814, "link": "https://stackoverflow.com/questions/35507814/capture-variable-in-c-callback", "closed_reason": "Duplicate", "title": "Capture variable in C callback", "body": "<p>I have some state <code>struct</code> in Rust and a C library that will accept and call an <code>extern \"C\" fn</code>.</p>\n\n<pre><code>fn get_callback(state: State) -&gt; extern \"C\" fn ... {\n    extern \"C\" fn callback(args: &amp;[Whatever]) -&gt; Something {\n        // I need to use that state here\n    }\n\n    callback\n}\n</code></pre>\n\n<p>Of course, this doesn't work because <code>callback</code> gets defined outside <code>get_callback</code> like any other C function.</p>\n\n<p>How can I have some particular state inside of the callback? I need this to add mruby callbacks to Rust and using a global variable for the state is not desirable since every mruby state has its own variable.</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455821486, "post_id": 35489806, "comment_id": 58672891, "body": "If we pretend that the other crate switches to a <code>u64</code>  from a <code>f64</code>, even if the example code compiled, it would try to compare a <code>u64</code> to a <code>f64</code>, which doesn&#39;t work. Beyond that, presumably the other crate doesn&#39;t know about <code>HasMax</code>, so the local crate would have to implement it for various types, which means the local code would have to add a new implementation if the type changed. Am I missing something?"}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455821705, "post_id": 35489806, "comment_id": 58673009, "body": "Maybe I&#39;m missing something about traits, the other crate returns a i64 right now, (I forgot to cast in my example code to deal with <code>&gt;</code> not working) and i64 (and other primitive numeric types) implement <code>::max_value</code>. So I thought this should work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455822161, "post_id": 35489806, "comment_id": 58673287, "body": "<i>primitive numeric types implement <code>max_value</code></i> \u2014 what would you like to  happen when the API changes to return a <code>struct Time(u64, u64)</code>?"}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455822500, "post_id": 35489806, "comment_id": 58673451, "body": "Then it wouldn&#39;t compile, but while it still remains a primitive numeric type and said types continue to implement max_value it&#39;d be nice to set and forget. It gets me some extra longevity even if it&#39;s not perfect."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1455822993, "post_id": 35489950, "comment_id": 58673736, "body": "In addition, I&#39;d point out that you don&#39;t really need the <code>max_of</code> function as it just requires you to create a value that appears to be unused for anything else. Instead, you could just call <code>let mv = &lt;f64 as HasMax&gt;::max_value()</code>. See also <a href=\"http://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"nofollow noreferrer\"><code>size_of</code></a> and <a href=\"http://doc.rust-lang.org/std/mem/fn.size_of_val.html\" rel=\"nofollow noreferrer\"><code>size_of_val</code></a> for a parallel concept."}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455823573, "post_id": 35489950, "comment_id": 58674067, "body": "Yes, I agree.  The whole thing is a little overdesigned."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455823597, "post_id": 35489950, "comment_id": 58674078, "body": "That suggests another approach, <code>assert!(std::mem::size_of_val(api::function()) &lt; 6, &quot;type is too small&quot;);</code>"}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455823690, "post_id": 35489950, "comment_id": 58674120, "body": "@CamdenNarzt: That doesn&#39;t do what we want, because we want to know the range of values, not the amount of storage used to represent the values."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455823737, "post_id": 35489950, "comment_id": 58674137, "body": "the range is to my knowledge at least 2^(bytes*8-1)"}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455823837, "post_id": 35489950, "comment_id": 58674195, "body": "@CamdenNarzt: That&#39;s not true.  The result could be a fixed-point number."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455827037, "post_id": 35489950, "comment_id": 58676080, "body": "Fair enough, rust or a crate could add those at some point. Is there a way to automatically add a trait to all primitive types that already implement the max_value fn?"}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "reply_to_user": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455828496, "post_id": 35489950, "comment_id": 58676850, "body": "@CamdenNarzt: I don&#39;t think so, since <code>max_value()</code> isn&#39;t attached to any trait."}], "tags": [], "owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "is_accepted": false, "score": 2, "last_activity_date": 1455822246, "last_edit_date": 1455822246, "creation_date": 1455821339, "answer_id": 35489950, "question_id": 35489806, "link": "https://stackoverflow.com/questions/35489806/can-i-make-this-assertion-generic-in-rust/35489950#35489950", "title": "Can I make this assertion generic in Rust?", "body": "<p>Trying to make your code work in spite of unknown future breaking API changes in a library you are using is misguided at best.  The short answer is that if the API of a library you are using changes, it is better that your code will fail to compile instead of failing in some more subtle or difficult to detect way.  But I can answer why your code isn't compiling.</p>\n\n<p>The problem is in your trait definition, which uses generics.  Your trait should be <code>HasMax</code>, not <code>HasMax&lt;T&gt;</code>.</p>\n\n<pre><code>const NANOSECONDS_IN_DAY:f64 = 8.64E13;\ntrait HasMax {\n    fn max_value() -&gt; Self;\n}\nfn max_of&lt;T:HasMax&gt;(_: &amp;T) -&gt; T {\n    T::max_value()\n}\nimpl HasMax for f64 {\n    fn max_value() -&gt; Self {\n        std::f64::MAX\n    }\n}\nfn main() {\n    let mv = max_of(&amp;1f64);\n    assert!(mv &gt; NANOSECONDS_IN_DAY, \"type is too small\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "is_accepted": true, "score": 0, "last_activity_date": 1461864121, "creation_date": 1461864121, "answer_id": 36921469, "question_id": 35489806, "link": "https://stackoverflow.com/questions/35489806/can-i-make-this-assertion-generic-in-rust/36921469#36921469", "title": "Can I make this assertion generic in Rust?", "body": "<pre><code>extern crate num;\nextern crate time;\n\n#[cfg(test)]\nmod tests {\n    use num::Bounded;\n    use time::{self,Tm};\n    #[test]\n    fn size_test() {\n        let NANOSECONDS_IN_DAY:f64 = 8.64E13;\n        fn max_of&lt;T:Bounded&gt;(_: T) -&gt; T {\n            T::max_value()\n        }\n        let type_v = time::Duration::zero().num_nanoseconds().unwrap();\n        let mv = max_of(type_v);\n        assert!(mv as f64 &gt; NANOSECONDS_IN_DAY, \"type is too small\");\n    }\n}\n</code></pre>\n\n<p>This works.</p>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 149, "favorite_count": 0, "accepted_answer_id": 36921469, "answer_count": 2, "score": 1, "last_activity_date": 1461864121, "creation_date": 1455820881, "question_id": 35489806, "link": "https://stackoverflow.com/questions/35489806/can-i-make-this-assertion-generic-in-rust", "title": "Can I make this assertion generic in Rust?", "body": "<p>I'm trying to make an assertion that the type returned by a function in someone else's crate is big enough, and don't feel like changing my code if they change theirs to something that's still ok.</p>\n\n<p>Here's a simplified version of what I'm trying to do (<a href=\"http://is.gd/t27l0K\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>const NANOSECONDS_IN_DAY:f64 = 8.64E13;\ntrait HasMax&lt;T&gt; {\n    fn max_value() -&gt; T;\n}\nfn max_of&lt;T:HasMax&gt;(_: &amp;T) -&gt; T {\n    T::max_value()\n}\nfn main() {\n    let mv = max_of(&amp;1f64);\n    assert!(mv &gt; NANOSECONDS_IN_DAY, \"type is too small\");\n}\n</code></pre>\n\n<p>However I get the following error:</p>\n\n<pre><code>&lt;anon&gt;:5:13: 5:19 error: wrong number of type arguments: expected 1, found 0 [E0243]\n&lt;anon&gt;:5 fn max_of&lt;T:HasMax&gt;(_: &amp;T) -&gt; T {\n                     ^~~~~~\n</code></pre>\n"}, {"tags": ["struct", "rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1455821177, "post_id": 35488820, "comment_id": 58672726, "body": "<a href=\"http://www.piston.rs/image/image/type.RgbaImage.html\" rel=\"nofollow noreferrer\">piston.rs/image/image/type.RgbaImage.html</a>"}, {"owner": {"reputation": 33, "user_id": 5904314, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tcUzf.png?s=128&g=1", "display_name": "Drakoriss", "link": "https://stackoverflow.com/users/5904314/drakoriss"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1455886731, "post_id": 35488820, "comment_id": 58702830, "body": "@starblue, thanks, now I see :)"}], "answers": [{"comments": [{"owner": {"reputation": 33, "user_id": 5904314, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tcUzf.png?s=128&g=1", "display_name": "Drakoriss", "link": "https://stackoverflow.com/users/5904314/drakoriss"}, "edited": false, "score": 0, "creation_date": 1455886636, "post_id": 35491934, "comment_id": 58702771, "body": "Now I can see the light! Thanks, it&#39;s really improves my understanding. Oh, and &quot;printing the type&quot; trick is funny."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1455828329, "last_edit_date": 1495541730, "creation_date": 1455827854, "answer_id": 35491934, "question_id": 35488820, "link": "https://stackoverflow.com/questions/35488820/how-to-create-a-rust-struct-with-an-imageimagebuffer-as-a-member/35491934#35491934", "title": "How to create a Rust struct with an image::ImageBuffer as a member?", "body": "<p>Looking at the <a href=\"http://www.piston.rs/image/image/struct.ImageBuffer.html\" rel=\"nofollow noreferrer\">documentation for <code>ImageBuffer</code></a>, we can see the trait requirements for the type parameters:</p>\n\n<pre><code>impl&lt;P, Container&gt; ImageBuffer&lt;P, Container&gt;\n    where P: Pixel + 'static,\n          P::Subpixel: 'static,\n          Container: Deref&lt;Target=[P::Subpixel]&gt;\n</code></pre>\n\n<p>So, it's important that the second type parameter can dereference to a slice of subpixels. <code>Subpixel</code> is determined by the <a href=\"http://www.piston.rs/image/image/trait.Pixel.html\" rel=\"nofollow noreferrer\"><code>Pixel</code> trait</a>, which has a few implementations:</p>\n\n<ul>\n<li><code>Rgb&lt;T&gt;</code></li>\n<li><code>Luma&lt;T&gt;</code></li>\n<li><code>Rgba&lt;T&gt;</code></li>\n<li><code>LumaA&lt;T&gt;</code></li>\n</ul>\n\n<p>Where <code>T</code> is the subpixel type.</p>\n\n<p>This is all pretty complicated, but should provide a good bit of power and generality.</p>\n\n<p>Note that I've only shown <em>one</em> of the implementation blocks. There are others that require <code>DerefMut</code> or that require the subpixel to be a <code>u8</code>.</p>\n\n<hr>\n\n<p>How do you actually use it? First you need to pick a specific color and subpixel type. Based on your colors, it looks like you want to use a 4-channel, 8-bit color type. That would be <a href=\"http://www.piston.rs/image/image/struct.Rgba.html\" rel=\"nofollow noreferrer\"><code>Rgba&lt;u8&gt;</code></a>.</p>\n\n<p>There are many types that could dereference to an <code>&amp;[u8]</code> or <code>&amp;mut [u8]</code>. The obvious (but not only!) choice would be a <code>Vec&lt;u8&gt;</code>.</p>\n\n<p>Combining these two, your structure needs to be something like:</p>\n\n<pre><code>buffer: image::ImageBuffer&lt;Rgba&lt;u8&gt;, Vec&lt;u8&gt;&gt;,\n</code></pre>\n\n<p>Then, it's just a matter of creating the structure and doing things to it:</p>\n\n<pre><code>extern crate image;\n\nuse image::{ImageBuffer, Pixel, Rgba};\n\npub struct Picture {\n    buffer: ImageBuffer&lt;Rgba&lt;u8&gt;, Vec&lt;u8&gt;&gt;,\n}\n\nimpl Picture {\n    fn new(width: u32, height: u32) -&gt; Self {\n        // There's probably a cleaner way to figure out the right size\n        let storage = vec![0; 4 * width as usize * height as usize];\n        let buf = ImageBuffer::from_raw(width, height, storage).unwrap();\n\n        Picture {\n            buffer: buf,\n        }\n    }\n\n    fn fill_red(&amp;mut self) {\n        let color = Rgba::from_channels(255, 0, 0, 255);\n\n        for p in self.buffer.pixels_mut() {\n            *p = color;\n        }\n    }\n}\n\nfn main() {\n    let mut pic = Picture::new(256, 256);\n    pic.fill_red();\n}\n</code></pre>\n\n<p>Note that <code>ImageBuffer</code> already tracks the width and height, so there's no real reason to track them a second time.</p>\n\n<hr>\n\n<p>However, all of this is the hard way. There are convenience functions like <code>new</code> which will allocate storage for you:</p>\n\n<pre><code>buffer: ImageBuffer::new(width, height),\n</code></pre>\n\n<p>These functions are hard-coded to return a <code>Vec</code> as the <code>Container</code>. If you didn't see that in the docs, you could try something like <a href=\"https://stackoverflow.com/q/21747136/155423\">printing the type</a>:</p>\n\n<pre><code>let () = ImageBuffer::new(width, height);\n</code></pre>\n\n<p>Which would tell you the type in the error message:</p>\n\n<pre><code>expected `image::buffer::ImageBuffer&lt;_, collections::vec::Vec&lt;_&gt;&gt;`,\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 5904314, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tcUzf.png?s=128&g=1", "display_name": "Drakoriss", "link": "https://stackoverflow.com/users/5904314/drakoriss"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3110, "favorite_count": 0, "accepted_answer_id": 35491934, "answer_count": 1, "score": 3, "last_activity_date": 1455828329, "creation_date": 1455817866, "last_edit_date": 1455827909, "question_id": 35488820, "link": "https://stackoverflow.com/questions/35488820/how-to-create-a-rust-struct-with-an-imageimagebuffer-as-a-member", "title": "How to create a Rust struct with an image::ImageBuffer as a member?", "body": "<p>I'm using the <a href=\"http://www.piston.rs/image/image/index.html\" rel=\"nofollow\">image</a> crate for picture manipulation and want to create a little wrapper to make my code a bit fancier.</p>\n\n<pre><code>extern crate image;\n\nconst BLACK: [u8; 4] = [0, 0, 0, 255];\nconst WHITE: [u8; 4] = [255, 255, 255, 255];\nconst RED: [u8; 4] = [255, 0, 0, 255];\n\npub struct Picture {\n    buffer: image::ImageBuffer,\n    width: u32,\n    height: u32\n}\n\nimpl Picture {\n    // My functions like fill(), line() etc.\n}\n</code></pre>\n\n<p>But when I compile this, I have an error:</p>\n\n<pre><code>src\\pic.rs:11:13: 11:31 error: wrong number of type arguments: expected 2, found 0 [E0243]\nsrc\\pic.rs:11     buffer: image::ImageBuffer,\n                          ^~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>In the source, I saw that <code>ImageBuffer</code> accepts two arguments:</p>\n\n<pre><code>pub struct ImageBuffer&lt;P: Pixel, Container&gt; {\n    width: u32,\n    height: u32,\n    _phantom: PhantomData&lt;P&gt;,\n    data: Container,\n}\n</code></pre>\n\n<p>So I decided to put those arguments in the <code>Picture</code> declaration:</p>\n\n<pre><code>pub struct Picture {\n    buffer: image::ImageBuffer&lt;image::Pixel&gt;,\n}\n</code></pre>\n\n<p>And got another error:</p>\n\n<pre><code>src\\pic.rs:11:32: 11:44 error: the value of the associated type `Subpixel` (from the trait `pic::image::buffer::Pixel`) must be specified [E0191]\nsrc\\pic.rs:11     buffer: image::ImageBuffer&lt;image::Pixel&gt;,\n                                             ^~~~~~~~~~~~\n</code></pre>\n\n<p>That means I must specify some value for the <code>Subpixel</code> type, and I don't get it. I don't know how to declare that <code>Container</code> type, I can't find anything useful in the sources. I tried to re-read the Rust Book, examples, <code>rustc --explain E0191</code> but I am still lost.</p>\n\n<p>update:</p>\n\n<p>In sources found next declaration:</p>\n\n<pre><code>impl&lt;P, Container&gt; ImageBuffer&lt;P, Container&gt;\nwhere P: Pixel + 'static,\n      P::Subpixel: 'static,\n      Container: Deref&lt;Target=[P::Subpixel]&gt;\n</code></pre>\n\n<p>And <code>Subpixel</code> is:</p>\n\n<pre><code>/// Primitive trait from old stdlib\npub trait Primitive: Copy + NumCast + Num + PartialOrd&lt;Self&gt; + Clone + Bounded {\n}\n</code></pre>\n\n<p>But it not public for my crate.</p>\n"}, {"tags": ["linux", "tcp", "rust", "mio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1455819137, "post_id": 35486891, "comment_id": 58671552, "body": "Using <code>#[allow(...)]</code> is overkill for this situation. It would be better to simply <a href=\"http://is.gd/8Nl0rE\" rel=\"nofollow noreferrer\">prepend the unused variables with an underscore</a>. Related <a href=\"http://stackoverflow.com/a/32751177/155423\">question</a>."}, {"owner": {"reputation": 278, "user_id": 2550301, "user_type": "registered", "accept_rate": 43, "profile_image": "https://graph.facebook.com/100000055337084/picture?type=large", "display_name": "Maciej Donajski", "link": "https://stackoverflow.com/users/2550301/maciej-donajski"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455820735, "post_id": 35486891, "comment_id": 58672471, "body": "Thanks @Shepmaster for your help. I&#39;ve seen your edit with reregister and I&#39;ve fixed that to be register and it was causing the OS error. And now I am back with original question again. I replaced println! with panic! to be sure that the handlers are not executed."}], "answers": [{"comments": [{"owner": {"reputation": 278, "user_id": 2550301, "user_type": "registered", "accept_rate": 43, "profile_image": "https://graph.facebook.com/100000055337084/picture?type=large", "display_name": "Maciej Donajski", "link": "https://stackoverflow.com/users/2550301/maciej-donajski"}, "edited": false, "score": 0, "creation_date": 1455880728, "post_id": 35503612, "comment_id": 58699067, "body": "It is a good answer. Do I understand correctly that I borrowed socket to register method and when it returns it is dropped? Is it true that if event_loop instance would set the socket as a member it would not be dropped?"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "reply_to_user": {"reputation": 278, "user_id": 2550301, "user_type": "registered", "accept_rate": 43, "profile_image": "https://graph.facebook.com/100000055337084/picture?type=large", "display_name": "Maciej Donajski", "link": "https://stackoverflow.com/users/2550301/maciej-donajski"}, "edited": false, "score": 0, "creation_date": 1455886552, "post_id": 35503612, "comment_id": 58702711, "body": "Your code effectively creates a socket, passes a reference to it to the register function, and then drops the socket at the end of the statement as it is not bound to any variable. If by &quot;set the socket as a member&quot; you mean if register took ownership of the socket and stored it, then yes the socket would be kept open and your code would work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455895567, "post_id": 35503612, "comment_id": 58708604, "body": "This doesn&#39;t make any sense to me. The <i>whole point</i> of lifetimes is to prevent this kind of thing from happening! If the event stream keeps a reference to the socket, then the compiler should complain that it doesn&#39;t last long enough!"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1455907158, "post_id": 35503612, "comment_id": 58715842, "body": "Well technically the event loop doesn&#39;t keep a reference to the socket. It is actually just getting the file descriptor, pass it to the kernel APIs along with the Token and then discards it. So in the end it is the kernel that does all the bookkeeping."}], "tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": true, "score": 2, "last_activity_date": 1455879419, "creation_date": 1455879419, "answer_id": 35503612, "question_id": 35486891, "link": "https://stackoverflow.com/questions/35486891/mio-eventloop-is-not-running-for-tcpstream/35503612#35503612", "title": "MIO EventLoop is not running for TcpStream", "body": "<p>Your problem arises from the fact that the socket you open is closed <em>before</em> your event loop has the chance to run.</p>\n\n<p>You current code is roughly equivalent to this:</p>\n\n<pre><code>let addr = \"127.0.0.1:9999\".parse().unwrap();\nlet mut event_loop = EventLoop::&lt;MyHandler&gt;::new().unwrap();\n{\n    let sock = TcpStream::connect(&amp;addr).unwrap();\n    event_loop.register(&amp;sock, Token(0), EventSet::readable(), PollOpt::level()).unwrap();\n}   // The socket is closed here, before the event loop runs\nevent_loop.run(&amp;mut MyHandler).unwrap();\n</code></pre>\n\n<p>So the fix is just to bind the socket to a variable so it will stay open when you call the event loop.</p>\n\n<pre><code>let addr = \"127.0.0.1:9999\".parse().unwrap();\nlet mut event_loop = EventLoop::&lt;MyHandler&gt;::new().unwrap();\nlet sock = TcpStream::connect(&amp;addr).unwrap();\nevent_loop.register(&amp;sock, Token(0), EventSet::readable(), PollOpt::level()).unwrap();\nevent_loop.run(&amp;mut MyHandler).unwrap();\n</code></pre>\n\n<p>Your code then behaves as you expect, and panics as soon as there is something to read on the socket.</p>\n"}], "owner": {"reputation": 278, "user_id": 2550301, "user_type": "registered", "accept_rate": 43, "profile_image": "https://graph.facebook.com/100000055337084/picture?type=large", "display_name": "Maciej Donajski", "link": "https://stackoverflow.com/users/2550301/maciej-donajski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 233, "favorite_count": 0, "accepted_answer_id": 35503612, "answer_count": 1, "score": 3, "last_activity_date": 1455879419, "creation_date": 1455812548, "last_edit_date": 1455821148, "question_id": 35486891, "link": "https://stackoverflow.com/questions/35486891/mio-eventloop-is-not-running-for-tcpstream", "title": "MIO EventLoop is not running for TcpStream", "body": "<p>I am a Rust beginner struggling with a problem of async IO. I've decided to use <a href=\"https://github.com/carllerche/mio\" rel=\"nofollow\">mio</a>. </p>\n\n<p>I've read some source code + tutorials but there is still some fundamental part that I do not understand. I am setting up a server with <code>netcat -k -l 127.0.0.1 9999</code>. Then I am running simple test with <code>cargo</code> (code below). I was expecting to see panic with \"ready\" or \"tick\". But it never happens and test is running forever.</p>\n\n<pre><code>extern crate mio;\nuse mio::*;\n#[allow(unused_imports)]\nuse mio::tcp::TcpStream;\n\n#[allow(dead_code)]\nstruct MyHandler;\n\nimpl Handler for MyHandler {\n    type Timeout = ();\n    type Message = ();\n\n    fn ready(&amp;mut self, _event_loop: &amp;mut EventLoop&lt;Self&gt;, _token: Token, _event_set: EventSet) {\n        panic!(\"ready\");\n    }\n\n    fn tick(&amp;mut self, _event_loop: &amp;mut EventLoop&lt;Self&gt;) {\n        panic!(\"tick\");\n    }\n}\n\n#[test]\nfn mio_test1() {\n    let addr = \"127.0.0.1:9999\".parse().unwrap();\n    let mut event_loop = EventLoop::&lt;MyHandler&gt;::new().unwrap();\n    event_loop.register(&amp;TcpStream::connect(&amp;addr).unwrap(), Token(0), EventSet::readable(), PollOpt::level()).unwrap();\n    event_loop.run(&amp;mut MyHandler).unwrap();\n}\n</code></pre>\n"}, {"tags": ["function", "recursion", "rust"], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 3, "last_activity_date": 1455854749, "last_edit_date": 1455854749, "creation_date": 1455786754, "answer_id": 35477157, "question_id": 35476495, "link": "https://stackoverflow.com/questions/35476495/group-numbers-if-the-sum-of-the-numbers-in-the-range-is-equal-to-1/35477157#35477157", "title": "Group numbers if the sum of the numbers in the range is equal to 1", "body": "<p>Don't use recursion; just use a forward pass with a stack.</p>\n\n<ul>\n<li>Keep a stack of \"open\" brackets and how many <code>None</code>s are expected.</li>\n<li>When you see a <code>None</code>, enter a loop. Each iteration, decrement the end of the array; if it reaches 0 pop it off, otherwise exit the loop.\n\n<ul>\n<li>Alternatively, this is equivalent to just popping off all the 1s at the end of the array and then decrementing the end of the array.</li>\n</ul></li>\n<li>When you see a number, write out the stack depth to the result and add the number to the end of the stack.</li>\n<li>When you get to the end of the input, verify the stack is empty.</li>\n</ul>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e509fc280b7a826328d7&amp;version=stable\" rel=\"nofollow\">Here's code to do this:</a></p>\n\n<pre><code>let mut scores = Vec::new();\nlet mut stack = Vec::new();\n\nfor x in data {\n    let depth = stack.len();\n\n    if let Some(v) = x {\n        scores.push(depth);\n        stack.push(v);\n    } else {\n        while let Some(&amp;1) = stack.last() {\n            stack.pop();\n        }\n        if let Some(last) = stack.last_mut() {\n            *last -= 1;\n        }\n    }\n\n    println!(\"{:?}\", scores);\n}\n\nassert!(!scores.is_empty());\n</code></pre>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "accepted_answer_id": 35477157, "answer_count": 1, "score": -1, "last_activity_date": 1455854749, "creation_date": 1455784784, "last_edit_date": 1455844005, "question_id": 35476495, "link": "https://stackoverflow.com/questions/35476495/group-numbers-if-the-sum-of-the-numbers-in-the-range-is-equal-to-1", "title": "Group numbers if the sum of the numbers in the range is equal to 1", "body": "<p>I have some data like this:</p>\n\n<pre><code>[3, 3, 2, None, None, None, None, None, None, 1, None, 1, None]\n</code></pre>\n\n<p>If I assign <code>1 - x</code> to each non-None value in the list, or <code>1</code> for each None value, I get these numbers:</p>\n\n<pre><code>[-2, -2, -1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1]\n</code></pre>\n\n<p>I assign the numbers from index <code>i</code> to <code>j</code> to a group if the sum of the numbers in the range is equal to 1, in this case this is what the grouped list looks like:</p>\n\n<pre><code>[&lt;-2, &lt;-2, &lt;-1, 1, 1&gt;, 1, 1&gt;, 1, 1&gt;, &lt;0, 1&gt;, &lt;0, 1&gt;]\n</code></pre>\n\n<p>Or if the original numbers are put in:</p>\n\n<pre><code>[&lt;3, &lt;3, &lt;2, None, None&gt;, None, None&gt;, None, None&gt;, &lt;1, None&gt;, &lt;1, None&gt;]\n</code></pre>\n\n<p>Each  non-None value is given a score based on how deep it is nested, starting at 0. For example, the <code>2</code> in the <code>&lt;2, None, None&gt;</code> group has a score of 2. I want to make a function that calculates the score of each number, returning a list of numbers, where each corresponds to the next non-None value in the original list. In the above example, that result would be:</p>\n\n<pre><code>[0, 1, 2, 0, 0]\n</code></pre>\n\n<p>Two solutions I could think of:</p>\n\n<p>Create a list of the start and end indices of each group, and for each one, see how many other ranges it falls inside of.</p>\n\n<p>Create a recursive function that calls itself when encountering a non-None value.</p>\n\n<p>An implementation of either of these would be very helpful, otherwise I could use some tips for creating another solution.</p>\n"}, {"tags": ["rust", "idioms"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1455780614, "post_id": 35473977, "comment_id": 58644998, "body": "Answers to the duplicated question do indeed give the idiomatic approach to handling errors in iterators. However, if you do need to unwrap the results, causing a panic in case of errors, your approach is perfectly valid and there is no shorter way (though there can be minor tweaks, e.g. unwrapping in a second <code>.map()</code>)."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1455780890, "post_id": 35473977, "comment_id": 58645122, "body": "Does the lifted <code>Result</code> have the contents from the first error returned if the result is <code>Err</code>?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1455782456, "post_id": 35473977, "comment_id": 58645956, "body": "Yes, I believe <a href=\"http://doc.rust-lang.org/src/core/result.rs.html#954\" rel=\"nofollow noreferrer\">that&#39;s how it works</a>."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1455782918, "post_id": 35473977, "comment_id": 58646196, "body": "Thanks, just tested in <a href=\"http://is.gd/LwoPat\" rel=\"nofollow noreferrer\">is.gd/LwoPat</a>"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 65, "favorite_count": 0, "closed_date": 1455780480, "answer_count": 0, "score": 0, "last_activity_date": 1455777387, "creation_date": 1455775294, "last_edit_date": 1455777387, "question_id": 35473977, "link": "https://stackoverflow.com/questions/35473977/is-there-an-idiomatic-way-to-unwrap-each-returned-result-from-an-iterator", "closed_reason": "Duplicate", "title": "Is there an idiomatic way to unwrap each returned Result from an iterator?", "body": "<p>Say I have something like the following, where <code>Tag::from</code> returns a <code>Result&lt;Tag,&amp;'static str&gt;</code>:</p>\n\n<pre><code>let upcased = \"ABC\".to_string();\nlet chan_vec:Vec&lt;Tag&gt; = upcased.chars().map(|c| Tag::from(&amp;c).unwrap() ).collect();\n</code></pre>\n\n<p>Is the second line the best I can do style-wise? </p>\n"}]