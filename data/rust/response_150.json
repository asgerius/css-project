[{"tags": ["rust", "ownership"], "comments": [{"owner": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 0, "creation_date": 1511384844, "post_id": 47443299, "comment_id": 81842861, "body": "You need an explicit lifetime, as is said in the error message."}], "owner": {"reputation": 389, "user_id": 847598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e7692a5956513bcf0038801961650c5?s=128&d=identicon&r=PG", "display_name": "Windel", "link": "https://stackoverflow.com/users/847598/windel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 59, "favorite_count": 0, "closed_date": 1511406283, "answer_count": 0, "score": 1, "last_activity_date": 1511406381, "creation_date": 1511382095, "last_edit_date": 1511406381, "question_id": 47443299, "link": "https://stackoverflow.com/questions/47443299/how-can-i-move-ownership-of-a-function-argument", "closed_reason": "Duplicate", "title": "How can I move ownership of a function argument?", "body": "<p>I have the below code:</p>\n\n<pre><code>trait Trt {\n    fn perform_magic(&amp;self);\n}\n\nstruct X {\n    t: Box&lt;Trt&gt;,\n}\n\nimpl X {\n    fn new&lt;T: Trt&gt;(t: T) -&gt; X {\n        X {\n            t: Box::new(t),\n        }\n    }\n}\n\nstruct Y;\n\nimpl Trt for Y {\n    fn perform_magic(&amp;self) {\n        println!(\"Magic!\");\n    }\n}\n\nfn main() {\n    let y = Y;\n    let x = X::new(y);\n}\n</code></pre>\n\n<p>I want to transfer ownership of the function argument <code>t</code> into the new <code>Box</code> which will be handed over to the <code>t</code> field in <code>X</code>, but this code will not work:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `T` may not live long enough\n  --&gt; tst.rs:14:19\n   |\n14 |                t: Box::new(t),\n   |                   ^^^^^^^^^^^\n   |\n   = help: consider adding an explicit lifetime bound `T: 'static`...\nnote: ...so that the type `T` will meet its required lifetime bounds\n  --&gt; tst.rs:14:19\n   |\n14 |                t: Box::new(t),\n   |                   ^^^^^^^^^^^\n</code></pre>\n\n<p>I would like to have the object <code>x</code> contain a <code>Box</code> which refers (owns) to <code>y</code>.</p>\n\n<p>What is the best option to achieve this?</p>\n"}, {"tags": ["rust", "dynamic-linking", "linkage", "rust-cargo"], "comments": [{"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1511523909, "post_id": 47441765, "comment_id": 81899548, "body": "What is exactly your question? Why a dynamic library is linking in things dynamically?"}, {"owner": {"reputation": 309, "user_id": 8394326, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/10213751014238196/picture?type=large", "display_name": "Traor&#233; Moussa", "link": "https://stackoverflow.com/users/8394326/traor%c3%a9-moussa"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1511531741, "post_id": 47441765, "comment_id": 81904070, "body": "@Neikos Why the standard library is linked dynamically to the dynamic library ? The documentation says that the standard library should be linked statically unless you specify the flag &quot;-C prefer-dynamic&quot; to the compiler. In this particular case, it links the standard library dynamically whereas when I use dummy projects to test, it works as expected."}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1511534467, "post_id": 47441765, "comment_id": 81905501, "body": "Can you link to the part of the documentation that says that?"}, {"owner": {"reputation": 309, "user_id": 8394326, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/10213751014238196/picture?type=large", "display_name": "Traor&#233; Moussa", "link": "https://stackoverflow.com/users/8394326/traor%c3%a9-moussa"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1511538921, "post_id": 47441765, "comment_id": 81907934, "body": "@Neikos <a href=\"https://github.com/rust-lang/cargo/pull/3408#issuecomment-279842175\" rel=\"nofollow noreferrer\">github.com/rust-lang/cargo/pull/3408#issuecomment-279842175</a> .. This is no the official library but it&#39;s the owner of the Cargo project explaining what I am rephrasing here"}, {"owner": {"reputation": 309, "user_id": 8394326, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/10213751014238196/picture?type=large", "display_name": "Traor&#233; Moussa", "link": "https://stackoverflow.com/users/8394326/traor%c3%a9-moussa"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1511539207, "post_id": 47441765, "comment_id": 81908058, "body": "@Neikos <a href=\"https://doc.rust-lang.org/reference/linkage.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/linkage.html</a> You can also refer to this page"}], "owner": {"reputation": 309, "user_id": 8394326, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/10213751014238196/picture?type=large", "display_name": "Traor&#233; Moussa", "link": "https://stackoverflow.com/users/8394326/traor%c3%a9-moussa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1634, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1511622308, "creation_date": 1511375873, "last_edit_date": 1511622308, "question_id": 47441765, "link": "https://stackoverflow.com/questions/47441765/why-is-the-rust-libstd-linked-dynamically-without-using-c-prefer-dynamic-flag-a", "title": "Why is the Rust libstd linked dynamically without using -C prefer-dynamic flag after compiling a dynamic library?", "body": "<p>I am having an issue understanding how Cargo links binaries when building a dynamic library. To understand it better, I took the <a href=\"https://github.com/uutils/coreutils\" rel=\"nofollow noreferrer\">coreutils project</a> and tried to build 'ls' changing Cargo.toml and other stuff to make the executable as small as possible. I rapidly found out that linking libraries dynamically could reduce the size of the executables drastically. </p>\n\n<p>Digging through the internet for optimizations, I found that when you generate libraries as \"dylibs\" in Cargo, they still include \"libstd\" statically unless you explicitly tell the compiler to include it dynamically using the flag \"-C prefer-dynamic\". </p>\n\n<p>I don't use the flag, but still end up having libstd linked dynamically, which is very strange. </p>\n\n<h1>Cargo.toml for ls</h1>\n\n<p>I modified this a bit.</p>\n\n<pre><code>[package]\nname = \"ls\"\nversion = \"0.0.1\"\nauthors = [\"Jeremiah Peschka &lt;jeremiah.peschka@gmail.com&gt;\"]\n\n\n\n[lib]\ncrate-type=[\"dylib\"]\nname = \"uu_ls\"\npath = \"ls.rs\"\n\n[dependencies]\ngetopts = \"0.2.14\"\npretty-bytes = \"0.2.1\"\nterm_grid = \"0.1.5\"\ntermsize = \"0.1.4\"\ntime = \"0.1.38\"\nlazy_static = \"0.2.8\"\nunicode-width = \"0.1.4\"\n\n[dependencies.uucore]\npath = \"../uucore\"\ndefault-features = false\nfeatures = [\"entries\"]\n\n[[bin]]\nname = \"ls\"\npath = \"main.rs\"\n</code></pre>\n\n<h1>Cargo.toml of uucore</h1>\n\n<p>This is the only dependency of ls that I need to compile:</p>\n\n<pre><code>[package]\nname = \"uucore\"\nversion = \"0.0.1\"\nauthors = []\n\n\n[dependencies]\ngetopts = \"0.2.14\"\ntime = { version = \"0.1.38\", optional = true }\ndata-encoding = { version = \"^1.1\", optional = true }\n\n[dependencies.libc]\ngit = \"https://github.com/rust-lang/libc.git\"\noptional = true\n\n[features]\nfs = [\"libc\"]\nutf8 = []\nencoding = [\"data-encoding\"]\nparse_time = []\nutmpx = [\"time\", \"libc\"]\nprocess = [\"libc\"]\nsignals = []\nentries = [\"libc\"]\nwide = []\nutsname = [\"libc\"]\ndefault = [\"fs\", \"libc\", \"utf8\", \"utsname\", \"encoding\", \"parse_time\", \"utmpx\", \"process\", \"entries\", \"signals\", \"wide\"]\n\n[lib]\ncrate-type=[\"dylib\"]\npath = \"lib.rs\"\nname = \"uucore\"\n</code></pre>\n\n<p>After building the library, I determine whether if it is linked dynamically: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ldd ~/target/release/libuu_ls.so \n    linux-vdso.so.1 =&gt;  (0x00007ffd96b98000)\n    libuucore.so =&gt; not found\n    libstd-8eeda694d27cc3ba.so =&gt; /home/cibo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/libstd-8eeda694d27cc3ba.so (0x00007f86a29d0000)\n    librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f86a27c8000)\n    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f86a25ab000)\n    libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f86a2394000)\n    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f86a1fca000)\n    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f86a1cc1000)\n    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f86a1abc000)\n    /lib64/ld-linux-x86-64.so.2 (0x0000558ebb132000)\n</code></pre>\n\n<p>As you can see, libstd is dynamically linked here. </p>\n"}, {"tags": ["unit-testing", "rust", "parameter-passing"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 6, "creation_date": 1511374310, "post_id": 47441279, "comment_id": 81837649, "body": "Could you change the function so that it takes a generic <code>I: Iterator&lt;Item = String&gt;</code> instead? That&#39;s much easier to mock up."}, {"owner": {"reputation": 12866, "user_id": 110488, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/21369d30fe2c6c976ffe735f2fd0ee91?s=128&d=identicon&r=PG", "display_name": "Chen Levy", "link": "https://stackoverflow.com/users/110488/chen-levy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1511375540, "post_id": 47441279, "comment_id": 81838305, "body": "@trentcl, nice workaround, but is this idiomatic Rust? Must I forgo the clear intent of <i>this function expects  to get command line arguments</i> in favor of <i>this function expects some generic iterator that yields strings</i> for it to be testable?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 2, "creation_date": 1511377150, "post_id": 47441279, "comment_id": 81839171, "body": "Being generic in what you accept is the way to go. The function name can indicate the intent, but using generic input types keeps the function flexible."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1511378233, "post_id": 47441279, "comment_id": 81839732, "body": "Yes? If the contract of the function is &quot;takes command line arguments&quot;, the only <i>correct</i> way to test it is to pass command line arguments. You have to relax the contract to be able to test it with arbitrary strings. (But I should have mentioned <code>IntoIterator</code> instead of <code>Iterator</code>, since that will work with <code>Vec</code>.)"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1511378497, "post_id": 47441279, "comment_id": 81839859, "body": "Aside, I tend to agree with loganfsmyth, but if for some reason it is important to enforce &quot;give me command line arguments&quot; on the caller, you can wrap the generic function and its tests in a module and only expose a <code>pub fn</code> that takes <code>Args</code> exactly (and calls the generic version to do the work). Although at that point maybe you might as well call <code>std::env::args()</code> yourself and take no arguments at all."}], "answers": [{"tags": [], "owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "is_accepted": false, "score": 11, "last_activity_date": 1511406204, "last_edit_date": 1511406204, "creation_date": 1511375677, "answer_id": 47441713, "question_id": 47441279, "link": "https://stackoverflow.com/questions/47441279/creating-an-stdenvargs-iterator-for-testing/47441713#47441713", "title": "Creating an `std::env::Args` iterator for testing", "body": "<p>The fields of <a href=\"https://doc.rust-lang.org/std/env/struct.Args.html\" rel=\"noreferrer\"><code>std::env::Args</code></a> are not documented, and there doesn't appear to be a public function to create one with custom fields. So, you're outta luck there.</p>\n\n<p>But since it's just \"<em>An iterator over the arguments of a process, yielding a <code>String</code> value for each argument</em>\" your functions can take a <code>String</code> iterator or <code>Vec</code> without any loss of functionality or type safety. Since it's just a list of <code>String</code>s, it doesn't make much sense to arbitrarily limit your functions to strings which happen to come from the command line.</p>\n\n<p>Looking through <a href=\"https://github.com/rust-lang/rust/search?p=1&amp;q=%22env%3A%3AArgs%22&amp;type=&amp;utf8=%E2%9C%93\" rel=\"noreferrer\">Rust's own tests</a>, that's just what they do. There's a lot of <code>let args: Vec&lt;String&gt; = env::args().collect();</code></p>\n\n<p>There's even <a href=\"https://github.com/rust-lang/rust/blob/adbce60d6f131e5b3789f01417dedb05e4489898/src/bootstrap/bin/main.rs\" rel=\"noreferrer\">an example in <code>rustbuild</code></a> where they strip off the name of the program and just feed the list of arguments.</p>\n\n<pre><code>use std::env;\n\nuse bootstrap::{Config, Build};\n\nfn main() {\n    let args = env::args().skip(1).collect::&lt;Vec&lt;_&gt;&gt;();\n    let config = Config::parse(&amp;args);\n    Build::new(config).build();\n}\n</code></pre>\n\n<p>And <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/config.rs#L300\" rel=\"noreferrer\"><code>bootstrap::Config::parse()</code></a> looks like so:</p>\n\n<pre><code>impl Config {\n    pub fn parse(args: &amp;[String]) -&gt; Config {\n        let flags = Flags::parse(&amp;args);\n        ...\n</code></pre>\n\n<p>I'm not a Rust expert, but that seems to be how the Rust folks handle the problem.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1549636308, "post_id": 54594023, "comment_id": 95985144, "body": "FWIW, this is already mentioned in the existing answer: &quot;your functions can take a <code>String</code> iterator&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1549636526, "post_id": 54594023, "comment_id": 95985259, "body": "Using <code>IntoIterator</code> will probably lead to easier code at some point (<code>fn parse(args: impl IntoIterator&lt;Item = String&gt;)</code>). To be extremely flexible, accept anything that can be treated as a <code>&amp;str</code> (<code>fn parse(args: impl IntoIterator&lt;Item = impl AsRef&lt;str&gt;&gt;)</code>) or perhaps <code>Into&lt;String&gt;</code>."}], "tags": [], "owner": {"reputation": 79, "user_id": 6711421, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5e27df95bb43ac8dd4d7dcbc0824a4ea?s=128&d=identicon&r=PG&f=1", "display_name": "Rossman", "link": "https://stackoverflow.com/users/6711421/rossman"}, "is_accepted": false, "score": 3, "last_activity_date": 1549636269, "last_edit_date": 1549636269, "creation_date": 1549634471, "answer_id": 54594023, "question_id": 47441279, "link": "https://stackoverflow.com/questions/47441279/creating-an-stdenvargs-iterator-for-testing/54594023#54594023", "title": "Creating an `std::env::Args` iterator for testing", "body": "<p><a href=\"https://stackoverflow.com/a/47441713/155423\">@Schwern's answer</a> is good and it led me to this simpler version. Since <code>std::env::Args</code> implements <code>Iterator</code> with <code>Item = String</code> you can do this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::env;\n\nfn parse&lt;T&gt;(args: T)\nwhere\n    T: Iterator&lt;Item = String&gt;,\n{\n    for arg in args {\n        // arg: String\n        print!(\"{}\", arg);\n    }\n}\n\nfn main() {\n    parse(env::args());\n}\n</code></pre>\n\n<p>To test, you provide <code>parse</code> with an iterator over <code>String</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[test]\nfn test_parse() {\n   let args = [\"arg1\", \"arg2\"].iter().map(|s| s.to_string());\n   parse(args);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1895, "user_id": 7664765, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vu76T.png?s=128&g=1", "display_name": "Simon", "link": "https://stackoverflow.com/users/7664765/simon"}, "is_accepted": false, "score": 0, "last_activity_date": 1581350010, "creation_date": 1581350010, "answer_id": 60153943, "question_id": 47441279, "link": "https://stackoverflow.com/questions/47441279/creating-an-stdenvargs-iterator-for-testing/60153943#60153943", "title": "Creating an `std::env::Args` iterator for testing", "body": "<p>I've wrote a little macro to make this easier, based on <a href=\"https://stackoverflow.com/a/54594023/7664765\">@Rossman's answer</a> (and therefore also based on <a href=\"https://stackoverflow.com/a/47441713/155423\">@Schwern's answer</a>; thanks go to both):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! make_string_iter {\n    ($($element: expr), *) =&gt; {\n        {\n            let mut v = Vec::new();\n            $( v.push(String::from($element)); )*\n            v.into_iter()\n        }\n    };\n}\n</code></pre>\n\n<p>It can be used in that way:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! make_string_iter {\n    ($($element: expr), *) =&gt; {\n        {\n            let mut v = Vec::new();\n            $( v.push(String::from($element)); )*\n            v.into_iter()\n        }\n    };\n}\n\n// We're using this function to test our macro\nfn print_args&lt;T: Iterator&lt;Item = String&gt;&gt;(args: T) {\n    for item in args {\n        println!(\"{}\", item);\n    }\n}\n\nfn main() {\n\n    // Prints a, b and c\n    print_args(make_string_iter!(\"a\", \"b\", \"c\"))\n}\n</code></pre>\n\n<p>Or try it out on the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28b445e597840c5750d3d5ca024108db\" rel=\"nofollow noreferrer\">Rust Playground</a>.</p>\n\n<p>I'm not (yet) an expert in rust, any suggestions are highly welcome :)</p>\n"}], "owner": {"reputation": 12866, "user_id": 110488, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/21369d30fe2c6c976ffe735f2fd0ee91?s=128&d=identicon&r=PG", "display_name": "Chen Levy", "link": "https://stackoverflow.com/users/110488/chen-levy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1619, "favorite_count": 0, "answer_count": 3, "score": 15, "last_activity_date": 1581350010, "creation_date": 1511373952, "last_edit_date": 1511406143, "question_id": 47441279, "link": "https://stackoverflow.com/questions/47441279/creating-an-stdenvargs-iterator-for-testing", "title": "Creating an `std::env::Args` iterator for testing", "body": "<p>Is there a way in Rust to create a <code>std::env::Args</code> from a <code>Vec&lt;String&gt;</code> in order to use it in a <code>#[test]</code> function?</p>\n\n<p>I wish to test a function that gets a <code>std::env::Args</code> as an argument, but I don't know how to create such an object with a list of arguments I supply for the test.</p>\n\n<p>I wasn't able to figure this one out from the docs, the source nor from Google searches.</p>\n"}, {"tags": ["rust", "handlebars.js"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1511361220, "post_id": 47436517, "comment_id": 81828774, "body": "<i>but I don&#39;t suceed</i> \u2014 perhaps you would be so kind as to tell us what <b>actually happens</b>? Also, take a second to re-read over your question. You&#39;ll find that you&#39;ve left incomplete data and added some garbage text in there."}, {"owner": {"reputation": 1464, "user_id": 5935198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e36ba5b69b43af8e8ef7ddcc43d93b27?s=128&d=identicon&r=PG", "display_name": "RousseauAlexandre", "link": "https://stackoverflow.com/users/5935198/rousseaualexandre"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511362747, "post_id": 47436517, "comment_id": 81829937, "body": "Actually I had a blank page. The documentation for Rocket.rs &amp; Handlebars system is verry poor. I don&#39;t know how to include global layout"}], "answers": [{"tags": [], "owner": {"reputation": 1464, "user_id": 5935198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e36ba5b69b43af8e8ef7ddcc43d93b27?s=128&d=identicon&r=PG", "display_name": "RousseauAlexandre", "link": "https://stackoverflow.com/users/5935198/rousseaualexandre"}, "is_accepted": true, "score": 4, "last_activity_date": 1511363279, "creation_date": 1511363279, "answer_id": 47437980, "question_id": 47436517, "link": "https://stackoverflow.com/questions/47436517/rust-rocket-rs-build-a-layout-system/47437980#47437980", "title": "Rust &amp; Rocket.rs - Build a layout system", "body": "<p>After hours of searching I founded my answer</p>\n\n<p>For the layout it was good</p>\n\n<pre><code>&lt;!-- templates/layouts/main.html.hbs --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    {{~&gt; content}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>But for the page you need to do somethink like this</p>\n\n<pre><code>&lt;!-- templates/pages/home.html.hbs --&gt;\n{{#*inline \"page\"}}\n&lt;h1&gt;hello&lt;/h1&gt;\n{{/inline}}\n{{~&gt; layouts/main~}}\n</code></pre>\n"}], "owner": {"reputation": 1464, "user_id": 5935198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e36ba5b69b43af8e8ef7ddcc43d93b27?s=128&d=identicon&r=PG", "display_name": "RousseauAlexandre", "link": "https://stackoverflow.com/users/5935198/rousseaualexandre"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 568, "favorite_count": 0, "accepted_answer_id": 47437980, "answer_count": 1, "score": 0, "last_activity_date": 1511363279, "creation_date": 1511358990, "last_edit_date": 1511362548, "question_id": 47436517, "link": "https://stackoverflow.com/questions/47436517/rust-rocket-rs-build-a-layout-system", "title": "Rust &amp; Rocket.rs - Build a layout system", "body": "<p>I try to create a small website with <a href=\"http://rocket.rs/\" rel=\"nofollow noreferrer\">Rocket.rs</a> &amp; Handlebar templating system. I want to create a global layout &amp; include my content in the <code>&lt;body&gt;</code> tag</p>\n\n<p>Here my code</p>\n\n<pre><code>templates/\n\u251c\u2500\u2500 layouts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.html.hbs\n\u2514\u2500\u2500 pages\n \u00a0\u00a0 \u2514\u2500\u2500 home.html.hbs\n</code></pre>\n\n<p>Here my layout file</p>\n\n<pre><code>&lt;!-- templates/layouts/main.html.hbs --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    {{~&gt; page}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And here my content</p>\n\n<pre><code>&lt;!-- templates/pages/home.html.hbs --&gt;\n{{#*inline \"page\"}}\n&lt;h1&gt;hello&lt;/h1&gt;\n{{/inline}}\n{{~&gt; (layouts/main)~}}\n</code></pre>\n\n<p>And my Rust code</p>\n\n<pre><code>// src/main.rs\n\n#[get(\"/\")]\nfn home() -&gt; Template {\n    let map = ();\n    Template::render(\"pages/home\", &amp;map)\n}\n\nfn main() {\n    rocket::ignite()\n        .mount(\"/\", routes![home])\n        .attach(Template::fairing())\n        .launch();\n}\n</code></pre>\n\n<p>How can I include <em>pages/home</em> into the global layout?</p>\n"}, {"tags": ["rust", "serde", "toml"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1511358119, "post_id": 47429879, "comment_id": 81826582, "body": "<i>How do I specify to the deserializer which structure type I want to deserialize into?</i> \u2014 you do it in the <b>exact same way</b> you specified what type to deserialize into the first time. Show us how you tried to solve the problem."}], "answers": [{"comments": [{"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1511373769, "post_id": 47431221, "comment_id": 81837344, "body": "That answers the main part of my question, so I have accepted it. I guess the part I&#39;m struggling with most in fact is that I want to deserialize a toml file into one of a number of different struct types - without knowing apriori what format/type is in the file.... If you have any references for the enum idea it would be great. If you prefer I ask a separate question for that, then I can. Thanks"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1511343604, "creation_date": 1511343604, "answer_id": 47431221, "question_id": 47429879, "link": "https://stackoverflow.com/questions/47429879/how-to-deserialize-two-different-structures-and-file-formats-using-toml-rs-and-s/47431221#47431221", "title": "How to deserialize two different structures and file formats using toml-rs and serde_derive?", "body": "<p><code>toml::from_str</code> deserializes into the type that is expected from the expression. So</p>\n\n<pre><code>let x: Foo = toml::from_str(something)?;\n</code></pre>\n\n<p>will use the <code>Deserialize</code> impl of <code>Foo</code>.</p>\n\n<p>You can also explicitly specify what type to deserialize into via generic arguments:</p>\n\n<pre><code>let x = toml::from_str::&lt;Foo&gt;(something)?;\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>Also, related - is it possible to put the type into the file itself, so that deserialization can be more generic, and the deserializer can detect the type to deserialize from the file itself?</p>\n</blockquote>\n\n<p>You can do that with enums. Each variant can hold a different type. To figure out the exact design I suggest you implement <code>Serialize</code> for an enum, serialize it to your target format and you'll see how to do the runtime type specification. I'm not sure if <code>toml</code> supports enums, but json certainly does.</p>\n"}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 275, "favorite_count": 0, "accepted_answer_id": 47431221, "answer_count": 1, "score": 0, "last_activity_date": 1511358054, "creation_date": 1511339033, "last_edit_date": 1511358054, "question_id": 47429879, "link": "https://stackoverflow.com/questions/47429879/how-to-deserialize-two-different-structures-and-file-formats-using-toml-rs-and-s", "title": "How to deserialize two different structures and file formats using toml-rs and serde_derive?", "body": "<p>I am using toml-rs and serde_derive to deserialize TOML files my app uses to describe data structures.</p>\n\n<p>I have everything working with my first data structure which corresponds to one TOML file definition with obligatory and optional fields.</p>\n\n<p>Now I want to use it to deserialize another data structure that is described in another TOML file, with different fields.</p>\n\n<p>How do I specify to the deserializer (I am using <code>toml::from_str(&amp;contents)</code>) which structure type I want to deserialize into?</p>\n\n<p>Related question - is it possible to put the type into the file itself, so that deserialization can be more generic, and the deserializer can detect the type to deserialize from the file itself?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1511296376, "post_id": 47421488, "comment_id": 81798837, "body": "See also <a href=\"https://stackoverflow.com/q/46388977/155423\">How do I remove excessive <code>clone</code> calls from a struct that caches arbitrary results?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1511296563, "post_id": 47421488, "comment_id": 81798932, "body": "<code>let calc = &amp;self.calculation; *self.hm.entry(arg).or_insert_with(|| calc(arg))</code>"}, {"owner": {"reputation": 638, "user_id": 6772989, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/a05dc0e117ea9018de89f926894ea906?s=128&d=identicon&r=PG&f=1", "display_name": "Bulat M.", "link": "https://stackoverflow.com/users/6772989/bulat-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511297170, "post_id": 47421488, "comment_id": 81799245, "body": "@Shepmaster, I don&#39;t know how to apply V::clone in my code, because I return i32, not generic value.  if let Some(v) = self.values.get(&amp;arg).map(V::clone) {"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1511297412, "post_id": 47421488, "comment_id": 81799378, "body": "I&#39;m not saying that the <code>Clone</code> solution solves your current problem \u2014 that&#39;s what the duplicate and my second comment are for. The <code>Clone</code> solution is attempting to answer your next question when you try to make it even more generic."}, {"owner": {"reputation": 638, "user_id": 6772989, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/a05dc0e117ea9018de89f926894ea906?s=128&d=identicon&r=PG&f=1", "display_name": "Bulat M.", "link": "https://stackoverflow.com/users/6772989/bulat-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511297968, "post_id": 47421488, "comment_id": 81799683, "body": "Could you please show how to implement that method? I am reading book sequentially and haven&#39;t already acquired knowledge to comprehend syntax you used, for example *self..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1511298061, "post_id": 47421488, "comment_id": 81799735, "body": "That <i>is</i> the implementation of the method, I&#39;ve already shown it to you: <code>fn value(&amp;mut self, arg: i32) -&gt; i32 { let calc = &amp;self.calculation; *self.hm.entry(arg).or_insert_with(|| calc(arg)) }</code>. <code>*</code> is the dereference operator, you used it in your own code: <code>Some(v) =&gt; *v</code>."}, {"owner": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 0, "creation_date": 1511302478, "post_id": 47421488, "comment_id": 81802043, "body": "@BulatM. To clarify on <i>why you get the original error</i>, it&#39;s because <code>v</code> is (possibly) still a reference to some memory allocated by the HashMap. Rust avoids magic, and thus doesn&#39;t &quot;know&quot; that <code>v</code> is empty when you enter the <code>None</code> branch. Inside <code>None=&gt;</code>, you insert into the HashMap, which could cause a re-allocation - and this would invalidate <code>v</code> if it held a reference to memory that was just re-allocated. The solution is the same as the &quot;duplicate&quot; question - to use the <code>entry</code> api."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 608, "user_id": 1907543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7597ff99ee5f0704208709c3d17d9f33?s=128&d=identicon&r=PG", "display_name": "daboross", "link": "https://stackoverflow.com/users/1907543/daboross"}, "edited": false, "score": 1, "creation_date": 1511314090, "post_id": 47421488, "comment_id": 81805793, "body": "@daboross FWIW, this <i>is</i> a weakness in the borrow checker. The work for non-lexical lifetimes should make the na&#239;ve hashmap case work (although still be less efficient than the entry API)."}, {"owner": {"reputation": 638, "user_id": 6772989, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/a05dc0e117ea9018de89f926894ea906?s=128&d=identicon&r=PG&f=1", "display_name": "Bulat M.", "link": "https://stackoverflow.com/users/6772989/bulat-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511325882, "post_id": 47421488, "comment_id": 81808485, "body": "Sorry for offtopic, but: @Shepmaster, how did you get such a solid knowledge and thorough understanding of details? In contrast, yet I can hardly get my Rust code compilable("}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1511357933, "post_id": 47421488, "comment_id": 81826476, "body": "@BulatM. that part is simple \u2014 I&#39;ve been reading / writing / editing Rust questions and answers for over three years at this point. Add to that general programming in higher and lower level languages for ~10 years. Don&#39;t give up on Rust though; in many cases the compiler protects you from  shooting yourself in the foot with regards to safety (this case isn&#39;t really one of them, sadly). Most of the times the compiler stops you is for a good reason, and once satisfied your code will be very likely to do what you told it to!"}], "owner": {"reputation": 638, "user_id": 6772989, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/a05dc0e117ea9018de89f926894ea906?s=128&d=identicon&r=PG&f=1", "display_name": "Bulat M.", "link": "https://stackoverflow.com/users/6772989/bulat-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 134, "favorite_count": 0, "closed_date": 1511296051, "answer_count": 0, "score": 1, "last_activity_date": 1511296475, "creation_date": 1511293628, "last_edit_date": 1511296475, "question_id": 47421488, "link": "https://stackoverflow.com/questions/47421488/how-to-mutate-hash-map", "closed_reason": "Duplicate", "title": "How to mutate hash map?", "body": "<p>I'm solving a task from the Rust Book:</p>\n\n<pre><code>struct Cacher&lt;T&gt;\nwhere\n    T: Fn(i32) -&gt; i32,\n{\n    calculation: T,\n    hm: HashMap&lt;i32, i32&gt;,\n}\n\nimpl&lt;T&gt; Cacher&lt;T&gt;\nwhere\n    T: Fn(i32) -&gt; i32,\n{\n    // ...\n    fn value(&amp;mut self, arg: i32) -&gt; i32 {\n        let v = self.hm.get(&amp;arg); // borrowing returned Option&lt;&amp;V&gt;\n        match v {\n            // matching owned value\n            Some(v) =&gt; *v, //return Copy'ied i32\n            None =&gt; {\n                let v2 = (self.calculation)(arg); // get result of closure\n                self.hm.insert(arg, v2); // memoize gotten value\n                v2 // return value\n            }\n        }\n    }\n    // ...\n}\n</code></pre>\n\n<p>However, the compiler gives the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>let v = self.hm.get(&amp;arg);\n--- immutable borrow occures here\n</code></pre>\n\n<p>Ok, I understand it, but the next message:</p>\n\n<pre><code>self.hm.insert(arg, v2);\n^^^^^^^ mutable borrow occures here\n</code></pre>\n\n<p>How does this happens if I don't change the borrowed (<code>v</code>) value in <code>self.hm.insert(arg, v2);</code>?</p>\n\n<p>I did a mutable borrow by changing <code>let v</code> to <code>let mut v</code>, but it didn't help: the compiler reports the same error.</p>\n\n<p>How could I change my code to be able to insert a memoized value into the hash map?</p>\n\n<p>Sorry for vague title, didn't find better description.</p>\n"}, {"tags": ["windows", "rust", "64-bit"], "answers": [{"tags": [], "owner": {"reputation": 384, "user_id": 1723676, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/y8ILT.jpg?s=128&g=1", "display_name": "Ronny", "link": "https://stackoverflow.com/users/1723676/ronny"}, "is_accepted": false, "score": 3, "last_activity_date": 1511285715, "creation_date": 1511285715, "answer_id": 47419262, "question_id": 47418823, "link": "https://stackoverflow.com/questions/47418823/compiling-x64-with-rust-on-windows/47419262#47419262", "title": "Compiling x64 with Rust on Windows", "body": "<p>This was fixed by uninstalling a rust nightly build found using <code>rustc --print sysroot</code> and reinstalling latest stable build.</p>\n"}, {"tags": [], "owner": {"reputation": 9, "user_id": 13795369, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-P5thrA201l8/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucnIPRxiJH_c5BAQyby-mPCPX9FynQ/photo.jpg?sz=128", "display_name": "Musharraf", "link": "https://stackoverflow.com/users/13795369/musharraf"}, "is_accepted": false, "score": -2, "last_activity_date": 1592894631, "last_edit_date": 1592894631, "creation_date": 1592867583, "answer_id": 62524906, "question_id": 47418823, "link": "https://stackoverflow.com/questions/47418823/compiling-x64-with-rust-on-windows/62524906#62524906", "title": "Compiling x64 with Rust on Windows", "body": "<p>The answer is in the <code>note</code> section of the error message:</p>\n<pre><code>   = note: the 'x86_64-pc-windows-msvc' target may not be installed\n</code></pre>\n<p>To f</p>\n"}], "owner": {"reputation": 384, "user_id": 1723676, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/y8ILT.jpg?s=128&g=1", "display_name": "Ronny", "link": "https://stackoverflow.com/users/1723676/ronny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1546, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1592894631, "creation_date": 1511284231, "last_edit_date": 1511286058, "question_id": 47418823, "link": "https://stackoverflow.com/questions/47418823/compiling-x64-with-rust-on-windows", "title": "Compiling x64 with Rust on Windows", "body": "<p>I am trying to compile x64 on Windows with Rust.</p>\n\n<p>I have set: <code>rustup default stable-x86_64-pc-windows-msvc</code></p>\n\n<p>With the following program</p>\n\n<pre><code>fn main() { println!(\"{}\", std::usize::MAX); }\n</code></pre>\n\n<p><code>cargo run</code> prints out <code>4294967295</code></p>\n\n<p>but <code>cargo run --target --target x86_64-pc-windows-msvc</code> gives me:</p>\n\n<pre><code>error[E0463]: can't find crate for 'std'\n  |\n  = note: the 'x86_64-pc-windows-msvc' target may not be installed\n</code></pre>\n\n<p>Also <code>x86_64-pc-windows-msvc</code> is in <code>rustc --print target-list</code></p>\n\n<p>I have no idea what to do...</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1511264604, "post_id": 47412267, "comment_id": 81777757, "body": "Put the <code>assert_eq</code> above the <code>leddriver</code> binding and it will work."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1511268553, "post_id": 47412267, "comment_id": 81780328, "body": "I see here a contradiction: you pass a reference for the mutable ownership and when try to read it. This is clearly forbidden in Rust. You can&#39;t have any references if you already have a mutable one. This is a rule of borrow-checker. However, you can have a work-around by using smart pointers or <code>Rc</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1511269035, "post_id": 47412267, "comment_id": 81780625, "body": "<i>&quot;The issue is with the assert statement which requires the ref to be immutable, [...]&quot;</i> The real issue is that you have attempted to use a mutable reference already passed to the <code>LEDDriver</code> instance, thus resulting in two mutable references, which is illegal. I would advise you to have a second read of the book on <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html\" rel=\"nofollow noreferrer\">references and borrowing</a>."}, {"owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1511271038, "post_id": 47412267, "comment_id": 81782029, "body": "@ljedrz This will compile but I need to check the value of the reference after the LEDDriver initialization."}, {"owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1511271216, "post_id": 47412267, "comment_id": 81782176, "body": "@victor-polevoy Your answer would help but I&#39;d have to use RefCell instead of Rc. The issue is higher RAM usage (target is uC) and the interface changes which are not necessary for the usage."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1511271422, "post_id": 47412267, "comment_id": 81782318, "body": "Is there anything that speaks against writing <code>assert_eq!(0, *leddriver.address)</code>?"}, {"owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1511271685, "post_id": 47412267, "comment_id": 81782519, "body": "@oli_obk-ker Thanks. Simple and elegant solution that works."}], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1511273962, "post_id": 47414587, "comment_id": 81784161, "body": "<code>Volatile</code> -- is that the one from the <a href=\"https://crates.io/crates/volatile\" rel=\"nofollow noreferrer\"><code>volatile</code></a> crate?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1511275916, "post_id": 47414587, "comment_id": 81785577, "body": "Yea that&#39;s the one"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1511271726, "creation_date": 1511271726, "answer_id": 47414587, "question_id": 47412267, "link": "https://stackoverflow.com/questions/47412267/mutable-and-immutable-borrow-issue-with-assert-eq/47414587#47414587", "title": "Mutable and immutable borrow issue with assert_eq", "body": "<p>Since this is a minimized example, I'm not sure if it matches your real use case, but you can just use <code>*leddriver.address</code> instead of <code>*addr</code> to access the data after it has been borrowed (since <code>leddriver</code> is the one borrowing it)</p>\n\n<hr>\n\n<p>You can also use <code>Cell</code>, which does not incur any memory or runtime overhead, but prevents references to the inner value.</p>\n\n<pre><code>use std::cell::Cell;\n\nstruct LEDDriver&lt;'a&gt; {\n    address: &amp;'a Cell&lt;u32&gt;,\n}\n\nimpl&lt;'a&gt; LEDDriver&lt;'a&gt; {\n    fn new(address: &amp;'a Cell&lt;u32&gt;) -&gt; Self {\n        let leddriver = LEDDriver { address: address };\n        leddriver.address.set(0);\n        leddriver\n    }\n}\n\nfn driver_init_leds_off() {\n    let ref mut addr = Cell::new(0xffffffff);\n    let leddriver = LEDDriver::new(addr);\n\n    assert_eq!(0, addr.get());\n}\n</code></pre>\n\n<p>If the memory location of <code>addr</code> will be passed to hardware or modified from interrupts you should be using <code>Volatile</code> though, because otherwise Rust is permitted to assume that multiple <code>addr.get()</code> without an <code>addr.set()</code> in between will yield the same result, even though hardware or interrupts might have changed it</p>\n"}], "owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 141, "favorite_count": 1, "accepted_answer_id": 47414587, "answer_count": 1, "score": 2, "last_activity_date": 1511273195, "creation_date": 1511264489, "last_edit_date": 1511273195, "question_id": 47412267, "link": "https://stackoverflow.com/questions/47412267/mutable-and-immutable-borrow-issue-with-assert-eq", "title": "Mutable and immutable borrow issue with assert_eq", "body": "<p>I'm rewriting some C test code for LEDDriver to Rust.</p>\n\n<pre><code>struct LEDDriver&lt;'a&gt; {\n    address: &amp;'a mut u32,\n}\n\nimpl&lt;'a&gt; LEDDriver&lt;'a&gt; {\n    fn new(address: &amp;'a mut u32) -&gt; Self {\n        let leddriver = LEDDriver { address: address };\n        *leddriver.address = 0;\n        leddriver\n    }\n}\n\nfn driver_init_leds_off() {\n    let ref mut addr = 0xffffffff;\n    let leddriver = LEDDriver::new(addr);\n\n    assert_eq!(0, *addr);\n}\n</code></pre>\n\n<p>You can run the example <a href=\"https://play.integer32.com/?gist=b0aecbfb5925ab3222de90d5b2cfa692&amp;version=stable\" rel=\"nofollow noreferrer\">here</a></p>\n\n<p>The issue is with the assert statement which requires the ref to be immutable, but I pass mut ref to the LEDDriver to clear the addr.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 177, "user_id": 975391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4251db76f46fbbe524db9c5aa521af4?s=128&d=identicon&r=PG", "display_name": "user975391", "link": "https://stackoverflow.com/users/975391/user975391"}, "edited": false, "score": 0, "creation_date": 1511275239, "post_id": 47414288, "comment_id": 81785089, "body": "Ah, brilliant (I was afraid this was going to be a pattern in rust) the latter solution is definitely more robust.  Is it considered good practice across rust to use Traits in these situations?  Thanks.  Oh and thanks for clearing up my question."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 177, "user_id": 975391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4251db76f46fbbe524db9c5aa521af4?s=128&d=identicon&r=PG", "display_name": "user975391", "link": "https://stackoverflow.com/users/975391/user975391"}, "edited": false, "score": 0, "creation_date": 1511275740, "post_id": 47414288, "comment_id": 81785464, "body": "@user975391 When feasible, generalizing is frequently a good idea. For instance, if you choose to use the piston2d-graphics API over Gfx, you are still advised to make code generic over <a href=\"https://docs.rs/piston2d-graphics/0.23.0/graphics/trait.Graphics.html\" rel=\"nofollow noreferrer\"><code>Graphics</code></a>. When using textures, which only work for a specific, one can <a href=\"https://docs.rs/piston2d-graphics/0.23.0/graphics/trait.Graphics.html#associatedtype.Texture\" rel=\"nofollow noreferrer\">assign the <code>Texture</code> associated type</a> to the intended texture type."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 2, "last_activity_date": 1511273302, "last_edit_date": 1511273302, "creation_date": 1511270920, "answer_id": 47414288, "question_id": 47412199, "link": "https://stackoverflow.com/questions/47412199/referencing-gfx-back-end-types-from-crates-within-front-end-crates/47414288#47414288", "title": "Referencing Gfx back-end types from crates within front-end crates", "body": "<p>On the one hand, it's true that <code>gfx_window_glutin</code> would probably benefit from re-exporting the data types, since its public API is effectively returning instances of those types. This has happened before in other crates such as <a href=\"https://stackoverflow.com/q/44876113/1233251\"><code>pathfinder</code> re-exporting <code>num_traits</code></a>, and one could propose something similar to <code>gfx_window_glutin</code> by filing an issue at the main repository.</p>\n\n<p><strong>On the other hand</strong>, it is actually recommended to build code that is generic over the back-end implementation of Gfx. Both <a href=\"https://docs.rs/gfx/0.16.1/gfx/trait.Factory.html\" rel=\"nofollow noreferrer\"><code>Factory</code></a> and <a href=\"https://docs.rs/gfx/0.16.1/gfx/trait.Resources.html\" rel=\"nofollow noreferrer\"><code>Resources</code></a> are trait types which encapsulate the underlying implementation, so you should use these constraints in your code instead.</p>\n\n<pre><code>use gfx::{Factory, Resources};\n\nfn draw_triangle&lt;R, F&gt;(factory : &amp;F)\nwhere\n    R: Resources,\n    F: Factory&lt;R&gt;\n{\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 177, "user_id": 975391, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4251db76f46fbbe524db9c5aa521af4?s=128&d=identicon&r=PG", "display_name": "user975391", "link": "https://stackoverflow.com/users/975391/user975391"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 47414288, "answer_count": 1, "score": 0, "last_activity_date": 1511273551, "creation_date": 1511264241, "last_edit_date": 1511273551, "question_id": 47412199, "link": "https://stackoverflow.com/questions/47412199/referencing-gfx-back-end-types-from-crates-within-front-end-crates", "title": "Referencing Gfx back-end types from crates within front-end crates", "body": "<p>I'm following <a href=\"https://wiki.alopex.li/LearningGfx\" rel=\"nofollow noreferrer\">a tutorial on the gfx library</a>. The following code is used to init the windowing system and it returns various bits using implicitly typed binding.</p>\n\n<pre><code>let (window, mut device, mut factory, color_view, mut depth_view) =\n    gfx_glutin::init::&lt;ColorFormat, DepthFormat&gt;(windowbuilder, contextbuilder, &amp;events_loop);\n</code></pre>\n\n<p>For the sake of readability I decided to try and extract the drawing code that is part of the tutorial into it's own function.</p>\n\n<pre><code>fn draw_triangle(factory: &amp;Factory) {\n    let mut encoder: gfx::Encoder&lt;_, _&gt; = factory.create_command_buffer().into();\n    const TRIANGLE: [Vertex; 3] = [\n        Vertex {\n            pos: [-0.5, -0.5, 0.0, 1.0],\n            color: [1.0, 0.0, 0.0],\n        },\n        Vertex {\n            pos: [0.5, -0.5, 0.0, 1.0],\n            color: [0.0, 1.0, 0.0],\n        },\n        Vertex {\n            pos: [0.0, 0.5, 0.0, 1.0],\n            color: [0.0, 0.0, 1.0],\n        },\n    ];\n    //Identity Matrix\n    const TRANSFORM: Transform = Transform {\n        transform: [\n            [1.0, 0.0, 0.0, 0.0],\n            [0.0, 1.0, 0.0, 0.0],\n            [0.0, 0.0, 1.0, 0.0],\n            [0.0, 0.0, 0.0, 1.0],\n        ],\n    };\n\n    let (vertex_buffer, slice) = factory.create_vertex_buffer_with_slice(&amp;TRIANGLE, ());\n    let transform_buffer = factory.create_constant_buffer(1);\n    let data = pipe::Data {\n        vbuf: vertex_buffer,\n        transform: transform_buffer,\n        out: color_view.clone(),\n    };\n    //Put in main loop before swap buffers and device clean-up method\n    encoder.clear(&amp;color_view, BLACK); //clear the framebuffer with a color(color needs to be an array of 4 f32s, RGBa)\n    encoder.update_buffer(&amp;data.transform, &amp;[TRANSFORM], 0); //update buffers\n    encoder.draw(&amp;slice, &amp;pso, &amp;data); // draw commands with buffer data and attached pso\n    encoder.flush(&amp;mut device); // execute draw commands\n}\n</code></pre>\n\n<p>The problem here is that <code>Factory</code> (passed in from the first code fragment) does not exist within the scope of this file, and in fact belongs to a crate that exists within the gfx_glutin_window crate.</p>\n\n<p>The compiler is happy with this being implicitly defined in the first fragment of code, but it looks like I can't explicitly refer it without declaring a hard dependency on said crate.  (i.e. I can't get at it through the gfx_glutin_window crate).</p>\n\n<p>I'm not sure if I'm just completely missing the mark here, or whether this is by design.  Though I can imagine a scenario where project dependencies clash with transient dependencies in that case.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "edited": false, "score": 0, "creation_date": 1511260811, "post_id": 47410676, "comment_id": 81775262, "body": "Thanks \u2026 indeed that was my error. I was looking completely at the wrong spot. I didn&#39;t think of unwrapping the result of flushing, I thought to get an error already on unwrapping the write result. Thanks again \u2026"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1511267563, "post_id": 47410676, "comment_id": 81779668, "body": "How about dropping the <code>let _ = ...</code> so the compiler actually tells you where you possibly screwed up?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1511270554, "post_id": 47410676, "comment_id": 81781701, "body": "You might have gotten an error during writing if you had written more bytes than your buffer can hold. Other than that, using <code>let _ = foo;</code> is rarely a good idea, just use <code>foo;</code> It also drops the value, but warns you about <code>#[must_use]</code> types like <code>Result</code>"}, {"owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "edited": false, "score": 0, "creation_date": 1511271855, "post_id": 47410676, "comment_id": 81782646, "body": "@oli_obk-ker I added the \u201clet _ =\u201d because I wasn&#39;t sure whether the writing / unwrap is evaluated lazily or not. Normally I don&#39;t write it. Here in the code I wanted to make sure that the expression gets evaluated."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "edited": false, "score": 4, "creation_date": 1511273120, "post_id": 47410676, "comment_id": 81783551, "body": "@MatthiasWimmer If you use <code>let _</code> you are actually making lazy eval worse. If you have a lazy iterator and you never eval it, Rust will tell you. If you place it into <code>let _</code>, well, it stays lazy and does nothing. <code>let _</code> exists for the rare case where you actually want to ignore failures"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1511277962, "post_id": 47410676, "comment_id": 81787076, "body": "I don&#39;t think <code>let _ = </code> will ever force evaluation of anything lazy, or that it is even possible to write a type that behaves this way. (Except with <code>unsafe</code>, perhaps.)"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1511279543, "post_id": 47410676, "comment_id": 81788278, "body": "@SebastianRedl This would not be possible even with unsafe (which is itself <a href=\"https://doc.rust-lang.org/nomicon/what-unsafe-does.html\" rel=\"nofollow noreferrer\">limited in what it can do</a>) because object move cannot be customized, by design. The only way to implement a type that magically performs an operation when used with <code>let _ = ...</code> would be by modifying the compiler."}, {"owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "edited": false, "score": 0, "creation_date": 1511285733, "post_id": 47410676, "comment_id": 81792637, "body": "@oli_obk-ker Okay, thanks for the explanation/clarification."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1511303659, "post_id": 47410676, "comment_id": 81802606, "body": "@user4815162342 I was thinking capturing the address of the object when it is first constructed in a raw pointer, implement Drop, and then do something special in drop if the current address is different from the originally captured one. Of course that is incredibly unreliable, but the point here is being evil."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1511259810, "creation_date": 1511259810, "answer_id": 47410676, "question_id": 47410346, "link": "https://stackoverflow.com/questions/47410346/bytes-written-to-a-bufwriter-arent-actually-written/47410676#47410676", "title": "Bytes written to a BufWriter aren&#39;t actually written", "body": "<p>As the docs state, <code>File::open</code> opens the file in read only mode.</p>\n\n<p>When you try to write, you are writing to the <code>BufWriter</code>, which always succeeds. Once you <code>flush</code>, you are ignoring the <code>Result</code>, which means that even if the writing fails (which it does, since it's read-only), you are ignoring that error.</p>\n\n<p><a href=\"https://doc.rust-lang.org/std/fs/struct.OpenOptions.html\" rel=\"nofollow noreferrer\"><code>OpenOptions</code></a> allows you to open a file both in read and write mode at the same time. Note that reading and writing at the same time can have weird consequences, like reading failing to produce anything after the first write, because the write <em>replaces</em> the entire file instead of inserting/appending your writes</p>\n"}], "owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 366, "favorite_count": 0, "accepted_answer_id": 47410676, "answer_count": 1, "score": -1, "last_activity_date": 1511276696, "creation_date": 1511258874, "last_edit_date": 1511276696, "question_id": 47410346, "link": "https://stackoverflow.com/questions/47410346/bytes-written-to-a-bufwriter-arent-actually-written", "title": "Bytes written to a BufWriter aren&#39;t actually written", "body": "<p>I'm trying to write a small Rust program that echoes lines on /dev/ttyS0 back to the sender:</p>\n\n<pre><code>fn echo_loop(device: &amp;str) {\n    let f = File::open(device).unwrap();\n    let read = BufReader::new(&amp;f);\n    let mut writer = BufWriter::new(&amp;f);\n\n    read.lines().for_each(|l: Result&lt;String, Error&gt;| match l {\n        Ok(line) =&gt; {\n            let _ = writer.write(line.as_bytes()).unwrap();\n            let _ = writer.flush();\n            println!(\"We should have written: {}\", line);\n        },\n        Err(err) =&gt; println!(\"Err!: {:?}\", err)\n    });\n}\n</code></pre>\n\n<p>To test this code, I call the function with <code>\"/dev/tty\"</code> as its argument.</p>\n\n<p>I would expect to be able to type lines on the console that get echoed after I press <kbd>return</kbd>, but I don't get an echo (beside from what I print with the <code>println!(\u2026)</code> macro.</p>\n\n<p>The part that reads the lines seems to work, else I couldn't <code>println!</code> what I type, but why don't I get the echo by writing to the <code>writer</code>?</p>\n\n<p>This is the output of my code (note: The lines \u201cHello world!\u201d and \u201cThat's what I get :-(\u201d is the text I typed, not an output by the program):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Hello world!\nWe should have written: Hello world!\nThat's what I get :-(\nWe should have written: That's what I get :-(\n</code></pre>\n"}, {"tags": ["json", "rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "edited": false, "score": 0, "creation_date": 1511647281, "post_id": 47405883, "comment_id": 81937139, "body": "This is great. I&#39;m curious why you chose to use Owned/String/Value? Is this more efficient, or something that can be optimized more with more work? (I tried replacing it with &amp;str and ran into errors, and subsequently backed out of the change)"}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 5, "last_activity_date": 1511242419, "creation_date": 1511242419, "answer_id": 47405883, "question_id": 47405416, "link": "https://stackoverflow.com/questions/47405416/deserializing-key-and-value-lists-as-struct-from-json-using-serde/47405883#47405883", "title": "Deserializing key and value lists as struct from JSON using serde?", "body": "<p>Something like this could work. This is using a <code>deserialize_with</code> function which can be invoked from whatever struct contains this one.</p>\n\n<hr>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\n\nextern crate serde;\nextern crate serde_json;\n\nuse serde::de::{self, Deserialize, DeserializeOwned, Deserializer};\nuse serde_json::Value;\n\n#[derive(Deserialize, Debug)]\nstruct Spease(#[serde(deserialize_with = \"names_values\")] MyStruct);\n\n#[derive(Deserialize, Debug)]\n#[serde(rename_all = \"PascalCase\")]\nstruct MyStruct {\n    my_int: u64,\n    my_float: f64,\n    my_string: String,\n}\n\nfn names_values&lt;'de, T, D&gt;(deserializer: D) -&gt; Result&lt;T, D::Error&gt;\nwhere\n    T: DeserializeOwned,\n    D: Deserializer&lt;'de&gt;\n{\n    #[derive(Deserialize)]\n    struct Helper {\n        #[serde(rename = \"fieldNames\")]\n        names: Vec&lt;String&gt;,\n        #[serde(rename = \"fieldValues\")]\n        values: Vec&lt;Value&gt;,\n    }\n\n    // Deserialize a Vec&lt;String&gt; and Vec&lt;Value&gt;.\n    let nv = Helper::deserialize(deserializer)?;\n\n    // Zip them together into a map.\n    let pairs = Value::Object(nv.names.into_iter().zip(nv.values).collect());\n\n    // Deserialize the output type T.\n    T::deserialize(pairs).map_err(de::Error::custom)\n}\n\nfn main() {\n    let j = r#\"{\n                 \"fieldNames\": [\"MyInt\", \"MyFloat\", \"MyString\"],\n                 \"fieldValues\": [5, 10.0, \"hello\"]\n               }\"#;\n\n    println!(\"{:?}\", serde_json::from_str::&lt;Spease&gt;(j).unwrap());\n}\n</code></pre>\n"}], "owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 852, "favorite_count": 1, "accepted_answer_id": 47405883, "answer_count": 1, "score": 4, "last_activity_date": 1511272968, "creation_date": 1511239683, "last_edit_date": 1511272968, "question_id": 47405416, "link": "https://stackoverflow.com/questions/47405416/deserializing-key-and-value-lists-as-struct-from-json-using-serde", "title": "Deserializing key and value lists as struct from JSON using serde?", "body": "<p>I have JSON like this:</p>\n\n<pre><code>{\n    \"fieldNames\": [\"MyInt\", \"MyFloat\", \"MyString\"],\n    \"fieldValues\": [5, 10.0, \"hello\"],\n}\n</code></pre>\n\n<p>I want to deserialize into a struct like this:</p>\n\n<pre><code>#[derive(Deserialize)]\nstruct MyStruct {\n    my_int: u64,\n    my_float: f64,\n    my_string: String,\n}\n</code></pre>\n\n<p>Is there a way to do this with serde? Ideally I would want something like:</p>\n\n<pre><code>#[serde(keys=\"fieldNames\", values=\"fieldValues\")]\n</code></pre>\n"}, {"tags": ["reference", "rust", "lifetime"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 4, "creation_date": 1511208509, "post_id": 47399844, "comment_id": 81753855, "body": "<code>arg: &amp;&#39;a Foo&lt;&#39;a&gt;</code> is often (usually?) a mistake. Try <code>vec: &amp;mut Vec&lt;&amp;&#39;a str&gt;</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1511208998, "post_id": 47399844, "comment_id": 81754130, "body": "As trentcl says, by saying <code>vec: &amp;&#39;a mut Vec&lt;&amp;&#39;a str&gt;, txt: &amp;&#39;a str</code> you are requiring that all three references have a unified lifetime. In addition, since <code>vec</code> is mutable, you might be storing a reference <i>to itself</i> in the <code>Vec</code>. The most conservative approach means that the <code>Vec</code> can no longer be changed because doing so might cause a reallocation which would make the potentially self-saved reference invalid."}], "owner": {"reputation": 1873, "user_id": 1725553, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-CsRuoQmwqLo/AAAAAAAAAAI/AAAAAAAAAFM/hESpKGJTWZo/photo.jpg?sz=128", "display_name": "paddyg", "link": "https://stackoverflow.com/users/1725553/paddyg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 935, "favorite_count": 0, "closed_date": 1511208600, "answer_count": 0, "score": 1, "last_activity_date": 1511215805, "creation_date": 1511207018, "last_edit_date": 1511215805, "question_id": 47399844, "link": "https://stackoverflow.com/questions/47399844/lifetime-of-references-passed-to-function-stops-subsequent-access", "closed_reason": "Duplicate", "title": "Lifetime of references passed to function stops subsequent access", "body": "<p>I would like to be able to pass mutable objects by reference to a function to have it 'work on them' but am struggling. I tried <s>all</s> most feasible combinations of lifetimes in the function definition and this seemed to be the only one to compile (but missed the correct one pointed out below). I suspect I need to use a Rust 'wrapper' but can't find any examples of what I would think was a very standard thing to do.</p>\n\n<pre><code>fn add&lt;'a&gt;(vec: &amp;'a mut Vec&lt;&amp;'a str&gt;, txt: &amp;'a str) {\n    vec.push(txt);\n    for t in vec.iter() {\n        print!(\"{} \", t);\n    }\n}\n\nfn main() {\n    let mut st = vec![\"hello\"];\n    let words = vec![\"world\", \"again\", \"!\"];\n    //for txt in words.iter() { // what I wanted to do\n    //  add(&amp;mut st, txt);\n    //}\n    st.push(\",\"); // experiment works\n    st.push(\"cruel\");\n    {\n        add(&amp;mut st, words[0]); // but this borrows to the end of main(){}\n    } // instead of here\n      // add(&amp;mut st, words[1]); // so, for instance, this is a second borrow and not allowed\n}\n</code></pre>\n\n<p>EDIT - answered as below in comments.</p>\n\n<p>Thank you so much @Shepmaster and @trentcl, I had been singing the praises of the explicit and helpful rust debugger messages but failed to read</p>\n\n<pre><code>error[E0623]: lifetime mismatch\n --&gt; src/main.rs:3:12\n  |\n2 | fn add(vec: &amp;mut Vec&lt;&amp;str&gt;, txt: &amp;str) {\n  |                      ----        ---- these two types are declared with different lifetimes...\n3 |   vec.push(txt);\n  |            ^^^ ...but data from `txt` flows into `vec` here\n</code></pre>\n\n<p>When I first added the lifetime specs. I put them in initially for the two main arguments and only added the &lt;&amp;str> when I got a further error. As you say it should be done like this:</p>\n\n<pre><code>fn add&lt;'a&gt;(vec: &amp;mut Vec&lt;&amp;'a str&gt;, txt: &amp;'a str) {\n  vec.push(txt);\n}\n\nfn main() {\n  let mut st = vec![\"hello\"];\n  let words = vec![\"world\", \"again\", \"!\"];\n  for txt in words.iter() { // what I wanted to do\n    add(&amp;mut st, txt);\n  }\n  for txt in st.iter() {\n    print!(\"{} \", txt);\n  }\n}\n</code></pre>\n"}, {"tags": ["rust", "refactoring"], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1511463096, "post_id": 47399832, "comment_id": 81878366, "body": "The problem should actually be fixed as soon as <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction/\" rel=\"nofollow noreferrer\">non-lexical lifetimes</a> make it into the stable compiler."}], "tags": [], "owner": {"reputation": 1290, "user_id": 5499871, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206799318615183/picture?type=large", "display_name": "Izaak Weiss", "link": "https://stackoverflow.com/users/5499871/izaak-weiss"}, "is_accepted": true, "score": 0, "last_activity_date": 1511206964, "creation_date": 1511206964, "answer_id": 47399832, "question_id": 47399678, "link": "https://stackoverflow.com/questions/47399678/why-does-borrowing-prevent-inlining-a-function-call-in-array-access/47399832#47399832", "title": "Why does borrowing prevent inlining a function call in array access?", "body": "<p>While you are right that it would be possible in principle to extend the power of Rust's borrow checker to be able to do the analysis you've done, the borrow checker isn't currently capable of that kind of reasoning. </p>\n\n<p>As you can see in the error you are given, <code>v.push</code> borrows <code>v</code>, and after that, the expression <code>next(v[v.len() - 1])</code> is analyzed; but <code>v</code> is already borrowed by <code>v.push</code>, so the borrow checker fails.</p>\n\n<p>The borrow checker can be finicky, and obviously it can be improved, but as of now this is the expected behavior for the borrow checker, and the solution is to just separate out the indexing operation from the pushing operation, as you originally did. The compiler is smart enough to inline the operation (after it has made all of the borrow checks) anyway.</p>\n"}], "owner": {"reputation": 3, "user_id": 8973227, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tf8OJ.jpg?s=128&g=1", "display_name": "Bauxite", "link": "https://stackoverflow.com/users/8973227/bauxite"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "closed_date": 1511208092, "accepted_answer_id": 47399832, "answer_count": 1, "score": 0, "last_activity_date": 1511208167, "creation_date": 1511206365, "last_edit_date": 1511208167, "question_id": 47399678, "link": "https://stackoverflow.com/questions/47399678/why-does-borrowing-prevent-inlining-a-function-call-in-array-access", "closed_reason": "Duplicate", "title": "Why does borrowing prevent inlining a function call in array access?", "body": "<p>I'm writing some code in Rust for generating the first 500 numbers in the Collatz sequence of 46445645645564584.</p>\n\n<pre><code>use std::fmt::Debug;\n\n//Calculate the first 500 numbers in the Collatz sequence of 46445645645564584\n\nfn main() {\n    let mut v = vec![46445645645564584];\n\n    for _ in 0..500 {\n        let last = v[v.len() - 1];\n        v.push(next(last));\n    }\n\n    print_array(&amp;v);\n}\n\nfn next(n: i64) -&gt; i64 {\n    if n % 2 == 0 {\n        n / 2\n    } else {\n        3 * n + 1\n    }\n}\n\nfn print_array&lt;T: Debug&gt;(v: &amp;[T]) {\n    for x in v {\n        println!(\"{:?}\", x);\n    }\n}\n</code></pre>\n\n<p>This works, but I want to inline the variable <code>last</code>:</p>\n\n<pre><code>for _ in 0..500 {\n    v.push(next(v[v.len() - 1]));\n}\n</code></pre>\n\n<p>In my eyes, this should not change the semantics of the program, since I've simply inlined a variable. However, the Rust compiler gives the following error when I try to compile this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n --&gt; src/main.rs:9:21\n  |\n9 |         v.push(next(v[v.len() - 1]));\n  |         -           ^              - mutable borrow ends here\n  |         |           |\n  |         |           immutable borrow occurs here\n  |         mutable borrow occurs here\n\nerror[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n --&gt; src/main.rs:9:23\n  |\n9 |         v.push(next(v[v.len() - 1]));\n  |         -             ^            - mutable borrow ends here\n  |         |             |\n  |         |             immutable borrow occurs here\n  |         mutable borrow occurs here\n</code></pre>\n\n<p>As I see it, the immutable borrow of <code>v</code> should be dropped right when the value <code>v[v.len() - 1]</code> is computed and passed to <code>next()</code>. That means the mutable borrow of <code>v</code> would be successful in the outermost call to <code>v.push()</code>, since the previous borrow was dropped. Am I seeing this wrong? Or is this a compiler bug?</p>\n\n<p>I am aware you could also do this with iterators/generators, but I'd like to know why this is happening in this specific piece of code, since this might be a problem I'll run into again at some point.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511202952, "post_id": 47398753, "comment_id": 81750771, "body": "What piece of memory do you think all of the <code>&amp;&#39;a str</code>s in <code>res</code> refer to?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1511203802, "post_id": 47398753, "comment_id": 81751251, "body": "TL;DR the duplicates \u2014 <code>remove_comments</code> creates a new <code>Vec</code> which is owned by the function. <code>parse_pdl</code> returns a bunch of <code>PdlItem</code>s that point at the memory inside that <code>Vec</code>. You then try to return those references from the function, although the <code>Vec</code> will be dropped when the function exits. In other languages, this would cause a segfault, allow for arbitrary code execution, eat your laundry, etc. Instead, you need to (a) return owned data structures (<code>String</code> instead of <code>&amp;str</code>) or (b) pass in <code>parsable_buffer</code> from outside of this function."}, {"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511210920, "post_id": 47398753, "comment_id": 81755143, "body": "Oh, it only dawned on me after quite a few read through&#39;s of your explanation. That&#39;s was not obvious to me"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1511229974, "post_id": 47398753, "comment_id": 81761928, "body": "Ownership semantics in Rust definitely take some time to get used to, but they really are its greatest strength."}, {"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1511266764, "post_id": 47398753, "comment_id": 81779189, "body": "Though this all worked and I converted PdlItem to having <code>owned</code> types; what I thought would be that everything would reference <code>buffer &amp;[u8]</code> and thus <code>parsable_buffer</code> would reference the original buffer. Maybe there&#39;s a more efficient way - a new question?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1511282627, "post_id": 47398753, "comment_id": 81790509, "body": "@Ronnie That&#39;s possible, but not as long as <code>parsable_buffer</code> is a <code>Vec&lt;u8&gt;</code>, which owns its contents; you need to modify <code>remove_comments</code> so that it returns some type that borrows from <code>buffer</code>, like <code>Vec&lt;&amp;&#39;a [u8]&gt;</code> or perhaps a custom <code>struct ParseableBuffer&lt;&#39;a&gt;</code> that implements <code>Iterator&lt;Item = u8&gt;</code>. Obviously this requires changes to <code>parse_pdl</code> as well. (And yes, this would definitely be a new question.)"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 77, "favorite_count": 0, "closed_date": 1511203504, "answer_count": 0, "score": 0, "last_activity_date": 1511203557, "creation_date": 1511202439, "last_edit_date": 1511202870, "question_id": 47398753, "link": "https://stackoverflow.com/questions/47398753/why-does-a-discarded-local-variable-need-a-longer-lifetime", "closed_reason": "Duplicate", "title": "Why does a discarded local variable need a longer lifetime?", "body": "<p>I'm using a nom parser to return a <code>Vec&lt;PdlItem&gt;</code>. I don't understand why the <code>parsable_buffer</code> needs to live beyond the last line; or how to get around the error. <code>res</code> owns the <code>Vec&lt;PdlItem&gt;</code> so my expectation is that it would be moved into the result.</p>\n\n<p>I have no use for <code>parsable_buffer</code>, what have I missed?</p>\n\n<pre><code>pub enum PdlError {\n    ParseError,\n}\n\n#[derive(Debug, PartialEq, Clone)]\npub enum PdlItem&lt;'a&gt; {\n    FOO,\n    STR(&amp;'a str, Option&lt;&amp;'a str&gt;, &amp;'a str),\n    NUM(&amp;'a str, Option&lt;&amp;'a str&gt;, f32),\n    VNUM(&amp;'a str, Option&lt;&amp;'a str&gt;, Vec&lt;f32&gt;),\n    VSTR(&amp;'a str, Option&lt;&amp;'a str&gt;, Vec&lt;&amp;'a str&gt;),\n}\n\npub fn pdl_to_tokens(buffer: &amp;[u8]) -&gt; Result&lt;Vec&lt;PdlItem&gt;, PdlError&gt; {\n    // Remove comments\n    let parsable_buffer: Vec&lt;u8&gt; = remove_comments(buffer);\n    let res: IResult&lt;&amp;[u8], Vec&lt;PdlItem&gt;&gt; = parse_pdl(&amp;parsable_buffer);\n    match res {\n        IResult::Done(_, o) =&gt; {\n            println!(\"Parsed ok {}\", o.len());\n            Ok(o.to_owned())\n        } // Also tried .clone()\n        IResult::Incomplete(i) =&gt; {\n            println!(\"{:?}\", i);\n            Err(PdlError::ParseError)\n        }\n        IResult::Error(e) =&gt; {\n            println!(\"Error {}\", e);\n            Err(PdlError::ParseError)\n        }\n    }\n}\n</code></pre>\n\n<p>The error is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `parsable_buffer` does not live long enough\n  --&gt; src\\pdl_serialiser.rs:24:26\n   |\n24 |     let res = parse_pdl(&amp;parsable_buffer);\n   |                          ^^^^^^^^^^^^^^^ does not live long enough\n...\n31 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 21:1...\n  --&gt; src\\pdl_serialiser.rs:21:1\n   |\n21 | / pub fn pdl_to_tokens(buffer : &amp;[u8]) -&gt; Result&lt;Vec&lt;PdlItem&gt;,PdlError&gt; {\n22 | |     // Remove comments\n23 | |     let parsable_buffer = remove_comments(buffer);\n24 | |     let res = parse_pdl(&amp;parsable_buffer);\n...  |\n30 | |     }\n31 | | }\n   | |_^\n</code></pre>\n"}, {"tags": ["rust", "sfml"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511202307, "post_id": 47398497, "comment_id": 81750436, "body": "Please do not attempt to &quot;interpret&quot; or &quot;describe&quot; the error message for us. Paste the <i>entire</i> thing. That way it has everything important (error code, the lines that point exactly where the problem is, etc.)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1511202714, "creation_date": 1511202714, "answer_id": 47398823, "question_id": 47398497, "link": "https://stackoverflow.com/questions/47398497/lifetime-specifiers-and-generics-in-sfml/47398823#47398823", "title": "Lifetime specifiers and generics in SFML", "body": "<blockquote>\n  <p><code>the trait bound `&amp;'a mut T: sfml::graphics::Drawable` is not satisfied</code></p>\n</blockquote>\n\n<p>That's because it isn't \u2014 all you have required is that <code>T</code> implements <code>Drawable</code>:</p>\n\n<pre><code>T: Shape&lt;'a&gt; + Drawable,\n</code></pre>\n\n<p><code>T</code>, <code>&amp;T</code> and <code>&amp;mut T</code> are all different types; just because <code>T</code> implements a trait doesn't mean that <code>&amp;mut T</code> does. If you need to place a restriction on the mutable reference to a <code>T</code>, you can:</p>\n\n<pre><code>fn render_screen&lt;'a, T&gt;(window: &amp;mut RenderWindow, chip: &amp;mut Chip, rect: &amp;'a mut T)\nwhere\n    T: Shape&lt;'a&gt;,\n    for &lt;'a&gt; &amp;'a mut T: Drawable,\n</code></pre>\n\n<p>You might also be able to accept a <code>T</code> with the appropriate bounds:</p>\n\n<pre><code>fn render_screen&lt;'a, T&gt;(window: &amp;mut RenderWindow, chip: &amp;mut Chip, mut rect: T)\nwhere\n    T: Shape&lt;'a&gt; + Drawable,\n</code></pre>\n\n<p>and then just pass in a <code>&amp;mut Foo</code> wherever it is called.</p>\n"}], "owner": {"reputation": 192, "user_id": 6416174, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/1a7fde54d0dcc8996550ae912e2edafa?s=128&d=identicon&r=PG&f=1", "display_name": "AdaShoelace", "link": "https://stackoverflow.com/users/6416174/adashoelace"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 49, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1511202750, "creation_date": 1511201467, "last_edit_date": 1511202750, "question_id": 47398497, "link": "https://stackoverflow.com/questions/47398497/lifetime-specifiers-and-generics-in-sfml", "title": "Lifetime specifiers and generics in SFML", "body": "<p>I'm trying to wrap my head around trait bounds and lifetime specifiers but I do not really get what is wrong here.</p>\n\n<pre><code>fn render_screen&lt;'a, T&gt;(window: &amp;mut RenderWindow, chip: &amp;mut Chip, rect: &amp;'a mut T)\nwhere\n    T: Shape&lt;'a&gt; + Drawable,\n{\n    window.clear(&amp;Color::BLACK);\n    for x in 0..SCREEN_COLUMNS {\n        for y in 0..SCREEN_ROWS {\n            if chip.vid_mem[y][x] == 1 {\n                let x_pos = (x * SCALE) as f32;\n                let y_pos = (y * SCALE) as f32;\n                &amp;mut rect.set_position((x_pos, y_pos));\n                window.draw(&amp;rect);\n            }\n        }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;'a mut T: sfml::graphics::Drawable` is not satisfied\n   --&gt; src/main.rs:114:29\n    |\n114 |                 window.draw(&amp;rect);\n    |                             ^^^^^ the trait `sfml::graphics::Drawable` is not implemented for `&amp;'a mut T`\n    |\n    = note: required for the cast to the object type `sfml::graphics::Drawable`\n</code></pre>\n\n<p>I don't really know how to specify my question any more than that since I have only been writing Rust for about 3 weeks and am still pretty new to the language.</p>\n"}, {"tags": ["python", "rust"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1511202885, "post_id": 47398338, "comment_id": 81750737, "body": "Have you tried <code>PyBytes::new(_py, &amp;entry.0).into_object()</code>? Seems like that is the suggested way to convert to an object from <a href=\"https://dgrunwald.github.io/rust-cpython/doc/cpython/struct.PyBytes.html\" rel=\"nofollow noreferrer\">dgrunwald.github.io/rust-cpython/doc/cpython/&hellip;</a>"}, {"owner": {"reputation": 86, "user_id": 8715741, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7537421ae6f03231c0b593a058c1955b?s=128&d=identicon&r=PG&f=1", "display_name": "TimOrme", "link": "https://stackoverflow.com/users/8715741/timorme"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1511290516, "post_id": 47398338, "comment_id": 81795393, "body": "I&#39;m very new to rust, so you&#39;ll have to excuse my ignorance. I had found that method, but when I tried to use it, the compiler complained it wasn&#39;t available.  Do I have to import something extra?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1511291388, "post_id": 47398338, "comment_id": 81795889, "body": "You may need to <code>use cpython::PythonObject</code> for the trait&#39;s methods to be available."}], "owner": {"reputation": 86, "user_id": 8715741, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7537421ae6f03231c0b593a058c1955b?s=128&d=identicon&r=PG&f=1", "display_name": "TimOrme", "link": "https://stackoverflow.com/users/8715741/timorme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 311, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1511202102, "creation_date": 1511200890, "last_edit_date": 1511202102, "question_id": 47398338, "link": "https://stackoverflow.com/questions/47398338/how-do-i-return-a-list-of-bytes-in-rust-cpython", "title": "How do I return a list of bytes in rust-cpython?", "body": "<p>I'm trying to return a list of bytes to be used in Python: </p>\n\n<pre><code>fn example(_py: Python) -&gt; PyResult&lt;PyList&gt; {\n    let result = some_function();\n\n    let elements_raw = vec![];\n\n    for entry in result {\n        elements_raw.push(PyBytes::new(_py, &amp;entry.0));\n    }\n\n    let x: &amp;[PyBytes] = &amp;elements_raw;\n    let py_list = PyList::new(_py, x);\n\n\n    Ok(py_list)\n}\n</code></pre>\n\n<p>However, this line complains because <code>PyList</code> requires a <code>PyObject</code>:</p>\n\n<pre><code>let py_list = PyList::new(_py, x);\n</code></pre>\n\n<p>Is there any way to cast a <code>PyBytes</code> into a <code>PyObject</code>? Is there some better way to return a list of bytes?</p>\n"}, {"tags": ["rust", "string-formatting", "traits"], "comments": [{"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "edited": false, "score": 1, "creation_date": 1511199720, "post_id": 47397641, "comment_id": 81749041, "body": "<a href=\"https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.precision\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/fmt/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1511202018, "creation_date": 1511202018, "answer_id": 47398650, "question_id": 47397641, "link": "https://stackoverflow.com/questions/47397641/how-can-i-access-the-specified-precision-when-implementing-debug/47398650#47398650", "title": "How can I access the specified precision when implementing Debug?", "body": "<p>As mentioned in the comments, use <a href=\"https://doc.rust-lang.org/std/fmt/struct.Formatter.html#method.precision\" rel=\"nofollow noreferrer\"><code>Formatter::precision</code></a>. There is already an example of this <a href=\"https://doc.rust-lang.org/std/fmt/index.html\" rel=\"nofollow noreferrer\">in the documentation</a>:</p>\n\n<pre><code>impl fmt::Binary for Vector2D {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let magnitude = (self.x * self.x + self.y * self.y) as f64;\n        let magnitude = magnitude.sqrt();\n\n        // Respect the formatting flags by using the helper method\n        // `pad_integral` on the Formatter object. See the method\n        // documentation for details, and the function `pad` can be used\n        // to pad strings.\n        let decimals = f.precision().unwrap_or(3);\n        let string = format!(\"{:.*}\", decimals, magnitude);\n        f.pad_integral(true, \"\", &amp;string)\n    }\n}\n</code></pre>\n\n<p>For your case:</p>\n\n<pre><code>impl fmt::Debug for Interval {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let precision = f.precision().unwrap_or(3);\n        write!(f, \"[{:.*?} {:.*?}]\",  precision, self.min, precision, self.max)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 163, "favorite_count": 0, "accepted_answer_id": 47398650, "answer_count": 1, "score": -1, "last_activity_date": 1511202018, "creation_date": 1511198483, "last_edit_date": 1511201767, "question_id": 47397641, "link": "https://stackoverflow.com/questions/47397641/how-can-i-access-the-specified-precision-when-implementing-debug", "title": "How can I access the specified precision when implementing Debug?", "body": "<p>I have a simple structure for holding intervals of <code>f64</code>s:</p>\n\n<pre><code>pub struct Interval {\n    pub min: f64,\n    pub max: f64\n}\n</code></pre>\n\n<p>This code prints with hardcoded 3 decimal places:</p>\n\n<pre><code>impl fmt::Debug for Interval {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"[{:.3?} {:.3?}]\", self.min, self.max)\n    }\n}\n</code></pre>\n\n<p>I want to support <code>println!(\"{:.6}\", my_interval)</code> to be able to print with desired precision. </p>\n"}, {"tags": ["process", "rust", "output"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511194480, "post_id": 47396296, "comment_id": 81745891, "body": "Idiomatic Rust style for variables is <code>snake_case</code>, <code>PascalCase</code> should only be used for types, and <code>camelCase</code> is not used in Rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511194910, "post_id": 47396296, "comment_id": 81746150, "body": "Does <a href=\"https://stackoverflow.com/q/31576555/155423\">stackoverflow.com/q/31576555/155423</a>, <a href=\"https://stackoverflow.com/q/21615188/155423\">stackoverflow.com/q/21615188/155423</a>, <a href=\"https://stackoverflow.com/q/43949612/155423\">stackoverflow.com/q/43949612/155423</a>, or <a href=\"https://stackoverflow.com/q/34611742/155423\">stackoverflow.com/q/34611742/155423</a> answer your question?"}, {"owner": {"reputation": 822, "user_id": 3436866, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQBgz.jpg?s=128&g=1", "display_name": "Psychemaster", "link": "https://stackoverflow.com/users/3436866/psychemaster"}, "edited": false, "score": 1, "creation_date": 1511195349, "post_id": 47396296, "comment_id": 81746392, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/21615188/how-to-send-input-to-a-program-through-stdin-in-rust\">How to send input to a program through stdin in Rust</a>"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1511219476, "post_id": 47396296, "comment_id": 81759023, "body": "<code>cmd_output.stdout(null())</code> specifies that you are not interested in the process&#39;s stdout. As a result, <code>fine.stdout</code> is None; this is a feature."}], "owner": {"reputation": 21, "user_id": 8972163, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4ce48742d0c9d56b85618331fc6af9ea?s=128&d=identicon&r=PG&f=1", "display_name": "MKay", "link": "https://stackoverflow.com/users/8972163/mkay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 286, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1511532641, "creation_date": 1511194191, "last_edit_date": 1511532641, "question_id": 47396296, "link": "https://stackoverflow.com/questions/47396296/run-an-executable-and-process-its-standard-output-while-running", "title": "Run an executable and process its standard output while running", "body": "<p>I would like to run a process and process the standard output of it while the process is running, but I'm not sure how to do it.</p>\n\n<pre><code>fn execute_command(&amp;mut self){\n        let (exec_cmd, cmd_args) = self.command_as_arguments.split_at(1);\n\n        let mut cmd_output = Command::new(exec_cmd[0]);\n        // std::process::Command = cmd_output\n\n        for arg in cmd_args{\n            cmd_output.arg(arg);\n        }\n\n//        let std_out_handle = cmd_output.stdout(Stdio::null());\n        let std_out_handle = cmd_output.stdout(Stdio::piped());\n//        let std_out_handle = cmd_output.stdout(Stdio::inherit());\n\n        let ok_cprocess_handle = std_out_handle.spawn().unwrap();\n        //process::Child = ok_cprocess_handle\n\n\n        let mut ok_cprocess_handle_stdout = ok_cprocess_handle.stdout.unwrap();\n//        println!(\"CHILD STDOUT={:?}\",ok_cprocess_handle_stdout);\n\n        let mut output_string = String::new();\n        ok_cprocess_handle_stdout.read_to_string(&amp;mut output_string);\n        println!(\"CHILD STRING STDOUT={:?}\",output_string);\n\n        let mut output_vec = Vec::new();\n        ok_cprocess_handle_stdout.read_to_end(&amp;mut output_vec);\n        println!(\"CHILD VEC STDOUT={:?}\",output_vec);\n    }\n</code></pre>\n\n<p>I edited and reduced the code, but when I run the program I get still an empty string if I try to read the output:  <code>ok_cprocess_handle_stdout.read_to_string(&amp;mut output_string);\n       println!(\"CHILD STRING STDOUT={:?}\",output_string);</code></p>\n\n<p>I am expecting read some output at that point, but what am I missing?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": false, "score": 3, "last_activity_date": 1511190784, "creation_date": 1511190784, "answer_id": 47395172, "question_id": 47395171, "link": "https://stackoverflow.com/questions/47395171/how-to-update-or-insert-on-a-vec/47395172#47395172", "title": "How to update-or-insert on a Vec?", "body": "<p>It seems like the best way to do this is to use the index instead of an iterator.</p>\n\n<pre><code>match pivots.iter().position(|ref p| key &lt;= p.min_key) {\n    Some(i) =&gt; {\n        // If there is one, insert into it and update the pivot key\n        let pivot = &amp;mut pivots[i];\n        pivot.min_key = key;\n        pivot.child.insert(key, value)\n    },\n    // o/w, insert a new leaf at the end\n    None =&gt; pivots.push(Pivot /* ... */)\n}\n</code></pre>\n\n<p>This way, there's no need for <code>iter_mut</code>. I'm still not entirely happy with this alternative, because it means using an explicit index instead of an iterator. This is fine for a <code>Vec</code> but wouldn't work for a container with a structure that doesn't have O(1) random-access indexing.</p>\n\n<p>I'd accept a different answer that lets me avoid using an index.</p>\n"}, {"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1511282107, "post_id": 47407580, "comment_id": 81790126, "body": "The separate-function option is already considered in the question. Maybe the answer could provide source code for the first proposed solution, where match produces a <code>bool</code>?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1511334683, "post_id": 47407580, "comment_id": 81811823, "body": "It might be my mistake that I often skip over long texts in questions and don&#39;t realize that they already contain an (unwanted) answer to the question. otoh answers don&#39;t belong there, so I don&#39;t feel guilty about it in this case. And I think a separate function is actually easier to understand."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 8, "last_activity_date": 1556370943, "last_edit_date": 1556370943, "creation_date": 1511249566, "answer_id": 47407580, "question_id": 47395171, "link": "https://stackoverflow.com/questions/47395171/how-to-update-or-insert-on-a-vec/47407580#47407580", "title": "How to update-or-insert on a Vec?", "body": "<p>There is a merged RFC <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md#problem-case-2-conditional-control-flow\" rel=\"nofollow noreferrer\">\"non-lexical lifetimes\"</a> which solves this in the long run. Using the non-lexical lifetimes in Rust 2018, available in Rust 1.31, your code works as-is:</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f11a2a6272e18648e9aa6965bdf89c84\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>use std::collections::HashMap;\n\npub struct Pivot {\n    pub min_key: u64,\n    pub child: HashMap&lt;u64, ()&gt;,\n}\n\nfn update_or_append(pivots: &amp;mut Vec&lt;Pivot&gt;, key: u64, value: ()) {\n    match pivots.iter_mut().find(|ref p| key &lt;= p.min_key) {\n        Some(pivot) =&gt; {\n            // If there is one, insert into it and update the pivot key\n            pivot.min_key = key;\n            pivot.child.insert(key, value);\n            return;\n        }\n        // o/w insert a new leaf at the end\n        None =&gt; {\n            let mut m = HashMap::new();\n            m.insert(key, value);\n            pivots.push(Pivot {\n                min_key: key,\n                child: m,\n            });\n        }\n    }\n}\n\nfn main() {\n    let mut pivots = Vec::new();\n    update_or_append(&amp;mut pivots, 100, ());\n}\n</code></pre>\n\n<p>If this <strong>doesn't</strong> work for your code, check out</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38023871/returning-a-reference-from-a-hashmap-or-vec-causes-a-borrow-to-last-beyond-the-s\">Returning a reference from a HashMap or Vec causes a borrow to last beyond the scope it&#39;s in?</a></li>\n</ul>\n\n<hr>\n\n<p>Before Rust 2018, you can workaround it with some additional control flow handling.</p>\n\n<p>You could have your match produce a <code>bool</code> value whether the update happened or not, and have a conditional block below using that value to append.  I consider putting the \"update-or-append\" logic into a separate function (using <code>return</code> after the update) the more idiomatic approach:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e66e877cc3b900c2babfae721b9b4a61&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>use std::collections::HashMap;\n\npub struct Pivot {\n    pub min_key: u64,\n    pub child: HashMap&lt;u64, ()&gt;,\n}\n\nfn update_or_append(pivots: &amp;mut Vec&lt;Pivot&gt;, key: u64, value: ()) {\n    if let Some(pivot) = pivots.iter_mut().find(|ref p| key &lt;= p.min_key) {\n        // If there is one, insert into it and update the pivot key\n        pivot.min_key = key;\n        pivot.child.insert(key, value);\n        return;\n    }\n    // otherwise insert a new leaf at the end\n    let mut m = HashMap::new();\n    m.insert(key, value);\n    pivots.push(Pivot {\n        min_key: key,\n        child: m,\n    });\n}\n\nfn main() {\n    let mut pivots = Vec::new();\n    update_or_append(&amp;mut pivots, 100, ());\n}\n</code></pre>\n\n<p>Using a <code>bool</code> to track whether the update happened:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d53208db6b9ccd2c2fd95c002226f5b8&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>use std::collections::HashMap;\n\npub struct Pivot {\n    pub min_key: u64,\n    pub child: HashMap&lt;u64, ()&gt;,\n}\n\nfn update_or_append(pivots: &amp;mut Vec&lt;Pivot&gt;, key: u64, value: ()) {\n    let updated = match pivots.iter_mut().find(|ref p| key &lt;= p.min_key) {\n        Some(pivot) =&gt; {\n            // If there is one, insert into it and update the pivot key\n            pivot.min_key = key;\n            pivot.child.insert(key, value);\n            true\n        }\n        // o/w insert a new leaf at the end below\n        None =&gt; false,\n    };\n    if !updated {\n        let mut m = HashMap::new();\n        m.insert(key, value);\n        pivots.push(Pivot {\n            min_key: key,\n            child: m,\n        });\n    }\n}\n\nfn main() {\n    let mut pivots = Vec::new();\n    update_or_append(&amp;mut pivots, 100, ());\n}\n</code></pre>\n"}], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2197, "favorite_count": 0, "accepted_answer_id": 47407580, "answer_count": 2, "score": 6, "last_activity_date": 1556370943, "creation_date": 1511190784, "question_id": 47395171, "link": "https://stackoverflow.com/questions/47395171/how-to-update-or-insert-on-a-vec", "title": "How to update-or-insert on a Vec?", "body": "<p>I'm writing a data structure in Rust. It contains a <code>Vec</code> of key-value pairs. When inserting into the structure, I need to find a matching key and update both the key and the value (which is actually a child pointer). The code looks a bit like this, where <code>pivots</code> is a <code>ref mut</code> to <code>Vec&lt;Pivot&gt;</code> and <code>Pivot</code> is just a struct with two fields:</p>\n\n<pre><code>match pivots.iter_mut().find(|ref p| key &lt;= p.min_key) { // first mutable borrow\n    Some(ref mut pivot) =&gt; {\n        // If there is one, insert into it and update the pivot key\n        pivot.min_key = key;\n        pivot.child.insert(key, value) // recursive call\n    },\n    // o/w, insert a new leaf at the end\n    None =&gt; pivots.push(Pivot /* ... */) // second mutable borrow\n}\n</code></pre>\n\n<p>But there's a problem. Even though I don't use the mutable iterator in the second arm of the <code>match</code>, the borrow checker complains that I \"cannot borrow <code>*pivots</code> as mutable more than once at a time\".</p>\n\n<p>This makes perfect sense to me, because the first borrow is still in scope, even though it's not used in that case of the <code>match</code>. It's a little inconvenient: a cleverer checker could certainly tell that the borrows are non-overlapping. I've seen someone online advising to use early-return to avoid the problem, like this:</p>\n\n<pre><code>match pivots.iter_mut().find(|ref p| key &lt;= p.min_key) {\n    Some(ref mut pivot) =&gt; {\n        pivot.min_key = key;\n        pivot.child.insert(key, value);\n        return\n    },\n    None =&gt; ()\n};\npivots.push(Pivot /* ... */)\n</code></pre>\n\n<p>but this seems hard-to-understand, especially when it means breaking out this code into its own function to allow the <code>return</code>. Is there a more idiomatic way to perform the update-or-insert operation?</p>\n"}, {"tags": ["rust", "traits", "smart-pointers"], "answers": [{"comments": [{"owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "edited": false, "score": 0, "creation_date": 1511140459, "post_id": 47383535, "comment_id": 81720322, "body": "Thank you! That makes a lot of sense. The one part that I am a little fuzzy on: What is the purpose of <code>impl&lt;&#39;a, L, E&gt; Listener&lt;E&gt; for &amp;&#39;a L</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "edited": false, "score": 0, "creation_date": 1511143253, "post_id": 47383535, "comment_id": 81720984, "body": "@Eadword I guess I left that in there during debugging; it doesn&#39;t seem to be needed for the present code."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1511137501, "creation_date": 1511137501, "answer_id": 47383535, "question_id": 47382154, "link": "https://stackoverflow.com/questions/47382154/how-do-you-cast-trait-objects-with-an-arcmutex/47383535#47383535", "title": "How do you cast trait objects with an Arc&lt;Mutex&lt;...&gt;&gt;?", "body": "<blockquote>\n  <p>Since an <code>Arc</code> is a pointer to data, from my understanding, it should be able to point to a <code>Listener&lt;String&gt;</code> </p>\n</blockquote>\n\n<p>Yes, that's true. I believe your problem is that you are (accidentally?) requiring that you have a <code>Mutex&lt;Listener&lt;String&gt;&gt;</code> at some point. This is <em>not</em> valid to have because the value inside the <code>Mutex</code> isn't behind a pointer, thus making the whole type unsized.</p>\n\n<p>It's fine to have an <code>Arc&lt;Mutex&lt;Listener&lt;String&gt;&gt;&gt;</code> though.</p>\n\n<p>Instead, I'd implement the trait for a <code>Mutex</code> of <em>any</em> kind that implements the same trait. I'd do the same for references and <code>Box</code>ed trait objects of the trait as well. In all cases, I'd remove the <code>Sized</code> bound to allow for trait objects:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\ntrait Event: Send + Sync + 'static {}\nimpl Event for String {}\n\ntrait Listener&lt;E: Event&gt; {\n    fn notify(&amp;self, event: &amp;E);\n}\n\nimpl&lt;L, E&gt; Listener&lt;E&gt; for Mutex&lt;L&gt;\nwhere\n    L: ?Sized + Listener&lt;E&gt;,\n    E: Event,\n{\n    fn notify(&amp;self, event: &amp;E) {\n        self.lock().unwrap().notify(event);\n    }\n}\n\nimpl&lt;'a, L, E&gt; Listener&lt;E&gt; for &amp;'a L\nwhere\n    L: ?Sized + Listener&lt;E&gt;,\n    E: Event,\n{\n    fn notify(&amp;self, event: &amp;E) {\n        (**self).notify(event);\n    }\n}\n\nstruct Console;\nimpl Listener&lt;String&gt; for Console {\n    fn notify(&amp;self, event: &amp;String) {\n        println!(\"{}\", event);\n    }\n}\n\nfn do_stuff(l: Arc&lt;Listener&lt;String&gt;&gt;) {\n    let m = String::from(\"I did stuff!\");\n    l.notify(&amp;m);\n}\n\nfn main() {\n    let l: Arc&lt;Mutex&lt;Console&gt;&gt; = Arc::new(Mutex::new(Console));\n    let l2 = Arc::clone(&amp;l) as Arc&lt;Listener&lt;String&gt;&gt;;\n    let l3 = Arc::clone(&amp;l) as Arc&lt;Listener&lt;String&gt;&gt;;\n\n    do_stuff(l);\n    do_stuff(l2);\n\n    let m = String::from(\"Something else...\");\n    l3.notify(&amp;m);\n}\n</code></pre>\n"}], "owner": {"reputation": 112, "user_id": 4404257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/51a5b1f67723ecf3d39704d89e608295?s=128&d=identicon&r=PG&f=1", "display_name": "Eadword", "link": "https://stackoverflow.com/users/4404257/eadword"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1680, "favorite_count": 0, "accepted_answer_id": 47383535, "answer_count": 1, "score": 2, "last_activity_date": 1511137501, "creation_date": 1511126591, "last_edit_date": 1511130042, "question_id": 47382154, "link": "https://stackoverflow.com/questions/47382154/how-do-you-cast-trait-objects-with-an-arcmutex", "title": "How do you cast trait objects with an Arc&lt;Mutex&lt;...&gt;&gt;?", "body": "<p>I am trying to call a function which takes a pointer to a <code>Mutex</code> of some trait object, and I want to be able to implement the trait for the <code>Mutex</code> of that trait object to allow treating the <code>Mutex</code> as an instance of the trait object for abstraction.</p>\n\n<p>To give an example of this, imagine an <code>Event</code> listener setup as such:</p>\n\n<pre><code>use std::sync::{Arc, Mutex, Weak};\n\n// Define a simple event\ntrait Event: Send + Sync + 'static {}\nimpl Event for String {}\n\n\n// Define the listener interface\ntrait Listener&lt;E: Event&gt; {\n    fn notify(&amp;self, event: &amp;E);\n}\n\n// Extend the listener interface to listenrs wrapped by a mutex\nimpl&lt;E: Event&gt; Listener&lt;E&gt; for Mutex&lt;Listener&lt;E&gt;&gt; {\n    fn notify(&amp;self, event: &amp;E) {\n        self.lock().unwrap().notify(event);\n    }\n}\n\n\n// Contrived thing to listen for messages\nstruct Console;\nimpl Listener&lt;String&gt; for Console {\n    fn notify(&amp;self, event: &amp;String) {\n        println!(\"{}\", event);\n    }\n}\n\n\n// Simple function which may be called asynchronously and then sends a message\n// when it is complete\nfn do_stuff(l: Arc&lt;Listener&lt;String&gt;&gt;) {\n    // Would normally cast to a Weak&lt;...&gt; and then store in a list of listneners\n    // For some sort of object\n    let m = String::from(\"I did stuff!\");\n    l.notify(&amp;m);\n}\n\nfn main() {\n    let l: Arc&lt;Mutex&lt;Console&gt;&gt; = Arc::new(Mutex::new(Console));\n\n    let t1 = Arc::clone(&amp;l) as Arc&lt;Mutex&lt;Listener&lt;String&gt;&gt;&gt;; //this part is ok\n    // Here is where we run into issues... This *should* be equvlient to\n    // do_stuff(t1), but with the corercion explicit\n    let t2 = Arc::clone(&amp;t1) as Arc&lt;Listener&lt;String&gt;&gt;;\n    do_stuff(t2);\n\n    // This is a simple, working example of it interpreting a Mutex&lt;Listener&lt;E&gt;&gt;\n    // as just a Listener&lt;E&gt;\n    let m = String::from(\"Somthing else...\");\n    (l as Arc&lt;Mutex&lt;Listener&lt;String&gt;&gt;&gt;).notify(&amp;m);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=e73ccb2f4966aea6d1dfd2427c3e8c7f&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<p>The issue is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Listener&lt;std::string::String&gt;: std::marker::Sized` is not satisfied in `std::sync::Mutex&lt;Listener&lt;std::string::String&gt;&gt;`\n  --&gt; src/main.rs:45:14\n   |\n45 |     let t2 = Arc::clone(&amp;t1) as Arc&lt;Listener&lt;String&gt;&gt;;\n   |              ^^^^^^^^^^^^^^^ `Listener&lt;std::string::String&gt;` does not have a constant size known at compile-time\n   |\n   = help: within `std::sync::Mutex&lt;Listener&lt;std::string::String&gt;&gt;`, the trait `std::marker::Sized` is not implemented for `Listener&lt;std::string::String&gt;`\n   = note: required because it appears within the type `std::sync::Mutex&lt;Listener&lt;std::string::String&gt;&gt;`\n   = note: required for the cast to the object type `Listener&lt;std::string::String&gt;`\n</code></pre>\n\n<p>Why this is the case? Since an <code>Arc</code> is a pointer to data, from my understanding, it should be able to point to a <code>Listener&lt;String&gt;</code> which happens to be a <code>Listener&lt;Mutex&lt;String&gt;&gt;</code>.</p>\n\n<p>I see at least two ways to avoid this, the first is to simply <code>impl Listener&lt;String&gt; for Mutex&lt;Listener&lt;String&gt;&gt;</code>, however, in the actual code this may require interdependence which should be avoided because the trait can only be implemented where the trait or structure is defined (and <code>Mutex</code> is not defined in my code).</p>\n\n<p>The second is to move the <code>Mutex</code> into the <code>Listener</code> object so the caller does not need to cast it at all. This would work, and may be a better solution. Despite this, I am curious as to either why the casting proposed does not work and or what can be changed to make it work.</p>\n"}, {"tags": ["rust", "nom"], "answers": [{"comments": [{"owner": {"reputation": 35530, "user_id": 196844, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/20232ad0698d2ac6c0f127d5eb850254?s=128&d=identicon&r=PG", "display_name": "Daniel Trebbien", "link": "https://stackoverflow.com/users/196844/daniel-trebbien"}, "edited": false, "score": 0, "creation_date": 1511553997, "post_id": 47472839, "comment_id": 81913652, "body": "I tried out your proposed solution, but the result is still <code>Done([], [32, 32, 32, 32])</code>."}], "tags": [], "owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "is_accepted": false, "score": -1, "last_activity_date": 1511529039, "last_edit_date": 1511529039, "creation_date": 1511524668, "answer_id": 47472839, "question_id": 47379729, "link": "https://stackoverflow.com/questions/47379729/how-to-implement-a-take-until-and-consume-like-parser-combinator-that-does-not-s/47472839#47472839", "title": "How to implement a take_until_and_consume-like parser combinator that does not skip the tag?", "body": "<p>Right now you are using the method <code>take_until_and_consume</code> whose Documentation says: </p>\n\n<blockquote>\n  <p>generates a parser consuming bytes until the specified byte sequence\n  is found, and consumes it</p>\n</blockquote>\n\n<p>The consume part is important, since it is what you want to avoid.</p>\n\n<p>You could do something akin to this:</p>\n\n<pre><code>named!(up_to_and_including_backslash,\n    do_parse!(\n        line: take_until!(\"\\\\\") &gt;&gt; char!('\\\\') &gt;&gt;\n        (line)\n    )\n);\n</code></pre>\n\n<p>Which should return the line with your seperator.</p>\n"}, {"tags": [], "owner": {"reputation": 420, "user_id": 5133139, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qltJF.jpg?s=128&g=1", "display_name": "\u30af\u30ea\u30db", "link": "https://stackoverflow.com/users/5133139/%e3%82%af%e3%83%aa%e3%83%9b"}, "is_accepted": true, "score": 1, "last_activity_date": 1523030323, "last_edit_date": 1523030323, "creation_date": 1522981264, "answer_id": 49684284, "question_id": 47379729, "link": "https://stackoverflow.com/questions/47379729/how-to-implement-a-take-until-and-consume-like-parser-combinator-that-does-not-s/49684284#49684284", "title": "How to implement a take_until_and_consume-like parser combinator that does not skip the tag?", "body": "<p><strong>update:</strong><br>\nYou want to use <code>recognize!</code> on <code>take_until_and_consume!(\"\\\\\")</code> to add everything it consumed to the Output.  </p>\n\n<p>You would write your parser function like this:</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\n\nnamed!(up_to_and_including_backslash, recognize!( take_until_and_consume!(\"\\\\\") ));\n\nfn main() {\n    let res = up_to_and_including_backslash(b\"    \\\\\");\n    println!(\"{:?}\", res);\n}\n</code></pre>\n\n<p>In case you needed to include the consumed symbols of multiple parsers to your Output you could put them all inside a <code>do_parse!</code> within <code>recognize!</code>. Like so:</p>\n\n<pre><code>recognize!( do_parse!( tag!(\"\\\\\") &gt;&gt; take_until_and_consume!(\"\\\\\") &gt;&gt; take!(4) &gt;&gt; () ) )\n</code></pre>\n\n<p><strong>old:</strong><br>\n<s>The only way I got this to work was this ugly abomination.</s></p>\n\n<pre><code>named!(up_to_and_including_backslash,\n    do_parse!(\n        line: take_until_and_consume!(\"\\\\\") &gt;&gt;\n        (\n            { \n                let mut complete_line:Vec&lt;u8&gt; = line.to_vec();\n                complete_line.extend_from_slice(b\"\\\\\");\n                &amp;*complete_line\n            }\n        )\n    )\n);\n</code></pre>\n"}], "owner": {"reputation": 35530, "user_id": 196844, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/20232ad0698d2ac6c0f127d5eb850254?s=128&d=identicon&r=PG", "display_name": "Daniel Trebbien", "link": "https://stackoverflow.com/users/196844/daniel-trebbien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 452, "favorite_count": 0, "accepted_answer_id": 49684284, "answer_count": 2, "score": 1, "last_activity_date": 1523030323, "creation_date": 1511112087, "last_edit_date": 1511112346, "question_id": 47379729, "link": "https://stackoverflow.com/questions/47379729/how-to-implement-a-take-until-and-consume-like-parser-combinator-that-does-not-s", "title": "How to implement a take_until_and_consume-like parser combinator that does not skip the tag?", "body": "<p>I would like to write a nom parser combinator that takes as many bytes up to and including a tag sequence. I tried using <code>take_until_and_consume!</code>, but I found that the generated parser combinator discards the tag sequence:</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\n\nnamed!(up_to_and_including_backslash, take_until_and_consume!(\"\\\\\"));\n\nfn main() {\n    let res = up_to_and_including_backslash(b\"    \\\\\");\n    println!(\"{:?}\", res);\n}\n</code></pre>\n\n<p>Results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Done([], [32, 32, 32, 32])\n</code></pre>\n\n<p>What I would like is for the tag sequence (in this case, the backslash character) to be included in the result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Done([], [32, 32, 32, 32, 92])\n</code></pre>\n\n<p>How can I accomplish this?</p>\n"}, {"tags": ["arrays", "struct", "initialization", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511111284, "post_id": 47379390, "comment_id": 81711288, "body": "As suggested in a duplicate, <a href=\"https://play.integer32.com/?gist=56b3df016c4f3c9229259acc875e887c&amp;version=stable\" rel=\"nofollow noreferrer\">I&#39;d use <code>Default</code> here</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511112162, "post_id": 47379390, "comment_id": 81711614, "body": "And for extra information in passing... <a href=\"https://stackoverflow.com/q/29148544/155423\">How to iterate or map over tuples?</a>."}, {"owner": {"reputation": 13, "user_id": 3274909, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1c03c33954349437474198e5fc5f35f?s=128&d=identicon&r=PG&f=1", "display_name": "Skasselbard", "link": "https://stackoverflow.com/users/3274909/skasselbard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511167361, "post_id": 47379390, "comment_id": 81728906, "body": "Thanks! The <code>Default</code> trait works like a charm in my case."}], "owner": {"reputation": 13, "user_id": 3274909, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a1c03c33954349437474198e5fc5f35f?s=128&d=identicon&r=PG&f=1", "display_name": "Skasselbard", "link": "https://stackoverflow.com/users/3274909/skasselbard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1284, "favorite_count": 0, "closed_date": 1511110637, "answer_count": 0, "score": 1, "last_activity_date": 1511110889, "creation_date": 1511110325, "last_edit_date": 1511110889, "question_id": 47379390, "link": "https://stackoverflow.com/questions/47379390/initialize-a-fixed-size-array-of-structs", "closed_reason": "Duplicate", "title": "Initialize a fixed size array of structs", "body": "<p>I want to initialize an array of self defined structs automatically with a given rule.</p>\n\n<p>With primitive types and types that implement <code>Copy</code>, I would do something like <code>let x: [u8; 5] = [0; 5];</code>, but with a type which can't derive <code>Copy</code> I have to do something else.</p>\n\n<p>I probably could write down the whole list, but that is quite inconvenient, especially if I just want dummy values which will be altered later, equivalent to initializing an integer array with zeros.</p>\n\n<p>I have tried a <code>for</code> loop like this  </p>\n\n<pre><code>use std::collections::LinkedList;\n\nenum CourseType {\n    Dummy1,\n    Dummy2,\n}\n\nstruct Week {\n    number: u64,\n    days: [Day; 5], //Mo-Fr\n}\n\nstruct Day {\n    courses: LinkedList&lt;Course&gt;, // LinkedList prevents Copy\n}\n\nstruct Course {\n    beginning: u8,\n    courseType: CourseType,\n}\n\nfn get_weeks() -&gt; Option&lt;Vec&lt;Week&gt;&gt; {\n    let mut weeks = Vec::with_capacity(20);\n    for i in 1..14 {\n        let week = Week {\n            number: i,\n            days: {\n                let mut ret: [Day; 5]; // definition of the array\n                for i in 0..4 {\n                    // loop to initialize\n                    ret[i] = Day {\n                        courses: LinkedList::new(),\n                    } //error[E0381]\n                }\n                ret //error[E0381]\n            },\n        };\n        weeks.push(week);\n    }\n    Some(weeks)\n}\n</code></pre>\n\n<p>As commented in the snippet, I get an error[E0381] by \"initializing\" this way:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0381]: use of possibly uninitialized variable: `ret`\n  --&gt; src/main.rs:31:21\n   |\n31 | /                     ret[i] = Day {\n32 | |                         courses: LinkedList::new(),\n33 | |                     }\n   | |_____________________^ use of possibly uninitialized `ret`\n\nerror[E0381]: use of possibly uninitialized variable: `ret`\n  --&gt; src/main.rs:35:17\n   |\n35 |                 ret\n   |                 ^^^ use of possibly uninitialized `ret`\n</code></pre>\n\n<p>How would I initialize an array of this kind?</p>\n\n<p>I have a fixed size of data in this case, since the (work)week only has 5 days. Using a dynamic type, like a vector, seems to be imprecise. I tried tuples before, but there I had a comparable problem where I had to iterate through the tuple indices. It seemed impossible (with variables) to address the index with a variable (something like <code>tuple.index</code> instead of e.g <code>tuple.3</code>).</p>\n\n<p>Maybe I have to use some kind of a slice (<code>&amp;[Day; 5]</code>) instead of an array, but I guess my understanding of Rust isn't quite there yet.</p>\n"}, {"tags": ["windows", "rust", "mingw", "msys2"], "answers": [{"comments": [{"owner": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "edited": false, "score": 0, "creation_date": 1511133122, "post_id": 47380501, "comment_id": 81718765, "body": "First thank you very much for helping me. I need to confirm by rustup  you mean run ./rustup-init.exe file? I added edit to my original question what I tried."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "edited": false, "score": 0, "creation_date": 1511134775, "post_id": 47380501, "comment_id": 81719119, "body": "rustup-init.exe installs rustup. As rustup-init says at the end, you may need to restart your shell (or log off and log back in) to update your PATH environment variable. Then the <code>rustc</code> and <code>cargo</code> commands should work."}, {"owner": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "edited": false, "score": 0, "creation_date": 1511138131, "post_id": 47380501, "comment_id": 81719841, "body": "Francis: I just edited my question. I still got command not found when run either rustc and cargo"}, {"owner": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "edited": false, "score": 0, "creation_date": 1511139082, "post_id": 47380501, "comment_id": 81720057, "body": "When I run  <code>$ rustup default stable-x86_64-pc-windows-gnu bash: rustup: command not found</code>"}, {"owner": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "edited": false, "score": 0, "creation_date": 1511141648, "post_id": 47380501, "comment_id": 81720603, "body": "I think the issue is at the Path. I cd to .cargo/bin and run ./rustup then it install. Could you please tell me how to edit the PATH of Msys?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "edited": false, "score": 1, "creation_date": 1511144079, "post_id": 47380501, "comment_id": 81721157, "body": "You&#39;ll want to add a line like <code>export PATH=&quot;&#47;c&#47;Users&#47;Thang&#47;.cargo&#47;bin:$PATH&quot;</code> in your <code>~&#47;.profile</code>, then restart your shell."}, {"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 2, "creation_date": 1529516237, "post_id": 47380501, "comment_id": 88905843, "body": "just a note, install gcc into msys using following command: <code>pacman -S mingw-w64-x86_64-toolchain</code> ( or x86 variant )"}, {"owner": {"reputation": 23491, "user_id": 6296561, "user_type": "registered", "accept_rate": 95, "profile_image": "https://i.stack.imgur.com/zgIdn.png?s=128&g=1", "display_name": "Zoe", "link": "https://stackoverflow.com/users/6296561/zoe"}, "edited": false, "score": 1, "creation_date": 1545483298, "post_id": 47380501, "comment_id": 94637415, "body": "+1 for the <code>rustup default</code> part -- it&#39;s the part I missed for it to work. I assumed it&#39;d be automatically picked based on the console (similarily to how cmake works, though that&#39;s a different language). The compiler errors were fixed with <code>rustup default</code> though"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 41, "last_activity_date": 1567042299, "last_edit_date": 1567042299, "creation_date": 1511116402, "answer_id": 47380501, "question_id": 47379214, "link": "https://stackoverflow.com/questions/47379214/step-by-step-instruction-to-install-rust-and-cargo-for-mingw-with-msys2/47380501#47380501", "title": "Step by step instruction to install Rust and Cargo for mingw with Msys2?", "body": "<p>The <em>Using Rust on Windows</em> page you linked to dates from before rustup replaced the installer as the default option to install Rust. <a href=\"https://www.rust-lang.org/en-US/other-installers.html#standalone-installers\" rel=\"noreferrer\">Installers</a> are still available, but you should use rustup if possible, because it makes it easy to update and to use multiple toolchains at once (e.g. stable, beta and nightly). If you must use the installer, just select the <code>x86_64-pc-windows-gnu</code> installer and follow the step from the <em>Using Rust on Windows</em> page. If you're using rustup, read on.</p>\n\n<p>By default, rustup on Windows installs the compiler and tools targeting the MSVC toolchain, rather than the GNU/MinGW-w64 toolchain. At the initial menu, select <em>2) Customize installation</em>. When asked for a host triple, enter <code>x86_64-pc-windows-gnu</code>. Then make a choice for the other questions, then proceed with the installation.</p>\n\n<p><strong>Note:</strong> If rustup is already installed, then rerunning rustup-init won't actually install the requested toolchain. Instead, run <code>rustup toolchain install stable-x86_64-pc-windows-gnu</code> if you already have the MSVC-based toolchain. Then run <code>rustup default stable-x86_64-pc-windows-gnu</code> to set the GNU-based toolchain as the default.</p>\n\n<p>Rustup will install the MinGW linker and platform libraries automatically (as part of the <code>rust-mingw</code> component) and refuses to let you remove them. If you prefer to use the MinGW linker and libraries you installed with MSYS2, you'll need to create a <a href=\"http://doc.crates.io/config.html\" rel=\"noreferrer\"><code>.cargo/config</code></a> file (either in your profile directory, i.e. <code>C:\\Users\\you\\.cargo\\config</code>, or in your project's directory if this configuration is specific to a project). The contents of that file might look like this:</p>\n\n<pre><code>[target.x86_64-pc-windows-gnu]\nlinker = \"C:\\\\msys2\\\\mingw64\\\\bin\\\\gcc.exe\"\nar = \"C:\\\\msys2\\\\mingw64\\\\bin\\\\ar.exe\"\n</code></pre>\n\n<p>Rustup will modify the <code>PATH</code> environment variable unless you told it not to. However, MSYS2 resets <code>PATH</code> by default when you launch, so when you try to invoke <code>cargo</code> or <code>rustc</code> from your MSYS2 shell, it might not find it. You'll need to edit your <code>.profile</code>/<code>.bash_profile</code> script to set the <code>PATH</code> correctly (you need to prepend <code>/c/Users/yourname/.cargo/bin:</code> to <code>PATH</code>).</p>\n"}], "owner": {"reputation": 351, "user_id": 1984069, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dcdb73f302caf7eadc8fff91d4cecda8?s=128&d=identicon&r=PG", "display_name": "ThangNguyen", "link": "https://stackoverflow.com/users/1984069/thangnguyen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 16568, "favorite_count": 10, "accepted_answer_id": 47380501, "answer_count": 1, "score": 18, "last_activity_date": 1567042299, "creation_date": 1511109358, "last_edit_date": 1511141721, "question_id": 47379214, "link": "https://stackoverflow.com/questions/47379214/step-by-step-instruction-to-install-rust-and-cargo-for-mingw-with-msys2", "title": "Step by step instruction to install Rust and Cargo for mingw with Msys2?", "body": "<p>I tried to install Rust on Cygwin but failed to be able link with mingw. Now I am trying to install it with Msys2. I already installed Msys2 and Mingw. I tried to follow <a href=\"https://github.com/rust-lang/rust-wiki-backup/blob/master/Using-Rust-on-Windows.md\" rel=\"noreferrer\">this wiki page</a> but I got lost at number 2:</p>\n\n<blockquote>\n  <p>Download and install Rust+Cargo using the installer but be sure to disable the Linker and platform libraries option.</p>\n</blockquote>\n\n<p>Is it referring to the \"rustup-init.exe\" on <a href=\"https://www.rust-lang.org/en-US/install.html\" rel=\"noreferrer\">the install page</a>? Should I double click to run this file or run it from Msys2? I tried to run from Msys2 and got the options:   </p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>1) Proceed with installation (default)  \n2) Customize installation  \n3) Cancel installation\n</code></pre>\n</blockquote>\n\n<p>I don't know what to do next.</p>\n\n<p>I tried to follow Francis' answer:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Thang@Thang-Laptop MINGW64 /c/Software/Rust\n$ ./rustup-init.exe\n\nRust Visual C++ prerequisites\n\nRust requires the Microsoft C++ build tools for Visual Studio 2013 or later,\nbut they don't seem to be installed.\n\nThe easiest way to acquire the build tools is by installing Microsoft Visual\nC++ Build Tools 2015 which provides just the Visual C++ build tools:\n\n  http://landinghub.visualstudio.com/visual-cpp-build-tools\n\nAlternately, you can install Visual Studio 2015 or Visual Studio 2013 and\nduring install select the \"C++ tools\":\n\n  https://www.visualstudio.com/downloads/\n\nInstall the C++ build tools before proceeding.\n\nIf you will be targetting the GNU ABI or otherwise know what you are doing then\nit is fine to continue installation without the build tools, but otherwise,\ninstall the C++ build tools before proceeding.\n\nContinue? (Y/n) Y\n\n\nWelcome to Rust!\n\nThis will download and install the official compiler for the Rust programming\nlanguage, and its package manager, Cargo.\n\nIt will add the cargo, rustc, rustup and other commands to Cargo's bin\ndirectory, located at:\n\n  C:\\Users\\Thang\\.cargo\\bin\n\nThis path will then be added to your PATH environment variable by modifying the\nHKEY_CURRENT_USER/Environment/PATH registry key.\n\nYou can uninstall at any time with rustup self uninstall and these changes will\nbe reverted.\n\nCurrent installation options:\n\n   default host triple: x86_64-pc-windows-msvc\n     default toolchain: stable\n  modify PATH variable: yes\n\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n2\n\nI'm going to ask you the value of each these installation options.\nYou may simply press the Enter key to leave unchanged.\n\nDefault host triple?\nx86_64-pc-windows-gnu\n\nDefault toolchain? (stable/beta/nightly/none)\nstable\n\nModify PATH variable? (y/n)\ny\n\n\nCurrent installation options:\n\n   default host triple: x86_64-pc-windows-gnu\n     default toolchain: stable\n  modify PATH variable: yes\n\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n1\n\ninfo: updating existing rustup installation\n\n\nRust is installed now. Great!\n\nTo get started you need Cargo's bin directory (%USERPROFILE%\\.cargo\\bin) in\nyour PATH environment variable. Future applications will automatically have the\ncorrect environment, but you may need to restart your current shell.\n\nPress the Enter key to continue.\n\n\nThang@Thang-Laptop MINGW64 /c/Software/Rust\n$ rustc --version\nbash: rustc: command not found\n</code></pre>\n\n<p>I added the config file. Not sure if I miss anything</p>\n\n<pre><code>Thang@Thang-Laptop MINGW64 /c/Users/Thang/.cargo\n$ cat config\n[target.x86_64-pc-windows-gnu]\nlinker = \"C:\\msys2\\mingw64\\bin\\gcc.exe\"\nar = \"C:\\msys2\\mingw64\\bin\\ar.exe\"\nThang@Thang-Laptop MINGW64 /c/Users/Thang/.cargo\n$ cargo --version\nbash: cargo: command not found\n</code></pre>\n\n<p>Edit 2:<br>\nI have just restarted my laptop. It's still not work, I check the Path in msys2, there is no cargo folder</p>\n\n<pre><code>Thang@Thang-Laptop MINGW64 ~\n$ echo $PATH\n/mingw64/bin:/usr/local/bin:/usr/bin:/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/\n</code></pre>\n\n<p>but I saw it in user variables in Environment Variables.</p>\n\n<p>Edit 3:</p>\n\n<pre><code>Thang@Thang-Laptop MINGW64 /c/Users/Thang/.cargo/bin\n$ ./rustup default stable-x86_64-pc-windows-gnu\ninfo: syncing channel updates for 'stable-x86_64-pc-windows-gnu'\ninfo: latest update on 2017-10-12, rust version 1.21.0 (3b72af97e 2017-10-09)\ninfo: downloading component 'rustc'\ninfo: downloading component 'rust-std'\ninfo: downloading component 'cargo'\ninfo: downloading component 'rust-docs'\ninfo: downloading component 'rust-mingw'\ninfo: installing component 'rustc'\ninfo: installing component 'rust-std'\ninfo: installing component 'cargo'\ninfo: installing component 'rust-docs'\ninfo: installing component 'rust-mingw'\ninfo: default toolchain set to 'stable-x86_64-pc-windows-gnu'\n\n  stable-x86_64-pc-windows-gnu installed - rustc 1.21.0 (3b72af97e 2017-10-09)\n\n\nThang@Thang-Laptop MINGW64 /c/Users/Thang/.cargo/bin\n$ ls\ncargo.exe  rustc.exe    rust-gdb.exe   rustup.exe\nrls.exe    rustdoc.exe  rust-lldb.exe\n\nThang@Thang-Laptop MINGW64 /c/Users/Thang/.cargo/bin\n$ rustc --version\nbash: rustc: command not found\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 9249, "user_id": 456809, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/a8e60ef50534769dba78843acf8bb82d?s=128&d=identicon&r=PG", "display_name": "Breedly", "link": "https://stackoverflow.com/users/456809/breedly"}, "edited": false, "score": 0, "creation_date": 1511103539, "post_id": 47378208, "comment_id": 81708595, "body": "Where does <code>2usize</code> come from?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 9249, "user_id": 456809, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/a8e60ef50534769dba78843acf8bb82d?s=128&d=identicon&r=PG", "display_name": "Breedly", "link": "https://stackoverflow.com/users/456809/breedly"}, "edited": false, "score": 0, "creation_date": 1511103613, "post_id": 47378208, "comment_id": 81708622, "body": "@Breedly you need to specify the type of <code>2</code>, otherwise you would get a <code>no method named pow found for type {integer} in the current scope</code> error."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1511105359, "post_id": 47378208, "comment_id": 81709195, "body": "@ljedrz Instead of <code>2.pow(n)</code> it is also possible to write <code>1 &lt;&lt; n</code> for power of 2&#39;s."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1511106140, "post_id": 47378208, "comment_id": 81709473, "body": "@kennytm that&#39;s true, but I suppose it compiles down to the same thing (bit shift) in the end anyway."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1511164404, "post_id": 47378208, "comment_id": 81727538, "body": "Instead of <code>(0..).take(10)</code>, you could have used <code>(0..10)</code> directly."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 2, "last_activity_date": 1511103125, "creation_date": 1511103125, "answer_id": 47378208, "question_id": 47378096, "link": "https://stackoverflow.com/questions/47378096/how-do-i-write-a-value-doubling-iterator/47378208#47378208", "title": "How do I write a value doubling iterator?", "body": "<p>You could do the following:</p>\n\n<pre><code>fn main() {\n    for i in (0..).map(|n| 2usize.pow(n)).take(10) { // take(10) so it stops\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n</code></pre>\n\n<p>It's pretty efficient, there's no need to implement your own iterator for this.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1511191059, "last_edit_date": 1511191059, "creation_date": 1511108432, "answer_id": 47379062, "question_id": 47378096, "link": "https://stackoverflow.com/questions/47378096/how-do-i-write-a-value-doubling-iterator/47379062#47379062", "title": "How do I write a value doubling iterator?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.scan\" rel=\"nofollow noreferrer\"><code>Iterator::scan</code></a>:</p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let items = iter::repeat(()).scan(1i32, |state, _| {\n        let current_state = *state;\n        *state = current_state * 2;\n        Some(current_state)\n    });\n\n    println!(\"{:?}\", items.take(10).collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n\n<p>This has a small state which starts with your initial value (<code>1i32</code>) and doubles the state each time, returning the previous one.</p>\n\n<hr>\n\n<p>Since closures capture their environment, you can do this without <code>scan</code>, although I like my iterators to contain all the info they need, so I'd be unlikely to actually do this:</p>\n\n<pre><code>let mut state = 1;\nlet items = iter::repeat(()).map(|_| {\n    let v = state;\n    state *= 2;\n    v\n});\n</code></pre>\n\n<hr>\n\n<p>And there's always the long-form:</p>\n\n<pre><code>struct Doubling {\n    value: i32,\n}\n\nimpl Doubling {\n    fn new(value: i32) -&gt; Self {\n        Self { value }\n    }\n}\n\nimpl Iterator for Doubling {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let val = self.value;\n        self.value *= 2;\n        Some(val)\n    }\n}\n\nfn main() {\n    let items = Doubling::new(1);\n    println!(\"{:?}\", items.take(10).collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n"}], "owner": {"reputation": 9249, "user_id": 456809, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/a8e60ef50534769dba78843acf8bb82d?s=128&d=identicon&r=PG", "display_name": "Breedly", "link": "https://stackoverflow.com/users/456809/breedly"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 47378208, "answer_count": 2, "score": 0, "last_activity_date": 1511191059, "creation_date": 1511102443, "last_edit_date": 1511106391, "question_id": 47378096, "link": "https://stackoverflow.com/questions/47378096/how-do-i-write-a-value-doubling-iterator", "title": "How do I write a value doubling iterator?", "body": "<p>I want to start with a base value of <code>1</code> and then multiply my base value by <code>2</code> each iteration up to a defined limit (say the total length of my array).</p>\n\n<p>Do I have to implement a special iterator just to do this? Or can I combine other iterator methods like <code>map</code> and <code>filter</code> together  in order to achieve the same functionality. Though I would imagine implementing my iterator specifically would be more efficient, but also more verbose.</p>\n"}, {"tags": ["for-loop", "syntax", "rust", "type-inference"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1511104445, "post_id": 47377094, "comment_id": 81708893, "body": "<a href=\"https://github.com/rust-lang/rfcs/issues/354\" rel=\"nofollow noreferrer\">Related RFC issue</a>"}, {"owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1511107360, "post_id": 47377094, "comment_id": 81709916, "body": "@Shepmaster I do not think <a href=\"https://stackoverflow.com/q/24463655/7496656\">stackoverflow.com/q/24463655/7496656</a> is a real duplicate as even though the reason for both questions are the same, the answers will be and are different. Even nearer duplicate but still not quite: <a href=\"https://stackoverflow.com/q/34304341/7496656\">stackoverflow.com/q/34304341/7496656</a> Do you think that should also be marked as a duplicate?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1511109389, "post_id": 47377094, "comment_id": 81710556, "body": "I moved <a href=\"https://stackoverflow.com/a/47379212/1870153\">my answer</a> to the duplicate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "edited": false, "score": 0, "creation_date": 1511109515, "post_id": 47377094, "comment_id": 81710604, "body": "@JanZerebecki the question on both is &quot;can I have an explicit type&quot; and the answer to both is &quot;no&quot;. Workarounds exist, and the answer that was here <i>also</i> applies to that one."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1511109612, "post_id": 47377094, "comment_id": 81710638, "body": "<i>although it seems that such syntax is rarely used by some reasons</i> \u2014 yes, we programmers are lazy and hate having to type redundant information. Rust has a <i>very</i> powerful type inference engine that works almost all the time. In this case, it&#39;s pointless to specify the types because you can&#39;t change them \u2014 they are what they are."}, {"owner": {"reputation": 185, "user_id": 6165740, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f365e2ce66ac98048b63e6d1a35b3d32?s=128&d=identicon&r=PG&f=1", "display_name": "Cryptor", "link": "https://stackoverflow.com/users/6165740/cryptor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511110871, "post_id": 47377094, "comment_id": 81711139, "body": "@Shepmaster, type definition is not a redundant information for every programmer. For me it&#39;s useful at least for two reasons: \u2022\tIt&#39;s more easy to read a code which has type definitions, you&#39;re more easily get understanding of what&#39;s going at the particular part of code. \u2022\tErrors related to mismatched types will appear at the very source and not somewhere down the code."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511111107, "post_id": 47377094, "comment_id": 81711233, "body": "@Cryptor I&#39;d strongly encourage you to honestly give Rust a shot while removing <i>every</i> redundant type annotation. I favor shorter functions and since functions must have type declarations, those provide concrete points of reference. Also, Rust&#39;s error messages are generally superb, pointing exactly where they need to. You may simply have experience with other languages that don&#39;t have error messages of this caliber. Besides, I&#39;m just explaining why most Rust code doesn&#39;t use the explicit types, you can do whatever you want."}], "owner": {"reputation": 185, "user_id": 6165740, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f365e2ce66ac98048b63e6d1a35b3d32?s=128&d=identicon&r=PG&f=1", "display_name": "Cryptor", "link": "https://stackoverflow.com/users/6165740/cryptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 621, "favorite_count": 0, "closed_date": 1511106161, "answer_count": 0, "score": 1, "last_activity_date": 1511103946, "creation_date": 1511096175, "last_edit_date": 1511101048, "question_id": 47377094, "link": "https://stackoverflow.com/questions/47377094/rust-explicit-type-definition-syntax-in-for-loop", "closed_reason": "Duplicate", "title": "Rust: explicit type definition syntax in for loop", "body": "<p>Rust allows explicit type definition at variable declaration (although it seems that such syntax is rarely used by some reasons). E.g.\u00a0such declarations are valid:</p>\n\n<pre><code>let number: i32 = 10;\nlet (tuple_value1, tuple_value2): (i32, String) = (10, String::from(\"Text\"));\nlet (numeric_value, bytes): (i32, &amp;[u8]) = (10, tuple_value2.as_bytes());\n</code></pre>\n\n<p>But how variable types can be explicitly defined in the\u00a0<code>for</code>\u00a0loop? I'm\u00a0currently studying <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The\u00a0Rust Programming Language</em></a> book's <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-03-slices.html\" rel=\"nofollow noreferrer\">chapter\u00a04.3</a>. I'm\u00a0trying to apply type definition at variables declaration in the\u00a0<code>for</code> loop in listing 4-10:</p>\n\n<pre><code>fn first_word(s: &amp;String) -&gt; usize {\n    let bytes = s.as_bytes();\n\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n</code></pre>\n\n<p>Nevertheless when trying to supply mentioned listing's <code>for</code> loop with the\u00a0type definition</p>\n\n<pre><code>fn first_word(s: &amp;String) -&gt; usize {\n    let bytes: &amp;[u8] = s.as_bytes();\n\n    for (i, item): (usize, std::iter::Enumerate&lt;std::slice::Iter&lt;u8&gt;&gt;) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n</code></pre>\n\n<p>I get:</p>\n\n<pre><code>error: expected `in`, found `:`\n --&gt; src/main.rs:7:15\n  |\n7 |     for (i, item): (usize, &amp;[u8]) in bytes.iter().enumerate() {\n  |                  ^ expected `in` here\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:4:36\n   |\n4  |   fn first_word(s: &amp;String) -&gt; usize {\n   |  ____________________________________^\n5  | |  let bytes: &amp;[u8] = s.as_bytes();\n6  | |\n7  | |  for (i, item): (usize, &amp;[u8]) in bytes.iter().enumerate() {\n...  |\n13 | |  s.len()\n14 | | }\n   | |_^ expected usize, found ()\n   |\n   = note: expected type `usize`\n              found type `()`\n\nerror: aborting due to 2 previous errors\n\nerror: Could not compile `hello_world`.\n</code></pre>\n\n<p>So far the\u00a0book doesn't\u00a0contain a\u00a0description of how to perform an\u00a0explicit type definition in the\u00a0loops. So did for me googling. My question is about the\u00a0proper type definition syntax in the\u00a0<code>for</code> loop (if such exists, I'm\u00a0strongly hope so).</p>\n"}, {"tags": ["rust", "rust-diesel"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1511185681, "creation_date": 1511185681, "answer_id": 47393562, "question_id": 47375895, "link": "https://stackoverflow.com/questions/47375895/understanding-trait-bound-error-in-diesel/47393562#47393562", "title": "Understanding trait bound error in Diesel", "body": "<p>The Diesel function <a href=\"https://docs.rs/diesel/0.16.0/diesel/prelude/trait.ExecuteDsl.html#tymethod.execute\" rel=\"nofollow noreferrer\"><code>execute</code></a> has multiple concrete implementations. The two that are relevant here are:</p>\n\n<pre><code>impl&lt;'a, T, U, Op, Ret, Conn, DB&gt; ExecuteDsl&lt;Conn, DB&gt; for BatchInsertStatement&lt;T, &amp;'a [U], Op, Ret&gt; \nwhere\n    Conn: Connection&lt;Backend = DB&gt;,\n    DB: Backend + SupportsDefaultKeyword,\n    InsertStatement&lt;T, &amp;'a [U], Op, Ret&gt;: ExecuteDsl&lt;Conn&gt;, \n</code></pre>\n\n\n\n<pre><code>impl&lt;'a, T, U, Op, Ret&gt; ExecuteDsl&lt;SqliteConnection&gt; for BatchInsertStatement&lt;T, &amp;'a [U], Op, Ret&gt; \nwhere\n    InsertStatement&lt;T, &amp;'a U, Op, Ret&gt;: ExecuteDsl&lt;SqliteConnection&gt;,\n    T: Copy,\n    Op: Copy,\n    Ret: Copy, \n</code></pre>\n\n<p>As you can see from these two, the implementation for SQLite is special-cased. I don't know enough about the details of Diesel to know why, but I'd guess that SQLite is missing the default keyword.</p>\n\n<p>You can instead reformulate the requirements for any connection that works with that particular statement:</p>\n\n<pre><code>use diesel::query_builder::insert_statement::InsertStatement;\n\npub fn create_label&lt;C&gt;(connection: &amp;C, label: &amp;model::Label)\nwhere\n    C: Connection,\n    for&lt;'a&gt; InsertStatement&lt;schema::labels::table, &amp;'a model::Label&gt;: ExecuteDsl&lt;C&gt;,\n{\n    diesel::insert(label)\n        .into(schema::labels::table)\n        .execute(connection)\n        .expect(\"nope\");\n}\n</code></pre>\n"}], "owner": {"reputation": 4068, "user_id": 862193, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/60a062a625895665d619c40b96f82d6a?s=128&d=identicon&r=PG", "display_name": "Tim", "link": "https://stackoverflow.com/users/862193/tim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 701, "favorite_count": 0, "accepted_answer_id": 47393562, "answer_count": 1, "score": 3, "last_activity_date": 1511185681, "creation_date": 1511087955, "last_edit_date": 1511184616, "question_id": 47375895, "link": "https://stackoverflow.com/questions/47375895/understanding-trait-bound-error-in-diesel", "title": "Understanding trait bound error in Diesel", "body": "<p>I want to write a function that will insert a type into a database where the database connection parameter is generic, so that it can work on multiple backends.</p>\n\n<p>I came up with the following function to insert an object using a generic connection:</p>\n\n<pre><code>pub fn create_label&lt;C&gt;(connection: &amp;C, label: &amp;model::Label)\nwhere\n    C: Connection,\n    C::Backend: diesel::backend::Backend,\n    C::Backend: diesel::backend::SupportsDefaultKeyword,\n{\n    diesel::insert(&amp;label)\n        .into(schema::label::table)\n        .execute(connection);\n}\n</code></pre>\n\n<p>If I don't include the <code>SupportsDefaultKeyword</code> constraint, the function will not compile. When calling it with a <code>SqliteConnection</code> as the connection parameter, I get the following error:</p>\n\n<blockquote>\n  <p><code>database::create_label(&amp;db_conn, &amp;label);\n                       ^^^^^^^^^^^^^^^^^^^^^^ the trait\n      'diesel::backend::SupportsDefaultKeyword' is not implemented for\n      'diesel::sqlite::Sqlite'</code></p>\n</blockquote>\n\n<p>This would imply that inserting data with a <code>SqliteConnection</code> does not work. That's obviously not the case, and furthermore changing <code>create_label</code> such that it takes a <code>SqliteConnection</code> directly works just fine.</p>\n\n<pre><code>pub fn create_label(connection: &amp;SqliteConnection, label: &amp;model::Label) {\n    diesel::insert(&amp;label)\n        .into(schema::label::table)\n        .execute(connection);\n}\n</code></pre>\n\n<p>Why is it that the generic function requires the <code>SupportsDefaultKeyword</code> constraint and the function taking <code>SqliteConnection</code> does not?</p>\n\n<p>Here is a <a href=\"https://play.integer32.com/?gist=878d86b53dce6a11e317f9cf08cfdb74&amp;version=stable\" rel=\"nofollow noreferrer\">minimal example</a> illustrating the problem. As per the comments, line 60 of <code>main.rs</code> will not compile with the error from above, whereas line 61 does compile:</p>\n\n<pre><code>#[macro_use]\nextern crate diesel;\n#[macro_use]\nextern crate diesel_codegen;\n\nmod schema {\n    table! {\n        labels {\n            id -&gt; Integer,\n            name -&gt; VarChar,\n        }\n    }\n}\n\nmod model {\n    use schema::labels;\n\n    #[derive(Debug, Identifiable, Insertable)]\n    #[table_name = \"labels\"]\n    pub struct Label {\n        pub id: i32,\n        pub name: String,\n    }\n}\n\nuse diesel::ExecuteDsl;\nuse diesel::Connection;\nuse diesel::prelude::*;\nuse diesel::sqlite::SqliteConnection;\n\npub fn create_label&lt;C&gt;(connection: &amp;C, label: &amp;model::Label)\nwhere\n    C: Connection,\n    C::Backend: diesel::backend::Backend,\n    C::Backend: diesel::backend::SupportsDefaultKeyword,\n{\n    diesel::insert(label)\n        .into(schema::labels::table)\n        .execute(connection)\n        .expect(\"nope\");\n}\n\npub fn create_label_sqlite(connection: &amp;SqliteConnection, label: &amp;model::Label) {\n    diesel::insert(label)\n        .into(schema::labels::table)\n        .execute(connection)\n        .expect(\"nope\");\n}\n\npub fn establish_connection() -&gt; SqliteConnection {\n    let url = \"test.db\";\n    SqliteConnection::establish(&amp;url).expect(&amp;format!(\"Error connecting to {}\", url))\n}\n\nfn main() {\n    let label = model::Label {\n        id: 1,\n        name: String::from(\"test\"),\n    };\n    let conn = establish_connection();\n\n    create_label(&amp;conn, &amp;label); /* Does not compile */\n    create_label_sqlite(&amp;conn, &amp;label); /*Compiles */\n}\n</code></pre>\n\n<pre><code>[dependencies]\ndiesel = { version = \"0.16.0\", features = [\"sqlite\"] }\ndiesel_codegen = \"0.16.0\"\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1511082660, "post_id": 47375184, "comment_id": 81702855, "body": "I don&#39;t know why this specific example behaves the way it does, but I do know that there are cases where the compiler allows a non-<code>mut</code> binding to be mutably borrowed <i>if</i> the compiler knows that the binding is never used anywhere else (<i>i.e.</i> as though you were moving, not borrowing).  It could be related to that.  Possibly also has something to do with the compiler being able to better reason about indexing on a constant index, rather than a dynamic one."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 1, "creation_date": 1511107056, "post_id": 47375184, "comment_id": 81709817, "body": "Strangely, <code>a[0+0].bar();</code> doesn&#39;t compile, but <code>a[j].bar();</code> does compile. So this doesn&#39;t seem related to whether the index is a constant."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1515787260, "last_edit_date": 1515787260, "creation_date": 1511115497, "answer_id": 47380336, "question_id": 47375184, "link": "https://stackoverflow.com/questions/47375184/why-is-borrowing-a-mut-reference-from-an-immutable-array-sometimes-possible/47380336#47380336", "title": "Why is borrowing a &amp;mut reference from an immutable array sometimes possible?", "body": "<blockquote>\n  <p>Is it a compiler bug?</p>\n</blockquote>\n\n<p><a href=\"https://github.com/rust-lang/rust/issues/46095\" rel=\"nofollow noreferrer\">Yes</a>. It is fixed in Rust 1.25.0-nightly (2018-01-09 61452e506f0c88861cccaeea4ced3419bdb3cbe0) by <a href=\"https://github.com/rust-lang/rust/pull/47167\" rel=\"nofollow noreferrer\">PR 47167</a></p>\n\n<p>The short version is that there are two ways of performing indexing, referred to as \"builtin indexing\" and \"overloaded indexing\". As you might be able to guess from the names, one is more intrinsic to the compiler and the other is more user-customizable.</p>\n\n<p>In this case, the overloaded indexing is performing an unneeded borrow of the array, triggering the warning. You can work around the problem by simplifying the compilers job of type inference:</p>\n\n<pre><code>fn foo(a1: &amp;mut Bar, j: usize) {\n    let a = [a1];\n    let x: usize = j % 2;\n    a[x].bar();\n}\n</code></pre>\n\n<p>By explicitly stating the index is a <code>usize</code>, the code will now use the builtin indexing.</p>\n"}], "owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 47380336, "answer_count": 1, "score": 8, "last_activity_date": 1515787260, "creation_date": 1511081898, "last_edit_date": 1511106331, "question_id": 47375184, "link": "https://stackoverflow.com/questions/47375184/why-is-borrowing-a-mut-reference-from-an-immutable-array-sometimes-possible", "title": "Why is borrowing a &amp;mut reference from an immutable array sometimes possible?", "body": "<p>Let's try to compile this code:</p>\n\n<pre><code>trait Bar {\n    fn bar(&amp;mut self);\n}\n\nfn foo(a1: &amp;mut Bar, j: usize) {\n    let a = [a1];\n    a[0].bar(); //compilation ok\n    a[j % 2].bar();\n}\n\nfn main() {}\n</code></pre>\n\n<p>Compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `a` as mutable\n --&gt; src/main.rs:8:5\n  |\n6 |     let a = [a1];\n  |         - consider changing this to `mut a`\n7 |     a[0].bar(); //compilation ok\n8 |     a[j % 2].bar();\n  |     ^ cannot borrow mutably\n</code></pre>\n\n<p>Why is <code>a[0].bar()</code> OK, but <code>a[j % 2].bar()</code> fails? Is it a compiler bug?</p>\n"}, {"tags": ["parallel-processing", "rust", "benchmarking", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1513912308, "post_id": 47935187, "comment_id": 82840204, "body": "OP states: <i>I also tried benchmarking with longer vectors, but the results were consistent</i> \u2014 can you provide more detail or facts about why you think that the OP is incorrect?"}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1513954215, "last_edit_date": 1513954215, "creation_date": 1513909889, "answer_id": 47935187, "question_id": 47370045, "link": "https://stackoverflow.com/questions/47370045/how-to-benchmark-parallel-code/47935187#47935187", "title": "How to benchmark parallel code?", "body": "<p>The array you use in the test is so small that the parallel code really <em>is</em> slower in that case.</p>\n\n<p>There's some overhead to launching tasks in parallel, and the memory access will be slower when different threads access memory on the same cache line.</p>\n\n<p>For iterators to avoid overhead on tiny arrays there's <a href=\"https://docs.rs/rayon/0.9.0/rayon/iter/trait.IndexedParallelIterator.html#method.with_min_len\" rel=\"nofollow noreferrer\"><code>with_min_len</code></a>, but for <code>join</code> you probably need to implement parallel/non-parallel decision yourself.</p>\n\n<hr>\n\n<p>With 100 times larger array:</p>\n\n<pre><code>with rayon:            3,468,891 ns/iter (+/- 95,859)\nwithout rayon:         4,227,220 ns/iter (+/- 635,260)\nrayon if len &gt; 1000:   3,166,570 ns/iter (+/- 66,329)\n</code></pre>\n\n<p>The relatively small speed-up is expected for this task, because it's memory-bound (there's no complex computation to parallelize).</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 336, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1513954215, "creation_date": 1511032672, "last_edit_date": 1511096631, "question_id": 47370045, "link": "https://stackoverflow.com/questions/47370045/how-to-benchmark-parallel-code", "title": "How to benchmark parallel code?", "body": "<p>I have some code that I paralellized using <code>Rayon</code> hoping to improve its performance, but the results, measured by the <code>Bencher</code>, were... most unimpressive. I suspected that it might be caused by the way I am performing the benchmarks (maybe <em>they</em> are run in parallel?), so I tested a simpler case.</p>\n\n<p>Consider the following parallelized code, based on the <a href=\"https://crates.io/crates/quick_sort\" rel=\"nofollow noreferrer\"><code>quick_sort</code> crate</a>:</p>\n\n<pre><code>#![feature(test)]\n\nextern crate rayon;\nextern crate test;\n\nuse test::Bencher;\nuse std::cmp::Ordering;\n\npub fn sort&lt;T&gt;(arr: &amp;mut [T])\n    where T: Send + std::cmp::PartialEq + Ord\n{\n    qsort(arr, find_pivot, &amp;|a, b| a.cmp(b))\n}\n\npub fn sort_by&lt;T, F&gt;(arr: &amp;mut [T], compare: &amp;F)\n    where T: Send + std::cmp::PartialOrd,\n          F: Sync + Fn(&amp;T, &amp;T) -&gt; Ordering\n{\n    qsort(arr, find_pivot, compare);\n}\n\nfn qsort&lt;T, F&gt;(arr: &amp;mut [T], pivot: fn(&amp;[T], &amp;F) -&gt; usize, compare: &amp;F)\n    where T: Send + std::cmp::PartialOrd,\n          F: Sync + Fn(&amp;T, &amp;T) -&gt; Ordering\n{\n    let len = arr.len();\n    if len &lt;= 1 {\n        return;\n    }\n\n    let p = pivot(arr, compare);\n    let p = partition(arr, p, compare);\n    let (l, r) = arr.split_at_mut(p + 1);\n    if p &gt; len / 2 {\n        rayon::join(\n            || qsort(r, pivot, compare),\n            || qsort(l, pivot, compare)\n        );\n    } else {\n        rayon::join(\n            || qsort(l, pivot, compare),\n            || qsort(r, pivot, compare)\n        );\n    }\n}\n\nfn find_pivot&lt;T, F&gt;(arr: &amp;[T], compare: &amp;F) -&gt; usize\n    where T: Send + std::cmp::PartialOrd,\n          F: Sync + Fn(&amp;T, &amp;T) -&gt; Ordering\n{\n    let (l, r) = (0, arr.len() - 1);\n    let m = l + ((r - 1) / 2);\n    let (left, middle, right) = (&amp;arr[l], &amp;arr[m], &amp;arr[r]);\n    if (compare(middle, left) != Ordering::Less) &amp;&amp; (compare(middle, right) != Ordering::Greater) {\n        m\n    } else if (compare(left, middle) != Ordering::Less) &amp;&amp;\n              (compare(left, right) != Ordering::Greater) {\n        l\n    } else {\n        r\n    }\n}\n\n\nfn partition&lt;T, F&gt;(arr: &amp;mut [T], p: usize, compare: &amp;F) -&gt; usize\n    where T: std::cmp::PartialOrd,\n          F: Sync + Fn(&amp;T, &amp;T) -&gt; Ordering\n{\n    if arr.len() &lt;= 1 {\n        return p;\n    }\n\n    let last = arr.len() - 1;\n    let mut next_pivot = 0;\n    arr.swap(last, p);\n    for i in 0..last {\n        if compare(&amp;arr[i], &amp;arr[last]) == Ordering::Less {\n            arr.swap(i, next_pivot);\n            next_pivot += 1;\n        }\n    }\n\n    arr.swap(next_pivot, last);\n    next_pivot\n}\n\n#[bench]\nfn bench_qsort(b: &amp;mut Bencher) {\n    let mut vec = vec![ 3, 97, 50, 56, 58, 80, 91, 71, 83, 65,\n                       92, 35, 11, 26, 69, 44, 42, 75, 40, 43,\n                       63,  5, 62, 56, 35,  3, 51, 97, 100, 73,\n                       42, 41, 79, 86, 93, 58, 65, 96, 66, 36,\n                       17, 97,  6, 16, 52, 30, 38, 14, 39,  7,\n                       48, 83, 37, 97, 21, 58, 41, 59, 97, 37,\n                       97,  9, 24, 78, 77,  7, 78, 80, 11, 79,\n                       42, 30, 39, 27, 71, 61, 12,  8, 49, 62,\n                       69, 48,  8, 56, 89, 27,  1, 80, 31, 62,\n                        7, 15, 30, 90, 75, 78, 22, 99, 97, 89];\n\n    b.iter(|| { sort(&amp;mut vec); } );\n}\n</code></pre>\n\n<p>Results of <code>cargo bench</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>running 1 test\ntest bench_qsort ... bench:      10,374 ns/iter (+/- 296) // WHAT\n</code></pre>\n\n<p>While the results for the sequential code (<code>extern crate quick_sort</code>) are:</p>\n\n<pre><code>running 1 test\ntest bench_qsort ... bench:       1,070 ns/iter (+/- 65)\n</code></pre>\n\n<p>I also tried benchmarking with longer vectors, but the results were consistent. In addition, I performed some tests using GNU time and it looks like the parallel code is faster with bigger vectors, as expected.</p>\n\n<p>What am I doing wrong? Can I use <code>Bencher</code> to benchmark parallel code?</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 6, "creation_date": 1511021689, "post_id": 47368132, "comment_id": 81688671, "body": "<i>&quot;I&#39;d prefer something that is not part of a third party library or doesn&#39;t require too big a definition&quot;</i> You should not misunderstand Rust&#39;s standard library philosophy. It is meant to be <a href=\"https://doc.rust-lang.org/1.21.0/std/\" rel=\"nofollow noreferrer\">&quot;a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem&quot;</a>. As such, multi-dimensional arrays (other than just arrays in arrays) are not part of the standard. However, you should definitely look into <a href=\"https://crates.io/crates/ndarray\" rel=\"nofollow noreferrer\"><code>ndarray</code></a>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1511021765, "post_id": 47368132, "comment_id": 81688690, "body": "Built-in DST references have two pointer-sized elements: a data pointer and a length (or vtable pointer in the case of a trait object). Would a reference to an N-dimensional array need N lengths?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1511022370, "post_id": 47368132, "comment_id": 81688870, "body": "@trentcl Probably yes. I&#39;d imagine an extra field that is a slice of a vector of dimensions."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1511022455, "post_id": 47368132, "comment_id": 81688902, "body": "@E_net4 Hmmm. I look again at <code>ndarray</code>, but I really was hoping to find a self-contained solution. Thanks!"}], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 368, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1511021252, "creation_date": 1511021252, "question_id": 47368132, "link": "https://stackoverflow.com/questions/47368132/contiguous-multidimensional-arrays", "title": "Contiguous multidimensional arrays", "body": "<p>I'd like to find a way to have a DST that is a multi-dimensional array, but with the underlying memory being contiguous. The contiguous requirement is mostly born from the fact that I'd like this array to have roughly the same shape as a multidimensional C VLA (but on the heap, since Rust doesn't support arbitrary stack allocations).</p>\n\n<p>I'd <em>prefer</em> something that is not part of a third party library or doesn't require too big a definition - I'll be generating code including this, so I'd prefer the generated code not rely on a third party library or have a giant definition.</p>\n\n<p>The main thing that would be nice would be to have index operations (which keep returning other multi-dimensional slices), preferably with <code>std::mem::size_of_val</code> returning the right size for the array, as well as indexes into the array.</p>\n\n<p>Is this even possible?</p>\n"}, {"tags": ["rust", "embedded", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511020097, "post_id": 47367793, "comment_id": 81688164, "body": "There&#39;s nothing under <code>target&#47;release</code> that has the name containing &quot;myproject&quot;? Something like <code>tree target&#47;release | grep myproject</code>?"}, {"owner": {"reputation": 230, "user_id": 3892459, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ca3ee1b7e4b9fdc61ca36496aa447618?s=128&d=identicon&r=PG&f=1", "display_name": "teryret", "link": "https://stackoverflow.com/users/3892459/teryret"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511020314, "post_id": 47367793, "comment_id": 81688238, "body": "Exactly (nothing there).  Since I posted the question I discovered the -v flag and from that found that one of the files that came with the template I&#39;m using was the thing that had actually been compiling.  That file was simply &quot;pub mod examples;&quot;.  Do I need to add a pub mod somewhere?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1511020700, "post_id": 47367793, "comment_id": 81688354, "body": "What file have you placed your code in? I&#39;d expect <code>src&#47;main.rs</code>."}, {"owner": {"reputation": 230, "user_id": 3892459, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ca3ee1b7e4b9fdc61ca36496aa447618?s=128&d=identicon&r=PG&f=1", "display_name": "teryret", "link": "https://stackoverflow.com/users/3892459/teryret"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511020842, "post_id": 47367793, "comment_id": 81688404, "body": "X-|   Sure enough, that was the problem.  I&#39;d been calling it src/hello.rs on account of it being called that in the guide I&#39;m starting from (<a href=\"http://blog.japaric.io/quickstart/\" rel=\"nofollow noreferrer\">blog.japaric.io/quickstart</a>).  Thanks for your help (I&#39;d be glad to mark that as the answer if you make it one)!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511021617, "post_id": 47367793, "comment_id": 81688647, "body": "not that it&#39;s <b>examples</b> /hello.rs, not <b>src</b> /hello.rs."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1511021556, "creation_date": 1511021556, "answer_id": 47368176, "question_id": 47367793, "link": "https://stackoverflow.com/questions/47367793/according-to-xargo-my-code-has-built-successfully-but-theres-no-binary-in-targ/47368176#47368176", "title": "According to xargo my code has built successfully, but there&#39;s no binary in target, why?", "body": "<p>In the <a href=\"http://blog.japaric.io/quickstart/\" rel=\"nofollow noreferrer\">tutorial you were following</a>, all of the <a href=\"http://doc.crates.io/manifest.html#examples\" rel=\"nofollow noreferrer\">examples are in an \"examples\" directory</a>. You can build these using the <code>--example</code> argument, as shown in the tutorial: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>xargo build --example hello\n</code></pre>\n\n<p>If this is your primary program, however, you will want to put your code in <strong>\"src/main.rs\"</strong>, allowing just:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>xargo build\n</code></pre>\n\n<p>If you have multiple executables, you can <a href=\"https://stackoverflow.com/q/36604010/155423\">also specify that</a>.</p>\n"}], "owner": {"reputation": 230, "user_id": 3892459, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ca3ee1b7e4b9fdc61ca36496aa447618?s=128&d=identicon&r=PG&f=1", "display_name": "teryret", "link": "https://stackoverflow.com/users/3892459/teryret"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "accepted_answer_id": 47368176, "answer_count": 1, "score": 0, "last_activity_date": 1511021556, "creation_date": 1511019278, "last_edit_date": 1511019846, "question_id": 47367793, "link": "https://stackoverflow.com/questions/47367793/according-to-xargo-my-code-has-built-successfully-but-theres-no-binary-in-targ", "title": "According to xargo my code has built successfully, but there&#39;s no binary in target, why?", "body": "<p>I'm brand new to Rust so forgive me if I don't know the lingo/tools yet.  I'm trying to get an STM32F4 to blink an LED, and I think the code is right, but when I build it xargo doesn't generate a binary or any sort of error.  My code is:</p>\n\n<pre><code>#![feature(proc_macro)] // &lt;- IMPORTANT! Feature gate for procedural macros\n#![no_std]\n\nextern crate cortex_m;\nextern crate cortex_m_rtfm as rtfm;\nextern crate stm32f40x;\n\nuse cortex_m::peripheral::SystClkSource;\nuse rtfm::{app, Threshold};\n\napp! {\n    device: stm32f40x,\n    resources: {},\n    tasks: {\n        SYS_TICK: {\n            path: toggle,\n            resources: [GPIOC],\n        },\n    },\n}\n\nfn init(p: init::Peripherals, _r: init::Resources) {\n    // TODO: initialize the GPIO\n    p.SYST.set_clock_source(SystClkSource::Core);\n    p.SYST.set_reload(8_000_000); // 1s?\n    p.SYST.enable_interrupt();\n    p.SYST.enable_counter();\n}\n\nfn idle() -&gt; ! {\n    loop {\n        rtfm::wfi();\n    }\n}\n\nfn toggle(_t: &amp;mut Threshold, r: SYS_TICK::Resources) {\n    **r.GPIOC.odr.modify(|r, w| w.odr13().bit(!r.odr13().bit()));\n}\n</code></pre>\n\n<p>The Cargo.toml file is </p>\n\n<pre><code>[package]\nname = \"sign_firmware\"\nversion = \"0.0.1\"\nauthors = [\"teryret\"]\ncategories = [\"embedded\", \"no-std\"]\ndescription = \"With any luck this will cause an STM32F4 based board to drive a few thousand LEDs.\"\nkeywords = [\"arm\", \"cortex-m\"]\nlicense = \"MIT OR Apache-2.0\"\nrepository = \"TODO\"\n[dependencies]\ncortex-m = \"*\"\ncortex-m-rt = \"*\"\ncortex-m-rtfm = \"*\"\nstm32f40x = \"*\"\n\n[profile]\n[profile.release]\ndebug = true\nlto = true\n\n[target.arm-none-linux-gnueabihf]\nar = \"arm-linux-gnueabihf-gcc-ar\"\nlinker = \"arm-linux-gnueabihf-gcc\"\n</code></pre>\n\n<p>And when I run <code>xargo build --release</code> in the docker image I set up to contain all the dependencies and whatnot it says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>teryret@bee ~/d/rtfm&gt; ./build \n   Compiling core v0.0.0 (file:///usr/local/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore)\n    Finished release [optimized + debuginfo] target(s) in 12.82 secs\n    Updating git repository `https://github.com/rust-lang-nursery/compiler-builtins`\n   Compiling compiler_builtins v0.1.0 (https://github.com/rust-lang-nursery/compiler-builtins#f5532b22)\n    Finished release [optimized + debuginfo] target(s) in 2.12 secs\nwarning: unused manifest key: target.arm-none-linux-gnueabihf.ar\nwarning: unused manifest key: target.arm-none-linux-gnueabihf.linker\n Downloading cortex-m-rtfm v0.2.1\n Downloading stm32f40x v0.5.0\n Downloading cortex-m-rt v0.3.6\n Downloading cortex-m v0.3.1\n Downloading rtfm-core v0.1.0\n Downloading static-ref v0.2.1\n Downloading cortex-m-rtfm-macros v0.2.0\n Downloading error-chain v0.10.0\n Downloading quote v0.3.15\n Downloading rtfm-syntax v0.1.0\n Downloading syn v0.11.11\n Downloading unicode-xid v0.0.4\n Downloading synom v0.11.3\n Downloading volatile-register v0.2.0\n Downloading bare-metal v0.1.1\n Downloading aligned v0.1.1\n Downloading vcell v0.1.0\n Downloading r0 v0.2.2\n   Compiling r0 v0.2.2\n   Compiling libc v0.2.33\n   Compiling vcell v0.1.0\n   Compiling quote v0.3.15\n   Compiling cc v1.0.3\n   Compiling sign_firmware v0.0.1 (file:///usr/src/myapp)\n   Compiling cortex-m-rt v0.3.6\n   Compiling cortex-m-rtfm v0.2.1\n   Compiling cfg-if v0.1.2\n   Compiling rustc-demangle v0.1.5\n   Compiling bare-metal v0.1.1\n   Compiling unicode-xid v0.0.4\n   Compiling aligned v0.1.1\n   Compiling cortex-m v0.3.1\n   Compiling static-ref v0.2.1\n   Compiling volatile-register v0.2.0\n   Compiling synom v0.11.3\n   Compiling rtfm-core v0.1.0\n   Compiling syn v0.11.11\n   Compiling stm32f40x v0.5.0\n   Compiling backtrace-sys v0.1.16\n   Compiling backtrace v0.3.4\n   Compiling error-chain v0.10.0\n   Compiling rtfm-syntax v0.1.0\n   Compiling cortex-m-rtfm-macros v0.2.0\n    Finished release [optimized + debuginfo] target(s) in 47.2 secs\n</code></pre>\n\n<p>While lots of stuff is generated in target/ none of it is a binary I can flash onto the board.  Any idea why?  I mean, it's got to be something simple, but I don't have the experience to know where to look.</p>\n"}, {"tags": ["indexing", "rust", "range"], "answers": [{"comments": [{"owner": {"reputation": 1629, "user_id": 2927848, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/7e21a18807ebac8e078272cfdeb6b7dd?s=128&d=identicon&r=PG&f=1", "display_name": "Chase R Lewis", "link": "https://stackoverflow.com/users/2927848/chase-r-lewis"}, "edited": false, "score": 0, "creation_date": 1511044882, "post_id": 47367721, "comment_id": 81696390, "body": "Ah guess i found some old documentation i saw something with std::indexing::Range and was confused. Much appreciated."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1511019419, "last_edit_date": 1511019419, "creation_date": 1511018910, "answer_id": 47367721, "question_id": 47367686, "link": "https://stackoverflow.com/questions/47367686/how-to-take-a-range-as-a-variable-in-rust/47367721#47367721", "title": "How to take a range as a variable in Rust?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"nofollow noreferrer\"><code>Range</code></a>, <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeTo.html\" rel=\"nofollow noreferrer\"><code>RangeTo</code></a>, <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"nofollow noreferrer\"><code>RangeFrom</code></a> or <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFull.html\" rel=\"nofollow noreferrer\"><code>RangeFull</code></a>:</p>\n\n<pre><code>use std::ops::Range;\n\nfn foo(r: Range&lt;i32&gt;) {}\n\nfn main() {\n    foo(0..10);\n}\n</code></pre>\n\n<p>Each range type is parameterized with a concrete type.</p>\n"}], "owner": {"reputation": 1629, "user_id": 2927848, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/7e21a18807ebac8e078272cfdeb6b7dd?s=128&d=identicon&r=PG&f=1", "display_name": "Chase R Lewis", "link": "https://stackoverflow.com/users/2927848/chase-r-lewis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 490, "favorite_count": 0, "accepted_answer_id": 47367721, "answer_count": 1, "score": -2, "last_activity_date": 1511019419, "creation_date": 1511018763, "question_id": 47367686, "link": "https://stackoverflow.com/questions/47367686/how-to-take-a-range-as-a-variable-in-rust", "title": "How to take a range as a variable in Rust?", "body": "<p>I'm not sure what type and how to use a range variable in Rust. Looking around I couldn't find an example of how they worked when passed. Any examples would be greatly appreciated.</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 3, "last_activity_date": 1510998582, "creation_date": 1510998582, "answer_id": 47364654, "question_id": 47364211, "link": "https://stackoverflow.com/questions/47364211/can-i-implement-a-trait-which-adds-information-to-an-external-type-in-rust/47364654#47364654", "title": "Can I implement a trait which adds information to an external type in Rust?", "body": "<p>No. Traits cannot add data members to the existing structures. Actually, only a programmer can do that by modifying the definition of a structure. Wrapper structures or hash-tables are the ways to go.</p>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 2, "last_activity_date": 1511018278, "last_edit_date": 1511018278, "creation_date": 1511017645, "answer_id": 47367505, "question_id": 47364211, "link": "https://stackoverflow.com/questions/47364211/can-i-implement-a-trait-which-adds-information-to-an-external-type-in-rust/47367505#47367505", "title": "Can I implement a trait which adds information to an external type in Rust?", "body": "<p>No, traits can only contain behavior, not data. But you could make a struct.</p>\n\n<p>If you could implement <code>History</code> for <code>u32</code>, you'd have to keep the entire history of <em>every</em> <code>u32</code> object indefinitely, in case one day someone decided to call <code>.history()</code> on it. (Also, what would happen when you assign one <code>u32</code> to another? Does its history come with it, or does the new value just get added to the list?)</p>\n\n<p>Instead, you probably want to be able to mark <em>specific</em> <code>u32</code> objects to keep a history. A wrapper struct, as <a href=\"https://stackoverflow.com/a/47364654/3650362\">red75prime's answer</a> suggests, will work:</p>\n\n<pre><code>mod hist {\n    use std::mem;\n\n    pub struct History&lt;T&gt; {\n        value: T,\n        history: Vec&lt;T&gt;,\n    }\n\n    impl&lt;T&gt; History&lt;T&gt; {\n        pub fn new(value: T) -&gt; Self {\n            History {\n                value,\n                history: Vec::new(),\n            }\n        }\n\n        pub fn set(&amp;mut self, value: T) {\n            self.history.push(mem::replace(&amp;mut self.value, value));\n        }\n\n        pub fn get(&amp;self) -&gt; T\n        where\n            T: Copy,\n        {\n            self.value\n        }\n\n        pub fn history(&amp;self) -&gt; &amp;[T] {\n            &amp;self.history\n        }\n    }\n}\n</code></pre>\n\n<p>It's generic, so you can have a <code>History&lt;u32&gt;</code> or <code>History&lt;String&gt;</code> or whatever you want, but the <code>get()</code> method will only be implemented when the wrapped type is <code>Copy</code>.* Your <code>Weight</code> type could just be an alias for <code>History&lt;u32&gt;</code>. <a href=\"https://play.rust-lang.org/?gist=d334dc06b94293d1d843e85607574a09&amp;version=stable\" rel=\"nofollow noreferrer\">Here it is in the playground.</a></p>\n\n<p>Wrapping this code in a module is a necessary part of maintaining the abstraction. That means you can't write <code>weight.value</code>, you have to call <code>weight.get()</code>. If <code>value</code> were marked <code>pub</code>, you could assign directly to <code>weight.value</code> (bypassing <code>set</code>) and then <code>history</code> would be inaccurate.</p>\n\n<p>As a side note, you <a href=\"https://stackoverflow.com/q/40006219/3650362\"><em>almost never</em></a> want <code>&amp;Vec&lt;T&gt;</code> when you can use <code>&amp;[T]</code>, so I changed the signature of <code>history()</code>. Another thing you might consider is returning an iterator over the previous values (perhaps in reverse order) instead of a slice.</p>\n\n<hr>\n\n<p>* A better way of getting the <code>T</code> out of a <code>History&lt;T&gt;</code> is to implement <code>Deref</code> and write <code>*foo</code> instead of <code>foo.get()</code>.</p>\n"}], "owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "accepted_answer_id": 47364654, "answer_count": 2, "score": 3, "last_activity_date": 1511018278, "creation_date": 1510995072, "question_id": 47364211, "link": "https://stackoverflow.com/questions/47364211/can-i-implement-a-trait-which-adds-information-to-an-external-type-in-rust", "title": "Can I implement a trait which adds information to an external type in Rust?", "body": "<p>I just implemented a simple trait to keep the history of a struct property:</p>\n\n<pre><code>fn main() {\n    let mut weight = Weight::new(2);\n    weight.set(3);\n    weight.set(5);\n    println!(\"Current weight: {}. History: {:?}\", weight.value, weight.history);\n}\n\ntrait History&lt;T: Copy&gt; {\n    fn set(&amp;mut self, value: T);\n    fn history(&amp;self) -&gt; &amp;Vec&lt;T&gt;;\n}\n\nimpl History&lt;u32&gt; for Weight {\n    fn set(&amp;mut self, value: u32) {\n        self.history.push(self.value);\n        self.value = value;\n    }\n    fn history(&amp;self) -&gt; &amp;Vec&lt;u32&gt; {\n        &amp;self.history\n    }\n}\n\npub struct Weight {\n    value: u32,\n    history: Vec&lt;u32&gt;,\n}\n\nimpl Weight {\n    fn new(value: u32) -&gt; Weight {\n        Weight {\n            value,\n            history: Vec::new(),\n        }\n    }\n}\n</code></pre>\n\n<p>I don't expect this is possible, but could you add the <code>History</code> trait (or something equivalent) to something which doesn't already have a <code>history</code> property (like <code>u32</code> or <code>String</code>), effectively tacking on some information about which values the variable has taken?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1510977503, "post_id": 47362306, "comment_id": 81677607, "body": "Just to clarify, you&#39;ve asked for <code>first, second</code> to be true ... but they don&#39;t match anyway? I imagine thats a typo or are you asking something else?"}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1510977761, "post_id": 47362306, "comment_id": 81677648, "body": "@SimonWhitehead The idea is that {x, y} in the first matches {y, x} in the second, and for my purposes that makes their shape equal."}, {"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1510977952, "post_id": 47362306, "comment_id": 81677683, "body": "Why not give <code>x</code> and <code>y</code> the same type? It will make things much easier."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1510978145, "post_id": 47362306, "comment_id": 81677716, "body": "@EvilTak I&#39;m trying to learn Rust, and trying to mix up the examples in the <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-01-syntax.html\" rel=\"nofollow noreferrer\">book</a> to internalize properly."}, {"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1510978392, "post_id": 47362306, "comment_id": 81677754, "body": "I see where you are coming from. TBH, that is a terrible example for using two different generic type parameters, since an integer can very well be encapsulated in a float. You would (should) never get a situation like this in actual production code."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1510979035, "post_id": 47362306, "comment_id": 81677855, "body": "Sure. I figured the example in the book was even less realistic: Write a <code>mixup</code> function which takes two <code>Point</code>s and returns a <code>Point</code> with one value from one and another from the other. Like most programming introductions, it gets harder and harder to find realistic examples the further in you get. It would be awesome if someone could find a reasonable example to deal with two variables of the same struct but different types."}], "answers": [{"comments": [{"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1511067760, "post_id": 47364501, "comment_id": 81700282, "body": "Thanks! You should probably paste the full code into this answer, though; links go bust every day."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 2, "last_activity_date": 1511078827, "last_edit_date": 1511078827, "creation_date": 1510997418, "answer_id": 47364501, "question_id": 47362306, "link": "https://stackoverflow.com/questions/47362306/how-to-compare-rectanglet-u-for-shape-equality/47364501#47364501", "title": "How to compare Rectangle&lt;T, U&gt; for shape equality?", "body": "<p>While it is possible to somewhat mimic dynamically typed language by using <code>Any</code></p>\n\n<pre><code>fn compare&lt;T, U, V, W&gt;(a: &amp;Rect&lt;T, U&gt;, b: &amp;Rect&lt;V, W&gt;) -&gt; bool\nwhere \n    T: Any + PartialEq + 'static, U: Any + PartialEq + 'static,\n    V: Any + 'static, W: Any + 'static,\n{\n    if Any::is::&lt;T&gt;(&amp;b.x) &amp;&amp; Any::is::&lt;U&gt;(&amp;b.y) {\n        Some(&amp;a.x) == Any::downcast_ref::&lt;T&gt;(&amp;b.x) &amp;&amp;\n        Some(&amp;a.y) == Any::downcast_ref::&lt;U&gt;(&amp;b.y) \n    } else if Any::is::&lt;T&gt;(&amp;b.y) &amp;&amp; Any::is::&lt;U&gt;(&amp;b.x) {\n        Some(&amp;a.x) == Any::downcast_ref::&lt;T&gt;(&amp;b.y) &amp;&amp;\n        Some(&amp;a.y) == Any::downcast_ref::&lt;U&gt;(&amp;b.x) \n    } else {\n        false\n    }\n}\n</code></pre>\n\n<p>I would go by implementing <code>PartialEq</code> and a simple helper function which swaps the elements of a structure.</p>\n\n<pre><code>struct Rect&lt;T, U&gt; {\n    x: T,\n    y: U,\n}\n\nimpl&lt;T, U&gt; Rect&lt;T, U&gt; {\n    // Reverse the order of structure fields\n    // References allow the use of non-copiable types T and U\n    fn rev(&amp;self) -&gt; Rect&lt;&amp;U, &amp;T&gt; {\n        Rect {\n            x: &amp;self.y,\n            y: &amp;self.x,\n        }\n    }\n}\n\nimpl&lt;T, U&gt; PartialEq for Rect&lt;T, U&gt;\nwhere\n    T: PartialEq,\n    U: PartialEq,\n{\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.x == other.x &amp;&amp; self.y == other.y\n    }\n}\n\n// Allows to compare Rect&lt;T, U&gt; and Rect&lt;&amp;T, &amp;U&gt;\nimpl&lt;'a, T, U&gt; PartialEq&lt;Rect&lt;&amp;'a T, &amp;'a U&gt;&gt; for Rect&lt;T, U&gt;\nwhere\n    T: PartialEq,\n    U: PartialEq,\n{\n    fn eq(&amp;self, other: &amp;Rect&lt;&amp;'a T, &amp;'a U&gt;) -&gt; bool {\n        &amp;self.x == other.x &amp;&amp; &amp;self.y == other.y\n    }\n}\n\nfn main() {\n    let first = Rect { x: 3.2, y: 1 };\n    let second = Rect { x: 1, y: 3.2 };\n    let third = Rect { x: 3, y: 1 };\n    let fourth = Rect { x: 3.1, y: 2 };\n\n\n    assert_eq!(first == second.rev(), true);\n    assert_eq!(first == fourth, false);\n    // assert_eq!(first == third, false); // Compilation error\n    assert_eq!(first == first, true);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=af36a188abb96e27a0bb45e20996d0af&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1511020598, "creation_date": 1511020598, "answer_id": 47368022, "question_id": 47362306, "link": "https://stackoverflow.com/questions/47362306/how-to-compare-rectanglet-u-for-shape-equality/47368022#47368022", "title": "How to compare Rectangle&lt;T, U&gt; for shape equality?", "body": "<p>The normal way of doing this would be to implement <code>PartialEq</code>, roughly like this:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Rectangle&lt;T, U&gt; {\n    x: T,\n    y: U,\n}\n\nimpl&lt;T, U, X, Y&gt; PartialEq&lt;Rectangle&lt;X, Y&gt;&gt; for Rectangle&lt;T, U&gt;\nwhere\n    T: PartialEq&lt;X&gt; + PartialEq&lt;Y&gt;,\n    U: PartialEq&lt;X&gt; + PartialEq&lt;Y&gt;,\n{\n    fn eq(&amp;self, other: &amp;Rectangle&lt;X, Y&gt;) -&gt; bool {\n        self.x == other.x &amp;&amp; self.y == other.y || \n            self.x == other.y &amp;&amp; self.y == other.x\n    }\n}\n</code></pre>\n\n<p>Unfortunately for your specific case, integers and floating points cannot be compared for equality:</p>\n\n<pre><code>fn main() {\n    let first = Rectangle { x: 3.2, y: 1 };\n    let second = Rectangle { x: 1, y: 3.2 };\n    let third = Rectangle { x: 3, y: 1 };\n\n    assert_eq!(first, first);\n    assert_eq!(first, second);\n    assert_eq!(second, first);\n\n    assert_ne!(first, third);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `{float}: std::cmp::PartialEq&lt;{integer}&gt;` is not satisfied\n\nerror[E0277]: the trait bound `{integer}: std::cmp::PartialEq&lt;{float}&gt;` is not satisfied\n</code></pre>\n\n<p>Instead, you'd need to define your own trait that defines \"equality\" and then implement it as being able to cross from floating point to integer.</p>\n"}], "owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 47364501, "answer_count": 2, "score": 0, "last_activity_date": 1511078827, "creation_date": 1510977110, "last_edit_date": 1510977965, "question_id": 47362306, "link": "https://stackoverflow.com/questions/47362306/how-to-compare-rectanglet-u-for-shape-equality", "title": "How to compare Rectangle&lt;T, U&gt; for shape equality?", "body": "<p>Given</p>\n\n<pre><code>struct Rectangle&lt;T, U&gt; {\n    x: T,\n    y: U,\n}\n\nlet first = Rectangle { x: 3.2, y: 1 };\nlet second = Rectangle { x: 1, y: 3.2 };\nlet third = Rectangle { x: 3, y: 1 };\n</code></pre>\n\n<p>how do I declare/implement a safe <code>fn same_shape_as(&amp;self, \u2026) -&gt; bool</code> which returns true for <code>first, first</code>, <code>first, second</code> and <code>second, first</code>, but false for <code>first, third</code>? (Not necessarily looking for a full implementation, but just which syntax/concepts are involved.) For example, is there some way to <code>match</code> on the types of properties being equal, or to check whether two values are comparable before attempting to compare them?</p>\n\n<p>To clarify, a naive Python (yes, I'm aware of duck typing) implementation might be the following:</p>\n\n<pre><code>def same_shape_as(self, other):\n    if type(self.x) == type(other.x) and type(self.y) == type(other.y):\n        return self.x == other.x and self.y == other.y\n    elif type(self.x) == type(other.y) and type(self.y) == type(other.x):\n        return self.x == other.y and self.y == other.x\n    else:\n        return False\n</code></pre>\n"}, {"tags": ["generics", "syntax", "rust"], "comments": [{"owner": {"reputation": 36902, "user_id": 41655, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/430ea1cba106cc65b7687d66e9df4f06?s=128&d=identicon&r=PG", "display_name": "millimoose", "link": "https://stackoverflow.com/users/41655/millimoose"}, "edited": false, "score": 1, "creation_date": 1510970556, "post_id": 47361694, "comment_id": 81676412, "body": "Going by <a href=\"https://rustbyexample.com/generics/impl.html\" rel=\"nofollow noreferrer\">Rust By Example</a>, I&#39;m guessing it&#39;s because <code>impl Foo&lt;T&gt;</code> already means something else: &quot;implement the Foo generic type for one specific type, called T&quot;."}, {"owner": {"reputation": 36902, "user_id": 41655, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/430ea1cba106cc65b7687d66e9df4f06?s=128&d=identicon&r=PG", "display_name": "millimoose", "link": "https://stackoverflow.com/users/41655/millimoose"}, "edited": false, "score": 1, "creation_date": 1510970625, "post_id": 47361694, "comment_id": 81676431, "body": "Imagine the situation in reverse: does <code>impl Foo&lt;i32&gt;</code> mean &quot;implementation of Foo for 32-bit integers&quot;, or &quot;generic implementation of Foo for any type parameter named <code>i32</code>&quot;? This ambiguity doesn&#39;t in the other cases you mention."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 36902, "user_id": 41655, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/430ea1cba106cc65b7687d66e9df4f06?s=128&d=identicon&r=PG", "display_name": "millimoose", "link": "https://stackoverflow.com/users/41655/millimoose"}, "edited": false, "score": 0, "creation_date": 1510970848, "post_id": 47361694, "comment_id": 81676463, "body": "@millimoose: So in some cases <code>&lt;&gt;</code> denotes a generic, and in some a specific type? It seems it would be difficult to know which one I&#39;m dealing with without being familiar with the syntax."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1510970929, "post_id": 47361694, "comment_id": 81676478, "body": "It&#39;s no more confusing than <code>(...)</code> being both how you define and how you call a function.  And I&#39;m not sure how you&#39;d be effective in <i>any</i> language if you&#39;re unfamiliar with its syntax."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1510971129, "post_id": 47361694, "comment_id": 81676514, "body": "Fair enough, of course. Rust otherwise has a very clear syntax, but I guess this sort of ambiguity is too much rooted in the C++ tradition. I guess we don&#39;t have enough different brackets to distinguish this clearly :)"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1510972432, "post_id": 47361694, "comment_id": 81676756, "body": "@l0b0 Suppose we used <code>&#171;&#187;</code> for declaring a generic and <code>&lt;&gt;</code> for using a specific type -- then you&#39;d have to write <code>struct Foo&#171;T&#187;</code> and <code>impl&#171;T&#187; Foo&lt;T&gt;</code>. Would that really make things clearer?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1510972712, "post_id": 47361694, "comment_id": 81676806, "body": "Actually it might. Hmm."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1510975200, "post_id": 47361694, "comment_id": 81677189, "body": "@trentcl That&#39;s exactly what I meant - making it obvious what&#39;s a generic and what&#39;s a specific type, regardless of context."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1510979251, "post_id": 47361694, "comment_id": 81677883, "body": "@l0b0, every time I write <code>impl&#171;T&#187;</code>, I will be thinking &quot;Is it <code>&#171;</code> or <code>&lt;</code>? Ah, what&#39;s the matter, let it be <code>&lt;</code>. Compiler will tell me if I wrong.&quot; Why introduce a choice where it is not needed?  <code>impl&#171;T&#187;</code>, <code>impl&lt;T&gt;</code>, <code>impl[T]</code>, <code>impl(T)</code> - those can&#39;t mean anything other than &quot;declare generic type T&quot;."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1510979418, "post_id": 47361694, "comment_id": 81677912, "body": "@red75prime You could make the same argument for using brackets for everything. The compiler will be able to tell from context what you meant. That doesn&#39;t mean it&#39;s not confusing."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1510979941, "post_id": 47361694, "comment_id": 81678003, "body": "@l0b0, no, I can&#39;t. <code>impl</code> provides an anchor which unambiguously defines a meaning of nearby <code>T</code>, while I perceive <code>&lt;&gt;</code> as generic enclosure for a list of types. <code>struct</code> provides another anchor. In something like <code>fn foo(t)(a:t) -&gt; ((t)a(a))</code> there&#39;s no apparent anchors."}, {"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1510980242, "post_id": 47361694, "comment_id": 81678056, "body": "@red75prime The point was that you could easily define a <i>more</i> ambiguous syntax by overloading the meaning of whatever character(s) you choose, or you could make a <i>less</i> ambiguous syntax than the current one by having a different syntax for generic and specific types. There&#39;s no reason your example syntax could be unambiguous to a compiler, while being impenetrable to a programmer."}, {"owner": {"reputation": 36902, "user_id": 41655, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/430ea1cba106cc65b7687d66e9df4f06?s=128&d=identicon&r=PG", "display_name": "millimoose", "link": "https://stackoverflow.com/users/41655/millimoose"}, "edited": false, "score": 0, "creation_date": 1511165124, "post_id": 47361694, "comment_id": 81727852, "body": "While you\u2019re correct about the ambiguity being there, every single language with generics has the ambiguity, which might be why the designers of Rust didn\u2019t think it\u2019s confusing to rely on context. E.g. in C#, in <code>class List&lt;T&gt; : IList&lt;T&gt; {</code>, the angle brackets have both meanings, vs. <code>interface IList&lt;T&gt;</code> or <code>class IntList : IList&lt;int&gt;</code>."}], "answers": [{"comments": [{"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 0, "creation_date": 1510971039, "post_id": 47361762, "comment_id": 81676500, "body": "Thanks, this clarifies it. I guess my confusion stemmed from the ambiguity that <i>sometimes</i> <code>&lt;T&gt;</code> means a generic, and sometimes a specific type."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1510970866, "creation_date": 1510970866, "answer_id": 47361762, "question_id": 47361694, "link": "https://stackoverflow.com/questions/47361694/is-there-a-technical-reason-why-the-implementation-isnt-just-impl-foot/47361762#47361762", "title": "Is there a technical reason why the implementation isn&#39;t just impl Foo&lt;T&gt;?", "body": "<pre><code>impl Foo&lt;T&gt; { ... }\n</code></pre>\n\n<p>Is <code>T</code> a type parameter, or an actual type named <code>T</code>?  If you answered the second, then you've thrown generics out the window entirely: it would be impossible to implement functionality for a generic set of types.  If you answered the first, then how do you propose users do this:</p>\n\n<pre><code>impl Foo&lt;T&gt; { /* generic stuff */ }\nimpl Foo&lt;i32&gt; { /* i32-specific stuff */ }\nimpl Foo&lt;u32&gt; { /* u32-specific stuff */ }\n</code></pre>\n\n<p>That would just be three <code>impl</code> blocks with type parameters named <code>T</code>, <code>i32</code>, and <code>u32</code> respectively.</p>\n\n<p>You might say \"well, just decide from context\".  Now, in order to work out what's going on, a user has to check not only the rest of the module, but all imported symbols <em>and</em> anything in the standard library's prelude in order to decide if a type is a parameter or not.  Rust abhors this kind of ambiguity.</p>\n\n<p>It is far, <em>far</em> simpler for the compiler and the reader to just be specific about what is and is not a parameter.</p>\n\n<p>You don't have to do this with <code>struct</code> because the thing in the brackets cannot possibly be anything <em>other</em> than a type parameter declaration.</p>\n"}, {"comments": [{"owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "edited": false, "score": 1, "creation_date": 1510988877, "post_id": 47363431, "comment_id": 81679876, "body": "Great comparison and summary of the issue!"}], "tags": [], "owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "is_accepted": false, "score": 1, "last_activity_date": 1511003932, "last_edit_date": 1511003932, "creation_date": 1510988173, "answer_id": 47363431, "question_id": 47361694, "link": "https://stackoverflow.com/questions/47361694/is-there-a-technical-reason-why-the-implementation-isnt-just-impl-foot/47363431#47363431", "title": "Is there a technical reason why the implementation isn&#39;t just impl Foo&lt;T&gt;?", "body": "<p>In addition to <a href=\"https://stackoverflow.com/users/42353/dk\">@dk</a>'s answer, I would like to compare how Rust does it to how Haskell does it.</p>\n\n<p>In Haskell, all specific types must start capitalized. Thus, it is illegal to write:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>data mytype Var = Constructor {\n    myVar :: Var,\n    myInt :: Foo\n}\n</code></pre>\n\n<p>Instead, Haskell reserves types which start with a lower-cased letter for type variables:</p>\n\n<pre class=\"lang-haskell prettyprint-override\"><code>data MyType var = Constructor {\n     myVar :: var\n     myInt :: Int\n}\n\ninstance MyClass (MyType var) where\n     ...\n</code></pre>\n\n<p>Here, <code>var</code> is a type variable, <code>MyType</code> is concrete, and <code>Int</code> is concrete.</p>\n\n<p>In my opinion - which you may not share, Rust made the mistake to allow non-capitalized type-identifiers. Thus the language has no other choice but to require you to explicitly say which type identifiers are variables and which are specific. An argument could be made that Rust's explicitness improves readability. The opposite could also be argued.</p>\n\n<p>Rust could of course add a hypothetical feature where you may say:</p>\n\n<pre><code> impl Foo&lt;#T, T, u32&gt; { .. }\n</code></pre>\n\n<p>Here, the prefix <code>#</code> is taken to mean \"This is a type variable\", so <code>#T</code> is a type variable, <code>T</code> is specific, and <code>u32</code> is specific. There is no ambiguity and only local reasoning is required.</p>\n\n<p>With this feature, you may get a little bit less verbosity, but I firmly believe this ship has sailed - adding this feature now will only add another way of doing the same thing for very little gain. The feature would however add the cost of having another feature that the language users must learn.</p>\n"}], "owner": {"reputation": 48006, "user_id": 96588, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/425fed56a46504d37ec907d99b09ecde?s=128&d=identicon&r=PG", "display_name": "l0b0", "link": "https://stackoverflow.com/users/96588/l0b0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "accepted_answer_id": 47361762, "answer_count": 2, "score": 1, "last_activity_date": 1511003932, "creation_date": 1510970209, "last_edit_date": 1510975255, "question_id": 47361694, "link": "https://stackoverflow.com/questions/47361694/is-there-a-technical-reason-why-the-implementation-isnt-just-impl-foot", "title": "Is there a technical reason why the implementation isn&#39;t just impl Foo&lt;T&gt;?", "body": "<p>I just learned that structs using generics are declared as <code>struct Foo&lt;T&gt;</code>, and that the implementation is declared as <code>impl&lt;T&gt; Foo&lt;T&gt;</code>. The <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-01-syntax.html\" rel=\"nofollow noreferrer\">book</a> explains the discrepancy in the following way:</p>\n\n<blockquote>\n  <p>Note that we have to declare <code>T</code> just after <code>impl</code> in order to use <code>T</code> in the type <code>Point&lt;T&gt;</code>. Declaring <code>T</code> as a generic type after the <code>impl</code> is how Rust knows the type in the angle brackets in <code>Point</code> is a generic type rather than a concrete type. </p>\n</blockquote>\n\n<p>Again, I'm a newbie, but couldn't the same argument be made for having to declare <code>struct&lt;T&gt; Foo&lt;T&gt;</code> (and possibly even <code>fn&lt;T&gt; foo&lt;T&gt;(bar: T)</code>)?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510959041, "post_id": 47360392, "comment_id": 81673782, "body": "Why must they be function pointers as opposed to closures?"}, {"owner": {"reputation": 4020, "user_id": 388739, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/vqsVi.jpg?s=128&g=1", "display_name": "Mark LeMoine", "link": "https://stackoverflow.com/users/388739/mark-lemoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510960108, "post_id": 47360392, "comment_id": 81674117, "body": "Hi Shep, there&#39;s no reason for them to be! I&#39;m unfamiliar with the type definitions for closures, would those be the <code>Fn</code>/<code>FnMut</code>/<code>FnOnce</code> traits?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510960637, "post_id": 47360392, "comment_id": 81674241, "body": "That&#39;s right, and function pointers implement those traits natively, so they can be used in the same place. However, I&#39;m not sure that either actually solve your problem."}, {"owner": {"reputation": 4020, "user_id": 388739, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/vqsVi.jpg?s=128&g=1", "display_name": "Mark LeMoine", "link": "https://stackoverflow.com/users/388739/mark-lemoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510964252, "post_id": 47360392, "comment_id": 81675249, "body": "Is there something tricky that I&#39;m missing? It almost seems like I need a <code>where</code> within a <code>where</code>, something like: <code>media_item_filter: F where F: Fn(P) -&gt; bool; where P: AsRef&lt;Path&gt;</code>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1510964863, "creation_date": 1510964863, "answer_id": 47361216, "question_id": 47360392, "link": "https://stackoverflow.com/questions/47360392/function-pointers-in-rust-using-constrained-generics/47361216#47361216", "title": "Function pointers in Rust using constrained generics", "body": "<p>To my knowledge, you cannot have a function pointer with a generic type, I don't even think such a construct is accepted by the Rust parser.</p>\n\n<p>Furthermore, you cannot simply switch to extra type parameters on the struct as they would be unused by the struct itself:</p>\n\n<pre><code>struct MediaLibrary&lt;F, P1, K, P2, B&gt;\nwhere\n    F: Fn(P1) -&gt; bool,\n    P1: AsRef&lt;Path&gt;,\n    K: Fn(P2) -&gt; B,\n    P2: AsRef&lt;Path&gt;,\n    B: Ord,\n{\n    root_dir: PathBuf,\n    item_meta_fn: String,\n    self_meta_fn: String,\n    media_item_filter: F,\n    media_item_sort_key: K,\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `P1` is never used\n --&gt; src/main.rs:3:24\n  |\n3 | struct MediaLibrary&lt;F, P1, K, P2, B&gt;\n  |                        ^^ unused type parameter\n  |\n  = help: consider removing `P1` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>Instead, you can choose to apply the constraints only on the functions where they are used:</p>\n\n<pre><code>struct MediaLibrary&lt;F&gt; {\n    media_item_filter: F,\n}\n\nimpl&lt;F&gt; MediaLibrary&lt;F&gt; {\n    fn do_filter&lt;P&gt;(&amp;self)\n    where\n        F: Fn(P) -&gt; bool,\n        P: AsRef&lt;Path&gt;,\n    {}\n}\n</code></pre>\n\n<p>As the message states, you could also use <code>PhantomData</code>.</p>\n"}], "owner": {"reputation": 4020, "user_id": 388739, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/vqsVi.jpg?s=128&g=1", "display_name": "Mark LeMoine", "link": "https://stackoverflow.com/users/388739/mark-lemoine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 509, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1510964863, "creation_date": 1510958824, "last_edit_date": 1510959017, "question_id": 47360392, "link": "https://stackoverflow.com/questions/47360392/function-pointers-in-rust-using-constrained-generics", "title": "Function pointers in Rust using constrained generics", "body": "<p>I'm trying to create a struct that looks like this:</p>\n\n<pre><code>struct MediaLibrary&lt;B&gt;\nwhere\n    B: Ord,\n{\n    root_dir: PathBuf,\n    item_meta_fn: String,\n    self_meta_fn: String,\n    media_item_filter: fn(&amp;Path) -&gt; bool,\n    media_item_sort_key: fn(&amp;Path) -&gt; B,\n}\n</code></pre>\n\n<p>The last two fields are meant to be used as a predicate to test if a given path is a valid media file and to sort a vector of paths (using <code>sort_by_key</code>), respectively.</p>\n\n<p>However, as it is right now, the design is inflexible: both functions are fixed to accept only <code>Path</code>. I'd like to be able to use <code>P: AsRef&lt;Path&gt;</code> as the stdlib uses for many of its file and path methods, but I'm not sure how to add this.</p>\n\n<p>A number of the methods I've <code>impl</code>'d for <code>MediaLibrary</code> are already using <code>P: AsRef&lt;Path&gt;</code> for their arguments, so my gut feeling tells me that there would be conflicts.</p>\n"}, {"tags": ["c", "rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 3, "last_activity_date": 1510953361, "creation_date": 1510953361, "answer_id": 47359403, "question_id": 47359281, "link": "https://stackoverflow.com/questions/47359281/generate-opaque-pointer-in-c-using-rusty-cheddar/47359403#47359403", "title": "Generate opaque pointer in C using rusty-cheddar", "body": "<p>The solution is specified right on the <a href=\"https://github.com/Sean1708/rusty-cheddar#opaque-structs\" rel=\"nofollow noreferrer\">readme</a> file:</p>\n\n<blockquote>\n  <p>To define an opaque struct you must define a public newtype which is marked as <code>#[repr(C)]</code>.</p>\n</blockquote>\n\n<p>Thus:</p>\n\n<pre><code>struct AccountDatabase {\n    money: HashMap&lt;String, u32&gt;,\n}\n\nimpl AccountDatabase {\n    fn new() -&gt; AccountDatabase {\n        AccountDatabase {\n            money: HashMap::new()\n        }\n    }\n}\n\n#[repr(C)]\npub struct Crate_AccountDatabase(AccountDatabase);\n</code></pre>\n\n<p>(or with some other struct naming of your choice)</p>\n"}], "owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 103, "favorite_count": 0, "accepted_answer_id": 47359403, "answer_count": 1, "score": -2, "last_activity_date": 1510953749, "creation_date": 1510952788, "last_edit_date": 1510953749, "question_id": 47359281, "link": "https://stackoverflow.com/questions/47359281/generate-opaque-pointer-in-c-using-rusty-cheddar", "title": "Generate opaque pointer in C using rusty-cheddar", "body": "<p>I'm trying to generate C header file for a library written in Rust using the <a href=\"https://crates.io/crates/rusty-cheddar\" rel=\"nofollow noreferrer\">rusty-cheddar crate</a>.</p>\n\n<p>Here is the definition and implementation of the struct in Rust:</p>\n\n<pre><code>pub struct AccountDatabase {\n    money: HashMap&lt;String, u32&gt;,\n}\n\nimpl AccountDatabase {\n    fn new() -&gt; AccountDatabase {\n        AccountDatabase {\n            money: HashMap::new(),\n        }\n    }\n}\n</code></pre>\n\n<p>If I place <code>#[repr(C)]</code> before the struct, rusty-cheddar generates the following declaration of the struct in C</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>typedef struct AccountDatabase {\n    HashMap money;\n} AccountDatabase;\n</code></pre>\n\n<p>The <code>HashMap</code> is not known to C, therefore I'd like for the struct to be declared as an opaque pointer.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510948563, "post_id": 47356509, "comment_id": 81669345, "body": "See also: <a href=\"https://stackoverflow.com/q/34733811/155423\">What is the difference between iter and into_iter?</a> and <a href=\"https://stackoverflow.com/q/30467085/155423\">How to iterate over an array?</a>"}, {"owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510952374, "post_id": 47356509, "comment_id": 81671080, "body": "@Shepmaster added more detail, hopefully that makes it clearer? My instructor shared the <code>Box&lt;Iterator&lt;_&gt;&gt;</code> pattern for vectors, so that&#39;s what I was starting with. If there are alternate approaches to lazy composition I&#39;d be interested to hear about them."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1510953197, "post_id": 47356509, "comment_id": 81671466, "body": "The issue is a type mismatch. The result of a <code>.map</code> is an iterator for values, but you have references, so you <i>have</i> to assign to a new variable somewhere since you need a variable that has the proper type. Did you consider something like <a href=\"https://play.rust-lang.org/?gist=dcd6a5f7f2141888fbdcec7fb18c00e6&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> ?"}, {"owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1510956751, "post_id": 47356509, "comment_id": 81672929, "body": "@loganfsmyth yep, I realize it&#39;s a type problem - hence the question :) your suggestion looks promising! I&#39;ll give it a try, do you want to post it as an answer?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1510957248, "post_id": 47356509, "comment_id": 81673124, "body": "Nah, the other answers pretty much cover it already."}, {"owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 0, "creation_date": 1510960572, "post_id": 47356509, "comment_id": 81674226, "body": "@downvoter I&#39;d very much appreciate feedback about how I could have made this question better."}], "answers": [{"comments": [{"owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 0, "creation_date": 1510956953, "post_id": 47359415, "comment_id": 81673009, "body": "If I&#39;m not mistaken <code>cloned()</code> will actually copy the contents, correct? That would introduce an O(n) memory and time overhead."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 1, "creation_date": 1510957308, "post_id": 47359415, "comment_id": 81673152, "body": "@dimo414 what do you mean by &quot;overhead&quot;? What do you think happens when you add a reference to a number with another number? The reference is dereferenced and then the value can be added. When you call <code>cloned</code>, the dereference only happens as an explicit earlier step as that&#39;s the implementation of <code>Clone</code> for <code>&amp;i64</code>. What extra time or memory do you believe is required? You are already aware that iterators are lazy, yes?"}, {"owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 0, "creation_date": 1510958368, "post_id": 47359415, "comment_id": 81673564, "body": "I&#39;m not sure what all the semantics are in Rust, I&#39;m still learning :) My understanding was <code>cloned()</code> introduces overhead by copying everything being cloned, and I&#39;m trying to avoid introducing more overhead when using a slice of a vector vs. just using the full vector itself. If <code>.cloned()</code> on iterators is actually effectively free that&#39;s good to know."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 1, "creation_date": 1510959044, "post_id": 47359415, "comment_id": 81673783, "body": "@dimo414 <code>.clone()</code> can be heavy <i>when you&#39;re cloning heavy things</i>. Here, you&#39;re cloning an integer -- the only thing for <code>clone()</code> to do is dereference it, which you have to do anyway. When you clone a <code>Box&lt;Vec&lt;[i64; 1000]&gt;&gt;</code>, yes, that&#39;s a &quot;deep&quot; copy."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 1, "creation_date": 1510959576, "post_id": 47359415, "comment_id": 81673962, "body": "@dimo414 Calling it &quot;overhead&quot; is... misleading at best. Overhead is work you need to do that doesn&#39;t directly contribute to your goal. If you have a reference to an integer, you have to dereference it before you can do math on it anyway. You <i>do</i> have overhead in your examples because you create a <code>Vec</code> that is never used other than to slice from, but I assume that&#39;s from the MCVE. In your original function, you take ownership of the <code>Vec</code> and iterate directly on the values from it, so there&#39;s no need to dereference them the first time."}, {"owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "edited": false, "score": 0, "creation_date": 1511243022, "post_id": 47359415, "comment_id": 81765379, "body": "Thanks. I think my confusion stemmed from the error message saying <code>expected type &#39;&amp;i64&#39; found type &#39;i64&#39;</code> - I read that as saying the type returned from <code>slice.into_iter()</code> was an iterator of <code>i64</code>. It seems the &quot;found type&quot; it&#39;s referring to is the declared type while the &quot;expected type&quot; is the type of the expression."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1510958837, "last_edit_date": 1510958837, "creation_date": 1510953458, "answer_id": 47359415, "question_id": 47356509, "link": "https://stackoverflow.com/questions/47356509/what-type-signature-to-use-for-an-iterator-generated-from-a-slice/47359415#47359415", "title": "What type signature to use for an iterator generated from a slice?", "body": "<p>As discussed in <a href=\"https://stackoverflow.com/q/34733811/155423\">What is the difference between iter and into_iter?</a>, these methods create iterators which yield different types when called on a <code>Vec</code> compared to a slice.</p>\n\n<p><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.iter\" rel=\"nofollow noreferrer\"><code>[T]::iter</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.into_iter\" rel=\"nofollow noreferrer\"><code>[T]::into_iter</code></a> both return an iterator <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html#impl-Iterator\" rel=\"nofollow noreferrer\">which yields values of type <code>&amp;T</code></a>. That means that the returned value doesn't implement <code>Iterator&lt;Item = i64&gt;</code> but instead  <code>Iterator&lt;Item = &amp;i64&gt;</code>, as the error message states.</p>\n\n<p>However, your subsequent <code>map</code> statements <em>change</em> the type of the iterator's item to an <code>i64</code>, which means the type of the iterator would also need to change. As an analogy, you've essentially attempted this:</p>\n\n<pre><code>let mut a: &amp;i64 = &amp;42;\na = 99;\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow noreferrer\"><code>Iterator::cloned</code></a> exists to make clones of the iterated value. In this case, it converts a <code>&amp;i64</code> to an <code>i64</code> essentially dereferencing the value:</p>\n\n<pre><code>fn lazy_slice(n: i64) {\n    let array = [1i64, 2, 3, 4, 5];\n    let mut iter: Box&lt;Iterator&lt;Item = i64&gt;&gt; = Box::new(array.iter().cloned());\n    for _ in 0..n {\n        iter = Box::new(iter.map(|x| x + 1));\n    }\n    println!(\"{:?}\", iter.collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n"}], "owner": {"reputation": 42073, "user_id": 113632, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f0aa6977c75f54ca9033d4f4d0244023?s=128&d=identicon&r=PG", "display_name": "dimo414", "link": "https://stackoverflow.com/users/113632/dimo414"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 611, "favorite_count": 0, "accepted_answer_id": 47359415, "answer_count": 1, "score": -1, "last_activity_date": 1510959009, "creation_date": 1510940903, "last_edit_date": 1510959009, "question_id": 47356509, "link": "https://stackoverflow.com/questions/47356509/what-type-signature-to-use-for-an-iterator-generated-from-a-slice", "title": "What type signature to use for an iterator generated from a slice?", "body": "<p>I have this toy example, but it's what I'm trying to accomplish:</p>\n\n<pre><code>fn lazy_vec() {\n    let vec: Vec&lt;i64&gt; = vec![1, 2, 3, 4, 5];\n    let mut iter: Box&lt;Iterator&lt;Item = i64&gt;&gt; = Box::new(vec.into_iter());\n    iter = Box::new(iter.map(|x| x + 1));\n    // potentially do additional similar transformations to iter\n    println!(\"{:?}\", iter.collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n\n<p>This (if I'm not mistaken) is a lazy iterator pattern, and the actual <code>map</code> operation doesn't occur until <code>.collect()</code> is called. I want to do the same thing with slices:</p>\n\n<pre><code>fn lazy_slice() {\n    let vec: Vec&lt;i64&gt; = vec![1, 2, 3, 4, 5];\n    let slice: &amp;[i64] = &amp;vec[..3];\n    let mut iter: Box&lt;Iterator&lt;Item = i64&gt;&gt; = Box::new(slice.into_iter());\n    iter = Box::new(iter.map(|x| x + 1));\n    // potentially do additional similar transformations to iter\n    println!(\"{:?}\", iter.collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n\n<p>This results in a type mismatch:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;std::slice::Iter&lt;'_, i64&gt; as std::iter::Iterator&gt;::Item == i64`\n --&gt; src/main.rs:4:47\n  |\n4 |     let mut iter: Box&lt;Iterator&lt;Item = i64&gt;&gt; = Box::new(slice.into_iter());\n  |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found i64\n  |\n  = note: expected type `&amp;i64`\n             found type `i64`\n  = note: required for the cast to the object type `std::iter::Iterator&lt;Item=i64&gt;`\n</code></pre>\n\n<p>I can't figure out what I need to do to resolve this error. The second <code>note</code> made me think I needed:</p>\n\n<pre><code>iter = Box::new(iter.map(|x| x + 1) as Iterator&lt;Item = i64&gt;);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>iter = Box::new(iter.map(|x| x + 1)) as Box&lt;Iterator&lt;Item = i64&gt;&gt;;\n</code></pre>\n\n<p>These fail with other errors depending on the exact syntax (e.g. <code>expected reference, found i64</code>, or <code>expected i64, found &amp;i64</code>). I've tried other ways to declare the types involved, but I'm basically just blindly adding <code>&amp;</code> and <code>*</code> in places and not making any progress.</p>\n\n<p>What am I missing here? What do I need to change in order to make this compile?</p>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<p>Here's a slightly more concrete example - I need <code>iter</code> to be <code>mut</code> so that I can compose an unknown number of such transformations before actually invoking <code>.collect()</code>. My impression was this was a somewhat common pattern, apologies if that wasn't correct.</p>\n\n<pre><code>fn lazy_vec(n: i64) {\n    let vec: Vec&lt;i64&gt; = vec![1, 2, 3, 4, 5];\n    let mut iter: Box&lt;Iterator&lt;Item = i64&gt;&gt; = Box::new(vec.into_iter());\n    for _ in 0..n {\n        iter = Box::new(iter.map(|x| x + 1));\n    }\n    println!(\"{:?}\", iter.collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n\n<p>I'm aware I could rewrite this specific task in a simpler way (e.g. a single <code>map</code> that adds <code>n</code> to each element) - it's an oversimplified MCVE of the problem I'm running into. My issue is this works for <code>lazy_vec</code>, but I'm not sure how to do the same with slices.</p>\n\n<hr>\n\n<p><strong>Edit 2</strong></p>\n\n<p>I'm just learning Rust and some of the nomenclature and concepts are new to me. Here's what I'm envisioning doing in Python, for comparison. My intent is to do the same thing with slices that I can currently do with vectors.</p>\n\n<pre><code>#!/usr/bin/env python3\n\nimport itertools\n\nls = [i for i in range(10)]\n\ndef lazy_work(input):\n  for i in range(10):\n    input = (i + 1 for i in input)\n  # at this point no actual work has been done\n  return input\n\nprint(\"From list: %s\" % list(lazy_work(ls)))\nprint(\"From slice: %s\" % list(lazy_work(itertools.islice(ls, 5))))\n</code></pre>\n\n<p>Obviously in Python there's no issues with typing, but hopefully that more clearly demonstrates my intent?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1510930604, "post_id": 47353421, "comment_id": 81659106, "body": "What process did you go through to come up with the type <code>Vec&lt;str&gt;</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1510930716, "post_id": 47353421, "comment_id": 81659201, "body": "And <b><i>please</i></b> read <a href=\"https://doc.rust-lang.org/stable/book/second-edition/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> instead of trying to learn Rust by guess-and-check."}, {"owner": {"reputation": 8757, "user_id": 9634, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/6181812b2747dc091b4b7ec97fb67c2f?s=128&d=identicon&r=PG", "display_name": "Brent.Longborough", "link": "https://stackoverflow.com/users/9634/brent-longborough"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521572719, "post_id": 47353421, "comment_id": 85786131, "body": "@Shepmaster I&#39;m also having a similar problem. Could you, please, point out the section reference in TRPL, as I&#39;ve read it all and can&#39;t recall seeing anything helpful.  This is not a complaint, but I&#39;d like to add the observation that TRPL is definitely not the easiest document to read. In my opinion, many of its examples are considerably more complicated than they need to be, and as a learner I&#39;m finding it quite a challenge despite having 50 years&#39; experience of programming from Assembler to Haskell.  But I hope one day to be able to help to improve it."}], "answers": [{"comments": [{"owner": {"reputation": 23, "user_id": 6850827, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Cxqmw.jpg?s=128&g=1", "display_name": "Noah Connors", "link": "https://stackoverflow.com/users/6850827/noah-connors"}, "edited": false, "score": 0, "creation_date": 1510932118, "post_id": 47353503, "comment_id": 81660162, "body": "Thanks, this totally works. I guess I don&#39;t really understand vector typing very well, so this helps."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1564417476, "last_edit_date": 1564417476, "creation_date": 1510930573, "answer_id": 47353503, "question_id": 47353421, "link": "https://stackoverflow.com/questions/47353421/vector-of-strings-reports-the-error-str-does-not-have-a-constant-size-known-at/47353503#47353503", "title": "Vector of strings reports the error &quot;str does not have a constant size known at compile time&quot;", "body": "<p>Use <code>Vec&lt;Vec&lt;&amp;str&gt;&gt;</code>.</p>\n\n<pre><code>fn print_multidimensional_array(multi: &amp;[Vec&lt;&amp;str&gt;]) {\n    for y in multi {\n        for v in y {\n            print!(\"{} \", v);\n        }\n        println!();\n    }\n}\n\nfn main() {\n    let v = vec![vec![\"a\", \"b\"], vec![\"c\", \"d\"]];\n    print_multidimensional_array(&amp;v);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/49393462/155423\">What does \u201c`str` does not have a constant size known at compile-time\u201d mean, and what&#39;s the simplest way to fix it?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28044231/155423\">What does &quot;Sized is not implemented&quot; mean?</a></li>\n<li><a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec), or Box (&amp;Box) as a function argument?</a></li>\n<li><a href=\"https://stackoverflow.com/q/35626122/155423\">Passing Vec&lt;String&gt; as IntoIterator&lt;&amp;&#39;a str&gt;</a></li>\n<li><a href=\"https://stackoverflow.com/q/24158114/155423\">What are the differences between Rust&#39;s `String` and `str`?</a></li>\n</ul>\n\n<hr>\n\n<p>Because I like to make things overly generic...</p>\n\n<pre><code>fn print_multidimensional_array&lt;I&gt;(multi: I)\nwhere\n    I: IntoIterator,\n    I::Item: IntoIterator,\n    &lt;I::Item as IntoIterator&gt;::Item: AsRef&lt;str&gt;,\n{\n    for y in multi {\n        for v in y {\n            print!(\"{} \", v.as_ref());\n        }\n        println!();\n    }\n}\n\nfn main() {\n    let v1 = vec![vec![\"a\", \"b\"], vec![\"c\", \"d\"]];\n    let v2 = vec![[\"a\", \"b\"], [\"c\", \"d\"]];\n    let v3 = [vec![\"a\", \"b\"], vec![\"c\", \"d\"]];\n    let v4 = [[\"a\", \"b\"], [\"c\", \"d\"]];\n\n    print_multidimensional_array(&amp;v1);\n    print_multidimensional_array(&amp;v2);\n    print_multidimensional_array(&amp;v3);\n    print_multidimensional_array(&amp;v4);\n}\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 6850827, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Cxqmw.jpg?s=128&g=1", "display_name": "Noah Connors", "link": "https://stackoverflow.com/users/6850827/noah-connors"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1601, "favorite_count": 0, "accepted_answer_id": 47353503, "answer_count": 1, "score": 2, "last_activity_date": 1564417476, "creation_date": 1510930360, "last_edit_date": 1510930645, "question_id": 47353421, "link": "https://stackoverflow.com/questions/47353421/vector-of-strings-reports-the-error-str-does-not-have-a-constant-size-known-at", "title": "Vector of strings reports the error &quot;str does not have a constant size known at compile time&quot;", "body": "<p>When trying to print out the contents of a multidimensional vector in Rust, it seems as though you cannot use the type <code>Vec&lt;Vec&lt;str&gt;&gt;</code> for the vector. </p>\n\n<pre><code>fn print_multidimensional_array(multi: &amp;Vec&lt;Vec&lt;str&gt;&gt;) {\n    for y in 0..multi.len() {\n        for x in 0..multi[y].len() {\n            print!(\"{} \", multi[y][x]);\n        }\n        println!(\"\");\n    }\n}\n</code></pre>\n\n<p>With this code, I get the output: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:1:1\n  |\n1 | / fn print_multidimensional_array(multi: &amp;Vec&lt;Vec&lt;str&gt;&gt;) {\n2 | |     for y in 0..multi.len() {\n3 | |         for x in 0..multi[y].len() {\n4 | |             print!(\"{} \", multi[y][x]);\n... |\n7 | |     }\n8 | | }\n  | |_^ `str` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `str`\n  = note: required by `std::vec::Vec`\n</code></pre>\n\n<p>What type of vector could I use for this to work?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1510923177, "post_id": 47350918, "comment_id": 81654170, "body": "Please provide a minimal working example (apart from your actual problem), e.g. include some stub <code>EntityId</code>."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1510923498, "post_id": 47350918, "comment_id": 81654358, "body": "Related: <a href=\"https://stackoverflow.com/questions/29184358/requiring-implementation-of-mul-in-generic-function\" title=\"requiring implementation of mul in generic function\">stackoverflow.com/questions/29184358/&hellip;</a> (but not a duplicate imho: the OP in the linked question already knew to use traits, just now how)"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1510923511, "post_id": 47350918, "comment_id": 81654363, "body": "Probably a duplicate of <a href=\"https://stackoverflow.com/questions/47115337/function-generics-an-implementation-of-stdopsadd-might-be-missing-for-t\" title=\"function generics an implementation of stdopsadd might be missing for t\">stackoverflow.com/questions/47115337/&hellip;</a> (which shouldn&#39;t have been closed as duplicate)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510928447, "post_id": 47350918, "comment_id": 81657624, "body": "The Rust standard naming is <code>PascalCase</code> for types and <code>snake_case</code> for function and variable names; please adopt it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1510928542, "post_id": 47350918, "comment_id": 81657684, "body": "@Stefan <i>which shouldn&#39;t have been closed as duplicate</i> \u2014 see how it says &quot;marked as duplicate by [...] Community&quot;? That means that <a href=\"https://meta.stackoverflow.com/q/287763/155423\">the OP voted to close it as a duplicate</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510929933, "post_id": 47350918, "comment_id": 81658596, "body": "You should <b>always</b> write the non-generic version first. Only when that works should you make it generic. For example, a <code>u32</code> <b>cannot be dereferenced</b>, so I don&#39;t even know what your code would be doing."}, {"owner": {"reputation": 43, "user_id": 4324346, "user_type": "registered", "profile_image": "https://graph.facebook.com/100002371845307/picture?type=large", "display_name": "Mike Kanzler", "link": "https://stackoverflow.com/users/4324346/mike-kanzler"}, "edited": false, "score": 0, "creation_date": 1510931249, "post_id": 47350918, "comment_id": 81659540, "body": "I will try this. Maybe it enlightens me a little bit. :) Thanks for your help."}], "answers": [{"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 5, "last_activity_date": 1510929733, "last_edit_date": 1510929733, "creation_date": 1510923962, "answer_id": 47351364, "question_id": 47350918, "link": "https://stackoverflow.com/questions/47350918/why-can-i-not-dereference-or-add-a-generic-type-even-though-im-passing-in-a-typ/47351364#47351364", "title": "Why can I not dereference or add a generic type even though I&#39;m passing in a type that can be dereferenced and added?", "body": "<p>The Rust generics systems doesn't work the way C++ templates do: in C++ the compiler doesn't check whether the code actually compiles with any type in advance.</p>\n\n<p>Rust makes sure the function compiles with any type that fulfills the listed requirements (called <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html#trait-bounds\" rel=\"nofollow noreferrer\">trait bounds</a>).  The compiler already told you what is missing: <code>std::ops::Add</code> might be missing for <code>T</code>, so ask for it:</p>\n\n<pre><code>impl&lt;T: Add&lt;Output = T&gt;&gt; simple_system&lt;T&gt; { /* \u2026 */ }\n</code></pre>\n\n<p>This will not fix everything; your code has other issues as well.</p>\n"}, {"tags": [], "owner": {"reputation": 43, "user_id": 4324346, "user_type": "registered", "profile_image": "https://graph.facebook.com/100002371845307/picture?type=large", "display_name": "Mike Kanzler", "link": "https://stackoverflow.com/users/4324346/mike-kanzler"}, "is_accepted": true, "score": 1, "last_activity_date": 1511168202, "creation_date": 1511168202, "answer_id": 47388184, "question_id": 47350918, "link": "https://stackoverflow.com/questions/47350918/why-can-i-not-dereference-or-add-a-generic-type-even-though-im-passing-in-a-typ/47388184#47388184", "title": "Why can I not dereference or add a generic type even though I&#39;m passing in a type that can be dereferenced and added?", "body": "<p>And here the Solution:</p>\n\n<ol>\n<li><p>At first you should write a working non generic (c++ template) version and then evolve it to a generic version.</p>\n\n<pre><code>use std::collections::BTreeMap;\n\n#[derive(Debug)]\nstruct SumUpSystem {\n    list_sum: BTreeMap&lt;u64, i32 &gt;,\n    list_com: BTreeMap&lt;u64, Vec&lt;i32&gt; &gt;\n}\n\nimpl SumUpSystem {\n    pub fn new() -&gt; SumUpSystem {\n        SumUpSystem {\n            list_sum: BTreeMap::new(),\n            list_com: BTreeMap::new()\n        }\n    }\n\n    pub fn add_component(&amp;mut self, id: u64, comp: i32) {\n        self.list_com.entry(id).or_insert_with(Vec::new).push(comp);\n\n        let mut insert = false;\n        match self.list_sum.get_mut(&amp;id) {\n            Some(x) =&gt; *x = *x + comp,\n            None =&gt; insert = true\n        }\n\n        if (insert) {\n            self.list_sum.insert(id, comp);\n        }\n    }\n\n    pub fn sum(&amp; self, id: u64) -&gt; i32 {\n        if let Some(x) = self.list_sum.get(&amp;id) {\n            *x\n        } else {\n            panic!(\"Invalid id: Not in system!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    macro_rules! init_test {\n        ($v:ident) =&gt; (let mut $v : SumUpSystem = SumUpSystem::new(););\n    }\n\n    #[test]\n    fn add_component() {\n        init_test!(s);\n        s.add_component(1, 13);\n        assert_eq!(s.sum(1), 13);\n        s.add_component(1, 26);\n        assert_eq!(s.sum(1), 13 + 26);\n    }\n}\n</code></pre></li>\n<li><p>The generic (c++ template). You should read the Trait section of the Rust Documentation to understand how/why it works.</p>\n\n<pre><code>use std::collections::BTreeMap;\nuse std::ops::Add;\n\n#[derive(Debug)]\nstruct SumUpSystem&lt;T&gt; {\n    list_sum: BTreeMap&lt;u64, T &gt;,\n    list_com: BTreeMap&lt;u64, Vec&lt;T&gt; &gt;\n}\n\nimpl &lt;T: Add&lt;Output=T&gt; + Clone&gt; SumUpSystem&lt;T&gt; {\n    pub fn new() -&gt; SumUpSystem&lt;T&gt; {\n        SumUpSystem {\n            list_sum: BTreeMap::new(),\n            list_com: BTreeMap::new()\n        }\n    }\n\n    pub fn add_component(&amp;mut self, id: u64, comp: &amp;T) {\n        self.list_com.entry(id).or_insert_with(Vec::new).push(comp.clone());\n\n        let mut insert = false;\n        match self.list_sum.get_mut(&amp;id) {\n            Some(x) =&gt; *x = x.clone() + comp.clone(),\n            None =&gt; insert = true\n        }\n\n        if insert {\n            self.list_sum.insert(id, comp.clone());\n        }\n    }\n\n    pub fn sum(&amp; self, id: u64) -&gt; T {\n        if let Some(x) = self.list_sum.get(&amp;id) {\n            x.clone()\n        } else {\n            panic!(\"Invalid id: Not in system!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    macro_rules! init_test {\n        ($v:ident) =&gt; (let mut $v : SumUpSystem&lt;i32&gt; = SumUpSystem::new(););\n    }\n\n    #[test]\n    fn add_component() {\n        init_test!(s);\n        s.add_component(1, &amp;13i32);\n        assert_eq!(s.sum(1), 13i32);\n        s.add_component(1, &amp;26i32);\n        assert_eq!(s.sum(1), 39i32);\n    }\n}\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 43, "user_id": 4324346, "user_type": "registered", "profile_image": "https://graph.facebook.com/100002371845307/picture?type=large", "display_name": "Mike Kanzler", "link": "https://stackoverflow.com/users/4324346/mike-kanzler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1423, "favorite_count": 0, "accepted_answer_id": 47388184, "answer_count": 2, "score": 0, "last_activity_date": 1511168202, "creation_date": 1510922562, "last_edit_date": 1510929387, "question_id": 47350918, "link": "https://stackoverflow.com/questions/47350918/why-can-i-not-dereference-or-add-a-generic-type-even-though-im-passing-in-a-typ", "title": "Why can I not dereference or add a generic type even though I&#39;m passing in a type that can be dereferenced and added?", "body": "<p>I have some problems with a generic implementation of a method:</p>\n\n<pre><code>use std::collections::BTreeMap;\nuse global::entity::EntityId;\n\nstruct simple_system&lt;T&gt; {\n    list_sum: BTreeMap&lt;EntityId, T&gt;,\n    list_com: BTreeMap&lt;EntityId, Vec&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; simple_system&lt;T&gt; {\n    pub fn new() -&gt; simple_system&lt;T&gt; {\n        simple_system {\n            list_sum: BTreeMap::new(),\n            list_com: BTreeMap::new(),\n        }\n    }\n\n    pub fn addComponent(&amp;mut self, id: EntityId, comp: T) {\n        self.list_com.entry(id).or_insert_with(Vec::new).push(comp);\n        match self.list_sum.get_mut(&amp;id) {\n            Some(v) =&gt; *v = *v + *comp,\n            None =&gt; self.list_sum.insert(id, comp),\n        }\n    }\n}\n</code></pre>\n\n<p>with the following errors.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0614]: type `T` cannot be dereferenced\n  --&gt; src/main.rs:20:34\n   |\n20 |             Some(v) =&gt; *v = *v + *comp,\n   |                                  ^^^^^\n\nerror[E0369]: binary operation `+` cannot be applied to type `T`\n  --&gt; src/main.rs:20:29\n   |\n20 |             Some(v) =&gt; *v = *v + *comp,\n   |                             ^^^^^^^^^^\n   |\n   = note: an implementation of `std::ops::Add` might be missing for `T`\n</code></pre>\n\n<p>I don't know what I have to change to get it to work. I use it with <code>u32</code> type so it should have an <code>+</code> operator.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510921959, "post_id": 47350647, "comment_id": 81653469, "body": "Are you aware of <a href=\"https://doc.rust-lang.org/1.11.0/book/generics.html\" rel=\"nofollow noreferrer\">Generics</a>? Their very purpose is to generalize!"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510922158, "post_id": 47350647, "comment_id": 81653596, "body": "@MatthieuM. It is not so simple, to access field I need trait, but <code>Vec</code> require known size, and do not want allocate in heap vector of traits."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1510922681, "post_id": 47350647, "comment_id": 81653897, "body": "Ah! So you did try something. In this case, could you edit in what trait definition you attempted to use, and what you find unsatisfactory with it? This way we can improve it to make it fit your wishes :)"}, {"owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 0, "creation_date": 1510923210, "post_id": 47350647, "comment_id": 81654193, "body": "You can replace f1 and f2 from Moo2 with a Moo1, and impl Deref&lt;Target=Moo1&gt; for Moo2"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510923379, "post_id": 47350647, "comment_id": 81654287, "body": "@MatthieuM. I update my question"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "edited": false, "score": 0, "creation_date": 1510923430, "post_id": 47350647, "comment_id": 81654321, "body": "@Gr&#233;goryOBANOS How this helps with <code>Vec</code> of <code>Moo*</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1510925929, "creation_date": 1510925929, "answer_id": 47351935, "question_id": 47350647, "link": "https://stackoverflow.com/questions/47350647/how-to-generalize-a-function-over-two-types-with-similar-fields-in-different-pos/47351935#47351935", "title": "How to generalize a function over two types with similar fields in different positions?", "body": "<p>Any problem in computer science can be solved by adding another layer of indirection; at the exception of having too many such layers, of course.</p>\n\n<p>Therefore, you are correct that you miss a <code>S</code> trait to generalize <code>S1</code> and <code>S2</code>. In <code>S</code>, you can use a feature called <em>associated type</em>:</p>\n\n<pre><code>trait Moo {\n    fn f1(&amp;self) -&gt; &amp;str;\n    fn f2(&amp;self) -&gt; i32;\n}\n\ntrait S {\n    type Mooer: Moo;\n    fn x(&amp;self) -&gt; i32;\n    fn v(&amp;self) -&gt; &amp;[Self::Mooer];\n}\n</code></pre>\n\n<p>The bit <code>type Mooer: Moo;</code> says: I don't quite know what the exact type <code>Mooer</code> will end up being, but it'll implement the <code>Moo</code> trait.</p>\n\n<p>This lets you write:</p>\n\n<pre><code>impl S for S1 {\n    type Mooer = Moo1;\n    fn x(&amp;self) -&gt; i32 { self.x }\n    fn v(&amp;self) -&gt; &amp;[Self::Mooer] { &amp;self.v }\n}\n\nimpl S for S2 {\n    type Mooer = Moo2;\n    fn x(&amp;self) -&gt; i32 { self.x }\n    fn v(&amp;self) -&gt; &amp;[Self::Mooer] { &amp;self.v }\n}\n\nfn algo&lt;T: S&gt;(s: &amp;T) {\n    println!(\"s.x: {}\", s.x());\n    for y in s.v() {\n        println!(\"{} {}\", y.f1(), y.f2());\n    }\n}\n</code></pre>\n\n<p>And your generic <code>algo</code> knows that whatever type <code>Mooer</code> ends up being, it conforms to the <code>Moo</code> trait so the interface of <code>Moo</code> is available.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 47351935, "answer_count": 1, "score": 2, "last_activity_date": 1510928932, "creation_date": 1510921612, "last_edit_date": 1510928932, "question_id": 47350647, "link": "https://stackoverflow.com/questions/47350647/how-to-generalize-a-function-over-two-types-with-similar-fields-in-different-pos", "title": "How to generalize a function over two types with similar fields in different positions?", "body": "<p>I have a function <code>algo</code> which works with a type <code>S1</code>, I also have\na type <code>S2</code> which contains all of the fields of <code>S1</code> plus some additional ones.</p>\n\n<p>How should I modify <code>algo</code> to also accept <code>S2</code> as input without\ncreating a temporary variable with type <code>S1</code> and data from <code>S2</code>?</p>\n\n<pre><code>struct Moo1 {\n    f1: String,\n    f2: i32,\n}\n\nstruct Moo2 {\n    f1: String,\n    f2: i32,\n    other_fields: f32,\n}\n\nstruct S1 {\n    x: i32,\n    v: Vec&lt;Moo1&gt;,\n}\n\nstruct S2 {\n    x: i32,\n    v: Vec&lt;Moo2&gt;,\n}\n\n//before fn algo(s: &amp;S1)\nfn algo&lt;???&gt;(???) {\n    //work with x and v (only with f1 and f2)\n}\n</code></pre>\n\n<p><strong>Where I'm stuck</strong></p>\n\n<p>Let's assume <code>algo</code> has this implementation (my real application has another implementation):</p>\n\n<pre><code>fn algo(s: &amp;S1) {\n    println!(\"s.x: {}\", s.x);\n    for y in &amp;s.v {\n        println!(\"{} {}\", y.f1, y.f2);\n    }\n}\n</code></pre>\n\n<p>To access the field in <code>Moo1</code> and <code>Moo2</code> I introduce <code>trait AsMoo</code>, and to access <code>x</code> field and <code>v</code> I introduce <code>trait AsS</code>:</p>\n\n<pre><code>trait AsMoo {\n    fn f1(&amp;self) -&gt; &amp;str;\n    fn f2(&amp;self) -&gt; i32;\n}\n\ntrait AsS {\n    fn x(&amp;self) -&gt; i32;\n    //    fn v(&amp;self) -&gt; ???;\n}\n\nfn algo&lt;S: AsS&gt;(s: &amp;AsS) {\n    println!(\"s.x: {}\", s.x());\n}\n</code></pre>\n\n<p>I'm stuck at the implementation of the <code>AsS::v</code> method. I do not allocate memory to use my <code>algo</code>, but I need a <code>Vec&lt;&amp;AsMoo&gt;</code> in some way.</p>\n\n<p>Maybe I need to return some kind of <code>Iterator&lt;&amp;AsMoo&gt;</code>, but have no idea how to do it and that looks complex for this problem.</p>\n\n<p>Maybe I should use macros instead?</p>\n"}, {"tags": ["rust", "type-inference"], "answers": [{"tags": [], "owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "is_accepted": true, "score": 10, "last_activity_date": 1536762905, "last_edit_date": 1536762905, "creation_date": 1510914159, "answer_id": 47348382, "question_id": 47347962, "link": "https://stackoverflow.com/questions/47347962/how-to-infer-the-return-type-of-a-function/47348382#47348382", "title": "How to infer the return type of a function?", "body": "<p>You cannot. Rust <a href=\"https://stackoverflow.com/a/24977576/5903309\">explicitly prohibits this by design</a>.</p>\n\n<p>However, for large and complex return types, you have the following options:</p>\n\n<ul>\n<li>Use a closure instead - As it is local, it is allowed to infer its type</li>\n<li>Return a boxed type</li>\n<li>Return <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\" rel=\"noreferrer\">an abstract type</a></li>\n</ul>\n\n<p>You can see a practical example of these in the answer for <a href=\"https://stackoverflow.com/a/27535594/5903309\">What is the correct way to return an Iterator (or any other trait)?</a></p>\n"}], "owner": {"reputation": 16645, "user_id": 402322, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/GWEWt.gif?s=128&g=1", "display_name": "ceving", "link": "https://stackoverflow.com/users/402322/ceving"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4447, "favorite_count": 0, "closed_date": 1510921744, "accepted_answer_id": 47348382, "answer_count": 1, "score": 6, "last_activity_date": 1536762905, "creation_date": 1510912950, "last_edit_date": 1510928108, "question_id": 47347962, "link": "https://stackoverflow.com/questions/47347962/how-to-infer-the-return-type-of-a-function", "closed_reason": "Duplicate", "title": "How to infer the return type of a function?", "body": "<p>The return type of a block is inferred.</p>\n\n<pre><code>fn main() {\n    let x = { 5 };\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>But when I give the block a name, I have to specify a type.</p>\n\n<pre><code>fn five() -&gt; i32 {\n    5\n}\n\nfn main() {\n    let x = five();\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>How can I avoid selecting a type?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1307, "user_id": 5006880, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fb0bf399baa2aa2a9ba96fa05cecb74b?s=128&d=identicon&r=PG&f=1", "display_name": "Mergasov", "link": "https://stackoverflow.com/users/5006880/mergasov"}, "edited": false, "score": 0, "creation_date": 1616698114, "post_id": 47346253, "comment_id": 118091946, "body": "Does Rust gurantee calling <code>drop()</code> to free up resources of an original value when copying  has &quot;de facto&quot; taken place?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1307, "user_id": 5006880, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fb0bf399baa2aa2a9ba96fa05cecb74b?s=128&d=identicon&r=PG&f=1", "display_name": "Mergasov", "link": "https://stackoverflow.com/users/5006880/mergasov"}, "edited": false, "score": 0, "creation_date": 1616754495, "post_id": 47346253, "comment_id": 118107712, "body": "@Mergasov: I think your mental model is off. There are two operations in Rust, identified by two traits: <code>Clone</code> and <code>Copy</code>. When you create a <code>clone</code>, you (the user) specify the logic involved in creating the clone; as an example, for a <code>String</code> it means allocating a second buffer and copying the contents of the first there. After cloning, both instances live their lives independently from one another. If you don&#39;t need to type <code>.clone()</code>, Rust just <i>moved</i> the instance. If an instance is moved, it is not dropped. If an instance is copied (<code>Copy</code>), dropping is a no-op."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1307, "user_id": 5006880, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fb0bf399baa2aa2a9ba96fa05cecb74b?s=128&d=identicon&r=PG&f=1", "display_name": "Mergasov", "link": "https://stackoverflow.com/users/5006880/mergasov"}, "edited": false, "score": 0, "creation_date": 1616754535, "post_id": 47346253, "comment_id": 118107726, "body": "@Mergasov: And therefore, the <i>reverse</i> is guaranteed. Rust guarantees that when it <i>bit copies</i> a value (whether moving or <code>Copy</code>ing) it will never call <code>Drop</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 15, "last_activity_date": 1510927995, "last_edit_date": 1510927995, "creation_date": 1510907273, "answer_id": 47346253, "question_id": 47346001, "link": "https://stackoverflow.com/questions/47346001/is-a-returned-value-moved-or-not/47346253#47346253", "title": "Is a returned value moved or not?", "body": "<blockquote>\n  <p>From a memory point of view, is <code>rectangle</code> the same instance as <code>r</code>, or is it a copy of <code>r</code>?</p>\n</blockquote>\n\n<p><strong>Unspecified</strong>.</p>\n\n<p>The Rust language specifies the <strong>semantics</strong> of the language, and while they do constrain the implementation somewhat, in this case they do not. How a return value is passed up the call stack is part of the <strong>ABI</strong>, and not only is the ABI unstable (in Rust), it's also platform specific.</p>\n\n<blockquote>\n  <p>Do I have to explicitly return by reference (something like <code>&amp;r</code>)?</p>\n</blockquote>\n\n<p><a href=\"https://stackoverflow.com/q/32682876/155423\">Returning by reference is not possible</a>.</p>\n\n<p>You could return a <code>Box&lt;Rectangle&gt;</code> but the cost of the memory allocation would dwarf the cost of copying a <code>Rectangle</code> in the first place, so it's hardly advisable.</p>\n\n<p>You could force this using <em>output parameters</em> instead, but this has other issues:</p>\n\n<ul>\n<li>if you have a <code>&amp;mut Rectangle</code> parameter, you first need to have a valid instance, which has to be initialized; rather wasteful,</li>\n<li>if you have a <code>*mut Rectangle</code> pointing to uninitialized memory, you need to use <code>unsafe</code> code, hardly satisfying.</li>\n</ul>\n\n<p>However...</p>\n\n<blockquote>\n  <p>I have to create millions of rectangles, and I don't want there to be useless copies.</p>\n</blockquote>\n\n<p><strong>I think you are worrying for nothing.</strong></p>\n\n<p>The first rule of performance tuning is <strong>measure first</strong>; and I doubt that you'll be able to observe a performance issue in the <em>creation</em> of those millions of rectangles.</p>\n\n<p>The compiler has multiple tricks up its sleeves, such as:</p>\n\n<ul>\n<li>not even materializing the <code>rectangle</code> instance to start with, but pass its components via CPU registers instead,</li>\n<li>inlining <code>new</code> at the call site, avoiding any copy whatsoever,</li>\n<li>...</li>\n</ul>\n\n<p>Thus, before worrying about the cost of copying 4 <code>f64</code>, I would implement the naive solution, compile in release mode, and observe what happens.</p>\n"}], "owner": {"reputation": 582, "user_id": 739439, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b42455bfc95acdd878757bea8bd09555?s=128&d=identicon&r=PG", "display_name": "barbacan", "link": "https://stackoverflow.com/users/739439/barbacan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 661, "favorite_count": 1, "accepted_answer_id": 47346253, "answer_count": 1, "score": 3, "last_activity_date": 1510927995, "creation_date": 1510906197, "last_edit_date": 1510908401, "question_id": 47346001, "link": "https://stackoverflow.com/questions/47346001/is-a-returned-value-moved-or-not", "title": "Is a returned value moved or not?", "body": "<p>With this code:</p>\n\n<pre><code>struct Point {\n    x: f64,\n    y: f64,\n}\n\nstruct Rectangle {\n    p1: Point,\n    p2: Point,\n}\n\nimpl Rectangle {\n    pub fn new(x1: f64, y1: f64, x2: f64, y2: f64) -&gt; Rectangle {\n        let r = Rectangle {\n            p1: Point { x: x1, y: y1 },\n            p2: Point { x: x2, y: y2 },\n        };\n        // some code where r is used\n        r\n    }\n}\n\nlet rectangle = Rectangle::new(0.0, 0.0, 10.0, 10.0);\n</code></pre>\n\n<p>From a memory point of view, is <code>rectangle</code> the same instance as <code>r</code>, or is it a copy of <code>r</code>?</p>\n\n<p>Do I have to explicitly return by reference (something like <code>&amp;r</code>)?</p>\n\n<p>I have to create millions of rectangles, and I don't want there to be useless copies.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1510884851, "creation_date": 1510884851, "answer_id": 47342262, "question_id": 47342036, "link": "https://stackoverflow.com/questions/47342036/why-doesnt-a-lazy-static-sloglogger-print-until-a-non-static-logger-is-used/47342262#47342262", "title": "Why doesn&#39;t a lazy_static slog::Logger print until a non-static logger is used?", "body": "<p>By using slog-async, <a href=\"https://docs.rs/slog-async/2.1.0/slog_async/\" rel=\"noreferrer\">you have opted into</a>:</p>\n\n<blockquote>\n  <p>slog-async allows building <code>Drain</code>s that offload processing to another thread. Typically serialization and IO operations can be slow enough that they could make logging hinder performance of the main code. Sending logging records to another thread is much faster (ballpark of 100ns).</p>\n</blockquote>\n\n<p>Your code registers a log event which will be sent to another thread and then <em>immediately exits</em>. There wasn't any time for the background thread to actually log. </p>\n\n<p>However, by putting a sleep at the end of your program, it \"works\": </p>\n\n<pre><code>std::thread::sleep_ms(1000);\n</code></pre>\n\n<p>Why does the other case work? Again, we <a href=\"https://docs.rs/slog-async/2.1.0/slog_async/\" rel=\"noreferrer\">turn to the docs</a>, emphasis mine:</p>\n\n<blockquote>\n  <p>When using <code>std::process::exit</code> to terminate a process with an exit code it is imporant to notice that destructors will not be called. This matters for slog_async as it will <strong>prevents flushing of the async drain and discarding messages that are not yet written</strong>.</p>\n</blockquote>\n\n<p>Items in lazy-static <a href=\"https://docs.rs/lazy_static/0.2.10/lazy_static/#semantics\" rel=\"noreferrer\">do not have their destructors run</a> (when would they, if the point of it is to live forever). </p>\n\n<p>When you construct another logger from the <code>main</code> function, it is allocated on the stack and will be dropped. This causes the previous log message to also be flushed.</p>\n"}], "owner": {"reputation": 81, "user_id": 5400772, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d17ff2e2a2205167c7a7269b235b359c?s=128&d=identicon&r=PG&f=1", "display_name": "magesh", "link": "https://stackoverflow.com/users/5400772/magesh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 468, "favorite_count": 0, "accepted_answer_id": 47342262, "answer_count": 1, "score": 3, "last_activity_date": 1510891321, "creation_date": 1510883063, "last_edit_date": 1510891321, "question_id": 47342036, "link": "https://stackoverflow.com/questions/47342036/why-doesnt-a-lazy-static-sloglogger-print-until-a-non-static-logger-is-used", "title": "Why doesn&#39;t a lazy_static slog::Logger print until a non-static logger is used?", "body": "<p>If I uncomment <code>create_log</code>, both <code>log</code> and <code>LOG</code> are printed on the console. Without it, nothing is printed. What is going on?</p>\n\n<pre><code>#[macro_use]\nextern crate slog;\nextern crate slog_term;\nextern crate slog_async;\n#[macro_use]\nextern crate lazy_static;\n\nuse slog::Drain;\n\nlazy_static! {\n    static ref LOG: slog::Logger = create_log();\n}\n\nfn create_log() -&gt; slog::Logger {\n    let decorator = slog_term::TermDecorator::new().force_plain().build();\n    let drain = slog_term::CompactFormat::new(decorator).build().fuse();\n    let drain = slog_async::Async::new(drain).build().fuse();\n    slog::Logger::root(drain, o!())\n}\n\nfn main() {\n    info!(LOG, \"LOG\");  // NOT printed unless next line is uncommented\n\n    // let log = create_log();     // enables printing both log and LOG\n    // info!(log, \"log\");\n}\n</code></pre>\n"}, {"tags": ["rust", "iteration"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1510866931, "post_id": 47338839, "comment_id": 81630570, "body": "Changing a collection while you are iterating over it is generally a bad idea. Rust&#39;s collection iterators give you references to items to be maximally efficient. If you removed or added a value, that could invalidate the reference you were holding, leading to memory unsafety. Removing could also cause you to &quot;miss&quot; an element. Using an index and the while loop is a correct solution, although I like to push to a temporary vector, myself."}, {"owner": {"reputation": 720, "user_id": 4705242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9a7dd812330d5c4d545011135880f1c?s=128&d=identicon&r=PG&f=1", "display_name": "nickeb96", "link": "https://stackoverflow.com/users/4705242/nickeb96"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510870238, "post_id": 47338839, "comment_id": 81632215, "body": "@Shepmaster It looks like most of the questions you marked mine a duplicate of are in fact different questions with answers that are incompatible with my question. Really only the second question contained an relevant answer which was almost an exact copy of my last example which does not help me at all."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510870619, "post_id": 47338839, "comment_id": 81632396, "body": "<i>only the second question contained an relevant answer which was almost an exact copy of my last example</i> \u2014 that&#39;s because your last example <i>is</i> how you&#39;d do it, when you really truly need to. All the others are addressing the general title you have about modifying an arbitrary collection in an arbitrary fashion, and are there for everyone else who will find your question through whatever path."}, {"owner": {"reputation": 720, "user_id": 4705242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9a7dd812330d5c4d545011135880f1c?s=128&d=identicon&r=PG&f=1", "display_name": "nickeb96", "link": "https://stackoverflow.com/users/4705242/nickeb96"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510874843, "post_id": 47338839, "comment_id": 81633995, "body": "Fair enough on the point of those questions being useful to others. I&#39;m still a little disappointed that the C/C++ solution to this is cleaner than the Rust solution though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1510876780, "post_id": 47338839, "comment_id": 81634585, "body": "<i>C/C++ solution to this is cleaner</i> \u2014 that may be, but it&#39;s also less safe. For example, in your <code>g</code> function, if the vector needed to reallocate to accommodate the new value, <code>num</code> would no longer point to a valid piece of memory. Accessing it could lead to arbitrary code execution, segfaults, etc. Rust has chosen to make the safer cases efficient by default and the other cases not so. For example, your function <i>copies</i> the value in the iterator out of the vector on every index \u2014 therefore no reference to the vector is needed. If your item was huge, you&#39;d pay the cost."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1510878748, "post_id": 47338839, "comment_id": 81635113, "body": "You may find enlightening <a href=\"http://en.cppreference.com/w/cpp/container/vector#Iterator_invalidation\" rel=\"nofollow noreferrer\">this list of functions that may invalidate <code>std::vector</code> iterators</a>."}], "owner": {"reputation": 720, "user_id": 4705242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9a7dd812330d5c4d545011135880f1c?s=128&d=identicon&r=PG&f=1", "display_name": "nickeb96", "link": "https://stackoverflow.com/users/4705242/nickeb96"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1982, "favorite_count": 0, "closed_date": 1510866262, "answer_count": 0, "score": 3, "last_activity_date": 1510871091, "creation_date": 1510865586, "last_edit_date": 1510867039, "question_id": 47338839, "link": "https://stackoverflow.com/questions/47338839/how-do-i-modify-a-container-while-iterating-over-it", "closed_reason": "Duplicate", "title": "How do I modify a container while iterating over it?", "body": "<p>I'm referring to the container itself, not the contents of the container.  I want to insert, remove, append, etc. I made an abstraction of my problem below:</p>\n\n<pre><code>fn f() {\n    let mut numbers = vec![10, 11, 12, 14, 15];\n\n    for index in 0..numbers.len() {\n        process(numbers[index]);\n\n        if numbers[index] == 12 {\n            numbers.insert(index + 1);\n        }\n    }\n}\n</code></pre>\n\n<p>Function <code>f</code> would work, but the number of times it loops over the container does not change as the size of the container changes.</p>\n\n<pre><code>fn g() {\n    let mut numbers = vec![10, 11, 12, 14, 15];\n\n    for (index, num) in numbers.iter().enumerate() {\n        process(num);\n\n        if num == 12 {\n            numbers.insert(index + 1);\n        }\n    }\n}\n</code></pre>\n\n<p>Function <code>g</code> looks like the most idiomatic Rust way to do this, but it does not compile due to an illegal mutable borrow references occurring.</p>\n\n<pre><code>fn h() {\n    let mut numbers = vec![10, 11, 12, 14, 15];\n\n    let mut index = 0;\n    while index &lt; numbers.len() {\n        process(numbers[index]);\n\n        if numbers[index] == 12 {\n            numbers.insert(index + 1);\n        }\n\n        index += 1;\n    }\n}\n</code></pre>\n\n<p>Function <code>h</code> is the only version that works but it does not seem like the right way to do it. I'm basically just simulating a C style <code>for</code> loop with a <code>while</code> loop. I'm hoping someone knows of a more succinct way of writing it, preferably with a <code>for</code> loop instead.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1510863422, "post_id": 47337858, "comment_id": 81628770, "body": "<a href=\"https://doc.rust-lang.org/beta/nomicon/send-and-sync.html\" rel=\"nofollow noreferrer\">One does not simply implement <code>Send</code></a>. Also, please build a better MCVE, so that we can reproduce the problem. Essential parts of the code seem to be missing."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1510863760, "post_id": 47337858, "comment_id": 81628954, "body": "@E_net4 full compiling example link is at the top of question."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1510867064, "post_id": 47337858, "comment_id": 81630639, "body": "Using <code>&amp;&#39;a mut (Storage + Send)</code> instead of <code>&amp;&#39;a mut Storage</code> will make <code>Consistency</code> implement <code>Send</code>, but there are so many other errors I don&#39;t consider this a real answer..."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1510867179, "post_id": 47337858, "comment_id": 81630704, "body": "I am using <code>Arc&lt;Storage + Send + Sync&gt;</code> and now i have two errors : <a href=\"https://play.rust-lang.org/?gist=afd3d6536e4dd6c7cf6ca4f8b1755a89&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> I am not able to get through them."}], "answers": [{"comments": [{"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1510867255, "post_id": 47339234, "comment_id": 81630746, "body": "can you please take a look at : <a href=\"https://play.rust-lang.org/?gist=afd3d6536e4dd6c7cf6ca4f8b1755a89&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> ? It has 2 errors around closure and threads."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1510867333, "post_id": 47339234, "comment_id": 81630790, "body": "@AshishNegi sorry, no. Those issues are already covered by other questions here, some of which I&#39;ve already linked to. Be thankful that Rust has caught all of these errors at compile time. C or C++ would probably let you compile this code and it would work fine, until it didn&#39;t."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 0, "creation_date": 1510867487, "post_id": 47339234, "comment_id": 81630872, "body": "ok. thanks, i will read through the shared links. One question : If <code>storage</code> is mutable, as in <code>Consistency&#39;s field</code>, is it possible to share it across threads in rust ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 2, "creation_date": 1510867647, "post_id": 47339234, "comment_id": 81630941, "body": "@AshishNegi no, it is not possible to share a <code>&amp;mut</code> between threads. This would violate the <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch04-02-references-and-borrowing.html#the-rules-of-references\" rel=\"nofollow noreferrer\">rules of references</a>, which state that there can only be one unique mutable reference at a time. That&#39;s why I&#39;ve linked to a question that shows how to share a mutable object between threads."}, {"owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 1, "creation_date": 1510869199, "post_id": 47339234, "comment_id": 81631762, "body": "i used <code>Arc</code> and cloned <code>closure : write_thread</code> and <code>keys</code> and it started compiling. Also i removed mut from storage as it was not required with some refactoring. <a href=\"https://play.rust-lang.org/?gist=78782ea65eaa2b0f3ad8d2a1d6420027&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "edited": false, "score": 1, "creation_date": 1510869848, "post_id": 47339234, "comment_id": 81632039, "body": "@AshishNegi that&#39;s great to hear! I see you&#39;ve got some non-idiomatic Rust  code, so once you have something working, you might think about posting it to <a href=\"https://codereview.stackexchange.com/questions/tagged/rust\">Code Review</a> to have someone provide feedback."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1510867546, "last_edit_date": 1510867546, "creation_date": 1510867123, "answer_id": 47339234, "question_id": 47337858, "link": "https://stackoverflow.com/questions/47337858/send-can-only-be-implemented-for-a-struct-enum-type-not-a-trait/47339234#47339234", "title": "Send can only be implemented for a struct/enum type, not a trait", "body": "<p>You have a reference to something implementing a trait (a <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\"><em>trait object</em></a>), but your trait isn't guaranteed to be able to be sent between threads.</p>\n\n<p>You need to ensure that it is. You can require all implementors of your trait are <code>Send</code>:</p>\n\n<pre><code>pub trait Storage: Send {\n    // ...\n}\n</code></pre>\n\n<p>Or that this specific trait object implements <code>Send</code>:</p>\n\n<pre><code>pub struct Consistency&lt;'a&gt; {\n    storage: &amp;'a mut (Storage + Send),\n}\n</code></pre>\n\n<p>Your code has many other issues, so it still doesn't compile. Among them:</p>\n\n<ol>\n<li>You attempt to pass a stack-allocated variable to a thread.</li>\n<li>You try to share a mutable reference among multiple threads.</li>\n</ol>\n\n<p>You many need to go back and re-read <a href=\"https://doc.rust-lang.org/stable/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>, especially the <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch16-01-threads.html\" rel=\"nofollow noreferrer\">chapter on concurrency</a>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/19667717/155423\">Can I have a static borrowed reference to a trait object?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31373255/155423\">Share mutable object between threads</a></li>\n</ul>\n"}], "owner": {"reputation": 4733, "user_id": 728407, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/26b3f058ce75a05fd2ccc561f1cfa501?s=128&d=identicon&r=PG", "display_name": "Ashish Negi", "link": "https://stackoverflow.com/users/728407/ashish-negi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 619, "favorite_count": 0, "accepted_answer_id": 47339234, "answer_count": 1, "score": 0, "last_activity_date": 1510867546, "creation_date": 1510861408, "last_edit_date": 1510866714, "question_id": 47337858, "link": "https://stackoverflow.com/questions/47337858/send-can-only-be-implemented-for-a-struct-enum-type-not-a-trait", "title": "Send can only be implemented for a struct/enum type, not a trait", "body": "<p>I have having difficulty implementing <code>Send</code> for a trait. <a href=\"https://play.rust-lang.org/?gist=d40a449fc70720d0f46d289738c34c9f&amp;version=stable\" rel=\"nofollow noreferrer\">Full code in the playground</a>.</p>\n\n<p>I have a <code>Storage</code> trait :</p>\n\n<pre><code>pub trait Storage {\n    fn get_value(&amp;self, key: &amp;str) -&gt; Result&lt;Vec&lt;u8&gt;, Error&gt;;\n    fn put_value(&amp;mut self, key: &amp;str, value: &amp;[u8]) -&gt; Result&lt;(), Error&gt;;\n    fn key_exists(&amp;self, key: &amp;str) -&gt; bool;\n    fn delete_key(&amp;mut self, key: &amp;str) -&gt; Result&lt;(), Error&gt;;\n}\n</code></pre>\n\n<p>It is part of the <code>Consistency</code> struct:</p>\n\n<pre><code>pub struct Consistency&lt;'a&gt; {\n    storage: &amp;'a mut Storage,\n}\n</code></pre>\n\n<p>I have implemented a <code>MemoryStorage</code> struct:</p>\n\n<pre><code>#[derive(Debug)]\nstruct MemoryStorage {\n    data: HashMap&lt;String, Vec&lt;u8&gt;&gt;,\n}\n\nimpl Storage for MemoryStorage {\n    fn get_value(&amp;self, key: &amp;str) -&gt; Result&lt;Vec&lt;u8&gt;, Error&gt; {\n        self.data.get(key).map_or(\n            Err(Error::new(ErrorKind::NotFound, \"Key does not exists\")),\n            |v| Ok(v.clone()),\n        )\n    }\n\n    fn put_value(&amp;mut self, key: &amp;str, value: &amp;[u8]) -&gt; Result&lt;(), Error&gt; {\n        self.data.insert(key.to_string(), Vec::from(value));\n        Ok(())\n    }\n\n    fn key_exists(&amp;self, key: &amp;str) -&gt; bool {\n        self.data.contains_key(key)\n    }\n\n    fn delete_key(&amp;mut self, key: &amp;str) -&gt; Result&lt;(), Error&gt; {\n        self.data.remove(key).map_or(\n            Err(Error::new(ErrorKind::NotFound, \"Key does not exists\")),\n            |v| Ok(()),\n        )\n    }\n}\n</code></pre>\n\n<p>I wrote a test:</p>\n\n<pre><code>#[test]\nfn multiple_threads_bombing_storage() {\n    const parallels: usize = 10;\n    let mut storage = MemoryStorage {\n        data: HashMap::new(),\n    };\n    let mut consistency = Consistency::new(&amp;mut storage);\n\n    // create all keys.\n    let mut keys = Vec::&lt;String&gt;::new();\n    for k in 1..parallels {\n        keys.push(k.to_string());\n    }\n\n    let zero = \"0\".as_bytes();\n    // put default values in files.\n    for key in keys.clone() {\n        consistency.put_value(&amp;key, zero).unwrap();\n    }\n\n    // test write threads\n    let write_thread = |to_write: Vec&lt;u8&gt;, keys: &amp;mut Vec&lt;String&gt;| {\n        let mut rng = rand::thread_rng();\n        rng.shuffle(keys);\n\n        for key in keys {\n            let mut val = consistency.get_value(key).unwrap();\n            val.append(to_write.clone().as_mut());\n            consistency.put_value(key, &amp;val).unwrap();\n        }\n    };\n\n    // start parallels threads..\n    for t in 1..parallels {\n        let handle = thread::spawn(move || {\n            write_thread(t.to_string().into_bytes(), &amp;mut keys);\n        });\n    }\n\n    // wait for all threads..\n\n    // check if all parallels keys have all numbers in any order.\n}\n</code></pre>\n\n<p>This gives me an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `fileapi::Storage: std::marker::Send` is not satisfied\n   --&gt; src/consistency.rs:158:26\n    |\n158 |             let handle = thread::spawn(move || {\n    |                          ^^^^^^^^^^^^^ `fileapi::Storage` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `fileapi::Storage`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;mut fileapi::Storage`\n    = note: required because it appears within the type `consistency::Consistency&lt;'_&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;mut consistency::Consistency&lt;'_&gt;`\n    = note: required because it appears within the type `[closure@src/consistency.rs:145:28: 154:10 consistency:&amp;mut consistency::Consistency&lt;'_&gt;]`\n    = note: required because it appears within the type `[closure@src/consistency.rs:158:40: 160:14 write_thread:[closure@src/consistency.rs:145:28: 154:10 consistency:&amp;mut consistency::Consistency&lt;'_&gt;], t:usize, keys:std::vec::Vec&lt;std::string::String&gt;]`\n    = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>Adding <code>unsafe impl Send for Storage {}</code> gives me a contradictory error that <code>Send</code> can't be implemented for a trait:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `fileapi::Storage + 'static`\n</code></pre>\n\n<p>I don't understand how to solve this problem.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 0, "creation_date": 1510837754, "post_id": 47330241, "comment_id": 81611663, "body": "So your biggest issue is the slightly more verbose syntax for type casting in Rust? If you split up the Vector declaration into lines then it probably wouldn&#39;t be as unreadable"}, {"owner": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "reply_to_user": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 1, "creation_date": 1510840536, "post_id": 47330241, "comment_id": 81613731, "body": "My biggest issue is learning Rust. What I have so far seems overly complicated for a seemingly simple task so I&#39;m just checking if I&#39;m missing something or being completely unidiomatic here."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 2, "creation_date": 1510840960, "post_id": 47330241, "comment_id": 81614032, "body": "I don&#39;t think you need the <code>i32</code> annotations there, it should default to <code>i32</code>. Did you try compiling without them (but with the explicit cast to <code>f32</code>)?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1510842693, "post_id": 47330241, "comment_id": 81615343, "body": "Imho rust types are supposed to be explicit in such places, and requiring a cast to <code>f32</code> is the reasonable thing to do (or write some custom iterator that allows for float types of start, end and step - have fun defining the exact semantics :) )."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510843936, "post_id": 47330241, "comment_id": 81616261, "body": "@MadMonkey: The double-casting (to <code>i16</code> then <code>i32</code>) seems unnecessary; you should be able to directly use <code>x as f32</code>."}, {"owner": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510845729, "post_id": 47330241, "comment_id": 81617685, "body": "@MatthieuM. Indeed I am. Don&#39;t know what I&#39;ve been doing wrong before because I could swear it didn&#39;t work when I was writing the question."}], "answers": [{"comments": [{"owner": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "edited": false, "score": 1, "creation_date": 1510840039, "post_id": 47330380, "comment_id": 81613305, "body": "Unfortunately the version of Rust that I use (1.21) insists that the range values are <code>i32</code> if I don&#39;t specify them explicitly as <code>-5i16..5i16</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "edited": false, "score": 2, "creation_date": 1510841888, "post_id": 47330380, "comment_id": 81614742, "body": "@MadMonkey: It doesn&#39;t &quot;insists&quot;, it &quot;defaults&quot;. If rustc cannot infer an integer type, it defaults to <code>i32</code>. Note that specifying only <i>one</i> of the value types in the range would be sufficient; the other would be inferred to have the same type since ranges are homogeneous."}], "tags": [], "owner": {"reputation": 3583, "user_id": 1391026, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/af98bdbeea8772f2d90d47d507098256?s=128&d=identicon&r=PG", "display_name": "musicmatze", "link": "https://stackoverflow.com/users/1391026/musicmatze"}, "is_accepted": false, "score": 2, "last_activity_date": 1510837371, "creation_date": 1510837371, "answer_id": 47330380, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust/47330380#47330380", "title": "Converting {integer} to f32 in Rust", "body": "<p><code>From&lt;i16&gt;</code> <a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"nofollow noreferrer\">is implemented</a> for <code>f32</code>.</p>\n\n<p>So it should be possible to</p>\n\n<pre><code>for x in -5..5 {\n    for y in -5..5 {\n        for z in -5..5 {\n            let foo: Vector3 = Vector3 {\n                 x: f32::from(x),\n                 y: f32::from(y),\n                 z: f32::from(z),\n            };\n            // do stuff with foo\n        }\n    }\n}\n</code></pre>\n\n<p>Of course if your iteration uses values bigger than <code>i16</code> (<code>i32</code> or <code>i64</code>) this is no longer possible in a safe way and you have to try another way.</p>\n"}, {"comments": [{"owner": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "edited": false, "score": 0, "creation_date": 1510839695, "post_id": 47331046, "comment_id": 81613029, "body": "In my Rust (1.21) the conversion from i32 to f32 is not implemented, unfortunately. Only i16 (or smaller) to i32."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "edited": false, "score": 3, "creation_date": 1510840026, "post_id": 47331046, "comment_id": 81613289, "body": "@MadMonkey Conversion from primitive integer types to floating point types is not possible with <code>From</code> because <code>f32</code> is not a strict superset of <code>i32</code>. However, numeric casting with <code>as</code> is possible, and has always been since the first stable version of Rust."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1510841924, "post_id": 47331046, "comment_id": 81614769, "body": "It&#39;s not necessary to cast twice; the compiler will replace <code>{integer}</code> with a concrete type by itself. Just <code>x as f32</code> works."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1510842077, "post_id": 47331046, "comment_id": 81614889, "body": "While your solution works, I would note that the original complaint was that the code to make it work was too verbose... and your code is <i>extremely</i> verbose :("}], "tags": [], "owner": {"reputation": 8555, "user_id": 638028, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/xj2Hg.png?s=128&g=1", "display_name": "Klitos Kyriacou", "link": "https://stackoverflow.com/users/638028/klitos-kyriacou"}, "is_accepted": false, "score": 3, "last_activity_date": 1510842391, "last_edit_date": 1510842391, "creation_date": 1510839237, "answer_id": 47331046, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust/47331046#47331046", "title": "Converting {integer} to f32 in Rust", "body": "<p>The only integer types available are <code>i8</code>, <code>i16</code>, <code>i32</code>, etc. and their unsigned equivalents. There is no such type as <code>{integer}</code>. This is just a placeholder emitted by the compiler before it has determined the actual type by inference from the whole-method context.</p>\n\n<p>The problem is that, at the point where you call <code>Vector3 {x: x as f32, y: y as f32, z: z as f32}</code>, it doesn't yet know exactly what x, y and z are, and therefore doesn't know what operations are available. It could use the operations given to determine the type, if it was a bit more intelligent; see <a href=\"https://github.com/rust-lang-nursery/reference/issues/104\" rel=\"nofollow noreferrer\">bug report</a> for details.</p>\n\n<p>There is a conversion from <code>i32</code> to <code>f32</code>, so you should be able to do this:</p>\n\n<pre><code>let foo = Vector3 {x: (x as i32) as f32, y: (y as i32) as f32, z: (z as i32) as f32};\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 9, "last_activity_date": 1510849388, "last_edit_date": 1510849388, "creation_date": 1510841382, "answer_id": 47331819, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust/47331819#47331819", "title": "Converting {integer} to f32 in Rust", "body": "<p>I'm not sure why you felt the need to specify the <code>i32</code>s when using <code>as</code>, since this works fine (<a href=\"https://play.rust-lang.org/?gist=c3ed4a89ed307305137a8d00428ffc2c&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>for x in -5..5 {\n    for y in -5..5 {\n        for z in -5..5 {\n            let foo = Vector3 { // no need to specify the type of foo\n                x: x as f32,\n                y: y as f32,\n                z: z as f32,\n            };\n            // etc.\n        }\n    }\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/a/47331046/3650362\">Klitos Kyriacou's answer</a> observes, there is no such type as <code>{integer}</code>; the compiler gives that error message because it couldn't infer a concrete type for <code>x</code>. It doesn't actually matter, because there are <strong>no</strong> implicit conversions from integer types to floating-point types in Rust, or from integer types to other integer types, for that matter. In fact, Rust is quite short on implicit conversions of any sort (the most notable exception being <code>Deref</code> coercions).</p>\n\n<p>Casting the type with <code>as</code> permits the compiler to reconcile the type mismatch, and it will eventually fill in <code>{integer}</code> with <code>i32</code> (<a href=\"https://doc.rust-lang.org/nightly/reference/tokens.html#integer-literals\" rel=\"nofollow noreferrer\">unconstrained integer literals always default to <code>i32</code></a>, not that the concrete type matters in this case).</p>\n\n<p>Another option you may prefer, especially if you use <code>x</code>, <code>y</code> and <code>z</code> for other purposes in the loop, is to shadow them with <code>f32</code> versions instead of creating new names:</p>\n\n<pre><code>for x in -5..5 {\n    let x = x as f32;\n    for y in -5..5 {\n        let y = y as f32;\n        for z in -5..5 {\n            let z = z as f32;\n            let foo = Vector3 { x, y, z };\n            // etc.\n        }\n    }\n}\n</code></pre>\n\n<p>(You don't have to write <code>x: x, y: y, z: z</code> -- Rust does the right thing when the variable name is the same as the struct member name.)</p>\n\n<p>Another option (last one, I promise) is to convert the iterators instead using <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\"><code>map</code></a>:</p>\n\n<pre><code>for x in (-5..5).map(|x| x as f32) {\n    for y in (-5..5).map(|y| y as f32) {\n        for z in (-5..5).map(|z| z as f32) {\n            let foo = Vector3 { x, y, z };\n            // etc.\n        }\n    }\n}\n</code></pre>\n\n<p>However it is a little more dense and may be harder to read than the previous version.</p>\n"}, {"comments": [{"owner": {"reputation": 448, "user_id": 4584387, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/gRotu.png?s=128&g=1", "display_name": "tga", "link": "https://stackoverflow.com/users/4584387/tga"}, "edited": false, "score": 0, "creation_date": 1546099380, "post_id": 47332032, "comment_id": 94779713, "body": "but how to call something like <code>Vector3::new(1, 1, 1)</code>? It is interpreted as i32 and there&#39;s no <code>std::convert::From&lt;i32&gt;</code> for <code>f32</code>"}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "reply_to_user": {"reputation": 448, "user_id": 4584387, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/gRotu.png?s=128&g=1", "display_name": "tga", "link": "https://stackoverflow.com/users/4584387/tga"}, "edited": false, "score": 0, "creation_date": 1546435207, "post_id": 47332032, "comment_id": 94850721, "body": "This is very interesting, I&#39;m not sure why that impl doesn&#39;t exist. These are the ones that <a href=\"https://doc.rust-lang.org/std/primitive.f32.html#impl-From%3Cu8%3E\" rel=\"nofollow noreferrer\">exist</a>. There is probably a good reason for that in rust as usual, but I can&#39;t think of it off of the top of my head. All i32 can be represented exactly within f32."}], "tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 1, "last_activity_date": 1510844952, "last_edit_date": 1510844952, "creation_date": 1510841986, "answer_id": 47332032, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust/47332032#47332032", "title": "Converting {integer} to f32 in Rust", "body": "<p>Another solution this time using a function and traits. <a href=\"http://play.integer32.com/?gist=b918e4d8df44708a0253eac40e41bca5&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre><code>struct Vector3 {\n    pub x: f32,\n    pub y: f32,\n    pub z: f32,\n}\n\nimpl Vector3 {\n    pub fn new&lt;T: Into&lt;f32&gt;&gt;(a: T, b: T, c: T) -&gt; Vector3 {\n        Vector3 {\n            x: a.into(),\n            y: b.into(),\n            z: c.into(),\n        }\n    }\n}\n\nfn main() {\n    for x in -5..5i8 {\n        for y in -5..5i8 {\n            for z in -5..5i8 {\n                let foo: Vector3 = Vector3::new(x, y, z);\n                // do stuff with foo\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 4, "creation_date": 1510842094, "post_id": 47332046, "comment_id": 81614902, "body": "The <code>Vec3</code> components are clearly meant to be of type <code>f32</code>, providing a constructor which takes <code>i16</code> (why <code>i16</code> and not any other integer type?) seems very wrong to me."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1510842298, "post_id": 47332046, "comment_id": 81615064, "body": "@Stefan: If you have <code>f32</code>, you can use <code>Vec3 { x, y, z }</code> already, there&#39;s no need for any constructor then; you only need a constructor if you wish to apply further logic, such as conversion. I used <code>i16</code> because it&#39;s simpler here (it&#39;s the biggest signed type that is guaranteed to convert to <code>f32</code> cleanly); but as I noted you can use generics, like <a href=\"https://stackoverflow.com/a/47332032/147192\">this answer</a>, I just didn&#39;t want to overload the OP with too much new information and keep to the simplest solution that worked for their issue (while hinting at more, if they are curious)."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1510842022, "creation_date": 1510842022, "answer_id": 47332046, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust/47332046#47332046", "title": "Converting {integer} to f32 in Rust", "body": "<p>As many problems in Computer Science, it can be solved by applying another layer of indirection.</p>\n\n<p>For example, defining a constructor for <code>Vec3</code>:</p>\n\n<pre><code>impl Vec3 {\n    fn new(x: i16, y: i16, z: i16) -&gt; Vec3 {\n        Vec3 { x: x as f32, y: y as f32, z: z as f32 }\n    }\n}\n\nfn main() {\n    for x in -5..5 {\n        for y in -5..5 {\n            for z in -5..5 {\n                let foo = Vector3::new(x, y, z);\n                println!(\"{:?}\", foo);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>You can use a plethora of other methods (generics, builders, etc...); but a good old constructor is just the simplest.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1510843533, "last_edit_date": 1510843533, "creation_date": 1510843141, "answer_id": 47332431, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust/47332431#47332431", "title": "Converting {integer} to f32 in Rust", "body": "<p>Since everyone else is answering, I'll chime in with an iterator-flavored solution. This uses <a href=\"https://docs.rs/itertools/0.7.2/itertools/trait.Itertools.html#method.cartesian_product\" rel=\"nofollow noreferrer\"><code>Itertools::cartesian_product</code></a> instead of the <code>for</code> loops:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\n\nfn main() {\n    fn conv(x: i32) -&gt; f32 { x as f32 }\n\n    let xx = (-5..5).map(conv);\n    let yy = xx.clone();\n    let zz = xx.clone();\n\n    let coords = xx.cartesian_product(yy.clone().cartesian_product(zz));\n    let vectors = coords.map(|(x, (y, z))| Vector3 { x, y, z });\n}\n</code></pre>\n\n<p>Unfortunately, closures don't <em>yet</em> implement <code>Clone</code>, so I used a small function to perform the mapping. These <em>do</em> implement <code>Clone</code>.</p>\n\n<p>If you wanted a helper method:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\nuse std::ops::Range;\n\nfn f32_range(r: Range&lt;i32&gt;) -&gt; std::iter::Map&lt;Range&lt;i32&gt;, fn(i32) -&gt; f32&gt; {\n    fn c(x: i32) -&gt; f32 { x as _ }\n    r.map(c)\n}\n\nfn main() {\n    let xx = f32_range(-5..5);\n    let yy = f32_range(-5..5);\n    let zz = f32_range(-5..5);\n\n    let coords = xx.cartesian_product(yy.cartesian_product(zz));\n    let vectors = coords.map(|(x, (y, z))| Vector3 { x, y, z });\n}\n</code></pre>\n"}], "owner": {"reputation": 499, "user_id": 3756015, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d191ec2ddab2427b7145b62a9ff80783?s=128&d=identicon&r=PG&f=1", "display_name": "MadMonkey", "link": "https://stackoverflow.com/users/3756015/madmonkey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9521, "favorite_count": 1, "accepted_answer_id": 47331819, "answer_count": 6, "score": 6, "last_activity_date": 1510849388, "creation_date": 1510836989, "last_edit_date": 1510845647, "question_id": 47330241, "link": "https://stackoverflow.com/questions/47330241/converting-integer-to-f32-in-rust", "title": "Converting {integer} to f32 in Rust", "body": "<p>I want to convert a value from <code>{integer}</code> to <code>f32</code>:</p>\n\n<pre><code>struct Vector3 {\n    pub x: f32,\n    pub y: f32,\n    pub z: f32,\n}\n\nfor x in -5..5 {\n    for y in -5..5 {\n        for z in -5..5 {\n            let foo: Vector3 = Vector3 { x: x, y: y, z: z };\n            // do stuff with foo\n        }\n    }\n}\n</code></pre>\n\n<p>The compiler chokes on this with a type mismatch error (expecting <code>f32</code> but getting <code>{integer}</code>). Unfortunately I can not simply change <code>Vector3</code>. I'm feeding a C-API with this.</p>\n\n<p>Is there any easy and concise way I can convert <code>x</code>, <code>y</code> and <code>z</code> from <code>{integer}</code> to <code>f32</code>? </p>\n\n<p>I guess there is no builtin conversion from <code>i32</code> or <code>{integer}</code> to <code>f32</code> because it could be lossy in certain situations. However, in my case the range I'm using is so small that this wouldn't be an issue. So I would like to tell the compiler to convert the value anyways.</p>\n\n<p>Interestingly, the following works:</p>\n\n<pre><code>for x in -5..5 {\n    let tmp: i32 = x;\n    let foo: f32 = tmp as f32;\n}\n</code></pre>\n\n<p>I'm using a lot more that just one foo and one x so this turns hideous really fast.</p>\n\n<p>Also, this works:</p>\n\n<pre><code>for x in -5i32..5i32 {\n    let foo: f32 = x as f32;\n    // do stuff with foo here\n}\n</code></pre>\n\n<p>But with my usecase this turns into:</p>\n\n<pre><code>for x in -5i32..5i32 {\n    for y in -5i32..5i32 {\n        for z in -5i32..5i32 {\n            let foo: Vector3 = Vector3 {\n                x: x as f32,\n                y: y as f32,\n                z: z as f32,\n            };\n            // do stuff with foo\n        }\n    }\n}\n</code></pre>\n\n<p>Which I think is pretty unreadable and an unreasonable amount of cruft for a simple conversion.</p>\n\n<p>What am I missing here?</p>\n"}, {"tags": ["iterator", "rust", "lifetime"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1510837616, "post_id": 47329967, "comment_id": 81611571, "body": "<a href=\"https://play.rust-lang.org/?gist=2efecb579b3429f2932d2b635bb3ccfa&amp;version=stable\" rel=\"nofollow noreferrer\">Working code</a>. I can&#39;t elaborate on changes yet."}], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 8950785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f32d455b92b8bba7b8ec108e47560e30?s=128&d=identicon&r=PG&f=1", "display_name": "An Camch&#233;achta", "link": "https://stackoverflow.com/users/8950785/an-camch%c3%a9achta"}, "edited": false, "score": 0, "creation_date": 1510847972, "post_id": 47331244, "comment_id": 81619374, "body": "Thanks Stefan, I see your point about Item.  Also, obliged for the generic example.  I&#39;ve been relying on restrictive typing because the items for this iterator will only ever be a particular struct from a crate I don&#39;t own, and it doesn&#39;t have any traits I can parameterise.  I&#39;ve toyed with the idea of sending a PR for that project which includes a trait for the struct in question that would contain a default definition of all its methods.  For the size of my project, I&#39;m not sure if it&#39;s worth it."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1510857493, "post_id": 47331244, "comment_id": 81625557, "body": "Re <code>PhantomData</code>, it may be instructive to compare with <a href=\"https://stackoverflow.com/q/40484154/3650362\">this question</a>, in which <code>&#39;a</code> is used in the bound only as a lifetime parameter (<code>LT: ListTerm&lt;&#39;a&gt;</code>) and is considered &quot;unused&quot;. Here <code>&#39;a</code> is used as part of an associated type (<code>I: Iterator&lt;Item = &amp;&#39;a Inner&gt;</code>) and is not considered unused (because the compiler can determine the variance of <code>CustomIterator</code> over <code>&#39;a</code>)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1510858113, "post_id": 47331244, "comment_id": 81625888, "body": "(Although I agree that you don&#39;t need to parameterize by <code>&#39;a</code> in this example.)"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 3, "last_activity_date": 1510839767, "creation_date": 1510839767, "answer_id": 47331244, "question_id": 47329967, "link": "https://stackoverflow.com/questions/47329967/type-mismatch-resolving-iterator-item-to-a-pointer-with-an-explicit-lifetime/47331244#47331244", "title": "Type mismatch resolving iterator Item to a pointer with an explicit lifetime", "body": "<p>It is unclear to me why you'd want to restrict the wrapped iterator to some custom type (given that you still have to write down the restriction every time you use the type, although that might change).  But perhaps your \"real\" <code>next</code> function does something funny.</p>\n\n<ul>\n<li><code>PhantomData</code> doesn't seem to be necessary (anymore) to \"use\" the lifetime when it is used in a <code>where</code>-clause.</li>\n<li><code>IterateMore</code> shouldn't have an <code>Item</code> associated type, given <code>Iterator</code> already has it.  (If you'd really need a new type pick a different name)</li>\n<li>As <code>IterateMore</code> uses the <code>CustomIterator</code> type it needs to repeat the requirements, in this case <code>Iterator&lt;Item = &amp;'a Inner&gt;</code> (that is what the type mismatch error is about); this is not the same as saying <code>type Item = &amp;'a Inner</code> in the trait definition.</li>\n</ul>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8ef51cf93da74b030c7cc3ee1b942c79&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>/// an \"Inner\" struct to be contained in my custom iterator\npub struct Inner {\n    text: String,\n}\n\npub struct CustomIterator&lt;'a, I&gt;\nwhere\n    I: Iterator&lt;Item = &amp;'a Inner&gt;,\n{\n    iter: I,\n}\n\nimpl&lt;'a, I&gt; Iterator for CustomIterator&lt;'a, I&gt;\nwhere\n    I: Iterator&lt;Item = &amp;'a Inner&gt;,\n{\n    type Item = I::Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        println!(\"Custom next called\");\n        self.iter.next()\n    }\n}\n\npub trait IterateMore&lt;'a&gt;: Iterator&lt;Item = &amp;'a Inner&gt; + Sized {\n    fn more(self) -&gt; CustomIterator&lt;'a, Self&gt;;\n}\n\nimpl&lt;'a, I&gt; IterateMore&lt;'a&gt; for I\nwhere\n    I: Iterator&lt;Item = &amp;'a Inner&gt;,\n{\n    fn more(self) -&gt; CustomIterator&lt;'a, Self&gt; {\n        CustomIterator { iter: self }\n    }\n}\n\nfn main() {\n    let inner = Inner {\n        text: \"Hello world\".to_string(),\n    };\n    let inners = vec![inner];\n    inners.iter().more().next();\n}\n</code></pre>\n\n<p>You could also remove the type restrictions everywhere like this (and only add it back in the place you actually need/want it):</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1bc1a72f2236a1059b7a426fdc19108f&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>pub struct CustomIterator&lt;I&gt; {\n    iter: I,\n}\n\nimpl&lt;I&gt; Iterator for CustomIterator&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    type Item = I::Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        println!(\"Custom next called\");\n        self.iter.next()\n    }\n}\n\npub trait IterateMore: Iterator + Sized {\n    fn more(self) -&gt; CustomIterator&lt;Self&gt;;\n}\n\nimpl&lt;I&gt; IterateMore for I\nwhere\n    I: Iterator,\n{\n    fn more(self) -&gt; CustomIterator&lt;Self&gt;\n    {\n        CustomIterator { iter: self }\n    }\n}\n\nfn main() {\n    let inners = vec![\"Hello world\".to_string()];\n    inners.iter().more().next();\n}\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 8950785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f32d455b92b8bba7b8ec108e47560e30?s=128&d=identicon&r=PG&f=1", "display_name": "An Camch&#233;achta", "link": "https://stackoverflow.com/users/8950785/an-camch%c3%a9achta"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 348, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1510845305, "creation_date": 1510836215, "last_edit_date": 1510845305, "question_id": 47329967, "link": "https://stackoverflow.com/questions/47329967/type-mismatch-resolving-iterator-item-to-a-pointer-with-an-explicit-lifetime", "title": "Type mismatch resolving iterator Item to a pointer with an explicit lifetime", "body": "<p>I'm trying to add functions to <code>Iterator</code> where the associated type <code>Item</code> is a reference to a struct with an explicit lifetime.</p>\n\n<p>When I've wanted to modify the iterator state or return a new value I've had no problems, but when I attempt to return a new <code>Iterator</code> where <code>Item</code> is a reference with an explicit lifetime, the compiler complains.</p>\n\n<h2>Example</h2>\n\n<pre><code>use std::marker::PhantomData;\n\n/// First, an \"Inner\" struct to be contained in my custom iterator\npub struct Inner {\n    text: String,\n}\n\n/// Then, the \"CustomIterator\" in question.  Notice that `Item` is `&amp;'a Inner`.\npub struct CustomIterator&lt;'a, I: Iterator&lt;Item = &amp;'a Inner&gt;&gt; {\n    iter: I,\n    _marker: PhantomData&lt;&amp;'a i8&gt;,\n}\n\n/// Implementing Iterator for CustomIterator so as to define the `next()` function, as you do...\nimpl&lt;'a, I: Iterator&lt;Item = &amp;'a Inner&gt;&gt; Iterator for CustomIterator&lt;'a, I&gt; {\n    type Item = &amp;'a Inner;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        println!(\"Custom next called\");\n        self.iter.next()\n    }\n}\n\n/// Now, creating a custom trait definition called IterateMore that:\n///   1. inherits Iterator\n///   2. includes a default method called `more` which returns a `CustomIterator`\npub trait IterateMore&lt;'a&gt;: Iterator {\n    type Item;\n    fn more(self) -&gt; CustomIterator&lt;'a, Self&gt;\n    where\n        Self: Sized;\n}\n\n/// Implementing `IterateMore` for an iterator of the specific type `Iterator&lt;Item=&amp;'a Inner&gt;`\nimpl&lt;'a, I: Iterator&lt;Item = &amp;'a Inner&gt;&gt; IterateMore&lt;'a&gt; for I\nwhere\n    I: Iterator,\n{\n    type Item = &amp;'a Inner;\n    fn more(self) -&gt; CustomIterator&lt;'a, Self&gt;\n    where\n        Self: Sized,\n    {\n        CustomIterator {\n            iter: self,\n            _marker: PhantomData,\n        }\n    }\n}\n\nfn main() {\n    let inner = Inner {\n        text: \"Hello world\".to_string(),\n    };\n    let inners = vec![&amp;inner];\n    inners.iter().more().next();\n}\n</code></pre>\n\n<p>(See it on <a href=\"https://repl.it/repls/CheeryIlliterateWidgeon\" rel=\"nofollow noreferrer\">repl.it</a>)</p>\n\n<h2>Error</h2>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;Self as std::iter::Iterator&gt;::Item == &amp;'a Inner`\n  --&gt; src/main.rs:28:5\n   |\n28 | /     fn more(self) -&gt; CustomIterator&lt;'a, Self&gt;\n29 | |     where\n30 | |         Self: Sized;\n   | |____________________^ expected associated type, found reference\n   |\n   = note: expected type `&lt;Self as std::iter::Iterator&gt;::Item`\n              found type `&amp;'a Inner`\n   = note: required by `CustomIterator`\n</code></pre>\n\n<p>Why is <code>Item</code> not being resolved here?  It is a bit frustrating as the compiler also complains if I try to set <code>&amp;'a Inner</code> as the default <code>Item</code> type in the trait definition, saying:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: associated type defaults are unstable (see issue #29661)\n</code></pre>\n\n<p>How could this be fixed or done differently?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1510821138, "post_id": 47324656, "comment_id": 81600312, "body": "If you know the layout of the JSON object beforehand, you could probably use a JSON deserializer or map the values manually to a struct."}, {"owner": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "reply_to_user": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1510821193, "post_id": 47324656, "comment_id": 81600351, "body": "Please see my comment below."}, {"owner": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "reply_to_user": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1510821557, "post_id": 47324656, "comment_id": 81600575, "body": "Or lets describe it differently: can i run rust code from a string? Can i inject code to be run from a string?"}], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "edited": false, "score": 0, "creation_date": 1510821083, "post_id": 47324839, "comment_id": 81600273, "body": "I am already using serde for creating the json objects, one conf file and one data file but the data file has like 250 attributes. So if I want to add values to the config file i later than have to handle these values with if else or whatever each one individually in pseudocode: if string is &quot;json.id.value&quot; {a = json.id.value;}"}, {"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "reply_to_user": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "edited": false, "score": 0, "creation_date": 1510822435, "post_id": 47324839, "comment_id": 81601109, "body": "@KilianHertel Are you using serde or serde_json?"}, {"owner": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "edited": false, "score": 0, "creation_date": 1510822464, "post_id": 47324839, "comment_id": 81601132, "body": "i am using both"}, {"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "edited": false, "score": 1, "creation_date": 1510822807, "post_id": 47324839, "comment_id": 81601338, "body": "<code>serde_json</code> provides you with a <code>json!</code> macro. Why are you parsing the string manually in your <code>if</code> condition instead of using said macro?"}, {"owner": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "edited": false, "score": 0, "creation_date": 1510826195, "post_id": 47324839, "comment_id": 81603754, "body": "ah ok so you can load the big json with json! and then access the attributes with the [&quot;&quot;] like json[&quot;id&quot;][&quot;value&quot;]. Thank You! I think i gonna try that!"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "edited": false, "score": 0, "creation_date": 1510906085, "post_id": 47324839, "comment_id": 81643601, "body": "@KilianHertel I am really confused by your description. Can you maybe edit your question to show the code you&#39;re writing now and the code you want to write?"}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 1, "last_activity_date": 1510820823, "creation_date": 1510820823, "answer_id": 47324839, "question_id": 47324656, "link": "https://stackoverflow.com/questions/47324656/is-there-a-variable-evaluator-in-rust/47324839#47324839", "title": "Is there a variable evaluator in Rust?", "body": "<p>Rust is a compiled language. What you want isn't directly possible, because names don't exist in the compiled code anymore.</p>\n\n<p>But if you want to go from JSON to Rust structs, that's what the serialization library <a href=\"https://serde.rs/\" rel=\"nofollow noreferrer\">Serde</a> is for.</p>\n"}], "owner": {"reputation": 147, "user_id": 5953251, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/aHaAz.jpg?s=128&g=1", "display_name": "Kilian Hertel", "link": "https://stackoverflow.com/users/5953251/kilian-hertel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 47324839, "answer_count": 1, "score": 1, "last_activity_date": 1510840658, "creation_date": 1510820155, "last_edit_date": 1510840658, "question_id": 47324656, "link": "https://stackoverflow.com/questions/47324656/is-there-a-variable-evaluator-in-rust", "title": "Is there a variable evaluator in Rust?", "body": "<p>I have a JSON object as a configuration file with strings. These strings represent attributes of an object.</p>\n\n<p>How can I interpret strings of the format <code>json.id.value</code> by a function as variables or references? </p>\n\n<p>I have seen the <a href=\"https://crates.io/crates/eval\" rel=\"nofollow noreferrer\">eval crate</a>, but I don't think it is what I need.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 11, "last_activity_date": 1510816017, "creation_date": 1510816017, "answer_id": 47323565, "question_id": 47323256, "link": "https://stackoverflow.com/questions/47323256/how-to-reduce-boilerplate-nested-result-in-rust/47323565#47323565", "title": "How to reduce boilerplate nested Result in Rust", "body": "<p>The answer to your direct question is <a href=\"https://doc.rust-lang.org/book/second-edition/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-\" rel=\"noreferrer\">the questionmark operator</a> which would allow you to replace your whole <code>match</code> block with</p>\n\n<pre><code>Ok((\n    t[0].parse::&lt;u8&gt;()?,\n    t[1].parse::&lt;u8&gt;()?,\n    t[2].parse::&lt;u8&gt;()?,\n    t[3].parse::&lt;u8&gt;()?,\n))\n</code></pre>\n\n<p>where essentially <code>?</code> will return the error immediately if one is encountered.</p>\n\n<p>That said, Rust already provides APIs for parsing IP addresses. Even if you wanted to maintain your tuple approach (though why would you), you could implement your function as</p>\n\n<pre><code>fn ip4(s: &amp;str) -&gt; Result&lt;(u8, u8, u8, u8), net::AddrParseError&gt; {\n    let addr: net::Ipv4Addr = s.parse()?;\n    let octets = addr.octets();\n    Ok((octets[0], octets[1], octets[2], octets[3]))\n}\n</code></pre>\n\n<p>or just pass around the <code>Ipv4Addr</code> value directly.</p>\n"}, {"comments": [{"owner": {"reputation": 2564, "user_id": 1125621, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c1b3328f06ea4ab079677388658dae10?s=128&d=identicon&r=PG", "display_name": "o0omycomputero0o", "link": "https://stackoverflow.com/users/1125621/o0omycomputero0o"}, "edited": false, "score": 0, "creation_date": 1510818142, "post_id": 47324032, "comment_id": 81598795, "body": "Thanks. Yes, I&#39;ve read the SICP book :D; my question is related to reduce boilerplate made by nested Result."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 2564, "user_id": 1125621, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c1b3328f06ea4ab079677388658dae10?s=128&d=identicon&r=PG", "display_name": "o0omycomputero0o", "link": "https://stackoverflow.com/users/1125621/o0omycomputero0o"}, "edited": false, "score": 1, "creation_date": 1510818241, "post_id": 47324032, "comment_id": 81598843, "body": "@o0omycomputero0o yes, I have just noticed that your initial solution could be a bit better if you would rewrite it as an iterative process. But of course I would prefer using <code>Rust</code> standard library instead of writing this code :) Just wanted to point you that if you don&#39;t have such a solution as @loganfsmyth you may do it better anyway :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510818561, "post_id": 47324032, "comment_id": 81598994, "body": "There is some inefficiency here, part of which was present in the original solution to be honest. You do not have to <code>collect</code> the result of <code>split</code> into a <code>Vec</code> (causing a memory allocation), you can directly use the resulting iterator. And if you do so, you get all the iterator goodness."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510818682, "post_id": 47324032, "comment_id": 81599060, "body": "@MatthieuM. nice point, but will I be able to check the size of the split then?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510819552, "post_id": 47324032, "comment_id": 81599462, "body": "You can count as you consume the iterator."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510819584, "post_id": 47324032, "comment_id": 81599486, "body": "@MatthieuM. so we will have to produce iterator twice, one for counting, another for operations."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510819908, "post_id": 47324032, "comment_id": 81599647, "body": "@VictorPolevoy: <b>No!</b> This would be wasteful. <i>as you consume</i> means <i>at the same time you consume</i>. I would use <code>enumerate</code> here so that the iterator produce a tuple <code>(index of element, element)</code>. Keep the last index, it tells you (after the fact) how many elements the iterator yielded."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510820016, "post_id": 47324032, "comment_id": 81599693, "body": "@MatthieuM. Well, as you may see, I return from the function immediately if the split does not contain enough elements because there is no need in continuing the process. Doing as you say will produce, for example, 3 iterations and will cause a error only on 4th time - we have wasted the cpu with useless work."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1510820230, "post_id": 47324032, "comment_id": 81599808, "body": "@VictorPolevoy: Maybe, maybe not. You already iterated 4 times to create the <code>octets_str_array</code> in the first place + allocated memory (possibly twice or thrice depending on the initial size of the vector allocation). In terms of worst case latency, memory allocation is unbounded (it may trigger the OOM killer which will kill a process and harvest its memory), so as far as worst case is concerned, you can &quot;waste&quot; a lot of CPU cycles whilst still being much better off than with memory allocation! Of course... this tells us nothing about average case..."}], "tags": [], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "is_accepted": false, "score": 1, "last_activity_date": 1510820184, "last_edit_date": 1510820184, "creation_date": 1510817797, "answer_id": 47324032, "question_id": 47323256, "link": "https://stackoverflow.com/questions/47323256/how-to-reduce-boilerplate-nested-result-in-rust/47324032#47324032", "title": "How to reduce boilerplate nested Result in Rust", "body": "<p>Though, I do not see anything bad in @loganfsmyth's answer, I want to add another solution.</p>\n\n<p>Your problem is a very simple and general problem of all programming languages which can be solved very easily if you would have enough time or practice in optimizing solutions. There is some divide and conquer recursive technique which is usually used to solve such problems. For a start, imagine a more simple thing: parsing a single octet from a string. This is a simple parse which you already know. Then mentally try to expand this problem to a larger one - parsing all octets which is a simple <strong>repeating</strong> process of the smallest problem we have solved earlier (parsing a single octet). This leads us to an iterative/recursive process: <strong>do something until</strong>. Keeping this in mind I have rewritten your function to a simple iterative process which uses <strong>tail-recursion</strong> which will not cause a stack overflow as a usual recursion due to it's form:</p>\n\n<pre><code>use std::num;\n\n#[derive(Debug, Copy, Clone)]\nstruct IpAddressOctets(pub u8, pub u8, pub u8, pub u8);\ntype Result = std::result::Result&lt;IpAddressOctets, num::ParseIntError&gt;;\n\nfn ipv4(s: &amp;str) -&gt; Result {\n    let octets_str_array: Vec&lt;_&gt; = s.split('.').collect();\n\n    // If it does not contain 4 octets then there is a error.\n    if octets_str_array.len() != 4 {\n        return Ok(IpAddressOctets(0, 0, 0, 0))  // or other error type\n    }\n\n    let octets = Vec::new();\n\n    fn iter_parse(octets_str_array: Vec&lt;&amp;str&gt;, mut octets: Vec&lt;u8&gt;) -&gt; Result {\n        if octets.len() == 4 {\n            return Ok(IpAddressOctets(octets[0], octets[1], octets[2], octets[3]))\n        }\n\n        let index = octets.len();\n        octets.push(octets_str_array[index].parse::&lt;u8&gt;()?);\n        iter_parse(octets_str_array, octets)\n    }\n\n    iter_parse(octets_str_array, octets)\n}\n\nfn main() {\n    println!(\"IP address octets parsed: {:#?}\", ipv4(\"10.0.5.234\"));\n}\n</code></pre>\n\n<p>Keep in mind that <code>Rust</code> language is a bit more functional than you might think.</p>\n\n<p>Also, I would recommend you to read <a href=\"https://mitpress.mit.edu/sicp/full-text/book/book.html\" rel=\"nofollow noreferrer\">this book</a> which greatly explains the solution.</p>\n"}, {"comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1510940783, "post_id": 47327807, "comment_id": 81665443, "body": "FYI, this <code>match&#47;return</code> pattern is just what the question-mark operator does. The only difference is that it wraps the error as <code>Err(From::from(err))</code>."}], "tags": [], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "is_accepted": false, "score": 1, "last_activity_date": 1510829698, "creation_date": 1510829698, "answer_id": 47327807, "question_id": 47323256, "link": "https://stackoverflow.com/questions/47323256/how-to-reduce-boilerplate-nested-result-in-rust/47327807#47327807", "title": "How to reduce boilerplate nested Result in Rust", "body": "<p>You can use early returns to prevent the nesting (but not the repetition).</p>\n\n<p>Note the body of the <code>Err</code> arms of the matches:</p>\n\n<pre><code>fn ip4(s: &amp;str) -&gt; Result&lt;(u8, u8, u8, u8), num::ParseIntError&gt; {\n    let t: Vec&lt;_&gt; = s.split('.').collect();\n\n    let a1 = match t[0].parse::&lt;u8&gt;() {\n        Ok(x) =&gt; x,\n        Err(er) =&gt; return Err(er),\n    };\n    let a2 = match t[1].parse::&lt;u8&gt;() {\n        Ok(x) =&gt; x,\n        Err(er) =&gt; return Err(er),\n    };\n    let a3 = match t[2].parse::&lt;u8&gt;() {\n        Ok(x) =&gt; x,\n        Err(er) =&gt; return Err(er),\n    };\n    let a4 = match t[3].parse::&lt;u8&gt;() {\n        Ok(x) =&gt; x,\n        Err(er) =&gt; return Err(er),\n    };\n\n    (a1, a2, a3, a4)\n}\n</code></pre>\n\n<p>But, as the others have said, Rust already has a built-in way to parse IP addresses.</p>\n"}], "owner": {"reputation": 2564, "user_id": 1125621, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c1b3328f06ea4ab079677388658dae10?s=128&d=identicon&r=PG", "display_name": "o0omycomputero0o", "link": "https://stackoverflow.com/users/1125621/o0omycomputero0o"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 977, "favorite_count": 0, "accepted_answer_id": 47323565, "answer_count": 3, "score": 6, "last_activity_date": 1510840832, "creation_date": 1510814699, "last_edit_date": 1510840832, "question_id": 47323256, "link": "https://stackoverflow.com/questions/47323256/how-to-reduce-boilerplate-nested-result-in-rust", "title": "How to reduce boilerplate nested Result in Rust", "body": "<p>I have code using a nested <code>Result</code> like this:</p>\n\n<pre><code>fn ip4(s: &amp;str) -&gt; Result&lt;(u8, u8, u8, u8), num::ParseIntError&gt; {\n    let t: Vec&lt;_&gt; = s.split('.').collect();\n    match t[0].parse::&lt;u8&gt;() {\n        Ok(a1) =&gt; {\n            match t[1].parse::&lt;u8&gt;() {\n                Ok(a2) =&gt; {\n                    match t[2].parse::&lt;u8&gt;() {\n                        Ok(a3) =&gt; {\n                            match t[3].parse::&lt;u8&gt;() {\n                                Ok(a4) =&gt; {\n                                    Ok((a1, a2, a3, a4))\n                                }\n                                Err(er) =&gt; Err(er)\n                            }\n                        },\n                        Err(er) =&gt; Err(er)\n                    }\n                }\n                Err(er) =&gt; Err(er)\n            }\n        }\n        Err(er) =&gt; Err(er),\n    }\n}\n</code></pre>\n\n<p>Is there any function or composing way to reduce this? Something like Haskell or Scala programmers do:</p>\n\n<pre><code>fn ip4(s: &amp;str) -&gt; Result&lt;(u8, u8, u8, u8), num::ParseIntError&gt; {\n  let t: Vec&lt;_&gt; = s.split('.').collect();\n  Result\n  .lift((,,,))\n  .ap(() -&gt; t[0].parse::&lt;u8&gt;())\n  .ap(() -&gt; t[1].parse::&lt;u8&gt;())\n  .ap(() -&gt; t[2].parse::&lt;u8&gt;())\n  .ap(() -&gt; t[3].parse::&lt;u8&gt;()) // maybe more concise in Haskell or Scala but I think it's enough :)\n}\n</code></pre>\n"}]