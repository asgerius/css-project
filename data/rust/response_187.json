[{"tags": ["rust"], "comments": [{"owner": {"reputation": 7649, "user_id": 356218, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/dc0ec712fb6804d6131e6552e0a14e0a?s=128&d=identicon&r=PG", "display_name": "Thymine", "link": "https://stackoverflow.com/users/356218/thymine"}, "edited": false, "score": 0, "creation_date": 1533753438, "post_id": 51753297, "comment_id": 90466895, "body": "Consider this snippet (I assume it would likely be valid Rust): <code>let x = -5i32; x = x.abs();</code> returning u32 would require a cast to assign it back to the same variable, which is one reason I&#39;d imagine its generally implemented the way it is"}, {"owner": {"reputation": 3942, "user_id": 747916, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e780eae6ca6a0b5d0d4705259f9da879?s=128&d=identicon&r=PG", "display_name": "John Doucette", "link": "https://stackoverflow.com/users/747916/john-doucette"}, "reply_to_user": {"reputation": 7649, "user_id": 356218, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/dc0ec712fb6804d6131e6552e0a14e0a?s=128&d=identicon&r=PG", "display_name": "Thymine", "link": "https://stackoverflow.com/users/356218/thymine"}, "edited": false, "score": 1, "creation_date": 1533753599, "post_id": 51753297, "comment_id": 90466973, "body": "@Thymine That&#39;s true. The pull request Shepmaster links has a discussion that argues this is emperically a much rarer usecase than trying to work with the result as an unsigned number though. It also has the development minutes, so I&#39;m writing up an answer based on those."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1533797081, "post_id": 51753686, "comment_id": 90479860, "body": "Nice tidbit of Rust archaeology!"}], "tags": [], "owner": {"reputation": 3942, "user_id": 747916, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e780eae6ca6a0b5d0d4705259f9da879?s=128&d=identicon&r=PG", "display_name": "John Doucette", "link": "https://stackoverflow.com/users/747916/john-doucette"}, "is_accepted": true, "score": 11, "last_activity_date": 1533754455, "last_edit_date": 1533754455, "creation_date": 1533753955, "answer_id": 51753686, "question_id": 51753297, "link": "https://stackoverflow.com/questions/51753297/why-dont-the-absolute-value-methods-on-signed-integers-return-unsigned-values/51753686#51753686", "title": "Why don&#39;t the absolute value methods on signed integers return unsigned values?", "body": "<p>There's a link to <a href=\"https://github.com/rust-lang/meeting-minutes/blob/master/weekly-meetings/2015-04-07.md#change-abs-to-return-unsigned\" rel=\"noreferrer\">the development meeting minutes</a> where this was discussed in the <a href=\"https://github.com/rust-lang/rfcs/pull/1017\" rel=\"noreferrer\">proposed RFC \"Change abs() to return unsigned integers\"</a></p>\n\n<p>It looks like the main reasons were:</p>\n\n<ol>\n<li>Many other languages use <code>i32</code> -> <code>i32</code> (for instance, C, Java), because the accidental promotion of other values to <code>u32</code> might cause bugs. Rust seems to have used <code>i32</code> -> <code>i32</code> for this reason originally (i.e. following convention), but doesn't suffer from the same kinds of bugs.</li>\n<li>This feature request wasn't submitted until after Rust had reached beta. The developers were not willing to introduce a breaking change to the language over what appears to be a rare bug. This looks like the main reason offered for keeping things this way. </li>\n</ol>\n\n<p>It seems like the accepted workaround is to use <code>as u32</code> to cast.</p>\n\n<p><code>i32::overflowing_abs</code> <code>i32::wrapping_abs</code> and <code>i32::checked_abs</code> implement other solutions to the <code>i32::min_value()</code> bug, but none of them produces a u32.</p>\n"}], "owner": {"reputation": 3942, "user_id": 747916, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e780eae6ca6a0b5d0d4705259f9da879?s=128&d=identicon&r=PG", "display_name": "John Doucette", "link": "https://stackoverflow.com/users/747916/john-doucette"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 552, "favorite_count": 0, "accepted_answer_id": 51753686, "answer_count": 1, "score": 11, "last_activity_date": 1533754455, "creation_date": 1533752487, "last_edit_date": 1533753640, "question_id": 51753297, "link": "https://stackoverflow.com/questions/51753297/why-dont-the-absolute-value-methods-on-signed-integers-return-unsigned-values", "title": "Why don&#39;t the absolute value methods on signed integers return unsigned values?", "body": "<p>The following code fails to compile:</p>\n\n<pre><code>fn main() {\n    let x = (-5i32).abs();\n\n    let z: u32 = x;\n}\n</code></pre>\n\n<p>with the message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:18\n  |\n4 |     let z: u32 = x;\n  |                  ^ expected u32, found i32\n</code></pre>\n\n<p>Reading <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#method.abs\" rel=\"noreferrer\">the documentation</a>, it looks the choice of <code>i32</code> stems from the fact that <code>i32::min_value()</code> has no positive representation in <code>i32</code>. However, it <em>would</em> have a positive representation in <code>u32</code>, which can represent numbers twice as large.</p>\n\n<p>I'm learning the language, and want to understand why certain design decisions were made so that I can develop good habits. I find this one confusing. Can someone explain why it works this way instead of just returning a <code>u32</code>, which would seem to be the semantically correct type?</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1533751383, "post_id": 51752650, "comment_id": 90465794, "body": "All literals are of type <code>&amp;&#39;static str</code>, but not all <code>&amp;&#39;static str</code>s are literals. <code>xo</code> is not a string literal. You may want to read <a href=\"https://stackoverflow.com/questions/485119/what-does-the-word-literal-mean\">What does the word &quot;literal&quot; mean?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 19, "user_id": 10112313, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a35f10a2d32b378d0e5409bfe2a8eb4?s=128&d=identicon&r=PG&f=1", "display_name": "Ckiller", "link": "https://stackoverflow.com/users/10112313/ckiller"}, "edited": false, "score": 0, "creation_date": 1533921458, "post_id": 51752746, "comment_id": 90539943, "body": "I see, each parameter that is a reference gets its own lifetime parameter. A function with two parameters gets two separate lifetime parameters. In the case of what im doing,  lifetimes have to match that&#39;s why we have to specify the same lifetimes for the references correct? this is also to avoid dangling references?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1533750466, "creation_date": 1533750466, "answer_id": 51752746, "question_id": 51752650, "link": "https://stackoverflow.com/questions/51752650/how-can-string-literals-have-different-lifetimes-if-they-are-alive-for-the-entir/51752746#51752746", "title": "How can string literals have different lifetimes if they are alive for the entire duration of the program?", "body": "<p>Your function doesn't know that it will only be called with string literals. You can see this by deleting the entire body of main \u2014 it doesn't matter. If you take the time to create a <a href=\"https://stackoverflow.com/help/mcve\">Minimal, Complete, and Verifiable example</a>, you would have discovered this for yourself.</p>\n\n<p>Due to <a href=\"https://doc.rust-lang.org/book/2018-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elision</a>, the function is effectively defined as:</p>\n\n<pre><code>fn make_move&lt;'a, 'b&gt;(xo: &amp;'a str, position: i32, board: &amp;mut Vec&lt;Vec&lt;&amp;'b str&gt;&gt;) \n</code></pre>\n\n<p>Indeed, the two lifetimes have no relation to each other and you get the error.</p>\n\n<p>Saying they are the same lifetime fixes it:</p>\n\n<pre><code>fn make_move&lt;'a&gt;(xo: &amp;'a str, position: i32, board: &amp;mut Vec&lt;Vec&lt;&amp;'a str&gt;&gt;)\n</code></pre>\n\n<p>As does saying that the value being saved in the board is <code>'static</code>:</p>\n\n<pre><code>fn make_move(xo: &amp;'static str, position: i32, board: &amp;mut Vec&lt;Vec&lt;&amp;str&gt;&gt;)\n</code></pre>\n"}], "owner": {"reputation": 19, "user_id": 10112313, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a35f10a2d32b378d0e5409bfe2a8eb4?s=128&d=identicon&r=PG&f=1", "display_name": "Ckiller", "link": "https://stackoverflow.com/users/10112313/ckiller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1533750466, "creation_date": 1533750098, "last_edit_date": 1533750255, "question_id": 51752650, "link": "https://stackoverflow.com/questions/51752650/how-can-string-literals-have-different-lifetimes-if-they-are-alive-for-the-entir", "title": "How can string literals have different lifetimes if they are alive for the entire duration of the program?", "body": "<p>I'm getting an error that \"xo\" and the string literal in the vector of vectors have different lifetimes. I was able to find a workaround by converting the literals to <code>Strings</code> via <code>to_string()</code> but I still would like to understand this error.</p>\n\n<pre><code>fn main() {\n    let mut tic_tac = vec![\n        vec![\"[ ]\", \"[ ]\", \"[ ]\"],\n        vec![\"[ ]\", \"[ ]\", \"[ ]\"],\n        vec![\"[ ]\", \"[ ]\", \"[ ]\"],\n    ];\n\n    let letter = \"[x]\";\n\n    make_move(&amp;letter, 1, &amp;mut tic_tac);\n    make_move(&amp;letter, 4, &amp;mut tic_tac);\n}\n\nfn make_move(xo: &amp;str, position: i32, board: &amp;mut Vec&lt;Vec&lt;&amp;str&gt;&gt;) {\n    if position &lt; 4 &amp;&amp; position &lt;= 1 {\n        match position {\n            1 =&gt; board[0][0] = xo,\n            2 =&gt; board[0][1] = xo,\n            3 =&gt; board[0][2] = xo,\n            _ =&gt; (),\n        }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0623]: lifetime mismatch\n  --&gt; src/main.rs:18:32\n   |\n15 | fn make_move(xo: &amp;str, position: i32, board: &amp;mut Vec&lt;Vec&lt;&amp;str&gt;&gt;) {\n   |                  ----                                     ----\n   |                  |\n   |                  these two types are declared with different lifetimes...\n...\n18 |             1 =&gt; board[0][0] = xo,\n   |                                ^^ ...but data from `xo` flows into `board` here\n</code></pre>\n"}, {"tags": ["windows", "rust", "clion"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1533753489, "post_id": 51752482, "comment_id": 90466919, "body": "Did you install rustup ?"}, {"owner": {"reputation": 1192, "user_id": 664509, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/8dba6ba9791388d4c527a6f7b78a2724?s=128&d=identicon&r=PG&f=1", "display_name": "SomethingsGottaGive", "link": "https://stackoverflow.com/users/664509/somethingsgottagive"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533837096, "post_id": 51752482, "comment_id": 90505046, "body": "I did but I reinstalled clion and the issue seemed to go away."}, {"owner": {"reputation": 125, "user_id": 4470154, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5c2fe12ed8fd5558070717dc5e4500c1?s=128&d=identicon&r=PG&f=1", "display_name": "Amber More", "link": "https://stackoverflow.com/users/4470154/amber-more"}, "edited": false, "score": 0, "creation_date": 1591515657, "post_id": 51752482, "comment_id": 110080393, "body": "Yes, you need to install rustp before CLion installation."}], "answers": [{"tags": [], "owner": {"reputation": 125, "user_id": 4470154, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5c2fe12ed8fd5558070717dc5e4500c1?s=128&d=identicon&r=PG&f=1", "display_name": "Amber More", "link": "https://stackoverflow.com/users/4470154/amber-more"}, "is_accepted": false, "score": 1, "last_activity_date": 1591515435, "creation_date": 1591515435, "answer_id": 62242266, "question_id": 51752482, "link": "https://stackoverflow.com/questions/51752482/whats-the-path-for-the-rust-standard-library-location-for-clion-on-windows/62242266#62242266", "title": "What&#39;s the path for the Rust standard library location for CLion on Windows?", "body": "<p>Put standard library path as \"c:\\Users\\andrew\\.cargo\\registry\".</p>\n"}], "owner": {"reputation": 1192, "user_id": 664509, "user_type": "registered", "accept_rate": 12, "profile_image": "https://www.gravatar.com/avatar/8dba6ba9791388d4c527a6f7b78a2724?s=128&d=identicon&r=PG&f=1", "display_name": "SomethingsGottaGive", "link": "https://stackoverflow.com/users/664509/somethingsgottagive"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 958, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1591515435, "creation_date": 1533749434, "last_edit_date": 1533749770, "question_id": 51752482, "link": "https://stackoverflow.com/questions/51752482/whats-the-path-for-the-rust-standard-library-location-for-clion-on-windows", "title": "What&#39;s the path for the Rust standard library location for CLion on Windows?", "body": "<p>I am getting started with Rust and I am using <a href=\"https://intellij-rust.github.io/\" rel=\"nofollow noreferrer\">the Rust plugin for Clion</a>. When I create a new Rust project, I need to specify the location of the stdlib. For whatever reason, it's not auto populating with the correct path. When I click <code>Download via rustup</code> nothing happens.</p>\n\n<p>What's the path for the Rust standard library?</p>\n\n<p><a href=\"https://i.stack.imgur.com/61vJW.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/61vJW.png\" alt=\"enter image description here\"></a></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 4, "last_activity_date": 1533747549, "last_edit_date": 1533747549, "creation_date": 1533746340, "answer_id": 51751671, "question_id": 51751219, "link": "https://stackoverflow.com/questions/51751219/how-can-i-get-clap-to-wrap-long-help-messages/51751671#51751671", "title": "How can I get clap to wrap long help messages?", "body": "<p>Clap has a <a href=\"https://docs.rs/clap/2.32.0/clap/struct.App.html#method.max_term_width\" rel=\"nofollow noreferrer\">max_term_width</a> that it uses to wrap the text that it outputs. As mentioned in that documentation, it defaults to <code>120</code> characters, which is why you see the text split <em>eventually</em>, but not where you'd hoped.</p>\n\n<p>If you have a certain width that you'd like to set, you can use <a href=\"https://docs.rs/clap/2.32.0/clap/struct.App.html#method.set_term_width\" rel=\"nofollow noreferrer\">set_term_width</a> with a specific value. Alternatively, you can use a crate like <a href=\"https://github.com/eminence/terminal-size\" rel=\"nofollow noreferrer\">terminal_size</a> to get the size of the current terminal, and use that to set the width for <code>clap</code> to use.</p>\n\n<p>As a full example:</p>\n\n<pre><code>extern crate clap;\nextern crate terminal_size;\n\nuse clap::{App, Arg};\nuse terminal_size::{terminal_size, Width};\n\nfn main() {\n    let args = App::new(\"test\")\n    .set_term_width(if let Some((Width(w), _)) = terminal_size() { w as usize } else { 120 })\n    .arg(Arg::with_name(\"scoring_method\")\n      .short(\"s\")\n      .long(\"scoring-method\")\n      .help(\"Very very very very very very long long long long long help help help help help message message message message message message message\"))\n    .get_matches();\n}\n</code></pre>\n"}], "owner": {"reputation": 2479, "user_id": 2370863, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/1A5At.jpg?s=128&g=1", "display_name": "Ian Fiddes", "link": "https://stackoverflow.com/users/2370863/ian-fiddes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 172, "favorite_count": 0, "accepted_answer_id": 51751671, "answer_count": 1, "score": 1, "last_activity_date": 1533747549, "creation_date": 1533744590, "last_edit_date": 1533745771, "question_id": 51751219, "link": "https://stackoverflow.com/questions/51751219/how-can-i-get-clap-to-wrap-long-help-messages", "title": "How can I get clap to wrap long help messages?", "body": "<p>Here is an example:</p>\n\n<pre><code>extern crate clap;\nuse clap::{Arg, App};\n\nfn main() {\nlet args = App::new(\"test\")\n    .arg(Arg::with_name(\"scoring_method\")\n            .short(\"s\")\n            .long(\"scoring-method\")\n            .help(\"Very very very very very very long long long long long help help help help help message message message message message message message\"))\n    .get_matches();\n}\n</code></pre>\n\n<p>Leads to the help text formatting like this: </p>\n\n<p><a href=\"https://i.stack.imgur.com/pCatu.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/pCatu.png\" alt=\"console example\"></a></p>\n\n<p>(pasting in code mode causes Stack Overflow to fix the formatting issue)</p>\n\n<p>The exact string produced is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>'USAGE:\\n    play [FLAGS]\\n\\nFLAGS:\\n    -h, --help              Prints help information\\n    -s, --scoring-method    Very very very very very very long long long long long help help help help help message\\n                            message message message message message message\\n    -V, --version           Prints version information'\n</code></pre>\n"}, {"tags": ["rust", "structopt"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 4, "last_activity_date": 1533747742, "creation_date": 1533747742, "answer_id": 51752028, "question_id": 51750975, "link": "https://stackoverflow.com/questions/51750975/proc-macro-panic-with-structopt-using-required-unless-and-conflicts-with/51752028#51752028", "title": "proc-macro panic with structopt using required_unless and conflicts_with", "body": "<p><code>#[stuff(...),]</code> with that extra <code>,</code> at the end is not a valid attribute syntax. Your code works fine if you fix this typo.</p>\n\n<pre><code>#[structopt(\n    long = \"bar\",\n    required_unless = \"foo\",    // no `)` on this line.\n)]                              // put `)` on this line, no `,` after it\nbar: Option&lt;String&gt;,\n</code></pre>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 243, "favorite_count": 1, "accepted_answer_id": 51752028, "answer_count": 1, "score": 2, "last_activity_date": 1533747742, "creation_date": 1533743788, "last_edit_date": 1533744260, "question_id": 51750975, "link": "https://stackoverflow.com/questions/51750975/proc-macro-panic-with-structopt-using-required-unless-and-conflicts-with", "title": "proc-macro panic with structopt using required_unless and conflicts_with", "body": "<p>I want to have two options that conflict with each other, but also one of them must be required:</p>\n\n<pre><code>#[macro_use]\nextern crate structopt;\n\nuse structopt::StructOpt;\n\n#[derive(StructOpt)]\nstruct Opt {\n    #[structopt(\n        long = \"foo\",\n        required_unless = \"bar\",\n        conflicts_with = \"bar\",\n    )]\n    foo: Option&lt;String&gt;,\n    #[structopt(\n        long = \"bar\",\n        required_unless = \"foo\"),\n    ]\n    bar: Option&lt;String&gt;,\n}\n\nfn main() {\n    let args = Opt::from_args();\n    println!(\"{:?}\", args.foo);\n    println!(\"{:?}\", args.bar);\n}\n</code></pre>\n\n<p>Here is where how the compiler (v1.28.0) complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: proc-macro derive panicked\n --&gt; src/main.rs:6:10\n  |\n6 | #[derive(StructOpt)]\n  |          ^^^^^^^^^\n  |\n  = help: message: invalid structopt syntax: attr\n</code></pre>\n"}, {"tags": ["functional-programming", "rust", "concat"], "answers": [{"comments": [{"owner": {"reputation": 573, "user_id": 4764104, "user_type": "registered", "accept_rate": 67, "profile_image": "https://graph.facebook.com/10205899233387458/picture?type=large", "display_name": "Renato Cassino", "link": "https://stackoverflow.com/users/4764104/renato-cassino"}, "edited": false, "score": 0, "creation_date": 1533737092, "post_id": 51748517, "comment_id": 90457144, "body": "I want to know about immutability adding. I will change the function name. Is a good practice uses mutable variables in rust? I think that &quot;is possible, but isnt good to use&quot;. I&#39;m wrong?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 573, "user_id": 4764104, "user_type": "registered", "accept_rate": 67, "profile_image": "https://graph.facebook.com/10205899233387458/picture?type=large", "display_name": "Renato Cassino", "link": "https://stackoverflow.com/users/4764104/renato-cassino"}, "edited": false, "score": 2, "creation_date": 1533737472, "post_id": 51748517, "comment_id": 90457407, "body": "@RenatoCassino that&#39;s not an easy question to answer. What are your reasons for avoiding mutability in JS? Do you know <i>why</i> mutability causes problems? Rust solves many (but not all) of those problems in different ways."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1533737951, "last_edit_date": 1533737951, "creation_date": 1533736476, "answer_id": 51748517, "question_id": 51748322, "link": "https://stackoverflow.com/questions/51748322/how-to-join-arrays-like-javascripts-destructuring/51748517#51748517", "title": "How to join arrays like JavaScript&#39;s destructuring?", "body": "<blockquote>\n  <p>I want to make a function that receives a Vec and a position to change a number.</p>\n</blockquote>\n\n<p>Rust has indexing syntax, just like JavaScript, so there's really no need for the destructuring.</p>\n\n<pre><code>fn replace_number(mut line: Vec&lt;i32&gt;, point: usize, number: i32) -&gt; Vec&lt;i32&gt; {\n    line[point] = number;\n    line\n}\n</code></pre>\n\n<p>or, more idiomatically:</p>\n\n<pre><code>fn replace_number(line: &amp;mut Vec&lt;i32&gt;, point: usize, number: i32) {\n    line[point] = number\n}\n</code></pre>\n\n<p>Even more idiomatically would be to not have this function, probably, and just write it inline...</p>\n\n<blockquote>\n  <p>I want to know about immutably adding</p>\n</blockquote>\n\n<p>With your original code, there's <strong>zero</strong> concern about anything \"bad\" happening because of mutability:</p>\n\n<pre><code>fn replace_number(line: Vec&lt;i32&gt;, point: i32, number: i32) -&gt; Vec&lt;i32&gt;\n</code></pre>\n\n<p>This function takes ownership of the <code>Vec</code>, so the concept of immutability is rather moot here \u2014 the caller no longer has the <code>Vec</code> to care if it's mutated or not!</p>\n\n<p>If you wanted to share data, you'd use a reference (a <em>slice</em>, specifically) like <code>&amp;[i32]</code>. This is inherently immutable \u2014 you can't change it if you wanted to. You'd have to clone all the children and make the vector mutable:</p>\n\n<pre><code>fn replace_number(line: &amp;[i32], point: usize, number: i32) -&gt; Vec&lt;i32&gt; {\n    let mut line = line.to_owned();\n    line[point] = number;\n    line\n}\n</code></pre>\n\n<p>If you <em>really</em> wanted something like the JS syntax, you can use <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html#tymethod.concat\" rel=\"nofollow noreferrer\"><code>concat</code></a>:</p>\n\n<pre><code>fn replace_number(line: &amp;[i32], point: usize, number: i32) -&gt; Vec&lt;i32&gt; {\n    [&amp;line[..point], &amp;[number], &amp;line[point + 1..]].concat()\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a></li>\n</ul>\n"}], "owner": {"reputation": 573, "user_id": 4764104, "user_type": "registered", "accept_rate": 67, "profile_image": "https://graph.facebook.com/10205899233387458/picture?type=large", "display_name": "Renato Cassino", "link": "https://stackoverflow.com/users/4764104/renato-cassino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "accepted_answer_id": 51748517, "answer_count": 1, "score": 1, "last_activity_date": 1533737951, "creation_date": 1533735893, "last_edit_date": 1533737123, "question_id": 51748322, "link": "https://stackoverflow.com/questions/51748322/how-to-join-arrays-like-javascripts-destructuring", "title": "How to join arrays like JavaScript&#39;s destructuring?", "body": "<p>I want to make a function that receives a <code>Vec</code> and a position to change a number.</p>\n\n<p>In JavaScript, this is really simple:</p>\n\n<pre><code>function replaceNumber(line, position, number) {\n  return [\n    ...line.slice(0, position),\n    number,\n    ...line.slice(position+1, line.length)\n  ]\n}\n</code></pre>\n\n<p>How can I make a similar function in Rust?</p>\n\n<p>I tried this:</p>\n\n<pre><code>fn replace_number(line: Vec&lt;i32&gt;, point: i32, number: i32) -&gt; Vec&lt;i32&gt; {\n    return [\n        &amp;line[0..point as usize],\n        &amp;[number],\n        &amp;line[point as usize+1, point.len()]\n    ].concat();\n}\n</code></pre>\n\n<p>The result is an array of arrays. How can I make a destructuring like the JavaScript example?</p>\n"}, {"tags": ["visual-studio-code", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 21030, "user_id": 15619, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/2f169a510b7cba5a57e86d520b268447?s=128&d=identicon&r=PG", "display_name": "Riduidel", "link": "https://stackoverflow.com/users/15619/riduidel"}, "is_accepted": true, "score": 2, "last_activity_date": 1533725107, "creation_date": 1533725107, "answer_id": 51744721, "question_id": 51744103, "link": "https://stackoverflow.com/questions/51744103/why-cant-cargo-build-compile-structopt-derive-in-vs-code/51744721#51744721", "title": "Why can&#39;t `cargo build` compile structopt-derive in VS Code?", "body": "<p>Seems like it's a bug in RLS : <a href=\"https://github.com/rust-lang-nursery/rls/issues/802\" rel=\"nofollow noreferrer\">Windows: RLS keeping derive plugin DLLs opened prevents <code>cargo build</code> from working #802</a></p>\n\n<blockquote>\n  <p>Whenever the RLS is running for a crate, I can't do cargo build for that crate. It fails with errors like this:</p>\n  \n  <p>[...]</p>\n  \n  <p>Looking in Process Explorer, RLS has the derive plugin DLLs loaded. I assume this is what's causing cargo to fail, since it can't write to those files while they're loaded. Similarly, cargo clean fails:</p>\n  \n  <p>[...]</p>\n  \n  <p>If I close VSCode (and thus RLS), building with cargo build works fine again.</p>\n  \n  <p>I assume this is Windows-specific due to its file exclusivity behavior. I think this started happening with a recent nightly (3/28?). I suppose this could've been caused by some change in cargo or rustc causing it to write to dlls which were already built or something.</p>\n</blockquote>\n\n<p>So solution should be quite simple : update RLS to its latest version and see the bug being fixed !</p>\n\n<p>And to update RLS, it's simply a matter of <code>rustup update</code></p>\n"}], "owner": {"reputation": 21030, "user_id": 15619, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/2f169a510b7cba5a57e86d520b268447?s=128&d=identicon&r=PG", "display_name": "Riduidel", "link": "https://stackoverflow.com/users/15619/riduidel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 280, "favorite_count": 0, "accepted_answer_id": 51744721, "answer_count": 1, "score": 2, "last_activity_date": 1533733355, "creation_date": 1533723186, "last_edit_date": 1533733355, "question_id": 51744103, "link": "https://stackoverflow.com/questions/51744103/why-cant-cargo-build-compile-structopt-derive-in-vs-code", "title": "Why can&#39;t `cargo build` compile structopt-derive in VS Code?", "body": "<p>I'm trying to write a small CLI application using Rust and the excellent structopt crate.</p>\n\n<p>When I'm using Notepad++ (to write code) and Conemu (to run Cargo commands), everything works fine.</p>\n\n<p>However, when I'm using VS Code with <a href=\"https://github.com/rust-lang-nursery/rls-vscode\" rel=\"nofollow noreferrer\">Rust plugin</a> (or Eclipse Corrosion), <code>cargo build</code> command fails with this error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling atty v0.2.10\n   Compiling clap v2.31.2\n   Compiling structopt-derive v0.2.10\nerror: linking with `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.14.26428\\bin\\HostX64\\x64\\link.exe` failed: exit code: 1104\n  |\n  = note: \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\BuildTools\\\\VC\\\\Tools\\\\MSVC\\\\14.14.26428\\\\bin\\\\HostX64\\\\x64\\\\link.exe\" \"/NOLOGO\" \"/NXCOMPAT\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive0.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive1.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive10.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive11.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive12.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive13.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive14.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive15.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive2.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive3.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive4.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive5.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive6.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive7.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive8.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.structopt_derive9.rcgu.o\" \"/OUT:C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.dll\" \"/DEF:C:\\\\Users\\\\NICOLA~1\\\\AppData\\\\Local\\\\Temp\\\\rustc.NMAPUPGalI4H\\\\lib.def\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.crate.metadata.rcgu.o\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.crate.allocator.rcgu.o\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/NATVIS:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\libsyn-e2bf8da738ad52ef.rlib\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\libquote-90431d93ebae45fd.rlib\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\libproc_macro2-f91721dd8e02bb17.rlib\" \"C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\libunicode_xid-4611d062b1d773c0.rlib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"proc_macro-1f431d761952eacf.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"syntax-c4a428491fc49b8f.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"rustc_errors-5b01c9a7974f0222.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"syntax_pos-09170bc016e0b11a.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"rustc_data_structures-f974a5ad0e93670e.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"serialize-2eb0aeb35010f869.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"rustc_cratesio_shim-2e9a42f968785601.dll.lib\" \"/LIBPATH:C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"std-81327c94ecbc69b1.dll.lib\" \"C:\\\\Users\\\\nicolas-delsaux\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcompiler_builtins-e8d853735a158029.rlib\" \"opengl32.lib\" \"kernel32.lib\" \"setupapi.lib\" \"msimg32.lib\" \"credui.lib\" \"winspool.lib\" \"user32.lib\" \"gdi32.lib\" \"secur32.lib\" \"dbghelp.lib\" \"advapi32.lib\" \"advapi32.lib\" \"ws2_32.lib\" \"userenv.lib\" \"shell32.lib\" \"msvcrt.lib\" \"/DLL\" \"/IMPLIB:C:\\\\Users\\\\nicolas-delsaux\\\\Documents\\\\open-source\\\\rrss2imap\\\\target\\\\debug\\\\deps\\\\structopt_derive-406f571196e63046.dll.lib\"\n  = note: LINK : fatal error LNK1104: impossible d'ouvrir le fichier 'C:\\Users\\nicolas-delsaux\\Documents\\open-source\\rrss2imap\\target\\debug\\deps\\structopt_derive-406f571196e63046.dll'\n\n\nerror: aborting due to previous error\n\nerror: Could not compile `structopt-derive`.\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</code></pre>\n\n<p>It seems like some process has locked the output file, but LockHunter (which I use to detect that kind of locks) doesn't detect any...</p>\n\n<p>What is the problem? What can I do - beside coding using Notepad++ - to be able to run cargo commands in VS Code?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1533688466, "post_id": 51737045, "comment_id": 90434859, "body": "There is an explanation of this on the link you provided - quite literally just after its first use."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1533688667, "post_id": 51737045, "comment_id": 90434896, "body": "@SimonWhitehead Not really.  It explains what this one, specific use of <code>::</code> is for, but doesn&#39;t explain the overall difference between <code>::</code> and <code>.</code>, or why both exist."}], "answers": [{"comments": [{"owner": {"reputation": 1441, "user_id": 6713596, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f07ad4b23e67e07fd8a00a0dd164b5f2?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/6713596/dan"}, "edited": false, "score": 0, "creation_date": 1533692030, "post_id": 51737118, "comment_id": 90435451, "body": "Can I assume that with <code>String::new()</code>, all I am doing is accessing a member of that namespace. In the case of <code>io::stdin().read_line(&amp;mut guess)</code>, <code>stdin()</code> is a member of <code>io</code>, but the returned value isn&#39;t part of any <code>namespace</code>, and is just an instance (doc is saying <code>pub struct Stdin</code>)? So it&#39;s a struct? Which is like an object?"}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1533711341, "post_id": 51737118, "comment_id": 90440628, "body": "String is a struct, new is a static method (no self as first argument), so you access it by <code>::</code>. io is a namespace where you access the inner &quot;things&quot; (structs, traits, ...) with <code>::</code>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1441, "user_id": 6713596, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f07ad4b23e67e07fd8a00a0dd164b5f2?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/6713596/dan"}, "edited": false, "score": 2, "creation_date": 1533734366, "post_id": 51737118, "comment_id": 90455279, "body": "@Dan: I&#39;m not sure what you&#39;re asking.  <code>String::new()</code> is calling a function that is defined by the <code>String</code> type.  It&#39;s no different to calling any other function.  <code>io::stdin()</code> returns a value, so <code>.read_line</code> looks up and calls the method <code>read_line</code> defined by the <code>Stdin</code> type.  The only way in which this is different to calling a &quot;bare&quot; function is that the thing on the left hand side of the <code>.</code> (the <code>Stdin</code>) is passed as the <code>self</code> argument to <code>read_line</code>.  And &quot;object&quot; is so <i>hideously</i> overloaded that I can&#39;t really answer that.  It depends on what you mean by &quot;object&quot;."}, {"owner": {"reputation": 1441, "user_id": 6713596, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f07ad4b23e67e07fd8a00a0dd164b5f2?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/6713596/dan"}, "edited": false, "score": 0, "creation_date": 1533753841, "post_id": 51737118, "comment_id": 90467095, "body": "This might be the root of my confusion. What makes something a type or a module? For <code>pub fn stdin() -&gt; Stdin</code>, the doc states that a <code>new handle</code> is constructed, with <code>Stdin</code> being <code>Struct std::io::Stdin</code>. They don&#39;t seem to be called a type or a module."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1441, "user_id": 6713596, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f07ad4b23e67e07fd8a00a0dd164b5f2?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/6713596/dan"}, "edited": false, "score": 1, "creation_date": 1533895283, "post_id": 51737118, "comment_id": 90524953, "body": "@Dan: That&#39;s a bit like asking &quot;what makes something a struct or a function?&quot;; they are what they are because they&#39;re defined that way.  I don&#39;t know what else to tell you.  I get the feeling that there&#39;s something fundamental here you don&#39;t understand, but I&#39;m not sure what it is.  In the case of <code>stdin</code>, it doesn&#39;t specify whether the result is a type or module because it <i>must</i> be a type, because you can&#39;t return a module.  Modules are purely for organising things."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 15, "last_activity_date": 1533688413, "creation_date": 1533688413, "answer_id": 51737118, "question_id": 51737045, "link": "https://stackoverflow.com/questions/51737045/what-is-the-difference-between-and-in-rust/51737118#51737118", "title": "What is the difference between :: and . in Rust?", "body": "<p><code>.</code> is used when you have a value on the left-hand-side.  <code>::</code> is used when you have a type or module.</p>\n\n<p>Or: <code>.</code> is for value member access, <code>::</code> is for namespace member access.</p>\n"}, {"tags": [], "owner": {"reputation": 1441, "user_id": 6713596, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f07ad4b23e67e07fd8a00a0dd164b5f2?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/6713596/dan"}, "is_accepted": false, "score": 2, "last_activity_date": 1536804246, "last_edit_date": 1536804246, "creation_date": 1536800056, "answer_id": 52305226, "question_id": 51737045, "link": "https://stackoverflow.com/questions/51737045/what-is-the-difference-between-and-in-rust/52305226#52305226", "title": "What is the difference between :: and . in Rust?", "body": "<p>A useful distinction I found useful between <code>::</code> and <code>.</code> is shown in <a href=\"https://doc.rust-lang.org/book/2018-edition/ch05-03-method-syntax.html\" rel=\"nofollow noreferrer\">Method Syntax</a>. </p>\n\n<p>When calling an instance of a <code>fn</code> in a <code>struct</code>, <code>.</code> is used:</p>\n\n<pre><code>struct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        rect1.area()\n    );\n}\n</code></pre>\n\n<p>Associated functions on the other hand, are functions that do not take <code>self</code> as a param. They do not have an instance of the <code>struct</code>:</p>\n\n<pre><code>impl Rectangle {\n    // Associated Function\n    fn square(size: u32) -&gt; Rectangle {\n        Rectangle {\n            width: size,\n            height: size,\n        }\n    }\n}\n</code></pre>\n\n<p><code>::</code> is used instead to call these functions.</p>\n\n<pre><code>fn main() {\n    let sq = Rectangle::square(3);\n}\n</code></pre>\n\n<p>Whereas <code>.</code> is used to return a method (a function of an instance of a struct).</p>\n"}], "owner": {"reputation": 1441, "user_id": 6713596, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f07ad4b23e67e07fd8a00a0dd164b5f2?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/6713596/dan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 912, "favorite_count": 1, "accepted_answer_id": 51737118, "answer_count": 2, "score": 8, "last_activity_date": 1592239667, "creation_date": 1533687679, "last_edit_date": 1592239667, "question_id": 51737045, "link": "https://stackoverflow.com/questions/51737045/what-is-the-difference-between-and-in-rust", "title": "What is the difference between :: and . in Rust?", "body": "<p>I am confused by the difference between <code>::</code> and <code>.</code>. They look the same except that their syntax are different.</p>\n\n<blockquote>\n<pre><code>let mut guess = String::new();\n\nio::stdin().read_line(&amp;mut guess)\n    .expect(\"Failed to read line\");\n</code></pre>\n</blockquote>\n\n<p><a href=\"https://doc.rust-lang.org/book/2018-edition/ch02-00-guessing-game-tutorial.html\" rel=\"nofollow noreferrer\">\"Programming a Guessing Game\" from <em>The Rust Programming Language</em></a></p>\n\n<p>In the above case, I access the function <code>new()</code> in <code>String</code>. What is the difference between <code>String::new()</code> and <code>String.new()</code>? Is <code>.</code> only for methods?</p>\n"}, {"tags": ["rust", "ownership"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533684115, "post_id": 51736646, "comment_id": 90433982, "body": "integer implement copy so it&#39;s a copy."}], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 3, "last_activity_date": 1533684301, "creation_date": 1533684301, "answer_id": 51736724, "question_id": 51736646, "link": "https://stackoverflow.com/questions/51736646/why-doesnt-rusts-index-syntax-for-vectors-take-ownership-of-the-element/51736724#51736724", "title": "Why doesnt Rust&#39;s index syntax for vectors take ownership of the element?", "body": "<p>Lots of primitive types implement <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\">the <code>Copy</code> trait</a> - this means that they are copied around when you bind them to other variables. There is no ownership issue when values are copied around.</p>\n\n<p>This is just for demonstration purposes and isn't very practical ... but if you change your example to use a simple dumb struct, you'll see it not longer works (as it doesn't implement <code>Copy</code>):</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\nstruct S;\n\nfn main() {\n    let number_list = vec![S, S, S, S];\n\n    let mut largest = number_list[0];\n\n    for number in number_list {\n        if number == largest {\n            largest = number;\n        }\n    }\n    println!(\"The largest number is {:?}\", largest);\n}\n</code></pre>\n\n<p>However if you have it implement <code>Copy</code> (and <code>Clone</code>), it'll run fine:</p>\n\n<pre><code>#[derive(Clone, Copy, Debug, PartialEq)]\nstruct S;\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=12d1227b19f5035893c903389dc1aede&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">You can play with it in the Playground here if you want</a></p>\n"}], "owner": {"reputation": 13, "user_id": 7696969, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-Xfi4syBeLdU/AAAAAAAAAAI/AAAAAAAAAA4/_pj_fXcWFmM/photo.jpg?sz=128", "display_name": "\u949f\u6cfd\u803f", "link": "https://stackoverflow.com/users/7696969/%e9%92%9f%e6%b3%bd%e8%80%bf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 737, "favorite_count": 0, "closed_date": 1533686170, "accepted_answer_id": 51736724, "answer_count": 1, "score": 1, "last_activity_date": 1533686249, "creation_date": 1533683598, "last_edit_date": 1533686249, "question_id": 51736646, "link": "https://stackoverflow.com/questions/51736646/why-doesnt-rusts-index-syntax-for-vectors-take-ownership-of-the-element", "closed_reason": "Duplicate", "title": "Why doesnt Rust&#39;s index syntax for vectors take ownership of the element?", "body": "<p>When I read the <a href=\"https://doc.rust-lang.org/book/2018-edition/ch10-00-generics.html\" rel=\"nofollow noreferrer\">Rust documentation on generics</a>, I found a weird question about ownership. Looking at the following snippet:</p>\n\n<pre><code>fn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let mut largest = number_list[0];\n\n    for number in number_list {\n        if number &gt; largest {\n            largest = number;\n        }\n    }\n    println!(\"The largest number is {}\", largest);\n}\n</code></pre>\n\n<p>Why doesn't <code>largest</code> take ownership of the first element of vector? I found that in the previous <a href=\"https://doc.rust-lang.org/book/2018-edition/ch08-01-vectors.html\" rel=\"nofollow noreferrer\">chapter about vectors</a>, using the borrow syntax <code>let largest = &amp;v[0]</code> would take ownership of the element. Why does this code pass the compiler?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 1, "last_activity_date": 1533686533, "last_edit_date": 1533686533, "creation_date": 1533683816, "answer_id": 51736670, "question_id": 51736489, "link": "https://stackoverflow.com/questions/51736489/why-are-data-being-mutably-borrowed-in-this-iteration-over-the-results-of-a-para/51736670#51736670", "title": "Why are data being mutably borrowed in this iteration over the results of a parallel iterator?", "body": "<p>It is because <code>map</code> doesn't actually do anything.. it creates a new iterator that is yet to be iterated.</p>\n\n<p>Once we hit the <code>matrix.add_triplet(j, j as usize, 1);</code> code, that iterator is being iterated over but ... its a <code>ParallelIterator</code> ... and therefore the Rust compiler is now concerned about data races.</p>\n\n<p>You've got two options I can see.</p>\n\n<p>First, you can force evaluation of the iterator straight away..:</p>\n\n<pre><code>let results: Vec&lt;_&gt; = recs.par_iter().map(eval).collect();\n// ...\nresults.iter().enumerate() // ...\n</code></pre>\n\n<p>Or you can wrap access to the matrix in a <code>Mutex</code> (or another sync mechanism):</p>\n\n<pre><code>use std::sync::Mutex;\n// ...\nlet mut matrix = Mutex::new(TriMat::new((4, 2)));\n// ...\nmatrix.lock().unwrap().add_triplet(j, j as usize, 1);\n</code></pre>\n\n<p>What is best for you I'm not entirely sure given the small sample you've shared with us, but hopefully that gives you an idea of what is happening.</p>\n"}], "owner": {"reputation": 2479, "user_id": 2370863, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/1A5At.jpg?s=128&g=1", "display_name": "Ian Fiddes", "link": "https://stackoverflow.com/users/2370863/ian-fiddes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 51, "favorite_count": 0, "accepted_answer_id": 51736670, "answer_count": 1, "score": 0, "last_activity_date": 1533686533, "creation_date": 1533682499, "last_edit_date": 1533686486, "question_id": 51736489, "link": "https://stackoverflow.com/questions/51736489/why-are-data-being-mutably-borrowed-in-this-iteration-over-the-results-of-a-para", "title": "Why are data being mutably borrowed in this iteration over the results of a parallel iterator?", "body": "<p>I have the toy example below, where I am iterating over a simple vector of structs and doing a parallel operation on them. After the parallel operation, I want to load all of the results into a sparse matrix. </p>\n\n<pre><code>extern crate rayon;\nextern crate sprs;\n\nuse rayon::prelude::*;\nuse sprs::TriMat;\n\npub struct Data {\n    i: usize,\n}\n\nfn eval&lt;'a&gt;(d: &amp;Data) -&gt; usize {\n    d.i * 2\n}\n\nfn main() {\n    let data = vec![1, 2, 3, 4];\n    let mut recs = Vec::new();\n    for x in data {\n        let s = Data { i: x };\n        recs.push(s);\n    }\n    let results = recs.par_iter().map(eval);\n    let mut matrix = TriMat::new((4, 2));\n    results.enumerate().for_each(|(j, scores)| {\n        matrix.add_triplet(j, j as usize, 1);\n    });\n}\n</code></pre>\n\n<p>The code leads to the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n  --&gt; src/main.rs:26:9\n   |\n26 |         matrix.add_triplet(j, j as usize, 1);\n   |         ^^^^^^\n   |\nhelp: consider changing this closure to take self by mutable reference\n  --&gt; src/main.rs:25:34\n   |\n25 |       results.enumerate().for_each(|(j, scores)| {\n   |  __________________________________^\n26 | |         matrix.add_triplet(j, j as usize, 1);\n27 | |     });\n   | |_____^\n</code></pre>\n\n<p>I don't understand how the data are being borrowed mutably.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1533665027, "post_id": 51732596, "comment_id": 90426449, "body": "<code>some_buffer[10..20].iter_mut().for_each(|x| *x = 0xFF)</code>"}], "answers": [{"comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 4, "creation_date": 1533714383, "post_id": 51732799, "comment_id": 90442435, "body": "Maybe worth to note that for large ranges (&gt;256 items, apparently) the compiler actually emits a call to <code>memset</code>."}, {"owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "edited": false, "score": 0, "creation_date": 1533738647, "post_id": 51732799, "comment_id": 90458287, "body": "I could not imagine the compiler was going to switch to using memset. Amazing! Thank you very much."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1533734729, "last_edit_date": 1533734729, "creation_date": 1533664659, "answer_id": 51732799, "question_id": 51732596, "link": "https://stackoverflow.com/questions/51732596/what-is-the-equivalent-of-a-safe-memset-for-slices/51732799#51732799", "title": "What is the equivalent of a safe memset for slices?", "body": "<p>You aren't the only one. A feature request / RFC exists for the same thing:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/issues/2067\" rel=\"noreferrer\">Safe memset for slices #2067</a></li>\n</ul>\n\n<p>However, you are putting the cart before the horse. Do you <em>really</em> care that it calls <code>memset</code>? I would guess not, just that it's efficient. A big draw of Rust is that the compiler can \"throw away\" many abstractions at build time. For example, why call a function when some CPU instructions will do the same thing?</p>\n\n<pre><code>pub fn thing(buffer: &amp;mut [u8]) {\n    for i in &amp;mut buffer[10..20] { *i = 42 }\n}\n</code></pre>\n\n<pre><code>playground::thing:\n    pushq   %rax\n    cmpq    $19, %rsi\n    jbe .LBB0_1\n    movabsq $3038287259199220266, %rax\n    movq    %rax, 10(%rdi)\n    movw    $10794, 18(%rdi)\n    popq    %rax\n    retq\n\n.LBB0_1:\n    movl    $20, %edi\n    callq   core::slice::slice_index_len_fail@PLT\n    ud2\n</code></pre>\n\n<hr>\n\n<pre><code>pub fn thing(buffer: &amp;mut [u8]) {\n    for i in &amp;mut buffer[10..200] { *i = 99 }\n}\n</code></pre>\n\n<pre><code>.LCPI0_0:\n    .zero   16,99\n\nplayground::thing:\n    pushq   %rax\n    cmpq    $199, %rsi\n    jbe .LBB0_1\n    movaps  .LCPI0_0(%rip), %xmm0\n    movups  %xmm0, 184(%rdi)\n    movups  %xmm0, 170(%rdi)\n    movups  %xmm0, 154(%rdi)\n    movups  %xmm0, 138(%rdi)\n    movups  %xmm0, 122(%rdi)\n    movups  %xmm0, 106(%rdi)\n    movups  %xmm0, 90(%rdi)\n    movups  %xmm0, 74(%rdi)\n    movups  %xmm0, 58(%rdi)\n    movups  %xmm0, 42(%rdi)\n    movups  %xmm0, 26(%rdi)\n    movups  %xmm0, 10(%rdi)\n    popq    %rax\n    retq\n\n.LBB0_1:\n    movl    $200, %edi\n    callq   core::slice::slice_index_len_fail@PLT\n    ud2\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/51732596/what-is-the-equivalent-of-a-safe-memset-for-slices/51732799?noredirect=1#comment90442435_51732799\">kazemakase points out</a>, when the set region becomes \"big enough\", the optimizer switches to using <code>memset</code> instead of inlining the instructions:</p>\n\n<pre><code>pub fn thing(buffer: &amp;mut [u8]) {\n    for i in &amp;mut buffer[11..499] { *i = 240 }\n}\n</code></pre>\n\n<pre><code>playground::thing:\n    pushq   %rax\n    cmpq    $498, %rsi\n    jbe .LBB0_1\n    addq    $11, %rdi\n    movl    $240, %esi\n    movl    $488, %edx\n    callq   memset@PLT\n    popq    %rax\n    retq\n\n.LBB0_1:\n    movl    $499, %edi\n    callq   core::slice::slice_index_len_fail@PLT\n    ud2\n</code></pre>\n\n<p>You can wrap this function in an extension trait if you'd like:</p>\n\n<pre><code>trait FillExt&lt;T&gt; {\n    fn fill(&amp;mut self, v: T);\n}\n\nimpl FillExt&lt;u8&gt; for [u8] {\n    fn fill(&amp;mut self, v: u8) {\n        for i in self {\n            *i = v\n        }\n    }\n}\n\npub fn thing(buffer: &amp;mut [u8], val: u8) {\n    buffer[10..20].fill(val)\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29530011/155423\">Creating a vector of zeros for a specific size</a></li>\n<li><a href=\"https://stackoverflow.com/q/28678615/155423\">Efficiently insert or replace multiple elements in the middle or at the beginning of a Vec?</a></li>\n</ul>\n"}], "owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3954, "favorite_count": 0, "accepted_answer_id": 51732799, "answer_count": 1, "score": 9, "last_activity_date": 1533734729, "creation_date": 1533663904, "last_edit_date": 1533664029, "question_id": 51732596, "link": "https://stackoverflow.com/questions/51732596/what-is-the-equivalent-of-a-safe-memset-for-slices", "title": "What is the equivalent of a safe memset for slices?", "body": "<p>In many cases, I need to clear areas of buffers or set a slice to certain value. What is the native recommended way of doing this?</p>\n\n<p>This is invalid Rust, but I would like to do something similar to this:</p>\n\n<pre><code>let mut some_buffer = vec![0u8; 100];\nbuffer[10..20].set(0xFF)\n</code></pre>\n\n<p>I could use a for loop but I have the feeling I am missing something given that I am new to Rust.</p>\n\n<p>In C++, I would do something like:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>std::array&lt;int,6&gt; foobar;\nfoobar.fill(5);\n</code></pre>\n\n<p>In Python, it would be similar:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>tmp = np.zeros(10)\ntmp[3:6]=2\n</code></pre>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533658949, "post_id": 51730066, "comment_id": 90423509, "body": "What behavior should happen if the second future is polled before the first stream finishes?"}, {"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1533659227, "post_id": 51730066, "comment_id": 90423670, "body": "I would try to <a href=\"https://docs.rs/futures/0.1.23/futures/stream/trait.Stream.html#method.map\" rel=\"nofollow noreferrer\">Stream.map()</a> the body. The buffer will only be filled when the stream is consumed, but if you want to send the stream quickly that&#39;s what you need to do anyway."}, {"owner": {"reputation": 68198, "user_id": 98038, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/716b5b6ad050ab528046c96e324bd0cd?s=128&d=identicon&r=PG", "display_name": "molf", "link": "https://stackoverflow.com/users/98038/molf"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533661212, "post_id": 51730066, "comment_id": 90424700, "body": "@Shepmaster Then the future should not yet be ready; it should be completed only once the entire stream was read or passed though."}, {"owner": {"reputation": 68198, "user_id": 98038, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/716b5b6ad050ab528046c96e324bd0cd?s=128&d=identicon&r=PG", "display_name": "molf", "link": "https://stackoverflow.com/users/98038/molf"}, "reply_to_user": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1533661248, "post_id": 51730066, "comment_id": 90424714, "body": "@JanHudec How can I then return a future that completes once the stream is finished while at the same time returning said stream back to hyper? It seems al related methods consume the stream..."}, {"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1533662655, "post_id": 51730066, "comment_id": 90425357, "body": "@molf, that&#39;s what I am not sure. I think you need one or the other side to do manage the pulling."}], "answers": [{"tags": [], "owner": {"reputation": 68198, "user_id": 98038, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/716b5b6ad050ab528046c96e324bd0cd?s=128&d=identicon&r=PG", "display_name": "molf", "link": "https://stackoverflow.com/users/98038/molf"}, "is_accepted": true, "score": 4, "last_activity_date": 1533727283, "creation_date": 1533727283, "answer_id": 51745431, "question_id": 51730066, "link": "https://stackoverflow.com/questions/51730066/how-to-copy-data-from-a-stream-while-also-forwarding-a-stream/51745431#51745431", "title": "How to copy data from a stream while also forwarding a stream", "body": "<p>What I ended up doing was implement a new type of stream that does what I need. This appeared to be necessary because <code>hyper::Body</code> does not implement <code>Sink</code> nor does <code>hyper::Chunk</code> implement <code>Clone</code> (which is required for <code>Sink.fanout()</code>), so I cannot use any of the existing combinators.</p>\n\n<p>First a struct that contains all details that we need and methods to append a new chunk, as well as notify that the buffer is completed.</p>\n\n<pre><code>struct BodyClone&lt;T&gt; {\n    body: T,\n    buffer: Option&lt;Vec&lt;u8&gt;&gt;,\n    sender: Option&lt;futures::sync::oneshot::Sender&lt;Vec&lt;u8&gt;&gt;&gt;,\n}\n\nimpl BodyClone&lt;hyper::Body&gt; {\n    fn flush(&amp;mut self) {\n        if let (Some(buffer), Some(sender)) = (self.buffer.take(), self.sender.take()) {\n            if sender.send(buffer).is_err() {}\n        }\n    }\n\n    fn push(&amp;mut self, chunk: &amp;hyper::Chunk) {\n        use hyper::body::Payload;\n\n        let length = if let Some(buffer) = self.buffer.as_mut() {\n            buffer.extend_from_slice(chunk);\n            buffer.len() as u64\n        } else {\n            0\n        };\n\n        if let Some(content_length) = self.body.content_length() {\n            if length &gt;= content_length {\n                self.flush();\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Then I implemented the <code>Stream</code> trait for this struct.</p>\n\n<pre><code>impl Stream for BodyClone&lt;hyper::Body&gt; {\n    type Item = hyper::Chunk;\n    type Error = hyper::Error;\n\n    fn poll(&amp;mut self) -&gt; futures::Poll&lt;Option&lt;Self::Item&gt;, Self::Error&gt; {\n        match self.body.poll() {\n            Ok(Async::Ready(Some(chunk))) =&gt; {\n                self.push(&amp;chunk);\n                Ok(Async::Ready(Some(chunk)))\n            }\n            Ok(Async::Ready(None)) =&gt; {\n                self.flush();\n                Ok(Async::Ready(None))\n            }\n            other =&gt; other,\n        }\n    }\n}\n</code></pre>\n\n<p>Finally I could define an extension method on <code>hyper::Body</code>:</p>\n\n<pre><code>pub type BufferFuture = Box&lt;Future&lt;Item = Vec&lt;u8&gt;, Error = ()&gt; + Send&gt;;\n\ntrait CloneBody {\n    fn clone_body(self) -&gt; (hyper::Body, BufferFuture);\n}\n\nimpl CloneBody for hyper::Body {\n    fn clone_body(self) -&gt; (hyper::Body, BufferFuture) {\n        let (sender, receiver) = futures::sync::oneshot::channel();\n\n        let cloning_stream = BodyClone {\n            body: self,\n            buffer: Some(Vec::new()),\n            sender: Some(sender),\n        };\n\n        (\n            hyper::Body::wrap_stream(cloning_stream),\n            Box::new(receiver.map_err(|_| ())),\n        )\n    }\n}\n</code></pre>\n\n<p>This can be used as follows:</p>\n\n<pre><code>let (body: hyper::Body, buffer: BufferFuture) = body.clone_body();\n</code></pre>\n"}], "owner": {"reputation": 68198, "user_id": 98038, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/716b5b6ad050ab528046c96e324bd0cd?s=128&d=identicon&r=PG", "display_name": "molf", "link": "https://stackoverflow.com/users/98038/molf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 595, "favorite_count": 1, "accepted_answer_id": 51745431, "answer_count": 1, "score": 5, "last_activity_date": 1573063829, "creation_date": 1533654504, "question_id": 51730066, "link": "https://stackoverflow.com/questions/51730066/how-to-copy-data-from-a-stream-while-also-forwarding-a-stream", "title": "How to copy data from a stream while also forwarding a stream", "body": "<p>I am using <a href=\"https://github.com/hyperium/hyper\" rel=\"noreferrer\">hyper</a> 0.12 to build a proxy service. When receiving a response body from the upstream server I want to forward it back to the client ASAP, <strong>and</strong> save the contents in a buffer for later processing.</p>\n\n<p>So I need a function that:</p>\n\n<ul>\n<li>takes a <a href=\"https://docs.rs/futures/0.1.23/futures/stream/trait.Stream.html\" rel=\"noreferrer\"><code>Stream</code></a> (a <a href=\"https://docs.rs/hyper/0.12.7/hyper/struct.Body.html\" rel=\"noreferrer\"><code>hyper::Body</code></a>, to be precise)</li>\n<li>returns a <code>Stream</code> that is functionally identical to the input stream</li>\n<li><strong>also</strong> returns some sort of <code>Future&lt;Item = Vec&lt;u8&gt;, Error = ...&gt;</code> that is resolved with the buffered contents of the input stream, when the output stream is completely consumed</li>\n</ul>\n\n<p>I can't for the life of me figure out how to do this.</p>\n\n<p>I guess the function I'm looking for will look something like this:</p>\n\n<pre><code>type BufferFuture = Box&lt;Future&lt;Item = Vec&lt;u8&gt;, Error = ()&gt;&gt;;\npub fn copy_body(body: hyper::Body) -&gt; (hyper::Body, BufferFuture) {\n    let body2 = ... // ???\n    let buffer = body.fold(Vec::&lt;u8&gt;::new(), |mut buf, chunk| {\n        buf.extend_from_slice(&amp;chunk);\n        // ...somehow send this chunk to body2 also?\n    });\n    (body2, buffer);\n}\n</code></pre>\n\n<p>Below is what I have tried, and it works until <code>send_data()</code> fails (obviously).</p>\n\n<pre><code>type BufferFuture = Box&lt;Future&lt;Item = Vec&lt;u8&gt;, Error = ()&gt;&gt;;\npub fn copy_body(body: hyper::Body) -&gt; (hyper::Body, BufferFuture) {\n    let (mut sender, body2) = hyper::Body::channel();\n    let consume =\n        body.map_err(|_| ()).fold(Vec::&lt;u8&gt;::new(), move |mut buf, chunk| {\n            buf.extend_from_slice(&amp;chunk);\n\n            // What to do if this fails?\n            if sender.send_data(chunk).is_err() {}\n            Box::new(future::ok(buf))\n        });\n\n    (body2, Box::new(consume));\n}\n</code></pre>\n\n<p>However, something tells me I am on the wrong track. </p>\n\n<p>I have found <a href=\"https://docs.rs/futures/0.1.23/futures/sink/trait.Sink.html#method.fanout\" rel=\"noreferrer\"><code>Sink.fanout()</code></a> which seems like it is what I want, but I do not have a <code>Sink</code>, and I don't know how to construct one. <code>hyper::Body</code> implements <code>Stream</code> but not <code>Sink</code>.</p>\n"}, {"tags": ["rust", "rust-cargo", "rustdoc"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533652828, "post_id": 51729374, "comment_id": 90419658, "body": "<code>--all</code> is unneeded unless you have a workspace"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1533653114, "creation_date": 1533653114, "answer_id": 51729590, "question_id": 51729374, "link": "https://stackoverflow.com/questions/51729374/how-to-generate-rustdoc-documentation-for-the-build-dependencies-in-cargo-toml/51729590#51729590", "title": "How to generate rustdoc documentation for the [build-dependencies] in Cargo.toml?", "body": "<p>You cannot:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/cargo/issues/3475\" rel=\"nofollow noreferrer\">Optionally document dev-dependencies (3475)</a></li>\n</ul>\n\n<p>In the meantime, move it temporarily to <code>[dependencies]</code> to generate the docs or make a new project just for docs.</p>\n"}], "owner": {"reputation": 11, "user_id": 6526445, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4bf88974dd658bcb75ba634428bb241b?s=128&d=identicon&r=PG&f=1", "display_name": "Peter Reijnders", "link": "https://stackoverflow.com/users/6526445/peter-reijnders"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 403, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1533653114, "creation_date": 1533652454, "last_edit_date": 1533652766, "question_id": 51729374, "link": "https://stackoverflow.com/questions/51729374/how-to-generate-rustdoc-documentation-for-the-build-dependencies-in-cargo-toml", "title": "How to generate rustdoc documentation for the [build-dependencies] in Cargo.toml?", "body": "<p>I am working on a small project that uses a build.rs file intensively. It seems that <code>cargo doc --all</code> generates the documentation for the <code>[dependencies]</code> but not for the <code>[build-dependencies]</code> in Cargo.toml.</p>\n\n<p>How can I generate the offline documentation for the build-dependency crates?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533643651, "post_id": 51722364, "comment_id": 90413017, "body": "Does the <code>lib.rs</code> actually need to have a <code>main()</code> function too?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533643715, "post_id": 51722364, "comment_id": 90413056, "body": "So can&#39;t you define a <code>mod main;</code> in <code>lib.rs</code> and make the <code>main</code> function public so you can import it? This seems to work for me, but I didn&#39;t try with a wasm project."}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533645849, "post_id": 51722364, "comment_id": 90414481, "body": "@PeterHall No, this does not work. The pathes differs between library and binary because the root module differs. Also, crate attributes doesn&#39;t work as expected. I already tried this solution before. Thanks anyway!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533670737, "post_id": 51722364, "comment_id": 90429224, "body": "I don&#39;t understand what you are trying to accomplish. If you are targeting WASM, you don&#39;t want a main at all. Under what circumstances would you want to have a <code>main</code>?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1533670852, "post_id": 51722364, "comment_id": 90429282, "body": "Support fur multiple platforms"}], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 397, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1533630967, "creation_date": 1533630967, "question_id": 51722364, "link": "https://stackoverflow.com/questions/51722364/is-using-main-rs-as-lib-entry-point-unidiomatic", "title": "Is using main.rs as lib entry point unidiomatic?", "body": "<p>I'm currently experimenting with wasm, which has to be compiled as cdylib. I don't want to maintain two entry files for the bin target and for the lib target, so I added these lines to my <em>Cargo.toml</em>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[lib]\nname = \"sandbox\"\npath = \"src/main.rs\"\ncrate-type = [\"cdylib\"]\n</code></pre>\n\n<p>My <code>fn main()</code> has now this attribute:</p>\n\n<pre><code>#[cfg_attr(target_arch = \"wasm32\", wasm_bindgen)]\n</code></pre>\n\n<p>Everything works as expected, but cargo warns me about this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: file found to be present in multiple build targets\n</code></pre>\n\n<p>Can this warning safely be ignored? Why? </p>\n\n<p>If yes, is it possible to suppress it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1533630431, "post_id": 51720573, "comment_id": 90404742, "body": "I don&#39;t get your question :( There is <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_at\" rel=\"nofollow noreferrer\">split_at</a> which you can use to split your buffer into two seperate slices. Is that, what you are looking for? Can you please else clarify your question (in regards in terms, because you use buffer not consistently)? :)"}], "answers": [{"comments": [{"owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533652771, "post_id": 51720817, "comment_id": 90419614, "body": "yes, I am aware. The header indicates the number of bytes... for the sake of improving the answer, maybe it makes sense to add a fill... but it seems that there is no slice.fill yet"}], "tags": [], "owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "is_accepted": true, "score": 2, "last_activity_date": 1533671047, "last_edit_date": 1533671047, "creation_date": 1533625675, "answer_id": 51720817, "question_id": 51720573, "link": "https://stackoverflow.com/questions/51720573/what-is-an-elegant-way-to-deal-with-remainders-when-splitting-a-vector-into-chun/51720817#51720817", "title": "What is an elegant way to deal with remainders when splitting a vector into chunks?", "body": "<p>I think this is the easiest, cleanest answer:</p>\n\n<pre><code>let mut buffer = vec![0u8; 10];\n\nfor chunk in in_data.chunks(7) {\n    buffer[3..3 + chunk.len()].copy_from_slice(chunk);\n    // Do something with each packet.. send to device, etc.\n}\n</code></pre>\n"}], "owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "accepted_answer_id": 51720817, "answer_count": 1, "score": 3, "last_activity_date": 1533671047, "creation_date": 1533624807, "last_edit_date": 1533670999, "question_id": 51720573, "link": "https://stackoverflow.com/questions/51720573/what-is-an-elegant-way-to-deal-with-remainders-when-splitting-a-vector-into-chun", "title": "What is an elegant way to deal with remainders when splitting a vector into chunks?", "body": "<p>I have a buffer of 10 bytes:</p>\n\n<ul>\n<li>header: 3 bytes</li>\n<li>payload: 7 bytes</li>\n</ul>\n\n<p>I have a larger payload (<code>in_data: Vec&lt;u8&gt;</code>) that I need to split into chunks:</p>\n\n<pre><code>let mut buffer = vec![0u8; 10];\n\nfor chunk in in_data.chunks(7) {\n    buffer[3..].copy_from_slice(chunk);\n    // Do something with each packet.. send to device, etc.\n}\n</code></pre>\n\n<p>This is good if all chunks are size 7, but when there is a remainder, <code>copy_from_slice</code> fails because the chunk is smaller than the buffer slice.</p>\n\n<p>I could add ifs, checks, etc. Ideally, I would like to fill any remaining space in the buffer with zeros but this is not critical.</p>\n\n<p>What is an elegant Rust way of dealing with this?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1533593365, "post_id": 51716230, "comment_id": 90393825, "body": "Just <code>&amp;mut seft</code> =&gt; <code>self</code>. Self is already a reference"}, {"owner": {"reputation": 128, "user_id": 6938528, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9e47378d6ec9953eef195f56b30fcef1?s=128&d=identicon&r=PG&f=1", "display_name": "jonathan-dev", "link": "https://stackoverflow.com/users/6938528/jonathan-dev"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533593657, "post_id": 51716230, "comment_id": 90393904, "body": "I still can&#39;t get it to compile could you send a link to a working playground?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1533596488, "post_id": 51716230, "comment_id": 90394575, "body": "<a href=\"https://play.rust-lang.org/?gist=c0b453b42027c3eb9c8b0f5f7967f7bf&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "owner": {"reputation": 128, "user_id": 6938528, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9e47378d6ec9953eef195f56b30fcef1?s=128&d=identicon&r=PG&f=1", "display_name": "jonathan-dev", "link": "https://stackoverflow.com/users/6938528/jonathan-dev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 29, "favorite_count": 0, "closed_date": 1533596428, "answer_count": 0, "score": 0, "last_activity_date": 1533596086, "creation_date": 1533592915, "last_edit_date": 1533596086, "question_id": 51716230, "link": "https://stackoverflow.com/questions/51716230/cant-return-mutable-borrow-of-self", "closed_reason": "Duplicate", "title": "Can&#39;t return mutable borrow of self", "body": "<p>In the main method, I first create an owned builder which is then mutably borrowed by the number function which tries to return a reference to itself:</p>\n\n<pre><code>struct Builder {\n    string: Option&lt;String&gt;,\n    number: Option&lt;usize&gt;,\n}\n\nimpl Builder {\n    fn default() -&gt; Builder {\n        Builder {\n            string: None,\n            number: None,\n        }\n    }\n\n    fn number(&amp;mut self, n: usize) -&gt; &amp;mut Self {\n        self.number = Some(n);\n        &amp;mut self\n    }\n\n    fn to_string(&amp;self) -&gt; &amp;'static str {\n        \"tte\"\n    }\n}\n\n// Do not modify this function.\nfn main() {\n    let _test = Builder::default().number(456).to_string();\n}\n</code></pre>\n\n<p>I don't see why the borrowed value wouldn't \"live long enough\":</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `self` does not live long enough\n  --&gt; src/main.rs:16:14\n   |\n16 |         &amp;mut self\n   |              ^^^^ borrowed value does not live long enough\n17 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 14:5...\n  --&gt; src/main.rs:14:5\n   |\n14 | /     fn number(&amp;mut self, n: usize) -&gt; &amp;mut Self {\n15 | |         self.number = Some(n);\n16 | |         &amp;mut self\n17 | |     }\n   | |_____^\n</code></pre>\n\n<p>What is exactly going on here and how do I fix it? I tried to add lifetimes to the <code>number</code> method but that seems to be the wrong approach.</p>\n"}, {"tags": ["rust", "rust-cargo", "rust-2018"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533593065, "post_id": 51715684, "comment_id": 90393741, "body": "Just print the rust version of compiler should be enough ?"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533593652, "post_id": 51715684, "comment_id": 90393903, "body": "@Stargateur No, I don&#39;t want to know if the compiler supports it, I want to know, if it&#39;s enabled."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1549421625, "last_edit_date": 1549421625, "creation_date": 1533593941, "answer_id": 51716371, "question_id": 51715684, "link": "https://stackoverflow.com/questions/51715684/way-to-get-current-edition-in-build-script/51716371#51716371", "title": "Way to get current edition in build script?", "body": "<blockquote>\n  <p>Is it possible to read the currently used Rust edition in a build script?</p>\n</blockquote>\n\n<p>I'm going to ignore your direct question because there isn't a single edition in play and the edition <em>shouldn't matter</em>. </p>\n\n<p><strong>Every crate</strong> in the entire dependency graph chooses which edition it will be compiled with.  If your crate is written to use the 2018 edition, <em>just your crate</em> will be compiled using the edition settings. Then, the MIR of all the crates, a version-independent implementation, is stuck together to produce the final result.</p>\n\n<p>If you are writing a library, opting into the 2018 edition is no different than opting into some feature that is only available in a newer version of Rust. Since the 2018 edition went stable in Rust 1.31, that would be the equivalent version. </p>\n\n<hr>\n\n<p>One situation that I can see needing to know the edition is if you are generating code. In that case, I'd advocate for one of:</p>\n\n<ul>\n<li>only generating code that works in both editions</li>\n<li>your code accepts an argument from the end user that specifies what kind of code to generate.</li>\n</ul>\n"}], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1549421625, "creation_date": 1533589843, "last_edit_date": 1533593596, "question_id": 51715684, "link": "https://stackoverflow.com/questions/51715684/way-to-get-current-edition-in-build-script", "title": "Way to get current edition in build script?", "body": "<p>Is it possible to read the currently used Rust edition in a build script? Maybe through an environment variable?</p>\n\n<p>I tried <code>EDITION</code> and <code>CARGO_EDITION</code>, but it didn't work. I didn't find any documentation on this either.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "is_accepted": true, "score": 3, "last_activity_date": 1533588199, "creation_date": 1533588199, "answer_id": 51715345, "question_id": 51714866, "link": "https://stackoverflow.com/questions/51714866/is-it-documented-that-cargo-can-download-and-bundle-multiple-versions-of-the-sam/51715345#51715345", "title": "Is it documented that Cargo can download and bundle multiple versions of the same crate?", "body": "<p>Cargo can indeed link multiple versions of some crate, but only one of those versions can be a direct dependency. The others are indirect references.</p>\n\n<p>The direct reference is always the version referenced by <code>Cargo.toml</code> and on top-level of <code>Cargo.lock</code> (while the indirect references are in the <code>dependencies</code> subsections).</p>\n\n<p>I am not sure how much it is documented, unfortunately.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 8, "last_activity_date": 1533630216, "creation_date": 1533630216, "answer_id": 51722134, "question_id": 51714866, "link": "https://stackoverflow.com/questions/51714866/is-it-documented-that-cargo-can-download-and-bundle-multiple-versions-of-the-sam/51722134#51722134", "title": "Is it documented that Cargo can download and bundle multiple versions of the same crate?", "body": "<p>It was a conscious decision when designing Rust to allow multiple versions of the same crate.</p>\n\n<p>You have probably heard of <a href=\"https://en.wikipedia.org/wiki/Dependency_hell\" rel=\"noreferrer\"><strong>Dependency Hell</strong></a> before, which occurs when 2 (or more) dependencies A and B have a common dependency C but each require a version which is incompatible with the other.</p>\n\n<p>Rust was designed to ensure that this would not be an issue.</p>\n\n<p>In general, cargo will attempt to find a common version which satisfies all requirements. As long as crate authors use SemVer correctly, and the requirements give enough leeway, a single version of the dependency can be computed and used successfully.</p>\n\n<p>Sometimes, however, multiple versions of the same dependency are necessary, such as in your case since 0.1.x and 0.2.x are considered two different major versions. In this case, Rust has two features to allow the two versions to be used within the same binary:</p>\n\n<ul>\n<li>a unique hash per version is appended to each symbol.</li>\n<li>the type system considers the same type <code>Foo</code> from two versions of C to be different types.</li>\n</ul>\n\n<p>There is a limitation, of course. If a function of A returns an instance of <code>C::Foo</code> and you attempt to pass it to a function of B, the compiler will refuse it (it considers the two types to be different). This is an intractable problem<sup>1</sup>.</p>\n\n<p>Anytime the dependency on C is internal, or the use of C is isolated, it otherwise works automatically. As your experience shows, it is so seamless that the user may not even realize it is happening.</p>\n\n<p><sup>1</sup> <em>See the <a href=\"https://github.com/dtolnay/semver-trick\" rel=\"noreferrer\">dtolnay trick</a> that crate authors can use to allow some types to be interchangeable.</em></p>\n"}], "owner": {"reputation": 3087, "user_id": 856142, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5bfb729f6ac07e17c2326a7335a3f3be?s=128&d=identicon&r=PG", "display_name": "yageek", "link": "https://stackoverflow.com/users/856142/yageek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 846, "favorite_count": 1, "accepted_answer_id": 51715345, "answer_count": 2, "score": 3, "last_activity_date": 1533630216, "creation_date": 1533585747, "last_edit_date": 1533596605, "question_id": 51714866, "link": "https://stackoverflow.com/questions/51714866/is-it-documented-that-cargo-can-download-and-bundle-multiple-versions-of-the-sam", "title": "Is it documented that Cargo can download and bundle multiple versions of the same crate?", "body": "<p>By forking and playing with some code, I noticed that Cargo can download and bundle multiple versions of the same crate in the same project (native-tls 0.1.5 and 0.2.1, for example).  I have wasted so much time by looking at the documentation of the wrong version.</p>\n\n<p>I have looked for some information about this behaviour but I was not able to find anything. Is this documented somewhere?</p>\n\n<p>Is there an easy way to determine/detect the version used by the code you're working on (current edited file)? Or can we tell Cargo to show some warnings/prevent the build if two versions the same crate are required? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533555824, "post_id": 51706783, "comment_id": 90374284, "body": "Why don&#39;t you just use <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow</code></a>?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1533556738, "post_id": 51706783, "comment_id": 90374875, "body": "A related question is <a href=\"https://stackoverflow.com/questions/45786717/how-to-implement-hashmap-with-two-keys\">How to implement HashMap with two keys?</a>"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 66, "favorite_count": 0, "closed_date": 1533668980, "answer_count": 0, "score": 1, "last_activity_date": 1533556963, "creation_date": 1533555550, "last_edit_date": 1533556963, "question_id": 51706783, "link": "https://stackoverflow.com/questions/51706783/borrow-a-struct-with-a-string-field-to-a-struct-with-a-str-field", "closed_reason": "Duplicate", "title": "Borrow a struct with a String field to a struct with a &amp;str field?", "body": "<p>I have a <code>HashMap&lt;Node, u32&gt;</code> and I want to search is using a <code>&amp;str</code> instead of a <code>String</code>;  Is it possible somehow?</p>\n\n<pre><code>use std::collections::HashMap;\n\n#[derive(PartialEq, Hash, Eq, Clone, Copy, Debug)]\nenum NodeType {\n    A,\n    B,\n}\n\n#[derive(PartialEq, Hash, Eq, Clone, Debug)]\nstruct Node {\n    id: String,\n    code: u8,\n    node_type: NodeType,\n}\n\n#[derive(PartialEq, Hash, Eq, Clone, Debug)]\nstruct NodeRef&lt;'a&gt; {\n    id: &amp;'a str,\n    code: u8,\n    node_type: NodeType,\n}\n\nfn main() {\n    let m = HashMap::&lt;Node, u32&gt;::new();\n    let x = NodeRef {\n        id: \"aaaa\",\n        code: 5,\n        node_type: NodeType::A,\n    };\n    m.get(&amp;x);\n}\n</code></pre>\n\n<p>This code compiles if I add:</p>\n\n<pre><code>impl&lt;'a&gt; Borrow&lt;NodeRef&lt;'a&gt;&gt; for Node {\n    fn borrow(&amp;self) -&gt; &amp;NodeRef&lt;'a&gt; {\n       unimplemented!();\n    }\n}\n</code></pre>\n\n<p>I have no idea how to implement <code>borrow</code> method:</p>\n\n<pre><code>impl&lt;'a&gt; Borrow&lt;NodeRef&lt;'a&gt;&gt; for Node {\n    fn borrow(&amp;self) -&gt; &amp;NodeRef&lt;'a&gt; {\n        &amp;NodeRef {\n            id: self.id.as_str(),\n            code: self.code,\n            node_type: self.node_type,\n        }\n    }\n}\n</code></pre>\n\n<p>This doesn't compile because of the reference to temporary variable. One way I see to use one global <code>NodeRef</code> per thread, are there any other ways?</p>\n"}, {"tags": ["rust", "traits", "move-semantics", "ownership"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1533652442, "post_id": 51704063, "comment_id": 90419382, "body": "This is kinda-sorta a formalization of what C++ calls the <a href=\"https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three\">&quot;Rule of Three&quot;</a>."}], "answers": [{"comments": [{"owner": {"reputation": 23688, "user_id": 1256041, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NJUNN.jpg?s=128&g=1", "display_name": "sdgfsdh", "link": "https://stackoverflow.com/users/1256041/sdgfsdh"}, "edited": false, "score": 0, "creation_date": 1533556723, "post_id": 51704205, "comment_id": 90374866, "body": "&quot;With those two descriptions, it is clearer that they are exclusive&quot; what about an implementation of a shared pointer?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 23688, "user_id": 1256041, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NJUNN.jpg?s=128&g=1", "display_name": "sdgfsdh", "link": "https://stackoverflow.com/users/1256041/sdgfsdh"}, "edited": false, "score": 3, "creation_date": 1533557774, "post_id": 51704205, "comment_id": 90375574, "body": "@sdgfsdh When you copy a shared pointer, you have to increment the inner reference counter. That&#39;s not a simple <code>memcpy</code>. See the <a href=\"https://doc.rust-lang.org/src/alloc/rc.rs.html#830\" rel=\"nofollow noreferrer\">drop implementation of <code>Rc</code></a> for example."}, {"owner": {"reputation": 23688, "user_id": 1256041, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NJUNN.jpg?s=128&g=1", "display_name": "sdgfsdh", "link": "https://stackoverflow.com/users/1256041/sdgfsdh"}, "edited": false, "score": 0, "creation_date": 1533558864, "post_id": 51704205, "comment_id": 90376302, "body": "So Rust does not allow custom implementations of <code>Copy</code>?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 23688, "user_id": 1256041, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NJUNN.jpg?s=128&g=1", "display_name": "sdgfsdh", "link": "https://stackoverflow.com/users/1256041/sdgfsdh"}, "edited": false, "score": 2, "creation_date": 1533559056, "post_id": 51704205, "comment_id": 90376449, "body": "@sdgfsdh Nope. Let me add more information about this in my answer."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 23688, "user_id": 1256041, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NJUNN.jpg?s=128&g=1", "display_name": "sdgfsdh", "link": "https://stackoverflow.com/users/1256041/sdgfsdh"}, "edited": false, "score": 8, "creation_date": 1533560474, "post_id": 51704205, "comment_id": 90377474, "body": "@sdgfsdh actually rust allows something like a custom implementation of <code>Copy</code>. It is called <code>Clone</code>. <code>Clone</code> is always explizit, can perform additional operations (such as increasing a reference count), and can coexist with <code>Drop</code>."}, {"owner": {"reputation": 1307, "user_id": 5006880, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fb0bf399baa2aa2a9ba96fa05cecb74b?s=128&d=identicon&r=PG&f=1", "display_name": "Mergasov", "link": "https://stackoverflow.com/users/5006880/mergasov"}, "edited": false, "score": 0, "creation_date": 1616526753, "post_id": 51704205, "comment_id": 118029228, "body": "Is <code>Copy</code> trait about byte copying from the stack only and not from, for example, the heap? In other words, is this trait a tool for saying the compilier &quot;you can copy bytes from stack for another variable, that&#39;s sufficient to do&quot; and if some type presupposes a heap resource, then <code>Copy</code> has to avoided (cause the compilier don&#39;t trail heap resources)?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 1307, "user_id": 5006880, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fb0bf399baa2aa2a9ba96fa05cecb74b?s=128&d=identicon&r=PG&f=1", "display_name": "Mergasov", "link": "https://stackoverflow.com/users/5006880/mergasov"}, "edited": false, "score": 0, "creation_date": 1616570666, "post_id": 51704205, "comment_id": 118040554, "body": "Every <code>Copy</code> is also <code>Clone</code>, and they both don&#39;t care about the data emplacement. If you want to know if the copies are optimized away, I think that this answer is still relevant: <a href=\"https://stackoverflow.com/questions/38571270/can-rust-optimise-away-the-bit-wise-copy-during-move-of-an-object-someday\" title=\"can rust optimise away the bit wise copy during move of an object someday\">stackoverflow.com/questions/38571270/&hellip;</a> @Mergasov"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 19, "last_activity_date": 1533559645, "last_edit_date": 1533559645, "creation_date": 1533546844, "answer_id": 51704205, "question_id": 51704063, "link": "https://stackoverflow.com/questions/51704063/why-does-rust-not-allow-the-copy-and-drop-traits-on-one-type/51704205#51704205", "title": "Why does Rust not allow the copy and drop traits on one type?", "body": "<ul>\n<li>The <code>Drop</code> trait is used in an <a href=\"https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization\" rel=\"noreferrer\">RAII</a> context, typically when some resource needs to be released/closed when the object is destroyed.</li>\n<li>In the other hand, a <code>Copy</code> type is a trivial type that can be copied with a <code>memcpy</code> only.</li>\n</ul>\n\n<p>With those two descriptions, it is clearer that they are exclusive: it makes no sense to <code>memcpy</code> nontrivial data: what if we copy the data, and we drop one of the copies? The inner resource of the other copy will not be reliable anymore.</p>\n\n<p>In fact, <code>Copy</code> in not even a \"real\" trait, in that it does not define any function. It is a special <strong>marker</strong> that says to the compiler: \"you can duplicate myself with a simple bytes copy\". So you cannot provide a custom implementation of <code>Copy</code>, because there is no implementation at all. However, you can mark a type as copyable:</p>\n\n<pre><code>impl Copy for Foo {}\n</code></pre>\n\n<p>or better, with a derive:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct Foo { /* ... */ }\n</code></pre>\n\n<p>This builds only if all the fields implement <code>Copy</code>. Otherwise, the compiler refuses to compile because this is unsafe.</p>\n\n<hr>\n\n<p>For the sake of an example, let's suppose that the <code>File</code> struct implements <code>Copy</code>. Of course, this is <strong>not</strong> the case, and this example is wrong and cannot compile:</p>\n\n<pre><code>fn drop_copy_type&lt;T&gt;(T x)\nwhere\n    T: Copy + Drop,\n{\n    // The inner file descriptor is closed there:\n    std::mem::drop(x);\n}\n\nfn main() {\n    let mut file = File::open(\"foo.txt\").unwrap();\n    drop_copy_type(file);\n    let mut contents = String::new();\n\n    // Oops, this is unsafe!\n    // We try to read an already closed file descriptor:\n    file.read_to_string(&amp;mut contents).unwrap();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 6, "last_activity_date": 1533547008, "creation_date": 1533547008, "answer_id": 51704249, "question_id": 51704063, "link": "https://stackoverflow.com/questions/51704063/why-does-rust-not-allow-the-copy-and-drop-traits-on-one-type/51704249#51704249", "title": "Why does Rust not allow the copy and drop traits on one type?", "body": "<p>Quoting the <a href=\"https://doc.rust-lang.org/core/marker/trait.Copy.html#when-cant-my-type-be-copy\" rel=\"noreferrer\">documentation</a>.</p>\n\n<blockquote>\n  <p>[...] [A]ny type implementing <a href=\"https://doc.rust-lang.org/std/ops/trait.Drop.html\" rel=\"noreferrer\"><code>Drop</code></a> can't be <code>Copy</code>, because it's managing some resource besides its own <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"noreferrer\"><code>size_of::&lt;T&gt;</code></a> bytes.</p>\n</blockquote>\n"}], "owner": {"reputation": 23688, "user_id": 1256041, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NJUNN.jpg?s=128&g=1", "display_name": "sdgfsdh", "link": "https://stackoverflow.com/users/1256041/sdgfsdh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2700, "favorite_count": 3, "accepted_answer_id": 51704205, "answer_count": 2, "score": 15, "last_activity_date": 1533559645, "creation_date": 1533546315, "last_edit_date": 1533547297, "question_id": 51704063, "link": "https://stackoverflow.com/questions/51704063/why-does-rust-not-allow-the-copy-and-drop-traits-on-one-type", "title": "Why does Rust not allow the copy and drop traits on one type?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/2018-edition/ch04-01-what-is-ownership.html#stack-only-data-copy\" rel=\"noreferrer\">the book</a>: </p>\n\n<blockquote>\n  <p>Rust won\u2019t let us annotate a type with the <code>Copy</code> trait if the type, or any of its parts, has implemented the <code>Drop</code> trait. If the type needs something special to happen when the value goes out of scope and we add the <code>Copy</code> annotation to that type, we\u2019ll get a compile time error. </p>\n</blockquote>\n\n<p>Why was the design decision made to disallow <code>Copy</code> and <code>Drop</code> on the same type? </p>\n"}, {"tags": ["rust", "binary-tree", "lifetime", "borrowing"], "comments": [{"owner": {"reputation": 2513, "user_id": 4725625, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YwH49.png?s=128&g=1", "display_name": "Kwarrtz", "link": "https://stackoverflow.com/users/4725625/kwarrtz"}, "edited": false, "score": 0, "creation_date": 1533537559, "post_id": 51701393, "comment_id": 90364708, "body": "Is there any particular reason you need to use a <code>RefCell</code>? Why not just have <code>add</code> take a mutable reference to <code>self</code>?"}, {"owner": {"reputation": 63, "user_id": 6917152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4ea1d22b9c4f918e5c73ff6fa0c5855c?s=128&d=identicon&r=PG&f=1", "display_name": "\u0418\u0433\u043e\u0440\u044c \u041a\u043e\u0440\u043f\u0435\u043d\u043a\u043e", "link": "https://stackoverflow.com/users/6917152/%d0%98%d0%b3%d0%be%d1%80%d1%8c-%d0%9a%d0%be%d1%80%d0%bf%d0%b5%d0%bd%d0%ba%d0%be"}, "reply_to_user": {"reputation": 2513, "user_id": 4725625, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YwH49.png?s=128&g=1", "display_name": "Kwarrtz", "link": "https://stackoverflow.com/users/4725625/kwarrtz"}, "edited": false, "score": 0, "creation_date": 1533548804, "post_id": 51701393, "comment_id": 90370377, "body": "I&#39;m alowed to take only one mutable referece to the entire tree, and I need somehow traverse it to find appropriate node. I need to maintain current node,while traversing, via another mutable reference to a specific node of the tree.If you know how to do this via one mutable reference,please, tell me.It&#39;s interesting for me.@Kwarrtz"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533559177, "post_id": 51701393, "comment_id": 90376539, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/51701393/edit\">edit</a> your question to include it. For example, do you need to have <i>both</i> <code>left</code> and <code>right</code>? Do you need <code>key</code>? Do you need separate <code>Tree</code> and <code>Node</code> structures? There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533582512, "post_id": 51701393, "comment_id": 90389729, "body": "This concept has <a href=\"https://stackoverflow.com/questions/linked/37986640?lq=1\">been repeatedly covered</a> and is canonically answered by <a href=\"https://stackoverflow.com/q/37986640/155423\">Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time</a>. It is not an innate requirement to track two pointers into the tree in order to add a new value, that&#39;s just your implementation."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533582697, "post_id": 51701393, "comment_id": 90389796, "body": "See especially <a href=\"https://stackoverflow.com/q/43976787/155423\">Adding an append method to a singly linked list</a>, <a href=\"https://stackoverflow.com/q/49337968/155423\">How do I keep a mutable reference to the last node while building a linked list?</a>, and <a href=\"https://stackoverflow.com/q/49337968/155423\">Iterating through a recursive structure using mutable references and returning the last valid reference</a>."}, {"owner": {"reputation": 2513, "user_id": 4725625, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YwH49.png?s=128&g=1", "display_name": "Kwarrtz", "link": "https://stackoverflow.com/users/4725625/kwarrtz"}, "edited": false, "score": 0, "creation_date": 1533625491, "post_id": 51701393, "comment_id": 90402013, "body": "You might be interested in <a href=\"https://play.rust-lang.org/?gist=a44c6ce14b905fcc509dde85a2f4e653&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">this playground I threw together</a> . I had a lot of trouble parsing what your <code>add</code> function did exactly, so it&#39;s possible my implementation doesn&#39;t have exactly the same behavior, but I think it&#39;s at least close."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533580251, "post_id": 51713608, "comment_id": 90388691, "body": "<i>and a tree is <b>best</b> implemented with a recursive function</i> (emphasis mine) \u2014 maybe in the sense of &quot;matches the data structure&quot; or &quot;matches programmer intuition&quot;, but not in the sense of &quot;will not run out of stack space on a big tree&quot;."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533583262, "post_id": 51713608, "comment_id": 90390049, "body": "@Shepmaster: Sure, when I said <i>best</i> I meant <i>easiest to write/read</i>. And deep trees may need more care (I looked at the implementation of <code>std::collections::BTreeMap</code> and didn&#39;t understand half of it...) But in this particular case, my function is tail recursive except for the <code>RefMut::drop()</code> call. Would <code>rustc</code> be able to optimize the tail recursion if the OP gets rid of those <code>RefCell</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533583598, "post_id": 51713608, "comment_id": 90390171, "body": "<i>Would rustc be able to optimize the tail recursion</i> \u2014 &quot;maybe&quot;. It&#39;s up to all sorts of complicated optimizer decisions. There&#39;s a reserved keyword <code>become</code> to annotate functions as guaranteed tail-recursive, but it&#39;s never been implemented. I do seem to recall that <code>Drop::drop</code> is a big hurdle."}, {"owner": {"reputation": 1410, "user_id": 5827450, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-r3ocQbM_fgs/AAAAAAAAAAI/AAAAAAAAAAw/R48S5OAnokw/photo.jpg?sz=128", "display_name": "Charlie \u6728\u5320", "link": "https://stackoverflow.com/users/5827450/charlie-%e6%9c%a8%e5%8c%a0"}, "edited": false, "score": 0, "creation_date": 1591943803, "post_id": 51713608, "comment_id": 110251590, "body": "This is what working for my leetcode problem: ``` if let Some(node) = root {                     let v = node.borrow();                     q2.push(v.left.clone());                     q2.push(v.right.clone());                 } ```"}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 1, "last_activity_date": 1533579966, "creation_date": 1533579966, "answer_id": 51713608, "question_id": 51701393, "link": "https://stackoverflow.com/questions/51701393/borrowed-value-does-not-live-long-enough-when-adding-to-a-binary-tree-built-on-r/51713608#51713608", "title": "Borrowed value does not live long enough when adding to a binary tree built on RefCell", "body": "<p>The problem I see is that in order to update a leaf node of your tree you have to hold a reference to each intermediate step, not only its parent, because all the links up to the root node must be kept alive while you are updating the value. And Rust lifetimes just cannot do that.</p>\n\n<p>That is, Rust cannot do that in a loop, but it can do that in a recursive function, and a tree is best implemented with a recursive function.</p>\n\n<p>Naturally, your recursive struct is <code>Node</code>, not <code>Tree</code>, but something like this could work (there are many ways to get the borrows to work):</p>\n\n<pre><code>impl&lt;T: PartialOrd&gt; Node&lt;T&gt; {\n    fn add(&amp;self, val: T) {\n        let mut branch = if val &lt; self.key {\n            self.left.borrow_mut()\n        } else {\n            self.right.borrow_mut()\n        };\n        if let Some(next) = &amp;*branch {\n            next.add(val);\n            return;\n        }\n        //Separated from the if let so that branch is not borrowed.\n        *branch = Some(Box::new(Node::new(val)));\n    }\n}\n</code></pre>\n\n<p>And then, in <code>impl Tree</code> just relay the work to this one.</p>\n\n<p>The code may be simplified a bit if, as other people noted, you get rid of the <code>Tree</code> vs <code>Node</code> and the <code>RefCell</code>...</p>\n"}], "owner": {"reputation": 63, "user_id": 6917152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4ea1d22b9c4f918e5c73ff6fa0c5855c?s=128&d=identicon&r=PG&f=1", "display_name": "\u0418\u0433\u043e\u0440\u044c \u041a\u043e\u0440\u043f\u0435\u043d\u043a\u043e", "link": "https://stackoverflow.com/users/6917152/%d0%98%d0%b3%d0%be%d1%80%d1%8c-%d0%9a%d0%be%d1%80%d0%bf%d0%b5%d0%bd%d0%ba%d0%be"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 294, "favorite_count": 0, "accepted_answer_id": 51713608, "answer_count": 1, "score": -1, "last_activity_date": 1533579966, "creation_date": 1533535422, "last_edit_date": 1533558800, "question_id": 51701393, "link": "https://stackoverflow.com/questions/51701393/borrowed-value-does-not-live-long-enough-when-adding-to-a-binary-tree-built-on-r", "title": "Borrowed value does not live long enough when adding to a binary tree built on RefCell", "body": "<p>I tried to implement an <code>add</code> operation in a binary tree:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::cmp::PartialOrd;\n\ntype Link&lt;T&gt; = RefCell&lt;Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;&gt;;\n\nstruct Node&lt;T&gt; {\n    key: T,\n    left: Link&lt;T&gt;,\n    right: Link&lt;T&gt;,\n}\n\nstruct Tree&lt;T&gt; {\n    root: Link&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Node&lt;T&gt; {\n    fn new(val: T) -&gt; Self {\n        Node {\n            key: val,\n            left: RefCell::new(None),\n            right: RefCell::new(None),\n        }\n    }\n}\n\nimpl&lt;T: PartialOrd&gt; Tree&lt;T&gt; {\n    fn new() -&gt; Self {\n        Tree {\n            root: RefCell::new(None),\n        }\n    }\n\n    fn add(&amp;self, val: T) {\n        let mut next = self.root.borrow();\n        let node = Box::new(Node::new(val));\n        match next.as_ref() {\n            None =&gt; {\n                self.root.replace(Some(node));\n                ()\n            }\n            Some(root_ref) =&gt; {\n                let mut prev = root_ref;\n                let mut cur: Option&lt;&amp;Box&lt;Node&lt;T&gt;&gt;&gt; = Some(root_ref);\n                while let Some(node_ref) = cur {\n                    prev = node_ref;\n                    if node.key &lt; node_ref.key {\n                        next = node_ref.left.borrow();\n                    } else {\n                        next = node_ref.right.borrow();\n                    }\n                    cur = next.as_ref();\n                }\n                if node.key &lt; prev.key {\n                    prev.left.replace(Some(node));\n                } else {\n                    prev.right.replace(Some(node));\n                }\n            }\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I don't understand why the <code>next</code> variable doesn't live long enough:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `next` does not live long enough\n  --&gt; src/main.rs:36:15\n   |\n36 |         match next.as_ref() {\n   |               ^^^^ borrowed value does not live long enough\n...\n60 |     }\n   |     - `next` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n\nerror[E0597]: `next` does not live long enough\n  --&gt; src/main.rs:51:27\n   |\n51 |                     cur = next.as_ref();\n   |                           ^^^^ borrowed value does not live long enough\n...\n60 |     }\n   |     - `next` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p><code>next</code> lives for the entire scope of the <code>add</code> function and, in my opinion, other variables containing references to it are dropped before <code>next</code> has dropped.</p>\n\n<p>The compiler says that <code>\"values in a scope are dropped in the opposite order they are created\"</code>, suggesting that there is another way to declare variables and to solve this problem, but I don't know how. </p>\n"}, {"tags": ["rust", "inline"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1533509954, "post_id": 51698722, "comment_id": 90359174, "body": "Just to be sure: you want to inline that trait method call so that it&#39;s as cheap/fast as a simple field access of a concrete type, correct?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533510134, "post_id": 51698722, "comment_id": 90359203, "body": "It&#39;s highly unclear what you are asking. You say <i>without knowing who implements <code>MyTrait</code></i> but then you put <code>#[inline]</code> on a concrete implementation. you also say <i>will be implemented the same way in different structs</i> but I fail to see what relevance that has to the question."}, {"owner": {"user_type": "does_not_exist", "display_name": "user10018213"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1533510182, "post_id": 51698722, "comment_id": 90359209, "body": "@LukasKalbertodt Yes, just that. You can do this in C++ too, but it looks like Rust works another way."}, {"owner": {"user_type": "does_not_exist", "display_name": "user10018213"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533510309, "post_id": 51698722, "comment_id": 90359231, "body": "@Shepmaster I know it doesn&#39;t make sense, but I&#39;m really unsure what I should do to make this method inline. Will it just inline fine anyways?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1533510503, "post_id": 51698722, "comment_id": 90359252, "body": "@yugioh &quot;You can do this in C++&quot; -- it would be helpful if you could add C++ code to your question that shows what you want to achieve =)"}, {"owner": {"reputation": 3331, "user_id": 8038186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ac0cc4d0f1414caf2172751b2ded50?s=128&d=identicon&r=PG&f=1", "display_name": "KoralK", "link": "https://stackoverflow.com/users/8038186/koralk"}, "edited": false, "score": 0, "creation_date": 1533513761, "post_id": 51698722, "comment_id": 90359740, "body": "@yugioh your c++ code is illegal as far as I know..."}, {"owner": {"user_type": "does_not_exist", "display_name": "user10018213"}, "reply_to_user": {"reputation": 3331, "user_id": 8038186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72ac0cc4d0f1414caf2172751b2ded50?s=128&d=identicon&r=PG&f=1", "display_name": "KoralK", "link": "https://stackoverflow.com/users/8038186/koralk"}, "edited": false, "score": 0, "creation_date": 1533515293, "post_id": 51698722, "comment_id": 90359950, "body": "@KorelK It&#39;s legal after 21m ago."}], "answers": [{"comments": [{"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1566754598, "post_id": 51701233, "comment_id": 101747187, "body": "&quot;particular method should be inlined. However, since Rust is statically typed, traits can be disambiguated at compile time, so I see no reason the Rust compiler shouldn&#39;t be able to inline specific method implementations&quot; You&#39;re talking about traits as generic parameter bounds. There are also <code>dyn</code> use cases."}], "tags": [], "owner": {"reputation": 2513, "user_id": 4725625, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YwH49.png?s=128&g=1", "display_name": "Kwarrtz", "link": "https://stackoverflow.com/users/4725625/kwarrtz"}, "is_accepted": false, "score": 0, "last_activity_date": 1533556261, "last_edit_date": 1533556261, "creation_date": 1533534583, "answer_id": 51701233, "question_id": 51698722, "link": "https://stackoverflow.com/questions/51698722/inline-a-common-method/51701233#51701233", "title": "Inline a common method", "body": "<p>As per <a href=\"https://stackoverflow.com/questions/41733424/can-inline-be-used-in-both-trait-method-declarations-and-implementations\">Can #[inline] be used in both trait method declarations and implementations?</a> and <a href=\"https://users.rust-lang.org/t/trait-method-inlining/16817\" rel=\"nofollow noreferrer\">this thread on the language forum</a>, it is impossible to tell the compiler that <em>all</em> implementations of a particular method should be inlined. However, since Rust is statically typed, traits can be disambiguated at compile time, so I see no reason the Rust compiler shouldn't be able to inline specific method implementations. I can't tell you for certain whether it will actually do so, since <code>#[inline]</code> attributes are merely suggestions which the compiler is free to ignore, but that would be true even if we were talking about stand-alone functions instead of methods. In other words, inlining methods should be possible, but you should never rely on your function being inlined under any circumstances.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1533656123, "post_id": 51704002, "comment_id": 90421827, "body": "I would note that if one finds themselves frequently invoking a virtual method and the resulting optimization-barrier is a bottleneck, one solution is to move the virtual <i>upward</i>, which should reduce the number of virtual calls."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1533556237, "last_edit_date": 1533556237, "creation_date": 1533546094, "answer_id": 51704002, "question_id": 51698722, "link": "https://stackoverflow.com/questions/51698722/inline-a-common-method/51704002#51704002", "title": "Inline a common method", "body": "<p>I think you are confusing a few things here. First of all: <strong>it's impossible to inline a method from a trait when you are using it in purely virtual context</strong> (that is: you have no information about the actual type). This would look like this:</p>\n\n<pre><code>fn unknown_type(foo: &amp;MyTrait) -&gt; f32 {\n    foo.x()\n}\n</code></pre>\n\n<p>Here, the compiler can't possibly know the actual type behind the trait object <code>foo</code>. Thus, it is forced to use the vtable and do dynamic dispatch to call the method. There is an optimization called <em>devirtualization</em> that tries to guess the correct type to do static dispatch (or even inline the method), but this optimization has its limits. </p>\n\n<blockquote>\n  <p>Will <code>a.x()</code> get inlined to <code>(a as &amp;StructB).x</code>?</p>\n</blockquote>\n\n<p>In most cases yes, but this has nothing to do with your inline-attribute nor with trait objects. In your tiny example, the compiler can see the whole function and knows that <code>a</code> has the underlying type <code>StructB</code>. But again, this is not a purely virtual context: the compiler has type information it can use.</p>\n\n<hr>\n\n<p>Another thing: this all has nothing to do with <code>final</code> in Java/<code>f</code> in C# -- as mentioned in <a href=\"https://stackoverflow.com/revisions/51698722/1\">the first version of your question</a>. </p>\n\n<p>These keywords are only useful for class hierarchies. Since you can, in principle, override all methods of every class in Java/C# in a derived class, the compiler could in theory never inline or statically dispatch a method. It would always have to check the vtable to check if there is a more specialized version of this method. When the compiler has a variable of a class that declares that method as <code>final</code>, it can statically call it, since it is guaranteed that it's not overridden.</p>\n\n<p>But having a trait object in Rust is (regarding this question) equivalent to having a variable with an interface type. And you (clearly) cannot declare an interface method as <code>final</code>. So here, the compiler has to do virtual dispatch regardless of whether some implementing classes declare their implementation as <code>final</code>.</p>\n\n<hr>\n\n<p>Furthermore, your C++ doesn't have anything to do with what you're asking. The base class <code>A</code> declares a non-virtual function with a method body. That means that the function will never be callable in virtual context. But in your Rust code <code>x()</code> does not have a body and can be used in virtual context. </p>\n\n<p>In Rust there is nothing like that, but you could add methods to the trait object via <code>impl Trait { ... }</code>. Implementors of that trait are not able to override those methods, so the compiler can do static dispatch or inline the method easily.</p>\n\n<p>You can see that example with its assembly <a href=\"https://godbolt.org/g/KB3Z49\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<hr>\n\n<p>To answer what I think you are actually asking:</p>\n\n<blockquote>\n  <p>You want to inline that trait method call so that it's as cheap/fast as a simple field access of a concrete type, right?</p>\n</blockquote>\n\n<p>That's, again, not possible in purely virtual context. When the compiler doesn't know the implementing type, it cannot generate a simple field access, since it doesn't know the offset of that field from the base pointer! I mean, not all implementing types are guaranteed to have the same memory layout and keep <code>x</code> at always the same position.</p>\n\n<p><em>However</em>, one could do better than a method: instead of calling the getter method, it would be possible to store the field offset in the vtable and use that to index the field. That would still be more expensive than a standard field access, but faster than a method call.</p>\n\n<p>That's exactly what's proposed in <a href=\"https://github.com/rust-lang/rfcs/pull/1546\" rel=\"nofollow noreferrer\">this RFC: \"Allow fields in traits that map to lvalues in impl'ing type\"</a>. The RFC thread is closed, but the RFC is still developing. </p>\n\n<p>So you can't do that now. Using a trait method is the best you can do right now.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user10018213"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 624, "favorite_count": 0, "accepted_answer_id": 51704002, "answer_count": 2, "score": 1, "last_activity_date": 1533556261, "creation_date": 1533508289, "last_edit_date": 1533513932, "question_id": 51698722, "link": "https://stackoverflow.com/questions/51698722/inline-a-common-method", "title": "Inline a common method", "body": "<p>I want to inline <code>TraitA::x()</code> method without knowing who implements <code>TraitA</code>.</p>\n\n<p>For example:</p>\n\n<p>(Note: <code>StructB</code> implements <code>TraitA</code>.)</p>\n\n<pre><code>let a: &amp;TraitA = &amp;StructB { x: 0f32 };\na.x(); // This should access `a.x` field directly\n       // as `TraitA::x()` always return the same field,\n       // the same `b.x` field slot.\n</code></pre>\n\n<p>The method will be implemented the same way in different structs.</p>\n\n<pre><code>trait TraitA {\n    fn x(&amp;self) -&gt; f32;\n}\n\nstruct StructB {\n    x: f32\n}\n\nimpl TraitA for StructB {\n    #[inline]\n    fn x(&amp;self) -&gt; f32 {\n        self.x\n    }\n}\n</code></pre>\n\n<p>Will <code>a.x()</code> get inlined to <code>(a as &amp;StructB).x</code>?</p>\n\n<p>I can do this fine on C++, for example:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>class A {\n    float _x;\n\npublic:\n    float x() {\n        return _x;\n    }\n};\n\nstruct B : A {};\n\nint main() {\n    A* a = new B;\n    a-&gt;x();\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 8, "last_activity_date": 1533508375, "creation_date": 1533508375, "answer_id": 51698735, "question_id": 51698648, "link": "https://stackoverflow.com/questions/51698648/why-is-the-move-keyword-not-always-needed-even-when-the-closure-takes-ownership/51698735#51698735", "title": "Why is the move keyword not always needed even when the closure takes ownership of a value?", "body": "<p><strong>Rust can tell when a closure uses a value from the environment in a way that requires a move</strong>. Like calling a function that takes the argument by value (your <code>handle_connection</code> case):</p>\n\n<pre><code>let s = String::from(\"hi\");\nlet c = || drop(s);  // &lt;-- `drop()` takes its argument by value\n                     //      Thus, the compiler knows `c` is a move closure\n</code></pre>\n\n<p>Or if the closure returns the object by value:</p>\n\n<pre><code>let s = String::from(\"hi\");\nlet c = || s;  // &lt;-- `s` is returned (FnOnce() -&gt; String)\n               //      Thus, the compiler knows `c` is a move closure\n</code></pre>\n\n<p>So usually, you don't have to annotate the <code>move</code> keyword to explicitly tell the compiler. </p>\n\n<p><em>However</em>, <strong>if the closure uses the value from the environment only via references, the compiler assumes that moving that variable into the closure is not necessary</strong>. But it might still be necessary for another reason: lifetimes. Example:</p>\n\n<pre><code>fn get_printer(s: String) -&gt; Box&lt;Fn()&gt; {\n    Box::new(|| println!(\"{}\", s))\n}\n</code></pre>\n\n<p>In this case, the compiler only sees that <code>s</code> is used in read only fashion via reference (<code>println</code> doesn't consume its arguments). Thus the compiler doesn't make the closure a move closure. But this results in a lifetime error, because <code>s</code> now lives in the stackframe of <code>get_printer</code> and the closure outlives that stackframe. So in this case, you have to force the compiler to move the environment into the closure by adding <code>move</code>:</p>\n\n<pre><code>fn get_printer(s: String) -&gt; Box&lt;Fn()&gt; {\n    Box::new(move || println!(\"{}\", s))\n}\n</code></pre>\n"}], "owner": {"reputation": 283, "user_id": 4259341, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PaO0Z.jpg?s=128&g=1", "display_name": "g.delgado", "link": "https://stackoverflow.com/users/4259341/g-delgado"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 158, "favorite_count": 0, "closed_date": 1535033272, "accepted_answer_id": 51698735, "answer_count": 1, "score": 7, "last_activity_date": 1533509348, "creation_date": 1533507378, "last_edit_date": 1533509348, "question_id": 51698648, "link": "https://stackoverflow.com/questions/51698648/why-is-the-move-keyword-not-always-needed-even-when-the-closure-takes-ownership", "closed_reason": "Duplicate", "title": "Why is the move keyword not always needed even when the closure takes ownership of a value?", "body": "<p>While reading the last chapter of the Rust book, I couldn't help but notice that <code>move</code> was not used within a closure:</p>\n\n<pre><code>fn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        // move not used here\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n</code></pre>\n\n<p>Here is the function signature of <code>handle_connection</code>:</p>\n\n<pre><code>fn handle_connection(mut stream: TcpStream) {}\n</code></pre>\n\n<p>Why isn't <code>move</code> used here? What would cause <code>move</code> to be required from within the closure?</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1533503685, "post_id": 51698283, "comment_id": 90358049, "body": "Can you provide your full attempt with <code>#[serde(skip_serializing_if...)]</code>, including <code>some_func</code>?"}, {"owner": {"reputation": 1789, "user_id": 4056372, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/285fed6a5df00f048a00732292105729?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew", "link": "https://stackoverflow.com/users/4056372/andrew"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1533503802, "post_id": 51698283, "comment_id": 90358077, "body": "I&#39;ve only attempted it with a simple func that just returned `true\u02d9 to see if it works. Since it didn&#39;t (got the same error) I didn&#39;t really bother with it anymore."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1533503925, "post_id": 51698283, "comment_id": 90358108, "body": "Oh! Well, for one, you probably meant to use <code>#[serde(skip_deserializing)]</code>, not <code>#[serde(skip_serializing)]</code>. The latter only works when encoding the value. :)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1533504118, "post_id": 51698283, "comment_id": 90358140, "body": "Moreover, consider making a full <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>, by including a small <code>main</code> function deserializing an example of a response reproducing the issue. This makes the question much easier to address and much easier for us to help."}, {"owner": {"reputation": 1789, "user_id": 4056372, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/285fed6a5df00f048a00732292105729?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew", "link": "https://stackoverflow.com/users/4056372/andrew"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1533506259, "post_id": 51698283, "comment_id": 90358591, "body": "Ahh, right, I&#39;ve totally missed that. :) I thought I can&#39;t use external crates on play, my bad, I&#39;ll edit my post."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533506747, "post_id": 51698283, "comment_id": 90358689, "body": "If the API happens to return a HTTP 5xx with no content you want to treat that as success?"}, {"owner": {"reputation": 1789, "user_id": 4056372, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/285fed6a5df00f048a00732292105729?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew", "link": "https://stackoverflow.com/users/4056372/andrew"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533508283, "post_id": 51698283, "comment_id": 90358929, "body": "@Shepmaster That&#39;s a good point. I&#39;m in control of the API so I know what responses it can return. Anyway, I just thought there&#39;s a way to return <code>Default</code> if the json is simply null/empty."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533561969, "post_id": 51708628, "comment_id": 90378524, "body": "<i>the one built into ES6</i> \u2014 what does that mean? How does a specification have something &quot;built-in&quot;? Do you mean that some specific implementation of ES6 has this behavior (if so, which) or do you mean that the ES6 specification mandates this behavior?"}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533562932, "post_id": 51708628, "comment_id": 90379119, "body": "I am referring to the parser built into my browser. I did manage to find the spec <a href=\"https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\" rel=\"nofollow noreferrer\">as defined by ECMA</a>. It seems a bit ambiguous about whether zero tokens is valid, they neglected to say &quot;one or more tokens&quot;. &quot;A  JSON  text  is  a  sequence  of tokens  formed  from  Unicode  code  points  that  conforms  to  the  JSON  value  grammar&quot; The spec does not mention if there can be zero tokens or not but the implementation indicates that there cannot be zero."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533563021, "post_id": 51708628, "comment_id": 90379172, "body": "<i>I am referring to the parser built into my browser.</i> \u2014 in that case, your answer would be better suited to say &quot;the one built into $mybrowser (version $browser_version)&quot;."}], "tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 1, "last_activity_date": 1533561890, "last_edit_date": 1533561890, "creation_date": 1533561558, "answer_id": 51708628, "question_id": 51698283, "link": "https://stackoverflow.com/questions/51698283/deserialize-potentially-empty-string-using-serde/51708628#51708628", "title": "Deserialize potentially empty string using Serde", "body": "<p>The main problem here is that the empty string is not valid JSON according to most parsers including the one built into ES6 and apparently Serde. There are three possible solutions that I see to this problem.</p>\n\n<ul>\n<li>Return an empty dict from the endpoint</li>\n<li>Do not blindly attempt deserialization of the empty string checking first for the content length of the response body.</li>\n<li>Implement a custom <code>Deserialize</code> method </li>\n</ul>\n"}], "owner": {"reputation": 1789, "user_id": 4056372, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/285fed6a5df00f048a00732292105729?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew", "link": "https://stackoverflow.com/users/4056372/andrew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1341, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1533561890, "creation_date": 1533503381, "last_edit_date": 1533506531, "question_id": 51698283, "link": "https://stackoverflow.com/questions/51698283/deserialize-potentially-empty-string-using-serde", "title": "Deserialize potentially empty string using Serde", "body": "<p>I've read <a href=\"https://serde.rs\" rel=\"nofollow noreferrer\">the docs</a>, but I haven't seen a way to solve my problem. I'm parsing an API response which on success would return only a 2xx status code, while on bad requests it sends JSON.</p>\n\n<pre><code>extern crate serde;\n#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\n\nfn main() {\n    let _: X = serde_json::from_str(r#\"{ \"ok\": true }\"#).expect(\"with string\");\n    let _: X = serde_json::from_str(\"\").expect(\"empty string\");\n}\n\n#[derive(Deserialize)]\nstruct X {\n    ok: Option&lt;bool&gt;,\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1204fced2db80897cd5eab58aeabb946\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>This is the struct I would like to deserialize into. I've tried adding <code>#[serde(skip_serializing_if = \"some_func\")]</code> to the field, but it doesn't change anything.</p>\n\n<p>The error is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Error(\"EOF while parsing a value\", line: 1, column: 0)\n</code></pre>\n\n<p>Is there a way to handle this properly, or do I always have to check the status code if it's 2xx before attempting to deserialize the response?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533503071, "post_id": 51698173, "comment_id": 90357908, "body": "It is preferred if you can post separate questions instead of combining your questions into one. That way, it helps the people answering your question and also others hunting for at least one of your questions. It also appears that one of your questions is mostly opinion-based, and as such is not suitable for Stack Overflow."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533503842, "post_id": 51698173, "comment_id": 90358085, "body": "See also <a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a>, <a href=\"https://stackoverflow.com/q/29985153/155423\">Trait Object is not Object-safe error</a>, <a href=\"https://stackoverflow.com/q/31897330/155423\">Is it possible to have a constructor function in a trait?</a>"}, {"owner": {"reputation": 2513, "user_id": 4725625, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YwH49.png?s=128&g=1", "display_name": "Kwarrtz", "link": "https://stackoverflow.com/users/4725625/kwarrtz"}, "edited": false, "score": 0, "creation_date": 1533535121, "post_id": 51698173, "comment_id": 90363730, "body": "Instead of having a struct for each OS which all implement the same trait, could you just have a single struct whose implementation (and the implementations of functions acting on it) depend on the target OS?"}], "owner": {"reputation": 687, "user_id": 1212209, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/8ZfPV.jpg?s=128&g=1", "display_name": "Stephen H. Gerstacker", "link": "https://stackoverflow.com/users/1212209/stephen-h-gerstacker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 244, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1533502299, "creation_date": 1533502299, "question_id": 51698173, "link": "https://stackoverflow.com/questions/51698173/how-to-structure-os-specific-objects-in-rust", "title": "How to structure OS-specific objects in Rust", "body": "<p>I have a need for a common interface to some OS-specific code. These implementations are rather large, with not much common between them, so my initial though was to create separate structs for each implementation, both of which implement a common trait to make it agnostic to the implementation.</p>\n\n<p>First off, is this the right way to go? Is there some other means that might make this easier in Rust?</p>\n\n<p>Next, I want to iterate on this, which means storing a reference to a trait, which I haven't been able to get right. If part one of this question is correct, should I be attempting to create an iterator against the common trait, or should I be making OS-specific versions of the iterator as well?</p>\n\n<p>Here's a simple of example of what I'm trying to do:</p>\n\n<pre><code>trait Thing {\n    #[cfg(any(target_os = \"linux\"))]\n    fn new() -&gt; Thing {\n        LinuxThing {\n            value: 1\n        }\n    }\n\n    #[cfg(any(target_os = \"macos\"))]\n    fn new() -&gt; Thing {\n        MacThing {\n            value: 2\n        }\n    }\n\n    fn iter(&amp;self) -&gt; ThingIter {\n        ThingIter {\n            thing: self\n        }\n    }\n\n    fn stuff(&amp;self) -&gt; u8;\n}\n\n#[cfg(any(target_os = \"linux\"))]\nstruct LinuxThing {\n    value: u8,\n}\n\n#[cfg(any(target_os = \"macos\"))]\nstruct MacThing {\n    value: u8,\n}\n\n#[cfg(any(target_os = \"linux\"))]\nimpl Thing for LinuxThing {\n    fn stuff(&amp;self) -&gt; u8 {\n        self.value\n    }\n}\n\n#[cfg(any(target_os = \"macos\"))]\nimpl Thing for MacThing {\n    fn stuff(&amp;self) -&gt; u8 {\n        self.value * 2\n    }\n}\n\nstruct ThingIter&lt;'a&gt; {\n    thing: &amp;'a Thing,\n}\n\nimpl&lt;'a&gt; Iterator for ThingIter&lt;'a&gt; {\n    type Item = u8;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        Some(self.stuff())\n    }\n}\n\nfn main() {\n    let thing = Thing::new();\n    println!(\"Thing: {}\", thing.stuff());\n\n    let iter = ThingIter { thing: &amp;thing };\n    println!(\"Next: {}\", iter.next());\n    println!(\"Next: {}\", iter.next());\n    println!(\"Next: {}\", iter.next());\n}\n</code></pre>\n\n<p>This is currently failing with:</p>\n\n<pre><code>error[E0038]: the trait `Thing` cannot be made into an object\n  --&gt; test.rs:50:5\n   |\n50 |     thing: &amp;'a Thing,\n   |     ^^^^^^^^^^^^^^^^ the trait `Thing` cannot be made into an object\n   |\n   = note: method `new` has no receiver\n\nerror[E0038]: the trait `Thing` cannot be made into an object\n  --&gt; test.rs:10:5\n   |\n10 |     fn new() -&gt; Thing {\n   |     ^^^^^^^^^^^^^^^^^ the trait `Thing` cannot be made into an object\n   |\n   = note: method `new` has no receiver\n\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>I'm a C developer by trade, which means I'm used to just doing whatever I want. I love the concept of Rust, but C is a hard habit to break.</p>\n"}, {"tags": ["floating-point", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1533499505, "post_id": 51697821, "comment_id": 90357094, "body": "<i>it will only print the necessary digits to be lossless</i> \u2014 wouldn&#39;t that be &quot;all of the digits&quot; then?"}, {"owner": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533499568, "post_id": 51697821, "comment_id": 90357107, "body": "@Shepmaster - No - I assume the OP means lossless in the sense of uniquely mappable back to the original float."}, {"owner": {"reputation": 139300, "user_id": 298225, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef102f4ee36e58d09e0b27cd5393a1d8?s=128&d=identicon&r=PG", "display_name": "Eric Postpischil", "link": "https://stackoverflow.com/users/298225/eric-postpischil"}, "reply_to_user": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 0, "creation_date": 1533501072, "post_id": 51697821, "comment_id": 90357460, "body": "@OliverCharlesworth: Due to ambiguities of English, I cannot tell whether Shepmaster means what you suggest or the opposite. The words in their comment could mean that all the necessary digits to be lossless satisfy OP\u2019s request for all the digits (if somebody believed a floating-point number was an approximate and hence producing all the digits for it to be lossless was effectively producing the number) or it could mean that producing all the digits is necessary to produce the necessary digits to be lossless (because if you do not produce all the digits, there is some loss\u2026"}, {"owner": {"reputation": 139300, "user_id": 298225, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef102f4ee36e58d09e0b27cd5393a1d8?s=128&d=identicon&r=PG", "display_name": "Eric Postpischil", "link": "https://stackoverflow.com/users/298225/eric-postpischil"}, "edited": false, "score": 0, "creation_date": 1533501089, "post_id": 51697821, "comment_id": 90357467, "body": "\u2026 in the sense that the printed value does not equal the represented value, so it has lost some of the value)."}, {"owner": {"reputation": 139300, "user_id": 298225, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef102f4ee36e58d09e0b27cd5393a1d8?s=128&d=identicon&r=PG", "display_name": "Eric Postpischil", "link": "https://stackoverflow.com/users/298225/eric-postpischil"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533501349, "post_id": 51697821, "comment_id": 90357518, "body": "@Shepmaster: Per IEEE-754, each floating-point number represents one number exactly. For example, in IEEE-754 basic 32-bit binary floating-point, the least non-zero number represented is 2^-149, which, when represented in decimal, has 149 digits after the decimal point. Since it has 44 leading zeros, it has 105 significant digits. Producing all the digits needed to be lossless is merely (in general) rounding to a decimal numeral, not producing the actual digits of the represented number."}], "answers": [{"comments": [{"owner": {"reputation": 139300, "user_id": 298225, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef102f4ee36e58d09e0b27cd5393a1d8?s=128&d=identicon&r=PG", "display_name": "Eric Postpischil", "link": "https://stackoverflow.com/users/298225/eric-postpischil"}, "edited": false, "score": 1, "creation_date": 1533501116, "post_id": 51697963, "comment_id": 90357477, "body": "Since this answer is not correct, you ought to delete it before the down votes start."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 139300, "user_id": 298225, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef102f4ee36e58d09e0b27cd5393a1d8?s=128&d=identicon&r=PG", "display_name": "Eric Postpischil", "link": "https://stackoverflow.com/users/298225/eric-postpischil"}, "edited": false, "score": 0, "creation_date": 1533550390, "post_id": 51697963, "comment_id": 90371279, "body": "Left it because I was going to fix it."}, {"owner": {"reputation": 139300, "user_id": 298225, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ef102f4ee36e58d09e0b27cd5393a1d8?s=128&d=identicon&r=PG", "display_name": "Eric Postpischil", "link": "https://stackoverflow.com/users/298225/eric-postpischil"}, "edited": false, "score": 0, "creation_date": 1533576902, "post_id": 51697963, "comment_id": 90387157, "body": "For future reference, you can delete, edit, and undelete."}], "tags": [], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "is_accepted": false, "score": 0, "last_activity_date": 1533550380, "last_edit_date": 1533550380, "creation_date": 1533500435, "answer_id": 51697963, "question_id": 51697821, "link": "https://stackoverflow.com/questions/51697821/convert-float-to-string-containing-all-digits/51697963#51697963", "title": "Convert float to string containing all digits", "body": "<p>This seems to do the trick:</p>\n\n<pre><code>format!(\"{:.51}\", i).trim_right_matches(|c| c == '0' || c == '.').to_string();\n</code></pre>\n\n<p>It's a little crap in that you need to specify in advance the maximum number of digits necessary, and I'm not 100% sure about the 51 (for <code>f32</code> - it will be much more for <code>f64</code>).</p>\n\n<p>Also <code>trim_right_matches()</code> returns a <code>&amp;str</code> and then <code>to_string()</code> makes a new <code>String</code> out of it, which is suboptimal. You could do it better just by <code>truncate()</code>ing the <code>String</code> returned by <code>format!()</code>.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 115, "favorite_count": 0, "closed_date": 1533500839, "answer_count": 1, "score": 0, "last_activity_date": 1533550380, "creation_date": 1533499321, "question_id": 51697821, "link": "https://stackoverflow.com/questions/51697821/convert-float-to-string-containing-all-digits", "closed_reason": "Duplicate", "title": "Convert float to string containing all digits", "body": "<p>In Rust, I can convert a float to a string using <code>println!</code> or <code>.to_string()</code>, but it will only print the necessary digits to be lossless. How can I get <em>all</em> the digits of a float? For example <code>0.1f32</code> should be converted to <code>\"0.100000001490116119384765625\"</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533486758, "post_id": 51695726, "comment_id": 90353764, "body": "<i><code>use std::boxed::Box;</code></i> \u2014 you do not need to import <code>Box</code>. It&#39;s part of the prelude (like <code>Result</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533486994, "post_id": 51695726, "comment_id": 90353819, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/48180008/155423\">How can I box the contents of an iterator of a type that implements a trait?</a> and/or <a href=\"https://stackoverflow.com/q/48218224/155423\">Trait mismatch for function argument</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/51695726/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 75, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1533486704, "creation_date": 1533483264, "last_edit_date": 1533486704, "question_id": 51695726, "link": "https://stackoverflow.com/questions/51695726/why-would-resultmap-have-a-compilation-error-when-a-match-expression-does-not", "title": "Why would Result::map have a compilation error when a match expression does not?", "body": "<p>I'm trying to understand why <code>map</code> triggers a compilation error where a <code>match</code> expression doesn't.</p>\n\n<p>I have:</p>\n\n<pre><code>use std::boxed::Box;\nuse std::io::Error;\n\ntrait MyTrait {\n    fn foo(&amp;self);\n}\n\nstruct MyStruct { }\n\nimpl MyTrait for MyStruct {\n    fn foo(&amp;self) { }\n}\n</code></pre>\n\n<p>I'd like to write a function that transforms an instance of <code>MyStruct</code> to an instance of <code>Box&lt;MyTrait&gt;</code>.</p>\n\n<p>This compiles:</p>\n\n<pre><code>fn bar() -&gt; Result&lt;Box&lt;MyTrait&gt;, Error&gt; {\n    let x = Ok(MyStruct {});\n    match x {\n        Ok(y) =&gt; Ok(Box::new(y)),\n        Err(err) =&gt; Err(err),\n    }\n} \n</code></pre>\n\n<p>While this:</p>\n\n<pre><code>fn bar() -&gt; Result&lt;Box&lt;MyTrait&gt;, Error&gt; {\n    let x = Ok(MyStruct {});\n    x.map(|y| Box::new(y))\n} \n</code></pre>\n\n<p>Gives an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src\\main.rs:16:2\n   |\n14 | fn bar() -&gt; Result&lt;Box&lt;MyTrait&gt;, Error&gt; {\n   |             --------------------------- expected `std::result::Result&lt;std::boxed::Box&lt;MyTrait + 'static&gt;, std::io::Error&gt;` because of return type\n15 |    let x = Ok(MyStruct {});\n16 |    x.map(|y| Box::new(y))\n   |  ^^^^^^^^^^^^^^^^^^^^^^ expected trait MyTrait, found struct `MyStruct`\n   |\n   = note: expected type `std::result::Result&lt;std::boxed::Box&lt;MyTrait + 'static&gt;, std::io::Error&gt;`\n              found type `std::result::Result&lt;std::boxed::Box&lt;MyStruct&gt;, _&gt;`\n</code></pre>\n\n<p>What's the difference between the two <code>bar()</code> implementations?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1533470010, "post_id": 51694017, "comment_id": 90349427, "body": "There is no way to express that only some tests cannot run in parallel. Those tests should access probably the shared resource through a <code>Mutex</code>."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 3, "creation_date": 1533470522, "post_id": 51694017, "comment_id": 90349558, "body": "It sounds like you have &quot;tests&quot; and &quot;integration tests&quot;. It sounds reasonable to split up them into two projects and run them separately."}, {"owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "edited": false, "score": 0, "creation_date": 1533470584, "post_id": 51694017, "comment_id": 90349575, "body": "Yes, this could be a way.. where integration tests need to run in a single thread"}], "answers": [{"comments": [{"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 0, "creation_date": 1541773649, "post_id": 51694631, "comment_id": 93341841, "body": "Was looking for exactly this. It would be an interesting feature for the Core team to include (preventing some tests to run in parallel). I see this becoming even more relevant with larger and more complex code bases."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 1, "creation_date": 1541774000, "post_id": 51694631, "comment_id": 93342035, "body": "@Dash83 with the upcoming support for custom test harnesses, I expect that such a thing will show up in some new test harness. It&#39;s really a niche thing for the core test framework to have."}, {"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 0, "creation_date": 1542024511, "post_id": 51694631, "comment_id": 93407964, "body": "That&#39;s good to know. For reference, I don&#39;t think the feature of excluding tests to run in parallel is that niche. Large code bases that use shared resources often have that requirement."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1594059665, "last_edit_date": 1594059665, "creation_date": 1533474753, "answer_id": 51694631, "question_id": 51694017, "link": "https://stackoverflow.com/questions/51694017/how-can-i-avoid-running-some-tests-in-parallel/51694631#51694631", "title": "How can I avoid running some tests in parallel?", "body": "<p>As <a href=\"https://stackoverflow.com/questions/51694017/avoid-running-some-tests-in-parallel#comment90349427_51694017\">mcarton mentions in the comments</a>, you can use a <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a> to prevent multiple pieces of code from running at the same time:</p>\n<pre><code>use once_cell::sync::Lazy; // 1.4.0\nuse std::{sync::Mutex, thread::sleep, time::Duration};\n\nstatic THE_RESOURCE: Lazy&lt;Mutex&lt;()&gt;&gt; = Lazy::new(Mutex::default);\n\ntype TestResult&lt;T = (), E = Box&lt;dyn std::error::Error&gt;&gt; = std::result::Result&lt;T, E&gt;;\n\n#[test]\nfn one() -&gt; TestResult {\n    let _shared = THE_RESOURCE.lock()?;\n    eprintln!(&quot;Starting test one&quot;);\n    sleep(Duration::from_secs(1));\n    eprintln!(&quot;Finishing test one&quot;);\n    Ok(())\n}\n\n#[test]\nfn two() -&gt; TestResult {\n    let _shared = THE_RESOURCE.lock()?;\n    eprintln!(&quot;Starting test two&quot;);\n    sleep(Duration::from_secs(1));\n    eprintln!(&quot;Finishing test two&quot;);\n    Ok(())\n}\n</code></pre>\n<p>If you run with <code>cargo test -- --nocapture</code>, you can see the difference in behavior:</p>\n<p><strong>No lock</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code>running 2 tests\nStarting test one\nStarting test two\nFinishing test two\nFinishing test one\ntest one ... ok\ntest two ... ok\n</code></pre>\n<p><strong>With lock</strong></p>\n<pre class=\"lang-none prettyprint-override\"><code>running 2 tests\nStarting test one\nFinishing test one\nStarting test two\ntest one ... ok\nFinishing test two\ntest two ... ok\n</code></pre>\n<p>Ideally, you'd put the external resource <em>itself</em> in the <code>Mutex</code> to make the code represent the fact that it's a singleton and remove the need to remember to lock the otherwise-unused <code>Mutex</code>.</p>\n<p>This does have the <em>massive</em> downside that a panic in a test (a.k.a an <code>assert!</code> failure) will cause the <code>Mutex</code> to become poisoned. This will then cause subsequent tests to fail to acquire the lock. If you need to avoid that and you know the locked resource is in a good state (and <code>()</code> should be fine...) you can handle the poisoning:</p>\n<pre><code>let _shared = THE_RESOURCE.lock().unwrap_or_else(|e| e.into_inner());\n</code></pre>\n<p>If you need the ability to run a limited set of threads in parallel, you can use a semaphore. Here, I've built a poor one using <a href=\"https://doc.rust-lang.org/std/sync/struct.Condvar.html\" rel=\"nofollow noreferrer\"><code>Condvar</code></a> with a <code>Mutex</code>:</p>\n<pre><code>use std::{\n    sync::{Condvar, Mutex},\n    thread::sleep,\n    time::Duration,\n};\n\n#[derive(Debug)]\nstruct Semaphore {\n    mutex: Mutex&lt;usize&gt;,\n    condvar: Condvar,\n}\n\nimpl Semaphore {\n    fn new(count: usize) -&gt; Self {\n        Semaphore {\n            mutex: Mutex::new(count),\n            condvar: Condvar::new(),\n        }\n    }\n\n    fn wait(&amp;self) -&gt; TestResult {\n        let mut count = self.mutex.lock().map_err(|_| &quot;unable to lock&quot;)?;\n        while *count == 0 {\n            count = self.condvar.wait(count).map_err(|_| &quot;unable to lock&quot;)?;\n        }\n        *count -= 1;\n        Ok(())\n    }\n\n    fn signal(&amp;self) -&gt; TestResult {\n        let mut count = self.mutex.lock().map_err(|_| &quot;unable to lock&quot;)?;\n        *count += 1;\n        self.condvar.notify_one();\n        Ok(())\n    }\n\n    fn guarded(&amp;self, f: impl FnOnce() -&gt; TestResult) -&gt; TestResult {\n        // Not panic-safe!\n        self.wait()?;\n        let x = f();\n        self.signal()?;\n        x\n    }\n}\n\nlazy_static! {\n    static ref THE_COUNT: Semaphore = Semaphore::new(4);\n}\n</code></pre>\n\n<pre><code>THE_COUNT.guarded(|| {\n    eprintln!(&quot;Starting test {}&quot;, id);\n    sleep(Duration::from_secs(1));\n    eprintln!(&quot;Finishing test {}&quot;, id);\n    Ok(())\n})\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44947914/155423\">How to limit the number of test threads in Cargo.toml?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1573831633, "creation_date": 1573831633, "answer_id": 58880079, "question_id": 51694017, "link": "https://stackoverflow.com/questions/51694017/how-can-i-avoid-running-some-tests-in-parallel/58880079#58880079", "title": "How can I avoid running some tests in parallel?", "body": "<p>You can always provide your own test harness. You can do that by adding a <code>[[test]]</code> entry to <code>Cargo.toml</code>:</p>\n\n<pre><code>[[test]]\nname = \"my_test\"\n# If your test file is not `tests/my_test.rs`, add this key:\n#path = \"path/to/my_test.rs\" \nharness = false\n</code></pre>\n\n<p>In that case, <code>cargo test</code> will compile <code>my_test.rs</code> as a normal executable file. That means you have to provide a <code>main</code> function and add all the \"run tests\" logic yourself. Yes, this is some work, but at least you can decide everything about running tests yourself.</p>\n\n<hr>\n\n<p>You can also create two test files:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>tests/\n  - sequential.rs\n  - parallel.rs\n</code></pre>\n\n<p>You then would need to run <code>cargo test --test sequential -- --test-threads=1</code> and <code>cargo test --test parallel</code>. So it doesn't work with a single <code>cargo test</code>, but you don't need to write your own test harness logic.</p>\n"}, {"tags": [], "owner": {"reputation": 389, "user_id": 5699173, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fca3d2f32270d9e6be9a9518b1b5f0a1?s=128&d=identicon&r=PG&f=1", "display_name": "D G", "link": "https://stackoverflow.com/users/5699173/d-g"}, "is_accepted": true, "score": 4, "last_activity_date": 1593945412, "creation_date": 1593945412, "answer_id": 62739583, "question_id": 51694017, "link": "https://stackoverflow.com/questions/51694017/how-can-i-avoid-running-some-tests-in-parallel/62739583#62739583", "title": "How can I avoid running some tests in parallel?", "body": "<p>Use the <a href=\"https://docs.rs/serial_test/0.4.0/serial_test/\" rel=\"nofollow noreferrer\">serial_test</a> crate. With this crate added, you put in your code:</p>\n<pre><code>#[serial]\n</code></pre>\n<p>in front of any test you want run in sequentially.</p>\n"}], "owner": {"reputation": 5321, "user_id": 157726, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/PY0sR.png?s=128&g=1", "display_name": "Juan Leni", "link": "https://stackoverflow.com/users/157726/juan-leni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1438, "favorite_count": 1, "accepted_answer_id": 62739583, "answer_count": 3, "score": 4, "last_activity_date": 1594059665, "creation_date": 1533469511, "last_edit_date": 1533586047, "question_id": 51694017, "link": "https://stackoverflow.com/questions/51694017/how-can-i-avoid-running-some-tests-in-parallel", "title": "How can I avoid running some tests in parallel?", "body": "<p>I have a collection of tests. There are a few tests that need to access a shared resource (external library/API/hardware device). If any of these tests run in parallel, they fail.</p>\n\n<p>I know I could run everything using <code>--test-threads=1</code> but I find that inconvenient just for a couple of special tests.</p>\n\n<p>Is there any way to keep running all tests in parallel and have an exception for a few? Ideally, I would like to say do not run X, Y, Z at the same time.</p>\n"}, {"tags": ["rust", "rust-cargo", "crate"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1533463552, "post_id": 51692485, "comment_id": 90348025, "body": "There&#39;s nothing obviously wrong from what you&#39;ve said, but could you make a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>?"}, {"owner": {"reputation": 186, "user_id": 1973224, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/Q5yNQ.png?s=128&g=1", "display_name": "Arndroid", "link": "https://stackoverflow.com/users/1973224/arndroid"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533465760, "post_id": 51692485, "comment_id": 90348479, "body": "Thanks @PeterHall , I have added some code and file contents, it was a freshly created project."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533466494, "post_id": 51692485, "comment_id": 90348645, "body": "I understand everything up until you say &quot;First 14 lines of the lib.rs in the .cargo folder:&quot;. Your project is a binary so what is this <code>lib.rs</code>?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1533466584, "post_id": 51692485, "comment_id": 90348665, "body": "Your minimal repro works just fine for me. Are you sure it is correct? If so, we&#39;ll need more information about your environment, how you compile, versions of cargo and rustc, etc."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533466845, "post_id": 51692485, "comment_id": 90348721, "body": "Perhaps just try deleting your <code>.cargo</code> folder, in case something is corrupted in there."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533466912, "post_id": 51692485, "comment_id": 90348737, "body": "Also, to be clear, you are not trying to use <code>void</code>, it&#39;s a transitive dependency?"}, {"owner": {"reputation": 186, "user_id": 1973224, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/Q5yNQ.png?s=128&g=1", "display_name": "Arndroid", "link": "https://stackoverflow.com/users/1973224/arndroid"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533467413, "post_id": 51692485, "comment_id": 90348845, "body": "@PeterHall I only included it because the error message is saying it cannot find the <code>void</code> crate which that <code>lib.rs</code> is asking for. Other than that, I have tried to remove the<code>.cargo</code> folder and run <code>cargo run</code> again, but no dice. Other than the <code>unreachable</code> crate which <code>imap</code> needs it seems, I do not intend to use the <code>void</code> crate myself intentionally."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533467480, "post_id": 51692485, "comment_id": 90348863, "body": "What Rust version?"}, {"owner": {"reputation": 186, "user_id": 1973224, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/Q5yNQ.png?s=128&g=1", "display_name": "Arndroid", "link": "https://stackoverflow.com/users/1973224/arndroid"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1533467654, "post_id": 51692485, "comment_id": 90348897, "body": "@mcarton I compile with <code>cargo run</code>, after creating the project with <code>cargo new imap_project --bin</code>. I use Visual Studio Code, using <code>Rust (rls) 0.4.9</code> and run the commands from PowerShell, as a integrated Terminal Window in VSCode, running on a Windows 10 machine. I ran <code>rustc update</code> as well and tried to create another project using the <code>imap</code> crate, yet no dice. Is there more info you would like me to provide? All the code I wrote myself so far can be found under the Edit, it&#39;s truly a fresh new clean project."}, {"owner": {"reputation": 186, "user_id": 1973224, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/Q5yNQ.png?s=128&g=1", "display_name": "Arndroid", "link": "https://stackoverflow.com/users/1973224/arndroid"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533467707, "post_id": 51692485, "comment_id": 90348917, "body": "@PeterHall currently: <code>rustc 1.28.0 (9634041f0 2018-07-30)</code>, after running <code>rustc -V</code> from the integrated PowerShell terminal in VSCode."}, {"owner": {"reputation": 46, "user_id": 10202797, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7182c5553d19ced44320df92a4b74342?s=128&d=identicon&r=PG&f=1", "display_name": "dario", "link": "https://stackoverflow.com/users/10202797/dario"}, "edited": false, "score": 0, "creation_date": 1533841322, "post_id": 51692485, "comment_id": 90511438, "body": "what&#39;s the contents of your <code>Cargo.lock</code> for the minimal project (i.e. what versions of the dependendies are actually used)? have you tried running <code>cargo update</code> and trying to build again? the fact that the build is working for other people (and i was just able to reproduce it) seems to hint at wrong versions of dependencies used."}, {"owner": {"reputation": 186, "user_id": 1973224, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/Q5yNQ.png?s=128&g=1", "display_name": "Arndroid", "link": "https://stackoverflow.com/users/1973224/arndroid"}, "reply_to_user": {"reputation": 46, "user_id": 10202797, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7182c5553d19ced44320df92a4b74342?s=128&d=identicon&r=PG&f=1", "display_name": "dario", "link": "https://stackoverflow.com/users/10202797/dario"}, "edited": false, "score": 0, "creation_date": 1533976715, "post_id": 51692485, "comment_id": 90552831, "body": "@dario I have added my <code>Cargo.lock</code> under Edit 2. I just tried <code>cargo update</code>, that runs without errors. After running that however, <code>cargo build</code> and <code>cargo run</code> still give the same compile error. I was thinking, perhaps you could share your project using <code>Imap</code> with me? (Even just a &quot;Hello World&quot; project, as long as it&#39;s using the <code>Imap</code> crate and compiles?) Just to sanity check my system? Thanks for the help."}], "owner": {"reputation": 186, "user_id": 1973224, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/Q5yNQ.png?s=128&g=1", "display_name": "Arndroid", "link": "https://stackoverflow.com/users/1973224/arndroid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 2203, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1537385258, "creation_date": 1533455753, "last_edit_date": 1537385258, "question_id": 51692485, "link": "https://stackoverflow.com/questions/51692485/rust-cant-find-extern-crate-for-a-extern-crate", "title": "Rust can&#39;t find extern crate for a extern crate", "body": "<blockquote>\n  <p>error: extern location for void does not exist: C:\\Rust\n  Projects\\imap_project\\target\\debug\\deps\\libvoid-9f5065312e4dff17.rlib</p>\n  \n  <p>error[E0463]: can't find crate for <code>void</code>   -->\n  C:\\Users\\Arndroid.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\unreachable-1.0.0\\src\\lib.rs:12:1</p>\n  \n  <p>| 12 | extern crate void;<br>\n  | ^^^^^^^^^^^^^^^^^^ can't find crate</p>\n</blockquote>\n\n<p>I can build <code>github.com-1ecc6299db9ec823\\unreachable-1.0.0</code> with <code>cargo build</code> just fine, though.</p>\n\n<p>I'm kinda at a loss as of what to do.\nI'm trying to add this crate:</p>\n\n<p><a href=\"https://crates.io/crates/imap\" rel=\"nofollow noreferrer\">https://crates.io/crates/imap</a></p>\n\n<p>At this moment I made my <code>[dependencies]</code> look like this:</p>\n\n<pre><code>[dependencies]\nvoid = \"1.0.2\"\nbuzz = \"1.1.0\"\nbufstream = \"0.1\"\nimap-proto = \"0.4.1\"\nnative-tls = \"0.1\"\nnom = \"3.2.1\"\nregex = \"0.2\"\nunreachable = \"1.0.0\"\nimap = \"0.8.1\"\n</code></pre>\n\n<p>I also tried it with just <code>imap = 0.8.1</code>, but that didn't work. But I didn't want to exclude the possibility.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Minimal code as per suggestion:</p>\n\n<p><code>Cargo.toml</code>: </p>\n\n<pre><code>[package]\nname = \"imap_project\"\nversion = \"0.1.0\"\nauthors = [\"Name &amp; Email\"]\n\n[dependencies]\nimap = \"0.8.1\"\n</code></pre>\n\n<p><code>main.rs</code>:</p>\n\n<pre><code>extern crate imap;\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>Literally all I have at the moment actually, fresh cargo initialized project:</p>\n\n<pre><code>cargo new imap_project --bin\n</code></pre>\n\n<p>First 14 lines of the <code>lib.rs</code> in the <code>.cargo</code> folder:</p>\n\n<pre><code>#![cfg_attr(test, deny(warnings))]\n#![deny(missing_docs)]\n\n//! # unreachable\n//!\n//! An unreachable code optimization hint in stable rust, and some useful\n//! extension traits for `Option` and `Result`.\n//!\n\n#![no_std]\n\nextern crate void;\n\nuse core::mem;\n(...)\n</code></pre>\n\n<p>I can't think of more to provide at this time, if I can, please let me know.</p>\n\n<p><strong>Edit 2:</strong></p>\n\n<pre><code>[[package]]\nname = \"aho-corasick\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"bufstream\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"click_mail\"\nversion = \"0.1.0\"\ndependencies = [\n \"imap 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"fuchsia-zircon\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"fuchsia-zircon-sys\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"imap\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"imap-proto 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"native-tls 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"nom 3.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"imap-proto\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"nom 3.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"version_check 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"memchr\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"openssl 0.9.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"schannel 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"security-framework 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"security-framework-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"memchr 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"openssl\"\nversion = \"0.9.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"openssl-sys 0.9.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"pkg-config 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"vcpkg 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"aho-corasick 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"regex-syntax 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"security-framework\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"core-foundation 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"security-framework-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"tempdir\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"ucd-util\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"unreachable\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"utf8-ranges\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"void\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[metadata]\n\"checksum aho-corasick 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1c6d463cbe7ed28720b5b489e7c083eeb8f90d08be2a0d6bb9e1ffea9ce1afa\"\n\"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n\"checksum bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0c54bb8f454c567f21197eefcdbf5679d0bd99f2ddbe52e84c77061952e6789\"\n\"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n\"checksum cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2119ea4867bd2b8ed3aecab467709720b2d55b1bcfe09f772fd68066eaf15275\"\n\"checksum core-foundation 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25bfd746d203017f7d5cbd31ee5d8e17f94b6521c7af77ece6c9e4b2d4b16c67\"\n\"checksum core-foundation-sys 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"065a5d7ffdcbc8fa145d6f0746f3555025b9097a9e9cda59f7467abae670c78d\"\n\"checksum foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\n\"checksum foreign-types-shared 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n\"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n\"checksum imap 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3072853e727ec65d846008463e37265d8fe4917ed68765ae7dda2d1f5e65860b\"\n\"checksum imap-proto 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8733e1ad1058e09532090e95b1debda73cc25ea4d1ba53bf4a60870c19865952\"\n\"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n\"checksum lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca488b89a5657b0a2ecd45b95609b3e848cf1755da332a0da46e2b2b1cb371a7\"\n\"checksum libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76e3a3ef172f1a0b9a9ff0dd1491ae5e6c948b94479a3021819ba7d860c8645d\"\n\"checksum memchr 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"148fab2e51b4f1cfc66da2a7c32981d1d3c083a803978268bb11fe4b86925e7a\"\n\"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n\"checksum native-tls 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f74dbadc8b43df7864539cedb7bc91345e532fdd913cfdc23ad94f4d2d40fbc0\"\n\"checksum nom 3.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05aec50c70fd288702bcd93284a8444607f3292dbdf2a30de5ea5dcdbe72287b\"\n\"checksum openssl 0.9.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a3605c298474a3aa69de92d21139fb5e2a81688d308262359d85cdd0d12a7985\"\n\"checksum openssl-sys 0.9.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"912f301a749394e1025d9dcddef6106ddee9252620e6d0a0e5f8d0681de9b129\"\n\"checksum pkg-config 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"104630aa1c83213cbc76db0703630fcb0421dac3585063be4ce9a8a2feeaa745\"\n\"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n\"checksum regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9329abc99e39129fcceabd24cf5d85b4671ef7c29c50e972bc5afe32438ec384\"\n\"checksum regex-syntax 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d707a4fa2637f2dca2ef9fd02225ec7661fe01a53623c1e6515b6916511f7a7\"\n\"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n\"checksum schannel 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc1fabf2a7b6483a141426e1afd09ad543520a77ac49bd03c286e7696ccfd77f\"\n\"checksum security-framework 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dfa44ee9c54ce5eecc9de7d5acbad112ee58755239381f687e564004ba4a2332\"\n\"checksum security-framework-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5421621e836278a0b139268f36eee0dc7e389b784dc3f79d8f11aabadf41bead\"\n\"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n\"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963\"\n\"checksum ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd2be2d6639d0f8fe6cdda291ad456e23629558d466e2789d2c3e9892bda285d\"\n\"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n\"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n\"checksum vcpkg 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbe533e138811704c0e3cbde65a818b35d3240409b4346256c5ede403e082474\"\n\"checksum version_check 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7716c242968ee87e5542f8021178248f267f295a5c4803beae8b8b7fd9bc6051\"\n\"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n\"checksum winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"773ef9dcc5f24b7d850d0ff101e542ff24c3b090a9768e03ff889fdef41f00fd\"\n\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n</code></pre>\n"}, {"tags": ["tcp", "rust"], "answers": [{"tags": [], "owner": {"reputation": 568, "user_id": 10180849, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j7g5f.jpg?s=128&g=1", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0428\u0443\u043b\u0438\u0446\u043a\u0438\u0439", "link": "https://stackoverflow.com/users/10180849/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%a8%d1%83%d0%bb%d0%b8%d1%86%d0%ba%d0%b8%d0%b9"}, "is_accepted": true, "score": 5, "last_activity_date": 1533455571, "creation_date": 1533455571, "answer_id": 51692468, "question_id": 51692181, "link": "https://stackoverflow.com/questions/51692181/bufwriterwrite-doesnt-write-bytes-to-tcpstream/51692468#51692468", "title": "BufWriter::write() doesn&#39;t write bytes to TcpStream", "body": "<p>You need to flush the buffers: <code>writer.flush()</code></p>\n\n<p>Fixed server:</p>\n\n<pre><code>use std::net::{TcpListener, TcpStream};\nuse std::thread;\nuse std::io::Write;\nuse std::io::BufReader;\nuse std::io::BufRead;\nuse std::io::BufWriter;\n\nfn handle_connection(stream: TcpStream) {\n    let stream_clone = stream.try_clone().unwrap();\n    let mut reader = BufReader::new(stream);\n    let mut writer = BufWriter::new(stream_clone);\n    loop {\n        let mut s = String::new();\n        reader.read_line(&amp;mut s).unwrap();\n        writer.write(s.as_bytes()).unwrap();\n        writer.flush().unwrap();\n    }\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:8888\")\n        .unwrap();\n    for stream in listener.incoming() {\n        thread::spawn(move || {\n            handle_connection(stream.unwrap());\n        });\n    }\n}\n</code></pre>\n\n<p>Client:</p>\n\n<pre><code>use std::net::TcpStream;\nuse std::io;\nuse std::io::Write;\nuse std::io::BufReader;\nuse std::io::BufRead;\nuse std::io::BufWriter;\n\nfn main() {\n    let stream = TcpStream::connect(\"127.0.0.1:8888\")\n        .unwrap();\n    let stream_clone = stream.try_clone().unwrap();\n    let mut reader = BufReader::new(stream);\n    let mut writer = BufWriter::new(stream_clone);\n    loop {\n        let mut s = String::new();\n        let mut response = String::new();\n        io::stdin().read_line(&amp;mut s).unwrap();\n        writer.write(s.as_bytes()).unwrap();\n        writer.flush().unwrap();\n        reader.read_line(&amp;mut response).unwrap();\n        println!(\"{}\", response.trim());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 355, "user_id": 5955876, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/5b29bb86b71b9c789283bd5180355d5c?s=128&d=identicon&r=PG&f=1", "display_name": "Count Zero", "link": "https://stackoverflow.com/users/5955876/count-zero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 424, "favorite_count": 0, "accepted_answer_id": 51692468, "answer_count": 1, "score": 2, "last_activity_date": 1533473686, "creation_date": 1533452856, "last_edit_date": 1533473686, "question_id": 51692181, "link": "https://stackoverflow.com/questions/51692181/bufwriterwrite-doesnt-write-bytes-to-tcpstream", "title": "BufWriter::write() doesn&#39;t write bytes to TcpStream", "body": "<p>I've written an echo server and client in Rust. Here is my code:</p>\n\n<p>Server:</p>\n\n<pre><code>use std::net::{TcpListener, TcpStream};\nuse std::thread;\nuse std::io::Write;\nuse std::io::BufReader;\nuse std::io::BufRead;\nuse std::io::BufWriter;\n\nfn handle_connection(stream: TcpStream) {\n    let stream_clone = stream.try_clone().unwrap();\n    let mut reader = BufReader::new(stream);\n    let mut writer = BufWriter::new(stream_clone);\n    loop {\n        let mut s = String::new();\n        reader.read_line(&amp;mut s).unwrap();\n        writer.write(s.as_bytes()).unwrap();\n    }\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:8888\")\n        .unwrap();\n    for stream in listener.incoming() {\n        thread::spawn(move || {\n            handle_connection(stream.unwrap());\n        });\n    }\n}\n</code></pre>\n\n<p>Client:</p>\n\n<pre><code>use std::net::TcpStream;\nuse std::io;\nuse std::io::Write;\nuse std::io::BufReader;\nuse std::io::BufRead;\nuse std::io::BufWriter;\n\nfn main() {\n    let stream = TcpStream::connect(\"127.0.0.1:8888\")\n        .unwrap();\n    let stream_clone = stream.try_clone().unwrap();\n    let mut reader = BufReader::new(stream);\n    let mut writer = BufWriter::new(stream_clone);\n    loop {\n        let mut s = String::new();\n        let mut response = String::new();\n        io::stdin().read_line(&amp;mut s).unwrap();\n        writer.write(s.as_bytes()).unwrap();\n        reader.read_line(&amp;mut response).unwrap();\n        println!(\"{}\", response.trim());\n    }\n}\n</code></pre>\n\n<p>When I test the code, the server don't respond at all. My guess is that something is wrong with the <code>write</code> method. Am I right, or is there another reason?</p>\n"}, {"tags": ["compiler-errors", "rust", "traits", "typechecking"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1533459488, "post_id": 51691288, "comment_id": 90347174, "body": "It seems to me that you would want <code>Bar</code>s of <code>Box</code>es rather than <code>Box</code>es of <code>Bar</code>s. Switching these ought to fix the issue."}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1533467420, "post_id": 51691288, "comment_id": 90348847, "body": "I have considered this approach but <code>Box&lt;dyn Foo&gt;</code> does not implement <code>Foo</code>. In reality <code>Foo</code> is a a larger trait and and implementing everything for a <code>Box&lt;dyn Foo&gt;</code> would be a chore. One option is switching the bound for _T_/<code>::new</code> to <code>AsRef&lt;dyn Foo&gt;</code> which works but is not quite as neat."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533476277, "post_id": 51691288, "comment_id": 90350904, "body": "<i>but <code>Box&lt;dyn Foo&gt;</code> does not implement <code>Foo</code></i> \u2014 <a href=\"https://stackoverflow.com/q/33041736/155423\">so implement it...</a>."}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533476423, "post_id": 51691288, "comment_id": 90350946, "body": "In reality <code>Foo</code> is sizeable trait and implementing a it would not only be a chore, but also feels like something the compiler should be able to handle."}], "answers": [{"comments": [{"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533467947, "post_id": 51693457, "comment_id": 90348979, "body": "<i>However, this is unlikely to be what you really want, since you have a T field in the struct, which must be sized</i>  That was my initial thought but what surprised me is that this seems to work fine?!  I assume that in practice the compiler fails if <i>T</i> is an unsized type even with <code>?Sized</code> bound. Example <a href=\"https://play.rust-lang.org/?gist=cfdc32f082fb502777e828ef4ac9c04e&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533468137, "post_id": 51693457, "comment_id": 90349023, "body": "You&#39;ll get an error if you try to actually <i>use</i> an unsized type there."}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533468401, "post_id": 51693457, "comment_id": 90349062, "body": "Which is fine since I don&#39;t actually want to pass any unsized types. Although I still don&#39;t understand why adding <code>?Sized</code> should be necessary for <code>Box&lt;Bar&lt;dyn Foo&gt;&gt;</code> to work."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533468553, "post_id": 51693457, "comment_id": 90349092, "body": "@mgoszcz2 That&#39;s because the type <code>dyn Foo</code> is not <code>Sized</code>."}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533468758, "post_id": 51693457, "comment_id": 90349123, "body": "This brings me back to original question. What tracks the physical heap size of a boxed <code>Bar&lt;dyn Foo&gt;</code>? Is it just that all trait objects, being only vtables, have the same size?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533470376, "post_id": 51693457, "comment_id": 90349524, "body": "Nothing tracks the physical heap sized of a boxed <code>Bar&lt;dyn Foo&gt;</code>. If you try to construct one, you&#39;ll find out that you can&#39;t."}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533470672, "post_id": 51693457, "comment_id": 90349602, "body": "What happens in that playground then. (<a href=\"https://play.rust-lang.org/?gist=cfdc32f082fb502777e828ef4ac9c04e&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Link for connivance</a>)"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533473564, "post_id": 51693457, "comment_id": 90350267, "body": "Ok, this actually makes sense - I just didn&#39;t know this was allowed. When you construct a <code>Bar</code>, its size is known because you use a concrete type. Each <code>Bar&lt;T&gt;</code> could have a different size, which still works because they are boxed."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533473708, "post_id": 51693457, "comment_id": 90350306, "body": "And the <code>?Sized</code> is required for the inner <code>Bar</code>s in the <code>Vec</code>."}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533474023, "post_id": 51693457, "comment_id": 90350370, "body": "I assume that <code>Bar&lt;dyn Foo&gt;</code> is then a normal <code>Bar</code> with the two pointer trait object (<code>std::raw::TraitObject</code>) as <i>T</i>. I guess in this case <code>?Sized</code> means &quot;well it&#39;s a trait object&quot; not actually without a defined size."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533474176, "post_id": 51693457, "comment_id": 90350420, "body": "<code>dyn Trait</code> really is without a defined size. <code>&amp;dyn Trait</code> and <code>Box&lt;dyn Trait&gt;</code> both have a size, but that&#39;s just the size of the pointer. <code>Bar&lt;dyn Foo&gt;</code> is also unsized, until you put in in a box."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533474758, "post_id": 51693457, "comment_id": 90350555, "body": "I have updated the answer, hopefully to reflect your actual question better"}, {"owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "edited": false, "score": 0, "creation_date": 1533475614, "post_id": 51693457, "comment_id": 90350764, "body": "Thanks. There is still one thing I&#39;m not clear on. <code>Box&lt;dyn Trait&gt;</code> is a pointer to a trait object on the heap. How is <code>Box&lt;Foo&lt;dyn Bar&gt;&gt;</code> represented? Does the box point to <code>Foo</code> and type of field <code>foo</code> becomes a trait object? If not where is the trait object stored and what does <code>foo</code> become?"}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 0, "last_activity_date": 1533489782, "last_edit_date": 1533489782, "creation_date": 1533464713, "answer_id": 51693457, "question_id": 51691288, "link": "https://stackoverflow.com/questions/51691288/size-of-a-box-containing-a-struct-with-a-trait-parameter/51693457#51693457", "title": "Size of a box containing a struct with a trait parameter", "body": "<p>The type <code>dyn Foo</code> does not have a size known at compile time. So when you write <code>Bar&lt;dyn Foo&gt;</code>, the compiler won't allow it because (by default) type parameters must be sized. The compiler suggests that you fix this by allowing <code>T</code> to be unsized, which is necessary for <code>T</code> to be <code>dyn Foo</code>.</p>\n\n<blockquote>\n  <p>how is <code>Bar</code> with an unsized <code>T</code> represented in memory?</p>\n</blockquote>\n\n<p>A struct is allowed to have at most one unsized field. Its data is then laid out in memory with the sized fields first, and then the unsized field last. This restriction means that relative memory addresses of all fields can be known at compile-time. A struct with a <code>?Sized</code> type parameter can itself be either sized or unsized, depending on the concrete type of its argument. When the struct is unsized, it can't go on the stack so you can only use it from behind a pointer. </p>\n\n<p>There is currently no documentation for this kind of object. It's not exactly a trait object, but it's a pointer to something that may not be sized. As your example shows, this works. But I cannot tell you where the <code>vtable</code> pointer is stored because I don't know, and I'm not sure how to find out.</p>\n\n<blockquote>\n  <p>Specifically what tracks its size on the heap and why can not this mechanism be used in the sized case.</p>\n</blockquote>\n\n<p>The size of each object doesn't actually change - it's just potentially different per instance. The mechanism <em>can</em> be used \"in the <code>Sized</code> case\", but you don't have a sized case! Even for a <code>T</code> that is sized, the <code>bars</code> collection will contain boxes of <code>Bar&lt;dyn Foo&gt;</code> which are unsized. That's why you need to <code>T: ?Sized</code> (as opposed to <code>T: !Sized</code>), to say that this type works for <code>T</code> being either sized or unsized.</p>\n"}], "owner": {"reputation": 949, "user_id": 1219515, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/64ce0ac7d44d2076d23b21ac62214970?s=128&d=identicon&r=PG", "display_name": "Maciej Goszczycki", "link": "https://stackoverflow.com/users/1219515/maciej-goszczycki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 301, "favorite_count": 0, "accepted_answer_id": 51693457, "answer_count": 1, "score": 2, "last_activity_date": 1533489782, "creation_date": 1533441842, "last_edit_date": 1533475949, "question_id": 51691288, "link": "https://stackoverflow.com/questions/51691288/size-of-a-box-containing-a-struct-with-a-trait-parameter", "title": "Size of a box containing a struct with a trait parameter", "body": "<p>I need a struct that contains a trait object and more of itself. Disappointedly the following code does not compile: </p>\n\n<pre><code>trait Foo {}\n\nstruct Bar&lt;T: Foo&gt; {\n    bars: Vec&lt;Box&lt;Bar&lt;dyn Foo&gt;&gt;&gt;,\n    foo: T,\n}\n</code></pre>\n\n<p>I managed to coerce this into compiling by adding the <code>?Sized</code> bound to <code>T</code>, but I do not understand why this should be the case. I assume this is because all trait objects have the same size, but the size of <code>Bar</code> depends on the size of the concrete type <code>T</code>. If so, how is <code>Bar</code> with an unsized <code>T</code> represented in memory? Specifically what tracks its size on the heap and why can not this mechanism be used in the sized case.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533387791, "post_id": 51685640, "comment_id": 90333718, "body": "Idiomatic Rust uses <code>snake_case</code> for variables, methods, macros, and fields; <code>UpperCamelCase</code> for types; and <code>SCREAMING_SNAKE_CASE</code> for statics and constants. Use <code>land_first</code> instead, please."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533388541, "post_id": 51685640, "comment_id": 90333911, "body": "Note that a vec of vec is often not a &quot;good&quot; code."}, {"owner": {"reputation": 23, "user_id": 8587478, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pj0nX.png?s=128&g=1", "display_name": "Edrae", "link": "https://stackoverflow.com/users/8587478/edrae"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533398199, "post_id": 51685640, "comment_id": 90336489, "body": "@Stargateur I agree with you, I don&#39;t like this. But what is the good way to get a 2d array with Vec ?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533398639, "post_id": 51685640, "comment_id": 90336619, "body": "@Edrae Take a look at <a href=\"https://github.com/bluss/ndarray\" rel=\"nofollow noreferrer\">github.com/bluss/ndarray</a>"}], "answers": [{"tags": [], "owner": {"reputation": 17388, "user_id": 921321, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3f4c4737cb30134f58cc76f06ef5113a?s=128&d=identicon&r=PG", "display_name": "Lukazoid", "link": "https://stackoverflow.com/users/921321/lukazoid"}, "is_accepted": false, "score": 4, "last_activity_date": 1533386902, "creation_date": 1533386902, "answer_id": 51685733, "question_id": 51685640, "link": "https://stackoverflow.com/questions/51685640/why-does-initialising-a-vector-of-vectors-vecvect-expect-a-t-instead-of-a/51685733#51685733", "title": "Why does initialising a vector of vectors (Vec&lt;Vec&lt;T&gt;&gt;) expect a T instead of a Vec&lt;T&gt;?", "body": "<p>Firstly, your first code sample is not going to do what you expect, <code>landFirst</code> is still empty, even if you initialize it with a capacity, it has no items, so the for loop will never be entered.</p>\n\n<p>As you are iterating over the elements of <code>landFirst</code>, <code>v</code> is a <code>Vec&lt;char&gt;</code>, so you can only push a <code>char</code> to it, your second code sample differs in that you are pushing to <code>landFirst</code>, not pushing to an element contained within <code>landFirst</code>. </p>\n\n<p>Your second code sample will properly initialize <code>landFirst</code>, however it can be rewritten as the following:</p>\n\n<pre><code>let mut landFirst = vec![Vec::with_capacity(height); width];\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 23, "user_id": 8587478, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pj0nX.png?s=128&g=1", "display_name": "Edrae", "link": "https://stackoverflow.com/users/8587478/edrae"}, "edited": false, "score": 0, "creation_date": 1533387438, "post_id": 51685760, "comment_id": 90333621, "body": "You points it : I&#39;m confused ! I&#39;m learning the language and mixed with those I know. I wanted to add elements without &quot;nullpointerExcepetion&quot;. But as you said, I only reserved memory and I did not add any character. This make sense. Also, thanks for the note on snake_case. (Thank you for the whole answer actually.)"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 23, "user_id": 8587478, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pj0nX.png?s=128&g=1", "display_name": "Edrae", "link": "https://stackoverflow.com/users/8587478/edrae"}, "edited": false, "score": 0, "creation_date": 1533387588, "post_id": 51685760, "comment_id": 90333660, "body": "@Edrae What are you confused about? I didn&#39;t quite understand your comment :/"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 23, "user_id": 8587478, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pj0nX.png?s=128&g=1", "display_name": "Edrae", "link": "https://stackoverflow.com/users/8587478/edrae"}, "edited": false, "score": 0, "creation_date": 1533387963, "post_id": 51685760, "comment_id": 90333760, "body": "@Edrae No problem! I&#39;m glad I could help. Remember that you can mark one answer as &quot;accepted&quot; to tell others that it helped you. You don&#39;t need to do that now, but here on SO it&#39;s expected that you do eventually if an answer helped you. Also: if you need more help with your first steps in Rust, you could <a href=\"https://chat.stackoverflow.com/rooms/62927/rust\">join the chat</a> and maybe get some quick feedback to small questions."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1533387959, "last_edit_date": 1533387959, "creation_date": 1533387041, "answer_id": 51685760, "question_id": 51685640, "link": "https://stackoverflow.com/questions/51685640/why-does-initialising-a-vector-of-vectors-vecvect-expect-a-t-instead-of-a/51685760#51685760", "title": "Why does initialising a vector of vectors (Vec&lt;Vec&lt;T&gt;&gt;) expect a T instead of a Vec&lt;T&gt;?", "body": "<blockquote>\n  <p>Why? <code>v</code> is composed of <code>Vec&lt;char&gt;</code>, not of <code>char</code>.</p>\n</blockquote>\n\n<p>Let's check the type of <code>v</code>:</p>\n\n<pre><code>for v in land_first {\n    let () = v;\n}\n</code></pre>\n\n<p>This results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:7:13\n  |\n7 |         let () = v;\n  |             ^^ expected struct `std::vec::Vec`, found ()\n  |\n  = note: expected type `std::vec::Vec&lt;char&gt;`\n             found type `()`\n</code></pre>\n\n<p>So the <code>v</code> has the type <code>Vec&lt;char&gt;</code>. Why? Well with <code>for v in land_first</code> you iterate through all elements of <code>land_first</code>. What are the elements of <code>land_first</code>? Correct: <code>Vec&lt;char&gt;</code>.</p>\n\n<p>Another thing you confused: <code>Vec::with_capacity()</code> only reserves memory, but doesn't actually insert elements. <code>Vec::with_capacity(10).len()</code> is 0! You need to use <code>push()</code> or <code>insert()</code> to actually insert elements. </p>\n\n<p>This also hints at the core problem of your approach: <strong>what do you think are the characters in your vectors?</strong> You never specified which character to insert. There is no clear default that's always useful, right? </p>\n\n<hr>\n\n<p>So how would you ideally initialize your vector of vectors? There is the useful <code>vec![]</code> macro:</p>\n\n<pre><code>const INIT_CHAR: char = '\u2764';\nlet land_first = vec![vec![INIT_CHAR; height]; width];\n</code></pre>\n\n<hr>\n\n<p>Also note:</p>\n\n<ul>\n<li>I changed <code>landFirst</code> to <code>land_first</code>. In Rust, variable names use <code>snake_case</code>.</li>\n<li>I removed the explicit type annotation: those are usually not necessary in Rust.</li>\n</ul>\n"}], "owner": {"reputation": 23, "user_id": 8587478, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pj0nX.png?s=128&g=1", "display_name": "Edrae", "link": "https://stackoverflow.com/users/8587478/edrae"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1496, "favorite_count": 0, "accepted_answer_id": 51685760, "answer_count": 2, "score": 1, "last_activity_date": 1533388130, "creation_date": 1533386264, "last_edit_date": 1533388130, "question_id": 51685640, "link": "https://stackoverflow.com/questions/51685640/why-does-initialising-a-vector-of-vectors-vecvect-expect-a-t-instead-of-a", "title": "Why does initialising a vector of vectors (Vec&lt;Vec&lt;T&gt;&gt;) expect a T instead of a Vec&lt;T&gt;?", "body": "<p>I missed something with the initialization of a vector of vectors.\nIn a first approach, I tried this code:</p>\n\n<pre><code>let mut landFirst: Vec&lt;Vec&lt;char&gt;&gt; = Vec::with_capacity(width);\nfor v in landFirst {\n    v.push(Vec::with_capacity(height));\n}\n</code></pre>\n\n<p>But it failed:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>v.push(Vec::with_capacity(height));\n       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected char, found struct `std::vec::Vec`\n</code></pre>\n\n<p>Why? <code>v</code> is composed of <code>Vec&lt;char&gt;</code>, not of <code>char</code>.</p>\n\n<p>It works with this code:</p>\n\n<pre><code>let mut landFirst: Vec&lt;Vec&lt;char&gt;&gt; = Vec::with_capacity(width);\nfor cpt in 0..width {\n    landFirst.insert(cpt, Vec::with_capacity(height));\n}\n</code></pre>\n\n<p>Can you enlighten me please?</p>\n"}, {"tags": ["rust", "integer"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1533388133, "post_id": 51685509, "comment_id": 90333792, "body": "Did I miss something or you confuse <code>i64</code> and <code>f64</code> ?"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 3, "creation_date": 1533391356, "post_id": 51685509, "comment_id": 90334678, "body": "@Stargateur: No, he didn&#39;t. He&#39;s pointing out that the default type of an unadorned floating point literal is a 64 bit type, and so is wondering why the default type of an unadorned integer literal is not also 64 bits."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1533396062, "post_id": 51685509, "comment_id": 90335933, "body": "You may find it helpful to read <a href=\"https://stackoverflow.com/questions/39779880/c-int-vs-long-long-in-64-bit-machine\">C++ int vs long long in 64 bit machine</a>. C++ has the added complication of variable size integers (in Rust <code>usize</code> and <code>isize</code> are the only types with this property)."}], "answers": [{"tags": [], "owner": {"reputation": 1992, "user_id": 3434027, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ab197a34d61638125709590e357542a?s=128&d=identicon&r=PG", "display_name": "iPirat", "link": "https://stackoverflow.com/users/3434027/ipirat"}, "is_accepted": false, "score": 0, "last_activity_date": 1533385869, "creation_date": 1533385869, "answer_id": 51685582, "question_id": 51685509, "link": "https://stackoverflow.com/questions/51685509/should-i-use-i32-or-i64-on-64bit-machine/51685582#51685582", "title": "Should I use i32 or i64 on 64bit machine?", "body": "<p>First of all, you should design your application for your needs/requirements. I.e., if you need \u201elarge\u201c integers, use large types. If you don\u2019t need them, you should use small types. </p>\n\n<p>IF you encounter any performance issues (AND ONLY THEN) should you adjust types to something you may not need by requirement. </p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 7, "last_activity_date": 1533385960, "creation_date": 1533385960, "answer_id": 51685594, "question_id": 51685509, "link": "https://stackoverflow.com/questions/51685509/should-i-use-i32-or-i64-on-64bit-machine/51685594#51685594", "title": "Should I use i32 or i64 on 64bit machine?", "body": "<p><a href=\"https://doc.rust-lang.org/book/second-edition/ch03-02-data-types.html#integer-types\" rel=\"noreferrer\">The Rust Programming Language</a> says:</p>\n\n<blockquote>\n  <p>[...] integer types default to <code>i32</code>: this type is generally the fastest, even on 64-bit systems.</p>\n</blockquote>\n\n<p>And (<a href=\"https://doc.rust-lang.org/book/second-edition/ch03-02-data-types.html#floating-point-types\" rel=\"noreferrer\">in the next section</a>):</p>\n\n<blockquote>\n  <p>The default type is <code>f64</code> because on modern CPUs it\u2019s roughly the same speed as <code>f32</code> but is capable of more precision.</p>\n</blockquote>\n\n<hr>\n\n<p>However, this is fairly simplified. What integer type you should use depends a lot on your program. Don't think about speed when initially writing the program, unless you already know that speed will be a problem. In the vast majority of code, speed doesn't matter: even in performance critical applications, <strong>most code is cold code</strong>. In contrast, <strong>correctness always matters</strong>.</p>\n\n<p>Also note that only <em>unconstrained</em> numeric variables default to <code>i32</code>/<code>f64</code>. As soon as you use the variable in a context where a specific numeric type is needed, the compiler uses that type. </p>\n"}, {"tags": [], "owner": {"reputation": 52741, "user_id": 555045, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/182d0ce855c8324a596648c04643e8f9?s=128&d=identicon&r=PG", "display_name": "nicomp", "link": "https://stackoverflow.com/users/555045/nicomp"}, "is_accepted": true, "score": 10, "last_activity_date": 1533388413, "creation_date": 1533388413, "answer_id": 51685963, "question_id": 51685509, "link": "https://stackoverflow.com/questions/51685509/should-i-use-i32-or-i64-on-64bit-machine/51685963#51685963", "title": "Should I use i32 or i64 on 64bit machine?", "body": "<blockquote>\n  <p>Are i32 better for performance?</p>\n</blockquote>\n\n<p>That's actually kind of a subtle thing. If we look up some <a href=\"http://users.atw.hu/instlatx64\" rel=\"noreferrer\">recent instruction-level benchmarks</a> for example for <a href=\"http://users.atw.hu/instlatx64/GenuineIntel0050654_SkylakeX2_InstLatX64.txt\" rel=\"noreferrer\">SkylakeX</a>, there is <em>for the most part</em> a very clear lack of difference between 64bit and 32bit instructions. An exception to that is division, 64bit division is slower than 32bit division, even when dividing the same values (division is one of the few variable-time instructions that depend on the values of its inputs). </p>\n\n<p>Using i64 for data also makes auto-vectorization less effective - this is also one of the rare places where data smaller than 32bit has a use beyond data-size optimization. Of course the data size also matters for the i32 vs i64 question, working with sizable arrays of i64's can easily be slower just because it's bigger, therefore costing more space in the caches and (if applicable) more bandwidth. So if the question is <code>[i32]</code> vs <code>[i64]</code>, then it matters.</p>\n\n<p>Even more subtle is the fact that using 64bit operations means that the code will contains more REX prefixes on average, making the code slightly less dense meaning that less of it will fit in the L1 code cache at once. This is a small effect though. Just having some 64bit variables in the code is not a problem.</p>\n\n<p>Despite all that, definitely don't <em>overuse</em> i32, especially in places where you should really have an <code>usize</code>. For example, do not do this:</p>\n\n<pre><code>// don't do this\nfor i in 0i32 .. data.len() as i32 { \n  sum += data[i as usize]; \n}\n</code></pre>\n\n<p>This causes a large performance regression. Not only is there a pointless sign-extension in the loop now, it also defeats bounds check elimination and auto-vectorization. But of course there is no reason to write code like that in the first place, it's unnatural and harder than doing it right.</p>\n"}], "owner": {"reputation": 185, "user_id": 4521803, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/a8253632f50dcd23b28b04dfb53cb657?s=128&d=identicon&r=PG&f=1", "display_name": "Giorgio Napolitano", "link": "https://stackoverflow.com/users/4521803/giorgio-napolitano"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2134, "favorite_count": 0, "accepted_answer_id": 51685963, "answer_count": 3, "score": 1, "last_activity_date": 1533388413, "creation_date": 1533385292, "question_id": 51685509, "link": "https://stackoverflow.com/questions/51685509/should-i-use-i32-or-i64-on-64bit-machine", "title": "Should I use i32 or i64 on 64bit machine?", "body": "<p><strong>main.rs</strong></p>\n\n<pre><code>#![feature(core_intrinsics)]\nfn print_type_of&lt;T&gt;(_: &amp;T) {\n    println!(\"{}\", unsafe { std::intrinsics::type_name::&lt;T&gt;() });\n}\n\nfn main() {\n    let x = 93;\n    let y = 93.1;\n\n    print_type_of(&amp;x);\n    print_type_of(&amp;y);\n}\n</code></pre>\n\n<p>If I compile with \"rustc +nightly ./main.rs\", i got this output:</p>\n\n<p>$ <strong>./main</strong></p>\n\n<pre><code>i32\nf64\n</code></pre>\n\n<p>I run a x86_64 Linux machine. Floating point variables are double precision by default, which is good.\nWhy integers are only 4 bytes? Which should I use? If I don't need i64 should I use i32? Are i32 better for performance?</p>\n"}, {"tags": ["iterator", "rust", "lifetime"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1533381044, "post_id": 51684123, "comment_id": 90332037, "body": "Iterators can usually be cloned cheaply. Would something like <a href=\"https://play.rust-lang.org/?gist=cefa555b7842c1f29d3d32bed63ed009&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">this</a> work for you? Besides: it would probably be useful if you could minimize your example a bit more. Like what is <code>Self</code> there? Is it important? As a reminder: <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1533397164, "post_id": 51684123, "comment_id": 90336203, "body": "I don&#39;t understand <i>this would not permit users to specify a &quot;view&quot; of the collection contents using iterator adapters, like map</i>. You can&#39;t iterate twice over the same <code>Map</code> anyway. It sounds like you might be looking for something more along the lines of a cursor-based API, not an iterator-based one."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1533399249, "post_id": 51684123, "comment_id": 90336782, "body": "Very good point about cloning iterators Lukas.  I&#39;d think that adresses most such scenarios, thanks!  I&#39;m afraid <code>std::slice::IterMut</code> cannot be cloned however: <a href=\"https://doc.rust-lang.org/std/slice/struct.IterMut.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/slice/struct.IterMut.html</a>"}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1533399489, "post_id": 51684123, "comment_id": 90336836, "body": "Yes, a cursor-based API would definitely solve this @trentcl but cursors are slightly overkill, as I only need to restart the iterator several times, and it seems like it should be doable by using closures and iterators together.  In fact, there is one interesting advantage to cursors in that a user cannot provide a closure that returns different things on different runs."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1533400077, "post_id": 51684123, "comment_id": 90337003, "body": "I meant &quot;view&quot; in the database sense, so I have a <code>HashMap&lt;X,(Y,Z)&gt;</code> but maybe I want to filter it based on <code>X</code> and only give the function an <code>Iterator&lt;Item=&amp;mut Z&gt;</code>.  This would not be compatible with the <code>&amp;mut C: IntoIterator</code> trick, which is maybe a distraction."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1533400293, "post_id": 51684123, "comment_id": 90337046, "body": "I have clarified the question as being about returning an <code>Iterator&lt;Item=&amp;mut T&gt;</code> from a closure, which is what I meant by &quot;view&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533477542, "post_id": 51684123, "comment_id": 90351265, "body": "<i>Iterators can frequently cloned, but iterators of mutable references.</i> \u2014 you lost words."}], "answers": [{"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 0, "last_activity_date": 1533491098, "last_edit_date": 1533491098, "creation_date": 1533489732, "answer_id": 51696620, "question_id": 51684123, "link": "https://stackoverflow.com/questions/51684123/return-and-consume-an-iterator-of-mutable-references-from-a-closure/51696620#51696620", "title": "Return and consume an iterator of mutable references from a closure", "body": "<p>There is no way to do precisely this with closures because the <code>Fn*</code> traits do not support binding a return type to the lifetime of their <code>self</code> argument.  Right now, the <code>Fn*</code> traits read</p>\n\n<pre><code>pub trait FnOnce&lt;Args&gt; {\n    type Output;\n    extern \"rust-call\" fn call_once(self, args: Args) -&gt; Self::Output;\n}\npub trait FnMut&lt;Args&gt;: FnOnce&lt;Args&gt; {\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: Args) -&gt; Self::Output;\n}\npub trait Fn&lt;Args&gt;: FnMut&lt;Args&gt; {\n    extern \"rust-call\" fn call(&amp;self, args: Args) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>but this would require these traits read like</p>\n\n<pre><code>pub trait FnOnce&lt;Args&gt; {\n    type Output&lt;'fn&gt;;\n    extern \"rust-call\" fn call_once(self, args: Args) -&gt; Self::Output&lt;'static&gt;;\n}\npub trait FnMut&lt;Args&gt;: FnOnce&lt;Args&gt; {\n    extern \"rust-call\" fn call_mut&lt;'fn&gt;(&amp;'fn mut self, args: Args) -&gt; Self::Output&lt;'fn&gt;;\n}\npub trait Fn&lt;Args&gt;: FnMut&lt;Args&gt; {\n    extern \"rust-call\" fn call&lt;'fn&gt;(&amp;'fn self, args: Args) -&gt; Self::Output&lt;'fn&gt;;\n}\n</code></pre>\n\n<p>These are unstable interfaces so they could perhaps eventually be changes through the RFC process, maybe with some special <code>'fn</code> liftime syntax like <code>FnMut() -&gt; impl Iterator&lt;Item = &amp;'fn mut Self&gt;</code>, or maybe even with a parametrized the type parameter <code>Args</code> as <code>Args&lt;'fn&gt;</code>.  Rust internals is the proper forum for this question. </p>\n"}], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 331, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1533491098, "creation_date": 1533373758, "last_edit_date": 1533477520, "question_id": 51684123, "link": "https://stackoverflow.com/questions/51684123/return-and-consume-an-iterator-of-mutable-references-from-a-closure", "title": "Return and consume an iterator of mutable references from a closure", "body": "<p>Are there any examples of functions that consume a closure that returns an <code>Iterator&lt;Item = &amp;mut T&gt;</code>?</p>\n\n<p>I've wanted to write a couple Rust functions that iterated over the contents of a collection several times, and possibly backwards.  <code>IntoIterator</code> alone does not suffice because it consumes its argument by value preventing multiple iterations.  Iterators can frequently cloned, but iterators of mutable references.</p>\n\n<p>If we really only need iteration over the collections's exact elements, then we might use that <code>&amp;mut C: IntoIterator</code> for all Rust collection types <code>C</code>.  Accepting <a href=\"https://github.com/rust-lang/rfcs/pull/2289\" rel=\"nofollow noreferrer\">RFC 2289</a> syntax, this could look like:</p>\n\n<pre><code>fn batch_normalization&lt;II: ?Sized&gt;(v: &amp;mut II)\nwhere\n    for&lt;'a&gt; &amp;'a mut II: IntoIterator&lt;Item = &amp;'a mut Self, IntoIter: DoubleEndedIterator + ExactSizeIterator&gt;,\n</code></pre>\n\n<p>but the current form runs into a <a href=\"https://github.com/rust-lang/rfcs/pull/2289#issuecomment-409337644\" rel=\"nofollow noreferrer\">compiler bug</a>.  Also, this would not permit users to specify a \"view\" of the collection contents using iterator adapters, like <code>map</code>.</p>\n\n<p>Intuitively, we should borrow the collection using a closure that rebuilds our iterator when called:</p>\n\n<pre><code>fn batch_normalization&lt;F&gt;(f: F)\nwhere\n    F: FnMut() -&gt; impl Iterator&lt;Item = &amp;mut Self&gt; + DoubleEndedIterator + ExactSizeIterator\n</code></pre>\n\n<p>We cannot write that yet because (a) issues around <code>impl Trait</code> in traits have not yet been resolved, and (b) our <code>&amp;mut Self</code> needs a lifetime, so we might write say:</p>\n\n<pre><code>fn batch_normalization&lt;I, F: FnMut() -&gt; I&gt;(f: F)\nwhere\n    I: Iterator&lt;Item = BorrowMut&lt;Self&gt;&gt; + DoubleEndedIterator + ExactSizeIterator\n</code></pre>\n\n<p>I've tried various formulations like this but none quite work, mostly because the <code>Item</code> outlives the iterator.  </p>\n\n<p>We should fix this the way <code>&amp;'a mut C: IntoIterator&lt;Item = &amp;'a mut T&gt;</code> does by explicitly tying the item's lifetime to the lifetime of <code>&amp;mut self</code> in the <code>FnMut</code>.  In pseudocode:</p>\n\n<pre><code>fn batch_normalization&lt;I, F: FnMut() -&gt; I&gt;(f: F)\nwhere\n    I: for&lt;'a: F::Output&gt; Iterator&lt;Item = &amp;'a mut Self&gt; + DoubleEndedIterator + ExactSizeIterator\n</code></pre>\n\n<p>How should one actually return an <code>Iterator&lt;Item = &amp;mut T&gt;</code> from a closure passed as an argument?  Should one always use some <code>fn</code> pointer mess instead of a closure?  Roughly:</p>\n\n<pre><code>fn batch_normalization&lt;'a, I, V: ?Sized&gt;(v: &amp;mut V, f: fn(&amp;'a mut V) -&gt; I)\nwhere\n    I: Iterator&lt;Item = &amp;'a mut Self&gt; + DoubleEndedIterator + ExactSizeIterator \n{\n   for x in f() { }\n   // ...\n   for x in f().rev() { } \n}\n</code></pre>\n"}, {"tags": ["syntax", "rust", "traits"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1533326448, "post_id": 51678780, "comment_id": 90321975, "body": "What does pattern matching accomplish in a trait definition? You can still have trait implementations use pattern matching there."}, {"owner": {"reputation": 43, "user_id": 10177845, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fVypYUkOvno/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rW1bUxdLEjEjAYdstRBS9AOvCg3A/mo/photo.jpg?sz=128", "display_name": "algonomicon", "link": "https://stackoverflow.com/users/10177845/algonomicon"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1533326774, "post_id": 51678780, "comment_id": 90322123, "body": "@PeterHall I think it provides better readability for the users of the trait"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1533329022, "post_id": 51678780, "comment_id": 90322976, "body": "@PeterHall: You could also argue <i>what argument names accomplish in a trait definition?</i>. If an argument name in a trait function is best described as a tuple, I don&#39;t see why it should not be allowed."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1533331921, "post_id": 51678780, "comment_id": 90323832, "body": "Perhaps <a href=\"https://github.com/rust-lang/rust/issues\" rel=\"nofollow noreferrer\">log a feature request</a>."}], "answers": [{"comments": [{"owner": {"reputation": 43, "user_id": 10177845, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fVypYUkOvno/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rW1bUxdLEjEjAYdstRBS9AOvCg3A/mo/photo.jpg?sz=128", "display_name": "algonomicon", "link": "https://stackoverflow.com/users/10177845/algonomicon"}, "edited": false, "score": 0, "creation_date": 1533333476, "post_id": 51680365, "comment_id": 90324297, "body": "That&#39;s unfortunate. I do believe this should be a feature as it seems inconsistent with other function definitions."}, {"owner": {"reputation": 43, "user_id": 10177845, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fVypYUkOvno/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rW1bUxdLEjEjAYdstRBS9AOvCg3A/mo/photo.jpg?sz=128", "display_name": "algonomicon", "link": "https://stackoverflow.com/users/10177845/algonomicon"}, "edited": false, "score": 0, "creation_date": 1533399518, "post_id": 51680365, "comment_id": 90336850, "body": "This is a known issue and there is already a <a href=\"https://github.com/rust-lang/rfcs/issues/1351#issuecomment-153070147\" rel=\"nofollow noreferrer\">request</a> for this feature. Also, there&#39;s a more descriptive <a href=\"https://github.com/rust-lang/rust/issues/53046#issuecomment-410410601\" rel=\"nofollow noreferrer\">error message</a> which should have been emitted."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 43, "user_id": 10177845, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fVypYUkOvno/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rW1bUxdLEjEjAYdstRBS9AOvCg3A/mo/photo.jpg?sz=128", "display_name": "algonomicon", "link": "https://stackoverflow.com/users/10177845/algonomicon"}, "edited": false, "score": 1, "creation_date": 1533401050, "post_id": 51680365, "comment_id": 90337206, "body": "@algonomicon I think that is <i>slightly</i> different. The main post is about forbidding trait method arguments without identifiers. The comment you linked to is pointing out the discrepancy between normal functions and default implementations of trait methods. Based on some of the other comments, it sounds like you&#39;d get your wish if that was ever fixed because of keeping the parser simpler, and not needing to parse a method&#39;s arguments differently according to whether or not it has a default body."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 2, "last_activity_date": 1533333904, "last_edit_date": 1533333904, "creation_date": 1533332214, "answer_id": 51680365, "question_id": 51678780, "link": "https://stackoverflow.com/questions/51678780/why-cant-i-declare-a-trait-function-with-tuple-parameter-matching/51680365#51680365", "title": "Why can&#39;t I declare a trait function with tuple parameter matching?", "body": "<p>This syntax is not supported in Rust, and there currently are no open RFCs to change that.</p>\n\n<p>In a trait it would serve no purpose other than perhaps for documentation. But, since you are defining the trait anyway, you could just define a more descriptive type for that argument in the first place. In your case, a <code>Point</code> with <code>x</code> and <code>y</code> fields.</p>\n"}], "owner": {"reputation": 43, "user_id": 10177845, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fVypYUkOvno/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rW1bUxdLEjEjAYdstRBS9AOvCg3A/mo/photo.jpg?sz=128", "display_name": "algonomicon", "link": "https://stackoverflow.com/users/10177845/algonomicon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 51680365, "answer_count": 1, "score": 4, "last_activity_date": 1549451387, "creation_date": 1533323457, "last_edit_date": 1549451387, "question_id": 51678780, "link": "https://stackoverflow.com/questions/51678780/why-cant-i-declare-a-trait-function-with-tuple-parameter-matching", "title": "Why can&#39;t I declare a trait function with tuple parameter matching?", "body": "<p>Why is it that I cannot declare a trait function with tuple parameter matching?</p>\n\n<pre><code>#![allow(unused)]\n\n// This works\nfn foo((x, y): (i32, i32)) {\n}\n\ntrait Bar {\n    // This does not work\n    fn bar((x, y): (i32, i32));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ce092e0146354cbbf09319117a706761&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Compiling the above outputs this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `)` or `,`, found `:`\n --&gt; src/main.rs:7:18\n  |\n7 |     fn bar((x, y): (i32, i32));\n  |                  ^ expected one of `)` or `,` here\n\nerror: expected one of `!`, `&amp;&amp;`, `&amp;`, `(`, `)`, `*`, `&lt;`, `?`, `[`, `_`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, or lifetime, found `:`\n --&gt; src/main.rs:7:18\n  |\n7 |     fn bar((x, y): (i32, i32));\n  |                  ^ expected one of 17 possible tokens here\n\nerror[E0601]: `main` function not found in crate `playground`\n  |\n  = note: consider adding a `main` function to `src/main.rs`\n</code></pre>\n"}, {"tags": ["rust", "ownership", "borrowing"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1533322610, "post_id": 51678275, "comment_id": 90320398, "body": "The error message is confusing, but you&#39;re trying to create a type of infinite size. See <a href=\"https://stackoverflow.com/questions/25296195/why-are-recursive-struct-types-illegal-in-rust\">Why are recursive struct types illegal in Rust?</a> Wrapping the <code>Cow</code> in a <code>Box</code> is one way to fix that."}, {"owner": {"reputation": 687, "user_id": 1425018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e5cb69c4cec573533e78cf8995e7dfd?s=128&d=identicon&r=PG", "display_name": "JJW5432", "link": "https://stackoverflow.com/users/1425018/jjw5432"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1533322762, "post_id": 51678275, "comment_id": 90320450, "body": "I get that types of infinite size are bad, but my understand was that a <code>Cow&lt;&#39;a, IntList&lt;&#39;a&gt;&gt;</code> represents either a <code>Box&lt;IntList&lt;&#39;a&gt;&gt;</code> or a <code>&amp;&#39;a IntList&lt;&#39;a&gt;</code>, both of which have a level of indirection and so aren&#39;t infinite."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1533323169, "post_id": 51678275, "comment_id": 90320614, "body": "@JJW5432 <code>Cow</code> doesn&#39;t box. It will be either <code>IntList&lt;&#39;a&gt;</code> or <code>&amp;&#39;a IntList&lt;&#39;a&gt;</code>."}, {"owner": {"reputation": 687, "user_id": 1425018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e5cb69c4cec573533e78cf8995e7dfd?s=128&d=identicon&r=PG", "display_name": "JJW5432", "link": "https://stackoverflow.com/users/1425018/jjw5432"}, "edited": false, "score": 0, "creation_date": 1533323358, "post_id": 51678275, "comment_id": 90320695, "body": "Then how come it &quot;boxes&quot; for strings? It&#39;s either <code>&amp;str</code> or <code>String</code> which is roughly <code>Box&lt;str&gt;</code> (correct me if that&#39;s not true). That&#39;s the behavior I&#39;m going for, either a <code>Box&lt;IntList&lt;&#39;a&gt;&gt;</code> or a <code>&amp;&#39;a IntList&lt;&#39;a&gt;</code>."}, {"owner": {"reputation": 687, "user_id": 1425018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e5cb69c4cec573533e78cf8995e7dfd?s=128&d=identicon&r=PG", "display_name": "JJW5432", "link": "https://stackoverflow.com/users/1425018/jjw5432"}, "edited": false, "score": 0, "creation_date": 1533323620, "post_id": 51678275, "comment_id": 90320801, "body": "It also does the same for <code>[T]</code> and <code>Vec&lt;T&gt;</code>. I think this happens in the <a href=\"https://doc.rust-lang.org/std/borrow/trait.ToOwned.html\" rel=\"nofollow noreferrer\"><code>ToOwned</code> trait</a>. Should I add a custom implementation of that trait? I tried it <a href=\"https://play.rust-lang.org/?gist=2309b6193927058394a52e5b0391f550&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">here</a> but ran into similar troubles."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533324125, "post_id": 51678275, "comment_id": 90321004, "body": "<i><code>String</code> which is roughly <code>Box&lt;str&gt;</code></i> \u2014 it is not. <code>String</code> has a capacity, for starters."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533324191, "post_id": 51678275, "comment_id": 90321021, "body": "<i>either a <code>Box&lt;IntList&lt;&#39;a&gt;&gt;</code> or a <code>&amp;&#39;a IntList&lt;&#39;a&gt;</code></i> \u2014 then make that enum."}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1533336871, "post_id": 51679451, "comment_id": 90325030, "body": "<i>&quot;If there is already something like this out there, please let me know!&quot;</i> \u2014It&#39;s not exactly the same, but you can use the <a href=\"https://crates.io/crates/either\" rel=\"nofollow noreferrer\"><code>either</code> crate</a>. The result might be something like this: <a href=\"https://play.rust-lang.org/?gist=0853ce9270e5032d59f252002b2ed33d&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 687, "user_id": 1425018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e5cb69c4cec573533e78cf8995e7dfd?s=128&d=identicon&r=PG", "display_name": "JJW5432", "link": "https://stackoverflow.com/users/1425018/jjw5432"}, "is_accepted": true, "score": 2, "last_activity_date": 1533333262, "last_edit_date": 1533333262, "creation_date": 1533326746, "answer_id": 51679451, "question_id": 51678275, "link": "https://stackoverflow.com/questions/51678275/recursive-data-type-that-doesnt-care-about-owning-substructure/51679451#51679451", "title": "Recursive data type that doesn&#39;t care about owning substructure", "body": "<p>I made a data type kind of like <code>Cow</code> that I called <code>Cowish</code>. If there is already something like this out there, please let me know!</p>\n\n<pre><code>pub enum Cowish&lt;'a, T, O&gt;\nwhere\n    T: 'a,\n{\n    Borrowed(&amp;'a T),\n    Owned(O),\n}\n\nimpl&lt;'a, T, O&gt; Borrow&lt;T&gt; for Cowish&lt;'a, T, O&gt;\nwhere\n    T: 'a,\n    O: Borrow&lt;T&gt;,\n{\n    fn borrow(&amp;self) -&gt; &amp;T {\n        match self {\n            Borrowed(b) =&gt; b,\n            Owned(o) =&gt; o.borrow(),\n        }\n    }\n}\n\nimpl&lt;'a, T, O&gt; Cowish&lt;'a, T, O&gt;\nwhere\n    T: ToOwned&lt;Owned=O&gt; + 'a,\n    O: Borrow&lt;T&gt;,\n{\n    pub fn into_owned(self) -&gt; O {\n        match self {\n            Borrowed(b) =&gt; b.to_owned(),\n            Owned(o) =&gt; o,\n        }\n    }\n}\n</code></pre>\n\n<p>Using that, I can do what I wanted:</p>\n\n<pre><code>enum IntList&lt;'a&gt; {\n    Empty,\n    Cons(i32, Cowish&lt;'a, IntList&lt;'a&gt;, Box&lt;IntList&lt;'a&gt;&gt;&gt;),\n}\n</code></pre>\n\n<p>A larger example can be found <a href=\"https://github.com/jbaum98/sharing-list\" rel=\"nofollow noreferrer\">here</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 96, "user_id": 13487227, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-m6jSyGfc1Z4/AAAAAAAAAAI/AAAAAAAAAAA/AAKWJJNE1NXpRbXdeJV4FACPJBV4FeIHkQ/photo.jpg?sz=128", "display_name": "Tom&#225;s Vallotton", "link": "https://stackoverflow.com/users/13487227/tom%c3%a1s-vallotton"}, "is_accepted": false, "score": 0, "last_activity_date": 1607880957, "creation_date": 1607880957, "answer_id": 65278643, "question_id": 51678275, "link": "https://stackoverflow.com/questions/51678275/recursive-data-type-that-doesnt-care-about-owning-substructure/65278643#65278643", "title": "Recursive data type that doesn&#39;t care about owning substructure", "body": "<p>This may be too old but just for the record, if you want to make a linked list you can use <code>std::rc::Rc</code>. It's just like <code>Box</code>, but you can have more than one reference to a single object. The only caveat is that you can't mutate the list once it's enclosed in Rc. Here is an example from the <a href=\"https://doc.rust-lang.org/book/ch15-04-rc.html\" rel=\"nofollow noreferrer\">rust book</a>:</p>\n<pre><code>enum List {\n    Cons(i32, Rc&lt;List&gt;),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc;\n\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil))))); // [10, 5]\n    let b = Cons(3, Rc::clone(&amp;a)); // [10, 5, 3]\n    let c = Cons(4, Rc::clone(&amp;a)); // [10, 5, 4]\n}\n</code></pre>\n"}], "owner": {"reputation": 687, "user_id": 1425018, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e5cb69c4cec573533e78cf8995e7dfd?s=128&d=identicon&r=PG", "display_name": "JJW5432", "link": "https://stackoverflow.com/users/1425018/jjw5432"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 256, "favorite_count": 0, "accepted_answer_id": 51679451, "answer_count": 2, "score": 2, "last_activity_date": 1607880957, "creation_date": 1533321068, "last_edit_date": 1533322704, "question_id": 51678275, "link": "https://stackoverflow.com/questions/51678275/recursive-data-type-that-doesnt-care-about-owning-substructure", "title": "Recursive data type that doesn&#39;t care about owning substructure", "body": "<p>I often want to define recursive data type in Rust. We need some level of indirection to avoid having a type with unbounded size. The classic solution is to use <code>Box</code> (<a href=\"https://play.rust-lang.org/?gist=6d02de3b7acfb0fac481e52a70471d3e&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>enum IntList {\n    Empty,\n    Cons(i32, Box&lt;IntList&gt;),\n}\n</code></pre>\n\n<p>The problem I have with this it that it requires that the list own its own tail. This means you can't have space sharing between two lists that share a tail because both want to own it. You could use a borrowed reference (<a href=\"https://play.rust-lang.org/?gist=71f3067fd404f39265ad689d3cf0646c&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>enum IntList&lt;'a&gt; {\n    Empty,\n    Cons(i32, &amp;'a IntList&lt;'a&gt;),\n}\n</code></pre>\n\n<p>But then it's hard to create a list because it's not allowed to own its own tail.</p>\n\n<p><strong>Is there a way to have the list not care whether or not it owns the tail?</strong> That way I could have one list own the tail and another list have a reference to that same list as its tail.</p>\n\n<h3>My Attempt</h3>\n\n<p>My first thought was to use <code>Cow</code> for this purpose, but I couldn't get it to work. This is what I tried (<a href=\"https://play.rust-lang.org/?gist=3e1279418da26edb0bc0178297e59606&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>#[derive(Clone)]\nenum IntList&lt;'a&gt; {\n    Empty,\n    Cons(i32, Cow&lt;'a, IntList&lt;'a&gt;),\n}\n</code></pre>\n\n<p>but it fails with error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0275]: overflow evaluating the requirement `IntList&lt;'a&gt;: std::marker::Sized`\n --&gt; src/main.rs:8:13\n  |\n8 |   Cons(i32, Cow&lt;'a, IntList&lt;'a&gt;&gt;),\n  |             ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: required because of the requirements on the impl of `std::borrow::ToOwned` for `IntList&lt;'a&gt;`\n  = note: required because it appears within the type `std::borrow::Cow&lt;'a, IntList&lt;'a&gt;&gt;`\n  = note: no field of an enum variant may have a dynamically sized type\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": true, "score": 5, "last_activity_date": 1533321358, "last_edit_date": 1533321358, "creation_date": 1533321275, "answer_id": 51678337, "question_id": 51677936, "link": "https://stackoverflow.com/questions/51677936/can-a-build-script-take-arguments/51678337#51678337", "title": "Can a build script take arguments?", "body": "<p>No.</p>\n\n<p>Documentation suggests passing data to the build script using environment variables. </p>\n\n<p>There is no documentation indicating that it can be done and <a href=\"https://github.com/rust-lang/cargo/blob/master/tests/testsuite/build_script.rs\" rel=\"nofollow noreferrer\">the test suite does not test for it</a>. It only tests for <a href=\"https://github.com/rust-lang/cargo/blob/master/tests/testsuite/build_script_env.rs\" rel=\"nofollow noreferrer\">environment variables</a>.</p>\n\n<p>I attempted the method that @Stephan suggests from <a href=\"https://stackoverflow.com/questions/32400231/passing-program-arguments-through-cargo\">Passing program arguments through Cargo</a>, however <code>cargo build</code> does not follow the same behavior as <code>cargo run</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build -- uoeuoe\nerror: Found argument 'uoeuoe' which wasn't expected, or isn't valid in this context\n\nUSAGE:\n    cargo.exe build [OPTIONS]\n\nFor more information try --help\n</code></pre>\n"}], "owner": {"reputation": 543, "user_id": 6861720, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/edfbcf83eddb9c18f9ed3e6c0619ddaf?s=128&d=identicon&r=PG&f=1", "display_name": "Dragonight", "link": "https://stackoverflow.com/users/6861720/dragonight"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 513, "favorite_count": 0, "accepted_answer_id": 51678337, "answer_count": 1, "score": 2, "last_activity_date": 1533321358, "creation_date": 1533319416, "last_edit_date": 1533321219, "question_id": 51677936, "link": "https://stackoverflow.com/questions/51677936/can-a-build-script-take-arguments", "title": "Can a build script take arguments?", "body": "<p>I was going through <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"nofollow noreferrer\">the build script documentation</a> and was wondering if I can pass any argument to the script in <code>build.rs</code> from the command line. </p>\n\n<pre><code>fn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n    let var = &amp;args[1];\n}\n</code></pre>\n\n<p>Would something like this work in the build script? And how could I specify the arguments from command line? </p>\n"}, {"tags": ["memory", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1533306250, "post_id": 51674503, "comment_id": 90312366, "body": "<i>&quot;From my understanding, a &amp;str type is just a reference to the beginning of&quot;</i> No, a string slice needs to record the beginning and the length of the string. Rust does not use null-terminated strings (unless with <code>CStr</code>)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1533307129, "post_id": 51674503, "comment_id": 90312874, "body": "Note that <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of_val.html\" rel=\"nofollow noreferrer\"><code>size_of_val</code></a> exists, for when you have a reference to an unsized type and you want to know the size of the referent."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1533306324, "last_edit_date": 1533306324, "creation_date": 1533305992, "answer_id": 51674663, "question_id": 51674503, "link": "https://stackoverflow.com/questions/51674503/why-can-size-of-be-used-on-unsized-types/51674663#51674663", "title": "Why can size_of be used on unsized types?", "body": "<blockquote>\n  <p>Why can size_of be used on unsized types?</p>\n</blockquote>\n\n<p>It cannot. If it <em>could</em>, it would be defined as:</p>\n\n<pre><code>pub const fn size_of&lt;T: ?Sized&gt;() -&gt; usize\n//                    ^^^^^^^^\n</code></pre>\n\n<blockquote>\n  <p>Why can size_of be used on [<code>&amp;str</code> / <code>String</code> / <code>&amp;String</code>]?</p>\n</blockquote>\n\n<p><code>&amp;str</code>, <code>String</code>, and <code>&amp;String</code> are all sized types. </p>\n\n<p>A <code>&amp;str</code> is essentially:</p>\n\n<pre><code>struct StringSlice {\n    ptr: *const u8,\n    len: usize,\n}\n</code></pre>\n\n<p>A <code>String</code> is essentially:</p>\n\n<pre><code>struct String {\n    ptr: *const u8,\n    len: usize,\n    cap: usize,\n}\n</code></pre>\n\n<p>A <code>&amp;String</code> is essentially:</p>\n\n<pre><code>struct StringRef {\n    ptr: *const String,\n}\n</code></pre>\n\n<blockquote>\n  <p>referring to the size of two pointers</p>\n</blockquote>\n\n<p>A <code>usize</code> is an integer type that is guaranteed to be the size of a native pointer, so... kind of?</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/24158114/155423\">What are the differences between Rust&#39;s `String` and `str`?</a></li>\n</ul>\n"}], "owner": {"reputation": 305, "user_id": 10173381, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-K7vnpdTVRAg/AAAAAAAAAAI/AAAAAAAAAGs/O906amUui-k/photo.jpg?sz=128", "display_name": "Duncan", "link": "https://stackoverflow.com/users/10173381/duncan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 190, "favorite_count": 0, "accepted_answer_id": 51674663, "answer_count": 1, "score": 5, "last_activity_date": 1533306324, "creation_date": 1533305397, "last_edit_date": 1533306053, "question_id": 51674503, "link": "https://stackoverflow.com/questions/51674503/why-can-size-of-be-used-on-unsized-types", "title": "Why can size_of be used on unsized types?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"noreferrer\">documentation for <code>std::mem::size_of</code></a> doesn't provide an example of <code>&amp;str</code> or <code>String</code> being used, but both return sizes with the following code:</p>\n\n<pre><code>println!(\"The size of a string slice (&amp;str): {}\", mem::size_of::&lt;&amp;str&gt;());\n// OUTPUT: The size of a string slice (&amp;str): 16\nprintln!(\"The size of a growable string (String): {}\", mem::size_of::&lt;String&gt;());\n// OUTPUT: The size of a growable string (String): 24\n</code></pre>\n\n<p>From my understanding, a <code>&amp;str</code> type is just a reference to the beginning of a <a href=\"https://doc.rust-lang.org/book/first-edition/strings.html\" rel=\"noreferrer\">\"sequence of Unicode scalar values encoded as a stream of UTF-8 bytes\"</a>. Is <code>&amp;str</code> referring to the size of two pointers? I know a pointer is 8 bytes long on a 64-bit system.</p>\n\n<p><code>mem::size_of::&lt;str&gt;()</code> does return an error, like I would have expected. However, both <code>String</code> and <code>&amp;String</code> return sizes.</p>\n"}, {"tags": ["static", "rust", "traits", "lifetime"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533296726, "post_id": 51671192, "comment_id": 90306260, "body": "<code>fn new(a: &amp;&#39;a u32) -&gt; std::rc::Rc&lt;dyn Handler + &#39;a&gt;</code>"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1533296897, "post_id": 51671192, "comment_id": 90306371, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/40053550/the-compiler-suggests-i-add-a-static-lifetime-because-the-parameter-type-may-no\">The compiler suggests I add a &#39;static lifetime because the parameter type may not live long enough, but I don&#39;t think that&#39;s what I want</a>"}, {"owner": {"reputation": 5867, "user_id": 2252087, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/020cbe41b02f03d59f3adae022c0ce7d?s=128&d=identicon&r=PG", "display_name": "ensc", "link": "https://stackoverflow.com/users/2252087/ensc"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533297394, "post_id": 51671192, "comment_id": 90306681, "body": "@Boiethios works in demo code, but purpose if <code>Rc&lt;&gt;</code> indirection was to avoid lifetime specifications completely."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1533297534, "post_id": 51671192, "comment_id": 90306763, "body": "You cannot do that with the demo code because you most own the object to remove the lifetime specification. You <b>must</b> specify the lifetime of a reference. See the answer of the duplicate, it explains how to solve your issue."}, {"owner": {"reputation": 5867, "user_id": 2252087, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/020cbe41b02f03d59f3adae022c0ce7d?s=128&d=identicon&r=PG", "display_name": "ensc", "link": "https://stackoverflow.com/users/2252087/ensc"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533298621, "post_id": 51671192, "comment_id": 90307433, "body": "@Boiethios I am 250% sure that I do not want to add a <code>&#39;static</code> lifetime requirement somewhere in my code (because objects are allocated dynamically). Things are fine when I return <code>Rc&lt;SomeHandler&gt;</code> directly (but rest breaks) and specifying lifetimes like <code>Rc&lt;... + &#39;a&gt;</code> is not possible because <code>add()</code> will be called e.g. from functions of the trait objects itself to create other handlers (which are owned by the calling object)."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533300675, "post_id": 51671192, "comment_id": 90308663, "body": "Did you read the answers of the duplicate? <a href=\"https://stackoverflow.com/a/40053649/4498831\">This one</a> will help you to understand."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533300957, "post_id": 51671192, "comment_id": 90308867, "body": "<i>a <code>&#39;static</code> lifetime [...] because objects are allocated dynamically</i> \u2014 That&#39;s not what <code>&#39;static</code> means. It basically means that the returned type will not contain any references. If the returned type <i>did</i> contain a reference, then it couldn&#39;t live longer than the referenced value, that&#39;s a giant purpose of the Rust language. Perhaps you are interested in using <code>Rc</code> / <code>Arc</code> to have lighter-weight shared copies a value."}, {"owner": {"reputation": 5867, "user_id": 2252087, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/020cbe41b02f03d59f3adae022c0ce7d?s=128&d=identicon&r=PG", "display_name": "ensc", "link": "https://stackoverflow.com/users/2252087/ensc"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533301160, "post_id": 51671192, "comment_id": 90309001, "body": "@Shepmaster yes, I am already using <code>Rc&lt;&gt;</code>, but rust seems to require an explicit lifetime parameter when working with traits (which is not the case when using &quot;normal&quot; objects)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533301536, "post_id": 51671192, "comment_id": 90309255, "body": "Perhaps you could read over <a href=\"https://stackoverflow.com/q/42028470/155423\">Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?</a> if you don&#39;t understand that."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1533303481, "post_id": 51671192, "comment_id": 90310662, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/42028470/why-is-adding-a-lifetime-to-a-trait-with-the-plus-operator-iteratoritem-foo\">Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1533303923, "post_id": 51671192, "comment_id": 90310934, "body": "I think your question is answered clearly by <a href=\"https://stackoverflow.com/a/42028805/3650362\">this answer</a> (the <code>&#39;static</code> appears by default on trait objects when you don&#39;t provide a lifetime). Your &quot;real code&quot; with the <code>PollRegistry</code> might have other issues -- why have the <code>&#39;a</code> lifetime parameter at all if you&#39;re not going to use it? -- but if you want help with that, please make a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> so that we can tell what you&#39;re dealing with. You might be trying to do something unsound."}], "owner": {"reputation": 5867, "user_id": 2252087, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/020cbe41b02f03d59f3adae022c0ce7d?s=128&d=identicon&r=PG", "display_name": "ensc", "link": "https://stackoverflow.com/users/2252087/ensc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 436, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1533300203, "creation_date": 1533294184, "last_edit_date": 1533300203, "question_id": 51671192, "link": "https://stackoverflow.com/questions/51671192/prevent-static-lifetime-requirement-in-rctrait", "title": "Prevent &#39;static lifetime requirement in Rc&lt;Trait&gt;", "body": "<p>Where is the <code>'static</code> lifetime requirement coming from when using a <code>trait</code> type in <code>std::rc::Rc</code> and how can I prevent it?  E.g. when trying to compile this code</p>\n\n<pre><code>trait Handler{}\n\nfn add(a: std::rc::Rc&lt;Handler&gt;) {\n}\n\nfn main() {\n    add(0);\n}\n</code></pre>\n\n<p>rust reports</p>\n\n<pre><code>error[E0308]: mismatched types\n --&gt; test.rs:7:9\n...\n  = note: expected type `std::rc::Rc&lt;Handler + 'static&gt;`\n             found type `{integer}`\n</code></pre>\n\n<p>NOTE: the error itself is expected; I am just interested in the <code>Handler + 'static</code> diagnostic output.  The Real program creates instances of a <code>trait</code> type, stores them into a <code>HashMap</code> and runs a type specific function on it.  It fails to compile with</p>\n\n<pre><code>| - borrowed value only lives until here\n|\n= note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>at this place.</p>\n\n<h3>Second example</h3>\n\n<p>The following code is more real-world and demonstrates the issue perhaps better:</p>\n\n<pre><code>trait Handler {\n}\n\nstruct SomeHandler&lt;'a&gt;(&amp;'a u32);\n\nimpl &lt;'a&gt; SomeHandler&lt;'a&gt; {\n    fn new(a: &amp;'a u32) -&gt; std::rc::Rc&lt;Handler&gt; {\n        std::rc::Rc::new(SomeHandler(a))\n    }\n}\n\nimpl &lt;'a&gt; Handler for SomeHandler&lt;'a&gt; {\n}\n\nfn main() {\n    let a: u32;\n    SomeHandler::new(&amp;a);\n}\n</code></pre>\n\n<p>It fails with</p>\n\n<pre><code>8 |         std::rc::Rc::new(SomeHandler(a))\n  |                                      ^\n  = note: but, the lifetime must be valid for the static lifetime...\n  = note: ...so that the expression is assignable:\n          expected std::rc::Rc&lt;Handler + 'static&gt;\n             found std::rc::Rc&lt;Handler&gt;\n</code></pre>\n\n<h3>Why explicit lifetimes do not work</h3>\n\n<p>The simple demo might be fixed by adding an explicit lifetime (e.g. <code>Rc&lt;Handler + 'a&gt;</code>).  Unfortunately, this is not an option (nor trying to make anything <code>'static</code>) because real code is intended to look like</p>\n\n<pre><code>struct PollRegistry {\n    ...\n    handlers: std::collections::HashMap&lt;mio::Token, std::rc::Weak&lt;PollHandler&gt;&gt;,\n}\n\nimpl PollRegistry {\n    fn register&lt;'a&gt;(&amp;mut self, handler: &amp;std::rc::Rc&lt;PollHandler&gt;,\n                interest: mio::Ready, opts: mio::PollOpt)\n                -&gt; std::io::Result&lt;()&gt; {\n        ....\n        self.handlers.insert(token, std::rc::Rc::downgrade(handler));\n    }\n}\n</code></pre>\n\n<p>and methods in <code>PollHandler</code> specializations create and own other <code>PollHandler</code> specializations which are registered in the registry by these methods.</p>\n\n<p>rustc 1.27.1</p>\n"}, {"tags": ["rust", "closures", "lifetime"], "comments": [{"owner": {"reputation": 769, "user_id": 7065821, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/iLZC7.png?s=128&g=1", "display_name": "Challenger5", "link": "https://stackoverflow.com/users/7065821/challenger5"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1539427770, "post_id": 51669500, "comment_id": 92504778, "body": "<b>Update:</b> since there doesn&#39;t seem to be a way to do this, I ultimately just switched to nightly and used <code>FnBox</code>."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1539450139, "post_id": 51669500, "comment_id": 92510701, "body": "And you can&#39;t use <code>FnMut(T)</code> instead of <code>FnOnce(&amp;mut T)</code>?"}, {"owner": {"reputation": 769, "user_id": 7065821, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/iLZC7.png?s=128&g=1", "display_name": "Challenger5", "link": "https://stackoverflow.com/users/7065821/challenger5"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1540011914, "post_id": 51669500, "comment_id": 92716695, "body": "@PeterHall <code>FnMut(T)</code> doesn&#39;t let you modify <code>T</code>, and some of the relevant closures move captured variables, so I can only require <code>FnOnce</code>."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1540033047, "post_id": 51669500, "comment_id": 92720662, "body": "Doh! Stupid brain!"}], "owner": {"reputation": 769, "user_id": 7065821, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/iLZC7.png?s=128&g=1", "display_name": "Challenger5", "link": "https://stackoverflow.com/users/7065821/challenger5"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 186, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1539427758, "creation_date": 1533288549, "last_edit_date": 1539427758, "question_id": 51669500, "link": "https://stackoverflow.com/questions/51669500/is-it-possible-to-express-a-closure-taking-a-mutable-reference-with-a-higher-ran", "title": "Is it possible to express a closure taking a mutable reference with a higher-rank lifetime with BoxFnOnce?", "body": "<p>A <code>Box</code>ed <code>FnOnce</code> is currently <a href=\"https://github.com/rust-lang/rust/issues/28796\" rel=\"nofollow noreferrer\">not callable</a> in Rust. As a workaround, I am using the <a href=\"https://github.com/stbuehler/rust-boxfnonce\" rel=\"nofollow noreferrer\">boxfnonce</a> crate, which attempts to mimic the functionality.</p>\n\n<p>The <code>boxfnonce</code> crate exports a struct <code>BoxFnOnce&lt;'a, (A, B...), R&gt;</code>, which functions the way <code>Box&lt;dyn FnOnce(A, B...) -&gt; R + 'a&gt;</code> would if it worked.</p>\n\n<p>The problem is that I want one of the arguments to my boxed closure to be a mutable reference whose lifetime is elided. Were I using a boxed <code>FnOnce</code>, I could simply write:</p>\n\n<pre><code>type Foo&lt;T&gt; = Box&lt;dyn FnOnce(&amp;mut T)&gt;;\n</code></pre>\n\n<p>and this would be desugared into the higher-ranked lifetime</p>\n\n<pre><code>Box&lt;dyn for&lt;'a&gt; FnOnce(&amp;'a mut T)&gt;\n</code></pre>\n\n<p>because the <code>Fn</code> traits are magical. The problem is that <code>BoxFnOnce</code> is neither magical, nor even a trait, so when I write</p>\n\n<pre><code>type Foo&lt;T&gt; = BoxFnOnce&lt;(&amp;mut T,)&gt;;\n</code></pre>\n\n<p>Rust wants me to give the reference a lifetime.</p>\n\n<p>The compiler's suggestion is to add a lifetime parameter to <code>Foo</code>:</p>\n\n<pre><code>type Foo&lt;'a, T&gt; = BoxFnOnce&lt;(&amp;'a mut T,)&gt;;\n</code></pre>\n\n<p>but this doesn't seem right, since we want the closure to be callable on <em>any</em> choice of reference lifetime, not a specific one. I'd prefer not to have to switch to nightly if possible.</p>\n"}, {"tags": ["javascript", "c", "rust", "webassembly"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1533303537, "post_id": 51666736, "comment_id": 90310696, "body": "Using Emscripten is <i>the only</i> way of doing this, as Emscripten is a tool to compile arbitrary C code (anything LLVM can support, really) to WebAssembly. I&#39;m far too lazy to figure out how to install and configure Emscripten again, however."}, {"owner": {"reputation": 29150, "user_id": 931340, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/32ce9f314c902bc1fdbc6e7f9dd608c1?s=128&d=identicon&r=PG", "display_name": "olanod", "link": "https://stackoverflow.com/users/931340/olanod"}, "edited": false, "score": 1, "creation_date": 1533304137, "post_id": 51666736, "comment_id": 90311070, "body": "sure but I thought maybe there&#39;s a way with only the rust tooling that integrates nicely in the build script. Or it also looks like something the wasm-bindgen project could do eventually? like compiling the C lib to wsam, the rust lib and then generate the JS glue code that links them?"}, {"owner": {"reputation": 9567, "user_id": 7916438, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8541ff62182bcfd172e116a4e0d2fa58?s=128&d=identicon&r=PG", "display_name": "tevemadar", "link": "https://stackoverflow.com/users/7916438/tevemadar"}, "edited": false, "score": 2, "creation_date": 1534074519, "post_id": 51666736, "comment_id": 90572039, "body": "I have a comment too: gluing from JavaScript can be tricky either because one would have to allocate+copy memory blobs back and forth between the calls (if the two modules have their own memory), or they would need carefully designed access to a shared, imported memory (so it would not get invalidated via resizing or otherwise), which the secondary module should not initialize at all (without further magics its data section would clash with the main module for sure)."}, {"owner": {"reputation": 8789, "user_id": 539465, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/2acba600ecfbe1cc2e7f3c94b686ac84?s=128&d=identicon&r=PG", "display_name": "Valentin Lorentz", "link": "https://stackoverflow.com/users/539465/valentin-lorentz"}, "edited": false, "score": 4, "creation_date": 1534698093, "post_id": 51666736, "comment_id": 90789630, "body": "Lazy version: use corrode to convert the C lib into Rust, and paste that in your crate."}], "answers": [{"comments": [{"owner": {"reputation": 9567, "user_id": 7916438, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8541ff62182bcfd172e116a4e0d2fa58?s=128&d=identicon&r=PG", "display_name": "tevemadar", "link": "https://stackoverflow.com/users/7916438/tevemadar"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1534283222, "post_id": 51804070, "comment_id": 90653619, "body": "Side finding if anyone follows: <code>clang --target=wasm32-unknown-unknown-elf [...]</code> dies with internal compiler error on Linux too."}], "tags": [], "owner": {"reputation": 9567, "user_id": 7916438, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8541ff62182bcfd172e116a4e0d2fa58?s=128&d=identicon&r=PG", "display_name": "tevemadar", "link": "https://stackoverflow.com/users/7916438/tevemadar"}, "is_accepted": false, "score": 24, "last_activity_date": 1534844342, "last_edit_date": 1534844342, "creation_date": 1534024575, "answer_id": 51804070, "question_id": 51666736, "link": "https://stackoverflow.com/questions/51666736/how-do-i-use-a-c-library-in-a-rust-library-compiled-to-webassembly/51804070#51804070", "title": "How do I use a C library in a Rust library compiled to WebAssembly?", "body": "<p>TL;DR: Jump to \"<strong>New week, new adventures</strong>\" in order to get \"Hello from C and Rust!\"</p>\n\n<p>The nice way would be creating a WASM library and passing it to the linker. <code>rustc</code> has an option for that (and there seem to be source-code directives too):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc &lt;yourcode.rs&gt; --target wasm32-unknown-unknown --crate-type=cdylib -C link-arg=&lt;library.wasm&gt;\n</code></pre>\n\n<p>The trick is that the library has to be a library, so it needs to contain <code>reloc</code> (and in practice <code>linking</code>) sections. Emscripten seems to have a symbol for that, <code>RELOCATABLE</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>emcc &lt;something.c&gt; -s WASM=1 -s SIDE_MODULE=1 -s RELOCATABLE=1 -s EMULATED_FUNCTION_POINTERS=1 -s ONLY_MY_CODE=1 -o &lt;something.wasm&gt;\n</code></pre>\n\n<p>(<code>EMULATED_FUNCTION_POINTERS</code> is included with <code>RELOCATABLE</code>, so it is not really necessary, <code>ONLY_MY_CODE</code> strips some extras, but it does not matter here either)  </p>\n\n<p>The thing is, <code>emcc</code> never generated a relocatable <code>wasm</code> file for me, at least not the version I downloaded this week, for Windows (I played this on hard difficulty, which retrospectively might have not been the best idea). So the sections are missing and <code>rustc</code> keeps complaining about <code>&lt;something.wasm&gt; is not a relocatable wasm file</code>.  </p>\n\n<p>Then comes <code>clang</code>, which can generate a relocatable <code>wasm</code> module with a very simple one-liner:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>clang -c &lt;something.c&gt; -o &lt;something.wasm&gt; --target=wasm32-unknown-unknown\n</code></pre>\n\n<p>Then <code>rustc</code> says \"Linking sub-section ended prematurely\". Aw, yes (by the way, my Rust setup was brand new too). Then I read that there are two <code>clang</code> <code>wasm</code> targets: <code>wasm32-unknown-unknown-wasm</code> and <code>wasm32-unknown-unknown-elf</code>, and maybe the latter one should be used here. As my also brand new <code>llvm+clang</code> build runs into an internal error with this target, asking me to send an error report to the developers, it might be something to test on easy or medium, like on some *nix or Mac box.</p>\n\n<h3>Minimal success story: sum of three numbers</h3>\n\n<p>At this point I just added <code>lld</code> to <code>llvm</code> and succeeded with linking a test code manually from bitcode files:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>clang cadd.c --target=wasm32-unknown-unknown -emit-llvm -c\nrustc rsum.rs --target wasm32-unknown-unknown --crate-type=cdylib --emit llvm-bc\nlld -flavor wasm rsum.bc cadd.bc -o msum.wasm --no-entry\n</code></pre>\n\n<p>Aw yes, it sums numbers, 2 in <code>C</code> and 1+2 in Rust:</p>\n\n<p><strong>cadd.c</strong></p>\n\n<pre class=\"lang-c prettyprint-override\"><code>int cadd(int x,int y){\n  return x+y;\n}\n</code></pre>\n\n<p><strong>msum.rs</strong></p>\n\n<pre><code>extern \"C\" {\n    fn cadd(x: i32, y: i32) -&gt; i32;\n}\n\n#[no_mangle]\npub fn rsum(x: i32, y: i32, z: i32) -&gt; i32 {\n    x + unsafe { cadd(y, z) }\n}\n</code></pre>\n\n<p><strong>test.html</strong></p>\n\n<pre><code>&lt;script&gt;\n  fetch('msum.wasm')\n    .then(response =&gt; response.arrayBuffer())\n    .then(bytes =&gt; WebAssembly.compile(bytes))\n    .then(module =&gt; {\n      console.log(WebAssembly.Module.exports(module));\n      console.log(WebAssembly.Module.imports(module));\n      return WebAssembly.instantiate(module, {\n        env:{\n          _ZN4core9panicking5panic17hfbb77505dc622acdE:alert\n        }\n      });\n    })\n    .then(instance =&gt; {\n      alert(instance.exports.rsum(13,14,15));\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>That <code>_ZN4core9panicking5panic17hfbb77505dc622acdE</code> feels very natural (the module is compiled and instantiated in two steps in order to log the exports and imports, that is a way how such missing pieces can be found), and forecasts the demise of this attempt: the entire thing works because there is no other reference to the runtime library, and this particular method could be mocked/provided manually.</p>\n\n<h3>Side story: string</h3>\n\n<p>As <a href=\"https://doc.rust-lang.org/std/alloc/fn.alloc.html\" rel=\"noreferrer\"><code>alloc</code></a> and its <code>Layout</code> thing scared me a little, I went with the vector-based approach described/used from time to time, for example <a href=\"https://stackoverflow.com/questions/39550856/what-is-the-right-way-to-allocate-data-to-pass-to-an-ffi-call\">here</a> or on <a href=\"https://www.hellorust.com/demos/import-memory/\" rel=\"noreferrer\">Hello, Rust!</a>.<br>\nHere is an example, getting the \"Hello from ...\" string from the outside...</p>\n\n<p><strong>rhello.rs</strong></p>\n\n<pre><code>use std::ffi::CStr;\nuse std::mem;\nuse std::os::raw::{c_char, c_void};\nuse std::ptr;\n\nextern \"C\" {\n    fn chello() -&gt; *mut c_char;\n}\n\n#[no_mangle]\npub fn alloc(size: usize) -&gt; *mut c_void {\n    let mut buf = Vec::with_capacity(size);\n    let p = buf.as_mut_ptr();\n    mem::forget(buf);\n    p as *mut c_void\n}\n\n#[no_mangle]\npub fn dealloc(p: *mut c_void, size: usize) {\n    unsafe {\n        let _ = Vec::from_raw_parts(p, 0, size);\n    }\n}\n\n#[no_mangle]\npub fn hello() -&gt; *mut c_char {\n    let phello = unsafe { chello() };\n    let c_msg = unsafe { CStr::from_ptr(phello) };\n    let message = format!(\"{} and Rust!\", c_msg.to_str().unwrap());\n    dealloc(phello as *mut c_void, c_msg.to_bytes().len() + 1);\n    let bytes = message.as_bytes();\n    let len = message.len();\n    let p = alloc(len + 1) as *mut u8;\n    unsafe {\n        for i in 0..len as isize {\n            ptr::write(p.offset(i), bytes[i as usize]);\n        }\n        ptr::write(p.offset(len as isize), 0);\n    }\n    p as *mut c_char\n}\n</code></pre>\n\n<p>Built as <code>rustc rhello.rs --target wasm32-unknown-unknown --crate-type=cdylib</code></p>\n\n<p>... and actually working with <code>JavaScript</code>:</p>\n\n<p><strong>jhello.html</strong></p>\n\n<pre><code>&lt;script&gt;\n  var e;\n  fetch('rhello.wasm')\n    .then(response =&gt; response.arrayBuffer())\n    .then(bytes =&gt; WebAssembly.compile(bytes))\n    .then(module =&gt; {\n      console.log(WebAssembly.Module.exports(module));\n      console.log(WebAssembly.Module.imports(module));\n      return WebAssembly.instantiate(module, {\n        env:{\n          chello:function(){\n            var s=\"Hello from JavaScript\";\n            var p=e.alloc(s.length+1);\n            var m=new Uint8Array(e.memory.buffer);\n            for(var i=0;i&lt;s.length;i++)\n              m[p+i]=s.charCodeAt(i);\n            m[s.length]=0;\n            return p;\n          }\n        }\n      });\n    })\n    .then(instance =&gt; {\n      /*var*/ e=instance.exports;\n      var ptr=e.hello();\n      var optr=ptr;\n      var m=new Uint8Array(e.memory.buffer);\n      var s=\"\";\n      while(m[ptr]!=0)\n        s+=String.fromCharCode(m[ptr++]);\n      e.dealloc(optr,s.length+1);\n      console.log(s);\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>It is not particularly beautiful (actually I have no clue about Rust), but it does something what I expect from it, and even that <code>dealloc</code> might work (at least invoking it twice throws a panic).<br>\nThere was an important lesson on the way: when the module manages its memory, its size may change which results in invalidating the backing <code>ArrayBuffer</code> object and its views. So that is why <code>memory.buffer</code> is checked multiple times, and checked <em>after</em> calling into <code>wasm</code> code.</p>\n\n<p>And this is where I am stuck, because this code would refer to runtime libraries, and <code>.rlib</code>-s. The closest I could get to a manual build is the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc rhello.rs --target wasm32-unknown-unknown --crate-type=cdylib --emit obj\nlld -flavor wasm rhello.o -o rhello.wasm --no-entry --allow-undefined\n     liballoc-5235bf36189564a3.rlib liballoc_system-f0b9538845741d3e.rlib\n     libcompiler_builtins-874d313336916306.rlib libcore-5725e7f9b84bd931.rlib\n     libdlmalloc-fffd4efad67b62a4.rlib liblibc-453d825a151d7dec.rlib\n     libpanic_abort-43290913ef2070ae.rlib libstd-dcc98be97614a8b6.rlib\n     libunwind-8cd3b0417a81fb26.rlib\n</code></pre>\n\n<p>Where I had to use the <code>lld</code> sitting in the depths of the Rust toolchain as <code>.rlib</code>-s are said to be <a href=\"https://doc.rust-lang.org/reference/linkage.html\" rel=\"noreferrer\">interpreted</a>, so they are bound to the <code>Rust</code> toolchain</p>\n\n<blockquote>\n  <p><code>--crate-type=rlib</code>, <code>#[crate_type = \"rlib\"]</code> - A \"Rust library\" file will be produced. This is used as an intermediate artifact and can be thought of as a \"static Rust library\". These <code>rlib</code> files, unlike <code>staticlib</code> files, are interpreted by the Rust compiler in future linkage. This essentially means that <code>rustc</code> will look for metadata in <code>rlib</code> files like it looks for metadata in dynamic libraries. This form of output is used to produce statically linked executables as well as <code>staticlib</code> outputs.</p>\n</blockquote>\n\n<p>Of course this <code>lld</code> does not eat the <code>.wasm</code>/<code>.o</code> files generated with <code>clang</code> or <code>llc</code> (\"Linking sub-section ended prematurely\"), perhaps the Rust-part also should be rebuilt with the custom <code>llvm</code>.<br>\nAlso, this build seems to be missing the actual allocators, besides <code>chello</code>, there will be 4 more entries in the import table: <code>__rust_alloc</code>, <code>__rust_alloc_zeroed</code>, <code>__rust_dealloc</code> and <code>__rust_realloc</code>. Which in fact could be provided from JavaScript after all, just defeats the idea of letting Rust handle its own memory, plus an allocator was present in the single-pass <code>rustc</code> build... Oh, yes, this is where I gave up for this week (Aug 11, 2018, at 21:56)</p>\n\n<h3>New week, new adventures, with Binaryen, <code>wasm-dis/merge</code></h3>\n\n<p>The idea was to modify the ready-made Rust code (having allocators and everything in place). And this one works. As long as your C code has no data.</p>\n\n<p>Proof of concept code:</p>\n\n<p><strong>chello.c</strong></p>\n\n<pre class=\"lang-c prettyprint-override\"><code>void *alloc(int len); // allocator comes from Rust\n\nchar *chello(){\n  char *hell=alloc(13);\n  hell[0]='H';\n  hell[1]='e';\n  hell[2]='l';\n  hell[3]='l';\n  hell[4]='o';\n  hell[5]=' ';\n  hell[6]='f';\n  hell[7]='r';\n  hell[8]='o';\n  hell[9]='m';\n  hell[10]=' ';\n  hell[11]='C';\n  hell[12]=0;\n  return hell;\n}\n</code></pre>\n\n<p>Not extremely usual, but it is C code.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc rhello.rs --target wasm32-unknown-unknown --crate-type=cdylib\nwasm-dis rhello.wasm -o rhello.wast\nclang chello.c --target=wasm32-unknown-unknown -nostdlib -Wl,--no-entry,--export=chello,--allow-undefined\nwasm-dis a.out -o chello.wast\nwasm-merge rhello.wast chello.wast -o mhello.wasm -O\n</code></pre>\n\n<p>(<code>rhello.rs</code> is the same one presented in \"Side story: string\")<br>\nAnd the result works as</p>\n\n<p><strong>mhello.html</strong></p>\n\n<pre><code>&lt;script&gt;\n  fetch('mhello.wasm')\n    .then(response =&gt; response.arrayBuffer())\n    .then(bytes =&gt; WebAssembly.compile(bytes))\n    .then(module =&gt; {\n      console.log(WebAssembly.Module.exports(module));\n      console.log(WebAssembly.Module.imports(module));\n      return WebAssembly.instantiate(module, {\n        env:{\n          memoryBase: 0,\n          tableBase: 0\n        }\n      });\n    })\n    .then(instance =&gt; {\n      var e=instance.exports;\n      var ptr=e.hello();\n      console.log(ptr);\n      var optr=ptr;\n      var m=new Uint8Array(e.memory.buffer);\n      var s=\"\";\n      while(m[ptr]!=0)\n        s+=String.fromCharCode(m[ptr++]);\n      e.dealloc(optr,s.length+1);\n      console.log(s);\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Even the allocators seem to do something (<code>ptr</code> readings from repeated blocks with/without <code>dealloc</code> show how memory does not leak/leaks accordingly).</p>\n\n<p>Of course this is super-fragile and has mysterious parts too:</p>\n\n<ul>\n<li>if the final merge is run with <code>-S</code> switch (generates source code instead of <code>.wasm</code>), and the result assembly file is compiled separately (using <code>wasm-as</code>), the result will be a couple bytes shorter (and those bytes are somewhere in the very middle of the running code, not in export/import/data sections)</li>\n<li>the order of merge matters, file with \"Rust-origin\" has to come first. <code>wasm-merge chello.wast rhello.wast [...]</code> dies with an entertaining message  \n\n<blockquote>\n  <p>[wasm-validator error in module] unexpected false: segment offset should be reasonable, on<br>\n  [i32] (i32.const 1)<br>\n  Fatal: error in validating output</p>\n</blockquote></li>\n<li>probably my fault, but I had to build a complete <code>chello.wasm</code> module (so, with linking). Compiling only (<code>clang -c [...]</code>) resulted in the relocatable module which was missed so much at the very beginning of this story, but decompiling that one (to <code>.wast</code>) lost the named export (<code>chello()</code>):<br>\n<code>(export \"chello\" (func $chello))</code> disappears completely<br>\n<code>(func $chello ...</code> becomes <code>(func $0 ...</code>, an internal function (<code>wasm-dis</code> loses <code>reloc</code> and <code>linking</code> sections, putting only a remark about them and their size into the assembly source)</li>\n<li>related to the previous one: this way (building a complete module) data from the secondary module can not be relocated by <code>wasm-merge</code>: while there is a chance for catching references to the string itself (<code>const char *HELLO=\"Hello from C\";</code> becomes a constant at offset 1024 in particular, and later referred as <code>(i32.const 1024)</code> if it is local constant, inside a function), it does not happen. And if it is a global constant, its address becomes a global constant too, number 1024 stored at offset 1040, and the string is going to be referred as <code>(i32.load offset=1040 [...]</code>, which starts being difficult to catch.</li>\n</ul>\n\n<p>For laughs, this code compiles and works too...</p>\n\n<pre><code>void *alloc(int len);\n\nint my_strlen(const char *ptr){\n  int ret=0;\n  while(*ptr++)ret++;\n  return ret;\n}\n\nchar *my_strcpy(char *dst,const char *src){\n  char *ret=dst;\n  while(*src)*dst++=*src++;\n  *dst=0;\n  return ret;\n}\n\nchar *chello(){\n  const char *HELLO=\"Hello from C\";\n  char *hell=alloc(my_strlen(HELLO)+1);\n  return my_strcpy(hell,HELLO);\n}\n</code></pre>\n\n<p>... just it writes \"Hello from C\" in the middle of Rust's message pool, resulting in the printout</p>\n\n<blockquote>\n  <p>Hello from Clt::unwrap()` on an `Err`an value and Rust!</p>\n</blockquote>\n\n<p>(Explanation: 0-initializers are not present in the recompiled code because of the optimization flag, <code>-O</code>)<br>\nAnd it also brings up the question about locating a <code>libc</code> (though defining them without <code>my_</code>, <code>clang</code> mentions <code>strlen</code> and <code>strcpy</code> as built-ins, also telling their correct singatures, it does not emit code for them and they become imports for the resulting module).</p>\n"}], "owner": {"reputation": 29150, "user_id": 931340, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/32ce9f314c902bc1fdbc6e7f9dd608c1?s=128&d=identicon&r=PG", "display_name": "olanod", "link": "https://stackoverflow.com/users/931340/olanod"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3129, "favorite_count": 11, "answer_count": 1, "score": 29, "last_activity_date": 1534844342, "creation_date": 1533278657, "last_edit_date": 1533301603, "question_id": 51666736, "link": "https://stackoverflow.com/questions/51666736/how-do-i-use-a-c-library-in-a-rust-library-compiled-to-webassembly", "title": "How do I use a C library in a Rust library compiled to WebAssembly?", "body": "<p>I'm experimenting with Rust, WebAssembly and C interoperability to eventually use the Rust (with static C dependency) library in the browser or Node.js. I'm using <a href=\"https://github.com/rustwasm/wasm-bindgen\" rel=\"noreferrer\"><code>wasm-bindgen</code></a> for the JavaScript glue code.</p>\n\n<pre><code>#![feature(libc, use_extern_macros)]\nextern crate wasm_bindgen;\n\nuse wasm_bindgen::prelude::*;\nuse std::os::raw::c_char;\nuse std::ffi::CStr;\n\nextern \"C\" {\n    fn hello() -&gt; *const c_char; // returns \"hello from C\" \n}\n\n#[wasm_bindgen]\npub fn greet() -&gt; String {\n    let c_msg = unsafe { CStr::from_ptr(hello()) };\n    format!(\"{} and Rust!\", c_msg.to_str().unwrap())\n}\n</code></pre>\n\n<p>My first naive approach was to have a <code>build.rs</code> script that uses the gcc crate to generate a static library from the C code. Before introducing the WASM bits, I could compile the Rust program and see the <code>hello from C</code> output in the console, now I get an error from the compiler saying</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rust-lld: error: unknown file type: hello.o\n</code></pre>\n\n<p>build.rs</p>\n\n<pre><code>extern crate gcc;                                                                                         \n\nfn main() {\n    gcc::Build::new()\n        .file(\"src/hello.c\")\n        .compile(\"libhello.a\");\n}\n</code></pre>\n\n<p>This  makes sense, now that I think about it, since the <code>hello.o</code> file was compiled for my laptop's architecture not WebAssembly. </p>\n\n<p>Ideally I'd like this to work out of the box adding some magic in my build.rs that would for example compile the C library to be a static WebAssembly library that Rust can use.</p>\n\n<p>What I think that could work, but would like to avoid since it sounds more problematic, is using Emscripten to create a WASM library for the C code then compile the Rust library separately and glue them together in JavaScript.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1533304551, "post_id": 51664647, "comment_id": 90311350, "body": "@trentcl good point (I hate how newer Rustdoc collapses a lot more things by default)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1533304716, "last_edit_date": 1533304716, "creation_date": 1533264624, "answer_id": 51664647, "question_id": 51664422, "link": "https://stackoverflow.com/questions/51664422/where-did-this-static-lifetime-came-from/51664647#51664647", "title": "Where did this &quot;static&quot; lifetime came from\uff1f", "body": "<p>I highly recommend reading the documentation for code you are trying to use. For example, the documentation for <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"nofollow noreferrer\"><code>Any</code></a> says (emphasis mine)</p>\n\n<blockquote>\n  <p>A type to emulate dynamic typing.</p>\n  \n  <p>Most types implement <code>Any</code>. However, <strong>any type which contains a non-<code>'static</code> reference</strong> does not. See the <a href=\"https://doc.rust-lang.org/std/any/index.html\" rel=\"nofollow noreferrer\">module-level documentation</a> for more details.</p>\n</blockquote>\n\n<p>The trait itself requires a <code>'static</code> bound:</p>\n\n<pre><code>pub trait Any: 'static {\n    fn get_type_id(&amp;self) -&gt; TypeId;\n}\n</code></pre>\n\n<p>You can also see all the method implementations require <code>'static</code>:</p>\n\n<pre><code>impl Any + 'static {}\nimpl Any + 'static + Send {}\nimpl Any + 'static + Sync + Send {}\n</code></pre>\n"}], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 232, "favorite_count": 0, "accepted_answer_id": 51664647, "answer_count": 1, "score": -2, "last_activity_date": 1533304716, "creation_date": 1533262496, "last_edit_date": 1533264238, "question_id": 51664422, "link": "https://stackoverflow.com/questions/51664422/where-did-this-static-lifetime-came-from", "title": "Where did this &quot;static&quot; lifetime came from\uff1f", "body": "<p><a href=\"https://play.rust-lang.org/?gist=0f313bbee1be54e8843fc6891da50b55&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">The following program</a> doesn't compile:</p>\n\n<pre><code>use std::any::Any;\n\ntrait Foo&lt;'a&gt; {\n    fn to_box_any(self: Box&lt;Self&gt;) -&gt; Box&lt;Any + 'a&gt;;\n}\n\nfn test&lt;'a&gt;(v: Box&lt;dyn Foo&lt;'a&gt; + 'a&gt;) {\n    v.to_box_any();\n}\n\nfn main() {}\n</code></pre>\n\n<p>Error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0478]: lifetime bound not satisfied\n --&gt; src/main.rs:8:7\n  |\n8 |     v.to_box_any();\n  |       ^^^^^^^^^^\n  |\nnote: lifetime parameter instantiated with the lifetime 'a as defined on the function body at 7:1\n --&gt; src/main.rs:7:1\n  |\n7 | fn test&lt;'a&gt;(v: Box&lt;dyn Foo&lt;'a&gt; + 'a&gt;) {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  = note: but lifetime parameter must outlive the static lifetime\n</code></pre>\n\n<p>I thought I marked as many explicit lifetimes as I can, but I don't know where the <code>static</code> lifetime requirement came from.</p>\n\n<p>If I change <code>Any</code> with a custom trait, it works, so it looks like <code>Any</code> is creating the requirement?</p>\n"}, {"tags": ["iterator", "rust", "mutex"], "comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 1, "creation_date": 1533306443, "post_id": 51664098, "comment_id": 90312467, "body": "If the only problem is the <code>mut</code>, just using <code>#[rental_mut]</code> instead of <code>#[rental]</code> should fix it, shouldn&#39;t it?"}, {"owner": {"reputation": 471, "user_id": 4902245, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-pic2BjXYyzs/AAAAAAAAAAI/AAAAAAAAAGQ/BoHpHYln4HU/photo.jpg?sz=128", "display_name": "Oliver Goodman", "link": "https://stackoverflow.com/users/4902245/oliver-goodman"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1533331258, "post_id": 51664098, "comment_id": 90323657, "body": "oboy, how did i not spot that? thank you very much!"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1533331607, "post_id": 51664098, "comment_id": 90323736, "body": "If that is the solution, you should write an answer and accept it, instead of editing it into the question. It&#39;s normal to answer your own question and makes it easier for future readers to know the question is solved."}, {"owner": {"reputation": 471, "user_id": 4902245, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-pic2BjXYyzs/AAAAAAAAAAI/AAAAAAAAAGQ/BoHpHYln4HU/photo.jpg?sz=128", "display_name": "Oliver Goodman", "link": "https://stackoverflow.com/users/4902245/oliver-goodman"}, "edited": false, "score": 0, "creation_date": 1533332161, "post_id": 51664098, "comment_id": 90323904, "body": "@trentol, done. It seems i have to wait 24h before i&#39;m allowed to accept it :)."}], "answers": [{"tags": [], "owner": {"reputation": 471, "user_id": 4902245, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-pic2BjXYyzs/AAAAAAAAAAI/AAAAAAAAAGQ/BoHpHYln4HU/photo.jpg?sz=128", "display_name": "Oliver Goodman", "link": "https://stackoverflow.com/users/4902245/oliver-goodman"}, "is_accepted": true, "score": 4, "last_activity_date": 1533332009, "creation_date": 1533332009, "answer_id": 51680330, "question_id": 51664098, "link": "https://stackoverflow.com/questions/51664098/how-can-i-return-an-iterator-over-a-locked-struct-member-in-rust/51680330#51680330", "title": "How can I return an iterator over a locked struct member in Rust?", "body": "<p>As user <a href=\"https://stackoverflow.com/users/865874/rodrigo\">rodrigo</a> has pointed out in a comment, the solution is simply to change <code>#[rental]</code> to <code>#[rental_mut]</code>.</p>\n"}], "owner": {"reputation": 471, "user_id": 4902245, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-pic2BjXYyzs/AAAAAAAAAAI/AAAAAAAAAGQ/BoHpHYln4HU/photo.jpg?sz=128", "display_name": "Oliver Goodman", "link": "https://stackoverflow.com/users/4902245/oliver-goodman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 541, "favorite_count": 0, "accepted_answer_id": 51680330, "answer_count": 1, "score": 3, "last_activity_date": 1533332083, "creation_date": 1533259219, "last_edit_date": 1533332083, "question_id": 51664098, "link": "https://stackoverflow.com/questions/51664098/how-can-i-return-an-iterator-over-a-locked-struct-member-in-rust", "title": "How can I return an iterator over a locked struct member in Rust?", "body": "<p>Here is as far as I could get, using <a href=\"https://crates.io/crates/rental\" rel=\"nofollow noreferrer\">rental</a>, partly based on <a href=\"https://stackoverflow.com/questions/43952104/how-can-i-store-a-chars-iterator-in-the-same-struct-as-the-string-it-is-iteratin\">How can I store a Chars iterator in the same struct as the String it is iterating on?</a>. The difference here is that the <code>get_iter</code> method of the locked member has to take a mutable self reference.</p>\n\n<p>I'm not tied to using rental: I'd be just as happy with a solution using <a href=\"https://crates.io/crates/reffers\" rel=\"nofollow noreferrer\">reffers</a> or <a href=\"https://crates.io/crates/owning_ref\" rel=\"nofollow noreferrer\">owning_ref</a>.</p>\n\n<p>The <code>PhantomData</code> is present here just so that <code>MyIter</code> bears the normal lifetime relationship to <code>MyIterable</code>, the thing being iterated over.</p>\n\n<p>I also tried changing <code>#[rental]</code> to <code>#[rental(deref_mut_suffix)]</code> and changing the return type of <code>MyIterable.get_iter</code> to <code>Box&lt;Iterator&lt;Item=i32&gt; + 'a&gt;</code> but that gave me other lifetime errors originating in the macro that I was unable to decipher.</p>\n\n<pre><code>#[macro_use]\nextern crate rental;\n\nuse std::marker::PhantomData;\n\npub struct MyIterable {}\n\nimpl MyIterable {\n    // In the real use-case I can't remove the 'mut'.\n    pub fn get_iter&lt;'a&gt;(&amp;'a mut self) -&gt; MyIter&lt;'a&gt; {\n        MyIter {\n            marker: PhantomData,\n        }\n    }\n}\n\npub struct MyIter&lt;'a&gt; {\n    marker: PhantomData&lt;&amp;'a MyIterable&gt;,\n}\n\nimpl&lt;'a&gt; Iterator for MyIter&lt;'a&gt; {\n    type Item = i32;\n    fn next(&amp;mut self) -&gt; Option&lt;i32&gt; {\n        Some(42)\n    }\n}\n\nuse std::sync::Mutex;\n\nrental! {\n    mod locking_iter {\n        pub use super::{MyIterable, MyIter};\n        use std::sync::MutexGuard;\n\n        #[rental]\n        pub struct LockingIter&lt;'a&gt; {\n            guard: MutexGuard&lt;'a, MyIterable&gt;,\n            iter: MyIter&lt;'guard&gt;,\n        }\n    }\n}\n\nuse locking_iter::LockingIter;\n\nimpl&lt;'a&gt; Iterator for LockingIter&lt;'a&gt; {\n    type Item = i32;\n\n    #[inline]\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.rent_mut(|iter| iter.next())\n    }\n}\n\nstruct Access {\n    shared: Mutex&lt;MyIterable&gt;,\n}\n\nimpl Access {\n    pub fn get_iter&lt;'a&gt;(&amp;'a self) -&gt; Box&lt;Iterator&lt;Item = i32&gt; + 'a&gt; {\n        Box::new(LockingIter::new(self.shared.lock().unwrap(), |mi| {\n            mi.get_iter()\n        }))\n    }\n}\n\nfn main() {\n    let access = Access {\n        shared: Mutex::new(MyIterable {}),\n    };\n    let iter = access.get_iter();\n    let contents: Vec&lt;i32&gt; = iter.take(2).collect();\n    println!(\"contents: {:?}\", contents);\n}\n</code></pre>\n"}, {"tags": ["syntax", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1533248344, "creation_date": 1533248344, "answer_id": 51662881, "question_id": 51662829, "link": "https://stackoverflow.com/questions/51662829/do-rust-match-statements-require-commas/51662881#51662881", "title": "Do Rust match statements require commas?", "body": "<blockquote>\n  <p>Do Rust match statements require commas?</p>\n</blockquote>\n\n<p>No. <em>Your own code proves that</em>.</p>\n\n<blockquote>\n  <p>Why does this code work?</p>\n</blockquote>\n\n<p>Because the designers of the language decided it should.</p>\n\n<p>A <em>match arm</em> can have either an expression followed by a comma or a block without a comma.</p>\n\n<blockquote>\n  <p>Are commas in match statements just a convention?</p>\n</blockquote>\n\n<p>No. When using braces, rustfmt removes the commas. Otherwise they are <strong>required</strong>.</p>\n\n<p>How rustfmt puts your code:</p>\n\n<pre><code>for (index, character) in argv[1].chars().enumerate() {\n    match character {\n        'a' | 'A' =&gt; println!(\"{}: 'A'\", index),\n        'e' | 'E' =&gt; println!(\"{}: 'E'\", index),\n        'i' | 'I' =&gt; println!(\"{}: 'I'\", index),\n        'o' | 'O' =&gt; println!(\"{}: 'O'\", index),\n        'u' | 'U' =&gt; println!(\"{}: 'U'\", index),\n        _ =&gt; {\n            let consonant: Vec&lt;_&gt; = character.to_uppercase().collect();\n            println!(\"{}: {:?} is not a vowel\", index, consonant[0])\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 20, "last_activity_date": 1533249187, "last_edit_date": 1533249187, "creation_date": 1533248986, "answer_id": 51662971, "question_id": 51662829, "link": "https://stackoverflow.com/questions/51662829/do-rust-match-statements-require-commas/51662971#51662971", "title": "Do Rust match statements require commas?", "body": "<p>Let's take a look what <a href=\"https://doc.rust-lang.org/reference/expressions/match-expr.html\" rel=\"noreferrer\">the Rust reference says about this</a>:</p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>MatchArms :\n   ( MatchArm =&gt; ( BlockExpression ,? | Expression , ) )*\n   MatchArm =&gt; ( BlockExpression | Expression ) ,?\n</code></pre>\n</blockquote>\n\n<p>What we can see here is that on the right side of <code>=&gt;</code> there is always an expression, but we distinguish between two types of expressions: <em>BlockExpression</em> and <em>Expression</em>. After a <em>BlockExpression</em> a comma is optional (denoted by the <code>?</code>), but after an normal expression the comma is required, except for the last match arm: there, the comma is always optional.</p>\n\n<p>What is a <em>BlockExpression</em>? <a href=\"https://doc.rust-lang.org/reference/expressions/block-expr.html#block-expressions\" rel=\"noreferrer\">The reference</a> defines it as basically two braces <code>{ }</code> with a list of statements and an optional tail expression. </p>\n\n<p>So: <strong>commas at the end of match arms are optional if:</strong></p>\n\n<ul>\n<li><strong>it is the last match arm</strong>, <strong>or</strong></li>\n<li><strong>if the right hand side of the arm is a block expression (stuff between two braces <code>{}</code>).</strong></li>\n</ul>\n\n<hr>\n\n<p>Unfortunately, the compiler doesn't quite agree with the reference. This works, for example:</p>\n\n<pre><code>match true {\n    false =&gt; if true {\n        \"hi\"\n    } else {\n        \"no\"\n    }\n    true =&gt; \"\"\n};\n</code></pre>\n\n<p>Note that the right hand side of the first match arm is not a block expression, but an if-else-expression. So for the compiler the rule seems to be: if the right hand side ends with a closing brace <code>}</code>, the comma is optional.</p>\n\n<hr>\n\n<p>As for <strong>what is idiomatic</strong>: </p>\n\n<ul>\n<li>If the right hand side ends with a closing brace <code>}</code>, omit the comma.</li>\n<li>If not: use a comma, even when it's the last match arm.</li>\n</ul>\n"}], "owner": {"reputation": 305, "user_id": 10173381, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-K7vnpdTVRAg/AAAAAAAAAAI/AAAAAAAAAGs/O906amUui-k/photo.jpg?sz=128", "display_name": "Duncan", "link": "https://stackoverflow.com/users/10173381/duncan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1116, "favorite_count": 0, "accepted_answer_id": 51662971, "answer_count": 2, "score": 14, "last_activity_date": 1533249187, "creation_date": 1533247980, "last_edit_date": 1533248355, "question_id": 51662829, "link": "https://stackoverflow.com/questions/51662829/do-rust-match-statements-require-commas", "title": "Do Rust match statements require commas?", "body": "<p>Why does this code work? Are commas in match statements just a convention?</p>\n\n<pre><code>for (index, character) in argv[1].chars().enumerate() {\nmatch character {\n    'a' | 'A' =&gt; {println!(\"{}: 'A'\", index)}\n    'e' | 'E' =&gt; {println!(\"{}: 'E'\", index)}\n    'i' | 'I' =&gt; {println!(\"{}: 'I'\", index)}\n    'o' | 'O' =&gt; {println!(\"{}: 'O'\", index)}\n    'u' | 'U' =&gt; {println!(\"{}: 'U'\", index)}\n     _        =&gt; {\n                     let consonant: Vec&lt;_&gt; = character.to_uppercase().collect();\n                     println!(\"{}: {:?} is not a vowel\", index, consonant[0])\n                 }\n}\n</code></pre>\n"}, {"tags": ["nested", "rust", "constants"], "comments": [{"owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1533298734, "post_id": 51662786, "comment_id": 90307503, "body": "@trentcl I did, thank you for pointing that out!"}, {"owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1533299117, "post_id": 51662786, "comment_id": 90307710, "body": "Why exactly are people down-voting this question? It&#39;s a perfectly valid question, try googling for <code>nesting constants in rust</code>, not only does nothing come up, the only thing that does is this question, which was just (relatively) adde."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1533248652, "creation_date": 1533248652, "answer_id": 51662918, "question_id": 51662786, "link": "https://stackoverflow.com/questions/51662786/nested-constants-in-rust/51662918#51662918", "title": "Nested constants in Rust", "body": "<blockquote>\n  <p>is it something as simple as</p>\n</blockquote>\n\n<p>Yes. <em>As your own code shows</em>, you can use Rust modules just like Ruby modules to add namespacing.</p>\n\n<p>You can also add constants to a struct, enum, or trait:</p>\n\n<pre><code>struct Foo;\n\nimpl Foo {\n    const BAR: i32 = 42;\n}\n\nfn main() {\n    println!(\"{}\", Foo::BAR);\n}\n</code></pre>\n"}], "owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "accepted_answer_id": 51662918, "answer_count": 1, "score": -1, "last_activity_date": 1533298706, "creation_date": 1533247641, "last_edit_date": 1533298706, "question_id": 51662786, "link": "https://stackoverflow.com/questions/51662786/nested-constants-in-rust", "title": "Nested constants in Rust", "body": "<p>In Ruby, I can do this:</p>\n\n<pre class=\"lang-rb prettyprint-override\"><code>module Settings\n  module General\n    SomeSetting = \"Some value\"\n  end\nend\n\nputs Settings::General::SomeSetting;\n# =&gt; \"Some value\"\n</code></pre>\n\n<p>How do I achieve the same thing in Rust? </p>\n\n<p>I want to have some hard-coded values and I don't want to have to declare a struct that I can then use to store the settings when I'm only ever going to create that struct once.</p>\n\n<p>I've tried looking but I'm unable to find something definitive.</p>\n\n<p>Is it something as simple as:</p>\n\n<p>settings.rs:</p>\n\n<pre><code>pub mod dungeon {\n    pub mod general {\n        pub mod room {\n            const MinSize: i32 = 6;\n            const MaxSize: i32 = 10;\n            const MaxNo:   i32 = 30;\n        }\n        pub mod lighting {\n            const FovWalls: bool = true;\n            const TorchRadius: i32 = 10;\n        }\n        pub mod monster {\n            const MaxNo: i32 = 3;\n        }\n    }\n}\n</code></pre>\n\n<p>which would allow something like</p>\n\n<pre><code>&amp;settings::dungeon::general::room::MaxNo\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533248943, "post_id": 51662730, "comment_id": 90289358, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a> and <a href=\"https://stackoverflow.com/q/29760668/155423\">Conditionally iterate over one of several possible iterators</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/51662730/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533249003, "post_id": 51662730, "comment_id": 90289372, "body": "TL;DR the duplicates: No. <a href=\"https://stackoverflow.com/a/50204370/155423\">Use <code>Either</code></a> or <a href=\"https://stackoverflow.com/a/29760740/155423\">a boxed trait object</a>."}, {"owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533276466, "post_id": 51662730, "comment_id": 90295442, "body": "I don&#39;t think that my problem is a duplicate of <a href=\"https://stackoverflow.com/questions/27535289/what-is-the-correct-way-to-return-an-iterator-or-any-other-trait?noredirect=1&amp;lq=1\" title=\"what is the correct way to return an iterator or any other trait\">stackoverflow.com/questions/27535289/&hellip;</a> as my problem isn&#39;t related to the return type of the function. I&#39;ll check whether the <code>Either</code> helps. Thanks."}, {"owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533280361, "post_id": 51662730, "comment_id": 90297130, "body": "I think what I actually was asking is how to convert an <code>Option&lt;T&gt;</code> to an iterator over the contained value (if any). That&#39;s exactly what the <code>.iter()</code> method on <code>std::option::Option</code> is for. So I might just delete this question as the answer is in the rust docs. What do you think?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1533283663, "post_id": 51662730, "comment_id": 90298751, "body": "You can also answer your own question if you believe someone might someday have the same problem as you"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533299221, "post_id": 51662730, "comment_id": 90307767, "body": "<i>as my problem isn&#39;t related to the return type of the function</i> \u2014 yes, it is, because you were trying to return <i>either</i> a <code>iter::Once</code> <b>or</b> <code>iter::Empty</code>. It&#39;s literally what the error message states. You are trying to return one type in one case and a different type in another case."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1533298955, "last_edit_date": 1592644375, "creation_date": 1533298955, "answer_id": 51672553, "question_id": 51662730, "link": "https://stackoverflow.com/questions/51662730/how-to-convert-an-optiont-to-an-iterator-of-zero-or-one-element/51672553#51672553", "title": "How to convert an Option&lt;T&gt; to an iterator of zero or one element?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> trait exists solely for the purpose of being able to convert types into iterators:</p>\n<blockquote>\n<p>Conversion into an Iterator.</p>\n<p>By implementing <code>IntoIterator</code> for a type, you define how it will be converted to an iterator. This is common for types which describe a collection of some kind.</p>\n<p>One benefit of implementing <code>IntoIterator</code> is that your type will<a href=\"https://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator\" rel=\"nofollow noreferrer\"> work with Rust's for loop syntax</a>.</p>\n</blockquote>\n\n<blockquote>\n<p>How to convert an <code>Option&lt;T&gt; </code>to an iterator of zero or one element?</p>\n</blockquote>\n<p><code>Option</code> implements <code>IntoIterator</code>:</p>\n<pre><code>impl&lt;'a, T&gt; IntoIterator for &amp;'a mut Option&lt;T&gt;\nimpl&lt;T&gt; IntoIterator for Option&lt;T&gt;\nimpl&lt;'a, T&gt; IntoIterator for &amp;'a Option&lt;T&gt;\n</code></pre>\n<p>The same is true for <code>Result</code>.</p>\n<p>All you need to do is call <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#impl-IntoIterator-1\" rel=\"nofollow noreferrer\"><code>into_iter</code></a> (or use the value in a place that calls <code>IntoIterator</code> like a <code>for</code> loop):</p>\n<pre><code>fn x() -&gt; impl Iterator&lt;Item = u32&gt; {\n    let ch = '1';\n    ch.to_digit(10).into_iter()\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43285372/155423\">Why does `Option` support `IntoIterator`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/40907897/155423\">Iterator on Option&lt;Vec&lt;&gt;&gt;</a></li>\n</ul>\n"}], "owner": {"reputation": 3207, "user_id": 4453678, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b1f2ad378f4eccf0df09d80d2f305e96?s=128&d=identicon&r=PG", "display_name": "Matthias Wimmer", "link": "https://stackoverflow.com/users/4453678/matthias-wimmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 814, "favorite_count": 0, "accepted_answer_id": 51672553, "answer_count": 1, "score": 3, "last_activity_date": 1533298955, "creation_date": 1533247293, "last_edit_date": 1533280262, "question_id": 51662730, "link": "https://stackoverflow.com/questions/51662730/how-to-convert-an-optiont-to-an-iterator-of-zero-or-one-element", "title": "How to convert an Option&lt;T&gt; to an iterator of zero or one element?", "body": "<p>I'm trying to decode a digit to an integer and either get an iterator over just this digit or an empty iterator if it wasn't a digit. I tried to do it like that:</p>\n\n<pre><code>let ch = '1';\nch.to_digit(10).map(once).unwrap_or(empty())\n</code></pre>\n\n<p>This doesn't compile. I get the following error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:6:41\n  |\n6 |     ch.to_digit(10).map(once).unwrap_or(empty());\n  |                                         ^^^^^^^ expected struct `std::iter::Once`, found struct `std::iter::Empty`\nerror[E0308]: mismatched types\n --&gt; src/lib.rs:6:41\n  |\n6 |     ch.to_digit(10).map(once).unwrap_or(empty());\n  |                                         ^^^^^^^ expected struct `std::iter::Once`, found struct `std::iter::Empty`\n  |\n  |\n  = note: expected type `std::iter::Once&lt;u32&gt;`\n             found type `std::iter::Empty&lt;_&gt;`\n\n  = note: expected type `std::iter::Once&lt;u32&gt;`\n             found type `std::iter::Empty&lt;_&gt;`\n</code></pre>\n\n<p>I there any way to tell the <code>.unwrap_or(...)</code> that I don't care of the actual type, but just that I will get an implementation of <code>Iterator</code>?</p>\n"}, {"tags": ["enums", "rust", "traits"], "comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 3, "creation_date": 1533240524, "post_id": 51661392, "comment_id": 90286207, "body": "In the code sample provided, you haven&#39;t implemented any traits. Did you forget to paste something?"}], "answers": [{"comments": [{"owner": {"reputation": 777, "user_id": 5697437, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/838f55e32bef215fa7dccda904737856?s=128&d=identicon&r=PG&f=1", "display_name": "Katie", "link": "https://stackoverflow.com/users/5697437/katie"}, "edited": false, "score": 0, "creation_date": 1533242211, "post_id": 51661466, "comment_id": 90286960, "body": "By the way, extra thanks for explaining to me how you would implement the traits for the enum variants under the present language constraints. This is indeed related to an interesting RFC (<a href=\"https://github.com/rust-lang/rfcs/pull/1450\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/1450</a>)  on making enum variants first-class types, which would allow you to do <code>impl Noise for Foo::Bar</code> and provide syntactic sugar for the <code>match</code> in your example."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 777, "user_id": 5697437, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/838f55e32bef215fa7dccda904737856?s=128&d=identicon&r=PG&f=1", "display_name": "Katie", "link": "https://stackoverflow.com/users/5697437/katie"}, "edited": false, "score": 1, "creation_date": 1533242633, "post_id": 51661466, "comment_id": 90287147, "body": "@Katie yes, I also hope for that RFC (in some form) to land someday, but I think there&#39;s a lot of other features that are more widely demanded that we have to wait for. :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1533241441, "last_edit_date": 1533241441, "creation_date": 1533240739, "answer_id": 51661466, "question_id": 51661392, "link": "https://stackoverflow.com/questions/51661392/how-can-i-implement-a-trait-in-scope-for-an-enum-of-existing-types-for-which-the/51661466#51661466", "title": "How can I implement a trait in scope for an enum of existing types for which the trait is implemented?", "body": "<blockquote>\n  <p>How can I implement a trait in scope for an enum of existing types</p>\n</blockquote>\n\n<p>You implement a trait for an enum the same way you implement a trait for a struct:</p>\n\n<pre><code>trait Noise {\n    fn noise(&amp;self);\n}\n\nenum Foo {\n    Bar,\n    Baz,\n}\n\nimpl Noise for Foo {\n    fn noise(&amp;self) {\n        match self {\n            Foo::Bar =&gt; println!(\"bar bar bar\"),\n            Foo::Baz =&gt; println!(\"baz baz baz\"),\n        }\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>an enum of existing types for which the trait is implemented</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p>I thought that the <code>Packet</code> trait would be derived </p>\n</blockquote>\n\n<p>It is not. Doing so would prevent people from implementing their <em>own</em> code for the trait if they needed. It also wouldn't work in all cases, such as when one variant didn't implement it.</p>\n\n<pre><code>trait Noise {\n    fn noise(&amp;self);\n}\n\nstruct Bar;\n\nimpl Noise for Bar {\n    fn noise(&amp;self) {\n        println!(\"bar bar bar\");\n    }\n}\n\nstruct Baz;\n\nimpl Noise for Baz {\n    fn noise(&amp;self) {\n        println!(\"baz baz baz\");\n    }\n}\n\nenum Foo {\n    Bar(Bar),\n    Baz(Baz),\n}\n\nimpl Noise for Foo {\n    fn noise(&amp;self) {\n        match self {\n            Foo::Bar(bar) =&gt; bar.noise(),\n            Foo::Baz(baz) =&gt; baz.noise(),\n        }\n    }\n}\n</code></pre>\n\n<p>It's conceptually possible that the language could be extended to support some annotation to do this, but I've never heard of anyone suggesting it. You could consider creating an RFC to add it.</p>\n\n<p>Perhaps you can go back to the source that taught you this and correct the problem at the root to prevent other peopl from being confused in the same manner.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/51567350/155423\">Can traits be used on enum types?</a></li>\n</ul>\n"}], "owner": {"reputation": 777, "user_id": 5697437, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/838f55e32bef215fa7dccda904737856?s=128&d=identicon&r=PG&f=1", "display_name": "Katie", "link": "https://stackoverflow.com/users/5697437/katie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 728, "favorite_count": 0, "accepted_answer_id": 51661466, "answer_count": 1, "score": 0, "last_activity_date": 1533241441, "creation_date": 1533240391, "last_edit_date": 1533241289, "question_id": 51661392, "link": "https://stackoverflow.com/questions/51661392/how-can-i-implement-a-trait-in-scope-for-an-enum-of-existing-types-for-which-the", "title": "How can I implement a trait in scope for an enum of existing types for which the trait is implemented?", "body": "<p>How can I implement a trait in scope for an enum of existing types for which the trait is implemented?</p>\n\n<p>I have this:</p>\n\n<pre><code>extern crate pnet;\n\nuse pnet::packet::ipv4::Ipv4Packet;\nuse pnet::packet::ipv6::Ipv6Packet;\n\nenum EthernetType {\n    IPv4,\n    ARP,\n    VLAN,\n    IPv6,\n    Unknown(u16),\n}\n\nenum IPPacket&lt;'a&gt; {\n    IPv4(Ipv4Packet&lt;'a&gt;),\n    IPv6(Ipv6Packet&lt;'a&gt;),\n}\n\nfn ip_decode(pkt: &amp;[u8]) -&gt; IPPacket {\n    let version = (pkt[0] &amp; 0xf0) &gt;&gt; 4;\n    if version == 4 {\n        IPPacket::IPv4(Ipv4Packet::new(&amp;pkt).unwrap())\n    } else {\n        IPPacket::IPv6(Ipv6Packet::new(&amp;pkt).unwrap())\n    }\n}\n\nfn main() {\n    // Parse ethernet packet here...\n    // ...\n    let ip_packet = ip_decode(b\"deadbeef\");\n    println!(\"{:?}\", ip_packet.payload());\n}\n</code></pre>\n\n<p>The compiler complains that I have not implemented the <a href=\"https://docs.rs/pnet/0.11.1/pnet/packet/trait.Packet.html\" rel=\"nofollow noreferrer\"><code>Packet</code> trait</a> for my enum:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `payload` found for type `IPPacket&lt;'_&gt;` in the current scope\n  --&gt; src/main.rs:32:32\n   |\n14 | enum IPPacket&lt;'a&gt; {\n   | ----------------- method `payload` not found for this\n...\n32 |     println!(\"{:?}\", ip_packet.payload());\n   |                                ^^^^^^^\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `payload`, perhaps you need to implement it:\n           candidate #1: `pnet::packet::Packet`\n</code></pre>\n\n<p>I thought that the <code>Packet</code> trait would be derived through <code>Ipv4Packet&lt;'a&gt;</code> and <code>Ipv6Packet&lt;'a&gt;</code>?</p>\n"}, {"tags": ["javascript", "rust", "webassembly"], "answers": [{"tags": [], "owner": {"reputation": 76, "user_id": 10173657, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/db528d3ea94d71940a10b5762b2654d6?s=128&d=identicon&r=PG", "display_name": "guest4e2", "link": "https://stackoverflow.com/users/10173657/guest4e2"}, "is_accepted": true, "score": 6, "last_activity_date": 1533256333, "last_edit_date": 1533256333, "creation_date": 1533255748, "answer_id": 51663772, "question_id": 51659292, "link": "https://stackoverflow.com/questions/51659292/javascript-arraybuffer-detaches-when-constructing-a-new-rust-vec-via-wasm/51663772#51663772", "title": "JavaScript ArrayBuffer &quot;detaches&quot; when constructing a new Rust Vec via WASM", "body": "<p>When you allocate a new buffer and there is not enough memory allocated by the WASM \"process\" for it, the browser will allocate a new, larger buffer and will copy all data into it from the old location. It's quite transparent inside the WASM interpreter, but all pointers passed to JavaScript (with which you construct <code>Uint8ClampedArray</code>) get invalidated. There are two solutions to my knowledge:</p>\n\n<ul>\n<li>Allocate enough memory in the WASM \"process\" at initialization and immediately deallocate it so pointers will not get invalidated so long as memory usage is lower than the selected size.</li>\n<li>Keep track of buffers passed to JavaScript and \"renew\" pointers on such errors.</li>\n</ul>\n"}], "owner": {"reputation": 43, "user_id": 8034246, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d97fe2eb57261a11817f3832da7db246?s=128&d=identicon&r=PG&f=1", "display_name": "user8034246", "link": "https://stackoverflow.com/users/8034246/user8034246"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 867, "favorite_count": 0, "accepted_answer_id": 51663772, "answer_count": 1, "score": 4, "last_activity_date": 1533256333, "creation_date": 1533231203, "last_edit_date": 1533237437, "question_id": 51659292, "link": "https://stackoverflow.com/questions/51659292/javascript-arraybuffer-detaches-when-constructing-a-new-rust-vec-via-wasm", "title": "JavaScript ArrayBuffer &quot;detaches&quot; when constructing a new Rust Vec via WASM", "body": "<p>The basic idea is that a pointer is returned and then an image will be displayed using the pointer after creating a <code>Vec</code> at each video frame:</p>\n\n<p>JavaScript:</p>\n\n<pre><code>var ptr = exports.alloc(size);\nlet bytes = new Uint8ClampedArray(exports.memory.buffer, ptr, size);\nlet image = new ImageData(bytes, 320, 240);\n\nfunction tick() {\n    requestAnimationFrame(tick);\n    ctx.drawImage(video, 0, 0, width, height);\n    let imageData = ctx.getImageData(0, 0, width, height).data;\n    bytes.set(imageData);\n    exports.create_vector();\n    ctx.putImageData(img, 0, 0);\n}\n</code></pre>\n\n<p>Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub extern \"C\" fn alloc(capacity: usize) -&gt; *mut c_void {\n    let mut buf = Vec::with_capacity(capacity);\n    let ptr = buf.as_mut_ptr();\n    mem::forget(buf);\n    return ptr as *mut c_void;\n}\n\n#[no_mangle]\npub extern \"C\" fn create_vector() {\n    let _: Vec&lt;u8&gt; = Vec::with_capacity(320 * 240);\n}\n</code></pre>\n\n<p><a href=\"https://github.com/jonysy/wasmtest\" rel=\"nofollow noreferrer\">Here is the actual code</a>. </p>\n\n<p>Here are the error messages:</p>\n\n<p><strong>Chrome:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Uncaught TypeError: Cannot perform %TypedArray%.prototype.set on a detached ArrayBuffer\n    at Uint8ClampedArray.set (&lt;anonymous&gt;)\n    at tick\n</code></pre>\n\n<p><strong>Safari:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>This webpage was reloaded because a problem occurred\n</code></pre>\n\n<p><strong>Mozilla:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>DOMException: \"An attempt was made to use an object that is not, or is no longer, usable\"\n\nTypeError: Underlying ArrayBuffer has been detached from the view\n</code></pre>\n\n<p>The main culprits seem to be:</p>\n\n<pre><code>let bytes = new Uint8ClampedArray(exports.memory.buffer, ptr, size);\n// ...\n    exports.create_vector();\n// ...\n</code></pre>\n\n<p>i.e., the browser crashes when I try to use <code>ptr</code> again after calling <code>exports.create_vector</code>.</p>\n\n<p>What is going wrong here? Is there a solution?</p>\n"}, {"tags": ["memory-management", "rust", "raii", "dangling-pointer"], "comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 2, "creation_date": 1533224184, "post_id": 51657295, "comment_id": 90278591, "body": "&quot;dangling reference bugs&quot; - Is it still a bug if it won&#39;t compile?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533224236, "post_id": 51657295, "comment_id": 90278617, "body": "See also <a href=\"https://stackoverflow.com/questions/43428894/moved-variable-still-borrowing-after-calling-drop\">Moved variable still borrowing after calling <code>drop</code>?</a>"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 2, "creation_date": 1533224321, "post_id": 51657295, "comment_id": 90278668, "body": "AFAIK there&#39;s nothing un-idiomatic about calling <code>drop</code> explicitly but it has no special meaning to the borrow checker. Depending on your exact situation, <code>drop</code> may be appropriate or using a nested block may be appropriate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1533224521, "post_id": 51657295, "comment_id": 90278789, "body": "<i>whether there&#39;s a way to drop that avoids the explicit call</i> \u2014 but that&#39;s not the whole question, right? You&#39;ve already identified that adding a new scope accomplishes the same goal, so presumably there are other restrictions you are adding?"}, {"owner": {"reputation": 3942, "user_id": 747916, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e780eae6ca6a0b5d0d4705259f9da879?s=128&d=identicon&r=PG", "display_name": "John Doucette", "link": "https://stackoverflow.com/users/747916/john-doucette"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1533224666, "post_id": 51657295, "comment_id": 90278891, "body": "@Shepmaster Really what I&#39;m looking for is the <i>idiomatic</i> way to express this. I&#39;m not very familiar with the language as yet. I came up with a way to express what I wanted, but, when learning a new language the first way that comes to mind is often not the best."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 6, "creation_date": 1533225521, "post_id": 51657295, "comment_id": 90279377, "body": "There&#39;s really only one way to drop a value in Rust: let it fall out of scope. There&#39;s nothing special about the <code>drop()</code> function, it&#39;s literally implemented as <code>pub fn drop&lt;T&gt;(_x: T) { }</code>. <a href=\"https://doc.rust-lang.org/std/mem/fn.drop.html\" rel=\"nofollow noreferrer\">The documentation explains this more.</a>"}], "owner": {"reputation": 3942, "user_id": 747916, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e780eae6ca6a0b5d0d4705259f9da879?s=128&d=identicon&r=PG", "display_name": "John Doucette", "link": "https://stackoverflow.com/users/747916/john-doucette"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 156, "favorite_count": 0, "closed_date": 1553092700, "answer_count": 0, "score": 0, "last_activity_date": 1533242685, "creation_date": 1533223657, "last_edit_date": 1533242685, "question_id": 51657295, "link": "https://stackoverflow.com/questions/51657295/is-there-an-idiomatic-way-to-drop-early-in-rust", "closed_reason": "Duplicate", "title": "Is there an idiomatic way to drop early in Rust?", "body": "<p>In <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html\" rel=\"nofollow noreferrer\">Chapter 4</a> of <em>The Rust Programming Language</em>, the <code>drop</code> function is introduced as being implicitly called at the end of any scope on all the variables that were allocated within that scope. This solves the usual alloc/dealloc problems.</p>\n\n<p>I can imagine wanting to drop <em>earlier</em> in some situations though. <a href=\"https://stackoverflow.com/questions/42910662/is-it-possible-in-rust-to-delete-an-object-before-the-end-of-scope\">This question</a> explains how to explicitly force a drop, and it's also possible to force deallocation early through the declaration of an inner scope:</p>\n\n<pre><code>let mut b = cheap_default_initialization();\n{ \n    let a = some_large_allocation();\n    b = some_other_large_allocation(a);\n    some_other_work(a, b);\n}\nlet c = third_large_allocation(b);\n</code></pre>\n\n<p>However, the explicit call to drop seems awkward, since one of the purposes of the ownership system is to avoid explicit, error prone, deallocation by the programmer. The inner scope solution seems more elegant, but also can require mutation that would otherwise be unnecessary (as shown in the example).</p>\n\n<p>Is there more idiomatic way to drop early than either of these? Is there a general agreement about which approach is better, or when each should be used?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 4, "last_activity_date": 1533274414, "last_edit_date": 1533274414, "creation_date": 1533203478, "answer_id": 51650561, "question_id": 51650259, "link": "https://stackoverflow.com/questions/51650259/how-can-i-fix-the-error-e0277-the-trait-bound-usize-stdmarkersized-is/51650561#51650561", "title": "How can I fix the error E0277: the trait bound `[usize]: std::marker::Sized` is not satisfied?", "body": "<p>Your problem (and the reason why a <code>&amp;</code> fixes your problem) is, that a slice has no known size <strong>at compile time</strong>.</p>\n\n<p>There are several solutions:</p>\n\n<ol>\n<li><p>Use an explicit length</p>\n\n<pre><code>fn foo(arr: [usize; 3]) { }\n</code></pre></li>\n</ol>\n\n<p>Using an explicit length will tell the compiler how large the array is and can now decide how much space to reserve for the array.</p>\n\n<ol start=\"2\">\n<li><p>Use a reference</p>\n\n<pre><code>fn foo(arr: &amp;[usize]) { }\n</code></pre></li>\n</ol>\n\n<p>A reference points to the slice (a fat pointer in fact), which size is known at compile time (depends on your architecture, but typically 32/64 bit).</p>\n\n<ol start=\"3\">\n<li><p>Use heap allocation</p>\n\n<pre><code>fn foo(arr: Box&lt;[usize]&gt; { }\n</code></pre></li>\n</ol>\n\n<p>A box is a heap allocated element (in fact a pointer), so that size is known as well.</p>\n\n<p>There are other container (<code>Rc</code>, <code>Arc</code>, ...) which accept a unsized element. You can spot them in the source code easily, because they have a requirement <a href=\"https://doc.rust-lang.org/std/marker/trait.Sized.html\" rel=\"nofollow noreferrer\"><code>?Sized</code></a> for their template argument (see <a href=\"https://doc.rust-lang.org/src/alloc/boxed.rs.html#98\" rel=\"nofollow noreferrer\"><code>Box</code> example</a>).</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1533222819, "last_edit_date": 1592644375, "creation_date": 1533222819, "answer_id": 51657026, "question_id": 51650259, "link": "https://stackoverflow.com/questions/51650259/how-can-i-fix-the-error-e0277-the-trait-bound-usize-stdmarkersized-is/51657026#51657026", "title": "How can I fix the error E0277: the trait bound `[usize]: std::marker::Sized` is not satisfied?", "body": "<blockquote>\n<p>I'm trying to pass an array to a function</p>\n<pre><code>fn my_func(xs: [usize])\n</code></pre>\n</blockquote>\n<p>This is <strong>not an array</strong>, it's a <em>slice</em>; that's the problem. Read <a href=\"https://stackoverflow.com/q/30794235/155423\">What is the difference between a slice and an array?</a></p>\n<p>As the other answers mention, there are several potential avenues to solve the problem, depending on your goals:</p>\n<ul>\n<li>Slices (<code>[T]</code>) don't have a size</li>\n<li>Arrays (<code>[T; N]</code>) have a size</li>\n<li>References to slices (<code>&amp;[T]</code>) have a size</li>\n<li>Boxed slices (<code>Box&lt;[T]&gt;</code>) have a size</li>\n<li>References to arrays (<code>&amp;[T; N]</code>) have a size</li>\n</ul>\n<p>and so on.</p>\n"}], "owner": {"reputation": 24109, "user_id": 775954, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9f5a87db35489d2958945f35b457f1ee?s=128&d=identicon&r=PG", "display_name": "Matthias Braun", "link": "https://stackoverflow.com/users/775954/matthias-braun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 435, "favorite_count": 0, "accepted_answer_id": 51657026, "answer_count": 2, "score": 1, "last_activity_date": 1533274414, "creation_date": 1533202529, "last_edit_date": 1533222530, "question_id": 51650259, "link": "https://stackoverflow.com/questions/51650259/how-can-i-fix-the-error-e0277-the-trait-bound-usize-stdmarkersized-is", "title": "How can I fix the error E0277: the trait bound `[usize]: std::marker::Sized` is not satisfied?", "body": "<p>I'm trying to pass an array to a function:</p>\n\n<pre><code>fn my_func(xs: [usize]) -&gt; usize {\n    0\n}\n\nfn main() {\n    let arr = [329, 457, 657];\n    let res = my_func(inp);\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[usize]: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:1:12\n  |\n1 | fn my_func(xs: [usize]) -&gt; usize {\n  |            ^^ `[usize]` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n  = note: all local variables must have a statically known size\n</code></pre>\n\n<p>I know about <a href=\"https://stackoverflow.com/questions/37670796/stdmarkersized-is-not-satisfied\">these</a> <a href=\"https://stackoverflow.com/questions/51454572/implementing-read-trait-trait-bound-stderrorerror-static-stdmarker\">other</a> <a href=\"https://stackoverflow.com/questions/40023706/why-do-i-get-a-trait-bound-t-stdmarkersized-is-not-satisfied-when-i-tr\">questions</a> but they don't seem to apply to my simple situation.</p>\n\n<p>How can I fix the error?</p>\n"}, {"tags": ["rust", "hex", "deserialization", "serde"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1533201094, "post_id": 51649398, "comment_id": 90262947, "body": "Can you describe how you used the custom deserializer and what are the approaches you tried?"}, {"owner": {"reputation": 1641, "user_id": 7527436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/da2b5613a6f66629ad967c5b18ef4545?s=128&d=identicon&r=PG&f=1", "display_name": "fzgregor", "link": "https://stackoverflow.com/users/7527436/fzgregor"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533202354, "post_id": 51649398, "comment_id": 90263718, "body": "Yes, I updated the question."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1533203622, "post_id": 51649398, "comment_id": 90264537, "body": "It would be easy with <a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"nofollow noreferrer\">this feature</a>... But I&#39;ve no idea for now."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1533221308, "creation_date": 1533221308, "answer_id": 51656496, "question_id": 51649398, "link": "https://stackoverflow.com/questions/51649398/implementing-a-generic-length-delimited-hex-deserializer-in-serde/51656496#51656496", "title": "Implementing a generic length delimited hex deserializer in Serde", "body": "<p>As <a href=\"https://stackoverflow.com/questions/51649398/rust-serde-implementing-a-generic-length-delimited-hex-deserializer#comment90264537_51649398\">Boiethios mentions</a>, this would be more obvious with <a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"nofollow noreferrer\">const generics</a>.</p>\n\n<p>Since that doesn't exist yet, there's two main alternatives. One is to <a href=\"https://stackoverflow.com/questions/28136739/is-it-possible-to-control-the-size-of-an-array-using-the-type-parameter-of-a-gen\">simulate such a feature</a>, the other is to use an array. In this case, it makes sense to use an array because your data is a fixed length of bytes anyway.</p>\n\n<p>I'd then implement <code>Deserialize</code> for a newtype containing any type that can be generated and then accessed as a collection of bytes:</p>\n\n<pre><code>extern crate hex;\nextern crate serde;\nextern crate serde_json;\n\nuse serde::de::Error;\n\n#[derive(Debug)]\nstruct Hex&lt;B&gt;(B);\n\nimpl&lt;'de, B&gt; serde::de::Deserialize&lt;'de&gt; for Hex&lt;B&gt;\nwhere\n    B: AsMut&lt;[u8]&gt; + Default,\n{\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; std::result::Result&lt;Self, D::Error&gt;\n    where\n        D: serde::de::Deserializer&lt;'de&gt;,\n    {\n        let s = String::deserialize(deserializer)?;\n        let mut b = Hex(B::default());\n        match hex::decode(s) {\n            Ok(v) =&gt; {\n                let expected_len = b.0.as_mut().len();\n                if v.len() != expected_len {\n                    Err(D::Error::custom(format_args!(\n                        \"Expected input of {} bytes, found {}\",\n                        expected_len,\n                        v.len()\n                    )))\n                } else {\n                    b.0.as_mut().copy_from_slice(&amp;v);\n                    Ok(b)\n                }\n            }\n            Err(e) =&gt; Err(D::Error::custom(format_args!(\n                \"Unable to deserialize: {}\",\n                e\n            ))),\n        }\n    }\n}\n\ntype Sha16 = Hex&lt;[u8; 2]&gt;;\ntype Sha256 = Hex&lt;[u8; 32]&gt;;\n\nconst TWO_BYTES: &amp;str = r#\"\"a412\"\"#;\nconst THIRTY_TWO_BYTES: &amp;str =\n    r#\"\"2CF24DBA5FB0A30E26E83B2AC5B9E29E1B161E5C1FA7425E73043362938B9824\"\"#;\n\nfn main() {\n    let h: Result&lt;Sha256, _&gt; = serde_json::from_str(TWO_BYTES);\n    println!(\"{:?}\", h);\n    let h: Result&lt;Sha16, _&gt; = serde_json::from_str(TWO_BYTES);\n    println!(\"{:?}\", h);\n\n    let h: Result&lt;Sha256, _&gt; = serde_json::from_str(THIRTY_TWO_BYTES);\n    println!(\"{:?}\", h);\n    let h: Result&lt;Sha16, _&gt; = serde_json::from_str(THIRTY_TWO_BYTES);\n    println!(\"{:?}\", h);\n}\n</code></pre>\n\n<p>This has two sources of potential inefficiency:</p>\n\n<ol>\n<li>We allocate an empty array and then overwrite the bytes</li>\n<li>We allocate a <code>Vec</code> and then copy the bytes from it</li>\n</ol>\n\n<p>There are ways around these, but for the purposes of user input, this is probably reasonable enough.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38941025/155423\">How to define a function with a generic fixed-length array?</a></li>\n<li><a href=\"https://stackoverflow.com/q/46753955/155423\">How to transform fields during deserialization using Serde?</a></li>\n</ul>\n"}], "owner": {"reputation": 1641, "user_id": 7527436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/da2b5613a6f66629ad967c5b18ef4545?s=128&d=identicon&r=PG&f=1", "display_name": "fzgregor", "link": "https://stackoverflow.com/users/7527436/fzgregor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 243, "favorite_count": 0, "accepted_answer_id": 51656496, "answer_count": 1, "score": 3, "last_activity_date": 1533221308, "creation_date": 1533199801, "last_edit_date": 1533215359, "question_id": 51649398, "link": "https://stackoverflow.com/questions/51649398/implementing-a-generic-length-delimited-hex-deserializer-in-serde", "title": "Implementing a generic length delimited hex deserializer in Serde", "body": "<p>I want to use <a href=\"https://serde.rs\" rel=\"nofollow noreferrer\">Serde</a> to take as much responsibility for well-formatted user submitted input as possible. I have a number of fields that require hex values of specific, different length in the input.</p>\n\n<p>How can I use Serde to enforce the allowed character set and the individual field's length without repetitive code?</p>\n\n<p>Up to now, I tried a couple of different approaches. All of them involve the implementation of <a href=\"https://serde.rs/impl-deserializer.html\" rel=\"nofollow noreferrer\">custom deserializers</a>. Please let me know if there is a simpler solution, to begin with.</p>\n\n<h2>A macro</h2>\n\n<p>A macro <code>HexString!($name:ident, $length:expr)</code> that produces two structs: <code>Name</code> holding the resulting string and <code>NameVisitor</code> implementing the Serde deserialization visitor. </p>\n\n<pre><code>extern crate serde;\nextern crate serde_json;\n\n#[macro_use]\nextern crate serde_derive;\n\n#[macro_use]\nextern crate error_chain;\n\nerror_chain!{}\n\nmacro_rules! HexString {\n    ($name:ident, $length:expr) =&gt; {\n        #[derive(Debug, Serialize)]\n        pub struct $name(String);\n\n        impl&lt;'de&gt; serde::de::Deserialize&lt;'de&gt; for $name {\n            fn deserialize&lt;D&gt;(deserializer: D) -&gt; std::result::Result&lt;Self, D::Error&gt;\n            where\n                D: serde::de::Deserializer&lt;'de&gt;,\n            {\n                deserializer.deserialize_str($nameVisitor)\n            }\n        }\n\n        struct $nameVisitor;\n\n        impl&lt;'de&gt; serde::de::Visitor&lt;'de&gt; for $nameVisitor {\n            type Value = $name;\n\n            fn expecting(&amp;self, formatter: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n                write!(\n                    formatter,\n                    \"an string of exactly {} hexadecimal characters\",\n                    $length\n                )\n            }\n\n            fn visit_str&lt;E&gt;(self, s: &amp;str) -&gt; std::result::Result&lt;Self::Value, E&gt;\n            where\n                E: serde::de::Error,\n            {\n                use serde::de;\n                if s.len() != $length {\n                    return Err(de::Error::invalid_value(\n                        de::Unexpected::Other(&amp;format!(\n                            \"String is not {} characters long\",\n                            $length\n                        )),\n                        &amp;self,\n                    ));\n                }\n                for c in s.chars() {\n                    if !c.is_ascii_hexdigit() {\n                        return Err(de::Error::invalid_value(de::Unexpected::Char(c), &amp;self));\n                    }\n                }\n\n                let mut s = s.to_owned();\n                s.make_ascii_uppercase();\n                Ok($name(s))\n            }\n        }\n    };\n}\n\nHexString!(Sha256, 32);\n\nfn main() {\n    let h: Sha256 = serde_json::from_str(\"a412\").unwrap(); // should fail\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=eab5a1e8cfb8463fabbc3444a61463b6&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>This failed because I was unable to concatenate <code>$name</code> and <code>Visitor</code> in the pattern. </p>\n\n<h3>A trait</h3>\n\n<p>A trait <code>HexString</code> together with a <code>HexStringVisitor</code> trait, potentially \ncombined with a macro in the end to ease usage:</p>\n\n<pre><code>extern crate serde;\nextern crate serde_json;\n\n#[macro_use]\nextern crate serde_derive;\n\n#[macro_use]\nextern crate error_chain;\n\nerror_chain!{}\n\ntrait HexString {\n    type T: HexString;\n    fn init(s: String) -&gt; Self::T;\n    fn len() -&gt; usize;\n    fn visitor() -&gt; HexStringVisitor&lt;T=Self::T&gt;;\n}\n\nimpl&lt;'de, T: HexString&gt; serde::de::Deserialize&lt;'de&gt; for T {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; std::result::Result&lt;Self, D::Error&gt;\n    where D: serde::de::Deserializer&lt;'de&gt;\n    {\n        deserializer.deserialize_str(T::visitor())\n    }\n}\n\ntrait HexStringVisitor {\n    type T: HexString;\n}\n\nimpl&lt;'de, T: HexStringVisitor&gt; serde::de::Visitor&lt;'de&gt; for T {\n    type Value = T::T;\n\n    fn expecting(&amp;self, formatter: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(formatter, \"an string of exactly {} hexadecimal characters\", Self::Value::len())\n    }\n\n    fn visit_str&lt;E&gt;(self, s: &amp;str) -&gt; std::result::Result&lt;Self::Value, E&gt;\n        where E: serde::de::Error\n    {\n        use serde::de;\n        if s.len() != Self::Value::len() {\n        return Err(de::Error::invalid_value(de::Unexpected::Other(&amp;format!(\"String is not {} characters long\", Self::Value::len())),\n        &amp;self));\n    }\n        for c in s.chars() {\n            if !c.is_ascii_hexdigit() {\n                return Err(de::Error::invalid_value(de::Unexpected::Char(c), &amp;self));\n            }\n        }\n\n        let mut s = s.to_owned();\n        s.make_ascii_uppercase();\n        Ok(T::init(s))\n    }\n}\n\nstruct Sha256(String);\nstruct Sha256Visitor;\n\nimpl HexString for Sha256 {\n    type T=Sha256;\n    fn init(s: String) -&gt; Sha256 {\n        Sha256(s)\n    }\n    fn len() -&gt; usize {\n        32\n    }\n    fn visitor() -&gt; Sha256Visitor {\n        Sha256Visitor()\n    }\n}\n\nimpl HexStringVisitor for Sha256Visitor {\n}\n\nfn main() {\n    let h: Sha256 = serde_json::from_str(\"a412\").unwrap(); // should fail\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=31f6c78a3bebb7b1cb333861dd82515c&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>This fails because  I'm not allowed to implement the <code>Deserialize</code> trait for any Implementer of <code>HexString</code></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 842, "user_id": 1375899, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7881c4b6271f3b501fe6930aa1798907?s=128&d=identicon&r=PG", "display_name": "Ehsan M. Kermani", "link": "https://stackoverflow.com/users/1375899/ehsan-m-kermani"}, "edited": false, "score": 0, "creation_date": 1533180526, "post_id": 51645032, "comment_id": 90254091, "body": "Great! thank you for the explanations. I&#39;ll need to look into the links. I guess FFI was the main reason for using it in that library. I&#39;ve also corrected my note above."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1533180656, "last_edit_date": 1533180656, "creation_date": 1533180275, "answer_id": 51645032, "question_id": 51644968, "link": "https://stackoverflow.com/questions/51644968/what-is-the-significance-of-a-struct-with-a-phantom-lifetime/51645032#51645032", "title": "What is the significance of a struct with a phantom lifetime?", "body": "<p>It's the same as using <code>PhantomData</code> for a generic type: to make the struct act as if it contains a reference even though the compiler doesn't see one in the struct definition. </p>\n\n<p>A big reason you'd use this is to represent related lifetimes when dealing with FFI types, but it's useful any time where you want the protection provided by lifetimes but you don't actually have something to take a reference of.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nomicon/phantom-data.html\" rel=\"nofollow noreferrer\"><code>PhantomData</code> in the Nomicon</a>. This discusses various common patterns of using <code>PhantomData</code>.</li>\n<li><a href=\"https://stackoverflow.com/q/28174681/155423\">Adding lifetime constraints to non-reference types</a></li>\n<li><a href=\"https://stackoverflow.com/q/41130447/155423\">Restricting object lifetimes in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/q/34038129/155423\">How do I enforce parent-child struct lifetime?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33202211/155423\">How can I have a lifetime dependency without a reference?</a></li>\n</ul>\n"}], "owner": {"reputation": 842, "user_id": 1375899, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7881c4b6271f3b501fe6930aa1798907?s=128&d=identicon&r=PG", "display_name": "Ehsan M. Kermani", "link": "https://stackoverflow.com/users/1375899/ehsan-m-kermani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 729, "favorite_count": 0, "accepted_answer_id": 51645032, "answer_count": 1, "score": 2, "last_activity_date": 1533180656, "creation_date": 1533179631, "last_edit_date": 1533180426, "question_id": 51644968, "link": "https://stackoverflow.com/questions/51644968/what-is-the-significance-of-a-struct-with-a-phantom-lifetime", "title": "What is the significance of a struct with a phantom lifetime?", "body": "<p>I was browsing some libraries and I noticed the usage of a struct containing a phantom lifetime field, like</p>\n\n<pre><code>struct S&lt;'a&gt; {\n    s: i32,\n    _lifetime: PhantomData&lt;&amp;'a ()&gt; // NOTE: there's no generic type here!\n}\n</code></pre>\n\n<p>I'm curious to know the significance of the phantom lifetime \u2014 what advantages does it provide for <code>S</code> and that without it would not be possible or not convenient to deal with? </p>\n"}]