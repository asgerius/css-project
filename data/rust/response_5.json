[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423717286, "post_id": 28469639, "comment_id": 45264237, "body": "I&#39;m also surprised you cant use the box on the left-hand side, as <code>let Box((a,b)) = x;</code>, which I filed as <a href=\"https://github.com/rust-lang/rust/issues/22207\" rel=\"nofollow noreferrer\">#22207</a>."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1423717480, "post_id": 28469639, "comment_id": 45264299, "body": "It is possible with the <code>box</code> syntax, but that is currently feature-gated (and is probably going to change). Not sure if destructuring using <code>Box</code> (the struct) is supposed to work right now"}, {"owner": {"reputation": 51, "user_id": 4557069, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-Lov6e8qTXpI/AAAAAAAAAAI/AAAAAAAAAJk/WLjKgFfYai0/photo.jpg?sz=128", "display_name": "Spencer florence", "link": "https://stackoverflow.com/users/4557069/spencer-florence"}, "edited": false, "score": 0, "creation_date": 1423758205, "post_id": 28469639, "comment_id": 45287157, "body": "Is there another workaround that doesn&#39;t require having to have an intermediate binding at every layer of the structure? This workaround makes matching deep into structures very verbose."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 0, "creation_date": 1423758564, "post_id": 28469639, "comment_id": 45287416, "body": "I&#39;m unaware of a way to work around this currently. I recommend subscribing to the issue I posted to be notified when this is fixed."}], "tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": false, "score": 6, "last_activity_date": 1514773308, "last_edit_date": 1514773308, "creation_date": 1423717200, "answer_id": 28469639, "question_id": 28466809, "link": "https://stackoverflow.com/questions/28466809/collaterally-moved-error-when-deconstructing-a-box-of-pairs/28469639#28469639", "title": "Collaterally moved error when deconstructing a Box of pairs", "body": "<p>You have stumbled on a <a href=\"https://github.com/rust-lang/rust/issues/16223\" rel=\"nofollow noreferrer\">limitation on destructuring and boxes</a>. Luckily, it's easy to work around these. All you need to do is introduce a new intermediary variable that contains the whole structure, and destructure from that:</p>\n\n<pre><code>let x = Box::new((\"slefj\".to_string(), \"a\".to_string()));\nlet pair = *x;\nlet (a, b) = pair;\n</code></pre>\n\n<p>The second example:</p>\n\n<pre><code>let pair = *x;\nmatch pair {\n    Tree::Pair(a, b) =&gt; Tree::Pair(a, b),\n    _ =&gt; Tree::Nil,\n};\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1571272786, "last_edit_date": 1571272786, "creation_date": 1535066735, "answer_id": 51995540, "question_id": 28466809, "link": "https://stackoverflow.com/questions/28466809/collaterally-moved-error-when-deconstructing-a-box-of-pairs/51995540#51995540", "title": "Collaterally moved error when deconstructing a Box of pairs", "body": "<p>The good news is that your original code works as-is now that <a href=\"https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes\">non-lexical lifetimes</a> are enabled by default:</p>\n\n<pre><code>fn main() {\n    let x = Box::new((\"slefj\".to_string(), \"a\".to_string()));\n    let (a, b) = *x;\n}\n</code></pre>\n\n<p>The borrow checker's capability to track the moves out of the box is enhanced, allowing the code to compile.</p>\n"}], "owner": {"reputation": 51, "user_id": 4557069, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-Lov6e8qTXpI/AAAAAAAAAAI/AAAAAAAAAJk/WLjKgFfYai0/photo.jpg?sz=128", "display_name": "Spencer florence", "link": "https://stackoverflow.com/users/4557069/spencer-florence"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1571272786, "creation_date": 1423698430, "last_edit_date": 1514773166, "question_id": 28466809, "link": "https://stackoverflow.com/questions/28466809/collaterally-moved-error-when-deconstructing-a-box-of-pairs", "title": "Collaterally moved error when deconstructing a Box of pairs", "body": "<p>The following two lines:</p>\n\n<pre><code>let x = Box::new((\"slefj\".to_string(), \"a\".to_string()));\nlet (a, b) = *x;\n</code></pre>\n\n<p>produce the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `x`\n --&gt; src/main.rs:3:13\n  |\n3 |     let (a, b) = *x;\n  |          -  ^ value used here after move\n  |          |\n  |          value moved here\n  |\n  = note: move occurs because `x.0` has type `std::string::String`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>Interestingly, if I do this with an enumeration type <em>with multiple parts</em>, I get a slightly different error:</p>\n\n<pre><code>enum Tree {\n    Nil,\n    Pair(Box&lt;Tree&gt;, Box&lt;Tree&gt;),\n}\n\nfn main() {\n    let x = Box::new(Tree::Nil);\n\n    match *x {\n        Tree::Pair(a, b) =&gt; Tree::Pair(a, b),\n        _ =&gt; Tree::Nil,\n    };\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of collaterally moved value: `(x:Tree::Pair).1`\n  --&gt; src/main.rs:10:23\n   |\n10 |         Tree::Pair(a, b) =&gt; Tree::Pair(a, b),\n   |                    -  ^ value used here after move\n   |                    |\n   |                    value moved here\n   |\n   = note: move occurs because `(x:Tree::Pair).0` has type `std::boxed::Box&lt;Tree&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>Why does this happen, and how can I easily destruct structures with <code>let</code>/<code>match</code> and get ownership of the inner parts? I know I can dereference and name the structure first, but that gets horribly verbose if I'm pattern matching deep into a structure.</p>\n"}, {"tags": ["rust", "http-streaming"], "answers": [{"comments": [{"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1423754332, "post_id": 28461373, "comment_id": 45284543, "body": "I can&#39;t seem to be able to compile it... getting <code>failed to run custom build command for &#39;openssl-sys v0.3.5&#39; Process didn&#39;t exit successfully: &#39;&#47;home&#47;user&#47;code&#47;hello_rust&#47;target&#47;build&#47;openssl-sys-6694e08&zwnj;&#8203;0744fb2e2&#47;build-scri&zwnj;&#8203;pt-build&#39; (status=101) --- stderr thread &#39;&lt;main&gt;&#39; panicked at &#39;Unable to find openssl libraries&#39;, &#47;home&#47;user&#47;.cargo&#47;registry&#47;src&#47;github.com-1ecc6299db9ec823&#47;o&zwnj;&#8203;penssl-sys-0.3.5&#47;bui&zwnj;&#8203;ld.rs:46</code>"}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "reply_to_user": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1423758877, "post_id": 28461373, "comment_id": 45287624, "body": "@Caballero It seems you are missing some openssl dependencies. I suggest you take a look at <a href=\"https://github.com/sfackler/rust-openssl/\" rel=\"nofollow noreferrer\">rust-openssl&#39;s readme</a>"}, {"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1423760010, "post_id": 28461373, "comment_id": 45288412, "body": "Thanks, totally missed the <code>libssl-dev</code> dependency"}], "tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 5, "last_activity_date": 1423678635, "last_edit_date": 1423678635, "creation_date": 1423678235, "answer_id": 28461373, "question_id": 28459091, "link": "https://stackoverflow.com/questions/28459091/a-client-for-http-server-push-streaming-in-rust/28461373#28461373", "title": "A client for HTTP server push (streaming) in Rust?", "body": "<p>The http client <a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow\">hyper</a> supports reading responses incrementally (as anything that implements rust's <code>Reader</code> trait), but I wasn't able to find anything to <em>parse</em> the response incrementally, or that implements twitter's particular protocol (to end objecs with <code>\\r\\n</code>).</p>\n\n<p>That said, I was able to implement a quick'n'dirty proof of concept:</p>\n\n<p>EDIT: See and play with it <a href=\"https://github.com/renato-zannon/hyper-json-streaming-example\" rel=\"nofollow\">on github</a>.</p>\n\n<pre><code>use rustc_serialize::json::Json;\nuse std::str;\n\npub trait JsonObjectStreamer {\n    fn json_objects(&amp;mut self) -&gt; JsonObjects&lt;Self&gt;;\n}\n\nimpl&lt;T: Buffer&gt; JsonObjectStreamer for T {\n    fn json_objects(&amp;mut self) -&gt; JsonObjects&lt;T&gt; {\n        JsonObjects { reader: self }\n    }\n}\n\npub struct JsonObjects&lt;'a, B&gt; where B: 'a {\n    reader: &amp;'a mut B\n}\n\nimpl&lt;'a, B&gt; Iterator for JsonObjects&lt;'a, B&gt; where B: Buffer + 'a {\n    type Item = Json;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Json&gt; {\n        let mut line_bytes = match self.reader.read_until(b'\\r') {\n            Ok(bytes) =&gt; bytes,\n            Err(_)    =&gt; return None,\n        };\n\n        if line_bytes.last() == Some(&amp;b'\\r') {\n            // drop the \\r\n            line_bytes.pop();\n\n            // skip the \\n\n            match self.reader.read_char() {\n                Ok(_)  =&gt; (),\n                Err(_) =&gt; return None,\n            }\n        }\n\n        let line = match str::from_utf8(&amp;line_bytes) {\n            Ok(line) =&gt; line,\n            Err(_)   =&gt; return None\n        };\n\n        Json::from_str(line).ok()\n    }\n}\n</code></pre>\n\n<p>Usage: (assuming you have dropped it on a <code>src/json_streamer.rs</code> file on your project)</p>\n\n<pre><code>#![feature(io)]\n\nextern crate hyper;\nextern crate \"rustc-serialize\" as rustc_serialize;\n\nmod json_streamer;\n\nuse hyper::Client;\n\nuse std::old_io::BufferedReader;\nuse json_streamer::JsonObjectStreamer;\n\nfn main() {\n    let mut client = Client::new();\n    let res = client.get(\"http://localhost:4567/\").send().unwrap();\n\n    for obj in BufferedReader::new(res).json_objects() {\n        println!(\"object arrived: {}\", obj);\n    }\n}\n</code></pre>\n\n<p>I've used this tiny sinatra app to test it:</p>\n\n<pre><code>require 'sinatra'\nrequire 'json'\n\nclass Stream\n  def each\n    hash = { index: 0 }\n\n    loop do\n      hash[:index] += 1\n      yield hash.to_json + \"\\r\\n\"\n      sleep 0.5\n    end\n  end\nend\n\nget '/' do\n  Stream.new\nend\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1397, "favorite_count": 1, "accepted_answer_id": 28461373, "answer_count": 1, "score": 3, "last_activity_date": 1423682034, "creation_date": 1423671250, "last_edit_date": 1423682034, "question_id": 28459091, "link": "https://stackoverflow.com/questions/28459091/a-client-for-http-server-push-streaming-in-rust", "title": "A client for HTTP server push (streaming) in Rust?", "body": "<p>For the lack of a better example, let's say I want to write a simple client with Rust that could establish a connection and receive data from <a href=\"https://dev.twitter.com/streaming/overview/connecting\" rel=\"nofollow\">Twitter's HTTP Streaming API</a>. Is this possible yet? I've been keeping an eye on <a href=\"https://github.com/iron/iron\" rel=\"nofollow\">Iron</a> and <a href=\"https://github.com/nickel-org/nickel.rs\" rel=\"nofollow\">Nickel</a> which seem like good frameworks, but I don't think they have this feature yet?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 1, "creation_date": 1538721063, "post_id": 28457675, "comment_id": 92249340, "body": "Note that <code>serialize</code> has been deprecated in favor of <code>rustc-serialize</code> which in turn has been deprecated in favor of <code>serde</code> as per the official document."}], "tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": true, "score": 21, "last_activity_date": 1423667355, "creation_date": 1423667355, "answer_id": 28457675, "question_id": 28456813, "link": "https://stackoverflow.com/questions/28456813/whats-the-difference-between-the-serialize-and-rustc-serialize-crates/28457675#28457675", "title": "What&#39;s the difference between the &quot;serialize&quot; and &quot;rustc-serialize&quot; crates?", "body": "<p>The <code>serialize</code> crate is an <em>internal</em> part of the standard Rust distribution. It won't be available in the Rust 1.0 stable/beta channels.</p>\n\n<p>The <code>rustc-serialize</code> crate used to be <code>serialize</code>, but it was moved out to a separate repository and uploaded to crates.io so that it can evolve on its own.</p>\n\n<p>This was done because the utility of <code>rustc-serialize</code> is enormous but it was not realistic to get it stabilized in time for Rust 1.0. Since the Rust distribution will prohibit unstable features on the stable channel, the only way to continue using the serialization infrastructure is to 1) stabilize what we have or 2) move it to crates.io, where the unstable restrictions don't apply.</p>\n\n<p><code>rustc-serialize</code> has a lot of known downsides, and <a href=\"https://github.com/erickt/rust-serde\">it is being worked on</a>, so stabilizing what was there really isn't an option.</p>\n\n<p>But the <code>Decodable/Encodable</code> features require compiler support (because compiler plugins won't be stable either for Rust 1.0). As a stopgap measure, <code>RustcDecodable/RustcEncodable</code> were invented as a temporary measure for the <code>rustc-serialize</code> crate to use explicitly. It's a bit weird, but it leaves the <code>Decodable/Encodable</code> names available for a future backwards-compatible version of a <code>serialize</code> crate that is better than what we have now (perhaps this is what <code>serde2</code> will become from the aforementioned link).</p>\n\n<p>So for the time being, stick to use <code>rustc-serialize</code> and <code>RustcDecodable/RustcEncodable</code>.</p>\n\n<p>(I apologize that I can't come up with a link to cite all of this. It's knowledge I've accrued over time from GitHub issues. Maybe there is an RFC that lays all of this out though. I can't remember.)</p>\n"}, {"tags": [], "owner": {"reputation": 247, "user_id": 4310259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6ac9d888c4d21750189144a59e48bcc6?s=128&d=identicon&r=PG&f=1", "display_name": "bretmattingly", "link": "https://stackoverflow.com/users/4310259/bretmattingly"}, "is_accepted": false, "score": 0, "last_activity_date": 1483992085, "last_edit_date": 1495542278, "creation_date": 1483991019, "answer_id": 41555692, "question_id": 28456813, "link": "https://stackoverflow.com/questions/28456813/whats-the-difference-between-the-serialize-and-rustc-serialize-crates/41555692#41555692", "title": "What&#39;s the difference between the &quot;serialize&quot; and &quot;rustc-serialize&quot; crates?", "body": "<p>To expand on <a href=\"https://stackoverflow.com/a/28457675/155423\">BurntSushi5's answer</a>, as of the time of this writing, the Rust compiler in both Stable and Beta channels throws the following error when attempting to use vanilla <code>serialize</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: use of unstable library feature 'rustc_private': deprecated in favor of rustc-serialize on crates.io (see issue #27812)\n --&gt; src/main.rs:2:1\n  |\n2 | extern crate serialize;\n  | ^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>The <a href=\"https://github.com/rust-lang/rust/issues/27812\" rel=\"nofollow noreferrer\">linked Github issue</a> is not very helpful. In short, use <code>rustc-serialize</code>.</p>\n"}], "owner": {"reputation": 5307, "user_id": 1127635, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/386b2a9bdc91823e4688f0dcbdd2f9fb?s=128&d=identicon&r=PG", "display_name": "conradkleinespel", "link": "https://stackoverflow.com/users/1127635/conradkleinespel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2280, "favorite_count": 3, "accepted_answer_id": 28457675, "answer_count": 2, "score": 13, "last_activity_date": 1483992154, "creation_date": 1423664963, "last_edit_date": 1483992154, "question_id": 28456813, "link": "https://stackoverflow.com/questions/28456813/whats-the-difference-between-the-serialize-and-rustc-serialize-crates", "title": "What&#39;s the difference between the &quot;serialize&quot; and &quot;rustc-serialize&quot; crates?", "body": "<p>This is the <a href=\"http://doc.rust-lang.org/serialize/index.html\" rel=\"nofollow noreferrer\"><code>serialize</code> crate</a>, and this is the <a href=\"http://doc.rust-lang.org/rustc-serialize/rustc-serialize/index.html\" rel=\"nofollow noreferrer\"><code>rustc-serialize</code> crate</a>.</p>\n\n<p>I'm getting deprecation warnings from the compiler when using the <code>Encodable</code> and <code>Decodable</code> traits from the <code>serialize</code> crate. The compiler tells me to use <code>RustcEncodable</code> and <code>RustcDecodable</code> from the <code>rustc-serialize</code> crate.</p>\n\n<p>It seems like this just makes things less readable for the same functionality (apart from <code>base64</code> encoding provided in <code>rustc-serialize</code>). What's the difference between these crates?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423654012, "post_id": 28451235, "comment_id": 45233376, "body": "Couldn&#39;t you implement Employee for RefCell&lt;Box&lt;Human&gt;&gt; and then use an Rc&lt;Employee&gt;? I&#39;m sure something along those lines might end up allowing what you wanted."}, {"owner": {"reputation": 542, "user_id": 1000900, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/662b51594788f3aacbb1b1ad3ccc8a4b?s=128&d=identicon&r=PG", "display_name": "Guy Cook", "link": "https://stackoverflow.com/users/1000900/guy-cook"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423690170, "post_id": 28451235, "comment_id": 45255381, "body": "@ker I&#39;m not sure - that&#39;s why I&#39;m asking :) Would you mind writing up how that could work as an answer?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423728134, "post_id": 28451235, "comment_id": 45268484, "body": "oh sorry, i just noticed this is blocked by <a href=\"https://github.com/rust-lang/rust/issues/18248\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/18248</a>"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1423649865, "creation_date": 1423649865, "answer_id": 28451732, "question_id": 28451235, "link": "https://stackoverflow.com/questions/28451235/how-to-have-a-reference-to-a-trait-and-still-use-original-struct/28451732#28451732", "title": "How to have a reference to a trait and still use original struct?", "body": "<p><em>Disclaimer: in this answer I will assume that you are willingly NOT using an <code>enum</code> because you want <code>Employee</code> to be open.</em></p>\n\n<p>This issue comes up in about every single language that uses dynamic polymorphism, and the traditional answer is the <a href=\"http://en.wikipedia.org/wiki/Visitor_pattern\" rel=\"nofollow\">Visitor Pattern</a>.</p>\n\n<p>It is not exactly ideal, though, because of the dependencies it introduces, so if necessary you can use the <a href=\"http://www.objectmentor.com/resources/articles/acv.pdf\" rel=\"nofollow\">Acyclic Visitor Pattern</a>; however I advise that you start with a bare bone visitor before delving further.</p>\n\n<pre><code>trait EmployeeVisitor {\n    fn visit_employee(&amp;self, e: &amp;Employee);\n    fn visit_human(&amp;self, h: &amp;Human);\n}\n\ntrait Employee {\n    fn accept(&amp;self, v: &amp;EmployeeVisitor) {\n        v.visit_employee(self);\n    }\n}\n\nimpl Employee for Human {\n    fn accept(&amp;self, v: &amp;EmployeeVisitor) {\n        v.visit_human(self);\n    }\n }\n</code></pre>\n\n<p>This is the traditional \"every problem can be solved with a layer of indirection\", and it incurs the traditional issue of bringing another layer of indirection.</p>\n"}], "owner": {"reputation": 542, "user_id": 1000900, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/662b51594788f3aacbb1b1ad3ccc8a4b?s=128&d=identicon&r=PG", "display_name": "Guy Cook", "link": "https://stackoverflow.com/users/1000900/guy-cook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 709, "favorite_count": 0, "accepted_answer_id": 28451732, "answer_count": 1, "score": 4, "last_activity_date": 1423660827, "creation_date": 1423648407, "last_edit_date": 1423660827, "question_id": 28451235, "link": "https://stackoverflow.com/questions/28451235/how-to-have-a-reference-to-a-trait-and-still-use-original-struct", "title": "How to have a reference to a trait and still use original struct?", "body": "<p>My goal is to have a reference counted struct which is referred as a trait in one context and by its concrete type in another. Best explained in code:</p>\n\n<pre><code>#![feature(box_syntax)]\n\nuse std::rc::Rc;\nuse std::cell::RefCell;\n\ntrait Employee {\n    fn be_managed(&amp;mut self);\n}\n\nstruct Human;\n\nimpl Human {\n    fn be_human(&amp;mut self) {\n        println!(\"I'm just a human who needs a mutable self sometimes\");\n    }\n}\n\nimpl Employee for Human {\n    fn be_managed(&amp;mut self) {\n        println!(\"Off to the salt mines\");\n    }\n}\n\nstruct Manager {\n    my_employee: Rc&lt;RefCell&lt;Box&lt;Employee + 'static&gt;&gt;&gt;, //'\n}\n\nfn main() {\n    let mut human1 = Rc::new(RefCell::new(box Human as Box&lt;Employee&gt;));\n\n    let manager1 = Manager {\n        my_employee: human1.clone(), // This works due to cast above\n    };\n\n    manager1.my_employee.borrow_mut().be_managed();\n\n    human1.borrow_mut().be_human(); // But we can't be human anymore\n\n\n\n    let mut human2 = Rc::new(RefCell::new(box Human));\n\n    let manager2 = Manager {\n        my_employee: human2.clone(), // This doesn't work\n    };\n\n    manager2.my_employee.borrow_mut().be_managed();\n\n    human2.borrow_mut().be_human();\n}\n</code></pre>\n\n<p>I want the <code>Manager</code> to be able to have any struct implementing the <code>Employee</code> trait as <code>my_employee</code>, but other references should still be able to call other methods on the original object, ie <code>be_human</code>.</p>\n\n<p>Right now I'm getting the following errors from the above code:</p>\n\n<pre><code>src/main.rs:37:25: 37:35 error: type `core::cell::RefMut&lt;'_, Box&lt;Employee&gt;&gt;` does not implement any method in scope named `be_human`\nsrc/main.rs:37     human1.borrow_mut().be_human(); // But we can't be human anymore\n                                       ^~~~~~~~~~\nsrc/main.rs:44:22: 44:36 error: mismatched types:\n expected `alloc::rc::Rc&lt;core::cell::RefCell&lt;Box&lt;Employee + 'static&gt;&gt;&gt;`,\n    found `alloc::rc::Rc&lt;core::cell::RefCell&lt;Box&lt;Human&gt;&gt;&gt;`\n(expected trait Employee,\n    found struct `Human`) [E0308]\nsrc/main.rs:44         my_employee: human2.clone(), // This doesn't work\n                                    ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>What's the right approach in this situation?</p>\n"}, {"tags": ["floating-point", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "edited": false, "score": 0, "creation_date": 1492093259, "post_id": 28446718, "comment_id": 73850561, "body": "std::cmp::partial_min does not exist anymore."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 21, "last_activity_date": 1544450116, "last_edit_date": 1544450116, "creation_date": 1423629664, "answer_id": 28446718, "question_id": 28446632, "link": "https://stackoverflow.com/questions/28446632/how-do-i-get-the-minimum-or-maximum-value-of-an-iterator-containing-floating-poi/28446718#28446718", "title": "How do I get the minimum or maximum value of an iterator containing floating point numbers?", "body": "<p>Floats have their own <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.min\" rel=\"noreferrer\"><code>min</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.max\" rel=\"noreferrer\"><code>max</code></a> methods that handle NaN consistently, so you can fold over the iterator:</p>\n\n<pre><code>use std::f64;\n\nfn main() {\n    let x = [2.0, 1.0, -10.0, 5.0, f64::NAN];\n\n    let min = x.iter().fold(f64::INFINITY, |a, &amp;b| a.min(b));\n    println!(\"{}\", min);\n}\n</code></pre>\n\n<p>Prints <code>-10</code>. </p>\n\n<p>If you want different NaN handling, you can use <code>PartialOrd::partial_cmp</code>. For example, if you wish to propagate NaNs, fold with:</p>\n\n<pre><code>use std::f64;\nuse std::cmp::Ordering;\n\nfn main() {\n    let x = [2.0, 1.0, -10.0, 5.0, f64::NAN];\n\n    let min = x.iter().fold(f64::INFINITY, |a, &amp;b| {\n        match PartialOrd::partial_cmp(&amp;a, &amp;b) {\n            None =&gt; f64::NAN,\n            Some(Ordering::Less) =&gt; a,\n            Some(_) =&gt; b,\n        }\n    });\n    println!(\"{}\", min);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 631, "user_id": 155734, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6bed507c0085d39447171b95c515a890?s=128&d=identicon&r=PG", "display_name": "dvdplm", "link": "https://stackoverflow.com/users/155734/dvdplm"}, "is_accepted": false, "score": -1, "last_activity_date": 1508796188, "last_edit_date": 1508796188, "creation_date": 1508788423, "answer_id": 46897447, "question_id": 28446632, "link": "https://stackoverflow.com/questions/28446632/how-do-i-get-the-minimum-or-maximum-value-of-an-iterator-containing-floating-poi/46897447#46897447", "title": "How do I get the minimum or maximum value of an iterator containing floating point numbers?", "body": "<p>Perhaps like this?</p>\n\n<pre><code>fn main() {\n    use std::cmp::Ordering;\n    let mut x = [2.0, 1.0, -10.0, 5.0];\n    x.sort_by(|a, b| a.partial_cmp(b).unwrap_or(Ordering::Equal));\n    println!(\"min in x: {:?}\", x);\n}\n</code></pre>\n\n<p>One thing I struggled with is that <code>sort_by</code> mutates the vector in place so you can't use it in a chain directly.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1526142186, "creation_date": 1526142186, "answer_id": 50308360, "question_id": 28446632, "link": "https://stackoverflow.com/questions/28446632/how-do-i-get-the-minimum-or-maximum-value-of-an-iterator-containing-floating-poi/50308360#50308360", "title": "How do I get the minimum or maximum value of an iterator containing floating point numbers?", "body": "<p>If you know your data does not contain NaNs, then assert that fact by unwrapping the comparison:</p>\n\n<pre><code>fn example(x: &amp;[f64]) -&gt; Option&lt;f64&gt; {\n    x.iter()\n        .cloned()\n        .min_by(|a, b| a.partial_cmp(b).expect(\"Tried to compare a NaN\"))\n}\n</code></pre>\n\n<p>If your data <em>may</em> have NaNs, you need to handle that case specifically. One solution is to say that <a href=\"https://stackoverflow.com/questions/19800415/why-does-ieee-754-reserve-so-many-nan-values\">all 16,777,214 NaN values</a> are equal to each other and are always greater than or less than other numbers:</p>\n\n<pre><code>use std::cmp::Ordering;\n\nfn example(x: &amp;[f64]) -&gt; Option&lt;f64&gt; {\n    x.iter()\n        .cloned()\n        .min_by(|a, b| {\n            // all NaNs are greater than regular numbers\n            match (a.is_nan(), b.is_nan()) {\n                (true, true) =&gt; Ordering::Equal,\n                (true, false) =&gt; Ordering::Greater,\n                (false, true) =&gt; Ordering::Less,\n                _ =&gt; a.partial_cmp(b).unwrap(),\n            }\n        })\n}\n</code></pre>\n\n<p>There are numerous crates available that can be used to give you whichever semantics your code needs.</p>\n\n<hr>\n\n<p>You should <strong>not</strong> use <code>partial_cmp(b).unwrap_or(Ordering::Equal)</code> because it provides unstable results when NaNs are present, but it leads the reader into thinking that they are handled:</p>\n\n<pre><code>use std::cmp::Ordering;\nuse std::f64;\n\nfn example(x: &amp;[f64]) -&gt; Option&lt;f64&gt; {\n    x.iter()\n        .cloned()\n        .min_by(|a, b| a.partial_cmp(b).unwrap_or(Ordering::Equal))\n}\n\nfn main() {\n    println!(\"{:?}\", example(&amp;[f64::NAN, 1.0]));\n    println!(\"{:?}\", example(&amp;[1.0, f64::NAN]));\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Some(NaN)\nSome(1.0)\n</code></pre>\n"}], "owner": {"reputation": 764, "user_id": 258834, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/73c433692510200ade41516f7dc7fd32?s=128&d=identicon&r=PG", "display_name": "luke", "link": "https://stackoverflow.com/users/258834/luke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4515, "favorite_count": 1, "accepted_answer_id": 28446718, "answer_count": 3, "score": 10, "last_activity_date": 1544450116, "creation_date": 1423628957, "last_edit_date": 1544449960, "question_id": 28446632, "link": "https://stackoverflow.com/questions/28446632/how-do-i-get-the-minimum-or-maximum-value-of-an-iterator-containing-floating-poi", "title": "How do I get the minimum or maximum value of an iterator containing floating point numbers?", "body": "<p>I understand <a href=\"https://stackoverflow.com/q/26489701/155423\">why the floats don't have an implementation for <code>Ord</code></a> but that doesn't particularly help me when I want to be lazy and use iterators.</p>\n\n<p>Is there a workaround or an easy way to take the minimum / min / min_by of an iterator containing floating point numbers?</p>\n\n<p>I know one can sort (which is slow) or wrap it in another type and implement the needed trades (which is verbose) but I am hoping for something a little more elegant.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423611097, "post_id": 28443186, "comment_id": 45217389, "body": "Note that Rust&#39;s style is to have <code>snake_case</code> names for modules, functions, methods, and variable names. <code>CamelCase</code> names are intended for structs and enums."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1423624985, "post_id": 28443186, "comment_id": 45221337, "body": "Also, I feel that some of the downvotes you might receive are because this is covered in <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">the Rust book</a>. It&#39;s expected to do some legwork before asking questions. If you want clarification on particular parts of the docs, feel free to include example code and specific questions about that code."}, {"owner": {"reputation": 2840, "user_id": 966467, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/a467f6a4dcfe3ac934d544193e1d3f02?s=128&d=identicon&r=PG", "display_name": "likern", "link": "https://stackoverflow.com/users/966467/likern"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423645682, "post_id": 28443186, "comment_id": 45228522, "body": "I&#39;ve carefully read whole Rust guide. But maybe misunderstand some conception in comparison with C++. In C++ there are no way to hide free function in namespace, you have to define function in .cpp, without declaring in header. But, as I know there is no such conception in Rust as <code>header file</code>. That was the reason why I missed so obvious fact."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 3, "last_activity_date": 1423610148, "creation_date": 1423610148, "answer_id": 28443730, "question_id": 28443186, "link": "https://stackoverflow.com/questions/28443186/how-do-i-make-an-internal-function-nonpublic/28443730#28443730", "title": "How do I make an internal function nonpublic?", "body": "<p>Just write <code>fn</code> and not <code>pub fn</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1423611031, "creation_date": 1423611031, "answer_id": 28443887, "question_id": 28443186, "link": "https://stackoverflow.com/questions/28443186/how-do-i-make-an-internal-function-nonpublic/28443887#28443887", "title": "How do I make an internal function nonpublic?", "body": "<p>As Chris says, items are private by default:</p>\n\n<pre><code>mod foo {\n    fn helper() -&gt; u8 { 1 }\n    pub fn algorithm() -&gt; u8 {\n        helper() + helper()\n    }\n}\n\nfn main() {\n    println!(\"{}\", foo::algorithm());\n\n    // error: function `helper` is private\n    // println!(\"{}\", foo::helper()); \n}\n</code></pre>\n"}], "owner": {"reputation": 2840, "user_id": 966467, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/a467f6a4dcfe3ac934d544193e1d3f02?s=128&d=identicon&r=PG", "display_name": "likern", "link": "https://stackoverflow.com/users/966467/likern"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 134, "favorite_count": 0, "accepted_answer_id": 28443887, "answer_count": 2, "score": -3, "last_activity_date": 1423611031, "creation_date": 1423607699, "last_edit_date": 1423610910, "question_id": 28443186, "link": "https://stackoverflow.com/questions/28443186/how-do-i-make-an-internal-function-nonpublic", "title": "How do I make an internal function nonpublic?", "body": "<p>I want to create a module with free sorting functions <code>InsertSort</code> and <code>SelectionSort</code>. According to Sedgwick's implementation, I want use  internal <code>exch</code> and <code>less</code> helper functions. I don't want expose them so that anyone could accidentally use them. How to achieve this goal?</p>\n"}, {"tags": ["expression", "rust"], "answers": [{"comments": [{"owner": {"reputation": 26323, "user_id": 108915, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/a00512b12118ebd20d2043802b38bd02?s=128&d=identicon&r=PG", "display_name": "ziggystar", "link": "https://stackoverflow.com/users/108915/ziggystar"}, "edited": false, "score": 0, "creation_date": 1423604914, "post_id": 28439789, "comment_id": 45214483, "body": "Are the <code>let</code> assignments also statements? Because you can have definitions even in Haskell."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 26323, "user_id": 108915, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/a00512b12118ebd20d2043802b38bd02?s=128&d=identicon&r=PG", "display_name": "ziggystar", "link": "https://stackoverflow.com/users/108915/ziggystar"}, "edited": false, "score": 0, "creation_date": 1423605715, "post_id": 28439789, "comment_id": 45214919, "body": "@ziggystar AFAIK <code>let</code> is not an expression. (<code>{ let x = e1; e1 }</code> is though)."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 5, "last_activity_date": 1423595214, "creation_date": 1423595214, "answer_id": 28439789, "question_id": 28439614, "link": "https://stackoverflow.com/questions/28439614/is-println-an-expression-or-a-statement/28439789#28439789", "title": "Is println! an expression or a statement?", "body": "<p><code>println!()</code> is a macro expanding to an expression. It has <a href=\"http://is.gd/G9aaak\">no useful return value</a>, but it <em>is</em> an expression (mostly because almost everything is an expression, including function calls and blocks).</p>\n\n<p>There is a convention &mdash; I don't know how common it is, but I for one follow it &mdash; to treat <code>()</code>-producing function calls as pseudo-statements, used only for their side effects, and hence terminate them with a semicolon even when not strictly necessary. This is done in the first snippet.</p>\n\n<p>In the second snippet, we have a <code>match</code>, and match arms expect an expression. One can use a block (<code>Ordering::Less =&gt; { println!(\"less\"); }</code>) but this is quite a bit of syntactic noise just to make extra clear that the arms are used for their side effects, so I suppose the author just left it off.</p>\n"}], "owner": {"reputation": 779, "user_id": 2395058, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a34b4ba13c28e2809235d2b36872ad43?s=128&d=identicon&r=PG", "display_name": "ridthyself", "link": "https://stackoverflow.com/users/2395058/ridthyself"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 495, "favorite_count": 0, "accepted_answer_id": 28439789, "answer_count": 1, "score": 0, "last_activity_date": 1511129557, "creation_date": 1423594628, "last_edit_date": 1423606037, "question_id": 28439614, "link": "https://stackoverflow.com/questions/28439614/is-println-an-expression-or-a-statement", "title": "Is println! an expression or a statement?", "body": "<p>I'm working through the Rust documentation (book) and am confused about it's use of semicolons to separate statements.  </p>\n\n<p>In one example it uses the <code>println!</code> macro as a statement terminated by a semicolon: </p>\n\n<pre><code>use std::cmp::Ordering;\n\nfn cmp(a: i32, b: i32) -&gt; Ordering {\n    if a &lt; b { Ordering::Less }\n    else if a &gt; b { Ordering::Greater }\n    else { Ordering::Equal }\n}\n\nfn main() {\n    let x = 5;\n    let y = 10;\n\n    let ordering = cmp(x, y);\n\n    if ordering == Ordering::Less {\n        println!(\"less\");\n    } else if ordering == Ordering::Greater {\n        println!(\"greater\");\n    } else if ordering == Ordering::Equal {\n        println!(\"equal\");\n    }\n}\n</code></pre>\n\n<p>And when using the <code>match</code> expression to simplify it...</p>\n\n<pre><code>use std::cmp::Ordering;\n\nfn cmp(a: i32, b: i32) -&gt; Ordering {\n    if a &lt; b { Ordering::Less }\n    else if a &gt; b { Ordering::Greater }\n    else { Ordering::Equal }\n}\n\nfn main() {\n    let x = 5;\n    let y = 10;\n\n    match cmp(x, y) {\n        Ordering::Less =&gt; println!(\"less\"),\n        Ordering::Greater =&gt; println!(\"greater\"),\n        Ordering::Equal =&gt; println!(\"equal\"),\n    }\n}\n</code></pre>\n\n<p>The semicolons are gone, indicating that <code>println!</code> is not a statement, but an expression in this context.  I don't understand why... what am I missing?  </p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1423641201, "post_id": 28437537, "comment_id": 45226375, "body": "To alleviate this issue partly, you are encouraged to provide the version of the compiler you are using, and if using nightly the date and commit ID. This way, it makes it clear to future onlookers that the question and answers might not be applicable to them any longer."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "edited": false, "score": 0, "creation_date": 1423590687, "post_id": 28438089, "comment_id": 45206607, "body": "Ok, just curious: can you explain why the syntax for the Iterator trait isn&#39;t the standard GenericTypeThing&lt;OtherType&gt; syntax I&#39;m used to?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 4, "creation_date": 1423590941, "post_id": 28438089, "comment_id": 45206763, "body": "@archer884 it&#39;s an associated type. A type associated with the trait that is defined by the implementation, and not arbitrarily decided by the user. Sadly, the documentation about theses is still very lacking."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "edited": false, "score": 0, "creation_date": 1423590944, "post_id": 28438089, "comment_id": 45206765, "body": "oh! Also, is there a downside to using &#39;static vs. using a generic like &#39;a?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1423591020, "post_id": 28438089, "comment_id": 45206807, "body": "@archer884 you can&#39;t use a generic lifetime <code>&#39;a</code>, because it can&#39;t be linked to any input lifetime as your function doesn&#39;t have any input. <code>&#39;static</code> is the only possible choice here."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1423591130, "post_id": 28438089, "comment_id": 45206862, "body": "@archer884 If you want to learn more about associated types, you can have a look at the RFC introducing them : <a href=\"https://github.com/rust-lang/rfcs/pull/195\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/195</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "edited": false, "score": 0, "creation_date": 1423591162, "post_id": 28438089, "comment_id": 45206880, "body": "Actually, fn get_args&lt;&#39;a&gt;() -&gt; Box&lt;Iterator&lt;Item=String&gt; + &#39;a&gt; { ... will also compile and run. Is that bad?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1423591285, "post_id": 28438089, "comment_id": 45206944, "body": "Probably not bad. I think the value of <code>&#39;a</code> is simply inferred by the compiler to be <code>&#39;static</code>."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 2, "last_activity_date": 1423589528, "creation_date": 1423589528, "answer_id": 28438089, "question_id": 28437537, "link": "https://stackoverflow.com/questions/28437537/how-do-i-apply-an-explicit-lifetime-bound-to-a-returned-trait/28438089#28438089", "title": "How do I apply an explicit lifetime bound to a returned trait?", "body": "<p>You can't return a bare <code>Iterator</code> from a function, because it is a trait, thus not a sized type.</p>\n\n<p>In your situation, you'll need to put the iterator object inside a box, in order to make it into a sized object that can be returned from the function.</p>\n\n<p>To do so, you can change your code like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn get_args() -&gt; Box&lt;Iterator&lt;Item=String&gt; + 'static&gt; {\n    Box::new(std::env::args().filter_map(|arg| arg.into_string().ok()))\n}\n</code></pre>\n\n<p>Here I've added a lifetime specifier <code>'static</code> for the trait object, meaning that it is completely self-owned (a function taking no arguments will almost always return something valid for the <code>'static</code> lifetime in this sense).</p>\n\n<p>You also need the <code>&lt;Item=String&gt;</code> part to explicit the type of data yielded by your iterator. In this case: Strings.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "edited": false, "score": 0, "creation_date": 1423590595, "post_id": 28438111, "comment_id": 45206550, "body": "I know it&#39;s possible to do that. The problem is that it&#39;s just not practical for many (maybe even most?) of the actual iterators I use. Hence this little sample and my attempt to figure out how to avoid those painful type signatures."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 0, "last_activity_date": 1423589587, "creation_date": 1423589587, "answer_id": 28438111, "question_id": 28437537, "link": "https://stackoverflow.com/questions/28437537/how-do-i-apply-an-explicit-lifetime-bound-to-a-returned-trait/28438111#28438111", "title": "How do I apply an explicit lifetime bound to a returned trait?", "body": "<p>In this specific case you can manage to return a concrete type from your get_args, like so:</p>\n\n<pre><code>fn get_args() -&gt; FilterMap&lt;Args, fn(OsString) -&gt; Option&lt;String&gt;&gt; {\n    fn arg_into_string(arg: OsString) -&gt; Option&lt;String&gt; { arg.into_string().ok() }\n    args().filter_map(arg_into_string as fn(OsString) -&gt; Option&lt;String&gt;)\n}\n</code></pre>\n\n<p>basically this applies to all the cases where the closure you use in the iterator adapter (in your case filter_map) is not really a closure, in that it does not capture any environment, and it can be modeled by a plain old function.</p>\n\n<p>In general, if you do need to return a type that does contain a closure, you will indeed need to box it and return a trait object. In your case:</p>\n\n<pre><code>fn get_args() -&gt; Box&lt;Iterator&lt;Item=String&gt; + 'static&gt; {\n    Box::new(std::env::args().filter_map(|arg| arg.into_string().ok()))\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 28438089, "answer_count": 2, "score": 1, "last_activity_date": 1423758914, "creation_date": 1423587869, "last_edit_date": 1423758914, "question_id": 28437537, "link": "https://stackoverflow.com/questions/28437537/how-do-i-apply-an-explicit-lifetime-bound-to-a-returned-trait", "title": "How do I apply an explicit lifetime bound to a returned trait?", "body": "<p>Returning an iterator from a function in Rust is an exercise of Sisyphean dimensions, but I am told it's possible to return one as a trait without quite so much pain. Unfortunately, it isn't working: apparently, I need an explicit lifetime bound? Which is apparently not the same thing as adding a lifetime parameter. Which means I have no idea how to do that.</p>\n\n<p>Here's my (tiny, test) code:</p>\n\n<pre><code>fn main() {\n    let args = get_args();\n\n    for arg in args {\n        println!(\"{}\", arg);\n    }\n}\n\nfn get_args() -&gt; Iterator {\n    std::env::args().filter_map(|arg| arg.into_string().ok())\n}\n</code></pre>\n\n<p>What is the appropriate way to make this actually <em>work</em>?</p>\n\n<p>Edit: rust version rustc 1.0.0-nightly (00df3251f 2015-02-08 23:24:33 +0000)</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "is_accepted": false, "score": 4, "last_activity_date": 1423587702, "last_edit_date": 1423587702, "creation_date": 1423584885, "answer_id": 28436413, "question_id": 28436240, "link": "https://stackoverflow.com/questions/28436240/how-can-i-create-an-iterator-that-repeats-multiple-values-infinitely/28436413#28436413", "title": "How can I create an iterator that repeats multiple values infinitely?", "body": "<p>Found it out:<br>\nOne can also <code>repeat</code> arrays, tuples or slices (depending on the needs).  </p>\n\n<p>For example:  </p>\n\n<pre><code>let repeat_123 = std::iter::repeat([1, 2, 3]); // [1, 2, 3], [1, 2, 3], ...\n</code></pre>\n\n<p>This iterator is nested, however, to flatten it, use <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.flat_map\" rel=\"nofollow\">flatmap</a></p>\n\n<pre><code>let pattern = &amp;[1, 2, 3];\nlet repeat_123_flat = std::iter::repeat(pattern).flat_map(|x| x.iter());  \n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423588913, "post_id": 28437687, "comment_id": 45205578, "body": "Very elegant indeed. +1"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 20, "last_activity_date": 1429528316, "last_edit_date": 1429528316, "creation_date": 1423588307, "answer_id": 28437687, "question_id": 28436240, "link": "https://stackoverflow.com/questions/28436240/how-can-i-create-an-iterator-that-repeats-multiple-values-infinitely/28437687#28437687", "title": "How can I create an iterator that repeats multiple values infinitely?", "body": "<p>You can use <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cycle\" rel=\"noreferrer\"><code>.cycle()</code></a> like this:</p>\n\n<pre><code>fn main() {\n    let values = [1, 2, 3];\n    let repeat_123 = values.iter().cloned().cycle();\n    for elt in repeat_123.take(10) {\n        println!(\"{}\", elt)\n    }\n}\n</code></pre>\n\n<p>It works on any <em>iterator</em> that can be cloned (the <em>iterator</em>, not its elements).</p>\n\n<p>Please note that the <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"noreferrer\"><code>.cloned()</code></a> adaptor is incidental! It translates the by-reference iterator elements of the slice's iterator into values.</p>\n\n<p>A simpler way to write this particular sequence is:</p>\n\n<pre><code>let repeat_123 = (1..4).cycle();\n</code></pre>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3781, "favorite_count": 0, "answer_count": 2, "score": 11, "last_activity_date": 1429528316, "creation_date": 1423584355, "last_edit_date": 1423606546, "question_id": 28436240, "link": "https://stackoverflow.com/questions/28436240/how-can-i-create-an-iterator-that-repeats-multiple-values-infinitely", "title": "How can I create an iterator that repeats multiple values infinitely?", "body": "<p>Using <a href=\"http://doc.rust-lang.org/std/iter/fn.repeat.html\" rel=\"noreferrer\">repeat</a> I can create an iterator which repeats one element. But how can I repeat multiple values infinitely?\nFor example:</p>\n\n<pre><code>let repeat_1 = repeat(1); // 1, 1, 1, 1, 1, 1, 1, 1, 1, ...\nlet repeat_123 = repeat([1, 2, 3]); // 1, 2, 3, 1, 2, 3, 1, 2, ... // or similar\n</code></pre>\n"}, {"tags": ["performance", "pass-by-reference", "rust", "pass-by-value"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1423549482, "post_id": 28424408, "comment_id": 45183054, "body": "Regarding the second point: Yes, in theory the compiler should be able to act &quot;as if it was moved&quot; when the copyable value isn&#39;t used after the function call. However, like other optimizations, this depends on LLVM being aware that it&#39;s legal, and I&#39;m not sure whether rustc currently communicates this properly (I think there was an issue with <code>llvm.lifetime.end</code> being placed too conservatively)."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1423563157, "post_id": 28424408, "comment_id": 45189212, "body": "I would also like add that appropriate choice is probably even <code>&amp;[u8]</code> and not <code>&amp;[u8; 0x2000]</code>."}, {"owner": {"reputation": 1071, "user_id": 1431074, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/70192d9cb82bb6c0ac9f5ae224ec20b4?s=128&d=identicon&r=PG", "display_name": "DanB91", "link": "https://stackoverflow.com/users/1431074/danb91"}, "edited": false, "score": 0, "creation_date": 1423571301, "post_id": 28424408, "comment_id": 45193604, "body": "But shouldn&#39;t the compiler know that since it is being passed immutably, that the array should be &quot;passed logically by value, actually by reference&quot;?  It seems that a full copy isn&#39;t necessary here, unless I am missing something."}, {"owner": {"reputation": 1071, "user_id": 1431074, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/70192d9cb82bb6c0ac9f5ae224ec20b4?s=128&d=identicon&r=PG", "display_name": "DanB91", "link": "https://stackoverflow.com/users/1431074/danb91"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1423571476, "post_id": 28424408, "comment_id": 45193701, "body": "@VladimirMatveev  Why would &amp;[u8] be more appropriate?  I specified the size since the internal RAM array would always be 8KB long.  Just a type safety thing, unless Rust is like C where C ignores array sizes in parameters?  Is it more efficient to use &amp;[u8]?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1071, "user_id": 1431074, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/70192d9cb82bb6c0ac9f5ae224ec20b4?s=128&d=identicon&r=PG", "display_name": "DanB91", "link": "https://stackoverflow.com/users/1431074/danb91"}, "edited": false, "score": 0, "creation_date": 1423571611, "post_id": 28424408, "comment_id": 45193762, "body": "@DanB91, it&#39;s just that the function accepts a slice it can work with arbitrary slices. For example, you could pass a slice made from a dynamically allocated <code>Vec</code>. But of course it depends on your particular use case, and type safety is always a good thing."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1071, "user_id": 1431074, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/70192d9cb82bb6c0ac9f5ae224ec20b4?s=128&d=identicon&r=PG", "display_name": "DanB91", "link": "https://stackoverflow.com/users/1431074/danb91"}, "edited": false, "score": 1, "creation_date": 1423573140, "post_id": 28424408, "comment_id": 45194699, "body": "@DanB91: All the compiler knows is that the <code>[u8; 0x2000]</code> is being passed logically by value.  Which means you <i>might</i> modify it.  So it <i>has</i> to make a pre-emptive copy.  <code>&amp;[u8; 0x2000]</code> explicitly tells it that you are <i>definitely</i> not going to modify the thing you&#39;re passed, so it doesn&#39;t need to make a copy."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1423544123, "creation_date": 1423544123, "answer_id": 28424408, "question_id": 28424220, "link": "https://stackoverflow.com/questions/28424220/should-i-pass-a-large-array-by-reference-or-value/28424408#28424408", "title": "Should I pass a large array by reference or value?", "body": "<p>I can't answer your question directly because, as with so many other things, it depends on where the code is, what the code around it is doing, what the access patterns are, blah, blah, blah.  If you're concerned about performance, <em>you have to profile</em>.</p>\n\n<p>That said...</p>\n\n<ul>\n<li><p>\"Large\" values passed by value in Rust are <em>actually</em> passed by reference as an optimisation.  By \"large\", I believe it's anything larger than a few pointers.  Again, this is an optimisation, so you're relying on the compiler to make a reasonable choice here.  In most cases, it should choose correctly.</p>\n\n<p>Also keep in mind that you can't \"pass logically by value, actually by reference\" (which is what the compiler is doing) yourself; that would imply using <code>&amp;move</code> reference, which doesn't exist in the language yet.</p>\n\n<p>I believe Steve's comment there should be interpreted a little more liberally as: \"don't override the compiler yourself <em>unless</em> profiling tells you to.\"</p></li>\n<li><p>So is there any difference between the two?  Yes!  If you pass a <code>[u8; 0x2000]</code>, then the caller has to make a <em>copy</em> of the value before it passes it, assuming you want to be able to use it again later on.  That's likely where the performance difference is coming from.</p>\n\n<p>Note that the compiler <em>won't</em> make a copy if you are moving the value into the function.  This includes all non-copyable types (like <code>Box</code>, <code>String</code> and <code>Vec</code>), and <em>should</em> include copyable types that the compiler knows you aren't going to use again.</p></li>\n</ul>\n\n<p>The appropriate choice is <code>&amp;[u8; 0x2000]</code> because:</p>\n\n<ul>\n<li>You only need to <em>read</em> from the value (<em>i.e.</em> if you wanted to modify it, you'd need a <code>&amp;mut [u8; 0x2000]</code>.</li>\n<li>You don't want to take ownership of the value (in which case, you'd pass by value).</li>\n</ul>\n\n<p>Again, to re-emphasize: don't start playing games with \"this is a big value therefore I will use pass-by-reference\" because the compiler is <em>already</em> doing this, and you it's really hard to get it right manually.</p>\n"}], "owner": {"reputation": 1071, "user_id": 1431074, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/70192d9cb82bb6c0ac9f5ae224ec20b4?s=128&d=identicon&r=PG", "display_name": "DanB91", "link": "https://stackoverflow.com/users/1431074/danb91"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1847, "favorite_count": 1, "accepted_answer_id": 28424408, "answer_count": 1, "score": 4, "last_activity_date": 1423574926, "creation_date": 1423543052, "last_edit_date": 1423574926, "question_id": 28424220, "link": "https://stackoverflow.com/questions/28424220/should-i-pass-a-large-array-by-reference-or-value", "title": "Should I pass a large array by reference or value?", "body": "<p>I am building a Game Boy emulator in Rust.  I created a readByteFromMemory() function which takes as a parameter an 8KB array which represents the Game Boy's internal memory which was 8KB.  I am thinking of two options here:</p>\n\n<pre><code>fn readByteFromMemory(internalRAM: [u8;0x2000]) -&gt; u8\n</code></pre>\n\n<p>or</p>\n\n<pre><code>fn readByteFromMemory(internalRAM: &amp;[u8;0x2000]) -&gt; u8\n</code></pre>\n\n<p>The only thing I could find that references this topic is this article: <a href=\"http://words.steveklabnik.com/pointers-in-rust-a-guide\" rel=\"nofollow\">http://words.steveklabnik.com/pointers-in-rust-a-guide</a> which states:</p>\n\n<pre><code>But don\u2019t reach for that pointer until you must! Make sure that the \nstruct is large enough by performing some tests before you add in the \ncomplexity of pointers.\n</code></pre>\n\n<p>I ran a benchmark test on both options and it seems that no matter if the optimizer turned on or off, the pass by pointer one was much faster (as expected).</p>\n\n<p>Though interestingly enough the pass by value was slightly faster if the optimizer was turned off as shown here:</p>\n\n<pre><code>\u279c  rustTest$  rustc --test -O passByTest.rs\n\u279c  rustTest$  ./passByTest --bench         \n\nrunning 2 tests\ntest ptrBench   ... bench:         1 ns/iter (+/- 0)\ntest valueBench ... bench:       221 ns/iter (+/- 2)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n\n\u279c  rustTest$  rustc --test  passByTest.rs \n\u279c  rustTest$  ./passByTest --bench       \n\nrunning 2 tests\ntest ptrBench   ... bench:        13 ns/iter (+/- 3)\ntest valueBench ... bench:       152 ns/iter (+/- 1)\n</code></pre>\n\n<p>My question is: what seems to be the threshold in bytes where passing by reference makes sense over passing by value?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 881, "user_id": 4515912, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7902e54050ad7c00ed744dacef47318f?s=128&d=identicon&r=PG", "display_name": "Fr&#233;d&#233;ric Dumont", "link": "https://stackoverflow.com/users/4515912/fr%c3%a9d%c3%a9ric-dumont"}, "is_accepted": true, "score": 6, "last_activity_date": 1423530796, "creation_date": 1423530796, "answer_id": 28422465, "question_id": 28422310, "link": "https://stackoverflow.com/questions/28422310/is-rusts-support-for-fork-cross-platform/28422465#28422465", "title": "Is Rust&#39;s support for fork() cross-platform?", "body": "<p>There is no such thing as <code>fork</code> on Windows (it uses <code>CreateProcess</code> instead).</p>\n\n<p>More generally, Unix daemons and Windows services are very different (the latter has to comply with specific Windows interfaces), so you would need a significant abstraction layer if you want to share some code base. As far as I can tell, there is no library providing such an abstraction layer yet.</p>\n"}], "owner": {"reputation": 11354, "user_id": 70600, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6123be50f7a10302e7bf59dcdc5e2623?s=128&d=identicon&r=PG", "display_name": "ruipacheco", "link": "https://stackoverflow.com/users/70600/ruipacheco"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 862, "favorite_count": 0, "accepted_answer_id": 28422465, "answer_count": 1, "score": 3, "last_activity_date": 1423530901, "creation_date": 1423529607, "last_edit_date": 1423530901, "question_id": 28422310, "link": "https://stackoverflow.com/questions/28422310/is-rusts-support-for-fork-cross-platform", "title": "Is Rust&#39;s support for fork() cross-platform?", "body": "<p>I know Rust can handle windows and *nix filesystems. I saw there is support to fork processes - is this also cross-platform? Would I be able to write a *nix daemon and a Windows service with the same codebase?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 26323, "user_id": 108915, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/a00512b12118ebd20d2043802b38bd02?s=128&d=identicon&r=PG", "display_name": "ziggystar", "link": "https://stackoverflow.com/users/108915/ziggystar"}, "edited": false, "score": 3, "creation_date": 1423519431, "post_id": 28418648, "comment_id": 45173689, "body": "Now each player owns exactly one resource. That&#39;s not the same. (Didn&#39;t read the question)"}, {"owner": {"reputation": 305, "user_id": 2926014, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37dba24f5f00c99ffb7376f66d73a86d?s=128&d=identicon&r=PG&f=1", "display_name": "PL_kolek", "link": "https://stackoverflow.com/users/2926014/pl-kolek"}, "edited": false, "score": 1, "creation_date": 1423553339, "post_id": 28418648, "comment_id": 45184443, "body": "I edited my question, because in the way I stated it, the correct answer is the one you gave me, but it hardly moves me forward in my understanding of Rust."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423633838, "post_id": 28418648, "comment_id": 45223596, "body": "what&#39;s the preferable way in terms of code-style  of creating an instance of a struct: <code>Player{</code> or <code>Player {</code> (with the whitespace)?"}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423655947, "post_id": 28418648, "comment_id": 45234549, "body": "@ker, where does he say that? <a href=\"http://aturon.github.io/style/braces.html\" rel=\"nofollow noreferrer\">aturon.github.io/style/braces.html</a> - no mention."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423657293, "post_id": 28418648, "comment_id": 45235388, "body": "i meant that the official style guide has a space there every time"}, {"owner": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "edited": false, "score": 0, "creation_date": 1465559997, "post_id": 28418648, "comment_id": 62964963, "body": "Here he say this: <a href=\"http://aturon.github.io/style/whitespace.html\" rel=\"nofollow noreferrer\">aturon.github.io/style/whitespace.html</a> but <a href=\"http://aturon.github.io\" rel=\"nofollow noreferrer\">aturon.github.io</a> is a very moving target. so the URLs are not valid for long."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1509234787, "last_edit_date": 1509234787, "creation_date": 1423513468, "answer_id": 28418648, "question_id": 28418584, "link": "https://stackoverflow.com/questions/28418584/how-to-represent-shared-mutable-state/28418648#28418648", "title": "How to represent shared mutable state?", "body": "<blockquote>\n  <p>Each Resource can be owned by one Player.</p>\n</blockquote>\n\n<p>Make the types do that then:</p>\n\n<pre><code>struct Player {\n    points: i32,\n    resources: Vec&lt;Resource&gt;,\n}\n\nstruct Resource {\n    gold: i32,\n}\n\nfn main() {\n    let player1 = Player {\n        points: 30,\n        resources: vec![Resource { gold: 54 }],\n    };\n    let player2 = Player {\n        points: 50,\n        resources: vec![Resource { gold: 99 }],\n    };\n\n    // If you really need an array of all the resources...\n    // Although this seems like you should just ask the Player to do something\n    let mut resources: Vec&lt;_&gt; = vec![];\n    resources.extend(player1.resources.iter());\n    resources.extend(player2.resources.iter());\n}\n</code></pre>\n\n<p><strong>Edit</strong> Thanks to @ziggystar for pointing out my original version allowed players to only have one <code>Resource</code>. Now players may own N resources, but they still are the only owner of a resource.</p>\n"}, {"comments": [{"owner": {"reputation": 305, "user_id": 2926014, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37dba24f5f00c99ffb7376f66d73a86d?s=128&d=identicon&r=PG&f=1", "display_name": "PL_kolek", "link": "https://stackoverflow.com/users/2926014/pl-kolek"}, "edited": false, "score": 1, "creation_date": 1423600216, "post_id": 28436007, "comment_id": 45212025, "body": "Sounds good. My concern is, if what I&#39;m trying to do is trying to write Java code in Rust, can it be done in a Rust-way without sacrificing compile time safety? Avoid that shared mutable state at all?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 305, "user_id": 2926014, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37dba24f5f00c99ffb7376f66d73a86d?s=128&d=identicon&r=PG&f=1", "display_name": "PL_kolek", "link": "https://stackoverflow.com/users/2926014/pl-kolek"}, "edited": false, "score": 0, "creation_date": 1423643374, "post_id": 28436007, "comment_id": 45227386, "body": "Note: you are not sacrificing compile-time-safety. Rust makes sure (at compile-time) that you are using your libraries correctly. Still, your program might panic at runtime, if you use the borrow* functions. If instead you use the try_borrow* functions, you can check if it succeeded and if not, do some fallback operation."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 305, "user_id": 2926014, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37dba24f5f00c99ffb7376f66d73a86d?s=128&d=identicon&r=PG&f=1", "display_name": "PL_kolek", "link": "https://stackoverflow.com/users/2926014/pl-kolek"}, "edited": false, "score": 1, "creation_date": 1423643402, "post_id": 28436007, "comment_id": 45227395, "body": "You can also use a reference counted box (<a href=\"http://doc.rust-lang.org/std/rc/index.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/rc/index.html</a>) to a RefCell to your type. Then you only need to make sure that you do not create cycles, or your memory will never be freed. This would be much more java like (although java automatically finds cycles)"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 11, "last_activity_date": 1509235235, "last_edit_date": 1509235235, "creation_date": 1423583642, "answer_id": 28436007, "question_id": 28418584, "link": "https://stackoverflow.com/questions/28418584/how-to-represent-shared-mutable-state/28436007#28436007", "title": "How to represent shared mutable state?", "body": "<p>The <a href=\"http://doc.rust-lang.org/core/cell/index.html\" rel=\"noreferrer\">cell documentation page</a> has rather good examples. Rust will always try to protect you from doing bad things (like having two mutable references to the same thing). Therefor it's not quite as \"easy\" as using Rust's built-in references, since you need to do runtime-checking (Rust references are checked at compile-time).</p>\n\n<p>The <code>RefCell</code> type exists just for that. It checks the mutability rules at runtime. You will get some memory and computation-time overhead, but you end up with the same memory-safety that Rust promises in it's compile-time checks.</p>\n\n<p>Your example ported to <code>RefCell</code> looks like the following.</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Player {\n    points: i32,\n}\n\n// the lifetime is still needed to guarantee that Resources\n// don't outlive their player\nstruct Resource&lt;'a&gt; {\n    owner: &amp;'a RefCell&lt;Player&gt;,\n}\n\nimpl&lt;'a&gt; Resource&lt;'a&gt; {\n    fn test(&amp;self) -&gt; i32 {\n        self.owner.borrow().points\n    }\n}\n\nfn main() {\n    let player = RefCell::new(Player { points: 0 });\n    let mut resources = Vec::new();\n    resources.push(Resource { owner: &amp;player });\n    player.borrow_mut().points = 30;\n    println!(\"{:?}\", resources[0].test());\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>My concern is, if what I'm trying to do is trying to write Java code in Rust, can it be done in a Rust-way without sacrificing compile time safety? Avoid that shared mutable state at all?</p>\n</blockquote>\n\n<p>You are not sacrificing compile-time-safety. Rust makes sure (at compile-time) that you are using your libraries correctly. Still, your program might <em>panic</em> at runtime if you use the <code>borrow*</code> functions. If you use the <code>try_borrow*</code> functions instead, you can check if it succeeded and if not, do some fallback operation.</p>\n\n<p>You can also use a reference counted box of a <code>RefCell</code> to your type (<code>Rc&lt;RefCell&lt;Player&gt;&gt;</code>). Then you only need to make sure that you do not create cycles, or your memory will never be freed. This would be much more Java like (although Java automatically finds cycles).</p>\n"}], "owner": {"reputation": 305, "user_id": 2926014, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37dba24f5f00c99ffb7376f66d73a86d?s=128&d=identicon&r=PG&f=1", "display_name": "PL_kolek", "link": "https://stackoverflow.com/users/2926014/pl-kolek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3731, "favorite_count": 1, "accepted_answer_id": 28436007, "answer_count": 2, "score": 11, "last_activity_date": 1509235235, "creation_date": 1423513255, "last_edit_date": 1509235038, "question_id": 28418584, "link": "https://stackoverflow.com/questions/28418584/how-to-represent-shared-mutable-state", "title": "How to represent shared mutable state?", "body": "<p>I'm trying to learn Rust, but the only thing I do is keep hitting the wall trying to shoehorn familiar (to me) Java concepts into its type system. Or try to shoehorn Haskell concepts, etc.</p>\n\n<p>I want to write a game with a <code>Player</code> and many <code>Resource</code>s. Each <code>Resource</code> can be owned by one <code>Player</code>:</p>\n\n<pre><code>struct Player {\n    points: i32,\n}\n\nstruct Resource&lt;'a&gt; {\n    owner: Option&lt;&amp;'a Player&gt;,\n}\n\nfn main() {\n    let mut player = Player { points: 0 };\n    let mut resources = Vec::new();\n    resources.push(Resource {\n        owner: Some(&amp;player),\n    });\n    player.points = 30;\n}\n</code></pre>\n\n<p>It doesn't compile, because I can't have the resource point to player, while at the same time modifying it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `player.points` because it is borrowed\n  --&gt; src/main.rs:15:5\n   |\n13 |         owner: Some(&amp;player),\n   |                      ------ borrow of `player.points` occurs here\n14 |     });\n15 |     player.points = 30;\n   |     ^^^^^^^^^^^^^^^^^^ assignment to borrowed `player.points` occurs here\n</code></pre>\n\n<p>Moreover, if the <code>Resource</code> owned a mutable reference to <code>Player</code>, I couldn't even have two <code>Resource</code>s with the same owner.</p>\n\n<p>What is the Rust way to solve such cases?</p>\n\n<hr>\n\n<p>I oversimplified my question, and while Shepmaster's answer is a correct answer to it, it's not what I wanted to get (because what I asked was not what I really wanted to ask). I'll try to rephrase it and add more context.</p>\n\n<ol>\n<li>The resources are connected in some way - the map of all\nresources forms a (un)directed graph.</li>\n<li>Each player can own many resources, each resource can be owned by one player. The player should be able to get points from resources they own. I thought of a signature like: <code>fn addPoints(&amp;mut self, allResources: &amp;ResourcesMap) -&gt; ()</code>.</li>\n<li>The player can take over a resource connected to one of their resources from another player. It could result in some points loss for the other player.</li>\n</ol>\n\n<p>Problems:</p>\n\n<ol>\n<li>How to represent such graph in Rust (a possibly cyclic structure, where each node can be pointed to from many nodes)?</li>\n<li>The original problem: if the <code>Resource</code> points to a <code>Player</code>, I can't modify the player!</li>\n</ol>\n\n<p><code>Resource</code>s point to <code>Player</code> because - the natural way to do such an operation would be to start from some of Player A's resources, move through the map to a player's B resource and from that resource to player B to subtract the points. It just doesn't seem natural in Rust (at least for me).</p>\n"}, {"tags": ["c", "opengl", "rust", "freetype"], "comments": [{"owner": {"reputation": 20968, "user_id": 2564301, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a6b5734cdcb5ce19598ccf9a7d8cc1ff?s=128&d=identicon&r=PG&f=1", "display_name": "Jongware", "link": "https://stackoverflow.com/users/2564301/jongware"}, "edited": false, "score": 0, "creation_date": 1423507059, "post_id": 28416707, "comment_id": 45166861, "body": "Subpixel rendering works <i>only</i> and <i>exclusively</i> at the (sub)pixel level. I guess you are just drawing your textures too large -- each pixel in it must equal exactly one pixel on your screen. The &quot;100-pixel&quot; sample shows why: the color fringes are larger than a single pixel. The same goes for the smaller sizes."}, {"owner": {"reputation": 664, "user_id": 771790, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/925ead45ca60d8569512e6c4ff34c841?s=128&d=identicon&r=PG", "display_name": "jbills", "link": "https://stackoverflow.com/users/771790/jbills"}, "reply_to_user": {"reputation": 20968, "user_id": 2564301, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a6b5734cdcb5ce19598ccf9a7d8cc1ff?s=128&d=identicon&r=PG&f=1", "display_name": "Jongware", "link": "https://stackoverflow.com/users/2564301/jongware"}, "edited": false, "score": 0, "creation_date": 1423535191, "post_id": 28416707, "comment_id": 45179039, "body": "The dimensions reported by freetype are the same ones that the texture has when drawn to the screen. An increase by one in mesh width should correspond to one pixel on screen. Should I be using meshes a third of the width reported by freetype? When I try that things end up too narrow although the colors are better. Could I be doing something wrong in the way I sample the textures?"}], "owner": {"reputation": 664, "user_id": 771790, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/925ead45ca60d8569512e6c4ff34c841?s=128&d=identicon&r=PG", "display_name": "jbills", "link": "https://stackoverflow.com/users/771790/jbills"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 360, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1423506389, "creation_date": 1423506389, "question_id": 28416707, "link": "https://stackoverflow.com/questions/28416707/glyph-uploaded-from-freetype-to-opengl-is-stretched", "title": "Glyph uploaded from freetype to opengl is stretched", "body": "<p>I am attempting to render some text in freetype using subpixel rendering. When I render large sizes of text the results look adequate, with only some color fringes, which I think are expected. As I decrease the size however, the results become progressively more blurry as well as becoming slightly stretched. These are the results of drawing \"Hello\" as pixel sizes 13, 18, and 100.</p>\n\n<p><img src=\"https://i.stack.imgur.com/PWcaU.png\" alt=\"Three examples of the problem\">\nAs you can see, pixel size 100 is fairly legible, aside from slight blurriness and color fringes. Pixel size 18 is still readable, though ugly. Pixel size 13 however is so distorted that only someone who knew it was supposed to be a word could recognize it.</p>\n\n<p>This is how I get my bitmaps from freetype:</p>\n\n<pre><code>let bitmap_glyph = glyph.to_bitmap(freetype::render_mode::RenderMode::Lcd, None).unwrap();\nlet bitmap = bitmap_glyph.bitmap();\nlet texture = Texture::from_freetype_bitmap(bitmap);\n</code></pre>\n\n<p>This is the code which I currently use to generate my textures:</p>\n\n<pre><code>pub fn from_freetype_bitmap(bitmap: freetype::Bitmap) -&gt; Texture {\n    let width = bitmap.width();\n    let height = bitmap.rows();\n\n    let mut texture = 0;\n    unsafe {\n        gl::GenTextures(1, &amp;mut texture);\n        assert!(texture != 0);\n        gl::BindTexture(gl::TEXTURE_2D, texture);\n        gl::TexParameteri(gl::TEXTURE_2D, gl::TEXTURE_MAG_FILTER, gl::LINEAR as i32);\n        gl::TexParameteri(gl::TEXTURE_2D, gl::TEXTURE_MIN_FILTER, gl::LINEAR as i32);\n        gl::TexParameteri(gl::TEXTURE_2D, gl::TEXTURE_WRAP_S, gl::CLAMP_TO_EDGE as i32);\n        gl::TexParameteri(gl::TEXTURE_2D, gl::TEXTURE_WRAP_T, gl::CLAMP_TO_EDGE as i32);\n        gl::PixelStorei(gl::UNPACK_ALIGNMENT, 1);\n\n        let data = bitmap.buffer();\n        let pitch = bitmap.pitch();\n        let dataWidth = width / 3;\n\n        let mut finalData = Vec::&lt;u8&gt;::new();\n        for i in 0..height {\n            for j in 0..dataWidth {\n                finalData.push(data[(i * pitch + (j * 3) + 0) as usize]);\n                finalData.push(data[(i * pitch + (j * 3) + 1) as usize]);\n                finalData.push(data[(i * pitch + (j * 3) + 2) as usize]);\n                finalData.push(0xff);\n            }\n        }\n\n        gl::TexImage2D(\n            gl::TEXTURE_2D,\n            0,\n            gl::RGBA as GLint,\n            dataWidth, height,\n            0, \n            gl::RGBA,\n            gl::UNSIGNED_BYTE,\n            mem::transmute(finalData.as_ptr())\n        );\n    }\n\n    let mut mesh = Mesh::new();\n\n    mesh.add_vertex(0.0, 0.0); mesh.add_vertex(0.0, 0.0);\n    mesh.add_vertex(width as f32, 0.0); mesh.add_vertex(1.0, 0.0);\n    mesh.add_vertex(width as f32, height as f32); mesh.add_vertex(1.0, 1.0);\n    mesh.add_vertex(0.0, height as f32); mesh.add_vertex(0.0, 1.0);\n\n    return Texture {\n        mesh: mesh, \n        texture: texture\n    }\n}\n</code></pre>\n\n<p>These textures are then rendered using an orthographic matrix with the origin in the top left and scaled to the window's dimensions. Thus I believe there should be no up- or down-sampling occurring when rendering. These are the shaders I am using currently:</p>\n\n<pre><code>// VS\n#version 120\nuniform vec3 tint;\nuniform mat3 matrix;\n\nattribute vec2 position;\nattribute vec2 texCoords;\n\nvarying vec2 texFrag;\n\nvoid main() {\n    texFrag = texCoords;\n    gl_Position = vec4(matrix * vec3(position, 1.0), 1.0);\n}\n\n// FS\n#version 120\n\nuniform vec3 tint;\nuniform mat3 matrix;\nuniform sampler2D texSample;\n\nvarying vec2 texFrag;\n\nvoid main() {\n    vec4 color = texture(texSample, texFrag);\n    if(color.rgb == vec3(0.0, 0.0, 0.0)) {\n        color.a = 0.0;\n    }\n    gl_FragColor = color * vec4(tint, 1.0);\n}\n</code></pre>\n\n<p>I believe my problem probably has something to do with the way I am converting the textures to RGBA. If I use the bitmap without doing this conversion (aka using RGB without the <code>finalData</code> buffer in between) the result is that the data is aligned wrongly. Changing the unpack alignment does not fix that particular bug. This makes using the data straight from freetype unworkable.</p>\n\n<p>If it is relevant, the language I am using is rust, and the libraries are <a href=\"https://github.com/bjz/gl-rs\" rel=\"nofollow noreferrer\">gl-rs</a> and <a href=\"https://github.com/PistonDevelopers/freetype-rs\" rel=\"nofollow noreferrer\">freetype-rs</a>. I am on windows, and the freetype I am using was compiled with subpixel rendering enabled. How would I go about fixing this bug, and are there any others I should be aware of that might crop up as I continue to try to get this to work?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423506247, "post_id": 28416448, "comment_id": 45166413, "body": "I assume that simply changing directories and running cargo from in there isn&#39;t a sufficient solution?"}, {"owner": {"reputation": 823, "user_id": 1751099, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BYV4C.jpg?s=128&g=1", "display_name": "Eliza Weisman", "link": "https://stackoverflow.com/users/1751099/eliza-weisman"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423509464, "post_id": 28416448, "comment_id": 45168168, "body": "@Shepmaster I want to run the build on CI, so I&#39;d rather be able to execute all commands relative to the top-level source directory. <code>cd</code> is my backup plan though."}], "answers": [{"comments": [{"owner": {"reputation": 2550, "user_id": 236331, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/866b067578e3800a310b794561483ae8?s=128&d=identicon&r=PG", "display_name": "andrew", "link": "https://stackoverflow.com/users/236331/andrew"}, "edited": false, "score": 2, "creation_date": 1509510077, "post_id": 28416840, "comment_id": 81043454, "body": "Just want to add, this can be used multiple times. For instance, if you want to test the current crate AND the bundled crates, you can do <code>cargo test -p bundled1 -p bundled2 -p main_crate</code>"}], "tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 8, "last_activity_date": 1423506938, "creation_date": 1423506938, "answer_id": 28416840, "question_id": 28416448, "link": "https://stackoverflow.com/questions/28416448/how-to-make-cargo-run-tests-for-local-dependencies/28416840#28416840", "title": "How to make Cargo run tests for local dependencies?", "body": "<p>You can pass the <code>-p</code> parameter to make Cargo run the tests of a dependency.</p>\n\n<p>So, if your crate is called <code>sublib</code>, you can run its tests using:</p>\n\n<pre><code>cargo test -p sublib\n</code></pre>\n\n<p>From <code>cargo test --help</code>:</p>\n\n<blockquote>\n  <p>-p SPEC, --package SPEC  Package to run tests for</p>\n  \n  <p>If the --package argument is given, then SPEC is a package id\n  specification which indicates which package should be tested. If it is\n  not given, then the current package is tested. For more information on\n  SPEC and its format, see the <code>cargo help pkgid</code> command.</p>\n</blockquote>\n"}], "owner": {"reputation": 823, "user_id": 1751099, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BYV4C.jpg?s=128&g=1", "display_name": "Eliza Weisman", "link": "https://stackoverflow.com/users/1751099/eliza-weisman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1399, "favorite_count": 0, "accepted_answer_id": 28416840, "answer_count": 1, "score": 8, "last_activity_date": 1423506938, "creation_date": 1423505448, "question_id": 28416448, "link": "https://stackoverflow.com/questions/28416448/how-to-make-cargo-run-tests-for-local-dependencies", "title": "How to make Cargo run tests for local dependencies?", "body": "<p>I'm working on a project split across multiple crates. The top-level crate (the app) requires the two other crates (libraries) as dependencies. Running <code>cargo test</code> in the top-level crate builds the dependencies and runs tests for the top-level crate, but it doesn't run tests for the two other crates. Is there a way to configure <code>cargo test</code> so that it will run tests in all three crates?</p>\n\n<p>Thanks!</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423496852, "post_id": 28407025, "comment_id": 45160531, "body": "also the reason both trait bounds and where clauses exist is that  nikomatsakis &quot;decided against this both to avoid breaking lots of existing code and because the existing syntax is convenient much of the time.&quot; The latter part conflicts with &quot;is generally preferred&quot;, do you have any sources on that preference/coding style?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1423497770, "post_id": 28407025, "comment_id": 45161189, "body": "Sources... No I don&#39;t. I mainly assumed it from seeing where clauses used pretty much everywhere I looked."}, {"owner": {"reputation": 713, "user_id": 6425831, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2d8df927ca885cc4a64536ee49603119?s=128&d=identicon&r=PG", "display_name": "saolof", "link": "https://stackoverflow.com/users/6425831/saolof"}, "edited": false, "score": 0, "creation_date": 1597032268, "post_id": 28407025, "comment_id": 111991564, "body": "Just to vent a bit, this answer is literally the only place you&#39;ll learn that multiple where clauses are comma-separated! The official book, the official language reference, and rust by example are all quiet on this and provide only examples with a single bound! As a result it&#39;s easy to end up stuck googling until you find a stack overflow answer related to what you are looking for."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 28, "last_activity_date": 1423487135, "last_edit_date": 1423487135, "creation_date": 1423475868, "answer_id": 28407025, "question_id": 28405621, "link": "https://stackoverflow.com/questions/28405621/what-is-the-syntax-and-semantics-of-the-where-keyword/28407025#28407025", "title": "What is the syntax and semantics of the `where` keyword?", "body": "<p>In your example, the two codes are strictly equivalent.</p>\n\n<p>The <code>where</code> clauses were introduced to allow more expressive bound-checking, doing for example :</p>\n\n<pre><code>fn foo&lt;T&gt;(a: T) where Bar&lt;T&gt;: MyTrait { /* ... */ }\n</code></pre>\n\n<p>Which is not possible using only the old syntax.</p>\n\n<p>Using <code>where</code> rather than the original syntax is generally preferred for readability even if the old syntax can still be used.</p>\n\n<p>You can imagine for example constructions like</p>\n\n<pre><code>fn foo&lt;A, B, C&gt;(a: A, b: B, c: C)\n    where A: SomeTrait + OtherTrait,\n          B: ThirdTrait&lt;A&gt;+ OtherTrait,\n          C: LastTrait&lt;A, B&gt;\n{\n    /* stuff here */\n}\n</code></pre>\n\n<p>which are much more readable this way, even if the could still be expressed using the old syntax.</p>\n\n<p>For your question about the <code>CharEq</code> trait, the code is:</p>\n\n<pre><code>impl&lt;F&gt; CharEq for F where F: FnMut(char) -&gt; bool {\n    #[inline]\n    fn matches(&amp;mut self, c: char) -&gt; bool { (*self)(c) }\n\n    #[inline]\n    fn only_ascii(&amp;self) -&gt; bool { false }\n}\n</code></pre>\n\n<p>It literally means: Implementation of trait <code>CharEq</code> for all type <code>F</code> that already implements the trait <code>FnMut(char) -&gt; bool</code> (that is, a closure or a function taking a <code>char</code> and returning a <code>bool</code>).</p>\n\n<p>For more details, you can look at the RFC that introduced the <code>where</code> clauses : <a href=\"https://github.com/rust-lang/rfcs/pull/135\" rel=\"noreferrer\">https://github.com/rust-lang/rfcs/pull/135</a></p>\n"}], "owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7207, "favorite_count": 4, "accepted_answer_id": 28407025, "answer_count": 1, "score": 26, "last_activity_date": 1423530990, "creation_date": 1423470829, "last_edit_date": 1423530990, "question_id": 28405621, "link": "https://stackoverflow.com/questions/28405621/what-is-the-syntax-and-semantics-of-the-where-keyword", "title": "What is the syntax and semantics of the `where` keyword?", "body": "<p>Unfortunately, Rust's documentation regarding <code>where</code> is very lacking. The keyword only appears in one or two unrelated examples in the reference.</p>\n\n<ol>\n<li><p>What semantic difference does <code>where</code> make in the following code? Is there any difference at all? Which form is preferred?</p>\n\n<pre><code>fn double_a&lt;T&gt;(a:T) -&gt; T where T:std::num::Int {\n    a+a\n}\n\nfn double_b&lt;T: std::num::Int&gt;(a:T) -&gt; T {\n    a+a\n}\n</code></pre></li>\n<li><p>In the implementation of the CharEq trait, it seems that <code>where</code> is being used as some sort of \"selector\" to implement Trait for anything that matches some closure type. Am I correct?</p></li>\n</ol>\n\n<p>Is there any way I can get a better, more complete picture of <code>where</code>? (full specification of usage and syntax)</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1423475046, "post_id": 28405560, "comment_id": 45147661, "body": "Ok, but wait: Does it mean all my tuple members are actually copied into their respective slots a, b, and c ? I would have hoped I access them through a reference of the tuple."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 4, "creation_date": 1423498517, "post_id": 28405560, "comment_id": 45161694, "body": "They are copied.  Actually, <i>in general</i>, they are copied if copyable, or moved if not behind a reference; failing that, the compiler will shout at you. If you want a reference, you have to <i>ask</i> for a reference.  This is what the <code>ref</code> keyword is for: <code>&amp;(ref a, ref b, ref c)</code>.  This, in a pattern, says: &quot;the thing at this position?  Bind it <i>by reference</i> to a variable named <code>x</code>&quot;.  And yes, you can use this anywhere a pattern is valid: in match arms, <code>if let</code> and regular <code>let</code>.  Fun times!"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 3, "creation_date": 1423498854, "post_id": 28405560, "comment_id": 45161913, "body": "@Byron: Oh!  I almost forgot.  You can also (with a recent <code>rustc</code>) remove the explicit call to <code>.iter()</code>.  There is now an <a href=\"http://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> trait which goes from a thing to its iterator.  Since you&#39;re iterating by-ref, change <code>[...].iter()</code> to <code>&amp;[...]</code> (or <code>&amp;mut [...]</code> for <code>[...].iter_mut()</code>).  This also works with a vector <code>v</code> with <code>v</code>, <code>&amp;v</code>, and <code>&amp;mut v</code> being equivalent to <code>v.into_iter()</code>, <code>v.iter()</code> and <code>v.iter_mut()</code> respectively."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1423505201, "post_id": 28405560, "comment_id": 45165875, "body": "Thanks again for the clarification and for the updates on the new syntactical sugar. Sweet !"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 10, "last_activity_date": 1423470479, "creation_date": 1423470479, "answer_id": 28405560, "question_id": 28405400, "link": "https://stackoverflow.com/questions/28405400/why-is-needed-to-destructure-a-list-of-tuples-during-iteration/28405560#28405560", "title": "Why is `&amp;` needed to destructure a list of tuples during iteration?", "body": "<p>It's because the <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.iter\" rel=\"noreferrer\"><code>iter</code> method for an array <code>[T]</code></a> returns an <a href=\"http://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"noreferrer\">iterator that yields <code>&amp;T</code> values</a>.  That's why the compiler says \"<code>expected &amp;-ptr, found tuple [E0271]</code>\".</p>\n\n<p>So why's that?  Well, <em>in general</em>, you can't copy <code>T</code>.  Unless the code assumes a more restrictive bound of <code>T: Copy</code> or <code>T: Clone</code>, it can only <em>move</em> values of type <code>T</code>.</p>\n\n<p>This is a problem for arrays because there's no way to move a single element out of an array; doing so would invalidate the whole thing.</p>\n\n<blockquote>\n  <p><strong>Aside</strong>: <code>Vec</code> and co. get around this by implementing additional logic in <code>unsafe</code> blocks to make it work.  Containers may also provide <code>into_iter</code> which gives you an iterator that incrementally <em>consumes</em> the container, allowing you to move values out.</p>\n</blockquote>\n\n<p>Because you want the array <code>iter</code> method to work for <em>all</em> arrays, it instead yields immutable references to each element in turn.</p>\n\n<p>As a result, you're trying to destructure a <code>&amp;(&amp;str, f32, i32)</code>, not a <code>(&amp;str, f32, i32)</code>, hence the additional <code>&amp;</code>.  Rust doesn't like implicitness, so you have to <em>explicitly</em> destructure the reference.  This also helps make it clear that there's a dereference <em>and a copy</em> happening here.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1303, "favorite_count": 1, "accepted_answer_id": 28405560, "answer_count": 1, "score": 4, "last_activity_date": 1423470479, "creation_date": 1423469817, "question_id": 28405400, "link": "https://stackoverflow.com/questions/28405400/why-is-needed-to-destructure-a-list-of-tuples-during-iteration", "title": "Why is `&amp;` needed to destructure a list of tuples during iteration?", "body": "<p>When iterating a list of tuples, the <code>&amp;</code> is needed to make it work. Thus this will work ...</p>\n\n<pre><code>for &amp;(a, b, c) in [(\"hello\", 1.0, 5), (\"world\", 2.0, 2)].iter() {\n    println!(\"{} {} {}\", a, b, c);\n}\n</code></pre>\n\n<p>but that won't ...</p>\n\n<pre><code>for (a, b, c) in [(\"hello\", 1.0, 5), (\"world\", 2.0, 2)].iter() {\n    println!(\"{} {} {}\", a, b, c);\n}\n\n// type mismatch resolving `&lt;core::slice::Iter&lt;'_, (&amp;str, _, _)&gt; as core::iter::Iterator&gt;::Item == (_, _, _)`:\n// expected &amp;-ptr,\nfound tuple [E0271]\n</code></pre>\n\n<p>I am sure it has to do with intricacies of the destructuring syntax that I have not yet fully internalised.</p>\n\n<p><strong>Can you explain which syntactical truth is behind the ampersand ?</strong></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 3, "creation_date": 1423463816, "post_id": 28403648, "comment_id": 45142733, "body": "I must be blind because I don&#39;t see any <code>Box</code> there"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1423467863, "post_id": 28403648, "comment_id": 45144220, "body": "please create a minimal compilable example"}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "reply_to_user": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 0, "creation_date": 1423468819, "post_id": 28403648, "comment_id": 45144662, "body": "@JorgeIsraelPe&#241;a, there&#39;s no Box in there. But Box can be used to make it work. But I don&#39;t want to use it."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 4, "creation_date": 1423469997, "post_id": 28403648, "comment_id": 45145207, "body": "of your problem. Something i can copy paste into a .rs file and compile."}], "answers": [{"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423481896, "post_id": 28408685, "comment_id": 45151469, "body": "How would I create Hmac <code>Hmac::new(???, some_str.to_string().as_bytes())</code> according to your solutions?"}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423482069, "post_id": 28408685, "comment_id": 45151554, "body": "What&#39;s <code>a</code>, why is it equal to 1?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423482256, "post_id": 28408685, "comment_id": 45151666, "body": "@AlexanderSupertramp <code>a</code> just stands for your <code>MyType</code> enum, to provide a compilable example."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423482518, "post_id": 28408685, "comment_id": 45151821, "body": "@AlexanderSupertramp I added an example of changes that should make your code compile, but I haven&#39;t tested them."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423485574, "post_id": 28408685, "comment_id": 45153437, "body": "Thanks. Regarding your 2 approaches, how would I create Hmac::new, what&#39;s a and why is it equal to 1? In particular, the one involving <code>&amp;Digest</code>."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423488289, "post_id": 28408685, "comment_id": 45155057, "body": "@AlexanderSupertramp I added an example based on your code directly to my answer. You don&#39;t need <code>a</code>, I used it just to simplify your example (otherwise I should have created a MyType enum like you did)."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423585080, "post_id": 28408685, "comment_id": 45202965, "body": "Your example <code>fn create_hmac&lt;&#39;a, D: Digest&gt;(digest: D, some_str:....</code> ==== &gt; <code>error: the parameter type </code>D` may not live long enough [E0309]`. How can I fix it?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423585560, "post_id": 28408685, "comment_id": 45203283, "body": "@AlexanderSupertramp you will probably need to require a <code>&#39;static</code> bound on <code>D</code>. Like <code>fn create_hmac&lt;&#39;a, D: Digest + &#39;static&gt;</code>."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423586460, "post_id": 28408685, "comment_id": 45203909, "body": "Thanks, I just added <code>&lt;&#39;a, D: Digest + &#39;a&gt;</code> and it&#39;s working."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 3, "last_activity_date": 1423484204, "last_edit_date": 1423484204, "creation_date": 1423481331, "answer_id": 28408685, "question_id": 28403648, "link": "https://stackoverflow.com/questions/28403648/do-i-necessarily-need-to-box-here/28408685#28408685", "title": "Do I necessarily need to Box here?", "body": "<p>You need to either Box or use a reference, as a \"trait object\" can only work behind a pointer.</p>\n\n<p>Here's a very simplified version of your code. You have three different structs that implement the same trait (Digest)</p>\n\n<pre><code>struct Sha256;\nstruct Sha384;\nstruct Sha512;\n\ntrait Digest {}\nimpl Digest for Sha256 {}\nimpl Digest for Sha384 {}\nimpl Digest for Sha512 {}\n\nstruct HMac&lt;D: Digest&gt; { d: D }\n\nfn main() {\n    let a = 1;\n\n    // what you're trying to do\n    // (does not work, Sha256, Sha384 and Sha512 are different types)\n    //let _ = match a {\n    //    1 =&gt; Sha256,\n    //    2 =&gt; Sha384,\n    //    3 =&gt; Sha512,\n    //    _ =&gt; unreachable!()\n    //};\n}\n</code></pre>\n\n<p>Note that in the real case, not only all ShaXXX types are different for the type system, they have a different memory layout as well (compare <a href=\"https://github.com/DaGenix/rust-crypto/blob/master/src/sha2.rs#L608\" rel=\"nofollow\">Engine256State</a> with <a href=\"https://github.com/DaGenix/rust-crypto/blob/master/src/sha2.rs#L19\" rel=\"nofollow\">Engine512State</a> for instance), so this rules out unsafe tricks with <a href=\"http://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow\">transmute</a>.</p>\n\n<p>So, as said, you can use Box or references (but you have to pre-create a concrete instance before the match if you want to use references):</p>\n\n<pre><code>fn main() {\n    let a = 1;\n\n    let _ : Box&lt;Digest&gt; = match a {\n        1 =&gt; Box::new(Sha256),\n        2 =&gt; Box::new(Sha384),\n        3 =&gt; Box::new(Sha512),\n        _ =&gt; unreachable!()\n    };\n\n    // to use references we need a pre-existing instance of all ShaXXX\n    let (sha256, sha384, sha512) = (Sha256, Sha384, Sha512);\n\n    let _ : &amp;Digest = match a {\n        1 =&gt; &amp;sha256, //... otherwise the reference wouldn't outlive the match \n        2 =&gt; &amp;sha384,\n        3 =&gt; &amp;sha512,\n        _ =&gt; unreachable!()\n    };\n}\n</code></pre>\n\n<p>Note that a <code>Box</code> is doing the equivalent of what most Garbage Collected languages do for you under the hood when you want to only use an object through its interface. Some memory is dynamically allocated for the concrete objects, but you're only really allowed to pass around a pointer to the memory.  </p>\n\n<p>In your case (but I haven't tested the code below) you should be able to do:</p>\n\n<pre><code>//HMac implements a Mac trait, so we can return a Box&lt;Mac&gt;\n// (I'm assuming you only want to use HMac through its Mac trait)\nfn create_hmac&lt;'a, D: Digest&gt;(digest: D, some_str: &amp;'a str) -&gt; Box&lt;Mac + 'a&gt; {\n  Box::new(Hmac::new(digest, some_str.to_string().as_bytes()))\n}\n</code></pre>\n\n<p>and use it as:</p>\n\n<pre><code>  let mut hmac: Box&lt;Mac&gt; = match my_type {\n    MyType::MyType1 =&gt; create_hmac(Sha256::new(), some_str),\n    MyType::MyType2 =&gt; create_hmac(Sha384::new(), some_str),\n    MyType::MyType3 =&gt; create_hmac(Sha512::new(), some_str),\n    _ =&gt; unreachable!()\n  };\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423577237, "post_id": 28414778, "comment_id": 45197339, "body": "<code>let mut hmac = Hmac::new(*digest, &quot;fdsfds&quot;.to_string().as_bytes());</code> === &gt; 1) <code>the trait core::marker::Sized is not implemented for the type crypto::digest::Digest</code> 2) <code>error: type crypto::hmac::Hmac&lt;crypto::digest::Digest&gt; does not implement any method in scope named input</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1423500225, "creation_date": 1423500225, "answer_id": 28414778, "question_id": 28403648, "link": "https://stackoverflow.com/questions/28403648/do-i-necessarily-need-to-box-here/28414778#28414778", "title": "Do I necessarily need to Box here?", "body": "<p>One addition and one clarification to Paolo's good answer. First, you could make your enum incorporate the appropriate <code>Sha*</code> struct and then implement <code>Digest</code> by delegating it as appropriate. This might not make sense in all cases, but if conceptually that's what you are doing this might make sense:</p>\n\n<pre><code>struct Sha256;\nstruct Sha384;\nstruct Sha512;\n\ntrait Digest { fn digest(&amp;self); }\nimpl Digest for Sha256 { fn digest(&amp;self) {println!(\"256\")} }\nimpl Digest for Sha384 { fn digest(&amp;self) {println!(\"384\")} }\nimpl Digest for Sha512 { fn digest(&amp;self) {println!(\"512\")} }\n\nenum MyType {\n    One(Sha256),\n    Two(Sha384),\n    Three(Sha512),\n}\n\nimpl Digest for MyType {\n    fn digest(&amp;self) {\n        use MyType::*;\n\n        match *self {\n            One(ref sha)   =&gt; sha.digest(),\n            Two(ref sha)   =&gt; sha.digest(),\n            Three(ref sha) =&gt; sha.digest(),\n        }\n    }\n}\n\nfn main() {\n    let a = MyType::Two(Sha384);\n    a.digest()\n}\n</code></pre>\n\n<p>Also, you don't have to actually instantiate <em>all</em> of the types if you want to use references, you just have to ensure that the one you use is available. You also have to have places where the reference can live beyond the <code>match</code> expression:</p>\n\n<pre><code>#![feature(std_misc)]\n#![feature(io)]\n\nuse std::time::duration::Duration;\nuse std::old_io::timer::sleep;\n\nstruct Sha256(u8);\nstruct Sha384(u8);\nstruct Sha512(u8);\n\nimpl Sha256 { fn new() -&gt; Sha256 { sleep(Duration::seconds(1)); Sha256(1) }}\nimpl Sha384 { fn new() -&gt; Sha384 { sleep(Duration::seconds(2)); Sha384(2) }}\nimpl Sha512 { fn new() -&gt; Sha512 { sleep(Duration::seconds(3)); Sha512(3) }}\n\ntrait Digest {}\nimpl Digest for Sha256 {}\nimpl Digest for Sha384 {}\nimpl Digest for Sha512 {}\n\nfn main() {\n    let a = 1;\n\n    let sha256: Sha256;\n    let sha384: Sha384;\n    let sha512: Sha512;\n\n    let _ : &amp;Digest = match a {\n        1 =&gt; {\n            sha256 = Sha256::new();\n            &amp;sha256\n        },\n        2 =&gt; {\n            sha384 = Sha384::new();\n            &amp;sha384\n        },\n        3 =&gt; {\n            sha512 = Sha512::new();\n            &amp;sha512\n        },\n        _ =&gt; unreachable!()\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 0, "accepted_answer_id": 28408685, "answer_count": 2, "score": 1, "last_activity_date": 1423500225, "creation_date": 1423461506, "question_id": 28403648, "link": "https://stackoverflow.com/questions/28403648/do-i-necessarily-need-to-box-here", "title": "Do I necessarily need to Box here?", "body": "<p>Is there any way to make this code work without using <code>Box</code>ing:</p>\n\n<pre><code>fn some_func(my_type: MyType, some_str: &amp;str) -&gt; bool {\n  let mut hmac = match my_type {\n    MyType::MyType1 =&gt; create_hmac(Sha256::new(), some_str),\n    MyType::MyType2 =&gt; create_hmac(Sha384::new(), some_str),\n    MyType::MyType3 =&gt; create_hmac(Sha512::new(), some_str),\n    _ =&gt; panic!()\n  };\n\n  //some calculations goes HERE, NOT in create_hmac function...\n  hmac.input(\"fdsfdsfdsfd\".to_string().as_bytes());\n\n  //something else....\n  true\n}\n\nfn create_hmac&lt;D: Digest&gt;(digest: D, some_str: &amp;str) -&gt; Hmac&lt;D&gt; {\n  Hmac::new(digest, some_str.to_string().as_bytes())\n}\n</code></pre>\n\n<p>The library it's using is <a href=\"https://github.com/DaGenix/rust-crypto\" rel=\"nofollow\">https://github.com/DaGenix/rust-crypto</a></p>\n"}, {"tags": ["global-variables", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423449905, "post_id": 28401589, "comment_id": 45139327, "body": "While I&#39;d encourage you do <i>not</i> use global mutable state, I&#39;d be remiss if I didn&#39;t at least point to <a href=\"http://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">this answer</a> that shows you how to do just that."}], "answers": [{"comments": [{"owner": {"reputation": 12083, "user_id": 1905476, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/373f5f5d7dc27b9d2fb733e5e73dceb9?s=128&d=identicon&r=PG", "display_name": "SnareChops", "link": "https://stackoverflow.com/users/1905476/snarechops"}, "edited": false, "score": 0, "creation_date": 1423449647, "post_id": 28401962, "comment_id": 45139279, "body": "Yes, that makes perfect sense. Thank you very much (again). This is a much cleaner and succinct way of doing this. As everything I read stated, there is usually a better way than using a global, I just couldn&#39;t think of one."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1480084208, "last_edit_date": 1480084208, "creation_date": 1423449154, "answer_id": 28401962, "question_id": 28401589, "link": "https://stackoverflow.com/questions/28401589/how-to-create-a-global-mutable-bool-status-flag/28401962#28401962", "title": "How to create a global mutable bool status flag", "body": "<p>It really sounds like you want to have two threads that are communicating via <em>channels</em>. Check out this example:</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc;\nuse std::time::Duration;\n\nenum ConsoleEvent {\n    Connected,\n    Disconnected,\n}\n\nfn main() {\n    let (console_tx, console_rx) = mpsc::channel();\n\n    let socket = thread::spawn(move || {\n        println!(\"socket: started!\");\n\n        // pretend we are taking time to connect\n        thread::sleep(Duration::from_millis(300));\n\n        println!(\"socket: connected!\");\n        console_tx.send(ConsoleEvent::Connected).unwrap();\n\n        // pretend we are taking time to transfer\n        thread::sleep(Duration::from_millis(300));\n\n        println!(\"socket: disconnected!\");\n        console_tx.send(ConsoleEvent::Disconnected).unwrap();\n\n        println!(\"socket: closed!\");\n    });\n\n    let console = thread::spawn(move || {\n        println!(\"console: started!\");\n\n        for msg in console_rx.iter() {\n            match msg {\n                ConsoleEvent::Connected =&gt; println!(\"console: I'm connected!\"),\n                ConsoleEvent::Disconnected =&gt; {\n                    println!(\"console: I'm disconnected!\");\n                    break;\n                }\n            }\n        }\n    });\n\n    socket.join().expect(\"Unable to join socket thread\");\n    console.join().expect(\"Unable to join console thread\");\n}\n</code></pre>\n\n<p>Here, there are 3 threads at play:</p>\n\n<ol>\n<li>The main thread.</li>\n<li>A thread to read from the \"socket\".</li>\n<li>A thread to interface with the user.</li>\n</ol>\n\n<p>Each of these threads can maintain it's own <em>non-shared</em> state. This allows reasoning about each thread to be easier. The threads use a <a href=\"http://doc.rust-lang.org/std/sync/mpsc/fn.channel.html\" rel=\"nofollow noreferrer\"><code>channel</code></a> to send updates between them safely. The data that crosses threads is encapsulated in an enum.</p>\n\n<p>When I run this, I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>socket: started!\nconsole: started!\nsocket: connected!\nconsole: I'm connected!\nsocket: disconnected!\nsocket: closed!\nconsole: I'm disconnected!\n</code></pre>\n"}], "owner": {"reputation": 12083, "user_id": 1905476, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/373f5f5d7dc27b9d2fb733e5e73dceb9?s=128&d=identicon&r=PG", "display_name": "SnareChops", "link": "https://stackoverflow.com/users/1905476/snarechops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 513, "favorite_count": 1, "accepted_answer_id": 28401962, "answer_count": 1, "score": 4, "last_activity_date": 1480084208, "creation_date": 1423446024, "question_id": 28401589, "link": "https://stackoverflow.com/questions/28401589/how-to-create-a-global-mutable-bool-status-flag", "title": "How to create a global mutable bool status flag", "body": "<p><strong>Preface:</strong> I have done my research and know that it is really not a good idea/nor is it idiomatic Rust to have one. Completely open to suggestions of other ways to solve this issue.</p>\n\n<p><strong>Background:</strong> I have a console application that connects to a websocket and once connected successfully, the server sends a \"Connected\" message. I have the sender, and the receiver is separate threads and all is working great. After the <code>connect()</code> call a loop begins and places a prompt in the terminal, signaling that the application is ready to receive input from the user.</p>\n\n<p><strong>Problem:</strong> The issue is that the current flow of execution calls connect, and then immediately displays the prompt, and then the application receives the message from the server stating it is connected.</p>\n\n<p><strong>How I would solve this in higher level languages:</strong> Place a global bool (we'll call it <code>ready</code>) and once the application is \"ready\" then display the prompt.</p>\n\n<p><strong>How I think this might look in Rust:</strong></p>\n\n<pre><code>//Possible global ready flag with 3 states (true, false, None)\nlet ready: Option&lt;&amp;mut bool&gt; = None;\n\nfn main(){\n    welcome_message(); //Displays a \"Connecting...\" message to the user\n\n    //These are special callback I created and basically when the\n    //message is received the `connected` is called.\n    //If there was an error getting the message (service is down)\n    //then `not_connected` is called. *This is working code*\n    let p = mylib::Promise::new(connected, not_connected);\n\n    //Call connect and start websocket send and receive threads\n    mylib::connect(p);\n\n    //Loop for user input\n    loop {\n        match ready {\n            Some(x) =&gt; {\n                if x == true { //If ready is true, display the prompt\n                    match prompt_input() {\n                        true =&gt; {},\n                        false =&gt; break,\n                    }\n                } else {\n                    return; //If ready is false, quit the program\n                }\n            },\n            None =&gt; {} //Ready is None, so continue waiting\n        }\n    }\n}\n\nfn connected() -&gt; &amp;mut bool{\n    println!(\"Connected to Service! Please enter a command. (hint: help)\\n\\n\");\n    true\n}\n\nfn not_connected() -&gt; &amp;mut bool{\n    println!(\"Connection to Service failed :(\");\n    false\n}\n</code></pre>\n\n<p><strong>Question:</strong>\nHow would you solve this issue in Rust? I have tried passing it around to all the libraries method calls, but hit some major issues about borrowing an immutable object in a FnOnce() closure.</p>\n"}, {"tags": ["regex", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423416191, "post_id": 28396916, "comment_id": 45129730, "body": "&quot;Perhaps you could provide a pull request to the appropriate project beefing up the documentation! &quot; Show me, how!"}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423416246, "post_id": 28396916, "comment_id": 45129750, "body": "Also, do I have to specify the <i>exact</i> version of the package, can&#39;t I (or should I) just say &quot;0.1&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423416326, "post_id": 28396916, "comment_id": 45129775, "body": "Teaching someone how to use git and contribute to a project is a big topic that won&#39;t fit in a comment ^_^. I&#39;m sure there are good blog posts or similar out there on the Internet. I can get you started by pointing you to the <a href=\"https://github.com/rust-lang/regex\" rel=\"nofollow noreferrer\">regex project repository</a> though."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423416454, "post_id": 28396916, "comment_id": 45129813, "body": "I know how to use github and git , so thats no problem :D, however, does posting an issue to the linked repo change the doc I linked to in my question?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423416493, "post_id": 28396916, "comment_id": 45129831, "body": "As for specifying a version, that&#39;s up to you. You might want to read the <a href=\"http://doc.crates.io/crates-io.html\" rel=\"nofollow noreferrer\">crates.io guide on version specifiers</a> which indicates that <code>foo = &quot;0.1.0&quot;</code> is the same as <code>foo = &quot;^0.1.0&quot;</code>."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423416543, "post_id": 28396916, "comment_id": 45129845, "body": "Ok, thanks. And there already is an issue: <a href=\"https://github.com/rust-lang/regex/issues/31\" rel=\"nofollow noreferrer\">github.com/rust-lang/regex/issues/31</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1423416061, "creation_date": 1423416061, "answer_id": 28396916, "question_id": 28396827, "link": "https://stackoverflow.com/questions/28396827/how-to-make-regex-macros-work/28396916#28396916", "title": "How to make regex macros work?", "body": "<p>The macros are distributed as <a href=\"https://crates.io/crates/regex_macros\" rel=\"nofollow\">their own crate</a>. You need to add them as a dependency, next to the <code>regex</code> crate on your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nregex = \"0.1.8\"\nregex_macros = \"0.1.8\"\n</code></pre>\n\n<p>Perhaps you could provide a pull request to the appropriate project beefing up the documentation! </p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1489, "favorite_count": 0, "accepted_answer_id": 28396916, "answer_count": 1, "score": 3, "last_activity_date": 1423416142, "creation_date": 1423415583, "last_edit_date": 1423416142, "question_id": 28396827, "link": "https://stackoverflow.com/questions/28396827/how-to-make-regex-macros-work", "title": "How to make regex macros work?", "body": "<p>I followed <a href=\"http://doc.rust-lang.org/regex/regex/index.html\" rel=\"nofollow\">this tutorial</a>. However, trying to compile the example:</p>\n\n<pre><code>#![feature(plugin)]\n#[plugin] #[no_link]\nextern crate regex_macros;\nextern crate regex;\n\nfn main() {\n    let re = regex!(r\"^\\d{4}-\\d{2}-\\d{2}$\");\n    assert_eq!(re.is_match(\"2014-01-01\"), true);\n}\n</code></pre>\n\n<p>fails with the following errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:3:1: 3:27 error: can't find crate for `regex_macros`\nsrc/main.rs:3 extern crate regex_macros;\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nCould not compile `upm`.\n</code></pre>\n\n<p>I added </p>\n\n<pre><code>[dependencies]\nregex = \"0.1.8\"\n</code></pre>\n\n<p>to my <code>Cargo.toml</code>.</p>\n\n<p>Seems like the doc is deprecated.  </p>\n\n<p>I updated rust before:  </p>\n\n<pre><code>$ rustc --version\nrustc 1.0.0-nightly (74b874071 2015-02-08 00:24:03 +0000)\n</code></pre>\n\n<p>Which steps do I have to follow now?</p>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 6, "creation_date": 1423410681, "post_id": 28395813, "comment_id": 45127996, "body": "As I understand, according to #21843 <a href=\"https://github.com/rust-lang/rust/pull/21843\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/21843</a> this syntax is now obsolete."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1423418157, "last_edit_date": 1423418157, "creation_date": 1423409812, "answer_id": 28395813, "question_id": 28395722, "link": "https://stackoverflow.com/questions/28395722/whats-the-part-in-a-closure-argument-list/28395813#28395813", "title": "What&#39;s the &amp;: part in a closure argument list?", "body": "<p>This is an underdocumented (and <strong>obsolete</strong>, see comment) section of Rust right now. The best reference I know of is the blog post <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/11/26/purging-proc/\" rel=\"nofollow\">Purging proc</a>:</p>\n\n<blockquote>\n  <p>Because the current inference scheme is limited, you will sometimes need to specify which of the three fn traits you want explicitly. (Some people also just prefer to do that.) The current syntax is to use a leading <code>&amp;:</code>, <code>&amp;mut:</code>, or <code>:</code>, kind of like an \u201canonymous parameter\u201d:</p>\n</blockquote>\n\n<pre><code>// Explicitly create a `Fn` closure.\nfoo(|&amp;:| { ... })\n\n// Explicitly create a `FnMut` closure.\nfoo(|&amp;mut:| { ... })\n\n// Explicitly create a `FnOnce` closure.\nfoo(|:| { ... }) // (ERROR)\n</code></pre>\n\n<blockquote>\n  <p>Caveat: It is still possible we\u2019ll change the <code>&amp;:</code>/<code>&amp;mut:</code>/<code>:</code> syntax before 1.0; if we can improve inference enough, we might even <strong>get rid of it altogether</strong>.</p>\n</blockquote>\n\n<p>And it looks like it was removed in <a href=\"https://github.com/rust-lang/rust/pull/21843\" rel=\"nofollow\">#21843</a>! Thanks for pointing that out, @swizard!</p>\n"}], "owner": {"reputation": 1561, "user_id": 4389183, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-P2Zfjta6JN4/AAAAAAAAAAI/AAAAAAAAADU/K4cwO3iCqNE/photo.jpg?sz=128", "display_name": "maralla", "link": "https://stackoverflow.com/users/4389183/maralla"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 28395813, "answer_count": 1, "score": 2, "last_activity_date": 1423418157, "creation_date": 1423409313, "last_edit_date": 1423409913, "question_id": 28395722, "link": "https://stackoverflow.com/questions/28395722/whats-the-part-in-a-closure-argument-list", "title": "What&#39;s the &amp;: part in a closure argument list?", "body": "<p>Look at the code:</p>\n\n<pre><code>let add_one = |&amp;: x| { 1 + x };\n</code></pre>\n\n<p>I know <code>x</code> is the closure argument, but what is the meaning of  <code>&amp;:</code> in the closure?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1068, "user_id": 410238, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/523739b5cb268a2d00d3061c993f1707?s=128&d=identicon&r=PG", "display_name": "David Roe", "link": "https://stackoverflow.com/users/410238/david-roe"}, "edited": false, "score": 0, "creation_date": 1423396354, "post_id": 28393519, "comment_id": 45123811, "body": "What does &quot;short-lived&quot; mean with regards to references? I&#39;d seen something using <code>Box</code> and a static lifetime elsewhere but thought that meant the value had to be a constant/known at compile time."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 1068, "user_id": 410238, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/523739b5cb268a2d00d3061c993f1707?s=128&d=identicon&r=PG", "display_name": "David Roe", "link": "https://stackoverflow.com/users/410238/david-roe"}, "edited": false, "score": 2, "creation_date": 1423445647, "post_id": 28393519, "comment_id": 45138490, "body": "@David: <code>&#39;static</code> as a constraint for a type means that the type does not contain any references less than <code>&#39;static</code> in lifetime. So <code>i32</code> and <code>String</code> are fine because they own their data and contain no references, and <code>&amp;&#39;static str</code> is fine because although it has a reference it is static."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1423395843, "creation_date": 1423395843, "answer_id": 28393519, "question_id": 28393369, "link": "https://stackoverflow.com/questions/28393369/is-it-possible-to-store-an-error-cause-in-a-struct-without-an-enum/28393519#28393519", "title": "Is it possible to store an error cause in a struct without an enum?", "body": "<p>If you don't mind the overhead of allocating memory for each error, you could store an <code>Option&lt;Box&lt;Error + 'static&gt;&gt;</code> as the cause.  When you're creating the <code>MyError</code>, just use <code>Some(Box::new(the_cause) as Box&lt;Error&gt;</code>.  The <code>'static</code> bound is to let the compiler know that any errors you store must not have short-lived references inside them.</p>\n\n<p>Another alternative would be to write a macro that expands to the required <code>enum</code> and <code>impl</code>, but that seems somewhat overkill.</p>\n"}], "owner": {"reputation": 1068, "user_id": 410238, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/523739b5cb268a2d00d3061c993f1707?s=128&d=identicon&r=PG", "display_name": "David Roe", "link": "https://stackoverflow.com/users/410238/david-roe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 264, "favorite_count": 1, "accepted_answer_id": 28393519, "answer_count": 1, "score": 3, "last_activity_date": 1423511475, "creation_date": 1423394725, "last_edit_date": 1423511475, "question_id": 28393369, "link": "https://stackoverflow.com/questions/28393369/is-it-possible-to-store-an-error-cause-in-a-struct-without-an-enum", "title": "Is it possible to store an error cause in a struct without an enum?", "body": "<p>I'm writing a library in Rust and would like the API to only expose my own error type, with any errors caused by libraries used internally wrapped in that type. I want to implement the <code>Error</code> trait and expose the original error as the \"cause\". I can do this with an enum by doing something like:</p>\n\n<pre><code>enum MyErrorCause {\n    Zip(ZipError),\n    Io(IoError),\n    None\n}\n\npub struct MyError {\n    cause: MyErrorCause\n}\n\nimpl Error for MyError {\n    fn description(&amp;self) -&gt; &amp;str { \"an error\" }\n\n    fn cause(&amp;self) -&gt; Option&lt;&amp;Error&gt; {\n        match self.cause {\n            MyErrorCause::Zip(ref err) =&gt; Some(err as &amp;Error),\n            MyErrorCause::Io(ref err) =&gt; Some(err as &amp;Error),\n            MyErrorCause::None =&gt; None\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is that I have to add an enum variant and virtually identical match arm for every cause type, when I'm only ever exposing them to the user as a generic <code>Error</code> reference. Is it possible to store the cause as <code>Error</code> in the <code>MyError</code> struct? I would still like the cause to be owned by <code>MyError</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1423414243, "post_id": 28393116, "comment_id": 45129123, "body": "Apparently I wasn&#39;t using parentheses around <code>Writer +&#39;a</code> in one of my trials, thanks for clarifying the syntax ! The question is why Rust is unable to infer that."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1423392841, "creation_date": 1423392841, "answer_id": 28393116, "question_id": 28392986, "link": "https://stackoverflow.com/questions/28392986/how-to-use-arbitrary-mut-reference-members-and-dynamic-dispatch/28393116#28393116", "title": "How to use arbitrary `&amp;mut` reference members and dynamic dispatch?", "body": "<p>A trait object, when stored in a struct, needs to know how long it may live for; the <code>'a</code> in <code>&amp;'a mut</code> indicates how long the <em>reference</em> lasts for, but the lifetime of the object being borrowed must also be considered for reasons of memory safety. This is written <code>Writer + 'a</code> for an arbitrary <code>'a</code>, which can in this case be the same as the <code>'a</code> of the reference. The final incantation there is <code>&amp;'a mut (Writer + 'a)</code>:</p>\n\n<pre><code>use std::old_io::Writer;\nuse std::old_io::stdio;\n\nstruct Container&lt;'a&gt; {\n    w: &amp;'a mut (Writer + 'a)\n}\n\nlet mut stdout = stdio::stdout();\nlet c = Container { w: &amp;mut stdout };\n\n// now it should be possible to make calls, like \nc.w.write_u8(1);\n</code></pre>\n\n<p>Bear in mind as a possible alternative generics:</p>\n\n<pre><code>use std::old_io::Writer;\nuse std::old_io::stdio;\n\nstruct Container&lt;'a, W: Writer + 'a&gt; {\n    w: &amp;'a mut W\n}\n\nlet mut stdout = stdio::stdout();\nlet c = Container { w: &amp;mut stdout };\n\n// now it should be possible to make calls, like \nc.w.write_u8(1);\n</code></pre>\n\n<p>Note how in just the same way the <code>'a</code> constraint on <code>W</code> is needed there.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 124, "favorite_count": 0, "accepted_answer_id": 28393116, "answer_count": 1, "score": 2, "last_activity_date": 1423414338, "creation_date": 1423391884, "last_edit_date": 1423414338, "question_id": 28392986, "link": "https://stackoverflow.com/questions/28392986/how-to-use-arbitrary-mut-reference-members-and-dynamic-dispatch", "title": "How to use arbitrary `&amp;mut` reference members and dynamic dispatch?", "body": "<p>Using <code>rustc 1.0.0-nightly (d3732a12e 2015-02-06 23:30:17 +0000)</code>, I would like to store a <code>&amp;mut</code> to something within a struct and use it throughout the structs lifetime, making dynamic calls to it using dynamic dispatching.</p>\n\n<p>The original idea was to store a <code>Writer</code> reference, which may either be stdout or an open file.</p>\n\n<p><a href=\"https://github.com/Byron/depot/blob/master/src/rust/hello/tests/lang.rs#L726\" rel=\"nofollow\">This is</a> what I came up with, but without any success:</p>\n\n<pre><code>use std::old_io::Writer;\nuse std::old_io::stdio;\n\nstruct Container&lt;'a&gt; {\n    w: &amp;'a mut Writer\n}\n\nlet mut stdout = stdio::stdout();\nlet c = Container { w: &amp;mut stdout };\n\n// now it should be possible to make calls, like \nc.w.write_u8(1);\n</code></pre>\n\n<p>The code fails due to lifetime issues, and I am unable to express that <code>w</code> is supposed to live as long as an instance of the <code>Container</code> type.\nAlso please note that I prefer not to use the heap, and thus boxed instances, for this, if at all possible.</p>\n\n<p><strong>How would something like the above be achieved in Rust ?</strong></p>\n"}, {"tags": ["rust", "hashmap"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423407832, "post_id": 28392008, "comment_id": 45127065, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27582739/how-do-i-create-a-hashmap-literal\">How do I create a HashMap literal?</a>"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423425470, "post_id": 28392008, "comment_id": 45133060, "body": "Agreed. I should have searched for &quot;literal&quot;."}, {"owner": {"reputation": 53, "user_id": 4575540, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-Byl1I7IJOtE/AAAAAAAAAAI/AAAAAAAAAvA/L59zaXJVzCk/photo.jpg?sz=128", "display_name": "silverthorne", "link": "https://stackoverflow.com/users/4575540/silverthorne"}, "edited": false, "score": 0, "creation_date": 1618507687, "post_id": 28392008, "comment_id": 118628565, "body": "5 years later, I am doing the same Exercism.io exercise and I found this :)"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1619201707, "post_id": 28392008, "comment_id": 118843149, "body": "I believe I was doing a rosalind.info problem originally, but obviously the answer is pretty generally useful."}], "answers": [{"comments": [{"owner": {"reputation": 920, "user_id": 217275, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/f01054ce44a50811a5fc96f634e8a0d2?s=128&d=identicon&r=PG", "display_name": "Piotr Zolnierek", "link": "https://stackoverflow.com/users/217275/piotr-zolnierek"}, "edited": false, "score": 42, "creation_date": 1423422407, "post_id": 28392068, "comment_id": 45131974, "body": "THAT should definitely  be in std!"}, {"owner": {"reputation": 5405, "user_id": 4619958, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/cVA9W.png?s=128&g=1", "display_name": "ch271828n", "link": "https://stackoverflow.com/users/4619958/ch271828n"}, "edited": false, "score": 0, "creation_date": 1569542665, "post_id": 28392068, "comment_id": 102640222, "body": "Excellent and give me (newlearner) an example of macro! Thanks!"}, {"owner": {"reputation": 5405, "user_id": 4619958, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/cVA9W.png?s=128&g=1", "display_name": "ch271828n", "link": "https://stackoverflow.com/users/4619958/ch271828n"}, "reply_to_user": {"reputation": 920, "user_id": 217275, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/f01054ce44a50811a5fc96f634e8a0d2?s=128&d=identicon&r=PG", "display_name": "Piotr Zolnierek", "link": "https://stackoverflow.com/users/217275/piotr-zolnierek"}, "edited": false, "score": 2, "creation_date": 1584323161, "post_id": 28392068, "comment_id": 107393586, "body": "@PiotrZolnierek That is actually <i>in std</i> now! (see my answer :)  )"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 69, "last_activity_date": 1423384499, "creation_date": 1423384499, "answer_id": 28392068, "question_id": 28392008, "link": "https://stackoverflow.com/questions/28392008/more-concise-hashmap-initialization/28392068#28392068", "title": "More concise HashMap initialization", "body": "<p>You can use iterators to emulate the dictionary comprehension, e.g.</p>\n\n<pre><code>let counts = \"ACGT\".chars().map(|c| (c, 0_i32)).collect::&lt;HashMap&lt;_, _&gt;&gt;();\n</code></pre>\n\n<p>or even  <code>for c in \"ACGT\".chars() { counts.insert(c, 0) }</code>.</p>\n\n<p>Also, one can write a macro to allow for concise initialisation of arbitrary values.</p>\n\n<pre><code>macro_rules! hashmap {\n    ($( $key: expr =&gt; $val: expr ),*) =&gt; {{\n         let mut map = ::std::collections::HashMap::new();\n         $( map.insert($key, $val); )*\n         map\n    }}\n}\n</code></pre>\n\n<p>used like <code>let counts = hashmap!['A' =&gt; 0, 'C' =&gt; 0, 'G' =&gt; 0, 'T' =&gt; 0];</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 5405, "user_id": 4619958, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/cVA9W.png?s=128&g=1", "display_name": "ch271828n", "link": "https://stackoverflow.com/users/4619958/ch271828n"}, "is_accepted": false, "score": 38, "last_activity_date": 1592711687, "last_edit_date": 1592711687, "creation_date": 1569542993, "answer_id": 58126168, "question_id": 28392008, "link": "https://stackoverflow.com/questions/28392008/more-concise-hashmap-initialization/58126168#58126168", "title": "More concise HashMap initialization", "body": "<p>Another way that I see in the <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\">official documentation</a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\n\nfn main() {\n    let timber_resources: HashMap&lt;&amp;str, i32&gt; =\n    [(&quot;Norway&quot;, 100),\n     (&quot;Denmark&quot;, 50),\n     (&quot;Iceland&quot;, 10)]\n     .iter().cloned().collect();\n    // use the values stored in map\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 155, "user_id": 9184849, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b389806c32c643ec81c2935c265a24df?s=128&d=identicon&r=PG&f=1", "display_name": "Kushagra Gupta", "link": "https://stackoverflow.com/users/9184849/kushagra-gupta"}, "edited": false, "score": 1, "creation_date": 1592796836, "post_id": 58683901, "comment_id": 110542474, "body": "I would say that using the <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\">HashMap Entry API</a> is better."}, {"owner": {"reputation": 2789, "user_id": 27355, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fa32e0ff43b2d25cb01f5dddd7620298?s=128&d=identicon&r=PG", "display_name": "Deebster", "link": "https://stackoverflow.com/users/27355/deebster"}, "reply_to_user": {"reputation": 155, "user_id": 9184849, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b389806c32c643ec81c2935c265a24df?s=128&d=identicon&r=PG&f=1", "display_name": "Kushagra Gupta", "link": "https://stackoverflow.com/users/9184849/kushagra-gupta"}, "edited": false, "score": 0, "creation_date": 1601293217, "post_id": 58683901, "comment_id": 113352868, "body": "@KushagraGupta is right that entry() is better, and (almost) this use-case is featured in chapter 8 of of <a href=\"https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html\" rel=\"nofollow noreferrer\">The Rust Programming Language</a>."}], "tags": [], "owner": {"reputation": 1602, "user_id": 265932, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/856fe019eb54d302ac5de3c0ebb94366?s=128&d=identicon&r=PG", "display_name": "Jemenake", "link": "https://stackoverflow.com/users/265932/jemenake"}, "is_accepted": false, "score": 0, "last_activity_date": 1572809654, "creation_date": 1572809654, "answer_id": 58683901, "question_id": 28392008, "link": "https://stackoverflow.com/questions/28392008/more-concise-hashmap-initialization/58683901#58683901", "title": "More concise HashMap initialization", "body": "<p>This (very common) scenario is why I heard angels singing when I discovered Python's <em>defaultdict</em>, a dictionary which, if you try to get a key that isn't in the dictionary, immediately <em>creates</em> a default value for that key with a constructor you supply when you declare the defaultdict. So, in Python, you can do things like:</p>\n\n<pre><code>counts = defaultdict(lambda: 0)\ncounts['A'] = counts['A'] + 1\n</code></pre>\n\n<p>For counting occurrences, this is the favored approach since trying to pre-populate the hashtable becomes problematic when the keyspace is either large or unknown to the programmer (Imagine something which counts words in text you feed to it. Are you going to pre-populate with all English words? What if a new word enters the lexicon?).</p>\n\n<p>You can achieve this same thing in Rust with the lesser-known methods in the <em>Option</em> class. Seriously, when you have some free time, just read through all of the methods in <em>Option</em>. There are some very handy methods in there.</p>\n\n<p>Although not dealing with concise initialization (which is what the wubject is asking for) here are two answers (which are, arguably, better for doing what OP is trying to do).</p>\n\n<pre><code>let text = \"GATTACA\";\nlet mut counts:HashMap&lt;char,i32&gt; = HashMap::new();\nfor c in text.chars() {\n    counts.insert(c,*(counts.get(&amp;c).get_or_insert(&amp;0))+1);\n}\n</code></pre>\n\n<p>The above method uses Option's <em>get or insert()</em> method which, if it's a Some(), returns the value and, if a None, returns a value you provide. <strong>Note that, even though the method is named get_or_insert(), it is <em>not</em> inserting into the hashmap; this is a method for Option and the hashmap has no idea this fail-over is taking place</strong>. The nice bit is that this unwraps the value for you. This is pretty similar to Python's defaultdict, with the difference that you have to provide a default value in multiple locations in your code (inviting bugs, but also providing an added flexibility that defaultdict lacks).</p>\n\n<pre><code>let text = \"GATTACA\";\nlet mut counts:HashMap&lt;char,i32&gt; = HashMap::new();\nfor c in text.chars() {\n    counts.insert(c,counts.get(&amp;c).or_else(|| Some(&amp;0)).unwrap()+1);\n}\n</code></pre>\n\n<p>This approach uses Option's <em>or else()</em> method which lets you specify a lambda for producing the value and, crucially, lets you <em>still</em> return a None (imagine if you wanted to check a hashmap for a key and, if not found, check <em>another</em> hashmap for it, and, only if not found in either, did you produce a None). Because <em>or else()</em> returns an option, we must use <em>unwrap()</em> (which would panic if used on a None, but we know that won't apply here).</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13259, "favorite_count": 11, "accepted_answer_id": 28392068, "answer_count": 3, "score": 44, "last_activity_date": 1592711687, "creation_date": 1423384095, "last_edit_date": 1572810493, "question_id": 28392008, "link": "https://stackoverflow.com/questions/28392008/more-concise-hashmap-initialization", "title": "More concise HashMap initialization", "body": "<p>I'm using a <code>HashMap</code> to count the occurrences of different characters in a string:</p>\n\n<pre><code>let text = \"GATTACA\";\nlet mut counts: HashMap&lt;char, i32&gt; = HashMap::new();\ncounts.insert('A', 0);\ncounts.insert('C', 0);\ncounts.insert('G', 0);\ncounts.insert('T', 0);\n\nfor c in text.chars() {\n    match counts.get_mut(&amp;c) {\n        Some(x) =&gt; *x += 1,\n        None =&gt; (),\n    }\n}\n</code></pre>\n\n<p>Is there a more concise or declarative way to initialize a <code>HashMap</code>? For example in Python I would do:</p>\n\n<pre><code>counts = { 'A': 0, 'C': 0, 'G': 0, 'T': 0 }\n</code></pre>\n\n<p>or</p>\n\n<pre><code>counts = { key: 0 for key in 'ACGT' }\n</code></pre>\n"}, {"tags": ["callback", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423370892, "post_id": 28390651, "comment_id": 45118670, "body": "Note that the Rust style is 4-space indents."}, {"owner": {"reputation": 12083, "user_id": 1905476, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/373f5f5d7dc27b9d2fb733e5e73dceb9?s=128&d=identicon&r=PG", "display_name": "SnareChops", "link": "https://stackoverflow.com/users/1905476/snarechops"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423370946, "post_id": 28390651, "comment_id": 45118681, "body": "Ah, I can fix that if you&#39;d like, It is in my code, though for readability and spacing in the question I reduced it to two"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423371007, "post_id": 28390651, "comment_id": 45118696, "body": "It would greatly help if you could produce an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, especially one that compiles (or has the appropriate error) in the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Playpen</a>. Right now, your code uses <code>type</code> as a variable name, which isn&#39;t valid Rust."}, {"owner": {"reputation": 12083, "user_id": 1905476, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/373f5f5d7dc27b9d2fb733e5e73dceb9?s=128&d=identicon&r=PG", "display_name": "SnareChops", "link": "https://stackoverflow.com/users/1905476/snarechops"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423371133, "post_id": 28390651, "comment_id": 45118717, "body": "That was an edit in the question as well to hide the name of the actual variable. Will fix and look into the MCVE."}], "answers": [{"comments": [{"owner": {"reputation": 12083, "user_id": 1905476, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/373f5f5d7dc27b9d2fb733e5e73dceb9?s=128&d=identicon&r=PG", "display_name": "SnareChops", "link": "https://stackoverflow.com/users/1905476/snarechops"}, "edited": false, "score": 0, "creation_date": 1423372865, "post_id": 28390705, "comment_id": 45119001, "body": "That solved that issue and is immensely helpful. Thank you. Now on to the next issue, which is <i>very closely</i> related to this one, but should be a quick answer. Should I create a new question on SO, or add it as an edit to my post? It has to do with the calling of the callback in the <code>match</code> block."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1423371217, "creation_date": 1423371217, "answer_id": 28390705, "question_id": 28390651, "link": "https://stackoverflow.com/questions/28390651/how-do-i-implement-a-javascript-style-callback/28390705#28390705", "title": "How do I implement a JavaScript-style callback?", "body": "<p>Try marking your <code>F</code> with the same restrictions as <a href=\"http://doc.rust-lang.org/std/thread/struct.Thread.html#method.scoped\" rel=\"nofollow\">Thread::scoped</a>:</p>\n\n<pre><code>fn scoped&lt;'a, T, F&gt;(f: F) -&gt; JoinGuard&lt;'a, T&gt; \n    where T: Send + 'a, F: FnOnce() -&gt; T, F: Send + 'a\n</code></pre>\n\n<p>specifically, bounding the type with the <code>Send</code> trait should clear the immediate error of</p>\n\n<blockquote>\n  <p>the trait <code>core::marker::Send</code> is not implemented for the type <code>F</code></p>\n</blockquote>\n"}], "owner": {"reputation": 12083, "user_id": 1905476, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/373f5f5d7dc27b9d2fb733e5e73dceb9?s=128&d=identicon&r=PG", "display_name": "SnareChops", "link": "https://stackoverflow.com/users/1905476/snarechops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 594, "favorite_count": 0, "accepted_answer_id": 28390705, "answer_count": 1, "score": 2, "last_activity_date": 1423373057, "creation_date": 1423370629, "last_edit_date": 1423373057, "question_id": 28390651, "link": "https://stackoverflow.com/questions/28390651/how-do-i-implement-a-javascript-style-callback", "title": "How do I implement a JavaScript-style callback?", "body": "<p>I'm trying to implement a JavaScript-style callback. I have an application that uses a library (both are mine) and I need the application to be able to pass a closure or function to a method in the library, which then spawns a thread and inside the thread when a condition is met it will call the callback.</p>\n\n<p>main.rs</p>\n\n<pre><code>fn main(){\n    welcome_message();\n    mylib::connect(|| println!(\"Connected to service! Please enter a command. (hint: help)\\n\\n\"));\n    loop {\n        match prompt_input() {\n            true =&gt; {},\n            false =&gt; break,\n        }\n    }\n}\n</code></pre>\n\n<p>lib.rs</p>\n\n<pre><code>pub fn connect&lt;F&gt;(resolve: F) -&gt; (mpsc::Sender&lt;Message&gt;, mpsc::Receiver&lt;Message&gt;)\n    where F: Fn()\n{\n\n    ...\n\n    let receive_loop = Thread::scoped(move || {\n        for response in receiver.incoming_messages::&lt;Message&gt;(){\n            let json_string = match response.unwrap() {\n                Message::Text(txt) =&gt; txt,\n                _ =&gt; \"\".to_string(),\n            };\n            let message = json::Json::from_str(json_string.as_slice());\n            let message_json = message.unwrap();\n            if message_json.is_object() {\n                let ref something = receiver_tx;\n                let obj = message_json.as_object().unwrap();\n                let something_json = obj.get(\"lsri\").unwrap();\n                let something = something_json.to_string().replace(\"\\\"\", \"\");\n                match something.as_slice() {\n                    \"service#connected\" =&gt; resolve(),\n                    _ =&gt; println!(\"{}\", type),\n                }\n            } else {\n                println!(\"Invalid service response\");\n            }\n        }\n    });\n\n    ...\n\n}\n</code></pre>\n\n<p>Error</p>\n\n<pre><code>src/lib.rs:54:24: 54:38 error: the trait `core::marker::Send` is not implemented for the type `F` [E0277]\nsrc/lib.rs:54     let receive_loop = Thread::scoped(move || {\n                                     ^~~~~~~~~~~~~~\nsrc/lib.rs:54:24: 54:38 note: `F` cannot be sent between threads safely\nsrc/lib.rs:54     let receive_loop = Thread::scoped(move || {\n                                     ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>It doesn't need to be a closure that I pass, I could pass a function too. It doesn't need any arguments or return types, but I could add some dummy ones if that helps. I am VERY open to suggestions of other methods or ways to accomplish the same goal.</p>\n\n<p>I have tried using:</p>\n\n<ul>\n<li>Thread::spawn</li>\n<li>FnMut()</li>\n<li>Arc::new(resolve) (with implementation of .clone())</li>\n<li>Arc::new(Mutex::new(resolve)) (with implementation of .lock())</li>\n<li>Searching Google for examples</li>\n<li>Reading the Rust book in it's entirety</li>\n<li>Searching the error message for examples</li>\n<li>All of the above in various configurations</li>\n</ul>\n\n<p>Is this possible with Rust? Is there a better way?</p>\n\n<p>Thank you for your time in advance.</p>\n\n<p><strong>Solution:</strong></p>\n\n<p>For anyone finding this in the future, per the instructions of the answer below I changed the signature of <code>connect</code> to the following, which allowed the callback to be passed into the thread.</p>\n\n<pre><code>pub fn connect&lt;'a, T, F&gt;(resolve: F) -&gt; (mpsc::Sender&lt;Message&gt;, mpsc::Receiver&lt;Message&gt;)\n    where T: Send + 'a, F: FnOnce() -&gt; T, F: Send + 'a\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1423484999, "post_id": 28389990, "comment_id": 45153103, "body": "you might be interested in <a href=\"https://github.com/rust-lang/rfcs/pull/639\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/639</a>"}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 2, "last_activity_date": 1423363794, "creation_date": 1423363794, "answer_id": 28390061, "question_id": 28389990, "link": "https://stackoverflow.com/questions/28389990/pattern-matching-the-tag-of-a-tagged-union-enum/28390061#28390061", "title": "Pattern matching the tag of a tagged union enum", "body": "<p>You can use <code>..</code> to ignore all fields of an enum, no matter how many there are, and you can import variants from inside the <code>enum</code>s namespace with <code>use</code>. E.g</p>\n\n<pre><code>enum Foo {\n   X { i: u8 },\n   Y(u8),\n   Z\n}\n\nfn bar(x: Foo) -&gt; u32 {\n    use Foo::*;\n    match x {\n        X { .. } =&gt; 100,\n        Y(..) =&gt; 3,\n        Z =&gt; 12,\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1423364174, "post_id": 28390072, "comment_id": 45117517, "body": "I think my question may not have been entirely clear. I basically want to use the <b>name</b> as an index. So Point1, Point2, Point3 etc are all their own unique IDs.  I basically want a map of each unique enum value to a u32, I guess. A function and pattern matching is acceptable, but this doesn&#39;t really condense it in my case."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1423364267, "post_id": 28390072, "comment_id": 45117540, "body": "@Jsor writing all that out once as a method on the enum value still reduces code duplication, but leaves one verbose method."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1423364303, "post_id": 28390072, "comment_id": 45117547, "body": "I guess the issue is I want to be able to add to the enum without also changing code somewhere else. Though I guess at least the compiler will bother me about not being exhaustive if I forget."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1423372831, "last_edit_date": 1423372831, "creation_date": 1423363955, "answer_id": 28390072, "question_id": 28389990, "link": "https://stackoverflow.com/questions/28389990/pattern-matching-the-tag-of-a-tagged-union-enum/28390072#28390072", "title": "Pattern matching the tag of a tagged union enum", "body": "<p>You can use the alternation syntax (via <code>|</code>) in the match arms and methods on the enum to reduce code duplication:</p>\n\n<pre><code>enum Test {\n    Point1,\n    Point2,\n    Point3,\n    Point4,\n    Number1,\n    Number2,\n    Number3,\n    Number4,\n}\n\nimpl Test {\n    fn bucket(&amp;self) -&gt; u8 {\n        use Test::*;\n        match *self {\n            Point1 | Point2 | Point3 | Point4 =&gt; 0,\n            Number1 | Number2 | Number3 | Number4 =&gt; 1,\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 763, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1423372918, "creation_date": 1423363187, "last_edit_date": 1423372918, "question_id": 28389990, "link": "https://stackoverflow.com/questions/28389990/pattern-matching-the-tag-of-a-tagged-union-enum", "title": "Pattern matching the tag of a tagged union enum", "body": "<p>Is there a way to extract the tag of an enum to, e.g., use it as an index?</p>\n\n<p>I'd like to have a vector of vectors classified by enum type, i.e., if I had:</p>\n\n<pre><code>enum Test {\n    Point {\n        x: i32,\n        y: i32,\n    },\n    Point2 {\n        a: i32,\n        b: i32,\n    },\n    Number(i32),\n}\n</code></pre>\n\n<p>I may want a vector like this:</p>\n\n<pre><code>[[Test::Point{1, 2}, Test::Point{3, 4}], [Test::Number(1), Test::Number(2)]] \n</code></pre>\n\n<p>I'd like to dynamically add to this vector of vectors given new values. So if a function was passed in a <code>Test::Number</code>, it would go in the second array.</p>\n\n<p>Certainly in the worst case I could explicitly pattern match every possible union value, but for large enums that would get rather verbose and repetitive since all the cases would just end up as</p>\n\n<pre><code>match e {\n    Test::Point { _, _ } =&gt; v[0].push(e),\n    Test::Point2 { _, _ } =&gt; v[1].push(e),\n    Test::Number(_) =&gt; v[2].push(e),\n    // imagine a lot of these\n}\n</code></pre>\n\n<p>I've tried a lot of syntax permutations, but I haven't gotten anything that will compile. Is there a way to treat the enum struct tags like, well, an enumeration? It looks like there's a <code>FromPrimitive</code> derive, but it's unstable and doesn't work on struct enums.</p>\n\n<p>(I suppose an alternative question if you can't is if you can write a macro to autowrite that match).</p>\n"}, {"tags": ["arrays", "compiler-errors", "runtime-error", "rust", "language-design"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423358562, "post_id": 28389371, "comment_id": 45116522, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/24898579/why-does-rust-compiler-allow-index-out-of-bounds\">Why does Rust compiler allow index out of bounds?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1818, "user_id": 4491408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb320866c604eaa67685a61e799719f2?s=128&d=identicon&r=PG&f=1", "display_name": "Rob", "link": "https://stackoverflow.com/users/4491408/rob"}, "edited": false, "score": 2, "creation_date": 1423363546, "post_id": 28389701, "comment_id": 45117432, "body": "It is a reach to suggest run times bounds checking is &quot;very non-invasive&quot;.   The impact will be related to the complexity of algorithms that are working on the array.  For measures like run time, essentially adding a bounds check on each array access is a constant multiplier."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1818, "user_id": 4491408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb320866c604eaa67685a61e799719f2?s=128&d=identicon&r=PG&f=1", "display_name": "Rob", "link": "https://stackoverflow.com/users/4491408/rob"}, "edited": false, "score": 0, "creation_date": 1423392599, "post_id": 28389701, "comment_id": 45122859, "body": "@Rob A constant factor on the running time of some operation never changes algorithm complexity. It may very well have unacceptable impact in the (non-asymptotic) running time. But <i>as I said</i>, for any individual array access the programmer can opt out of bounds checking, and if they do, performance is equivalent to C. Bounds checking does not impact any part of the program that doesn&#39;t use it. And <i>that</i> is what I mean by non-invasive (I mention the performance impact elsewhere in the same sentence.)"}, {"owner": {"reputation": 1818, "user_id": 4491408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb320866c604eaa67685a61e799719f2?s=128&d=identicon&r=PG&f=1", "display_name": "Rob", "link": "https://stackoverflow.com/users/4491408/rob"}, "edited": false, "score": 1, "creation_date": 1423394174, "post_id": 28389701, "comment_id": 45123270, "body": "I didn&#39;t suggest there would be any change of algorithm complexity.  Being able to opt out of a runtime feature doesn&#39;t make it non-invasive."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1818, "user_id": 4491408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb320866c604eaa67685a61e799719f2?s=128&d=identicon&r=PG&f=1", "display_name": "Rob", "link": "https://stackoverflow.com/users/4491408/rob"}, "edited": false, "score": 0, "creation_date": 1423394481, "post_id": 28389701, "comment_id": 45123358, "body": "@Rob How is it invasive? Or conversely, what would be a non-invasive run-time feature?"}, {"owner": {"reputation": 1818, "user_id": 4491408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb320866c604eaa67685a61e799719f2?s=128&d=identicon&r=PG&f=1", "display_name": "Rob", "link": "https://stackoverflow.com/users/4491408/rob"}, "edited": false, "score": 0, "creation_date": 1423396837, "post_id": 28389701, "comment_id": 45123935, "body": "To answer your question in reverse, an invasive runtime feature is one that has a wide-spread impact that is potentially significant at run time in realistic scenarios unless explicitly disabled (or not employed).  That is, admittedly, an imperfect adaptation of english-language medical definitions (invasive procedures are wide-spread and/or have intense local effect).    A non-invasive feature is the opposite.    BTW:  I&#39;m not suggesting runtime bounds checking is good or bad, just that the term non-invasive seems to promise too much."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1818, "user_id": 4491408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb320866c604eaa67685a61e799719f2?s=128&d=identicon&r=PG&f=1", "display_name": "Rob", "link": "https://stackoverflow.com/users/4491408/rob"}, "edited": false, "score": 0, "creation_date": 1423397572, "post_id": 28389701, "comment_id": 45124131, "body": "@Rob Isn&#39;t any medical procedure which breaks the skin or enters a body cavity invasive, no matter how localized and small? Regardless, I take note of your definition, but don&#39;t think it&#39;s useful, since almost everything seems to be invasive under it. But fighting about terminology is rarely productive. We seem to agree about everything except the meaning of &quot;invasive&quot;, that&#39;s good enough for me."}, {"owner": {"reputation": 695, "user_id": 340297, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lUvl2.png?s=128&g=1", "display_name": "Catalin Hritcu", "link": "https://stackoverflow.com/users/340297/catalin-hritcu"}, "edited": false, "score": 0, "creation_date": 1498261739, "post_id": 28389701, "comment_id": 76445384, "body": "In the case of C the cost of software bounds checking is actually bad in many situations and average overhead is 67% on SPEC: <a href=\"https://www.cis.upenn.edu/acg/papers/pldi09_softbound.pdf\" rel=\"nofollow noreferrer\">cis.upenn.edu/acg/papers/pldi09_softbound.pdf</a> Is the situation much better for Rust? Does anyone have any data to back up your small overhead claim for Rust bounds checking?"}, {"owner": {"reputation": 279, "user_id": 2329452, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6cac26ed4016e8dde2eefe6085b2267f?s=128&d=identicon&r=PG", "display_name": "Chase May", "link": "https://stackoverflow.com/users/2329452/chase-may"}, "edited": false, "score": 0, "creation_date": 1539463055, "post_id": 28389701, "comment_id": 92514022, "body": "This answer is extremely dissatisfying. The type of an array in rust is <code>[type; length]</code>, is it not? So for arrays, which in Rust are by definition a fixed-length collection of values of the same type, why couldn&#39;t bounds be checked at compile time? It works for tuple fields."}, {"owner": {"reputation": 462, "user_id": 5452170, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/16bfc7d23c7bad37f5832e8e01cf849d?s=128&d=identicon&r=PG&f=1", "display_name": "Xiao-Feng Li", "link": "https://stackoverflow.com/users/5452170/xiao-feng-li"}, "reply_to_user": {"reputation": 279, "user_id": 2329452, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6cac26ed4016e8dde2eefe6085b2267f?s=128&d=identicon&r=PG", "display_name": "Chase May", "link": "https://stackoverflow.com/users/2329452/chase-may"}, "edited": false, "score": 0, "creation_date": 1563135213, "post_id": 28389701, "comment_id": 100590517, "body": "@ChaseMay  Rust knows array&#39;s length, but may not always know the index value at compile time, which can be a variable whose value is returned from a function call. Tuple is different in that, tuple&#39;s index is actually the field name (like the field name of a struct), which cannot be a variable."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 19, "last_activity_date": 1541342395, "last_edit_date": 1541342395, "creation_date": 1423360284, "answer_id": 28389701, "question_id": 28389371, "link": "https://stackoverflow.com/questions/28389371/why-does-rust-check-array-bounds-at-runtime-when-most-other-checks-occur-at-c/28389701#28389701", "title": "Why does Rust check array bounds at runtime, when (most) other checks occur at compile time?", "body": "<p>Because checking indices at compile time is not feasible in the general case. Reasoning about the possible values of arbitrary variables is somewhere between hard and impossible even for small programs. Nobody wants to have to:</p>\n\n<ol>\n<li>formally prove that the index can't be out of bounds, and</li>\n<li>encode that proof into the type system</li>\n</ol>\n\n<p>... for <em>every single</em> slice/<code>Vec</code>/etc. access, because that's what you'd have to do to perform bounds checks at compile time. You essentially need dependent typing.</p>\n\n<p>Aside from possibly making type checking undecidable (and getting a program to type check vastly harder), type inference becomes impossible in general (and far more restricted in the best case), types get much more complicated and wordy, and the complexity of the language increases significantly. That indices are in bounds can only be proven without significant additional programmer effort in very simple circumstances.</p>\n\n<p>Furthermore, there is little incentive to get rid of bounds checks. Lifetimes pull their weight by almost entirely eliminating the need for garbage collection --- which is a huge, invasive feature with unpredictable throughput, space and latency implications. Run-time bounds checking in the other hand is very non-invasive, has a small and well-known overhead, and can be selectively turned off in performance-critical sections even if the entire rest of the program uses it liberally.</p>\n\n<p>Note that the compiler <em>can</em> do some simple checks for out-of-bounds access of <em>arrays</em>:</p>\n\n<pre><code>let a = [1, 2];\nlet element = a[100];\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: index out of bounds: the len is 2 but the index is 100\n --&gt; src/main.rs:3:19\n  |\n3 |     let element = a[100];\n  |                   ^^^^^^\n  |\n  = note: #[deny(const_err)] on by default\n</code></pre>\n\n<p>However, this is limited and is easily avoided by making the index value not an \"obvious\" constant: </p>\n\n<pre><code>let a = [1, 2];\nlet idx = 100;\nlet element = a[idx];\n</code></pre>\n"}], "owner": {"reputation": 1257, "user_id": 1090265, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/fac64a9595102c8ad859ab022dbbca7c?s=128&d=identicon&r=PG", "display_name": "1ijk", "link": "https://stackoverflow.com/users/1090265/1ijk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4407, "favorite_count": 2, "accepted_answer_id": 28389701, "answer_count": 1, "score": 10, "last_activity_date": 1541342395, "creation_date": 1423356991, "question_id": 28389371, "link": "https://stackoverflow.com/questions/28389371/why-does-rust-check-array-bounds-at-runtime-when-most-other-checks-occur-at-c", "title": "Why does Rust check array bounds at runtime, when (most) other checks occur at compile time?", "body": "<p>Reading the <a href=\"http://doc.rust-lang.org/book/arrays-vectors-and-slices.html\" rel=\"noreferrer\">basic introduction</a>:</p>\n\n<blockquote>\n  <p>If you try to use a subscript that is not in the array, you will get an error: array access is bounds-checked at run-time.</p>\n</blockquote>\n\n<p>Why does Rust check array bounds at runtime, when it seems most other checks occur at compile time?</p>\n"}, {"tags": ["rust", "traits", "mutability"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1423349053, "post_id": 28388032, "comment_id": 45114205, "body": "As a workaround, you can define a private macro to generate both impls, or you can forward one variant&#39;s implementation to the other with casts: Implement for <code>*const T</code>, then define the impl for <code>*mut T</code> as <code>(self as *const T).method()</code> or something like that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423349446, "post_id": 28388032, "comment_id": 45114338, "body": "The casting is probably the solution I&#39;ve seen the most for this case; I think I&#39;ve even seen people keep <code>* const T</code> pointers and cast to <code>*mut T</code> only when explicitly needed. More generally, people want to be able to <i>return</i>  parameterized over mutability, as well as change the mutability of references <code>&amp;T</code> &lt;-&gt; <code>&amp;mut T</code>. I&#39;d be very wary about casting or transmuting in those cases."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1559074447, "last_edit_date": 1559074447, "creation_date": 1423348116, "answer_id": 28388207, "question_id": 28388032, "link": "https://stackoverflow.com/questions/28388032/how-to-implement-a-trait-for-any-mutability/28388207#28388207", "title": "How to implement a trait for any mutability?", "body": "<blockquote>\n  <p>Can mutability be a generic parameter in traits?</p>\n</blockquote>\n\n<p>No. ^_^</p>\n\n<p>Here's some detailed discussion on the matter (<a href=\"https://internals.rust-lang.org/t/parameterisation-over-mutability/235/3\" rel=\"nofollow noreferrer\">Internals</a>, <a href=\"https://www.reddit.com/r/rust/comments/2a721y/a_safe_way_to_reuse_the_same_code_for_immutable/\" rel=\"nofollow noreferrer\">Reddit</a>).</p>\n\n<p>I think in general people recognize that the current state is not ideal, but that it's not terribly constraining at the moment, either. There's concerns on exactly how it would be implemented and the soundness of various approaches. Some people wonder if Higher-Kinded Types (HKTs) would solve the problem, if and when they are added to Rust.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/41436525/155423\">How to avoid writing duplicate accessor functions for mutable and immutable references in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1348, "favorite_count": 1, "accepted_answer_id": 28388207, "answer_count": 1, "score": 7, "last_activity_date": 1559074447, "creation_date": 1423346960, "question_id": 28388032, "link": "https://stackoverflow.com/questions/28388032/how-to-implement-a-trait-for-any-mutability", "title": "How to implement a trait for any mutability?", "body": "<p>Can mutability be a generic parameter in traits? I'd like to implement a trait  for a mutable and an immutable variant of a type without having to copy&amp;paste the <code>impl</code> block.</p>\n\n<pre>\ntrait Foo&lt;T> {\u2026}\n\nimpl&lt;T> Foo for *const T {\u2026}\nimpl&lt;T> Foo for *mut T {\u2026same thing again\u2026}\n</pre>\n\n<p>Wishful pseudocode:</p>\n\n<pre>\ntrait Foo&lt;T> {\u2026}\n\nimpl&lt;T, Mutability> Foo for *Mutability T {\u2026}\n</pre>\n"}, {"tags": ["rust", "traits", "ord"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423349145, "post_id": 28388147, "comment_id": 45114243, "body": "Nice, I hadn&#39;t thought about defining <code>PartialOrd</code> in terms of <code>Ord</code>! I&#39;d always just gone the other way and unwrapped the value."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423353192, "post_id": 28388147, "comment_id": 45115397, "body": "That&#39;s close, but I also have to implement <code>PartialEq</code> when using PartialOrd. And for <code>Ord</code> also <code>Eq</code>. So: To implement <code>Ord</code>, implement <code>cmp</code>, then after that add the redundant implementations for <code>PartialEq</code>, <code>PartialOrd</code> and <code>Eq</code> which do nothing but delegate. That&#39;s sad, especially Rust is actually really elegant... Hope there still is a clean way to do it..."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1423354171, "post_id": 28388147, "comment_id": 45115635, "body": "@Kapichu Well, <code>Eq</code> requires no methods, and <code>PartialEq</code> only one. Yeah, it&#39;s three bits of boilerplate, but honestly I never implemented any of those traits manually, <code>derive(..)</code> always worked for me so far. So it doesn&#39;t seem like a huge problem, especially since any fix would probably require some complicated do-what-I-mean magic in the compiler or standard library, or nontrivial extensions of the trait system."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423390187, "post_id": 28388147, "comment_id": 45122225, "body": "Well, the source of the problem lies in Ord : PartialOrd + Eq . If I understand correctly, it means that when sth is Ord, it also is Eq and PartialOrd. In this case it should be possible that Ord provides methods of the inherited traits. Or the statement means that the traits behind the colon are required when sth is Ord. I couldnt find anything on Google about that."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423392263, "post_id": 28388147, "comment_id": 45122780, "body": "@Kapichu Yes, it means anything that&#39;s <code>Ord</code> also implements those other traits. As I already said in a comment on Shepmaster&#39;s answer, <code>Ord</code> providing default implementations for <code>PartialEq</code>, <code>Eq</code>, and <code>PartialOrd</code> would be sound, but there is no way to express this in the trait system as of now. The trait system would have to be changed to support that, to ease what so far appears as a relatively minor inconvenience. Plus, it should be backwards-compatible, so if it turns out to be useful, it can be added at any time in the future."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1423392816, "post_id": 28388147, "comment_id": 45122919, "body": "My (probably naive) thought is that when you write the trait <code>Ord : PartialOrd, Eq</code>, you just write default implementations of <code>eq()</code> and <code>lt()</code> etc. in the body of that trait. This should be possible because <code>Ord</code> &quot;contains&quot; <code>PartialOrd</code>. But true there would have to be changes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1423407469, "post_id": 28388147, "comment_id": 45126962, "body": "@Kapichu <b>because Ord &quot;contains&quot; PartialOrd</b> while true at the method level, they have different <i>semantic meanings</i>. This is what I&#39;m referring to with my references to &quot;total order&quot; and all the other fancy math words."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 9, "last_activity_date": 1528037187, "last_edit_date": 1528037187, "creation_date": 1423347645, "answer_id": 28388147, "question_id": 28387711, "link": "https://stackoverflow.com/questions/28387711/implementing-ord-for-a-type-is-awkward/28388147#28388147", "title": "Implementing Ord for a type is awkward?", "body": "<p>For starters, you can implement only <code>PartialOrd::partial_cmp</code>, as <code>lt</code>, <code>le</code>, <code>gt</code>, and <code>ge</code> have default implementations. Furthermore, if you implement <code>Ord</code>, you can simply implement <code>cmp</code> as usual and <code>partial_cmp</code> becomes just <code>Some(self.cmp(other))</code>. </p>\n\n<p>However, if you only want to delegate to some field's notion of equality and ordering, then it's far better and easier to derive:</p>\n\n<pre><code>#[derive(PartialOrd, Ord, PartialEq, Eq)]\nstruct MyType(isize);\n</code></pre>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 3, "creation_date": 1423348161, "post_id": 28388168, "comment_id": 45113896, "body": "Regarding &quot;<code>PartialOrd</code> for everything with <code>Ord</code>&quot;, OP doesn&#39;t seem to want to require <code>Ord</code> for types with <code>PartialOrd</code>, just having a <i>default</i> implementation for types implementing <code>Ord</code> to reduce redundancy. That is entirely reasonable and sound, it&#39;s just not possible in the trait system as of now (but probably doesn&#39;t bring enough benefit to be included in the future)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423348265, "post_id": 28388168, "comment_id": 45113926, "body": "@delnan yet another way of parsing that paragraph! English is fun!"}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "edited": false, "score": 0, "creation_date": 1564390129, "post_id": 28388168, "comment_id": 101000491, "body": "I think you don&#39;t answer very well the question &quot;Why can&#39;t <code>PartialOrd</code> be automatically provided by anything with <code>Ord</code>?&quot;. The question asks for automatic <code>PartialOrd</code> <b>only</b> when <code>Ord</code> is already assumed, which isn&#39;t always, if it isn&#39;t always so where does &quot;if we required everything to be <code>Ord</code>&quot; comes from? It sounds rather confuse."}, {"owner": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "edited": false, "score": 0, "creation_date": 1564390472, "post_id": 28388168, "comment_id": 101000674, "body": "Is there any case where it&#39;s valid having <code>partial_cmp</code> <i>not implemented</i> in terms of <code>cmp</code> when it&#39;s present? If not, then, having to write both manually with the same boilerplate seems like a limitation in the language."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9586, "user_id": 1000282, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG", "display_name": "pepper_chico", "link": "https://stackoverflow.com/users/1000282/pepper-chico"}, "edited": false, "score": 0, "creation_date": 1564408042, "post_id": 28388168, "comment_id": 101010121, "body": "@pepper_chico that would be the purpose of the RFC that is linked."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 13, "last_activity_date": 1590586476, "last_edit_date": 1590586476, "creation_date": 1423347799, "answer_id": 28388168, "question_id": 28387711, "link": "https://stackoverflow.com/questions/28387711/implementing-ord-for-a-type-is-awkward/28388168#28388168", "title": "Implementing Ord for a type is awkward?", "body": "<p>For your specific case I'd use <code>#[derive]</code>:</p>\n\n<pre><code>#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\nstruct MyType(isize);\n\nfn main() {\n    let a = MyType(5);\n    let b = MyType(6);\n\n    println!(\"{:?}\", a.cmp(&amp;b))\n}\n</code></pre>\n\n<p>If you need to special case your <code>Ord</code> implementation, you still have to write out that code, there's nothing that can save us there! You can still derive implementations for the other traits, if it makes sense to do so.</p>\n\n<p>The other part of your question is ambiguous, so I'll answer it both ways I read it:</p>\n\n<blockquote>\n  <p>Why can't <code>Ord</code> be automatically provided by anything with <code>PartialOrd</code>?</p>\n</blockquote>\n\n<p>Let's look at the docs for <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"nofollow noreferrer\"><code>PartialOrd</code></a> and <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"nofollow noreferrer\"><code>Ord</code></a>.</p>\n\n<p><code>PartialOrd</code> says: \"The comparison must satisfy <a href=\"https://en.wikipedia.org/wiki/Antisymmetric_relation\" rel=\"nofollow noreferrer\"><em>antisymmetry</em></a> and <a href=\"https://en.wikipedia.org/wiki/Transitive_relation\" rel=\"nofollow noreferrer\"><em>transitivity</em></a>\", while <code>Ord</code> says: \"types that form a <a href=\"https://en.wikipedia.org/wiki/Total_order\" rel=\"nofollow noreferrer\"><em>total order</em></a>\". These are math terms and I won't do as good a job as Wikipedia will at describing them.</p>\n\n<p>However, we can use floating point numbers as an example. Floats have a special value called <code>NaN</code>. Comparing against this value is tricky. For example, all of <code>1.0 &lt; NaN</code>, <code>1.0 == NaN</code> and <code>1.0 &gt; NaN</code> are false! These don't form a total order, but we can still compare one value against another. This is why <code>PartialOrd</code> exists - to allow us to compare types like this. incidentally, <code>PartialEq</code> exists for similar reasons.</p>\n\n<p>We <em>can't</em> define <code>Ord</code> in terms of <code>PartialOrd</code> because we don't have the appropriate guarantees about the underlying types. This is Rust's type system saving us from making a mistake!</p>\n\n<blockquote>\n  <p>Why can't <code>PartialOrd</code> be automatically provided by anything with <code>Ord</code>?</p>\n</blockquote>\n\n<p>The problem here is that more types are <code>PartialOrd</code> than they are <code>Ord</code>. If we required everything to be <code>Ord</code>, then we couldn't have <em>any</em> floating point comparisons, because they don't have a total order, or we'd have to give up on having a total order and losing out on the safety that it provides.</p>\n\n<p>However, there have been ideas to automatically do this for <code>derive</code>. Proposed <a href=\"https://github.com/rust-lang/rfcs/pull/2385\" rel=\"nofollow noreferrer\">RFC 2385</a> would allow the above code to be reduced to:</p>\n\n<pre><code>#[derive(Debug, Copy, Eq, Ord)]\nstruct MyType(isize);\n</code></pre>\n\n<blockquote>\n  <p>when I implement <code>PartialOrd</code> (<code>gt()</code>, <code>lt()</code>, <code>eq()</code>, <code>ge()</code>, <code>le()</code> ...)</p>\n</blockquote>\n\n<p>Note that <code>PartialOrd</code> <em>does</em> have default implementations, you only need to implement <code>partial_cmp</code>. The others are there for ease-of-use or possibly performance reasons.</p>\n"}, {"tags": [], "owner": {"reputation": 1563, "user_id": 1619003, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wKhdR.png?s=128&g=1", "display_name": "GraphicalDot", "link": "https://stackoverflow.com/users/1619003/graphicaldot"}, "is_accepted": false, "score": 1, "last_activity_date": 1590643257, "last_edit_date": 1590643257, "creation_date": 1590584654, "answer_id": 62043819, "question_id": 28387711, "link": "https://stackoverflow.com/questions/28387711/implementing-ord-for-a-type-is-awkward/62043819#62043819", "title": "Implementing Ord for a type is awkward?", "body": "<p>Please consider this as an addendum to the original answers, which are suited for your specific case. This answer deals with the second part of your question.</p>\n\n<p>Consider this struct:</p>\n\n<pre><code>struct Person {\n    id: u32,\n    name: String,\n    height: u32,\n}\n</code></pre>\n\n<h2><strong>Equality: the <code>PartialEq</code> and <code>Eq</code> traits</strong></h2>\n\n<p><strong>PartialEq Trait</strong>, From the docs</p>\n\n<pre><code>Trait for equality comparisons which are partial equivalence \nrelations. This trait allows for partial equality, for types that do not\nhave a full equivalence relation. For example, in floating point numbers\nNaN != NaN, so floating point types implement PartialEq but not Eq.\n\nFormally, the equality must be (for all a, b and c):\n\nsymmetric: a == b implies b == a; and\ntransitive: a == b and b == c implies a == c.\n</code></pre>\n\n<p>So if you want to express what it means for values of your types to be equal, you must implement the <code>PartialEq</code> trait. Implementing it allows us to write <code>x == y</code> and <code>x != y</code> for our types.</p>\n\n<pre><code>impl PartialEq for Person {\n    fn eq(&amp;self, other: &amp;Person) -&gt; bool {\n        self.height == other.height\n    }\n}\n</code></pre>\n\n<p>Note that we are deciding the equality of <code>Person</code> struct just on the basis of the heights. You could also have implemented this <code>eq</code> method if you want to compare every struct field:</p>\n\n<pre><code>fn eq(&amp;self, other: &amp;Person) -&gt; bool {\n     self.id == other.id &amp;&amp; self.name == other.name &amp;&amp; self.height == other.height\n}\n</code></pre>\n\n<p>But it would be easier to simply add <code>#[derive(PartialEq)]</code> if that's the behavior you want.</p>\n\n<p><strong>Eq Trait</strong>, From the Docs</p>\n\n<pre><code>Trait for equality comparisons which are equivalence relations.\n\nThis means, that in addition to a == b and a != b being strict inverses, \nthe equality must be (for all a, b and c):\n\nreflexive: a == a;\nsymmetric: a == b implies b == a; and\ntransitive: a == b and b == c implies a == c.\n\nThis property cannot be checked by the compiler, and therefore Eq implies\nPartialEq, and has no extra methods.\n\nDerivable\nThis trait can be used with #[derive]. When derived, because Eq has no extra methods, \nit is only informing the compiler that this is an equivalence relation rather than a \npartial equivalence relation. Note that the derive strategy requires all \nfields are Eq, which isn't always desired.\n</code></pre>\n\n<p>PartialEq is for relations which are not necessarily reflexive (i.e. there can be such x that x != x) and that Eq is a marker trait which says that relation is also reflexive (and now it is a proper equivalence relation).</p>\n\n<p>You can also implement the <code>Eq</code> trait manually with an empty impl block</p>\n\n<pre><code>impl Eq for Person {}\n</code></pre>\n\n<p>But, again, it\u2019s easier to add <code>Eq</code> to your <code>#[derive(Eq)]</code> list.</p>\n\n<h2><strong>Ordering: the <code>PartialOrd</code> and <code>Ord</code> traits</strong></h2>\n\n<p>The relative ordering of values is calculated using the operators <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code> and <code>&gt;</code>. To implement these for your own types, you must implement the <code>PartialOrd</code> trait.</p>\n\n<p>Before you can implement <code>PartialOrd</code>, you must implement <code>PartialEq</code>.</p>\n\n<pre><code>impl PartialOrd for Person {\n    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {\n        Some(self.cmp(other))    \n    }\n}\n</code></pre>\n\n<p><code>Ordering</code> is an enum with these values:</p>\n\n<pre><code>pub enum Ordering {\n    Less,\n    Equal,\n    Greater,\n}\n</code></pre>\n\n<p><code>partial_cmp</code> returns an <code>Option</code> and not an <code>Ordering</code> because there are types of which values cannot always be compared, such as floating-point numbers. <code>NaN</code>s are not representable numbers; expressions such as <code>3.0 &lt; NaN</code> don\u2019t make any sense. In those cases, <code>partial_cmp</code> returns <code>None</code>. Floating-point values are the only case in the standard library where this happens. More can be found <a href=\"https://github.com/rust-lang/rust/issues/1083\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>The fact that <code>partial_cmp</code> returns an <code>Option&lt;Ordering&gt;</code> has a consequence: it might not be possible to place two values, x and y, into a definite order. In practice, this means that implementing <code>PartialOrd</code> is not sufficient to make your values sortable. You also need to implement the <code>Ord</code> trait.</p>\n\n<p>Before you can implement <code>Ord</code>, you must first implement <code>PartialOrd</code>, <code>Eq</code> and <code>PartialEq</code>.</p>\n\n<p>For our <code>Person</code> struct, again we can delegate down to one of our member variables:</p>\n\n<pre><code>impl Ord for Person {\n    fn cmp(&amp;self, other: &amp;Person) -&gt; Ordering {\n        self.height.cmp(&amp;other.height)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3160, "favorite_count": 1, "answer_count": 3, "score": 13, "last_activity_date": 1590643257, "creation_date": 1423345235, "last_edit_date": 1528036554, "question_id": 28387711, "link": "https://stackoverflow.com/questions/28387711/implementing-ord-for-a-type-is-awkward", "title": "Implementing Ord for a type is awkward?", "body": "<p>I have a newtype and I want to implement <code>Ord</code>:</p>\n\n<pre><code>use std::cmp::{Ord, Ordering};\n\nstruct MyType(isize);\n\nimpl Ord for MyType {\n    fn cmp(&amp;self, &amp;other: Self) -&gt; Ordering {\n        let MyType(ref lhs) = *self;\n        let MyType(ref rhs) = *other;\n        lhs.cmp(rhs)\n    }\n}\n</code></pre>\n\n<p>When I try to compare two variables of my types, I get errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `MyType: std::cmp::PartialOrd` is not satisfied\n --&gt; src/main.rs:5:6\n  |\n5 | impl Ord for MyType {\n  |      ^^^ can't compare `MyType` with `MyType`\n  |\n  = help: the trait `std::cmp::PartialOrd` is not implemented for `MyType`\n\nerror[E0277]: the trait bound `MyType: std::cmp::Eq` is not satisfied\n --&gt; src/main.rs:5:6\n  |\n5 | impl Ord for MyType {\n  |      ^^^ the trait `std::cmp::Eq` is not implemented for `MyType`\n</code></pre>\n\n<p>When I implement <code>PartialEq</code>, <code>Eq</code> and <code>PartialOrd</code> (<code>gt()</code>, <code>lt()</code>, <code>eq()</code>, <code>ge()</code>, <code>le()</code>, etc.), everything works fine, but if I provided <code>cmp</code>, we can infer functions like <code>lt()</code> and <code>eq()</code>! This is redundant! I don't like this!</p>\n\n<p>When looking in <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noreferrer\">the docs</a>, I see this in the definition of <code>Ord</code>:</p>\n\n<pre><code>pub trait Ord: Eq + PartialOrd&lt;Self&gt; \n</code></pre>\n\n<p>This looks like the trait inherits from <code>Eq</code> and <code>PartialOrd</code>. Why can't the trait provide default implementations for the required methods from the inherited traits using the <code>cmp</code> function? I don't know how inheritance of traits works and searching turned up nothing useful, but I think this is something that should be possible. </p>\n\n<p>How is this done in Rust? I hope not this way...</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 1, "creation_date": 1455732864, "post_id": 28387421, "comment_id": 58624778, "body": "<a href=\"https://huonw.github.io/blog/2015/02/some-notes-on-send-and-sync/\" rel=\"nofollow noreferrer\">Huon Wilson&#39;s article on <code>Send</code> and <code>Sync</code></a> mention&#39;s a hypothetical garbage-collected pointer, <code>Gc&lt;T&gt;</code>, as something that might be <code>Sync</code> but not <code>Send</code>, though he doesn&#39;t go into detail."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 1, "creation_date": 1457107858, "post_id": 28387421, "comment_id": 59270986, "body": "@JackO&#39;Connor: Here you go ;)"}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1457125904, "post_id": 28387421, "comment_id": 59281604, "body": "@MatthieuM Thanks! :)"}], "answers": [{"comments": [{"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 9, "creation_date": 1423500257, "post_id": 28387752, "comment_id": 45162876, "body": "This isn&#39;t correct, AtomicIsize etc. do in fact implement Send. It isn&#39;t listed on the doc page because the implementation is autoderived, unlike Sync which must be explicitly derived for them. However, a simple <code>let v: &amp;Send = &amp;AtomicIsize::new(5);</code> shows that they implement Send."}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1457102213, "post_id": 28387752, "comment_id": 59266923, "body": "I&#39;ve edited out the incorrect part that @wingedsubmariner pointed out."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1509617778, "post_id": 28387752, "comment_id": 81093414, "body": "You can directly check whether types implement the traits (<a href=\"https://play.rust-lang.org/?gist=c9f429c722da91aaf4a450eedaf16e21&amp;version=stable\" rel=\"nofollow noreferrer\">play example</a>)"}], "tags": [], "owner": {"reputation": 129, "user_id": 1576468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/822d1e5acfa208bfebe3078d6e8c292c?s=128&d=identicon&r=PG", "display_name": "user18700", "link": "https://stackoverflow.com/users/1576468/user18700"}, "is_accepted": false, "score": 11, "last_activity_date": 1457102181, "last_edit_date": 1457102181, "creation_date": 1423345469, "answer_id": 28387752, "question_id": 28387421, "link": "https://stackoverflow.com/questions/28387421/what-are-examples-of-types-that-implement-only-one-of-send-and-sync/28387752#28387752", "title": "What are examples of types that implement only one of Send and Sync?", "body": "<p><a href=\"http://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"noreferrer\"><code>Cell</code></a> and <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"noreferrer\"><code>RefCell</code></a> implement <code>Send</code> but not <code>Sync</code> because they can be safely sent between threads but not shared between them.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1457109043, "post_id": 35800707, "comment_id": 59271817, "body": "<i>let&#39;s resuscitate conditions!</i> \u2014 you are a crazy, crazy person. I love it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 19, "last_activity_date": 1457107808, "creation_date": 1457107808, "answer_id": 35800707, "question_id": 28387421, "link": "https://stackoverflow.com/questions/28387421/what-are-examples-of-types-that-implement-only-one-of-send-and-sync/35800707#35800707", "title": "What are examples of types that implement only one of Send and Sync?", "body": "<p>First of all, it is important to realize that most structs (or enums) are <code>Send</code>:</p>\n\n<ul>\n<li>any struct that does not contain any reference can be <code>Send + 'static</code></li>\n<li>any struct that contain references with a lower-bound lifetime of <code>'a</code> can be <code>Send + 'a</code></li>\n</ul>\n\n<p>As a result, you would generally expect any <code>Sync</code> <code>struct</code> to be <code>Send</code> too, because <code>Send</code> is such an easy bar to reach (compared to the much harder bar of being <code>Sync</code> which requires safe concurrent modification from multiple threads).</p>\n\n<hr>\n\n<p>However, nothing prevents the creator of a type to specifically mark it as not <code>Send</code>. For example, let's resuscitate conditions!</p>\n\n<p>The idea of conditions, in Lisp, is that you setup a handler for a given condition (say: <code>FileNotFound</code>) and then when deep in the stack this condition is met then your handler is called.</p>\n\n<p>How would you implement this in Rust?</p>\n\n<p>Well, to preserve threads independence, you would use thread-local storage for the condition handlers (see <code>std::thread_local!</code>). Each condition would be a <em>stack</em> of condition handlers, with either only the top one invoked or an iterative process starting from the top one but reaching down until one succeeds.</p>\n\n<p>But then, how would you set them?</p>\n\n<p>Personally, I'd use RAII! I would bind the condition handler in the thread-local stack and register it in the frame (for example, using an intrusive doubly-linked list as the stack).</p>\n\n<p>This way, when I am done, the condition handler automatically un-registers itself.</p>\n\n<p>Of course, the system has to account for users doing unexpected things (like storing the condition handlers in the heap and not dropping them in the order they were created), and this is why we use a doubly-linked list, so that the handler can un-register itself from the middle of the stack if necessary.</p>\n\n<p>So we have a:</p>\n\n<pre><code>struct ConditionHandler&lt;T&gt; {\n    handler: T,\n    prev: Option&lt;*mut ConditionHandler&lt;T&gt;&gt;,\n    next: Option&lt;*mut ConditionHandler&lt;T&gt;&gt;,\n}\n</code></pre>\n\n<p>and the \"real\" handler is passed by the user as <code>T</code>.</p>\n\n<hr>\n\n<p>Would this handler be <code>Sync</code>?</p>\n\n<p>Possibly, depends how you create it but there is no reason you could not create a handler so that a reference to it could not be shared between multiple threads.</p>\n\n<p><em>Note: those threads could not access its <code>prev</code>/<code>next</code> data members, which are private, and need not be <code>Sync</code>.</em></p>\n\n<p>Would this handler be <code>Send</code>?</p>\n\n<p>Unless specific care is taken, no.</p>\n\n<p>The <code>prev</code> and <code>next</code> fields are not protected against concurrent accesses, and even worse if the handler were to be dropped while another thread had obtained a reference to it (for example, another handler trying to un-register itself) then this now dangling reference would cause Undefined Behavior.</p>\n\n<p><em>Note: the latter issue means that just switching <code>Option&lt;*mut Handler&lt;T&gt;&gt;</code> for <code>AtomicPtr&lt;ConditionHandler&lt;T&gt;&gt;</code> is not sufficient; see <a href=\"http://blog.memsql.com/common-pitfalls-in-writing-lock-free-algorithms/\" rel=\"noreferrer\">Common Pitfalls in Writing Lock-Free Algorithms</a> for more details.</em></p>\n\n<hr>\n\n<p>And there you have it: a <code>ConditionHandler&lt;T&gt;</code> is <code>Sync</code> if <code>T</code> is <code>Sync</code> but will never be <code>Send</code> (as is).</p>\n\n<p>For completeness, many types implement <code>Send</code> but not <code>Sync</code> (most <code>Send</code> types, actually): <code>Option</code> or <code>Vec</code> for example.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user625070"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2081, "favorite_count": 5, "answer_count": 2, "score": 29, "last_activity_date": 1457107808, "creation_date": 1423343376, "last_edit_date": 1455726966, "question_id": 28387421, "link": "https://stackoverflow.com/questions/28387421/what-are-examples-of-types-that-implement-only-one-of-send-and-sync", "title": "What are examples of types that implement only one of Send and Sync?", "body": "<p>Just to get better understanding of the <code>Send</code> and <code>Sync</code> traits, are there examples of types that either:</p>\n\n<ul>\n<li>Implement <code>Send</code> and do not implement <code>Sync</code>.</li>\n<li>Implement <code>Sync</code> and do not implement <code>Send</code>.</li>\n</ul>\n"}, {"tags": ["vector", "rust"], "answers": [{"comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 1, "creation_date": 1423337749, "post_id": 28386459, "comment_id": 45110605, "body": "Sorry for my English, but I&#39;ve overdosed caffeine and it is hard to concentrate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423338061, "post_id": 28386459, "comment_id": 45110714, "body": "If the <code>.</code> operator only uses <code>Deref</code>, then why would <code>b.push(Vec::new())</code> work? That requires a mutable receiver, no?"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423338711, "post_id": 28386459, "comment_id": 45110916, "body": "I have no idea and it is too late for me to think. But <code>get_mut</code> will propably get deprecated in favour of <code>IndexMut</code>. Instead you can use <code>b[0].push(1)</code> and it will work fine. I could investigate it for you tomorrow."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1423365278, "post_id": 28386459, "comment_id": 45117730, "body": "This looks like a bug.  It&#39;s like the compiler is failing to infer that it needs to use <code>deref_mut</code> <i>twice</i> to reach <code>get_mut</code>.  The error is the same if you try to do <code>b.deref().deref_mut()</code>."}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 0, "last_activity_date": 1525876292, "last_edit_date": 1525876292, "creation_date": 1423337697, "answer_id": 28386459, "question_id": 28386120, "link": "https://stackoverflow.com/questions/28386120/why-can-i-not-borrow-a-boxed-vector-content-as-mutable/28386459#28386459", "title": "Why can I not borrow a boxed vector content as mutable?", "body": "<p>You need to unbox your value before accessing it as a mutable:</p>\n\n<pre><code>fn main() {\n    let mut b = Box::new(Vec::new());\n    b.push(Vec::new());\n    (*b).get_mut(0).unwrap().push(1);\n}\n</code></pre>\n\n<p>This is because the  <code>.</code> operator uses the <code>Deref</code> trait instead of <code>DerefMut</code>.</p>\n\n<p>The best way to achieve this would be:</p>\n\n<pre><code>fn main() {\n    let mut b = Box::new(Vec::new());\n    b.push(Vec::new());\n    b[0].push(1);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1525814736, "creation_date": 1525814736, "answer_id": 50242482, "question_id": 28386120, "link": "https://stackoverflow.com/questions/28386120/why-can-i-not-borrow-a-boxed-vector-content-as-mutable/50242482#50242482", "title": "Why can I not borrow a boxed vector content as mutable?", "body": "<p>In at least Rust 1.25.0, all three original examples work. This was a bug in some previous version of Rust.</p>\n"}], "owner": {"reputation": 305, "user_id": 2926014, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/37dba24f5f00c99ffb7376f66d73a86d?s=128&d=identicon&r=PG&f=1", "display_name": "PL_kolek", "link": "https://stackoverflow.com/users/2926014/pl-kolek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1630, "favorite_count": 0, "accepted_answer_id": 50242482, "answer_count": 2, "score": 5, "last_activity_date": 1525876292, "creation_date": 1423335693, "last_edit_date": 1525814611, "question_id": 28386120, "link": "https://stackoverflow.com/questions/28386120/why-can-i-not-borrow-a-boxed-vector-content-as-mutable", "title": "Why can I not borrow a boxed vector content as mutable?", "body": "<p>Why this doesn't compile:</p>\n\n<pre><code>fn main() {\n    let mut b = Box::new(Vec::new());\n    b.push(Vec::new());\n    b.get_mut(0).unwrap().push(1);\n}\n</code></pre>\n\n<p>While this does:</p>\n\n<pre><code>fn main() {\n    let a = Box::new(Vec::new());\n    let mut b = *a;\n    b.push(Vec::new());\n    b.get_mut(0).unwrap().push(1);\n}\n</code></pre>\n\n<p>And also this does:</p>\n\n<pre><code>fn main() {\n    let mut b = Vec::new();\n    b.push(Vec::new());\n    b.get_mut(0).unwrap().push(Vec::new());\n    b.get_mut(0).unwrap().get_mut(0).unwrap().push(1)\n}\n</code></pre>\n\n<p>The first and third one for me are the conceptually the same - <code>Box</code> of a <code>Vec</code>tor of <code>Vec</code>tors of integers and a <code>Vec</code>tor of <code>Vec</code>tor of <code>Vec</code>tors of integers, but the last one results in each vector being mutable, whereas the first one makes the inner vector immutable.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423407738, "post_id": 28385339, "comment_id": 45127042, "body": "It&#39;s very difficult to give good answers when the question changes with each new answer!"}], "answers": [{"comments": [{"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1423370456, "post_id": 28390376, "comment_id": 45118613, "body": "Unfortunately, computing the value first isn&#39;t possible. I&#39;ll edit my post to state that clearly."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1423409325, "post_id": 28390376, "comment_id": 45127583, "body": "Can you talk more about using unsafe? I didn&#39;t realize it could be used to bypass the borrow checker?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 1, "creation_date": 1423410797, "post_id": 28390376, "comment_id": 45128027, "body": "Not in SO comments.  I could tell you just about enough to let you completely hose your program, but I feel that&#39;s a bad idea.  If you&#39;re not 100% certain on how memory safety is enforced in Rust, you probably shouldn&#39;t be touching <code>unsafe</code>."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1423413086, "post_id": 28390376, "comment_id": 45128739, "body": "Ok, but Rust is billed as a &quot;systems programming language.&quot; This seems like a pretty common need in systems programming. I find it hard to believe Rust can&#39;t do it without a bunch of unnecessary runtime safety checks."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 1, "creation_date": 1423416479, "post_id": 28390376, "comment_id": 45129826, "body": "All the compiler knows is that you&#39;ve got two references pointing into the same region, and one of them is mutable.  Humans are <i>notoriously</i> bad at getting this stuff right, and it can&#39;t prove that you aren&#39;t going to use the mutable one to invalidate the immutable one, so it stops you.  <code>unsafe</code> is how you override the compiler, but I don&#39;t want to seriously suggest that without going into detail on what invariants you need to then manually assert, and this isn&#39;t the place for that.  If you don&#39;t know what using <code>unsafe</code> entails, you shouldn&#39;t be using it.  Runtime checks = price of safety."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1423422776, "post_id": 28390376, "comment_id": 45132113, "body": "Fair point. I agree. Do you know where I can read more about <code>unsafe</code>&#39;s use in overriding the borrow checker? I&#39;ve been Googling, but I haven&#39;t found a single reference on this topic. Or is it an undocumented feature?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1423451389, "post_id": 28390376, "comment_id": 45139640, "body": "The only one I can really find is in the <a href=\"http://doc.rust-lang.org/book/unsafe.html#references\" rel=\"nofollow noreferrer\">Unsafe section of the Rust Book</a>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 3, "last_activity_date": 1423371735, "last_edit_date": 1423371735, "creation_date": 1423367648, "answer_id": 28390376, "question_id": 28385339, "link": "https://stackoverflow.com/questions/28385339/mutable-self-while-reading-from-owner-object/28390376#28390376", "title": "Mutable self while reading from owner object", "body": "<p>You'd want to compute the argument <em>first</em> in a form that doesn't alias <code>self</code>, then pass that in.  As it stands, it seems a little strange that an animal decides how much food it's going to eat by looking at every other animal... regardless, you could add a method <code>Animal::decide_feed_amount(&amp;self, world: &amp;World) -&gt; f32</code>.  You can call that safely (<code>&amp;self</code> and <code>&amp;World</code> are both immutable, so that's OK), store the result in a variable, then pass that to <code>Animal::feed</code>.</p>\n\n<p><strong>Edit to address your Edit</strong>: well, you're kinda screwed, then.  Rust's borrow checker is not sophisticated enough to prove that the mutations you make to the <code>Animal</code> cannot possibly interfere with any possible immutable access to the containing <code>World</code>.  Some things you can try:</p>\n\n<ul>\n<li><p>Do a functional-style update.  Make a copy of the <code>Animal</code> you want to update so that it has its own lifetime, update it, then overwrite the original.  If you duplicate the whole array up front, this gives you what is <em>effectively</em> an atomic update of the whole array.</p>\n\n<p>As someone who worked on a simulator for like half a decade, I <em>wish</em> I'd done something like that instead of mutating updates.  <em>sigh</em></p></li>\n<li><p>Change to <code>Vec&lt;Option&lt;Animal&gt;&gt;</code> which will allow you to move (not copy) an <code>Animal</code> out of the array, mutate it, then put it back (see <code>std::mem::replace</code>).  Downside is that now everything has to check to see if there's an animal in each position of the array.</p></li>\n<li><p>Put the <code>Animal</code>s inside <code>Cell</code>s or <code>RefCell</code>s, which will allow you to mutate them from immutable references.  It does this by performing dynamic borrow checking which is infinitely slower (no checks vs. some checks), but is still \"safe\".</p></li>\n<li><p>Absolute last resort: <code>unsafe</code>.  But really, if you do that, you're throwing all your memory safety guarantees out the window, so I wouldn't recommend it.</p></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423439614, "post_id": 28400738, "comment_id": 45137150, "body": "If you think that games provide an accurate metaphor for your need, perhaps you should check out <a href=\"http://www.reddit.com/r/rust_gamedev/\" rel=\"nofollow noreferrer\">rust-gamedev</a> or the <a href=\"http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust-gamedev\" rel=\"nofollow noreferrer\">IRC channel</a> of the same."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423494015, "post_id": 28400738, "comment_id": 45158687, "body": "How so? Do you mean you don&#39;t think the pattern I&#39;ve identified above is common in games? If so, I&#39;m open to criticism of the architecture I&#39;ve chosen. Just bear in mind that certain choices, such as in-place updating, are dictated by performance concerns rather than my own personal tastes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423495096, "post_id": 28400738, "comment_id": 45159385, "body": "Oh, I can&#39;t agree or disagree, I don&#39;t have enough experience in the domain to make that call. I&#39;m just trying to point out some more resources, specifically people doing games in Rust, that might be able to help translate your pattern to how it could apply in Rust."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423506074, "post_id": 28400738, "comment_id": 45166322, "body": "Gotcha. Thanks! /r/rust-gamedev is great. It just so happens that today, a project popped up on that sub which had this exact type of problem. Indeed, the author of that project went with <code>RefCell</code>. (And also <code>Rc</code>, in some cases.)"}], "tags": [], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "is_accepted": true, "score": 2, "last_activity_date": 1423439124, "creation_date": 1423439124, "answer_id": 28400738, "question_id": 28385339, "link": "https://stackoverflow.com/questions/28385339/mutable-self-while-reading-from-owner-object/28400738#28400738", "title": "Mutable self while reading from owner object", "body": "<p>In summary: Rust is <em>doing the right thing</em> by refusing to compile what I wrote. There's no way to know at compile time that I won't invalidate the data I'm using. If I get a mutable pointer to one animal, the compiler can't know that my read-only access to the vector isn't invalidated by my mutations to that particular animal.</p>\n\n<p>Because this can't be determined at compile time, we need some kind of runtime check, or we need to use unsafe operations to bypass the safety checks altogether.</p>\n\n<p><code>RefCell</code> is the way to go if we want safety at the cost of runtime checks. <code>UnsafeCell</code> is at least one option to solve this without the overhead, at the cost of safety of course.</p>\n\n<p>I've concluded that <code>RefCell</code> is preferable in most cases. The overhead should be minimal. That's especially true if we're doing anything even moderately complex with the values once we obtain them: The cost of the useful operations will dwarf the cost of <code>RefCell</code>'s checks. While <code>UnsafeCell</code> might be a little faster, it invites us to make mistakes.</p>\n\n<p>Below is an example program solving this class of problem with <code>RefCell</code>. Instead of animals and feeding, I chose players, walls, and collision detection. Different scenery, same idea. This solution is generalizable to a lot of very common problems in game programming. For example:</p>\n\n<ul>\n<li><p>A map composed of 2D tiles, where the render state of each tile depends on its neighbors. E.g. grass next to water needs to render a coast texture. The render state of a given tile updates when that tile or any of its neighbors changes.</p></li>\n<li><p>An AI declares war against the player if any of the AI's allies are at war with the player.</p></li>\n<li><p>A chunk of terrain is calculating its vertex normals, and it needs to know the vertex positions of the neighboring chunks.</p></li>\n</ul>\n\n<p>Anyway, here's my example code:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Vector2 {x: f32, y: f32}\n\nimpl Vector2 {\n    fn add(&amp;self, other: &amp;Vector2) -&gt; Vector2 {\n        Vector2 {x: self.x + other.x, y: self.y + other.y}\n    }\n}\n\nstruct World {\n    players: Vec&lt;RefCell&lt;Player&gt;&gt;,\n    walls: Vec&lt;Wall&gt;\n}\n\nstruct Wall;\n\nimpl Wall {\n    fn intersects_line_segment(&amp;self, start: &amp;Vector2, stop: &amp;Vector2) -&gt; bool {\n        // Pretend this actually does a computation.\n        false\n    }\n}\n\nstruct Player {position: Vector2, velocity: Vector2}\n\nimpl Player {\n    fn collides_with_anything(&amp;self, world: &amp;World, start: &amp;Vector2, stop: &amp;Vector2) -&gt; bool {\n        for wall in world.walls.iter() {\n            if wall.intersects_line_segment(start, stop) {\n                return true;\n            }\n        }\n\n        for cell in world.players.iter() {\n            match cell.try_borrow_mut() {\n                Some(player) =&gt; {\n                  if player.intersects_line_segment(start, stop) {\n                      return true;\n                  }\n                },\n                // We don't want to collision detect against this player. Nor can we,\n                // because we've already mutably borrowed this player. So its RefCell\n                // will return None.\n                None =&gt; {}\n            }\n        }\n\n        false\n    }\n\n    fn intersects_line_segment(&amp;self, start: &amp;Vector2, stop: &amp;Vector2) -&gt; bool {\n        // Pretend this actually does a computation.\n        false\n    }\n\n    fn update_position(&amp;mut self, world: &amp;World) {\n        let new_position = self.position.add(&amp;self.velocity);\n        if !Player::collides_with_anything(self, world, &amp;self.position, &amp;new_position) {\n            self.position = new_position;\n        }\n    }\n}\n\nfn main() {\n    let world = World {\n        players: vec!(\n            RefCell::new(\n              Player {\n                  position: Vector2 { x: 0.0, y: 0.0},\n                  velocity: Vector2 { x: 1.0, y: 1.0}\n              }\n            ),\n            RefCell::new(\n              Player {\n                  position: Vector2 { x: 1.1, y: 1.0},\n                  velocity: Vector2 { x: 0.0, y: 0.0}\n              }\n            )\n        ),\n\n        walls: vec!(Wall, Wall)\n    };\n\n    for cell in world.players.iter() {\n        let player = &amp;mut cell.borrow_mut();\n        player.update_position(&amp;world);\n    }\n}\n</code></pre>\n\n<p>The above could be altered to use <code>UnsafeCell</code> with very few changes. But again,I think <code>RefCell</code> is preferable in this case and in most others.</p>\n\n<p>Thanks to @DK for putting me on the right track to this solution.</p>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2958, "favorite_count": 0, "accepted_answer_id": 28400738, "answer_count": 2, "score": 3, "last_activity_date": 1507385039, "creation_date": 1423331086, "last_edit_date": 1507385039, "question_id": 28385339, "link": "https://stackoverflow.com/questions/28385339/mutable-self-while-reading-from-owner-object", "title": "Mutable self while reading from owner object", "body": "<p>I have one object that owns another. The owned object has a mutating method that depends on non-mutating methods of its owner. The architecture (simplified as much as possible) looks like this:</p>\n\n<pre><code>struct World {\n    animals: Vec&lt;Animal&gt;,\n}\n\nimpl World {\n    fn feed_all(&amp;mut self) {\n        for i in 0..self.animals.len() {\n            self.animals[i].feed(self);\n        }\n    }\n}\n\nstruct Animal {\n    food: f32,\n}\n\nimpl Animal {\n    fn inc_food(&amp;mut self) {\n        self.food += 1.0;\n    }\n\n    fn feed(&amp;mut self, world: &amp;World) {\n        // Imagine this is a much more complex calculation, involving many\n        // queries to world.animals, several loops, and a bunch of if\n        // statements. In other words, something so complex it can't just\n        // be moved outside feed() and pass its result in as a pre-computed value.\n        for other_animal in world.animals.iter() {\n            self.food += 10.0 / (other_animal.food + self.food);\n        }\n    }\n}\n\nfn main() {\n    let mut world = World {\n        animals: Vec::with_capacity(1),\n    };\n\n    world.animals.push(Animal { food: 0.0 });\n\n    world.feed_all();\n}\n</code></pre>\n\n<p>The above does not compile. The compiler says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*self` as immutable because `self.animals` is also borrowed as mutable\n --&gt; src/main.rs:8:34\n  |\n8 |             self.animals[i].feed(self);\n  |             ------------         ^^^^- mutable borrow ends here\n  |             |                    |\n  |             |                    immutable borrow occurs here\n  |             mutable borrow occurs here\n</code></pre>\n\n<p>I understand why that error occurs, but what is the idiomatic Rust way to do this?</p>\n\n<p>Just to be clear, the example code is not real. It's meant to present the core problem as simply as possible. The real application I'm writing is much more complex and has nothing to do with animals and feeding.</p>\n\n<p>Assume it is not practical to pre-compute the food value before the call to <code>feed()</code>. In the real app, the method that's analogous to <code>feed()</code> makes many calls to the <code>World</code> object and does a lot of complex logic with the results.</p>\n"}, {"tags": ["arrays", "iteration", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1423282463, "post_id": 28378447, "comment_id": 45096840, "body": "I need that vector again. &quot;dereference p when using it.&quot; How do I do that?    &amp;p doesn&#39;t work"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1423285048, "post_id": 28378447, "comment_id": 45097276, "body": "<code>&amp;p</code> takes a reference to <code>p</code>, <code>*p</code> dereferences a reference <code>p</code>.  You should probably read through the Rust Book; you won&#39;t get too far without understanding references in Rust: they&#39;re everywhere."}, {"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1423285402, "post_id": 28378447, "comment_id": 45097330, "body": "I know what reference/derefence is, but coming from managed code (Java) I have a hard time to decide when and where to use it :(."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1423286395, "post_id": 28378447, "comment_id": 45097494, "body": "Which is why I recommended the book; it&#39;s not about knowing what they are in the abstract, you need to understand how they&#39;re used."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1423282260, "creation_date": 1423282260, "answer_id": 28378447, "question_id": 28378407, "link": "https://stackoverflow.com/questions/28378407/how-to-iterate-over-an-array-of-integers/28378447#28378447", "title": "How to iterate over an array of integers?", "body": "<p>Quoth the error message:</p>\n\n<blockquote>\n  <p><code>error: mismatched types: expected i64, found &amp;i64 (expected i64, found &amp;-ptr)</code></p>\n</blockquote>\n\n<p><code>Vec&lt;T&gt;::iter</code> gives you an iterator over <code>&amp;T</code> (references to <code>T</code>).  If you don't intend to ever use the vec again, you can use <code>for p in array</code> or <code>for p in array.into_iter()</code>.  If you <em>do</em> want to use it again, you have several options:</p>\n\n<ul>\n<li><code>&amp;array</code> or <code>array.iter()</code>, and dereference <code>p</code> when using it.</li>\n<li><code>array.iter().cloned()</code></li>\n<li><code>array.iter().map(|e| *e)</code> (effectively the same as above)</li>\n</ul>\n\n<p>If all this talk about references doesn't make sense, you should probably read the section of the <a href=\"http://doc.rust-lang.org/book/pointers.html\" rel=\"nofollow\">Rust Book on Pointers</a>.</p>\n\n<p>Remember that you can trick the compiler into telling you the type of a variable like so: <code>let _:() = p;</code> -- the error message will contain the true type.</p>\n"}, {"comments": [{"owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "edited": false, "score": 0, "creation_date": 1423285329, "post_id": 28378449, "comment_id": 45097328, "body": "My goal is Euler project task 3 (<a href=\"https://projecteuler.net/problem=3\" rel=\"nofollow noreferrer\">projecteuler.net/problem=3</a>), but it seems I need to get a better algorithm. I will overthink my program, thanks for your help :)."}, {"owner": {"reputation": 85, "user_id": 8396319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b7c26dd40b33adf458b92dd23f516f5?s=128&d=identicon&r=PG&f=1", "display_name": "Artyom Gevorgyan", "link": "https://stackoverflow.com/users/8396319/artyom-gevorgyan"}, "edited": false, "score": 0, "creation_date": 1596306667, "post_id": 28378449, "comment_id": 111772482, "body": "As far as I understand, the slice will yield values of type <code>i32</code>, correct? I want a slice of <code>usize</code> values, how to specify that?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 85, "user_id": 8396319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b7c26dd40b33adf458b92dd23f516f5?s=128&d=identicon&r=PG&f=1", "display_name": "Artyom Gevorgyan", "link": "https://stackoverflow.com/users/8396319/artyom-gevorgyan"}, "edited": false, "score": 0, "creation_date": 1596458434, "post_id": 28378449, "comment_id": 111808646, "body": "@ArtemHevorhian the slice returns values of whatever type it is. In this case, it&#39;s a <code>Vec&lt;u64&gt;</code>, so subslices and indexed values will also use <code>u64</code>. Change your slice&#39;s type to change subslices and indexed values."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1596458374, "last_edit_date": 1596458374, "creation_date": 1423282290, "answer_id": 28378449, "question_id": 28378407, "link": "https://stackoverflow.com/questions/28378407/how-to-iterate-over-an-array-of-integers/28378449#28378449", "title": "How to iterate over an array of integers?", "body": "<p>When you iterate over a slice (which is a view into the <code>Vec</code>), you are getting <em>references to the items in the vector</em>, not the items themselves.</p>\n<p>You can fix that in two equivalent ways.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// Mark the iteration variable as a reference\nfor &amp;p in &amp;array {\n    if (k % p != 0) {\n        array.push(p)\n    };\n}\n\n// Dereference the iteration variable\nfor p in &amp;array {\n    if (k % *p != 0) {\n        array.push(*p)\n    };\n}\n</code></pre>\n<p>However, then you run into the next problem: you can't modify the <code>Vec</code> while you are iterating over it! If you were allowed to, the vector might need to reallocate the memory that backs it, which would then in turn invalidate <em>all of the references in the iterator</em>. This is a strong selling point of Rust - it prevents you from shooting yourself in the foot like this!</p>\n<p>Without knowing what you really want to do, here's one way of doing it:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let input_array = vec![2u64];\n    let mut output_array = input_array.clone();\n\n    for k in 3..13195 {\n        for &amp;p in &amp;input_array {\n            if k % p != 0 {\n                output_array.push(p)\n            };\n        }\n    }\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32234954/155423\">Difference between iter() and into_iter() on a shared, borrowed Vec?</a></li>\n</ul>\n"}], "owner": {"reputation": 1776, "user_id": 4435175, "user_type": "registered", "accept_rate": 68, "profile_image": "https://i.stack.imgur.com/UCpoD.gif?s=128&g=1", "display_name": "Vega", "link": "https://stackoverflow.com/users/4435175/vega"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2703, "favorite_count": 0, "accepted_answer_id": 28378447, "answer_count": 2, "score": 3, "last_activity_date": 1596458374, "creation_date": 1423281770, "last_edit_date": 1423322176, "question_id": 28378407, "link": "https://stackoverflow.com/questions/28378407/how-to-iterate-over-an-array-of-integers", "title": "How to iterate over an array of integers?", "body": "<p>What can I do to iterate over an array of integers in Rust?</p>\n\n<pre><code>fn main () {\n\n    let mut array: Vec&lt;i64&gt; = vec![2];\n\n    for k in range(3, 13195) {\n        for p in array.iter() {\n           if (k % p != 0) {array.push(p)};\n        }        \n    }\n}\n</code></pre>\n\n<p>Gives me the compiler error:</p>\n\n<blockquote>\n  <p>rustc \"Task2_minimalcode.rs\" (im Verzeichnis: C:\\Users\\XXX\\Documents\\Rust - Project Euler)</p>\n  \n  <p>Task2_minimalcode.rs:7:14: 7:15 error: mismatched types:\n   expected <code>_</code>,\n      found <code>&amp;i64</code>\n  (expected integral variable,\n      found &amp;-ptr) [E0308]\n  Task2_minimalcode.rs:7      if (k % p != 0) {array.push(p)};<br>\n                        ^\n  Task2_minimalcode.rs:7:34: 7:35 error: mismatched types:\n   expected <code>i64</code>,\n      found <code>&amp;i64</code>\n  (expected i64,\n      found &amp;-ptr) [E0308]</p>\n  \n  <p>Task2_minimalcode.rs:7      if (k % p != 0) {array.push(p)};\n                                                          ^\n  error: aborting due to 2 previous errors\n  Failed compilation.</p>\n</blockquote>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 199, "user_id": 1930441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0be5c3d29445c489126d2645a37b1397?s=128&d=identicon&r=PG", "display_name": "robbie.huffman", "link": "https://stackoverflow.com/users/1930441/robbie-huffman"}, "edited": false, "score": 0, "creation_date": 1423333632, "post_id": 28378314, "comment_id": 45109199, "body": "Thanks! The (non-)copyability of Strings causing this behavior completely eluded me."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1423280780, "creation_date": 1423280780, "answer_id": 28378314, "question_id": 28378295, "link": "https://stackoverflow.com/questions/28378295/does-refcellborrow-move-the-contents/28378314#28378314", "title": "Does RefCell::borrow move the contents?", "body": "<blockquote>\n  <p>Does RefCell::borrow() move the contents?</p>\n</blockquote>\n\n<p>No. Calling it borrow and having it move would be pretty underhanded! ^_^</p>\n\n<p>The problem is that you are trying to move the <code>id</code> out of your borrowed struct. This is a move because <code>String</code> isn't <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow\"><code>Copy</code></a>:</p>\n\n<pre><code>n.borrow().nodeid.id\n</code></pre>\n\n<p>Instead, use <code>clone</code> to leave the current string where it is, and return a brand-new one:</p>\n\n<pre><code>n.borrow().nodeid.id.clone()\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": false, "score": 3, "last_activity_date": 1423322147, "creation_date": 1423322147, "answer_id": 28383781, "question_id": 28378295, "link": "https://stackoverflow.com/questions/28378295/does-refcellborrow-move-the-contents/28383781#28383781", "title": "Does RefCell::borrow move the contents?", "body": "<p>To expand on @Shepmaster's answer (which is absolutely correct), you can avoid having to copy the string in this case, by writing the id of the child nodes directly to the formatter.</p>\n\n<p>I've chosen to use a newtype to avoid repetition:</p>\n\n<pre><code>impl fmt::Debug for NodeInfo {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"NodeInfo( {} {:?} {:?} )\", self.nodeid.id, ChildNode(&amp;self.prev), ChildNode(&amp;self.next))\n    }\n}\n\nstruct ChildNode&lt;'a&gt;(&amp;'a Option&lt;Rc&lt;RefCell&lt;NodeInfo&gt;&gt;&gt;);\n\nimpl&lt;'a&gt; fmt::Debug for ChildNode&lt;'a&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self.0 {\n            Some(ref n) =&gt; write!(f, \"{}\", n.borrow().nodeid.id),\n            None        =&gt; write!(f, \"None\"),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 199, "user_id": 1930441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0be5c3d29445c489126d2645a37b1397?s=128&d=identicon&r=PG", "display_name": "robbie.huffman", "link": "https://stackoverflow.com/users/1930441/robbie-huffman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 848, "favorite_count": 0, "accepted_answer_id": 28378314, "answer_count": 2, "score": 0, "last_activity_date": 1423322147, "creation_date": 1423280524, "last_edit_date": 1423280803, "question_id": 28378295, "link": "https://stackoverflow.com/questions/28378295/does-refcellborrow-move-the-contents", "title": "Does RefCell::borrow move the contents?", "body": "<p>I have a linked-list sort of struct, using Option, Rc, and RefCell.</p>\n\n<p>I'd like to implement fmt::Debug for it, but have run into the lovely \"cannot move out of borrowed content\" error.</p>\n\n<pre><code>use std::fmt;\nuse std::rc::{Rc, Weak};\nuse std::cell::RefCell;\n\n#[derive(Clone, Debug, Ord, Eq, PartialOrd, PartialEq)]\nstruct NodeId {id: String}\n\nimpl NodeId {\n    pub fn new(s: &amp;str) -&gt; NodeId { NodeId{id: s.to_string()}}\n}\n\nstruct NodeInfo {\n    nodeid: NodeId,\n    prev: Option&lt;Rc&lt;RefCell&lt;NodeInfo&gt;&gt;&gt;,\n    next: Option&lt;Rc&lt;RefCell&lt;NodeInfo&gt;&gt;&gt;,\n}\n\nimpl fmt::Debug for NodeInfo {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"NodeInfo( {} {} {} )\", self.nodeid.id,\n        match self.prev { None =&gt; \"none\".to_string(), Some(ref n) =&gt; n.borrow().nodeid.id},\n        match self.next { None =&gt; \"none\".to_string(), Some(ref n) =&gt; \"some\".to_string()},\n        )\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Ideally the debug output would be able to show me the ids of the .next and .previous nodes. But Rust is not allowing access to them. The attempt to .borrow() the content of the RefCell causes the error, but I cannot understand why.</p>\n\n<p>Play with it here: <a href=\"http://is.gd/Sah7sT\" rel=\"nofollow\">http://is.gd/Sah7sT</a></p>\n"}, {"tags": ["rust", "associated-types"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1423272677, "post_id": 28377450, "comment_id": 45095148, "body": "There are still a number of holes in associated types where things that should be legal don\u2019t compile. This looks like it is one of them."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1423272706, "post_id": 28377450, "comment_id": 45095154, "body": "Incidentally, <code>fn digit_iter(self) -&gt; Self::Iter;</code> works, no need for the <code>&lt;Self as DigitCollection&gt;</code>."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423273823, "post_id": 28377450, "comment_id": 45095383, "body": "Thanks for the suggestion! I will open an issue, in case this isn&#39;t a known problem (I wasn&#39;t able to find any open issue on this)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1425132567, "creation_date": 1425132567, "answer_id": 28782645, "question_id": 28377450, "link": "https://stackoverflow.com/questions/28377450/traits-with-default-methods-that-depend-on-a-bound-of-an-associated-type/28782645#28782645", "title": "Traits with default methods that depend on a bound of an associated type", "body": "<p>This code now compiles as desired:</p>\n\n<pre><code>trait DigitCollection: Sized {\n    type Iter: Iterator&lt;Item = u8&gt;;\n    fn digit_iter(self) -&gt; Self::Iter;\n\n    fn digit_sum(self) -&gt; u32 {\n        self.digit_iter()\n            .map(|digit: u8| digit as u32)\n            .fold(0, |sum, digit| sum + digit)\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 0, "accepted_answer_id": 28782645, "answer_count": 1, "score": 1, "last_activity_date": 1425132567, "creation_date": 1423271945, "last_edit_date": 1423274256, "question_id": 28377450, "link": "https://stackoverflow.com/questions/28377450/traits-with-default-methods-that-depend-on-a-bound-of-an-associated-type", "title": "Traits with default methods that depend on a bound of an associated type", "body": "<p>I can't figure out a way to make this code compile with <code>--cfg on_trait</code>:</p>\n\n<pre><code>trait DigitCollection: Sized {\n    type Iter: Iterator&lt;Item = u8&gt;;\n    fn digit_iter(self) -&gt; Self::Iter;\n\n    #[cfg(on_trait)]\n    fn digit_sum(self) -&gt; u32 {\n        self.digit_iter()\n            .map(|digit: u8| digit as u32)\n            .fold(0, |sum, digit| sum + digit)\n    }\n}\n\n#[cfg(not(on_trait))]\nfn digit_sum&lt;T: DigitCollection&gt;(collection: T) -&gt; u32 {\n    collection.digit_iter()\n        .map(|digit: u8| digit as u32)\n        .fold(0, |sum, digit| sum + digit)\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>With <code>on_trait</code> this fails with:</p>\n\n<pre><code>trait.rs:7:14: 7:26 error: type annotations required: cannot resolve `&lt;&lt;Self as DigitCollection&gt;::Iter as core::iter::Iterator&gt;::Item == u8` [E0284]\ntrait.rs:7         self.digit_iter()\n                        ^~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Without <code>on_trait</code>, it compiles just fine. Note that the <code>not(on_trait)</code> variant only differs by the fact that it is a free function instead of a default method.</p>\n\n<hr>\n\n<p>Edit: I opened an issue on this: <a href=\"https://github.com/rust-lang/rust/issues/22036\" rel=\"nofollow\">rust-lang/rust#22036</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 1, "creation_date": 1423280909, "post_id": 28377671, "comment_id": 45096631, "body": "I&#39;m under the impression that Rust should be able to track lifetimes and borrows across calls based strictly on function signatures, right? So if we kept the <code>Cell</code> around the <code>lock</code> field, the lifetime of that field is <i>still</i> determined by the caller... <code>Cell</code> grants interior mutability, but that isn&#39;t visible in the function prototype of <code>lock</code> in either case, so that shouldn&#39;t change outcomes from the borrow-checker, should it? Does the borrow-checker somehow understand that there&#39;s a possibility of mutation if the struct contains a <code>Cell</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 0, "creation_date": 1423281118, "post_id": 28377671, "comment_id": 45096667, "body": "An excellent question. If no one more knowledgable comments here, I&#39;d encourage submitting it as another top-level question."}, {"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 1, "creation_date": 1423282852, "post_id": 28377671, "comment_id": 45096906, "body": "This is kind of looking like a bug to me, at this point. I can&#39;t say clearly enough yet about what&#39;s going on, but changing the <i>type</i> of borrow should not change the <i>fact</i> of whether the variable is borrowed at the point that the move is attempted. Making the borrow <code>mut</code> really shouldn&#39;t have changed the lifetime of the borrow. And the move should be impossible even if the value is only borrowed immutably. Seems a little fishy... Either way, thanks for your help!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 0, "creation_date": 1423335107, "post_id": 28377671, "comment_id": 45109698, "body": "@AidanCully <b>even if the value is only borrowed immutably</b> - but note that if we were calling a <code>&amp;self</code> method, then we know that the borrow cannot possibly live beyond the function call - there&#39;d be no way to hold on to it! However, when using <code>&amp;&#39;a mut self</code>, with a corresponding field with <code>&#39;a</code>, it&#39;s possible that the method modifies the struct to hold on to the lifetime. This still doesn&#39;t clear up the details about <code>Cell</code> though."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 2, "creation_date": 1423373170, "post_id": 28377671, "comment_id": 45119068, "body": "@Shepmaster: pay attention to the <code>&amp;&#39;a self</code>; that means that the method is only callable <i>if it can actually take that borrow</i>. If you have a function taking a <code>&amp;Unmovable</code>, you will not be able to call <code>lock()</code> on it. (Incidentally, I do not agree with your analysis of the problem and agree with @Aidan that it looks like a bug.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423373315, "post_id": 28377671, "comment_id": 45119091, "body": "@ChrisMorgan noted! Do you disagree with all of my answer, or just a specific part? I look forward to learning more from your answer! ^_^"}, {"owner": {"reputation": 1755, "user_id": 3757757, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xhHJj.jpg?s=128&g=1", "display_name": "CrepeGoat", "link": "https://stackoverflow.com/users/3757757/crepegoat"}, "edited": false, "score": 0, "creation_date": 1611926322, "post_id": 28377671, "comment_id": 116613514, "body": "I tried running the above-linked playpen, and I\u2019m getting errors that InvariantLifetime doesn\u2019t exist in marker. Has this been removed from Rust since 2015?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1423273937, "creation_date": 1423273937, "answer_id": 28377671, "question_id": 28376182, "link": "https://stackoverflow.com/questions/28376182/why-is-a-cell-used-to-create-unmovable-objects/28377671#28377671", "title": "Why is a Cell used to create unmovable objects?", "body": "<p>An interesting problem! Here's my understanding of it...</p>\n\n<p>Here's another example that doesn't use <code>Cell</code>:</p>\n\n<pre><code>#![feature(core)]\n\nuse std::marker::InvariantLifetime;\n\nstruct Unmovable&lt;'a&gt; { //'\n    lock: Option&lt;InvariantLifetime&lt;'a&gt;&gt;, //'\n}\n\nimpl&lt;'a&gt; Unmovable&lt;'a&gt; {\n    fn lock_it(&amp;'a mut self) { //'\n        self.lock = Some(InvariantLifetime)\n    }\n}\n\nfn main() {\n    let mut u = Unmovable { lock: None };\n    u.lock_it();\n    let v = u;\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/4uktlW\" rel=\"nofollow\">Playpen</a>)</p>\n\n<p>The important trick here is that the structure needs to borrow <em>itself</em>. Once we have done that, it can no longer be moved because any move would invalidate the borrow. This isn't conceptually different from any other kind of borrow:</p>\n\n<pre><code>struct A(u32);\n\nfn main() {\n    let a = A(42);\n    let b = &amp;a;\n    let c = a;\n}\n</code></pre>\n\n<p>The only thing is that you need some way of letting the struct contain its own reference, which isn't possible to do at construction time. My example uses <code>Option</code>, which requires <code>&amp;mut self</code> and the linked example uses <code>Cell</code>, which allows for interior mutability and just <code>&amp;self</code>.</p>\n\n<p>Both examples use a lifetime marker because it allows the typesystem to track the lifetime without needing to worry about a particular instance. </p>\n\n<p>Let's look at your constructor:</p>\n\n<pre><code>fn new() -&gt; Unmovable&lt;'a&gt; { //'\n    Unmovable { \n        lock: marker::ContravariantLifetime,\n        marker: marker::NoCopy\n    }\n}\n</code></pre>\n\n<p>Here, the lifetime put into <code>lock</code> is chosen <em>by the caller</em>, and it ends up being the normal lifetime of the <code>Unmovable</code> struct. There's no borrow of self.</p>\n\n<p>Let's next look at your lock method:</p>\n\n<pre><code>fn lock(&amp;'a self) {\n}\n</code></pre>\n\n<p>Here, the compiler knows that the lifetime won't change. However, if we make it mutable:</p>\n\n<pre><code>fn lock(&amp;'a mut self) {\n}\n</code></pre>\n\n<p>Bam! It's locked again. This is because the compiler knows that the internal fields <em>could</em> change. We can actually apply this to our <code>Option</code> variant and remove the body of <code>lock_it</code>!</p>\n"}, {"comments": [{"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 0, "creation_date": 1423405438, "post_id": 28393340, "comment_id": 45126346, "body": "Answered all my questions! Except for the one that doesn&#39;t seem answerable (why can you move with <i>either</i> <code>CovariantLifetime</code> <i>or</i> <code>ContravariantLifetime</code>?), which seems like another possible compiler bug. Thank you!"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1423438988, "post_id": 28393340, "comment_id": 45137010, "body": "The stated invariance of <code>&amp;&#39;a mut T</code> is incorrect: it is invariant with respect to <code>T</code>, and contravariant with respect to <code>&#39;a</code>. It is valid to coerce a <code>&amp;&#39;a mut T</code> to a <code>&amp;&#39;small mut T</code>."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1423440685, "post_id": 28393340, "comment_id": 45137424, "body": "Also, <code>InvarianceLifetime</code> is the intersection of <code>ContravarianceLifetime</code> and <code>CovarianceLifetime</code>, so it behaves like both in terms of restrictions. Each of the mark types actually represents removing funtionality, rather than adding it: <code>Contra...</code> is just <i>not</i> covariant, <code>Co...</code> is just not contravariant, and <code>In...</code> is neither covariant nor contravariant."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1423394548, "creation_date": 1423394548, "answer_id": 28393340, "question_id": 28376182, "link": "https://stackoverflow.com/questions/28376182/why-is-a-cell-used-to-create-unmovable-objects/28393340#28393340", "title": "Why is a Cell used to create unmovable objects?", "body": "<p>The true answer is comprised of a moderately complex consideration of lifetime <a href=\"http://en.wikipedia.org/wiki/Variance_%28computer_science%29\" rel=\"nofollow\">variancy</a>, with a couple of misleading aspects of the code that need to be sorted out.</p>\n\n<p>For the code below, <code>'a</code> is an arbitrary lifetime, <code>'small</code> is an arbitrary lifetime that is smaller than <code>'a</code> (this can be expressed by the constraint <code>'a: 'small</code>), and <code>'static</code> is used as the most common example of a lifetime that is larger than <code>'a</code>.</p>\n\n<p>Here are the facts and steps to follow in the consideration:</p>\n\n<ul>\n<li><p>Normally, lifetimes are <em>contravariant</em>; <code>&amp;'a T</code> is contravariant with regards to <code>'a</code> (as is <code>T&lt;'a&gt;</code> in the absence of any variancy markers), meaning that if you have a <code>&amp;'a T</code>, it\u2019s OK to substitute a longer lifetime than <code>'a</code>, e.g. you can store in such a place a <code>&amp;'static T</code> and treat it as though it were a <code>&amp;'a T</code> (you\u2019re allowed to shorten the lifetime).</p></li>\n<li><p>In a few places, lifetimes can be <em>invariant</em>; the most common example is <code>&amp;'a mut T</code> which is invariant with regards to <code>'a</code>, meaning that if you have a <code>&amp;'a mut T</code>, you cannot store a <code>&amp;'small mut T</code> in it (the borrow doesn\u2019t live long enough), but you also cannot store a <code>&amp;'static mut T</code> in it, because that would cause trouble for the reference being stored as it would be forgotten that it <em>actually</em> lived for longer, and so you could end up with multiple simultaneous mutable references being created.</p></li>\n<li><p>A <a href=\"http://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow\"><code>Cell</code></a> contains an <a href=\"http://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\" rel=\"nofollow\"><code>UnsafeCell</code></a>; what isn\u2019t so obvious is that <code>UnsafeCell</code> is magic, being wired to the compiler for special treatment as the language item named \u201cunsafe\u201d. Importantly, <code>UnsafeCell&lt;T&gt;</code> is <em>invariant</em> with regards to <code>T</code>, for similar sorts of reasons to the invariance of <code>&amp;'a mut T</code> with regards to <code>'a</code>.</p></li>\n<li><p>Thus, <code>Cell&lt;<em>any lifetime variancy marker</em>&gt;</code> will actually behave the same as <code>Cell&lt;InvariantLifetime&lt;'a&gt;&gt;</code>.</p></li>\n<li><p>Furthermore, you don\u2019t actually need to use <code>Cell</code> any more; you can just use <code>InvariantLifetime&lt;'a&gt;</code>.</p></li>\n<li><p>Returning to the example with the <code>Cell</code> wrapping removed and a <code>ContravariantLifetime</code> (actually equivalent to just defining <code>struct Unmovable&lt;'a&gt;;</code>, for contravariance is the default as is no <code>Copy</code> implementation): why does it allow moving the value? \u2026 I must confess, I don\u2019t grok this particular case yet and would appreciate some help myself in understanding why it\u2019s allowed. It seems back to front, that covariance would allow the lock to be shortlived but that contravariance and invariance wouldn\u2019t, but in practice it seems that only invariance is performing the desired function.</p></li>\n</ul>\n\n<p>Anyway, here\u2019s the final result. <code>Cell&lt;ContravariantLifetime&lt;'a&gt;&gt;</code> is changed to <code>InvariantLifetime&lt;'a&gt;</code> and that\u2019s the only functional change, making the <code>lock</code> method function as desired, taking a borrow with an invariant lifetime. (Another solution would be to have <code>lock</code> take <code>&amp;'a mut self</code>, for a mutable reference is, as already discussed, invariant; this is inferior, however, as it requires needless mutability.)</p>\n\n<p>One other thing that needs mentioning: the contents of the <code>lock</code> and <code>new_in</code> methods are completely superfluous. The body of a function will never change the static behaviour of the compiler; only the signature matters. The fact that the lifetime parameter <code>'a</code> is marked invariant is the key point. So the whole \u201cconstruct an <code>Unmovable</code> object and call <code>lock</code> on it\u201d  part of <code>new_in</code> is completely superfluous. Similarly setting the contents of the cell in <code>lock</code> was a waste of time. (Note that it is again the invariance of <code>'a</code> in <code>Unmovable&lt;'a&gt;</code> that makes <code>new_in</code> work, not the fact that it is a mutable reference.)</p>\n\n<pre><code>use std::marker;\n\nstruct Unmovable&lt;'a&gt; {\n    lock: marker::InvariantLifetime&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; Unmovable&lt;'a&gt; {\n    fn new() -&gt; Unmovable&lt;'a&gt; {\n        Unmovable { \n            lock: marker::InvariantLifetime,\n        }\n    }\n\n    fn lock(&amp;'a self) { }\n\n    fn new_in(_: &amp;'a mut Option&lt;Unmovable&lt;'a&gt;&gt;) { }\n}\n\nfn main() {\n    let x = Unmovable::new();\n    x.lock();\n\n    // This is an error, as desired:\n    let z = x;\n\n    let mut y = None;\n    Unmovable::new_in(&amp;mut y);\n\n    // Yay, this is an error too!\n    let z = y;\n}\n</code></pre>\n"}], "owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 434, "favorite_count": 1, "accepted_answer_id": 28393340, "answer_count": 2, "score": 10, "last_activity_date": 1423394548, "creation_date": 1423263020, "question_id": 28376182, "link": "https://stackoverflow.com/questions/28376182/why-is-a-cell-used-to-create-unmovable-objects", "title": "Why is a Cell used to create unmovable objects?", "body": "<p>So I ran into <a href=\"https://gist.github.com/Kimundi/d846f1da490ef4e9b0d9\">this code snippet</a> showing how to create \"unmoveable\" types in Rust - moves are prevented because the compiler treats the object as borrowed for its whole lifetime.</p>\n\n<pre><code>use std::cell::Cell;\nuse std::marker;\n\nstruct Unmovable&lt;'a&gt; {\n    lock: Cell&lt;marker::ContravariantLifetime&lt;'a&gt;&gt;,\n    marker: marker::NoCopy\n}\n\nimpl&lt;'a&gt; Unmovable&lt;'a&gt; {\n    fn new() -&gt; Unmovable&lt;'a&gt; {\n        Unmovable { \n            lock: Cell::new(marker::ContravariantLifetime),\n            marker: marker::NoCopy\n        }\n    }\n    fn lock(&amp;'a self) {\n        self.lock.set(marker::ContravariantLifetime);\n    }\n    fn new_in(self_: &amp;'a mut Option&lt;Unmovable&lt;'a&gt;&gt;) {\n        *self_ = Some(Unmovable::new());\n        self_.as_ref().unwrap().lock();\n    }\n}\n\nfn main(){\n    let x = Unmovable::new();\n    x.lock();\n\n    // error: cannot move out of `x` because it is borrowed\n    // let z = x; \n\n    let mut y = None;\n    Unmovable::new_in(&amp;mut y);\n\n    // error: cannot move out of `y` because it is borrowed\n    // let z = y; \n\n    assert_eq!(std::mem::size_of::&lt;Unmovable&gt;(), 0)\n}\n</code></pre>\n\n<p>I don't yet understand how this works. My guess is that the lifetime of the borrow-pointer argument is forced to match the lifetime of the lock field. The weird thing is, this code continues working in the same way if:</p>\n\n<ul>\n<li>I change <code>ContravariantLifetime&lt;'a&gt;</code> to <code>CovariantLifetime&lt;'a&gt;</code>, or to <code>InvariantLifetime&lt;'a&gt;</code>.</li>\n<li>I remove the body of the <code>lock</code> method.</li>\n</ul>\n\n<p>But, if I remove the <code>Cell</code>, and just use <code>lock: marker::ContravariantLifetime&lt;'a&gt;</code> directly, as so:</p>\n\n<pre><code>use std::marker;\n\nstruct Unmovable&lt;'a&gt; {\n    lock: marker::ContravariantLifetime&lt;'a&gt;,\n    marker: marker::NoCopy\n}\n\nimpl&lt;'a&gt; Unmovable&lt;'a&gt; {\n    fn new() -&gt; Unmovable&lt;'a&gt; {\n        Unmovable { \n            lock: marker::ContravariantLifetime,\n            marker: marker::NoCopy\n        }\n    }\n    fn lock(&amp;'a self) {\n    }\n    fn new_in(self_: &amp;'a mut Option&lt;Unmovable&lt;'a&gt;&gt;) {\n        *self_ = Some(Unmovable::new());\n        self_.as_ref().unwrap().lock();\n    }\n}\n\nfn main(){\n    let x = Unmovable::new();\n    x.lock();\n\n    // does not error?\n    let z = x;\n\n    let mut y = None;\n    Unmovable::new_in(&amp;mut y);\n\n    // does not error?\n    let z = y;\n\n    assert_eq!(std::mem::size_of::&lt;Unmovable&gt;(), 0)\n}\n</code></pre>\n\n<p>Then the \"Unmoveable\" object is allowed to move. Why would that be?</p>\n"}, {"tags": ["testing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1087, "user_id": 182737, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/de98508e41673f22928cd8e2679f5b2f?s=128&d=identicon&r=PG", "display_name": "Frank Meulenaar", "link": "https://stackoverflow.com/users/182737/frank-meulenaar"}, "edited": false, "score": 0, "creation_date": 1613464780, "post_id": 28370712, "comment_id": 117075979, "body": "Could you comment why this doesn&#39;t lose performance? Is is just that <code>println!</code> will just call <code>writeln!(io::stdout(),...</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1087, "user_id": 182737, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/de98508e41673f22928cd8e2679f5b2f?s=128&d=identicon&r=PG", "display_name": "Frank Meulenaar", "link": "https://stackoverflow.com/users/182737/frank-meulenaar"}, "edited": false, "score": 0, "creation_date": 1613497349, "post_id": 28370712, "comment_id": 117090789, "body": "@FrankMeulenaar <code>println!</code> eventually uses stdout, yes, but not exactly in that manner. Flipping the question \u2014 why <i>would</i> it lose performance?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 23, "last_activity_date": 1509645316, "last_edit_date": 1509645316, "creation_date": 1423241381, "answer_id": 28370712, "question_id": 28370126, "link": "https://stackoverflow.com/questions/28370126/how-can-i-test-stdin-and-stdout/28370712#28370712", "title": "How can I test stdin and stdout?", "body": "<p>Use dependency injection. Coupling it with generics and monomorphism, you don't lose any performance:</p>\n\n<pre><code>use std::io::{self, BufRead, Write};\n\nfn prompt&lt;R, W&gt;(mut reader: R, mut writer: W, question: &amp;str) -&gt; String\nwhere\n    R: BufRead,\n    W: Write,\n{\n    write!(&amp;mut writer, \"{}\", question).expect(\"Unable to write\");\n    let mut s = String::new();\n    reader.read_line(&amp;mut s).expect(\"Unable to read\");\n    s\n}\n\n#[test]\nfn test_with_in_memory() {\n    let input = b\"I'm George\";\n    let mut output = Vec::new();\n\n    let answer = prompt(&amp;input[..], &amp;mut output, \"Who goes there?\");\n\n    let output = String::from_utf8(output).expect(\"Not UTF-8\");\n\n    assert_eq!(\"Who goes there?\", output);\n    assert_eq!(\"I'm George\", answer);\n}\n\nfn main() {\n    let stdio = io::stdin();\n    let input = stdio.lock();\n\n    let output = io::stdout();\n\n    let answer = prompt(input, output, \"Who goes there?\");\n    println!(\"was: {}\", answer);\n}\n</code></pre>\n\n<p>In many cases, you'd want to actually propagate the error back up to the caller instead of using <code>expect</code>, as IO is a very common place for failures to occur.</p>\n\n<hr>\n\n<p>This can be extended beyond <em>functions</em> into <em>methods</em>:</p>\n\n<pre><code>use std::io::{self, BufRead, Write};\n\nstruct Quizzer&lt;R, W&gt; {\n    reader: R,\n    writer: W,\n}\n\nimpl&lt;R, W&gt; Quizzer&lt;R, W&gt;\nwhere\n    R: BufRead,\n    W: Write,\n{\n    fn prompt(&amp;mut self, question: &amp;str) -&gt; String {\n        write!(&amp;mut self.writer, \"{}\", question).expect(\"Unable to write\");\n        let mut s = String::new();\n        self.reader.read_line(&amp;mut s).expect(\"Unable to read\");\n        s\n    }\n}\n\n#[test]\nfn test_with_in_memory() {\n    let input = b\"I'm George\";\n    let mut output = Vec::new();\n\n    let answer = {\n        let mut quizzer = Quizzer {\n            reader: &amp;input[..],\n            writer: &amp;mut output,\n        };\n\n        quizzer.prompt(\"Who goes there?\")\n    };\n\n    let output = String::from_utf8(output).expect(\"Not UTF-8\");\n\n    assert_eq!(\"Who goes there?\", output);\n    assert_eq!(\"I'm George\", answer);\n}\n\nfn main() {\n    let stdio = io::stdin();\n    let input = stdio.lock();\n\n    let output = io::stdout();\n\n    let mut quizzer = Quizzer {\n        reader: input,\n        writer: output,\n    };\n\n    let answer = quizzer.prompt(\"Who goes there?\");\n    println!(\"was: {}\", answer);\n}\n</code></pre>\n"}], "owner": {"reputation": 143, "user_id": 4537958, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3ae81239ba07b3068511da718196e42?s=128&d=identicon&r=PG&f=1", "display_name": "rusty2iron", "link": "https://stackoverflow.com/users/4537958/rusty2iron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3738, "favorite_count": 4, "accepted_answer_id": 28370712, "answer_count": 1, "score": 14, "last_activity_date": 1509645316, "creation_date": 1423239431, "last_edit_date": 1423241546, "question_id": 28370126, "link": "https://stackoverflow.com/questions/28370126/how-can-i-test-stdin-and-stdout", "title": "How can I test stdin and stdout?", "body": "<p>I'd like to write a prompt function that sends a passed-in string to stdout and then returns the string that it reads from stdin. How could I test it?</p>\n\n<p>Here is an example of the function:</p>\n\n<pre><code>fn prompt(question: String) -&gt; String {\n    let mut stdin = BufferedReader::new(stdin());\n    print!(\"{}\", question);\n    match stdin.read_line() {\n        Ok(line) =&gt; line,\n        Err(e)   =&gt; panic!(e),\n    }\n}\n</code></pre>\n\n<p>And here is my testing attempt </p>\n\n<pre><code>#[test]\nfn try_to_test_stdout() {\n    let writer: Vec&lt;u8&gt; = vec![];\n    set_stdout(Box::new(writer));\n    print!(\"testing\");\n// `writer` is now gone, can't check to see if \"testing\" was sent\n}\n</code></pre>\n"}, {"tags": ["timer", "task", "rust", "scheduler"], "answers": [{"comments": [{"owner": {"reputation": 3685, "user_id": 5812238, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b99072b57c3ba6f1c4049e21767571cb?s=128&d=identicon&r=PG&f=1", "display_name": "diralik", "link": "https://stackoverflow.com/users/5812238/diralik"}, "edited": false, "score": 2, "creation_date": 1558814820, "post_id": 28366739, "comment_id": 99227017, "body": "Link to <code>Timer::periodic</code> is dead"}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568330048, "post_id": 28366739, "comment_id": 102249632, "body": "You can also use crates like <a href=\"https://crates.io/crates/timer\" rel=\"nofollow noreferrer\">timer</a> and it&#39;s <a href=\"http://yoric.github.io/timer.rs/doc/timer\" rel=\"nofollow noreferrer\">schedule</a> function."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1423308333, "last_edit_date": 1423308333, "creation_date": 1423228806, "answer_id": 28366739, "question_id": 28364995, "link": "https://stackoverflow.com/questions/28364995/is-there-a-way-to-schedule-a-task-at-a-specific-time-or-with-an-interval/28366739#28366739", "title": "Is there a way to schedule a task at a specific time or with an interval?", "body": "<p>You can use <a href=\"http://doc.rust-lang.org/nightly/std/old_io/timer/struct.Timer.html#method.periodic\" rel=\"nofollow\"><code>Timer::periodic</code></a> to create a channel that gets sent a message at regular intervals, e.g.</p>\n\n<pre><code>use std::old_io::Timer;\n\nlet mut timer = Timer::new().unwrap();\nlet ticks = timer.periodic(Duration::minutes(5));\nfor _ in ticks.iter() {\n    your_function();\n}\n</code></pre>\n\n<p><a href=\"http://doc.rust-lang.org/nightly/std/sync/mpsc/struct.Receiver.html#method.iter\" rel=\"nofollow\"><code>Receiver::iter</code></a> blocks, waiting for the next message, and those messages are 5 minutes apart, so the body of the <code>for</code> loop is run at those regular intervals. NB. this will use a whole thread for that single function, but I believe one can generalise to any fixed number of functions with different intervals by creating multiple timer channels and using <a href=\"http://doc.rust-lang.org/nightly/std/macro.select!.html#examples\" rel=\"nofollow\"><code>select!</code></a> to work out which function should execute next.</p>\n\n<p>I'm fairly sure that running every day at a specified time, correctly, isn't possible with the current standard library. E.g. using a simple <code>Timer::periodic(Duration::days(1))</code> won't handle the system clock changing, e.g. when the user moves timezones, or goes in/out of daylight savings.</p>\n"}, {"comments": [{"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 1, "creation_date": 1423275462, "post_id": 28369094, "comment_id": 45095710, "body": "Can you provide some explanation about the differences of this method compared to dbaupps ? What I can see is that you&#39;re spawning two tasks and I&#39;m assuming they&#39;re running independently ?"}], "tags": [], "owner": {"reputation": 31, "user_id": 2840942, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2868bf8c2a69335cabb3c0a3aac03145?s=128&d=identicon&r=PG&f=1", "display_name": "Siyu Wang", "link": "https://stackoverflow.com/users/2840942/siyu-wang"}, "is_accepted": false, "score": 1, "last_activity_date": 1423236353, "creation_date": 1423236353, "answer_id": 28369094, "question_id": 28364995, "link": "https://stackoverflow.com/questions/28364995/is-there-a-way-to-schedule-a-task-at-a-specific-time-or-with-an-interval/28369094#28369094", "title": "Is there a way to schedule a task at a specific time or with an interval?", "body": "<p>For the latest Rust nightly-version:</p>\n\n<pre><code>use std::old_io::Timer;\nuse std::time::Duration;\n\nlet mut timer1 = Timer::new().unwrap();\nlet mut timer2 = Timer::new().unwrap();\nlet tick1 = timer1.periodic(Duration::seconds(1));\nlet tick2 = timer2.periodic(Duration::seconds(3));\n\nloop {\n    select! {\n        _ = tick1.recv() =&gt; do_something1(),\n        _ = tick2.recv() =&gt; do_something2()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2287, "favorite_count": 0, "accepted_answer_id": 28366739, "answer_count": 2, "score": 7, "last_activity_date": 1423308333, "creation_date": 1423222835, "last_edit_date": 1423230238, "question_id": 28364995, "link": "https://stackoverflow.com/questions/28364995/is-there-a-way-to-schedule-a-task-at-a-specific-time-or-with-an-interval", "title": "Is there a way to schedule a task at a specific time or with an interval?", "body": "<p>Is there a way to run a task in rust, a thread at best, at a specific time or in an interval again and again?</p>\n\n<p>So that I can run my function every 5 minutes or every day at 12 o'clock.</p>\n\n<p>In Java there is the TimerTask, so I'm searching for something like that.</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 75, "user_id": 4534809, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/siPrj.png?s=128&g=1", "display_name": "mrburne", "link": "https://stackoverflow.com/users/4534809/mrburne"}, "edited": false, "score": 0, "creation_date": 1423175920, "post_id": 28355265, "comment_id": 45054318, "body": "Thank you for answer, i get it now ! thx also for your free corrections and advices !!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1546821476, "last_edit_date": 1546821476, "creation_date": 1423175212, "answer_id": 28355265, "question_id": 28354693, "link": "https://stackoverflow.com/questions/28354693/borrowed-value-does-not-live-long-enough-when-creating-a-vec/28355265#28355265", "title": "Borrowed value does not live long enough when creating a Vec", "body": "<p>The most literal translation of your code that supports Rust 1.0 is this:</p>\n\n<pre><code>use std::{fs, path::Path, ffi::OsStr};\n\nfn getList(action_dir_path: &amp;str) -&gt; Vec&lt;&amp;OsStr&gt; {\n    let v = fs::read_dir(&amp;Path::new(action_dir_path))\n        .unwrap()\n        .map(|x| x.unwrap().path().file_stem().unwrap())\n        .collect();\n    return v;\n}\n</code></pre>\n\n<p>This produces the error messages:</p>\n\n<p><strong>Rust 2015</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n --&gt; src/lib.rs:6:18\n  |\n6 |         .map(|x| x.unwrap().path().file_stem().unwrap())\n  |                  ^^^^^^^^^^^^^^^^^                    - temporary value only lives until here\n  |                  |\n  |                  temporary value does not live long enough\n  |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 3:1...\n --&gt; src/lib.rs:3:1\n  |\n3 | / fn getList(action_dir_path: &amp;str) -&gt; Vec&lt;&amp;OsStr&gt; {\n4 | |     let v = fs::read_dir(&amp;Path::new(action_dir_path))\n5 | |         .unwrap()\n6 | |         .map(|x| x.unwrap().path().file_stem().unwrap())\n7 | |         .collect();\n8 | |     return v;\n9 | | }\n  | |_^\n</code></pre>\n\n<p><strong>Rust 2018</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0515]: cannot return value referencing temporary value\n --&gt; src/lib.rs:6:18\n  |\n6 |         .map(|x| x.unwrap().path().file_stem().unwrap())\n  |                  -----------------^^^^^^^^^^^^^^^^^^^^^\n  |                  |\n  |                  returns a value referencing data owned by the current function\n  |                  temporary value created here\n</code></pre>\n\n<p>The problem comes from <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.file_stem\" rel=\"nofollow noreferrer\"><code>Path::file_stem</code></a>. This is the signature:</p>\n\n<pre><code>pub fn file_stem(&amp;self) -&gt; Option&lt;&amp;OsStr&gt;\n</code></pre>\n\n<p>This indicates that the method will return a <em>borrowed reference to a <code>OsStr</code></em>. The <code>PathBuf</code> struct is the <em>owner</em> of the string. When you leave the method, there's nowhere left that owns the <code>PathBuf</code>, so it will be dropped. This means that any references into the <code>PathBuf</code> will no longer be valid. This is Rust preventing you from having references to memory that is no longer allocated, yay for Rust!</p>\n\n<p>The easiest thing you can do is return a <code>Vec&lt;String&gt;</code>. <code>String</code> owns the string inside of it, so we don't need to worry about it being freed when we leave the function:</p>\n\n<pre><code>fn get_list(action_dir_path: &amp;str) -&gt; Vec&lt;String&gt; {\n    fs::read_dir(action_dir_path)\n        .unwrap()\n        .map(|x| {\n            x.unwrap()\n                .path()\n                .file_stem()\n                .unwrap()\n                .to_str()\n                .unwrap()\n                .to_string()\n        })\n        .collect()\n}\n</code></pre>\n\n<p>I also updated the style (at no charge!) to be more Rust-like:</p>\n\n<ol>\n<li>Use <code>snake_case</code> for items</li>\n<li>No space before the colon in type definitions</li>\n<li>There's no reason to set a variable just to return it. </li>\n<li>Don't use explicit <code>return</code> statements unless you are exiting from a function early.</li>\n<li>There's no need to wrap the path in a <code>Path</code>.</li>\n</ol>\n\n<p>However, I'm not a fan of all of the unwrapping. I'd write the function like this:</p>\n\n<pre><code>use std::{ffi::OsString, fs, io, path::Path};\n\nfn get_list(action_dir_path: impl AsRef&lt;Path&gt;) -&gt; io::Result&lt;Vec&lt;OsString&gt;&gt; {\n    fs::read_dir(action_dir_path)?\n        .map(|entry| entry.map(|e| e.file_name()))\n        .collect()\n}\n\nfn main() {\n    println!(\"{:?}\", get_list(\"/etc\"));\n}\n</code></pre>\n\n<p>In addition to the changes above:</p>\n\n<ol>\n<li>I use a generic type for the input path.</li>\n<li>I return a <code>Result</code> to propagate errors to the caller.</li>\n<li>I directly ask the <code>DirEntry</code> for the filename.</li>\n<li>I leave the type as an <code>OsString</code>.</li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 75, "user_id": 4534809, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/siPrj.png?s=128&g=1", "display_name": "mrburne", "link": "https://stackoverflow.com/users/4534809/mrburne"}, "edited": false, "score": 0, "creation_date": 1423215135, "post_id": 28356618, "comment_id": 45067015, "body": "Yes you are right. I missread the paragraphe on &amp;str in the rust book <a href=\"http://doc.rust-lang.org/book/more-strings.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/more-strings.html</a> speaking about string literal."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 0, "last_activity_date": 1423182602, "creation_date": 1423182602, "answer_id": 28356618, "question_id": 28354693, "link": "https://stackoverflow.com/questions/28354693/borrowed-value-does-not-live-long-enough-when-creating-a-vec/28356618#28356618", "title": "Borrowed value does not live long enough when creating a Vec", "body": "<p>One small related point:</p>\n\n<blockquote>\n  <p>I thought &amp;str were static.</p>\n</blockquote>\n\n<p><code>&amp;'static str</code>s are static, but that's only one kind of <code>&amp;str</code>. It can have any kind of lifetime.</p>\n"}], "owner": {"reputation": 75, "user_id": 4534809, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/siPrj.png?s=128&g=1", "display_name": "mrburne", "link": "https://stackoverflow.com/users/4534809/mrburne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2203, "favorite_count": 2, "accepted_answer_id": 28355265, "answer_count": 2, "score": 4, "last_activity_date": 1546821476, "creation_date": 1423172839, "last_edit_date": 1546820781, "question_id": 28354693, "link": "https://stackoverflow.com/questions/28354693/borrowed-value-does-not-live-long-enough-when-creating-a-vec", "title": "Borrowed value does not live long enough when creating a Vec", "body": "<blockquote>\n  <p>Editor's note: This question was asked before Rust 1.0. Since then, many functions and types have changed, as have certain language semantics. The code in the question is no longer valid, but the ideas expressed in the answers may be.</p>\n</blockquote>\n\n<p>I'm trying to list the files in a directory and copy the filename to my own <code>Vec</code>. I've tried several solutions, but it always ends up with a problem of not being able to create long enough living variables. I don't understand my mistake.</p>\n\n<pre><code>fn getList(action_dir_path : &amp;str) -&gt; Vec&lt;&amp;str&gt; {\n    let v = fs::readdir(&amp;Path::new(action_dir_path))\n            .unwrap()\n            .iter()\n            .map(|&amp;x| x.filestem_str().unwrap())\n            .collect();\n    return v;\n}\n</code></pre>\n\n<p>Why does the compiler complain about \"x\" ? I don't care about x, I want the <code>&amp;str</code> inside it and I thought <code>&amp;str</code> were static.</p>\n\n<p>I tried this way, but I got the same result with the compiler complaining about \"paths\" not living long enough.</p>\n\n<pre><code>fn getList2(action_dir_path : &amp;str) -&gt; Vec&lt;&amp;str&gt; {\n    let paths = fs::readdir(&amp;Path::new(action_dir_path)).unwrap();\n    let mut v : Vec&lt;&amp;str&gt; = Vec::new();\n\n    for path in paths.iter(){\n       let aSlice = path.filestem_str().unwrap();\n       v.push(aSlice);\n    }\n\n    return v;\n}\n</code></pre>\n\n<p>Here is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=e62ad04cfbe424b733472d2642ff2d35\" rel=\"nofollow noreferrer\">the playground</a>.</p>\n"}, {"tags": ["metaprogramming", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423164335, "post_id": 28351778, "comment_id": 45048467, "body": "As a tiny nit, you will need to return a <code>Box&lt;Method&gt;</code> instead of <code>&amp;Method</code>. There&#39;s no safe space for the <code>&amp;Method</code> to point to (unless you have a single <code>&#39;static</code> instance)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423164635, "post_id": 28351778, "comment_id": 45048651, "body": "Would your current solution be acceptable if you just didn&#39;t have to maintain the array in your <code>main</code> method? Do you have any direction for <i>how</i> a specific implementation would be picked? It seems like you&#39;d have a map of <code>&quot;Orc&quot; =&gt; OrcMethods</code>, but at that point, you might as well call <code>OrcMethods</code> directly."}, {"owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423166563, "post_id": 28351778, "comment_id": 45049679, "body": "Thanks @Shepmaster, you&#39;re certainly right about the Box."}, {"owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423166601, "post_id": 28351778, "comment_id": 45049701, "body": "The problem here is that &quot;Orc&quot; is only known at runtime -- so we can&#39;t call OrcMethods directly."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423185696, "post_id": 28351778, "comment_id": 45057458, "body": "So you&#39;re not going to accept an answer that says \u201cuse <code>[fn()]</code>\u201d?"}, {"owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423210258, "post_id": 28351778, "comment_id": 45064735, "body": "@Chris Morgan -- what exactly do you mean by that, care to elaborate?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423229397, "post_id": 28351778, "comment_id": 45074730, "body": "@aldanor: just that for the <i>specific</i> problem given, <code>Methods_0</code> et al. could just be plain boring functions, and <code>methods</code> <code>[method_0 as fn(), method_1]</code>"}], "answers": [{"tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": false, "score": 1, "last_activity_date": 1423178445, "creation_date": 1423178445, "answer_id": 28355938, "question_id": 28351778, "link": "https://stackoverflow.com/questions/28351778/registering-trait-implementations-factory-method-for-trait-objects/28355938#28355938", "title": "&quot;Registering&quot; trait implementations + factory method for trait objects", "body": "<p>So, this is probably extremely buggy, but it works as a proof of concept.</p>\n\n<p>It is possible to use Cargo's <a href=\"http://doc.crates.io/build-script.html#case-study:-code-generation\" rel=\"nofollow\">code generation support</a> to make the introspection at compile-time, by parsing (not exactly parsing in this case, but you get the idea) the present implementations, and generating the boilerplate necessary to make <code>Object::new()</code> work.</p>\n\n<p>The code is pretty convoluted and has no error handling whatsoever, but works.</p>\n\n<p>Tested on <code>rustc 1.0.0-dev (2c0535421 2015-02-05 15:22:48 +0000)</code>\n(<a href=\"https://github.com/renato-zannon/rust-generated\" rel=\"nofollow\">See on github</a>)</p>\n\n<p><code>src/main.rs</code>:</p>\n\n<pre><code>pub mod implementations;\nmod generated_glue {\n    include!(concat!(env!(\"OUT_DIR\"), \"/generated_glue.rs\"));\n}\n\nuse generated_glue::Object;\n\npub trait Methods {\n    fn func(&amp;self);\n}\n\npub struct Methods_2;\nimpl Methods for Methods_2 {\n    fn func(&amp;self) {\n        println!(\"baz\");\n    }\n}\n\nfn main() {\n    Object::new(2).func();\n}\n</code></pre>\n\n<p><code>src/implementations.rs</code>:</p>\n\n<pre><code>use super::Methods;\n\npub struct Methods_0;\nimpl Methods for Methods_0 {\n    fn func(&amp;self) {\n        println!(\"foo\");\n    }\n}\n\npub struct Methods_1;\nimpl Methods for Methods_1 {\n    fn func(&amp;self) {\n        println!(\"bar\");\n    }\n\n}\n</code></pre>\n\n<p><code>build.rs</code>:</p>\n\n<pre><code>#![feature(core, unicode, path, io, env)]\n\nuse std::env;\nuse std::old_io::{fs, File, BufferedReader};\nuse std::collections::HashMap;\n\nfn main() {\n    let target_dir      = Path::new(env::var_string(\"OUT_DIR\").unwrap());\n    let mut target_file = File::create(&amp;target_dir.join(\"generated_glue.rs\")).unwrap();\n\n    let source_code_path = Path::new(file!()).join_many(&amp;[\"..\", \"src/\"]);\n\n    let source_files = fs::readdir(&amp;source_code_path).unwrap().into_iter()\n        .filter(|path| {\n            match path.str_components().last() {\n                Some(Some(filename))  =&gt; filename.split('.').last() == Some(\"rs\"),\n                _                     =&gt; false\n            }\n        });\n\n    let mut implementations = HashMap::new();\n\n    for source_file_path in source_files {\n        let relative_path = source_file_path.path_relative_from(&amp;source_code_path).unwrap();\n        let source_file_name = relative_path.as_str().unwrap();\n\n        implementations.insert(source_file_name.to_string(), vec![]);\n        let mut file_implementations = &amp;mut implementations[*source_file_name];\n\n        let mut source_file = BufferedReader::new(File::open(&amp;source_file_path).unwrap());\n\n        for line in source_file.lines() {\n            let line_str = match line {\n                Ok(line_str) =&gt; line_str,\n                Err(_)       =&gt; break,\n            };\n\n            if line_str.starts_with(\"impl Methods for Methods_\") {\n                const PREFIX_LEN: usize = 25;\n\n                let number_len = line_str[PREFIX_LEN..].chars().take_while(|chr| {\n                    chr.is_digit(10)\n                }).count();\n\n                let number: i32 = line_str[PREFIX_LEN..(PREFIX_LEN + number_len)].parse().unwrap();\n                file_implementations.push(number);\n            }\n        }\n    }\n\n    writeln!(&amp;mut target_file, \"use super::Methods;\").unwrap();\n\n    for (source_file_name, impls) in &amp;implementations {\n        let module_name = match source_file_name.split('.').next() {\n            Some(\"main\") =&gt; \"super\",\n            Some(name)   =&gt; name,\n            None         =&gt; panic!(),\n        };\n\n        for impl_number in impls {\n            writeln!(&amp;mut target_file, \"use {}::Methods_{};\", module_name, impl_number).unwrap();\n        }\n    }\n\n    let all_impls = implementations.values().flat_map(|impls| impls.iter());\n\n    writeln!(&amp;mut target_file, \"\npub struct Object;\n\nimpl Object {{\n    pub fn new(impl_number: i32) -&gt; Box&lt;Methods + 'static&gt; {{\n        match impl_number {{\n    \").unwrap();\n\n    for impl_number in all_impls {\n        writeln!(&amp;mut target_file,\n\"           {} =&gt; Box::new(Methods_{}),\", impl_number, impl_number).unwrap();\n    }\n\n    writeln!(&amp;mut target_file, \"\n           _ =&gt; panic!(\\\"Unknown impl number: {{}}\\\", impl_number),\n        }}\n    }}\n}}\").unwrap();\n}\n</code></pre>\n\n<p>The generated code:</p>\n\n<pre><code>use super::Methods;\nuse super::Methods_2;\nuse implementations::Methods_0;\nuse implementations::Methods_1;\n\npub struct Object;\n\nimpl Object {\n    pub fn new(impl_number: i32) -&gt; Box&lt;Methods + 'static&gt; {\n        match impl_number {\n\n           2 =&gt; Box::new(Methods_2),\n           0 =&gt; Box::new(Methods_0),\n           1 =&gt; Box::new(Methods_1),\n\n           _ =&gt; panic!(\"Unknown impl number: {}\", impl_number),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1423178445, "creation_date": 1423162286, "last_edit_date": 1423166692, "question_id": 28351778, "link": "https://stackoverflow.com/questions/28351778/registering-trait-implementations-factory-method-for-trait-objects", "title": "&quot;Registering&quot; trait implementations + factory method for trait objects", "body": "<p>Say we want to have objects implementations switched at runtime, we'd do something like this:</p>\n\n<pre><code>pub trait Methods {\n    fn func(&amp;self);\n}\n\npub struct Methods_0;\nimpl Methods for Methods_0 {\n    fn func(&amp;self) {\n        println!(\"foo\");\n    }\n}\n\npub struct Methods_1;\nimpl Methods for Methods_1 {\n    fn func(&amp;self) {\n        println!(\"bar\");\n    }\n}\n\npub struct Object&lt;'a&gt; { //'\n    methods: &amp;'a (Methods + 'a),\n}\n\nfn main() {\n    let methods: [&amp;Methods; 2] = [&amp;Methods_0, &amp;Methods_1];\n    let mut obj = Object { methods: methods[0] };\n    obj.methods.func();\n    obj.methods = methods[1];\n    obj.methods.func();\n}\n</code></pre>\n\n<p>Now, what if there are hundreds of such implementations? E.g. imagine implementations of cards for collectible card game where every card does something completely different and is hard to generalize; or imagine implementations for opcodes for a huge state machine. Sure you can argue that a different design pattern can be used -- but that's not the point of this question...</p>\n\n<p>Wonder if there is any way for these Impl structs to somehow \"register\" themselves so they can be looked up later by a factory method? I would be happy to end up with a magical macro or even a plugin to accomplish that.</p>\n\n<p>Say, in D you can use templates to register the implementations -- and if you can't for some reason, you can always inspect modules at compile-time and generate new code via mixins; there are also user-defined attributes that can help in this. In Python, you would normally use a metaclass so that every time a new child class is created, a ref to it is stored in the metaclass's registry which allows you to look up implementations by name or parameter; this can also be done via decorators if implementations are simple functions.</p>\n\n<p>Ideally, in the example above you would be able to create Object as</p>\n\n<pre><code>Object::new(0)\n</code></pre>\n\n<p>where the value <code>0</code> is only known at <em>runtime</em> and it would magically return you an Object { methods: &amp;Methods_0 }, and the body of new() would <em>not</em> have the implementations hard-coded like so \"methods: [&Methods; 2] = [&amp;Methods_0, &amp;Methods_1]\", instead it should be somehow inferred automatically.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423121756, "post_id": 28337697, "comment_id": 45022321, "body": "<b>No. They&#39;re very clearly different types if you look at the source code, nevermind the compiler telling you that they&#39;re different types.</b> - they <b>all</b> implement the trait Digest and <code>Hmac::new()</code> accepts <code>Digest</code> as well. How can they be a different type?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 5, "creation_date": 1423128556, "post_id": 28337697, "comment_id": 45025705, "body": "@AlexanderSupertramp: That they implement a common trait is irrelevant: they are different types.  All builtin integers implement <code>Int</code>, but they are still different types.  The <code>Digest</code> trait is just a common interface for interacting with multiple, distinct types."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423130126, "post_id": 28337697, "comment_id": 45026672, "body": "But <code>Hmac::new()</code> accepts <code>Digest</code> (<b>not</b> only the type which <code>Sha256</code> has). What does that mean? <code>Hmac::new()</code>  can accept any struct which implements it."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 4, "creation_date": 1423133753, "post_id": 28337697, "comment_id": 45028766, "body": "@AlexanderSupertramp: No, it doesn&#39;t.  If you look at the <a href=\"https://github.com/DaGenix/rust-crypto/blob/master/src/hmac.rs#L61-L80\" rel=\"nofollow noreferrer\">code where <code>Hmac::new</code> is defined</a>, you&#39;ll see it accepts <code>D: Digest</code>, which is to say: it accepts an arbitrary type <code>D</code> provided that <code>D</code> implements the <code>Digest</code> trait.  In other words: <code>Hmac::new</code> can accept any <b>single</b> type that implements <code>Digest</code>, not <b>all</b> of them.  That would require dynamic typing, which Rust doesn&#39;t have.  Also, your statement &quot;<b>not</b> only the type which <code>Sha256</code> has&quot; is misleading: <code>Sha256</code> doesn&#39;t have a type, it <b>is</b> a type."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423134307, "post_id": 28337697, "comment_id": 45029111, "body": "<b>it accepts an arbitrary type D provided that D implements the Digest trait.</b> - does Sha256 implement it? Yes. does Sha384 implement it? Yes. does Sha512 implement it? Yes."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 4, "creation_date": 1423135722, "post_id": 28337697, "comment_id": 45029948, "body": "@AlexanderSupertramp: Again, irrelevant.  Each <code>Sha*</code> is a different type.  Each <code>Hmac&lt;Sha*&gt;</code> is a different type.  It doesn&#39;t matter what traits they do or don&#39;t implement.  <code>Hmac</code> can only deal with <b>one</b> of those types at a time.  If this still doesn&#39;t make sense, I can only suggest you go and re-read the <a href=\"http://doc.rust-lang.org/book/traits.html\" rel=\"nofollow noreferrer\">Rust Book section on Traits</a>, particularly where &quot;monomorphization&quot; is explained."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1423140246, "post_id": 28337697, "comment_id": 45032848, "body": "Do you mean Rust has to know the  exact type of Digest statically, during the compile-time?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 5, "creation_date": 1423141144, "post_id": 28337697, "comment_id": 45033373, "body": "@AlexanderSupertramp: No, it has to know the type of <code>D</code>, which is simply a type that implements <code>Digest</code>.  SO is now warning against long comment discussions; if you still don&#39;t understand, I&#39;d recommend asking on the <a href=\"https://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust\" rel=\"nofollow noreferrer\">#rust IRC channel</a>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1423118529, "creation_date": 1423118529, "answer_id": 28337697, "question_id": 28337381, "link": "https://stackoverflow.com/questions/28337381/an-argument-type-mismatch-in-cryptohmachmacnew/28337697#28337697", "title": "An argument type mismatch in crypto::hmac::Hmac::new", "body": "<blockquote>\n  <p>Doesn't <code>Sha256::new()</code> have the same type as <code>Sha384::new()</code> and <code>Sha512::new()</code>?</p>\n</blockquote>\n\n<p>No.  They're <em>very clearly</em> different types if you look at the source code, nevermind the compiler <em>telling you</em> that they're different types.</p>\n\n<p>More than that, you're also trying to create one of three different kinds of <code>Hmac</code> in a single expression, which is <em>also</em> impossible.  If you look at the definition in the source, you'll see</p>\n\n<pre><code>impl &lt;D: Digest&gt; Hmac&lt;D&gt; {\n    // ...\n    pub fn new(mut digest: D, key: &amp;[u8]) -&gt; Hmac&lt;D&gt; {\n        // ...\n    }\n    // ...\n}\n</code></pre>\n\n<p>That is, there's a different <code>Hmac</code> type for every possible <code>Digest</code> type.</p>\n\n<p>You need to go through some kind of dynamic dispatch for this to work.  For example:</p>\n\n<pre><code>let (hmac_sha256, hmac_sha384, hmac_sha512);\nlet mac: &amp;mut crypto::mac::Mac = match myType {\n    MyType::Type1 =&gt; {\n        hmac_sha256 = Hmac::new(Sha256::new(), my_secret.to_string().as_bytes();\n        &amp;mut hmac_sha256 as &amp;mut crypto::mac::Mac\n    },\n    // ...\n};\n</code></pre>\n\n<p>Or you could use <code>Box</code>es if references won't work.</p>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 154, "favorite_count": 0, "answer_count": 1, "score": -4, "last_activity_date": 1423118529, "creation_date": 1423116980, "question_id": 28337381, "link": "https://stackoverflow.com/questions/28337381/an-argument-type-mismatch-in-cryptohmachmacnew", "title": "An argument type mismatch in crypto::hmac::Hmac::new", "body": "<p>I'm using <a href=\"https://github.com/DaGenix/rust-crypto\" rel=\"nofollow\">https://github.com/DaGenix/rust-crypto</a> and having some odd error:</p>\n\n<pre><code>extern crate crypto;\nuse crypto::sha2::{Sha256, Sha384, Sha512};\nuse crypto::hmac::Hmac;\nuse crypto::digest::Digest;\nuse crypto::mac::Mac;\n\n\nenum MyType {\n  Type1,\n  Type2,\n  Type3\n}\n\n//......\n\nlet mut hmac = Hmac::new(match myType {\n   MyType::Type1 =&gt; Sha256::new(),\n   MyType::Type2 =&gt; Sha384::new(),\n   MyType::Type3 =&gt; Sha512::new()\n  }, my_secret.to_string().as_bytes()\n);\n</code></pre>\n\n<p>The error is:</p>\n\n<pre><code>error: match arms have incompatible types:\n expected `crypto::sha2::Sha256`,\n    found `crypto::sha2::Sha384`\n(expected struct `crypto::sha2::Sha256`,\n    found struct `crypto::sha2::Sha384`) [E0308]\n   let mut hmac = Hmac::new(match algorithm {\n       MyType::Type1 =&gt; Sha256::new(),\n       MyType::Type2 =&gt; Sha384::new(),\n       MyType::Type3 =&gt; Sha512::new(),\n       _ =&gt; panic!()\n     }, secret.to_string().as_bytes()\n note: match arm with an incompatible type\n       MyType::Type2 =&gt; Sha384::new(),\n                                         ^~~~~~~~~~~~~\n help: methods from traits can only be called if the trait is implemented and in scope; the following traits define a method `input`, perhaps you need to implement one of them:\n help: candidate #1: `crypto::cryptoutil::FixedBuffer`\n help: candidate #2: `crypto::digest::Digest`\n help: candidate #3: `crypto::mac::Mac`\n help: methods from traits can only be called if the trait is implemented and in scope; the following traits define a method `result`, perhaps you need to implement one of them:\n help: candidate #1: `crypto::digest::Digest`\n help: candidate #2: `crypto::mac::Mac`\n</code></pre>\n\n<p>Why is that? Doesn't <code>Sha256::new()</code> have the same type as <code>Sha384::new()</code> and <code>Sha512::new()</code>?</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423109086, "post_id": 28335821, "comment_id": 45018102, "body": "Why are you <i>reading</i> from the pointer returned by <code>cass_cluster_new</code>? From the <a href=\"https://github.com/datastax/cpp-driver/\" rel=\"nofollow noreferrer\">README</a>, it looks like this constructor is the normal C pattern of returning a pointer to an opaque blob of data. You shouldn&#39;t read it, simply pass it around and back to the method(s) that expect it."}, {"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423109623, "post_id": 28335821, "comment_id": 45018255, "body": "Sorry, I got thrown off by the solution to the ICE that was previously blocking me. I switch this back to just being a dereference, which results in the exact same symptoms. Should that be valid, or do I <i>have</i> to the wrap using an &amp;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423109726, "post_id": 28335821, "comment_id": 45018284, "body": "How much experience do you already have with C / C++? That might help me better formulate a good answer."}, {"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423109851, "post_id": 28335821, "comment_id": 45018321, "body": "Enough to understand the constructs, but not enough to be able to reason about them well. Have dabbled in them here and there over the years, but mostly coming from a java/perl/etc background. I appreciate your efforts. thanks for asking :)"}], "answers": [{"comments": [{"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1423111142, "post_id": 28336274, "comment_id": 45018686, "body": "Extremely helpful, thanks. I think this gives me most of the mental tools necessary to progress. Greatly appreciated."}, {"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1423111393, "post_id": 28336274, "comment_id": 45018759, "body": "I guess the fact that bindgen generates      pub fn cass_cluster_new() -&gt; <i>mut CassCluster; instead of      pub fn cass_cluster_new() -&gt; *mut c_void;pub fn cass_cluster_new() -&gt; *mut c_void; means that I have to make the choice to modify the output of bindgen as a form of documentation, or else use the *mut CassCluster but make sure that I&#39;m *only</i> using it as if it were the c_void opaque blob of your version"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1423111395, "post_id": 28336274, "comment_id": 45018761, "body": "You mentioned that you were using bindgen, which I assume is <a href=\"https://github.com/crabtw/rust-bindgen\" rel=\"nofollow noreferrer\">this project</a>. I haven&#39;t used it, but my guess is that they use pointers to an empty enum to provide some type-safety for the raw pointers. This is useful when you start having multiple types of raw pointer. The important takeaway is that you shouldn&#39;t dereference these pointers yourself - let the native library handle that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1423111508, "post_id": 28336274, "comment_id": 45018798, "body": "Said another way, you could have <code>struct Cluster(*mut CassCluster)</code> instead of <code>struct Cluster(*mut c_void)</code>, and everything would still work out. Just never try to peek inside that pointer! ^_^"}, {"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1423111531, "post_id": 28336274, "comment_id": 45018806, "body": "yup..i was trying to say the same thing in my cross comment. makes perfect sense"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1423110777, "creation_date": 1423110777, "answer_id": 28336274, "question_id": 28335821, "link": "https://stackoverflow.com/questions/28335821/cant-pass-a-newtype-wrapped-unsafe-c-struct-without-causing-illegal-instruction/28336274#28336274", "title": "can&#39;t pass a newtype-wrapped unsafe C struct without causing illegal instruction", "body": "<p>I think you are going about this from the wrong angle - you should not be dereferencing the pointer that the C library is returning to you. You don't actually even know what the makeup of the pointed-at object is!</p>\n\n<p>Instead, you should simply <em>keep</em> the pointer and pass it back to the functions that expect it. I've taken some of your code and reorganized it. Here, we have a struct called <code>Cluster</code> which will own the pointer returned by <code>cass_cluster_new</code>. We create a small example method that does something interesting to the cluster, and we also deal with freeing our resources when we are done with the <code>Cluster</code>.</p>\n\n<p>Note that this <code>Cluster</code> struct actually takes up space, as opposed to the empty <code>Cluster</code> enum that you currently have. The empty enum takes up <strong>zero</strong> space, and so it's going to be optimized in interesting ways. However, you actually need to keep the pointer <em>somewhere</em>!</p>\n\n<p>The other thing is that we simply treat the return pointer from the library as a <code>c_void</code>. This is because we are <em>never</em> going to dereference it, so we just treat it as an opaque handle.</p>\n\n<pre><code>#![feature(libc)]\n\nextern crate libc;\n\nuse libc::{c_void,c_int};\n\nextern \"C\" {\n    pub fn cass_cluster_new() -&gt; *mut c_void;\n    pub fn cass_cluster_free(cluster: *mut c_void);\n    pub fn cass_cluster_set_port(cluster: *mut c_void, port: c_int); // ignoring return code\n}\n\nstruct Cluster(*mut c_void);\n\nimpl Cluster {\n    fn new() -&gt; Cluster {\n        Cluster(unsafe { cass_cluster_new() })\n    }\n\n    // N.B. Ports are better represented as u16! \n    fn set_port(&amp;mut self, port: i32) {\n        unsafe { cass_cluster_set_port(self.0, port) }\n    }\n}\n\nimpl Drop for Cluster {\n    fn drop(&amp;mut self) {\n        unsafe { cass_cluster_free(self.0) }\n    }\n}\n\nfn main() {\n    let mut cluster = Cluster::new();\n    cluster.set_port(5432);\n\n    // cluster is automatically dropped when it goes out of scope\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/n53r85\" rel=\"nofollow\">Playpen</a>)</p>\n"}], "owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 187, "favorite_count": 0, "accepted_answer_id": 28336274, "answer_count": 1, "score": 1, "last_activity_date": 1423110777, "creation_date": 1423107721, "last_edit_date": 1423109466, "question_id": 28335821, "link": "https://stackoverflow.com/questions/28335821/cant-pass-a-newtype-wrapped-unsafe-c-struct-without-causing-illegal-instruction", "title": "can&#39;t pass a newtype-wrapped unsafe C struct without causing illegal instruction", "body": "<p>I am working on wrapping the unsafe FFI layer <a href=\"https://github.com/tupshin/cql-ffi/\" rel=\"nofollow\">here</a>, and am running into a very strange problem. (Latest nightly)</p>\n\n<pre><code>extern crate cql_ffi;\nuse std::ffi::CString;\n\n#[allow(missing_copy_implementations)]\npub struct CassCluster(pub cql_ffi::CassCluster);\n\nfn main() {\n\n    let cluster = &amp;mut CassCluster(unsafe{*cql_ffi::cass_cluster_new()});\n    println!(\"trying method 1\");\n    let result1 = method1();\n\n    println!(\"trying method 2\");\n    let result2 = method2(cluster);\n}\n\npub fn method1() {\n    let cluster = &amp;mut CassCluster(unsafe{*cql_ffi::cass_cluster_new()});    \n    let result = unsafe{cql_ffi::cass_cluster_set_contact_points(&amp;mut cluster.0,  CString::from_slice(\"127.0.0.1\".as_bytes()).as_ptr() as *const i8)};\n}\n\npub fn method2(cluster: &amp;mut CassCluster) {\n    let result = unsafe{cql_ffi::cass_cluster_set_contact_points(&amp;mut cluster.0,  CString::from_slice(\"127.0.0.1\".as_bytes()).as_ptr() as *const i8)};\n}\n</code></pre>\n\n<p>Note that method 1 and 2 only differ in whether the cluster was passed in to the fn or created inside of it.</p>\n\n<p>When run:</p>\n\n<pre><code>trying method 1\ntrying method 2\nIllegal instruction\n</code></pre>\n\n<p>Whether or not method1 is called, method2 always fails with an illegal instruction.</p>\n\n<p>The valgrind produced stacktrace might be interesting:</p>\n\n<pre><code>trying method 2\n==19145== Invalid write of size 8\n==19145==    at 0x6A10ACF: std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.19)\n==19145==    by 0x4F78367: std::list&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_insert(std::_List_iterator&lt;std::string&gt;, std::string const&amp;) (in /usr/local/lib/libcassandra.so.1.0.0.rc1)\n==19145==    by 0x4F77E13: std::list&lt;std::string, std::allocator&lt;std::string&gt; &gt;::push_back(std::string const&amp;) (in /usr/local/lib/libcassandra.so.1.0.0.rc1)\n==19145==    by 0x4F8AE69: cass_cluster_set_contact_points (in /usr/local/lib/libcassandra.so.1.0.0.rc1)\n==19145==    by 0x10DDC3: method2::h2b76fca37ae2e2878ba (test.rs:25)\n==19145==    by 0x10DA1B: main::hc39cc26c65e20849maa (test.rs:13)\n==19145==    by 0x11C198: rust_try_inner (in /home/tupshin/workspaces/rust/cql-ffi-safe/target/test)\n==19145==    by 0x11C185: rust_try (in /home/tupshin/workspaces/rust/cql-ffi-safe/target/test)\n==19145==    by 0x11988C: rt::lang_start::hd3d7c7415c447b9fdBB (in /home/tupshin/workspaces/rust/cql-ffi-safe/target/test)\n==19145==    by 0x10DC04: main (in /home/tupshin/workspaces/rust/cql-ffi-safe/target/test)\n==19145==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n</code></pre>\n"}, {"tags": ["shared-libraries", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423100947, "post_id": 28334628, "comment_id": 45016157, "body": "Why do you want to remove the hash?"}, {"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423102303, "post_id": 28334628, "comment_id": 45016447, "body": "@ChrisMorgan I guess just for consistency sake with the rest of my libs dir.  If for any reason, it ever changes, I would really hate to go through and adjust anything that needs that hash change, but unaware of what would cause the hash to change."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1423103241, "post_id": 28334628, "comment_id": 45016651, "body": "What about just having a build step (somewhere) that does <code>cp target&#47;release&#47;mylib-*.so libs&#47;mylib.so</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1423103392, "post_id": 28334628, "comment_id": 45016688, "body": "@ChrisMorgan I&#39;d be interested in how to get the version number instead of the hash. For example, I have <code>libpng.dylib</code>, <code>libpng16.dylib</code>, and <code>libpng16.16.dylib</code> installed. I&#39;d like to be able to create libraries that fit in with the rest of the ecosystem."}, {"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1423105125, "post_id": 28334628, "comment_id": 45017102, "body": "I&#39;ve got that as a build step now, just wondering if there was a way to get rid of it, but I am guessing I&#39;m stuck with running a bash command on it at some point..."}], "answers": [{"comments": [{"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1423105396, "post_id": 28335376, "comment_id": 45017170, "body": "Unless the compiler checks against the name first, I don&#39;t think there is a way to tell until you get linker errors?  <code>rustc --version</code> doesn&#39;t show anything near that hash?  And at that point, it doesn&#39;t seem useful in the name unless there is a way to tell before linking?  I&#39;m linking it with a C++ shim, so I have C ABI exposing core entry functions of use..."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1423130120, "post_id": 28335376, "comment_id": 45026667, "body": "It&#39;s more than just the version, there&#39;s other information as well."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 2, "last_activity_date": 1423104684, "creation_date": 1423104684, "answer_id": 28335376, "question_id": 28334628, "link": "https://stackoverflow.com/questions/28334628/removing-hash-extension-from-cargo-dylib-naming/28335376#28335376", "title": "Removing hash extension from cargo dylib naming", "body": "<p>This hash is the result of a bunch of metadata, which, IIRC, includes the version of the Rust compiler used to make it. Because Rust does not have a defined ABI, you can only use this library with the exact same SHA of the compiler which was used to make it. Erasing this data would erase your ability to know if you can actually successfully use it or not.</p>\n"}], "owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 244, "favorite_count": 0, "accepted_answer_id": 28335376, "answer_count": 1, "score": 3, "last_activity_date": 1423104684, "creation_date": 1423099069, "question_id": 28334628, "link": "https://stackoverflow.com/questions/28334628/removing-hash-extension-from-cargo-dylib-naming", "title": "Removing hash extension from cargo dylib naming", "body": "<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[lib]\nname = \"faceblaster-engine\"\ncrate_type = [\"dylib\"]\n</code></pre>\n\n<p>Whenever I execute <code>cargo build</code> my dylib is named:</p>\n\n<p><code>libfaceblaster-engine-f09635dc7c9bd155.so</code>.</p>\n\n<p>Is there anyway to add something to the <code>.toml</code> file to remove the hash being placed on the end?</p>\n\n<p>Thanks in advance for any help!</p>\n"}]