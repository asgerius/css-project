[{"tags": ["macos", "rust", "embed", "dylib", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 560, "user_id": 2520171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dea54aa4d218a6d8fc0263dc5a06caa?s=128&d=identicon&r=PG", "display_name": "jv-dev", "link": "https://stackoverflow.com/users/2520171/jv-dev"}, "edited": false, "score": 0, "creation_date": 1573230747, "post_id": 44175499, "comment_id": 103826821, "body": "What source did you use to discover this in your research?"}, {"owner": {"reputation": 382, "user_id": 837913, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/34b261e42380a6b5251ce8513c8ab350?s=128&d=identicon&r=PG", "display_name": "jefftime", "link": "https://stackoverflow.com/users/837913/jefftime"}, "reply_to_user": {"reputation": 560, "user_id": 2520171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7dea54aa4d218a6d8fc0263dc5a06caa?s=128&d=identicon&r=PG", "display_name": "jv-dev", "link": "https://stackoverflow.com/users/2520171/jv-dev"}, "edited": false, "score": 0, "creation_date": 1573514826, "post_id": 44175499, "comment_id": 103899455, "body": "@jv-dev It&#39;s been a while, so I think the <i>exact</i> documentation has changed, but here are two different links talking about linkage in Rust:  <a href=\"https://doc.rust-lang.org/rustc/command-line-arguments.html?highlight=dylib#--crate-type-a-list-of-types-of-crates-for-the-compiler-to-emit\" rel=\"nofollow noreferrer\">doc.rust-lang.org/rustc/&hellip;</a>  <a href=\"https://doc.rust-lang.org/reference/linkage.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/linkage.html</a>"}], "tags": [], "owner": {"reputation": 382, "user_id": 837913, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/34b261e42380a6b5251ce8513c8ab350?s=128&d=identicon&r=PG", "display_name": "jefftime", "link": "https://stackoverflow.com/users/837913/jefftime"}, "is_accepted": true, "score": 8, "last_activity_date": 1495699773, "creation_date": 1495699773, "answer_id": 44175499, "question_id": 44169635, "link": "https://stackoverflow.com/questions/44169635/rust-cargo-dylib-clarification/44175499#44175499", "title": "Rust cargo dylib clarification", "body": "<p>After a bit more research, it turns out <code>cdylib</code> statically links the Rust dependencies, and <code>dylib</code> is for dynamic linking with other Rust projects.</p>\n\n<p>As for embedding, everything I found suggests that statically linking the Rust library is the recommended way. For using the Rust library dynamically, setting <code>rpath = true</code> in my <code>[profile]</code> section solved the issues with redundant dylibs.</p>\n"}], "owner": {"reputation": 382, "user_id": 837913, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/34b261e42380a6b5251ce8513c8ab350?s=128&d=identicon&r=PG", "display_name": "jefftime", "link": "https://stackoverflow.com/users/837913/jefftime"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1863, "favorite_count": 0, "accepted_answer_id": 44175499, "answer_count": 1, "score": 6, "last_activity_date": 1499348824, "creation_date": 1495665758, "last_edit_date": 1499348824, "question_id": 44169635, "link": "https://stackoverflow.com/questions/44169635/rust-cargo-dylib-clarification", "title": "Rust cargo dylib clarification", "body": "<p>I have a Rust project that I want to embed in another application as a dylib. I have <code>crate_type = [\"dylib\"]</code> set in my <code>Cargo.toml</code>, but I'm not sure if this should be <code>cdylib</code> instead. </p>\n\n<p>When I build the project, it produces a <code>libfoo.dylib</code> in <code>target/debug</code> as expected, but looking at <code>otool -L</code> it also links against a <code>libfoo.dylib</code> in <code>target/debug/deps/</code>. If I'm going to be using this in another application, will I have to provide both dylibs?</p>\n\n<p>Also, when the crate type is <code>cdylib</code>, it'll produce two dylibs as well but the one in deps will have a hash tacked onto the end of the filename. I'm not sure what the difference between these two crate types are.</p>\n\n<p>I can avoid getting two dylibs by using just rustc, however I'd like to use cargo. What is the recommended way of going about embedding Rust as a dylib in other applications? </p>\n\n<p>I'm using Rust on macOS 10.12 if that's significant</p>\n"}, {"tags": ["algorithm", "rust", "bellman-ford", "petgraph"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495650974, "post_id": 44165951, "comment_id": 75348617, "body": "<code>the following implementations were found: &lt;&amp;&#39;a petgraph ...</code> Try to replace <code>deps</code> with <code>&amp;deps</code>"}], "answers": [{"tags": [], "owner": {"reputation": 5087, "user_id": 2942471, "user_type": "registered", "accept_rate": 57, "profile_image": "https://graph.facebook.com/100000008666513/picture?type=large", "display_name": "manonthemat", "link": "https://stackoverflow.com/users/2942471/manonthemat"}, "is_accepted": false, "score": 2, "last_activity_date": 1495676659, "last_edit_date": 1495676659, "creation_date": 1495665035, "answer_id": 44169500, "question_id": 44165951, "link": "https://stackoverflow.com/questions/44165951/using-the-bellman-ford-algorithm-from-petgraph/44169500#44169500", "title": "Using the Bellman-Ford algorithm from petgraph", "body": "<p>From what I have gathered, the implemented Bellman-Ford algorithm works with floats, not integers.</p>\n\n<p>Using floats instead of the <code>u64</code> and referencing <code>deps</code> later does the trick:</p>\n\n<pre><code>use petgraph::algo::bellman_ford;\n\nfn main() {\n    let mut deps = Graph::&lt;&amp;str, f64&gt;::new();\n    let a = deps.add_node(\"later\");\n    let b = deps.add_node(\"hello\");\n    deps.update_edge(a, b, 5.0);\n    deps.update_edge(b, a, 10.0);\n\n    let result = bellman_ford(&amp;deps, NodeIndex::new(0));\n    println!(\"{:?}\", result);\n}\n</code></pre>\n"}], "owner": {"reputation": 266, "user_id": 4628795, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45b01fe7dab4588128ec2495c4becea2?s=128&d=identicon&r=PG", "display_name": "adrian", "link": "https://stackoverflow.com/users/4628795/adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 287, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1580252400, "creation_date": 1495650139, "last_edit_date": 1580252400, "question_id": 44165951, "link": "https://stackoverflow.com/questions/44165951/using-the-bellman-ford-algorithm-from-petgraph", "title": "Using the Bellman-Ford algorithm from petgraph", "body": "<p>I would like to use the Bellman-Ford algorithm from the petgraph crate. Here is a very simple sample program which does not compile:</p>\n\n<pre><code>extern crate petgraph;\n\nuse petgraph::prelude::*;\nuse petgraph::dot::{Dot, Config};\nuse petgraph::algo::bellman_ford;\n\nfn main() {\n    println!(\"Hello, world!\");\n\n    let mut deps = Graph::&lt;&amp;str, u64&gt;::new();\n    let a = deps.add_node(\"later\");\n    let b = deps.add_node(\"hello\");\n    deps.update_edge(a, b, 5);\n    deps.update_edge(b, a, 10);\n\n    let result = bellman_ford(deps, NodeIndex::new(0));\n}\n</code></pre>\n\n<p>When I compile this program I get this error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `petgraph::Graph&lt;&amp;str, f64&gt;: petgraph::visit::IntoNodeIdentifiers` is not satisfied\n  --&gt; src/main.rs:16:18\n   |\n16 |     let result = bellman_ford(deps, NodeIndex::new(0));\n   |                  ^^^^^^^^^^^^ the trait `petgraph::visit::IntoNodeIdentifiers` is not implemented for `petgraph::Graph&lt;&amp;str, f64&gt;`\n   |\n   = help: the following implementations were found:\n             &lt;&amp;'a petgraph::Graph&lt;N, E, Ty, Ix&gt; as petgraph::visit::IntoNodeIdentifiers&gt;\n   = note: required by `petgraph::algo::bellman_ford`\n\nerror[E0277]: the trait bound `petgraph::Graph&lt;&amp;str, f64&gt;: petgraph::visit::IntoEdges` is not satisfied\n  --&gt; src/main.rs:16:18\n   |\n16 |     let result = bellman_ford(deps, NodeIndex::new(0));\n   |                  ^^^^^^^^^^^^ the trait `petgraph::visit::IntoEdges` is not implemented for `petgraph::Graph&lt;&amp;str, f64&gt;`\n   |\n   = help: the following implementations were found:\n             &lt;&amp;'a petgraph::Graph&lt;N, E, Ty, Ix&gt; as petgraph::visit::IntoEdges&gt;\n   = note: required by `petgraph::algo::bellman_ford`\n</code></pre>\n"}, {"tags": ["generics", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 7692016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df24e565d80d2cf080879627ffbf3402?s=128&d=identicon&r=PG&f=1", "display_name": "R. Ding", "link": "https://stackoverflow.com/users/7692016/r-ding"}, "edited": false, "score": 0, "creation_date": 1495892053, "post_id": 44183687, "comment_id": 75445605, "body": "Thank you! It compiles after doing the same modification on the test code, and I start to understand why the problem exists. However, the real situation is that the <code>transform()</code> is a function provided as a third-party library(actually hyper::client::Client::get()). I&#39;m still wondering why <code>transform_and_arm(self)</code> can&#39;t work. Since devil lives until line C, it won&#39;t outlive brace or Foo anyway, because the Foo is consumed after line C..."}, {"owner": {"reputation": 35, "user_id": 7692016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df24e565d80d2cf080879627ffbf3402?s=128&d=identicon&r=PG&f=1", "display_name": "R. Ding", "link": "https://stackoverflow.com/users/7692016/r-ding"}, "edited": false, "score": 0, "creation_date": 1495892574, "post_id": 44183687, "comment_id": 75445762, "body": "Another relevant observation is that uncommenting <code>devil.slay_the_world();</code> only won&#39;t cause a compile error, but uncommenting <code>devil.arm(buz);</code> then will. I&#39;m just wanting to consume all the fields of Foo in <code>transform_and_arm(self)</code>."}], "tags": [], "owner": {"reputation": 56, "user_id": 8059975, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/daMbi.jpg?s=128&g=1", "display_name": "bearbear2k", "link": "https://stackoverflow.com/users/8059975/bearbear2k"}, "is_accepted": true, "score": 0, "last_activity_date": 1495801383, "last_edit_date": 1495801383, "creation_date": 1495724380, "answer_id": 44183687, "question_id": 44164826, "link": "https://stackoverflow.com/questions/44164826/rust-lifetime-issue-when-dealing-with-into-generics/44183687#44183687", "title": "Rust lifetime issue when dealing with `Into` generics", "body": "<p><strong>EDIT</strong>: <em>My previous answer did not explain the problem very well. Here is another attempt.</em></p>\n\n<p>You are having this problem because <code>transform</code> is flawed. To find out why, let's see what lifetimes the compiler has inferred for <code>transform</code>:</p>\n\n<pre><code>fn transform&lt;'a&gt;(&amp;'a self, n: i32) -&gt; Devil&lt;'a&gt;\n</code></pre>\n\n<p>We can see that the compiler has decided to give the returned <code>Devil</code> the same lifetime as the reference to <code>self</code> that is passed to the function.</p>\n\n<p>Now, let's look at <code>Devil</code>:</p>\n\n<pre><code>struct Devil&lt;'a&gt; {\n    hp: i32,\n    weapon: Option&lt;Bar&lt;'a&gt;&gt;,\n}\n</code></pre>\n\n<p>We can see that <code>Devil</code>'s lifetime parameter is associated with its <code>weapon</code>.</p>\n\n<p>Looking back at <code>transform</code>, however...</p>\n\n<pre><code>fn transform&lt;'a&gt;(&amp;'a self, n: i32) -&gt; Devil&lt;'a&gt; {\n    Devil {\n        hp: self.x + n,\n        weapon: None,\n    }\n}\n</code></pre>\n\n<p>...it is obvious that the <code>weapon</code>, which is the sole purpose of <code>Devil</code>'s lifetime parameter, is in no way related to the reference to <code>self</code>, so the lifetimes of <code>&amp;self</code> and <code>Devil</code> should have <em>nothing to do with each other</em>.</p>\n\n<p>This leads to problems later when the <code>Devil</code> is assigned an actual weapon, as we might want to give the <code>Devil</code> a <code>weapon</code> with a different lifetime, and there is no reason that we should not be able to do this.</p>\n\n<p>Also, the current implementation of <code>transform</code> forbids the returned <code>Devil</code> from outliving the reference to <code>self</code>, and this need not be the case.</p>\n\n<p>To fix the problem, explicitly annotate <code>transform</code> to make it clear that <code>&amp;self</code> and the returned <code>Devil</code> have unrelated lifetimes:</p>\n\n<pre><code>fn transform&lt;'a, 'b&gt;(&amp;'a self, n: i32) -&gt; Devil&lt;'b&gt;\n</code></pre>\n"}], "owner": {"reputation": 35, "user_id": 7692016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df24e565d80d2cf080879627ffbf3402?s=128&d=identicon&r=PG&f=1", "display_name": "R. Ding", "link": "https://stackoverflow.com/users/7692016/r-ding"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 192, "favorite_count": 0, "accepted_answer_id": 44183687, "answer_count": 1, "score": 0, "last_activity_date": 1495801383, "creation_date": 1495646066, "last_edit_date": 1495724396, "question_id": 44164826, "link": "https://stackoverflow.com/questions/44164826/rust-lifetime-issue-when-dealing-with-into-generics", "title": "Rust lifetime issue when dealing with `Into` generics", "body": "<p><em>Thanks for correcting my way of asking questions. I have made several revisions to make the code compilable.</em></p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Brace {\n    x: i32,\n}\n\nimpl Brace {\n    fn transform(&amp;self, n: i32) -&gt; Devil {\n        Devil {\n            hp: self.x + n,\n            weapon: None,\n        }\n    }\n}\n\nstruct Bar&lt;'a&gt; {\n    tasty: &amp;'a str,\n}\n\nstruct Foo&lt;'a, B&gt;\n    where B: 'a + Into&lt;Bar&lt;'a&gt;&gt;\n{\n    brace: Brace,\n    buz: Option&lt;B&gt;, // buz is of generic type B, and is able to be turned into bar.\n    phantom: PhantomData&lt;&amp;'a B&gt;, // A marker that is used to resolve 'unused lifetime parameter a'\n}\n\nimpl&lt;'a, B: Into&lt;Bar&lt;'a&gt;&gt;&gt; Foo&lt;'a, B&gt; {\n    fn transform_and_arm(self) {\n        // line B\n        let brace1: Brace = self.brace;\n        let mut devil: Devil = brace1.transform(12345); // line A\n        let buz = self.buz.unwrap();\n        // Before this line, it passes the compiler.\n        // Uncommenting the following line causes compiler to argue that the brace1 at line A doesn't live long enough. It says that borrowed value must be valid for the lifetime 'a as defined on the body at line B, but the borrowed value only lives until line C.\n        // devil = devil.arm(buz);\n        // Although adding the above line fails, making the weapon directly won't cause the compiler to complain.\n        // Uncommenting the following line passes compiler.\n        // let weapon = buz.into();\n\n        // The compiler stops the devil from arming itself before I even try to write the following line.\n        // devil.slay_the_world();\n    } // line C\n}\n\nstruct Devil&lt;'a&gt; {\n    hp: i32,\n    weapon: Option&lt;Bar&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Devil&lt;'a&gt; {\n    fn arm&lt;B: Into&lt;Bar&lt;'a&gt;&gt;&gt;(mut self, biu: B) -&gt; Devil&lt;'a&gt; {\n        self.weapon = Some(biu.into());\n        self\n    }\n\n    fn slay_the_world(self) {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>The <code>transform_and_arm()</code> method is designed to consume an instance of <code>Foo</code> by taking away <code>brace</code> and <code>buz</code>. It calls <code>brace.transform()</code> to make <code>brace</code> a <code>Devil</code>. It strengthens the devil by feeding the devil with <code>buz.unwrap()</code>.</p>\n\n<p>The problem is that, calling <code>let weapon = buz.into();</code> is legal, while calling <code>devil = devil.arm(buz);</code> causes a lifetime problem.</p>\n\n<p>It seems that the problem is much related with the lifetime. If there were no 'a for Devil, then all these problems would vanish.</p>\n"}, {"tags": ["string", "rust", "optional"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1495643062, "post_id": 44163769, "comment_id": 75344213, "body": "Related discussion on ways of going from <code>Option&lt;String&gt;</code> to <code>Option&lt;&amp;str&gt;</code> is occurring in <a href=\"https://github.com/rust-lang/rfcs/pull/1792\" rel=\"nofollow noreferrer\">a proposed RFC</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1592858900, "last_edit_date": 1592858900, "creation_date": 1495642891, "answer_id": 44163769, "question_id": 44163624, "link": "https://stackoverflow.com/questions/44163624/why-does-optionstring-as-ref-not-deref-to-optionstr/44163769#44163769", "title": "Why does Option&lt;String&gt;.as_ref() not deref to Option&lt;&amp;str&gt;?", "body": "<p>Because that's how <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow noreferrer\"><code>Option::as_ref</code></a> is defined:</p>\n<pre><code>impl&lt;T&gt; Option&lt;T&gt; {\n    fn as_ref(&amp;self) -&gt; Option&lt;&amp;T&gt;\n}\n</code></pre>\n<p>Since you have an <code>Option&lt;String&gt;</code>, then the resulting type <em>must</em> be <code>Option&lt;&amp;String&gt;</code>.</p>\n<p>Instead, you can add in <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.as_str%60\" rel=\"nofollow noreferrer\"><code>String::as_str</code></a>:</p>\n<pre><code>maybe_string.as_ref().map(String::as_str).unwrap_or(&quot;none&quot;);\n</code></pre>\n<p>Or the shorter:</p>\n<pre><code>maybe_string.as_ref().map_or(&quot;none&quot;, String::as_str);\n</code></pre>\n<p>As of Rust 1.40, you can also use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref\" rel=\"nofollow noreferrer\"><code>Option::as_deref</code></a>.</p>\n<pre><code>maybe_string.as_deref().unwrap_or(&quot;none&quot;);\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31233938/155423\">Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;</a></li>\n</ul>\n"}], "owner": {"reputation": 77, "user_id": 3414682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61708bf7b031d5e9c28b03793b4605f3?s=128&d=identicon&r=PG&f=1", "display_name": "user3414682", "link": "https://stackoverflow.com/users/3414682/user3414682"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 868, "favorite_count": 1, "accepted_answer_id": 44163769, "answer_count": 1, "score": 5, "last_activity_date": 1592858900, "creation_date": 1495642410, "last_edit_date": 1558455132, "question_id": 44163624, "link": "https://stackoverflow.com/questions/44163624/why-does-optionstring-as-ref-not-deref-to-optionstr", "title": "Why does Option&lt;String&gt;.as_ref() not deref to Option&lt;&amp;str&gt;?", "body": "<p>I expect the same result for both of these code samples:</p>\n\n<pre><code>let maybe_string = Some(String::from(\"foo\"));\nlet string = if let Some(ref value) = maybe_string { value } else { \"none\" };\n</code></pre>\n\n<pre><code>let maybe_string = Some(String::from(\"foo\"));\nlet string = maybe_string.as_ref().unwrap_or(\"none\");\n</code></pre>\n\n<p>The second sample gives me an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:3:50\n  |\n3 |     let string = maybe_string.as_ref().unwrap_or(\"none\");\n  |                                                  ^^^^^^ expected struct `std::string::String`, found str\n  |\n  = note: expected type `&amp;std::string::String`\n             found type `&amp;'static str`\n</code></pre>\n"}, {"tags": ["ios", "xcode", "openssl", "rust", "cross-compiling"], "answers": [{"tags": [], "owner": {"reputation": 174, "user_id": 2914846, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/06fc03c3499e8489eab8f501a7528c81?s=128&d=identicon&r=PG&f=1", "display_name": "haolun", "link": "https://stackoverflow.com/users/2914846/haolun"}, "is_accepted": true, "score": 1, "last_activity_date": 1495895406, "last_edit_date": 1495895406, "creation_date": 1495869680, "answer_id": 44214133, "question_id": 44163116, "link": "https://stackoverflow.com/questions/44163116/rust-openssl-cant-build-bin-when-target-i386-apple-ios-ios-simulator/44214133#44214133", "title": "rust-openssl can&#39;t build bin when --target=i386-apple-ios (iOS simulator)", "body": "<p>There are 2 problems.</p>\n\n<ol>\n<li><p>symbol(s) not found for architecture i386\nAfter replace openssl static lib from <a href=\"https://github.com/chshawkn/openssl-build\" rel=\"nofollow noreferrer\">https://github.com/chshawkn/openssl-build</a> to <a href=\"https://github.com/x2on/OpenSSL-for-iPhone\" rel=\"nofollow noreferrer\">https://github.com/x2on/OpenSSL-for-iPhone</a>, target i386-apple-ios built successfully.</p></li>\n<li><p>le (/Users/user/project/target/i386-apple-ios/debug/deps/libopenssl_sys-9f3b06cb5b388503.rlib(wp-mmx.o)) built for OSX.\nPut a script at ~/.cargo/bin/cc to fix this.</p></li>\n</ol>\n\n<pre class=\"lang-none prettyprint-override\"><code>#!/usr/bin/env bash\nif [ -n \"$(echo $@ | grep i386-apple-ios)\" ] || [ -n \"$(echo $@ | grep \nx86_64-apple-ios)\" ]; then\n  xcrun --sdk iphonesimulator --show-sdk-path\n  exec xcrun --sdk iphonesimulator cc -mios-simulator-version-min=7.0.0 $*\nelif [ -n \"$(echo $@ | grep apple-ios)\" ]; then\n  xcrun --sdk iphoneos --show-sdk-path\n  exec xcrun --sdk iphoneos cc -mios-version-min=7.0.0 $*\nelse\n  exec /usr/bin/cc $*\nfi\n</code></pre>\n"}], "owner": {"reputation": 174, "user_id": 2914846, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/06fc03c3499e8489eab8f501a7528c81?s=128&d=identicon&r=PG&f=1", "display_name": "haolun", "link": "https://stackoverflow.com/users/2914846/haolun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 265, "favorite_count": 2, "accepted_answer_id": 44214133, "answer_count": 1, "score": 1, "last_activity_date": 1495895406, "creation_date": 1495640865, "last_edit_date": 1495641755, "question_id": 44163116, "link": "https://stackoverflow.com/questions/44163116/rust-openssl-cant-build-bin-when-target-i386-apple-ios-ios-simulator", "title": "rust-openssl can&#39;t build bin when --target=i386-apple-ios (iOS simulator)", "body": "<p>I have a multi module project that contains a rlib (depends on rust-openssl) and a bin (depends on rlib).</p>\n\n<p>It is ok when I build rlib alone, but failed when I build bin, I got error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>...\nld: warning: URGENT: building for OSX, but linking in object file (/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/i386-apple-ios/lib/liballoc_jemalloc-ea49ffd3fee5264c.rlib(pages.pic.o)) built for iOS. Note: This will be an error in the future.\n          ld: warning: URGENT: building for OSX, but linking in object file (/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/i386-apple-ios/lib/liballoc_jemalloc-ea49ffd3fee5264c.rlib(quarantine.pic.o)) built for iOS. Note: This will be an error in the future.\n          ld: warning: URGENT: building for OSX, but linking in object file (/Users/travis/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/i386-apple-ios/lib/liballoc_jemalloc-ea49ffd3fee5264c.rlib(rtree.pic.o)) built for iOS. Note: This will be an error in the future.\n          Undefined symbols for architecture i386:\n            \"_fputs$UNIX2003\", referenced from:\n                _write_string in libopenssl_sys-f183dd940b82d26e.rlib(ui_openssl.o)\n                _read_string in libopenssl_sys-f183dd940b82d26e.rlib(ui_openssl.o)\n            \"_fopen$UNIX2003\", referenced from:\n                _open_console in libopenssl_sys-f183dd940b82d26e.rlib(ui_openssl.o)\n                _openssl_fopen in libopenssl_sys-f183dd940b82d26e.rlib(o_fopen.o)\n            \"_strerror$UNIX2003\", referenced from:\n                _openssl_strerror_r in libopenssl_sys-f183dd940b82d26e.rlib(o_str.o)\n            \"_fwrite$UNIX2003\", referenced from:\n                _file_write in libopenssl_sys-f183dd940b82d26e.rlib(bss_file.o)\n                _file_puts in libopenssl_sys-f183dd940b82d26e.rlib(bss_file.o)\n                _read_string in libopenssl_sys-f183dd940b82d26e.rlib(ui_openssl.o)\n                _read_string_inner in libopenssl_sys-f183dd940b82d26e.rlib(ui_openssl.o)\n                _test_rc4_init_key in libopenssl_sys-f183dd940b82d26e.rlib(eng_openssl.o)\n          ld: symbol(s) not found for architecture i386\n          clang: error: linker command failed with exit code 1 (use -v to see invocation)\n...\n</code></pre>\n\n<p><a href=\"https://travis-ci.org/chshawkn/rust-openssl-demo/builds/235487913#L679\" rel=\"nofollow noreferrer\">log on travis-ci</a></p>\n\n<p>Target i386-apple-ios failed.\nTarget aarch64-apple-ios armv7-apple-ios armv7s-apple-ios ok.</p>\n\n<p>I tried adding</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[target.i386-apple-ios]\nrustflags = [\n\"-C\", \"link-arg=-mios-simulator-version-min=7.0.0\"\n]\n</code></pre>\n\n<p>into ~/.cargo/config and ended with another error like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ld: warning: URGENT: building for iOS simulator, but linking in object file (/Users/user/project/target/i386-apple-ios/debug/deps/libopenssl_sys-9f3b06cb5b388503.rlib(wp-mmx.o)) built for OSX. Note: This will be an error in the future.\n          ld: warning: object file (/Users/user/project/target/i386-apple-ios/debug/deps/libopenssl_sys-9f3b06cb5b388503.rlib(wp-mmx.o)) was built for newer OSX version (10.12) than being linked (7.0)\n          Undefined symbols for architecture i386:\n            \"_fputs$UNIX2003\", referenced from:\n                _write_string in libopenssl_sys-9f3b06cb5b388503.rlib(ui_openssl.o)\n\n  process didn't exit successfully: `rustc --crate-name ssurl src/bin/ssurl.rs --crate-type bin --emit=dep-info,link -C debuginfo=2 -C metadata=e779ded66ad6a046 -C extra-filename=-e779ded66ad6a046 --out-dir /Users/user/project/target/i386-apple-ios/debug/deps --target i386-apple-ios -L dependency=/Users/user/project/target/i386-apple-ios/debug/deps -L dependency=/Users/user/project/target/debug/deps --extern serde_json=/Users/user/project/target/i386-apple-ios/debug/deps/libserde_json-a20ebb8bb7b96947.rlib --extern birdcrypto=/Users/user/project/target/i386-apple-ios/debug/deps/libbirdcrypto-7b7f8b4d9b356742.rlib --extern tokio_io=/Users/user/project/target/i386-apple-ios/debug/deps/libtokio_io-ffe06c22ad81dd5f.rlib --extern bytes=/Users/user/project/target/i386-apple-ios/debug/deps/libbytes-3515e9da1291588d.rlib --extern qrcode=/Users/user/project/target/i386-apple-ios/debug/deps/libqrcode-0b5b9eed05c8d5fb.rlib --extern net2=/Users/user/project/target/i386-apple-ios/debug/deps/libnet2-ecef00d50a8ddca3.rlib --extern lru_cache=/Users/user/project/target/i386-apple-ios/debug/deps/liblru_cache-3a583fd605a1b3b3.rlib --extern tokio_core=/Users/user/project/target/i386-apple-ios/debug/deps/libtokio_core-57e0150d22448791.rlib --extern byteorder=/Users/user/project/target/i386-apple-ios/debug/deps/libbyteorder-240cc8a1e1423fad.rlib --extern domain=/Users/user/project/target/i386-apple-ios/debug/deps/libdomain-fc3ea0606d179f92.rlib --extern futures=/Users/user/project/target/i386-apple-ios/debug/deps/libfutures-8985671f9fa6f7b8.rlib --extern time=/Users/user/project/target/i386-apple-ios/debug/deps/libtime-65bf99b4b8c3df95.rlib --extern log=/Users/user/project/target/i386-apple-ios/debug/deps/liblog-d4c0e5c2504fbbea.rlib --extern base64=/Users/user/project/target/i386-apple-ios/debug/deps/libbase64-3733960102cc46b7.rlib --extern env_logger=/Users/user/project/target/i386-apple-ios/debug/deps/libenv_logger-8778ad732965ba61.rlib --extern num_cpus=/Users/user/project/target/i386-apple-ios/debug/deps/libnum_cpus-9b2a7df0e5b9fd16.rlib --extern clap=/Users/user/project/target/i386-apple-ios/debug/deps/libclap-95e5c3504e3f13b5.rlib --extern birdnet=/Users/user/project/target/i386-apple-ios/debug/deps/libbirdnet-baa74095bd0c6dca.rlib -C link-arg=-mios-simulator-version-min=7.0.0 -L native=/Users/user/project/tmp/openssl-1.1.0e-i386-apple-ios/lib -L native=/Users/user/project/target/i386-apple-ios/debug/build/rust-crypto-38b42e435c8bcaf2/out` (exit code: 101)               _read_string in libopenssl_sys-9f3b06cb5b388503.rlib(ui_openssl.o)\n            \"_fopen$UNIX2003\", referenced from:\n                _open_console in libopenssl_sys-9f3b06cb5b388503.rlib(ui_openssl.o)\n                _openssl_fopen in libopenssl_sys-9f3b06cb5b388503.rlib(o_fopen.o)\n            \"_strerror$UNIX2003\", referenced from:\n                _openssl_strerror_r in libopenssl_sys-9f3b06cb5b388503.rlib(o_str.o)\n            \"_fwrite$UNIX2003\", referenced from:\n                _file_write in libopenssl_sys-9f3b06cb5b388503.rlib(bss_file.o)\n                _file_puts in libopenssl_sys-9f3b06cb5b388503.rlib(bss_file.o)\n                _read_string in libopenssl_sys-9f3b06cb5b388503.rlib(ui_openssl.o)\n                _read_string_inner in libopenssl_sys-9f3b06cb5b388503.rlib(ui_openssl.o)\n                _test_rc4_init_key in libopenssl_sys-9f3b06cb5b388503.rlib(eng_openssl.o)\n          ld: symbol(s) not found for architecture i386\n          clang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre>\n\n<p><a href=\"https://github.com/chshawkn/rust-openssl-demo\" rel=\"nofollow noreferrer\">demo project to reproduce the error</a></p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 8430, "user_id": 2742717, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d1dec1aa6accf3589489ebd42634f7a0?s=128&d=identicon&r=PG", "display_name": "Swift - Friday Pie", "link": "https://stackoverflow.com/users/2742717/swift-friday-pie"}, "edited": false, "score": 0, "creation_date": 1495639733, "post_id": 44162363, "comment_id": 75341941, "body": "i think, taking ownership or using FnOnce and taking ownership of self are the only ways"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495991051, "post_id": 44162363, "comment_id": 75469701, "body": "If you are interested in solving the problem instead of answering the question, <a href=\"https://play.integer32.com/?gist=84e4aa3068c4b50c3f5c88c36f7e8a40\" rel=\"nofollow noreferrer\">here is one possible way</a> as described in <a href=\"https://stackoverflow.com/q/28512394/155423\">How to lookup from and insert into a HashMap efficiently?</a>."}], "owner": {"reputation": 56, "user_id": 8059975, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/daMbi.jpg?s=128&g=1", "display_name": "bearbear2k", "link": "https://stackoverflow.com/users/8059975/bearbear2k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 514, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1495990376, "creation_date": 1495638649, "last_edit_date": 1495724564, "question_id": 44162363, "link": "https://stackoverflow.com/questions/44162363/why-does-the-closure-outlive-the-enclosing-function", "title": "Why does the closure outlive the enclosing function?", "body": "<p>The following code does not compile because the closure passed to <code>map</code>, which borrows an argument of the enclosing function (<code>cache</code>), apparently outlives the enclosing function.</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut data = Vec::new();\n    let mut foo_cache = HashMap::new();\n\n    let foo = get_foo(7, &amp;mut data, &amp;mut foo_cache);\n}\n\nstruct Foo&lt;'a&gt; {\n    n: &amp;'a u8,\n}\n\nfn get_foo&lt;'a, 'b&gt;(n: u8,\n                   data: &amp;'a mut Vec&lt;u8&gt;,\n                   cache: &amp;'b mut HashMap&lt;u8, Foo&lt;'a&gt;&gt;)\n                   -&gt; Option&lt;&amp;'b Foo&lt;'a&gt;&gt; {\n    if let Some(x) = cache.get(&amp;n) {\n        Some(x)\n    } else {\n        make_foo(n, data).map(|f| {\n            cache.insert(n, f);\n            &amp;cache[&amp;n]\n        })\n    }\n}\n\nfn make_foo&lt;'a&gt;(n: u8, data: &amp;'a mut Vec&lt;u8&gt;) -&gt; Option&lt;Foo&lt;'a&gt;&gt; {\n    if n % 2 != 0 {\n        None\n    } else {\n        data.push(n);\n        Some(Foo { n: &amp;data[data.len() - 1] })\n    }\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `cache`, which is owned by the current function\n  --&gt; src/main.rs:21:35\n   |\n21 |             make_foo(n, data).map(|f| {\n   |                                   ^^^ may outlive borrowed value `cache`\n22 |                 cache.insert(n, f);\n   |                 ----- `cache` is borrowed here\n   |\nhelp: to force the closure to take ownership of `cache` (and any other referenced variables), use the `move` keyword, as shown:\n   |             make_foo(n, data).map(move |f| {\n</code></pre>\n\n<p>I would assume that the closure would either be called immediately or not at all, and that there would be no need for it to exist after <code>get_foo</code> returns. How can I tell the compiler that this is the case?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495639683, "post_id": 44161695, "comment_id": 75341908, "body": "Please have only <a href=\"https://meta.stackexchange.com/q/39223/281829\">one question per post</a>."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495641586, "post_id": 44161695, "comment_id": 75343285, "body": "@Shepmaster Actually, I think that these questions is different side of the same thing, how <code>Vec</code> + slice + <code>FnMut</code> cooperate, that&#39;s why I combine these questions into one"}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1495703211, "post_id": 44163727, "comment_id": 75367658, "body": "Thanks, but why lifetime matter in <code>3</code>? I put <code>cb</code> into <code>Box</code> and I get it by value?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1495730892, "post_id": 44163727, "comment_id": 75385327, "body": "@user1244932 <code>Box</code>ing something doesn&#39;t erase knowledge of the references it contains. I added an example that illustrates how the <code>&#39;a</code> lifetime ensures that <code>cb</code> contains only references that outlive the <code>FooList</code>."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 3, "last_activity_date": 1495730481, "last_edit_date": 1495730481, "creation_date": 1495642726, "answer_id": 44163727, "question_id": 44161695, "link": "https://stackoverflow.com/questions/44161695/explicit-lifetime-for-vec-to-slice-conversation/44163727#44163727", "title": "Explicit lifetime for Vec to slice conversation", "body": "<p>I'm going to try to answer your questions 1 and 3, because question 2 is either redundant or orthogonal to the others, and I can't tell what you really want to achieve by it. Perhaps it deserves a question of its own.</p>\n\n<ol>\n<li><p>If you have a function that takes a reference, but it doesn't need any lifetime information about the reference, it must be able to accept a reference of <strong>any</strong> lifetime. Here's the explicit syntax for that (this is what the compiler infers from the code you wrote):</p>\n\n<pre><code>on_change_cb: Vec&lt;Box&lt;for&lt;'b&gt; FnMut(&amp;'b mut [Foo])&gt;&gt;,\n</code></pre>\n\n<p>This is called a <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">higher ranked trait bound</a> or HRTB for short. They're mostly useful for the <code>Fn</code> traits, which is why they exist.</p></li>\n</ol>\n\n\n\n<ol start=\"3\">\n<li><p>If the type of <code>on_change_cb</code> is <code>Vec&lt;Box&lt;FnMut(&amp;mut [Foo])&gt;&gt;</code>, which doesn't carry any lifetime information, then it must not contain any references (except <code>'static</code> references). You need to say that the type implementing <code>FnMut</code> may also contain (non-<code>'static</code>) references, as long as they outlive some lifetime <code>'a</code>:</p>\n\n<pre><code>struct FooList&lt;'a&gt; {\n    list: Vec&lt;Foo&gt;,\n    on_change_cb: Vec&lt;Box&lt;FnMut(&amp;mut [Foo]) + 'a&gt;&gt;,\n}\n</code></pre>\n\n<p>This reads something like: \"For each <code>FooList</code> object, there is a lifetime <code>'a</code> such that every callback in the <code>FooList</code> contains only references that live for at least <code>'a</code>.\" This interpretation may make it easier to write the prototype for <code>register_on_change_cb2</code>: it takes a callback that <em>also</em> contains only references that live for at least <code>'a</code>.</p>\n\n<pre><code>impl&lt;'a&gt; FooList&lt;'a&gt; {\n    pub fn register_on_change_cb2&lt;F&gt;(&amp;mut self, cb: F)\n        where F: FnMut(&amp;mut [Foo]) + 'a\n    {\n        self.on_change_cb.push(Box::new(cb));\n    }\n</code></pre>\n\n<p>(I <em>think</em> I have the <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">variance</a> of <code>'a</code> correct now -- a previous version of this answer had it wrong.)</p>\n\n<p>The <code>'a</code> lifetime lets the compiler guarantee that you never put a callback in the <code>Box</code> (and therefore the <code>Vec</code>) unless it lasts at least as long as the <code>FooList</code> itself. This is important because closures can capture references to values in the enclosing scope, as in the following code (<a href=\"https://play.rust-lang.org/?gist=8303a58633f1a494413ad918cf14aad7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a>):</p>\n\n<pre><code>let longlived = String::from(\"hello\");\nlet mut list = FooList {\n    list: Vec::new(),\n    on_change_cb: Vec::new(),\n};\nlist.register_on_change_cb2(|_| println!(\"{}\", longlived)); // ok\n\nlet shortlived = String::from(\"hello\");\nlist.register_on_change_cb2(|_| println!(\"{}\", shortlived)); // `shortlived` does not live long enough\n\nlist.push(Foo);\n</code></pre>\n\n<p>In this example, you can't insert the closure that captures <code>shortlived</code> because it doesn't outlive the (inferred) lifetime <code>'a</code>. But you <em>can</em> insert the closure that captures <code>longlived</code>, because the compiler can infer a lifetime <code>'a</code> that satisfies both constraints:</p>\n\n<ul>\n<li><code>'a</code> must outlive <code>list</code>, because <code>list</code> is of type <code>FooList&lt;'a&gt;</code>.</li>\n<li><code>longlived</code> must outlive <code>'a</code>, because <code>|_| println!(\"{}\", longlived)</code>, which borrows <code>longlived</code>, is bounded by <code>'a</code> in the call to <code>register_on_change_cb2</code>.</li>\n</ul>\n\n<p>If you want to say that the callbacks don't borrow <em>anything</em> by-reference, the <code>'a</code> lifetime is unnecessary, and in that case you could just add the <code>'static</code> bound that <a href=\"https://play.rust-lang.org/?gist=d74ffde530c2cf55c5a373ce8b4967e3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">the compiler suggests</a>:</p>\n\n<pre><code>    pub fn register_on_change_cb2&lt;F&gt;(&amp;mut self, cb: F)\n        where F: FnMut(&amp;mut [Foo]) + 'static\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 254, "favorite_count": 0, "accepted_answer_id": 44163727, "answer_count": 1, "score": 0, "last_activity_date": 1495730481, "creation_date": 1495636940, "last_edit_date": 1495639199, "question_id": 44161695, "link": "https://stackoverflow.com/questions/44161695/explicit-lifetime-for-vec-to-slice-conversation", "title": "Explicit lifetime for Vec to slice conversation", "body": "<p>I want a callback on changes inside a list, so I created simple example:</p>\n\n<pre><code>struct Foo;\n\nstruct FooList {\n    list: Vec&lt;Foo&gt;,\n    on_change_cb: Vec&lt;Box&lt;FnMut(&amp; mut [Foo])&gt;&gt;,\n}\n\nimpl FooList {\n /*\n    pub fn register_on_change_cb2&lt;F&gt;(&amp;mut self, cb: F) where F: FnMut(&amp;mut [Foo]) {\n        self.on_change_cb.push(Box::new(cb));\n    }*/\n\n    pub fn register_on_change_cb(&amp;mut self, cb: Box&lt;FnMut(&amp;mut [Foo])&gt;) {\n        self.on_change_cb.push(cb);\n    }\n\n    pub fn push(&amp;mut self, foo: Foo) {\n        self.list.push(foo);\n        self.on_change();\n    }\n\n\n    fn on_change(&amp;mut self) {\n        for cb in &amp;mut self.on_change_cb {\n            cb(&amp;mut self.list);\n        }\n    }\n}\n</code></pre>\n\n<ol>\n<li><p>I don't give any explicit hint to the compiler about lifetimes here: <code>Vec&lt;Box&lt;FnMut(&amp; mut [Foo])&gt;&gt;</code>, so what lifetimes will the compiler use here? If I change the code like this:</p>\n\n<pre><code>struct FooList&lt;'a&gt; {\n    list: Vec&lt;Foo&gt;,\n    on_change_cb: Vec&lt;Box&lt;FnMut(&amp;'a mut [Foo])&gt;&gt;,\n}\nimpl&lt;'a&gt; FooList&lt;'a&gt; {\n</code></pre>\n\n<p>I get a compile time error:</p>\n\n<blockquote>\n  <p>error[E0495]: cannot infer an appropriate lifetime for borrow \n  expression due to conflicting requirements</p>\n</blockquote></li>\n<li><p>How can I explicitly set the lifetimes in some way such that the lifetime of <code>&amp; mut [Foo]</code> for the callback is less than, but not equal to the lifetime of the whole <code>FooList</code> object?</p></li>\n<li><p>I have commented <code>register_on_change_cb2</code>, I want to allow calling <code>register_on_change_cb</code> without usage of <code>Box::new</code> but failed. If you uncomment <code>register_on_change_cb2</code>, you get the error:</p>\n\n<blockquote>\n  <p>error[E0310]: the parameter type <code>F</code> may not live long enough</p>\n</blockquote>\n\n<p>How can I fix this error without the requirement of a <code>'static</code> lifetime for callback? I just want to call <code>Box::new</code> on my side.</p></li>\n</ol>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1495635101, "post_id": 44160750, "comment_id": 75338116, "body": "Note: an intermediate step between macros and external scripts is the <code>build.rs</code> file. When using <code>cargo build</code>, cargo will first compile and execute <code>build.rs</code> (if present) before compiling the rest of your crate, so you can easily use <code>build.rs</code> to generate Rust code without involving any 3rd party tooling/makefile."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1495637173, "creation_date": 1495637173, "answer_id": 44161783, "question_id": 44160750, "link": "https://stackoverflow.com/questions/44160750/how-to-generate-complex-enum-variants-with-a-macro-in-rust/44161783#44161783", "title": "How to generate complex enum variants with a macro in rust", "body": "<p>This is a somewhat pathological case.  Firstly, you want to process <em>parts</em> of the input differently, which macros aren't good at.  Worse, you want to do this in conjunction with generating enum variants, which macros are also bad at.  Taken together leaves only one approach, so far as I can see: full on push-down generation.</p>\n\n<p>The short version is: break it down into simple matching steps, where each step processes one thing, and adds the output for that one thing to an accumulator (in this case, <code>$eout</code> and <code>$pout</code>).  When you're out of input, dump the accumulators into your output.</p>\n\n<pre><code>macro_rules! define_config_directive {\n    // Start rule.\n    // Note: `$(,)*` is a trick to eat any number of trailing commas.\n    ( $( {$($cmd:tt)*} ),* $(,)*) =&gt; {\n        // This starts the parse, giving the initial state of the output\n        // (i.e. empty).  Note that the commands come after the semicolon.\n        define_config_directive! { @parse {}, (args){}; $({$($cmd)*},)* }\n    };\n\n    // Termination rule: no more input.\n    (\n        @parse\n        // $eout will be the body of the enum.\n        {$($eout:tt)*},\n        // $pout will be the body of the `parse_line` match.\n        // We pass `args` explicitly to make sure all stages are using the\n        // *same* `args` (due to identifier hygiene).\n        ($args:ident){$($pout:tt)*};\n        // See, nothing here?\n    ) =&gt; {\n        #[derive(PartialEq, Eq, Debug)]\n        enum ConfigDirective {\n            $($eout)*\n        }\n\n        fn parse_line(command: &amp;str, $args: &amp;[&amp;str]) -&gt; ConfigDirective {\n            match command {\n                $($pout)*\n                _ =&gt; panic!(\"unknown command: {:?}\", command)\n            }\n        }\n    };\n\n    // Rule for command with no arguments.\n    (\n        @parse {$($eout:tt)*}, ($pargs:ident){$($pout:tt)*};\n        {\n            command: $sname:expr,\n            rust_name: $rname:ident,\n            args: [],\n            optional_args: [] $(,)*\n        },\n        $($tail:tt)*\n    ) =&gt; {\n        define_config_directive! {\n            @parse\n            {\n                $($eout)*\n                $rname,\n            },\n            ($pargs){\n                $($pout)*\n                $sname =&gt; ConfigDirective::$rname,\n            };\n            $($tail)*\n        }\n    };\n\n    // Rule for other commands.\n    (\n        @parse {$($eout:tt)*}, ($pargs:ident){$($pout:tt)*};\n        {\n            command: $sname:expr,\n            rust_name: $rname:ident,\n            args: [$($args:ident),* $(,)*],\n            optional_args: [$($oargs:ident),* $(,)*] $(,)*\n        },\n        $($tail:tt)*\n    ) =&gt; {\n        define_config_directive! {\n            @parse\n            {\n                $($eout)*\n                $rname { $( $args: String, )* $( $oargs: Option&lt;String&gt;, )* },\n            },\n            ($pargs){\n                $($pout)*\n                $sname =&gt; {\n                    // This trickery is because macros can't count with\n                    // regular integers.  We'll just use a mutable index\n                    // instead.\n                    let mut i = 0;\n                    $(let $args = $pargs[i].into(); i += 1;)*\n                    $(let $oargs = $pargs.get(i).map(|&amp;s| s.into()); i += 1;)*\n                    let _ = i; // avoid unused assignment warnings.\n\n                    ConfigDirective::$rname {\n                        $($args: $args,)*\n                        $($oargs: $oargs,)*\n                    }\n                },\n            };\n            $($tail)*\n        }\n    };\n}\n\ndefine_config_directive! {\n    {command: \"command1\", rust_name: CommandOne, args: [arg1], optional_args: []},    \n    {command: \"other_command\", rust_name: OtherCommand, args: [arg1], optional_args: [optional_arg1]},\n}\n\nfn main() {\n    println!(\"{:?}\", parse_line(\"command1\", &amp;[\"foo\"]));\n    println!(\"{:?}\", parse_line(\"other_command\", &amp;[\"foo\"]));\n    println!(\"{:?}\", parse_line(\"other_command\", &amp;[\"foo\", \"bar\"]));\n}\n</code></pre>\n\n<p>No, you can't avoid the accumulator thing because macros can't directly expand to enum variants.  As such, you have to expand to the entire enum definition in a single step.</p>\n"}], "owner": {"reputation": 835, "user_id": 506880, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8dd65cde3482a70d32c33c161f2d4c4f?s=128&d=identicon&r=PG", "display_name": "Alex jg", "link": "https://stackoverflow.com/users/506880/alex-jg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1240, "favorite_count": 0, "accepted_answer_id": 44161783, "answer_count": 1, "score": 1, "last_activity_date": 1495637173, "creation_date": 1495634655, "question_id": 44160750, "link": "https://stackoverflow.com/questions/44160750/how-to-generate-complex-enum-variants-with-a-macro-in-rust", "title": "How to generate complex enum variants with a macro in rust", "body": "<p>I'm writing a little library for parsing OVPN config files. OVPN config files have this format</p>\n\n<pre><code>command arg1 arg2\nothercommand arg1 arg2\n</code></pre>\n\n<p>There's a fixed set of commands, some of them have optional arguments. I want to represent the parsed commands as an enum. So the above might end up being represented like this:</p>\n\n<pre><code>enum ConfigDirective{\n    Command{arg1: String},\n    OtherCommand{arg1: String, optinal_arg1: Option&lt;String&gt;},\n}\n\nfn parse_line(command: String, args: Vec&lt;String&gt;) -&gt; ConfigDirective {\n    match command {\n        \"command\" =&gt; ConfigDirective::Command{arg1: args[0]},\n        \"other_command\" =&gt; ConfigDirective:OtherCommand{arg1: args[0], optional_arg1: args.get(1),\n    }\n}\n</code></pre>\n\n<p>I like this structure but there are a lot of possible commands (somewhere in the region of 280). So I want to write a macro to generate most of the boilerplate. Ideally I would write something like the following:</p>\n\n<pre><code>define_config_directive!{\n    {command =&gt; \"command1\", rust_name =&gt; CommandOne, args =&gt; [arg1], optional_args =&gt; []},    \n    {command =&gt; \"other_command\", rust_name =&gt; OtherCommand, args =&gt; [arg1], optional_args =&gt; [optional_arg1]},\n}\n</code></pre>\n\n<p>The closest I've been able to get so far is this:</p>\n\n<pre><code>macro_rules! define_config_directives {\n    ($({\n        rust_name =&gt; $rust_name:ident,\n        required =&gt; [$($required:ident),*],\n        optional =&gt; [$($optional:ident),*]\n    }),*) =&gt; {\n        #[derive(PartialEq, Eq, Debug)]\n        pub enum ConfigDirective {\n            $($rust_name{\n                $($required: String),*,\n                $($optional: Option&lt;String&gt;),*,\n            }),*\n        }\n    };\n}\n</code></pre>\n\n<p>So I have a few problems: </p>\n\n<ol>\n<li>I don't know how to implement the <code>parse_line</code> function in this macro, I need to iterate over each required argument in order writing some code to pull the corresponding argument out of the line and the same for optional arguments</li>\n<li>I don't know how to handle situations where there are no arguments at all, ideally that would be a simple enum variant without fields.</li>\n</ol>\n\n<p>Does anyone know if there's a way to solve this on stable rust? Or should I just generate the code using a python script?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495633613, "post_id": 44159077, "comment_id": 75336861, "body": "Rust does not (yet) support having a field of a struct take a reference in a sibling field, therefore <code>x</code> or <code>z</code> cannot reference a value in <code>data</code>."}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495637859, "post_id": 44159077, "comment_id": 75340476, "body": "@MatthieuM.  I modified the example, hope it doesn&#39;t involve the problem that &quot;reference and value in the same struct&quot;."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495639086, "post_id": 44159077, "comment_id": 75341439, "body": "Indeed, it is different now."}], "answers": [{"comments": [{"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "edited": false, "score": 0, "creation_date": 1495643183, "post_id": 44162841, "comment_id": 75344289, "body": "I kinda guessed the potential solution as <code>Foo2</code> in my example. However, if I have multiple specific types of <code>T</code>, do I have to define like <code>Foo3, Foo4 ...</code>. Can I not reuse the code from <code>Foo</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "edited": false, "score": 0, "creation_date": 1495694550, "post_id": 44162841, "comment_id": 75362942, "body": "@colinfang: I am not exactly sure what you mean... note however that the whole difficulty comes from <code>P</code> having a reference inside, it may be worth exploring making that an owned value and bear the cost of having a copy (and possibly use <code>Rc</code> to lessen the cost of the copy)."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1495640028, "creation_date": 1495640028, "answer_id": 44162841, "question_id": 44159077, "link": "https://stackoverflow.com/questions/44159077/why-is-fooa-pb-not-the-same-as-foo2a/44162841#44162841", "title": "Why is Foo&lt;&#39;a, P&lt;&#39;b&gt;&gt; not the same as Foo2&lt;&#39;a&gt;?", "body": "<p>What is <code>'a</code>, what is <code>'b</code>?</p>\n\n<p>If we isolate the failing case (<em>note that I introduced a lifetime for <code>self</code> to make it easier</em>):</p>\n\n<pre><code>pub struct P&lt;'a&gt; {\n    x: &amp;'a str\n}\n\npub struct Foo&lt;'a, T&gt; {\n    callbacks: Vec&lt;Box&lt;'a + FnMut(&amp;T)&gt;&gt;\n}\n\nimpl&lt;'a, T&gt; Foo&lt;'a, T&gt;{\n    pub fn foo(&amp;mut self, payload: T) {\n    }\n}\n\nstruct Bar&lt;'a, 'b&gt; {\n    x: Foo&lt;'a, P&lt;'b&gt;&gt;,\n    data: HashMap&lt;String, String&gt;\n}\n\n\nimpl&lt;'a, 'b&gt; Bar&lt;'a, 'b&gt; {\n    fn test&lt;'c&gt;(&amp;'c mut self) {\n        // Cannot infer an appropriate lifetime.\n        match self.data.get(\"foo\") {\n            Some(x) =&gt; {\n                let p = P {x};\n                self.x.foo(p);\n            },\n            None =&gt; {}\n        }\n    }\n}\n</code></pre>\n\n<p>The problem here is that when you <em>instantiate</em> <code>Bar</code>, you <em>fix</em> what <code>'a</code> and <code>'b</code> is.</p>\n\n<p>Specifically, this lifetime is NOT <code>'c</code>, which is totally unrelated.</p>\n\n<p>The compiler sees:</p>\n\n<ul>\n<li>the argument to <code>self.x.foo</code> must have type <code>P&lt;'b&gt;</code>,</li>\n<li>it has type <code>P&lt;'unknown&gt;</code>, where <code>'unknown</code> is any lifetime <em>less</em> than <code>'c</code>,</li>\n<li>it has type <code>P&lt;'unknown&gt;</code>, so <code>'unknown</code> must be greater than <code>'b</code>,</li>\n<li><code>'b</code> and <code>'c</code> are unrelated.</li>\n</ul>\n\n<p>and has no idea what <code>'unknown</code> should be.</p>\n\n<hr>\n\n<p>A potential solution is to avoid fixing <code>'b</code>:</p>\n\n<pre><code>pub struct Foo&lt;'a&gt; {\n    callbacks: Vec&lt;Box&lt;'a + FnMut(&amp;P)&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    pub fn foo(&amp;mut self, payload: P) {}\n}\n\nstruct Bar&lt;'a&gt; {\n    x: Foo&lt;'a&gt;,\n    data: HashMap&lt;String, String&gt;,\n}\n</code></pre>\n\n<p><em>Note: and at this point, <code>'a</code> seems superfluous as well.</em></p>\n\n<p>However this requires us fixing <code>T</code> as well, because when using a type parameter (as we had with <code>Foo&lt;'a, T&gt;</code>), then we need to fully specify the type and thus name the lifetime that <code>P</code> will contain.</p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1495642047, "creation_date": 1495630601, "last_edit_date": 1495642047, "question_id": 44159077, "link": "https://stackoverflow.com/questions/44159077/why-is-fooa-pb-not-the-same-as-foo2a", "title": "Why is Foo&lt;&#39;a, P&lt;&#39;b&gt;&gt; not the same as Foo2&lt;&#39;a&gt;?", "body": "<pre><code>use std::collections::{HashMap, HashSet};\n\npub struct P&lt;'a&gt; {\n    x: &amp;'a str\n}\n\npub struct Foo&lt;'a, T&gt; {\n    callbacks: Vec&lt;Box&lt;'a + FnMut(&amp;T)&gt;&gt;\n}\n\nimpl&lt;'a, T&gt; Foo&lt;'a, T&gt;{\n    pub fn foo(&amp;mut self, payload: T) {\n    }\n\n}\n\npub struct Foo2&lt;'a&gt; {\n    callbacks: Vec&lt;Box&lt;'a + FnMut(&amp;P)&gt;&gt;\n}\n\nimpl&lt;'a&gt; Foo2&lt;'a&gt;{\n    pub fn foo(&amp;mut self, payload: P) {\n    }\n\n}\n\n\nstruct Bar&lt;'a, 'b&gt; {\n    x: Foo&lt;'a, P&lt;'b&gt;&gt;,\n    y: Foo2&lt;'a&gt;,\n    data: HashMap&lt;String, String&gt;\n}\n\n\nimpl&lt;'a, 'b&gt; Bar&lt;'a, 'b&gt; {\n    // fn test(&amp;mut self) {\n    //     // Cannot infer an appropriate lifetime.\n    //     match self.data.get(\"foo\") {\n    //         Some(x) =&gt; {\n    //             let p = P {x};\n    //             self.x.foo(p);\n    //         },\n    //         None =&gt; {}\n    //     }\n    // }\n\n    fn test2(&amp;mut self) {\n        match self.data.get(\"foo\") {\n            Some(x) =&gt; {\n                let p = P {x};\n                self.y.foo(p);\n            },\n            None =&gt; {}\n        }\n    }\n\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=bdea08a010852b5ed53b9a8b546bd50a&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>. I'm using rustc 1.19.0-nightly.</p>\n\n<p>Why does <code>test2</code> work but <code>test</code> does not? How can I correctly make the generic struct <code>Foo</code>?</p>\n\n<p>I do not think this example involves <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> and is not a duplicate.</p>\n"}, {"tags": ["gcc", "rust", "octave", "rustup"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1495625870, "post_id": 44157157, "comment_id": 75330773, "body": "Actually, it seems like you are missing the pthread library. libstdc++ is a C++ library, and Rust should not need it (it would need libc, however)."}, {"owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495627433, "post_id": 44157157, "comment_id": 75331942, "body": "That is what it looks like, but <code>C:\\Users\\camer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-&zwnj;&#8203;gnu\\lib\\rustlib\\x86_&zwnj;&#8203;64-pc-windows-gnu\\li&zwnj;&#8203;b\\libpthread.a</code> exists and so does <code>C:\\Octave\\Octave-4.2.1\\lib\\libpthread.dll.a</code>. <code>-pthread</code> is specified, just like in the working C++ build."}, {"owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1495643997, "post_id": 44157157, "comment_id": 75344796, "body": "The libpthread.a from Rust is missing the exports, which may be the cause. I logged issue <a href=\"https://github.com/rust-lang/rust/issues/42194\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/42194</a>"}], "owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 312, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1495639767, "creation_date": 1495625526, "last_edit_date": 1495639767, "question_id": 44157157, "link": "https://stackoverflow.com/questions/44157157/how-do-i-use-a-different-libstdc-a-with-rust", "title": "How do I use a different libstdc++.a with Rust?", "body": "<p>I'm using the nightly Rust through rustup. I'm trying to build a Windows dll for GNU Octave. Is it possible to use the libstdc++.a from Octave?</p>\n\n<p>I'm able to compile, but linking <a href=\"https://gist.github.com/ctaggart/0a2676c24844890c161d6e5720a6b91f\" rel=\"nofollow noreferrer\">fails with errors</a> like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>C:\\Users\\camer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\x86_64-pc-windows-gnu\\lib/libstdc++.a(locale.o):(.text$_ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetEy+0x2c): undefined reference to `pthread_mutex_lock'\n\nC:\\Users\\camer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\x86_64-pc-windows-gnu\\lib/libstdc++.a(locale.o):(.text$_ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetEy+0xa7): undefined reference to `pthread_mutex_unlock'\n\nC:\\Users\\camer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\x86_64-pc-windows-gnu\\lib/libstdc++.a(locale.o):(.text$_ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetEy+0xde): undefined reference to `pthread_mutex_init'\n</code></pre>\n\n<p>My current hunch is that the <code>libstdc++.a</code> that is found isn't compatible. It is finding the one from Rust with this order of search paths:</p>\n\n<ol>\n<li><code>\"-L\"\n\"C:\\Users\\camer\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\x86_64-pc-windows-gnu\\lib\"</code></li>\n<li><code>\"-L\" \"C:\\Octave\\Octave-4.2.1\\lib64\\gcc\\x86_64-w64-mingw32\\4.9.4\"</code></li>\n</ol>\n\n<p>The gcc that ships with Octave 4.2.1 is GCC 4.9.4 released [2016-08-03]. Rust nightly has GCC 6.3 released [2016-12-21]. Do I need to do something like compile the Rust standard library with the GCC 4.9.4 from Octave? Is that possible? Full code and more details in this <a href=\"https://github.com/ctaggart/octh/issues/18#issuecomment-303691573\" rel=\"nofollow noreferrer\">issue</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495583432, "post_id": 44146040, "comment_id": 75311127, "body": "I was about to answer your question, but admittedly, <a href=\"https://stackoverflow.com/q/38551294/1233251\">this one</a> feels like an acceptable duplicate. In short, the closure in the inner <code>map</code> does not own <code>bar</code>, so right now it would have a reference to something that only exists in <code>flat_map</code>&#39;s closure (remember that iterators are lazy). To solve this, just collect the inner iterator or add the <code>move</code> keyword to the closure, so that <code>bar</code> becomes owned. <a href=\"https://play.rust-lang.org/?gist=e1b21fd1c703a6271ca3419814980a7e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>"}, {"owner": {"reputation": 317, "user_id": 2039839, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/2547f3cd9639e7bf2a16354de78ed47b?s=128&d=identicon&r=PG", "display_name": "Taral", "link": "https://stackoverflow.com/users/2039839/taral"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495586040, "post_id": 44146040, "comment_id": 75311693, "body": "@E_net4 Hmm, yes I think it is the same thing - not sure why I thought I couldn&#39;t reduce my example further. I did try collecting the inner iterator, but did not know a <code>Vec</code> is sufficient to return - I basically called <code>.collect().iter()</code> and that just deferred the problem.  Any wisdom on why <code>flat_map</code> has to consume the iterator&#39;s values at all?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495587960, "post_id": 44146040, "comment_id": 75312101, "body": "<code>flat_map</code> expects a closure that returns an <code>IntoIterator</code> (which is something that consumes itself into an iterator). Any of your other concerns simply relate to the fact that the iterator alone might only have to borrow the necessary data for a full traversal. In this case however, it had to own the contents in <code>bar</code> so it can live as long as the iterator."}], "owner": {"reputation": 317, "user_id": 2039839, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/2547f3cd9639e7bf2a16354de78ed47b?s=128&d=identicon&r=PG", "display_name": "Taral", "link": "https://stackoverflow.com/users/2039839/taral"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 363, "favorite_count": 0, "closed_date": 1495592937, "answer_count": 0, "score": 0, "last_activity_date": 1495582800, "creation_date": 1495578427, "last_edit_date": 1495582800, "question_id": 44146040, "link": "https://stackoverflow.com/questions/44146040/flat-map-with-a-nested-iterator-in-rust", "closed_reason": "Duplicate", "title": "flat_map with a nested iterator in Rust", "body": "<p>I tried to write code similar to this:</p>\n\n<pre><code>fn main() {\n    let i = ['a', 'b'];\n    let qux = i.iter().flat_map(|&amp;foo| {\n        let bar = [foo, 'c'];\n        (0usize..42).map(|ii| {\n            bar.iter() /*.map(some_function)*/ .collect::&lt;String&gt;()\n        })\n    }).min();\n}\n</code></pre>\n\n<p>This does not work because <code>bar</code> does not live long enough, and I have not found any solution for which the borrow checker does not complain. Is there any chance to do this sort of thing in a functional style?</p>\n\n<p>Also, why does <code>flat_map</code> necessarily move or copy the values? I would imagine that, if I could do</p>\n\n<pre><code>    let qux = i.iter().map(|&amp;foo| [foo, 'c']).flat_map(|&amp;bar| {\n        /* ... */\n    }).min();\n</code></pre>\n\n<p>that it would be able to ensure that <code>bar</code> lives long enough.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 86, "user_id": 8055998, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9f0d31e8207444cf9590f22139db82a8?s=128&d=identicon&r=PG&f=1", "display_name": "theonychophora", "link": "https://stackoverflow.com/users/8055998/theonychophora"}, "is_accepted": true, "score": 4, "last_activity_date": 1495576804, "creation_date": 1495576804, "answer_id": 44145746, "question_id": 44142080, "link": "https://stackoverflow.com/questions/44142080/how-to-update-self-based-on-reference-of-value-from-hashmap-from-self/44145746#44145746", "title": "How to update self based on reference of value from hashmap from self", "body": "<p>The problem here is that the borrow checker does not know that <code>trigger</code> only changes <code>self.i</code>. As far as the borrow checker knows, it might also change <code>self.map</code>, which would be unsafe.</p>\n\n<p>The solution is to tell the borrow checker more about what <code>trigger</code> changes. </p>\n\n<p>One way to do this is by moving everything that <code>trigger</code> needs to borrow mutablely into its own struct, and then implement trigger for that struct:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry::*;\n\nstruct TriggerThing {\n    i: i32\n}\n\nimpl TriggerThing {\n    fn trigger(&amp;mut self, _: &amp;HashMap&lt;String, String&gt;, x: &amp;str) {\n        self.i += 1;\n    }\n}\n\nstruct A {\n    map: HashMap&lt;String, String&gt;,\n    trigger_thing: TriggerThing,\n}\n\nimpl A {\n    fn test(&amp;mut self) {\n        // Its fine to have a immutable borrow of self.map\n        // and a mutable borrow of self.trigger_thing at the\n        // same time, since borrowing self.trigger_thing does not\n        // imply a mutable borrow of self.map.\n        if let Some(x) = self.map.get(\"abc\") {\n            // Notice that we can still give self.trigger_thing\n            // access to self.map, as long as we only\n            // give it an immutable reference\n            self.trigger_thing.trigger(&amp;self.map, &amp;x)\n        }\n    }\n}\n</code></pre>\n\n<p>see <a href=\"https://doc.rust-lang.org/book/if-let.html\" rel=\"nofollow noreferrer\">Rust Book: If Let</a> if you haven't seen the awesome <code>if let</code> syntax it before.</p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 660, "favorite_count": 0, "accepted_answer_id": 44145746, "answer_count": 1, "score": 2, "last_activity_date": 1495642334, "creation_date": 1495562928, "last_edit_date": 1495642334, "question_id": 44142080, "link": "https://stackoverflow.com/questions/44142080/how-to-update-self-based-on-reference-of-value-from-hashmap-from-self", "title": "How to update self based on reference of value from hashmap from self", "body": "<pre><code>use std::collections::HashMap;\nuse std::collections::hash_map::Entry::*;\n\nstruct A {\n    map: HashMap&lt;String, String&gt;,\n    i: i32\n}\nimpl A {\n    fn test(&amp;mut self) {\n        match self.map.get(\"abc\") {\n            None =&gt; {},\n            Some(x) =&gt; self.trigger(&amp;x)\n        }\n    }\n\n    fn trigger(&amp;mut self, x: &amp;str) {\n        self.i += 1;\n    }\n}\n</code></pre>\n\n<p>The code doesn't work because <code>self.trigger</code> borrows <code>self</code> mutably, while <code>self.map.get</code> is keeping an immutable borrow of <code>self</code> in scope.</p>\n\n<p>Is there any way to make it work, given that I can make sure in the <code>trigger</code> I don't modify <code>self.map</code>?</p>\n\n<p>I cannot make <code>trigger</code> borrow <code>self</code> immutably, as in  <a href=\"https://stackoverflow.com/questions/44141829/can-i-borrow-self-immutably-for-self-callbacks-vecboxfnmut\">Can I borrow self immutably for self.callbacks: Vec&lt;Box&lt;FnMut&gt;&gt;?</a></p>\n\n<p>I'm using rustc 1.19.0-nightly.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495630935, "post_id": 44143541, "comment_id": 75334637, "body": "<a href=\"https://play.rust-lang.org/?gist=2ee39c72c43c8cd196b5a65666e1ac89&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a> where <code>trigger</code> uses <code>&amp;self</code>"}], "tags": [], "owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "is_accepted": false, "score": 2, "last_activity_date": 1495592781, "last_edit_date": 1495592781, "creation_date": 1495567918, "answer_id": 44143541, "question_id": 44141829, "link": "https://stackoverflow.com/questions/44141829/can-i-borrow-self-immutably-for-self-callbacks-vecboxfnmut/44143541#44143541", "title": "Can I borrow self immutably for self.callbacks: Vec&lt;Box&lt;FnMut&gt;&gt;?", "body": "<p>If you want to change the interior of a struct without having the struct mutable, you should use a <a href=\"https://doc.rust-lang.org/std/cell/\" rel=\"nofollow noreferrer\"><code>Cell</code></a>:</p>\n\n<blockquote>\n  <p>Values of the <code>Cell&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code> types may be mutated through shared references (i.e. the common <code>&amp;T</code> type), whereas most Rust types can only be mutated through unique (<code>&amp;mut T</code>) references. We say that <code>Cell&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code> provide 'interior mutability', in contrast with typical Rust types that exhibit 'inherited mutability'.</p>\n</blockquote>\n\n<p><a href=\"https://play.rust-lang.org/?gist=9774ee581e99918859b20248e84223f9&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1495642359, "creation_date": 1495562107, "last_edit_date": 1495642359, "question_id": 44141829, "link": "https://stackoverflow.com/questions/44141829/can-i-borrow-self-immutably-for-self-callbacks-vecboxfnmut", "title": "Can I borrow self immutably for self.callbacks: Vec&lt;Box&lt;FnMut&gt;&gt;?", "body": "<pre><code>pub struct Notifier&lt;'a, T&gt; {\n    callbacks: Vec&lt;Box&lt;'a + FnMut(&amp;T)&gt;&gt;\n}\n\nimpl&lt;'a, T&gt; Notifier&lt;'a, T&gt;{\n    fn add_callback&lt;F: 'a + FnMut(&amp;T)&gt;(&amp;mut self, callback: F) {\n        self.callbacks.push(Box::new(callback));\n    }\n\n    fn trigger(&amp;mut self, payload: T) {\n        for callback in &amp;mut self.callbacks {\n            callback(&amp;payload);\n        }\n    }\n\n}\n\nstruct A {\n    x: i64\n}\n\nimpl A {\n\n    fn foo(&amp;mut self, x: &amp;i64) {\n        self.x = x + 1;\n    }\n\n}\n\n\nfn test() {\n    let mut bar = A {x: 3};\n    let mut notifier = Notifier{callbacks: Vec::new()};\n    notifier.add_callback(|x| bar.foo(x));\n\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3610bb1f250c488e09a2e7c505bc26b2&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>This is a simple observer pattern implemented using callbacks. It works.</p>\n\n<p>However, the fact that <code>trigger(&amp;mut self...</code> causes much trouble in my later coding (<a href=\"https://stackoverflow.com/questions/44142080/how-to-update-self-based-on-reference-of-value-from-hashmap-from-self\">How to update self based on reference of value from hashmap from self</a>). Is it possible to make <code>trigger(&amp;self ...</code> instead?</p>\n\n<p>I'm using rustc 1.19.0-nightly.</p>\n"}, {"tags": ["python", "rust", "itertools"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495561109, "post_id": 44139493, "comment_id": 75301189, "body": "Can you explain whether you really need to yield tuples? With an argument <code>k</code> only known in run-time, you cannot produce Rust tuples of <code>k</code> values."}, {"owner": {"reputation": 556, "user_id": 4905403, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-X99csr8oi-Q/AAAAAAAAAAI/AAAAAAAAAbw/SpMWewr5NeQ/photo.jpg?sz=128", "display_name": "Jessime Kirk", "link": "https://stackoverflow.com/users/4905403/jessime-kirk"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495561996, "post_id": 44139493, "comment_id": 75301723, "body": "I don&#39;t necessarily need tuples; strings would be preferable. I&#39;m eventually going to be searching longer strings for these kmers."}], "answers": [{"comments": [{"owner": {"reputation": 556, "user_id": 4905403, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-X99csr8oi-Q/AAAAAAAAAAI/AAAAAAAAAbw/SpMWewr5NeQ/photo.jpg?sz=128", "display_name": "Jessime Kirk", "link": "https://stackoverflow.com/users/4905403/jessime-kirk"}, "edited": false, "score": 0, "creation_date": 1495635403, "post_id": 44144955, "comment_id": 75338353, "body": "This is exactly what I wanted to accomplish; thank you!"}], "tags": [], "owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "is_accepted": true, "score": 3, "last_activity_date": 1495573319, "creation_date": 1495573319, "answer_id": 44144955, "question_id": 44139493, "link": "https://stackoverflow.com/questions/44139493/in-rust-what-is-the-proper-way-to-replicate-pythons-repeat-parameter-in-iter/44144955#44144955", "title": "In Rust, what is the proper way to replicate Python&#39;s &quot;repeat&quot; parameter in itertools.product?", "body": "<p>Writing a proper generalisation for any type for any k would be hard because the return type could be tuples of any size. As you want to work only on <code>String</code>, it's quite easier: <a href=\"http://play.integer32.com/?gist=03ff026bf57d73dcc9c6abe62eeecc69&amp;version=undefined\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre><code>fn kproduct(seq: String, k: u32) -&gt; Vec&lt;String&gt; {\n    match k {\n        0 =&gt; vec![],\n        1 =&gt; seq.chars().map(|c| c.to_string()).collect(),\n        2 =&gt; iproduct!(seq.chars(), seq.chars()).map(|(a, b)| format!(\"{}{}\", a, b)).collect(),\n        _ =&gt; iproduct!(kproduct(seq.clone(), k - 1), seq.chars()).map(|(a, b)| format!(\"{}{}\", a, b)).collect(),\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 556, "user_id": 4905403, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-X99csr8oi-Q/AAAAAAAAAAI/AAAAAAAAAbw/SpMWewr5NeQ/photo.jpg?sz=128", "display_name": "Jessime Kirk", "link": "https://stackoverflow.com/users/4905403/jessime-kirk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 227, "favorite_count": 0, "accepted_answer_id": 44144955, "answer_count": 1, "score": 6, "last_activity_date": 1495573319, "creation_date": 1495554360, "last_edit_date": 1495556747, "question_id": 44139493, "link": "https://stackoverflow.com/questions/44139493/in-rust-what-is-the-proper-way-to-replicate-pythons-repeat-parameter-in-iter", "title": "In Rust, what is the proper way to replicate Python&#39;s &quot;repeat&quot; parameter in itertools.product?", "body": "<p>In Python, I can do:</p>\n\n<pre><code>from itertools import product\n\nk = 3\nfor kmer in product(\"AGTC\", repeat=k):\n    print(kmer)\n</code></pre>\n\n<p>In Rust, I can force the behavior of <code>k=3</code> by:</p>\n\n<pre><code>#[macro_use] extern crate itertools;\n\nfor kmer in iproduct!(\"AGTC\".chars(), \"AGTC\".chars(), \"AGTC\".chars()){\n    println!(\"{:?}\", kmer);\n}\n</code></pre>\n\n<p>But what if I wanted <code>k=4</code> or <code>k=5</code>?</p>\n"}, {"tags": ["optimization", "rust", "llvm-codegen"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 5, "creation_date": 1495550581, "post_id": 44137890, "comment_id": 75294398, "body": "&quot;I have a function where Rust&#39;s/llvm&#39;s optimization fails and leads to a panic&quot; can you show it to us?"}, {"owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495551011, "post_id": 44137890, "comment_id": 75294751, "body": "@E_net4: I&#39;ve edited the question. However, I would be interested in the original question, even there would be a clever way to avoid problems with  this specific function."}, {"owner": {"reputation": 129, "user_id": 2964696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XMty2.png?s=128&g=1", "display_name": "Jules Kerssemakers", "link": "https://stackoverflow.com/users/2964696/jules-kerssemakers"}, "edited": false, "score": 0, "creation_date": 1517323073, "post_id": 44137890, "comment_id": 84042595, "body": "as Matthias explains in <a href=\"https://stackoverflow.com/questions/44137890/can-i-force-rust-to-not-optimize-a-single-function/44162451#comment75940210_44162451\">this comment</a>, the question is part of implementing an unsupported calling convention."}], "answers": [{"comments": [{"owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "edited": false, "score": 5, "creation_date": 1495554583, "post_id": 44139294, "comment_id": 75297408, "body": "Thank you, but I&#39;m aware of such global optimisations. The questions whether there is a more fine granular control."}, {"owner": {"reputation": 118, "user_id": 3085938, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/2CtsF.jpg?s=128&g=1", "display_name": "jesusbv - user3085938", "link": "https://stackoverflow.com/users/3085938/jesusbv-user3085938"}, "reply_to_user": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "edited": false, "score": 0, "creation_date": 1495569771, "post_id": 44139294, "comment_id": 75305744, "body": "My apologies, I misunderstood the question."}], "tags": [], "owner": {"reputation": 118, "user_id": 3085938, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/2CtsF.jpg?s=128&g=1", "display_name": "jesusbv - user3085938", "link": "https://stackoverflow.com/users/3085938/jesusbv-user3085938"}, "is_accepted": false, "score": -3, "last_activity_date": 1495553823, "creation_date": 1495553823, "answer_id": 44139294, "question_id": 44137890, "link": "https://stackoverflow.com/questions/44137890/can-i-force-rust-to-not-optimize-a-single-function/44139294#44139294", "title": "Can I force Rust to not optimize a single function?", "body": "<p>If you are using cargo, you can tell it not to optimize anything at all, or by levels</p>\n\n<p><a href=\"http://rust-lang.github.io/book/second-edition/ch14-01-release-profiles.html\" rel=\"nofollow noreferrer\">cargo optimize</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495640715, "post_id": 44162451, "comment_id": 75342682, "body": "While containing useful information, this does not answer the question and would probably be better off as a comment on the original question."}, {"owner": {"reputation": 129, "user_id": 2964696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XMty2.png?s=128&g=1", "display_name": "Jules Kerssemakers", "link": "https://stackoverflow.com/users/2964696/jules-kerssemakers"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495728974, "post_id": 44162451, "comment_id": 75384248, "body": "I would, but my measly 41 rep prevented me from doing so.. thanks for the feedback though!"}, {"owner": {"reputation": 129, "user_id": 2964696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XMty2.png?s=128&g=1", "display_name": "Jules Kerssemakers", "link": "https://stackoverflow.com/users/2964696/jules-kerssemakers"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1497010855, "post_id": 44162451, "comment_id": 75911577, "body": "To clarify, I believe the poster may be suffering from an <a href=\"http://xyproblem.info/\" rel=\"nofollow noreferrer\">XY-problem</a>. He is mixing &#39;normal&#39; rust ( <code>let mut nr: u32 = 0;</code> ) with raw assembler (<code>asm!</code>) and something that looks like a function call (<code>swi_service_routine(nr);</code>).  This mixing seems to be invalid in a <code>#[naked]</code> function, as my links explain. The debug-version <i>accidentally</i> works, and the release optimisation exposes the incorrect usage of <code>#[naked]</code>  In that case, the problem is not &quot;how to not-optimise a single function&quot;, but &quot;how to write this function <i>correctly</i>&quot;"}, {"owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "edited": false, "score": 1, "creation_date": 1497091432, "post_id": 44162451, "comment_id": 75940210, "body": "@JulesKerssemakers: You are right, <code>#[naked]</code> functions are highly platform-specific and unsafe. However, you are wrong that a single <code>asm!</code> would help. As you can try for yourself, the optimiser even touches this assembler code.  Thous, controlling the optimiser would help at least <i>a little</i>. The best would be if I could avoid naked functions at all, but unfortunately, Rust does not provide the needed calling conventions (yet?). So it is only a half XY-problem, but I checked already for the X-part (calling conventions). :-)"}, {"owner": {"reputation": 129, "user_id": 2964696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XMty2.png?s=128&g=1", "display_name": "Jules Kerssemakers", "link": "https://stackoverflow.com/users/2964696/jules-kerssemakers"}, "edited": false, "score": 0, "creation_date": 1497181710, "post_id": 44162451, "comment_id": 75961036, "body": "Wow, I didn&#39;t realise that even raw asm is optimised.. This seems like it is getting into really experimental corners of rust. Have you tried asking on users.rustlang.org yet? Specifically <a href=\"https://users.rust-lang.org/t/rust-for-embedded-development-where-we-are-and-whats-missing/10861?u=juleskers\" rel=\"nofollow noreferrer\">this thread</a> deals with low-level stuff for microcontrollers, which is probably the most likely corner of rust where people know these things."}], "tags": [], "owner": {"reputation": 129, "user_id": 2964696, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XMty2.png?s=128&g=1", "display_name": "Jules Kerssemakers", "link": "https://stackoverflow.com/users/2964696/jules-kerssemakers"}, "is_accepted": false, "score": 7, "last_activity_date": 1497018859, "last_edit_date": 1497018859, "creation_date": 1495638978, "answer_id": 44162451, "question_id": 44137890, "link": "https://stackoverflow.com/questions/44137890/can-i-force-rust-to-not-optimize-a-single-function/44162451#44162451", "title": "Can I force Rust to not optimize a single function?", "body": "<p>To the best of my knowledge, Rust has no facilities to specify optimisation levels on anything but the entire crate.\nYour only workaround would be to compile this function in an individual crate, compile it, and then include it as a pre-compiled dependency. (Normal rust-dependencies are compiled at the optimisation level of the depender)</p>\n\n<p><strong>However:</strong> Specifying a different optimisation level for this single function will not solve your problem! Sure, it may work today, but can break again each time the compiler (or optimisation flags) change.</p>\n\n<p><strong>TL;DR</strong>: naked functions are deeply unsafe (My respect, you're a braver person than I am!).\nThe only reliable way to use them is to write only one single <code>asm!()</code> block as the entire function body, nothing else.\nMixing <code>asm!</code>, normal Rust and function calls like you are doing is effectively Undefined Behaviour (in the scary C/Nasal-Demon sense of the term) <strong>No amount of optimisation-tweaking will change this.</strong></p>\n\n<hr>\n\n<p>Naked functions are still unstable until the Rust authors \"get it right\".\nAs you have discovered, there are many subtle problems with this. Tracking issue for stabilisation <a href=\"https://github.com/rust-lang/rust/issues/32408\" rel=\"noreferrer\">here</a></p>\n\n<p>In the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1201-naked-fns.md\" rel=\"noreferrer\">naked-fn RFC</a>, under \"Motivation\", we find:</p>\n\n<blockquote>\n  <p>Because the compiler depends on a function prologue and epilogue to maintain storage for local variable bindings, it <strong>is generally unsafe to write anything but inline assembly inside a naked function</strong>. The LLVM language reference describes this feature as having \"very system-specific consequences\", which the programmer must be aware of.</p>\n</blockquote>\n\n<p>(emphasis mine)</p>\n\n<p>A little bit lower in the RFC, under <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1201-naked-fns.md#unresolved-questions\" rel=\"noreferrer\">unresolved questions</a>, we learn that this is not just a problem for Rust. Other languages also experience problems with this feature:</p>\n\n<blockquote>\n  <p>.. most compilers supporting similar features either require or strongly recommend that authors <strong>write only inline assembly inside naked functions</strong> to ensure no code is generated that assumes a particular stack layout.</p>\n</blockquote>\n\n<p>The reason is that all compilers make a LOT of assumptions about how functions are called (keywords: \"Caller-Saved Registers\", \"Callee-saved registers\", \"Calling convention\", \"Red zone\") . Naked functions don't obey these assumptions, and thus any code a compiler generates is <em>highly</em> likely to be wrong. The \"solution\" is to not let the compiler generate anything, i.e. write the entire function by hand in assembly.</p>\n\n<p>As such, the way you are mixing 'normal' code (<code>let mut nr: u32 = 0;\n</code>), function calls (<code>swi_service_routine(nr);</code>) and raw assembler in a naked function is <strong>unspecified behaviour</strong>. (Yes, such a thing exists in Rust, but only in Unstable).</p>\n\n<p>Naked functions cause enough problems that they deserve <a href=\"https://github.com/rust-lang/rust/labels/A-naked\" rel=\"noreferrer\">their own label</a> in the Rust bugtracker.\nIn one of the A-naked issues, we find <a href=\"https://github.com/rust-lang/rust/issues/32490#issuecomment-204425061\" rel=\"noreferrer\">this comment</a>, by knowledgeable user Tari (among others, author of <a href=\"https://crates.io/crates/llvm-sys\" rel=\"noreferrer\"><code>llvm-sys</code></a>. He explains:</p>\n\n<blockquote>\n  <p>The actual correctness of non-asm code in naked functions depends on the optimizer and code generator, which in general we cannot make any guarantees about what it will do.</p>\n</blockquote>\n\n<p>There is also talk about requiring <code>unsafe</code> for naked functions, as they break many of Rust's normal assumptions. The fact that they don't require this yet in all cases <a href=\"https://github.com/rust-lang/rust/issues/32489\" rel=\"noreferrer\">is an open bug</a></p>\n\n<hr>\n\n<p>So, the <strong>proper solution</strong> to your \"optimisation problem\" is to stop relying on optimisation at all. Instead, write only a single <code>asm!()</code> block.</p>\n\n<p>For your <code>Cpu::save_context()</code> / <code>Cpu::restore_context_and_return()</code> pair: I can understand the desire for code-reuse. To get it, change those into a macro that inserts the relevant <code>asm!(...)</code>. A concatenation of <code>asm!(...); asm!(...); asm!(...);</code> <em>should</em> be equivalent to a single <code>asm!()</code>.</p>\n"}], "owner": {"reputation": 7497, "user_id": 1213227, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/78179ef730f268752c0f6fdde3943b99?s=128&d=identicon&r=PG", "display_name": "Matthias", "link": "https://stackoverflow.com/users/1213227/matthias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2910, "favorite_count": 0, "answer_count": 2, "score": 12, "last_activity_date": 1564862102, "creation_date": 1495550367, "last_edit_date": 1564862102, "question_id": 44137890, "link": "https://stackoverflow.com/questions/44137890/can-i-force-rust-to-not-optimize-a-single-function", "title": "Can I force Rust to not optimize a single function?", "body": "<p>I have a function where Rust's/LLVM's optimization fails and leads to a panic (in the release version), while the unoptimized code (debug version) just works fine. If I compare the generated assembly code, I can not even grasp an idea what the optimizer tries to accomplish.\n(A reason might be that this very function uses inline assembler.)</p>\n\n<p>Is there any way to tell Rust to leave certain functions alone during the optimisation, or do I have to switch off all optimizations?</p>\n\n<p>Here is the specific function:</p>\n\n<pre><code>#[naked]\npub extern \"C\" fn dispatch_svc(){\n    Cpu::save_context();\n    let mut nr: u32 = 0;\n    unsafe {\n        asm!(\"ldr r0, [lr, #-4]\n              bic $0, r0, #0xff000000\":\"=r\"(nr)::\"r0\":\"volatile\")\n    };\n    swi_service_routine(nr);\n    Cpu::restore_context_and_return();\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 5, "last_activity_date": 1495528743, "creation_date": 1495528743, "answer_id": 44129830, "question_id": 44129606, "link": "https://stackoverflow.com/questions/44129606/mutable-arc-in-rust/44129830#44129830", "title": "Mutable Arc in Rust", "body": "<p>You can use interior mutability to change data behind immutable references.</p>\n\n<pre><code>use std::cell::Cell;\nstruct TestMessenger {\n    pub message_sent: Cell&lt;bool&gt;,\n}\nimpl Messenger for TestMessenger {\n    fn send_message(&amp;self, user_id: UserId, text: &amp;str) { \n        self.message_sent.set(true);\n    }\n}\n</code></pre>\n\n<p>This struct is for single-treaded case. You'll need <code>std::sync::Mutex</code> instead of <code>Cell</code> to have <code>Sync</code> for TestMessenger.</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1495529645, "last_edit_date": 1495529645, "creation_date": 1495529259, "answer_id": 44130013, "question_id": 44129606, "link": "https://stackoverflow.com/questions/44129606/mutable-arc-in-rust/44130013#44130013", "title": "Mutable Arc in Rust", "body": "<p>Note that trait methods implemented should be strictly checked for compliance: <code>send_message(&amp;mut self, user_id: UserId, text: &amp;str)</code> is not compliant with <code>send_message(&amp;self, user_id: UserId, text: &amp;str)</code> due to the former's mutable reference to <code>self</code>, and the compiler would eventually complain.</p>\n\n<p>Therefore, interior mutability is required here, so that state changes may happen behind an immutable reference. In this case, since you're dealing with other thread-safe components, you may consider using the thread-safe <a href=\"https://doc.rust-lang.org/stable/std/sync/atomic/struct.AtomicBool.html\" rel=\"nofollow noreferrer\"><code>AtomicBool</code></a>.</p>\n\n<pre><code>use std::sync::atomic::AtomicBool;\n\n#[cfg(test)]\nstruct TestMessenger {\n    pub message_sent: AtomicBool,\n}\nimpl Messenger for TestMessenger {\n    fn send_message(&amp;self, user_id: UserId, text: &amp;str) { // we have `&amp;mut self` here\n        self.message_sent.store(true, Ordering::AcqRel);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7894, "favorite_count": 0, "accepted_answer_id": 44130013, "answer_count": 2, "score": 1, "last_activity_date": 1495529645, "creation_date": 1495528012, "question_id": 44129606, "link": "https://stackoverflow.com/questions/44129606/mutable-arc-in-rust", "title": "Mutable Arc in Rust", "body": "<p>Earlier I had a <code>Sync + Send</code> trait <code>SyncMessenger</code>:</p>\n\n<pre><code>trait Messenger {\n    fn send_message(&amp;self, user_id: UserId, text: &amp;str);\n}\n\ntrait SyncMessenger: Messenger + Sync + Send {}\n</code></pre>\n\n<p>It's implementation:</p>\n\n<pre><code>pub struct DiscordMessenger {\n    discord: Arc&lt;Discord&gt;, // (Discord is Sync and Send already)\n}\nimpl Messenger for DiscordMessenger {\n    fn send_message(&amp;self, user_id: UserId, text: &amp;str) {\n        self.discord.send_message(user_id, text, false);\n    }\n}\nimpl SyncMessenger for DiscordMessenger {}\n</code></pre>\n\n<p>And using it:</p>\n\n<pre><code>struct Bot {\n    messenger: Arc&lt;SyncMessenger&gt;,\n}\nimpl Bot {\n    pub fn new() -&gt; Bot {\n        Bot { messenger: Arc::new(DiscordMessenger::new()) }\n    }   \n\n    fn messenger(&amp;self) -&gt; Arc&lt;SyncMessenger&gt; {\n        self.messenger.clone()\n    }\n}\n\nstruct PingCommand {\n    fn fire(&amp;mut self, bot: &amp;mut Bot) {\n        bot.messenger().send_message(UserId(0), \"Pong\");\n    }\n}\n</code></pre>\n\n<p>Everything worked fine. Now I want to implement <code>TestMessenger</code> which does not really send a message through a network but toggles a flag in <code>Self</code> instead:</p>\n\n<pre><code>#[cfg(test)]\nstruct TestMessenger {\n    pub message_sent: bool,\n}\nimpl Messenger for TestMessenger {\n    fn send_message(&amp;mut self, user_id: UserId, text: &amp;str) { // we have `&amp;mut self` here\n        self.message_sent = true;\n    }\n}\n</code></pre>\n\n<p>So I need to change <code>send_message(&amp;self)</code> to <code>send_message(&amp;mut self)</code> everywhere (in traits and in implementations). I did that but after I can't compile my user code:</p>\n\n<pre><code>struct PingCommand {\n    fn fire(&amp;mut self, bot: &amp;mut Bot) {\n        bot.messenger().send_message(UserId(0), \"Pong\");\n    }\n}\n</code></pre>\n\n<p>Gives error:</p>\n\n<pre><code>   |\n12 |         let _ = bot.messenger().send_message(UserId(0),\n   |                 ^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>I have found something that works but it looks very ugly to me (and requires <code>unwrap()</code> which I would like to avoid):</p>\n\n<pre><code>let _ = Arc::get_mut(&amp;mut bot.messenger()).unwrap().send_message(UserId(0),\n</code></pre>\n\n<p>So the question here is how to do that as much simple as possible, without <code>unwrap()</code>s, static methods like <code>Arc::get_mut</code>? Why simple <code>fn messenger(&amp;self) -&gt; Arc&lt;SyncMessenger&gt;</code> is not possible to call <code>mut</code> methods?</p>\n"}, {"tags": ["data-structures", "struct", "tree", "rust"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1495526688, "post_id": 44127179, "comment_id": 75276672, "body": "Take a look at this code: <a href=\"https://play.rust-lang.org/?gist=6ef6b2355f5b12146f1232ac7ab72096&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Rust playground link</a>. Maybe you&#39;ll find it useful for your case."}, {"owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495563848, "post_id": 44127179, "comment_id": 75302711, "body": "I see, @red75prime, you are using Option and take to detach the values. That&#39;s perfect I totally overlooked that. I think that would work! My branching is different: instead of having options for left/right I have Empty node and &quot;valued&quot; Node. But I could use the Option nevertheless, to be able to take the value and place it somewhere else. Thanks a lot, consider creating an answer with that, I would totally accept it."}, {"owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495570077, "post_id": 44127179, "comment_id": 75305880, "body": "Also as explained in <a href=\"https://stackoverflow.com/questions/16504643/what-is-the-overhead-of-rusts-option-type\" title=\"what is the overhead of rusts option type\">stackoverflow.com/questions/16504643/&hellip;</a> Option doesn&#39;t add extra size to pointers, so Option&lt;Box&lt;T&gt;&gt; is as small as Box&lt;T&gt;. Not an extra thing at all. Good to know! That way I can use Option&lt;Box&lt;T&gt;&gt; whenever I need a &quot;typical&quot; pointer, and I&#39;ll be able to take the value and move it around."}, {"owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495570173, "post_id": 44127179, "comment_id": 75305928, "body": "Alternatively in my code, I could add a <code>take</code>-like method to return the val,left,right values and converting itself to None. That would work too. I think I&#39;ll implement that just to confirm that... then go for the standard Option way."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1495572835, "post_id": 44127179, "comment_id": 75307323, "body": "It&#39;s important to note that there&#39;s nothing magical about <code>Option</code>. The optimization of not adding extra size to pointers (AFAIK) applies to other enums of equivalent layout as well. Likewise, the <code>take</code> method can be <a href=\"https://doc.rust-lang.org/src/core/option.rs.html#722\" rel=\"nofollow noreferrer\">implemented</a> using safe code."}, {"owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "edited": false, "score": 0, "creation_date": 1495600433, "post_id": 44127179, "comment_id": 75315191, "body": "I just read the code and mimicked it in my TreeNode struct. I didn&#39;t know about mem::replace(...). Now I get it. Thanks!"}], "answers": [{"comments": [{"owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "edited": false, "score": 0, "creation_date": 1495749456, "post_id": 44165966, "comment_id": 75394778, "body": "Got it! I understood what I was doing wrong... I didn&#39;t know how to reconcile matching/borrowing the Node to read its values... with the fact of replacing it later. The comments below the question hinted me: I should either use <code>Option&lt;T&gt;</code> and <code>take()</code> its value (so it&#39;s mine and <code>Option</code> gets empty) or, for fun and learning purposes, I could implement the same take() for my TreeNode structure. It needs to use the <code>mem::replace</code> which is exactly the <code>swap</code> you propose but returning the value. I didn&#39;t know that function neither I realized it&#39;s perfectly safe and sound to use."}], "tags": [], "owner": {"reputation": 86, "user_id": 8055998, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9f0d31e8207444cf9590f22139db82a8?s=128&d=identicon&r=PG&f=1", "display_name": "theonychophora", "link": "https://stackoverflow.com/users/8055998/theonychophora"}, "is_accepted": false, "score": 3, "last_activity_date": 1495679417, "last_edit_date": 1495679417, "creation_date": 1495650181, "answer_id": 44165966, "question_id": 44127179, "link": "https://stackoverflow.com/questions/44127179/reorganize-boxed-elements-inside-struct/44165966#44165966", "title": "Reorganize boxed elements inside struct", "body": "<p>Suppose that Rust <em>did</em> trust you to replace the value of <code>ztree.root</code>. Then you could write</p>\n\n<pre><code>fn rotate(&amp;mut ztree, ...) {\n    let locally_owned = ztree.root (and I promise to give it back);\n    // Now, ztree.root is in some undefined state. \n    // Thats OK though, because I promise to fix it before anyone looks!\n\n    let local_new_value = match locally_owned {\n        // just re assign same tree to test...\n        TreeNode::Node {val, left, right} =&gt;\n                Box::new(TreeNode::Node {val: val, left: left, right: right}),\n        // Looks safe-ish, because the whole program will crash, \n        // so the programmer might expect that no one\n        // will see the undefined value of ztree.root\n        // (in fact, there would be problems when the destructor\n        //  of ztree.root is called in the panic)\n        _ =&gt; panic!(\"meh\"), \n    }\n    // FIXED IT! Put a value back into ztree.root\n    ztree.root = local_new_value;\n}\n</code></pre>\n\n<p>which looks kind of OK. However, imagine if you replaced the <code>panic(\"meh\")</code> with some return statement. Then you could have code like this:</p>\n\n<pre><code>ztree.root = Box::new(TreeNode::Empty);\n// Returns without replacing the value of ztree.root\n// because ztree.root is Empty \nrotate(&amp;mut ztree); \n// Now ztree.root is in a undefined state\nrotate(&amp;mut ztree); // So something bad happens here\n</code></pre>\n\n<p>Basically, the compiler would have to convince itself that, not only do you intend to replace the value of <code>ztree.root</code>, but that there is no code path that would result in the value not being replaced. This is way to complicated, and for this reason, there isn't a way to tell the compiler to let you do what you are trying to do. </p>\n\n<p>Instead, you can solve your problem by restating it. Instead of trying to calculate a new value to replace the old value, you really just need to change the current value, without replacing it. One way to do this is by using <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\"><code>std::mem::swap</code></a> like so (<a href=\"https://play.rust-lang.org/?gist=8c17f10249da2d733744dfc0faeb08f3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>fn rotate&lt;T&gt;(ztree: &amp;mut Tree&lt;T&gt;) {\n    let ref mut root : TreeNode&lt;T&gt; = *ztree.root;\n\n    match root {\n        &amp;mut TreeNode::Node {ref mut left, ref mut right, ..} =&gt; {\n            std::mem::swap(left, right);\n        },\n        _ =&gt; unimplemented!(),\n    }\n}\n</code></pre>\n\n<p>If you're wondering why <code>let ref mut root: TreeNode&lt;T&gt; = *ztree.root;</code> works but <code>match *ztree.root {...}</code> doesn't, I am not really sure, but it probably has to do with <a href=\"https://github.com/rust-lang/rust/issues/37949\" rel=\"nofollow noreferrer\">this issue</a>.</p>\n"}], "owner": {"reputation": 12896, "user_id": 9686, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ea7834d1fd5916a80b8d28d694287f6c?s=128&d=identicon&r=PG", "display_name": "helios", "link": "https://stackoverflow.com/users/9686/helios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1495679417, "creation_date": 1495520469, "last_edit_date": 1495676269, "question_id": 44127179, "link": "https://stackoverflow.com/questions/44127179/reorganize-boxed-elements-inside-struct", "title": "Reorganize boxed elements inside struct", "body": "<p>I'm trying to implement the rotation code for a balanced (AVL) version of a binary search tree in Rust, but I'm having trouble claiming ownership of the nodes to be reorganized.</p>\n\n<p>My structure:</p>\n\n<pre><code>struct Tree&lt;T&gt; {\n    root: Box&lt;TreeNode&lt;T&gt;&gt;,\n    depth: usize,\n}\n\nenum TreeNode&lt;T&gt; {\n    Empty,\n    Node {\n        val: T,\n        left: Tree&lt;T&gt;,\n        right: Tree&lt;T&gt;,\n    },\n}\n</code></pre>\n\n<p>I know I could use only one type, or <code>Option</code>s. This seemed a little nicer.</p>\n\n<p>When I want to implement the rotation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>T1, T2, T3 and T4 are subtrees.\n         z                                      y \n        / \\                                   /   \\\n       y   T4      Right Rotate (z)          x      z\n      / \\          - - - - - - - - -&gt;      /  \\    /  \\ \n     x   T3                               T1  T2  T3  T4\n    / \\\n  T1   T2\n</code></pre>\n\n<p>I cannot find a way to reassign the nodes. I have a <code>rotate(&amp;mut self, ...)</code> method that I call on <code>z</code> node (the <code>Tree&lt;T&gt;</code> node), but I need to use a <code>match *self.root {}</code> to cast the root <code>TreeNode</code> to its <code>Node</code> version to get the components. That works, but I cannot use those extracted values to create a new node.</p>\n\n<p>If I try this:</p>\n\n<pre><code>fn insert(&amp;mut self, ...) {\n   ...\n   // need to rotate\n   rotate(self, ...);\n}\n\nfn rotate(&amp;mut ztree, ...) {\n    ztree.root = match *ztree.root {\n        // just re assign same tree to test...\n        TreeNode::Node {val, left, right} =&gt;\n                Box::new(TreeNode::Node {val: val, left: left, right: right}),\n        _ =&gt; panic!(\"meh\"),\n    } ...\n</code></pre>\n\n<p>I get this error.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    |\n171 |             ztree.root = match *ztree.root {\n    |                                 ^^^^^ cannot move out of borrowed content\n172 |                 TreeNode::Node {val, left, right} =&gt;\n    |                                 ---  ----  ----- ...and here (use `ref right` or `ref mut right`)\n    |                                 |    |\n    |                                 |    ...and here (use `ref left` or `ref mut left`)\n    |                                 hint: to prevent move, use `ref val` or `ref mut val`\n</code></pre>\n\n<p>I understand that it doesn't like me to get ownership on the boxed <code>TreeNode</code>, but I don't know how to tell Rust that I'm going to assign a new boxed <code>TreeNode</code> and the old <code>TreeNode</code> could be claimed locally.</p>\n\n<p>If I try <code>self.root = Box::new(TreeNode::Empty)</code> that works just fine, because it knows that I'm reassigning <code>self.root</code> to a new box, and previous box and referenced heap struct should be deallocated.</p>\n"}, {"tags": ["rust", "rust-macros"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1495494502, "post_id": 44120455, "comment_id": 75265926, "body": "If <code>gen_match</code> is used only by <code>test</code>, you could move the <code>macro_rules!</code> inside the function."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1591206218, "last_edit_date": 1591206218, "creation_date": 1495503666, "answer_id": 44124477, "question_id": 44120455, "link": "https://stackoverflow.com/questions/44120455/how-to-call-methods-on-self-in-macros/44124477#44124477", "title": "How to call methods on self in macros?", "body": "<p>Rust macros are not just text replacement. Instead, there are a couple of important differences, one of which is \"macro hygiene\". With this, identifiers inside the macro don't interfere with identifiers outside which does prevent a couple of bugs that commonly happen with macro systems like C's. </p>\n\n<p>As a consequence, a macro can only access identifiers that are:</p>\n\n<ul>\n<li>passed explicitly, <em>or</em></li>\n<li>are in scope when the macro is defined.</li>\n</ul>\n\n<p>While it might seem like an unnecessary restriction at first, it actually helps with the readability of code. Otherwise, it's \"spooky action at a distance\". It's more or less the same reasoning why passing references to a variable into a function is done via <code>some_fn(&amp;mut foo)</code> in Rust and is not implicit like in C++ (<code>some_fn(foo)</code>): it's clearer how a variable is used by a function at the call site.</p>\n\n<p>This means we have two ways to fix your problem. The standard solution is to <strong>pass in <code>self</code> to the macro</strong>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! call_on_self {\n    ($self:ident, $F:ident) =&gt; {\n        $self.$F()\n    };\n}\n\nstruct F;\nimpl F {\n    fn dummy(&amp;self) {}\n    fn test(&amp;self) {\n        call_on_self!(self, dummy);\n    }\n}\n</code></pre>\n\n<p>If you only need to use the macro inside the <code>test</code> method, you can <strong>define the macro inside that method</strong>. Then, <code>self</code> is already in scope when the macro is defined, so it works without passing <code>self</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct F;\nimpl F {\n    fn dummy(&amp;self) {}\n    fn test(&amp;self) {\n        macro_rules! call_on_self {\n            ($F:ident) =&gt; {\n                self.$F()\n            };\n        }\n\n        call_on_self!(dummy);\n    }\n}\n</code></pre>\n\n<p>There's also fun combinations of the two, like defining a macro that takes <code>self</code> explicitly and another macro defined inside the function to capture <code>self</code>:</p>\n\n<pre><code>macro_rules! call_on_self_outer {\n    ($self:ident, $F:ident) =&gt; {\n        $self.$F()\n    };\n}\n\nstruct F;\nimpl F {\n    fn dummy(&amp;self) {}\n    fn test(&amp;self) {\n        macro_rules! call_on_self {\n            ($F:ident) =&gt; {\n                call_on_self_outer!(self, $F);\n            };\n        }\n\n        call_on_self!(dummy);\n    }\n}\n`\n</code></pre>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3956, "favorite_count": 1, "accepted_answer_id": 44124477, "answer_count": 1, "score": 4, "last_activity_date": 1591206218, "creation_date": 1495480236, "last_edit_date": 1554796702, "question_id": 44120455, "link": "https://stackoverflow.com/questions/44120455/how-to-call-methods-on-self-in-macros", "title": "How to call methods on self in macros?", "body": "<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! call_on_self {\n    ($F:ident) =&gt; {\n        self.$F()\n    }\n}\n\nstruct F;\nimpl F {\n    fn dummy(&amp;self) {}\n    fn test(&amp;self) {\n        call_on_self!(dummy);\n    }\n}\n</code></pre>\n\n<p>The above doesn't work (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ffc96af88fce4c26eefdcb928bb9ef9c\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0424]: expected value, found module `self`\n  --&gt; src/lib.rs:3:9\n   |\n3  |         self.$F()\n   |         ^^^^ `self` value is a keyword only available in methods with `self` parameter\n...\n11 |         call_on_self!(dummy);\n   |         --------------------- in this macro invocation\n</code></pre>\n\n<p>I don't understand why this is not working: the macro is invoked in the method where <code>self</code> is available! Is this somehow possible? Should I pass <code>self</code> into the macro because otherwise the macro cannot resolve <code>self</code>?</p>\n\n<p>I'm using rustc 1.19.0-nightly.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 2, "creation_date": 1495480299, "post_id": 44120261, "comment_id": 75260133, "body": "<a href=\"http://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction/#problem-case-2-conditional-control-flow\" rel=\"nofollow noreferrer\">May be of help</a>"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 2, "last_activity_date": 1495482729, "creation_date": 1495482729, "answer_id": 44121055, "question_id": 44120261, "link": "https://stackoverflow.com/questions/44120261/best-way-to-modify-hashmap-from-reference-to-the-value/44121055#44121055", "title": "Best way to modify hashmap from reference to the value", "body": "<p>You were very close to a solution. Once you have an independent vector, you can just move it out of the scope borrowing the map:</p>\n\n<pre><code>use std::collections::{HashMap, HashSet};\n\nfn test(data: &amp;mut HashMap&lt;String, HashSet&lt;String&gt;&gt;) {\n    let xs: Vec&lt;String&gt; = match data.get(\"foo\") {\n        None =&gt; return,\n        Some(xs) =&gt; {\n            xs.iter().map(|x| x.to_owned()).collect()\n        }\n    };\n    for x in xs {\n        data.remove(&amp;x);\n    }\n\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=c9c7f49e5fb23a29d12ff089631b6a1c&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 237, "favorite_count": 0, "accepted_answer_id": 44121055, "answer_count": 1, "score": 2, "last_activity_date": 1495482729, "creation_date": 1495479563, "question_id": 44120261, "link": "https://stackoverflow.com/questions/44120261/best-way-to-modify-hashmap-from-reference-to-the-value", "title": "Best way to modify hashmap from reference to the value", "body": "<pre><code>use std::collections::{HashMap, HashSet};\nuse std::hash::{Hash};\n\nfn test(data: &amp;mut HashMap&lt;String, HashSet&lt;String&gt;&gt;) {\n    match data.get(\"foo\") {\n        None =&gt; return,\n        Some(xs) =&gt; {\n            let xs: Vec&lt;String&gt; = xs.iter().map(|x| x.to_owned()).collect();\n            // How to drop `data` here so that I can borrow `data`.\n            for x in xs {\n                // Mutable borrow occurs, because previous `data` is still in scope.\n                data.remove(&amp;x);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The code above doesn't work, as I mutable borrowed <code>data</code> again while the previous borrow is still in scope. However, I couldn't find an easy way to drop the binding of the previous borrowing.</p>\n\n<p>Also, is there any better way to copy the <code>xs</code> so that I can modify the hashmap while iterating it.</p>\n"}, {"tags": ["pointers", "rust", "coercion"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1495471073, "post_id": 44117951, "comment_id": 75255181, "body": "Your example is incomplete and not reproducible. Please include your definitions of <code>P</code> and <code>Baz</code>."}, {"owner": {"reputation": 471, "user_id": 5359449, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f3fc3ecbd679a426e43699d7c65aba0?s=128&d=identicon&r=PG&f=1", "display_name": "Procrade", "link": "https://stackoverflow.com/users/5359449/procrade"}, "edited": false, "score": 1, "creation_date": 1495471654, "post_id": 44117951, "comment_id": 75255477, "body": "I take it <code>P</code> is a <code>syntax::ptr::P</code>, and <code>Baz</code> a random struct ? Given the implementation of <code>Deref</code> for <code>P</code>, it must be dereferencing coercion. In fact the same goes for <code>&quot;1234&quot;.to_string</code>."}, {"owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495475157, "post_id": 44117951, "comment_id": 75257365, "body": "@E_net4, Procrade is right, I thought that would be clear enough, sorry for the confusion. I&#39;ve updated the example."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495475552, "post_id": 44117951, "comment_id": 75257618, "body": "@MarcusBuffett Admittedly, I did not know <a href=\"https://doc.rust-lang.org/1.1.0/syntax/ptr/struct.P.html\" rel=\"nofollow noreferrer\"><code>P</code></a>, but that&#39;s because it&#39;s unstable and part of the Rust compiler&#39;s private components. Are you developing for the Rust compiler?"}, {"owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1495475901, "post_id": 44117951, "comment_id": 75257775, "body": "@E_net4 I didn&#39;t realize that <code>P</code> was specific to the rust compiler actually, thought it was a commonly used thing in rust for pointers (you can tell I&#39;m a bit of a rust noob). I&#39;m making a simple compiler plugin."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 4, "creation_date": 1495476972, "post_id": 44117951, "comment_id": 75258283, "body": "I&#39;m honestly surprised. Where did you even hear about it? The book should only suggest the use of references, <code>Box</code> and reference-counted pointers (<code>Rc</code> and <code>Arc</code>)."}, {"owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1495478691, "post_id": 44117951, "comment_id": 75259242, "body": "@E_net4 Maybe something has changed on nightly? Everything seems to return a P, ex. <a href=\"https://manishearth.github.io/rust-internals-docs/syntax/ast/enum.ExprKind.html\" rel=\"nofollow noreferrer\">ExprKind</a> is full of them."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 471, "user_id": 5359449, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f3fc3ecbd679a426e43699d7c65aba0?s=128&d=identicon&r=PG&f=1", "display_name": "Procrade", "link": "https://stackoverflow.com/users/5359449/procrade"}, "edited": false, "score": 1, "creation_date": 1495481567, "post_id": 44117951, "comment_id": 75260831, "body": "Again, that is <i>specific</i> to the <code>syntax</code> crate. I can&#39;t think of a reason to use it in other contexts. Regardless, what @Procrade said could be turned into an actual answer."}, {"owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1495481681, "post_id": 44117951, "comment_id": 75260882, "body": "@E_net4 Yeah I&#39;m aware of that, the reason I have a P in the first place is because I&#39;m getting it from an ExprKind. The example was just meant to be a simplified version of what I&#39;m working with."}], "answers": [{"comments": [{"owner": {"reputation": 3719, "user_id": 2550406, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GhBMm.png?s=128&g=1", "display_name": "lucidbrot", "link": "https://stackoverflow.com/users/2550406/lucidbrot"}, "edited": false, "score": 0, "creation_date": 1568731882, "post_id": 44134684, "comment_id": 102363419, "body": "is there also a way to do it explicitly other than <code>(*foo).bar</code> (like e.g. <code>foo-&gt;bar</code>?"}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "reply_to_user": {"reputation": 3719, "user_id": 2550406, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GhBMm.png?s=128&g=1", "display_name": "lucidbrot", "link": "https://stackoverflow.com/users/2550406/lucidbrot"}, "edited": false, "score": 1, "creation_date": 1568816837, "post_id": 44134684, "comment_id": 102396697, "body": "@lucidbrot Intentionally there is no other syntax for dereferencing. It&#39;s something that Rust wants to hide and doesn&#39;t want programmers to micromanage. The compiler and the type system ensures there&#39;s no ambiguity."}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": true, "score": 2, "last_activity_date": 1568816686, "last_edit_date": 1568816686, "creation_date": 1495542084, "answer_id": 44134684, "question_id": 44117951, "link": "https://stackoverflow.com/questions/44117951/why-does-accessing-a-field-on-a-pointer-to-a-struct-work-in-rust/44134684#44134684", "title": "Why does accessing a field on a pointer to a struct work in rust?", "body": "<p>It's <a href=\"https://doc.rust-lang.org/1.1.0/src/syntax/ptr.rs.html#81\" rel=\"nofollow noreferrer\">implemented</a> using <a href=\"https://doc.rust-lang.org/book/ch15-02-deref.html\" rel=\"nofollow noreferrer\">the <code>Deref</code> trait</a>.</p>\n\n<p>In Rust <code>.</code> automatically dereferences when needed, so the compiler can interpret <code>foo.bar</code> as <code>(*foo).bar</code>.</p>\n"}], "owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 0, "accepted_answer_id": 44134684, "answer_count": 1, "score": 3, "last_activity_date": 1568816686, "creation_date": 1495470766, "last_edit_date": 1495474716, "question_id": 44117951, "link": "https://stackoverflow.com/questions/44117951/why-does-accessing-a-field-on-a-pointer-to-a-struct-work-in-rust", "title": "Why does accessing a field on a pointer to a struct work in rust?", "body": "<p>I've noticed that, given a <code>P&lt;SomeStruct&gt;</code>, accessing fields of the <code>SomeStruct</code> directly on the pointer seems to work, and I'm not sure why that is. For example, this code compiles and works as expected (prints \"1234\"):</p>\n\n<pre><code>#![feature(rustc_private)]\n\nextern crate syntax;\nuse syntax::ptr::P;\n\nstruct Baz {\n    id: String,\n}\n\nfn foo() {\n    let mut struct_pointer: P&lt;Baz&gt; = P(Baz {\n        id: \"1234\".to_string(),\n    });\n    println!(\"{}\", struct_pointer.id);\n}\n</code></pre>\n\n<p>What language feature is allowing me to access the <code>id</code> field on the <code>struct_pointer</code> binding? Dereferencing? Coercion? And is there any way to tell that this sort of thing will work by looking at the docs for <code>P</code>?</p>\n"}, {"tags": ["rust", "documentation"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495470836, "post_id": 44117781, "comment_id": 75255073, "body": "Have you tried fetching the source code from <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow noreferrer\">rust-lang/rust</a> and running <code>cargo doc</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 2, "last_activity_date": 1495474432, "creation_date": 1495474432, "answer_id": 44118902, "question_id": 44117781, "link": "https://stackoverflow.com/questions/44117781/how-to-find-generate-nightly-documentation/44118902#44118902", "title": "How to find/generate nightly documentation?", "body": "<p>Considering that <a href=\"http://manishearth.github.io/rust-internals-docs/rustc/\" rel=\"nofollow noreferrer\">manishearth's documentation</a> is listed in the <a href=\"https://github.com/rust-lang/rust/blob/81734e0e06d24cf580dd5352c64d10110e4d3b7b/CONTRIBUTING.md#helpful-links-and-information\" rel=\"nofollow noreferrer\"><code>CONTRINUTING.md</code></a> file, I'd say it is a pretty official resource.</p>\n\n<p>As for generating it yourself, I haven't done it myself since they switched to <code>x.py</code>, but they also list</p>\n\n<pre><code>compiler-docs = true\n</code></pre>\n\n<p>in the <a href=\"https://github.com/rust-lang/rust/blob/81734e0e06d24cf580dd5352c64d10110e4d3b7b/CONTRIBUTING.md#configuration\" rel=\"nofollow noreferrer\">configuration section</a>. I'd say that plus either <code>python x.py build</code> or <code>python x.py doc</code> should suffice. Note that this will take some time!</p>\n"}], "owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "closed_date": 1520220088, "answer_count": 1, "score": 0, "last_activity_date": 1495503165, "creation_date": 1495470225, "last_edit_date": 1495503165, "question_id": 44117781, "link": "https://stackoverflow.com/questions/44117781/how-to-find-generate-nightly-documentation", "closed_reason": "Not suitable for this site", "title": "How to find/generate nightly documentation?", "body": "<p>How should I go about finding documentation for crates in nightly Rust? Recently I've been working with the <code>syntax</code> crate, and the only place I've found for up-to-date documentation is <a href=\"https://manishearth.github.io/rust-internals-docs/syntax/index.html\" rel=\"nofollow noreferrer\">a GitHub page that someone has put up</a>. I'd rather rely on an official resource, or a way of generating the docs myself locally. </p>\n\n<p>I've tried <code>rustup doc</code>, but that only generates docs for the standard library. I've also checked out docs.rs, but that seems to only generate docs for user crates, not crates like <code>syntax</code> and <code>rustc</code> (I'm not sure what \"category\" of crates these fall under, as they're neither in the std lib or developer-created crates).</p>\n"}, {"tags": ["pointers", "struct", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1495471589, "post_id": 44117647, "comment_id": 75255441, "body": "This is not reproducible. Consider writing an example in the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> that shows this exact compilation error."}, {"owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495475108, "post_id": 44117647, "comment_id": 75257337, "body": "@E_net4, I&#39;ve added the necessary imports and feature flags, and a link to rust playground."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 4, "last_activity_date": 1495479919, "last_edit_date": 1495479919, "creation_date": 1495476540, "answer_id": 44119418, "question_id": 44117647, "link": "https://stackoverflow.com/questions/44117647/how-to-mutate-field-in-struct-within-a-pointer/44119418#44119418", "title": "How to mutate field in struct within a pointer?", "body": "<blockquote>\n  <p>Is there any way to mutate a field on a struct within a smart pointer?</p>\n</blockquote>\n\n<p>Sure, here's an example using <code>Box</code> (<a href=\"https://play.rust-lang.org/?gist=eca576de8cc0b16828f72e16e1dac53d&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>#[derive(Debug)]\nstruct Baz {\n    id: String,\n}\n\n#[test]\nfn foo() {\n    let mut pointer = Box::new(Baz { id: \"blah\".to_string() });\n    bar(&amp;mut pointer);\n}\n\nfn bar(x: &amp;mut Box&lt;Baz&gt;) {\n    x.id = \"bing\".to_string()\n}\n</code></pre>\n\n<p>But you seem to be trying to do that with <code>syntax::ptr::P</code>, which self-describes as a <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ptr/index.html\" rel=\"nofollow noreferrer\"><strong>frozen</strong> owned smart pointer</a>:</p>\n\n<blockquote>\n  <ul>\n  <li><strong>Immutability</strong>: <code>P&lt;T&gt;</code> disallows mutating its inner <code>T</code>, unlike <code>Box&lt;T&gt;</code> [...]</li>\n  </ul>\n</blockquote>\n\n<p>To be more specific, <code>P&lt;T&gt;</code> implements <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref</code></a>, but not <a href=\"https://doc.rust-lang.org/std/ops/trait.DerefMut.html\" rel=\"nofollow noreferrer\"><code>DerefMut</code></a>, so you can't get a <code>&amp;mut T</code> out of a <code>&amp;mut P&lt;T&gt;</code> by dereferencing it.</p>\n"}], "owner": {"reputation": 1047, "user_id": 1146183, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d5152bd68f7c09d1c3172874b3ce2150?s=128&d=identicon&r=PG", "display_name": "Marcus Buffett", "link": "https://stackoverflow.com/users/1146183/marcus-buffett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 190, "favorite_count": 0, "accepted_answer_id": 44119418, "answer_count": 1, "score": 0, "last_activity_date": 1495479919, "creation_date": 1495469809, "last_edit_date": 1495475091, "question_id": 44117647, "link": "https://stackoverflow.com/questions/44117647/how-to-mutate-field-in-struct-within-a-pointer", "title": "How to mutate field in struct within a pointer?", "body": "<p>If I have a variable of type <code>P&lt;SomeStruct&gt;</code> (owned, or a mutable reference), is it possible to mutate a field on that struct, without returning a new pointer? I've been trying something like this:</p>\n\n<pre><code>#![feature(rustc_private)]\n\nextern crate syntax;\n\nuse syntax::ptr::P;\n\n#[derive(Debug)]\nstruct Baz {\n    id: String,\n}\n\n#[test]\nfn foo() {\n    let mut pointer = P(Baz { id: \"blah\".to_string() });\n    bar(&amp;mut pointer);\n}\n\nfn bar(x: &amp;mut P&lt;Baz&gt;) {\n    x.id = \"bing\".to_string()\n}\n</code></pre>\n\n<p>but of course that fails with:</p>\n\n<pre><code>error: cannot assign to immutable field\n   --&gt; src/lib.rs:116:5\n    |\n116 |     x.id = \"bing\".to_string()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot mutably borrow immutable field\n</code></pre>\n\n<p>Is there any way to mutate a field on a struct within a smart pointer?</p>\n\n<p>Playground URL: <a href=\"https://play.rust-lang.org/?gist=5675bc2ef4297fe691204a69ffc19461&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=5675bc2ef4297fe691204a69ffc19461&amp;version=nightly&amp;backtrace=0</a></p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1495437847, "post_id": 44104519, "comment_id": 75233519, "body": "looks like a compiler bug to me. I think the second version should not compile either (and in fact it doesn&#39;t if you remove the else branch)"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 2, "creation_date": 1495439517, "post_id": 44104519, "comment_id": 75234485, "body": "@PaoloFalabella, it is not a bug. Compiler can deduce that <code>self.b()</code> will not be called while second borrow of <code>self.v</code> is active, because loop unconditionally ends after this borrow is taken. If you remove else branch, then it is no longer true."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495441469, "post_id": 44104519, "comment_id": 75235542, "body": "@red75prim ah you&#39;re right, thanks!"}], "answers": [{"comments": [{"owner": {"reputation": 33, "user_id": 8045998, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92e705c46481c5a76eaa7d9ac93b0e77?s=128&d=identicon&r=PG&f=1", "display_name": "Dndx", "link": "https://stackoverflow.com/users/8045998/dndx"}, "edited": false, "score": 0, "creation_date": 1495463004, "post_id": 44108401, "comment_id": 75250042, "body": "That is a nice workaround, however, in my case the parser was written with <a href=\"http://rust.unhandledexpression.com/nom\" rel=\"nofollow noreferrer\">nom</a> (which always returns slices), so returning length is not going to work..."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 33, "user_id": 8045998, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92e705c46481c5a76eaa7d9ac93b0e77?s=128&d=identicon&r=PG&f=1", "display_name": "Dndx", "link": "https://stackoverflow.com/users/8045998/dndx"}, "edited": false, "score": 0, "creation_date": 1495472246, "post_id": 44108401, "comment_id": 75255779, "body": "@Dndx, I added another option to my answer."}, {"owner": {"reputation": 33, "user_id": 8045998, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92e705c46481c5a76eaa7d9ac93b0e77?s=128&d=identicon&r=PG&f=1", "display_name": "Dndx", "link": "https://stackoverflow.com/users/8045998/dndx"}, "edited": false, "score": 0, "creation_date": 1495707426, "post_id": 44108401, "comment_id": 75370174, "body": "Thanks, the above solution using <code>from_raw_parts</code> works well."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 5, "last_activity_date": 1495503237, "last_edit_date": 1495503237, "creation_date": 1495442658, "answer_id": 44108401, "question_id": 44104519, "link": "https://stackoverflow.com/questions/44104519/rust-lifetime-issue-in-loop/44108401#44108401", "title": "Rust lifetime issue in loop", "body": "<p>Right now \"Rustc can't \"deal\" with conditional borrowing returns\". See this <a href=\"https://github.com/rust-lang/rust/issues/21906#issuecomment-73296543\" rel=\"nofollow noreferrer\">comment from Gankro on issue 21906</a>.</p>\n\n<p>It can't assign a correct lifetime to the borrow if only one execution path terminates the loop. </p>\n\n<p>I can suggest this workaround, but I'm not sure it is optimal:</p>\n\n<pre><code>fn c(i: &amp;[u8]) -&gt; Option&lt;(usize, usize)&gt; {\n    Some((0, i.len()))\n}\n\nfn a(&amp;mut self) -&gt; &amp;[u8] {\n    let parse_result;\n    loop {\n        self.b();\n\n        match Test::c(&amp;self.v) {\n            Some(r) =&gt; {\n                parse_result = r;\n                break;\n            }\n            _ =&gt; {}\n        }\n    }\n    let (start, end) = parse_result;\n    &amp;self.v[start..end]\n}\n</code></pre>\n\n<p>You can construct result of parsing using array indexes and convert them into references outside of the loop. </p>\n\n<p>Another option is to resort to <code>unsafe</code> to decouple lifetimes. I am not an expert in safe use of unsafe, so pay attention to comments of others.</p>\n\n<pre><code>fn a(&amp;mut self) -&gt; &amp;[u8] {\n    loop {\n        self.b();\n\n        match Test::c(&amp;self.v) {\n            Some(r) =&gt; return unsafe{ \n                // should be safe. It decouples lifetime of \n                // &amp;self.v and lifetime of returned value,\n                // while lifetime of returned value still\n                // cannot outlive self\n                ::std::slice::from_raw_parts(r.as_ptr(), r.len())\n            },\n            _ =&gt; continue,\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 8045998, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92e705c46481c5a76eaa7d9ac93b0e77?s=128&d=identicon&r=PG&f=1", "display_name": "Dndx", "link": "https://stackoverflow.com/users/8045998/dndx"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 794, "favorite_count": 0, "accepted_answer_id": 44108401, "answer_count": 1, "score": 3, "last_activity_date": 1495503353, "creation_date": 1495426035, "last_edit_date": 1495503353, "question_id": 44104519, "link": "https://stackoverflow.com/questions/44104519/rust-lifetime-issue-in-loop", "title": "Rust lifetime issue in loop", "body": "<p>How to get this example to compile without array copying or multiple calls to <code>b()</code> per iteration \u2014 <code>b()</code> has to perform some expensive parsing?</p>\n\n<p>This is not the full code that I wrote, but it illustrates the problem I had. Here, <code>Test</code> is attempting to perform some kind of streaming parsing work. <code>c()</code> is the parsing function, it returns <code>Some</code> when parsing was successful. <code>b()</code> is a function that attempts to read more data from the stream when <code>c()</code> can not parse using the available data yet. The returned value is a slice into the <code>self.v</code> containing the parsed range.</p>\n\n<pre><code>struct Test {\n    v: [u8; 10],\n    index: u8,\n}\n\nimpl Test {\n    fn b(&amp;mut self) {\n        self.index = 1\n    }\n\n    fn c(i: &amp;[u8]) -&gt; Option&lt;&amp;[u8]&gt; {\n        Some(i)\n    }\n\n    fn a(&amp;mut self) -&gt; &amp;[u8] {\n        loop {\n            self.b();\n\n            match Test::c(&amp;self.v) {\n                Some(r) =&gt; return r,\n                _ =&gt; continue,\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut q = Test {\n        v: [0; 10],\n        index: 0,\n    };\n\n    q.a();\n}\n</code></pre>\n\n<p>When compiling, it produces the following borrow checker error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*self` as mutable because `self.v` is also \nborrowed as immutable\n  --&gt; &lt;anon&gt;:17:13\n   |\n17 |             self.b();\n   |             ^^^^ mutable borrow occurs here\n18 | \n19 |             match Test::c(&amp;self.v) {\n   |                            ------ immutable borrow occurs here\n...\n24 |     }\n   |     - immutable borrow ends here\n</code></pre>\n\n<p>If I change <code>a()</code> to:</p>\n\n<pre><code>fn a(&amp;mut self) -&gt; Option&lt;&amp;[u8]&gt; {\n    loop {\n        self.b();\n\n        if let None = Test::c(&amp;self.v) {\n            continue\n        }\n\n        if let Some(r) = Test::c(&amp;self.v) {\n            return Some(r);\n        } else {\n            unreachable!();\n        }\n    }\n}\n</code></pre>\n\n<p>Then it runs, but with the obvious drawback of calling the parsing function <code>c()</code> twice.</p>\n\n<p>I kind of understand that changing <code>self</code> while the return value depends on it is unsafe, however, I do not understand why is the immutable borrow for <code>self.v</code> is still alive in the next iteration, when we attempted to call <code>b()</code> again.</p>\n"}, {"tags": ["docker", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495381541, "post_id": 44098209, "comment_id": 75217903, "body": "Where did you deploy the docker container? You should also check whether you really want <code>-p 8080:80 </code>."}, {"owner": {"reputation": 93, "user_id": 7620867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/244694472ad645ebe16549ed4688b4e3?s=128&d=identicon&r=PG&f=1", "display_name": "OReallyOReily", "link": "https://stackoverflow.com/users/7620867/oreallyoreily"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495382347, "post_id": 44098209, "comment_id": 75218161, "body": "I deployed it on my local machine. I tried running the docker container without <code>-p 8080:80</code>; the docker image ran on port 32768. I tried connecting to <code>192.168.0.6:32768</code> but got the same response"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495383974, "post_id": 44098209, "comment_id": 75218736, "body": "That port does not have to do with your server, you should still have to access it via port 8080."}, {"owner": {"reputation": 93, "user_id": 7620867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/244694472ad645ebe16549ed4688b4e3?s=128&d=identicon&r=PG&f=1", "display_name": "OReallyOReily", "link": "https://stackoverflow.com/users/7620867/oreallyoreily"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495384771, "post_id": 44098209, "comment_id": 75219025, "body": "Okay, I think I don&#39;t need the line <code>-p 8080:80</code> because my rust server listens on port 8080 and that port is exposed in the docker file but I still face the same issue"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495384961, "post_id": 44098209, "comment_id": 75219095, "body": "Try <code>-p 8080</code> instead."}], "answers": [{"tags": [], "owner": {"reputation": 286, "user_id": 8044716, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/00adfcc08c414188df6dfa380e125713?s=128&d=identicon&r=PG&f=1", "display_name": "toffan", "link": "https://stackoverflow.com/users/8044716/toffan"}, "is_accepted": true, "score": 27, "last_activity_date": 1495388093, "last_edit_date": 1495388093, "creation_date": 1495387782, "answer_id": 44099800, "question_id": 44098209, "link": "https://stackoverflow.com/questions/44098209/running-rust-on-docker-empty-reply-from-server/44099800#44099800", "title": "Running rust on Docker: Empty reply from server", "body": "<p>The problem is your web server is listening to requests from 127.0.0.1 (local interface) but from inside your container. From the container point of view, your host is outside so you need to listen to requests from 0.0.0.0, then it should works.</p>\n\n<pre><code>Iron::new(hello_world).http(\"0.0.0.0:8080\").unwrap(); \n</code></pre>\n\n<p>If you need to filter where your requests come from, I suggest you to do it from outside your container with a firewall or something like that.</p>\n"}], "owner": {"reputation": 93, "user_id": 7620867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/244694472ad645ebe16549ed4688b4e3?s=128&d=identicon&r=PG&f=1", "display_name": "OReallyOReily", "link": "https://stackoverflow.com/users/7620867/oreallyoreily"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8880, "favorite_count": 1, "accepted_answer_id": 44099800, "answer_count": 1, "score": 8, "last_activity_date": 1495388093, "creation_date": 1495378040, "last_edit_date": 1495384254, "question_id": 44098209, "link": "https://stackoverflow.com/questions/44098209/running-rust-on-docker-empty-reply-from-server", "title": "Running rust on Docker: Empty reply from server", "body": "<p>I'd like to run a rust web app in a docker container. I'm new to both technologies so I've started out simple. </p>\n\n<p>Here is <code>main.rs</code>:</p>\n\n<pre><code>extern crate iron; \nuse iron::prelude::*; \nuse iron::status; \nfn main() { \n    fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        Ok(Response::with((status::Ok, \"Hello World!\"))) \n    } \n    Iron::new(hello_world).http(\"127.0.0.1:8080\").unwrap(); \n}\n</code></pre>\n\n<p><code>Cargo.toml</code></p>\n\n<pre><code>[package]\nname = \"docker\"\nversion = \"0.1.0\"\n\n[dependencies]\niron = \"*\"\n</code></pre>\n\n<p><code>Dockerfile</code> (adapted from <a href=\"https://blog.clementmiao.com/firs-steps-with-rust-part-2-bf70760efa99\" rel=\"noreferrer\">this</a> tutorial)</p>\n\n<pre><code>FROM jimmycuadra/rust\n\nEXPOSE 8080\nCOPY Cargo.toml /source\nCOPY src/main.rs /source/src/\nCMD cargo run\n</code></pre>\n\n<p>These are the commands I ran:</p>\n\n<ol>\n<li><code>docker build -t oror/rust-test</code></li>\n<li><code>docker run -it -p 8080:8080 --rm -v $(pwd):/source -w /source oror/rust-test cargo run</code></li>\n<li><code>docker ps</code></li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/HStgZ.png\" rel=\"noreferrer\">Terminal Ouput</a></p>\n\n<ol start=\"4\">\n<li><code>ifconfig</code> to get my machine's IP address: <code>192.168.0.6</code></li>\n<li><code>curl 192.168.0.6:8080</code> to connect to my rust web app</li>\n</ol>\n\n<blockquote>\n  <p>curl: (52) Empty reply from server</p>\n</blockquote>\n\n<p>I've tried <code>localhost:8080</code> and I still get the same output.\nWhat am I missing?</p>\n"}, {"tags": ["syntax", "rust", "traits", "type-bounds"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495378860, "post_id": 44098173, "comment_id": 75217135, "body": "I think you got <code>f</code> and <code>g</code> the wrong way around. <code>x.g()</code> should work, while <code>x.f()</code> will be an error. That&#39;s because <code>f</code> is only defined for types that are <code>Sized</code>, but it is not guaranteed that <code>x</code> is <code>Sized</code> because not all <code>impl</code>s of <code>Trait</code> are."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1495379548, "post_id": 44098173, "comment_id": 75217327, "body": "Putting the constraint on the trait limits what types can implement the trait. Putting the constraint on the function inside the trait limits what implementing types can call the function."}, {"owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495379664, "post_id": 44098173, "comment_id": 75217356, "body": "@PeterHall, Yes, thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1495379254, "creation_date": 1495379254, "answer_id": 44098386, "question_id": 44098173, "link": "https://stackoverflow.com/questions/44098173/what-does-the-where-clause-within-a-trait-do/44098386#44098386", "title": "What does the &#39;where&#39; clause within a trait do?", "body": "<blockquote>\n  <p><code>fn f(&amp;self) -&gt; i32 where Self: Sized;</code></p>\n</blockquote>\n\n<p>This says that <code>f</code> is only defined for types that also implement <code>Sized</code>. Unsized types may still implement <code>Trait</code>, but <code>f</code> will not be available.</p>\n\n<p>Inside <code>object_safety_dynamic</code>, calling <code>x.f()</code> is actually doing: <code>(*x).f()</code>. While <code>x</code> is sized because it's a pointer, <code>*x</code> might not be because it could be <em>any</em> implementation of <code>Trait</code>. But code inside the function has to work for any valid argument, so you are not allowed to call <code>x.f()</code> there.</p>\n"}, {"tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": true, "score": 3, "last_activity_date": 1495385174, "last_edit_date": 1592644375, "creation_date": 1495383903, "answer_id": 44099172, "question_id": 44098173, "link": "https://stackoverflow.com/questions/44098173/what-does-the-where-clause-within-a-trait-do/44099172#44099172", "title": "What does the &#39;where&#39; clause within a trait do?", "body": "<blockquote>\n<p>What does the where clause actually do?</p>\n<p>Naively, I was thinking where Self: Sized; dictates something about the type implementing Trait, like 'if you implement Trait for type A your type A must be sized, i.e., it can be i32 but not [i32].</p>\n<p>However, such a constraint would rather go as trait Trait: Sized</p>\n</blockquote>\n<p>This is correct.</p>\n<p>However, in this case, the bound applies only to the function. <code>where</code> bounds on functions are only checked at the callsite.</p>\n<blockquote>\n<p>What happens here behind the scenes?</p>\n</blockquote>\n<p>There is a confusing bit about rust's syntax which is that <code>Trait</code> can refer to either</p>\n<ul>\n<li>The trait <code>Trait</code>; or</li>\n<li>The &quot;trait object&quot; <code>Trait</code>, which is actually a type, not an object.</li>\n</ul>\n<p><code>Sized</code> is a trait, and any type <code>T</code> that is <code>Sized</code> may have its size taken as a constant, by <code>std::mem::size_of::&lt;T&gt;()</code>. Such types that are not sized are <code>str</code> and <code>[u8]</code>, whose contents do not have a fixed size.</p>\n<p>The type <code>Trait</code> is also unsized. Intuitively, this is because <code>Trait</code> as a type consists of all values of types that implement the trait <code>Trait</code>, which may have varying size. This means you can never have a value of type <code>Trait</code> - you can only refer to one via a &quot;fat pointer&quot; such as <code>&amp;Trait</code> or <code>Box&lt;Trait&gt;</code> and so on. These have the size of 2 pointers - one for a vtable, one for the data. It looks roughly like this:</p>\n<pre><code>struct &amp;Trait {\n    pub data: *mut (),\n    pub vtable: *mut (),\n}\n</code></pre>\n<p>There is automatically an impl of the form:</p>\n<pre><code>impl Trait /* the trait */ for Trait /* the type */ {\n    fn f(&amp;self) -&gt; i32 where Self: Sized { .. }\n    fn g(&amp;self) -&gt; i32 {\n        /* vtable magic: something like (self.vtable.g)(self.data) */\n    }\n}\n</code></pre>\n<blockquote>\n<p>What (in simple English) am I actually telling the compiler by where Self: Sized; that makes g() work but f() not?</p>\n</blockquote>\n<p>Note that since, as I mentioned, <code>Trait</code> is not <code>Sized</code>, the bound <code>Self: Sized</code> is not satisfied and so the function <code>f</code> cannot be called where <code>Self == Trait</code>.</p>\n<blockquote>\n<p>In particular: Since &amp;self is a reference anyway, what compiled difference exists between f and g for various (sized or unsized) types. Wouldn't it always boil down to something like _vtable_f_or_g(*self) -&gt; i32, regardless of where or if the type is sized or not?</p>\n</blockquote>\n<p>The type <code>Trait</code> is <em>always</em> unsized. It doesn't matter which type has been coerced to <code>Trait</code>. The way you call the function with a <code>Sized</code> variable is to use it directly:</p>\n<pre><code>fn generic&lt;T: Trait + Sized&gt;(x: &amp;T) { // the `Sized` bound is implicit, added here for clarity\n    x.f();  // compiles just fine\n    x.g();\n}\n</code></pre>\n<blockquote>\n<p>Why can I implement Trait for both u8 and [u8]. Shouldn't the compiler actually stop me from implementing f() for [u8], instead of throwing an error at the call site?</p>\n</blockquote>\n<p>Because the trait is not bounded by <code>Self: Sized</code> - the function <code>f</code> is. So there is nothing stopping you from implementing the function - it's just that the bounds on the function can never be satisfied, so you can never call it.</p>\n"}], "owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 809, "favorite_count": 0, "accepted_answer_id": 44099172, "answer_count": 2, "score": 2, "last_activity_date": 1551269256, "creation_date": 1495377807, "last_edit_date": 1551269256, "question_id": 44098173, "link": "https://stackoverflow.com/questions/44098173/what-does-the-where-clause-within-a-trait-do", "title": "What does the &#39;where&#39; clause within a trait do?", "body": "<p>If I have this code:</p>\n\n<pre><code>trait Trait {\n    fn f(&amp;self) -&gt; i32 where Self: Sized;\n\n    fn g(&amp;self) -&gt; i32;\n}\n\n\nfn object_safety_dynamic(x: &amp;Trait) {\n    x.f();    // error \n    x.g();    // works\n}\n</code></pre>\n\n<p>What does the <code>where</code> clause actually do? </p>\n\n<p>Naively, I was thinking <code>where Self: Sized;</code> dictates something about the type implementing <code>Trait</code>, like 'if you implement <code>Trait</code> for type <code>A</code> your type <code>A</code> must be sized, i.e., it can be <code>i32</code> but not <code>[i32]</code>.</p>\n\n<p>However, such a constraint would rather go as <code>trait Trait: Sized</code> (correct me if I am wrong)?</p>\n\n<p>Now I noticed <code>where Self: Sized;</code> actually determines if I can call <code>f</code> or <code>g</code> from within <code>object_safety_dynamic</code>.</p>\n\n<p>My questions:</p>\n\n<ol>\n<li><p>What happens here behind the scenes? </p></li>\n<li><p>What (in simple English) am I actually telling the compiler by <code>where Self: Sized;</code> that makes <code>g()</code> work but <code>f()</code> not? </p></li>\n<li><p>In particular: Since <code>&amp;self</code> is a reference anyway, what compiled difference exists between <code>f</code> and <code>g</code> for various (sized or unsized) types. Wouldn't it always boil down to something like <code>_vtable_f_or_g(*self) -&gt; i32</code>, regardless of <code>where</code> or if the type is sized or not?</p></li>\n<li><p>Why can I implement Trait for both <code>u8</code> and <code>[u8]</code>. Shouldn't the compiler actually stop me from implementing <code>f()</code> for <code>[u8]</code>, instead of throwing an error at the call site?</p></li>\n</ol>\n"}, {"tags": ["rust", "traits", "trait-objects"], "answers": [{"comments": [{"owner": {"reputation": 502, "user_id": 3298826, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d80d437d6d9e6b9bc7835a7307792c19?s=128&d=identicon&r=PG", "display_name": "H2O", "link": "https://stackoverflow.com/users/3298826/h2o"}, "edited": false, "score": 0, "creation_date": 1495366715, "post_id": 44096352, "comment_id": 75213566, "body": "Isn&#39;t monomorphization what would be used for static dispatch? He/she is trying to do dynamic dispatching so that should not matter. In fact with monomorphization it would work as different functions are created that can take different sizes. Your main point is still correct though. Sorry if this is wrong ;)"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 502, "user_id": 3298826, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d80d437d6d9e6b9bc7835a7307792c19?s=128&d=identicon&r=PG", "display_name": "H2O", "link": "https://stackoverflow.com/users/3298826/h2o"}, "edited": false, "score": 1, "creation_date": 1495366949, "post_id": 44096352, "comment_id": 75213634, "body": "@H2O You are not wrong. He isn&#39;t trying to monomorphize, but he also wrote <code>x: Trait</code> as the argument. Dynamic dispatch <i>must</i> use references of some kind."}, {"owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "reply_to_user": {"reputation": 502, "user_id": 3298826, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d80d437d6d9e6b9bc7835a7307792c19?s=128&d=identicon&r=PG", "display_name": "H2O", "link": "https://stackoverflow.com/users/3298826/h2o"}, "edited": false, "score": 0, "creation_date": 1495367018, "post_id": 44096352, "comment_id": 75213651, "body": "Thanks, but I have the same question as @H2O ... Also, with the implication that I apparently can&#39;t move traits but only use borrows / pointers, why do there need to be the Sized restrictions anyways? Couldn&#39;t the compiler handle this for arbitrary types?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "edited": false, "score": 0, "creation_date": 1495372881, "post_id": 44096352, "comment_id": 75215445, "body": "@left4bread: Not really.  If you had <code>x: Trait</code>, the compiler <i>cannot</i> know how big <code>x</code> is because it could be implemented by types of any size.  It can&#39;t know how much stack space to reserve.  It doesn&#39;t know the size of struct fields.  It doesn&#39;t know how big an element of a <code>Vec</code> should be.  The only way it <i>could</i> make that work in general would be to put it on the heap behind a pointer... and now we&#39;re back to square one again."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 5, "last_activity_date": 1495367256, "last_edit_date": 1495367256, "creation_date": 1495366290, "answer_id": 44096352, "question_id": 44096235, "link": "https://stackoverflow.com/questions/44096235/understanding-traits-and-object-safety/44096352#44096352", "title": "Understanding Traits and Object Safety", "body": "<p>Making <code>Trait</code> a supertype of <code>Sized</code> doesn't help - in fact it is not permitted, as the error message says. Each implementation of <code>Trait</code> will still have a <em>different</em> size, so your function <code>object_safety_dynamic</code> cannot be compiled. Monomorphization cannot be used here because there is no generic parameter, so the compiled function must work for <em>all</em> implementations of <code>Trait</code>.</p>\n\n<p>However, references <em>do</em> have a fixed size, so making the argument into a reference will work:</p>\n\n<pre><code>trait Trait {\n    fn f(&amp;self) -&gt; i32;\n}\n\nfn object_safety_dynamic(x: &amp;Trait) {}\n</code></pre>\n\n<p>A trait object is <em>always</em> a reference of some kind, e.g. a <code>Box&lt;T&gt;</code> or <code>&amp;T</code>. This is precisely because the size of implementations of the trait will be different, while a reference type has a known, fixed size.</p>\n"}, {"comments": [{"owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "edited": false, "score": 0, "creation_date": 1495374257, "post_id": 44097369, "comment_id": 75215833, "body": "Thanks! I get 1 and 3, but about 2: a) If I have a <code>TraitB</code> (see above), implemented by 5 types, used throughout my code with <code>.g&lt;T&gt;()</code> where <code>T</code> are 5 other types, the compiler would generate 5*5=25 implementations of g, since it could not statically determine which one is actually needed? (if so, how would that work from libraries where the callers are not known?) And b) why does adding <code>where Self: Sized;</code> change any of this, since it apparently only applies to the type implementing it, not <code>T</code>"}, {"owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "edited": false, "score": 0, "creation_date": 1495376129, "post_id": 44097369, "comment_id": 75216371, "body": "I just realized <code>where Self: Sized</code> actually precludes it&#39;s use from  within <code>object_safety_dynamic</code> ... I think I fundamentally misunderstand <code>where</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "edited": false, "score": 0, "creation_date": 1495393559, "post_id": 44097369, "comment_id": 75221772, "body": "@left4bread: Regarding (a), it doesn&#39;t work. There can be a single implementation of <code>g</code> for each <code>impl TraitB</code> block if it is to be used as a trait object. Thus the restriction that trait objects methods NOT be generic over types (they can be generic over lifetimes)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1551807889, "post_id": 44097369, "comment_id": 96772321, "body": "@trentcl: Indeed, fixed :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 15, "last_activity_date": 1609098968, "last_edit_date": 1609098968, "creation_date": 1495372745, "answer_id": 44097369, "question_id": 44096235, "link": "https://stackoverflow.com/questions/44096235/understanding-traits-and-object-safety/44097369#44097369", "title": "Understanding Traits and Object Safety", "body": "<blockquote>\n<p>Why does this particular example not work? The chapter <a href=\"https://doc.rust-lang.org/1.30.0/book/first-edition/trait-objects.html\" rel=\"nofollow noreferrer\">Trait Objects</a>\nstates:</p>\n<blockquote>\n<p>So what makes a method object-safe? Each method must require that <code>Self: Sized</code></p>\n</blockquote>\n<p>Isn't that fulfilled?</p>\n</blockquote>\n<p>This question really is: <em>What is a trait object</em>?</p>\n<p>A <em>trait object</em> is an interface in the Object-Oriented paradigm:</p>\n<ul>\n<li>it exposes a limited set of methods,</li>\n<li>which are applied to an unknown concrete type.</li>\n</ul>\n<p>The fact that the concrete type to which the operations is applied is unknown is specifically why one uses a trait object, as it allows manipulating a heterogeneous set of types in a uniform fashion <em>down to the assembly level</em>.</p>\n<p>The fact the concrete type is unknown, however, means that the size of the memory area which contains the memory is <em>also</em> unknown; therefore a trait object can only be manipulated behind a <em>reference</em> or <em>pointer</em> such as <code>&amp;dyn TraitObject</code>, <code>&amp;mut dyn TraitObject</code> or <code>Box&lt;dyn TraitObject&gt;</code> for example.</p>\n<p>At the memory level, each of them is represented identically:</p>\n<ul>\n<li>a pointer to a virtual table, which is a structure holding one function pointer per &quot;method&quot; of the trait object at a fixed offset,</li>\n<li>a pointer to the actual data of the object.</li>\n</ul>\n<blockquote>\n<p>What is the difference between <code>Trait: Sized</code> and where <code>Self: Sized</code>? (Well, yes, one inherits the trait the other one is a parameter bound, but from Rust's trait object perspective?)</p>\n</blockquote>\n<p>There is no inheritance in Rust. In <em>both</em> cases those are <em>bounds</em>:</p>\n<ul>\n<li><code>Trait: Sized</code> states that the trait itself can only be implemented for a type that already implements <code>Sized</code>,</li>\n<li><code>fn method(&amp;self) where Self: Sized</code> states that only types that implement <code>Sized</code> can implement this method.</li>\n</ul>\n<p><em>Note: when implementing a trait, all methods must end up having a definition; the latter is therefore only really useful if a default implementation is provided for the method with the <code>Self: Sized</code> bound, as <a href=\"https://play.rust-lang.org/?gist=31ad691ebdb34ae96f7d84dea7147f32&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">is shown here</a>.</em></p>\n<blockquote>\n<p>What is the preferred change I had to make <code>object_safety_dynamic</code> work?</p>\n</blockquote>\n<p>You have to take the trait object by reference or pointer. Whether you use a reference or pointer depends on whether you want to transfer ownership or not.</p>\n"}], "owner": {"reputation": 1234, "user_id": 2232000, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/feca4a8ce6ae5868a181cf0aca7f00c9?s=128&d=identicon&r=PG&f=1", "display_name": "left4bread", "link": "https://stackoverflow.com/users/2232000/left4bread"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2706, "favorite_count": 1, "accepted_answer_id": 44097369, "answer_count": 2, "score": 7, "last_activity_date": 1609098968, "creation_date": 1495365510, "last_edit_date": 1609098783, "question_id": 44096235, "link": "https://stackoverflow.com/questions/44096235/understanding-traits-and-object-safety", "title": "Understanding Traits and Object Safety", "body": "<p>I am struggling with the basics of object safety. If I have this code</p>\n<pre class=\"lang-rust prettyprint-override\"><code>struct S {\n    x: i32,\n}\n\ntrait Trait: Sized {\n    fn f(&amp;self) -&gt; i32\n    where\n        Self: Sized;\n}\n\nfn object_safety_dynamic(x: Trait) {}\n</code></pre>\n<p>I receive</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `Trait` cannot be made into an object\n  --&gt; src/lib.rs:11:29\n   |\n5  | trait Trait: Sized {\n   |       -----  ----- ...because it requires `Self: Sized`\n   |       |\n   |       this trait cannot be made into an object...\n...\n11 | fn object_safety_dynamic(x: Trait) {}\n   |                             ^^^^^ the trait `Trait` cannot be made into an object\n</code></pre>\n<p>When I add or remove <code>: Sized</code> as the supertrait or as <code>f</code>'s bound, I receive slightly different error messages.</p>\n<p>Could someone explain:</p>\n<ul>\n<li><p>Why does this particular example not work? The chapter <a href=\"https://doc.rust-lang.org/1.30.0/book/first-edition/trait-objects.html\" rel=\"nofollow noreferrer\">Trait Objects</a> states:</p>\n<blockquote>\n<p>So what makes a method object-safe? Each method must require that <code>Self: Sized</code></p>\n</blockquote>\n<p>Isn't that fulfilled?</p>\n</li>\n<li><p>What is the difference between <code>Trait: Sized</code> and <code>where Self: Sized</code>? (Well, yes, one inherits the trait and the other one is a parameter bound, but from Rust's trait object perspective?</p>\n</li>\n<li><p>What is the <em>preferred</em> change I had to make <code>object_safety_dynamic</code> work?</p>\n</li>\n</ul>\n<p>I am using <code>rustc 1.19.0-nightly (01951a61a 2017-05-20)</code> if it matters.</p>\n<p>Addressing the comment on fixed sizes.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait TraitB {\n    fn f(&amp;self) -&gt; i32\n    where\n        Self: Sized;\n\n    fn g&lt;T&gt;(&amp;self, t: T) -&gt; i32\n    where\n        Self: Sized;\n}\n</code></pre>\n"}, {"tags": ["unit-testing", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1495371680, "post_id": 44095998, "comment_id": 75215055, "body": "Tests follow the same rules as other code.  If they&#39;re not in the same module or a descendant, they can&#39;t see private things."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1495371820, "post_id": 44095998, "comment_id": 75215114, "body": "if it&#39;s a unit test, shouldn&#39;t it be in the same module? otherwise it seems like you actually need a constructor. That said, the fairly new <code>pub(restricted)</code> feature might be useful. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>"}, {"owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1495372663, "post_id": 44095998, "comment_id": 75215376, "body": "@the8472: I&#39;m testing a module that use this one. I&#39;m not aware of mocking capabilities in Rust, it&#39;s the way I&#39;d done it with Google Test in C++ :) Gonna check this feature, running nightly anyway :)"}], "answers": [{"comments": [{"owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "edited": false, "score": 1, "creation_date": 1495368798, "post_id": 44096190, "comment_id": 75214137, "body": "Thank you for your answer, I forgot to say that the test using the struct is in another module. Edited to add this info."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495397044, "post_id": 44096190, "comment_id": 75222747, "body": "Consider also adding <code>#[cfg(test)]</code> to the test module,  so as to only be considered in the testing phase."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 5, "last_activity_date": 1495365203, "creation_date": 1495365203, "answer_id": 44096190, "question_id": 44095998, "link": "https://stackoverflow.com/questions/44095998/is-it-possible-to-access-a-private-struct-field-from-a-test/44096190#44096190", "title": "Is it possible to access a private struct field from a test?", "body": "<p>You can write unit test in the same module or create submodule for tests. Code in the same module and in all nested modules has full access to private fields.</p>\n\n<pre><code>// Your struct\n\nmod test {\n    use super::MyStruct;\n    fn test() {\n        let _ = MyStruct{ field1: 1, field2: 2 };\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1204, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1495370785, "creation_date": 1495364077, "last_edit_date": 1495370785, "question_id": 44095998, "link": "https://stackoverflow.com/questions/44095998/is-it-possible-to-access-a-private-struct-field-from-a-test", "title": "Is it possible to access a private struct field from a test?", "body": "<p>I'm learning Rust at the moment (1 week so far) and I want to test my code.</p>\n\n<p>I have this struct:</p>\n\n<pre><code>pub struct MyStruct {\n  pub field1: i64,\n  field2: i64\n}\n\nimpl MyStruct {\n  pub fn new(a: i64) -&gt; MyStruct {\n    MyStruct { field1: a, field2: 0 }\n  }\n}\n</code></pre>\n\n<p>Now in a test in another module, I want to create a <code>MyStruct</code> with a specific <code>field2</code>, but it is private.</p>\n\n<p>Is there a way to do it without creating a special constructor for <code>MyStruct</code>?</p>\n"}, {"tags": ["error-handling", "rust", "pattern-matching"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495363898, "post_id": 44095840, "comment_id": 75212765, "body": "I think you need to include more code for context. For example, <code>A</code> is in the error message, but not in your code example. Please see <a href=\"https://stackoverflow.com/help/mcve\">stackoverflow.com/help/mcve</a>"}, {"owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495364078, "post_id": 44095840, "comment_id": 75212823, "body": "@PeterHall, there is no A in my code, what you see is what I get from the compiler, there is no more context I could give."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495364493, "post_id": 44095840, "comment_id": 75212939, "body": "@Arkaitz, try <code>&amp;x == &amp;[]</code>. Now you are comparing slice reference and an empty array."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495364929, "post_id": 44095840, "comment_id": 75213085, "body": "It seems like current Rust stable will use <code>A</code> in the error message, while nightly will use <code>_</code>, which is less confusing."}], "answers": [{"comments": [{"owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "edited": false, "score": 1, "creation_date": 1495366058, "post_id": 44096110, "comment_id": 75213397, "body": "Thanks!, I ended up using <code>Ok(ref x) if x.is_empty()</code> since there is no need to extract a slice"}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 3, "last_activity_date": 1495365597, "last_edit_date": 1495365597, "creation_date": 1495364746, "answer_id": 44096110, "question_id": 44095840, "link": "https://stackoverflow.com/questions/44095840/match-on-either-an-error-or-an-empty-result/44096110#44096110", "title": "Match on either an error or an empty result", "body": "<p>The problem is actually that it can't infer the type of <code>[]</code>. The type-checker cannot assume that <code>[]</code> here has the same type as <code>x.as_slice()</code> because the <code>PartialEq</code> trait (where <code>==</code> comes from) allows instances where the right hand side is of a different type to the left. You can easily solve it by looking at the slice's length instead, or checking if the slice is empty with <code>is_empty()</code>:</p>\n\n<pre><code>match nodes {\n    Err(e) =&gt; {\n        println!(\"Unable to list nodes: {:?}\", e);\n        return;\n    },\n    Ok(ref x) if x.as_slice().is_empty() =&gt; {\n        println!(\"No nodes found for service: {}\", service);\n        return;\n    }\n    _ =&gt; {}\n}\n</code></pre>\n\n<p>Also, taking a reference to <code>x</code> (with <code>ref x</code> like I've done above) will prevent another error that you're likely to get, avoiding moving <code>x</code> when it is still owned by <code>nodes</code>.</p>\n"}], "owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1819, "favorite_count": 0, "accepted_answer_id": 44096110, "answer_count": 1, "score": 0, "last_activity_date": 1495365749, "creation_date": 1495363043, "last_edit_date": 1495365749, "question_id": 44095840, "link": "https://stackoverflow.com/questions/44095840/match-on-either-an-error-or-an-empty-result", "title": "Match on either an error or an empty result", "body": "<p>I have a function that returns <code>Result&lt;Vec&lt;&amp;str&gt;, String&gt;</code> for a list of nodes. My intention is to check for an error or an empty vector to return early, or continue if there there is a list.</p>\n\n<p>This is what I am trying, among other things, but the compiler complains about the type of <code>x</code>.</p>\n\n<pre><code>let nodes = list_nodes(client, &amp;service);\nmatch nodes {\n    Err(e) =&gt; {\n        println!(\"Unable to list nodes: {:?}\", e);\n        return;\n    },\n    Ok(x) if x.as_slice() == []  =&gt; {\n        println!(\"No nodes found for service: {}\", service);\n        return;\n    }\n    _ =&gt; {}\n}\n</code></pre>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n  --&gt; src/main.rs:28:18\n   |\n28 |         Ok(x) if x.as_slice() == []  =&gt; {\n   |                  ^^^^^^^^^^^^^^^^^^ cannot infer type for `A`\n</code></pre>\n"}, {"tags": ["rust", "clap"], "comments": [{"owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 1, "creation_date": 1495355264, "post_id": 44094262, "comment_id": 75210547, "body": "Actually, you don&#39;t need clap for that. <code>let args: Vec&lt;String&gt; = env::args().skip(1).collect()</code> will do the job."}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "reply_to_user": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 0, "creation_date": 1495361491, "post_id": 44094262, "comment_id": 75212075, "body": "I want a CLI parser because I also have a flag, <code>.&#47;app foo bar baz --qux</code>"}], "answers": [{"comments": [{"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1495361697, "post_id": 44094672, "comment_id": 75212126, "body": "The unwrap is ok if we got <code>required(true)</code>, right?"}, {"owner": {"reputation": 502, "user_id": 3298826, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d80d437d6d9e6b9bc7835a7307792c19?s=128&d=identicon&r=PG", "display_name": "H2O", "link": "https://stackoverflow.com/users/3298826/h2o"}, "reply_to_user": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1495365505, "post_id": 44094672, "comment_id": 75213239, "body": "Yes, when the argument is required you get a runtime error when calling <code>get_matches</code>. So the value not being present could only happen due to a programmer error in which case crashing would be reasonable."}], "tags": [], "owner": {"reputation": 502, "user_id": 3298826, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d80d437d6d9e6b9bc7835a7307792c19?s=128&d=identicon&r=PG", "display_name": "H2O", "link": "https://stackoverflow.com/users/3298826/h2o"}, "is_accepted": true, "score": 6, "last_activity_date": 1495365679, "last_edit_date": 1495365679, "creation_date": 1495354705, "answer_id": 44094672, "question_id": 44094262, "link": "https://stackoverflow.com/questions/44094262/iterate-through-positional-arguments-with-clap/44094672#44094672", "title": "Iterate through positional arguments with clap", "body": "<p>The function you are looking for is <a href=\"https://docs.rs/clap/2.24.2/clap/struct.ArgMatches.html#method.values_of\" rel=\"noreferrer\">values_of</a>, you can use it like this:</p>\n\n<pre><code>let matches = App::new(\"My Super Program\")\n        .arg(Arg::with_name(\"something\")\n            .multiple(true))\n        .get_matches();\n\nlet iterator = matches.values_of(\"something\");\nfor el in iterator.unwrap() {\n    println!(\"{:?}\", el);\n};\n</code></pre>\n\n<p>If you don't care about preserving invalid UTF-8 the easier choice is using <a href=\"https://docs.rs/clap/2.24.2/clap/struct.ArgMatches.html#method.values_of_lossy\" rel=\"noreferrer\">values_of_lossy</a> which returns an actual Vector (<code>Option&lt;Vec&lt;String&gt;&gt;</code>) and not an iterator.</p>\n\n<pre><code>let arguments = matches.values_of_lossy(\"something\").unwrap();      \nprintln!(\"{:?}\", arguments);\n</code></pre>\n\n<p>Keep in mind that you really should not unwrap the values in your actual program as it will just crash at run-time if the arguments are not supplied. The only exception to this would be arguments that <code>required(true)</code> was set on. Their absence would cause a run-time error (with helpful error messages) when calling <code>get_matches</code>.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2120, "favorite_count": 2, "accepted_answer_id": 44094672, "answer_count": 1, "score": 7, "last_activity_date": 1495365679, "creation_date": 1495351594, "question_id": 44094262, "link": "https://stackoverflow.com/questions/44094262/iterate-through-positional-arguments-with-clap", "title": "Iterate through positional arguments with clap", "body": "<p>Say I have the following command line:</p>\n\n<pre><code>./app foo bar baz\n</code></pre>\n\n<p>I want to get this array out of it:</p>\n\n<pre><code>[\"foo\", \"bar\", \"baz\"]\n</code></pre>\n\n<p>Is there a way to do this in clap, given that the positional arguments can be of arbitrary count?</p>\n"}, {"tags": ["types", "rust", "nom"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 3, "creation_date": 1495318521, "post_id": 44090979, "comment_id": 75204207, "body": "Try compiling with <code>cargo rustc -- --pretty expanded -Z unstable-options</code>. This will show you the expanded macros."}], "answers": [{"tags": [], "owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "is_accepted": true, "score": 4, "last_activity_date": 1495331396, "last_edit_date": 1495331396, "creation_date": 1495330829, "answer_id": 44092391, "question_id": 44090979, "link": "https://stackoverflow.com/questions/44090979/using-nom-to-parse-literal-and-return-value/44092391#44092391", "title": "Using nom to parse literal and return value", "body": "<p>You have two issues: the function you pass to <a href=\"http://rust.unhandledexpression.com/nom/macro.map_res.html\" rel=\"nofollow noreferrer\"><code>map_res</code></a> (as in map result) must return a <code>Result</code>, and the function signature you pass to <a href=\"http://rust.unhandledexpression.com/nom/macro.named.html\" rel=\"nofollow noreferrer\"><code>named</code></a> must indicate input and output types. If you don't want to return a result, you can use the <a href=\"http://rust.unhandledexpression.com/nom/macro.map.html\" rel=\"nofollow noreferrer\"><code>map</code></a> macro</p>\n\n<pre><code>#[derive(PartialEq, Debug, Clone)]\npub enum Value {\n    Const(bool),\n}\n\nfn true_value&lt;T&gt;(_: T) -&gt; Value { Value::Const(true) }\nfn false_value&lt;T&gt;(_: T) -&gt; Value { Value::Const(false) }\n\n// input type and output type \nnamed!(literal_true&lt;&amp;[u8], Value&gt;, map!(tag!(\"true\"), true_value));\n// input type can be omitted if it's &amp;[u8]\nnamed!(literal_false&lt;Value&gt;, map!(tag!(\"false\"), false_value));\n</code></pre>\n"}], "owner": {"reputation": 13357, "user_id": 471436, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ac8bf979af0a8c220805fb61477d7c98?s=128&d=identicon&r=PG", "display_name": "Lanbo", "link": "https://stackoverflow.com/users/471436/lanbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 664, "favorite_count": 0, "accepted_answer_id": 44092391, "answer_count": 1, "score": 1, "last_activity_date": 1495331396, "creation_date": 1495315727, "last_edit_date": 1495330817, "question_id": 44090979, "link": "https://stackoverflow.com/questions/44090979/using-nom-to-parse-literal-and-return-value", "title": "Using nom to parse literal and return value", "body": "<p>I'm new to Rust and have been trying to wrap my head around this for three hours and I think I'm going insane. All I want is a parser that takes the string <code>\"true\"</code> and returns an enum <code>Value::Const(true)</code>. This is what I have so far:</p>\n\n<pre><code>// parser.rs\nuse nom::*;\n\n#[derive(PartialEq, Debug, Clone)]\npub enum Value {\n    Const(bool),\n}\n\nfn true_value&lt;T&gt;(_: T) -&gt; Value { Value::Const(true) }\nfn false_value&lt;T&gt;(_: T) -&gt; Value { Value::Const(false) }\n\nnamed!(literal_true&lt;&amp;[u8]&gt;, map_res!(tag!(\"true\"), true_value));\nnamed!(literal_false&lt;&amp;[u8]&gt;, map_res!(tag!(\"false\"), false_value));\n</code></pre>\n\n<p>But what I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/parser.rs:25:1\n   |\n25 | named!(literal_true&lt;&amp;[u8], Result&lt;Value, String&gt;&gt;, map_res!(tag!(\"true\"), true_value));\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `parser::Value`, found enum `std::result::Result`\n   |\n   = note: expected type `parser::Value`\n              found type `std::result::Result&lt;_, _&gt;`\n   = note: this error originates in a macro outside of the current crate\n</code></pre>\n\n<p>I have no idea what is happening here. I tried to find examples or tutorials to get just a tiny hint on how to do this, but for some reason, this must be some rare edge thing nobody else tried to do before.</p>\n"}, {"tags": ["rust", "rust-piston"], "answers": [{"tags": [], "owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "is_accepted": false, "score": 1, "last_activity_date": 1495328993, "creation_date": 1495328993, "answer_id": 44092255, "question_id": 44090806, "link": "https://stackoverflow.com/questions/44090806/how-can-the-resolution-of-a-pistonwindow-be-changed-after-creation/44092255#44092255", "title": "How can the resolution of a PistonWindow be changed after creation?", "body": "<p>As far as I know, you can't. At least not of an <em>existing</em> window.</p>\n\n<p>However, you can store the <code>WindowSettings</code> and re-create your window based on it when the user changes the resolution.</p>\n"}], "owner": {"reputation": 3908, "user_id": 1398841, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/s8gQQ.png?s=128&g=1", "display_name": "phoenix", "link": "https://stackoverflow.com/users/1398841/phoenix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 176, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1500250470, "creation_date": 1495314453, "last_edit_date": 1500250470, "question_id": 44090806, "link": "https://stackoverflow.com/questions/44090806/how-can-the-resolution-of-a-pistonwindow-be-changed-after-creation", "title": "How can the resolution of a PistonWindow be changed after creation?", "body": "<p>I'd like to change the resolution of a <a href=\"http://docs.piston.rs/piston_window/piston_window/struct.PistonWindow.html\" rel=\"nofollow noreferrer\"><code>PistonWindow</code></a> after it has been created. This would allow a user to change the resolution of the window while playing the game.</p>\n\n<p><a href=\"http://docs.piston.rs/piston_window/window/struct.WindowSettings.html\" rel=\"nofollow noreferrer\"><code>WindowSettings</code></a> has a <a href=\"http://docs.piston.rs/piston_window/window/struct.WindowSettings.html#method.set_size\" rel=\"nofollow noreferrer\"><code>set_size</code></a> method, but it doesn't seem to be accessible after the <code>PistonWindow</code> type is created.</p>\n\n<p>A simplified example:</p>\n\n<pre><code>extern crate piston_window;\n\nuse piston_window::*;\n\nfn main() {\n    let mut window: PistonWindow = WindowSettings::new(\"Game Title\", [200, 200])\n        .exit_on_esc(true)\n        .build()\n        .unwrap();\n\n    // Do some logic here, and change resolution to 400 x 400.\n\n    while let Some(e) = window.next() {\n        window.draw_2d(&amp;e, |c, g| {\n            ellipse([1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 100.0, 100.0], c.transform, g)\n        });\n    }\n}\n</code></pre>\n"}, {"tags": ["enums", "rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1495309778, "post_id": 44090181, "comment_id": 75201914, "body": "That&#39;s still odd. Why isn&#39;t the behaviour the same for <code>get_bar_ref</code>?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495311772, "post_id": 44090181, "comment_id": 75202468, "body": "According to the nomicon link you gave, <code>&amp;T</code> coerces to <code>*const T</code> and <code>&amp;mut T</code> to <code>*mut T</code>. It is still unclear to me why mutability affects the life span of the variable."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1495311860, "post_id": 44090181, "comment_id": 75202496, "body": "Interesting. According to documentation <code>&amp;Bar(ref n) =&gt; &amp;n</code> should expand to <code>&amp;Bar(ref n) =&gt; &amp;*(n.deref())</code>, but it doesn&#39;t compile. I suppose there&#39;s some compiler magic involved."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495313011, "post_id": 44090181, "comment_id": 75202813, "body": "It is probably have something to do with <a href=\"http://stackoverflow.com/questions/43036156/how-can-i-reborrow-a-mutable-reference-without-passing-it-to-a-function\">reborrowing of mutable references</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1495313200, "post_id": 44090181, "comment_id": 75202875, "body": "I do not believe this has anything to do with deref coercions."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1495315692, "post_id": 44090181, "comment_id": 75203551, "body": "Thanks, it works. I thought <code>n</code> was still not a reference and <code>ref</code> only avoided having it moved in the <code>match</code> branch; my <code>Box</code>ed cases also seemed to confirm this - <code>Foo(ref boxed) =&gt; &amp;*boxed</code> gives the reference to the contents of the <code>Box</code>, I don&#39;t need an additional deref (<code>&amp;**boxed</code>). I&#39;ll give the question a bit more time, maybe someone can explain the reason why it depends on mutability; otherwise, I&#39;ll accept this answer."}, {"owner": {"reputation": 723, "user_id": 431056, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hMZ64wPE1ds/AAAAAAAAAAI/AAAAAAAAACk/09SSkGPaJFE/photo.jpg?sz=128", "display_name": "eddyb", "link": "https://stackoverflow.com/users/431056/eddyb"}, "edited": false, "score": 4, "creation_date": 1495374488, "post_id": 44090181, "comment_id": 75215910, "body": "Deref coercions <i>cannot possibly</i> create temporaries. What&#39;s happening has be a difference between <code>&amp;mut **&amp;mut n</code> (which is what deref coercions will effectively result in on that example) and <code>&amp;mut *n</code> (which <i>does</i> work). It&#39;s unlikely to be required for soundness (since both versions do the <i>exact same</i> operation), but due to invariance under mutable references the lifetimes likely get &quot;tightened&quot; more than they should be. Can&#39;t find it now but it&#39;s possible this issue has been reported before."}, {"owner": {"reputation": 723, "user_id": 431056, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hMZ64wPE1ds/AAAAAAAAAAI/AAAAAAAAACk/09SSkGPaJFE/photo.jpg?sz=128", "display_name": "eddyb", "link": "https://stackoverflow.com/users/431056/eddyb"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1495375758, "post_id": 44090181, "comment_id": 75216261, "body": "@ljedrz If you have <code>Foo(ref boxed)</code>, then <code>*boxed: Box&lt;T&gt;</code> and <code>**boxed: T</code>, so <code>&amp;**boxed: &amp;T</code>. <i>However</i>, <code>boxed: &amp;Box&lt;T&gt;</code> will happily coerce to <code>&amp;T</code> (through deref coercions). <code>&amp;*boxed: &amp;Box&lt;T&gt;</code> is equivalent to simply using <code>boxed</code>."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 7, "last_activity_date": 1500283372, "last_edit_date": 1500283372, "creation_date": 1495309635, "answer_id": 44090181, "question_id": 44089525, "link": "https://stackoverflow.com/questions/44089525/why-cant-i-mutably-borrow-a-primitive-from-an-enum/44090181#44090181", "title": "Why can&#39;t I mutably borrow a primitive from an enum?", "body": "<p>You need to replace <code>Bar(ref mut n) =&gt; &amp;mut n</code> with <code>Bar(ref mut n) =&gt; n</code>.</p>\n\n<p>When you use <code>ref mut n</code> in <code>Bar(ref mut n)</code>, it creates a mutable\nreference to the data in <code>Bar</code>, so the type of <code>n</code> is <code>&amp;mut usize</code>.\nThen you try to return <code>&amp;mut n</code> of <code>&amp;mut &amp;mut u32</code> type. </p>\n\n<blockquote>\n  <p><strong>This part is most likely incorrect.</strong></p>\n  \n  <p>Now <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"nofollow noreferrer\">deref coercion</a> kicks in\n  and converts <code>&amp;mut n</code> into <code>&amp;mut *n</code>, creating a temporary value <code>*n</code>\n  of type <code>usize</code>, which doesn't live long enough.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 723, "user_id": 431056, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hMZ64wPE1ds/AAAAAAAAAAI/AAAAAAAAACk/09SSkGPaJFE/photo.jpg?sz=128", "display_name": "eddyb", "link": "https://stackoverflow.com/users/431056/eddyb"}, "is_accepted": true, "score": 7, "last_activity_date": 1495375565, "creation_date": 1495375565, "answer_id": 44097827, "question_id": 44089525, "link": "https://stackoverflow.com/questions/44089525/why-cant-i-mutably-borrow-a-primitive-from-an-enum/44097827#44097827", "title": "Why can&#39;t I mutably borrow a primitive from an enum?", "body": "<p>These examples show the sample problem:</p>\n\n<pre><code>fn implicit_reborrow&lt;T&gt;(x: &amp;mut T) -&gt; &amp;mut T {\n    x\n}\n\nfn explicit_reborrow&lt;T&gt;(x: &amp;mut T) -&gt; &amp;mut T {\n    &amp;mut *x\n}\n\nfn implicit_reborrow_bad&lt;T&gt;(x: &amp;mut T) -&gt; &amp;mut T {\n    &amp;mut x\n}\n\nfn explicit_reborrow_bad&lt;T&gt;(x: &amp;mut T) -&gt; &amp;mut T {\n    &amp;mut **&amp;mut x\n}\n</code></pre>\n\n<p>The <code>explicit_</code> versions show what the compiler deduces through <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"noreferrer\">deref coercions</a>.<br>\nThe <code>_bad</code> versions both error in the exact same way, while the other two compile.</p>\n\n<p>This is either a bug, or a limitation in how lifetimes are currently implemented in the compiler. The invariance of <code>&amp;mut T</code> over <code>T</code> <em>might</em> have something to do with it, because it results in <code>&amp;mut &amp;'a mut T</code> being invariant over <code>'a</code> and thus <em>more restrictive</em> during inference than the shared reference (<code>&amp;&amp;'a T</code>) case, even though <em>in this situation</em> the strictness is unnecessary.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 673, "favorite_count": 1, "accepted_answer_id": 44097827, "answer_count": 2, "score": 9, "last_activity_date": 1500283372, "creation_date": 1495305443, "last_edit_date": 1495309529, "question_id": 44089525, "link": "https://stackoverflow.com/questions/44089525/why-cant-i-mutably-borrow-a-primitive-from-an-enum", "title": "Why can&#39;t I mutably borrow a primitive from an enum?", "body": "<p>I would like to be able to obtain references (both immutable and mutable) to the <code>usize</code> wrapped in <code>Bar</code> in the <code>Foo</code> enum:</p>\n\n<pre><code>use Foo::*;\n\n#[derive(Debug, PartialEq, Clone)]\npub enum Foo {\n    Bar(usize)\n}\n\nimpl Foo {\n    /* this works */\n    fn get_bar_ref(&amp;self) -&gt; &amp;usize {\n        match *self {\n            Bar(ref n) =&gt; &amp;n\n        }\n    }\n\n    /* this doesn't */\n    fn get_bar_ref_mut(&amp;mut self) -&gt; &amp;mut usize {\n        match *self {\n            Bar(ref mut n) =&gt; &amp;mut n\n        }\n    }\n}\n</code></pre>\n\n<p>But I can't obtain the mutable reference because:</p>\n\n<blockquote>\n  <p><code>n</code> does not live long enough</p>\n</blockquote>\n\n<p>I was able to provide both variants of similar functions accessing other contents of <code>Foo</code> that are <code>Box</code>ed - why does the mutable borrow (and why only it) fail with an unboxed primitive? </p>\n"}, {"tags": ["intellij-idea", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495303228, "post_id": 44089097, "comment_id": 75200004, "body": "I guess this is what happens when IDEs are forced to roll out their own semantic analysis :/"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1495303248, "post_id": 44089097, "comment_id": 75200009, "body": "Probably you should report a bug to JetBrains."}, {"owner": {"reputation": 1428, "user_id": 2338813, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6e980933c74c99731cc96474f556f974?s=128&d=identicon&r=PG", "display_name": "Robert Balicki", "link": "https://stackoverflow.com/users/2338813/robert-balicki"}, "edited": false, "score": 0, "creation_date": 1495313632, "post_id": 44089097, "comment_id": 75203016, "body": "Looks like this is a <a href=\"https://github.com/intellij-rust/intellij-rust/issues/1243\" rel=\"nofollow noreferrer\">known issue</a> :)"}], "answers": [{"comments": [{"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1530825068, "post_id": 44093517, "comment_id": 89381564, "body": "Looks like this is supported now? <a href=\"https://github.com/intellij-rust/intellij-rust/pull/2331\" rel=\"nofollow noreferrer\">github.com/intellij-rust/intellij-rust/pull/2331</a> I don&#39;t see any links in that PR to a description of what it does or does not handle, though."}], "tags": [], "owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "is_accepted": true, "score": 4, "last_activity_date": 1495344589, "creation_date": 1495344589, "answer_id": 44093517, "question_id": 44089097, "link": "https://stackoverflow.com/questions/44089097/rust-ide-not-detecting-result-from-error-chain-thinks-im-using-the-stdresult/44093517#44093517", "title": "Rust IDE not detecting Result from error_chain, thinks I&#39;m using the std::result::Result", "body": "<p>The IntelliJ-Rust plugin uses its own code parser. It allows to leverage all the IntelliJ platform capabilities (like code navigation, formatting, refactoring, inspections, quick documentation, markers and many others) but requires implementing all the language features, which is not a simple task for Rust (you can find a more in-depth discussion of the Rust compiler parser versus IDE parser in <a href=\"https://www.reddit.com/r/rust/comments/5rhqj0/ide_compiler_has_very_different_requirements_and/\" rel=\"nofollow noreferrer\">this reddit post</a>).</p>\n\n<p>Macros expansion is probably the biggest language feature that is not supported by the plugin parser at the moment. That is, the plugin sees this <code>error_chain!</code> call, can resolve it to its definition, but doesn't expand it to the actual code and hence doesn't know about the new <code>Result</code> struct that shadows the one from stdlib. Unfortunately, in some cases it leads to such false positive error messages.</p>\n\n<p>I've converted this error annotation into an inspection, so in the next plugin version you'll be able to switch it off entirely or for the particular code block. The work on macros expansion is also in progress.</p>\n"}], "owner": {"reputation": 1428, "user_id": 2338813, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6e980933c74c99731cc96474f556f974?s=128&d=identicon&r=PG", "display_name": "Robert Balicki", "link": "https://stackoverflow.com/users/2338813/robert-balicki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 270, "favorite_count": 0, "accepted_answer_id": 44093517, "answer_count": 1, "score": 3, "last_activity_date": 1495344589, "creation_date": 1495302531, "last_edit_date": 1495303191, "question_id": 44089097, "link": "https://stackoverflow.com/questions/44089097/rust-ide-not-detecting-result-from-error-chain-thinks-im-using-the-stdresult", "title": "Rust IDE not detecting Result from error_chain, thinks I&#39;m using the std::result::Result", "body": "<p>I have an <code>errors.rs</code> file with <code>error_chain! {}</code>, which exports <code>Result</code>, <code>ResultExt</code>, <code>Error</code> and <code>ErrorKind</code>.</p>\n\n<p>If I <code>use self::errors::*</code>, IntelliJ thinks that I'm using the default <code>Result</code> (<code>std::result::Result</code>, I think). However, if I explicitly import the types using <code>use self::errors::{Result, ...}</code>, everything works out hunky dory.</p>\n\n<p>I can tell because the standard result has two type params, but the <code>error_chain</code> one has only one.</p>\n\n<p>In either case, it still compiles.</p>\n\n<p>I'm using the standard Rust IntelliJ plugin, version <code>0.1.0.1991</code>.</p>\n\n<p>Help! Does anyone know how to get the plugin to understand what the macro is doing?</p>\n"}, {"tags": ["linker", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "is_accepted": true, "score": 1, "last_activity_date": 1496925362, "creation_date": 1496925362, "answer_id": 44435979, "question_id": 44087676, "link": "https://stackoverflow.com/questions/44087676/cargo-creates-empty-elf-file/44435979#44435979", "title": "Cargo creates empty ELF file", "body": "<p>This is caused by a bug in the target <code>.json</code> file; specifically, this part:</p>\n\n<pre><code>\"pre-link-args\": {\n  \"gcc\": [\"-Os -mmcu=atmega328p\"]\n},\n</code></pre>\n\n<p>The arguments are passed directly as <code>argv</code> to the linker, so multiple arguments need to be split into multiple elements of the array here:</p>\n\n<pre><code>\"pre-link-args\": {\n  \"gcc\": [\"-Os\", \"-mmcu=atmega328p\"]\n},\n</code></pre>\n\n<p>The reason this problem didn't show up when using the special logging version of <code>avr-gcc</code> is that the log only contained all the arguments together, so there was no difference between the two representations.</p>\n\n<p>As for <code>avr-gcc '-Os -mmcu=atmega328p'</code> creating an empty <code>.elf</code> file, it seems that is simply a side-effect of not specifying any (valid) <code>-mmcu</code> argument.</p>\n"}], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 487, "favorite_count": 0, "accepted_answer_id": 44435979, "answer_count": 1, "score": 2, "last_activity_date": 1499348814, "creation_date": 1495294199, "last_edit_date": 1499348814, "question_id": 44087676, "link": "https://stackoverflow.com/questions/44087676/cargo-creates-empty-elf-file", "title": "Cargo creates empty ELF file", "body": "<p>I'm trying to use <a href=\"https://stackoverflow.com/a/43702805/477476\">this answer</a> by writing a custom target <code>.json</code> file with <code>\"linker-flavor\":\"gcc\"</code>. My full target <code>.json</code> file is:</p>\n\n<pre><code>{\n  \"llvm-target\": \"avr-atmel-none\",\n  \"cpu\": \"atmega328p\",\n  \"target-endian\": \"little\",\n  \"target-pointer-width\": \"16\",\n  \"os\": \"none\",\n  \"target-env\": \"gnu\",\n  \"target-vendor\": \"unknown\",\n  \"arch\": \"avr\",\n  \"data-layout\": \"e-p:16:16:16-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-n8\",\n\n  \"executables\": true,\n\n  \"linker\": \"avr-gcc\",\n  \"linker-flavor\": \"gcc\",\n  \"pre-link-args\": {\n    \"gcc\": [\"-Os -mmcu=atmega328p\"]\n  },\n  \"exe-suffix\": \".elf\",\n  \"post-link-args\": {\n    \"gcc\": [\"-Wl,--gc-sections\"]\n  },\n\n  \"no-default-libraries\": false\n}\n</code></pre>\n\n<p>Running <code>cargo build</code> with this finishes without any error messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build --release -v\n   Compiling core v0.1.0 (https://github.com/gergoerdi/rust-avr-libcore-mini?rev=adda44aa91ac517aab6915447592ee4cad26564c#adda44aa)\n     Running `rustc --crate-name core /home/cactus/.cargo/git/checkouts/rust-avr-libcore-mini-37e279d93a70b45a/adda44a/src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C metadata=655bb622dd229da9 -C extra-filename=-655bb622dd229da9 --out-dir /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps --target avr-atmega328p -L dependency=/home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-avr/target/release/deps --cap-lints allow`\n   Compiling chip8-engine v0.1.0 (https://github.com/gergoerdi/rust-avr-chip8-engine?rev=c6f88737bae4dae0bd6c5c2bbc73737e6dfadfcd#c6f88737)\n     Running `rustc --crate-name chip8_engine /home/cactus/.cargo/git/checkouts/rust-avr-chip8-engine-4bce60f3f178d33a/c6f8873/src/lib.rs --crate-type lib --emit=dep-info,link -C opt-level=3 -C metadata=2197ff1f15f697c9 -C extra-filename=-2197ff1f15f697c9 --out-dir /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps --target avr-atmega328p -L dependency=/home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-avr/target/release/deps --extern core=/home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libcore-655bb622dd229da9.rlib --cap-lints allow`\n   Compiling chip8-avr v0.1.0 (file:///home/cactus/prog/rust/avr/chip8-avr)\n     Running `rustc --crate-name chip8_avr src/main.rs --crate-type bin --emit=dep-info,link -C opt-level=3 -C metadata=014a8fed19cbc611 -C extra-filename=-014a8fed19cbc611 --out-dir /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps --target avr-atmega328p -L dependency=/home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-avr/target/release/deps --extern chip8_engine=/home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libchip8_engine-2197ff1f15f697c9.rlib --extern core=/home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libcore-655bb622dd229da9.rlib`\n    Finished release [optimized] target(s) in 15.99 secs\n</code></pre>\n\n<p>However, the resulting ELF file's <code>.text</code> section is empty:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ avr-objdump -h target/avr-atmega328p/release/chip8-avr.elf \n\ntarget/avr-atmega328p/release/chip8-avr.elf:     file format elf32-avr\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         00000000  00000000  00000000  00000074  2**1\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .data         00000000  00800060  00000000  00000074  2**0\n                  CONTENTS, ALLOC, LOAD, DATA\n  2 .stab         0000012c  00000000  00000000  00000074  2**2\n                  CONTENTS, READONLY, DEBUGGING\n  3 .stabstr      0000005d  00000000  00000000  000001a0  2**0\n                  CONTENTS, READONLY, DEBUGGING\n  4 .comment      00000011  00000000  00000000  000001fd  2**0\n                  CONTENTS, READONLY\n</code></pre>\n\n<p>So to figure out what's going on, I thought I'd replace my <code>avr-gcc</code>\nwith a small shellscript that logs its arguments before passing it to\nthe real <code>avr-gcc</code> executable.</p>\n\n<p>This shows me that <code>rustc</code>/<code>cargo</code> is trying to run the following\ncommand line to do the linking:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>/usr/bin/avr-gcc -Os -mmcu=atmega328p \\\n  -L /home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/avr-atmega328p/lib \\\n  /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/chip8_avr-014a8fed19cbc611.0.o \\\n  -o /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/chip8_avr-014a8fed19cbc611.elf \\\n  -Wl,--gc-sections \\\n  -L /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps -L /home/cactus/prog/rust/avr/chip8-avr/target/release/deps -L /home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/avr-atmega328p/lib \\\n  -Wl,-Bstatic /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libchip8_engine-2197ff1f15f697c9.rlib \\\n  /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libcore-655bb622dd229da9.rlib \\\n  -Wl,-Bdynamic -Wl,--gc-sections\n</code></pre>\n\n<p>If I run the exact same command manually, with the exact same environment variables, I get a good ELF file with\nthe right contents (note that its <code>.text</code> section is not empty):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ /usr/bin/avr-gcc -Os -mmcu=atmega328p -L /home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/avr-atmega328p/lib /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/chip8_avr-014a8fed19cbc611.0.o -o /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/chip8_avr-014a8fed19cbc611.elf -Wl,--gc-sections -L /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps -L /home/cactus/prog/rust/avr/chip8-avr/target/release/deps -L /home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/avr-atmega328p/lib -Wl,-Bstatic /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libchip8_engine-2197ff1f15f697c9.rlib /home/cactus/prog/rust/avr/chip8-avr/target/avr-atmega328p/release/deps/libcore-655bb622dd229da9.rlib -Wl,-Bdynamic -Wl,--gc-sections\n$ avr-objdump -h target/avr-atmega328p/release/deps/chip8_avr-014a8fed19cbc611.elf  \ntarget/avr-atmega328p/release/deps/chip8_avr-014a8fed19cbc611.elf:     file format elf32-avr\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .data         0000020e  00800100  00001a56  00001af0  2**4\n                  CONTENTS, ALLOC, LOAD, DATA\n  1 .text         00001a56  00000000  00000000  00000094  2**1\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  2 .bss          000001fa  0080030e  0080030e  00001cfe  2**0\n                  ALLOC\n  3 .stab         000007ec  00000000  00000000  00001d00  2**2\n                  CONTENTS, READONLY, DEBUGGING\n  4 .stabstr      000000b0  00000000  00000000  000024ec  2**0\n                  CONTENTS, READONLY, DEBUGGING\n  5 .comment      00000011  00000000  00000000  0000259c  2**0\n                  CONTENTS, READONLY\n</code></pre>\n\n<p>So why does <code>cargo</code> silently produce a nonsensical empty ELF file, if\nrunning the (supposedly) same command from the shell results in a valid ELF file?</p>\n"}, {"tags": ["performance", "vector", "rust", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1495265037, "post_id": 44082998, "comment_id": 75189221, "body": "This is the straight-forward solution, but we lose the functional smell. I love the possibility to create a collection with one line, like with haskell."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1495267204, "post_id": 44082998, "comment_id": 75189725, "body": "@Boiethios: it is tempting, true, but note that efficient (especially when it comes to vectors) Haskell rarely looks that way :)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 5, "last_activity_date": 1495264700, "last_edit_date": 1495264700, "creation_date": 1495264221, "answer_id": 44082998, "question_id": 44082810, "link": "https://stackoverflow.com/questions/44082810/how-do-i-repeat-some-elements-in-a-vector-based-on-a-condition/44082998#44082998", "title": "How do I repeat some elements in a vector based on a condition?", "body": "<p>You could do it within the same vector, but it would require moving the rest of the vector (after the doubled number) every time you encounter an even number, which is inefficient. It would be better to do it using a new vector and a simple loop:</p>\n\n<pre><code>fn main() {\n    let v = vec![1, 2, 3, 4, 6];\n\n    let mut v2 = Vec::with_capacity(v.len() + v.iter().filter(|&amp;n| n % 2 == 0).count());\n\n    for n in v {\n        v2.push(n);\n        if n % 2 == 0 { v2.push(n) }\n    }\n\n    assert_eq!(v2, vec![1, 2, 2, 3, 4, 4, 6, 6]);\n}\n</code></pre>\n\n<p>This solution allocates memory only once with the exact space required to hold all the numbers, including doubled evens.</p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1495286318, "last_edit_date": 1495286318, "creation_date": 1495270385, "answer_id": 44083845, "question_id": 44082810, "link": "https://stackoverflow.com/questions/44082810/how-do-i-repeat-some-elements-in-a-vector-based-on-a-condition/44083845#44083845", "title": "How do I repeat some elements in a vector based on a condition?", "body": "<blockquote>\n  <p>Is it necessary to create another <code>Vec</code>? Is is possible to use the same <code>Vec</code>, i.e. modify it while iterating?</p>\n</blockquote>\n\n<p>It's <em>possible</em> but not efficient. <code>Vec</code> allocates a block of memory on the heap, where each element is adjacent to the next one. If you just wanted to do some numeric operation on each element then yes, you could do that operation in place. But you need to insert new elements <em>in between</em> others, which would mean moving all the following elements one place to the right and (possibly) allocating more memory.</p>\n\n<p>The Haskell code you are thinking about is probably using a Haskell <code>Data.List</code> which is a linked list not a vector. If you used a more memory-efficient structure like <a href=\"https://hackage.haskell.org/package/vector\" rel=\"nofollow noreferrer\"><code>Data.Vector.Unboxed</code></a> or <a href=\"http://hackage.haskell.org/package/repa-3.4.1.2\" rel=\"nofollow noreferrer\">repa</a> then you would also not be able to insert elements while iterating.</p>\n\n<blockquote>\n  <p>My solution is, as I imagine, inefficient: I allocate a lot of vectors, and I have no guarantee that this will be optimized. Is it a better solution: readable and with less allocation?</p>\n</blockquote>\n\n<p>Something like this might work. It has a functional feel still, but works by allocating one <code>Vec</code> and then mutating it:</p>\n\n<pre><code>fn double_even(v: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    // allocate for the worst case (i.e. all elements of v are even)\n    let result = Vec::with_capacity(v.len() * 2);\n    v.into_iter().fold(result, |mut acc, n| {\n        acc.push(n);\n        if n % 2 == 0 {\n            acc.push(n);\n        }\n        acc\n    })\n}\n</code></pre>\n\n<p>You can also <code>shrink_to_fit()</code> at the end, but it would look a bit uglier, as you couldn't return the solution as an expression.</p>\n"}, {"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1497010683, "post_id": 44086356, "comment_id": 75911458, "body": "As usually, I think your answer is better and more detailed about the different solutions. In a real case, I would try each solution and do some benchmark, but it was only some exercise, so..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1495290123, "last_edit_date": 1495542884, "creation_date": 1495286263, "answer_id": 44086356, "question_id": 44082810, "link": "https://stackoverflow.com/questions/44082810/how-do-i-repeat-some-elements-in-a-vector-based-on-a-condition/44086356#44086356", "title": "How do I repeat some elements in a vector based on a condition?", "body": "<p><code>flat_map</code> expects iterators, so you can return an iterator of the values:</p>\n\n<pre><code>use std::iter;\n\nfn double_even(v: &amp;[i32]) -&gt; Vec&lt;i32&gt; {\n    v.iter().flat_map(|&amp;x| {\n        let count = if x % 2 == 0 { 2 } else { 1 };\n        iter::repeat(x).take(count)\n    }).collect()\n}\n\nfn main() {\n    let v = vec![1, 2, 3, 4, 6];\n    assert_eq!(double_even(&amp;v), vec![1, 2, 2, 3, 4, 4, 6, 6]);\n}\n</code></pre>\n\n<p>Things to note:</p>\n\n<ul>\n<li>There's no reason to have <code>use std::vec::Vec</code>. It's already imported via the <a href=\"https://doc.rust-lang.org/std/prelude/index.html\" rel=\"nofollow noreferrer\">prelude</a>.</li>\n<li>You aren't making use of the memory allocation of the passed-in vector, so there's no reason to take it. See also <a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String) or Vec (&amp;Vec) as a function argument?</a></li>\n<li>Don't use <code>vec!()</code>; use <code>vec![]</code> instead. It doesn't matter to the compiler, but it matters to humans.</li>\n</ul>\n\n<hr>\n\n<p>If you were really set on <em>attempting</em> to reuse the memory, I'd walk <em>backwards</em> along the iterator to help avoid index invalidation: </p>\n\n<pre><code>fn double_even(mut v: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    for i in (0..v.len()).rev() {\n        let val = v[i]; \n        if val % 2 == 0 {\n            v.insert(i, val);\n        }\n    }\n    v\n}\n</code></pre>\n\n<p>This is probably algorithmically worse; each <code>insert</code> moves all the data after it. I believe the worst-case would be <code>O(n^2)</code> when every element were even.</p>\n\n<p>I also wouldn't normally take by-value here. I'd instead take a mutable reference. You could always wrap it back in a value if you really needed it:</p>\n\n<pre><code>fn double_even_ref(v: &amp;mut Vec&lt;i32&gt;) {\n    for i in (0..v.len()).rev() {\n        let val = v[i];\n        if val % 2 == 0 {\n            v.insert(i, val);\n        }\n    }\n}\n\nfn double_even(mut v: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    double_even_ref(&amp;mut v);\n    v\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": false, "score": 2, "last_activity_date": 1495292176, "last_edit_date": 1592644375, "creation_date": 1495292176, "answer_id": 44087347, "question_id": 44082810, "link": "https://stackoverflow.com/questions/44082810/how-do-i-repeat-some-elements-in-a-vector-based-on-a-condition/44087347#44087347", "title": "How do I repeat some elements in a vector based on a condition?", "body": "<blockquote>\n<ul>\n<li><p>Is it necessary to create another Vec? Is is possible to use the same Vec, i.e. modify it while iterating?</p>\n</li>\n<li><p>My solution is, I imagine, inefficient: I allocate a lot of vectors, and I have no guarantee that this will be optimized. Is there a better solution: readable and with less allocation?</p>\n</li>\n</ul>\n</blockquote>\n<p>One thing you can do which is quite idiomatic is to implement your function as an &quot;iterator adapter&quot; - that is, rather than dealing with <code>Vec</code> in particular, look at <code>Iterator</code>s of <code>i32</code> elements instead. Then everything will be a variable on the stack, and no allocations will be made at all. It could look something like this:</p>\n<pre><code>struct DoubleEven&lt;I&gt; {\n    iter: I,\n    next: Option&lt;i32&gt;,\n}\n\nimpl&lt;I&gt; Iterator for DoubleEven&lt;I&gt;\n    where I: Iterator&lt;Item=i32&gt;\n{\n    type Item = i32;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.next.take().or_else(||\n            self.iter.next().map(|value| {\n                if value % 2 == 0 { self.next = Some(value) }\n                value\n            })\n        )\n    }\n}\n</code></pre>\n<p>Then you can write</p>\n<pre><code>fn main() {\n    let vec = vec![1, 2, 3, 4, 5, 6];\n    let double_even = DoubleEven {\n        iter: vec.into_iter(),\n        next: None,\n    };\n    for x in double_even {\n        print!(&quot;{}, &quot;, x)  // prints 1, 2, 2, 3, 4, 4, 5, 6, 6, \n    }\n}\n</code></pre>\n<p>Even better, you can add a function <code>double_even</code> to anything that can be turned into an iterator of <code>i32</code>, allowing you to write the following:</p>\n<pre><code>trait DoubleEvenExt : IntoIterator + Sized {\n    fn double_even(self) -&gt; DoubleEven&lt;Self::IntoIter&gt; {\n        DoubleEven {\n            iter: self.into_iter(),\n            next: None,\n        }\n    }\n}\n\nimpl&lt;I&gt; DoubleEvenExt for I where I: IntoIterator&lt;Item=i32&gt; {}\n\nfn main() {\n    let vec = vec![1, 2, 3, 4, 5, 6];\n    for x in vec.double_even() {\n        print!(&quot;{}, &quot;, x)  // prints 1, 2, 2, 3, 4, 4, 5, 6, 6, \n    }\n}\n</code></pre>\n<p>Now I will admit that in this case the boilerplate is adding up, but you can see that at the callsite the code is really very terse. For more complex adapters this pattern can be very useful. In addition, beyond the initial <code>Vec</code> allocation, there is <em>no</em> memory allocation going on whatsoever! Just stack-allocated variables, allowing for highly-efficient code in a release build.</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1048, "favorite_count": 0, "accepted_answer_id": 44086356, "answer_count": 4, "score": 3, "last_activity_date": 1549367228, "creation_date": 1495262789, "last_edit_date": 1549367228, "question_id": 44082810, "link": "https://stackoverflow.com/questions/44082810/how-do-i-repeat-some-elements-in-a-vector-based-on-a-condition", "title": "How do I repeat some elements in a vector based on a condition?", "body": "<p>I encountered this problem during a <a href=\"https://en.wikipedia.org/wiki/Kata_(programming)\" rel=\"nofollow noreferrer\">kata</a>. My more readable implementation was the following:</p>\n\n<pre><code>use std::vec::Vec;\n\nfn repeat_even(v: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    v.into_iter().flat_map(|x| match x % 2 { 0 =&gt; vec![x, x], _ =&gt; vec![x] }).collect()\n}\n\nfn main() {\n    let v = vec![1, 2, 3, 4, 6];\n    assert_eq!(repeat_even(v), vec![1, 2, 2, 3, 4, 4, 6, 6]);\n}\n</code></pre>\n\n<p>I have two questions about it:</p>\n\n<ul>\n<li><p>Is it necessary to create another <code>Vec</code>? Is is possible to use the same <code>Vec</code>, i.e. modify it while iterating?</p></li>\n<li><p>My solution is, I imagine, inefficient: I allocate a lot of vectors, and I have no guarantee that this will be optimized. Is there a better solution: readable and with less allocation?</p></li>\n</ul>\n"}, {"tags": ["multithreading", "asynchronous", "rust", "closures", "message-queue"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495285662, "post_id": 44082408, "comment_id": 75194654, "body": "<i>Questions seeking debugging help (&quot;why isn&#39;t this code working?&quot;) must include the desired behavior, a specific problem or error and <b>the shortest code necessary to reproduce it in the question itself</b>.</i> Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. The code you have presented does nothing because it creates a closure which is never called."}], "answers": [{"tags": [], "owner": {"reputation": 17388, "user_id": 921321, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3f4c4737cb30134f58cc76f06ef5113a?s=128&d=identicon&r=PG", "display_name": "Lukazoid", "link": "https://stackoverflow.com/users/921321/lukazoid"}, "is_accepted": true, "score": 1, "last_activity_date": 1495272816, "creation_date": 1495272816, "answer_id": 44084226, "question_id": 44082408, "link": "https://stackoverflow.com/questions/44082408/unexpectedly-closed-channel-in-syncmpsc/44084226#44084226", "title": "Unexpectedly closed channel in sync::mpsc", "body": "<p>One possibility for this would be that your <code>Receiver</code> has been dropped. The channel will only stay active while both the <code>Sender</code> and <code>Receiver</code> are alive.</p>\n\n<p>One of the examples for <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html#method.send\" rel=\"nofollow noreferrer\"><code>Sender.send</code></a> shows that dropping the <code>Receiver</code> terminates the channel:</p>\n\n<pre><code>use std::sync::mpsc::channel;\n\nlet (tx, rx) = channel();\n\n// This send is always successful\ntx.send(1).unwrap();\n\n// This send will fail because the receiver is gone\ndrop(rx);\nassert_eq!(tx.send(1).unwrap_err().0, 1);\n</code></pre>\n\n<p>Make sure your <code>Receiver</code> is alive for as long as your <code>Sender</code> is and you should not see this error.</p>\n"}], "owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 1, "accepted_answer_id": 44084226, "answer_count": 1, "score": -1, "last_activity_date": 1495273184, "creation_date": 1495259289, "last_edit_date": 1495273184, "question_id": 44082408, "link": "https://stackoverflow.com/questions/44082408/unexpectedly-closed-channel-in-syncmpsc", "title": "Unexpectedly closed channel in sync::mpsc", "body": "<p>I have a closure, that uses <code>Sender</code> from <code>std::sync::mpsc</code>:</p>\n\n<pre><code>let node = Arc::new(Mutex::new(node_sender)); \nlet switch_callback =\n        move |p| match Params::parse::&lt;Value&gt;(p) {\n            Ok(ref v) if v.as_array().is_some() =&gt; {\n                let chain = v.as_array()\n                    .and_then(|arr| arr[0].as_str())\n                    .and_then(|s| Some(s.to_owned()))\n                    .unwrap();\n\n                let channel = node.lock().unwrap().clone();\n                match channel.send(chain.clone()) {\n                    Ok(_) =&gt; futures::done(Ok(Value::String(chain))).boxed(),\n                    Err(err) =&gt; futures::failed(JsonRpcError::invalid_params(\n                        format!(\"Node not responding: {}\", err.to_string())))\n                        .boxed(),\n                }\n            }\n            Ok(_) | Err(_) =&gt; {\n                futures::failed(JsonRpcError::invalid_params(\"Invalid chain label for node\"))\n                    .boxed()\n            }\n        };\n</code></pre>\n\n<p>This closure is used as a callback from another thread. I used <code>clone()</code> here, to clone <code>Sender</code> so I expect the channel should stay active. But the channel is actually getting closed, why would this happen?</p>\n"}, {"tags": ["dynamic", "stack", "rust", "heap", "memory-safety"], "comments": [{"owner": {"reputation": 1, "user_id": 8039847, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/fe10151dbe59ca5ec69e29247a8afdc7?s=128&d=identicon&r=PG", "display_name": "2keymin", "link": "https://stackoverflow.com/users/8039847/2keymin"}, "edited": false, "score": 0, "creation_date": 1495264702, "post_id": 44081865, "comment_id": 75210709, "body": "i32 is a Copy type, so the data get copied not moved."}, {"owner": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "reply_to_user": {"reputation": 1, "user_id": 8039847, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/fe10151dbe59ca5ec69e29247a8afdc7?s=128&d=identicon&r=PG", "display_name": "2keymin", "link": "https://stackoverflow.com/users/8039847/2keymin"}, "edited": false, "score": 0, "creation_date": 1495264866, "post_id": 44081865, "comment_id": 75210710, "body": "But, I am operating on the surrounding struct (<code>ValContainer</code>), not on the contained integer. And custom struct types are by default not <code>Copy</code>able, to my knowledge."}, {"owner": {"reputation": 1, "user_id": 8039847, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/fe10151dbe59ca5ec69e29247a8afdc7?s=128&d=identicon&r=PG", "display_name": "2keymin", "link": "https://stackoverflow.com/users/8039847/2keymin"}, "edited": false, "score": 0, "creation_date": 1495274440, "post_id": 44081865, "comment_id": 75210711, "body": "Yup, you were right.  Did not properly read your code."}], "answers": [{"comments": [{"owner": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "edited": false, "score": 0, "creation_date": 1495255352, "post_id": 44081944, "comment_id": 75187305, "body": "What do you mean by <i>boxes control boxes</i>? I also don&#39;t quite understand what <code>Drop</code> has to do with it all? <code>Drop</code> is called when the <code>Box</code> value is destroyed, for which the compiler knows exactly <i>when</i> that happens. But why does it loose control?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "edited": false, "score": 5, "creation_date": 1495256099, "post_id": 44081944, "comment_id": 75187439, "body": "@MightyNicM: I&#39;ve tried to clarify the &quot;control boxes&quot; part.  The reason <code>Drop</code> is important is because that&#39;s what destroys the contents of the <code>Box</code> (or any other type).  If the compiler were to move one part out of a <code>Box</code>, the <code>Box</code> has no way of knowing that.  There&#39;s just suddenly a hole in the middle of its allocation, which could cause problems when it tries to destroy said hole.  It&#39;s not a problem of when to drop, it&#39;s a problem of <i>what</i> to drop.  The compiler can deal with &quot;holes&quot; in the stack, but nowhere else."}, {"owner": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "edited": false, "score": 0, "creation_date": 1495256572, "post_id": 44081944, "comment_id": 75187508, "body": "I see. I never truly understood the term &quot;move&quot;. Somewhere, I read that the compiler will still copy the value bit by bit, but just does no longer allow the moved part to be modified in any way. So I guess when using the term &quot;hole&quot;, you just mean the <i>old copy of the data</i> that shouldn&#39;t be used (or destroyed) anymore?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "edited": false, "score": 3, "creation_date": 1495256658, "post_id": 44081944, "comment_id": 75187521, "body": "@MightyNicM: Right.  Once the compiler moves something, the bits left behind in the old position are invalid and must not be touched.  If they <i>are</i>, you can end up with double-frees and other bad behaviour."}, {"owner": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "edited": false, "score": 0, "creation_date": 1495257277, "post_id": 44081944, "comment_id": 75187624, "body": "So, let me then ask the more general question: Is it <b>in principle</b> even possible to track ownership on the heap, assuming the compiler would manage <code>Box</code>es itself? Since the heap is dynamic, it can contain cyclic and recursive structures, possibly aliases. So even in theory, is it even computable?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "edited": false, "score": 3, "creation_date": 1495257369, "post_id": 44081944, "comment_id": 75187635, "body": "@MightyNicM: Rust cannot track heap lifetimes.  It might be possible in theory, but I don&#39;t believe it&#39;s even hypothetically planned for."}, {"owner": {"reputation": 769, "user_id": 5433623, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-0jplvxnVu04/AAAAAAAAAAI/AAAAAAAAGvQ/VLbN9V7SMJ8/photo.jpg?sz=128", "display_name": "Matt Brubeck", "link": "https://stackoverflow.com/users/5433623/matt-brubeck"}, "edited": false, "score": 3, "creation_date": 1495295375, "post_id": 44081944, "comment_id": 75197640, "body": "The important distinction is the destructor, not the stack versus the heap.  If you take the non-boxed version and implement <code>Drop</code> for either OuterContainer or InnerContainer, then partial moves are disallowed."}, {"owner": {"reputation": 459, "user_id": 1234290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95a3d7c79c2a29f586acc574fb4b3239?s=128&d=identicon&r=PG", "display_name": "Alexis Beingessner", "link": "https://stackoverflow.com/users/1234290/alexis-beingessner"}, "edited": false, "score": 3, "creation_date": 1495318216, "post_id": 44081944, "comment_id": 75204126, "body": "Some minor pedantry: the compiler in fact does know about Box, and has historically enabled you to do the sort of things you could do with structs to a Box. The only one I remember that still exists is that you can move out of a dereference of a Box, which isn&#39;t something anything else can do. Most of this stuff was significantly rolled back for 1.0, because we didn&#39;t <i>want</i> the compiler to give one type a bunch of special analysis (why not Rc, Vec, etc...?). There has since been some efforts to come up with general mechanisms to expose the old Box analysis in a principled way."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 13, "last_activity_date": 1495256576, "last_edit_date": 1495256576, "creation_date": 1495254868, "answer_id": 44081944, "question_id": 44081865, "link": "https://stackoverflow.com/questions/44081865/ownership-tracking-in-rust-difference-between-boxt-heap-and-t-stack/44081944#44081944", "title": "Ownership tracking in Rust: Difference between Box&lt;T&gt; (heap) and T (stack)", "body": "<p>In the abstract, a <code>struct</code> on the stack is <em>kind of</em> just a bunch of variables under a common name.  The compiler knows this, and can break a structure into a set of otherwise independent stack variables.  This lets it track the movement of each field independently.</p>\n\n<p>It can't do that with a <code>Box</code>, or any other kind of custom allocation, because the compiler doesn't control <code>Box</code>es.  <code>Box</code> is just some code in the standard library, not an intrinsic part of the language.  <code>Box</code> has no way of reasoning about different parts of itself suddenly becoming not valid.  When it comes time to destroy a <code>Box</code>, it's <code>Drop</code> implementation only knows to destroy <em>everything</em>.</p>\n\n<p>To put it another way: on the stack, the compiler is in full control, and can thus do fancy things like breaking structures up and moving them piecemeal.  As soon as custom allocation enters the picture, all bets are off, and the compiler has to back off and stop trying to be clever.</p>\n"}], "owner": {"reputation": 731, "user_id": 3616714, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/sE5BR.png?s=128&g=1", "display_name": "domin", "link": "https://stackoverflow.com/users/3616714/domin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 748, "favorite_count": 1, "accepted_answer_id": 44081944, "answer_count": 1, "score": 5, "last_activity_date": 1495264702, "creation_date": 1495254029, "last_edit_date": 1495255465, "question_id": 44081865, "link": "https://stackoverflow.com/questions/44081865/ownership-tracking-in-rust-difference-between-boxt-heap-and-t-stack", "title": "Ownership tracking in Rust: Difference between Box&lt;T&gt; (heap) and T (stack)", "body": "<p>Experimenting with the programming language Rust, I found that the compiler is able to track a move of a <strong>field of some struct on the stack</strong> very accurately (it knows exactly <em>what</em> field has moved).\nHowever, when I put one part of the structure into a <code>Box</code> (i.e. putting it onto the heap), the compiler is no longer able to determine field-level moves for everything that happens <strong>after the dereference</strong> of the box. It will assume that the whole structure \"inside the box\" has moved. Let's first see an example where everything is on the stack:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct OuterContainer {\n    inner: InnerContainer\n}\n\nstruct InnerContainer {\n    val_a: ValContainer,\n    val_b: ValContainer\n}\n\nstruct ValContainer {\n    i: i32\n}\n\n\nfn main() {\n    // Note that the whole structure lives on the stack.\n    let structure = OuterContainer {\n        inner: InnerContainer {\n            val_a: ValContainer { i: 42 },\n            val_b: ValContainer { i: 100 }\n        }\n    };\n\n    // Move just one field (val_a) of the inner container.\n    let move_me = structure.inner.val_a;\n\n    // We can still borrow the other field (val_b).\n    let borrow_me = &amp;structure.inner.val_b;\n}\n</code></pre>\n\n<p>And now the <strong>same example but with one minor change</strong>: We put the <code>InnerContainer</code> into a box (<code>Box&lt;InnerContainer&gt;</code>).</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct OuterContainer {\n    inner: Box&lt;InnerContainer&gt;\n}\n\nstruct InnerContainer {\n    val_a: ValContainer,\n    val_b: ValContainer\n}\n\nstruct ValContainer {\n    i: i32\n}\n\n\nfn main() {\n    // Note that the whole structure lives on the stack.\n    let structure = OuterContainer {\n        inner: Box::new(InnerContainer {\n            val_a: ValContainer { i: 42 },\n            val_b: ValContainer { i: 100 }\n        })\n    };\n\n    // Move just one field (val_a) of the inner container.\n    // Note that now, the inner container lives on the heap.\n    let move_me = structure.inner.val_a;\n\n    // We can no longer borrow the other field (val_b).\n    let borrow_me = &amp;structure.inner.val_b; // error: \"value used after move\"\n}\n</code></pre>\n\n<p>I suspect that it has something to do with the <strong>nature of the stack vs. the nature of the heap</strong>, where the former is static (per stack frame at least), and the latter is dynamic. Maybe the compiler needs to play it safe because of some reason I cannot articulate/identify well enough.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1495248281, "post_id": 44081272, "comment_id": 75186288, "body": "&quot;backed&quot; doesn&#39;t make sense as a word in this context.  I don&#39;t understand what you think is supposed to be happening."}, {"owner": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1495248605, "post_id": 44081272, "comment_id": 75186330, "body": "My understanding is: after the invocation of f0(), borrowing of z0 and z1 are ended so I don&#39;t need to keep z0 and z1 instances."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1495249413, "post_id": 44081272, "comment_id": 75186452, "body": "A clearer phrasing would be &quot;the borrowed references are dropped&quot; or &quot;the borrows end&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "edited": false, "score": 0, "creation_date": 1495250072, "post_id": 44081506, "comment_id": 75186541, "body": "Thanks for detailed explanation!"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "edited": false, "score": 1, "creation_date": 1495294059, "post_id": 44081506, "comment_id": 75197258, "body": "@ruimo If you want to read a slightly more type-theoretic explanation , <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">here&#39;s a page of the Rustonomicon that deals with lifetime subtyping</a>. In particular, the reason that the compiler can narrow <code>&#39;a</code> but not <code>&#39;b</code> in <code>&amp;&#39;a mut S&lt;&#39;b&gt;</code> is because <code>&amp;&#39;a mut T</code> is variant in <code>&#39;a</code> and invariant in <code>T</code>. It helped me learn to reason about lifetimes better."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1495294180, "post_id": 44081506, "comment_id": 75197295, "body": "In general, though, the rule &quot;don&#39;t just spam a single lifetime everywhere&quot; will get you pretty far."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1495249360, "creation_date": 1495249360, "answer_id": 44081506, "question_id": 44081272, "link": "https://stackoverflow.com/questions/44081272/how-to-resolve-lifetime-error-for-mutable-reference-in-rust/44081506#44081506", "title": "How to resolve lifetime error for mutable reference in Rust?", "body": "<p>There are two problems here.  The first is that you've over-specified lifetimes, creating a situation the compiler just can't deal with.</p>\n\n<pre><code>fn f0&lt;'a&gt;(t0: &amp;'a mut MyItr&lt;'a&gt;, t1: &amp;'a mut MyItr&lt;'a&gt;, i: &amp;'a i32)\n</code></pre>\n\n<p>You've told the compiler that all the arguments must be pointers with <em>the same</em> lifetime.  The compiler can narrow overlapping lifetimes, but in this case that doesn't help.  You've specified that the pointer to the <code>MyItr</code>s has the same lifetime as the thing they point to, <em>and</em> the outer pointers are mutable.</p>\n\n<p>The second problem is that (even after fixing that), what you're trying to do is just outright unsafe and will lead to dangling pointers.</p>\n\n<p>Here's a <em>more</em> minimal example:</p>\n\n<pre><code>struct S&lt;'a&gt; {\n    ptr: &amp;'a i32,\n}\n\nfn f&lt;'b&gt;(t: &amp;'b mut S&lt;'b&gt;, new_ptr: &amp;'b i32) {}\n\nfn main() {\n    let i0 = 1;\n    let mut s = S { ptr: &amp;i0 };\n\n    let i1 = 2;\n    f(&amp;mut s, &amp;i1);\n}\n</code></pre>\n\n<p>What is <code>'b</code>?  Well, the compiler can <em>only</em> narrow lifetimes, so usually you'd just take the lifetimes of everything you're trying to pass and pick the shortest one.  In this case, that would be the lifetime of <code>i1</code>.  So, it has to narrow the lifetime of <code>&amp;s</code>.  The lifetime on the pointer to <code>s</code> itself isn't a problem (you can narrow how long you take a borrow for), but narrowing the inner lifetime (the one used for the <code>ptr</code> field) <em>is</em> a problem.</p>\n\n<p>If the compiler narrowed the lifetime of <code>s.ptr</code>, you would then be able to store <code>&amp;i1</code> in that field.  <code>s</code> expects <code>s.ptr</code> to outlive itself, but that will no longer be true: <code>i1</code> will <em>be destroyed</em> before <code>s</code> is, meaning <code>s.ptr</code> will contain a dangling pointer.  And Rust <em>will not</em> allow that to happen.</p>\n\n<p>As a result, Rust <em>can't</em> narrow <code>s</code>'s inner <code>'a</code> lifetime... but if it can't narrow it, then that means <code>'b</code> must be the full, un-narrowed <code>'a</code>.  But wait, that means that <code>'b</code> is longer than the lifetime of <code>s</code> itself <em>and</em> <code>i1</code>.  And that's impossible.</p>\n\n<p>Hence the failure.</p>\n\n<p>The solution requires two things.  First, you need to not over-specify lifetimes.  Secondly, you need to ensure that some valid lifetime exists <em>at all</em>; in the case of your original code, that means moving <code>i2</code> above <code>z0</code> and <code>z1</code> so that it outlives them.  Like so:</p>\n\n<pre><code>fn f0&lt;'a&gt;(t0: &amp;mut MyItr&lt;'a&gt;, t1: &amp;mut MyItr&lt;'a&gt;, i: &amp;'a i32) {\n    let t: &amp;mut MyItr&lt;'a&gt; = std::cmp::max(t0, t1);\n    t.cur = i;\n}\n\nfn f1() {\n    let i0 = 1;\n    let i1 = 2;\n    let i2 = 3;\n    let mut z0 = MyItr { cur: &amp;i0 };\n    let mut z1 = MyItr { cur: &amp;i1 };\n\n    f0(&amp;mut z0, &amp;mut z1, &amp;i2);\n}\n</code></pre>\n\n<p>A rule of thumb: don't just spam a single lifetime everywhere.  Only use the same lifetime for things that should be the same.</p>\n"}], "owner": {"reputation": 223, "user_id": 3227347, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/1309abf98d1884d3654114d779f1f46b?s=128&d=identicon&r=PG&f=1", "display_name": "ruimo", "link": "https://stackoverflow.com/users/3227347/ruimo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1725, "favorite_count": 1, "accepted_answer_id": 44081506, "answer_count": 1, "score": 2, "last_activity_date": 1495249360, "creation_date": 1495246550, "last_edit_date": 1495248492, "question_id": 44081272, "link": "https://stackoverflow.com/questions/44081272/how-to-resolve-lifetime-error-for-mutable-reference-in-rust", "title": "How to resolve lifetime error for mutable reference in Rust?", "body": "<p>I am not sure why the following code does not compile.</p>\n\n<pre><code>use std::cmp::Ordering;\n\nstruct MyItr&lt;'a&gt; {\n    cur: &amp;'a i32,\n}\n\nimpl&lt;'a&gt; Ord for MyItr&lt;'a&gt; {\n    fn cmp(&amp;self, other: &amp;MyItr) -&gt; Ordering {\n        self.cur.cmp(&amp;other.cur)\n    }\n}\n\nimpl&lt;'a&gt; PartialOrd for MyItr&lt;'a&gt; {\n    fn partial_cmp(&amp;self, other: &amp;MyItr&lt;'a&gt;) -&gt; Option&lt;Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n\nimpl&lt;'a&gt; PartialEq for MyItr&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;MyItr) -&gt; bool {\n        self.cur == other.cur\n    }\n}\n\nimpl&lt;'a&gt; Eq for MyItr&lt;'a&gt; {}\n\nfn f0&lt;'a&gt;(t0: &amp;'a mut MyItr&lt;'a&gt;, t1: &amp;'a mut MyItr&lt;'a&gt;, i: &amp;'a i32) {\n    let t = std::cmp::max(t0, t1);\n    t.cur = i;\n}\n\nfn f1() {\n    let i0 = 1;\n    let i1 = 2;\n    let mut z0 = MyItr { cur: &amp;i0 };\n    let mut z1 = MyItr { cur: &amp;i1 };\n\n    let i2 = 3;\n    f0(&amp;mut z0, &amp;mut z1, &amp;i2);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build\n   Compiling foo v0.1.0 (file:///private/tmp/foo)\nerror: `z1` does not live long enough\n  --&gt; lib.rs:40:1\n   |\n39 |     f0(&amp;mut z0, &amp;mut z1, &amp;i2);\n   |                      -- borrow occurs here\n40 | }\n   | ^ `z1` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>My understanding is the borrowed references to <code>z0</code> and <code>z1</code> are backed once the <code>f0</code> invocation ends. However, The compiler seems to assume the borrowed references are not backed.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo --version\ncargo 0.20.0-nightly (41e490480 2017-05-16)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2044, "user_id": 10470, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3ecb0f3769169c5a8ed092ec2f5b8e23?s=128&d=identicon&r=PG", "display_name": "duane", "link": "https://stackoverflow.com/users/10470/duane"}, "edited": false, "score": 0, "creation_date": 1495944854, "post_id": 44081036, "comment_id": 75457828, "body": "&quot;Sometimes it is, and sometimes you have to think about why you believe the code to be correct and why the compiler states it isn&#39;t and come to an understanding.&quot;  This makes sense. I was hoping there would be an easier way to identify which trait(s) lead to lifetime computations\u2014do I have to wait for tooling to be built into RLS eventually (e.g. I know there is a similar functionality for identifying the computed type of an AST node in IntelliJ), or are there tools that might assist with this already?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1495248787, "last_edit_date": 1495248787, "creation_date": 1495244006, "answer_id": 44081036, "question_id": 44080917, "link": "https://stackoverflow.com/questions/44080917/discerning-lifetimes-understanding-the-move-keyword/44081036#44081036", "title": "Discerning lifetimes understanding the move keyword", "body": "<blockquote>\n  <p>Why does the <code>Iter { value: 0.0 }</code> have the <code>'static</code> lifetime?</p>\n</blockquote>\n\n<p>It doesn't; only references have lifetimes.</p>\n\n<blockquote>\n  <p>why does it say the borrowed value must be valid for the <code>'static</code> lifetime</p>\n  \n  <p>how do I figure out the expected lifetime without trying to be a compiler myself</p>\n</blockquote>\n\n<p>Read the documentation; it tells you the restriction:</p>\n\n<pre><code>fn set_render_callback&lt;F, D&gt;(&amp;mut self, f: F) -&gt; Result&lt;(), Error&gt; \nwhere\n    F: FnMut(Args&lt;D&gt;) -&gt; Result&lt;(), ()&gt; + 'static, // &lt;====\n    D: Data\n</code></pre>\n\n<p>This restriction means that any references inside of <code>F</code> must live at least as long as the  <code>'static</code> lifetime. Having no references is also acceptable.</p>\n\n<p>All type and lifetime restrictions are expressed at the function boundary \u2014 this is a hard rule of Rust.</p>\n\n<blockquote>\n  <p>I understand that the <code>move</code> keyword allows moving inside the closure, which doesn't help me understand why it interacts with lifetimes. </p>\n</blockquote>\n\n<p>The only thing that the <code>move</code> keyword does is force every variable <em>directly used</em> in the closure to be moved into the closure. Otherwise, the compiler tries to be conservative and move in references/mutable references/values based on the usage inside the closure.</p>\n\n<blockquote>\n  <p>Why can't it move the buffer?</p>\n</blockquote>\n\n<p>The variable <code>buf</code> is never used inside the closure.</p>\n\n<blockquote>\n  <p>Do I have to move both the buffer and the iterator into the closure? How would I do that?</p>\n</blockquote>\n\n<p>By creating the iterator inside the closure. Now <code>buf</code> is used inside the closure and will be moved:</p>\n\n<pre><code>let callback = move |args| {\n    let mut samples = buf.iter();\n    // ...\n}\n</code></pre>\n\n<blockquote>\n  <p>It doesn't seem like guessing and compiling is always a straightforward method to resolving these issues.</p>\n</blockquote>\n\n<p>Sometimes it is, and sometimes you have to think about why you believe the code to be correct and why the compiler states it isn't and come to an understanding.</p>\n"}], "owner": {"reputation": 2044, "user_id": 10470, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3ecb0f3769169c5a8ed092ec2f5b8e23?s=128&d=identicon&r=PG", "display_name": "duane", "link": "https://stackoverflow.com/users/10470/duane"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 0, "accepted_answer_id": 44081036, "answer_count": 1, "score": 0, "last_activity_date": 1495248787, "creation_date": 1495242547, "last_edit_date": 1495242982, "question_id": 44080917, "link": "https://stackoverflow.com/questions/44080917/discerning-lifetimes-understanding-the-move-keyword", "title": "Discerning lifetimes understanding the move keyword", "body": "<p>I've been playing around with AudioUnit via Rust and the Rust library <a href=\"https://github.com/RustAudio/coreaudio-rs\" rel=\"nofollow noreferrer\">coreaudio-rs</a>. Their example seems to work well:</p>\n\n<pre><code>extern crate coreaudio;\n\nuse coreaudio::audio_unit::{AudioUnit, IOType};\nuse coreaudio::audio_unit::render_callback::{self, data};\nuse std::f32::consts::PI;\n\n\nstruct Iter {\n    value: f32,\n}\nimpl Iterator for Iter {\n    type Item = [f32; 2];\n    fn next(&amp;mut self) -&gt; Option&lt;[f32; 2]&gt; {\n        self.value += 440.0 / 44_100.0;\n        let amp = (self.value * PI * 2.0).sin() as f32 * 0.15;\n        Some([amp, amp])\n    }\n}\n\n\nfn main() {\n    run().unwrap()\n}\n\nfn run() -&gt; Result&lt;(), coreaudio::Error&gt; {\n    // 440hz sine wave generator.\n\n    let mut samples = Iter { value: 0.0 };\n    //let buf: Vec&lt;[f32; 2]&gt; = vec![[0.0, 0.0]];\n    //let mut samples = buf.iter();\n\n    // Construct an Output audio unit that delivers audio to the default output device.\n    let mut audio_unit = try!(AudioUnit::new(IOType::DefaultOutput));\n\n    // Q: What is this type?\n    let callback = move |args| {\n        let Args { num_frames, mut data, .. } = args;\n        for i in 0..num_frames {\n            let sample = samples.next().unwrap();\n            for (channel_idx, channel) in data.channels_mut().enumerate() {\n                channel[i] = sample[channel_idx];\n            }\n        }\n        Ok(())\n    };\n\n    type Args = render_callback::Args&lt;data::NonInterleaved&lt;f32&gt;&gt;;\n    try!(audio_unit.set_render_callback(callback));\n    try!(audio_unit.start());\n\n    std::thread::sleep(std::time::Duration::from_millis(30000));\n\n    Ok(())\n}\n</code></pre>\n\n<p>However, changing it up a little bit to load via a buffer doesn't work as well:</p>\n\n<pre><code>extern crate coreaudio;\n\nuse coreaudio::audio_unit::{AudioUnit, IOType};\nuse coreaudio::audio_unit::render_callback::{self, data};\n\nfn main() {\n    run().unwrap()\n}\n\nfn run() -&gt; Result&lt;(), coreaudio::Error&gt; {\n    let buf: Vec&lt;[f32; 2]&gt; = vec![[0.0, 0.0]];\n    let mut samples = buf.iter();\n\n    // Construct an Output audio unit that delivers audio to the default output device.\n    let mut audio_unit = try!(AudioUnit::new(IOType::DefaultOutput));\n\n    // Q: What is this type?\n    let callback = move |args| {\n        let Args { num_frames, mut data, .. } = args;\n        for i in 0..num_frames {\n            let sample = samples.next().unwrap();\n            for (channel_idx, channel) in data.channels_mut().enumerate() {\n                channel[i] = sample[channel_idx];\n            }\n        }\n        Ok(())\n    };\n\n    type Args = render_callback::Args&lt;data::NonInterleaved&lt;f32&gt;&gt;;\n    try!(audio_unit.set_render_callback(callback));\n    try!(audio_unit.start());\n\n    std::thread::sleep(std::time::Duration::from_millis(30000));\n\n    Ok(())\n}\n</code></pre>\n\n<p>It says, correctly so, that <code>buf</code> only lives until the end of <code>run</code> and does not live long enough for the audio unit\u2014which makes sense, because \"borrowed value must be valid for the static lifetime...\".\nIn any case, that doesn't bother me; I can modify the iterator to load and read from the buffer just fine. However, it does raise some questions:</p>\n\n<ol>\n<li>Why does the <code>Iter { value: 0.0 }</code> have the <code>'static</code> lifetime?</li>\n<li>If it doesn't have the <code>'static</code> lifetime, why does it say the borrowed value must be valid for the <code>'static</code> lifetime?</li>\n<li>If it does have the <code>'static</code> lifetime, why? It seems like it would be on the heap and closed on by <code>callback</code>.</li>\n<li>I understand that the <code>move</code> keyword allows moving inside the closure, which doesn't help me understand why it interacts with lifetimes. Why can't it move the buffer? Do I have to move both the buffer and the iterator into the closure? How would I do that?</li>\n<li>Over all this, <strong>how do I figure out the expected lifetime without trying to be a compiler myself</strong>? It doesn't seem like guessing and compiling is always a straightforward method to resolving these issues.</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495302815, "post_id": 44079527, "comment_id": 75199886, "body": "I don&#39;t know the answer, but I would have assumed that  there&#39;s no special logic here; a functions ABI only matches if it matches exactly."}, {"owner": {"reputation": 1455, "user_id": 1506301, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba34ad56376b81321544fc4e81ece91?s=128&d=identicon&r=PG&f=1", "display_name": "arkod", "link": "https://stackoverflow.com/users/1506301/arkod"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495307120, "post_id": 44079527, "comment_id": 75201211, "body": "I did expect &quot;system&quot; to get replaced by the appropriate ABI name for the target platform, but Rust FFI is all new to me so I expect my expectations to be wrong most of the time. I implemented a macro as a workaround, I&#39;ll post it here later. Thanks for the edit of my question btw :)"}], "owner": {"reputation": 1455, "user_id": 1506301, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba34ad56376b81321544fc4e81ece91?s=128&d=identicon&r=PG&f=1", "display_name": "arkod", "link": "https://stackoverflow.com/users/1506301/arkod"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 590, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1495315951, "creation_date": 1495230711, "last_edit_date": 1495315951, "question_id": 44079527, "link": "https://stackoverflow.com/questions/44079527/in-rust-why-is-not-extern-system-compatible-with-extern-c-on-macos", "title": "In Rust, why is not `extern &quot;system&quot;` compatible with `extern &quot;C&quot;` on macOS?", "body": "<p>I'm trying to wrap a C library that makes use of callbacks and they need different calling conventions depending on OS.</p>\n\n<p>On Windows they need to be <code>stdcall</code> (or <code>C</code> if x64). On Linux and macOS they need to be <code>C</code>.</p>\n\n<p>I use bindgen to generate the bindings, but I also want to wrap that layer in another layer hiding the callbacks. I thought the following should work:</p>\n\n<pre><code>extern \"system\" .........\n</code></pre>\n\n<p>but I get these kind of errors (currently on macOS):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>E0308: mismatched types\n  label: expected \"C\" fn, found \"system\" fn\n  note: expected type `extern \"C\" fn(*mut ...\n</code></pre>\n\n<p>I would like to share the wrapper layer for all platforms. Do I need to duplicate the wrapper layer or use macros for this? Should <code>extern \"system\"</code> work? Is this a bug?</p>\n\n<p>Edit:</p>\n\n<p>I ended up writing a workaround: <a href=\"https://crates.io/crates/extern_attrib\" rel=\"nofollow noreferrer\">https://crates.io/crates/extern_attrib</a></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1520435952, "last_edit_date": 1520435952, "creation_date": 1495229329, "answer_id": 44079247, "question_id": 44078964, "link": "https://stackoverflow.com/questions/44078964/why-cant-i-use-the-ty-macro-matcher-to-construct-a-struct/44079247#44079247", "title": "Why can&#39;t I use the `ty` macro matcher to construct a struct?", "body": "<p>Because <code>Foo</code> in <code>Foo { bar: true }</code> <em>isn't a type</em>. A type is something like <code>i32</code> or <code>String</code>, sure, but also something like <code>Vec&lt;u8&gt;</code> or <code>Result&lt;Option&lt;Vec&lt;bool&gt;&gt;, String&gt;</code>.</p>\n\n<p>It wouldn't make any sense to write code like this:</p>\n\n<pre><code>struct A&lt;T&gt;(T);\n\nfn main() {\n    A&lt;u8&gt;(42);\n}\n</code></pre>\n\n<p>You will need to pass in <em>both</em> an ident and a type:</p>\n\n<pre><code>macro_rules! foo {\n    ($T1: ty, $T2: ident) =&gt; {\n        fn test() -&gt; $T1 {\n            $T2 { x: 3 }\n        }\n    }\n}\n\nfoo!(A, A);\n</code></pre>\n\n<p>Or you can cheat and use a token tree:</p>\n\n<pre><code>macro_rules! foo {\n    ($T: tt) =&gt; {\n        fn test() -&gt; $T {\n            $T { x: 3 }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 63, "favorite_count": 0, "accepted_answer_id": 44079247, "answer_count": 1, "score": 3, "last_activity_date": 1520435952, "creation_date": 1495227881, "last_edit_date": 1495229341, "question_id": 44078964, "link": "https://stackoverflow.com/questions/44078964/why-cant-i-use-the-ty-macro-matcher-to-construct-a-struct", "title": "Why can&#39;t I use the `ty` macro matcher to construct a struct?", "body": "<pre><code>struct A {\n    x: i64,\n}\n\nmacro_rules! foo {\n    ($T:ty) =&gt; {\n        fn test() -&gt; $T {\n            $T { x: 3 }\n        }\n    }\n}\n\nfoo!(A);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=040676d8b1e679653c646ac8d3b0ab72&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected expression, found `A`\n8 |             $T { x: 3 }\n</code></pre>\n\n<p>I know I can use <code>ident</code>, but I don't get why I cannot use <code>$T {}</code>.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1495220019, "post_id": 44077046, "comment_id": 75178274, "body": "Your error refers to a line of code (<code>while left &lt; left_half.len()</code>) which you haven&#39;t provided, as well as other variables (<code>parts</code>). <i>Questions seeking debugging help (&quot;why isn&#39;t this code working?&quot;) must include the desired behavior, a specific problem or error and the <b>shortest code necessary to reproduce it in the question itself</b>.</i> Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}], "answers": [{"tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": true, "score": 1, "last_activity_date": 1495497835, "creation_date": 1495497835, "answer_id": 44123807, "question_id": 44077046, "link": "https://stackoverflow.com/questions/44077046/moving-value-out-of-closure-because-of-threading/44123807#44123807", "title": "Moving value out of closure because of threading", "body": "<p>I assume you have code after the scope call, which is operating on the vector. Unfortunately, the scope is taking ownership of the vector, so it can't.</p>\n\n<p>You can fix it by rebinding it as a mutable reference, which will be released at the end of the scope normally:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut left_half = array[0 .. half].to_vec();\nlet mut right_half = array[half .. whole].to_vec();\nlet left_half = &amp;mut left_half;\nlet right_half = &amp;mut right_half;\ncrossbeam::scope(|scope| {\n    parts.push(scope.spawn(move || i32_merge_sort(left_half)));\n    parts.push(scope.spawn(move || i32_merge_sort(right_half)));\n});\n</code></pre>\n"}], "owner": {"reputation": 156, "user_id": 5615967, "user_type": "registered", "accept_rate": 92, "profile_image": "https://lh3.googleusercontent.com/-k7tbrpdLkTo/AAAAAAAAAAI/AAAAAAAAACQ/zwe5HlAFMV0/photo.jpg?sz=128", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/5615967/sebastian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 264, "favorite_count": 0, "accepted_answer_id": 44123807, "answer_count": 1, "score": -1, "last_activity_date": 1495497835, "creation_date": 1495219646, "last_edit_date": 1495219931, "question_id": 44077046, "link": "https://stackoverflow.com/questions/44077046/moving-value-out-of-closure-because-of-threading", "title": "Moving value out of closure because of threading", "body": "<p>I am playing around with multithreaded Rust after learning about it in C++. However Rust's borrowing seems to make it difficult to have an equivalent to <code>waitpid</code> and returning values from child threads.</p>\n\n<p>My current implementation uses crossbeam:</p>\n\n<pre><code>let half = array.len() / 2;\nlet whole = array.len();\nlet mut left_half = array[0 .. half].to_vec();\nlet mut right_half = array[half .. whole].to_vec();\ncrossbeam::scope(|scope| {\n    parts.push(scope.spawn(move || i32_merge_sort(&amp;mut left_half)));\n    parts.push(scope.spawn(move || i32_merge_sort(&amp;mut right_half)));\n});\n</code></pre>\n\n<p>I get the following error due to the closure and the values in the spawned threads not being waited for properly:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `left_half`\n  --&gt; src\\main.rs:39:22\n   |\n29 |         crossbeam::scope(|scope| {\n   |                          ------- value moved (into closure) here\n...\n39 |         while left &lt; left_half.len() &amp;&amp; right &lt; right_half.len() {\n   |                      ^^^^^^^^^ value used here after move\n   |\n   = note: move occurs because `left_half` has type `std::vec::Vec&lt;i32&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I have not been able to find a concise explanation on how to do this sort of multi-threading, which I for one don't think is a strange use case.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495206432, "post_id": 44073359, "comment_id": 75170813, "body": "How about checking out <a href=\"https://doc.rust-lang.org/beta/book/second-edition/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i>, second edition</a>? You haven&#39;t told us what you don&#39;t understand from the book, so what&#39;s preventing an answer from giving you the same content you already don&#39;t understand?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495206551, "post_id": 44073359, "comment_id": 75170897, "body": "Besides, the first edition of the book has a section on <a href=\"https://doc.rust-lang.org/beta/book/first-edition/crates-and-modules.html#multiple-file-crates\" rel=\"nofollow noreferrer\">multiple file crates</a> which discusses your exact circumstance."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495206644, "post_id": 44073359, "comment_id": 75170965, "body": "<i>a non extern crate</i> \u2014 no such thing exists."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495207433, "post_id": 44073359, "comment_id": 75171489, "body": "Also, note the <b>Related</b> questions in the list to the right: <a href=\"http://stackoverflow.com/q/26224947/155423\">stackoverflow.com/q/26224947/155423</a> and <a href=\"http://stackoverflow.com/q/17340985/155423\">stackoverflow.com/q/17340985/155423</a> look relevant."}], "answers": [{"tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": false, "score": -2, "last_activity_date": 1495589745, "creation_date": 1495589745, "answer_id": 44147562, "question_id": 44073359, "link": "https://stackoverflow.com/questions/44073359/how-does-the-import-module-system-in-rust-work/44147562#44147562", "title": "How does the import/module system in Rust work?", "body": "<p>Add this declaration to your <code>main.rs</code> file:</p>\n\n<pre><code>mod foo;\n</code></pre>\n\n<p>Which acts like a shorthand for:</p>\n\n<pre><code>mod foo { include!(\"foo.rs\") }\n</code></pre>\n\n<p>Though it knows that if there isn't a <code>foo.rs</code> file, but there is a <code>foo/mod.rs</code> file, to include that instead.</p>\n"}], "owner": {"reputation": 105, "user_id": 6490150, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e7bd6f35dfaa3c0c4ee2f99dbd19332c?s=128&d=identicon&r=PG&f=1", "display_name": "caffeinated-fox", "link": "https://stackoverflow.com/users/6490150/caffeinated-fox"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 799, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1495589745, "creation_date": 1495206166, "last_edit_date": 1495206332, "question_id": 44073359, "link": "https://stackoverflow.com/questions/44073359/how-does-the-import-module-system-in-rust-work", "title": "How does the import/module system in Rust work?", "body": "<p>I'm currently learning Rust. I've just mastered the borrowing system, but I don't know how the module system works.</p>\n\n<p>To import an extern module, I must write <code>extern crate sdl2;</code>. But what if I want to import a non extern crate?</p>\n\n<p>I know I can define a module using <code>mod</code> like:</p>\n\n<pre><code>mod foo {\n    fn bar(length: i32) -&gt; Vec&lt;i32&gt; {\n        let mut list = vec![];\n        for i in 0..length + 1 {\n            if list.len() &gt; 1 {\n                list.push(&amp;list[-1] + &amp;list[-2]);\n            } else {\n                list.push(1);\n            }\n        }\n        list\n    }\n}\n</code></pre>\n\n<p>And use it in the same file with <code>foo::</code>, but how can I use functions/modules from other files?</p>\n\n<p>Just for sake of details imagine this setup:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.\n|-- Cargo.lock\n|-- Cargo.toml\n`-- src\n    |-- foo.rs\n    `-- main.rs\n</code></pre>\n\n<p>So in <strong>src/foo.rs</strong> I have:</p>\n\n<pre><code>fn bar(length: i32) -&gt; Vec&lt;i32&gt; {\n    let mut list = vec![];\n    for i in 0..length + 1 {\n        if list.len() &gt; 1 {\n            list.push(&amp;list[-1] + &amp;list[-2]);\n        } else {\n            list.push(1);\n        }\n    }\n    list\n}\n</code></pre>\n\n<p>And I want to use it in <code>src/main.rs</code>. When I try a plain <code>use foo::bar</code>, I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  |\n1 | use foo::bar;\n  |     ^^^^^^^^ Maybe a missing `extern crate foo;`?\n</code></pre>\n\n<p>When putting the function inside <code>mod foo {...}</code> I get the same error.</p>\n\n<p>If there is any post about this topic, give me a link to it as I get nothing but the Rust Book.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495195971, "post_id": 44069757, "comment_id": 75163439, "body": "<i>Specialisation is enabled</i> \u2014 why do you believe that specialization has anything to do with this problem?"}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495196187, "post_id": 44069757, "comment_id": 75163582, "body": "@Shepmaster  So that I hope the solution would cause <code>decode_message</code> to specialise the type of <code>BufReader</code> as well, rather than fallback to the default."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1495199022, "post_id": 44069757, "comment_id": 75165620, "body": "That does not look like specialisation, just monomorphism. And there is hardly a better way to do that than what you already have. Making <code>reader</code> a trait object would remove the repetition, but that would induce a runtime cost."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495206466, "post_id": 44069757, "comment_id": 75170843, "body": "Also note that you can <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html#method.lock\" rel=\"nofollow noreferrer\"><code>lock</code></a> stdin to get a reader that implements <code>BufRead</code>. The concerns would be the same however."}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495206993, "post_id": 44069757, "comment_id": 75171178, "body": "@E_net4 How is <code>lock</code> compared to <code>BufReader</code>?"}, {"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495221206, "post_id": 44069757, "comment_id": 75178829, "body": "@E_net4 I have to <code>#![feature(specialization)]</code> to get my code work. Why is not specialization?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1495233078, "post_id": 44069757, "comment_id": 75183575, "body": "@colinfang I meant to say that the culprit of the question does not have to do with specialization."}], "answers": [{"comments": [{"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "edited": false, "score": 0, "creation_date": 1495221404, "post_id": 44073331, "comment_id": 75178924, "body": "If I use trait object, i.e. cast both to <code>BufReader&lt;Box&lt;Read&gt;&gt;</code>, does it prevent the monomorphisms? I.e, does <code>decode_message</code> always go via <code>Read</code> route and never <code>Read + Seek</code>?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "edited": false, "score": 0, "creation_date": 1495233201, "post_id": 44073331, "comment_id": 75183605, "body": "@colinfang That would be a grey area. The feature is not stabilized, and there isn&#39;t much information about whether trait objects can follow specializations. In this particular case, you are much better off not using trait objects. Otherwise, the <a href=\"https://github.com/rust-lang/rust/issues/31844\" rel=\"nofollow noreferrer\">tracking issue</a> would be the best (albeit more exhausting) source of information about how specialization works (and should work)."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 1, "last_activity_date": 1495233252, "last_edit_date": 1495233252, "creation_date": 1495206089, "answer_id": 44073331, "question_id": 44069757, "link": "https://stackoverflow.com/questions/44069757/how-i-can-remove-repetition-when-dealing-with-incompatible-types-in-an-if-else/44073331#44073331", "title": "How I can remove repetition when dealing with incompatible types in an if/else?", "body": "<p>As far as your question shows, specialization is not the culprit, it's just the use of monomorphisms: the <code>reader</code> bindings defined in the two conditional scopes, given the definition of <code>BufReader::new</code>, will be different and cannot be assigned to the same binding. Each time a run-time condition leads to the divergence of value types, such as in this case, they will also lead to code routines that cannot be shared among them.</p>\n\n<p>Of course, there is an exception to this: trait objects have their concrete type erased, and so a binding <code>reader: BufReader&lt;Box&lt;Read&gt;&gt;</code>, or even <code>reader: Box&lt;BufRead&gt;</code>, could hold any of the two readers in the conditional statements. However, the resulting code would likely not perform better, since it would induce a runtime cost from method resolution, and prevent some ahead-of-time optimizations.</p>\n\n<p>Therefore, there is hardly a better way to do that than what you already have.\nIn fact, a good pattern here has already been applied in your example: you can use monomorphic functions to contain the remaining logic that diverged from monomorphism, until it converges to the same type. With it, you only have to repeat a <code>decode_message()</code> call instead of everything in it.</p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 78, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1495233252, "creation_date": 1495195840, "last_edit_date": 1495196019, "question_id": 44069757, "link": "https://stackoverflow.com/questions/44069757/how-i-can-remove-repetition-when-dealing-with-incompatible-types-in-an-if-else", "title": "How I can remove repetition when dealing with incompatible types in an if/else?", "body": "<p>I have a method <code>decode_message</code> that has 2 implementations, one is for <code>BufReader&lt;Read&gt;</code> the other is <code>BufReader&lt;Read + Seek&gt;</code>. Specialisation is enabled.</p>\n\n<pre><code>if is_stdin {\n    let mut reader = BufReader::with_capacity(1000, io::stdin());\n    decode_message(reader)\n} else {\n    let filename = &amp;args[1];\n    let mut reader = BufReader::with_capacity(1000, File::open(filename).unwrap());\n    decode_message(reader)\n};\n</code></pre>\n\n<p>The code above works, but it is annoying that I have to repeat <code>decode_message</code> in each branch.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1495186259, "post_id": 44065938, "comment_id": 75156794, "body": "As you seem to speak German, now I&#39;m curious: is this a university or school assignment? If so, what university/school? ^_^"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1495186489, "post_id": 44065938, "comment_id": 75156988, "body": "But regarding your question: I unfortunately fail to understand what your program is supposed to do. Right now it panics, because you mix <code>PUB</code> and <code>PUBLISH</code>. But from your description it seems that this is not the problem you are talking about, so please fix the panic so that we can concentrate on the main problem. But again: I&#39;m not sure what you&#39;re trying to achieve. Do you want to have a getter/setter in one method? Please modify your question to clarify these things, thanks :)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1495199140, "last_edit_date": 1495199140, "creation_date": 1495198619, "answer_id": 44070746, "question_id": 44065938, "link": "https://stackoverflow.com/questions/44065938/how-do-we-save-and-retrieve-a-variable-in-a-struct-across-multiple-calls/44070746#44070746", "title": "How do we save and retrieve a variable in a struct across multiple calls?", "body": "<blockquote>\n  <p>the previously saved sentence</p>\n</blockquote>\n\n<p>You seem to be very confused about how and where data is stored. I <strong>strongly encourage</strong> you to re-read <a href=\"https://doc.rust-lang.org/stable/book\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>. In this specific case, you should take extra care to re-read up to and including <a href=\"https://doc.rust-lang.org/stable/book/method-syntax.html\" rel=\"nofollow noreferrer\">methods</a>.</p>\n\n<p>Plainly said, there's nowhere for <code>Test::testing</code> to store data. Methods that access per-instance data have a <code>self</code> argument. <code>Test::testing</code> is an <em>associated function</em>, not a method.</p>\n\n<p>Adding <code>&amp;mut self</code> to the function makes it a method, then replace all uses of <code>data</code> with <code>self</code>:</p>\n\n<pre><code>#[derive(Default)]\nstruct Test {\n    satz: String,\n}\n\nimpl Test {\n    pub fn testing(&amp;mut self, message: &amp;str) -&gt; Result&lt;Option&lt;String&gt;, &amp;'static str&gt; {\n        let mut vs: Vec&lt;_&gt; = message.split(' ').collect();\n        let mut i = 0;  \n        while vs[i] != \"\\n\" {\n            i += 1;\n            if i &gt; vs.len() {\n                Err(\"wrong format.\").unwrap()\n            }\n        }\n        vs.truncate(i);\n\n        match vs[0] {\n            \"PUB\" =&gt; {\n                self.satz = vs.join(\" \");\n                Ok(None)\n            }\n            \"RET\" =&gt; {\n                Ok(Some(self.satz.clone()))\n            }\n            _ =&gt; Err(\"wrong format.\")\n        }\n    }\n}\n\nfn main() {\n    let mut t = Test::default();\n    t.testing(\"PUB Hey this is a short message! \\n\").unwrap();\n    let a = t.testing(\"RET \\n\").unwrap().unwrap();\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>Note that the compiler attempted to tell you that something was wrong:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused variable: `data`\n</code></pre>\n\n<p>It appears that you think that <code>data</code> has some special meaning that would allow it to persist across function calls \u2014 there is no such thing. Persisting across functions, without being explicit where the data is stored, <em>would</em> be a global variable, and those are undesirable for many reasons.</p>\n\n<p>Additionally, you <em>should not ignore warnings</em>, like </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused result which must be used\n</code></pre>\n\n<p>If something can't fail, call <code>expect</code> (or if you must, <code>unwrap</code>).</p>\n\n<hr>\n\n<p>FWIW, I'd write it like</p>\n\n<pre><code>impl Test {\n    pub fn testing(&amp;mut self, message: &amp;str) -&gt; Result&lt;Option&lt;String&gt;, &amp;'static str&gt; {\n        let message = message.trim();\n        let mut parts = message.splitn(2, \" \");\n\n        match parts.next() {\n            Some(\"PUB\") =&gt; {\n                let msg = parts.next().ok_or(\"wrong format.\")?;\n                self.satz = msg.to_owned();\n                Ok(None)\n            }\n            Some(\"RET\") =&gt; {\n                Ok(Some(self.satz.clone()))\n            }\n            _ =&gt; Err(\"wrong format.\")\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user8035574"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 152, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1495199140, "creation_date": 1495185072, "last_edit_date": 1495196271, "question_id": 44065938, "link": "https://stackoverflow.com/questions/44065938/how-do-we-save-and-retrieve-a-variable-in-a-struct-across-multiple-calls", "title": "How do we save and retrieve a variable in a struct across multiple calls?", "body": "<p>We are trying to save a sentence in a struct and need to initialize it beforehand or the struct will not be known inside of the match statement (see code further down <code>let data = ...</code>). </p>\n\n<p>When we call the function twice (as seen in the <code>fn main</code> part) it overwrites the previously saved sentence with the default initialized struct and returns that instead.</p>\n\n<p>Is there some way to keep that sentence saved and known within the match statement for \"RET\" without using a unsafe global variable?</p>\n\n<pre><code>#[derive(Default)]\nstruct Test {\n    satz: String,\n}\n\nimpl Test {\n    pub fn testing(message: &amp;str) -&gt; Result&lt;Option&lt;String&gt;, &amp;'static str&gt; {\n        let mut vs: Vec&lt;&amp;str&gt; = message.split(' ').collect();\n        let mut i = 0;  \n        while vs[i] != \"\\n\" {\n            i += 1;\n            if i &gt; vs.len() {\n                Err(\"wrong format.\").unwrap()\n            }\n        }\n        vs.truncate(i);\n        let data: Test = Default::default();\n        match vs[0] {\n            \"PUB\" =&gt; {\n                let data = Test { satz: vs.join(\" \") };\n                Ok(None)\n            }\n            \"RET\" =&gt; {\n                let x = data.satz;\n                Ok(Some(x))\n            }\n            _ =&gt; Err(\"wrong format.\")\n        }\n    }\n}\n\nfn main() {\n    Test::testing(\"PUBLISH Hey this is a short message! \\n\");\n    let a = Test::testing(\"RETRIEVE \\n\").unwrap().unwrap();\n    println!(\"{:?}\", a);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo", "rust-crates"], "answers": [{"comments": [{"owner": {"reputation": 1120, "user_id": 2659915, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ff0996c92cca6ea052e06137335fa033?s=128&d=identicon&r=PG", "display_name": "Deoxyseia", "link": "https://stackoverflow.com/users/2659915/deoxyseia"}, "edited": false, "score": 0, "creation_date": 1495161870, "post_id": 44060506, "comment_id": 75146072, "body": "Thanks! This question was asked, trying to resolve how to <a href=\"http://stackoverflow.com/questions/44059266/how-to-make-a-request-with-client-certificate-in-rust\">make request with client certificate in Rust</a>, Solicit was the only option I had so far, do you know any other? :("}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1495161152, "creation_date": 1495161152, "answer_id": 44060506, "question_id": 44060407, "link": "https://stackoverflow.com/questions/44060407/why-does-solicit-0-4-4-attempt-to-use-openssl-0-9-12-even-though-i-have-openssl/44060506#44060506", "title": "Why does solicit 0.4.4 attempt to use openssl 0.9.12 even though I have openssl 0.7.14 in my Cargo.toml?", "body": "<p>Solicit hasn't released a new version in over a year and a half \u2014 0.4.4 was released 2015-09-07. Version 0.4.3 (0.4.4 doesn't have a git tag for whatever reason) <a href=\"https://github.com/mlalic/solicit/blob/v0.4.3/Cargo.toml#L20-L22\" rel=\"nofollow noreferrer\">requires <em>any version</em> of openssl</a>, so it's just pulling in the newest possible version. It doesn't matter what you have in <em>your</em> Cargo.toml because it's Solicit's dependencies that matters.</p>\n\n<p>It's no longer even <em>possible</em> to publish a crate to crates.io with a <code>*</code> version dependency!</p>\n\n<p>The current master version of Solicit has <a href=\"https://github.com/mlalic/solicit/blob/fdccb366a9626b7b5ef13195d60ef36882c5dd3e/Cargo.toml#L20-L22\" rel=\"nofollow noreferrer\">pinned to openssl 0.6</a>, which is <em>still</em> an old version.</p>\n\n<p>At this point in time, it doesn't seem like Solicit is an actively developed library. You may wish to investigate alternative solutions or consider contributing patches to update the dependencies.</p>\n\n<p>If you don't need to have any other crates that need OpenSSL support, you might be able to use the master branch version of Solicit and just use the older version of OpenSSL.</p>\n"}], "owner": {"reputation": 1120, "user_id": 2659915, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ff0996c92cca6ea052e06137335fa033?s=128&d=identicon&r=PG", "display_name": "Deoxyseia", "link": "https://stackoverflow.com/users/2659915/deoxyseia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "accepted_answer_id": 44060506, "answer_count": 1, "score": 1, "last_activity_date": 1495161152, "creation_date": 1495160436, "last_edit_date": 1495160552, "question_id": 44060407, "link": "https://stackoverflow.com/questions/44060407/why-does-solicit-0-4-4-attempt-to-use-openssl-0-9-12-even-though-i-have-openssl", "title": "Why does solicit 0.4.4 attempt to use openssl 0.9.12 even though I have openssl 0.7.14 in my Cargo.toml?", "body": "<p>I have a simple project using the Solicit example to make a request with HTTPS. My Cargo.toml has:</p>\n\n<pre><code>[package]\nname = \"test\"\nversion = \"0.1.0\"\nauthors = [\"einchear\"]\n\n[dependencies.openssl]\nversion = \"0.7.14\"\nfeatures = [\"tlsv1_2\", \"npn\"]\n\n[dependencies.solicit]\nversion = \"0.4.4\"\nfeatures = [\"tls\"]\n</code></pre>\n\n<p>When I tried to run <code>cargo build</code>, the error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: Package `openssl v0.9.12` does not have these features: `npn, tlsv1_2`\n</code></pre>\n\n<p>Why 0.9.12 instead 0.7.14? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "edited": false, "score": 0, "creation_date": 1495189399, "post_id": 44059821, "comment_id": 75159000, "body": "I am not able to change the lib code. I can only change my code. Is there no way I can make a trait that abstract <code>fn foo&lt;F: FnMut(&amp;MyR)&gt;(&amp;mut self, callback: &amp;&#39;a mut F) </code>?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1495155185, "creation_date": 1495155185, "answer_id": 44059821, "question_id": 44059574, "link": "https://stackoverflow.com/questions/44059574/how-to-solve-this-does-not-live-long-enough/44059821#44059821", "title": "How to solve this &quot;does not live long enough&quot;?", "body": "<p>Read the error messages:</p>\n\n<ol>\n<li><em><code>t</code> does not live long enough</em> \u2014 it lives until the end of the <code>foo</code> function.</li>\n<li><p><em>borrowed value must be valid for the lifetime 'a</em> \u2014 <strong>you</strong> have specified <code>'a</code>:</p>\n\n<pre><code>impl&lt;'a, F&gt; A&lt;MyR&lt;'a&gt;, F&gt; for T\n    where F: FnMut(&amp;MyR&lt;'a&gt;)\n</code></pre>\n\n<p>This says that for <em>any possible lifetime</em>, the trait will be implemented, so long as <code>F</code> implements the <code>FnMut</code> trait.</p></li>\n</ol>\n\n<p>There's only <strong>one</strong> possible way to make that work \u2014 you have to have a <code>MyR</code> that is parameterized with the <code>'static</code> lifetime. That's the only lifetime that is guaranteed to outlive any arbitrary lifetime.</p>\n\n<p>Let's see where <code>MyR</code> comes from:</p>\n\n<pre><code>fn bar&lt;'a&gt;(&amp;'a self) -&gt; MyR {\n    MyR { x: self.x }\n}\n</code></pre>\n\n<p>If you go back and reread <a href=\"https://doc.rust-lang.org/stable/book/lifetimes.html#lifetime-elision\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em> section on lifetime elision</a>, you'll recognize that this lifetime specification provides no value. It defines a lifetime and uses it with <code>self</code>, but it's never tied to any output lifetimes. The code is the same as:</p>\n\n<pre><code>fn bar&lt;'a, 'b&gt;(&amp;'a self) -&gt; MyR&lt;'b&gt;\n</code></pre>\n\n<p>If you removed the lifetime, then you'd have</p>\n\n<pre><code>fn bar(&amp;self) -&gt; MyR\nfn bar&lt;'a&gt;(&amp;'a self) -&gt; MyR&lt;'a&gt; // equivalent\n</code></pre>\n\n<p>However, neither of these is the <code>'static</code> lifetime. Luckily for you, you know that that <code>x</code> is a <code>&amp;'static str</code>, so you can just reflect that in your signature and the code will compile:</p>\n\n<pre><code>fn bar(&amp;self) -&gt; MyR&lt;'static&gt;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "is_accepted": false, "score": 0, "last_activity_date": 1495193830, "creation_date": 1495193830, "answer_id": 44069052, "question_id": 44059574, "link": "https://stackoverflow.com/questions/44059574/how-to-solve-this-does-not-live-long-enough/44069052#44069052", "title": "How to solve this &quot;does not live long enough&quot;?", "body": "<p>Spending hours trying different approaches, this seems to work</p>\n\n<pre><code>trait A&lt;F&gt; {\n    fn foo(&amp;mut self, callback: &amp;mut F);\n}\n\nimpl&lt;F&gt; A&lt;F&gt; for T\n    where F: FnMut(&amp;MyR)\n{\n    fn foo(&amp;mut self, callback: &amp;mut F) {\n        let t = T { x: \"l\" };\n        let r = t.bar(); // t does not live long enough (for 'a)\n        callback(&amp;r);\n        println!(\"abc\");\n    }\n}\n\nfn main() {\n    let mut t = T { x: \"l\" };\n    let mut i = 1;\n    t.foo(&amp;mut |x: &amp;MyR| { i += x.x.len(); });\n\n}\n</code></pre>\n\n<p>The main difference is:</p>\n\n<ul>\n<li>I have to loose trait a bit so that it takes arbitrary types.</li>\n<li>So that when I impl I don't have to specify lifetime at all.</li>\n<li>I have to type annotate the closure when invoking the function.</li>\n</ul>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a06fe5bbf18eabd374f2c3f9aab3df00&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 17717, "user_id": 691867, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/86cad22e6f9100c801c56c099872bbc2?s=128&d=identicon&r=PG", "display_name": "colinfang", "link": "https://stackoverflow.com/users/691867/colinfang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1229, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1495642305, "creation_date": 1495152951, "last_edit_date": 1495642305, "question_id": 44059574, "link": "https://stackoverflow.com/questions/44059574/how-to-solve-this-does-not-live-long-enough", "title": "How to solve this &quot;does not live long enough&quot;?", "body": "<p>There is some minimal example library code I would like to use:</p>\n\n<pre><code>struct MyR&lt;'a&gt; {\n    x: &amp;'a str,\n}\n\nstruct T {\n    x: &amp;'static str,\n}\n\nimpl T {\n    fn bar&lt;'a&gt;(&amp;'a self) -&gt; MyR {\n        MyR { x: self.x }\n    }\n}\n</code></pre>\n\n<p>The following is my code:</p>\n\n<pre><code>trait A&lt;R, F: FnMut(&amp;R)&gt; {\n    fn foo(&amp;mut self, callback: &amp;mut F);\n}\n\nimpl&lt;'a, F&gt; A&lt;MyR&lt;'a&gt;, F&gt; for T\n    where F: FnMut(&amp;MyR&lt;'a&gt;)\n{\n    fn foo(&amp;mut self, callback: &amp;mut F) {\n        let t = T { x: \"l\" };\n        let r = t.bar(); // t does not live long enough (for 'a)\n        callback(&amp;r);\n        println!(\"abc\");\n    }\n}\n\nfn test() {\n    let mut t = T { x: \"l\" };\n    let mut i = 1;\n    t.foo(&amp;mut |x| { i += x.x.len(); });\n}\n</code></pre>\n\n<p>I would like to make a trait that is parametrized by the callback, but I struggled to make it right. If I don't use a trait, it works well:</p>\n\n<pre><code>impl T {\n    fn foo&lt;F: FnMut(&amp;MyR)&gt;(&amp;mut self, callback: &amp;'a mut F) {\n        let t = T { x: \"l\" };\n        let r = t.bar();\n        callback(&amp;r);\n        println!(\"abc\");\n    }\n}\n</code></pre>\n\n<p>But I cannot do this:</p>\n\n<pre><code>impl T {\n    fn foo&lt;'a, F: FnMut(&amp;MyR&lt;'a&gt;)&gt;(&amp;mut self, callback: &amp;mut F) {\n        let t = T { x: \"l\" };\n        let r = t.bar();\n        callback(&amp;r);\n        println!(\"abc\");\n    }\n}\n</code></pre>\n\n<p>I know the problem is that <code>t</code> must outlive <code>'a</code>, but I don't know to bound <code>'a</code> so that its lifetime is shorter than <code>t</code>.</p>\n\n<p>I'm using rustc 1.19.0-nightly.</p>\n"}, {"tags": ["ssl", "rust", "ssl-certificate", "client-certificates", "hyper"], "answers": [{"comments": [{"owner": {"reputation": 1120, "user_id": 2659915, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ff0996c92cca6ea052e06137335fa033?s=128&d=identicon&r=PG", "display_name": "Deoxyseia", "link": "https://stackoverflow.com/users/2659915/deoxyseia"}, "edited": false, "score": 0, "creation_date": 1495157172, "post_id": 44059398, "comment_id": 75145052, "body": "Thanks @E_net4, I added that but now the error is: <code>error: Package openssl &#39;v0.9.12&#39; does not have these features: &#39;tlsv1_2, npn&#39;</code>, also I added <code>openssl = { version = &quot;0.9.12&quot;, features = [&quot;v101&quot;, &quot;v102&quot;, &quot;v110&quot;] }</code> but this second error persist."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1120, "user_id": 2659915, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ff0996c92cca6ea052e06137335fa033?s=128&d=identicon&r=PG", "display_name": "Deoxyseia", "link": "https://stackoverflow.com/users/2659915/deoxyseia"}, "edited": false, "score": 0, "creation_date": 1495184680, "post_id": 44059398, "comment_id": 75155696, "body": "@Deoxyseia I have updated the answer with an alternative."}, {"owner": {"reputation": 1120, "user_id": 2659915, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ff0996c92cca6ea052e06137335fa033?s=128&d=identicon&r=PG", "display_name": "Deoxyseia", "link": "https://stackoverflow.com/users/2659915/deoxyseia"}, "edited": false, "score": 0, "creation_date": 1495601522, "post_id": 44059398, "comment_id": 75315527, "body": "I think fixing Solicit isn&#39;t the best solution on security topic that is just what I want to do, especially for having to fix openssl to 0.9. About hyper does not solve the original question, how use client certificate for make requests in case the server requires it. <a href=\"https://security.stackexchange.com/a/20847/116719\">More info</a>"}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1495620381, "last_edit_date": 1495620381, "creation_date": 1495151398, "answer_id": 44059398, "question_id": 44059266, "link": "https://stackoverflow.com/questions/44059266/how-to-make-a-request-with-client-certificate-in-rust/44059398#44059398", "title": "How to make a request with client certificate in Rust", "body": "<p>At the moment, you should prefer the <code>hyper</code> client over <code>solicit</code>. The latter has not been updated since 2015, and <code>hyper</code> is being given better maintenance. Add <code>hyper = \"0.10.10\"</code>, and <code>hyper-native-tls = \"0.2.2\"</code> to your dependencies. For specifying the client certificate to use, we can leverage the features of <code>native_tls</code>. In particular, <a href=\"https://docs.rs/native-tls/0.1.1/native_tls/struct.TlsConnectorBuilder.html\" rel=\"nofollow noreferrer\"><code>TlsConnectorBuilder</code></a> and <a href=\"https://docs.rs/native-tls/0.1.1/native_tls/struct.Pkcs12.html\" rel=\"nofollow noreferrer\"><code>Pkcs12</code></a> are what you're looking for.</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\nuse hyper::client::Client;\nuse hyper::net::HttpsConnector;\nuse hyper_native_tls::NativeTlsClient;\nuse hyper_native_tls::native_tls::{TlsConnector, Pkcs12};\n\n// fetch the PKCS12 client certificate\nlet cert = {\n    let cert_file = File::open(\"/path/to/cert.pfx\")?;\n    let mut cert_raw = Vec::new();\n    cert_file.read_to_end(&amp;mut cert_raw)?;\n    Pkcs12::from_der(&amp;cert_raw, \"mypassword\")?\n};\n\n// specify the TLS connection with the builder pattern \nlet tls_conn = TlsConnector::builder()\n    .identity(cert)?\n    .build()?;\nlet ssl = NativeTlsClient::from(tls_conn)?;\nlet https_conn = HttpsConnector::new(ssl);\n\n// proceed as usual\nlet client = Client::with_connector(https_conn);\nlet endpoint = \"https://www.example.com/ms/service\");\nlet resp = client.get(endpoint).send()?;\n</code></pre>\n\n<hr>\n\n<p>In <code>solicit</code>, the <a href=\"https://mlalic.github.io/solicit/solicit/http/client/tls/index.html\" rel=\"nofollow noreferrer\">documentation</a> states that the <code>tls</code> submodule was only available when the \"tls\" feature is enabled for this dependency. Nevertheless, this would lead to further dependency conflicts (see <a href=\"https://stackoverflow.com/questions/44060407/why-does-solicit-0-4-4-attempt-to-use-openssl-0-9-12-even-though-i-have-openssl?noredirect=1&amp;lq=1\">Why does solicit 0.4.4 attempt to use openssl 0.9.12 even though I have openssl 0.7.14 in my Cargo.toml?</a>). Sticking to <code>hyper</code> instead of <code>solicit</code> is a much safer choice.</p>\n"}], "owner": {"reputation": 1120, "user_id": 2659915, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/ff0996c92cca6ea052e06137335fa033?s=128&d=identicon&r=PG", "display_name": "Deoxyseia", "link": "https://stackoverflow.com/users/2659915/deoxyseia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2629, "favorite_count": 2, "accepted_answer_id": 44059398, "answer_count": 1, "score": 1, "last_activity_date": 1495620381, "creation_date": 1495150300, "last_edit_date": 1495542878, "question_id": 44059266, "link": "https://stackoverflow.com/questions/44059266/how-to-make-a-request-with-client-certificate-in-rust", "title": "How to make a request with client certificate in Rust", "body": "<p>I have a project with microservices deployed in Bluemix with Docker containers. All microservices are written in Java and the communication is using JKS files.</p>\n\n<p>I also developed a microservice in Node.js with Express.js. To consume the other microservices, I used <a href=\"https://github.com/request/request\" rel=\"nofollow noreferrer\">the Request module</a> with <code>option.agentOptions</code> feature and a <code>pfx file</code>, like this:</p>\n\n<pre><code>var options = {\n        uri: config.get(\"https://www.example.com/ms/service\"),\n        method: 'POST',\n        body: data,\n        json: true,\n        headers: {\n            'Content-Type': 'application/json; charset=UTF-8'\n        },\n        agentOptions: {\n            pfx: fs.readFileSync(config.get(\"/path/to/file.pfx\")),\n            passphrase: config.get(\"passphraseText\"),\n            servername: config.get(\"serverName\")\n        }\n    };\n\nrequest(options, function (error, response, data) {\n     //handing response\n});\n</code></pre>\n\n<p>I tried to use <a href=\"https://github.com/mlalic/solicit\" rel=\"nofollow noreferrer\">the Solicit crate</a> with <a href=\"https://github.com/mlalic/solicit#example\" rel=\"nofollow noreferrer\">default example</a> for HTTPS but it fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>4 | use solicit::http::client::tls::TlsConnector;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Could not find `tls` in `client`\n</code></pre>\n\n<p>I couldnt find another crate, library or framework for made it, how can I make this requests?</p>\n\n<hr>\n\n<p>EDIT</p>\n\n<p>Apparently Solicit isn't an alternative for its lack of maintenance so it is no longer an alternative solution to this question, <a href=\"https://stackoverflow.com/questions/44060407/why-does-solicit-0-4-4-attempt-to-use-openssl-0-9-12-even-though-i-have-openssl\">Here's the reason</a>.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 4, "creation_date": 1495136271, "post_id": 44056408, "comment_id": 75137865, "body": "It&#39;s a known deficiency of the borrow checker, for which the use of a temporary variable is a workaround. Google non-lexical lifetimes for more details."}, {"owner": {"reputation": 2322, "user_id": 1987178, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YS4r1.png?s=128&g=1", "display_name": "rom1v", "link": "https://stackoverflow.com/users/1987178/rom1v"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1495178731, "post_id": 44056408, "comment_id": 75152200, "body": "Thank you for the hint. The most related article is about &quot;nested method calls&quot;: <a href=\"http://smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/\" rel=\"nofollow noreferrer\">smallcultfollowing.com/babysteps/blog/2017/03/01/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2322, "user_id": 1987178, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YS4r1.png?s=128&g=1", "display_name": "rom1v", "link": "https://stackoverflow.com/users/1987178/rom1v"}, "edited": false, "score": 1, "creation_date": 1495140489, "post_id": 44056704, "comment_id": 75140006, "body": "Why doesn&#39;t the compiler evaluate the arguments first, so that when it borrows <code>x</code> in <code>x.0</code>, it has not borrowed <code>x</code> in <code>x.f</code> yet? That is the expected order of evaluation, isn&#39;t it?"}, {"owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 1, "creation_date": 1495140960, "post_id": 44056704, "comment_id": 75140233, "body": "Because by the time the compiler determines lifetimes, it knows nothing about the actual structure of the program yet: Lifetimes are currently determined by their &quot;lexical scope&quot;, most basically by how the text is written. See <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction/#problem-case-2-conditional-control-flow\" rel=\"nofollow noreferrer\">here</a> for a good example for where this leads to warts."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 2322, "user_id": 1987178, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YS4r1.png?s=128&g=1", "display_name": "rom1v", "link": "https://stackoverflow.com/users/1987178/rom1v"}, "edited": false, "score": 2, "creation_date": 1495146868, "post_id": 44056704, "comment_id": 75142588, "body": "@rom1v What about <code>foo().f(bar())</code>? If <code>foo</code> and <code>bar</code> were functions that had side effects, which would you expect to happen first? What about <code>X::f(foo(), bar())</code>? <code>x.f(x.0)</code> is an example where the &quot;correct&quot; behavior is obvious, but generalizing it -- without creating ambiguity, introducing arbitrary limitations, or breaking backwards compatibility -- is far from trivial."}, {"owner": {"reputation": 2322, "user_id": 1987178, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YS4r1.png?s=128&g=1", "display_name": "rom1v", "link": "https://stackoverflow.com/users/1987178/rom1v"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1495179085, "post_id": 44056704, "comment_id": 75152419, "body": "@user2722968 Thank you, this explains why the current implementation works the way it does. But now, it seems to me that the problem is more general, thanks to the example given by @trentcl. Note that the same problem occurs with <code>let (a, b) = (&amp;mut x, x.0);</code> (compared to <code>let (b, a) = (x.0, &amp;mut x);</code>"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1495181869, "post_id": 44056704, "comment_id": 75153987, "body": "@trentcl Is there an issue with treating <code>X(Y)</code> as equivalent to <code>{let _a = X; let _b = Y; _a(_b)}</code>. That seems to fix the too-strict borrow issue wherever entails doing the same thing manually, and without changing behavior (unless I am mistaken about the current order of evaluation of <code>X</code> and <code>Y</code>). Niko Matsakis <a href=\"http://smallcultfollowing.com/babysteps/blog/2017/03/01/nested-method-calls-via-two-phase-borrowing/#how-can-we-fix-this\" rel=\"nofollow noreferrer\">explicitly mentions</a> a fix by &quot;changing how we desugar the method calls&quot;, but still prefers the more general approach, unfortunately without an explanation."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1495199743, "post_id": 44056704, "comment_id": 75166125, "body": "@user4815162342 That still runs into the same problem when <code>X</code> and <code>Y</code> borrow from the same object. You need to evaluate <code>Y</code> first to make the equivalent of <code>x.f(x.0)</code> work, but doing that opens a can of worms - maybe several - in terms of reordering expressions"}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 2, "last_activity_date": 1495139565, "last_edit_date": 1495139565, "creation_date": 1495137239, "answer_id": 44056704, "question_id": 44056408, "link": "https://stackoverflow.com/questions/44056408/why-does-the-parameter-borrow-the-value/44056704#44056704", "title": "Why does the parameter &quot;borrow&quot; the value?", "body": "<p>When you do <code>x.f(x.0)</code>, you have borrowed <code>x</code> to provide the <code>&amp;mut self</code> to <code>f</code> before trying to borrow <code>x</code> again to get a reference to <code>x.0</code>. It is not possible to refer to <code>x.0</code> twice at the same time. That is, the method <code>f</code> can't have both mutable access to <code>x</code> via <code>&amp;mut self</code> (which includes <code>x.0</code>) and a seemingly immutable reference to <code>x.0</code> at the same time.</p>\n\n<p>When using a temporary variable, you actually get a copy of the value; this means you no longer <code>refer to that int in X</code> but <code>42</code>. That's allowed.</p>\n\n<p>Regarding the \"non-lexical lifetimes\" comments: Since <code>f</code> takes a good old u32 instead of a reference to it, <code>x.f(x.0)</code> should basically be equivalent to <code>x.f(42)</code>, because the compiler can let go of <code>x</code> after getting the value out of <code>x.0</code> and then mut-borrow <code>x</code> again to provide <code>&amp;mut self</code> to <code>f</code>. However, the compiler determines the lifetimes and their requirements very early on during compilation; lifetimes are therefor currently broader than they have to be. <code>rustc</code> is currently unable to determine that the borrow on <code>x</code> due to the <code>x.0</code> argument has ended before borrowing <code>x</code> for <code>&amp;mut self</code>. There is <a href=\"https://github.com/rust-lang/rust-roadmap/issues/16\" rel=\"nofollow noreferrer\">work</a> underway to fix this.</p>\n"}], "owner": {"reputation": 2322, "user_id": 1987178, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/YS4r1.png?s=128&g=1", "display_name": "rom1v", "link": "https://stackoverflow.com/users/1987178/rom1v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 1, "closed_date": 1519505919, "answer_count": 1, "score": 1, "last_activity_date": 1519505896, "creation_date": 1495136031, "last_edit_date": 1519505896, "question_id": 44056408, "link": "https://stackoverflow.com/questions/44056408/why-does-the-parameter-borrow-the-value", "closed_reason": "Duplicate", "title": "Why does the parameter &quot;borrow&quot; the value?", "body": "<p>Here is a sample:</p>\n\n<pre><code>struct X(u32);\n\nimpl X {\n    fn f(&amp;mut self, v: u32) {}\n}\n\nfn main() {\n    let mut x = X(42);\n\n    // works\n    let v = x.0;\n    x.f(v);\n\n    // cannot use `x.0` because it was mutably borrowed\n    x.f(x.0);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?code=struct%20X%28u32%29%3B%0Aimpl%20X%20%7B%0A%20%20%20%20fn%20f%28%26mut%20self%2C%20v%3A%20u32%29%20%7B%7D%0A%7D%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%20X%2842%29%3B%0A%20%20%20%20let%20v%20%3D%20x.0%3B%0A%20%20%20%20%2F%2F%20works%0A%20%20%20%20x.f%28v%29%3B%0A%20%20%20%20%2F%2F%20cannot%20use%20%60x.0%60%20because%20it%20was%20mutably%20borrowed%0A%20%20%20%20x.f%28x.0%29%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Rust playground</a>)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0503]: cannot use `x.0` because it was mutably borrowed\n  --&gt; src/main.rs:16:9\n   |\n16 |     x.f(x.0);\n   |     -   ^^^ use of borrowed `x`\n   |     |\n   |     borrow of `x` occurs here\n</code></pre>\n\n<p>What is the reason why <code>x.f(x.0)</code> does not work? <code>x.0</code> is passed as an argument, bound to the <code>v</code> parameter, of type <code>u32</code>: there is absolutely no possibility that the function body access <code>x.0</code> through the parameter.</p>\n\n<p>Moreover, it seems very weird to me that:</p>\n\n<pre><code>f(something);\n</code></pre>\n\n<p>doesn't work, while:</p>\n\n<pre><code>v = something;\nf(v);\n</code></pre>\n\n<p>works.</p>\n"}, {"tags": ["network-programming", "rust"], "answers": [{"tags": [], "owner": {"reputation": 218, "user_id": 7942375, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wEv8ZqQLssg/AAAAAAAAAAI/AAAAAAAAAFg/A9YxZ2kc-OQ/photo.jpg?sz=128", "display_name": "Evin Robertson", "link": "https://stackoverflow.com/users/7942375/evin-robertson"}, "is_accepted": true, "score": 13, "last_activity_date": 1495400700, "creation_date": 1495400700, "answer_id": 44101778, "question_id": 44056006, "link": "https://stackoverflow.com/questions/44056006/how-to-get-a-list-of-the-machines-ip-addresses-from-rust/44101778#44101778", "title": "How to get a list of the machine&#39;s IP addresses from Rust?", "body": "<p>Check out the <a href=\"https://octarineparrot.com/assets/libpnet/doc/pnet/\" rel=\"noreferrer\">pnet crate</a>:</p>\n\n<pre><code>extern crate pnet;\n\nuse pnet::datalink;\n\nfn main() {\n    for iface in datalink::interfaces() {\n        println!(\"{:?}\", iface.ips);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2224, "user_id": 1721424, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/215f7e243f29cacab4e533dad1bf1f67?s=128&d=identicon&r=PG", "display_name": "Ryan", "link": "https://stackoverflow.com/users/1721424/ryan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4179, "favorite_count": 2, "accepted_answer_id": 44101778, "answer_count": 1, "score": 13, "last_activity_date": 1495400700, "creation_date": 1495134472, "last_edit_date": 1495135095, "question_id": 44056006, "link": "https://stackoverflow.com/questions/44056006/how-to-get-a-list-of-the-machines-ip-addresses-from-rust", "title": "How to get a list of the machine&#39;s IP addresses from Rust?", "body": "<p>Specifically, I am interested in a programmatic way for acquiring a list of IP addresses such as those returned by <code>ifconfig</code>.</p>\n\n<p>Preferably, the solution would be cross-platform.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495132365, "post_id": 44055322, "comment_id": 75135735, "body": "Move <code>types</code> to <code>types_internal</code> then <code>mod types { pub use types_internal::{Foo, Bar} }</code>"}], "owner": {"reputation": 319, "user_id": 3256878, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4980dd755918b1223d87875da9b524b?s=128&d=identicon&r=PG", "display_name": "Andreas Fl&#246;jt", "link": "https://stackoverflow.com/users/3256878/andreas-fl%c3%b6jt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1810, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1495132106, "creation_date": 1495132002, "last_edit_date": 1495132106, "question_id": 44055322, "link": "https://stackoverflow.com/questions/44055322/is-it-possible-to-re-export-parts-of-a-module-while-keeping-the-module-namespace", "title": "Is it possible to re-export parts of a module while keeping the module namespace?", "body": "<p>I'm writing a library, within which I want to use a module <code>types</code> containing <code>Foo</code>, <code>Bar</code>, and <code>Baz</code>. I would like <code>Baz</code> to remain internal to the library, but re-export the other two for using them outside the library. For organizational purposes, I want the exported symbols to live inside the same module, in contrast to re-exporting the individual symbols. In other words, I want to re-export a subset of the module. Is there a neat solution to do this?</p>\n\n<p>I know about <code>pub mod types;</code>, but that re-exports the entire module and since the symbols are pub for usage within the library, this also includes <code>Baz</code>. There is also <code>pub use types::{Foo, Bar};</code>, which only exports the symbols I want, but then they are placed in the library namespace instead of the module.</p>\n"}, {"tags": ["string", "enums", "rust", "lifetime"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 4, "creation_date": 1495131295, "post_id": 44054746, "comment_id": 75135131, "body": "Side note: Enum variants in rust are very typically written in <code>CamelCase</code>, not <code>FULLCAPS</code>. You might have a specific reason to do this, in which case I apologize. But if not, just stick with the convention :)"}, {"owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 1, "creation_date": 1495133926, "post_id": 44054746, "comment_id": 75136629, "body": "<code>&amp;str</code> is not owned, so if you want to be able to keep your tokens around after the parser finishes, you probably <i>have</i> to use <code>String</code>"}, {"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1495136382, "post_id": 44054746, "comment_id": 75137934, "body": "Thanks @Kroltan, will do"}, {"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "reply_to_user": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1495136921, "post_id": 44054746, "comment_id": 75138222, "body": "@zstewart, do I take it for an answer? I would like these enums to be the outcome of the parser, like <code>smtp_parser::host&lt; &#39;input &gt;(s: &#39;input &amp; str) -&gt; SmtpHost</code>"}, {"owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1495138936, "post_id": 44054746, "comment_id": 75139267, "body": "@RobertCutajar-Robajz if you return <code>SmtpHost</code> using <code>&amp;str</code> with that lifetime parameter then the returned <code>SmtpHost</code> would have to have a lifetime which is &lt;= <code>&#39;input</code>, since it the signature would have to be: <code>smtp_parser::host&lt;&#39;input&gt;(s: &amp;&#39;input str) -&gt; SmtpHost&lt;&#39;input&gt;</code>. Just use <code>String</code> unless you have a specific reason that these values should be borrowing part of a different string; it looks to me like they should own the matched values."}, {"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "reply_to_user": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1495139421, "post_id": 44054746, "comment_id": 75139500, "body": "@zstewart, thanks, sounds good. If the lifetime was bound with the input, one would have to consume the enum before letting go of the input which doesn&#39;t seem very practical. On the other hand, I don&#39;t really get why would I return a mutable string..."}, {"owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1495142171, "post_id": 44054746, "comment_id": 75140759, "body": "@RobertCutajar-Robajz This is Rust, mutable/immutable is not generally a property of types. Whether the <code>String</code> is mutable depends on whether it&#39;s stored in a mutable variable. If you use <code>let host = smtp_parser::host(s);</code> then the <code>String</code> will also be immutable. It is technically possible to construct types which use privacy to enforce immutability always but this is generally unnecessary since you can usually control mutability at the use site rather than the declaration."}, {"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "reply_to_user": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1495185307, "post_id": 44054746, "comment_id": 75156104, "body": "Thank you @zstewart, would you formulate an answer then because I&#39;m quite satisfied :o)"}], "answers": [{"comments": [{"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 0, "creation_date": 1495264657, "post_id": 44075011, "comment_id": 75189133, "body": "Thanks for the Cow @notriddle"}], "tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": false, "score": 3, "last_activity_date": 1495211897, "creation_date": 1495211897, "answer_id": 44075011, "question_id": 44054746, "link": "https://stackoverflow.com/questions/44054746/whats-the-best-practice-for-str-string-values-in-rust-enums/44075011#44075011", "title": "What&#39;s the best practice for str/String values in Rust enums?", "body": "\n\n<p>If you want to parse without copying,\nthen the signature you'd want is:</p>\n\n<pre><code>// Notice that the 'input goes after the &amp;. Syntax.\nfn smtp_parser::host&lt;'input&gt;(s: &amp;'input str) -&gt; SmtpHost&lt;'input&gt;;\n</code></pre>\n\n<p>Then you could define your enum like this:</p>\n\n<pre><code>#[derive(Eq, PartialEq, Debug)]\npub enum SmtpHost&lt;'input&gt; {\n    DOMAIN(&amp;'input str),\n    IPV4(Ipv4Addr),\n    IPV6(Ipv6Addr),\n    UNKNOWN { label: &amp;'input str, literal: &amp;'input str },\n}\n</code></pre>\n\n<p>On the other hand, if this is too awkward in some cases, you sort of do <em>both</em> using the <code>Cow</code> (copy-on-write) type:</p>\n\n<pre><code>use std::borrow::Cow;\n#[derive(Eq, PartialEq, Debug)]\npub enum SmtpHost&lt;'input&gt; {\n    DOMAIN(Cow&lt;'input, str&gt;),\n    IPV4(Ipv4Addr),\n    IPV6(Ipv6Addr),\n    UNKNOWN { label: Cow&lt;'input, str&gt;, literal: Cow&lt;'input, str&gt; },\n}\n</code></pre>\n\n<p>This is what you want to do if the host parts can sometimes be used directly out of the input, but sometimes needs to be changed before it's usable.</p>\n"}, {"comments": [{"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 0, "creation_date": 1495264924, "post_id": 44081385, "comment_id": 75189200, "body": "Thanks @zstewart, side note, the rust playground link won&#39;t pass my browser, try shrinking it, but I get the point."}, {"owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "reply_to_user": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 0, "creation_date": 1495281588, "post_id": 44081385, "comment_id": 75193620, "body": "@RobertCutajar-Robajz hm. Odd, it seems to work for me. I initially tried to use the link shortener from Rust playground, but StackOverflow apparently doesn&#39;t like link shorteners. Unfortunately the full URL includes the complete code of the example... perhaps it&#39;s longer than your browser is happy with."}], "tags": [], "owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "is_accepted": true, "score": 4, "last_activity_date": 1495248025, "creation_date": 1495248025, "answer_id": 44081385, "question_id": 44054746, "link": "https://stackoverflow.com/questions/44054746/whats-the-best-practice-for-str-string-values-in-rust-enums/44081385#44081385", "title": "What&#39;s the best practice for str/String values in Rust enums?", "body": "<p>The critical difference between <code>&amp;str</code> and <code>String</code> is ownership. <code>String</code> is owned, but <code>&amp;str</code> is borrowed. If you store a <code>&amp;str</code> value, the container's lifetime will be limited to the lifetime of the borrowed string.</p>\n\n<p>If your parser generator produces a parse function with a signature like this:</p>\n\n<pre><code>smtp_parser::host&lt;'a&gt;(&amp;'a str) -&gt; SmtpHost&lt;'a&gt;\n</code></pre>\n\n<p>then when it passes you an <code>&amp;str</code> for you to use to construct your parse tree/parsed value, it most likely gives you a substring of the input. This means that the <code>&amp;str</code> you are storing in your <code>SmtpHost</code> enum must have a lifetime shorter than the original input string. And indeed, you can see this in the signature; both the input string and output <code>SmtpHost</code> have lifetime parameter <code>'a</code>.</p>\n\n<p>This means that your resulting <code>SmtpHost</code> cannot outlive the input used to generate it. If the input is a string constant, <code>&amp;'static str</code>, that might be fine, but if you get the input from standard in or reading a file, you won't be able to return the <code>SmtpHost</code> past the point where the input string is owned.</p>\n\n<p>For example, suppose that you wanted to declare a function that parsed an <code>SmtpHost</code> from standard in:</p>\n\n<pre><code>fn read_host&lt;'a&gt;() -&gt; SmtpHost&lt;'a&gt; {\n    let mut line = String::new();\n    let stdin = io::stdin();\n    stdin.lock().read_line(&amp;mut line).expect(\"Could not read line\");\n    smtp_parser::host(&amp;line)\n}\n</code></pre>\n\n<p>You'll get an error saying something like \"line does not live long enough\". <a href=\"https://play.rust-lang.org/?code=enum%20SmtpHost%3C%27a%3E%20%7B%0A%20%20%20%20Example(%26%27a%20str)%0A%7D%0A%0Afn%20return_a_value%3C%27a%3E()%20-%3E%20SmtpHost%3C%27a%3E%20%7B%0A%20%20%20%20let%20x%20%3D%20%22hello%20world%22.to_owned()%3B%0A%20%20%20%20SmtpHost%3A%3AExample(%26x)%0A%7D%0A%0Afn%20main()%20%7B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Here's a trivial example in Rust playground</a>.</p>\n\n<p>So you should use <code>&amp;str</code> when you are just borrowing a value from somewhere else which does not need to outlive the source. You should use <code>String</code> when you need to have ownership of the value.</p>\n\n<p>For more complex situations where you need to have an owned value but want to be able to use it in multiple places without having many copies of it, for that there's <code>Rc&lt;T&gt;</code> and <code>Rc&lt;RefCell&lt;T&gt;</code>. But in your case, it sounds like <code>SmtpHost</code> should just have ownership of the string it stores.</p>\n"}], "owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1846, "favorite_count": 0, "accepted_answer_id": 44081385, "answer_count": 2, "score": 1, "last_activity_date": 1495248025, "creation_date": 1495129891, "last_edit_date": 1495138468, "question_id": 44054746, "link": "https://stackoverflow.com/questions/44054746/whats-the-best-practice-for-str-string-values-in-rust-enums", "title": "What&#39;s the best practice for str/String values in Rust enums?", "body": "<p>I have this which is really pleasant to the eye, but I'm concerned about its implications:</p>\n\n<pre><code>#[derive(Eq, PartialEq, Debug)]\npub enum SmtpHost {     \n    DOMAIN(String),\n    IPV4(Ipv4Addr),\n    IPV6(Ipv6Addr),\n    UNKNOWN { label:String, literal:String },\n}\n</code></pre>\n\n<p>I'm filling this up from a PEG grammar which gives me <code>&amp;str</code> so all the stringy calls look like this - <code>SmtpHost::Domain(s.to_string())</code></p>\n\n<p>I would like these enums to be the outcome of the parser, like <code>smtp_parser::host&lt; 'input &gt;(s: 'input &amp; str) -&gt; SmtpHost</code></p>\n\n<p>I have also tried the ref approach, but that starts getting clumsy rather soon:</p>\n\n<pre><code>#[derive(Eq, PartialEq, Debug)]\npub enum SmtpHost&lt;'a &gt; {     \n    DOMAIN(&amp;'a str),\n    IPV4(Ipv4Addr),\n    IPV6(Ipv6Addr),\n    UNKNOWN { label:&amp;'a str, literal:&amp;'a str },\n}\n</code></pre>\n\n<p>So I'm like either / or ... but you know better. Tell me :o)</p>\n\n<p>My <a href=\"https://github.com/jocutajar/ResistRustNot.SmtpServer/blob/develop/src/smtp.rustpeg\" rel=\"nofollow noreferrer\">study project for reference</a></p>\n"}, {"tags": ["rust", "hyper"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1495129030, "last_edit_date": 1495542384, "creation_date": 1495129030, "answer_id": 44054507, "question_id": 44054284, "link": "https://stackoverflow.com/questions/44054284/how-to-set-raw-headers-in-hyper-at-runtime/44054507#44054507", "title": "How to set raw headers in Hyper at runtime?", "body": "<p>Review the signature for <a href=\"https://docs.rs/hyper/0.10.10/hyper/header/struct.Headers.html#method.set_raw\" rel=\"nofollow noreferrer\"><code>Headers::set_raw</code></a>:</p>\n\n<pre><code>fn set_raw&lt;K&gt;(&amp;mut self, name: K, value: Vec&lt;Vec&lt;u8&gt;&gt;)\nwhere \n    K: Into&lt;Cow&lt;'static, str&gt;&gt;\n</code></pre>\n\n<p>This says that <code>name</code> can be any type that can be converted into a <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;'static, str&gt;</code></a>. That means that it can be either a <code>&amp;'static str</code> <em>or</em> a <code>String</code>.</p>\n\n<p>Next, review what types you are trying to pass:</p>\n\n<pre><code>.set_raw(key.as_str(), vec![val.into_bytes()])\n</code></pre>\n\n<ol>\n<li><p><a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.as_str\" rel=\"nofollow noreferrer\"><code>String::as_str</code></a> returns a string slice that lives as long as the <code>String</code> it's called on, which <em>is not</em> that <code>'static</code> lifetime.</p>\n\n<p>Instead, you need to get an owned string.</p></li>\n<li><p>You are calling <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.into_bytes\" rel=\"nofollow noreferrer\"><code>String::into_bytes</code></a> on a <code>&amp;String</code>, but, as described in <a href=\"https://stackoverflow.com/q/28158738/155423\">Cannot move out of borrowed content</a>, you cannot as it takes the receiver by value.</p>\n\n<p>Instead, you need to get an owned copy of the bytes.</p></li>\n</ol>\n\n<p>Together, it looks like:</p>\n\n<pre><code>for (key, val) in self.headers.iter() {\n    res.headers_mut()\n        .set_raw(key.clone(), vec![val.clone().into_bytes()])\n}\n</code></pre>\n"}], "owner": {"reputation": 57, "user_id": 2394115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c5a2e0c640aad2659f481a1a71ad632?s=128&d=identicon&r=PG", "display_name": "somnid", "link": "https://stackoverflow.com/users/2394115/somnid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 540, "favorite_count": 0, "accepted_answer_id": 44054507, "answer_count": 1, "score": 0, "last_activity_date": 1495129030, "creation_date": 1495128301, "last_edit_date": 1495128398, "question_id": 44054284, "link": "https://stackoverflow.com/questions/44054284/how-to-set-raw-headers-in-hyper-at-runtime", "title": "How to set raw headers in Hyper at runtime?", "body": "<p>I'm trying to set headers on a Hyper <code>Response</code> at runtime.  In the real code, the headers come from a file so I don't know what they are at compile-time.  Unfortunately, I've dug through documentation and all the examples I could find but haven't seen somebody doing this.  Here's the code:</p>\n\n<pre><code>extern crate hyper;\nuse std::collections::HashMap;\nuse std::io::{Read,Write};\nuse hyper::server::{Handler,Server,Response,Request};\nuse hyper::header::*;\n\nfn main() {\n    let headers = HashMap::new();\n    headers.insert(\"X-Test-Header\".to_string(), \"test_value\".to_string());\n    let responder = Responder::new(headers);\n\n    Server::http(\"127.0.0.1:1340\")\n    .unwrap()\n    .handle(responder)\n    .unwrap();\n}\n\nstruct Responder {\n    headers: HashMap&lt;String, String&gt;\n}\n\nimpl Responder {\n    pub fn new(headers: HashMap&lt;String,String&gt;) -&gt; Self {\n        Responder {\n            headers: headers.clone()\n        }\n    }\n    fn respond_success(&amp;self, mut res: Response, content: &amp;[u8]) {\n        res.headers_mut()\n            .set(ContentLength(content.len() as u64));\n        for (key, val) in self.headers.iter() {\n            res.headers_mut()\n                .set_raw(key.as_str(), vec![val.into_bytes()])\n        }\n        let mut res_body = res.start().unwrap();\n        res_body.write_all(content).unwrap();\n    }\n}\n\nimpl Handler for Responder {\n    fn handle(&amp;self, req: Request, res: Response) {\n        let content = b\"Hello World!\";\n        self.respond_success(res, content);\n    }\n}\n</code></pre>\n\n<p>The error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src\\main.rs:31:40\n   |\n31 |         for (key, val) in self.headers.iter() {\n   |                                        ^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 28:65...\n  --&gt; src\\main.rs:28:66\n   |\n28 |     fn respond_success(&amp;self, mut res: Response, content: &amp;[u8]) {\n   |                                                                  ^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src\\main.rs:31:27\n   |\n31 |         for (key, val) in self.headers.iter() {\n   |                           ^^^^^^^^^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that types are compatible (expected std::convert::From&lt;&amp;str&gt;, found std::convert::From&lt;&amp;str&gt;)\n  --&gt; src\\main.rs:33:18\n   |\n33 |                 .set_raw(key.as_str(), vec![val.into_bytes()])\n   |                  ^^^^^^^\n</code></pre>\n\n<p>It looks like <code>set_raw</code> needs something static but I'm not sure what my best option for refactoring this is.  Does <code>responder</code> have to be static?  That seems wrong.</p>\n"}, {"tags": ["rust", "hashset"], "comments": [{"owner": {"reputation": 11, "user_id": 8031704, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14ac2914533b6b761d5d08e170acf0d2?s=128&d=identicon&r=PG&f=1", "display_name": "schwen", "link": "https://stackoverflow.com/users/8031704/schwen"}, "edited": false, "score": 0, "creation_date": 1495117875, "post_id": 44050339, "comment_id": 75126618, "body": "I don&#39;t think it&#39;s duplicate, because in this case the generic parameter implemenation of the trait is owned by the user"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495119530, "post_id": 44050339, "comment_id": 75127913, "body": "Please read again the <a href=\"https://doc.rust-lang.org/book/traits.html#rules-for-implementing-traits\" rel=\"nofollow noreferrer\">rules for implementing traits</a>. Both <code>Cell</code> and <code>Hash</code> are part of the standard library, so you cannot implement one for the other."}, {"owner": {"reputation": 11, "user_id": 8031704, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14ac2914533b6b761d5d08e170acf0d2?s=128&d=identicon&r=PG&f=1", "display_name": "schwen", "link": "https://stackoverflow.com/users/8031704/schwen"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495121955, "post_id": 44050339, "comment_id": 75129689, "body": "ok, i thought by binding the generic parameter to a type of my ownership (Node) would also give me the ownership of the combination (Cell&lt;Node&gt;), which is not the case, right?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495122068, "post_id": 44050339, "comment_id": 75129763, "body": "You are correct, it doesn&#39;t."}], "owner": {"reputation": 11, "user_id": 8031704, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14ac2914533b6b761d5d08e170acf0d2?s=128&d=identicon&r=PG&f=1", "display_name": "schwen", "link": "https://stackoverflow.com/users/8031704/schwen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 60, "favorite_count": 0, "closed_date": 1495117593, "answer_count": 0, "score": 1, "last_activity_date": 1495117668, "creation_date": 1495117106, "last_edit_date": 1495117668, "question_id": 44050339, "link": "https://stackoverflow.com/questions/44050339/how-do-i-implement-hash-for-cellmytype-in-order-to-put-it-into-a-set", "closed_reason": "Duplicate", "title": "How do I implement Hash for Cell&lt;MyType&gt; in order to put it into a set?", "body": "<p>As my first Rust project, I'm working on a simple graph library. I want my graph root to have a reference to all nodes doing memory management by reference counting, but the following doesn't compile:</p>\n\n<pre><code>pub struct Graph {\n    nodes: HashSet&lt;Rc&lt;Cell&lt;Node&gt;&gt;&gt;\n}\n\nimpl Hash for Cell&lt;Node&gt; {\n    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n        let pointer = &amp;self as *const isize;\n        pointer.hash(state);\n    }\n}\n\npub struct Relationship {\n    source: Rc&lt;Cell&lt;Node&gt;&gt;,\n    target: Rc&lt;Cell&lt;Node&gt;&gt;,\n}\npub struct Node {\n    labels: Vec&lt;Rc&lt;String&gt;&gt;,\n    attributes: Vec&lt;Rc&lt;String&gt;&gt;,\n    relationships: Vec&lt;Rc&lt;Relationship&gt;&gt;\n}\n</code></pre>\n\n<p>with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0117]: only traits defined in the current crate can be implemented \nfor arbitrary types\n  --&gt; src\\graph/mod.rs:12:1\n   |\n12 |   impl Hash for Cell&lt;Node&gt; {\n   |  _^ starting here...\n13 | |     fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n14 | |        \n15 | |     }\n16 | | }\n   | |_^ ...ending here: impl doesn't use types inside crate\n   |\n   = note: the impl does not reference any types defined in this crate\n   = note: define and implement a trait or new type instead\n</code></pre>\n"}, {"tags": ["rust", "port", "elixir", "native"], "answers": [{"comments": [{"owner": {"reputation": 59, "user_id": 468440, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8a22399f6544aab64408cc3b7d148591?s=128&d=identicon&r=PG", "display_name": "aeroegnr", "link": "https://stackoverflow.com/users/468440/aeroegnr"}, "edited": false, "score": 0, "creation_date": 1495168338, "post_id": 44050584, "comment_id": 75147609, "body": "Thank you! That&#39;s it. I knew it had to be a fundamental thing I was missing."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 6, "last_activity_date": 1495117879, "last_edit_date": 1495117879, "creation_date": 1495117658, "answer_id": 44050584, "question_id": 44050019, "link": "https://stackoverflow.com/questions/44050019/using-elixir-to-talk-to-rust-via-ports-what-am-i-getting-wrong/44050584#44050584", "title": "Using Elixir to talk to Rust via Ports, what am I getting wrong?", "body": "<p>You're reading a line of input in the Rust code, which will read until a <code>\\r\\n</code> or <code>\\n</code>, but you're not sending the newline character from Elixir. If you change all the <code>Port.command</code> calls to add a <code>\\n</code> after the message, it works:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>iex(1)&gt; port = Port.open({:spawn_executable, \"a\"}, [:binary])\n#Port&lt;0.1229&gt;\niex(2)&gt; Port.command(port, \"hello\")\ntrue\niex(3)&gt; flush()\n:ok\niex(4)&gt; Port.command(port, \"hello\\n\")\ntrue\niex(5)&gt; flush()\n{#Port&lt;0.1229&gt;, {:data, \"input: hellohello\\n\"}}\n:ok\n</code></pre>\n"}], "owner": {"reputation": 59, "user_id": 468440, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8a22399f6544aab64408cc3b7d148591?s=128&d=identicon&r=PG", "display_name": "aeroegnr", "link": "https://stackoverflow.com/users/468440/aeroegnr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 600, "favorite_count": 1, "accepted_answer_id": 44050584, "answer_count": 1, "score": 3, "last_activity_date": 1495117879, "creation_date": 1495116278, "last_edit_date": 1495117789, "question_id": 44050019, "link": "https://stackoverflow.com/questions/44050019/using-elixir-to-talk-to-rust-via-ports-what-am-i-getting-wrong", "title": "Using Elixir to talk to Rust via Ports, what am I getting wrong?", "body": "<p>I'm in the process of writing a tutorial, because I couldn't find a simple example anywhere, of communicating between Elixir and Rust via a Port.</p>\n\n<p>I can get Rustler to work, but that is a NIF, not a Port.</p>\n\n<p>I'm missing something fundamental in my code. I'm not sure if I'm missing something basic in stdio or if it's something else, but I've tried a lot of different things.</p>\n\n<p>I <em>can</em> get port communication to work with a very basic program in Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::env;\n\nfn main() {\n    println!(\"hello world!\");\n}\n</code></pre>\n\n<p>I can get this to get pulled into my iex -S mix by running this port:</p>\n\n<pre><code>defmodule PortExample do\n\n  def test() do\n    port = Port.open({:spawn_executable, \"_build/dev/rustler_crates/portexample/debug/portexample\"}, [:binary])\n    Port.info(port)\n    port\nend\n</code></pre>\n\n<p>Here's what the iex for that looks like: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)&gt; PortExample.test()\n#Port&lt;0.9420&gt;\niex(2)&gt; flush()\n{#Port&lt;0.9420&gt;, {:data, \"hello world!\\n\"}}\n:ok\niex(3)&gt; \n</code></pre>\n\n<p>I can do the same using a porcelain library call:</p>\n\n<pre><code>  alias Porcelain.Result\n  def porcelain() do\n    result = Porcelain.exec(\"_build/dev/rustler_crates/portexample/debug/portexample\",[\"hello\", \"world\"])\n    IO.inspect result.out\n  end\n</code></pre>\n\n<p>corresponding iex:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>iex(3)&gt; PortExample.porcelain()\n\"hello world!\\n\"\n\"hello world!\\n\"\niex(4)&gt; \n</code></pre>\n\n<p>However, as soon as I start using a Rust library with some form of input/output, things start falling over.</p>\n\n<p>For example, Rust code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::{self, Write, Read};\n\nfn main() {\n    let mut input = String::new();\n    let mut output = String::new();\n    for i in 0..2 {\n        match io::stdin().read_line(&amp;mut input) {\n            Ok(n) =&gt; {\n                println!(\"input: {}\", input.trim());\n                io::stdout().flush();\n            }\n            Err(error) =&gt; println!(\"error: {}\", error),\n        }\n    }\n}\n</code></pre>\n\n<p>I can get it to compile and run in the command line:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>hello\ninput: hello\nworld\ninput: hello\nworld\n</code></pre>\n\n<p>However, when I call it from an Elixir port:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>iex(12)&gt; port = PortExample.test()\n#Port&lt;0.8779&gt;\niex(13)&gt; Port.command(port, \"hello\")\ntrue\niex(14)&gt; Port.command(port, \"world\")\ntrue\niex(15)&gt; Port.command(port, \"!\")    \ntrue\niex(16)&gt; Port.command(port, \"more\")\ntrue\niex(17)&gt; flush()\n:ok\niex(18)&gt; Port.info(port)\n[name: '_build/dev/rustler_crates/portexample/debug/portexample',\n links: [#PID&lt;0.271.0&gt;], id: 4697, connected: #PID&lt;0.271.0&gt;, input: 0,\n output: 15, os_pid: 21523]\n</code></pre>\n\n<p>I get no data from it at all! However, the <code>Port.info(port)</code> call shows that its received 15 bytes. It just hasn't posted returned anything at all to the port. I've been trying to read other code and I thought I was doing things similar enough that it should work, but it doesn't.</p>\n\n<p>I thought: maybe the buffer isn't flushed? so I flush the buffer in Rust.\nI thought: maybe the loop is hanging, so I limited it to only a few passes.\nWhen I try to run this same code through the porcelain call, it hangs. </p>\n"}, {"tags": ["rust", "embedded", "rust-cargo", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 1736, "user_id": 130554, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1affa5f0b72a1a76c8b72bc0ccc6f552?s=128&d=identicon&r=PG", "display_name": "Digikata", "link": "https://stackoverflow.com/users/130554/digikata"}, "is_accepted": true, "score": 1, "last_activity_date": 1501175700, "last_edit_date": 1501175700, "creation_date": 1496541673, "answer_id": 44350121, "question_id": 44047555, "link": "https://stackoverflow.com/questions/44047555/compiling-core-from-a-specific-source-using-xargo/44350121#44350121", "title": "Compiling `core` from a specific source using Xargo", "body": "<p>You may need to install the nightly Rust toolchain to allow xargo to buildup some support code for your target. I had to do something similar to get an embedded ARM setup working with xargo. Do this in the directory of your embedded target:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustup install nightly\n$ rustup component add rust-src  # needed for xargo buildup of the target\n$ rustup override set nightly    # sets the rustc version to run for this dir\n$ xargo build\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "is_accepted": false, "score": 1, "last_activity_date": 1496550774, "creation_date": 1496550774, "answer_id": 44350787, "question_id": 44047555, "link": "https://stackoverflow.com/questions/44047555/compiling-core-from-a-specific-source-using-xargo/44350787#44350787", "title": "Compiling `core` from a specific source using Xargo", "body": "<p>It turns out <a href=\"https://github.com/japaric/xargo/issues/138\" rel=\"nofollow noreferrer\">picking up <code>rustc</code>'s path from <code>.cargo/config</code> is not currently supported by Xargo</a>, so whatever <code>rustc</code> I want to use need to be installed as a <code>rustup link</code>. To quote the above ticket:</p>\n\n<blockquote>\n  <p>In the meantine you could use <code>rustup</code> to create a custom toolchain that points to your stage1 <code>rustc</code>. That's known to work.</p>\n\n<pre><code>$ cd /home/cactus/prog/rust/rust-avr/build/build/x86_64-unknown-linux-gnu/stage1\n$ rustup toolchain link avr-toolchain .\n$ rustup default avr-toolchain\n$ rustc -V\n# should say dev channel\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 25144, "user_id": 477476, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/Qf4TT.png?s=128&g=1", "display_name": "Cactus", "link": "https://stackoverflow.com/users/477476/cactus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 553, "favorite_count": 0, "accepted_answer_id": 44350121, "answer_count": 2, "score": 1, "last_activity_date": 1501175700, "creation_date": 1495109855, "last_edit_date": 1496983048, "question_id": 44047555, "link": "https://stackoverflow.com/questions/44047555/compiling-core-from-a-specific-source-using-xargo", "title": "Compiling `core` from a specific source using Xargo", "body": "<p><a href=\"https://www.reddit.com/r/rust/comments/6ar4q7/rust_on_avr_beyond_blinking/dhpeuvl/\" rel=\"nofollow noreferrer\">Based on this comment</a>, it should be possible to use Xargo to manage the installation of a custom <code>core</code> crate for a particular target. I've tried the following to get it working with a crate that has no other dependency except <code>core</code>:</p>\n\n<p><code>Cargo.toml</code>: no dependencies listed</p>\n\n<pre><code>[package]\nname = \"chip8-engine\"\nversion = \"0.1.0\"\nauthors = [\"Dr. ERDI Gergo &lt;gergo@erdi.hu&gt;\"]\n\n[dependencies]\n</code></pre>\n\n<p><code>Xargo.toml</code>: my specific source listed for <code>core</code></p>\n\n<pre><code>[target.avr-atmel-none.dependencies]\ncore = { git = \"https://github.com/gergoerdi/rust-avr-libcore-mini\", rev = \"adda44aa91ac517aab6915447592ee4cad26564c\" }\n</code></pre>\n\n<p>However, building via <code>xargo build</code> fails as if I was just using <code>cargo</code>:</p>\n\n<pre><code>$ ~/.cargo/bin/xargo build --release -v --target avr-atmel-none\n+ \"rustc\" \"--print\" \"sysroot\"\n+ \"cargo\" \"build\" \"--release\" \"-v\" \"--target\" \"avr-atmel-none\"\n   Compiling chip8-engine v0.1.0 (file:///home/cactus/prog/rust/avr/chip8-engine-avr)\n     Running `stage1/bin/rustc --crate-name chip8_engine src/lib.rs --crate-type lib -C opt-level=3 -C metadata=231962fc6e1bee04 -C extra-filename=-231962fc6e1bee04 --out-dir /home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps --emit=dep-info,link --target avr-atmel-none -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/release/deps`\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `avr-atmel-none` target may not be installed\n\nerror: aborting due to previous error\n\nerror: Could not compile `chip8-engine`.\n\nCaused by:\n  process didn't exit successfully: `stage1/bin/rustc --crate-name chip8_engine src/lib.rs --crate-type lib -C opt-level=3 -C metadata=231962fc6e1bee04 -C extra-filename=-231962fc6e1bee04 --out-dir /home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps --emit=dep-info,link --target avr-atmel-none -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/release/deps` (exit code: 101)\n</code></pre>\n\n<p>Note that there's nothing indicating even attempted Git traffic.</p>\n\n<p>In contrast, here's the output of vanilla <code>cargo</code> if I put my <code>core = { git = ...}</code> line in <code>Cargo.toml</code> instead of <code>Xargo.toml</code>, which works as expected:</p>\n\n<pre><code>$ cargo build -v --target=avr-atmel-none --release\n   Compiling core v0.1.0 (https://github.com/gergoerdi/rust-avr-libcore-mini?rev=adda44aa91ac517aab6915447592ee4cad26564c#adda44aa)\n     Running `stage1/bin/rustc --crate-name core /home/cactus/.cargo/git/checkouts/rust-avr-libcore-mini-37e279d93a70b45a/adda44a/src/lib.rs --crate-type lib -C opt-level=3 -C metadata=47f38a1987c5b284 -C extra-filename=-47f38a1987c5b284 --out-dir /home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps --emit=dep-info,link --target avr-atmel-none -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/release/deps --cap-lints allow`\n   Compiling chip8-engine v0.1.0 (file:///home/cactus/prog/rust/avr/chip8-engine-avr)\n     Running `stage1/bin/rustc --crate-name chip8_engine src/lib.rs --crate-type lib -C opt-level=3 -C metadata=231962fc6e1bee04 -C extra-filename=-231962fc6e1bee04 --out-dir /home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps --emit=dep-info,link --target avr-atmel-none -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps -L dependency=/home/cactus/prog/rust/avr/chip8-engine-avr/target/release/deps --extern core=/home/cactus/prog/rust/avr/chip8-engine-avr/target/avr-atmel-none/release/deps/libcore-47f38a1987c5b284.rlib`\n    Finished release [optimized] target(s) in 15.21 secs\n</code></pre>\n"}, {"tags": ["javascript", "rust", "emscripten"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 4, "creation_date": 1495111043, "post_id": 44047230, "comment_id": 75121203, "body": "It could be because Rust slices are <b>not</b> the same thing as a C array.  You should not be using Rust-specific types (like <code>&amp;[_]</code>) when talking over a C interface.  Try changing the function to take only C-compatible arguments instead, like <code>*const f32, usize</code>, and go from there."}, {"owner": {"reputation": 1606, "user_id": 439965, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/016775e869b4a6c2e13e0e938b974016?s=128&d=identicon&r=PG", "display_name": "RReverser", "link": "https://stackoverflow.com/users/439965/rreverser"}, "edited": false, "score": 2, "creation_date": 1495149243, "post_id": 44047230, "comment_id": 75143313, "body": "By the way, you don&#39;t need to use unstable link_args feature for this anymore - that article is outdated. Instead, just mark your function as &quot;extern&quot; (like you would to export it to C) and &quot;EXPORTED_FUNCTIONS&quot; will be generated and passed to Emscripten automatically."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1495504269, "creation_date": 1495504269, "answer_id": 44124550, "question_id": 44047230, "link": "https://stackoverflow.com/questions/44047230/how-can-i-pass-an-array-from-javascript-to-rust-that-has-been-compiled-with-emsc/44124550#44124550", "title": "How can I pass an array from JavaScript to Rust that has been compiled with Emscripten?", "body": "<p>Thank you for the help. I edited the code to use <code>*const f32</code> and now I am able to print the contents of the array:</p>\n\n<pre><code>pub fn display_array(array_ptr: *const f32, array_length: isize) {\n    for offset in 0..array_length {\n        unsafe { println!(\"Rust - value in array: {:?}\", *array_ptr.offset(offset)); }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 21, "user_id": 8030834, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7746adbaa1bd51553ecaf349a074b53?s=128&d=identicon&r=PG&f=1", "display_name": "Malfunction54", "link": "https://stackoverflow.com/users/8030834/malfunction54"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 722, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1495504269, "creation_date": 1495108985, "last_edit_date": 1495504255, "question_id": 44047230, "link": "https://stackoverflow.com/questions/44047230/how-can-i-pass-an-array-from-javascript-to-rust-that-has-been-compiled-with-emsc", "title": "How can I pass an array from JavaScript to Rust that has been compiled with Emscripten?", "body": "<p>Below is my Rust and JavaScript code that I made based on <a href=\"http://kapadia.github.io/emscripten/2013/09/13/emscripten-pointers-and-pointers.html\" rel=\"nofollow noreferrer\">an example that calls C code from JavaScript with an array</a> and <a href=\"http://www.hellorust.com/emscripten/demos/04-call-into-lib/\" rel=\"nofollow noreferrer\">an example that calls Rust functions from JavaScript without parameters</a>.</p>\n\n<p><strong>display-array.rs</strong></p>\n\n<pre><code>#![feature(link_args)]\n\n#[link_args = \"-s EXPORTED_FUNCTIONS=['_display_array']\"]\nextern {}\n\n#[no_mangle]\npub fn display_array(array: &amp;[f32]) {\n    println!(\"Rust - array size: {}\", array.len());\n    println!(\"Rust - array: {:?}\", array);\n}\n\nfn main() {\n    /* Intentionally left blank */\n}\n</code></pre>\n\n<p><strong>callDisplayArray.js</strong></p>\n\n<pre><code>var Module = require(\"./display-array.js\");\n\n// Import function from Emscripten generated file\ndisplay_array = Module.cwrap('display_array', 'number', ['number']);\n\nvar data = new Float32Array([1, 2, 3, 4, 5]);\n\n// Get data byte size, allocate memory on Emscripten heap, and get pointer\nvar nDataBytes = data.length * data.BYTES_PER_ELEMENT;\nvar dataPtr = Module._malloc(nDataBytes);\n\n// Copy data to Emscripten heap (directly accessed from Module.HEAPU8)\nvar dataHeap = new Uint8Array(Module.HEAPU8.buffer, dataPtr, nDataBytes);\ndataHeap.set(new Uint8Array(data.buffer));\n\nconsole.log(\"Javascript - nDataBytes: \" + nDataBytes + \" , dataHeap.byteOffset: \" + dataHeap.byteOffset + \" , dataHeap: \" + dataHeap);\n\ndisplay_array(dataHeap.byteOffset);\n</code></pre>\n\n<p>I have succesfully compiled the display-array.rs code into display-array.js by running:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc --target asmjs-unknown-emscripten display-array.rs\n</code></pre>\n\n<p>I run my Javascript code with command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>node callDisplayArray.js\n</code></pre>\n\n<p>Here are the debug messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Javascript - nDataBytes: 20 , dataHeap.byteOffset: 5260840 , dataHeap: 0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,160,64\n\nRust - array size: 0\n\nRust - array: []\n</code></pre>\n\n<p>The array in Rust is empty. I'm new to both Rust and Emscripten so I'm really lost here. Perhaps I shouldn't be calling <code>Module._malloc</code> like it's called when using C with Emscripten, and instead use something else?</p>\n"}, {"tags": ["asynchronous", "rust", "closures"], "answers": [{"comments": [{"owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "edited": false, "score": 0, "creation_date": 1495101567, "post_id": 44044165, "comment_id": 75114639, "body": "A bit missed question, the error said that <code>Sync</code> trait not implemented, <code>clone()</code> has nothing to deal with it"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "edited": false, "score": 0, "creation_date": 1495105863, "post_id": 44044165, "comment_id": 75117474, "body": "@Kostya Krivomaz, are you sure that <code>sender</code> isn&#39;t a reference? Immutable references are <code>Copy</code>, so the reference will be copied into closure, probably causing this error message."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1495108529, "post_id": 44044165, "comment_id": 75119387, "body": "@red75prim Good catch. In that case, the code in the answer will do the right thing as well, since <code>clone()</code> will clone the referenced object."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 3, "last_activity_date": 1495108704, "last_edit_date": 1495108704, "creation_date": 1495100504, "answer_id": 44044165, "question_id": 44043643, "link": "https://stackoverflow.com/questions/44043643/move-in-closure-not-cloning-data/44044165#44044165", "title": "`move` in closure not cloning data", "body": "<p>The <code>move</code> keyword causes the <code>Sender</code> object to <strong>move</strong> into the closure, i.e. it is specifically designed to prevent a borrow from occurring. Your error message indicates that <code>sender</code> is not <code>Sync</code>, which indicates that a move did not in fact occur. As noted by @red75prim, one way for this to happen is if <code>sender</code> is a reference, which will cause it to be copied into the closure, and in turn require the underlying <code>Sender</code> object to be <code>Sync</code>.</p>\n\n<p>To send an mpsc <code>Sender</code> into another thread, you need to first clone it, and then move the clone into the closure:</p>\n\n<pre><code>{\n    let sender = sender.clone();\n    move |p| match Params::parse::&lt;Value&gt;(p) {\n        ...\n    }\n};\n</code></pre>\n"}], "owner": {"reputation": 1054, "user_id": 4201205, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/7186d11fd2ae12a5da22d2a8e7a684ad?s=128&d=identicon&r=PG&f=1", "display_name": "Constantine", "link": "https://stackoverflow.com/users/4201205/constantine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1495108704, "creation_date": 1495099258, "question_id": 44043643, "link": "https://stackoverflow.com/questions/44043643/move-in-closure-not-cloning-data", "title": "`move` in closure not cloning data", "body": "<p>I have closure:</p>\n\n<pre><code>move |p| match Params::parse::&lt;Value&gt;(p) {\n            Ok(ref v) if v.as_str().is_some() =&gt; {\n                let chain = v.as_str().unwrap();\n                match sender.send(chain) {\n                    Ok(_) =&gt; futures::done(Ok(Value::Null)).boxed(),\n                    Err(err) =&gt; futures::failed(JsonRpcError::invalid_params(\n                        format!(\"Node not responding: {}\", err.to_string())))\n                        .boxed(),\n                }\n            }\n            Ok(_) | Err(_) =&gt; {\n                futures::failed(JsonRpcError::invalid_params(\"Invalidlabel\"))\n                    .boxed()\n            }\n        };\n</code></pre>\n\n<p>compilation fails with such error:</p>\n\n<pre><code>the trait bound `std::sync::mpsc::Sender&lt;&amp;str&gt;: std::marker::Sync` is not satisfied in `[closure@src/rpc/mod.rs:223:13: 237:14 sender:std::sync::mpsc::Sender&lt;&amp;str&gt;]`\n</code></pre>\n\n<p>Isn't <code>move</code> keyword should capture and clone <code>Sender</code>? </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 2, "last_activity_date": 1495101614, "creation_date": 1495101614, "answer_id": 44044600, "question_id": 44041978, "link": "https://stackoverflow.com/questions/44041978/using-draw-filled-circle-mut-in-a-function-trait-bound-not-satisfied/44044600#44044600", "title": "using `draw_filled_circle_mut` in a function: trait bound not satisfied", "body": "<pre><code>fn circle(img: &amp;mut RgbImage) {\n    draw_filled_circle_mut(&amp;mut img, ...\n</code></pre>\n\n<p>Type of <code>img</code> is <code>&amp;mut RgbImage</code> and then you take another mutable reference of it. That is you try to pass <code>&amp;mut &amp;mut RgbImage</code> into <code>draw_filled_circle_mut</code>, while it expects <code>&amp;mut RgbImage</code>. </p>\n\n<p>Correct version</p>\n\n<pre><code>fn circle(img: &amp;mut RgbImage) {\n    draw_filled_circle_mut(img, (300, 300), 50, Rgb([0, 255, 0]));\n}\n</code></pre>\n\n<p>What about error message? Let's look at the declaration of the function</p>\n\n<pre><code>pub fn draw_filled_circle_mut&lt;I&gt;(\n\u00a0\u00a0\u00a0\u00a0image: &amp;mut I, \n    center: (i32, i32), \n\u00a0\u00a0\u00a0\u00a0radius: i32, \n    color: I::Pixel\n) \nwhere\n    I: GenericImage,\n\u00a0\u00a0\u00a0\u00a0I::Pixel: 'static,\u00a0\n</code></pre>\n\n<p>The function expects <code>&amp;mut I</code> as a first parameter and type <code>I</code> must implement trait <code>GenericImage</code>. You pass <code>&amp;mut &amp;mut RgbImage</code> into the function, which means that <code>I</code> is <code>&amp;mut RgbImage</code>. </p>\n\n<p>Compiler checks whether <code>&amp;mut RgbImage</code> implements <code>GenericImage</code> trait, finds that it is not, and outputs error message telling that.</p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 44044600, "answer_count": 1, "score": 1, "last_activity_date": 1495101614, "creation_date": 1495094710, "question_id": 44041978, "link": "https://stackoverflow.com/questions/44041978/using-draw-filled-circle-mut-in-a-function-trait-bound-not-satisfied", "title": "using `draw_filled_circle_mut` in a function: trait bound not satisfied", "body": "<p>Using <code>imageproc</code> crate, I can call <code>draw_filled_circle_mut</code> on an Image:</p>\n\n<pre><code>let mut img = ImageBuffer::from_pixel(640, 480, Rgb([255, 0, 0]));\ndraw_filled_circle_mut(&amp;mut img, (300, 300), 50, Rgb([0, 255, 0]));\n</code></pre>\n\n<p>But if I use a function it does not work:</p>\n\n<pre><code>fn circle(img: &amp;mut RgbImage) {\n    draw_filled_circle_mut(&amp;mut img, (300, 300), 50, Rgb([0, 255, 0]));\n}\n\nfn main() {\n    let mut img = ImageBuffer::from_pixel(640, 480, Rgb([255, 0, 0]));\n    circle(&amp;mut img);\n}\n</code></pre>\n\n<p>It returns this error:</p>\n\n<pre><code>error[E0277]: the trait bound `&amp;mut image::ImageBuffer&lt;image::Rgb&lt;u8&gt;, std::vec::Vec&lt;u8&gt;&gt;: image::GenericImage` is not satisfied\n  --&gt; src/main.rs:84:5\n   |\n84 |     draw_filled_circle_mut(&amp;mut img, (300, 300), 50, Rgb([10,255,10]));\n   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `image::GenericImage` is not implemented for `&amp;mut image::ImageBuffer&lt;image::Rgb&lt;u8&gt;, std::vec::Vec&lt;u8&gt;&gt;`\n   |\n   = help: the following implementations were found:\n         &lt;image::ImageBuffer&lt;P, Container&gt; as image::GenericImage&gt;\n   = note: required by `imageproc::drawing::draw_filled_circle_mut`\n</code></pre>\n\n<p>I'm still lost with this kind of error. I thought I can draw on a <code>RgbImage</code> which is a <code>ImageBuffer&lt;Rgb&lt;u8&gt;, Vec&lt;u8&gt;&gt;</code> and that's what IS my <code>img</code> var (unless I did not understand). </p>\n\n<p>So why does it work in the same function (without actually writing type) and it does not work when I use another function (with a typed argument)?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 23600, "user_id": 1695172, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/6319d7eafca7852cf04c88598ca31e75?s=128&d=identicon&r=PG", "display_name": "Netwave", "link": "https://stackoverflow.com/users/1695172/netwave"}, "edited": false, "score": 0, "creation_date": 1495096602, "post_id": 44042553, "comment_id": 75111075, "body": "yeah, its because of the type system right? because even been a tuple, <code>(int, int, int)</code> is not the same type as <code>(int, int)</code>,  and since there is no way of unpacking it iterating you cant really move it to an array."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 23600, "user_id": 1695172, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/6319d7eafca7852cf04c88598ca31e75?s=128&d=identicon&r=PG", "display_name": "Netwave", "link": "https://stackoverflow.com/users/1695172/netwave"}, "edited": false, "score": 0, "creation_date": 1495096702, "post_id": 44042553, "comment_id": 75111137, "body": "@DanielSanchez: exactly - a tuple&#39;s type is determined by both its length and the types of its contents. Even languages with higher-kinded types like Haskell don&#39;t provide such functionalities."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495098279, "post_id": 44042553, "comment_id": 75112275, "body": "I disagree with your statement that a tuple being a heterogeneous type is unfit for a conversion to an array (a homogeneous type). While highly probably, it fails to account for the interesting cases where the conversion makes sense: ie the tuple has the same number of elements as the array and each element of the tuple is convertible to the type of elements the array contains."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495099145, "post_id": 44042553, "comment_id": 75112888, "body": "@MatthieuM.: true; I meant in general."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495099300, "post_id": 44042553, "comment_id": 75113020, "body": "@ljedrz: Yes, I understood. Picking any two random tuple type and array type it&#39;s likely the conversion is nonsensical. However whenever a developer wants to go from one to the other, it&#39;s likely that (1) the lengths match and (2) the types match, or are convertible."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1495096358, "creation_date": 1495096358, "answer_id": 44042553, "question_id": 44041673, "link": "https://stackoverflow.com/questions/44041673/create-an-array-from-a-tuple/44042553#44042553", "title": "Create an array from a tuple", "body": "<p>No, there isn't. What is more, you can't even iterate over tuples. The tuple is heterogeneous, so it's unfit for a conversion to a homogeneous type like a vector or an array.</p>\n\n<p>You could write a macro to allow iteration over the contents of a tuple of a generic length and collect them (as long as all its elements are of the same type), but you would still have to access/process every element individually.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1495098074, "creation_date": 1495098074, "answer_id": 44043197, "question_id": 44041673, "link": "https://stackoverflow.com/questions/44041673/create-an-array-from-a-tuple/44043197#44043197", "title": "Create an array from a tuple", "body": "<p>There is no such functionality <em>at the moment</em>, however it would be perfectly possible to extend the set of implementations of the <code>From</code> trait to cover this usecase (and its reverse).</p>\n\n<p>This extension would have to be in the <code>core</code> crate because of the orphan rules, but we can readily demonstrate it with custom traits:</p>\n\n<pre><code>use std::convert::Into;\n\ntrait MyFrom&lt;T&gt; {\n    fn my_from(t: T) -&gt; Self;\n}\n\ntrait MyInto&lt;U&gt; {\n    fn my_into(self) -&gt; U;\n}\n\nimpl&lt;T, U&gt; MyInto&lt;U&gt; for T\n    where\n        U: MyFrom&lt;T&gt;\n{\n    fn my_into(self) -&gt; U { &lt;U as MyFrom&lt;T&gt;&gt;::my_from(self) }\n}\n\nimpl&lt;T&gt; MyFrom&lt;()&gt; for [T; 0] {\n    fn my_from(_: ()) -&gt; Self { [] }\n}\n\nimpl&lt;T, A&gt; MyFrom&lt;(A,)&gt; for [T; 1]\n    where\n        A: Into&lt;T&gt;,\n{\n    fn my_from(t: (A,)) -&gt; Self { [t.0.into()] }\n}\n\nimpl&lt;T, A, B&gt; MyFrom&lt;(A, B)&gt; for [T; 2]\n    where\n        A: Into&lt;T&gt;,\n        B: Into&lt;T&gt;,\n{\n    fn my_from(t: (A, B)) -&gt; Self { [t.0.into(), t.1.into()] }\n}\n</code></pre>\n\n<p>Once define, it's easy enough to use:</p>\n\n<pre><code>fn main() {\n    {\n        let array: [i64; 0] = ().my_into();\n        println!(\"{:?}\", array);\n    }\n    {\n        let array: [i64; 1] = (1u32,).my_into();\n        println!(\"{:?}\", array);\n    }\n    {\n        let array: [i64; 2] = (1u32, 2i16).my_into();\n        println!(\"{:?}\", array);\n    }\n}\n</code></pre>\n\n<p>will print:</p>\n\n<blockquote>\n<pre><code>[]\n[1]\n[1, 2]\n</code></pre>\n</blockquote>\n\n<p>The reverse implementation would be as easy, there's nothing mysterious here it's just boilerplate (hurray for macros!).</p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2563, "favorite_count": 1, "accepted_answer_id": 44043197, "answer_count": 2, "score": 6, "last_activity_date": 1495098074, "creation_date": 1495093717, "question_id": 44041673, "link": "https://stackoverflow.com/questions/44041673/create-an-array-from-a-tuple", "title": "Create an array from a tuple", "body": "<p>I can create an array from a tuple like this:</p>\n\n<pre><code>let a = (1, 2, 3);\nlet b = [a.0, a.1, a.2];\n</code></pre>\n\n<p>Is there a way to do it without naming each element of the tuple? Something like:</p>\n\n<pre><code>let b = a.to_array();\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1612, "user_id": 238175, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aadf885c1f492288093a5aa23aebf148?s=128&d=identicon&r=PG", "display_name": "fbstj", "link": "https://stackoverflow.com/users/238175/fbstj"}, "edited": false, "score": 1, "creation_date": 1495097182, "post_id": 44041007, "comment_id": 75111467, "body": "I think this is <a href=\"https://doc.rust-lang.org/error-index.html#E0210\" rel=\"nofollow noreferrer\">orphan rules</a> violation? you can&#39;t implement traits generically over types defined outside your own modules"}, {"owner": {"reputation": 651, "user_id": 5223795, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ef3abe0f20c34e1325db295fab0c1be9?s=128&d=identicon&r=PG&f=1", "display_name": "Boris", "link": "https://stackoverflow.com/users/5223795/boris"}, "reply_to_user": {"reputation": 1612, "user_id": 238175, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aadf885c1f492288093a5aa23aebf148?s=128&d=identicon&r=PG", "display_name": "fbstj", "link": "https://stackoverflow.com/users/238175/fbstj"}, "edited": false, "score": 0, "creation_date": 1495141068, "post_id": 44041007, "comment_id": 75140285, "body": "It is indeed. Thanks @fbstj for the link"}, {"owner": {"reputation": 1612, "user_id": 238175, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aadf885c1f492288093a5aa23aebf148?s=128&d=identicon&r=PG", "display_name": "fbstj", "link": "https://stackoverflow.com/users/238175/fbstj"}, "edited": false, "score": 0, "creation_date": 1495179101, "post_id": 44041007, "comment_id": 75152432, "body": "maybe try implementing one of <code>From</code> or <code>Into</code> to convert <code>Vec</code> into <code>List</code> and then implement the &#39;backwards&#39; <code>PartialEq</code> on that bounds?"}], "owner": {"reputation": 651, "user_id": 5223795, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ef3abe0f20c34e1325db295fab0c1be9?s=128&d=identicon&r=PG&f=1", "display_name": "Boris", "link": "https://stackoverflow.com/users/5223795/boris"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 197, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1589474116, "creation_date": 1495091620, "last_edit_date": 1589474116, "question_id": 44041007, "link": "https://stackoverflow.com/questions/44041007/how-to-implement-partialeq-and-reverse-partialeq-for-my-struct", "title": "How to implement PartialEq and reverse PartialEq for my struct", "body": "<p>I have this struct wrapping a <code>Vec</code> for which I implemented <code>PartialEq</code> following the solution proposed by <a href=\"https://stackoverflow.com/questions/39265755/how-to-implement-partialeq-on-vector-for-my-own-structs\">this post</a></p>\n\n<pre><code>pub struct List&lt;T&gt; {\n    memory:  Vec&lt;T&gt;,\n}\n\nimpl&lt;T&gt; List&lt;T&gt; {\n    pub fn new() -&gt; Self {\n        List {\n            memory: Vec::new(),\n        }\n    }\n    // push() add to end of list\n    pub fn push(&amp;mut self, value: T) {\n        self.memory.push(value);\n    }\n}\n\nimpl&lt;T, U&gt; PartialEq&lt;U&gt; for List&lt;T&gt;\n    where Vec&lt;T&gt;: PartialEq&lt;U&gt;\n{\n    fn eq(&amp;self, other: &amp;U) -&gt; bool {\n        &amp;self.memory == other\n    }\n}\n\nimpl&lt;T&gt; PartialEq&lt;List&lt;T&gt;&gt; for Vec&lt;u32&gt;\n    where T: PartialEq&lt;u32&gt;\n{\n    fn eq(&amp;self, other: &amp;List&lt;T&gt;) -&gt; bool {\n        &amp;other.memory == self\n    }\n}\n\n/* COMMENTED BECAUSE IT DOESN'T COMPILE\nimpl&lt;T, U&gt; PartialEq&lt;List&lt;T&gt;&gt; for Vec&lt;U&gt;\n    where T: PartialEq&lt;U&gt;\n{\n    fn eq(&amp;self, other: &amp;List&lt;T&gt;) -&gt; bool {\n        &amp;other.memory == self\n    }\n}\n*/\n\nfn main() {\n    let mut listex: List&lt;u32&gt; = List::new();\n\n    listex.push(17);\n    listex.push(18);\n    listex.push(19);\n    listex.push(20);            \n\n    println!(\"{}\", listex == vec![17, 18, 19, 20]);\n    println!(\"{}\", vec![17, 18, 19, 20] == listex);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fe6215c0e855140c9d5879b2ffb8887d\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>It compiles and works</p>\n\n<pre><code>    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/tests`\ntrue\ntrue\n</code></pre>\n\n<p>But to implement the reverse <code>==</code> (i.e. be able to do both <code>listex == vec![1,2]</code> and <code>vec![1,2] == listex</code>) I have to specifically implement <code>PartialEq</code> for <code>Vec&lt;u32&gt;</code> and can't use a generic parameter as I get the following compiler error (uncommenting the <code>PartialEq&lt;List&lt;T&gt;&gt; for Vec&lt;U&gt;</code> bloc)</p>\n\n<pre><code>error[E0210]: type parameter `U` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate can be implemented for a type parameter\n  --&gt; src/main.rs:25:1\n   |\n25 | / impl&lt;T, U&gt; PartialEq&lt;List&lt;T&gt;&gt; for Vec&lt;U&gt;\n26 | |     where T: PartialEq&lt;U&gt;\n27 | | {\n28 | |     fn eq(&amp;self, other: &amp;List&lt;T&gt;) -&gt; bool {\n29 | |         &amp;other.memory == self\n30 | |     }\n31 | | }\n   | |_^\n</code></pre>\n\n<p>Except for macros, is there an efficient way to implement all (or many of) the possible <code>PartialEq</code> to enable the reverse PartialEq?</p>\n"}, {"tags": ["email", "smtp", "rust", "exchange-server"], "comments": [{"owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "edited": false, "score": 0, "creation_date": 1495093116, "post_id": 44040770, "comment_id": 75108895, "body": "maybe you censored your email address, but just in case: <a href=\"http://stackoverflow.com/questions/30342884/the-server-response-was-5-7-57-smtp-client-was-not-authenticated-to-send-anony\">The server response was: 5.7.57 SMTP; Client was not authenticated to send anonymous mail during MAIL FROM</a>"}, {"owner": {"reputation": 11, "user_id": 7914221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/675b9f945e47a87009d99bca4dd821ff?s=128&d=identicon&r=PG&f=1", "display_name": "foggy0400", "link": "https://stackoverflow.com/users/7914221/foggy0400"}, "reply_to_user": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "edited": false, "score": 0, "creation_date": 1495166991, "post_id": 44040770, "comment_id": 75147247, "body": "@FrancoisMockers Yes, my email credentials are in the code, I will try using some alternative credentials to see if it works. If that doesn&#39;t work, I&#39;ll try the password changing method, and then after that I&#39;ll go back to trying different settings with the transport. Thanks for the link."}, {"owner": {"reputation": 11, "user_id": 7914221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/675b9f945e47a87009d99bca4dd821ff?s=128&d=identicon&r=PG&f=1", "display_name": "foggy0400", "link": "https://stackoverflow.com/users/7914221/foggy0400"}, "reply_to_user": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "edited": false, "score": 0, "creation_date": 1496892835, "post_id": 44040770, "comment_id": 75850523, "body": "I solved it! I used telnet and openssl to try connecting directly to my SMTP server, where I found that AUTH LOGIN requires 3 commands; one to send the AUTH LOGIN code, one to send the username and another to send the password. Turns out the lettre library implements all its AUTH commands as single commands, so this wasn&#39;t working with the server. I downloaded the source code for the library, changed the send function to do the three separate commands, recompiled my code and everything worked fine :)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496924158, "post_id": 44426273, "comment_id": 75868124, "body": "Did you file an issue with the library or submit your code back to them?"}, {"owner": {"reputation": 11, "user_id": 7914221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/675b9f945e47a87009d99bca4dd821ff?s=128&d=identicon&r=PG&f=1", "display_name": "foggy0400", "link": "https://stackoverflow.com/users/7914221/foggy0400"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496991504, "post_id": 44426273, "comment_id": 75899288, "body": "@Shepmaster Not yet, I&#39;ll file a github issue for it though and link them to here"}], "tags": [], "owner": {"reputation": 11, "user_id": 7914221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/675b9f945e47a87009d99bca4dd821ff?s=128&d=identicon&r=PG&f=1", "display_name": "foggy0400", "link": "https://stackoverflow.com/users/7914221/foggy0400"}, "is_accepted": true, "score": 0, "last_activity_date": 1496924142, "last_edit_date": 1496924142, "creation_date": 1496893603, "answer_id": 44426273, "question_id": 44040770, "link": "https://stackoverflow.com/questions/44040770/getting-client-was-not-authenticated-to-send-anonymous-mail-during-mail-from-e/44426273#44426273", "title": "Getting &quot;Client was not authenticated to send anonymous mail during MAIL FROM&quot; error from Exchange SMTP using Rust lettre library", "body": "<p>I used telnet and openssl to try connecting directly to my SMTP server, where I found that AUTH LOGIN requires 3 commands; one to send the AUTH LOGIN code, one to send the username and another to send the password. I found that the lettre library implements all its AUTH commands as single commands, so this wasn't working with the server. I downloaded the source code for the library, changed the send function to do the three separate commands, recompiled my code and everything worked fine :) </p>\n\n<p>My addition to the lettre code:</p>\n\n<pre><code>if (accepted_mechanisms[0] == Mechanism::Login) &amp;&amp;\n            (accepted_mechanisms.capacity() == 1) {\n            try_smtp!(self.client.command(\"AUTH LOGIN\"), self);\n            try_smtp!(self.client.command(base64::encode_config(\n                                            &amp;username.as_bytes(),\n                                            base64::STANDARD).as_str()), self);\n            try_smtp!(self.client.command(base64::encode_config(\n                                                        &amp;password.as_bytes(),\n                                                        base64::STANDARD).as_str()), self);\n</code></pre>\n"}], "owner": {"reputation": 11, "user_id": 7914221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/675b9f945e47a87009d99bca4dd821ff?s=128&d=identicon&r=PG&f=1", "display_name": "foggy0400", "link": "https://stackoverflow.com/users/7914221/foggy0400"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7463, "favorite_count": 0, "accepted_answer_id": 44426273, "answer_count": 1, "score": 1, "last_activity_date": 1496924142, "creation_date": 1495090911, "last_edit_date": 1495167260, "question_id": 44040770, "link": "https://stackoverflow.com/questions/44040770/getting-client-was-not-authenticated-to-send-anonymous-mail-during-mail-from-e", "title": "Getting &quot;Client was not authenticated to send anonymous mail during MAIL FROM&quot; error from Exchange SMTP using Rust lettre library", "body": "<p>I am writing a Rust application that will send email through an Exchange server with SMTP functionality enabled. According to <a href=\"https://support.office.com/en-us/article/How-to-set-up-a-multifunction-device-or-application-to-send-email-using-Office-365-69f58e99-c550-4274-ad18-c805d654b4c4?ui=en-US&amp;rs=en-US&amp;ad=US\" rel=\"nofollow noreferrer\">Microsoft's webpage</a>, the settings that are required are:</p>\n\n<ul>\n<li>Server address smtp.office365.com</li>\n<li>Port 587</li>\n<li>StartTLS Enabled</li>\n<li>Credentials for mail account login</li>\n</ul>\n\n<p>These are corroborated by the POP/IMAP settings of the webmail service.</p>\n\n<p>Here is my code (with some censoring):</p>\n\n<pre><code>extern crate lettre;\n\nuse self::lettre::email::EmailBuilder;\nuse self::lettre::transport::smtp::{SecurityLevel, SmtpTransportBuilder, SUBMISSION_PORT};\nuse self::lettre::transport::smtp::authentication::Mechanism;\nuse self::lettre::transport::EmailTransport;\n\npub fn send_mail() {\n    let email = EmailBuilder::new()\n        .from(\"my email\")\n        .to(\"destination email\")\n        .body(\"testing\")\n        .subject(\"testing\")\n        .build()\n        .unwrap();\n\n    // Connect to SMTP server\n    let mut transport = SmtpTransportBuilder::new((\"smtp.office365.com\", SUBMISSION_PORT))\n        .expect(\"Failed to create email transport\")\n        .encrypt()\n        .smtp_utf8(true)\n        .credentials(\"my email\", \"my password\")\n        .authentication_mechanism(Mechanism::Login)\n        .build();\n    println!(\"Mail transport built\");\n\n    println!(\"{:?}\", transport.send(email.clone()));\n}\n</code></pre>\n\n<p>When I compile and run the code,it gives me this error: </p>\n\n<blockquote>\n  <p>Err(Permanent(Response { code: Code { severity:\n  PermanentNegativeCompletion, category: Unspecified3, detail: 0 },\n  message: [\"5.7.57 SMTP; Client was not authenticated to send anonymous\n  mail during MAIL FROM [SYXPR01CA0106.ausprd01.prod.outlook.com]\"] }))</p>\n</blockquote>\n\n<p>Why is this happening? </p>\n\n<p>The closest I've come in my research is an issue on GitHub in relation to the lettre library not supporting the <code>Login</code> authentication mechanism (which Office 365 uses); however, the codebase was updated to support <code>Login</code> and I am using the master branch directly from GitHub so theoretically my application should support the <code>Login</code> mechanism.</p>\n\n<p>Edit: Forgot to mention that I attempted an EHLO to the server, but it returned a (Client:(Connection closed)) error.</p>\n"}, {"tags": ["vector", "iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495077433, "post_id": 44037831, "comment_id": 75102358, "body": "Note that idiomatic Rust style is to use <code>PascalCase</code> for types. <code>sim</code> is not correct, <code>Sim</code> would be. You also don&#39;t need to provide the type hint on <code>v2</code> \u2014 the fact that you push a <code>sim</code> is enough to infer the type."}, {"owner": {"reputation": 7076, "user_id": 1610428, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/e6gnk.jpg?s=128&g=1", "display_name": "krishnab", "link": "https://stackoverflow.com/users/1610428/krishnab"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495078130, "post_id": 44037831, "comment_id": 75102538, "body": "Haha @Shepmaster thanks. I will get my minimal examples in shape one day here ;)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495077502, "post_id": 44037992, "comment_id": 75102369, "body": "<i>That&#39;s what they&#39;re <code>for</code></i> \u2014 oh, I see what you did there."}, {"owner": {"reputation": 7076, "user_id": 1610428, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/e6gnk.jpg?s=128&g=1", "display_name": "krishnab", "link": "https://stackoverflow.com/users/1610428/krishnab"}, "edited": false, "score": 0, "creation_date": 1495078017, "post_id": 44037992, "comment_id": 75102511, "body": "Cool this is helpful. Yes I can write a loop, that is what I did first. I am just trying to understand the higher order functions in rust and get more comfortable with them. Thanks for the ideas as I would not have thought of these myself."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1495077231, "creation_date": 1495077231, "answer_id": 44037992, "question_id": 44037831, "link": "https://stackoverflow.com/questions/44037831/trying-to-fill-a-rust-vector-with-objects-using-higher-order-function/44037992#44037992", "title": "Trying to fill a Rust vector with objects using higher order function", "body": "<p>Your immediate problem is: that isn't how <code>map</code> works <em>at all</em>.  Mapping involves taking a sequence and transforming each element in said sequence, producing a new sequence.  You <em>should not</em> be using it to just execute side effects for two reasons:</p>\n\n<ol>\n<li><p>No one is going to <em>expect</em> you to do that, so your code will be more confusing than it should be to anyone else reading it.</p></li>\n<li><p>Iterators in Rust are lazily computed, meaning that unless you consume the mapped iterator, nothing will happen.</p></li>\n</ol>\n\n<p>If you really want to do something 7 times, <em>just use a loop</em>.  That's what they're <code>for</code>.  If you really, <em>desperately</em> need to do something like this, the <a href=\"https://crates.io/crates/itertools\" rel=\"noreferrer\"><code>itertools</code></a> crate has a <code>foreach</code> method that does this whilst still communicating what's going on.</p>\n\n<p>As to how to actually construct the collection using higher order functions...</p>\n\n<pre><code>#[derive(Clone, Debug)]\npub struct Sim {\n    id: i32,\n}\n\nimpl Default for Sim {\n    fn default() -&gt; Sim {\n        Sim { id: 4 }\n    }\n}\n\nfn main() {\n    use std::iter;\n\n    let v1 = vec![Sim::default(); 7];\n    let v2: Vec&lt;_&gt; = iter::repeat(Sim::default()).take(7).collect();\n    let v3: Vec&lt;_&gt; = (0..7).map(|_| Sim::default()).collect();\n    let v4: Vec&lt;_&gt; = iter::once(Sim::default()).cycle().take(7).collect();\n}\n</code></pre>\n\n<p>There are probably more.  Note that <code>v1</code>, <code>v2</code>, and <code>v4</code> require the item type to be <code>Clone</code> so that it can make copies.</p>\n"}], "owner": {"reputation": 7076, "user_id": 1610428, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/e6gnk.jpg?s=128&g=1", "display_name": "krishnab", "link": "https://stackoverflow.com/users/1610428/krishnab"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1004, "favorite_count": 0, "accepted_answer_id": 44037992, "answer_count": 1, "score": 2, "last_activity_date": 1495077362, "creation_date": 1495076021, "last_edit_date": 1495077362, "question_id": 44037831, "link": "https://stackoverflow.com/questions/44037831/trying-to-fill-a-rust-vector-with-objects-using-higher-order-function", "title": "Trying to fill a Rust vector with objects using higher order function", "body": "<p>I can create a Rust vector and fill it with struct instances using a loop, but I was wondering if I could get the same result using one of the higher order functions like <code>map</code> or such. </p>\n\n<p>Here is some code that works:</p>\n\n<pre><code>#[derive(Debug)]\npub struct sim {\n    id: i32,\n}\n\nimpl Default for sim {\n    fn default() -&gt; sim {\n        sim { id: 4 }\n    }\n}\n\nfn main() {\n    let mut v2 = Vec::&lt;sim&gt;::new();\n    for i in 0..7 {\n        v2.push(sim::default())\n    }\n    println!(\"{:?}\", v2);\n}\n</code></pre>\n\n<p>I tried the code below, but it did not work. </p>\n\n<pre><code>let mut v3 = Vec::&lt;sim&gt;::new();\n(0..7).map(|| v3.push(sim::default()));\n</code></pre>\n"}]