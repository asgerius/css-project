[{"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1471477315, "last_edit_date": 1495535319, "creation_date": 1471473607, "answer_id": 39007323, "question_id": 39006806, "link": "https://stackoverflow.com/questions/39006806/how-does-a-reprc-type-handle-option/39007323#39007323", "title": "How does a repr(C) type handle Option?", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/ffi.html#the-nullable-pointer-optimization\" rel=\"nofollow noreferrer\">The Rust Programming Language chapter on FFI</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Certain types are defined to not be null. This includes references (<code>&amp;T</code>, <code>&amp;mut T</code>), boxes (<code>Box&lt;T&gt;</code>), and function pointers (<code>extern \"abi\" fn()</code>). When interfacing with C, pointers that might be null are often used. As a special case, a generic enum that contains exactly two variants, one of which contains no data and the other containing a single field, is eligible for the \"nullable pointer optimization\". When such an enum is instantiated with one of the non-nullable types, it is represented as a single pointer, and the non-data variant is represented as the null pointer. <strong>So <code>Option&lt;extern \"C\" fn(c_int) -&gt; c_int&gt;</code> is how one represents a nullable function pointer using the C ABI.</strong></p>\n</blockquote>\n\n<p>Said another way:</p>\n\n<blockquote>\n  <p>Obviously that Rust enum and C pointer are not the same thing on the bit level</p>\n</blockquote>\n\n<p>They actually are, when the <code>Option</code> contains a specific set of types. </p>\n\n<hr>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30414068/155423\">Can I use the &quot;null pointer optimization&quot; for my own non-pointer types?</a></li>\n<li><a href=\"https://stackoverflow.com/q/16504643/155423\">What is the overhead of Rust&#39;s Option type?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31481102/155423\">How to check if function pointer passed from C is non-NULL</a></li>\n</ul>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 991, "favorite_count": 0, "accepted_answer_id": 39007323, "answer_count": 1, "score": 2, "last_activity_date": 1471477315, "creation_date": 1471470637, "last_edit_date": 1471473663, "question_id": 39006806, "link": "https://stackoverflow.com/questions/39006806/how-does-a-reprc-type-handle-option", "title": "How does a repr(C) type handle Option?", "body": "<p>I have this C code:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>typedef void (*f_t)(int a);\n\nstruct Foo {\n        f_t f;\n};\n\nextern void f(struct Foo *);\n</code></pre>\n\n<p><a href=\"https://github.com/Yamakaky/rust-bindgen\" rel=\"nofollow\">bindgen</a> generates the following Rust code (I have removed unimportant details):</p>\n\n<pre><code>#[repr(C)]\n#[derive(Copy, Clone)]\n#[derive(Debug)]\npub struct Foo {\n    pub f: ::std::option::Option&lt;extern \"C\" fn(a: ::std::os::raw::c_int)&gt;,\n}\n</code></pre>\n\n<p>I do not understand why <code>Option</code> is here. Obviously that Rust <code>enum</code> and C pointer are not the same thing on the bit level, so how does the Rust compiler handle this?</p>\n\n<p>When I call the C <code>f</code> function and pass a pointer to a Rust struct <code>Foo</code>, does the compiler convert <code>Foo_rust</code> to <code>Foo_C</code> and then only pass a pointer to <code>Foo_C</code> to <code>f</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471473369, "post_id": 39006564, "comment_id": 65366290, "body": "These are called <a href=\"https://en.wikipedia.org/wiki/Variadic_function\" rel=\"nofollow noreferrer\"><i>variadic functions</i></a>."}], "answers": [{"tags": [], "owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "is_accepted": true, "score": 5, "last_activity_date": 1471470023, "creation_date": 1471470023, "answer_id": 39006704, "question_id": 39006564, "link": "https://stackoverflow.com/questions/39006564/how-does-rust-handle-functions-with-at-the-end-of-args/39006704#39006704", "title": "How does Rust handle functions with &quot;...&quot; at the end of args?", "body": "<ol>\n<li>It means approximately the same as it does in C. Rust does not have native variadic functions (you cannot implement one in Rust itself), but it supports the syntax as a special case for binding to C functions.</li>\n<li>Rust does not know what the real signature of the C function is. So you can declare it as whatever you want, but if you get it wrong then calling the function will likely crash at runtime.</li>\n<li>It's an unintentional omission, these function pointers are supposed to magically be <code>Clone</code>. On nightly and beta this is already fixed.</li>\n</ol>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 179, "favorite_count": 0, "accepted_answer_id": 39006704, "answer_count": 1, "score": 3, "last_activity_date": 1471473339, "creation_date": 1471469291, "last_edit_date": 1471473339, "question_id": 39006564, "link": "https://stackoverflow.com/questions/39006564/how-does-rust-handle-functions-with-at-the-end-of-args", "title": "How does Rust handle functions with &quot;...&quot; at the end of args?", "body": "<p>I have this code:</p>\n\n<pre><code>pub type f_t =\n    ::std::option::Option&lt;extern \"C\" fn(a: ::std::os::raw::c_int, ...)&gt;;\n\n#[repr(C)]\n#[derive(Copy, Clone)]\n#[derive(Debug)]\npub struct Foo {\n    pub f: f_t,\n}\n\nfn main() {\n}\n</code></pre>\n\n<p>It does not compile because there is no default <code>Clone</code> implementation for functions with \"...\" at the end of args.</p>\n\n<ol>\n<li><p>How does Rust handle this \"...\" at the end of line, does it do the same thing as \"...\" in C?</p></li>\n<li><p>Rust can not compile this code, but if I comment <code>, ...</code>, it compiles fine. What is the difference, why does one class of function pointers implement <code>Clone</code> while the other does not?</p></li>\n<li><p>How should I implement <code>Clone</code> for such functions?</p></li>\n</ol>\n"}, {"tags": ["rust", "llvm-ir", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "is_accepted": false, "score": 4, "last_activity_date": 1471485041, "last_edit_date": 1471485041, "creation_date": 1471461108, "answer_id": 39004514, "question_id": 39004513, "link": "https://stackoverflow.com/questions/39004513/how-to-emit-llvm-ir-from-cargo/39004514#39004514", "title": "How to emit LLVM-IR from Cargo", "body": "<p>EDIT: You should use Jacob's answer instead; a lot easier and less hacky.</p>\n\n<p>Build the project with cargo normally but add on the <code>-v</code> flag to show verbose output.  The command will have a result like this:</p>\n\n<pre><code>casey@casey-ubuntu:~/Documents/project$ cargo build -v\n   Fresh aster v0.22.1\n   Fresh num-traits v0.1.34\n   Fresh itoa v0.1.1\n   ...\nCompiling project v0.1.0 (file:///home/casey/Documents/project)\n Running `rustc src/main.rs --crate-name ...`\nFinished debug [unoptimized + debuginfo] target(s) in 3.54 secs\n</code></pre>\n\n<p>If the command produces no output, make a change somewhere in your project code to trick the compiler into rebuilding it, since it will only rebuild if it detects a change in one of the files.</p>\n\n<p>Copy the <code>rustc</code> command from inside the ` markers on the line starting with \"Running `rustc...\" and append <code>--emit=llvm-ir</code> to it.</p>\n\n<p>This will produce a .ll file in your /target/debug folder.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471474069, "post_id": 39005444, "comment_id": 65366507, "body": "This is what <a href=\"https://github.com/integer32llc/rust-playground/blob/374c47f24b581f062bfec1de7e5e2dba1c23e9ad/ui/src/sandbox.rs#L234\" rel=\"nofollow noreferrer\">the alternate playground uses</a>."}], "tags": [], "owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "is_accepted": true, "score": 32, "last_activity_date": 1471536227, "last_edit_date": 1471536227, "creation_date": 1471464684, "answer_id": 39005444, "question_id": 39004513, "link": "https://stackoverflow.com/questions/39004513/how-to-emit-llvm-ir-from-cargo/39005444#39005444", "title": "How to emit LLVM-IR from Cargo", "body": "<p>There is <code>cargo rustc</code> to pass arbitrary compiler flags through Cargo to <code>rustc</code>. So I think:</p>\n\n<pre><code>cargo rustc -- --emit=llvm-ir\n</code></pre>\n\n<p>is what you want!</p>\n"}], "owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6892, "favorite_count": 2, "accepted_answer_id": 39005444, "answer_count": 2, "score": 16, "last_activity_date": 1472544467, "creation_date": 1471461108, "last_edit_date": 1472544467, "question_id": 39004513, "link": "https://stackoverflow.com/questions/39004513/how-to-emit-llvm-ir-from-cargo", "title": "How to emit LLVM-IR from Cargo", "body": "<p>How can I get cargo to emit LLVM-IR instead of a binary for my project?  I know that you can use the <code>--emit=llvm-ir</code> flag in <code>rustc</code>, but I've read some Github issues that show it's impossible to pass arbitrary compiler flags to cargo.  </p>\n\n<p>Is there any way I can get cargo to emit LLVM-IR directly?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 6226609, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/oqpTA.png?s=128&g=1", "display_name": "pithonsmear", "link": "https://stackoverflow.com/users/6226609/pithonsmear"}, "edited": false, "score": 1, "creation_date": 1471459981, "post_id": 39004183, "comment_id": 65360124, "body": "This fixed the problem, and taught me something about read_line. Top notch!"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 6, "last_activity_date": 1471459720, "creation_date": 1471459720, "answer_id": 39004183, "question_id": 39004011, "link": "https://stackoverflow.com/questions/39004011/trying-to-borrow-variable-binding-from-outside-of-loop/39004183#39004183", "title": "Trying to borrow variable binding from outside of loop", "body": "<p><code>read_line</code> <em>appends</em> to the string you're reading into, so if you input 1 and then 2, <code>grade</code> will contain <code>1\\n2</code> or something to that effect. This can't be parsed as an integer so the match below will always return 0. The solution is to empty the string before reading: <code>grade.clear();</code></p>\n"}], "owner": {"reputation": 115, "user_id": 6226609, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/oqpTA.png?s=128&g=1", "display_name": "pithonsmear", "link": "https://stackoverflow.com/users/6226609/pithonsmear"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 263, "favorite_count": 0, "accepted_answer_id": 39004183, "answer_count": 1, "score": 2, "last_activity_date": 1471473153, "creation_date": 1471459049, "last_edit_date": 1471473153, "question_id": 39004011, "link": "https://stackoverflow.com/questions/39004011/trying-to-borrow-variable-binding-from-outside-of-loop", "title": "Trying to borrow variable binding from outside of loop", "body": "<p>I'm rewriting an average calculator from my Java textbook in Rust. It uses a loop to ask for several inputs, but I think I've run into an issue with ownership (as there's a <code>let grade</code> inside the loop), so I'm trying to get a better understanding.</p>\n\n<p>When I declare <code>grade</code> outside the loop, only the first input value is recorded: every subsequent <code>grade</code> value becomes 0, regardless of input. If I declare <code>grade</code> inside the loop, every input value is recorded properly. </p>\n\n<p>Is there a way to use borrowing that will let me declare <code>grade</code> outside the loop, and still have this little program work? </p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut total: u32 = 0;\n    let mut count: u32 = 0;\n    let mut grade = String::new(); //This one\n\n    while count &lt; 5 {\n        println!(\"Enter number:\");\n\n        io::stdin().read_line(&amp;mut grade)\n            .expect(\"failed.\");\n\n        let grade: u32 = match grade.trim().parse() {\n            Ok(num) =&gt; num,\n            Err(_) =&gt; 0,\n        };\n\n        total = total + grade;\n        count = count + 1;\n    }\n    println!(\"Tot: {}\\nAvg: {}\", total, total as f64/count as f64);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1558270630, "last_edit_date": 1558270630, "creation_date": 1471454369, "answer_id": 39002757, "question_id": 39002508, "link": "https://stackoverflow.com/questions/39002508/cannot-borrow-captured-outer-variable-in-an-fn-closure-when-using-a-closure-with/39002757#39002757", "title": "Cannot borrow captured outer variable in an Fn closure when using a closure with an Rc", "body": "<p>The entire error message is <em>mostly</em> helpful:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `v2` as mutable, as it is a captured variable in a `Fn` closure\n  --&gt; src/main.rs:17:19\n   |\n17 |      *Rc::get_mut(&amp;mut v2).unwrap() = tmp + 1;\n   |                   ^^^^^^^ cannot borrow as mutable\n   |\nhelp: consider changing this to accept closures that implement `FnMut`\n  --&gt; src/main.rs:15:17\n   |\n15 |       f1(Box::new(move |x: i32| {\n   |  _________________^\n16 | |      let tmp = *v2;\n17 | |      *Rc::get_mut(&amp;mut v2).unwrap() = tmp + 1;\n18 | |      x + *v2\n19 | |     }));\n   | |_____^\n</code></pre>\n\n<p>Changing <code>f1</code> to accept a <code>FnMut</code> and making the variable mutable allows the code to compile:</p>\n\n<pre><code>fn f1(mut cb: Box&lt;FnMut(i32) -&gt; i32&gt;) {\n</code></pre>\n\n<p>This is needed in order to mutate the captured variable <code>v2</code>, required by the <code>&amp;mut v2</code> argument to <code>Rc::get_mut</code>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2141, "favorite_count": 0, "accepted_answer_id": 39002757, "answer_count": 1, "score": 4, "last_activity_date": 1558270630, "creation_date": 1471453545, "last_edit_date": 1558270450, "question_id": 39002508, "link": "https://stackoverflow.com/questions/39002508/cannot-borrow-captured-outer-variable-in-an-fn-closure-when-using-a-closure-with", "title": "Cannot borrow captured outer variable in an Fn closure when using a closure with an Rc", "body": "<pre><code>use std::rc::Rc;\n\nfn f1(cb: Box&lt;Fn(i32) -&gt; i32&gt;) {\n    let res = cb(15);\n    println!(\"res {}\", res);\n}\n\nfn main() {\n    let mut v2 = Rc::new(5_i32);\n\n    // 1\n    // f1(Box::new(move |x: i32| *v2 + x));\n\n    // 2\n    f1(Box::new(move |x: i32| {\n        let tmp = *v2;\n        *Rc::get_mut(&amp;mut v2).unwrap() = tmp + 1;\n        x + *v2\n    }));\n}\n</code></pre>\n\n<p>The code referenced as \"1\", if uncommented, compiles and runs just fine, but the code referenced as \"2\" does not compile, failing with the message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `v2` as mutable, as it is a captured variable in a `Fn` closure\n</code></pre>\n\n<p>How can I fix this, if I want keep the code structure as it is?</p>\n\n<p>In my real code, I want connect two traits. One of them will call a callback on event, and the other has a function to handle the callback:</p>\n\n<pre><code>trait Foo {\n    fn add_callback(&amp;mut self, cb: Box&lt;Fn(i32)&gt;);\n}\n\ntrait Boo {\n    fn on_new_data(&amp;mut self, data: i32);\n}\n</code></pre>\n\n<p>I want to create a trait object with <code>Boo</code>, wrap it with <code>Rc</code>, and pass it to <code>Foo::add_callback</code> in the form of <code>|x:i32| Rc::get_mut(&amp;mut boo).unwrap().on_new_data(x)</code></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 240, "user_id": 6727289, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/012f7d3213d984a1f182f7ff44c49cad?s=128&d=identicon&r=PG&f=1", "display_name": "rpiper", "link": "https://stackoverflow.com/users/6727289/rpiper"}, "edited": false, "score": 0, "creation_date": 1471452240, "post_id": 39002047, "comment_id": 65355893, "body": "If you don&#39;t mind me asking is there any way sugar coat that syntax or is just the way it is for custom errors?"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "reply_to_user": {"reputation": 240, "user_id": 6727289, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/012f7d3213d984a1f182f7ff44c49cad?s=128&d=identicon&r=PG&f=1", "display_name": "rpiper", "link": "https://stackoverflow.com/users/6727289/rpiper"}, "edited": false, "score": 0, "creation_date": 1471452988, "post_id": 39002047, "comment_id": 65356286, "body": "You may have already seen <a href=\"https://doc.rust-lang.org/book/error-handling.html#error-handling-with-a-custom-type\" rel=\"nofollow noreferrer\">this</a>, but that is a good read. What I generally like to do is create my own error type and implement the <code>Error</code> trait for it. Then I can use that in a <code>Result</code> or make a custom <code>Result</code> as well."}], "tags": [], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "is_accepted": true, "score": 2, "last_activity_date": 1471452009, "creation_date": 1471452009, "answer_id": 39002047, "question_id": 39001683, "link": "https://stackoverflow.com/questions/39001683/how-to-resolve-expected-found-result-when-returning-a-custom-result/39002047#39002047", "title": "How to resolve &quot;expected (), found Result&quot; when returning a custom result?", "body": "<p>Since your custom error type wraps the IO error type, you must set that in your <code>Err</code> result. And in order for the correct type to be returned you need an explicit return statement as well.</p>\n\n<p>This is what it should look like:</p>\n\n<pre><code>return Err(SubsetError::Io(Error::new(ErrorKind::Other, \"Not a subset\")));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1471469147, "post_id": 39003294, "comment_id": 65364715, "body": "Your answers always seem much more elegant :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1471473834, "post_id": 39003294, "comment_id": 65366443, "body": "@squiguy nah, my answers just include a lot of information based on reading lots of similar questions. It&#39;s my belief that there are only like 500 unique Rust questions and all the rest are just variations on a theme. I can draw a lot of inspiration from these almost-but-not-quite duplicates to fill in background information that people like to know. There&#39;s almost always room for multiple styles of answer!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1501176945, "last_edit_date": 1501176945, "creation_date": 1471456378, "answer_id": 39003294, "question_id": 39001683, "link": "https://stackoverflow.com/questions/39001683/how-to-resolve-expected-found-result-when-returning-a-custom-result/39003294#39003294", "title": "How to resolve &quot;expected (), found Result&quot; when returning a custom result?", "body": "<p>Note that the error message is because you aren't <strong>returning</strong> the <code>Err</code> from the function. You simply create it and it becomes the value of the <code>if</code> block. Because there is no <code>else</code> block, the type of the <code>else</code> block is <code>()</code>, so the value of the <code>if</code> expression is indeterminate: is it <code>()</code> or a <code>Result</code>?</p>\n\n<p>You could either <code>return</code> the <code>Err</code> or provide an <code>else</code> block:</p>\n\n<pre><code>if concatedsets.len() != self.dataset.len() {\n    Err(Error::new(ErrorKind::Other, \"Not a subset\"))\n} else {\n    Ok(true)\n}\n</code></pre>\n\n<p>That unlocks another error, which is that you aren't returning the type you say you are. An <code>Error</code> is <strong>not</strong> a <code>SubsetError</code>. Because you've implemented <code>From</code> for that error type, you can use <code>try!</code> or <code>?</code> to convert between types:</p>\n\n<pre><code>Err(Error::new(ErrorKind::Other, \"Not a subset\"))?\n</code></pre>\n\n<p>You can also explicitly wrap the type, as <a href=\"https://stackoverflow.com/a/39002047/155423\">shown in squiguy's answer</a>.</p>\n"}], "owner": {"reputation": 240, "user_id": 6727289, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/012f7d3213d984a1f182f7ff44c49cad?s=128&d=identicon&r=PG&f=1", "display_name": "rpiper", "link": "https://stackoverflow.com/users/6727289/rpiper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5587, "favorite_count": 1, "accepted_answer_id": 39002047, "answer_count": 2, "score": 9, "last_activity_date": 1501176945, "creation_date": 1471450686, "last_edit_date": 1501176877, "question_id": 39001683, "link": "https://stackoverflow.com/questions/39001683/how-to-resolve-expected-found-result-when-returning-a-custom-result", "title": "How to resolve &quot;expected (), found Result&quot; when returning a custom result?", "body": "<p>I am creating a custom <code>Result</code> such that the the <code>Ok</code> value is generic, but I get the following error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:38:13\n   |\n38 |             Err(Error::new(ErrorKind::Other, \"Not a subset\"))\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n   |\n   = note: expected type `()`\n              found type `std::result::Result&lt;_, std::io::Error&gt;`\n</code></pre>\n\n<p>With this code:</p>\n\n<pre><code>use std::io;\nuse std::io::{Error, ErrorKind};\n\npub type SubsetResult&lt;T&gt; = Result&lt;T, SubsetError&gt;;\n\n#[derive(Debug)]\npub enum SubsetError {\n    Io(io::Error),\n}\n\nimpl From&lt;io::Error&gt; for SubsetError {\n    fn from(err: io::Error) -&gt; SubsetError {\n        SubsetError::Io(err)\n    }\n}\n\ntrait Subset {\n    type T;\n    fn is_subset(&amp;self, &amp;[i32]) -&gt; SubsetResult&lt;Self::T&gt;;\n}\n\n#[derive(Debug)]\nstruct Set {\n    dataset: Vec&lt;i32&gt;,\n}\n\nimpl Subset for Set {\n    type T = bool;\n\n    // self is the superset\n    fn is_subset(&amp;self, subset: &amp;[i32]) -&gt; SubsetResult&lt;Self::T&gt; {\n        let mut concatedsets = Vec::new();\n        concatedsets.extend_from_slice(self.dataset.as_slice());\n        concatedsets.extend_from_slice(subset);\n        concatedsets.sort();\n        concatedsets.dedup();\n        if concatedsets.len() != self.dataset.len() {\n            Err(Error::new(ErrorKind::Other, \"Not a subset\"))\n        }\n        Ok(true)\n    }\n}\n\n\nfn main() {\n    let superset = Set { dataset: vec![1, 2, 3, 4, 5] };\n    let subset = vec![1, 2, 4];\n    let result = superset.is_subset(subset.as_slice()).unwrap();\n    println!(\"{}\", result);\n\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=88d6c49a6fb15982312a1c1b5867da29&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n"}, {"tags": ["hashmap", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471444480, "post_id": 38999422, "comment_id": 65350868, "body": "Gonna be a duplicate of <a href=\"http://stackoverflow.com/q/30681468/155423\">stackoverflow.com/q/30681468/155423</a> or similar. You can&#39;t pass <code>self</code> because it&#39;s in the process of being changed. If <code>entry</code> handed you a reference to the <code>HashMap</code>, then maybe you could perform further lookups."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471447648, "post_id": 38999422, "comment_id": 65353139, "body": "@Shepmaster: I would say it is slightly different, because of the use of the reference inside the lambda. The order of execution here is fine: during the execution of the lambda the hash-map is frozen."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1471447713, "post_id": 38999422, "comment_id": 65353182, "body": "Is borrowing <code>&amp;Thing</code> necessary, or is &quot;extracting&quot; whatever you need for later computation (here <code>.len()</code>) out of <code>&amp;Thing</code> possible prior? You would avoid the borrowing then, and therefore could you use <code>or_insert_with</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1471447839, "post_id": 38999422, "comment_id": 65353248, "body": "@MatthieuM. yeah, they are slightly different which is why I didn&#39;t use the dupehammer. However, while the <code>HashMap</code> is frozen, it is also in an <i>unknown state</i> when the closure is executed \u2014 it may not even be possible to perform a lookup in the map at that point! And your second comment is why I linked to that pseudo-duplicate, specifically <a href=\"http://stackoverflow.com/a/38944523/155423\">the second answer</a>. Split out the important bits and pass them down. May not be feasible though..."}, {"owner": {"reputation": 39806, "user_id": 3712, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/FPqBT.jpg?s=128&g=1", "display_name": "Barry Kelly", "link": "https://stackoverflow.com/users/3712/barry-kelly"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1471459159, "post_id": 38999422, "comment_id": 65359687, "body": "It&#39;s not really like <a href=\"http://stackoverflow.com/q/30681468/155423\">stackoverflow.com/q/30681468/155423</a> because I don&#39;t need a mutable cycle. I don&#39;t need a mutable reference to <code>self</code> while deciding what to do in the case of not found. It only needs to be grabbed mutably after I&#39;ve constructed my value after not finding it. It&#39;s quite upsetting not to be able to use either the closure or pattern matching here. @MatthieuM. extracting is a no-go without introducing another layer of indirection - the real case is building an index for potentially multi-gigabyte in-memory data on demand. An extra indirection feels really clunky."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1471462725, "post_id": 38999422, "comment_id": 65361510, "body": "I understand how you feel, certainly, however even if I was designing the API of hash map from scratch your use case is quite &quot;nasty&quot; for borrowing. There is no way to upgrade a <code>&amp;T</code> into a <code>&amp;mut T</code> (obviously), so your requirement of using <code>&amp;Thing</code> after the failed look-up but before the insertion requires to &quot;pause&quot; the borrowing... if designing from scratch I could think about a &quot;get&quot; returning a &quot;hint&quot; that could later be re-submitted on <code>insert</code>... but it&#39;s quite weird really :x So I think that the double look-up is actually the best solution here; hopefully it&#39;ll be rare."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1532695066, "post_id": 38999422, "comment_id": 90082974, "body": "@BarryKelly I mean no offense. If you review the revision messages, you see what I changed and why: &quot;standard Rust indentation and style; update error messages&quot;. Every time a question gets brought back up to the top of the active list or marked as a duplicate, I try to review it for correctness and modern Rust style. I update error messages so that people who find the question can quickly identify if it matches their problem. If I don&#39;t do this, I find the quality of a question or answer to be lacking."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1532695204, "post_id": 38999422, "comment_id": 90083072, "body": "I do this for almost <i>every</i> question and answer tagged <a href=\"https://stackoverflow.com/questions/tagged/rust\">rust</a> in the hopes of making them the most useful they can be. Q&amp;A on Stack Overflow are <i>meant</i> to be edited towards this purpose and I don&#39;t expect people who asked the question to spend time performing this maintenance. I frankly am unable to see how anyone could see this janitorial work as a negative thing, much less as a direct attack on them personally."}], "answers": [{"comments": [{"owner": {"reputation": 39806, "user_id": 3712, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/FPqBT.jpg?s=128&g=1", "display_name": "Barry Kelly", "link": "https://stackoverflow.com/users/3712/barry-kelly"}, "edited": false, "score": 0, "creation_date": 1471575731, "post_id": 39018750, "comment_id": 65411249, "body": "Here&#39;s a wrinkle: <code>ContainedThing::create</code> may call <code>Thing::get</code> itself; think recursive construction from memoized simpler base cases, like dynamic programming from the top down. The necessity of using the API of <code>Thing</code> during the construction of <code>ContainedThing</code> - recursively in particular - is what leads me to conclude that the manual check will have to stay. (And yes, this wrinkle makes it into a problem with a potential cycle. I&#39;ve simply thought a bit further down the road after solving this idiom problem. :) Have an upvote for the destructure though."}], "tags": [], "owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "is_accepted": true, "score": 4, "last_activity_date": 1532619501, "last_edit_date": 1532619501, "creation_date": 1471524669, "answer_id": 39018750, "question_id": 38999422, "link": "https://stackoverflow.com/questions/38999422/how-to-lazily-create-map-entry-whose-construction-uses-self-in-rust/39018750#39018750", "title": "How to lazily create map entry whose construction uses self in Rust", "body": "<p>The answer is that it depends on specifically which state you need access to in the <code>or_insert_with</code> closure. The problem is that <code>or_insert_with</code> definitely cannot have access to the map itself because the entry api takes a mutable borrow of the map. </p>\n\n<p>If all you need for <code>ContainedThing::create</code> is just the size of the map, then you'll just need to calculate the map size ahead of time.</p>\n\n<pre><code>impl Thing {\n    pub fn get(&amp;mut self, key: i32) -&gt; &amp;ContainedThing {\n        let map_size = self.map.len();\n        self.map.entry(&amp;key).or_insert_with(|| {\n            // The call to entry takes a mutable reference to the map,\n            // so you cannot borrow map again in here\n            ContainedThing::create(map_size)\n        })\n    }\n}\n</code></pre>\n\n<p>I think the spirit of the question was more about general strategies, though, so let's assume there's some other state within <code>Thing</code> that is also required to create <code>ContainedThing</code>. </p>\n\n<pre><code>struct Thing {\n    map: HashMap&lt;i32, ContainedThing&gt;,\n    some_other_stuff: AnotherType, //assume that this other state is also required in order to create ContainedThing\n}\n\nimpl Thing {\n    pub fn get(&amp;mut self, key: i32) -&gt; &amp;ContainedThing {\n        //this is the borrow of self\n        let Thing {\n            ref mut map,\n            ref mut some_other_stuff,\n        } = *self;\n\n        let map_size = map.len();\n        map.entry(key).or_insert_with(|| {\n            // map.entry now only borrows map instead of self\n            // Here you're free to borrow any other members of Thing apart from map\n            ContainedThing::create(map_size, some_other_stuff)\n        })\n    }\n}\n</code></pre>\n\n<p>Whether that's really cleaner than your other solution of manually checking <code>if self.map.contains_key(&amp;key)</code> is up for debate. Destructuring tends to be the strategy that I go for, though, to allow borrowing specific members of <code>self</code> instead of the entire struct.</p>\n"}, {"tags": [], "owner": {"reputation": 39806, "user_id": 3712, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/FPqBT.jpg?s=128&g=1", "display_name": "Barry Kelly", "link": "https://stackoverflow.com/users/3712/barry-kelly"}, "is_accepted": false, "score": 1, "last_activity_date": 1471576033, "creation_date": 1471576033, "answer_id": 39030508, "question_id": 38999422, "link": "https://stackoverflow.com/questions/38999422/how-to-lazily-create-map-entry-whose-construction-uses-self-in-rust/39030508#39030508", "title": "How to lazily create map entry whose construction uses self in Rust", "body": "<p>So, the primary motivation for me wanting to pass <code>Thing</code> as an argument to <code>ContainedThing::create</code> was to use <code>Thing</code>'s API to help in the construction. However, it turns out that I'll want it to be borrowed mutably, because I need recursive memoized construction here, and that makes it a cycle problem.</p>\n\n<p>So, it looks like my separated check + insert logic is here to stay.</p>\n"}], "owner": {"reputation": 39806, "user_id": 3712, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/FPqBT.jpg?s=128&g=1", "display_name": "Barry Kelly", "link": "https://stackoverflow.com/users/3712/barry-kelly"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 318, "favorite_count": 2, "accepted_answer_id": 39018750, "answer_count": 2, "score": 5, "last_activity_date": 1532697517, "creation_date": 1471444008, "last_edit_date": 1532697517, "question_id": 38999422, "link": "https://stackoverflow.com/questions/38999422/how-to-lazily-create-map-entry-whose-construction-uses-self-in-rust", "title": "How to lazily create map entry whose construction uses self in Rust", "body": "<p>I'm trying to implement a lazy-construction / memoized evaluation / caching idiom in Rust.</p>\n\n<p>There's an outer type which has a bunch of data and an accessor method. The accessor method needs to either return a cached calculation (if it has one) or calculate it and store the return value in a map for later use. The cached value doesn't need to reference the outer value so there's no circular reference problem; but it does need access to the outer value's data in order to construct itself.</p>\n\n<p>Here's a full example which doesn't pass Rust's borrow checker:</p>\n\n<pre><code>use std::collections::HashMap;\n\npub struct ContainedThing {\n    count: usize,\n}\n\nimpl ContainedThing {\n    fn create(thing: &amp;Thing) -&gt; ContainedThing {\n        // create uses an arbitrary number of attributes from Thing\n        // it doesn't keep any references after returning though\n        let count = thing.map.len();\n        ContainedThing { count: count }\n    }\n}\n\nstruct Thing {\n    map: HashMap&lt;i32, ContainedThing&gt;,\n}\n\nimpl Thing {\n    pub fn get(&amp;mut self, key: i32) -&gt; &amp;ContainedThing {\n        self.map\n            .entry(key)\n            .or_insert_with(|| ContainedThing::create(&amp;self))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>The specific error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `self` as immutable because `self.map` is also borrowed as mutable\n  --&gt; src/main.rs:24:29\n   |\n22 |         self.map\n   |         -------- mutable borrow occurs here\n23 |             .entry(key)\n24 |             .or_insert_with(|| ContainedThing::create(&amp;self))\n   |                             ^^                         ---- borrow occurs due to use of `self` in closure\n   |                             |\n   |                             immutable borrow occurs here\n25 |     }\n   |     - mutable borrow ends here\n</code></pre>\n\n<p>I'm having a really hard time figuring out a good way to implement this idiom. I tried pattern matching the return value of <code>get()</code> instead of the <code>entry()</code> API, but still fell foul of the borrow checker: the <code>match</code> expression also ends up borrowing <code>self</code>.</p>\n\n<p>I can rewrite <code>get</code> like this:</p>\n\n<pre><code>pub fn get(&amp;mut self, key: i32) -&gt; &amp;ContainedThing {\n    if !self.map.contains_key(&amp;key) {\n        let thing = ContainedThing::create(&amp;self);\n        self.map.insert(key, thing);\n    }\n    self.map.get(&amp;key).unwrap()\n}\n</code></pre>\n\n<p>but this is pretty ugly (look at that <code>unwrap</code>) and seems to require more lookups and copies than ought to be necessary. Ideally, I would like</p>\n\n<ol>\n<li>to only pay the cost of finding the hash entry once. <code>entry()</code>, done right, ought to track the insertion location when not found.</li>\n<li>reduce the number of copies of the freshly constructed value. This may be infeasible, ideally I'd have an in-place construction. </li>\n<li>to avoid using <code>unwrap</code>; without a pointless pattern match, that is.</li>\n</ol>\n\n<p>Is my clumsy code the best that can be achieved?</p>\n"}, {"tags": ["testing", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 4, "creation_date": 1538326763, "post_id": 39009227, "comment_id": 92095370, "body": "How to write the integration tests (the tests inside to <code>tests</code> directory) for an <i>executable</i> (not <i>lib</i>)? <code>extern crate &lt;executable&gt;</code> does not work then."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 4, "creation_date": 1538927810, "post_id": 39009227, "comment_id": 92307403, "body": "@Nawaz if you are performing <i>integration</i> tests of an executable, you drive it as the user would: by running the built command via something like <code>std::process::Command</code>. Otherwise you are talking about unit tests."}, {"owner": {"reputation": 730, "user_id": 3283003, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/969f644f75512332a20f0ea1ff6e64d0?s=128&d=identicon&r=PG&f=1", "display_name": "Squirrel", "link": "https://stackoverflow.com/users/3283003/squirrel"}, "edited": false, "score": 0, "creation_date": 1589959560, "post_id": 39009227, "comment_id": 109495881, "body": "Using a debugger with an integration test testing a bin by spawning a separate process is a suboptimal developer experience. :-("}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 45, "last_activity_date": 1582745897, "last_edit_date": 1582745897, "creation_date": 1471488531, "answer_id": 39009227, "question_id": 38995892, "link": "https://stackoverflow.com/questions/38995892/how-to-move-tests-into-a-separate-file-for-binaries-in-rusts-cargo/39009227#39009227", "title": "How to move tests into a separate file for binaries in Rust&#39;s Cargo?", "body": "<p><a href=\"https://doc.rust-lang.org/book/\" rel=\"noreferrer\"><em>The Rust Programming Language</em></a> is a great resource for people learning about Rust. It covers many basic topics and many people have spent a lot of time working on it to improve it. Everyone interested in Rust should read it thoroughly.</p>\n\n<p>It has an <a href=\"https://doc.rust-lang.org/book/ch11-00-testing.html\" rel=\"noreferrer\">entire chapter dedicated to testing</a> which you should read to gain a baseline understanding.</p>\n\n<hr>\n\n<p>It's common to put unit tests (tests that are more allowed to access internals of your code) into a <code>test</code> module in each specific file:</p>\n\n<pre><code>fn function_from_main() {\n    println!(\"Test OK\");\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn my_test() {\n        function_from_main();\n    }\n}\n</code></pre>\n\n<p>Modules can be moved to new files, although this is uncommon for the unit test module:</p>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>fn function_from_main() {\n    println!(\"Test OK\");\n}\n\n#[cfg(test)]\nmod test;\n</code></pre>\n\n<p><strong>test.rs</strong></p>\n\n<pre><code>use super::*;\n\n#[test]\nfn my_test() {\n    function_from_main();\n}\n</code></pre>\n\n<p>See <a href=\"https://doc.rust-lang.org/book/ch07-05-separating-modules-into-different-files.html\" rel=\"noreferrer\">Separating Modules into Different Files</a> for detailed information on how files and modules map to each other.</p>\n\n<hr>\n\n<p>The more common case for tests in a separate file are integration tests. These are also covered in the book by a <a href=\"https://doc.rust-lang.org/book/ch11-03-test-organization.html#integration-tests\" rel=\"noreferrer\">section devoted to tests outside of the crate</a>. These types of tests are well-suited for exercising the code <strong>as a consumer of your code would</strong>.</p>\n\n<p>That section of the documentation includes an introductory example and descriptive text:</p>\n\n<blockquote>\n  <p>We create a <em>tests</em> directory at the top level of our project directory,\n  next to <em>src</em>. Cargo knows to look for integration test files in this\n  directory. We can then make as many test files as we want to in this\n  directory, and Cargo will compile each of the files as an individual\n  crate.</p>\n  \n  <p>Let\u2019s create an integration test. With the code in Listing 11-12 still\n  in the <em>src/lib.rs</em> file, make a <em>tests</em> directory, create a new file\n  named <em>tests/integration_test.rs</em>, and enter the code in Listing 11-13:</p>\n  \n  <p>Filename: tests/integration_test.rs</p>\n\n<pre><code>use adder;\n\n#[test]\nfn it_adds_two() {\n    assert_eq!(4, adder::add_two(2));\n}\n</code></pre>\n  \n  <p><strong>Listing 11-13: An integration test of a function in the adder crate</strong></p>\n  \n  <p>We\u2019ve added <code>use adder</code> at the top of the code, which we didn\u2019t need in\n  the unit tests. The reason is that each test in the tests directory is\n  a separate crate, so we need to bring our library into each test\n  crate\u2019s scope.</p>\n</blockquote>\n\n<p>Note that the function is called as <code>adder::add_two</code>. Further details about Rust's module system can be found in the <a href=\"https://doc.rust-lang.org/book/ch07-00-packages-crates-and-modules.html\" rel=\"noreferrer\">Packages, Crates, and Modules chapter</a>.</p>\n\n<p>Since these tests exercise your crate as a user would, if you want to test a <em>binary</em>, you should be <strong>executing the binary</strong>. Crates like <a href=\"https://crates.io/crates/assert_cmd\" rel=\"noreferrer\">assert_cmd</a> can help reduce the pain of this type of test.</p>\n\n<p>In other cases, you should break your large binary into a large library and a small binary. You can then write integration tests for the public API of your library.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/26946646/155423\">Rust package with both a library and a binary?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 22921, "user_id": 229753, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/f443a82ac96270394a6965323142601b?s=128&d=identicon&r=PG", "display_name": "Tobu", "link": "https://stackoverflow.com/users/229753/tobu"}, "is_accepted": false, "score": 3, "last_activity_date": 1500317733, "creation_date": 1500317733, "answer_id": 45151641, "question_id": 38995892, "link": "https://stackoverflow.com/questions/38995892/how-to-move-tests-into-a-separate-file-for-binaries-in-rusts-cargo/45151641#45151641", "title": "How to move tests into a separate file for binaries in Rust&#39;s Cargo?", "body": "<p>You're right; <code>function_from_main</code> is inaccessible outside of <code>main.rs</code>.</p>\n\n<p>You need to create an <code>src/lib.rs</code> and move the functions you want to test piecemeal.  Then you'll be able to use <code>extern crate my_binary;</code> from your test module, and have your functions appear under the <code>my_binary</code> namespace.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1561475604, "post_id": 56735434, "comment_id": 100071954, "body": "Why do you want to go out of your way to put files in non-idiomatic locations? Place it as <code>foo.rs</code> and <code>foo&#47;tests.rs</code>, just like every other module."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1561478719, "post_id": 56735434, "comment_id": 100073622, "body": "No irritation here as I don&#39;t have to work on your code! I just find the going to be much smoother if I follow the idioms of the language, not trying to carry along all of the baggage from each previous language."}], "tags": [], "owner": {"reputation": 535, "user_id": 1409625, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5eddce6dc824dc9d4fee793692422b85?s=128&d=identicon&r=PG", "display_name": "mmai", "link": "https://stackoverflow.com/users/1409625/mmai"}, "is_accepted": false, "score": 7, "last_activity_date": 1561478887, "last_edit_date": 1561478887, "creation_date": 1561375075, "answer_id": 56735434, "question_id": 38995892, "link": "https://stackoverflow.com/questions/38995892/how-to-move-tests-into-a-separate-file-for-binaries-in-rusts-cargo/56735434#56735434", "title": "How to move tests into a separate file for binaries in Rust&#39;s Cargo?", "body": "<p>If you have a module <em>foo.rs</em> and want to place your unit tests next to it in a file called <em>foo_test.rs</em>, you'll find that this isn't always the place that Rust will look for a child module.</p>\n\n<p>You can use the <code>#[path]</code> attribute to specify the location of the file corresponding to the module:</p>\n\n<pre><code>#[cfg(test)]\n#[path = \"./foo_test.rs\"]\nmod foo_test;\n</code></pre>\n\n<p>This is explained in the blog post <a href=\"http://xion.io/post/code/rust-unit-test-placement.html\" rel=\"noreferrer\">Better location for unit tests in Rust</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11995, "favorite_count": 6, "answer_count": 3, "score": 22, "last_activity_date": 1582745897, "creation_date": 1471434768, "last_edit_date": 1471482562, "question_id": 38995892, "link": "https://stackoverflow.com/questions/38995892/how-to-move-tests-into-a-separate-file-for-binaries-in-rusts-cargo", "title": "How to move tests into a separate file for binaries in Rust&#39;s Cargo?", "body": "<p>I created a new binary using Cargo:</p>\n\n<pre><code>cargo new my_binary --bin\n</code></pre>\n\n<p>A function in <code>my_binary/src/main.rs</code> can be used for a test:</p>\n\n<pre><code>fn function_from_main() {\n    println!(\"Test OK\");\n}\n\n#[test]\nfn my_test() {\n    function_from_main();\n}\n</code></pre>\n\n<p>And <code>cargo test -- --nocapture</code> runs the test as expected.</p>\n\n<p>What's the most straightforward way to move this test into a separate file, (keeping <code>function_from_main</code> in <code>my_binary/src/main.rs</code>)?</p>\n\n<p>I tried to do this but am not sure how to make <code>my_test</code> call <code>function_from_main</code> from a separate file.</p>\n"}, {"tags": ["rust", "closures", "traits", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 0, "creation_date": 1471469795, "post_id": 38997480, "comment_id": 65364994, "body": "Thank you for the detailed answer. I&#39;m totally agree on your points about <code>i32</code> and <code>sum</code>, I don&#39;t know why did I put <code>i32</code> in my sample code, the actual value has type <code>i64</code> (and I also mentioned that initially, but somehow forgot to change it in the code)."}, {"owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 0, "creation_date": 1471469914, "post_id": 38997480, "comment_id": 65365050, "body": "The only one thing I still cannot understand, why do we have to take a pointer to a pointer? Even if a closura/trait is unsized object, and consist of 2 pointers, it&#39;s still a structure with two pointers, right? So why can&#39;t we take take a pointer to that memory location, where that object is stored and use it? (like in C, where you can take a pointer to a struct, or a pointer to a class in C++)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 0, "creation_date": 1471475333, "post_id": 38997480, "comment_id": 65366832, "body": "@ScienceSE that&#39;s basically what is happening. See if my rewording / diagram help at all?"}, {"owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 1, "creation_date": 1471526357, "post_id": 38997480, "comment_id": 65388968, "body": "so did I get it right, in Rust when you try to take a pointer to an unsized type, it gives you a so called &quot;fat pointer&quot; (which is bigger than an &quot;actual pointer&quot;), not a &quot;thin pointer&quot; (which is as big as <code>sizeof(void*)</code>)  like you would get if you try to get a pointer to a struct in C programming language? (i.e. it&#39;s more like a language &quot;feature&quot;, because usually a pointer is not bigger than <code>sizeof(void*)</code> as it contains an address, where the actual data [to which it points] is stored)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1549412493, "last_edit_date": 1549412493, "creation_date": 1471439067, "answer_id": 38997480, "question_id": 38995701, "link": "https://stackoverflow.com/questions/38995701/how-do-i-pass-a-closure-through-raw-pointers-as-an-argument-to-a-c-function/38997480#38997480", "title": "How do I pass a closure through raw pointers as an argument to a C function?", "body": "<p>First, some logical errors with the code:</p>\n\n<ol>\n<li><p>It is <strong>not correct</strong> to cast pointers to <code>i32</code> on many platforms (like 64-bit). Pointers may use all of those bits. Truncating a pointer and then calling a function at the truncated address will lead to Really Bad Things. Generally you want to use a machine-sized integer (<code>usize</code> or <code>isize</code>).</p></li>\n<li><p>The <code>sum</code> value needs to be mutable. </p></li>\n</ol>\n\n<p>The meat of the problem is that closures are concrete types that take up a size unknown to the programmer, but known to the compiler. The C function is limited to taking a machine-sized integer.</p>\n\n<p>Because closures implement one of the <code>Fn*</code> traits, we can take a reference to the closure's implementation of that trait to generate a <em>trait object</em>. Taking a reference a trait leads to a <em>fat pointer</em> that contains two pointer-sized values. In this case, it contains a pointer to the data that is closed-over and a pointer to a <em>vtable</em>, the concrete methods that implement the trait.</p>\n\n<p>In general, any reference to or <code>Box</code> of a <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\" rel=\"noreferrer\">dynamically-sized type type</a> is going to generate a fat pointer.</p>\n\n<p>On a 64-bit machine, a fat pointer would be 128 bits in total, and casting that to a machine-sized pointer would again truncate the data, causing Really Bad Things to happen.</p>\n\n<p>The solution, like everything else in computer science, is to add more layers of abstraction:</p>\n\n<pre><code>use std::os::raw::c_void;\n\nfn enum_wnd_proc(some_value: i32, lparam: usize) {\n    let trait_obj_ref: &amp;mut &amp;mut FnMut(i32) -&gt; bool = unsafe {\n        let closure_pointer_pointer = lparam as *mut c_void;\n        &amp;mut *(closure_pointer_pointer as *mut _)\n    };\n    println!(\n        \"predicate() executed and returned: {}\",\n        trait_obj_ref(some_value)\n    );\n}\n\nfn main() {\n    let mut sum = 0;\n    let mut closure = |some_value: i32| -&gt; bool {\n        println!(\"I'm summing {} + {}\", sum, some_value);\n        sum += some_value;\n        sum &gt;= 100\n    };\n\n    let mut trait_obj: &amp;mut FnMut(i32) -&gt; bool = &amp;mut closure;\n    let trait_obj_ref = &amp;mut trait_obj;\n\n    let closure_pointer_pointer = trait_obj_ref as *mut _ as *mut c_void;\n    let lparam = closure_pointer_pointer as usize;\n\n    enum_wnd_proc(20, lparam);\n}\n</code></pre>\n\n<p>We take a second reference to the fat pointer, which creates a <em>thin pointer</em>. This pointer is only one machine-integer in size.</p>\n\n<p>Maybe a diagram will help (or hurt)?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Reference -&gt; Trait object -&gt; Concrete closure\n 8 bytes       16 bytes         ?? bytes\n</code></pre>\n\n<p>Because we are using raw pointers, it is now <strong>the programmers responsibility</strong> to make sure that the closure outlives where it is used! If <code>enum_wnd_proc</code> stores the pointer somewhere, you must be <em>very careful</em> to not use it after the closure is dropped.</p>\n\n<hr>\n\n<p>As a side note, using <code>mem::transmute</code> when casting the trait object:</p>\n\n<pre><code>use std::mem;\nlet closure_pointer_pointer: *mut c_void = unsafe { mem::transmute(trait_obj) };\n</code></pre>\n\n<p>Produces a better error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0512]: transmute called with types of different sizes\n  --&gt; src/main.rs:26:57\n   |\n26 |     let closure_pointer_pointer: *mut c_void = unsafe { mem::transmute(trait_obj) };\n   |                                                         ^^^^^^^^^^^^^^\n   |\n   = note: source type: &amp;mut dyn std::ops::FnMut(i32) -&gt; bool (128 bits)\n   = note: target type: *mut std::ffi::c_void (64 bits)\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/error-index.html#E0512\" rel=\"noreferrer\">Error E0512</a>.</p>\n\n<hr>\n\n<p>See also</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29418298/155423\">Pass a Rust trait to C</a></li>\n<li><a href=\"https://stackoverflow.com/q/33929079/155423\">Rust FFI passing trait object as context to call callbacks on</a></li>\n<li><a href=\"https://stackoverflow.com/q/31463426/155423\">How do I create a Rust callback function to pass to a FFI function?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32270030/155423\">How do I convert a Rust closure to a C-style callback?</a></li>\n</ul>\n"}], "owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3680, "favorite_count": 4, "accepted_answer_id": 38997480, "answer_count": 1, "score": 10, "last_activity_date": 1549412493, "creation_date": 1471434228, "last_edit_date": 1549411617, "question_id": 38995701, "link": "https://stackoverflow.com/questions/38995701/how-do-i-pass-a-closure-through-raw-pointers-as-an-argument-to-a-c-function", "title": "How do I pass a closure through raw pointers as an argument to a C function?", "body": "<p>I'm working with WinAPI in Rust and there are some functions (like <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-enumwindows\" rel=\"noreferrer\"><code>EnumWindows()</code></a>) which require a callback. The callback usually accepts an additional argument (of type <code>LPARAM</code> which is an alias for <code>i64</code>), which you can use to pass some custom data to the callback.</p>\n\n<p>I have sent <code>Vec&lt;T&gt;</code> objects as LPARAM to the WinAPI callbacks and it worked fine. For instance \"unpacking\" an <code>lparam</code> value to a <code>Vec&lt;RECT&gt;</code> looked like this in my case:</p>\n\n<pre><code>unsafe extern \"system\" fn enumerate_callback(hwnd: HWND, lparam: LPARAM) -&gt; BOOL {\n    let rects = lparam as *mut Vec&lt;RECT&gt;;\n}\n</code></pre>\n\n<p>Instead of passing a vector, I now have to pass a closure. I can not use a function pointer as my closure has to capture some variables, which would not be accessible if I used a function. In C++, I would use <code>std::function&lt;&gt;</code> for my particular task, I think that in Rust the corresponding abstraction is a closure.</p>\n\n<p>My code for unpacking looks like this:</p>\n\n<pre><code>unsafe extern \"system\" fn enumerate_callback(hwnd: HWND, lparam: LPARAM) -&gt; BOOL {\n    let cb: &amp;mut FnMut(HWND) -&gt; bool = &amp;mut *(lparam as *mut c_void as *mut FnMut(HWND) -&gt; bool);\n    // ...\n}\n</code></pre>\n\n<p>SSCCE:</p>\n\n<pre><code>use std::os::raw::c_void;\n\nfn enum_wnd_proc(some_value: i32, lparam: i32) {\n    let closure: &amp;mut FnMut(i32) -&gt; bool =\n        unsafe { (&amp;mut *(lparam as *mut c_void as *mut FnMut(i32) -&gt; bool)) };\n\n    println!(\"predicate() executed and returned: {}\", closure(some_value));\n}\n\nfn main() {\n    let sum = 0;\n    let mut closure = |some_value: i32| -&gt; bool {\n        sum += some_value;\n        sum &gt;= 100\n    };\n\n    let lparam = (&amp;mut closure as *mut c_void as *mut FnMut(i32) -&gt; bool) as i32;\n    enum_wnd_proc(20, lparam);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=e167992c06813ce2e0813dfb8f0c6a30\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>I get these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: expected a `std::ops::FnMut&lt;(i32,)&gt;` closure, found `std::ffi::c_void`\n --&gt; src/main.rs:5:26\n  |\n5 |         unsafe { (&amp;mut *(lparam as *mut c_void as *mut FnMut(i32) -&gt; bool)) };\n  |                          ^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut&lt;(i32,)&gt;` closure, found `std::ffi::c_void`\n  |\n  = help: the trait `std::ops::FnMut&lt;(i32,)&gt;` is not implemented for `std::ffi::c_void`\n  = note: required for the cast to the object type `dyn std::ops::FnMut(i32) -&gt; bool`\n\nerror[E0606]: casting `&amp;mut [closure@src/main.rs:12:23: 15:6 sum:_]` as `*mut std::ffi::c_void` is invalid\n  --&gt; src/main.rs:17:19\n   |\n17 |     let lparam = (&amp;mut closure as *mut c_void as *mut FnMut(i32) -&gt; bool) as i32;\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0606]: casting `*mut dyn std::ops::FnMut(i32) -&gt; bool` as `i32` is invalid\n  --&gt; src/main.rs:17:18\n   |\n17 |     let lparam = (&amp;mut closure as *mut c_void as *mut FnMut(i32) -&gt; bool) as i32;\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: cast through a thin pointer first\n\nerror[E0277]: expected a `std::ops::FnMut&lt;(i32,)&gt;` closure, found `std::ffi::c_void`\n  --&gt; src/main.rs:17:19\n   |\n17 |     let lparam = (&amp;mut closure as *mut c_void as *mut FnMut(i32) -&gt; bool) as i32;\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnMut&lt;(i32,)&gt;` closure, found `std::ffi::c_void`\n   |\n   = help: the trait `std::ops::FnMut&lt;(i32,)&gt;` is not implemented for `std::ffi::c_void`\n   = note: required for the cast to the object type `dyn std::ops::FnMut(i32) -&gt; bool`\n</code></pre>\n\n<p>I would like to know:</p>\n\n<ol>\n<li>Is there a way to pass a function/closure to a different function and perform those \"C-like\" casts?</li>\n<li>What is the proper way to cast a closure to a <code>i64</code> value for passing it to that callback?</li>\n</ol>\n\n<p>I'm using the stable version of Rust.</p>\n"}, {"tags": ["python", "rust", "ffi"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 1, "creation_date": 1471421987, "post_id": 38991437, "comment_id": 65334869, "body": "I think you also need to add <code>mem::forget(frgs);</code> after the <code>cpeaks.push(...);</code> line."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471436826, "post_id": 38991437, "comment_id": 65344746, "body": "<a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\">jakegoulding.com/rust-ffi-omnibus</a>"}, {"owner": {"reputation": 43, "user_id": 1859725, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fbceeea2202a99e3c034327826cb8d56?s=128&d=identicon&r=PG", "display_name": "Ronny Herzog", "link": "https://stackoverflow.com/users/1859725/ronny-herzog"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1471521309, "post_id": 38991437, "comment_id": 65385363, "body": "@Dogbert: This is true. Then it works, but <code>cpeaks</code> similar to <code>frgs</code> would be leaked because I would not be able to free it."}], "answers": [{"tags": [], "owner": {"reputation": 915, "user_id": 9716278, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-y_OzgTqtpA8/AAAAAAAAAAI/AAAAAAAABmM/yM8i9oN9vmw/photo.jpg?sz=128", "display_name": "9716278", "link": "https://stackoverflow.com/users/9716278/9716278"}, "is_accepted": false, "score": 1, "last_activity_date": 1578182878, "creation_date": 1578182878, "answer_id": 59595948, "question_id": 38991437, "link": "https://stackoverflow.com/questions/38991437/how-do-i-return-complex-structures-to-python-when-using-rust-ffi/59595948#59595948", "title": "How do I return complex structures to Python when using Rust FFI?", "body": "<p>You can call rust code as a python module.</p>\n\n<p><a href=\"https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/\" rel=\"nofollow noreferrer\">https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/</a></p>\n\n<p>I'm not sure if this is what you were going for, but maybe it's worth a look.</p>\n"}], "owner": {"reputation": 43, "user_id": 1859725, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fbceeea2202a99e3c034327826cb8d56?s=128&d=identicon&r=PG", "display_name": "Ronny Herzog", "link": "https://stackoverflow.com/users/1859725/ronny-herzog"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 394, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1578184379, "creation_date": 1471421795, "last_edit_date": 1578184379, "question_id": 38991437, "link": "https://stackoverflow.com/questions/38991437/how-do-i-return-complex-structures-to-python-when-using-rust-ffi", "title": "How do I return complex structures to Python when using Rust FFI?", "body": "<p>I am hoping to re-write some parts of a Python project in Rust to speed up things. The idea is to use Rust's FFI interface to connect to Python via <code>ctypes</code>. I am using Rust 1.10 nightly.</p>\n\n<p>I need to return quite complex arrays/structures to Python. And this does not work properly. Unfortunately, I could not find any tutorial in the web for this kind of problem.</p>\n\n<pre><code>extern crate libc;\nuse libc::{c_int, c_char, size_t, c_float, c_double};\nuse std::ffi::{CStr, CString};\nuse std::str;\nuse std::vec::Vec;\nuse std::slice;\nuse std::mem;\n\n#[repr(C)]\npub struct CPeak {\n    // chemsc: *mut c_char, // adduct: c_char_p,\n    mz_exp: c_float,\n    mz_diff: c_float,\n    intensity: c_float,\n    resolution: c_float,\n    noise: c_float,\n    nb_frg: c_int,\n    frgs: *mut CFrg,\n}\n\n#[repr(C)]\npub struct CFrg {\n    mz_exp: c_float,\n    mz_diff: c_float,\n    intensity: c_float,\n    resolution: c_float,\n    noise: c_float,\n}\n\n#[no_mangle]\npub extern \"C\" fn standard_finder_get_standards(mut data: *mut *mut CPeak, mut len: *mut size_t) {\n    // fill 'peaks' vector\n    let peaks = find_standards(&amp;standards.standards, \"test.xml\", 5.0, 10.0);\n\n    // Copy contents of peaks (Rust structure) to CPeaks (C structure).\n    // NOTE that CPeaks has a entry in the struct which is also a vector of\n    // structs (frgs)\n    let mut cpeaks: Vec&lt;CPeak&gt; = vec![];\n    for peak in &amp;peaks {\n\n        // mk a vector frgs\n        let mut frgs: Vec&lt;CFrg&gt; = vec![];\n        if peak.frgs.len() &gt; 0 {\n            for frg in &amp;peak.frgs {\n                let f = CFrg {\n                    mz_exp: frg.mz as c_float,\n                    mz_diff: frg.mz_diff as c_float,\n                    intensity: frg.intensity as c_float,\n                    resolution: frg.resolution as c_float,\n                    noise: frg.resolution as c_float,\n                };\n                frgs.push(f);\n            }\n        }\n        frgs.shrink_to_fit();\n\n        // mk a vector cpeaks\n        cpeaks.push(CPeak {\n            mz_exp: peak.mz as c_float,\n            mz_diff: peak.mz_diff as c_float,\n            intensity: peak.intensity as c_float,\n            resolution: peak.resolution as c_float,\n            noise: peak.resolution as c_float,\n            nb_frg: peak.frgs.len() as c_int,\n            frgs: frgs.as_ptr() as *mut CFrg, // &lt;- add the frgs vector as c pointer (array)\n        });\n    }\n    cpeaks.shrink_to_fit();\n    unsafe {\n        *data = cpeaks.as_ptr() as *mut CPeak;\n        *len = cpeaks.len() as size_t;\n    }\n    mem::forget(cpeaks);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=9d6923761f52eb378b1f1ebb9633e868\" rel=\"nofollow\">Playground</a>).</p>\n\n<p>This code takes a Rust vector (<code>peaks: Vec&lt;Peak&gt;</code>) and copies its content to its C-structure array counterpart (<code>cpeaks: Vec&lt;CPeak&gt;</code>). Within <code>CPeak</code> is another pointer to an array of <code>CFrg</code>. The <code>cpeaks</code> vector is returned as call-by-reference to have space for an error return value.</p>\n\n<p>When I try to read the data with Python I have two problems:</p>\n\n<ul>\n<li>the first entry of <code>cpeaks</code> is empty or garbage</li>\n<li>the <code>CFrg</code> entries are all garbage.</li>\n</ul>\n\n<p>I guess that the problem is the lifetime of <code>cpeaks</code> which probably does not life long enough to be accessed in Python. However, I have no idea how to keep it alive. I tried <code>Box</code>ing it, but this did not help.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 8957, "user_id": 1073868, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/397bb6e2c9cc191a20143ca8566385c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/1073868/dan"}, "is_accepted": true, "score": 2, "last_activity_date": 1471346926, "last_edit_date": 1471346926, "creation_date": 1471344902, "answer_id": 38973032, "question_id": 38972855, "link": "https://stackoverflow.com/questions/38972855/why-cant-i-try-mutex-lock/38973032#38973032", "title": "Why can&#39;t I try! Mutex.lock?", "body": "<p>Running the 'explain' on rustc will explain this error - I thought I already had, but I guess not.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&amp;str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n\nAnother situation in which this occurs is when you attempt to use the `try!`\nmacro inside a function that does not return a `Result&lt;T, E&gt;`:\n\n```\nuse std::fs::File;\n\nfn main() {\n    let mut f = try!(File::create(\"foo.txt\"));\n}\n```\n\nThis code gives an error like this:\n\n```\n&lt;std macros&gt;:5:8: 6:42 error: mismatched types:\n expected `()`,\n     found `core::result::Result&lt;_, _&gt;`\n (expected (),\n     found enum `core::result::Result`) [E0308]\n```\n\n`try!` returns a `Result&lt;T, E&gt;`, and so the function must. But `main()` has\n`()` as its return type, hence the error.\n</code></pre>\n\n<p>In other words, the error is not with the type of <code>Mutex</code>; it's because I'm using <code>try!</code> within the main function; <code>try!</code> enforces the enclosing function return a <code>Result&lt;_, _&gt;</code>, but the main function must return <code>()</code>.</p>\n\n<p>If we look at the expanded code:</p>\n\n<pre><code>let vec =\n    match clone.lock() {\n        ::std::result::Result::Ok(val) =&gt; val,\n        ::std::result::Result::Err(err) =&gt; {\n            return ::std::result::Result::Err(::std::convert::From::from(err))\n        }\n    };\n</code></pre>\n\n<p>The reason why <code>try!</code> yells at you is because the <code>return</code> statement doesn't apply to the block in <code>match</code>, it applies to the enclosing method.</p>\n"}], "owner": {"reputation": 8957, "user_id": 1073868, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/397bb6e2c9cc191a20143ca8566385c5?s=128&d=identicon&r=PG&f=1", "display_name": "Dan", "link": "https://stackoverflow.com/users/1073868/dan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 422, "favorite_count": 2, "closed_date": 1471346797, "accepted_answer_id": 38973032, "answer_count": 1, "score": 2, "last_activity_date": 1471346926, "creation_date": 1471344382, "last_edit_date": 1471346902, "question_id": 38972855, "link": "https://stackoverflow.com/questions/38972855/why-cant-i-try-mutex-lock", "closed_reason": "Duplicate", "title": "Why can&#39;t I try! Mutex.lock?", "body": "<p>I'm trying to play about with multithreading in Rust and I've come across something I'd consider rather trivial. Here's the code snippet:</p>\n\n<pre><code>use std::thread;\nuse std::sync::{Arc, Mutex};\n\nfn main() {\n    let vec: Vec&lt;i32&gt; = vec!(1, 2, 3);\n    let shared = Arc::new(Mutex::new(vec));\n\n    let clone = shared.clone();\n\n    let join_handle = thread::spawn(move || {\n        let mut data = clone.lock().unwrap();\n        data.push(5);\n    });\n\n    join_handle.join().unwrap();\n\n    let clone = shared.clone();\n    let vec = try!(clone.lock());\n\n    println!(\"{:?}\", *vec);\n}\n</code></pre>\n\n<p>So, my issue is on the line <code>let vec = try!(clone.lock())</code>. This causes the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [E0308]\nreturn $ crate :: result :: Result :: Err (\n       ^\nnote: in this expansion of try! (defined in &lt;std macros&gt;)\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `()`\nnote:    found type `std::result::Result&lt;_, _&gt;`\n</code></pre>\n\n<p>To me, this doesn't make a lot of sense. <code>clone.lock()</code> returns <code>TryLockResult&lt;MutexGuard&lt;T&gt;&gt;</code>, which essentially translates to <code>Result&lt;MutexGuard&lt;T&gt;, PoisonedError&lt;MutexGuard&lt;T&gt;&gt;</code>, which means <code>try!(clone.lock())</code> should resolve to either a throw or <code>MutexGuard&lt;T&gt;</code>.</p>\n\n<p>Am I fundamentally misunderstanding something here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1471302567, "post_id": 38964201, "comment_id": 65283499, "body": "You could do <code>let (x,y) = f(); p.x = x;  p.y = y;</code> ."}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1471303194, "post_id": 38964295, "comment_id": 65283658, "body": "I expect something without introducing new variables"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1471314710, "post_id": 38964295, "comment_id": 65286091, "body": "@user1244932 then the answer is, unfortunately, &quot;no&quot;."}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1471326103, "post_id": 38964295, "comment_id": 65288858, "body": "@user1244932 you could put it in a block"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1471331237, "post_id": 38964295, "comment_id": 65291165, "body": "How about a new method or function, so that you&#39;d write <code>p.setxy(f())</code>?"}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": false, "score": 1, "last_activity_date": 1471302263, "creation_date": 1471302263, "answer_id": 38964295, "question_id": 38964201, "link": "https://stackoverflow.com/questions/38964201/how-can-i-set-structure-members-from-a-tuple-without-using-match/38964295#38964295", "title": "How can I set structure members from a tuple without using match?", "body": "<p>How's this?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let (x, y) = f();\np.x = x;\np.y = y;\n</code></pre>\n\n<p>You can put similar patterns in <code>let</code>s that you can put in <code>match</code>es.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 100, "favorite_count": 0, "closed_date": 1471314692, "answer_count": 1, "score": 0, "last_activity_date": 1471302317, "creation_date": 1471301590, "last_edit_date": 1471302317, "question_id": 38964201, "link": "https://stackoverflow.com/questions/38964201/how-can-i-set-structure-members-from-a-tuple-without-using-match", "closed_reason": "Duplicate", "title": "How can I set structure members from a tuple without using match?", "body": "<p>I want to initialize two fields from a tuple returned from a function:</p>\n\n<pre><code>#[derive(Clone, Copy, Debug)]\nstruct Point {\n    x: f64,\n    y: f64,\n    z: f64,\n}\n\nfn f() -&gt; (f64, f64) {\n    (5., 6.)\n}\n\nfn main() {\n    let mut p = Point {\n        x: 1.,\n        y: 2.,\n        z: 3.,\n    };\n    println!(\"{:?}\", p);\n    match f() {\n        (x, y) =&gt; {\n            p.x = x;\n            p.y = y;\n        }\n    }\n    println!(\"{:?}\", p);\n}\n</code></pre>\n\n<p>The obvious code <code>(p.x, p.y) = f()</code> did not compile so I have to use <code>match</code>. Do you have any idea how to make the <code>match</code> assignment simpler to read? </p>\n\n<p>I want to</p>\n\n<ol>\n<li>Call <code>f</code> only once per assignment of the two fields</li>\n<li>Have <code>f</code> on the right side, and <code>p.x</code> and <code>p.y</code> and the left side, not how it is in <code>match</code> now </li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 778, "user_id": 667959, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/646001f0ba2b7df47a16c0a1d5b62225?s=128&d=identicon&r=PG", "display_name": "frangio", "link": "https://stackoverflow.com/users/667959/frangio"}, "is_accepted": true, "score": 2, "last_activity_date": 1471302235, "last_edit_date": 1471302235, "creation_date": 1471299234, "answer_id": 38963846, "question_id": 38963675, "link": "https://stackoverflow.com/questions/38963675/type-mismatch-expected-ptr-found-i32-when-trying-to-use-vector-as-iterator/38963846#38963846", "title": "type mismatch: expected &amp;-ptr, found i32 when trying to use vector as iterator", "body": "<p>The problem here is that the iterator returned by <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"nofollow\"><code>iter</code></a> is an iterator over references to the vector items.</p>\n\n<p>This can be seen in <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"nofollow\">the method signature</a>: <code>fn iter(&amp;self) -&gt; Iter&lt;T&gt;</code> \nand the <code>Iterator</code> implementation of <code>Iter</code>, which <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html#associatedtype.Item\" rel=\"nofollow\">states</a>:</p>\n\n<pre><code>impl&lt;'a, T&gt; Iterator for Iter&lt;'a, T&gt;\n    type Item = &amp;'a T\n    ...\n</code></pre>\n\n<p>One possible solution is to make the <code>foo</code> function take an iterator of references:</p>\n\n<pre><code>fn foo&lt;'a, I: Iterator&lt;Item=&amp;'a i32&gt;&gt;(i: I) { }\n</code></pre>\n\n<p>A somewhat better solution is to call the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_iter\" rel=\"nofollow\"><code>into_iter</code></a> method on the vector. This takes ownership of the vector and iterates over its values, consuming each one. This will not always be what you want, however, but the compiler will warn you as it did this time around.</p>\n\n<hr>\n\n<p>You could also declare <code>foo</code> like this:</p>\n\n<pre><code>fn foo&lt;I: IntoIterator&lt;Item=i3\u200c\u200b2&gt;&gt;(i: I)\n</code></pre>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow\"><code>IntoIterator</code></a> trait is implemented for types that can be converted to iterators via <code>into_iter</code>. This way you would call the function with the vector and convert it in the function body.</p>\n"}], "owner": {"reputation": 9005, "user_id": 675637, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/8X97W.jpg?s=128&g=1", "display_name": "poy", "link": "https://stackoverflow.com/users/675637/poy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 699, "favorite_count": 0, "accepted_answer_id": 38963846, "answer_count": 1, "score": 1, "last_activity_date": 1471302235, "creation_date": 1471298208, "last_edit_date": 1471300723, "question_id": 38963675, "link": "https://stackoverflow.com/questions/38963675/type-mismatch-expected-ptr-found-i32-when-trying-to-use-vector-as-iterator", "title": "type mismatch: expected &amp;-ptr, found i32 when trying to use vector as iterator", "body": "<p>I'm trying to use the <code>vec!</code> macro to create an iterator and pass it into a function, but I'm getting a compiler error:</p>\n\n<pre><code>fn main() {\n    let v = vec!(1,2,3).iter();\n    Foo(v);\n}\n\nfn Foo&lt;I: Iterator&lt;Item=i32&gt;&gt;(i: I) {}\n</code></pre>\n\n<p>Results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: type mismatch resolving `&lt;std::slice::Iter&lt;'_, _&gt; as std::iter::Iterator&gt;::Item == i32`:\n expected &amp;-ptr,\n    found i32 [--explain E0271]\n --&gt; src/main.rs:3:5\n3 |&gt;     Foo(v);\n  |&gt;     ^^^\nnote: required by `Foo`\n</code></pre>\n\n<p>I don't understand what the compiler is trying to relay to me... What is the <code>.iter()</code> returning if it is not a <code>Iterator&lt;i32&gt;</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471300671, "post_id": 38963644, "comment_id": 65282966, "body": "It feels that if you have so many types that need to do the same thing, then you actually have one type that should have many instances."}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "edited": false, "score": 0, "creation_date": 1516877294, "post_id": 38963644, "comment_id": 83873157, "body": "You can change your impl Point like this: <code>impl Point {         fn set_z(&amp;self, val: f64) -&gt; Point {             Point{z: val, *self}         }     </code>"}, {"owner": {"reputation": 1376, "user_id": 5190508, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/9a505583a1564c89608a5dc393580654?s=128&d=identicon&r=PG&f=1", "display_name": "S.R", "link": "https://stackoverflow.com/users/5190508/s-r"}, "edited": false, "score": 0, "creation_date": 1516877425, "post_id": 38963644, "comment_id": 83873233, "body": "In topic, I think you could write own <code>derive</code> that will implement <code>set_x</code>, <code>set_z</code> functions in <code>Boo</code> for you. But I am just a begginer and can&#39;t help you with example."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471300587, "post_id": 38963712, "comment_id": 65282939, "body": "You can also make <code>point</code> public but not <code>z</code>, then you could call <code>boo.point.set_z(17.0)</code>."}, {"owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 1, "creation_date": 1539974655, "post_id": 38963712, "comment_id": 92708908, "body": "Is there a way to keep x,y,z private but allow the creating a copy with x different?"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 4, "last_activity_date": 1471304214, "last_edit_date": 1471304214, "creation_date": 1471298419, "answer_id": 38963712, "question_id": 38963644, "link": "https://stackoverflow.com/questions/38963644/easy-way-to-change-one-field-in-struct/38963712#38963712", "title": "Easy way to change one field in struct?", "body": "<p>Why don't you make those fields public?</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct Point {\n    pub x: f64,\n    pub y: f64,\n    pub z: f64\n}\n\nstruct Boo {\n    pub point: Point\n}\n\nboo.point.z = 17.0;\n</code></pre>\n\n<p>Encapsulation is a good thing and you often don't want everyone to change the internal fields of a type. But this is only necessary if there are illegal values the field mustn't take on <em>or</em> if other values are dependent on that field (e.g. caches). But if that's not the case -- and in your example it doesn't look like it is -- then just mark those fields as public.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2373, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1471304214, "creation_date": 1471298069, "last_edit_date": 1471300463, "question_id": 38963644, "link": "https://stackoverflow.com/questions/38963644/easy-way-to-change-one-field-in-struct", "title": "Easy way to change one field in struct?", "body": "<p>I have the following code:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct Point {\n    x: f64,\n    y: f64,\n    z: f64\n}\n\nimpl Point {\n    fn set_z(&amp;self, val: f64) -&gt; Point {\n        Point{x: self.x, y: self.y, z: val}\n    }\n}\n\nstruct Boo {\n    point: Point\n}\n\nimpl Boo {\n    fn point(&amp;self) -&gt; &amp;Point { &amp;self.point }\n    fn set_point(&amp;mut self, val: &amp;Point) { self.point = *val; }\n}\n\nfn main() {\n    let mut boo = Boo{point:Point{x: 0., y: 0., z: 0.}};\n    let new_p = boo.point().set_z(17.);\n    boo.set_point(&amp;new_p);\n}\n</code></pre>\n\n<p>In fact, I have bunch of structures like <code>Boo</code> with <code>Point</code> fields, and often enough I need to change only one field in it.</p>\n\n<p>So I can</p>\n\n<ol>\n<li><p>Implement millions of methods like:</p>\n\n<pre><code>impl Boo {\n    fn set_x(&amp;mut self, val: f64) { self.point.x = val; }\n    fn set_y(&amp;mut self, val: f64) { self.point.y = val; }\n    //...\n}\n</code></pre>\n\n<p>Which is too boring, and if have two, three fields like <code>point1</code>, <code>point2</code> and so on I will be buried under tons of these methods.</p></li>\n<li><p>The method described at the top of the question looks nicer because I need only two methods per field, but I have to make modification in two steps: get point and set point.</p></li>\n</ol>\n\n<p>So the ideal method for me would look like this:</p>\n\n<pre><code>boo.set_point(boo.point().set_z(17.));\n</code></pre>\n\n<p>But this is impossible, because to implement this I need to somehow read and write references at the same time.</p>\n\n<p>How can I simplify setting only one field of <code>Point</code> for users of my module? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1471457580, "post_id": 39003567, "comment_id": 65358801, "body": "The problem with <code>ControlItem</code>, that I want have predefined set of <code>ControlItem</code> and not allow any other in <code>set</code> and <code>get</code>, without this restriction I can just use <code>String</code> instead of <code>ControlItem</code>."}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1471639596, "post_id": 39003567, "comment_id": 65444699, "body": "But you said before you wanted to open it up so that different <code>ControlItem</code>s  could be in different crates."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1471643629, "post_id": 39003567, "comment_id": 65446180, "body": "Yes, it should be in different crates, but it should be <code>open up</code> only at compile time. Set of possible <code>ControlItem</code> should be fixed at compile time, and <code>set</code> and <code>get</code> should accept only them."}], "tags": [], "owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "is_accepted": false, "score": 0, "last_activity_date": 1471457335, "creation_date": 1471457335, "answer_id": 39003567, "question_id": 38962797, "link": "https://stackoverflow.com/questions/38962797/how-to-split-an-enum-into-two-parts-in-different-crates/39003567#39003567", "title": "How to split an enum into two parts in different crates?", "body": "<p>It sounds like you should use a trait, not an enum. You could define a trait and implement it like this:</p>\n\n<pre><code>pub trait ControlItem {\n    fn name(&amp;self) -&gt; &amp;str;\n}\n\nstruct A(&amp;'static str);\n\nimpl ControlItem for A {\n    fn name(&amp;self) -&gt; &amp;str {\n        self.0\n    }\n}\n\n// ... similar struct and impl blocks for other items\n</code></pre>\n\n<p>Then these structs can be moved into separate crates.</p>\n\n<p>You'd need to change <code>Control</code> to store a <code>Vec&lt;(Box&lt;ControlItem&gt;, bool)&gt;</code>, and either change <code>get</code> and <code>set</code> to take a <code>Box&lt;ControlItem&gt;</code>, or to be generic over <code>T: ControlItem</code>.</p>\n\n<p>Read about <a href=\"https://doc.rust-lang.org/book/traits.html\" rel=\"nofollow\">traits</a> and <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\">trait objects</a> for more.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 275, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1471457335, "creation_date": 1471293999, "last_edit_date": 1471296153, "question_id": 38962797, "link": "https://stackoverflow.com/questions/38962797/how-to-split-an-enum-into-two-parts-in-different-crates", "title": "How to split an enum into two parts in different crates?", "body": "<p>Here's where I'm starting from:</p>\n\n<pre><code>#[derive(PartialEq)]\nenum ControlItem {\n    A {\n        name: &amp;'static str,\n    },\n    B {\n        name: &amp;'static str,\n    },\n}\n\nstruct Control {\n    items: Vec&lt;(ControlItem, bool)&gt;,\n}\n\nimpl Control {\n    pub fn set(&amp;mut self, item: ControlItem, is_ok: bool) {\n        match self.items.iter().position(|ref x| (**x).0 == item) {\n            Some(idx) =&gt; {\n                self.items[idx].1 = is_ok;\n            }\n            None =&gt; {\n                self.items.push((item, is_ok));\n            }\n        }\n    }\n\n    pub fn get(&amp;self, item: ControlItem) -&gt; bool {\n        match self.items.iter().position(|ref x| (**x).0 == item) {\n            Some(idx) =&gt; return self.items[idx].1,\n            None =&gt; return false,\n        }\n    }\n}\n\nfn main() {\n    let mut ctrl = Control { items: vec![] };\n    ctrl.set(ControlItem::A { name: \"a\" }, true);\n    assert_eq!(ctrl.get(ControlItem::A { name: \"a\" }), true);\n    ctrl.set(ControlItem::B { name: \"b\" }, false);\n    assert_eq!(ctrl.get(ControlItem::B { name: \"b\" }), false);\n}\n</code></pre>\n\n<p>I have a <code>Control</code> type that should save the state of some predefined items and report it back to user.</p>\n\n<p>I have a virtual table in my mind, like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>|Name in program | Name for user             |\n|item_1          | Item one bla-bla          |\n|item_2          | Item two bla-bla          |\n|item_3          | Item three another-bla-bla|\n</code></pre>\n\n<ol>\n<li><p>I want <code>Control</code> to have <code>get</code> / <code>set</code> methods that accept only things with names <code>item_1</code>, <code>item_2</code>, <code>item_3</code>.</p></li>\n<li><p>I want to hold this virtual table in two crates: \"main\" and \"platform\". Most of the implementation of <code>Control</code> should be in the main crate, and definitions of the items (like <code>item_3</code>) should go into the platform crate.  I want to register <code>item_3</code> at compile time.</p></li>\n</ol>\n\n<p>Any ideas on how achieve this? </p>\n"}, {"tags": ["multithreading", "rust", "channels"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471275519, "post_id": 38957741, "comment_id": 65270685, "body": "<code>NTHREADS = 8</code> and I see <i>thread 9 finished</i>. Any ideas on how that happened? The fact that the code evidently can&#39;t handle simple counting seems like a much worse problem."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1471278825, "post_id": 38957741, "comment_id": 65272499, "body": "Did you give the output from setting NTHREADS=10 rather than 8?"}], "answers": [{"comments": [{"owner": {"reputation": 193, "user_id": 5177296, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/74d8a88f1671531b2a6f2ff4218764d4?s=128&d=identicon&r=PG&f=1", "display_name": "asdetrefle", "link": "https://stackoverflow.com/users/5177296/asdetrefle"}, "edited": false, "score": 0, "creation_date": 1471349815, "post_id": 38958204, "comment_id": 65302519, "body": "Thanks, that&#39;s very helpful!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1471294171, "last_edit_date": 1471294171, "creation_date": 1471275280, "answer_id": 38958204, "question_id": 38957741, "link": "https://stackoverflow.com/questions/38957741/how-do-the-channels-work-in-rust-by-example/38958204#38958204", "title": "How do the channels work in Rust By Example?", "body": "<p>There is no guaranteed order for the threads or any coordination between them, so they will execute and send the results into the channel in an arbitrary order. That's kind of the entire point - if they are independent, you can use multiple threads.</p>\n\n<p>The main thread pulls <code>N</code> values from the channel, puts them into a <code>Vec</code>, prints the <code>Vec</code> and exits.</p>\n\n<p>The main thread does <strong>not</strong> wait for the child threads to finish before exiting. The missing print is explained by the last child thread sending the value into the channel, the main thread reading it (ending the <code>for</code> loop), and then the program exits. There was never a chance for the thread to print out it finished.</p>\n\n<p>It is also possible that the last thread has a chance to run and print out before the main thread resumes and exits.</p>\n\n<p>Each scenario might be more or less likely depending on the number of CPUs or the OS, but both are <strong>correct</strong> runs of the program.</p>\n\n<p>A version of the code modified to wait for the threads shows different output:</p>\n\n<pre><code>use std::sync::mpsc::{Sender, Receiver};\nuse std::sync::mpsc;\nuse std::thread;\n\nstatic NTHREADS: i32 = 3;\n\nfn main() {\n    // Channels have two endpoints: the `Sender&lt;T&gt;` and the `Receiver&lt;T&gt;`,\n    // where `T` is the type of the message to be transferred\n    // (type annotation is superfluous)\n    let (tx, rx): (Sender&lt;i32&gt;, Receiver&lt;i32&gt;) = mpsc::channel();\n\n    let handles: Vec&lt;_&gt; = (0..NTHREADS).map(|id| {\n        // The sender endpoint can be copied\n        let thread_tx = tx.clone();\n\n        // Each thread will send its id via the channel\n        thread::spawn(move || {\n            // The thread takes ownership over `thread_tx`\n            // Each thread queues a message in the channel\n            thread_tx.send(id).unwrap();\n\n            // Sending is a non-blocking operation, the thread will continue\n            // immediately after sending its message\n            println!(\"thread {} finished\", id);\n        })\n    }).collect();\n\n    // Here, all the messages are collected\n    let mut ids = Vec::with_capacity(NTHREADS as usize);\n    for _ in 0..NTHREADS {\n        // The `recv` method picks a message from the channel\n        // `recv` will block the current thread if there no messages available\n        ids.push(rx.recv());\n    }\n\n    // Show the order in which the messages were sent\n    println!(\"{:?}\", ids);\n\n    // Wait for threads to complete\n    for handle in handles {\n        handle.join().expect(\"Unable to join\");\n    }\n}\n</code></pre>\n\n<p>Note how, in this case, the main thread prints <strong>before</strong> the last thread exits:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 2 finished\nthread 1 finished\n[Ok(2), Ok(1), Ok(0)]\nthread 0 finished\n</code></pre>\n\n<p>It would also be valid for these four lines to occur in just about <em>any</em> order: there's no reason for any child thread to print before or after the main thread prints. </p>\n"}], "owner": {"reputation": 193, "user_id": 5177296, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/74d8a88f1671531b2a6f2ff4218764d4?s=128&d=identicon&r=PG&f=1", "display_name": "asdetrefle", "link": "https://stackoverflow.com/users/5177296/asdetrefle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3451, "favorite_count": 1, "accepted_answer_id": 38958204, "answer_count": 1, "score": 6, "last_activity_date": 1471294171, "creation_date": 1471273610, "last_edit_date": 1471274518, "question_id": 38957741, "link": "https://stackoverflow.com/questions/38957741/how-do-the-channels-work-in-rust-by-example", "title": "How do the channels work in Rust By Example?", "body": "<p>I am quite confused by the output of the <a href=\"http://rustbyexample.com/std_misc/channels.html\" rel=\"noreferrer\">channel chapter of <em>Rust by Example</em></a>:</p>\n\n<pre><code>use std::sync::mpsc::{Sender, Receiver};\nuse std::sync::mpsc;\nuse std::thread;\n\nstatic NTHREADS: i32 = 3;\n\nfn main() {\n    // Channels have two endpoints: the `Sender&lt;T&gt;` and the `Receiver&lt;T&gt;`,\n    // where `T` is the type of the message to be transferred\n    // (type annotation is superfluous)\n    let (tx, rx): (Sender&lt;i32&gt;, Receiver&lt;i32&gt;) = mpsc::channel();\n\n    for id in 0..NTHREADS {\n        // The sender endpoint can be copied\n        let thread_tx = tx.clone();\n\n        // Each thread will send its id via the channel\n        thread::spawn(move || {\n            // The thread takes ownership over `thread_tx`\n            // Each thread queues a message in the channel\n            thread_tx.send(id).unwrap();\n\n            // Sending is a non-blocking operation, the thread will continue\n            // immediately after sending its message\n            println!(\"thread {} finished\", id);\n        });\n    }\n\n    // Here, all the messages are collected\n    let mut ids = Vec::with_capacity(NTHREADS as usize);\n    for _ in 0..NTHREADS {\n        // The `recv` method picks a message from the channel\n        // `recv` will block the current thread if there no messages available\n        ids.push(rx.recv());\n    }\n\n    // Show the order in which the messages were sent\n    println!(\"{:?}\", ids);\n}\n</code></pre>\n\n<p>With the default <code>NTHREADS = 3</code>, I got the following output: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 2 finished\nthread 1 finished\n[Ok(2), Ok(1), Ok(0)]\n</code></pre>\n\n<p>Why does the <code>println!(\"thread {} finished\", id);</code> in the <code>for</code> loop print in reverse order? And where does the <code>thread 0 finished</code> go?</p>\n\n<p>When I changed to <code>NTHREADS = 8</code>, something more mysterious happened:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 6 finished\nthread 7 finished\nthread 8 finished\nthread 9 finished\nthread 5 finished\nthread 4 finished\nthread 3 finished\nthread 2 finished\nthread 1 finished\n[Ok(6), Ok(7), Ok(8), Ok(9), Ok(5), Ok(4), Ok(3), Ok(2), Ok(1), Ok(0)]\n</code></pre>\n\n<p>The printing order confused me even more and the thread 0 is always missing. How to explain this example?</p>\n\n<p>I tried this on different computers and got the same results.</p>\n"}, {"tags": ["time", "rust"], "comments": [{"owner": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 2, "creation_date": 1568678884, "post_id": 38957718, "comment_id": 102342290, "body": "For anyone seeing this nowadays, the <code>time</code> crate may be revived soon. I&#39;ve asked on GitHub to take it over, and already have support from two contributors."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1471274416, "post_id": 38957921, "comment_id": 65270041, "body": "Is there a way to convert the result of <code>std::time::now()</code> to a Chrono compatible type? OP asked for how to format something from <code>std::time</code>, not how to print the current time (for better or worse)."}, {"owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 1, "creation_date": 1471274549, "post_id": 38957921, "comment_id": 65270112, "body": "Plus the crate chrono is just a wrapper for the crate time."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 2, "creation_date": 1471274963, "post_id": 38957921, "comment_id": 65270369, "body": "@Bl4ckb0ne The chrono crate has been updated 12 days ago. I don&#39;t believe it is deprecated."}, {"owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 1, "creation_date": 1471275896, "post_id": 38957921, "comment_id": 65270898, "body": "@antoyo : on the repo [<a href=\"https://github.com/rust-lang-deprecated/time](rust-lang-depreciated)\" rel=\"nofollow noreferrer\">github.com/rust-lang-deprecated/time](rust-lang-depreciated&zwnj;&#8203;)</a>, the last update was 5 month ago. Plus it has been flagged as depreciated because all of the code has been migrated to the rust std lib"}, {"owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "edited": false, "score": 1, "creation_date": 1471276027, "post_id": 38957921, "comment_id": 65270984, "body": "@antoyo plus I can reffer you to this <a href=\"http://stackoverflow.com/questions/27221193/time-in-rust-time-crate-is-deprecated\">stackoverflow post</a>. I just don&#39;t want to add more dependencies to my project"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 1, "creation_date": 1471276174, "post_id": 38957921, "comment_id": 65271062, "body": "Do you want to continue this discussion on the <a href=\"http://chat.stackoverflow.com/rooms/62927/rust\">chat</a>?"}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": false, "score": 21, "last_activity_date": 1471282982, "last_edit_date": 1471282982, "creation_date": 1471274179, "answer_id": 38957921, "question_id": 38957718, "link": "https://stackoverflow.com/questions/38957718/format-stdtime-output/38957921#38957921", "title": "Format std::time output", "body": "<p>You can use the crate <a href=\"https://crates.io/crates/chrono\" rel=\"noreferrer\"><code>chrono</code></a> to achieve the same result:</p>\n\n<pre><code>extern crate chrono;\n\nuse chrono::Local;\n\nfn main() {\n    let date = Local::now();\n    println!(\"{}\", date.format(\"%Y-%m-%d][%H:%M:%S\"));\n}\n</code></pre>\n\n<p><strong>Edit:</strong></p>\n\n<p>The time crate is not deprecated: it is unmaintained.</p>\n\n<p>Besides, it is not possible to format a time using only the standard library.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1471283653, "last_edit_date": 1471283653, "creation_date": 1471277928, "answer_id": 38958887, "question_id": 38957718, "link": "https://stackoverflow.com/questions/38957718/format-stdtime-output/38958887#38958887", "title": "Format std::time output", "body": "<p>There are (currently) two <code>now</code> methods: <a href=\"https://doc.rust-lang.org/std/time/struct.Instant.html#method.now\" rel=\"noreferrer\"><code>Instant::now</code></a> and <a href=\"https://doc.rust-lang.org/std/time/struct.SystemTime.html#method.now\" rel=\"noreferrer\"><code>SystemTime::now</code></a>.</p>\n\n<p><code>Instant</code> says:</p>\n\n<blockquote>\n  <p>A measurement of a monotonically increasing clock. Opaque and useful only with <code>Duration</code>.</p>\n</blockquote>\n\n<p><code>SystemTime</code> says:</p>\n\n<blockquote>\n  <p>A measurement of the system clock, useful for talking to external entities like the file system or other processes.</p>\n</blockquote>\n\n<p>Neither of these is truly appropriate for showing to a human. Time is <strong>hard</strong>, and <em>formatting</em> time is additional complexity. It's really a good thing that it's not part of the standard library, otherwise it would have a fixed API that couldn't be improved.</p>\n\n<p>As mentioned elsewhere, I'd recommend using <a href=\"https://github.com/lifthrasiir/rust-chrono\" rel=\"noreferrer\">chrono</a>, the <em>heir apparent</em> to the <code>time</code> crate.</p>\n"}], "owner": {"reputation": 877, "user_id": 3666903, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/1i0Z6.jpg?s=128&g=1", "display_name": "bl4ckb0ne", "link": "https://stackoverflow.com/users/3666903/bl4ckb0ne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10533, "favorite_count": 3, "accepted_answer_id": 38958887, "answer_count": 2, "score": 18, "last_activity_date": 1484655090, "creation_date": 1471273541, "last_edit_date": 1484655090, "question_id": 38957718, "link": "https://stackoverflow.com/questions/38957718/format-stdtime-output", "title": "Format std::time output", "body": "<p>I want to display the current time in a certain format. </p>\n\n<p>I am trying to avoid the <a href=\"https://crates.io/crates/time\" rel=\"noreferrer\">time crate</a> since it's flagged as deprecated on its <a href=\"https://github.com/rust-lang-deprecated/time\" rel=\"noreferrer\">the GitHub repo</a>.</p>\n\n<p>I want to use this exact format <code>time::now().strftime(\"%Y-%m-%d][%H:%M:%S\").unwrap()</code> using <code>std::time</code>, but it doesn't seems to have a <code>strftime</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471275939, "post_id": 38957640, "comment_id": 65270928, "body": "I don&#39;t know that this is a <i>bug</i>. Macro expansion relies on everything  being complete when it is substituted, but the name of a struct being constructed isn&#39;t really a piece of the AST that can live on its own. It&#39;s not C-like macros where the text is just glommed together. The compiler is looking for an expression; <code>Foo { i: 42 }</code> is an expression, <code>Foo</code> is not (in this case)."}], "answers": [{"comments": [{"owner": {"reputation": 6980, "user_id": 1544347, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ad87bb0303238ee876a147dacd557a1?s=128&d=identicon&r=PG", "display_name": "Markus Unterwaditzer", "link": "https://stackoverflow.com/users/1544347/markus-unterwaditzer"}, "edited": false, "score": 0, "creation_date": 1471273602, "post_id": 38957722, "comment_id": 65269553, "body": "By the way, I recommend you read the chapter of the linked book, it will help you out a lot."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1471273898, "post_id": 38957722, "comment_id": 65269752, "body": "I have listed <code>path</code> in my question, this does not seem to work for type construction."}, {"owner": {"reputation": 6980, "user_id": 1544347, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ad87bb0303238ee876a147dacd557a1?s=128&d=identicon&r=PG", "display_name": "Markus Unterwaditzer", "link": "https://stackoverflow.com/users/1544347/markus-unterwaditzer"}, "reply_to_user": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1471274409, "post_id": 38957722, "comment_id": 65270034, "body": "Sorry, I didn&#39;t read your answer properly. I edited my answer now and have verified locally that it works (for a smaller example)."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1471275425, "post_id": 38957722, "comment_id": 65270625, "body": "With <code>tt</code>? I have tried every symbol and it works with nothing so far, <a href=\"https://play.rust-lang.org/?gist=5f30bcb2ed940f78aa9e8214979091ff&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> It should probably open an issue."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1471276258, "post_id": 38957722, "comment_id": 65271105, "body": "Okay my fault, I didn&#39;t really know how <code>tt</code> worked. It definitely works with <code>$($from_type:tt)*</code>"}], "tags": [], "owner": {"reputation": 6980, "user_id": 1544347, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ad87bb0303238ee876a147dacd557a1?s=128&d=identicon&r=PG", "display_name": "Markus Unterwaditzer", "link": "https://stackoverflow.com/users/1544347/markus-unterwaditzer"}, "is_accepted": true, "score": 1, "last_activity_date": 1471274384, "last_edit_date": 1471274384, "creation_date": 1471273560, "answer_id": 38957722, "question_id": 38957640, "link": "https://stackoverflow.com/questions/38957640/which-symbol-inside-a-macro-allows-type-construction-when-the-type-is-inside-ano/38957722#38957722", "title": "Which symbol inside a macro allows type construction when the type is inside another module?", "body": "<p>I don't know why <code>path</code> or <code>ty</code> fails, I would file a bug against <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow\">Rust</a>. In the past I've worked around this by using the <code>tt</code> specifier, which matches almost everything.</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 307, "favorite_count": 0, "accepted_answer_id": 38957722, "answer_count": 1, "score": 1, "last_activity_date": 1471275661, "creation_date": 1471273280, "last_edit_date": 1471275661, "question_id": 38957640, "link": "https://stackoverflow.com/questions/38957640/which-symbol-inside-a-macro-allows-type-construction-when-the-type-is-inside-ano", "title": "Which symbol inside a macro allows type construction when the type is inside another module?", "body": "<p>I wrote a very simple macro which should implement a wrapper for a C struct:</p>\n\n<pre><code>macro_rules! features{\n    ($struct_name: ident, $from_type: ident, $($name: ident =&gt; $vk: ident,)+) =&gt; {\n        #[derive(Debug, Copy, Clone)]\n        pub struct $struct_name{\n            $(\n                pub $name: bool,\n            )+\n        }\n        impl $struct_name{\n            pub fn empty() -&gt; $struct_name{\n                $struct_name{\n                    $(\n                        $name: false,\n                    )+\n                }\n            }\n            pub fn subset(&amp;self, other: &amp;Self) -&gt; bool{\n                $((!self.$name | other.$name))&amp;&amp;+\n            }\n        }\n\n        //TODO: Probably just impl From with a cast?\n        impl From&lt;vk::$from_type&gt; for $struct_name{\n            fn from(features: vk::$from_type) -&gt; $struct_name {\n                $struct_name{\n                    $(\n                        $name: features.$vk != 0,\n                    )+\n                }\n            }\n        }\n\n        impl From&lt;$struct_name&gt; for vk::$from_type {\n            fn from(features: $struct_name) -&gt; vk::$from_type {\n                vk::$from_type{\n                    $(\n                        $vk: features.$name as u32,\n                    )+\n                }\n            }\n        }\n\n        impl fmt::Display for $struct_name {\n            fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result{\n                $(\n                    if self.$name {\n                        try!(writeln!(f, \"{},\", stringify!($name)));\n                    }\n                )+\n                writeln!(f, \"\")\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I use it like this:</p>\n\n<pre><code>features!{\n    Features,\n    PhysicalDeviceFeatures,\n    robust_buffer_access =&gt; robustBufferAccess,\n    full_draw_index_uint32 =&gt; fullDrawIndexUint32,\n    image_cube_array =&gt; imageCubeArray,\n    ....\n}\n</code></pre>\n\n<p>This works, but I had to make a very ugly hack <code>$from_type: ident</code> and then I use <code>vk::$from_type</code> inside the macro. What I really want to do is:</p>\n\n<pre><code>features!{\n    Features,\n    vk::PhysicalDeviceFeatures,\n    robust_buffer_access =&gt; robustBufferAccess,\n    full_draw_index_uint32 =&gt; fullDrawIndexUint32,\n    image_cube_array =&gt; imageCubeArray,\n    ....\n}\n</code></pre>\n\n<p>Then I can fully supply the type, instead of relying on the ident being inside a hard coded module <code>vk::</code>.</p>\n\n<p>The problem is that I can not do this with <code>path</code> or <code>ty</code></p>\n\n<pre><code>$from_type{..}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected expression, found `PhysicalDeviceFeatures`\n  --&gt; \n   |\n38 |                 $from_type{\n   |                 ^^^^^^^^^^\n</code></pre>\n\n<p>and </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n  --&gt; /home/maik/projects/ashlib/ash/src/feature.rs:38:27\n   |\n38 |                 $from_type{\n   | \n</code></pre>\n\n<p>What symbol does <code>$from_type</code> need to be for this to work?</p>\n\n<hr>\n\n<p>I created a shorter example to express the problem that I am having more clearly (<a href=\"https://play.rust-lang.org/?gist=5f30bcb2ed940f78aa9e8214979091ff&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>):</p>\n\n<pre><code>mod foo {\n    struct Foo{\n        i: i32\n    }\n}\n\nmacro_rules! c_enum {\n    (\n        $name:ty\n\n    ) =&gt; {\n        fn new() -&gt; $name {\n            $name{\n                i: 42\n            }\n        }\n    }\n}\nc_enum!{\n    foo::Foo\n}\nfn main() {\n\n}\n</code></pre>\n"}, {"tags": ["constructor", "copy", "rust", "copy-constructor"], "comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 1, "creation_date": 1471272858, "post_id": 38957275, "comment_id": 65269091, "body": "There are exactly <code>0</code> copy ops there :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471273134, "post_id": 38957275, "comment_id": 65269266, "body": "Constructors are no different from other functions - you may be interested in the terms &quot;return value optimization&quot; and &quot;named return value optimization&quot;."}], "owner": {"reputation": 5551, "user_id": 1201488, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/cce2b982a2acdfb40f3c376489403f1e?s=128&d=identicon&r=PG", "display_name": "Ivan Velichko", "link": "https://stackoverflow.com/users/1201488/ivan-velichko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 32, "favorite_count": 0, "closed_date": 1471273100, "answer_count": 0, "score": 0, "last_activity_date": 1471273044, "creation_date": 1471272063, "last_edit_date": 1471273044, "question_id": 38957275, "link": "https://stackoverflow.com/questions/38957275/how-many-copy-operations-do-rust-constructors-perform", "closed_reason": "Duplicate", "title": "How many copy operations do Rust constructors perform?", "body": "<p>I have the following code:</p>\n\n<pre><code>struct SomeStruct {\n    foo: i32\n}\n\nimpl SomeStruct {\n    fn new() -&gt; SomeStruct {\n        SomeStruct { foo: 42 }\n    }\n}\n\nfn main() {\n    let val = SomeStruct::new();\n}\n</code></pre>\n\n<p>When one calls <code>SomeStruct::new()</code> how many copy operations are there? First, returning value was created on the stack of the <code>new</code> function. Is it copied right after it to the stack of the <code>main</code> function and the original one is destroyed due to leaving the scope (C++ behaviour)?</p>\n\n<p>And a more general use case:</p>\n\n<pre><code>struct SomeResource {\n    handle: i32  // For example, it's open file descriptor.\n}\n\nimpl SomeResource {\n    fn new() -&gt; SomeResource {\n        SomeResource { handle: 0 }\n    }\n}\n\nstruct SomeClient {\n    r: SomeResource\n}\n\nimpl SomeClient {\n    fn new() -&gt; SomeClient {\n        SomeClient { r: SomeResource::new() }\n    }\n}\n\nfn main() {\n    SomeClient::new();\n}\n</code></pre>\n\n<p>Is this a common way to create nested objects in Rust? </p>\n"}, {"tags": ["namespaces", "rust", "ffi"], "comments": [{"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 1, "creation_date": 1471232693, "post_id": 38948997, "comment_id": 65253002, "body": "This seems like an obvious &quot;right thing&quot; for the language to offer, but I&#39;m not sure if it does or not. If you find that this is not supported, you should request it on the Rust forums. In the mean time, couldn&#39;t you simply wrap every extern-C function in a Rust function and expose the wrapper functions instead of the underlying C functions?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1471233135, "post_id": 38948997, "comment_id": 65253082, "body": "Ah, thanks, I might do this, though it has the tradeoff that <code>#[link(name = &quot;some_lib&quot;)]</code> will be copy-pasted all over, any arguments, eg - to make static, will need to be copy-pasted too."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1471234646, "post_id": 38948997, "comment_id": 65253326, "body": "I&#39;m confused; why can&#39;t you just put them in a module?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1471235326, "post_id": 38948997, "comment_id": 65253451, "body": "@DK, at that works (am new and didn&#39;t use module yet), did you want to post answer? Else I will."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1471235951, "creation_date": 1471235951, "answer_id": 38949400, "question_id": 38948997, "link": "https://stackoverflow.com/questions/38948997/is-it-possible-to-declare-extern-c-functions-without-polluting-the-namespace/38949400#38949400", "title": "Is it possible to declare extern &quot;C&quot; functions without polluting the namespace?", "body": "<p>Just use a module.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>mod ffi {\n    extern \"C\" {\n        pub fn exit(_: i32) -&gt; !;\n    }\n}\n\nfn main() {\n    unsafe { ffi::exit(1); }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 879, "favorite_count": 0, "accepted_answer_id": 38949400, "answer_count": 1, "score": 3, "last_activity_date": 1471264835, "creation_date": 1471232284, "last_edit_date": 1471264835, "question_id": 38948997, "link": "https://stackoverflow.com/questions/38948997/is-it-possible-to-declare-extern-c-functions-without-polluting-the-namespace", "title": "Is it possible to declare extern &quot;C&quot; functions without polluting the namespace?", "body": "<p>In Rust, <code>extern C</code> functions can be declared in the outer scope:</p>\n\n<pre><code>#[link(name = \"some_lib\")]\nextern \"C\" {\n    pub fn foo(path: *const c_char);\n    pub fn bar(path: *const c_char);\n    pub fn baz(path: *const c_char);\n    pub fn fez(path: *const c_char);\n}\n</code></pre>\n\n<p>While acceptable, each function needs to be accessed directly <code>foo()</code> <code>bar()</code>... etc.</p>\n\n<p>Is it possible to declare these in a way they can be accessed using a common prefix?</p>\n\n<p>Example of how encapsulation could work:</p>\n\n<pre><code>namespace some_lib {\n    #[link(name = \"some_lib\")]\n    extern \"C\" {\n        pub fn foo(path: *const c_char);\n        // ... etc ...\n    }\n}\n\nfn some_rust_function() {\n    unsafe {\n        some_lib::foo();  // &lt;-- example usage\n    }\n\n}\n</code></pre>\n\n<p>Is something like this possible?</p>\n"}, {"tags": ["string", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471231080, "post_id": 38948669, "comment_id": 65252712, "body": "It&#39;s not accurate to assume that a <code>Path</code> can be converted to a C string. Platforms can and do use different encodings; which is why these abstractions exist in the first place. If you are limiting to UNIX-like systems, there&#39;s <a href=\"https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html\" rel=\"nofollow noreferrer\"><code>OsStrExt</code></a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1471231365, "post_id": 38948669, "comment_id": 65252761, "body": "Also note that you are also converting to a <code>String</code>, which must be UTF-8, although C strings don&#39;t require that."}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1471250717, "post_id": 38948854, "comment_id": 65258067, "body": "Locale would be a systematic guess on linux, but it&#39;s not really related to path encodings. Paths may be arbitrary bytes except 0."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 11, "last_activity_date": 1471251541, "last_edit_date": 1471251541, "creation_date": 1471231067, "answer_id": 38948854, "question_id": 38948669, "link": "https://stackoverflow.com/questions/38948669/whats-the-most-direct-way-to-convert-a-path-to-a-c-char/38948854#38948854", "title": "Whats the most direct way to convert a Path to a *c_char?", "body": "<p>It's not as easy as it looks. There's one piece of information you didn't provide: what encoding is the C function expecting the path to be in?</p>\n\n<p>On Linux, paths are \"just\" arrays of bytes (0 being invalid), and applications usually don't try to decode them. (However, they may have to decode them with a particular encoding to e.g. display them to the user, in which case they will usually try to decode them according to the current locale, which will often use the UTF-8 encoding.)</p>\n\n<p>On Windows, it's more complicated, because there are variations of API functions that use an \"ANSI\" code page and variations that use \"Unicode\" (UTF-16). Additionally, Windows doesn't support setting UTF-8 as the \"ANSI\" code page. This means that unless the library specifically expects UTF-8 and converts path to the native encoding itself, passing it an UTF-8 encoded path is definitely wrong (though it might <em>appear</em> to work for strings containing only ASCII characters).</p>\n\n<p>(I don't know about other platforms, but it's messy enough already.)</p>\n\n<p>In Rust, <a href=\"https://doc.rust-lang.org/stable/std/path/struct.Path.html\" rel=\"noreferrer\"><code>Path</code></a> is just a wrapper for <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.OsStr.html\" rel=\"noreferrer\"><code>OsStr</code></a>. <code>OsStr</code> uses a platform-dependent representation that happens to be compatible with UTF-8 when the string is indeed valid UTF-8, but non-UTF-8 strings use an unspecified encoding (on Windows, it's actually using <a href=\"https://simonsapin.github.io/wtf-8/\" rel=\"noreferrer\">WTF-8</a>, but this is not contractual; on Linux, it's just the array of bytes as is).</p>\n\n<p>Before you pass a path to a C function, you must determine what encoding it's expecting the string to be in, and if it doesn't match Rust's encoding, you'll have to convert it before wrapping it in a <code>CString</code>. Rust doesn't let you convert a <code>Path</code> or an <code>OsStr</code> to anything other than a <code>str</code> in a platform-independent way. On Unix-based targets, the <a href=\"https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html\" rel=\"noreferrer\"><code>OsStrExt</code></a> trait is available and provides access to the <code>OsStr</code> as a slice of bytes.</p>\n\n<p>Rust used to provide a <a href=\"https://doc.rust-lang.org/1.6.0/std/ffi/struct.OsStr.html\" rel=\"noreferrer\"><code>to_cstring</code></a> method on <code>OsStr</code>, but it was never stabilized, and it was deprecated in Rust 1.6.0, as it was realized that the behavior was inappropriate for Windows (it returned an UTF-8 encoded path, but Windows APIs don't support that!).</p>\n"}, {"tags": [], "owner": {"reputation": 17700, "user_id": 50902, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/19d468858e7d32da4a5bb6e49394fd52?s=128&d=identicon&r=PG", "display_name": "kmkaplan", "link": "https://stackoverflow.com/users/50902/kmkaplan"}, "is_accepted": false, "score": 6, "last_activity_date": 1561900049, "last_edit_date": 1561900049, "creation_date": 1561899554, "answer_id": 56825024, "question_id": 38948669, "link": "https://stackoverflow.com/questions/38948669/whats-the-most-direct-way-to-convert-a-path-to-a-c-char/56825024#56825024", "title": "Whats the most direct way to convert a Path to a *c_char?", "body": "<p>As <code>Path</code> is just a thin wrapper around <code>OsStr</code>, you could nearly pass it as-is to your C function. But to be a valid C string we have to add the NUL terminating byte. Thus we <em>must</em> allocate a <code>CString</code>.</p>\n\n<p>On the other hand, conversion to a <code>str</code> is both risky (what if the <code>Path</code> is not a valid UTF-8 string?) and an unnecessary cost: I use <code>as_bytes()</code> instead of <code>to_str()</code>.</p>\n\n<pre><code>fn example_c_wrapper&lt;P: AsRef&lt;std::path::Path&gt;&gt;(path: P) {\n    let path_str_c = CString::new(path.as_ref().as_os_str().as_bytes()).unwrap();\n\n    some_c_function(path_str_c.as_ptr());\n}\n</code></pre>\n\n<p>This is fo Unix. I do not know how it works for Windows.</p>\n"}, {"tags": [], "owner": {"reputation": 3582, "user_id": 396304, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/bbc02691a4f1d8ac2c1acb2e96134d16?s=128&d=identicon&r=PG", "display_name": "bolinfest", "link": "https://stackoverflow.com/users/396304/bolinfest"}, "is_accepted": false, "score": 1, "last_activity_date": 1566881507, "creation_date": 1566881507, "answer_id": 57667836, "question_id": 38948669, "link": "https://stackoverflow.com/questions/38948669/whats-the-most-direct-way-to-convert-a-path-to-a-c-char/57667836#57667836", "title": "Whats the most direct way to convert a Path to a *c_char?", "body": "<p>If you are trying to produce a <code>Vec&lt;u8&gt;</code>, I usually phone it in and do:</p>\n\n<pre><code>#[cfg(unix)]\nfn path_to_bytes&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Vec&lt;u8&gt; {\n    use std::os::unix::ffi::OsStrExt;\n    path.as_ref().as_os_str().as_bytes().to_vec()\n}\n\n#[cfg(not(unix))]\nfn path_to_bytes&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; Vec&lt;u8&gt; {\n    // On Windows, could use std::os::windows::ffi::OsStrExt to encode_wide(),\n    // but you end up with a Vec&lt;u16&gt; instead of a Vec&lt;u8&gt;, so that doesn't\n    // really help.\n    path.as_ref().to_string_lossy().to_string().into_bytes()\n}\n</code></pre>\n\n<p>Knowing full well that non-UTF8 paths on non-UNIX will not be supported correctly. Note that you might need a <code>Vec&lt;u8&gt;</code> if working with Thrift/protocol buffers as opposed to a C API.</p>\n"}, {"tags": [], "owner": {"reputation": 709, "user_id": 10126273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6trXt.png?s=128&g=1", "display_name": "Tenders McChiken", "link": "https://stackoverflow.com/users/10126273/tenders-mcchiken"}, "is_accepted": false, "score": 4, "last_activity_date": 1575713872, "creation_date": 1575713872, "answer_id": 59224987, "question_id": 38948669, "link": "https://stackoverflow.com/questions/38948669/whats-the-most-direct-way-to-convert-a-path-to-a-c-char/59224987#59224987", "title": "Whats the most direct way to convert a Path to a *c_char?", "body": "<p>If your goal is to convert a path to some <em>sequence of bytes</em> that is interpreted as a \"native\" path on whatever platform the code was compiled for, then the most direct way to do this is by using the <code>OsStrExt</code>of each platform you want to support:</p>\n\n<pre><code>let path = ..;\nlet mut buf = Vec::new();\n\n#[cfg(unix)] {\n    use std::os::unix::ffi::OsStrExt;\n    buf.extend(path.as_os_str().as_bytes());\n    buf.push(0);\n}\n\n#[cfg(windows)] {\n    use std::os::windows::ffi::OsStrExt;\n    buf.extend(path.as_os_str()\n               .encode_wide()\n               .chain(Some(0))\n               .map(|b| {\n                   let b = b.to_ne_bytes();\n                   b.get(0).map(|s| *s).into_iter().chain(b.get(1).map(|s| *s))\n               })\n               .flatten());\n}\n</code></pre>\n\n<p>This code[1] gives you a buffer of bytes that represents the path as a series of null-terminated bytes when you run it on linux, and represents \"unicode\" (utf16) when run on windows. You could add a fallback that converts <code>OsStr</code> to a <code>str</code> on other platforms, but I strongly recommend against that. (see why bellow) </p>\n\n<p>For windows, you'll want to cast your buffer pointer to <code>wchar_t *</code> before using it with unicode functions on Windows (e.g. <code>_wfopen</code>). This code assumes that <code>wchar_t</code> is two bytes large, and that the buffer is properly aligned to <code>wchar_t</code>s. </p>\n\n<p>On the Linux side, just use the pointer as-is. </p>\n\n<p>About converting paths to unicode strings: <strong>Don't</strong>. Contrary to recommendations here and elsewhere, blindly converting a path to utf8 is not the correct way to handle a system path. Requiring that paths be valid unicode will cause your code to fail when (not if) it encounters paths that are not valid unicode. If you're handling real world paths, you <em>will</em> inevitably be handling non-utf8 paths. Doing it right the first time will help avoid a lot of pain and misery in the long run.</p>\n\n<p>[1]: This code was taken directly out of a library I'm working on (feel free to reuse). It has been tested against both linux and 64-bit windows via wine. </p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3046, "favorite_count": 3, "answer_count": 4, "score": 21, "last_activity_date": 1575713872, "creation_date": 1471229293, "last_edit_date": 1485209518, "question_id": 38948669, "link": "https://stackoverflow.com/questions/38948669/whats-the-most-direct-way-to-convert-a-path-to-a-c-char", "title": "Whats the most direct way to convert a Path to a *c_char?", "body": "<p>Given a <code>std::path::Path</code>, what's the most direct way to convert this to a null-terminated <code>std::os::raw::c_char</code>? (for passing to C functions that take a path).</p>\n\n<pre><code>use std::ffi::CString;\nuse std::os::raw::c_char;\nuse std::os::raw::c_void;\n\nextern \"C\" {\n    some_c_function(path: *const c_char);\n}\n\nfn example_c_wrapper(path: std::path::Path) {\n    let path_str_c = CString::new(path.as_os_str().to_str().unwrap()).unwrap();\n\n    some_c_function(path_str_c.as_ptr());\n}\n</code></pre>\n\n<p>Is there a way to avoid having so many intermediate steps?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Path -&gt; OsStr -&gt; &amp;str -&gt; CString -&gt; as_ptr()\n</code></pre>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471216014, "post_id": 38947231, "comment_id": 65249969, "body": "To be clear, your performance tests have isolated the performance issue to which specific part of the included code?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471216193, "post_id": 38947231, "comment_id": 65250019, "body": "On my machine, calling the method (fixed to compile and with a basic equality check in place of the comment) takes 4.7 seconds where <code>line</code> is 100MiB of &quot;a&quot; followed by a &quot;b&quot; and <code>match</code> is &quot;ab&quot; (this time includes the time to build that string). What kind of time / performance are you looking for?"}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471216598, "post_id": 38947231, "comment_id": 65250096, "body": "@Shepmaster fixed. And the actual non MWE is <a href=\"https://github.com/Aaronepower/tokei/blob/master/src/lib/utils/fs.rs#L18\" rel=\"nofollow noreferrer\">github.com/Aaronepower/tokei/blob/master/src/lib/utils/&hellip;</a> which I&#39;ve tested through flamegraph profiling running against the huge source trees(e.g. Linux)."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471217445, "post_id": 38947231, "comment_id": 65250259, "body": "@Shepmaster now it is. It is also very hard to test from mobile."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471218610, "post_id": 38947231, "comment_id": 65250499, "body": "We are more than happy to wait for posters to get the question in order before posting it the first time (in fact, we will never even know). Maybe that means using a different computer. If you find yourself trying to use the playground on mobile a lot, <a href=\"http://play.integer32.com/\" rel=\"nofollow noreferrer\">the alternate Playground</a> has a &quot;simple editor&quot; mode that is much easier to use with virtual keyboards."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1471218389, "creation_date": 1471218389, "answer_id": 38947623, "question_id": 38947231, "link": "https://stackoverflow.com/questions/38947231/iterating-through-a-window-of-a-string-without-collect/38947623#38947623", "title": "Iterating through a Window of a String without collect", "body": "<blockquote>\n  <p>The method needs to be guaranteed to be safe against Unicode.</p>\n</blockquote>\n\n<p><code>pattern.len()</code> returns the number of <strong>bytes</strong> that the string requires, so it's already possible that your code is doing the wrong thing. I might suggest you check out tools like <a href=\"https://github.com/BurntSushi/quickcheck\" rel=\"nofollow\">QuickCheck</a> to produce arbitrary strings that include Unicode.</p>\n\n<p>Here's my test harness:</p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let mut haystack: String = iter::repeat('a').take(1024*1024*100).collect();\n    haystack.push('b');\n\n    println!(\"{}\", haystack.len());\n}\n</code></pre>\n\n<p>And I'm compiling and timing via <code>cargo build --release &amp;&amp; time ./target/release/x</code>. Creating the string by itself takes <strong>0.274s</strong>.</p>\n\n<p>I used this version of your original code just to have some kind of comparison:</p>\n\n<pre><code>fn foo(line: &amp;str, pattern: &amp;str) -&gt; bool {\n    for window in line.chars().collect::&lt;Vec&lt;char&gt;&gt;().windows(pattern.len()) {\n        let mut bar = String::new();\n        for ch in window {\n            bar.push(*ch);\n        }\n\n        if bar == pattern { return true }\n    }\n\n    false\n}\n</code></pre>\n\n<p>This takes 4.565s, or <strong>4.291s</strong> for just <code>foo</code>.</p>\n\n<p>The first thing I see is that there is a lot of allocation happening on the inner loop. The code creates, allocates, and destroys the <code>String</code> for each iteration. Let's reuse the <code>String</code> allocation:</p>\n\n<pre><code>fn foo_mem(line: &amp;str, pattern: &amp;str) -&gt; bool {\n    let mut bar = String::new();\n\n    for window in line.chars().collect::&lt;Vec&lt;char&gt;&gt;().windows(pattern.len()) {\n        bar.clear();\n        bar.extend(window.iter().cloned());\n\n        if bar == pattern { return true }\n    }\n\n    false\n}\n</code></pre>\n\n<p>This takes 2.155s or <strong>1.881s</strong> for just <code>foo_mem</code>.</p>\n\n<p>Continuing on, another extraneous allocation is the one for the <code>String</code> <em>at all</em>. We already have bytes that look like the right thing, so let's reuse them:</p>\n\n<pre><code>fn foo_no_string(line: &amp;str, pattern: &amp;str) -&gt; bool {\n    let indices: Vec&lt;_&gt; = line.char_indices().map(|(i, _c)| i).collect();\n    let l = pattern.chars().count();\n\n    for window in indices.windows(l + 1) {\n        let first_idx = *window.first().unwrap();\n        let last_idx = *window.last().unwrap();\n\n        let bar = &amp;line[first_idx..last_idx];\n\n        if bar == pattern { return true }\n    }\n\n    // Do the last pair\n    {\n        let last_idx = indices[indices.len() - l];\n\n        let bar = &amp;line[last_idx..];\n        if bar == pattern { return true }\n    }\n\n    false\n}\n</code></pre>\n\n<p>This code is ugly and unidiomatic. I'm pretty sure some thinking (that I'm currently too lazy to do) would make it look a lot better.</p>\n\n<p>This takes 1.409s or <strong>1.135s</strong> for just <code>foo_mem</code>.</p>\n\n<p>As this is <strong>~25%</strong> of the original time, <a href=\"https://en.wikipedia.org/wiki/Amdahl%27s_law\" rel=\"nofollow\">Amdahl's Law</a> suggests this is a reasonable stopping point.</p>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471266785, "post_id": 38953813, "comment_id": 65265374, "body": "@Shepmaster True, I&#39;ve clarified the wording."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471267400, "post_id": 38953813, "comment_id": 65265712, "body": "Do you think the performance boost is because you don&#39;t need to allocate the <code>Vec</code> at all? How does your solution avoid the ugly corner case that <code>char_indices</code> doesn&#39;t return an index for &quot;the character after the end&quot; that mine needed an extra block for?"}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1471290612, "post_id": 38953813, "comment_id": 65278676, "body": "@Veedrac The larger example code actually <a href=\"https://play.rust-lang.org/?gist=84e865af19aafea8910f8458183dc976&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">fails in this test</a> as it loses the first character in the <code>next()</code>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1471292673, "post_id": 38953813, "comment_id": 65279686, "body": "@Aaronepower Ah, good point. I never actually ran the later, so I&#39;m just glad it kind&#39;a worked at all. They should be fixed now."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471292936, "post_id": 38953813, "comment_id": 65279829, "body": "@Shepmaster Probably - the <code>Vec</code> is ~8x the size of the input, after all, and your inner loop has two <code>unwrap</code>s that my version doesn&#39;t. I avoid the end case by using <code>ends.chain(Some(line.len()))</code>. (Sadly iterating over a <code>chain</code> doesn&#39;t compile well, so this comes at a very minor performance cost relative to copying the body.) The main difference between that and the version with <code>starts_with</code> is that the later only parses the unicode once."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1527943536, "post_id": 38953813, "comment_id": 88324067, "body": "I feel that <code>let ends = line.char_indices().map(|(i, _)| i).skip(pattern_len);</code> is a more explicit way to do that bit."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1527945532, "post_id": 38953813, "comment_id": 88324622, "body": "@trentcl <code>skip</code> has per-iteration overhead, since it wraps an iterator."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 4, "last_activity_date": 1471292620, "last_edit_date": 1471292620, "creation_date": 1471258789, "answer_id": 38953813, "question_id": 38947231, "link": "https://stackoverflow.com/questions/38947231/iterating-through-a-window-of-a-string-without-collect/38953813#38953813", "title": "Iterating through a Window of a String without collect", "body": "<p>An improvement on Shepmaster's final solution, which significantly lowers overhead (by a factor of ~1.5), is</p>\n\n<pre><code>fn foo(line: &amp;str, pattern: &amp;str) -&gt; bool {\n    let pattern_len = pattern.chars().count();\n\n    let starts   = line.char_indices().map(|(i, _)| i);\n    let mut ends = line.char_indices().map(|(i, _)| i);\n\n    // Itertools::dropping\n    if pattern_len != 0 { ends.nth(pattern_len - 1); }\n\n    for (start, end) in starts.zip(ends.chain(Some(line.len()))) {\n        let bar = &amp;line[start..end];\n        if bar == pattern { return true }\n    }\n\n    false\n}\n</code></pre>\n\n<p>That said, your code from the Github page is a little odd. For instance, you try to deal with different length open and close tags with a wordier version of</p>\n\n<pre><code>let length = cmp::max(comment.len(), comment_end.len());\n</code></pre>\n\n<p>but your check</p>\n\n<pre><code>if window.contains(comment)\n</code></pre>\n\n<p>could then trigger multiple times!</p>\n\n<p>Much better would be to just iterate over shrinking slices. In the mini example this would be</p>\n\n<pre><code>fn foo(line: &amp;str, pattern: &amp;str) -&gt; bool {\n    let mut chars = line.chars();\n    loop {\n        let bar = chars.as_str();\n        if bar.starts_with(pattern) { return true }\n        if chars.next().is_none() { break }\n    }\n\n    false\n}\n</code></pre>\n\n<p>(Note that this once again ends up again improving performance by another factor of ~1.5.)</p>\n\n<p>and in a larger example this would be something like</p>\n\n<pre><code>let mut is_in_comments = 0u64;\n\nlet start = match line.find(comment) {\n    Some(start) =&gt; start,\n    None =&gt; return false,\n};\n\nlet end = match line.rfind(comment_end) {\n    Some(end) =&gt; end,\n    None =&gt; return true,\n};\n\nlet mut chars = line[start..end + comment_end.len()].chars();\nloop {\n    let window = chars.as_str();\n\n    if window.starts_with(comment) {\n        if nested {\n            is_in_comments += 1;\n        } else {\n            is_in_comments = 1;\n        }\n    } else if window.starts_with(comment_end) {\n        is_in_comments = is_in_comments.saturating_sub(1);\n    }\n\n    if chars.next().is_none() { break }\n}\n</code></pre>\n\n<p>Note that this still counts overlaps, so <code>/*/</code> might count as an opening <code>/*</code> immediately followed by a closing <code>*/</code>.</p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1001, "favorite_count": 0, "accepted_answer_id": 38953813, "answer_count": 2, "score": 1, "last_activity_date": 1471292620, "creation_date": 1471214241, "last_edit_date": 1471217370, "question_id": 38947231, "link": "https://stackoverflow.com/questions/38947231/iterating-through-a-window-of-a-string-without-collect", "title": "Iterating through a Window of a String without collect", "body": "<p>I need to iterate through and compare a window of unknown length of a string. My current implementation works, however I've done performance tests against it, and it is very inefficient. The method needs to be guaranteed to be safe against Unicode.</p>\n\n<pre><code>fn foo(line: &amp;str, patt: &amp;str) {\n    for window in line.chars().collect::&lt;Vec&lt;char&gt;&gt;().windows(patt.len()) {\n        let mut bar = String::new();\n        for ch in window {\n            bar.push(*ch);\n        }\n        // perform various comparison checks\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1471201249, "post_id": 38945340, "comment_id": 65246141, "body": "@antoyo: Indeed, well spotted."}, {"owner": {"reputation": 55, "user_id": 6714938, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2861903979075e0dd7d75e88e7ead082?s=128&d=identicon&r=PG&f=1", "display_name": "xilec", "link": "https://stackoverflow.com/users/6714938/xilec"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1471254128, "post_id": 38945340, "comment_id": 65259484, "body": "Thanks! I forget about necessity lifetime for traits."}], "owner": {"reputation": 55, "user_id": 6714938, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2861903979075e0dd7d75e88e7ead082?s=128&d=identicon&r=PG&f=1", "display_name": "xilec", "link": "https://stackoverflow.com/users/6714938/xilec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 60, "favorite_count": 0, "closed_date": 1471211614, "answer_count": 0, "score": 0, "last_activity_date": 1471199503, "creation_date": 1471199503, "question_id": 38945340, "link": "https://stackoverflow.com/questions/38945340/save-values-of-any-type", "closed_reason": "Duplicate", "title": "Save values of any type", "body": "<p>I try to save changes of struct fields in boxed struct <code>ValuesChangingImpl&lt;T&gt;</code> and hide fields type under trait <code>ValuesChanging</code> with code:\n</p>\n\n<pre><code>use std::any::Any;\nuse std::clone::Clone;\n\n//#[derive(Clone)]\npub enum HistoryItem {\n    FieldChanging(Box&lt;ValuesChanging&gt;)\n    // other changing variants\n}\n\npub trait ValuesChanging/*: Clone*/ {\n    fn get_old_value&lt;T: Any + Clone&gt;(&amp;self) -&gt; &amp;T;\n    fn get_new_value&lt;T: Any + Clone&gt;(&amp;self) -&gt; &amp;T;\n}\n\npub struct ValuesChangingImpl&lt;T&gt; where T: Any + Clone {\n    old_value: Box&lt;T&gt;,\n    new_value: Box&lt;T&gt;\n}\n\nimpl&lt;T:Any + Clone&gt; ValuesChangingImpl&lt;T&gt; {\n    pub fn new(old_value: Box&lt;T&gt;, new_value: Box&lt;T&gt;) -&gt; Self {\n        ValuesChangingImpl {\n            old_value: old_value,\n            new_value: new_value\n        }\n    }\n}\n\nimpl&lt;T:Any + Clone&gt; Clone for ValuesChangingImpl&lt;T&gt; {\n    fn clone(&amp;self) -&gt; Self {\n        ValuesChangingImpl::new(\n            self.old_value.clone(),\n            self.new_value.clone())\n    }\n}\n\nimpl&lt;T:Any + Clone&gt; ValuesChanging for ValuesChangingImpl&lt;T&gt; {\n    fn get_old_value&lt;ValueType: Any + Clone&gt;(&amp;self) -&gt; &amp;ValueType {\n        self.old_value.downcast_ref::&lt;T&gt;().unwrap()\n    }\n\n    fn get_new_value&lt;ValueType: Any + Clone&gt;(&amp;self) -&gt; &amp;ValueType {\n        self.new_value.downcast_ref::&lt;T&gt;().unwrap()\n    }\n}\n</code></pre>\n\n<p>Compilation of this code fail with error:</p>\n\n<pre><code>error: the trait `ValuesChanging` cannot be made into an object [--explain E0038]\n --&gt; &lt;anon&gt;:6:19\n6 |&gt;     FieldChanging(Box&lt;ValuesChanging&gt;)\n  |&gt;                   ^^^^^^^^^^^^^^^^^^^^\nnote: method `get_old_value` has generic type parameters\nnote: method `get_new_value` has generic type parameters\n</code></pre>\n\n<p>If uncomment adding <code>Clone</code> trait</p>\n\n<pre><code>error: the trait `ValuesChanging` cannot be made into an object [--explain E0038]\n --&gt; &lt;anon&gt;:6:23\n6 |&gt;         FieldChanging(Box&lt;ValuesChanging&gt;)\n  |&gt;                       ^^^^^^^^^^^^^^^^^^^^\nnote: the trait cannot require that `Self : Sized`\n</code></pre>\n\n<p>As I understand, the cause is attempt of using <code>trait</code> (as unsized type on stack) in a field itself. But what is the reason when I put it into <code>Box</code>? </p>\n\n<p>Is it just not implemented in type system of Rust or there is more fundamental reason of those errors?\nIs there other options to implement this behavior?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471193026, "post_id": 38944157, "comment_id": 65243566, "body": "See also <a href=\"http://stackoverflow.com/q/32044301/155423\">stackoverflow.com/q/32044301/155423</a>, <a href=\"http://stackoverflow.com/q/28385339/155423\">stackoverflow.com/q/28385339/155423</a>, <a href=\"http://stackoverflow.com/q/36936221/155423\">stackoverflow.com/q/36936221/155423</a>."}, {"owner": {"reputation": 3855, "user_id": 342882, "user_type": "registered", "accept_rate": 34, "profile_image": "https://www.gravatar.com/avatar/c13b4dc095a1bcc25e008effdd5cf07a?s=128&d=identicon&r=PG", "display_name": "Daneel Yaitskov", "link": "https://stackoverflow.com/users/342882/daneel-yaitskov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471194073, "post_id": 38944157, "comment_id": 65243874, "body": "I didn&#39;t get the answer from the link. I don&#39;t have callbacks nor lambdas."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471194283, "post_id": 38944157, "comment_id": 65243930, "body": "None of the <b>3</b> links I provided (or the question that this is marked as a duplicate of) give you the answer?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471211551, "post_id": 38944157, "comment_id": 65248940, "body": "I feel like pointers are about the worst choice out of <a href=\"http://stackoverflow.com/questions/30681468/passing-mutable-self-reference-to-method-of-owned-object\">the possible ones on the linked duplicate</a>, but it <i>is</i> valid. It&#39;s really a shame because you don&#39;t need <code>unsafe</code> code whatsoever."}], "owner": {"reputation": 3855, "user_id": 342882, "user_type": "registered", "accept_rate": 34, "profile_image": "https://www.gravatar.com/avatar/c13b4dc095a1bcc25e008effdd5cf07a?s=128&d=identicon&r=PG", "display_name": "Daneel Yaitskov", "link": "https://stackoverflow.com/users/342882/daneel-yaitskov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 111, "favorite_count": 0, "closed_date": 1471192980, "answer_count": 0, "score": 0, "last_activity_date": 1471211452, "creation_date": 1471191677, "last_edit_date": 1471211452, "question_id": 38944157, "link": "https://stackoverflow.com/questions/38944157/how-pass-self-mutable-reference-after-accessing-its-struct-member", "closed_reason": "Duplicate", "title": "How pass self mutable reference after accessing its struct member?", "body": "<p>Help me to translate this basic pattern to Rust. The Rust compiler complains about ownership; it cannot pass the <code>self</code> reference to the <code>close</code> method because immutable references to <code>self.files</code> are still alive.</p>\n\n<p>I'm confused because <code>HashMap::get</code> is compete and it's not an iterator, so what is the problem in changing the <code>files</code> object?</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct File {\n    ino: u64\n}\n\nstruct Filesystem {\n    files: HashMap&lt;u64, File&gt;\n}\n\nimpl File {\n    fn close(&amp;self, fs: &amp;mut Filesystem) {\n        fs.files.remove(&amp;self.ino);\n    }\n}\n\nimpl Filesystem {\n    fn release(&amp;mut self, ino: u64) {\n        let file = self.files.get(&amp;ino);\n        if file.is_some() {\n            file.unwrap().close(self)\n        }\n    }\n}\n\nfn main() {\n    let mut fs = Filesystem { files: HashMap::new() };\n    fs.release(1)\n}\n</code></pre>\n\n<p>The compiler error is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow `*self` as mutable because `self.files` is also borrowed as immutable [E0502]\n            file.unwrap().close(self)\n                                ^~~~\nnote: immutable borrow occurs here\n        let file = self.files.get(&amp;ino);\n                   ^~~~~~~~~~\nnote: immutable borrow ends here\n    }\n    ^\nhelp: run `rustc --explain E0502` to see a detailed explanation\n</code></pre>\n\n<hr>\n\n<p>I ended up with pointers; it's comprehensible and fast. I don't see the advantages of <code>RefCell</code> because the error will be encountered at runtime anyway, so it's the same segfault with a different message.</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct File {\n    ino: u64\n}\n\nstruct Filesystem {\n    files: HashMap&lt;u64, File&gt;\n}\n\nimpl File {\n    fn close(&amp;self, fs: *mut Filesystem) {\n        unsafe { (*fs).files.remove(&amp;self.ino); }\n    }\n}\n\nimpl Filesystem {\n    fn release(&amp;mut self, ino: u64) {\n        let p = self as *mut Filesystem;\n        let file = self.files.get(&amp;ino);\n        if file.is_some() {\n            file.unwrap().close(p)\n        }\n    }\n}\n\nfn main() {\n    let mut fs = Filesystem { files: HashMap::new() };\n    fs.release(1)\n}\n</code></pre>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471180106, "post_id": 38941025, "comment_id": 65240057, "body": "See also <a href=\"http://stackoverflow.com/q/28136739/155423\">Is it possible to control the size of a member array using the type parameter of a generic?</a> and all the linked duplicates."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 9, "last_activity_date": 1526309920, "last_edit_date": 1526309920, "creation_date": 1471170090, "answer_id": 38941267, "question_id": 38941025, "link": "https://stackoverflow.com/questions/38941025/how-to-define-a-function-with-a-generic-fixed-length-array/38941267#38941267", "title": "How to define a function with a generic fixed-length array?", "body": "<p><strong>No</strong>, it's not possible as of Rust 1.25. (May 2018). This (often called \"type level integers\") is a long requested feature, but it's not yet available in Rust. </p>\n\n<p>There have been several RFCs on this topic. Recently, one finally got accepted: <strong><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md\" rel=\"nofollow noreferrer\">RFC 2000 -- Const Generics</a></strong>. However, it is not implemented yet (<a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"nofollow noreferrer\">tracking issue</a>). I would expect implementation to land end 2018 earliest, but more likely 2019.</p>\n\n<p>There are a few crates simulating type level integers like <a href=\"https://github.com/paholg/typenum\" rel=\"nofollow noreferrer\">type-num</a>. It's kind of usable, but I wouldn't call it a full alternative.</p>\n\n<p>Please also note: sometimes it's not really necessary to use type level integer. Your example would work with dynamic sizes, too. Better even: because your function is so small, it's likely to be inlined and then the optimizer can probably figure out all sizes at compile time. So if performance was the only reason to use type level integers, it might not be necessary.</p>\n"}, {"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 1, "last_activity_date": 1488327454, "creation_date": 1488327454, "answer_id": 42521074, "question_id": 38941025, "link": "https://stackoverflow.com/questions/38941025/how-to-define-a-function-with-a-generic-fixed-length-array/42521074#42521074", "title": "How to define a function with a generic fixed-length array?", "body": "<p>First, there are many many APIs for which type-level numbers feel tempting, but you'd increase flexibility by instead using associated types more directly. </p>\n\n<p>That said..</p>\n\n<p>There is a <a href=\"https://github.com/fizyk20/generic-array\" rel=\"nofollow noreferrer\">generic-array crate</a> that can almost do this right now, using the aforementioned type-num, but it's gets kinda messy, but should do what you want here.  I avoid it myself though. </p>\n\n<p>There is language level progress towards this in both <a href=\"https://github.com/rust-lang/rfcs/pull/1915\" rel=\"nofollow noreferrer\">rfcs</a> and the <a href=\"https://github.com/rust-lang/rust/pull/40008\" rel=\"nofollow noreferrer\">compiler</a>, as well as ongoing discussion around full const-dependent types.  I'd therefore kinda expect the generic-array crate to be deprecated in the not too distant future.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3080, "favorite_count": 0, "closed_date": 1560254705, "accepted_answer_id": 38941267, "answer_count": 2, "score": 8, "last_activity_date": 1526309920, "creation_date": 1471168146, "last_edit_date": 1471180226, "question_id": 38941025, "link": "https://stackoverflow.com/questions/38941025/how-to-define-a-function-with-a-generic-fixed-length-array", "closed_reason": "Duplicate", "title": "How to define a function with a generic fixed-length array?", "body": "<p>Take an operation on arrays, squaring the length for example.</p>\n\n<p>It's useful to have a generic type (such as <code>f32</code>, <code>f64</code>), but you may also want a generic length, but <em>not</em> a dynamic length.</p>\n\n<p>Here is an example of a squared function that takes 2 arguments.</p>\n\n<pre><code>use std::ops::{Add, AddAssign, Sub, Mul};\n\nconst CAN_THIS_BE_GENERIC: usize = 2;\n\nfn squared_length&lt;T&gt;(\n    a: &amp;[T; CAN_THIS_BE_GENERIC],\n    b: &amp;[T; CAN_THIS_BE_GENERIC]\n) -&gt; T\n    where T:\n        Copy +\n        Add +\n        AddAssign +\n        Add&lt;Output=T&gt; +\n        Sub&lt;Output=T&gt; +\n        Mul&lt;Output=T&gt;\n{\n    let mut d: T = a[0] - a[0];  // zero :(\n    for (elem_a, elem_b) in a.iter().zip(b.iter()) {\n        let elem_dim: T = *elem_a - *elem_b;\n        d += elem_dim * elem_dim;\n    }\n    return d;\n}\n\nfn main() {\n    println!(\"Length A! {}\", squared_length::&lt;f64&gt;(&amp;[0.5, 3.5], &amp;[10.0, 0.0]));\n    println!(\"Length B! {}\", squared_length::&lt;i32&gt;(&amp;[10, -6], &amp;[4, 8]));\n    println!(\"Length C! {}\", squared_length::&lt;f32&gt;(&amp;[-3.0, 0.0], &amp;[9.0, 0.0]));\n}\n</code></pre>\n\n<p>Currently the vector length is set at 2.</p>\n\n<p>Is it possible to define generic functions where the size is not dynamic, but generic, the same way types can be generic?</p>\n"}, {"tags": ["thread-safety", "closures", "rust", "threadpool", "channel"], "answers": [{"tags": [], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "is_accepted": true, "score": 3, "last_activity_date": 1471170447, "creation_date": 1471170447, "answer_id": 38941319, "question_id": 38940965, "link": "https://stackoverflow.com/questions/38940965/unable-to-send-a-str-between-threads-because-it-does-not-live-long-enough/38941319#38941319", "title": "Unable to send a &amp;str between threads because it does not live long enough", "body": "<p><code>a_name</code> is <code>&amp;str</code> borrowed from <code>tag</code>. Its lifetime is therefore bounded by <code>tag</code>. Sending non <code>'static</code> references down a channel to another thread is unsafe. It refers to something on the threads stack which might not even exist anymore once the receiver tries to access it.\nIn your case you should promote <code>a_name</code> to an owned value of type <code>String</code>, which will be moved to the receiver thread.</p>\n\n<pre><code>tx.send(a_name.to_owned()).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 171, "user_id": 2741111, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19e22f38e2b1275e37a10ff296e1767f?s=128&d=identicon&r=PG&f=1", "display_name": "pansen", "link": "https://stackoverflow.com/users/2741111/pansen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 38941319, "answer_count": 1, "score": 2, "last_activity_date": 1471180567, "creation_date": 1471167620, "last_edit_date": 1471180567, "question_id": 38940965, "link": "https://stackoverflow.com/questions/38940965/unable-to-send-a-str-between-threads-because-it-does-not-live-long-enough", "title": "Unable to send a &amp;str between threads because it does not live long enough", "body": "<p>Given the following simplified program: </p>\n\n<pre><code>#[macro_use] extern crate log;\nextern crate ansi_term;\nextern crate fern;\nextern crate time;\nextern crate threadpool;\nextern crate id3;\n\nmod logging;\n\nuse std::process::{exit, };\nuse ansi_term::Colour::{Yellow, Green};\nuse threadpool::ThreadPool;\nuse std::sync::mpsc::channel;\nuse std::path::{Path};\nuse id3::Tag;\n\nfn main() {\n    logging::setup_logging();\n\n    let n_jobs = 2;\n\n    let files = vec!(\n        \"/tmp/The Dynamics - Version Excursions/01-13- Move on Up.mp3\",\n        \"/tmp/The Dynamics - Version Excursions/01-09- Whole Lotta Love.mp3\",\n        \"/tmp/The Dynamics - Version Excursions/01-10- Feel Like Making Love.mp3\"\n    );\n    let pool = ThreadPool::new(n_jobs);\n    let (tx, rx) = channel();\n    let mut counter = 0;\n\n    for file_ in files {\n        let file_ = Path::new(file_);\n        counter = counter + 1;\n        let tx = tx.clone();\n\n        pool.execute(move || {\n            debug!(\"sending {} from thread\", Yellow.paint(counter.to_string()));\n\n            let tag = Tag::read_from_path(file_).unwrap();\n            let a_name = tag.artist().unwrap();\n\n            debug!(\"recursed file from: {} {}\",\n                   Green.paint(a_name), file_.display());\n\n            tx.send(\".\").unwrap();\n            // TODO amb: not working..\n            // tx.send(a_name).unwrap();\n        });\n    }\n\n    for value in rx.iter().take(counter) {\n        debug!(\"receiving {} from thread\", Green.paint(value));\n    }\n    exit(0);\n}\n</code></pre>\n\n<p>Everything works as expected, unless the one commented line (<code>tx.send(a_name).unwrap();</code>) is put back in. In that case I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `tag` does not live long enough\n            let a_name = tag.artist().unwrap();\n                         ^~~\n    note: reference must be valid for the static lifetime...\nnote: ...but borrowed value is only valid for the block suffix following statement 1 at 39:58\n            let tag = Tag::read_from_path(file_).unwrap();\n            let a_name = tag.artist().unwrap();\n\n            debug!(\"recursed file from: {} {}\",\n                   Green.paint(a_name), file_.display());\n\n...\n</code></pre>\n\n<p>Generally I understand what the compiler tells me, but I don't see a problem since the variable <code>tag</code> is defined inside of the closure block. The only problem that I can guess is, that the variable <code>tx</code> is <code>clone</code>d outside and therefore can collide with the lifetime of <code>tag</code>. </p>\n\n<p>My goal is to put all the current logic in the thread-closure inside of the thread, since this is the \"processing\" I want to spread to multiple threads. How can I accomplish this, but still send some value to the longer existing <code>tx</code>?</p>\n\n<p>I'm using the following Rust version: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc --version\nrustc 1.9.0 (e4e8b6668 2016-05-18)\n$ cargo --version\ncargo 0.10.0-nightly (10ddd7d 2016-04-08)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1543, "user_id": 262644, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a6216021614518eea6c3d22b0924d23b?s=128&d=identicon&r=PG", "display_name": "ajmurmann", "link": "https://stackoverflow.com/users/262644/ajmurmann"}, "edited": false, "score": 0, "creation_date": 1471214104, "post_id": 38937094, "comment_id": 65249579, "body": "Thanks! This pointed me to the right direction. I already had tried to use std::error::Error, but also had added &quot;postgres::erroro:Error&quot;. Having both broke it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1471214637, "last_edit_date": 1471214637, "creation_date": 1471123143, "answer_id": 38937094, "question_id": 38936996, "link": "https://stackoverflow.com/questions/38936996/cannot-get-description-of-postgres-error/38937094#38937094", "title": "Cannot get description of postgres error?", "body": "<p>Since you did not provide an <a href=\"/help/mcve\">MCVE</a>, I had to produce this one:</p>\n\n<pre><code>extern crate postgres;\n\nfn main() {\n    let result: Result&lt;_, postgres::error::Error&gt; = Ok(());\n\n    match result {\n        Result::Ok(val) =&gt; println!(\"written to DB\"),\n        Result::Err(err) =&gt; {\n            panic!(\"Error description: {}\", err.description());\n        }\n    };\n}\n</code></pre>\n\n<p>If you read the entire error message (with some line numbers removed):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `description` found for type `postgres::error::Error` in the current scope\n --&gt; src/main.rs:9:49\n9 |&gt;             panic!(\"Error description: {}\", err.description());\n  |&gt;                                                 ^^^^^^^^^^^\nnote: in this expansion of format_args!\nnote: in this expansion of panic! (defined in &lt;std macros&gt;)\nhelp: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:\nhelp: candidate #1: `use std::error::Error`\n</code></pre>\n\n<p>Note the last line:</p>\n\n<blockquote>\n  <p>items from traits can only be used if the trait is in scope</p>\n</blockquote>\n\n<p>And</p>\n\n<blockquote>\n  <p>the following trait is implemented but not in scope, perhaps add a <code>use</code> for it: <code>use std::error::Error</code></p>\n</blockquote>\n\n<p>Doing as the compiler suggests allows the code to compile.</p>\n\n<hr>\n\n<blockquote>\n  <p>I already had tried to use <code>std::error::Error</code>, but also had added <code>postgres::error::Error</code>. Having both broke it.</p>\n</blockquote>\n\n<p>There are a few solutions here...</p>\n\n<p>Avoid fully importing the type:</p>\n\n<pre><code>use postgres::error;\nuse std::error::Error;\n\nlet result: Result&lt;_, error::Error&gt; = Ok(());\n</code></pre>\n\n<p>Avoid fully importing the trait:</p>\n\n<pre><code>use postgres::error::Error;\nuse std::error;\n\npanic!(\"Error description: {}\", error::Error::description(&amp;err));\n</code></pre>\n\n<p>Rename the type on import (my preferred solution):</p>\n\n<pre><code>use postgres::error::Error as PgError;\nuse std::error::Error;\n\nlet result: Result&lt;_, PgError&gt; = Ok(());\n</code></pre>\n\n<p>Rename the trait on import:</p>\n\n<pre><code>use postgres::error::Error;\nuse std::error::Error as Awesome;\n</code></pre>\n"}], "owner": {"reputation": 1543, "user_id": 262644, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a6216021614518eea6c3d22b0924d23b?s=128&d=identicon&r=PG", "display_name": "ajmurmann", "link": "https://stackoverflow.com/users/262644/ajmurmann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 595, "favorite_count": 0, "accepted_answer_id": 38937094, "answer_count": 1, "score": -1, "last_activity_date": 1608762084, "creation_date": 1471122210, "last_edit_date": 1608762084, "question_id": 38936996, "link": "https://stackoverflow.com/questions/38936996/cannot-get-description-of-postgres-error", "title": "Cannot get description of postgres error?", "body": "<p>I am writing to Postgres using the Rust Postgres crate. I expect that I will attempt to write some records that violate uniqueness constraints. If that happens I want to print a notice and keep going. I am trying to take a look at attributes of the errors that get returned to be able to differentiate between different errors going forward. A obvious place to start seem the <code>cause</code> and <code>description</code> methods on the error. However, when I try to call them the compiler claims they don't exist.</p>\n\n<p>Here is the relevant part of my current code:</p>\n\n<pre><code>match result {\n    Result::Ok(val) =&gt; println!(\"written to DB\"),\n    Result::Err(err) =&gt; {\n        println!(\"Error description: {}\", err.description());\n        panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\");\n    }\n};\n</code></pre>\n\n<p>Compilation results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `description` found for type `postgres::error::Error` in the current scope\n              println!(\"Error description: {}\", err.description());\n</code></pre>\n\n<p>The <a href=\"https://sfackler.github.io/rust-postgres/doc/v0.10.2/postgres/error/enum.Error.html\" rel=\"nofollow\">documentation claims the method exists</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471098118, "post_id": 38933581, "comment_id": 65223120, "body": "Note that it doesn&#39;t make any sense to (de)serialize a struct with a reference. There&#39;s no way to guarantee that the pointed-at value will be in the same location, or even that it exists!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471099209, "post_id": 38933581, "comment_id": 65223441, "body": "Also, a <code>&amp;[u8]</code> is a <a href=\"http://stackoverflow.com/a/31953048/155423\"><i>fat pointer</i></a>, explaining why it&#39;s 128 bits and why it would be a Bad Idea to <code>transmute</code> it."}], "owner": {"reputation": 5024, "user_id": 1293385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e01e2b0a8da2e2ddf115e57b21cd689?s=128&d=identicon&r=PG", "display_name": "Melle", "link": "https://stackoverflow.com/users/1293385/melle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 193, "favorite_count": 0, "closed_date": 1471098063, "answer_count": 0, "score": 0, "last_activity_date": 1471097978, "creation_date": 1471097570, "last_edit_date": 1471097978, "question_id": 38933581, "link": "https://stackoverflow.com/questions/38933581/casting-u8-to-u64-without-extra-memory-allocation", "closed_reason": "Duplicate", "title": "Casting &amp;[u8] to u64 without extra memory allocation", "body": "<p>I have a <code>mmap</code>ped file from which I read (and write) <code>Message</code>s. I have a byte slice (<code>&amp;[u8]</code>) of the mmap's contents. My current struct definition of a <code>Message</code> is:</p>\n\n<pre><code>struct Message&lt;'a&gt; {\n    bytes: &amp;'a [u8]\n    id: &amp;'a MessageId(u64),\n    // ... some fields omitted ...\n}\n</code></pre>\n\n<p>What I'd like is to map the byte slice to the message's fields, but I can't seem to get this right.</p>\n\n<p>I've been looking into <code>mem::transmute</code> but I keep doing something wrong here:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: transmute called with differently sized types: *const [u8] (128 bits) to u64 (64 bits) [E0512]\nlet offset: u64 = unsafe { mem::transmute(self.bytes) };\n</code></pre>\n\n<p>From my understanding transmute \"reinterprets\" the buffer as another type. How should I go about fixing this? How about mapping subsequent fields (as e.g. <code>u32</code>, <code>&amp;'a str</code>, etc.)?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1473168195, "post_id": 38931479, "comment_id": 66029911, "body": "If my answer is not what you are looking for, could you please post a comment to explain why?"}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473170131, "post_id": 38934268, "comment_id": 66031389, "body": "Nice answer, in practice often some of the identifiers will be something like <code>a::b.c</code> which limits some practical use. I managed to make a macro that detects this in C using <i>(quite evil preprocessor strcmp - <a href=\"https://gitlab.com/ideasman42/blender/blob/7ea280cc6a5cb499c90b843651df14f97db29bcb/source/blender/blenlib/BLI_utildefines.h#L514\" rel=\"nofollow noreferrer\">gitlab.com/ideasman42/blender/blob/&hellip;</a>)</i>"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473172369, "post_id": 38934268, "comment_id": 66032968, "body": "You can also create a procedural macro by writing a <a href=\"https://doc.rust-lang.org/stable/book/compiler-plugins.html\" rel=\"nofollow noreferrer\">compiler plugin</a> where you will have greater control and be able to achieve your goal."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": false, "score": 4, "last_activity_date": 1471103201, "last_edit_date": 1471103201, "creation_date": 1471102185, "answer_id": 38934268, "question_id": 38931479, "link": "https://stackoverflow.com/questions/38931479/is-it-possible-to-prevent-duplicate-identical-arguments-to-a-macro-in-rust/38934268#38934268", "title": "Is it possible to prevent duplicate identical arguments to a macro in Rust?", "body": "<p>One way to achieve what you want is the following:</p>\n\n<pre><code>macro_rules! unique_args {\n    ($($idents:ident),*) =&gt; {\n        {\n            #[allow(dead_code, non_camel_case_types)]\n            enum Idents { $($idents,)* __CountIdentsLast }\n        }\n    };\n}\n\nmacro_rules! _my_elem {\n    ($val:expr, $($var:expr),*) =&gt; {{\n        $($val == $var)||*\n    }};\n}\n\nmacro_rules! my_elem {\n    ($($tt:tt)*) =&gt; {{\n        unique_args!($($tt)*);\n        _my_elem!($($tt)*)\n    }};\n}\n</code></pre>\n\n<p>The idea is that having the same identifier twice will cause a compiler error because an enum cannot have duplicate variant names.</p>\n\n<p>You can use this as such:</p>\n\n<pre><code>if my_elem!(w, x, y, z) {\n    println!(\"{}\", w);\n}\n</code></pre>\n\n<p>Here is an example with an error:</p>\n\n<pre><code>// error[E0428]: a value named `y` has already been defined in this enum\nif my_elem!(w, x, y, y) {\n    println!(\"{}\", w);\n}\n</code></pre>\n\n<p>However, this will only work with identifiers.</p>\n\n<p>If you want to use literals as well, you will need a macro with a different syntax to be able to differentiate between a literal and an identifier:</p>\n\n<pre><code>macro_rules! unique_idents {\n    () =&gt; {\n    };\n    ($tt:tt) =&gt; {\n    };\n    ($ident1:ident, $ident2:ident) =&gt; {\n        {\n            #[allow(dead_code, non_camel_case_types)]\n            enum Idents {\n                $ident1,\n                $ident2,\n            }\n        }\n    };\n    ($ident:ident, lit $expr:expr) =&gt; {\n    };\n    ($ident1:ident, $ident2:ident, $($tt:tt)*) =&gt; {\n        {\n            #[allow(dead_code, non_camel_case_types)]\n            enum Idents {\n                $ident1,\n                $ident2,\n            }\n            unique_idents!($ident1, $($tt)*);\n            unique_idents!($ident2, $($tt)*);\n        }\n    };\n    ($ident:ident, lit $expr:expr, $($tt:tt)*) =&gt; {\n        unique_idents!($ident, $($tt)*);\n    };\n    (lit $expr:expr, $($tt:tt)*) =&gt; {\n        unique_idents!($($tt)*);\n    };\n}\n\nmacro_rules! unique_literals {\n    () =&gt; {\n    };\n    ($tt:tt) =&gt; {\n    };\n    (lit $lit1:expr, lit $lit2:expr) =&gt; {{\n            type ArrayForStaticAssert_ = [i8; 0 - (($lit1 == $lit2) as usize)];\n    }};\n    (lit $lit:expr, $ident:ident) =&gt; {\n    };\n    (lit $lit1:expr, lit $lit2:ident, $($tt:tt)*) =&gt; {{\n            unique_literals!(lit $lit1, lit $lit2);\n            unique_literals!(lit $lit1, $($tt)*);\n            unique_literals!(lit $lit2, $($tt)*);\n    }};\n    (lit $lit:expr, $ident:ident, $($tt:tt)*) =&gt; {\n        unique_literals!(lit $lit, $($tt)*);\n    };\n    ($ident:ident, $($tt:tt)*) =&gt; {\n        unique_literals!($($tt)*);\n    };\n}\n\nmacro_rules! unique_args2 {\n    ($($tt:tt)*) =&gt; {{\n        unique_idents!($($tt)*);\n        unique_literals!($($tt)*);\n    }};\n}\n\nmacro_rules! _elem {\n    () =&gt; {\n        false\n    };\n    ($val:expr) =&gt; {\n        false\n    };\n    ($val1:expr, $val2:expr) =&gt; {{\n        $val1 == $val2\n    }};\n    ($val1:expr, lit $val2:expr) =&gt; {{\n        $val1 == $val2\n    }};\n    ($val1:expr, $val2:expr, $($tt:tt)*) =&gt; {{\n        $val1 == $val2 || _elem!($val1, $($tt)*)\n    }};\n    ($val1:expr, lit $val2:expr, $($tt:tt)*) =&gt; {{\n        $val1 == $val2 || _elem!($val1, $($tt)*)\n    }};\n}\n\nmacro_rules! elem {\n    ($($tt:tt)*) =&gt; {{\n        unique_args2!($($tt)*);\n        _elem!($($tt)*)\n    }};\n}\n</code></pre>\n\n<p>The <code>uniq_idents!</code> macro uses the same trick as above.</p>\n\n<p>The <code>unique_literals!</code> macro will cause a <code>subtract with overflow</code> error that is caught at compile time.</p>\n\n<p>With these macros, you will need to prefix each literal by <code>lit</code>:</p>\n\n<pre><code>if elem!(w, x, lit 1, z) {\n    println!(\"{}\", w);\n}\n</code></pre>\n\n<p>Here are some examples of errors:</p>\n\n<pre><code>// error[E0428]: a value named `y` has already been defined in this enum\nif elem!(w, x, y, y) {\n    println!(\"{}\", w);\n}\n\n// error[E0080]: constant evaluation error\nif elem!(w, x, lit 1, z, lit 1) {\n    println!(\"{}\", w);\n}\n</code></pre>\n\n<p>I think it is the best we can do without using a compiler plugin.</p>\n\n<p>It is possible to improve these macros, but you get the idea.</p>\n\n<p>Even though there is a <a href=\"https://doc.rust-lang.org/stable/std/macro.stringify!.html\" rel=\"nofollow\"><code>stringify!</code></a> macro that can be use to convert any expression to a string, I don't think we currently have a way to compare these strings at compile time (without a compiler plugin), at least until we have <code>const fn</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 314, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1471141748, "creation_date": 1471081895, "last_edit_date": 1495542765, "question_id": 38931479, "link": "https://stackoverflow.com/questions/38931479/is-it-possible-to-prevent-duplicate-identical-arguments-to-a-macro-in-rust", "title": "Is it possible to prevent duplicate identical arguments to a macro in Rust?", "body": "<p>There are certain rare cases where it may be useful to prevent duplicate arguments to a macro. One example is this <a href=\"https://stackoverflow.com/questions/38828920\"><code>elem(value, ...)</code></a> macro to check if <code>value</code> is either <code>A</code>, <code>B</code> or <code>C</code>:</p>\n\n<pre><code>if (elem(value, A, B, C)) { .... }\n</code></pre>\n\n<p>Someone could accidentally pass in the same argument multiple times, e.g.:</p>\n\n<pre><code>if (elem(value, A, B, B)) { .... }\n</code></pre>\n\n<p>While this is valid Rust, it is almost certainly an accident and <strong>highly unlikely</strong> to be what the developer intended. This is a trivial example, actual error cases would be more complicated.</p>\n\n<p>Is there a way to have the compiler warn/error when passing in duplicate arguments?</p>\n\n<ul>\n<li><p>Arguments are not necessarily all constants, they could be mixed with variables too.</p></li>\n<li><p>This is an actual bug I found in some code. While there's a limit macros/compilers can go to prevent mistakes, this could have been detected early if the macro didn't allow it. These kinds of mistakes should be found in code review but mistakes happen.</p></li>\n<li><p>One way to do this (which isn't fool proof), could be to convert the identifiers to strings, then static-assert if any of the identifiers are exact matches. This has the obvious drawback that different identifiers may represent the same constant value. The same identifier could also be written so as to not compare, e.g.: <code>A[0]</code> vs <code>A[ 0 ]</code>.</p></li>\n<li><p>If the preprocessor/compiler can't do this easily, a fall-back solution may be some basic static checking tool.</p></li>\n<li><p>I managed to <a href=\"https://stackoverflow.com/a/31632477/432509\">do this with the C preprocessor</a>.</p></li>\n</ul>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 3, "last_activity_date": 1471077572, "creation_date": 1471077572, "answer_id": 38930891, "question_id": 38930635, "link": "https://stackoverflow.com/questions/38930635/why-are-there-two-ways-to-iterate-over-a-vector-intoiterator-and-iter/38930891#38930891", "title": "Why are there two ways to iterate over a vector, IntoIterator and Iter?", "body": "<p>In this case they are equivalent, because <code>get_list</code> returns a reference, so both <code>IntoIterator</code> and <code>iter</code> take a reference to the vector and return references to items.</p>\n\n<p>If the vector were owned, it would be moved into <code>IntoIterator</code> (hence the name) and return owned items from the vector. <code>iter</code> on the other hand always takes a reference and returns references to items.</p>\n\n<p>See also <a href=\"https://stackoverflow.com/questions/36672845/in-rust-is-a-vector-an-iterator/36673695#36673695\">this answer</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 1194, "user_id": 4225143, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/323f7eb0a413167ac698dd7e12d27815?s=128&d=identicon&r=PG", "display_name": "christian Nguyen", "link": "https://stackoverflow.com/users/4225143/christian-nguyen"}, "is_accepted": false, "score": 0, "last_activity_date": 1471082428, "creation_date": 1471082428, "answer_id": 38931544, "question_id": 38930635, "link": "https://stackoverflow.com/questions/38930635/why-are-there-two-ways-to-iterate-over-a-vector-intoiterator-and-iter/38931544#38931544", "title": "Why are there two ways to iterate over a vector, IntoIterator and Iter?", "body": "<p>1) Are cases equal in terms of potential performance (what compiler can do in optimization mode)? => No, it is not, it use references.</p>\n\n<p>2) If cases are equal, why IntoIterator was introduced, just to not write .iter()? => It references to self.data and vector is not an iterator.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 104, "favorite_count": 0, "accepted_answer_id": 38930891, "answer_count": 2, "score": 0, "last_activity_date": 1471095306, "creation_date": 1471075584, "last_edit_date": 1471095306, "question_id": 38930635, "link": "https://stackoverflow.com/questions/38930635/why-are-there-two-ways-to-iterate-over-a-vector-intoiterator-and-iter", "title": "Why are there two ways to iterate over a vector, IntoIterator and Iter?", "body": "<p>I have this example:</p>\n\n<pre><code>struct Foo { data: Vec&lt;u32&gt; }\nimpl Foo {\n    fn get_list(&amp;self) -&gt; &amp;Vec&lt;u32&gt; {\n        &amp;self.data\n    }\n}\n\nfn main() {\n    let foo = Foo { data: vec![1, 2, 3] };\n\n    // 1\n    for it in foo.get_list() {\n        println!(\"IntoIter {}\", *it);\n    }\n\n    // 2\n    for it in foo.get_list().iter() {\n        println!(\"Iter {}\", *it);\n    }\n}\n</code></pre>\n\n<p>As I understand it, in case (1) <code>&amp;Vec</code> is converted to <code>IntoIterator</code>,\nin case (2) we just use <code>Iter</code>.</p>\n\n<ol>\n<li><p>Are the cases equal in terms of potential performance (what the compiler can do in optimization mode)?</p></li>\n<li><p>If the cases are equal, why was <code>IntoIterator</code> introduced? Is it just to avoid writing <code>.iter()</code>?</p></li>\n</ol>\n"}, {"tags": ["rust", "stack-memory"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471094786, "post_id": 38929524, "comment_id": 65222124, "body": "Related: <a href=\"http://stackoverflow.com/q/30869007/155423\">How to benchmark memory usage of a function?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "is_accepted": false, "score": 4, "last_activity_date": 1471257617, "last_edit_date": 1471257617, "creation_date": 1471256692, "answer_id": 38953349, "question_id": 38929524, "link": "https://stackoverflow.com/questions/38929524/how-to-measure-a-functions-stack-usage-in-rust/38953349#38953349", "title": "How to measure a functions stack usage in Rust?", "body": "<p>As a last resort, you can observe the stack pointer (using inline assembly) and infer the result from that. This method is definitely not something you'd use in production... but it works.</p>\n\n<pre><code>#![feature(asm)]\n\nuse std::cell::Cell;\nuse std::cmp;\nuse std::usize;\n\n// This global variable tracks the highest point of the stack\nthread_local!(static STACK_END: Cell&lt;usize&gt; = Cell::new(usize::MAX));\n\nmacro_rules! stack_ptr {\n    () =&gt; ({\n        // Grab a copy of the stack pointer\n        let x: usize;\n        unsafe {\n            asm!(\"mov %rsp, $0\" : \"=r\"(x) ::: \"volatile\");\n        }\n        x\n    })\n}\n\n/// Saves the current position of the stack. Any function\n/// being profiled must call this macro.\nmacro_rules! tick {\n    () =&gt; ({\n        // Save the current stack pointer in STACK_END\n        let stack_end = stack_ptr!();\n        STACK_END.with(|c| {\n            // Since the stack grows down, the \"tallest\"\n            // stack must have the least pointer value\n            let best = cmp::min(c.get(), stack_end);\n            c.set(best);\n        });\n    })\n}\n\n/// Runs the given callback, and returns its maximum stack usage\n/// as reported by the `tick!()` macro.\nfn measure&lt;T, F: FnOnce() -&gt; T&gt;(callback: F) -&gt; (T, usize) {\n    STACK_END.with(|c| c.set(usize::MAX));\n    let stack_start = stack_ptr!();\n    let r = callback();\n    let stack_end = STACK_END.with(|c| c.get());\n    if stack_start &lt; stack_end {\n        panic!(\"tick!() was never called\");\n    }\n    (r, stack_start - stack_end)\n}\n\n/// Example recursive function\nfn fibonacci(n: i64) -&gt; i64 {\n    tick!();\n    match n {\n        0 =&gt; 0,\n        1 =&gt; 1,\n        _ =&gt; fibonacci(n-1) + fibonacci(n-2)\n    }\n}\n\nfn main() {\n    // Stack usage should grow linearly with `i`\n    for i in 0 .. 10 {\n        let (result, stack) = measure(|| fibonacci(i));\n        println!(\"fibonacci({}) = {}: used {} bytes of stack\", i, result, stack);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 538, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1471257617, "creation_date": 1471066021, "last_edit_date": 1471141969, "question_id": 38929524, "link": "https://stackoverflow.com/questions/38929524/how-to-measure-a-functions-stack-usage-in-rust", "title": "How to measure a functions stack usage in Rust?", "body": "<p>Is there a way I can measure how much stack memory a function uses?</p>\n\n<p>This question isn't specific to recursive functions; however I was interested to know how much stack memory a function called recursively would take.</p>\n\n<p>I was interested to optimize the function for stack memory usage; however, without knowing what optimizations the compiler is already making, it's just guess-work if this is making real improvements or not.</p>\n\n<p><strong>To be clear, this is <em>not</em> a question about how to optimize for better stack usage.</strong></p>\n\n<p>So is there some reliable way to find out how much stack memory a function uses in Rust?</p>\n\n<hr>\n\n<p><em>Note that other compilers support this, GCC has <code>-fstack-usage</code> for example.</em></p>\n"}, {"tags": ["testing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1471095549, "post_id": 38929394, "comment_id": 65222354, "body": "Note that <i>a &quot;dummy&quot; implementation that does nothing</i> means that the code will be <i>monomorphized</i> and since it&#39;s a no-op, the code will act like there is no counter."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 1, "last_activity_date": 1471064618, "creation_date": 1471064618, "answer_id": 38929394, "question_id": 38929233, "link": "https://stackoverflow.com/questions/38929233/whats-the-best-way-to-count-indirect-function-calls-conditionally-using-cfg-attr/38929394#38929394", "title": "Whats the best way to count indirect function calls conditionally using cfg attributes?", "body": "<p>Mutable statics are unsafe because they're global, and could be accessed from any thread at any time.  The simplest solution is to change the definition of the function in question to take some kind of \"counter\" interface that keeps track of calls.  You can avoid performance problems by using generics plus a \"dummy\" implementation that does nothing.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Use a callable because I'm feeling lazy.\nfn function_to_count&lt;Count: FnMut()&gt;(count: &amp;mut Count) {\n    count();\n\n    // ...\n}\n\n#[cfg(test)]\n#[test]\nfn some_test() {\n    let mut count = 0;\n    for _ in 0..10 {\n        function_to_count(&amp;mut || count += 1);\n    }\n\n    assert_eq!(count, 10);\n}\n</code></pre>\n\n<p>You should really, seriously do <em>that</em>, and <strong>not</strong> what I'm about to describe:</p>\n\n<p>The other solution is to use a thread-safe construct.</p>\n\n<p>A word of warning: <strong>do not use this if you have more than one test!</strong>  The test runner will, by default, run tests in parallel.  As such, if you have more than one test calling into the instrumented function, you <strong>will</strong> get corrupt results.  You'd have to write some kind of exclusive locking mechanism and somehow teach the function to \"know\" which run it's a part of, and at that point, you should just use the previously described solution instead.  You could also disable parallel tests, but I believe you can only do that from <em>outside</em> the code, and that's just <em>asking</em> for someone to forget and run into weird failures as a result.</p>\n\n<p>But anyway...</p>\n\n<pre><code>use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize, Ordering};\n\n#[cfg(test)]\nstatic TOTAL_CALLS: AtomicUsize = ATOMIC_USIZE_INIT;\n\nfn function_to_count() {\n    if cfg!(test) {\n        TOTAL_CALLS.fetch_add(1, Ordering::SeqCst);\n    }\n\n    // ...\n}\n\n#[cfg(test)]\n#[test]\nfn some_test() {\n    for _ in 0..10 {\n        function_to_count();\n    }\n\n    assert_eq!(TOTAL_CALLS.load(Ordering::SeqCst), 10);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1471095458, "creation_date": 1471062929, "last_edit_date": 1471095458, "question_id": 38929233, "link": "https://stackoverflow.com/questions/38929233/whats-the-best-way-to-count-indirect-function-calls-conditionally-using-cfg-attr", "title": "Whats the best way to count indirect function calls conditionally using cfg attributes?", "body": "<p>When writing a test, I would like to know how many times a function is called, since bad logic may yield a correct result even when excessive and unnecessary function calls are performed.</p>\n\n<p>To give some context, this is a tree-search function running a test on a fixed data set, however that isn't important to the answer.</p>\n\n<p>I'm currently using a static mutable variable, however this means every access needs to be marked as <code>unsafe</code>:</p>\n\n<pre><code>#[cfg(test)]\nstatic mut total_calls: usize = 0;\n\nfn function_to_count() {\n\n#[cfg(test)]\n    unsafe {\n        total_calls += 1;\n    }\n\n    // do stuff\n\n}\n\n#[test]\nfn some_test() {\n    // do stuff, indirectly call function_to_count().\n\n    assert!(total_calls &lt; 100);\n}\n</code></pre>\n\n<p>It would be good to avoid having to put <code>unsafe</code> into the code.</p>\n\n<p>Is there a better way to count indirect function calls in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471060727, "post_id": 38928839, "comment_id": 65214676, "body": "What&#39;s wrong with specifying the configuration via Cargo or the rustc command line?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471061979, "post_id": 38928839, "comment_id": 65214846, "body": "Using cargo is fine for developer visible build options, In this case I just want a switch which is local to the file I can use for performing some extensive tests <i>(which isn&#39;t enabled by default, or exposed at the crate level)</i>"}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "edited": false, "score": 3, "creation_date": 1471641181, "post_id": 38928839, "comment_id": 65445321, "body": "I wish <code>#[cfg(rust_version)]</code> were actually a thing..."}], "answers": [{"comments": [{"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1538981866, "post_id": 52695955, "comment_id": 92320175, "body": "I suspect the answer should be \u2018no\u2019, because the question asks for per-file option and this is still per-build, though not written out to Cargo.toml."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1539003572, "post_id": 52695955, "comment_id": 92332220, "body": "I&#39;d agree with @JanHudec \u2014 this doesn&#39;t <i>define</i> a config setting <i>within a source file</i>, as the title indicates."}, {"owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "edited": false, "score": 0, "creation_date": 1539014448, "post_id": 52695955, "comment_id": 92338562, "body": "I believe this answers the use case in the question. The answer is that flags <i>don&#39;t need to be declared</i>, i.e. there is nothing like <code>#![declare_flag(use_counter, default = 0)]</code>. You can just use them straight away. They are not enabled by default, as the question wanted, and not exposed in Cargo.toml to downstream crates, which is my interpretation of &quot;not exposed at the crate level&quot; i.e. at the level of the crate&#39;s API. If you want a flag local to a source file then simply don&#39;t use the same flag in other source files."}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 1, "last_activity_date": 1538977031, "creation_date": 1538977031, "answer_id": 52695955, "question_id": 38928839, "link": "https://stackoverflow.com/questions/38928839/is-it-possible-to-declare-config-tokens-within-a-source-file/52695955#52695955", "title": "Is it possible to declare config tokens within a source file?", "body": "<p>Yes, this is written as <code>#[cfg(use_counter)]</code>. Such flags can be enabled or disabled on the command line at compile time and are not exposed in Cargo.toml.</p>\n\n<pre><code>fn main() {\n    #[cfg(use_counter)]\n    println!(\"counter is enabled\");\n}\n</code></pre>\n\n<p>Using Cargo, run with the feature disabled:</p>\n\n<blockquote>\n<pre><code>$ cargo run\n</code></pre>\n</blockquote>\n\n<p>Using Cargo, run with the feature enabled:</p>\n\n<blockquote>\n<pre><code>$ RUSTFLAGS=\"--cfg use_counter\" cargo run\n</code></pre>\n</blockquote>\n\n<p>Compile directly with the feature disabled:</p>\n\n<blockquote>\n<pre><code>$ rustc src/main.rs\n</code></pre>\n</blockquote>\n\n<p>Compile with the feature enabled:</p>\n\n<blockquote>\n<pre><code>$ rustc src/main.rs --cfg use_counter\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1538977031, "creation_date": 1471058089, "last_edit_date": 1495535624, "question_id": 38928839, "link": "https://stackoverflow.com/questions/38928839/is-it-possible-to-declare-config-tokens-within-a-source-file", "title": "Is it possible to declare config tokens within a source file?", "body": "<p>In Rust, it's possible to perform <a href=\"https://stackoverflow.com/questions/24297154\">conditional compilation</a> as follows.</p>\n\n<pre><code>#[cfg(rust_version = \"1.10\")]\nfn my_func() {}\n</code></pre>\n\n<p>Is it possible to define variables for <code>cfg</code> to check within the same source file?</p>\n\n<p>For example:</p>\n\n<pre><code>// leave off, just a quick test to enable when troubleshooting.\n#define use_counter 1  // C style (not valid Rust)\n\n#[cfg(use_counter == \"1\")]\nstatic mut fn_counter: usize = 0;\n\nfn my_func() {\n\n#[cfg(use_counter = \"1\")]\n    unsafe { fn_counter += 1; }\n\n}\n\nmain () {\n    // code calling 'my_func'\n\n    // print how many times the function is called.\n#[cfg(use_counter = \"1\")]\n    unsafe { println!(\"Function count {}\", fn_counter); }\n\n}\n</code></pre>\n\n<hr>\n\n<p>I'm not asking how to write a function counter, it's just an example of optionally inserting logic into a source file.</p>\n"}, {"tags": ["recursion", "closures", "rust"], "comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1471006902, "post_id": 38918496, "comment_id": 65194031, "body": "Duplicate of <a href=\"http://stackoverflow.com/questions/16946888/recursive-closure-in-rust\" title=\"recursive closure in rust\">stackoverflow.com/questions/16946888/recursive-closure-in-ru&zwnj;&#8203;st</a>"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 122, "favorite_count": 0, "closed_date": 1471006875, "answer_count": 0, "score": 1, "last_activity_date": 1471007421, "creation_date": 1471006488, "last_edit_date": 1471007421, "question_id": 38918496, "link": "https://stackoverflow.com/questions/38918496/is-it-possible-to-have-a-closure-call-itself-in-rust", "closed_reason": "Duplicate", "title": "Is it possible to have a closure call itself in Rust?", "body": "<p>Is there a way to have closures call themselves recursively, e.g.:</p>\n\n<pre><code>fn main() {\n    let recurse = |x: i32| { \n        println!(\"{}\", x);\n        let x_next = x + 1;\n        if x &lt; 10 {\n            recurse(x_next);  // commenting this line will build\n        }\n        x_next;\n    };\n\n    recurse(1);\n}\n</code></pre>\n\n<p>Is there a way to workaround the closure not being defined in the closure body?</p>\n"}, {"tags": ["rust", "llvm-ir"], "answers": [{"comments": [{"owner": {"reputation": 5822, "user_id": 546218, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f6f59bf629073f1eb8cdd492d10386c4?s=128&d=identicon&r=PG", "display_name": "rocky", "link": "https://stackoverflow.com/users/546218/rocky"}, "edited": false, "score": 0, "creation_date": 1471007172, "post_id": 38917344, "comment_id": 65194232, "body": "Many thanks. I am not sure how I missed that when I ran <code>--help</code> and tried all sorts of <code>-C</code> and <code>-Z</code> options."}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 0, "creation_date": 1547183326, "post_id": 38917344, "comment_id": 95112642, "body": "any way to find out where it dumps the .s file and how to show the optimized version?"}], "tags": [], "owner": {"reputation": 328, "user_id": 3880958, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95963a44712b973e2fd7766baa419478?s=128&d=identicon&r=PG", "display_name": "wdv4758h", "link": "https://stackoverflow.com/users/3880958/wdv4758h"}, "is_accepted": true, "score": 10, "last_activity_date": 1471002872, "creation_date": 1471002872, "answer_id": 38917344, "question_id": 38917125, "link": "https://stackoverflow.com/questions/38917125/how-do-i-get-the-rust-compiler-to-dump-out-the-llvm-it-generates/38917344#38917344", "title": "How do I get the Rust compiler to dump out the LLVM it generates?", "body": "<p>You can pass the formats which you want to <code>--emit</code></p>\n\n<p>e.g. </p>\n\n<pre><code>rustc --emit=asm,llvm-bc,llvm-ir xxx.rs\n</code></pre>\n\n<p>or</p>\n\n<pre><code>cargo rustc -- --emit=asm,llvm-bc,llvm-ir\n</code></pre>\n\n<p>more information please see <code>rustc --help</code></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1471004363, "creation_date": 1471004363, "answer_id": 38917825, "question_id": 38917125, "link": "https://stackoverflow.com/questions/38917125/how-do-i-get-the-rust-compiler-to-dump-out-the-llvm-it-generates/38917825#38917825", "title": "How do I get the Rust compiler to dump out the LLVM it generates?", "body": "<p>For quick access to either the LLVM IR or x86_64 assembly, the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow\">Playground</a> (and the <a href=\"http://play.integer32.com/\" rel=\"nofollow\">alternate Playground</a>) have \"LLVM\" and \"ASM\" buttons that call the compiler with the appropriate options.</p>\n"}, {"tags": [], "owner": {"reputation": 68, "user_id": 5679880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cHoHE.jpg?s=128&g=1", "display_name": "Felix Wittwer", "link": "https://stackoverflow.com/users/5679880/felix-wittwer"}, "is_accepted": false, "score": 4, "last_activity_date": 1499260336, "last_edit_date": 1499260336, "creation_date": 1499165540, "answer_id": 44904003, "question_id": 38917125, "link": "https://stackoverflow.com/questions/38917125/how-do-i-get-the-rust-compiler-to-dump-out-the-llvm-it-generates/44904003#44904003", "title": "How do I get the Rust compiler to dump out the LLVM it generates?", "body": "<p>You can manipulate the <code>RUSTFLAGS</code> environment variable and then perform the build, something like</p>\n\n<pre><code>RUSTFLAGS=\"--emit=llvm-ir\" cargo build\n</code></pre>\n\n<p>This is useful if you have no direct access to the build command (e.g., when you are building something like <a href=\"https://github.com/servo/servo\" rel=\"nofollow noreferrer\">Servo</a>, which uses an abstracted build tool called <code>mach</code>).</p>\n\n<p>I know this is more of an edge case, but I found it useful when trying to obtain an IR dump of Servo's code.</p>\n"}], "owner": {"reputation": 5822, "user_id": 546218, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/f6f59bf629073f1eb8cdd492d10386c4?s=128&d=identicon&r=PG", "display_name": "rocky", "link": "https://stackoverflow.com/users/546218/rocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 968, "favorite_count": 0, "accepted_answer_id": 38917344, "answer_count": 3, "score": 4, "last_activity_date": 1499260336, "creation_date": 1471002106, "last_edit_date": 1471004244, "question_id": 38917125, "link": "https://stackoverflow.com/questions/38917125/how-do-i-get-the-rust-compiler-to-dump-out-the-llvm-it-generates", "title": "How do I get the Rust compiler to dump out the LLVM it generates?", "body": "<p>I'd like to see the LLVM that the Rust compiler generates. Even better would be to have it just dump out LLVM and stop. This could be in bitcode format or assembler text. </p>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user2329125"}, "edited": false, "score": 0, "creation_date": 1471002108, "post_id": 38916938, "comment_id": 65191178, "body": "Many thanks for this. Now I did not state this in my original problem, but I have more than one of these router.get-lines ( which is the point of using a router) and adding a second line like that ( router.get(&quot;/hi&quot;, move |...| hi(...)); ) will result in new compiler errors. error: capture of moved value: <code>context</code>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user2329125"}, "edited": false, "score": 0, "creation_date": 1471004134, "post_id": 38916938, "comment_id": 65192392, "body": "Again many thanks for this. There is a lot I do not understand here ( why do I need to clone everything, when the content of the struct will be the same, why do I need to &#39;move&#39; my closure and what does that even mean, why are these derives at my struct ). I read the rust programming book/doc thing and now just realize that I don&#39;t really understood what they wrote there."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1471034574, "post_id": 38916938, "comment_id": 65209316, "body": "You can also use the <a href=\"https://github.com/iron/persistent\" rel=\"nofollow noreferrer\">persistent</a> crate for shared data instead of wrapping it in an Arc and Mutex."}, {"owner": {"reputation": 1693, "user_id": 5731861, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iKaMT.png?s=128&g=1", "display_name": "Felipe Valdes", "link": "https://stackoverflow.com/users/5731861/felipe-valdes"}, "edited": false, "score": 0, "creation_date": 1520649971, "post_id": 38916938, "comment_id": 85414919, "body": "if you guys get this error, change port 80 to 3000:  thread &#39;main&#39; panicked at &#39;called <code>Result::unwrap()</code> on an <code>Err</code> value: Io(Error { repr: Os { code: 13, message: &quot;Permission denied&quot; } })&#39;, src/libcore/result.rs:906:4 @malbarbo could you edit to port 3000 so less people get this stupid little error? :)"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 4, "last_activity_date": 1520850252, "last_edit_date": 1520850252, "creation_date": 1471001436, "answer_id": 38916938, "question_id": 38915653, "link": "https://stackoverflow.com/questions/38915653/how-can-i-pass-around-variables-between-handlers/38916938#38916938", "title": "How can I pass around variables between handlers", "body": "<p>The error message is almost incomprehensible here (there is a <a href=\"https://github.com/rust-lang/rust/issues/24680\" rel=\"nofollow noreferrer\">issue</a> for it!).</p>\n\n<p>The problem is that the type of the closure is not being inferred. We can help the compiler annotating the type of <code>request</code>:</p>\n\n<pre><code>extern crate iron;\nextern crate router;\n\nuse iron::prelude::*;\nuse router::Router;\nuse std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\n\n#[derive(Clone, Default)]\nstruct Context {\n    cache: Arc&lt;Mutex&lt;HashMap&lt;String, String&gt;&gt;&gt;,\n}\n\nfn main() {\n    let context = Context::default();\n    let mut router = Router::new();\n\n    let c = context.clone();\n    router.get(\"/\", move |request: &amp;mut Request| index(request, &amp;c), \"index\");\n\n    Iron::new(router).http(\"localhost:8080\").unwrap(); // port 80 is privileged\n}\n\nfn index(_: &amp;mut Request, context: &amp;Context) -&gt; IronResult&lt;Response&gt; {\n    Ok(Response::with((iron::status::Ok, \"index\")))\n}\n</code></pre>\n\n<p>Note that I changed the type of <code>context</code> to <code>&amp;Context</code> (otherwise, the closure would only <a href=\"https://stackoverflow.com/q/30177395/5189607\">implements</a> <code>FnOnce</code>) and use <code>move</code> (the closure must have <code>'static</code> lifetime to implement <a href=\"http://ironframework.io/doc/iron/middleware/trait.Handler.html\" rel=\"nofollow noreferrer\"><code>Handler</code></a>).</p>\n\n<p>To make it possible to change <code>cache</code> in <code>index</code>, you will have to <a href=\"https://doc.rust-lang.org/book/choosing-your-guarantees.html\" rel=\"nofollow noreferrer\">change</a> the type to <code>Arc&lt;Mutex&lt;HashMap&lt;String, String&gt;&gt;&gt;</code> or similar.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user2329125"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 927, "favorite_count": 0, "accepted_answer_id": 38916938, "answer_count": 1, "score": 3, "last_activity_date": 1520850252, "creation_date": 1470997439, "last_edit_date": 1471001594, "question_id": 38915653, "link": "https://stackoverflow.com/questions/38915653/how-can-i-pass-around-variables-between-handlers", "title": "How can I pass around variables between handlers", "body": "<p>I want to have a context-struct that is available in all handlers, but I am not able to get trough the compiler.</p>\n\n<p>For an example, I want something like this</p>\n\n<pre><code>extern crate iron;\nextern crate router;\n\nuse iron::prelude::*;\nuse router::Router;\nuse std::collections::HashMap;\n\nstruct Context {\n    cache: HashMap&lt;String, String&gt;,\n}\n\nfn main() {\n    let mut context = Context { cache: HashMap::new(), };\n    let mut router = Router::new();\n\n    router.get(\"/\", |request| index(request, context));\n\n    Iron::new(router).http(\"localhost:80\").unwrap();\n}\n\n\nfn index(_: &amp;mut Request, context: Context) -&gt; IronResult&lt;Response&gt; {\n    Ok(Response::with((iron::status::Ok, \"index\")))\n}\n</code></pre>\n\n<p>This won't compile with a lengthy error message </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: type mismatch resolving `for&lt;'r, 'r, 'r&gt; &lt;[closure@src\\main.rs:... context:_] as std::ops::FnOnce&lt;(&amp;'r mut iron::Request&lt;'r, 'r&gt;,)&gt;&gt;::Output == std::result::Result&lt;iron::Response, iron::IronError&gt;`:\n expected bound lifetime parameter ,\n    found concrete lifetime [E0271]\nsrc\\main.rs:...     router.get(\"/\", |request| index(request, context));\n</code></pre>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1471006908, "post_id": 38918024, "comment_id": 65194037, "body": "That closure to map is passed a usize as an argument and it returns a String. So the String value is moved out of the closure environment, so it has to be moved in in the first place. Is this basically the reasoning of the compiler here?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1471007378, "post_id": 38918024, "comment_id": 65194369, "body": "@JonasTepe sounds about right \u2014 it would have also been moved in if it was used by value for some function / method call inside the closure."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1471007271, "last_edit_date": 1471007271, "creation_date": 1471005010, "answer_id": 38918024, "question_id": 38913472, "link": "https://stackoverflow.com/questions/38913472/why-is-the-value-moved-into-the-closure-here-rather-than-borrowed/38918024#38918024", "title": "Why is the value moved into the closure here rather than borrowed?", "body": "<blockquote>\n  <p>I thought that <strong>not</strong> marking the closure with move would borrow any referenced value by default, </p>\n</blockquote>\n\n<p>Not quite. The compiler does a bit of inspection on the code within the closure body and tracks how the closed-over variables are used.</p>\n\n<p>When the compiler sees that a <em>method</em> is called on a variable, then it looks to see what type the receiver is (<code>self</code>, <code>&amp;self</code>, <code>&amp;mut self</code>). When a variable is used as a parameter, the compiler also tracks if it is by value, reference, or mutable reference. Whatever the most restrictive requirement is will be what is used by default.</p>\n\n<p>Occasionally, this analysis is not complete enough \u2014 even though the variable is only used as a reference, we intend for the closure to own the variable. This usually occurs when returning a closure or handing it off to another thread. </p>\n\n<p>In this case, the variable is returned from the closure, which must mean that it is used by value. Thus the variable will be moved into the closure automatically.</p>\n\n<hr>\n\n<p><em>Occasionally</em> the <code>move</code> keyword is too big of a hammer as it moves <em>all</em> of the referenced variables in. Sometimes you may want to just force one variable to be moved in but not others. In that case, the best solution I know of is to make an explicit reference and move the reference in:</p>\n\n<pre><code>fn main() {\n    let a = 1;\n    let b = 2;\n\n    {\n        let b = &amp;b;\n        needs_to_own_a(move || a_function(a, b));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1795, "favorite_count": 1, "accepted_answer_id": 38918024, "answer_count": 1, "score": 9, "last_activity_date": 1471007271, "creation_date": 1470990849, "last_edit_date": 1470992228, "question_id": 38913472, "link": "https://stackoverflow.com/questions/38913472/why-is-the-value-moved-into-the-closure-here-rather-than-borrowed", "title": "Why is the value moved into the closure here rather than borrowed?", "body": "<p>The <a href=\"https://doc.rust-lang.org/book/error-handling.html#the-limits-of-combinators\" rel=\"noreferrer\">Error Handling chapter</a> of the Rust Book contains an example on how to use the combinators of <code>Option</code> and <code>Result</code>. A file is read and through application of a series of combinators the contents are parsed as an <code>i32</code> and returned in a <code>Result&lt;i32, String&gt;</code>.\nNow, I got confused when I looked at the code. There, in one closure to an and_then a local <code>String</code> value is created an subsequently passed as a return value to another combinator.</p>\n\n<p>Here is the code example:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\nuse std::path::Path;\n\nfn file_double&lt;P: AsRef&lt;Path&gt;&gt;(file_path: P) -&gt; Result&lt;i32, String&gt; {\n    File::open(file_path)\n         .map_err(|err| err.to_string())\n         .and_then(|mut file| {\n              let mut contents = String::new(); // local value\n              file.read_to_string(&amp;mut contents)\n                  .map_err(|err| err.to_string())\n                  .map(|_| contents) // moved without 'move'\n         })\n         .and_then(|contents| {\n              contents.trim().parse::&lt;i32&gt;()\n                      .map_err(|err| err.to_string())\n         })\n         .map(|n| 2 * n)\n}\n\nfn main() {\n    match file_double(\"foobar\") {\n        Ok(n) =&gt; println!(\"{}\", n),\n        Err(err) =&gt; println!(\"Error: {}\", err),\n    }\n}\n</code></pre>\n\n<p>The value I am referring to is <code>contents</code>. It is created and later referenced in the <code>map</code> combinator applied to the <code>std::io::Result&lt;usize&gt;</code> return value of <code>Read::read_to_string</code>.\nThe question: I thought that <strong>not</strong> marking the closure with <code>move</code> would borrow any referenced value by default, which would result in the borrow checker complaining, that <code>contents</code> does not live long enough. However, this code compiles just fine. That means, the <code>String</code> <code>contents</code> is moved into, and subequently out of, the closure. Why is this done without the explicit <code>move</code>?</p>\n"}, {"tags": ["stack", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471005843, "post_id": 38911652, "comment_id": 65193356, "body": "See also <a href=\"http://stackoverflow.com/q/28952411/155423\">What is the idiomatic way to pop the last N elements in a mutable Vec?</a>."}], "answers": [{"tags": [], "owner": {"reputation": 366, "user_id": 3412986, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Z7SMm.png?s=128&g=1", "display_name": "SpaceManiac", "link": "https://stackoverflow.com/users/3412986/spacemaniac"}, "is_accepted": true, "score": 6, "last_activity_date": 1470984984, "creation_date": 1470984984, "answer_id": 38911725, "question_id": 38911652, "link": "https://stackoverflow.com/questions/38911652/what-is-a-less-verbose-way-to-repeatedly-pop-items-from-a-vector/38911725#38911725", "title": "What is a less verbose way to repeatedly pop() items from a vector?", "body": "<p>You can use the fact that <code>pop()</code> returns an <code>Option&lt;T&gt;</code> and match on that using a <code>while let</code> loop:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>while let Some(state) = stack.pop() {\n    // ... fine to call stack.push() here\n}\n</code></pre>\n\n<p>The <code>while let</code> desugars to something like the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>loop {\n    match stack.pop() {\n        Some(state) =&gt; {\n            // ... fine to call stack.push() here\n        }\n        _ =&gt; break\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "is_accepted": false, "score": 2, "last_activity_date": 1471005652, "creation_date": 1471005652, "answer_id": 38918222, "question_id": 38911652, "link": "https://stackoverflow.com/questions/38911652/what-is-a-less-verbose-way-to-repeatedly-pop-items-from-a-vector/38918222#38918222", "title": "What is a less verbose way to repeatedly pop() items from a vector?", "body": "<p>Just to offer an alternative approach, you can also use the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\" rel=\"nofollow\">drain method</a> to remove elements and give them to you in an <code>Iterator</code>. </p>\n\n<p><code>stack.drain(..).map(|element| ...and so on</code></p>\n\n<p>or</p>\n\n<pre><code>for element in stack.drain(..) {\n    //do stuff\n}\n</code></pre>\n\n<p>You can also provide a <code>RangeArgument</code> if you only want to remove a certain range of elements. This can be provided in the form of <code>&lt;start-inclusive&gt;..&lt;end-exclusive&gt;</code>. Both the start and end of the range argument are optional and just default to the start of end of the vector, so calling <code>drain(..)</code> just drains the entire vector, while <code>drain(2..)</code> would leave the first 2 elements in place and just drain the rest.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 142, "favorite_count": 0, "accepted_answer_id": 38911725, "answer_count": 2, "score": 0, "last_activity_date": 1471005652, "creation_date": 1470984701, "last_edit_date": 1471004082, "question_id": 38911652, "link": "https://stackoverflow.com/questions/38911652/what-is-a-less-verbose-way-to-repeatedly-pop-items-from-a-vector", "title": "What is a less verbose way to repeatedly pop() items from a vector?", "body": "<p>When using a vector as a stack <em>(storing states which are pushed and popped)</em>.</p>\n\n<pre><code>while stack.len() != 0 {\n    let state = stack.pop().unwrap();\n    // ... optionally push other states onto the stack.\n}\n</code></pre>\n\n<p>Is there a less verbose way to do this in Rust?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user2512323"}, "edited": false, "score": 3, "creation_date": 1470985516, "post_id": 38911481, "comment_id": 65181190, "body": "Isn&#39;t it better to call this &#39;identity macro&#39;, by analogy with identity function? <code>no-op</code> in my opinions stands for literally doing nothing, not for leaving expression as is."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470985704, "post_id": 38911481, "comment_id": 65181290, "body": "@deniss, you&#39;re probably right, am new to this terminology."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471004201, "post_id": 38911481, "comment_id": 65192432, "body": "Relevant for your original issue: <a href=\"https://github.com/rust-lang/rust/issues/26179\" rel=\"nofollow noreferrer\">Implement likely/unlikely intrinsic</a>."}], "answers": [{"tags": [], "owner": {"reputation": 3711, "user_id": 203476, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/838b591b09fc19aae77b84c63ddbe633?s=128&d=identicon&r=PG", "display_name": "Rasmus Kaj", "link": "https://stackoverflow.com/users/203476/rasmus-kaj"}, "is_accepted": false, "score": 1, "last_activity_date": 1471264754, "last_edit_date": 1471264754, "creation_date": 1470991720, "answer_id": 38913764, "question_id": 38911481, "link": "https://stackoverflow.com/questions/38911481/how-to-define-a-pass-through-identity-or-nop-macro/38913764#38913764", "title": "How to define a pass-through (identity or NOP) macro?", "body": "<p>I'd say your macro ...</p>\n\n<pre><code>macro_rules! expr_nop { ($body:expr) =&gt; { $body } }\n</code></pre>\n\n<p>... is correct.</p>\n\n<p>It does one thing, though:  It checks that the argument to the macro is actually an expression.  So e.g. <code>expr_nop(i32)</code> would give a compile-time error since i32 is a type and not an expression (which is often a good thing, since otherwise <code>if expr_nop!(i32) {...}</code> would give a compile-time error instead, and that error might be more complicated).</p>\n\n<p>The error would be compile-time in both cases, but in the first case before (during) macro-expansion and in the second case after macro-expansion, which often makes it harder to link the error to the code you are trying to compile.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 477, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1471264754, "creation_date": 1470983963, "last_edit_date": 1471004124, "question_id": 38911481, "link": "https://stackoverflow.com/questions/38911481/how-to-define-a-pass-through-identity-or-nop-macro", "title": "How to define a pass-through (identity or NOP) macro?", "body": "<p>When porting code from another language, I'd like to keep some expressions such as <code>likely</code>/<code>unlikely</code> macros as a <em>dummy</em> macro.</p>\n\n<p>Example usage:</p>\n\n<pre><code>if expr_nop!(expression) { \n    code;\n}\n</code></pre>\n\n<p>... which should be <em>exactly</em> the same as writing:</p>\n\n<pre><code>if (expression) { \n    code;\n}\n</code></pre>\n\n<p>Whats a good fail-safe macro in rust that can be used as a no-op?</p>\n\n<p>Currently I have:</p>\n\n<pre><code>macro_rules! expr_nop { ($body:expr) =&gt; { $body } }\n</code></pre>\n\n<p>Is this correct or should this be written differently?</p>\n"}, {"tags": ["vector", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 3, "last_activity_date": 1471017361, "last_edit_date": 1471017361, "creation_date": 1470979136, "answer_id": 38910435, "question_id": 38910078, "link": "https://stackoverflow.com/questions/38910078/how-to-a-swap-only-some-members-of-a-struct-in-a-vector/38910435#38910435", "title": "How to a swap only some members of a struct in a vector?", "body": "<p>You need to break the slice into disjoint subsets using <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow\"><code>[_]::split_at_mut</code></a>.  This can be used to get <code>&amp;mut _</code>s to the structures.  At that point, you can just <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\" rel=\"nofollow\"><code>mem::swap</code></a> the elements as needed.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\nstruct Big {\n    small: i32,\n    tiny: u8,\n}\n\nfn swap_smalls(bigs: &amp;mut [Big], i: usize, j: usize) {\n    use std::cmp::{max, min};\n    use std::mem::swap;\n\n    if i == j { return; }\n    let (i, j) = (min(i, j), max(i, j));\n\n    let (left_slice, right_slice) = bigs.split_at_mut(j);\n    let left = &amp;mut left_slice[i];\n    let right = &amp;mut right_slice[0];\n\n    swap(&amp;mut left.small, &amp;mut right.small);\n}\n\nfn main() {\n    let mut bigs = vec![\n        Big { small: 4, tiny: 31 },\n        Big { small: 0, tiny: 2 },\n        Big { small: -7, tiny: 193 },\n    ];\n\n    println!(\"before: {:?}\", bigs);\n    swap_smalls(&amp;mut bigs, 0, 2);\n    println!(\"after:  {:?}\", bigs);\n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>before: [Big { small: 4, tiny: 31 }, Big { small: 0, tiny: 2 }, Big { small: -7, tiny: 193 }]\nafter:  [Big { small: -7, tiny: 31 }, Big { small: 0, tiny: 2 }, Big { small: 4, tiny: 193 }]\n</code></pre>\n\n<p><em>\"rustic\"</em> implies there are multiple solutions, but I don't think there <em>are</em>, so it's not really relevant.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 116, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1471017361, "creation_date": 1470976952, "last_edit_date": 1471003816, "question_id": 38910078, "link": "https://stackoverflow.com/questions/38910078/how-to-a-swap-only-some-members-of-a-struct-in-a-vector", "title": "How to a swap only some members of a struct in a vector?", "body": "<p>Vectors have a method to swap entire items:</p>\n\n<pre><code>my_vector.swap(i, j)\n</code></pre>\n\n<p>For a vector of large structs, I want to swap only some of the data in each struct.</p>\n\n<p>What would be a <em>rustic</em> way to swap only <em>some</em> members of the struct?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1470978936, "creation_date": 1470978936, "answer_id": 38910390, "question_id": 38909914, "link": "https://stackoverflow.com/questions/38909914/is-it-possible-to-get-a-value-in-a-structure-by-field-name-without-implementing/38910390#38910390", "title": "Is it possible to get a value in a structure by field name without implementing the `Index` trait?", "body": "<p>No.</p>\n\n<p>You will need to write <em>something</em> to do the lookup yourself.  Be that implementing <code>Index</code> or a method.</p>\n"}], "owner": {"reputation": 159, "user_id": 6659804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3568154ffb6271de6297d08479a9dfa1?s=128&d=identicon&r=PG", "display_name": "Feng Cen", "link": "https://stackoverflow.com/users/6659804/feng-cen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50, "favorite_count": 0, "accepted_answer_id": 38910390, "answer_count": 1, "score": 1, "last_activity_date": 1471004665, "creation_date": 1470976024, "last_edit_date": 1471004665, "question_id": 38909914, "link": "https://stackoverflow.com/questions/38909914/is-it-possible-to-get-a-value-in-a-structure-by-field-name-without-implementing", "title": "Is it possible to get a value in a structure by field name without implementing the `Index` trait?", "body": "<p>I have a struct:</p>\n\n<pre><code>struct Person {\n    first_name: String,\n    last_name: String\n}\n</code></pre>\n\n<p>I want to get the field by a variable:</p>\n\n<pre><code>let person = Person {\n    first_name: \"Chris\".to_string(),\n    last_name: \"Tom\".to_string()\n};\n\nlet field_name = \"last_name\";\n</code></pre>\n\n<p>Is it possible to use some code like this without implementing the <code>Index</code> trait?</p>\n\n<pre><code>let field_value = person[field_name]\n</code></pre>\n"}, {"tags": ["rust", "iteration"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470964756, "post_id": 38908324, "comment_id": 65175149, "body": "the down side of the first example is you need to use <code>next % n</code> whenever you reference it. Accidentally using <code>vector[next]</code> for example will cause an index error (besides the possible overhead of using modulo each time, and extra typing required)."}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470984936, "post_id": 38908324, "comment_id": 65180884, "body": "@ideasman42 You know that unless this is the centre of some CPU-heavy hot loop, an extra module is not going to be noticeable, right? Another alternative is just to wrap your buffer into a structure implementing higher indices and doing the wrap around transparently - it doesn&#39;t get rid of it, but makes it impossible to forget about it."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470986011, "post_id": 38908324, "comment_id": 65181449, "body": "Right, my main concern is that <code>vector[next]</code> reads as correct code but wouldn&#39;t work, or worse - silently reads past the intended bounds. Also in practice <code>n</code> may be <code>path.to.some.vector.len()</code>, making <code>vector[next % path.to.some.vector.len()]</code> tedious to write out."}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1470986651, "post_id": 38908324, "comment_id": 65181814, "body": "@ideasman42 Implement it into your type then. You can define your own <code>[x]</code> where <code>x = x % self.len()</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471007548, "post_id": 38908324, "comment_id": 65194496, "body": "@viraptor that&#39;s a great solution that probably gets to the root of the problem. Instead of pushing the wrapping logic to the consumer, encode that logic within a new type. +1. I&#39;d encourage you to add it to your answer."}], "tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": false, "score": 3, "last_activity_date": 1471167388, "last_edit_date": 1471167388, "creation_date": 1470963869, "answer_id": 38908324, "question_id": 38908103, "link": "https://stackoverflow.com/questions/38908103/whats-the-best-way-to-iterate-over-circular-wrapped-indices/38908324#38908324", "title": "Whats the best way to iterate over circular wrapped indices?", "body": "<pre><code>fn main() {\n    let n = 10;\n    for (prev, next) in (0..n).zip(1..n+1) {\n        println!(\"{}, {}\", prev, next % n);\n    }\n}\n</code></pre>\n\n<p>Gives you:</p>\n\n<pre><code>0, 1\n1, 2\n....\n9, 0\n</code></pre>\n\n<p>Or if you REALLY don't want to use the modulo, then:</p>\n\n<pre><code>for (prev, next) in (0..n).zip((0..n).cycle().skip(1)) {\n</code></pre>\n\n<p>will work, but likely generate even more code.</p>\n\n<p>Another alternative is to wrap the required type in your own implementation of iteration or <code>[x]</code> getter, which handles the overflow correctly. That is, always gets <code>[x%n]</code> from the underlying structure.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 332, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1471167388, "creation_date": 1470961957, "last_edit_date": 1471003953, "question_id": 38908103, "link": "https://stackoverflow.com/questions/38908103/whats-the-best-way-to-iterate-over-circular-wrapped-indices", "title": "Whats the best way to iterate over circular wrapped indices?", "body": "<p>To loop over indices, keeping track of the next/previous items, it can be done as follows.</p>\n\n<pre><code>for index_prev in 0..n {\n    let index_next = (index_prev + 1) % n;\n\n    // some arbitrary code...\n    some_function(index_prev, index_next);\n}\n</code></pre>\n\n<p>This can be made more efficient by avoiding the modulo, and instead doing:</p>\n\n<p><em>Providing the index wrapping can be offset by one .</em></p>\n\n<pre><code>let mut index_prev = n - 1;\nfor index_next in 0..n {\n\n    // some arbitrary code...\n    some_function(index_prev, index_next);\n\n    index_prev = index_next;\n}\n</code></pre>\n\n<p>While this works, it has some downsides:</p>\n\n<ul>\n<li><code>index_prev</code> needs to be declared mutable, when we really want to loop over immutable indices.</li>\n<li><code>index_prev</code> needs to be declared in the outer scopes name-space, instead of being limited to the for loop.</li>\n</ul>\n\n<p>While neither of these are <em>terrible</em> they make the solution less than ideal.</p>\n\n<hr>\n\n<p>Is there a performant &amp; convenient way to do this in Rust or does it require writing a custom iterator?</p>\n\n<p>Whats the best way to do this in Rust?</p>\n"}, {"tags": ["asynchronous", "redis", "rust", "future"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1470952867, "post_id": 38906680, "comment_id": 65172109, "body": "Using a library on the day it had its big announcement; how very ambitious! ^_^"}], "answers": [{"comments": [{"owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "edited": false, "score": 0, "creation_date": 1470974060, "post_id": 38908104, "comment_id": 65177138, "body": "Thanks for the amazing answer!  Just one question: doesn&#39;t joining the <code>redis_thread</code> negate the entire effort of making the result-reading process non-blocking?  Perhaps there&#39;s something I&#39;m not understanding."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1470992546, "post_id": 38908104, "comment_id": 65185116, "body": "&quot;I would expect that foo.forget would be blocking itself, waiting until the stream is empty&quot; Actually, futures are not obligated to provide a &quot;block until ready&quot; method. <code>forget()</code>, as far as its description goes, is needed to prevent automatic cancellation when the future is dropped, but it is not related to waiting. In Scala, for example, there is no method on <code>Future</code> for that, but instead there is a separate <code>Await.ready</code>/<code>Await.result</code> pair of methods which wait until the future is ready within some timeout."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1470992604, "post_id": 38908104, "comment_id": 65185152, "body": "As far as I understand, in future-rs it is possible to implement a similar thing with <a href=\"http://alexcrichton.com/futures-rs/futures/trait.Future.html#method.select\" rel=\"nofollow noreferrer\"><code>Future::select</code></a>, where the second future completes after a fixed timeout."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1470961957, "creation_date": 1470961957, "answer_id": 38908104, "question_id": 38906680, "link": "https://stackoverflow.com/questions/38906680/how-to-implement-a-stream-of-futures-for-a-blocking-call-using-futures-rs-and-re/38908104#38908104", "title": "How to implement a stream of futures for a blocking call using futures.rs and Redis PubSub?", "body": "<p><strong>Heavy caveat</strong> I've never used this library before, and my low-level knowledge of some of the concepts is a bit... lacking. Mostly I'm reading through <a href=\"https://github.com/alexcrichton/futures-rs/blob/c2159d19221c66360ff2c4e6755fce63e6438aff/TUTORIAL.md#concrete-futures-and-streams\">the tutorial</a>. I'm pretty sure anyone who has done async work will read this and laugh, but it may be a useful starting point for other people. Caveat emptor!</p>\n\n<hr>\n\n<p>Let's start with something a bit simpler, demonstrating how a <code>Stream</code> works. We can convert an iterator of <code>Result</code>s into a stream:</p>\n\n<pre><code>extern crate futures;\n\nuse futures::Future;\nuse futures::stream::{self, Stream};\n\nfn main() {\n    let payloads: Vec&lt;Result&lt;String, ()&gt;&gt; = vec![Ok(\"a\".into()), Ok(\"b\".into())];\n    let payloads = stream::iter(payloads.into_iter());\n\n    let foo = payloads\n        .and_then(|payload| futures::finished(println!(\"{}\", payload)))\n        .for_each(|_| Ok(()));\n\n    foo.forget();\n}\n</code></pre>\n\n<p>This shows us one way to consume the stream. We use <code>and_then</code> to do something to each payload (here just printing it out) and then <code>for_each</code> to convert the <code>Stream</code> back into a <code>Future</code>. We can then run the future by calling the strangely named <a href=\"http://alexcrichton.com/futures-rs/futures/trait.Future.html#method.forget\"><code>forget</code> method</a>.</p>\n\n<hr>\n\n<p>Next is to tie the Redis library into the mix, handling just one message. Since the <code>get_message()</code> method is blocking, we need to introduce some threads into the mix. It's not a good idea to perform large amount of work in this type of asynchronous system as everything else will be blocked. <a href=\"http://alexcrichton.com/futures-rs/futures/trait.Future.html#tymethod.poll\">For example</a>:</p>\n\n<blockquote>\n  <p>Unless it is otherwise arranged to be so, it should be ensured that <strong>implementations of this function finish very quickly</strong>.</p>\n</blockquote>\n\n<p>In an ideal world, the redis crate would be built atop a library like futures and expose all this natively.</p>\n\n<pre><code>extern crate redis;\nextern crate futures;\n\nuse std::thread;\nuse futures::Future;\nuse futures::stream::{self, Stream};\n\nfn main() {\n    let client = redis::Client::open(\"redis://127.0.0.1/\").expect(\"Unable to connect to Redis\");\n\n    let mut pubsub = client.get_pubsub().expect(\"Unable to create pubsub handle\");\n    pubsub.subscribe(\"rust\").expect(\"Unable to subscribe to redis channel\");\n\n    let (tx, payloads) = stream::channel();\n\n    let redis_thread = thread::spawn(move || {\n        let msg = pubsub.get_message().expect(\"Unable to get message\");\n        let payload: Result&lt;String, _&gt; = msg.get_payload();\n        tx.send(payload).forget();\n    });\n\n    let foo = payloads\n        .and_then(|payload| futures::finished(println!(\"{}\", payload)))\n        .for_each(|_| Ok(()));\n\n    foo.forget();\n    redis_thread.join().expect(\"unable to join to thread\");\n}\n</code></pre>\n\n<p>My understanding gets fuzzier here. In a separate thread, we block for the message and push it into the channel when we get it. What I don't understand is why we need to hold onto the thread's handle. I would expect that <code>foo.forget</code> would be blocking itself, waiting until the stream is empty.</p>\n\n<p>In a telnet connection to the Redis server, send this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>publish rust awesome\n</code></pre>\n\n<p>And you will see it works. Adding print statements shows that the (for me) the <code>foo.forget</code> statement is run before the thread is spawned.</p>\n\n<hr>\n\n<p>Multiple messages is trickier. The <code>Sender</code> consumes itself to prevent the generating side from getting too far ahead of the consuming side. This is accomplished by returning another future from <code>send</code>! We need to shuttle it back out of there to reuse it for the next iteration of the loop:</p>\n\n<pre><code>extern crate redis;\nextern crate futures;\n\nuse std::thread;\nuse std::sync::mpsc;\n\nuse futures::Future;\nuse futures::stream::{self, Stream};\n\nfn main() {\n    let client = redis::Client::open(\"redis://127.0.0.1/\").expect(\"Unable to connect to Redis\");\n\n    let mut pubsub = client.get_pubsub().expect(\"Unable to create pubsub handle\");\n    pubsub.subscribe(\"rust\").expect(\"Unable to subscribe to redis channel\");\n\n    let (tx, payloads) = stream::channel();\n\n    let redis_thread = thread::spawn(move || {\n        let mut tx = tx;\n\n        while let Ok(msg) = pubsub.get_message() {\n            let payload: Result&lt;String, _&gt; = msg.get_payload();\n\n            let (next_tx_tx, next_tx_rx) = mpsc::channel();\n\n            tx.send(payload).and_then(move |new_tx| {\n                next_tx_tx.send(new_tx).expect(\"Unable to send successor channel tx\");\n                futures::finished(())\n            }).forget();\n\n            tx = next_tx_rx.recv().expect(\"Unable to receive successor channel tx\");\n        }\n    });\n\n    let foo = payloads\n        .and_then(|payload| futures::finished(println!(\"{}\", payload)))\n        .for_each(|_| Ok(()));\n\n    foo.forget();\n    redis_thread.join().expect(\"unable to join to thread\");\n}\n</code></pre>\n\n<p>I'm sure that there will be more ecosystem for this type of interoperation as time goes on. For example, the <a href=\"https://github.com/alexcrichton/futures-rs/tree/master/futures-cpupool\">futures-cpupool</a> crate could <em>probably</em> be extended to support a similar usecase to this.</p>\n"}], "owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2529, "favorite_count": 3, "answer_count": 1, "score": 7, "last_activity_date": 1471004032, "creation_date": 1470952259, "last_edit_date": 1471004032, "question_id": 38906680, "link": "https://stackoverflow.com/questions/38906680/how-to-implement-a-stream-of-futures-for-a-blocking-call-using-futures-rs-and-re", "title": "How to implement a stream of futures for a blocking call using futures.rs and Redis PubSub?", "body": "<p>I'm trying to create a system by which my application can receive streaming data from a Redis PubSub channel and process it.  The <a href=\"https://github.com/mitsuhiko/redis-rs\" rel=\"nofollow\">Redis driver</a> that I'm using, along with all other Redis drivers for Rust that I've seen, use a blocking operation to get data from the channel that only returns a value when it receives data:</p>\n\n<pre><code>let msg = match pubsub.get_message() {\n        Ok(m) =&gt; m,\n        Err(_) =&gt; panic!(\"Could not get message from pubsub!\")\n};\nlet payload: String = match msg.get_payload() {\n    Ok(s) =&gt; s,\n    Err(_) =&gt; panic!(\"Could not convert redis message to string!\")\n};\n</code></pre>\n\n<p>I wanted to use the <a href=\"https://github.com/alexcrichton/futures-rs\" rel=\"nofollow\">futures-rs</a> library to wrap this blocking function call in a future so that I can perform other tasks within my application while waiting for input.  </p>\n\n<p>I read the <a href=\"https://github.com/alexcrichton/futures-rs/blob/master/TUTORIAL.md\" rel=\"nofollow\">tutorial</a> for futures and tried to create a <code>Stream</code> that would signal when there data is received by the PubSub, but I can't figure out how to do so.</p>\n\n<p>How can I create <code>schedule</code> and <code>poll</code> functions for the blocking <code>pubsub.get_message()</code> function?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1470948733, "last_edit_date": 1495535322, "creation_date": 1470948490, "answer_id": 38905864, "question_id": 38905774, "link": "https://stackoverflow.com/questions/38905774/how-do-i-know-what-types-i-have-to-put-into-the-generic-type-parameters/38905864#38905864", "title": "How do I know what types I have to put into the generic type parameters?", "body": "<p>Change the type of your variable (<code>encoder</code>) to cause a type mismatch. The easiest type to use for this is <code>()</code>:</p>\n\n<pre><code>let mut encoder: gfx::Encoder&lt;(), ()&gt; = factory.create_command_buffer().into();\n</code></pre>\n\n<p>This will generate an error with the concrete types, which you can then clean up and use directly.</p>\n\n<p>See also <a href=\"https://stackoverflow.com/q/21747136/155423\">How do I print the type of a variable in Rust?</a>.</p>\n\n<hr>\n\n<p>In many cases, you'd use something a bit simpler:</p>\n\n<pre><code>let mut encoder: () = factory.create_command_buffer().into();\n</code></pre>\n\n<p>But that's unlikely to work in this <em>specific</em> case because <code>into</code> has a polymorphic return type. It needs to have some concrete type specified in order to know which implementation should be called.</p>\n"}], "owner": {"reputation": 965, "user_id": 2471991, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/38d24c1620a7ac80a7711adea8d118f8?s=128&d=identicon&r=PG", "display_name": "Timm", "link": "https://stackoverflow.com/users/2471991/timm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 126, "favorite_count": 0, "accepted_answer_id": 38905864, "answer_count": 1, "score": 2, "last_activity_date": 1470948733, "creation_date": 1470948183, "last_edit_date": 1470948367, "question_id": 38905774, "link": "https://stackoverflow.com/questions/38905774/how-do-i-know-what-types-i-have-to-put-into-the-generic-type-parameters", "title": "How do I know what types I have to put into the generic type parameters?", "body": "<p>I'm learning Rust by looking at and manipulating examples from others. I tried to encapsulate the following code into a struct:</p>\n\n<pre><code>let mut encoder: gfx::Encoder&lt;_, _&gt; = factory.create_command_buffer().into();\n</code></pre>\n\n<p>I want to create a struct like this:</p>\n\n<pre><code>pub struct Window {\n    encoder: gfx::Encoder&lt;?, ?&gt;,\n    // ...\n}\n</code></pre>\n\n<p>How do I know what types I have to put into the question marks?</p>\n"}, {"tags": ["casting", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1470950104, "last_edit_date": 1470950104, "creation_date": 1470947641, "answer_id": 38905648, "question_id": 38905276, "link": "https://stackoverflow.com/questions/38905276/casting-u8-to-stdioread-causes-sized-issue/38905648#38905648", "title": "Casting &amp;[u8] to std::io::Read causes Sized issue", "body": "<p>I <em>think</em> this is a rather an unhelpful error message. I'll try to explain:</p>\n\n<hr>\n\n<p><strong>First</strong>: you can't have a trait object <code>&amp;Sized</code>. This violates the <a href=\"https://doc.rust-lang.org/error-index.html#the-trait-cannot-require-self-sized\" rel=\"nofollow\">first object safety rule</a> and it doesn't really make sense either. The only reason to add the <code>Sized</code> trait bound is to use the special property of all <code>Sized</code> types (e.g. saving it on the stack). Look at this example trying to use the property:</p>\n\n<pre><code>fn foo(x: &amp;Sized) {\n    let y = *x;\n}\n</code></pre>\n\n<p>What size would <code>y</code> have? The compiler can't know, as with any other trait object. So we're not able to use the only purpose of <code>Sized</code> with trait objects. Thus a trait object <code>&amp;Sized</code> is useless and can't really exist.</p>\n\n<p>In this case the error message at least kind of tells us the correct thing:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait `std::marker::Sized` cannot be made into an object [--explain E0038]\n --&gt; &lt;anon&gt;:7:1\n7 |&gt; fn foo(x: &amp;Sized) {\n  |&gt; ^\nnote: the trait cannot require that `Self : Sized` \n</code></pre>\n\n<hr>\n\n<p><strong>Furthermore</strong>: I suspect you added the <code>+ Sized</code> bound to work around the same error, which already showed up when you had the argument <code>reader: &amp;Read</code>. Here is one important insight from the detailed error description:</p>\n\n<blockquote>\n  <p>Generally, <code>Self : Sized</code> is used to indicate that the trait should not be used as a trait object. </p>\n</blockquote>\n\n<p>This restriction for <code>Read::bytes</code> does make sense, because the <code>Bytes</code> iterator calls <code>Read::read()</code> once for every single byte. If this function call would be a virtual/dynamic one, the overhead for the function call would be much higher than the actual process of <code>read</code>ing the byte.</p>\n\n<hr>\n\n<p><strong>So...</strong> why do you need to have <code>Read</code> as a trait object anyway? Often it's sufficient (and in any case much faster) to handle this via generics:</p>\n\n<pre><code>fn print_reader&lt;R: Read&gt;(reader: R) {\n    for byte in reader.bytes() {\n        println!(\"{}\", byte.unwrap());\n    }\n}\n</code></pre>\n\n<p>This avoids dynamic dispatch and works nicely with the type checker <em>and</em> the optimizer. </p>\n"}], "owner": {"reputation": 731, "user_id": 365296, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d9660075c6f5de1711e97d6383f4ea1e?s=128&d=identicon&r=PG", "display_name": "Emanuel", "link": "https://stackoverflow.com/users/365296/emanuel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 480, "favorite_count": 0, "accepted_answer_id": 38905648, "answer_count": 1, "score": 2, "last_activity_date": 1470950104, "creation_date": 1470946271, "last_edit_date": 1470946375, "question_id": 38905276, "link": "https://stackoverflow.com/questions/38905276/casting-u8-to-stdioread-causes-sized-issue", "title": "Casting &amp;[u8] to std::io::Read causes Sized issue", "body": "<p>Trying to provide <code>&amp;[u8]</code> as argument to a function requiring <code>Read</code> doesn't seem to work as I expected, as illustrated by the below example.</p>\n\n<pre><code>use std::io::Read;\n\nfn main() {\n    let bytes: &amp;[u8] = &amp;[1, 2, 3, 4];\n    print_reader(&amp;bytes);\n}\n\nfn print_reader(reader: &amp;(Read + Sized)) {\n    for byte in reader.bytes() {\n        println!(\"{}\", byte.unwrap());\n    }\n}\n</code></pre>\n\n<p>Compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::io::Read + Sized: std::marker::Sized` is not satisfied [--explain E0277]\n --&gt; &lt;anon&gt;:9:24\n9 |&gt;     for byte in reader.bytes() {\n  |&gt;                        ^^^^^\nnote: `std::io::Read + Sized` does not have a constant size known at compile-time\n\nerror: the trait bound `std::io::Read + Sized: std::marker::Sized` is not satisfied [--explain E0277]\n --&gt; &lt;anon&gt;:9:5\n9 |&gt;     for byte in reader.bytes() {\n  |&gt;     ^\nnote: `std::io::Read + Sized` does not have a constant size known at compile-time\nnote: required because of the requirements on the impl of `std::iter::Iterator` for `std::io::Bytes&lt;std::io::Read + Sized&gt;`\n\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1acf98e0081dbd9ebac04eef7b7d23d7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust playground</a></p>\n\n<p>The following trait implementation can be found in the <a href=\"https://doc.rust-lang.org/std/primitive.slice.html\" rel=\"nofollow\"><code>std::slice</code></a> documentation:</p>\n\n<p><code>impl&lt;'a&gt; Read for &amp;'a [u8]</code>.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470939820, "post_id": 38903378, "comment_id": 65165689, "body": "Why do you think that <code>Serializer</code> should implement <code>Convert&lt;&amp;String&gt;</code>? I see <code>Convert&lt;&amp;&#39;a str&gt;</code>, not <code>&amp;String</code>."}, {"owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470940481, "post_id": 38903378, "comment_id": 65166061, "body": "@Shepmaster I&#39;m expecting that <code>&amp;String</code> will have translated into <code>&amp;str</code>, when I&#39;m passing <code>&amp;data</code> as an argument to the <code>to_binary</code> function."}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1470941077, "last_edit_date": 1470941077, "creation_date": 1470939869, "answer_id": 38903623, "question_id": 38903378, "link": "https://stackoverflow.com/questions/38903378/why-is-the-trait-bound-traitstring-not-satisfied-even-though-ive-implemented/38903623#38903623", "title": "Why is the trait bound Trait&lt;&amp;String&gt; not satisfied even though I&#39;ve implemented Trait&lt;&amp;str&gt;?", "body": "<blockquote>\n  <p>How can I fix this?</p>\n</blockquote>\n\n<p>By getting a <code>&amp;str</code> from <code>data</code>:</p>\n\n<pre><code>let binary_string = self.to_binary(&amp;*data);\n</code></pre>\n\n<p>Like the error says, <code>Convert&lt;&amp;String&gt;</code> is not implemented for <code>Serializer</code>, but <code>Convert&lt;&amp;str&gt;</code> is. <code>&amp;data</code> is a <code>&amp;String</code>, but you need a <code>&amp;str</code>, writing <code>&amp;*data</code> produces a <code>&amp;str</code>.</p>\n\n<hr>\n\n<p>Note that in general (when the string is not changed) it should not be necessary to implement the same functionality for both <code>String</code> and <code>&amp;str</code>, only the <code>&amp;str</code> version should be enough. In your example, you can remove the <code>Serialize&lt;String&gt;</code> implementation for <code>Serializer</code> and use <code>Serialize&lt;&amp;str&gt;</code> instead.</p>\n\n<pre><code>fn main() {\n    let mut s = Serializer;\n    let a: String = \"a\".to_string();\n    // autoderef &amp;String to &amp;str and call Serialize&lt;&amp;str&gt;::to_bert()\n    // I don't know why the autoderef does not work in your original example\n    s.to_bert(&amp;a);\n}\n</code></pre>\n"}], "owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 715, "favorite_count": 0, "accepted_answer_id": 38903623, "answer_count": 1, "score": 1, "last_activity_date": 1470942255, "creation_date": 1470939039, "last_edit_date": 1470942255, "question_id": 38903378, "link": "https://stackoverflow.com/questions/38903378/why-is-the-trait-bound-traitstring-not-satisfied-even-though-ive-implemented", "title": "Why is the trait bound Trait&lt;&amp;String&gt; not satisfied even though I&#39;ve implemented Trait&lt;&amp;str&gt;?", "body": "<p>I have written the following code:</p>\n\n<pre><code>pub struct Serializer;\n\npub trait Serialize&lt;T&gt; {\n    fn to_bert(&amp;self, data: T) -&gt; Vec&lt;u8&gt;;\n}\n\npub trait Convert&lt;T&gt; {\n    fn to_binary(&amp;self, data: T) -&gt; Vec&lt;u8&gt;;\n}\n\nimpl&lt;'a&gt; Convert&lt;&amp;'a str&gt; for Serializer {\n    fn to_binary(&amp;self, data: &amp;'a str) -&gt; Vec&lt;u8&gt; {\n        let binary_string = data.as_bytes();\n        let binary_length = binary_string.len() as i16;\n        let mut binary = vec![];\n        binary.write_i16::&lt;BigEndian&gt;(binary_length).unwrap();\n        binary.extend(binary_string.iter().clone());\n        binary\n    }\n}\n\nimpl Serialize&lt;String&gt; for Serializer {\n    fn to_bert(&amp;self, data: String) -&gt; Vec&lt;u8&gt; {\n        let binary_string = self.to_binary(&amp;data);\n        self.generate_term(BertTag::String, binary_string)\n    }\n}\n\nimpl&lt;'a&gt; Serialize&lt;&amp;'a str&gt; for Serializer {\n    fn to_bert(&amp;self, data: &amp;'a str) -&gt; Vec&lt;u8&gt; {\n        let binary_string = self.to_binary(data);\n        self.generate_term(BertTag::String, binary_string)\n    }\n}\n</code></pre>\n\n<p>When compiling, I receive an error which says the compiler cannot find the right function for a call:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `serializers::Serializer: serializers::Convert&lt;&amp;std::string::String&gt;` is not satisfied [E0277]\nlet binary_string = self.to_binary(&amp;data);\n                         ^~~~~~~~~\nhelp: run `rustc --explain E0277` to see a detailed explanation\nhelp: the following implementations were found:\nhelp:   &lt;serializers::Serializer as serializers::Convert&lt;&amp;'a str&gt;&gt;\nhelp:   &lt;serializers::Serializer as serializers::Convert&lt;types::BertType&gt;&gt;\n</code></pre>\n\n<p>Why can the compiler not find the right implementation when I've specified <code>&amp;str</code> with a lifetime? How can I fix this?</p>\n"}, {"tags": ["enums", "pattern-matching", "rust"], "answers": [{"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 2, "last_activity_date": 1470934814, "creation_date": 1470934814, "answer_id": 38902212, "question_id": 38902195, "link": "https://stackoverflow.com/questions/38902195/modifying-a-value-inside-an-enum-while-matching/38902212#38902212", "title": "Modifying a value inside an enum while matching", "body": "<p>You need to make the binding to <code>a</code> mutable. </p>\n\n<pre><code>enum Foo {\n    Bar(usize),\n}\n\nfn main() {\n    let mut a = Foo::Bar(10);\n\n    match a {\n        Foo::Bar(ref mut val) =&gt; *val = 33,\n    }\n    match a {\n        Foo::Bar(val) =&gt; println!(\"{}\", val), // 33\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 147, "user_id": 3489880, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c0e1f8d5db25be2aac5905b2fe6ebf65?s=128&d=identicon&r=PG&f=1", "display_name": "Getkey", "link": "https://stackoverflow.com/users/3489880/getkey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 41, "favorite_count": 0, "accepted_answer_id": 38902212, "answer_count": 1, "score": 1, "last_activity_date": 1470935450, "creation_date": 1470934712, "last_edit_date": 1470935450, "question_id": 38902195, "link": "https://stackoverflow.com/questions/38902195/modifying-a-value-inside-an-enum-while-matching", "title": "Modifying a value inside an enum while matching", "body": "<p>Is it possible to directly modify a value embedded inside an enum?</p>\n\n<p>The following fails with <code>error: cannot borrow immutable anonymous field `a.0` as mutable</code>, even though I used <code>ref mut</code>.</p>\n\n<pre><code>enum Foo {\n    Bar(usize),\n}\n\nfn main() {\n    let a = Foo::Bar(10);\n\n    match a {\n        Foo::Bar(ref mut val) =&gt; *val = 33,\n    }\n    match a {\n        Foo::Bar(val) =&gt; println!(\"{}\", val), // should print 33\n    }\n}\n</code></pre>\n\n<p>That's not a huge problem because I can do the following as a work-around:</p>\n\n<pre><code>match a {\n    Foo::Bar(val) =&gt; a = Foo::Bar(33),\n}\n</code></pre>\n\n<p>But is this the correct way?</p>\n"}, {"tags": ["rust", "operators"], "answers": [{"comments": [{"owner": {"reputation": 763, "user_id": 2180200, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2559ec3261834aa8aa2b7c0c828b02e0?s=128&d=identicon&r=PG", "display_name": "jp48", "link": "https://stackoverflow.com/users/2180200/jp48"}, "edited": false, "score": 3, "creation_date": 1504883373, "post_id": 38896376, "comment_id": 79201607, "body": "For the record, now this can be found in the reference: <a href=\"https://doc.rust-lang.org/reference/expressions.html#negation-operators\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/expressions.html#negation-operat&zwnj;&#8203;ors</a>"}, {"owner": {"reputation": 37211, "user_id": 60075, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/da582d6fbfa2ae515004ef49fcb7c281?s=128&d=identicon&r=PG", "display_name": "Craig McQueen", "link": "https://stackoverflow.com/users/60075/craig-mcqueen"}, "edited": false, "score": 2, "creation_date": 1598327951, "post_id": 38896376, "comment_id": 112415110, "body": "Now at <a href=\"https://doc.rust-lang.org/reference/expressions/operator-expr.html#negation-operators\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/expressions/&hellip;</a>"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 44, "last_activity_date": 1549571131, "last_edit_date": 1549571131, "creation_date": 1470918377, "answer_id": 38896376, "question_id": 38896155, "link": "https://stackoverflow.com/questions/38896155/what-is-the-bitwise-not-operator-in-rust/38896376#38896376", "title": "What is the bitwise NOT operator in Rust?", "body": "<p>The <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Not.html\" rel=\"noreferrer\"><strong><code>!</code> operator</strong></a> is implemented for many primitive types and it's equivalent to the <code>~</code> operator in C. See this example (<a href=\"https://play.rust-lang.org/?gist=dc71248cd9f687cb1e43257eb382e529&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>let x = 0b10101010u8;\nlet y = !x;\nprintln!(\"x: {:0&gt;8b}\", x);\nprintln!(\"y: {:0&gt;8b}\", y);\n</code></pre>\n\n<p>Outputs:</p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>x: 10101010\ny: 01010101\n</code></pre>\n</blockquote>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40467995/155423\">How do you set, clear and toggle a single bit in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 1929, "user_id": 539972, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/a06770429504c24cfeded0a38576007f?s=128&d=identicon&r=PG", "display_name": "Verax", "link": "https://stackoverflow.com/users/539972/verax"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13908, "favorite_count": 2, "accepted_answer_id": 38896376, "answer_count": 1, "score": 40, "last_activity_date": 1562577989, "creation_date": 1470917780, "last_edit_date": 1562577989, "question_id": 38896155, "link": "https://stackoverflow.com/questions/38896155/what-is-the-bitwise-not-operator-in-rust", "title": "What is the bitwise NOT operator in Rust?", "body": "<p>Looking at the <a href=\"https://doc.rust-lang.org/reference.html#bitwise-operators\" rel=\"noreferrer\">list of bitwise operators in the Rust Book</a>, I don't see a NOT operator (like <code>~</code> in C).  Is there no NOT operator in Rust?</p>\n"}, {"tags": ["casting", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3008, "user_id": 3204951, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8aca84582c72a22e9cb5245571103d92?s=128&d=identicon&r=PG", "display_name": "Nate Mara", "link": "https://stackoverflow.com/users/3204951/nate-mara"}, "edited": false, "score": 0, "creation_date": 1471089401, "post_id": 38888843, "comment_id": 65220625, "body": "This OP. You really should be doing the cast to <code>usize</code> as early as possible and storing the value as a usize. There&#39;s no reason to try and do an operation that could possibly panic just because you want to save a few keystrokes."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1470897109, "creation_date": 1470897109, "answer_id": 38888843, "question_id": 38888724, "link": "https://stackoverflow.com/questions/38888724/how-to-index-vectors-with-integer-types-besides-usize-without-explicit-cast/38888843#38888843", "title": "How to index vectors with integer types (besides usize), without explicit cast?", "body": "<p>No.</p>\n\n<p>If it were your own type, you could implement <code>Index&lt;u32&gt;</code>, but it isn't and you can't.</p>\n\n<p>If you're really, pathologically opposed to casting the index, you could write an adaptor type that does the cast, but that's getting a bit silly.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1470905264, "last_edit_date": 1470905264, "creation_date": 1470904323, "answer_id": 38891201, "question_id": 38888724, "link": "https://stackoverflow.com/questions/38888724/how-to-index-vectors-with-integer-types-besides-usize-without-explicit-cast/38891201#38891201", "title": "How to index vectors with integer types (besides usize), without explicit cast?", "body": "<p>If you only want to index arrays of your own type, and you use a newtype for the index, then you can create an <code>Index</code> impl:</p>\n\n<pre><code>struct MyIndex(u32);\nstruct MyValue(u64);\n\nimpl std::ops::Index&lt;MyIndex&gt; for [MyValue] {\n    type Output = MyValue;\n    fn index(&amp;self, idx: MyIndex) -&gt; &amp;MyValue {\n        &amp;self[idx.0 as usize]\n    }\n}\n</code></pre>\n\n<p>Now, you can index any array of <code>MyValue</code>s with <code>MyIndex</code>. Instead of using <code>u32</code> everywhere, you now have to use <code>MyIndex</code>. There's the <a href=\"https://crates.io/crates/newtype_derive\" rel=\"nofollow\"><code>newtype_derive</code> crate</a> to help you make the <code>MyIndex</code> behave mostly like a <code>u32</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 188, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1470905264, "creation_date": 1470896697, "last_edit_date": 1470903921, "question_id": 38888724, "link": "https://stackoverflow.com/questions/38888724/how-to-index-vectors-with-integer-types-besides-usize-without-explicit-cast", "title": "How to index vectors with integer types (besides usize), without explicit cast?", "body": "<p>There are times when indices need to be tightly packed (mesh geometry for example), where its useful to store indices as <code>u32</code> instead of <code>usize</code>.</p>\n\n<p>Is there a way to index a vector in Rust without having to explicitly cast to <code>usize</code> every time? eg:</p>\n\n<pre><code>vector[some_u32 as usize];\n</code></pre>\n\n<p>Casting in single instances isn't a problem, its just tedious when needed frequently.</p>\n\n<p>Is there a way to avoid having to cast here?</p>\n"}, {"tags": ["image", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470885366, "post_id": 38886081, "comment_id": 65133836, "body": "@Shepmaster, fair point, in fact I asked with the intention of writing my own answer (still planned), Its similar to this question, which has multiple useful answers - <a href=\"http://stackoverflow.com/questions/902761\">stackoverflow.com/questions/902761</a> (I&#39;m looking to  port my own answer over from Python to Rust)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470886635, "post_id": 38886081, "comment_id": 65134159, "body": "You can always wait until your self answer is ready before posting the not-great question."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1470886977, "post_id": 38886081, "comment_id": 65134252, "body": "True, even so, disagree that its a bad question - its a very common operation, where multiple useful answers apply (using wrapper, accessing libpng or write data directly and compressing with zlib). When a new Rust developer wants to write an image its handy to have answers like this showing some good options."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470917363, "post_id": 38886081, "comment_id": 65150846, "body": "<i>showing some good options</i> \u2014 except these questions just end up being outdated catalogs of &quot;here&#39;s a library that does that&quot;, <a href=\"http://stackoverflow.com/help/on-topic\">something that is explicitly off-topic</a>."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1471133790, "post_id": 38886081, "comment_id": 65232104, "body": "I don&#39;t want to sound like I&#39;m desperate for reputation points here (because I really am not), but is your answer still on its way @ideasman42 ?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471141583, "post_id": 38886081, "comment_id": 65233055, "body": "@Shepmaster, this is only the case if all answers use libraries."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1471141637, "post_id": 38886081, "comment_id": 65233060, "body": "@SimonWhitehead not doing it this moment - I wanted to access zlib directly, but this is a little involved (for a beginner), so feel free to add answer."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1471151104, "post_id": 38886081, "comment_id": 65234077, "body": "@ideasman42 I did.. literally a few minutes after you asked the question. I was just wondering since I received another upvote for the answer and haven&#39;t seen any other activity from you on here."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1471272237, "post_id": 38886081, "comment_id": 65268677, "body": "Added own answer (entirely Rust PNG writer)."}], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 18, "last_activity_date": 1470880785, "creation_date": 1470880785, "answer_id": 38886139, "question_id": 38886081, "link": "https://stackoverflow.com/questions/38886081/how-to-save-a-png-image-in-rust/38886139#38886139", "title": "How to save a PNG image in Rust?", "body": "<p>You could <a href=\"https://github.com/PistonDevelopers/image\">use the image crate in the Piston repository</a> to save the raw buffer to disk.</p>\n\n<p>The example at the bottom of the page shows you how to do this..:</p>\n\n<pre><code>extern crate image;\n\nfn main() {\n\n    let buffer: &amp;[u8] = ...; // Generate the image data\n\n    // Save the buffer as \"image.png\"\n    image::save_buffer(&amp;Path::new(\"image.png\"), buffer, 800, 600, image::RGBA(8))\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 7540, "user_id": 4474230, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/713c7ce18010e541853962264a719d83?s=128&d=identicon&r=PG&f=1", "display_name": "Jeffrey", "link": "https://stackoverflow.com/users/4474230/jeffrey"}, "edited": false, "score": 0, "creation_date": 1533761866, "post_id": 38956995, "comment_id": 90470748, "body": "Super helpful. Small comment: it generates a warning about unnecessary parentheses"}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 12, "last_activity_date": 1533769072, "last_edit_date": 1533769072, "creation_date": 1471271116, "answer_id": 38956995, "question_id": 38886081, "link": "https://stackoverflow.com/questions/38886081/how-to-save-a-png-image-in-rust/38956995#38956995", "title": "How to save a PNG image in Rust?", "body": "<p>This is a self contained, pure Rust implementation of a PNG image writing function.</p>\n\n<p>It's based on my Python answer <a href=\"https://stackoverflow.com/a/19174800/432509\">here</a>.</p>\n\n<p>Notes:</p>\n\n<ul>\n<li>Since Rust doesn't expose zlib, this is quite a bit larger than the original Python code.</li>\n<li>This avoids using zlib by writing an uncompressed image.</li>\n<li><code>crc32</code> and <code>adler32</code> checksum implementations are included as modules.</li>\n<li>The key function to check is <code>write</code>, which takes any writable type (typically a file).</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>mod crc32 {\n    // https://github.com/ledbettj/crc32/blob/master/rust/src/crc32.rs\n    pub struct Crc32 {\n        table: [u32; 256],\n        value: u32,\n    }\n\n    const CRC32_INITIAL: u32 = 0xedb88320;\n\n    impl Crc32 {\n        pub fn new() -&gt; Crc32 {\n            let mut c = Crc32 {\n                table: [0; 256],\n                value: 0xffffffff,\n            };\n            for i in 0..256 {\n                let mut v = i as u32;\n                for _ in 0..8 {\n                    v = if v &amp; 1 != 0 {\n                        CRC32_INITIAL ^ (v &gt;&gt; 1)\n                    } else {\n                        v &gt;&gt; 1\n                    }\n                }\n                c.table[i] = v;\n            }\n            return c;\n        }\n\n        pub fn start(&amp;mut self) {\n            self.value = 0xffffffff;\n        }\n\n        pub fn update(&amp;mut self, buf: &amp;[u8]) {\n            for &amp;i in buf {\n                self.value = self.table[((self.value ^ (i as u32)) &amp; 0xff) as usize] ^\n                            (self.value &gt;&gt; 8);\n            }\n        }\n\n        pub fn finalize(&amp;mut self) -&gt; u32 {\n            self.value ^ 0xffffffff_u32\n        }\n\n        #[allow(dead_code)]\n        pub fn crc(&amp;mut self, buf: &amp;[u8]) -&gt; u32 {\n            self.start();\n            self.update(buf);\n            self.finalize()\n        }\n    }\n}\n\nmod adler32 {\n    // https://en.wikipedia.org/wiki/Adler-32\n\n    pub struct Adler32 {\n        a: u32,\n        b: u32,\n    }\n\n    const MOD_ADLER: u32 = 65521;\n\n    impl Adler32 {\n        pub fn new() -&gt; Adler32 {\n            Adler32 { a: 1, b: 0 }\n        }\n\n        pub fn start(&amp;mut self) {\n            self.a = 1;\n            self.b = 0;\n        }\n\n        pub fn update(&amp;mut self, buf: &amp;[u8]) {\n            for &amp;i in buf {\n                self.a = (self.a + i as u32) % MOD_ADLER;\n                self.b = (self.a + self.b) % MOD_ADLER;\n            }\n        }\n\n        pub fn finalize(&amp;self) -&gt; u32 {\n            return (self.b &lt;&lt; 16) | self.a;\n        }\n\n        #[allow(dead_code)]\n        pub fn crc(&amp;mut self, buf: &amp;[u8]) -&gt; u32 {\n            self.start();\n            self.update(buf);\n            self.finalize()\n        }\n    }\n}\n\n// big endian\n#[inline]\nfn u32_to_u8_be(v: u32) -&gt; [u8; 4] {\n    [(v &gt;&gt; 24) as u8, (v &gt;&gt; 16) as u8, (v &gt;&gt; 8) as u8, v as u8]\n}\n\nmod fake_zlib {\n    use super::adler32;\n    use super::u32_to_u8_be;\n\n    // Use 'none' compression\n    pub fn compress(data: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n        const CHUNK_SIZE: usize = 65530;\n\n        let final_len =\n            // header\n            2 +\n            // every chunk adds 5 bytes [1:type, 4:size].\n            (5 * {\n                let n = data.len() / CHUNK_SIZE;\n                // include an extra chunk when we don't fit exactly into CHUNK_SIZE\n                (n + {if data.len() == n * CHUNK_SIZE &amp;&amp; data.len() != 0 { 0 } else { 1 }})\n            }) +\n            // data\n            data.len() +\n            // crc\n            4\n        ;\n\n        let mut raw_data = Vec::with_capacity(final_len);\n        // header\n        raw_data.extend(&amp;[120, 1]);\n        let mut pos_curr = 0_usize;\n        let mut crc = adler32::Adler32::new();\n        loop {\n            let pos_next = ::std::cmp::min(data.len(), pos_curr + CHUNK_SIZE);\n            let chunk_len = (pos_next - pos_curr) as u32;\n            let is_last = pos_next == data.len();\n            raw_data.extend(&amp;[\n                // type\n                if is_last { 1 } else { 0 },\n\n                // size\n                (chunk_len &amp; 0xff) as u8,\n                ((chunk_len &gt;&gt; 8) &amp; 0xff) as u8,\n                (0xff - (chunk_len &amp; 0xff)) as u8,\n                (0xff - ((chunk_len &gt;&gt; 8) &amp; 0xff)) as u8,\n            ]);\n\n            raw_data.extend(&amp;data[pos_curr..pos_next]);\n\n            crc.update(&amp;data[pos_curr..pos_next]);\n\n            if is_last {\n                break;\n            }\n            pos_curr = pos_next;\n        }\n\n        raw_data.extend(&amp;u32_to_u8_be(crc.finalize()));\n\n        assert_eq!(final_len, raw_data.len());\n        return raw_data;\n    }\n}\n\n///\n/// Write RGBA pixels to uncompressed PNG.\n///\npub fn write&lt;W: ::std::io::Write&gt;(\n    file: &amp;mut W,\n    image: &amp;[u8],\n    w: u32,\n    h: u32,\n) -&gt; Result&lt;(), ::std::io::Error&gt; {\n\n    assert!(w as usize * h as usize * 4 == image.len());\n\n    fn png_pack&lt;W: ::std::io::Write&gt;(\n        file: &amp;mut W,\n        png_tag: &amp;[u8; 4],\n        data: &amp;[u8],\n    ) -&gt; Result&lt;(), ::std::io::Error&gt; {\n        file.write(&amp;u32_to_u8_be(data.len() as u32))?;\n        file.write(png_tag)?;\n        file.write(data)?;\n        {\n            let mut crc = crc32::Crc32::new();\n            crc.start();\n            crc.update(png_tag);\n            crc.update(data);\n            file.write(&amp;u32_to_u8_be(crc.finalize()))?;\n        }\n        Ok(())\n    }\n\n    file.write(b\"\\x89PNG\\r\\n\\x1a\\n\")?;\n    {\n        let wb = u32_to_u8_be(w);\n        let hb = u32_to_u8_be(h);\n        let data = [wb[0], wb[1], wb[2], wb[3],\n                    hb[0], hb[1], hb[2], hb[3],\n                    8, 6, 0, 0, 0];\n        png_pack(file, b\"IHDR\", &amp;data)?;\n    }\n\n    {\n        let width_byte_4 = w * 4;\n        let final_len = (width_byte_4 + 1) * h;\n        let mut raw_data = Vec::with_capacity(final_len as usize);\n        let mut span: u32 = (h - 1) * width_byte_4;\n        loop {\n            raw_data.push(0);\n            raw_data.extend(&amp;image[(span as usize)..(span + width_byte_4) as usize]);\n            if span == 0 {\n                break;\n            }\n            span -= width_byte_4;\n        }\n        assert!(final_len == (raw_data.len() as u32));\n\n        png_pack(file, b\"IDAT\", &amp;fake_zlib::compress(&amp;raw_data))?;\n    }\n\n    png_pack(file, b\"IEND\", &amp;[])?;\n\n    Ok(())\n}\n\n\nfn main() {\n    let mut f = std::fs::File::create(\"test.png\").unwrap();\n\n    // image from bottom to top 3x2\n    let image_width = 3;\n    let image_height = 2;\n    let image = vec!(\n        // R     G     B     A\n        0xff, 0x00, 0x00, 0xff,\n        0x00, 0xff, 0x00, 0xff,\n        0x00, 0x00, 0xff, 0xff,\n\n        0x80, 0x00, 0x00, 0xff,\n        0x00, 0x80, 0x00, 0xff,\n        0x00, 0x00, 0x80, 0xff,\n    );\n\n    match write(&amp;mut f, &amp;image, image_width, image_height) {\n        Ok(_) =&gt; println!(\"Written image!\"),\n        Err(e) =&gt; println!(\"Error {:?}\", e),\n    }\n}\n</code></pre>\n\n<p>This has since been made into the <a href=\"https://crates.io/crates/png_encode_mini\" rel=\"noreferrer\">png_encode_mini crate</a>, which is basically the same as this snippet.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5734, "favorite_count": 4, "answer_count": 2, "score": 8, "last_activity_date": 1533769072, "creation_date": 1470880279, "last_edit_date": 1470882782, "question_id": 38886081, "link": "https://stackoverflow.com/questions/38886081/how-to-save-a-png-image-in-rust", "title": "How to save a PNG image in Rust?", "body": "<p>Given a vector of <code>u8</code> bytes (4 bytes per pixel - RGBA), how can this be saved to a PNG file?</p>\n"}]