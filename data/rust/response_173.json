[{"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1525268250, "post_id": 50135871, "comment_id": 87290057, "body": "Relevant book sections: <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch13-01-closures.html#capturing-the-environment-with-closures\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/second-edition/&hellip;</a> and <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch16-01-threads.html#using-move-closures-with-threads\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/second-edition/&hellip;</a>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 4, "creation_date": 1525273355, "post_id": 50135871, "comment_id": 87293878, "body": "The important distinction here is that <code>move</code> causes the variables to be <i>moved into</i> the closure at creation time, which does not prevent the closure from being called more than once.  If the closure code moves any value <i>out of the captured variables</i>, i.e. consumes these values, the closure becomes <code>FnOnce</code>.  You can only move values out of captured variables if they are first moved into the closure, but just moving the values in by itself does not make the closure <code>FnOnce</code>."}], "answers": [{"comments": [{"owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "edited": false, "score": 0, "creation_date": 1525275991, "post_id": 50135944, "comment_id": 87295534, "body": "I see, but still this topic leaves a lot of confusion for me. Examples - in TRPL:      FnOnce consumes the variables it captures from its enclosing scope, known as the closure\u2019s environment. To consume the captured variables, the closure must take ownership of these variables and move them into the closure when it is defined. The Once part of the name represents the fact that the closure can\u2019t take ownership of the same variables more than once, so it can be called only once."}, {"owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "edited": false, "score": 0, "creation_date": 1525276098, "post_id": 50135944, "comment_id": 87295598, "body": "The other source: <a href=\"http://huonw.github.io/blog/2015/05/finding-closure-in-rust/\" rel=\"nofollow noreferrer\">huonw.github.io/blog/2015/05/finding-closure-in-rust</a>: Similarly, if closure was to be || drop(v);\u2014that is, move out of v\u2014it would be illegal to implement either Fn or FnMut.    But this code run totally fine: `     let r = Some(1);     let c: Box&lt;Fn()&gt; = Box::new(move || {         drop(r);     });     c();     c(); `"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "edited": false, "score": 2, "creation_date": 1525276694, "post_id": 50135944, "comment_id": 87295998, "body": "@AlexeyKarasev Regarding your first comment, this is exactly in line with this answer \u2013 also see my comment on the question.  Regarding your second comment, the example you gave is a bit misleading, since <code>Option&lt;i32&gt;</code> implements the <code>Copy</code> trait, so it&#39;s not actually consumed by <code>drop()</code>.  If you try with something that&#39;s not <code>Copy</code>, you will see an error for that code."}, {"owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "edited": false, "score": 0, "creation_date": 1525280102, "post_id": 50135944, "comment_id": 87297894, "body": "Oh, I see, so it looks like my understanding of wording was the trouble. So in TRPL by consume they mean smth like if let Some(x) = r inside closure. If something is moved inside the closure (like r in this case) they refer to it as capturing. So basically FnOnce means, that you&#39;re destroying Environment, that&#39;s why you can only call it once (the next call won&#39;t have the same Environment). Move on the other hand deals with having references to stack, so it&#39;s more like the lifetime issue."}], "tags": [], "owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "is_accepted": false, "score": 4, "last_activity_date": 1525273328, "last_edit_date": 1525273328, "creation_date": 1525267953, "answer_id": 50135944, "question_id": 50135871, "link": "https://stackoverflow.com/questions/50135871/how-can-a-closure-using-the-move-keyword-create-a-fnmut-closure/50135944#50135944", "title": "How can a closure using the `move` keyword create a FnMut closure?", "body": "<blockquote>\n  <p>Up to this moment I thought that <code>move |...| {...}</code> will move variables inside closure and closure will implement only <code>FnOnce</code>, because you can move vars only once.</p>\n</blockquote>\n\n<p>The variables are moved when the closure is created, not when it is invoked. Since you're only creating one closure, the move only happens once - regardless of how often <code>map</code> calls the function.</p>\n"}, {"comments": [{"owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1525323224, "post_id": 50143627, "comment_id": 87312499, "body": "This is a much more complete answer. I&#39;m going to have to include it in the <a href=\"https://github.com/vitiral/taken/issues/1\" rel=\"nofollow noreferrer\">taken docs</a>"}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 12, "last_activity_date": 1613936221, "last_edit_date": 1613936221, "creation_date": 1525295505, "answer_id": 50143627, "question_id": 50135871, "link": "https://stackoverflow.com/questions/50135871/how-can-a-closure-using-the-move-keyword-create-a-fnmut-closure/50143627#50143627", "title": "How can a closure using the `move` keyword create a FnMut closure?", "body": "<p>Yes, this point is quite confusing, and I think the wording of the Rust book contributes. After I read it, I thought the same as you did: that a <code>move</code> closure was necessarily <code>FnOnce</code>, and that a non-<code>move</code> closure was <code>FnMut</code> (and may also be <code>Fn</code>). But this is kind-of backwards from the real situation.</p>\n<p>The closure can capture values from the scope where it's created. <code>move</code> controls how those values go into the closure: either by being moved, or by reference. But it's how they're used <em>after</em> they're captured that determines whether the closure is <code>FnMut</code> or not.</p>\n<p>If the body of the closure consumes any value it captured, then the closure can only be <code>FnOnce</code>. After the closure runs the first time, and consumes that value, it can't run again.</p>\n<p>As you've mentioned, you can consume a value inside the closure by calling <code>drop</code> on it, or in other ways, but the most common case is to return it from the closure, which moves it out of the closure. Here's the simplest example:</p>\n<pre><code>let s = String::from(&quot;hello world&quot;);\nlet my_fnonce = move || { s };\n</code></pre>\n<p>If the body of the closure doesn't consume any of its captures, then it's <code>FnMut</code>, whether it was <code>move</code> or not. If it also doesn't mutate any of its captures, it's also <code>Fn</code>; any closure that is <code>Fn</code> is also <code>FnMut</code>. Here's a simple example, albeit not a very good one.</p>\n<pre><code>let s = &quot;hello world&quot;;\nlet my_fn = move || { s.len() }\n</code></pre>\n<h2>Summary</h2>\n<p>The <code>move</code> modifier controls how captures are moved <strong>into</strong> the closure when it's <strong>created</strong>. <code>FnMut</code> membership is determined by how captures are moved <strong>out of</strong> the closure (or consumed in some other way) when it's <strong>executed</strong>.</p>\n"}], "owner": {"reputation": 440, "user_id": 1682175, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/de309c739284b45e27fe8ab11fa7a0e9?s=128&d=identicon&r=PG", "display_name": "AlexeyKarasev", "link": "https://stackoverflow.com/users/1682175/alexeykarasev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1096, "favorite_count": 5, "accepted_answer_id": 50143627, "answer_count": 2, "score": 4, "last_activity_date": 1613936221, "creation_date": 1525267709, "last_edit_date": 1525273308, "question_id": 50135871, "link": "https://stackoverflow.com/questions/50135871/how-can-a-closure-using-the-move-keyword-create-a-fnmut-closure", "title": "How can a closure using the `move` keyword create a FnMut closure?", "body": "<p>Up to this moment I thought that <code>move |...| {...}</code> would move variables inside a closure and the closure would implement only <code>FnOnce</code>, because you can move variables only once. To my surprise, however, I found that this code works:</p>\n\n<pre><code>extern crate futures;\n\nuse futures::stream;\nuse futures::stream::{Stream, StreamExt};\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Foo(i32);\n\nfn bar(r: Rc&lt;Foo&gt;) -&gt; Box&lt;Stream&lt;Item = (), Error = ()&gt; + 'static&gt; {\n    Box::new(stream::repeat::&lt;_, ()&gt;(()).map(move |_| {\n        println!(\"{:?}\", r);\n    }))\n}\n\nfn main() {\n    let r = Rc::new(Foo(0));\n    let _ = bar(r);\n}\n</code></pre>\n\n<p>Despite <code>map</code> having this signature:</p>\n\n<pre><code>fn map&lt;U, F&gt;(self, f: F) -&gt; Map&lt;Self, F&gt;\nwhere\n    F: FnMut(Self::Item) -&gt; U, \n</code></pre>\n\n<p>It's surprising to me that a <code>FnMut</code> closure was created when using the <code>move</code> keyword and it even has <code>'static</code> lifetime. Where can I find some details about <code>move</code>? Or how does it actually work?</p>\n"}, {"tags": ["string", "rust", "dereference", "borrowing"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1525261358, "post_id": 50133735, "comment_id": 87285608, "body": "&quot;They both yield the correct result, but I have no idea why!&quot; =&gt; &quot;Theory is when you know everything but nothing works <b>practice is when everything works but no one knows why</b> in our lab theory and practice are combined nothing works and no one knows why&quot;"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525263070, "post_id": 50133735, "comment_id": 87286560, "body": "I think this is very similar to <a href=\"https://stackoverflow.com/q/30467085/3650362\">How to iterate over an array?</a> (poor title notwithstanding). Do the answers to that question clear things up at all?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 4, "creation_date": 1525265040, "post_id": 50133735, "comment_id": 87287854, "body": "Note that you do not need to allocate a <code>String</code>, you can compare the iterators: <code>.filter(|x| x.chars().eq(x.chars().rev()))</code>."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 3, "creation_date": 1525265048, "post_id": 50133735, "comment_id": 87287861, "body": "@piercebot Nice, Project Euler is also how I started rust. May I challenge you to come up with a palindrome check that does not require allocation (<code>collect</code> creates a new <code>String</code> on the heap)? :)"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525265502, "post_id": 50133735, "comment_id": 87288152, "body": "Well.. so much for challenge :p"}, {"owner": {"reputation": 1598, "user_id": 3216056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eea647c52a709c187d089c8512d4b3c2?s=128&d=identicon&r=PG&f=1", "display_name": "piercebot", "link": "https://stackoverflow.com/users/3216056/piercebot"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1525272484, "post_id": 50133735, "comment_id": 87293236, "body": "@Boiethios I didn&#39;t know about <code>.eq</code>, this is super duper!  Thanks!  Doing it the brute-force way was a good way to run into pitfalls though; thanks @kazemakase for the lesson :)"}], "answers": [{"comments": [{"owner": {"reputation": 1598, "user_id": 3216056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eea647c52a709c187d089c8512d4b3c2?s=128&d=identicon&r=PG&f=1", "display_name": "piercebot", "link": "https://stackoverflow.com/users/3216056/piercebot"}, "edited": false, "score": 0, "creation_date": 1525272283, "post_id": 50134576, "comment_id": 87293092, "body": "Fantastic! Thank you for the thorough explanation! Are all closure arguments references by default, or is it a case-by-case basis?"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 1598, "user_id": 3216056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eea647c52a709c187d089c8512d4b3c2?s=128&d=identicon&r=PG&f=1", "display_name": "piercebot", "link": "https://stackoverflow.com/users/3216056/piercebot"}, "edited": false, "score": 4, "creation_date": 1525272991, "post_id": 50134576, "comment_id": 87293622, "body": "@piercebot Case by case. If you look at the definition of <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\"><code>filter</code></a> you can see that it requires a closure that takes a <code>&amp;Iter::Item</code>. In contrast, for example the closure accepted by <code>filter_map</code> takes <code>Iter::Item</code>, which is not a reference."}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": true, "score": 10, "last_activity_date": 1525271730, "last_edit_date": 1525271730, "creation_date": 1525263769, "answer_id": 50134576, "question_id": 50133735, "link": "https://stackoverflow.com/questions/50133735/string-equality-in-rust-how-does-referencing-and-dereferencing-work/50134576#50134576", "title": "String equality in Rust: how does referencing and dereferencing work?", "body": "<ol>\n<li><code>Vec&lt;String&gt;.iter()</code> returns an iterator over references (<code>&amp;String</code>).</li>\n<li>The closure argument of <code>.filter()</code> takes a reference to an iterator's item. So the type that is passed to the closure is a double reference <code>&amp;&amp;String</code>.</li>\n<li><code>|&amp;x|</code> tells the closure to expect a reference, so <code>x</code> is now of type <code>&amp;String</code>.</li>\n</ol>\n\n<p>First solution: <code>collect</code> returns a <code>String</code>, of which <code>&amp;</code> takes the reference. <code>x</code> is also a reference to a string, so the comparison is between two <code>&amp;String</code>.</p>\n\n<p>Second solution: The dereference operator <code>*</code> is applied to <code>x</code>, which results in a <code>String</code>. The right hand side is interesting: The <code>String</code> result of <code>collect</code> is dereferenced. This results in a string slice because <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#deref\" rel=\"noreferrer\"><code>String</code> implements <code>Deref&lt;Target=str&gt;</code></a>. Now the comparison is between <code>String</code> and <code>str</code>, which is works because it is <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-PartialEq%3Cstr%3E\" rel=\"noreferrer\">implemented</a> in the standard library (Note that <code>a == b</code> is equivalent to <code>a.eq(&amp;b)</code>).</p>\n\n<p>Third solution: The compiler explains why it does not work.</p>\n\n<blockquote>\n  <p>the trait <code>std::cmp::PartialEq&lt;std::string::String&gt;</code> is not implemented for <code>&amp;&amp;std::string::String</code></p>\n</blockquote>\n\n<p>The left side is a double reference to string (<code>&amp;&amp;String</code>) and the right side is just a <code>String</code> . <strong>You need to get both sides to the same \"reference level\".</strong> All of these work:</p>\n\n<pre><code>x.iter().filter(|x| x == &amp;&amp;x.chars().rev().collect::&lt;String&gt;());\nx.iter().filter(|x| *x == &amp;x.chars().rev().collect::&lt;String&gt;());\nx.iter().filter(|x| **x == x.chars().rev().collect::&lt;String&gt;());\n</code></pre>\n"}], "owner": {"reputation": 1598, "user_id": 3216056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eea647c52a709c187d089c8512d4b3c2?s=128&d=identicon&r=PG&f=1", "display_name": "piercebot", "link": "https://stackoverflow.com/users/3216056/piercebot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2086, "favorite_count": 0, "accepted_answer_id": 50134576, "answer_count": 1, "score": 6, "last_activity_date": 1525271730, "creation_date": 1525260910, "last_edit_date": 1525262648, "question_id": 50133735, "link": "https://stackoverflow.com/questions/50133735/string-equality-in-rust-how-does-referencing-and-dereferencing-work", "title": "String equality in Rust: how does referencing and dereferencing work?", "body": "<p>As a Rust newbie, I'm working through the <a href=\"https://projecteuler.net/\" rel=\"noreferrer\">Project Euler</a> problems to help me get a feel for the language. Problem 4 deals with palindromes, and I found two solutions for creating a vector of palindromes, but I'm not sure how either of them work.</p>\n\n<p>I'm using a vector of strings, <code>products</code>, that's calculated like this:</p>\n\n<pre><code>let mut products = Vec::new();\nfor i in 100..500 {\n    for j in 500..1000 {\n        products.push((i * j).to_string());\n    }\n}\n</code></pre>\n\n<p>For filtering these products to only those that are palindromic, I have the following two solutions:</p>\n\n<p><strong>Solution 1:</strong></p>\n\n<pre><code>let palindromes: Vec&lt;_&gt; = products\n    .iter()\n    .filter(|&amp;x| x == &amp;x.chars().rev().collect::&lt;String&gt;())\n    .collect();\n</code></pre>\n\n<p><strong>Solution 2:</strong></p>\n\n<pre><code>let palindromes: Vec&lt;_&gt; = products\n    .iter()\n    .filter(|&amp;x| *x == *x.chars().rev().collect::&lt;String&gt;())\n    .collect();\n</code></pre>\n\n<p>They both yield the correct result, but I have no idea why!</p>\n\n<p>In Solution 1, we're comparing a reference of a string to a reference of a string we've just created?</p>\n\n<p>In Solution 2, we dereference a reference to a string and compare it to a dereferenced new string?</p>\n\n<p><strong>What I would expect to be able to do:</strong></p>\n\n<pre><code>let palindromes: Vec&lt;_&gt; = products\n    .iter()\n    .filter(|x| x == x.chars().rev().collect::&lt;String&gt;())\n    .collect();\n</code></pre>\n\n<p>I'm hoping somebody will be able to explain to me:</p>\n\n<ul>\n<li>What is the difference is between my two solutions, and why do they both work?</li>\n<li>Why can't I just use <code>x</code> without referencing or dereferencing it in my filter function?</li>\n</ul>\n\n<p>Thank you!</p>\n"}, {"tags": ["enums", "rust", "self"], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 6548494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e00ba67d20c6e26e2364dc4756e29163?s=128&d=identicon&r=PG&f=1", "display_name": "Ritielko", "link": "https://stackoverflow.com/users/6548494/ritielko"}, "edited": false, "score": 0, "creation_date": 1525259758, "post_id": 50133024, "comment_id": 87284522, "body": "Thank you very much. I didn&#39;t think to use raw pointers. Why borrowing with <code>*</code> works fine but <code>&amp;</code> creates unholy mess?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 115, "user_id": 6548494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e00ba67d20c6e26e2364dc4756e29163?s=128&d=identicon&r=PG&f=1", "display_name": "Ritielko", "link": "https://stackoverflow.com/users/6548494/ritielko"}, "edited": false, "score": 2, "creation_date": 1525260545, "post_id": 50133024, "comment_id": 87285059, "body": "@Ritielko You need to (re)read the basis in the Rust book. In Rust, all the things are owned by a scope, and you can either give them to another scope or you can lend them (<i>i.e.</i> they are borrowed), just like your personal belongings: you can give them to someone or lend them to a friend. <code>&amp;</code> means that the ownership is not transferred."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 115, "user_id": 6548494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e00ba67d20c6e26e2364dc4756e29163?s=128&d=identicon&r=PG&f=1", "display_name": "Ritielko", "link": "https://stackoverflow.com/users/6548494/ritielko"}, "edited": false, "score": 0, "creation_date": 1525261021, "post_id": 50133024, "comment_id": 87285394, "body": "@Ritielko Related chapter: <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-00-understanding-ownership.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/second-edition/&hellip;</a>"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 10, "last_activity_date": 1525258786, "creation_date": 1525258786, "answer_id": 50133024, "question_id": 50132865, "link": "https://stackoverflow.com/questions/50132865/mutating-self-in-enum-method/50133024#50133024", "title": "Mutating self in enum method", "body": "<p>Your method consumes your data instead of borrowing it. If you borrow it, it works fine:</p>\n\n<pre><code>impl Dir {\n    fn switch(&amp;mut self) {\n        *self = match *self {\n            Dir::Left =&gt; Dir::Right,\n            Dir::Right =&gt; Dir::Left,\n        };\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 115, "user_id": 6548494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e00ba67d20c6e26e2364dc4756e29163?s=128&d=identicon&r=PG&f=1", "display_name": "Ritielko", "link": "https://stackoverflow.com/users/6548494/ritielko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1000, "favorite_count": 0, "accepted_answer_id": 50133024, "answer_count": 1, "score": 5, "last_activity_date": 1525274423, "creation_date": 1525258295, "last_edit_date": 1525274423, "question_id": 50132865, "link": "https://stackoverflow.com/questions/50132865/mutating-self-in-enum-method", "title": "Mutating self in enum method", "body": "<p>This is cobbled together to illustrate the problem that I have with the <code>switch</code> function. I do not have problem printing \"Left\" \"Right\" endlessly.</p>\n\n<p>The point of <code>switch</code> is to swap the value of enum to another. This solution doesn't work because presumably the <code>switch</code> moves <code>t</code> into itself so it's no longer usable. Use of mutable references causes a whole host of other problems, like with lifetime and mismatched types. The documentation had instructions how to do this with structs, but not enums. The compiler suggested implementing <code>Copy</code> and <code>Clone</code> to the enum, but that did nothing useful.</p>\n\n<p>How is this type of method supposed to be made in Rust?</p>\n\n<pre><code>fn main() {\n    let mut t = Dir::Left;\n\n    loop {\n        match &amp;t {\n            &amp;Dir::Left =&gt; println!(\"Left\"),\n            &amp;Dir::Right =&gt; println!(\"Right\"),\n        }\n\n        t.switch();\n    }\n}\n\nenum Dir {\n    Left,\n    Right,\n}\n\nimpl Dir {\n    //this function is the problem here\n    fn switch(mut self) {\n        match self {\n            Dir::Left =&gt; self = Dir::Right,\n            Dir::Right =&gt; self = Dir::Left,\n        };\n    }\n}\n</code></pre>\n\n<p>Of course I could just make it so</p>\n\n<pre><code>t = t.switch();\n</code></pre>\n\n<p>and</p>\n\n<pre><code>fn switch(mut self) -&gt; Self {\n    match self {\n        Dir::Left  =&gt; return Dir::Right,\n        Dir::Right =&gt; return Dir::Left,\n    };\n}\n</code></pre>\n\n<p>But I feel that would be comparatively clumsy solution, and I would like to avoid it if at all possible.</p>\n"}, {"tags": ["if-statement", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525244437, "post_id": 50126997, "comment_id": 87275386, "body": "If you are not going to use <code>first_five</code> (silly assumption, probably) you can avoid the borrow with <code>Some(_)</code>, <code>.is_some()</code>, or just checking the length of the string."}], "owner": {"reputation": 720, "user_id": 4705242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9a7dd812330d5c4d545011135880f1c?s=128&d=identicon&r=PG&f=1", "display_name": "nickeb96", "link": "https://stackoverflow.com/users/4705242/nickeb96"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 257, "favorite_count": 1, "closed_date": 1525252498, "answer_count": 0, "score": 3, "last_activity_date": 1525233822, "creation_date": 1525233822, "question_id": 50126997, "link": "https://stackoverflow.com/questions/50126997/confusion-with-if-let-statement-scope", "closed_reason": "Duplicate", "title": "Confusion With `if let` Statement Scope", "body": "<p>Why does the following code not compile?</p>\n\n<pre><code>fn main() {\n    let mut s = \"test\".to_string();\n\n    if let Some(first_five) = s.get(..5) {\n        // ...\n    }\n    else {\n        s.push('s');\n    }\n}\n</code></pre>\n\n<p>The error I get says immutable borrow occurs on line 4 (<code>s.get(..5)</code>) and that the immutable borrow ends on line 9.  Why does it end on line 9?  It seems that the scope for <code>s.get(..5)</code> should have ended on line 6, which would release the immutable reference, allowing the mutable reference to be taken on line 8 (<code>s.push('s')</code>).</p>\n\n<p>The following code is a work around but it is not very idiomatic and not something I would like to use.</p>\n\n<pre><code>fn main() {\n    let mut s = \"test\".to_string();\n\n    let mut flag = false;\n    if let Some(first_five) = s.get(..5) {\n        //  ...\n    }\n    else {\n        flag = true;\n    }\n\n    if flag {\n        s.push('s');\n    }\n}\n</code></pre>\n\n<p>To reiterate, is there a reason that <code>s</code> is borrowed for much longer than it needs to be?  The return value of <code>s.get(..5)</code> is out of scope and inaccessible from the else clause so why is the string still being borrowed in the else clause?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1525247763, "post_id": 50126432, "comment_id": 87277098, "body": "For anyone interested in answering this question, I further <a href=\"https://play.rust-lang.org/?gist=68cdba0a208bbb4e3afbf63cdbf9ee7b&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">simplified the code</a> (it still shows the same error) (@Truc Truca, if you want, you can edit your question and use the simplified code instead). So I&#39;m pretty sure it has something to do with the invariance of <code>RefCell</code>. <code>Rc</code> and <code>Weak</code> also contain <code>Cell</code>s, maybe that&#39;s a hint? I need to stop researching this now, but I&#39;m very curious to see a good explanation for this interesting question!"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 1, "creation_date": 1525249003, "post_id": 50126432, "comment_id": 87277765, "body": "The solution is to use a different lifetime for the reference: <code>&amp;&#39;a Vec&lt;MyType&lt;&#39;b&gt;&gt;</code> (maybe with <code>&#39;b:&#39;a</code>). As for the <i>why?</i> I&#39;m not sure and will leave the answer to someone with a better understanding of lifetimes."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1525265436, "post_id": 50126432, "comment_id": 87288110, "body": "Also, very related: <a href=\"https://stackoverflow.com/questions/43210387/is-this-error-due-to-the-compilers-special-knowledge-about-refcell\" title=\"is this error due to the compilers special knowledge about refcell\">stackoverflow.com/questions/43210387/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": false, "score": 3, "last_activity_date": 1525337269, "last_edit_date": 1525337269, "creation_date": 1525255798, "answer_id": 50132065, "question_id": 50126432, "link": "https://stackoverflow.com/questions/50126432/does-not-live-long-enough-error-with-weakrefcell/50132065#50132065", "title": "&quot;Does not live long enough&quot; error with `Weak&lt;RefCell&lt;_&gt;&gt;`", "body": "<p>Since <a href=\"https://stackoverflow.com/users/2408867/lukas-kalbertodt\">Lukas Kalbertodt</a> provided a <a href=\"https://stackoverflow.com/help/mcve\">MCVE</a> (<a href=\"https://play.rust-lang.org/?gist=68cdba0a208bbb4e3afbf63cdbf9ee7b&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Playground</a>), I'll use his code:</p>\n\n<pre><code>struct MyType&lt;'a&gt; {\n    link_to_other_type: Weak&lt;RefCell&lt;&amp;'a i32&gt;&gt;,\n}\n\nfn get_parent_struct&lt;'a&gt;(_: &amp;'a MyType&lt;'a&gt;) {} \n\nfn main() {\n    let foo = MyType { link_to_other_type: Weak::new() };\n    get_parent_struct(&amp;foo);\n}\n</code></pre>\n\n<p>Let's go through it step by step:</p>\n\n<ul>\n<li>A <code>Weak</code> is created and moved into <code>MyType</code> with lifetime <code>'a</code></li>\n<li>When it's passed to <code>get_parent_struct&lt;'a&gt;(_: &amp;'a MyType&lt;'a&gt;)</code>, you have a reference with lifetime <code>'a</code> to a type with lifetime <code>'a</code> </li>\n<li><code>get_parent_struct</code> expects it's parameter to live exactly as long as <code>foo</code> itself, which is not true, since <code>foo</code> lives until the end of the scope</li>\n</ul>\n\n<p>As mentioned by <a href=\"https://stackoverflow.com/users/3005167/kazemakase\">kazemakase</a>, the solution is to use a different lifetime for the reference. If you alter the signature of <code>get_parent_struct</code> slightly, it's working:</p>\n\n<pre><code>fn get_parent_struct&lt;'a&gt;(_: &amp;MyType&lt;'a&gt;) {} \n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=cd14cb5f2de225a920ccb5162f8decca&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>The compiler will now elide the lifetimes to</p>\n\n<pre><code>fn get_parent_struct&lt;'a, 'b&gt;(_: &amp;'b MyType&lt;'a&gt;) where 'a: 'b {}\n</code></pre>\n\n<p>Now <code>'a</code> outlives <code>'b</code>.</p>\n"}], "owner": {"reputation": 69, "user_id": 2387958, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22c664042924c08c600b5a39d74a5d29?s=128&d=identicon&r=PG", "display_name": "Truc Truca", "link": "https://stackoverflow.com/users/2387958/truc-truca"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 170, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1525337269, "creation_date": 1525229023, "last_edit_date": 1525245267, "question_id": 50126432, "link": "https://stackoverflow.com/questions/50126432/does-not-live-long-enough-error-with-weakrefcell", "title": "&quot;Does not live long enough&quot; error with `Weak&lt;RefCell&lt;_&gt;&gt;`", "body": "<p>I recently have many problems with the borrow checker of Rust refusing my code. In order to ask the question, I simplified my code:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::{Rc, Weak};\n\nstruct SomeOtherType&lt;'a&gt;{\n    data: &amp;'a i32,\n}\n\nstruct MyType&lt;'a&gt; {\n    some_data: i32,\n    link_to_other_type: Weak&lt;RefCell&lt;SomeOtherType&lt;'a&gt;&gt;&gt;,\n}\n\nstruct ParentStruct&lt;'a&gt; {\n    some_other_other_data: i32,\n    first_types: &amp;'a Vec&lt;MyType&lt;'a&gt;&gt;,\n}\n\n\nfn get_parent_struct&lt;'a&gt;(first_types: &amp;'a Vec&lt;MyType&lt;'a&gt;&gt;) -&gt; ParentStruct&lt;'a&gt; {\n    ParentStruct { some_other_other_data: 4, first_types: first_types }\n} \n\nfn consume(parent_struct: ParentStruct) {\n    print!(\"{}\", parent_struct.first_types[0].some_data);\n}\n\nfn main() {\n    let some_vect = vec!(\n        MyType { some_data: 1, link_to_other_type: Weak::new() },\n        MyType { some_data: 2, link_to_other_type: Weak::new() }\n    );\n    loop {\n        let some_struct = get_parent_struct(&amp;some_vect);\n        consume(some_struct);\n    }\n}\n</code></pre>\n\n<p>This code doesn't compile, I have get following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `some_vect` does not live long enough\n  --&gt; src/main.rs:33:46\n   |\n33 |         let some_struct = get_parent_struct(&amp;some_vect);\n   |                                              ^^^^^^^^^ borrowed value does not live long enough\n...\n36 | }\n   | - `some_vect` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created \n</code></pre>\n\n<p>But the strange fact is: if, in the type <code>MyType</code>, I change <code>Weak&lt;RefCell&lt;...&gt;&gt;</code> to <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> or to <code>RefCell&lt;...&gt;</code> or to <code>Weak&lt;...&gt;</code>: it compiles!!</p>\n\n<p>My question is: why? Why does the borrow checker refuses to compile the original code (and why does it accept the code with the other types instead of <code>Weak&lt;RefCell&lt;...&gt;&gt;</code>)?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525220817, "post_id": 50124680, "comment_id": 87269181, "body": "See also: <a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference between placing \u201cmut\u201d before a variable name and after the \u201c:\u201d?</a>"}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525223388, "post_id": 50124680, "comment_id": 87269687, "body": "@Shepmaster Indeed that article is similar - Although my question is more focused on why <code>*foo.val_ref = 10;</code> is acceptable, not why the other one&#39;s aren&#39;t. From my POV, it seems like none of the things in my example should be acceptable through an immutable binding."}], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 4, "creation_date": 1525215181, "post_id": 50124903, "comment_id": 87267957, "body": "<a href=\"https://doc.rust-lang.org/book/first-edition/mutability.html\" rel=\"nofollow noreferrer\">This is covered in the first edition of the book</a>, specifically: <code>y is an immutable binding to a mutable reference, which means that you can\u2019t bind y to something else (y = &amp;mut z), but you can mutate the thing that\u2019s bound to y (*y = 5). A subtle distinction.</code>"}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525218233, "post_id": 50124903, "comment_id": 87268647, "body": "Thanks! I am curious then about why my last example, <code>*foo_ref.val_ref = 10;</code>, is invalid though?  In that case, I have an immutable reference to a struct, and I&#39;m using it to read a mutable reference to a different object. Why is that not okay if the other situation with the immutable binding is? Either way I&#39;m not modifying the data of the immutable structure."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525218333, "post_id": 50124903, "comment_id": 87268668, "body": "(I guess my overall confusion is that it seems inconsistent - It seems like mutability is transitive in some cases and not in others)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525219628, "post_id": 50124903, "comment_id": 87268930, "body": "@something_clever Indeed, mutability is, in a way, inherited through a reference: from <code>&amp;Foo</code> we can only retrieve immutable references to its fields, and a <code>&amp;&amp;mut T</code> becomes a <code>&amp;&amp;T</code>. I can update the answer with this concern tomorrow."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525223198, "post_id": 50124903, "comment_id": 87269635, "body": "@E_net4 So I wonder why the decision was made for mutability to <b>not</b> be inherited through bindings. In my example, my feeling is actually that Rust shouldn&#39;t accept any of them.  That is - If my binding is immutable I shouldn&#39;t be able to transitively mutate references, even if I have them borrowed mutably."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525224196, "post_id": 50124903, "comment_id": 87269848, "body": "@E_net4 Sorry to keep peppering you with questions, but you&#39;re helping me understand a lot better :)  Something I also find kind of weird though is that the immutability <b>is</b> transitive to the non-reference members of the struct, even recursively (I can&#39;t modify a field-of-a-field-of-a-field of my immutable binding). And that doesn&#39;t involve re-targeting the immutable variable..."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525267641, "post_id": 50124903, "comment_id": 87289603, "body": "@something_clever I have updated the answer with those concerns."}, {"owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525270491, "post_id": 50124903, "comment_id": 87291783, "body": "Thank you. Again follow-up question though - I see now why it&#39;s technically &#39;safe&#39; to retrieve a mutable reference from an immutable binding, but is it &#39;correct&#39; to allow it?  Because it&#39;s technically &#39;safe&#39; as well for me to mutate an i32 through an immutable binding, since I have exclusive ownership and I&#39;m not re-targeting the binding. The reason we even have immutable bindings is for semantics, not safety."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "edited": false, "score": 0, "creation_date": 1525271829, "post_id": 50124903, "comment_id": 87292800, "body": "@something_clever That is indeed use case dependant and potentially opinion based. Users with a functional programming background, for instance, might prefer moving content from one immutable binding to another instead of mutating a value in a single variable. Rust allows both, but leaves those decisions to the programmer."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 12, "last_activity_date": 1525267606, "last_edit_date": 1525267606, "creation_date": 1525215002, "answer_id": 50124903, "question_id": 50124680, "link": "https://stackoverflow.com/questions/50124680/why-does-rust-allow-mutation-through-a-reference-field-using-an-immutable-bindin/50124903#50124903", "title": "Why does Rust allow mutation through a reference field using an immutable binding?", "body": "<p>A short way to explain this is that mutability in <em>references</em> and mutability in <em>variables</em> are orthogonal to each other. The two forms of mutability are related in the sense that we can only mutable borrow something from a mutable variable (or binding). Other than that, each binary combination is possible in Rust:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>               reference mutability\n            -----------------------------\nvariable   |     x: &amp;T  |      x: &amp;mut T |\nmutability |------------+----------------|\n           | mut x: &amp;T  |  mut x: &amp;mut T |\n            -----------------------------\n</code></pre>\n\n<p>We can think of many samples of code exemplifying what can be done with such a variable x. For instance, an immutable variable of a mutable reference can modify one other element, but not itself:</p>\n\n<pre><code>let mut a = 5;\nlet mut b = 3;\nlet x: &amp;mut i32 = &amp;mut a;\n\n*x = 10; // ok\n\nx = &amp;mut b; // nope! [E0384]\n*x = 6;\n</code></pre>\n\n<p>Even as a field in a struct, this does not conflict with Rust's safety guarantees. If a variable is immutably bound to a struct value, each of the fields will be immutable as well. In this example:</p>\n\n<pre><code>let mut x = 5;\nlet foo = Foo { \n    val: 6, \n    bar: Bar { val: 15 },\n    val_ref: &amp;mut x\n};\n*foo.val_ref = 10;\n</code></pre>\n\n<p>No mutations were applied to <code>foo</code> here: <code>foo.val_ref</code> still points to <code>x</code>. The former can be mutated because it's mutably borrowed.\n<strong>References are borrow-checked independently.</strong> The lifetime parameter <code>'a</code> in <code>Foo</code> enables the compiler to keep track of the borrow.</p>\n\n<p>That second example (shown below) does not work, because from a <code>&amp;Foo</code>, we can only retrieve references to its fields (such as to <code>val_ref: &amp;mut i32</code>). In turn, to prevent aliasing, a <code>&amp;&amp;mut i32</code> can only be coerced to <code>&amp;i32</code>. One cannot borrow data mutably through an immutable reference.</p>\n\n<pre><code>let foo_ref = &amp;foo;\n*foo_ref.val_ref = 10; // error[E0389]\n</code></pre>\n\n<blockquote>\n  <p>Rust won't let me do the same through an immutable reference. So an immutable reference has different behavior than an immutable binding.</p>\n</blockquote>\n\n<p>Exactly!</p>\n\n<p><strong>See also:</strong></p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference between placing &quot;mut&quot; before a variable name and after the &quot;:&quot;?</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/q/46688929/1233251\">How to mutably borrow reference from &amp;&amp;mut Foo?</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/q/40654940/1233251\">Mutable borrow automatically changes to immutable?</a></p></li>\n</ul>\n"}], "owner": {"reputation": 756, "user_id": 5028872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ui38x.jpg?s=128&g=1", "display_name": "something_clever", "link": "https://stackoverflow.com/users/5028872/something-clever"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1803, "favorite_count": 4, "accepted_answer_id": 50124903, "answer_count": 1, "score": 14, "last_activity_date": 1525267606, "creation_date": 1525213457, "last_edit_date": 1525220211, "question_id": 50124680, "link": "https://stackoverflow.com/questions/50124680/why-does-rust-allow-mutation-through-a-reference-field-using-an-immutable-bindin", "title": "Why does Rust allow mutation through a reference field using an immutable binding?", "body": "<p>If I have an immutable variable bound to a struct, Rust will generally not allow me to mutate the fields of the struct, or the fields of owned child structs.</p>\n\n<p>However, if the field is a mutable reference, Rust <strong>will</strong> allow me to mutate the referred-to object despite my binding being immutable. </p>\n\n<p>Why is this allowed? Is it not inconsistent with Rust's normal rules for immutability?</p>\n\n<p>Rust <strong>won't</strong> let me do the same through an immutable reference, so an immutable reference has different behavior than an immutable binding.</p>\n\n<p>Code Example:</p>\n\n<pre><code>struct Bar {\n    val: i32,\n}\n\nstruct Foo&lt;'a&gt; {\n    val: i32,\n    bar: Bar,\n    val_ref: &amp;'a mut i32,\n}\n\nfn main() {\n    let mut x = 5;\n\n    {\n        let foo = Foo { \n            val: 6, \n            bar: Bar { val: 15 },\n            val_ref: &amp;mut x\n        };\n\n        // This is illegal because binding is immutable\n        // foo.val = 7;\n\n        // Also illegal to mutate child structures\n        // foo.bar.val = 20;\n\n        // This is fine though... Why?\n        *foo.val_ref = 10;\n\n        let foo_ref = &amp;foo;\n\n        // Also illegal to mutate through an immutable reference\n        //*foo_ref.val_ref = 10;\n    }\n\n    println!(\"{}\", x);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-chrono"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1525212098, "post_id": 50124446, "comment_id": 87267017, "body": "Damn, you beat me by 10s with a much better answer :)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1525212256, "post_id": 50124446, "comment_id": 87267091, "body": "@mcarton I&#39;m not usually the fastest gun in the west. But when I am, I still stick to my standards. ^_^ Better grab my cowboy hat."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 5, "last_activity_date": 1525295785, "last_edit_date": 1525295785, "creation_date": 1525212017, "answer_id": 50124446, "question_id": 50124299, "link": "https://stackoverflow.com/questions/50124299/the-trait-stdopsaddstdtimeduration-is-not-implemented-for-chronod/50124446#50124446", "title": "The trait `std::ops::Add&lt;std::time::Duration&gt;` is not implemented for `chrono::DateTime&lt;chrono::Utc&gt;`", "body": "<p>This is almost answered with a quote from the <code>chrono</code> <a href=\"https://docs.rs/chrono/0.4.2/chrono/#duration\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n\n<blockquote>\n  <p>Chrono currently uses the <code>time::Duration</code> type from the time crate to represent the magnitude of a time span. Since this has the same name to the newer, standard type for duration, the reference will refer this type as <code>OldDuration</code>. [...]</p>\n  \n  <p>Chrono does not yet natively support the standard <code>Duration</code> type, but it will be supported in the future. Meanwhile you can convert between two types with <code>Duration::from_std</code> and <code>Duration::to_std</code> methods.</p>\n</blockquote>\n\n<p>So, adding a duration to a Chrono date-time has to be done with this <code>OldDuration</code>, which is actually <a href=\"https://github.com/chronotope/chrono/blob/master/src/lib.rs#L409\" rel=\"nofollow noreferrer\">exported from the root of the crate</a> with the name <code>Duration</code>:</p>\n\n<pre><code>use chrono::{DateTime, Utc, Duration as OldDuration};\n</code></pre>\n\n<p>Then, adding a duration can be done by either creating an <code>OldDuration</code> directly:</p>\n\n<pre><code>pub fn after(start: DateTime&lt;Utc&gt;) -&gt; DateTime&lt;Utc&gt; {\n    start + OldDuration::seconds(1)\n}\n</code></pre>\n\n<p>Or by converting a standard duration.</p>\n\n<pre><code>pub fn after(start: DateTime&lt;Utc&gt;) -&gt; DateTime&lt;Utc&gt; {\n    start + OldDuration::from_std(Duration::from_secs(1)).unwrap()\n}\n</code></pre>\n\n<p>This experience might be improved before <code>chrono</code> reaches 1.0.0.</p>\n"}, {"comments": [{"owner": {"reputation": 4662, "user_id": 2004857, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/pQqNS.jpg?s=128&g=1", "display_name": "Vituel", "link": "https://stackoverflow.com/users/2004857/vituel"}, "edited": false, "score": 0, "creation_date": 1525293141, "post_id": 50124453, "comment_id": 87304387, "body": "You&#39;re right! I had somehow assumed there was no <code>chrono::Duration</code>."}, {"owner": {"reputation": 4662, "user_id": 2004857, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/pQqNS.jpg?s=128&g=1", "display_name": "Vituel", "link": "https://stackoverflow.com/users/2004857/vituel"}, "edited": false, "score": 0, "creation_date": 1525294025, "post_id": 50124453, "comment_id": 87304776, "body": "Btw, if &quot;Chrono currently uses the <code>time::Duration</code>&quot; (@E_net4&#39;s answer), I don&#39;t understand how it ends up in the <code>chrono</code> namespace.    I can even find Duration defined in sources for <code>std::time</code> and <code>chrono::oldtime</code> (the IDE takes me there). But I can&#39;t see it straight in <code>chrono</code>.     There&#39;s something I&#39;m missing about how rust modules work, I&#39;m gonna make this mistake again."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 4662, "user_id": 2004857, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/pQqNS.jpg?s=128&g=1", "display_name": "Vituel", "link": "https://stackoverflow.com/users/2004857/vituel"}, "edited": false, "score": 2, "creation_date": 1525295955, "post_id": 50124453, "comment_id": 87305595, "body": "@Vituel Crates can (and will often) re-export things with <code>pub use</code>. <a href=\"https://github.com/chronotope/chrono/blob/master/src/lib.rs#L409\" rel=\"nofollow noreferrer\">Here</a> is how <code>Duration</code> ends up in the root of <code>chrono</code>. I have updated my answer accordingly."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 6, "last_activity_date": 1525262452, "last_edit_date": 1525262452, "creation_date": 1525212028, "answer_id": 50124453, "question_id": 50124299, "link": "https://stackoverflow.com/questions/50124299/the-trait-stdopsaddstdtimeduration-is-not-implemented-for-chronod/50124453#50124453", "title": "The trait `std::ops::Add&lt;std::time::Duration&gt;` is not implemented for `chrono::DateTime&lt;chrono::Utc&gt;`", "body": "<p>There are functions to convert <a href=\"https://docs.rs/chrono/0.4.2/chrono/struct.Duration.html#method.from_std\" rel=\"nofollow noreferrer\">from</a> and <a href=\"https://docs.rs/chrono/0.4.2/chrono/struct.Duration.html#method.to_std\" rel=\"nofollow noreferrer\">to</a> <code>std::time::Duration</code> so you could just do:</p>\n\n<pre><code>start + ::chrono::Duration::from_std(Duration::from_secs(1)).expect(\"1s can't overflow\")\n</code></pre>\n\n<p>But if you can just stick with <code>chrono</code>, just stick with <code>chrono</code>:</p>\n\n<pre><code>use chrono::{DateTime, Utc, Duration};\nstart + Duration::seconds(1)\n</code></pre>\n"}], "owner": {"reputation": 4662, "user_id": 2004857, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/pQqNS.jpg?s=128&g=1", "display_name": "Vituel", "link": "https://stackoverflow.com/users/2004857/vituel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 842, "favorite_count": 0, "accepted_answer_id": 50124453, "answer_count": 2, "score": 4, "last_activity_date": 1525295785, "creation_date": 1525211135, "last_edit_date": 1525220315, "question_id": 50124299, "link": "https://stackoverflow.com/questions/50124299/the-trait-stdopsaddstdtimeduration-is-not-implemented-for-chronod", "title": "The trait `std::ops::Add&lt;std::time::Duration&gt;` is not implemented for `chrono::DateTime&lt;chrono::Utc&gt;`", "body": "<pre><code>extern crate chrono;\nuse chrono::{DateTime, Utc};\nuse std::time::Duration;\n\npub fn after(start: DateTime&lt;Utc&gt;) -&gt; DateTime&lt;Utc&gt; {\n    start + Duration::from_secs(1)\n}\n</code></pre>\n\n<p>fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: cannot add `std::time::Duration` to `chrono::DateTime&lt;chrono::Utc&gt;`\n --&gt; src/lib.rs:7:11\n  |\n7 |     start + Duration::from_secs(1_000_000_000)\n  |           ^ no implementation for `chrono::DateTime&lt;chrono::Utc&gt; + std::time::Duration`\n  |\n  = help: the trait `std::ops::Add&lt;std::time::Duration&gt;` is not implemented for `chrono::DateTime&lt;chrono::Utc&gt;`\n</code></pre>\n\n<p>I couldn't find an implementation of <code>Add</code> to import. <code>use chrono::*</code> won't help.  </p>\n\n<p>I see that <code>datetime.rs</code> has an impl for <code>Add&lt;chrono::oldtime::Duration&gt;</code>, but <code>oldtime</code> is private so I don't know how to create an <code>oldtime::Duration</code>.</p>\n\n<p>How do I get the <code>Add</code> impl I need? How do I convert <code>std::time::Duration</code> to <code>chrono::oldtime::Duration</code>? Is there something I can import to convert implicitly?</p>\n\n<p>I'm using <code>rustc 1.25.0 (84203cac6 2018-03-25)</code></p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525196024, "post_id": 50121010, "comment_id": 87259702, "body": "Don&#39;t use <code>SCREAMING_SNAKE_CASE</code> names for type parameters. Type parameters are <code>UpperCamelCase</code>, just like types."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525196443, "post_id": 50121010, "comment_id": 87259936, "body": "This is going to be a duplicate of <a href=\"https://stackoverflow.com/q/39415052/155423\">Deriving a trait results in unexpected compiler error, but the manual implementation works</a>, although I don&#39;t know why the error message isn&#39;t as useful in this case. <a href=\"https://play.rust-lang.org/?gist=9586c90883274c6ffbae98ac6bdc450f&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">The duplicate applied to your situation</a>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525197712, "post_id": 50121010, "comment_id": 87260538, "body": "@Shepmaster Could it be just from the fact that this case uses the <code>==</code> operator instead of calling the method directly?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1525198798, "post_id": 50121010, "comment_id": 87261117, "body": "@E_net4 hmm, <a href=\"https://play.rust-lang.org/?gist=186e273167ce4c983bbde92529d7d6a0&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">that certainly looks possible</a>. I&#39;ll see if I can&#39;t rustle up a bug report for that."}, {"owner": {"reputation": 36902, "user_id": 223424, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e97c628a88337b15e76a4690e916a2cd?s=128&d=identicon&r=PG", "display_name": "9000", "link": "https://stackoverflow.com/users/223424/9000"}, "edited": false, "score": 0, "creation_date": 1525199252, "post_id": 50121010, "comment_id": 87261371, "body": "I wonder if <code>PhantomData&lt;PHANTOM&gt;</code> ever implements equality, and whether <code>is_eq</code> should just do <code>a.real == b.real</code>. AFAICT, the <code>.phantom</code> member does not really exist, so it can&#39;t be compared."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36902, "user_id": 223424, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e97c628a88337b15e76a4690e916a2cd?s=128&d=identicon&r=PG", "display_name": "9000", "link": "https://stackoverflow.com/users/223424/9000"}, "edited": false, "score": 1, "creation_date": 1525200022, "post_id": 50121010, "comment_id": 87261761, "body": "@9000 There&#39;s no need to wonder, the <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html#impl-PartialEq%3CPhantomData%3CT%3E%3E\" rel=\"nofollow noreferrer\">documentation answers your question</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525200109, "post_id": 50121010, "comment_id": 87261807, "body": "I opened <a href=\"https://github.com/rust-lang/rust/issues/50375\" rel=\"nofollow noreferrer\">Rust issue 50375</a> to discuss the not-awesome error message."}], "owner": {"reputation": 1979, "user_id": 231238, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/79eacf8ee1b8da82f5baffd6ba94054e?s=128&d=identicon&r=PG", "display_name": "LOST", "link": "https://stackoverflow.com/users/231238/lost"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1525200071, "answer_count": 0, "score": 1, "last_activity_date": 1525195850, "creation_date": 1525195726, "last_edit_date": 1525195850, "question_id": 50121010, "link": "https://stackoverflow.com/questions/50121010/can-not-derive-partialeq-as-expected-when-using-phantomdata", "closed_reason": "Duplicate", "title": "Can not derive PartialEq as expected when using PhantomData", "body": "<p>I am trying to make my own custom typed pointer but I can't seem to make it comparable. I narrowed my code to this:</p>\n\n<pre><code>use std::marker::PhantomData;\n\n#[derive(PartialEq, Copy, Clone)]\npub struct PhantomPair&lt;PHANTOM, REAL: Copy + Clone + PartialEq&gt; {\n    real: REAL,\n    phantom: PhantomData&lt;PHANTOM&gt;,\n}\n\nimpl&lt;PHANTOM, REAL: Copy + Clone + PartialEq&gt; PhantomPair&lt;PHANTOM, REAL&gt; {\n    pub fn new(data: REAL) -&gt; Self {\n        PhantomPair {\n            real: data,\n            phantom: PhantomData,\n        }\n    }\n}\n\nfn is_eq&lt;PHANTOM, REAL: Copy + Clone + PartialEq&gt;(\n    a: PhantomPair&lt;PHANTOM, REAL&gt;,\n    b: PhantomPair&lt;PHANTOM, REAL&gt;,\n) -&gt; bool {\n    a == b\n}\n\nfn main() {}\n</code></pre>\n\n<p>The compiler gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `==` cannot be applied to type `PhantomPair&lt;PHANTOM, REAL&gt;`\n  --&gt; src/main.rs:22:5\n   |\n22 |     a == b\n   |     ^^^^^^\n   |\n   = note: an implementation of `std::cmp::PartialEq` might be missing for `PhantomPair&lt;PHANTOM, REAL&gt;`\n</code></pre>\n\n<p>I expected <code>PhantomPair</code> to have a derived <code>PartialEq</code> that uses <code>REAL</code>'s <code>PartialEq</code>. As far as I know, <code>PhantomData</code> also implements <code>PartialEq</code> basically assuming equality.</p>\n\n<p>The same issue happens when I try to add <code>PartialOrd</code> to <code>#[derive]</code> and to <code>REAL</code>'s constraints.</p>\n"}, {"tags": ["filter", "rust", "pattern-matching"], "answers": [{"comments": [{"owner": {"reputation": 2777, "user_id": 4852094, "user_type": "registered", "accept_rate": 68, "profile_image": "https://graph.facebook.com/10102767534136292/picture?type=large", "display_name": "Rob", "link": "https://stackoverflow.com/users/4852094/rob"}, "edited": false, "score": 0, "creation_date": 1525193733, "post_id": 50120535, "comment_id": 87258591, "body": "this is close, but i wanted the original value.  Is there a way to do that?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2777, "user_id": 4852094, "user_type": "registered", "accept_rate": 68, "profile_image": "https://graph.facebook.com/10102767534136292/picture?type=large", "display_name": "Rob", "link": "https://stackoverflow.com/users/4852094/rob"}, "edited": false, "score": 0, "creation_date": 1525193928, "post_id": 50120535, "comment_id": 87258697, "body": "@Rob I don&#39;t follow. What is the expected value of <code>matching</code>? If you had included such in your question, my wasting of your time could have been avoided."}, {"owner": {"reputation": 2777, "user_id": 4852094, "user_type": "registered", "accept_rate": 68, "profile_image": "https://graph.facebook.com/10102767534136292/picture?type=large", "display_name": "Rob", "link": "https://stackoverflow.com/users/4852094/rob"}, "edited": false, "score": 0, "creation_date": 1525195175, "post_id": 50120535, "comment_id": 87259286, "body": "thank you for your help, you definitely did not waste my time"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1525193849, "last_edit_date": 1525193849, "creation_date": 1525193671, "answer_id": 50120535, "question_id": 50120500, "link": "https://stackoverflow.com/questions/50120500/how-do-i-filter-out-an-iterators-values-where-calling-a-function-returns-a-resu/50120535#50120535", "title": "How do I filter out an iterator&#39;s values where calling a function returns a Result::Err?", "body": "<p>If you want the value contained in the <code>Ok</code>, use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map\" rel=\"nofollow noreferrer\"><code>Iterator::flat_map</code></a>, which combines iterable values into one iterator. <code>Option</code> and <code>Result</code> both implement <code>IntoIterator</code>:</p>\n\n<pre><code>let matching = values\n    .iter()\n    .flat_map(|name| match_value(*name))\n    .collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>If you want the original value, just use <code>filter</code>:</p>\n\n<pre><code>let matching = values\n    .iter()\n    .filter(|&amp;&amp;name| match_value(name).is_ok())\n    .collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>There's no need to import <code>Result</code>; it's already part of the prelude.</p>\n"}], "owner": {"reputation": 2777, "user_id": 4852094, "user_type": "registered", "accept_rate": 68, "profile_image": "https://graph.facebook.com/10102767534136292/picture?type=large", "display_name": "Rob", "link": "https://stackoverflow.com/users/4852094/rob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 614, "favorite_count": 0, "accepted_answer_id": 50120535, "answer_count": 1, "score": 3, "last_activity_date": 1525194383, "creation_date": 1525193513, "last_edit_date": 1525194383, "question_id": 50120500, "link": "https://stackoverflow.com/questions/50120500/how-do-i-filter-out-an-iterators-values-where-calling-a-function-returns-a-resu", "title": "How do I filter out an iterator&#39;s values where calling a function returns a Result::Err?", "body": "<p>How would you iterate through a list and filter out all values where the response <code>Result</code> is not <code>Ok</code>?  I want to do something like <code>filter_map</code>, but it is saying I need to return an <code>Option</code>.</p>\n\n<pre><code>use std::result::Result;\n\nfn match_value(vals: i32) -&gt; Result&lt;i32, i32&gt; {\n    match vals {\n        2 =&gt; Ok(1),\n        _ =&gt; Err(0),\n    }\n}\n\nfn main() {\n    let values = vec![1, 2, 3, 2];\n    let matching = values\n        .iter()\n        .map(|name| match_value(*name))\n        .filter(|x| x.is_ok())\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n    println!(\"{:?}\", matching);\n}\n</code></pre>\n"}, {"tags": ["random", "rust", "shuffle", "random-seed"], "answers": [{"comments": [{"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 1, "creation_date": 1525189571, "post_id": 50119341, "comment_id": 87256384, "body": "Completely missed that trait, I&#39;m a donut. Thanks so much!"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 8, "last_activity_date": 1558147089, "last_edit_date": 1558147089, "creation_date": 1525188861, "answer_id": 50119341, "question_id": 50119220, "link": "https://stackoverflow.com/questions/50119220/how-to-shuffle-an-array-deterministically-with-a-seed/50119341#50119341", "title": "How to shuffle an array deterministically with a seed?", "body": "<p>Use a random number generator that implements the trait <a href=\"https://docs.rs/rand/0.6.5/rand/trait.SeedableRng.html\" rel=\"nofollow noreferrer\"><code>SeedableRng</code></a> and call <a href=\"https://docs.rs/rand/0.6.5/rand/trait.SeedableRng.html#tymethod.from_seed\" rel=\"nofollow noreferrer\"><code>from_seed</code></a> with the desired seed.</p>\n\n<p>Example:</p>\n\n<pre><code>use rand::{seq::SliceRandom, SeedableRng}; // 0.6.5\nuse rand_chacha::ChaChaRng; // 0.1.1\n\nfn main() {\n    let seed = [0; 32];\n    let mut rng = ChaChaRng::from_seed(seed);\n\n    let mut v1 = vec![1, 2, 3, 4, 5];\n    v1.shuffle(&amp;mut rng);\n    assert_eq!(v1, [3, 5, 2, 4, 1]);\n}\n</code></pre>\n\n<p>Clone the RNG before using it or create a new one from scratch with the same seed to reset back to the original state.</p>\n\n<p>You may also be interested in <a href=\"https://docs.rs/rand/0.6.5/rand/rngs/adapter/struct.ReseedingRng.html\" rel=\"nofollow noreferrer\"><code>ReseedingRng</code></a> as well.</p>\n"}], "owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 793, "favorite_count": 0, "accepted_answer_id": 50119341, "answer_count": 1, "score": 3, "last_activity_date": 1558147089, "creation_date": 1525188425, "last_edit_date": 1525189925, "question_id": 50119220, "link": "https://stackoverflow.com/questions/50119220/how-to-shuffle-an-array-deterministically-with-a-seed", "title": "How to shuffle an array deterministically with a seed?", "body": "<p>I'm finding it difficult to shuffle an array deterministically, <em>i.e.</em> with a random seed in Rust. What I'm trying to achieve (in pseudo code):</p>\n\n<pre><code>let v = vec![0, 1, 2, 3];\npseudo_shuffle(v, randomSeed1) // always produces e.g. [3,1,2,0]\npseudo_shuffle(v, randomSeed2) // always produces e.g. [0,2,3,1]\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/a/26035435/4070218\">In another Stack Overflow answer</a> I learnt how to use <a href=\"https://docs.rs/rand/0.4.2/rand/trait.Rng.html#method.shuffle\" rel=\"nofollow noreferrer\"><code>rand::Rng::shuffle()</code></a> to shuffle a vector non-deterministically, but it doesn't seem to provide an API for applying a random seed to the generation function, and I'm having a difficult time coming up with a solution myself that doesn't employ some ridiculous <code>n!</code> complexity algorithm.</p>\n"}, {"tags": ["reference", "rust", "mutable", "lifetime"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525160765, "post_id": 50111949, "comment_id": 87243118, "body": "I&#39;m surprise that I don&#39;t find a duplicate of this question, but I&#39;m generally bad at searching question in SO. Maybe because your example is not very idiomatic, maybe too simple to express the real problem."}], "answers": [{"comments": [{"owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "edited": false, "score": 1, "creation_date": 1532962002, "post_id": 50112838, "comment_id": 90159157, "body": "It seems like the current version of NLL does not accept the exact code as given; see discussion <a href=\"https://github.com/rust-lang/rust/issues/43234#issuecomment-408888687\" rel=\"nofollow noreferrer\">here at rust-lang/rust#43234</a>"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 5, "last_activity_date": 1532973247, "last_edit_date": 1532973247, "creation_date": 1525159753, "answer_id": 50112838, "question_id": 50111949, "link": "https://stackoverflow.com/questions/50111949/mutable-borrow-in-a-loop/50112838#50112838", "title": "Mutable borrow in a loop", "body": "<p>It does not work because returning a borrowed value extends the borrow to the end of the function.</p>\n\n<p>See <a href=\"https://github.com/rust-lang/rust/issues/40307\" rel=\"nofollow noreferrer\">here</a> for some useful details.</p>\n\n<p>This works with <a href=\"https://github.com/nikomatsakis/nll-rfc/blob/master/0000-nonlexical-lifetimes.md\" rel=\"nofollow noreferrer\">non-lexical lifetimes</a> with the <strong>1.27</strong> nightly version:</p>\n\n<pre><code>#![feature(nll)]\n\nstruct Baz {\n    x: usize,\n    y: usize,\n}\n\n// ...\n</code></pre>\n\n<p>The non-lexical lifetimes RFC explains the actual working of lifetimes:</p>\n\n<blockquote>\n  <p>Problems arise however when you have a reference that spans multiple statements. In that case, the compiler requires the lifetime to be the innermost expression (which is often a block) that encloses both statements, and that is typically much bigger than is really necessary or desired</p>\n</blockquote>\n\n<p><strong>rustc nightly 1.28</strong></p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/50111949/mutable-borrow-in-a-loop#comment90159157_50112838\">pointed out by @pnkfelix</a>, the non-lexical lifetimes implementation starting from nightly 1.28 no longer compiles the above code.</p>\n\n<p>There is however <a href=\"https://github.com/rust-lang/rust/issues/43234#issuecomment-408888687\" rel=\"nofollow noreferrer\">a long-term plan to (re)-enable a more powerful NLL analysis</a>.</p>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1405, "favorite_count": 1, "answer_count": 1, "score": 7, "last_activity_date": 1532973247, "creation_date": 1525154217, "last_edit_date": 1525189782, "question_id": 50111949, "link": "https://stackoverflow.com/questions/50111949/mutable-borrow-in-a-loop", "title": "Mutable borrow in a loop", "body": "<p>I have the following code:</p>\n\n<pre><code>struct Baz {\n    x: usize,\n    y: usize,\n}\n\nstruct Bar {\n    baz: Baz,\n}\n\nimpl Bar {\n    fn get_baz_mut(&amp;mut self) -&gt; &amp;mut Baz {\n        &amp;mut self.baz\n    }\n}\n\nstruct Foo {\n    bar: Bar,\n}\n\nimpl Foo {\n    fn foo(&amp;mut self) -&gt; Option&lt;&amp;mut Baz&gt; {\n        for i in 0..4 {\n            let baz = self.bar.get_baz_mut();\n            if baz.x == 0 {\n                return Some(baz);\n            }\n        }\n        None\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=816e566920fd7eb957d6d33ec7aaee37&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p>It fails to compile with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `self.bar` as mutable more than once at a time\n  --&gt; src/main.rs:23:23\n   |\n23 |             let baz = self.bar.get_baz_mut();\n   |                       ^^^^^^^^ mutable borrow starts here in previous iteration of loop\n...\n29 |     }\n   |     - mutable borrow ends here\n</code></pre>\n\n<p>However, if I return <code>Some(baz.x)</code> from <code>Foo::foo</code> (and change the return type to <code>Option&lt;usize&gt;</code>), the code compiles. This makes me believe the problem is not with the loop even though the compiler seems to indicate so. More specifically, I believe the local mutable reference <code>baz</code> would go out of scope at the next iteration of the loop, causing this to be a non-problem. What is the lifetime problem with the above code?</p>\n\n<p>The following questions are similar:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/46393890/mutable-borrow-in-loop\">Mutable borrow in loop</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30273850/linking-the-lifetimes-of-self-and-a-reference-in-method\">Linking the lifetimes of self and a reference in method</a></li>\n<li><a href=\"https://stackoverflow.com/questions/31067031/cannot-borrow-as-mutable-more-than-once-at-a-time-in-one-code-but-can-in-anoth\">Cannot borrow as mutable more than once at a time in one code - but can in another very similar</a></li>\n</ul>\n\n<p>However, they deal with explicitly declared lifetimes (and specifically these explicit lifetimes are part of the answer). My code omits these lifetimes so removing them is a non-solution.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525148262, "post_id": 50111143, "comment_id": 87239744, "body": "so you want co-routine ? <a href=\"https://github.com/rustcc/coroutine-rs\" rel=\"nofollow noreferrer\">github.com/rustcc/coroutine-rs</a>"}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525148851, "post_id": 50111143, "comment_id": 87239871, "body": "@Stargateur I don&#39;t see how that&#39;s relevant to my question?"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 2, "creation_date": 1525156315, "post_id": 50111143, "comment_id": 87241632, "body": "&quot;So... is there any way to override either how Thread is invoked, or how JoinHandle is dropped, globally?&quot; - I suppose you could always write your own version of <code>rustc</code>... or just an alternative threading crate. But something tells me that&#39;s a less than optimal solution, ha ha."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1525186386, "post_id": 50111143, "comment_id": 87254654, "body": "<a href=\"https://doc.rust-lang.org/std/mem/fn.forget.html\" rel=\"nofollow noreferrer\"><code>mem::forget</code></a> could help you to roll your own solution."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1525193267, "last_edit_date": 1525193267, "creation_date": 1525189478, "answer_id": 50119511, "question_id": 50111143, "link": "https://stackoverflow.com/questions/50111143/how-can-you-wait-for-detached-threads-or-control-how-threads-are-spawned/50119511#50119511", "title": "How can you wait for detached threads or control how threads are spawned?", "body": "<blockquote>\n  <p>Is there any way to find all threads currently running and recover a <code>JoinHandle</code> for them?</p>\n</blockquote>\n\n<p>No, this would likely impose restrictions/overhead on <em>everyone</em> who wanted to use threads, which is antithetical for a systems programming language.</p>\n\n<p>You could write your own solution for this by using something like <code>Arc</code>/<code>Weak</code> and a global singleton. Then you have your own registry of threads.</p>\n\n<blockquote>\n  <p>is there any way to override either how <code>Thread</code> is invoked, or how <code>JoinHandle</code> is dropped, globally?</p>\n</blockquote>\n\n<p>No, there is no ability to do this with the Rust libraries as they exist now. In fact \"overriding\" something on that scale is fairly antithetical to the concepts of a statically-compiled language. Imagine if any library you use could decide to \"override\" how addition worked or what <code>println</code> did. Some languages <em>do</em> allow this dynamicism, but it comes at a cost. Rust is not the right language for that.</p>\n\n<p>In fact, the right solution for this is nothing new: just use dependency injection. \"Starting a thread\" is a non-trivial collaborator and likely doesn't belong to the purview of most libraries as it's an application-wide resource.</p>\n\n<blockquote>\n  <p>can be recovered before it is dropped</p>\n</blockquote>\n\n<p>In Rust, values are dropped at the end of the scope where they are last used. This would require running arbitrary code at the prologue of arbitrary functions anywhere in the program. Such a feature is highly unlikely to ever be implemented.</p>\n\n<hr>\n\n<p><a href=\"https://github.com/rust-lang/rust/issues/48820\" rel=\"nofollow noreferrer\">There's some discussion</a> about creating a method that will return a handle that joins a thread when it is dropped, which <em>might</em> do what you want, but people still have to call it\n.</p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 277, "favorite_count": 0, "accepted_answer_id": 50119511, "answer_count": 1, "score": 3, "last_activity_date": 1525193285, "creation_date": 1525146882, "last_edit_date": 1525193285, "question_id": 50111143, "link": "https://stackoverflow.com/questions/50111143/how-can-you-wait-for-detached-threads-or-control-how-threads-are-spawned", "title": "How can you wait for detached threads or control how threads are spawned?", "body": "<p>When <code>spawn</code> is called, a <code>JoinHandle</code> is returned, but if that handle is discarded (or not available, somewhere inside a crate) the thread is \"detached\".</p>\n\n<p>Is there any way to find all threads currently running and recover a <code>JoinHandle</code> for them?</p>\n\n<p>...my feeling is that, in general, the answer is no.</p>\n\n<p>In that case, is there any way to override either how <code>Thread</code> is invoked, or how <code>JoinHandle</code> is dropped, globally?</p>\n\n<p>...but looking through the source, I can't see any way this might be possible.</p>\n\n<p>As motivation, this <a href=\"https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/\" rel=\"nofollow noreferrer\">very long discussion</a> proposes using scopes to mandate the termination of child threads; effectively executing a <code>join</code> on every child thread when the scope ends. However, it requires that child threads be spawned via a custom method to work; it would very interesting to be able to do something similar in Rust where any thread spawned was intercepted and parented to the active ambient scope on the threadlocal.</p>\n\n<p>I'll accept any answer that either:</p>\n\n<ul>\n<li>demonstrates how to recover a <code>JoinHandle</code> by whatever means possible</li>\n<li>demonstrates how to override the behavior of <code>thread::spawn()</code> in some way so that a discarded <code>JoinHandle</code> from a thread invoked in some arbitrary sub-function can be recovered before it is dropped.</li>\n</ul>\n"}, {"tags": ["path", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525133605, "post_id": 50109230, "comment_id": 87236941, "body": "Do you want to return a <code>Path</code> like <code>strip_prefix</code> does, or is it OK to build a new <code>PathBuf</code> and return that?"}, {"owner": {"reputation": 2199, "user_id": 1542038, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/sq0X6.png?s=128&g=1", "display_name": "maxcountryman", "link": "https://stackoverflow.com/users/1542038/maxcountryman"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525133689, "post_id": 50109230, "comment_id": 87236961, "body": "Ultimately I need a <code>String</code>--so it&#39;s okay to return <code>PathBuf</code> if that&#39;ll get us there."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 4, "last_activity_date": 1525181662, "last_edit_date": 1525181662, "creation_date": 1525138038, "answer_id": 50110298, "question_id": 50109230, "link": "https://stackoverflow.com/questions/50109230/can-i-use-stdpathpaths-strip-prefix-to-replace-a-dynamic-prefix/50110298#50110298", "title": "Can I use `std::path::Path`&#39;s `strip_prefix` to replace a dynamic prefix?", "body": "<p><code>strip_prefix</code> won't do what you want, because it requires that you know the prefix to strip. However, you can use <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.iter\" rel=\"nofollow noreferrer\"><code>iter</code></a> to get an iterator over path components, and then use standard <code>Iterator</code> methods to build a new <code>PathBuf</code> out of only the part you want.</p>\n\n<p>Here's an example (<a href=\"https://play.rust-lang.org/?gist=f466731b3a97bbcb2d901b9092881e86&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">try it</a>):</p>\n\n<pre><code>let p = path::Path::new(\"some/unknown/path/foo/bar/baz\");\nlet q: path::PathBuf = p.iter()   // iterate over path components\n    .skip_while(|s| *s != \"foo\")  // skip everything before \"foo\"\n    .skip(1)                      // skip \"foo\" itself\n    .collect();                   // collect the rest into a PathBuf\nprintln!(\"{:?}\", q); // prints \"bar/baz\"\n</code></pre>\n\n<p>(This will allocate a new <code>PathBuf</code>. <a href=\"https://stackoverflow.com/a/50110652/3650362\">Shepmaster's answer</a> shows how to get a <code>&amp;Path</code> referencing the original without allocating.)</p>\n\n<p>You can then use <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.to_str\" rel=\"nofollow noreferrer\"><code>to_str</code></a>, <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.to_string_lossy\" rel=\"nofollow noreferrer\"><code>to_string_lossy</code></a>, or <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.into_os_string\" rel=\"nofollow noreferrer\"><code>into_os_string</code></a> plus <a href=\"https://doc.rust-lang.org/std/ffi/struct.OsString.html#method.into_string\" rel=\"nofollow noreferrer\"><code>OsString::into_string</code></a> to get something that can be turned into a <code>String</code>.</p>\n\n<p>See also: <a href=\"https://stackoverflow.com/questions/37388107/how-to-convert-the-pathbuf-to-string\">How to convert the PathBuf to String</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1525188272, "last_edit_date": 1525188272, "creation_date": 1525141635, "answer_id": 50110652, "question_id": 50109230, "link": "https://stackoverflow.com/questions/50109230/can-i-use-stdpathpaths-strip-prefix-to-replace-a-dynamic-prefix/50110652#50110652", "title": "Can I use `std::path::Path`&#39;s `strip_prefix` to replace a dynamic prefix?", "body": "<p>While I think that <a href=\"https://stackoverflow.com/a/50110298/155423\">trentcl's answer is cleaner</a>, it's worth showing some non-allocating versions.</p>\n\n<h3>Using <code>Path::strip_prefix</code></h3>\n\n<p>To use <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.strip_prefix\" rel=\"nofollow noreferrer\"><code>Path::strip_prefix</code></a>, you need to know the prefix. We can generate it by walking up the <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.parent\" rel=\"nofollow noreferrer\"><code>parent</code></a>s of the original path until we find one that <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.ends_with\" rel=\"nofollow noreferrer\"><code>ends_with</code></a> \"foo\".</p>\n\n<pre><code>use std::path::Path;\n\nfn thing1&lt;P&gt;(path: &amp;P) -&gt; Result&lt;&amp;Path, ()&gt;\nwhere\n    P: AsRef&lt;Path&gt; + ?Sized,\n{\n    let original = path.as_ref();\n    let mut prefix = original;\n\n    while !prefix.ends_with(\"foo\") {\n        prefix = match prefix.parent() {\n            Some(p) =&gt; p,\n            None =&gt; return Err(()),\n        };\n    }\n\n    original.strip_prefix(prefix).map_err(|_| ())\n}\n\nfn main() {\n    let x = thing1(\"some/unknown/path/foo/bar/baz\");\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<h3>With an iterator</h3>\n\n<p>We can <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.iter\" rel=\"nofollow noreferrer\">iterate</a> over the pieces of the path, <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take_while\" rel=\"nofollow noreferrer\">taking values while</a> it's not \"foo\". Once we've advanced the iterator enough, we can get the remainder <a href=\"https://doc.rust-lang.org/std/path/struct.Iter.html#method.as_path\" rel=\"nofollow noreferrer\">as a path</a>.</p>\n\n<pre><code>use std::path::Path;\n\nfn thing2&lt;P&gt;(path: &amp;P) -&gt; &amp;Path\nwhere\n    P: AsRef&lt;Path&gt; + ?Sized,\n{\n    let path = path.as_ref();\n    let mut i = path.iter();\n\n    for _ in i.by_ref().take_while(|c| *c != \"foo\") {}\n\n    i.as_path()\n}\n\nfn main() {\n    let x = thing2(\"some/unknown/path/foo/bar/baz\");\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<p>This returns an empty path when \"foo\" doesn't exist.</p>\n"}], "owner": {"reputation": 2199, "user_id": 1542038, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/sq0X6.png?s=128&g=1", "display_name": "maxcountryman", "link": "https://stackoverflow.com/users/1542038/maxcountryman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 688, "favorite_count": 0, "accepted_answer_id": 50110298, "answer_count": 2, "score": 0, "last_activity_date": 1525188272, "creation_date": 1525128698, "last_edit_date": 1525181522, "question_id": 50109230, "link": "https://stackoverflow.com/questions/50109230/can-i-use-stdpathpaths-strip-prefix-to-replace-a-dynamic-prefix", "title": "Can I use `std::path::Path`&#39;s `strip_prefix` to replace a dynamic prefix?", "body": "<p>The reason I'm interested in doing this is because there's a part of my path which will remain constant but which I wish to remove along with all its parent pieces.</p>\n\n<p>So if we have say,</p>\n\n<pre><code>some/unknown/path/foo/bar/baz\n</code></pre>\n\n<p>I would like to return</p>\n\n<pre><code>bar/baz\n</code></pre>\n\n<p>But with the expectation that I only know <code>foo/...</code> directly proceeds the part of the path I care about.</p>\n\n<p>Perhaps <code>strip_prefix</code> is the wrong approach so if there's a better way of doing this I would certainly appreciate being pointed in that direction.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1525120645, "post_id": 50107792, "comment_id": 87232980, "body": "I&#39;m not sure I&#39;m reading this correctly but you may want to look at <a href=\"https://docs.rs/owning_ref/0.3.3/owning_ref/\" rel=\"nofollow noreferrer\">owning_ref</a>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525120984, "post_id": 50107792, "comment_id": 87233111, "body": "<code>from_vec</code> is definitely not safe. The <code>Vec</code> will be dropped when the function returns, invalidating the pointer. You need to at least <code>mem::forget(vec)</code> to make it work"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525121431, "post_id": 50107792, "comment_id": 87233313, "body": "I don&#39;t see how this question will not be opinion-based, which is explicitly offtopic for Stack Overflow."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525121499, "post_id": 50107792, "comment_id": 87233345, "body": "However, it might be a duplicate of <a href=\"https://stackoverflow.com/q/42613798/155423\">How do I handle an FFI unsized type that could be owned or borrowed?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50107792/edit\">edit</a> your question to better explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1525124169, "post_id": 50107792, "comment_id": 87234413, "body": "I don&#39;t think your <code>resize</code> function can exist, because you don&#39;t retain any information about the provenance of your pointer. You want the function to return an owned <code>Image</code> when <code>self</code> is owned, and a borrowed one when <code>self</code> is borrowed, but you aren&#39;t keeping track of any way to distinguish them. What does <code>ffi::resize</code> do?"}, {"owner": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "edited": false, "score": 0, "creation_date": 1525163706, "post_id": 50107792, "comment_id": 87244053, "body": "I edited the question to be clearer. The question is not about how to manage FFI objects, but adding lifetime restriction on the purpose. My intention was to keep track of vec/ref distinction with lifetime specifier. (propagating lifetime from new_from_vec / new_from_ref)."}, {"owner": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "edited": false, "score": 0, "creation_date": 1525163921, "post_id": 50107792, "comment_id": 87244129, "body": "ffi::resize performs an image resize and returns a new ffi image&#39;s pointer. ffi::resize doesn&#39;t care if the data is from vec/ref, however, the resized image may reference the input pixel data."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525176391, "post_id": 50107792, "comment_id": 87249487, "body": "On the contrary, I think this is all about managing FFI objects. How can <code>fn resize(..) -&gt; OwnedImage</code> be safe, if <i>the resized image may reference the input pixel data</i>?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525177241, "post_id": 50107792, "comment_id": 87249855, "body": "Also, I think you don&#39;t realize that the <code>Vec</code> you called <code>mem::forget</code> on can never be freed. Rust&#39;s allocator has to free the data and, unless you save the vector&#39;s original capacity and call <code>Vec::from_raw_parts</code> to reconstitute it, that <code>Vec</code> is leaked forever. Passing it to C&#39;s <code>free</code> or to <code>g_object_unref</code> may do nothing, or may corrupt data, but it won&#39;t free the slice."}, {"owner": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "edited": false, "score": 0, "creation_date": 1525194662, "post_id": 50107792, "comment_id": 87259053, "body": "I say it is safe because rust code cannot do unsafe actions: rust code transferred the ownership to ffi and never accidently access to it again. if we trust ffi will reliably deallocate the object, the rust code can forget about it. (although we lost the control &#39;when&#39; it is deallocated, this has nothing to do with data race)"}, {"owner": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "edited": false, "score": 0, "creation_date": 1525195368, "post_id": 50107792, "comment_id": 87259379, "body": "Rust memory should be deallocated by Rust &lt;- you are right, I missed that. Maybe I need to add another C layer to add callback to Rust deallocator. Also you are right that this is due to FFI. I want an explicit lifetime because the context is hidden behind a raw pointer and not exposed to the compiler. Assuming I solved the deallocation issue, do you think the question is valid? Or do you know any idiomatic pattern for this kind of case and I should not have used just a raw pointer?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "edited": false, "score": 0, "creation_date": 1525201578, "post_id": 50107792, "comment_id": 87262568, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/170173/discussion-between-trentcl-and-mq7\">continue this discussion in chat</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525536444, "post_id": 50191392, "comment_id": 87399720, "body": "<code>drop(b);</code> is unneeded \u2014 values are dropped at the end of the block. <code>let _img: Image</code> doesn&#39;t need the type, it&#39;s inferred."}], "tags": [], "owner": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "is_accepted": false, "score": 3, "last_activity_date": 1525536381, "last_edit_date": 1525536381, "creation_date": 1525536060, "answer_id": 50191392, "question_id": 50107792, "link": "https://stackoverflow.com/questions/50107792/what-is-the-better-way-to-wrap-a-ffi-struct-that-owns-or-borrows-data/50191392#50191392", "title": "What is the better way to wrap a FFI struct that owns or borrows data?", "body": "<p><strong>Struct</strong></p>\n\n<pre><code>pub struct Image&lt;'a&gt; {\n    pub c: *mut ffi::Image,\n    marker: PhantomData&lt;&amp;'a()&gt;,\n}\n</code></pre>\n\n<p><strong>Deallocation callback</strong></p>\n\n<pre><code>pub unsafe extern \"C\" fn cleanup(ptr: *mut ffi::Image, user_data: *mut c_void) {\n    let b: Box&lt;Box&lt;[u8]&gt;&gt; = Box::from_raw(user_data as *mut Box&lt;[u8]&gt;);\n    println!(\" &gt;&gt;&gt;&gt; releasing slice of len {}\", b.len());\n    drop(b);\n}\n</code></pre>\n\n<p><strong>Reference constructor</strong></p>\n\n<pre><code>impl&lt;'a&gt; Image&lt;'a&gt; {\n    pub fn from_memory_reference(buf: &amp;'a [u8] /* ... */) -&gt; Result&lt;Image, Box&lt;Error&gt;&gt; {\n        let c = unsafe {\n            ffi::image_new_from_memory(\n                buf.as_ptr() as *const c_void,\n                // ...\n            )\n        };\n\n        Ok(Image {\n            ptr: c,\n            PhantomData,\n        })\n    }\n}\n</code></pre>\n\n<p><strong>Owned constructor</strong></p>\n\n<p>The solution is leaving the parameter <code>'a</code> as under-determined.</p>\n\n<pre><code>impl&lt;'a&gt; Image&lt;'a&gt; {\n    pub fn from_memory(buf: Vec&lt;u8&gt; /* ... */) -&gt; Result&lt;Image&lt;'a&gt;, Box&lt;Error&gt;&gt; {\n        let b: Box&lt;[_]&gt; = buf.into_boxed_slice();\n        let c = unsafe {\n            ffi::image_new_from_memory(\n                b.as_ptr() as *const c_void,\n                // ...\n            )\n        };\n\n        let bb: Box&lt;Box&lt;_&gt;&gt; = Box::new(b);\n        let raw: *mut c_void = Box::into_raw(bb) as *mut c_void;\n\n        unsafe {\n            let callback: unsafe extern \"C\" fn() = ::std::mem::transmute(cleanup as *const ());\n\n            ffi::g_signal_connect_data(\n                c as *mut c_void,\n                \"close_signal\\0\".as_ptr() as *const c_char,\n                Some(callback),\n                raw,\n                None,\n                ffi::GConnectFlags::G_CONNECT_AFTER,\n            );\n        };\n\n        Ok(Image {\n            ptr: c,\n            PhantomData,\n        })\n    }\n}\n</code></pre>\n\n<p><strong>Operation</strong></p>\n\n<pre><code>fn resize(&amp;self, scale: f64) -&gt; Result&lt;Image, Box&lt;Error&gt;&gt; {\n    // ...\n}\n</code></pre>\n\n<p><strong>Reference test</strong></p>\n\n<pre><code>let _img: Image = {\n    let pixels = vec![0; 256 * 256 * 3];\n    Image::from_memory_reference(&amp;pixels, /* ... */).unwrap()\n    //~^ ERROR `pixels` does not live long enough\n};\n</code></pre>\n\n<p><strong>Owned test</strong></p>\n\n<pre><code>let _img: Image = {\n    let pixels = vec![0; 256 * 256 * 3];\n    Image::from_memory(pixels, /* ... */).unwrap()\n}; // Ok\n</code></pre>\n\n<p>A downside is that, when writing APIs, I need to be fully aware of lifetime elision rules, otherwise it might silently allow bad usages.</p>\n"}], "owner": {"reputation": 657, "user_id": 2547570, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/66ac34b6d04aa0bf9c738ef391c8b722?s=128&d=identicon&r=PG", "display_name": "mq7", "link": "https://stackoverflow.com/users/2547570/mq7"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 586, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1525536381, "creation_date": 1525120330, "last_edit_date": 1525164021, "question_id": 50107792, "link": "https://stackoverflow.com/questions/50107792/what-is-the-better-way-to-wrap-a-ffi-struct-that-owns-or-borrows-data", "title": "What is the better way to wrap a FFI struct that owns or borrows data?", "body": "<p>I have an Image struct that can be constructed from a <code>Vec&lt;u8&gt;</code> or a <code>&amp;[u8]</code>.\nIt represents an image object in C library (ffi module).</p>\n\n<pre><code>struct Image { ptr: *mut c_void };\n\nimpl Image {\n    fn from_vec(vec: Vec&lt;u8&gt;) -&gt; Image {\n        // transfer ownership to gobject system\n        let ptr = unsafe {\n            ffi::new(\n                vec.as_ptr() as *const c_void,\n                vec.len(),\n                ..\n            )\n        };\n        std::mem::forget(vec);\n        Image { ptr }\n    }\n    fn from_ref(data: &amp;[u8]) -&gt; Image {\n        // gobject doesn't free data on Drop\n        let ptr = unsafe {\n            ffi::new_ref(\n                data.as_ptr() as *const c_void,\n                data.len(),\n                ..\n            )\n        };\n        Image { ptr }\n    }\n\n    fn resize(&amp;self, ..) -&gt; Image {\n        let new_ptr = unsafe { ffi::resize(self.ptr) };\n        Image { new_ptr }\n    }\n}\n\nimpl Drop for Image {\n    fn drop(&amp;mut self) {\n        unsafe {\n            ffi::g_object_unref(self.ptr as *mut c_void);\n        }\n    }\n}\n</code></pre>\n\n<p>The Image struct has only raw pointer and no borrow, so the compiler puts no lifetime constraint on the output of resize operation.</p>\n\n<p>with a vector, this is ok:</p>\n\n<pre><code>let img1 = Image::from_vec(pixels); // consume pixels\nlet img2 = img1.resize(..);\nreturn img2;\n// when img2 is released, gobject system will release pixels as well\n</code></pre>\n\n<p>However, with a reference, this is a problem:</p>\n\n<pre><code>let pixels = Vec::new(..);\nlet img1 = Image::from_ref(&amp;pixels);\nlet img2 = img1.resize(..)\nreturn img2;\n// danger: img2's gobject has a raw pointer to pixels\n</code></pre>\n\n<p>The compiler doesn't complain, but to prevent this case, I want the compiler to complain by adding a lifetime.</p>\n\n<p>A working solution I know is to have two versions of Image, owned and borrowed. (like String/&amp;str). However I don't want to repeat the same code which differs only in return type:</p>\n\n<pre><code>impl OwnedImage {\n    fn resize(..) -&gt; OwnedImage {\n        let new_ptr = unsafe { ffi::resize(self.ptr) };\n        OwnedImage{ptr:new_ptr}\n    }\n}\n\n// ScopedImage needs a PhantomData.\nstruct ScopedImage&lt;'a&gt; { ptr: *mut c_void, marker: PhantomData&lt;&amp;'a ()&gt; }\nimpl&lt;'a&gt; ScopedImage&lt;'a&gt; {\n    fn resize(..) -&gt; ScopedImage&lt;'a&gt; {\n        let new_ptr = unsafe { ffi::resize(self.ptr) };\n        ScopedImage{ptr:new_ptr, PhantomData}\n    }\n}\n\nlet pixels = Vec::new(..);\nlet img1 = ScopedImage::from_ref(&amp;pixels);\nlet img2 = img1.resize(..);\nreturn img2; // error, as I intended.\n</code></pre>\n\n<p>Unlike &amp;str/String, two types differ only in whether the compiler complains or not for some cases.</p>\n\n<p>My question is if it is possible to incorporate two types into one with lifetime parameter.</p>\n\n<p>My first idea was having two lifetimes 'a and 'b, where 'a represents self's scope and 'b represents the scope of returned objects.\nFor reference image, I want to enforce 'a == 'b but I am not sure how to achieve that.</p>\n\n<pre><code>    // for vec, 'a!='b. for ref, 'a=='b\n\n    struct Image&lt;'a, 'b&gt; { ptr, ?? }\n\n    // this type parameter relationship is\n    //    enforced at the construction\n\n    from_vec(..) -&gt; Image&lt;'a,'a&gt;\n    from_ref&lt;'b&gt; (&amp;'a data) -&gt; Image&lt;'a,'b&gt;\n\n    resize&lt;'b&gt;(&amp;self, ..) -&gt; Image&lt;'b&gt;\n</code></pre>\n\n<p>Or with one lifetime:</p>\n\n<pre><code>    type R = (Image:'a  or Image:'b);\n    resize(&amp;self, ..) -&gt; R // R: return type, decided on construction\n</code></pre>\n\n<p>Or split into two structs, <code>OwnedImage</code> and <code>ScopedImage</code> and implement operations in a trait:</p>\n\n<pre><code>    trait ImageTrait&lt;'a&gt; {\n        type OutputImage: 'a;\n\n        fn resize(..) -&gt; Self::OutputImage {\n            ..\n        }\n    }\n\n    impl&lt;'a&gt; ImageTrait&lt;'a&gt; for OwnedImage {\n        type OutputImage = OwnedImage;\n    }\n\n    impl&lt;'a, 'b&gt; ImageTrait&lt;'b&gt; for ScopedImage {\n        type OutputImage = ScopedImage;\n    }\n</code></pre>\n\n<p>Or, searching 'rust lifetime as type association' gives me this RFC:\n<a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rfcs/pull/1598</a>\n(I am reading this. Is this applicable to my case?)</p>\n\n<p>This is the first time I am writing a serious Rust code with complex generics and lifetimes.\nI am not actually asking which is better (though I wonder their pros/cons and which is idiomatic), I just don't even know which of these options are possible.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 5, "last_activity_date": 1525119257, "creation_date": 1525119257, "answer_id": 50107585, "question_id": 50107375, "link": "https://stackoverflow.com/questions/50107375/no-rules-expected-the-token-when-passing-a-type-as-an-ident-to-macro-rules/50107585#50107585", "title": "&quot;no rules expected the token `&lt;`&quot; when passing a type as an ident to macro_rules", "body": "<p><code>$T:ident</code> can only match an <code>ident</code>ifier.</p>\n\n<p>If you want <code>$T</code> to match any <em>type</em>, even if it's not a single identifier, you should use <code>$T:ty</code> instead:</p>\n\n<pre><code>macro_rules! boo {\n    ($T:ty) =&gt; {\n        let x: $T;\n    }\n}\n</code></pre>\n\n<p><code>ident</code> and <code>ty</code> are called \"fragment specifiers\" because they specify what kind of code fragment the metavariable <code>$T</code> can match. The first edition of the Rust book has <a href=\"https://doc.rust-lang.org/book/first-edition/macros.html\" rel=\"noreferrer\">a chapter on macros</a>, including a list of possible fragment specifiers; you should definitely familiarize yourself with the contents of this chapter before trying to write a macro.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 786, "favorite_count": 0, "accepted_answer_id": 50107585, "answer_count": 1, "score": 2, "last_activity_date": 1525119939, "creation_date": 1525118280, "last_edit_date": 1525119939, "question_id": 50107375, "link": "https://stackoverflow.com/questions/50107375/no-rules-expected-the-token-when-passing-a-type-as-an-ident-to-macro-rules", "title": "&quot;no rules expected the token `&lt;`&quot; when passing a type as an ident to macro_rules", "body": "<p>Toy example:</p>\n\n<pre><code>macro_rules! boo {\n    ($T:ident) =&gt; {\n        let x: $T;\n    };\n}\n\nfn main() {\n    boo!(i32);         // WORKS\n    boo!(Option&lt;i32&gt;); // PROBLEM\n}\n</code></pre>\n\n<p><code>boo!(Option&lt;i32&gt;);</code> causes the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no rules expected the token `&lt;`\n --&gt; src/main.rs:9:16\n  |\n9 |     boo!(Option&lt;i32&gt;);\n  |                ^\n</code></pre>\n\n<p>I can work around it with:</p>\n\n<pre><code>type Opti32 = Option&lt;i32&gt;;\nboo!(Opti32);\n</code></pre>\n\n<p>But it is too boring to add an alias for every usage of macros.\nIs it possible to use macros like <code>boo!(Option&lt;i32&gt;);</code> and hide\nthe difficulty inside <code>macro_rules</code>?</p>\n"}, {"tags": ["arrays", "rust", "sum"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1525190743, "last_edit_date": 1525190743, "creation_date": 1525107999, "answer_id": 50105092, "question_id": 50104999, "link": "https://stackoverflow.com/questions/50104999/how-can-you-get-the-sum-of-all-keys-in-an-array-of-structs/50105092#50105092", "title": "How can you get the sum of all keys in an array of structs?", "body": "<p>To sum <code>MyStruct.myvalue</code> in a single line you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\"><code>Iterator::map</code></a> and <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum\" rel=\"nofollow noreferrer\"><code>Iterator::sum</code></a>.</p>\n\n<pre><code>fn sum_myvalue(a: &amp;[MyStruct]) -&gt; u32 {\n    a.iter().map(|s| s.myvalue).sum()\n}\n\n// Later on you can use this like so:\n//\nsum_myvalue(a);\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40441334/155423\">Is `iter().map().sum()` as fast as `iter().fold()`?</a></li>\n</ul>\n"}], "owner": {"reputation": 897, "user_id": 4528728, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/48b7aeab16c3e50657c88ac3542a502b?s=128&d=identicon&r=PG&f=1", "display_name": "Slim Shady", "link": "https://stackoverflow.com/users/4528728/slim-shady"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 511, "favorite_count": 1, "accepted_answer_id": 50105092, "answer_count": 1, "score": 3, "last_activity_date": 1526591783, "creation_date": 1525107588, "last_edit_date": 1526591783, "question_id": 50104999, "link": "https://stackoverflow.com/questions/50104999/how-can-you-get-the-sum-of-all-keys-in-an-array-of-structs", "title": "How can you get the sum of all keys in an array of structs?", "body": "<p>I have this struct:</p>\n\n<pre><code>struct MyStruct {\n    myvalue: u32,\n    yourvalue: u32,\n}\n</code></pre>\n\n<p>If I have <code>a: Vec&lt;MyStruct&gt;</code> how can I get the sum of all <code>MyStruct.myvalue</code>? I'm looking for something like <code>a.iter.sum(sum of myvalue)</code>.</p>\n\n<p>I know I can do it with a <code>for</code> loop, but I would like to be able to do this with one line of code.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 522, "user_id": 6070255, "user_type": "registered", "profile_image": "https://graph.facebook.com/1700571903515060/picture?type=large", "display_name": "Aunmag", "link": "https://stackoverflow.com/users/6070255/aunmag"}, "edited": false, "score": 0, "creation_date": 1608285311, "post_id": 50102318, "comment_id": 115542031, "body": "Does this answer your question? <a href=\"https://stackoverflow.com/questions/40384274/rust-mpscsender-cannot-be-shared-between-threads\">Rust mpsc::Sender cannot be shared between threads?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 308, "user_id": 4656131, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3ae9b3ba517cf26b9e1bb63f7e55c8e9?s=128&d=identicon&r=PG&f=1", "display_name": "Andr&#233; T.", "link": "https://stackoverflow.com/users/4656131/andr%c3%a9-t"}, "edited": false, "score": 0, "creation_date": 1525100551, "post_id": 50103049, "comment_id": 87223314, "body": "Thanks, it makes a lot more sense now! The reason for wanting it in an Arc is because I want to use it from within a closure which is called from C-code later on (PortAudio), but I have a feeling I should probably think of a better way to do it."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 308, "user_id": 4656131, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3ae9b3ba517cf26b9e1bb63f7e55c8e9?s=128&d=identicon&r=PG&f=1", "display_name": "Andr&#233; T.", "link": "https://stackoverflow.com/users/4656131/andr%c3%a9-t"}, "edited": false, "score": 0, "creation_date": 1525101705, "post_id": 50103049, "comment_id": 87223989, "body": "@Andr&#233;T. If you have multiple consumers of the channel, you should probably use a library that has mpmc channels, like <a href=\"https://crates.io/crates/crossbeam-channel\" rel=\"nofollow noreferrer\"><code>crossbeam-channel</code></a>. Then, your <code>Receiver</code> is <code>Sync</code>. Or you could ask on <code>&#47;r&#47;rust</code> or in the users forum what others would recommend in your situation :)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1525106951, "last_edit_date": 1525106951, "creation_date": 1525099953, "answer_id": 50103049, "question_id": 50102318, "link": "https://stackoverflow.com/questions/50102318/why-do-i-get-an-error-that-sync-is-not-satisfied-when-moving-self-which-conta/50103049#50103049", "title": "Why do I get an error that &quot;Sync is not satisfied&quot; when moving self, which contains an Arc, into a new thread?", "body": "<blockquote>\n  <p>How does this work?</p>\n</blockquote>\n\n<p>Let's check the requirements of <a href=\"https://doc.rust-lang.org/stable/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>thread::spawn</code></a> again:</p>\n\n<pre><code>pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt; \nwhere\n    F: FnOnce() -&gt; T,\n    F: Send + 'static,   // &lt;-- this line is important for us\n    T: Send + 'static, \n</code></pre>\n\n<p>Since <code>Foo</code> contains an <code>Arc&lt;Receiver&lt;_&gt;&gt;</code>, let's check if and how <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#impl-Send\" rel=\"nofollow noreferrer\"><code>Arc</code> implements <code>Send</code></a>:</p>\n\n<pre><code>impl&lt;T&gt; Send for Arc&lt;T&gt; \nwhere\n    T: Send + Sync + ?Sized,\n</code></pre>\n\n<p>So <code>Arc&lt;T&gt;</code> implements <code>Send</code> if <code>T</code> implements <code>Send</code> <em>and</em> <code>Sync</code>. And while <a href=\"https://doc.rust-lang.org/stable/std/sync/mpsc/struct.Receiver.html#impl-Send\" rel=\"nofollow noreferrer\"><code>Receiver</code> implements <code>Send</code></a>, <a href=\"https://doc.rust-lang.org/stable/std/sync/mpsc/struct.Receiver.html#impl-Sync\" rel=\"nofollow noreferrer\">it does <em>not</em> implement <code>Sync</code></a>.</p>\n\n<p>So why does <code>Arc</code> have such strong requirements for <code>T</code>? <code>T</code> also has to implement <code>Send</code> because <code>Arc</code> can act like a container; if you could just hide something that doesn't implement <code>Send</code> in an <code>Arc</code>, send it to another thread and unpack it there... bad things would happen. The interesting part is to see why <code>T</code> also has to implement <code>Sync</code>, which is apparently also the part you are struggling with:</p>\n\n<blockquote>\n  <p>The error doesn't make sense to me as I'm not trying to share it between threads (I'm moving it, not cloning it).</p>\n</blockquote>\n\n<p>The compiler can't know that the <code>Arc</code> in <code>Foo</code> is in fact not shared. Consider if you would add a <code>#[derive(Clone)]</code> to <code>Foo</code> later (which is possible without a problem):</p>\n\n<pre><code>fn main() {\n    let (example, sender) = Foo::new();\n    let clone = example.clone();\n    let handle = example.run_thread();\n    clone.run();\n    // oopsie, now the same `Receiver` is used from two threads!\n\n    handle.join();\n}\n</code></pre>\n\n<p>In the example above there is only one <code>Receiver</code> which is shared between threads. And this is no good, since <code>Receiver</code> does not implement <code>Sync</code>!</p>\n\n<p>To me this code raises the question: why the <code>Arc</code> in the first place? As you noticed, without the <code>Arc</code>, it works without a problem: you clearly state that <code>Foo</code> is the only owner of the <code>Receiver</code>. And if you are \"not trying to share [the Receiver]\" anyway, there is no point in having multiple owners.</p>\n"}], "owner": {"reputation": 308, "user_id": 4656131, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3ae9b3ba517cf26b9e1bb63f7e55c8e9?s=128&d=identicon&r=PG&f=1", "display_name": "Andr&#233; T.", "link": "https://stackoverflow.com/users/4656131/andr%c3%a9-t"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1248, "favorite_count": 1, "accepted_answer_id": 50103049, "answer_count": 1, "score": 3, "last_activity_date": 1525107135, "creation_date": 1525097543, "last_edit_date": 1525107135, "question_id": 50102318, "link": "https://stackoverflow.com/questions/50102318/why-do-i-get-an-error-that-sync-is-not-satisfied-when-moving-self-which-conta", "title": "Why do I get an error that &quot;Sync is not satisfied&quot; when moving self, which contains an Arc, into a new thread?", "body": "<p>I have a struct which holds an <code>Arc&lt;Receiver&lt;f32&gt;&gt;</code> and I'm trying to add a method which takes ownership of <code>self</code>, and moves the ownership into a new thread and starts it. However, I'm getting the error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::sync::mpsc::Receiver&lt;f32&gt;: std::marker::Sync` is not satisfied\n  --&gt; src/main.rs:19:9\n   |\n19 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver&lt;f32&gt;` cannot be shared between threads safely\n   |\n   = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver&lt;f32&gt;`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc&lt;std::sync::mpsc::Receiver&lt;f32&gt;&gt;`\n   = note: required because it appears within the type `Foo`\n   = note: required because it appears within the type `[closure@src/main.rs:19:23: 22:10 self:Foo]`\n   = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>If I change the struct to hold an <code>Arc&lt;i32&gt;</code> instead, or just a <code>Receiver&lt;f32&gt;</code>, it compiles, but not with a <code>Arc&lt;Receiver&lt;f32&gt;&gt;</code>. How does this work? The error doesn't make sense to me as I'm not trying to share it between threads (I'm moving it, not cloning it).</p>\n\n<p>Here is the full code:</p>\n\n<pre><code>use std::sync::mpsc::{channel, Receiver, Sender};\nuse std::sync::Arc;\nuse std::thread;\n\npub struct Foo {\n    receiver: Arc&lt;Receiver&lt;f32&gt;&gt;,\n}\n\nimpl Foo {\n    pub fn new() -&gt; (Foo, Sender&lt;f32&gt;) {\n        let (sender, receiver) = channel::&lt;f32&gt;();\n        let sink = Foo {\n            receiver: Arc::new(receiver),\n        };\n        (sink, sender)\n    }\n\n    pub fn run_thread(self) -&gt; thread::JoinHandle&lt;()&gt; {\n        thread::spawn(move || {\n            println!(\"Thread spawned by 'run_thread'\");\n            self.run(); // &lt;- This line gives the error\n        })\n    }\n\n    fn run(mut self) {\n        println!(\"Executing 'run'\")\n    }\n}\n\nfn main() {\n    let (example, sender) = Foo::new();\n    let handle = example.run_thread();\n    handle.join();\n}\n</code></pre>\n"}, {"tags": ["string", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 15, "last_activity_date": 1525097954, "creation_date": 1525097954, "answer_id": 50102436, "question_id": 50101842, "link": "https://stackoverflow.com/questions/50101842/how-to-find-the-last-occurrence-of-a-char-in-a-string/50102436#50102436", "title": "How to find the last occurrence of a char in a string?", "body": "<p>You need to use <a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.rfind\" rel=\"noreferrer\"><code>std::str::rfind</code></a>. Note that it returns an <code>Option&lt;usize&gt;</code>, so you will need to account for that when checking its result:</p>\n\n<pre><code>fn main() {\n    let s = \"/test1/test2/test3\";\n    let pos = s.rfind('/');\n\n    println!(\"{:?}\", pos); // prints \"Some(12)\"\n}\n</code></pre>\n"}], "owner": {"reputation": 2260, "user_id": 5240970, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/16a645b64ff208b3ba9269dcf90305fd?s=128&d=identicon&r=PG&f=1", "display_name": "Kabard", "link": "https://stackoverflow.com/users/5240970/kabard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2148, "favorite_count": 0, "accepted_answer_id": 50102436, "answer_count": 1, "score": 3, "last_activity_date": 1525098302, "creation_date": 1525095865, "last_edit_date": 1525098302, "question_id": 50101842, "link": "https://stackoverflow.com/questions/50101842/how-to-find-the-last-occurrence-of-a-char-in-a-string", "title": "How to find the last occurrence of a char in a string?", "body": "<p>I want to find the index of the last forward slash <code>/</code> in a string. For example, I have the string <code>/test1/test2/test3</code> and I want to find the location of the slash before <code>test3</code>. How can I achieve this?</p>\n\n<p>In Python, I would use <code>rfind</code> but I can't find anything like that in Rust.</p>\n"}, {"tags": ["filter", "rust"], "comments": [{"owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "edited": false, "score": 2, "creation_date": 1525095023, "post_id": 50101548, "comment_id": 87219856, "body": "I think the problem is that you&#39;re trying to build a <code>Vec&lt;Word&gt;</code> from an iterator of <code>&amp;Word</code>. Try inserting a <code>.cloned()</code> just before the <code>collect</code> method."}, {"owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "edited": false, "score": 1, "creation_date": 1525095436, "post_id": 50101548, "comment_id": 87220101, "body": "In order to call the <code>into_iter</code> method, you must pass the vector itself to the function, not a reference to it."}, {"owner": {"reputation": 9718, "user_id": 87584, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9f6dfb6c18bce2c8487312b77c32dbc3?s=128&d=identicon&r=PG", "display_name": "Fabien", "link": "https://stackoverflow.com/users/87584/fabien"}, "reply_to_user": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "edited": false, "score": 0, "creation_date": 1525095578, "post_id": 50101548, "comment_id": 87220188, "body": "Well, @Milack27, it seems to work, thanks! I&#39;ll have to dig it to understand what&#39;s actually happening there, but I know where to look now."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1525095876, "post_id": 50101548, "comment_id": 87220425, "body": "Relevant: <a href=\"https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter\">What is the difference between iter and into_iter?</a>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525105963, "post_id": 50101548, "comment_id": 87226413, "body": "<code>possibleWords</code> should take <code>&amp;[Word]</code> instead of <code>&amp;Vec&lt;Word&gt;</code>. See <a href=\"https://stackoverflow.com/q/40006219/3650362\">stackoverflow.com/q/40006219/3650362</a>"}], "answers": [{"tags": [], "owner": {"reputation": 995, "user_id": 2679327, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/9Gmc3.png?s=128&g=1", "display_name": "Milack27", "link": "https://stackoverflow.com/users/2679327/milack27"}, "is_accepted": true, "score": 4, "last_activity_date": 1525098837, "creation_date": 1525098837, "answer_id": 50102697, "question_id": 50101548, "link": "https://stackoverflow.com/questions/50101548/how-do-i-filter-values-from-a-vec-and-still-return-a-vec/50102697#50102697", "title": "How do I filter values from a Vec and still return a Vec?", "body": "<p>You're calling the <code>into_iter</code> method on a <code>&amp;Vec&lt;Word&gt;</code>, which gives you an <code>Iterator&lt;&amp;Word&gt;</code>. When you try to collect the elements from this iterator, you'll get a collection of <code>&amp;Word</code> although you wanted a collection of <code>Word</code>.</p>\n\n<p>You have two options to fix this:</p>\n\n<ol>\n<li>Convert the <code>Iterator&lt;&amp;Word&gt;</code> into an <code>Iterator&lt;Word&gt;</code> by cloning each element (call the <code>cloned</code> method on the iterator);</li>\n<li>Pass a <code>Vec&lt;Word&gt;</code> to the function, instead of a <code>&amp;Vec&lt;Word&gt;</code>. This way, the <code>into_iter</code> method will return an <code>Iterator&lt;Word&gt;</code>, from which you can collect with no problem.</li>\n</ol>\n"}], "owner": {"reputation": 9718, "user_id": 87584, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9f6dfb6c18bce2c8487312b77c32dbc3?s=128&d=identicon&r=PG", "display_name": "Fabien", "link": "https://stackoverflow.com/users/87584/fabien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3380, "favorite_count": 0, "closed_date": 1525103802, "accepted_answer_id": 50102697, "answer_count": 1, "score": 3, "last_activity_date": 1525103797, "creation_date": 1525094789, "last_edit_date": 1525103797, "question_id": 50101548, "link": "https://stackoverflow.com/questions/50101548/how-do-i-filter-values-from-a-vec-and-still-return-a-vec", "closed_reason": "Duplicate", "title": "How do I filter values from a Vec and still return a Vec?", "body": "<p>I have a function that takes a <code>&amp;Vec&lt;Word&gt;</code> (where <code>Word</code> is a locally defined type) and that should return a <code>Vec&lt;Word&gt;</code> (or a <code>&amp;Vec&lt;Word&gt;</code>). The function's definition consists in filtering values from the argument:</p>\n\n<pre><code>fn possibleWords(w1: &amp;Word, words: &amp;Vec&lt;Word&gt;) -&gt; Vec&lt;Word&gt; {\n    words.into_iter().filter(|w| matches(w, w1)).collect::&lt;Vec&lt;Word&gt;&gt;()\n}\n</code></pre>\n\n<p>However, I get the following error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;[char; 10]&gt;: std::iter::FromIterator&lt;&amp;[char; 10]&gt;` is not satisfied\n\nwords.into_iter().filter(|w| matches(w, w1)).collect::&lt;Vec&lt;Word&gt;&gt;()\n                                             ^^^^^^^ a collection of type `std::vec::Vec&lt;[char; 10]&gt;` cannot be built from an iterator over elements of type `&amp;[char; 10]`\n</code></pre>\n\n<p>I don't want to return a slice, I really want a <code>Vec</code>. Is there a way to do it without manually building a <code>Vec</code> from the slice?</p>\n\n<p>Here is a MCVE:</p>\n\n<pre><code>type Word = [char; 10];\n\nfn matches(w1: &amp;Word, w2: &amp;Word) -&gt; bool {\n    true\n}\n\nfn possibleWords(w1: &amp;Word, words: &amp;Vec&lt;Word&gt;) -&gt; Vec&lt;Word&gt; {\n    words.into_iter().filter(|w| matches(w, w1)).collect::&lt;Vec&lt;Word&gt;&gt;()\n}\n\n\nfn main() {\n    let w1 = ['D', 'E', 'C', 'O', 'U', 'V', 'E', 'R', 'T', 'E'];\n    let w2 = ['D', 'E', 'C', 'O', 'U', 'V', 'E', 'R', 'E', 'Z'];\n    let words = vec![w1, w2];\n    println!(\"{:?}\", possibleWords(&amp;w1, &amp;words));\n}\n</code></pre>\n"}, {"tags": ["enums", "rust", "pattern-matching"], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1525099469, "post_id": 50101278, "comment_id": 87222655, "body": "If you don&#39;t care of many other value you can do <code>_ =&gt; Ok(())</code>"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 4, "last_activity_date": 1525104958, "last_edit_date": 1525104958, "creation_date": 1525093794, "answer_id": 50101278, "question_id": 50101029, "link": "https://stackoverflow.com/questions/50101029/how-can-i-skip-a-call-to-write-when-pattern-matching-for-fmtdisplay/50101278#50101278", "title": "How can I skip a call to write! when pattern matching for fmt::Display?", "body": "<p>Since the return type of <code>fmt</code> is <code>fmt::Result</code>, you just need to supply an empty <code>Ok(())</code> value in order for all the possible return values of <code>match</code> have the same type (and the code to compile):</p>\n\n<pre><code>impl fmt::Display for SomeEnum {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        use SomeEnum::*;\n\n        match *self {\n            A =&gt; write!(f, \"A\"),\n            B =&gt; write!(f, \"B\"),\n            C =&gt; Ok(()),\n        }\n    }\n}\n</code></pre>\n\n<p>An alternative would be to use <code>C =&gt; unreachable!()</code>, but this is a good idea only if you are certain that value will never need to be <code>Display</code>ed (otherwise it would cause a panic).</p>\n"}], "owner": {"reputation": 9581, "user_id": 807239, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/fcjpR.jpg?s=128&g=1", "display_name": "Daniel Ribeiro", "link": "https://stackoverflow.com/users/807239/daniel-ribeiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 34, "favorite_count": 0, "accepted_answer_id": 50101278, "answer_count": 1, "score": 0, "last_activity_date": 1525104958, "creation_date": 1525092953, "last_edit_date": 1525093980, "question_id": 50101029, "link": "https://stackoverflow.com/questions/50101029/how-can-i-skip-a-call-to-write-when-pattern-matching-for-fmtdisplay", "title": "How can I skip a call to write! when pattern matching for fmt::Display?", "body": "<p>Consider the following enum:</p>\n\n<pre><code>enum SomeEnum { A, B, C }\n</code></pre>\n\n<p>And the following <code>fmt::Display</code> implementation:</p>\n\n<pre><code>impl fmt::Display for SomeEnum {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        use SomeEnum::*;\n\n        match *self {\n            A =&gt; write!(f, \"A\"),\n            B =&gt; write!(f, \"B\"),\n            // I'm not interested in calling write! for C\n        }\n    }\n}\n</code></pre>\n\n<p>Is it possible to skip the <code>write!</code> function call for one particular enum value (in this case <code>C</code>) when pattern matching?</p>\n"}, {"tags": ["vector", "rust", "conways-game-of-life"], "comments": [{"owner": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 0, "creation_date": 1525091829, "post_id": 50100202, "comment_id": 87217863, "body": "Not an answer, but just a point: I would avoid if using \u2018if\u2019, and just let the loop assign 0s too. Unnecessary branch prediction invocation, and potentially non efficient vectorization, once it is a part of \u2018rust\u2019. Modern cpus are really good at moving memory, so I would expect that will be not slower, at least."}, {"owner": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1525100212, "post_id": 50100202, "comment_id": 87223110, "body": "@ljedrz thanks for edit, English is not my primary language haha."}, {"owner": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "reply_to_user": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 0, "creation_date": 1525100293, "post_id": 50100202, "comment_id": 87223162, "body": "@Tigran well, I&#39;m just interested in the indices where I should put a live cell, so assigning the 0s would just be noise afterwards for me."}], "answers": [{"comments": [{"owner": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "edited": false, "score": 0, "creation_date": 1525100519, "post_id": 50100917, "comment_id": 87223300, "body": "I think your macro is exactly what I need: syntactic sugar. Thanks! I&#39;ll be learning more macros too."}, {"owner": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "edited": false, "score": 0, "creation_date": 1525100708, "post_id": 50100917, "comment_id": 87223402, "body": "Regarding the second part of your answer, in which regards is your proposal an improvement ? Speed ? Memory usage ? Readability ?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "edited": false, "score": 1, "creation_date": 1525101997, "post_id": 50100917, "comment_id": 87224167, "body": "@DjebbZ it&#39;s more idiomatic and removes the need for bounds checking (better performance)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 6, "last_activity_date": 1525093269, "last_edit_date": 1525093269, "creation_date": 1525092493, "answer_id": 50100917, "question_id": 50100202, "link": "https://stackoverflow.com/questions/50100202/how-can-i-conveniently-convert-a-2-dimensional-array-into-a-2-dimensional-vector/50100917#50100917", "title": "How can I conveniently convert a 2-dimensional array into a 2-dimensional vector?", "body": "<p>Reducing the number of <code>vec!</code>s is possible with a custom <a href=\"https://doc.rust-lang.org/book/first-edition/macros.html\" rel=\"noreferrer\">macro</a>:</p>\n\n<pre><code>#[macro_export]\nmacro_rules! vec2d {\n    ($($i:expr),+) =&gt; { // handle numbers\n        {\n            let mut ret = Vec::new();\n            $(ret.push($i);)*\n            ret\n        }\n    };\n\n    ([$($arr:tt),+]) =&gt; { // handle sets\n        {\n            let mut ret = Vec::new();\n            $(ret.push(vec!($arr));)*\n            ret\n        }\n    };\n}\n\nfn main() {\n    let glider = vec2d![[0, 1, 0],\n                        [0, 0, 1],\n                        [1, 1, 1]];\n\n    let glider2 = vec2d![[0, 1, 0, 1],\n                         [0, 0, 1, 0],\n                         [1, 1, 1, 0],\n                         [0, 1, 1, 0]];\n\n\n    println!(\"{:?}\", glider);  // [[0, 1, 0], [0, 0, 1], [1, 1, 1]]\n    println!(\"{:?}\", glider2); // [[0, 1, 0, 1], [0, 0, 1, 0], [1, 1, 1, 0], [0, 1, 1, 0]]\n}\n</code></pre>\n\n<p>Your initial function could also use a bit of an improvement with the help of Rust's iterators:</p>\n\n<pre><code>fn make_ship(shape: Vec&lt;Vec&lt;u32&gt;&gt;) -&gt; Vec&lt;u32&gt; {\n    shape\n        .iter()\n        .enumerate()\n        .flat_map(|(row, v)| {\n            v.iter().enumerate().filter_map(move |(col, x)| {\n                if *x == 1 {\n                    Some(col as u32 + row as u32 * WIDTH)\n                } else {\n                    None\n                }\n            })\n        })\n        .collect()\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1525097391, "post_id": 50101128, "comment_id": 87221327, "body": "&quot;for productive use it may be more efficient to use an existing solution such as the ndarray crate.&quot; and efficiently <code>get()</code> is a heavy cost function and ndarray will have a lot of better way to iterate without always do a multiplication."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525099036, "post_id": 50101128, "comment_id": 87222401, "body": "@Stargateur yep, absolutely. Nothing prevents from creating our own optimized solutions, though. The question is how desperately one wants to reinvent the wheel :)"}, {"owner": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "edited": false, "score": 0, "creation_date": 1525100811, "post_id": 50101128, "comment_id": 87223460, "body": "Thank you @kazemakase, indeed I could use the ndarray crate (didn&#39;t know about it) but as I&#39;m learning I&#39;ll without additional tools."}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": false, "score": 5, "last_activity_date": 1525093253, "creation_date": 1525093253, "answer_id": 50101128, "question_id": 50100202, "link": "https://stackoverflow.com/questions/50100202/how-can-i-conveniently-convert-a-2-dimensional-array-into-a-2-dimensional-vector/50101128#50101128", "title": "How can I conveniently convert a 2-dimensional array into a 2-dimensional vector?", "body": "<p><code>Vec&lt;Vec&lt;_&gt;&gt;</code> is actually not a 2-dimensional vector but a \"vector of vectors\". This has major implications (assuming the outer vector is interpreted as rows, and the inner as columns):</p>\n\n<ol>\n<li>Rows can have different lengths. That is often not what you would want.</li>\n<li>Rows are individual objects, potentially scattered all over the heap memory.</li>\n<li>In order to access an element you have to follow two indirections.</li>\n</ol>\n\n<p>I would implement a 2-dimensional vector rather as a 1-dimensional vector with additional information regarding its dimensions. Something like: </p>\n\n<pre><code>struct Vec2D&lt;T&gt; {\n    n_rows: usize,  // number of rows\n    n_cols: usize,  // number of columns (redundant, since we know the length of data)\n    data: Vec&lt;T&gt;,   // data stored in a contiguous 1D array\n}\n</code></pre>\n\n<p>This struct can be initialized with </p>\n\n<pre><code>let glider = Vec2D {\n    n_rows: 3,\n    n_cols: 3,\n    data: vec![0, 1, 0, \n               0, 0, 1, \n               1, 1, 1],\n};\n</code></pre>\n\n<p>Or more conveniently with functions or macros that take arrays-of-arrays. (See <a href=\"https://stackoverflow.com/a/50100917/3005167\">@ljedrz's answer</a> for inspiration).</p>\n\n<p>To access an element in the struct you'd have to use a little bit of math to convert a 2D index into a 1D index:</p>\n\n<pre><code>impl&lt;T&gt; Vec2D&lt;T&gt; {\n    fn get(&amp;self, row: usize, col: usize) -&gt; &amp;T {\n         assert!(row &lt; self.n_rows);\n         assert!(col &lt; self.n_cols);\n         &amp;self.data[row * self.n_cols + col]\n    }\n}\n</code></pre>\n\n<p>While implementing your own 2-dimensional array type is a fun exercise, for productive use it may be more efficient to use an existing solution such as the <a href=\"https://docs.rs/ndarray/0.11.2/ndarray/index.html\" rel=\"noreferrer\">ndarray crate</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 2, "last_activity_date": 1525106713, "last_edit_date": 1525106713, "creation_date": 1525106279, "answer_id": 50104700, "question_id": 50100202, "link": "https://stackoverflow.com/questions/50100202/how-can-i-conveniently-convert-a-2-dimensional-array-into-a-2-dimensional-vector/50104700#50104700", "title": "How can I conveniently convert a 2-dimensional array into a 2-dimensional vector?", "body": "<p>Another solution is to transparently handle <code>Vec&lt;T&gt;</code> and <code>[T]</code> using <code>AsRef</code>:</p>\n\n<pre><code>fn make_ship&lt;T&gt;(shape: &amp;[T]) -&gt; Vec&lt;u32&gt;\nwhere\n    T: AsRef&lt;[u32]&gt;,\n{\n    let mut ship: Vec&lt;u32&gt; = Vec::new();\n\n    for row_idx in 0..shape.len() {\n        let row = shape[row_idx].as_ref();\n        for col_idx in 0..row.len() {\n            let cell = row[col_idx];\n            if cell == 1 {\n                ship.push(col_idx as u32 + row_idx as u32 * WIDTH);\n            }\n        }\n    }\n\n    ship\n}\n</code></pre>\n\n<p>This handles the following:</p>\n\n<pre><code>let glider = vec![vec![0, 1, 0], vec![0, 0, 1], vec![1, 1, 1]];\nlet glider = [[0, 1, 0], [0, 0, 1], [1, 1, 1]];\nlet glider = [vec![0, 1, 0], vec![0, 0, 1], vec![1, 1, 1]];\nlet glider = vec![[0, 1, 0], [0, 0, 1], [1, 1, 1]];\n</code></pre>\n\n<p>An even better solution is to not care about slices/vectors at all, and use iterators:</p>\n\n<pre><code>fn make_ship&lt;'a, T, U&gt;(shape: &amp;'a T) -&gt; Vec&lt;u32&gt;\nwhere\n    &amp;'a T: std::iter::IntoIterator&lt;Item = U&gt;,\n    U: std::iter::IntoIterator&lt;Item = &amp;'a u32&gt;,\n{\n    let mut ship: Vec&lt;u32&gt; = Vec::new();\n\n    for (row_idx, row) in shape.into_iter().enumerate() {\n        for (col_idx, &amp;cell) in row.into_iter().enumerate() {\n            if cell == 1 {\n                ship.push(col_idx as u32 + row_idx as u32 * WIDTH);\n            }\n        }\n    }\n\n    ship\n}\n</code></pre>\n\n<p>Which also handle the cases above, but could also handle a type such as @kazemakase's <code>Vec2D</code> if it provided such iterators.</p>\n"}], "owner": {"reputation": 1558, "user_id": 893242, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/31144f47759f9773f6297c1a9f734d44?s=128&d=identicon&r=PG", "display_name": "DjebbZ", "link": "https://stackoverflow.com/users/893242/djebbz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1423, "favorite_count": 0, "accepted_answer_id": 50100917, "answer_count": 3, "score": 3, "last_activity_date": 1525106713, "creation_date": 1525089987, "last_edit_date": 1525092814, "question_id": 50100202, "link": "https://stackoverflow.com/questions/50100202/how-can-i-conveniently-convert-a-2-dimensional-array-into-a-2-dimensional-vector", "title": "How can I conveniently convert a 2-dimensional array into a 2-dimensional vector?", "body": "<p>I'm following the <a href=\"https://rust-lang-nursery.github.io/rust-wasm/game-of-life/implementing.html\" rel=\"nofollow noreferrer\">Rust-wasm tutorial</a> and I want to be able to easily add a ship (a shape really) to the Universe in the game of life.</p>\n\n<p>As a first step, I'd like to convert a 2-dimensional array of <code>0</code> or <code>1</code> representing a shape into a vector of indices representing the coordinates of the shape in the Universe.</p>\n\n<p>I have a working piece of code but I'd like to make it a bit more user-friendly:</p>\n\n<pre><code>const WIDTH: u32 = 64;\nconst HEIGHT: u32 = 64;\n\n/// glider: [[0, 1, 0], [0, 0, 1], [1, 1, 1]]\nfn make_ship(shape: Vec&lt;Vec&lt;u32&gt;&gt;) -&gt; Vec&lt;u32&gt; {\n    let mut ship: Vec&lt;u32&gt; = Vec::new();\n\n    for row_idx in 0..shape.len() {\n        for col_idx in 0..shape[row_idx].len() {\n            let cell = shape[row_idx][col_idx];\n            if cell == 1 {\n                ship.push(col_idx as u32 + row_idx as u32 * WIDTH);\n            }\n        }\n    }\n\n    ship\n}\n\n#[test]\nfn glider() {\n    let glider  = vec![vec![0, 1, 0], vec![0, 0, 1], vec![1, 1, 1]];\n    println!(\"{:?}\", make_ship(glider));\n}\n</code></pre>\n\n<p>The <code>test</code> shows my problem: the verbosity of <code>vec!</code>s. Ideally I'd like to be able to write it without all the <code>vec!</code>. The code of <code>make_ship</code> shouldn't care about the size of the shape arrays. Ideal example:</p>\n\n<pre><code>let glider = [[0, 1, 0],\n              [0, 0, 1],\n              [1, 1, 1],];\n</code></pre>\n\n<p>The question is: how to express a shape nicely with simple arrays and have the function <code>make_ship</code> take 2-dimensional vectors of arbitrary size?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525075092, "post_id": 50093878, "comment_id": 87208646, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/26643688/how-to-split-a-string-in-rust\">How to split a string in Rust?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 206, "user_id": 8657995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6fc01302442a64f4627f579a81ca71e?s=128&d=identicon&r=PG&f=1", "display_name": "Ben Stern", "link": "https://stackoverflow.com/users/8657995/ben-stern"}, "is_accepted": false, "score": 4, "last_activity_date": 1525106342, "last_edit_date": 1525106342, "creation_date": 1525062065, "answer_id": 50093923, "question_id": 50093878, "link": "https://stackoverflow.com/questions/50093878/how-to-split-a-string-in-rust-with-multiple-parameters/50093923#50093923", "title": "How to split a string in Rust with multiple parameters?", "body": "<p>Use a closure:</p>\n\n<pre><code>let v: Vec&lt;&amp;str&gt; = \"Mary had a little lamb.\"\n    .split(|c| c == ',' || c == ' ')\n    .collect();\n</code></pre>\n\n<p>This is based upon the <a href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Alet%20v%3A%20Vec%3C%26str%3E%20%3D%20%22abc1defXghi%22.split(%7Cc%7C%20c%20%3D%3D%20%271%27%20%7C%7C%20c%20%3D%3D%20%27X%27).collect()%3B%0Aassert_eq!(v%2C%20%5B%22abc%22%2C%20%22def%22%2C%20%22ghi%22%5D)%3B%0A%7D\" rel=\"nofollow noreferrer\" title=\"Rust Docs\">String documentation</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 3, "last_activity_date": 1525083665, "last_edit_date": 1525083665, "creation_date": 1525078490, "answer_id": 50097096, "question_id": 50093878, "link": "https://stackoverflow.com/questions/50093878/how-to-split-a-string-in-rust-with-multiple-parameters/50097096#50097096", "title": "How to split a string in Rust with multiple parameters?", "body": "<p>Pass a slice with the <code>char</code>s to it:</p>\n\n<pre><code>fn main() {\n    let s = \"1,2 3\";\n    let v: Vec&lt;_&gt; = s.split([' ', ','].as_ref()).collect();\n\n    assert_eq!(v, [\"1\", \"2\", \"3\"]);\n}\n</code></pre>\n\n<p><code>split</code> takes an argument of type <code>Pattern</code>. To see what concretely you can pass as parameter, see <a href=\"https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html#implementors\" rel=\"nofollow noreferrer\">the implementors</a></p>\n"}], "owner": {"reputation": 31, "user_id": 9719609, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3727065eb9b5cfc1ea4f3c77a94ab68b?s=128&d=identicon&r=PG&f=1", "display_name": "Anon", "link": "https://stackoverflow.com/users/9719609/anon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2815, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1525106342, "creation_date": 1525061752, "last_edit_date": 1525106309, "question_id": 50093878, "link": "https://stackoverflow.com/questions/50093878/how-to-split-a-string-in-rust-with-multiple-parameters", "title": "How to split a string in Rust with multiple parameters?", "body": "<p>I am trying to split a string in Rust using both whitespace and <code>,</code>. I tried doing </p>\n\n<pre><code>let v: Vec&lt;&amp;str&gt; = \"Mary had a little lamb\".split_whitespace().collect(); \nlet c: Vec&lt;&amp;str&gt; = v.split(',').collect();\n</code></pre>\n\n<p>The result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'r&gt; char: std::ops::FnMut&lt;(&amp;'r &amp;str,)&gt;` is not satisfied\n --&gt; src/main.rs:3:26\n  |\n3 |     let c: Vec&lt;&amp;str&gt; = v.split(',').collect();\n  |                          ^^^^^ the trait `for&lt;'r&gt; std::ops::FnMut&lt;(&amp;'r &amp;str,)&gt;` is not implemented for `char`\n\nerror[E0599]: no method named `collect` found for type `std::slice::Split&lt;'_, &amp;str, char&gt;` in the current scope\n --&gt; src/main.rs:3:37\n  |\n3 |     let c: Vec&lt;&amp;str&gt; = v.split(',').collect();\n  |                                     ^^^^^^^\n  |\n  = note: the method `collect` exists but the following trait bounds were not satisfied:\n          `std::slice::Split&lt;'_, &amp;str, char&gt; : std::iter::Iterator`\n          `&amp;mut std::slice::Split&lt;'_, &amp;str, char&gt; : std::iter::Iterator`\n</code></pre>\n"}, {"tags": ["shell", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525044877, "post_id": 50091818, "comment_id": 87200791, "body": "What platforms are you limiting yourself to? Answers for Windows will probably be very different from Linux."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525047278, "post_id": 50091818, "comment_id": 87201224, "body": "There could be interesting read about &quot;how to do a shell&quot; as this doesn&#39;t really specific to rust you should maybe search how other shell do it. But you are doing in a long run. You want to write a shell. This is something that could take more that 4-5 months to do."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525048534, "post_id": 50091818, "comment_id": 87201476, "body": "<a href=\"https://crates.io/crates/rustyline\" rel=\"nofollow noreferrer\">Magic search term: &quot;readline&quot;</a> ?"}, {"owner": {"reputation": 13, "user_id": 9206036, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IdRXd.jpg?s=128&g=1", "display_name": "Louis Boulanger", "link": "https://stackoverflow.com/users/9206036/louis-boulanger"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525065309, "post_id": 50091818, "comment_id": 87204627, "body": "@trentcl Thanks for the link, I&#39;ll check this"}, {"owner": {"reputation": 13, "user_id": 9206036, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IdRXd.jpg?s=128&g=1", "display_name": "Louis Boulanger", "link": "https://stackoverflow.com/users/9206036/louis-boulanger"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525065562, "post_id": 50091818, "comment_id": 87204702, "body": "@Stargateur Sure, I know almost nothing about shells, and I was just doing a fun exercise to train on rust. I&#39;m definitely going to read some papers &amp; documentation on shells, this is very interesting. As for the original question, I&#39;ll surely find an answer while reading (and I&#39;m going to look also at trentcl&#39;s crate). Thanks for the suggestion and the edit !"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525095823, "post_id": 50091818, "comment_id": 87220372, "body": "I&#39;ll promote that comment to an answer, but if it&#39;s not what you&#39;re looking for, don&#39;t feel obligated to accept it."}, {"owner": {"reputation": 435, "user_id": 8213783, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8e647bbbc2204a07ae97c4538d6617d1?s=128&d=identicon&r=PG&f=1", "display_name": "Evan", "link": "https://stackoverflow.com/users/8213783/evan"}, "edited": false, "score": 0, "creation_date": 1613753845, "post_id": 50091818, "comment_id": 117182406, "body": "Just to add on to this for anyone else reading, the issue is that by default the operating system (i.e. Linux kernel) handles line editing for TTY input. It does this to make it easy to write simple CLI programs without needing to implement &quot;readline&quot; functionality in every application. If you don&#39;t want the kernel to handle input (i.e. you want to handle arrows yourself) then you have to disable the kernel&#39;s default behavior and use &quot;raw mode.&quot; You don&#39;t get anything for free from the kernel in raw mode, but you can use a library that implements the features you need instead."}], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 9206036, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IdRXd.jpg?s=128&g=1", "display_name": "Louis Boulanger", "link": "https://stackoverflow.com/users/9206036/louis-boulanger"}, "edited": false, "score": 0, "creation_date": 1525119308, "post_id": 50101806, "comment_id": 87232437, "body": "Thank you very much, rustyline is exactly what I needed. Next time I&#39;ll search more thoroughly."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 1, "last_activity_date": 1525095722, "creation_date": 1525095722, "answer_id": 50101806, "question_id": 50091818, "link": "https://stackoverflow.com/questions/50091818/is-there-another-way-to-handle-arrow-key-input-in-rust-besides-raw-mode/50101806#50101806", "title": "Is there another way to handle arrow key input in Rust besides raw mode?", "body": "<p>There are several crates that provide line editing features for interactive programs. Here are a few that I found by searching crates.io for \"readline\" (the name of a C library):</p>\n\n<ul>\n<li><a href=\"https://crates.io/crates/rustyline\" rel=\"nofollow noreferrer\">rustyline</a> seems to be the most popular on crates.io.</li>\n<li><a href=\"https://crates.io/crates/liner\" rel=\"nofollow noreferrer\">liner</a></li>\n<li><a href=\"https://crates.io/crates/linefeed\" rel=\"nofollow noreferrer\">linefeed</a></li>\n<li><a href=\"https://crates.io/crates/linenoise-rust\" rel=\"nofollow noreferrer\">linenoise-rust</a> is a set of Rust bindings to the <a href=\"https://github.com/antirez/linenoise\" rel=\"nofollow noreferrer\">linenoise</a> library written in C.</li>\n</ul>\n\n<p>I haven't used any of them, so this list is not a recommendation. Take a look at a few of them and choose one that suits your needs.</p>\n"}], "owner": {"reputation": 13, "user_id": 9206036, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IdRXd.jpg?s=128&g=1", "display_name": "Louis Boulanger", "link": "https://stackoverflow.com/users/9206036/louis-boulanger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1739, "favorite_count": 0, "accepted_answer_id": 50101806, "answer_count": 1, "score": 1, "last_activity_date": 1525095722, "creation_date": 1525040091, "last_edit_date": 1592644375, "question_id": 50091818, "link": "https://stackoverflow.com/questions/50091818/is-there-another-way-to-handle-arrow-key-input-in-rust-besides-raw-mode", "title": "Is there another way to handle arrow key input in Rust besides raw mode?", "body": "<p>I am writing a small shell in Rust on Linux as an exercise and I wanted to implement command history as well as cursor moving (i.e. moving back the cursor to edit a typo in the command).</p>\n<p>I did not find a way in the Rust standard library to handle arrow key events, but I found the <a href=\"https://github.com/ticki/termion\" rel=\"nofollow noreferrer\">Termion</a> crate which handles key events.</p>\n<p>However, handling key events with Termion means entering &quot;raw mode&quot; for stdout, which overrides &quot;legacy&quot; functionalities, as described in <a href=\"http://ticki.github.io/blog/making-terminal-applications-in-rust-with-termion/\" rel=\"nofollow noreferrer\">this article about the crate</a>:</p>\n<blockquote>\n<p>Without raw mode, you cannot write a proper interactive TTY application. Raw mode gives you complete control over the TTY:</p>\n<ol>\n<li>It disables the line buffering: As you might notice, your command-line application tends to behave like the command-line. The programs will first get the input when the user types \\n. Raw mode makes the program get the input after every key stroke.</li>\n<li>It disables displaying the input: Without raw mode, the things you type appear on the screen, making it insufficient for most interactive TTY applications, where keys can represent controls and not textual input.</li>\n<li>It disables canonicalization of the output: For example, \\n represents \u201cgo one cell down\u201d not \u201cbreak the line\u201d, for line breaks \\n\\r is needed.</li>\n<li>It disables scrolling.</li>\n</ol>\n</blockquote>\n<p>I find this solution a bit overkill, as I want to retain most of the &quot;legacy&quot; I/O functionalities. Is there another way to handle arrow key input, or will I need to use the raw mode?</p>\n"}, {"tags": ["rust", "pattern-matching"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525036966, "post_id": 50091227, "comment_id": 87199096, "body": "I believe your question is already answered by <a href=\"https://stackoverflow.com/q/42793606/155423\">How can I store a pattern in a variable in Rust?</a>. (TL;DR: no). If you disagree, please <a href=\"https://stackoverflow.com/posts/50091227/edit\">edit</a> your question to explain how this differs from that Q&amp;A. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525037051, "post_id": 50091227, "comment_id": 87199119, "body": "You may also be interested in <a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a>."}, {"owner": {"reputation": 586, "user_id": 2738247, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wBoWJzL5n2I/AAAAAAAAAAI/AAAAAAAAADg/lEWJ2PPAVT8/photo.jpg?sz=128", "display_name": "robertohuertasm", "link": "https://stackoverflow.com/users/2738247/robertohuertasm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1525038123, "post_id": 50091227, "comment_id": 87199362, "body": "@Shepmaster thank you very much for the information you provided. Both links are superuseful and have answered my question. We can mark, indeed, this question as already answered."}], "owner": {"reputation": 586, "user_id": 2738247, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wBoWJzL5n2I/AAAAAAAAAAI/AAAAAAAAADg/lEWJ2PPAVT8/photo.jpg?sz=128", "display_name": "robertohuertasm", "link": "https://stackoverflow.com/users/2738247/robertohuertasm"}, "delete_vote_count": 1, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 443, "favorite_count": 0, "closed_date": 1525038174, "answer_count": 0, "score": 2, "last_activity_date": 1525036768, "creation_date": 1525035483, "last_edit_date": 1525036768, "question_id": 50091227, "link": "https://stackoverflow.com/questions/50091227/is-it-possible-to-pass-patterns-as-function-arguments-in-rust", "closed_reason": "Duplicate", "title": "Is it possible to pass patterns as function arguments in Rust?", "body": "<p>My idea is to filter some elements depending on some pattern matching: </p>\n\n<pre><code>pub struct NodeHeading {\n    pub level: u32,\n    pub setext: bool,\n}\n\npub enum NodeValue {\n    Document,\n    Heading(NodeHeading),\n}\n\nfn main() {\n    // let's suppose that nodes variable is already defined\n    let headings = find_headings(&amp;nodes, \u00bfEXPRESSION_HERE?);\n\n    // for convenience, I won't declare lifetimes in this example\n    pub fn find_headings(\n        nodes: &amp;Vec&lt;&amp;AstNode&gt;,\n        expr: \u00bfWHAT_TYPE_HERE?,\n    ) -&gt; Vec&lt;&amp;AstNode&gt; {\n        let headings: Vec&lt;&amp;AstNode&gt; = nodes\n            .into_iter()\n            .filter(|x| match x {\n                expr =&gt; true,\n                _ =&gt; false,\n            })\n            .collect();\n        headings\n    }\n}\n</code></pre>\n\n<p>Can this pattern be used dynamically? Could it arrive as an argument to the  <code>find_headings</code> function? I haven't found anything related to this so I guess the answer will be no.</p>\n\n<p>If it is possible, what is the correct type? </p>\n"}, {"tags": ["generics", "rust", "constraints", "traits", "serde"], "answers": [{"comments": [{"owner": {"reputation": 299, "user_id": 5530681, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/191a05a541d383f20c693e55c39fd67c?s=128&d=identicon&r=PG&f=1", "display_name": "corvus_192", "link": "https://stackoverflow.com/users/5530681/corvus-192"}, "edited": false, "score": 0, "creation_date": 1525034730, "post_id": 50090726, "comment_id": 87198441, "body": "Thank you, I didn&#39;t know you could <code>Self</code> in that case. But it doesn&#39;t seem to work as I expected. I have this function: <code>fn test&lt;I: Bar&gt;(t: I::T) -&gt; String { serde_json::to_string(&amp;t).unwrap() }</code>. Compilation fails with &quot;the trait <code>for&lt;&#39;a&gt; DeserializeOwned</code> is not implemented for <code>&amp;&#39;a &lt;I as Bar&gt;::T</code>&quot;. I think that by requiring that t is a I::T, there must be a DeserializeOwned for &amp;&#39;a t forall &#39;a. Am I misunderstanding something?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 299, "user_id": 5530681, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/191a05a541d383f20c693e55c39fd67c?s=128&d=identicon&r=PG&f=1", "display_name": "corvus_192", "link": "https://stackoverflow.com/users/5530681/corvus-192"}, "edited": false, "score": 0, "creation_date": 1525035583, "post_id": 50090726, "comment_id": 87198692, "body": "@corvus_192 I think that&#39;s because there&#39;s no <code>I</code> in the signature of <code>test</code> for the compiler to see. You could implement multiple types <code>I</code> for which <code>&lt;I as Bar&gt;::T</code> was the same thing, right?"}, {"owner": {"reputation": 299, "user_id": 5530681, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/191a05a541d383f20c693e55c39fd67c?s=128&d=identicon&r=PG&f=1", "display_name": "corvus_192", "link": "https://stackoverflow.com/users/5530681/corvus-192"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525036429, "post_id": 50090726, "comment_id": 87198918, "body": "@trentcl In my case there&#39;s only one implementation of Bar, but there could obviously be more than one. Why does it matter, as long as every implementation provides a type T that satisfies the given bounds?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 299, "user_id": 5530681, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/191a05a541d383f20c693e55c39fd67c?s=128&d=identicon&r=PG&f=1", "display_name": "corvus_192", "link": "https://stackoverflow.com/users/5530681/corvus-192"}, "edited": false, "score": 0, "creation_date": 1525044147, "post_id": 50090726, "comment_id": 87200613, "body": "@corvus_192 The compiler is not very good at proving universal propositions. A signature like <code>fn test&lt;I: Bar&gt;(t: I::T) -&gt; String</code> implies that you could pick <i>any</i> <code>I</code> that implements <code>Bar</code>, and the compiler has to prove that there is a <code>DeserializeOwned</code> impl for <i>every</i> <code>I</code> where <code>&lt;I as Bar&gt;::T</code> is whatever the type of <code>t</code> actually is. I&#39;m doing a poor job of explaining. Point is, it&#39;s logically sound, but the compiler can&#39;t <i>prove</i> that there isn&#39;t some <code>I</code> for which <code>&amp;&lt;I as Bar&gt;::T</code> <i>doesn&#39;t</i> implement <code>DeserializeOwned</code>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525046064, "post_id": 50090726, "comment_id": 87201022, "body": "The upshot of all this is that you have to duplicate the bound <code>for&lt;&#39;a&gt; &amp;&#39;a I::T: DeserializeOwned</code> on <code>test</code> because just having it on <code>Bar</code> is not sufficient. <a href=\"https://play.rust-lang.org/?gist=f57f3c86590f5b1950f20f6f2d8e4235&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">example</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1528561449, "last_edit_date": 1528561449, "creation_date": 1525031959, "answer_id": 50090726, "question_id": 50090578, "link": "https://stackoverflow.com/questions/50090578/how-to-write-a-trait-bound-for-a-reference-to-an-associated-type-on-the-trait-it/50090726#50090726", "title": "How to write a trait bound for a reference to an associated type on the trait itself?", "body": "<p>The \"correct\" solution is to place the bounds on the trait, but referencing the associated type. In this case, you can also use <a href=\"https://stackoverflow.com/q/35592750/155423\">higher ranked trait bounds</a> to handle the reference:</p>\n\n<pre><code>trait Bar\nwhere\n    Self::T: Serialize,\n//  ^^^^^^^ Bounds on an associated type  \n    for&lt;'a&gt; &amp;'a Self::T: DeserializeOwned,\n//  ^^^^^^^^^^^ Higher-ranked trait bounds       \n{\n    type T;\n}\n</code></pre>\n\n<p>However, this doesn't work yet.</p>\n\n<p>I believe that you will need to either:</p>\n\n<ul>\n<li>wait for <a href=\"https://github.com/rust-lang/rust/issues/20671\" rel=\"nofollow noreferrer\">issue 20671</a> and/or <a href=\"https://github.com/rust-lang/rust/issues/50346\" rel=\"nofollow noreferrer\">issue 50346</a> to be fixed. </li>\n<li>wait for the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\"><em>generic associated types</em></a> feature which introduces <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md#where-clauses-on-associated-types\" rel=\"nofollow noreferrer\"><code>where</code> clauses on associated types</a>.</li>\n</ul>\n\n<p>In the meantime, the workaround is to duplicate the bound everywhere it's needed:</p>\n\n<pre><code>fn test&lt;I: Bar&gt;(t: I::T) -&gt; String\nwhere\n    for&lt;'a&gt; &amp;'a I::T: DeserializeOwned,\n{\n    serde_json::to_string(&amp;t).unwrap()\n}\n</code></pre>\n"}], "owner": {"reputation": 299, "user_id": 5530681, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/191a05a541d383f20c693e55c39fd67c?s=128&d=identicon&r=PG&f=1", "display_name": "corvus_192", "link": "https://stackoverflow.com/users/5530681/corvus-192"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 652, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1538858279, "creation_date": 1525030980, "last_edit_date": 1538858279, "question_id": 50090578, "link": "https://stackoverflow.com/questions/50090578/how-to-write-a-trait-bound-for-a-reference-to-an-associated-type-on-the-trait-it", "title": "How to write a trait bound for a reference to an associated type on the trait itself?", "body": "<p>I have this code:</p>\n\n<pre><code>extern crate serde;\n\nuse serde::de::DeserializeOwned;\nuse serde::Serialize;\n\ntrait Bar&lt;'a, T: 'a&gt;\nwhere\n    T: Serialize,\n    &amp;'a T: DeserializeOwned,\n{\n}\n</code></pre>\n\n<p>I would like to write this using an associated type, because the type <code>T</code> is unimportant to the users of this type. I got this far:</p>\n\n<pre><code>trait Bar {\n    type T: Serialize;\n}\n</code></pre>\n\n<p>I cannot figure out how to specify the other bound.</p>\n\n<p>Ultimately, I want to use a function like this:</p>\n\n<pre><code>extern crate serde_json;\n\nfn test&lt;I: Bar&gt;(t: I::T) -&gt; String {\n    serde_json::to_string(&amp;t).unwrap()\n}\n</code></pre>\n"}, {"tags": ["reference", "rust", "immutability", "mutable", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1525034035, "post_id": 50090553, "comment_id": 87198223, "body": "I believe your question is already answered by <a href=\"https://stackoverflow.com/q/32165917/155423\">Why does linking lifetimes matter only with mutable references?</a>. If not that, <a href=\"https://stackoverflow.com/q/44081272/155423\">How to resolve lifetime error for mutable reference in Rust?</a> or <a href=\"https://stackoverflow.com/q/34568157/155423\">Mutable versus immutable lifetime</a> are likely to answer it. Please <a href=\"https://stackoverflow.com/posts/50090553/edit\">edit</a> your question to explain why it is different from these existing questions. If it&#39;s not, we can mark this as already answered."}], "answers": [{"comments": [{"owner": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 0, "creation_date": 1565416641, "post_id": 50105958, "comment_id": 101356235, "body": "Thanks for the answer. &quot;If the inner reference is immutable the compiler is assured that no memory issues can arise for narrowing the lifetime scope.&quot;. What do you mean by &quot;narrowing the lifetime scope&quot;? Shouldn&#39;t self.x has the lifetime of the f instance? Which variable&#39;s lifetime scope is narrowed?"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 0, "creation_date": 1565448728, "post_id": 50105958, "comment_id": 101362358, "body": "<code>self.x</code> (intending the lifetime of reference self.x is pointing) and a reference to a <code>Foo</code>  as the &amp;self argument of <code>Foo::x(&amp;mut self)</code> may have different lifetimes. See my update for the meaning about narrowing the lifetime scope, I hope it may be more clearer."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1565448663, "last_edit_date": 1565448663, "creation_date": 1525111804, "answer_id": 50105958, "question_id": 50090553, "link": "https://stackoverflow.com/questions/50090553/mutable-reference-lifetime-vs-immutable-reference-lifetime/50105958#50105958", "title": "Mutable reference lifetime vs immutable reference lifetime", "body": "<p>The lifetime aspects of immutable and mutable references has already been covered in varius places:\nsee comments to the question and references embedded in the answer.</p>\n\n<p>I write here some notes focusing on this specific case with the hope to shed some light on the difficult concept of Rust lifetimes\n(At least for me it is difficult).</p>\n\n<p>Consider this snippet, a simplified version that exposes the same problem of the question:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a mut i32,\n}\n\nimpl&lt;'b&gt; Foo&lt;'b&gt; {\n    fn x(&amp;mut self) -&gt; &amp;'b mut i32 { self.x }\n}\n\nfn main() {\n    let y = &amp;mut 5;              // &lt;- 'a(1)\n    let mut f = Foo { x: y };    //    'a(1) &lt;- 'b(2)\n    println!(\"x is: {}\", f.x()); //    'a(1)    'b(2) &lt;- 'anonymous(3)\n}\n</code></pre>\n\n<p>Here there are three lifetime at play:</p>\n\n<ul>\n<li><code>'a(1)</code> lifetime of y value of type <code>&amp;mut i32</code></li>\n<li><code>'b(2)</code> lifetime of f value of type <code>Foo</code></li>\n<li><code>'anonymous(3)</code> lifetime assigned by the compiler to <code>&amp;self</code> reference because no explicit lifetime value is assigned to <code>&amp;self</code> in <code>fn x(&amp;mut self) -&gt; &amp;'b i32</code> method.</li>\n</ul>\n\n<p>In the docs usually lifetime generics on <code>struct</code> and <code>impl</code> are annotated with the same letter:\nIn this example I have annotated the <code>struct</code> lifetime generic with <code>'a</code> and the <code>impl</code> with <code>'b</code> to evidentiate that the concrete lifetimes generated by the compiler are associated to two different span.</p>\n\n<p>See the comments in the example code above to get a visual representation.</p>\n\n<p>If we try to compile we get:</p>\n\n<pre><code>error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n --&gt; src/main.rs:6:30\n  |\n6 |     fn x(&amp;self) -&gt; &amp;'b i32 { self.x }\n  |                              ^^^^^^\n  |\nnote: ...the reference is valid for the lifetime 'b as defined on the impl at 5:1...\n --&gt; src/main.rs:5:1\n  |\n5 | impl&lt;'b&gt; Foo&lt;'b&gt; {\n  | ^^^^^^^^^^^^^^^^\nnote: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on     the method body at 6:5\n --&gt; src/main.rs:6:5\n  |\n6 |     fn x(&amp;self) -&gt; &amp;'b i32 { self.x }\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>We see that the <code>'anonymous</code> lifetime is narrower that <code>'b</code> (see \"approssimate\" lifetime visualization in code comment): the borrowed content <code>self.x</code> does not live enough to satisfy rust safety rules.</p>\n\n<p>Now it is clear that the solution should be to reduce lifetimes with explicit annotation or better with the support of <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">elision</a> rule:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a mut i32,\n}\n\nimpl&lt;'b&gt; Foo&lt;'b&gt; {\n    fn x(&amp;mut self) -&gt; &amp;mut i32 { self.x }\n}\n\nfn main() {\n    let y = &amp;mut 5;              // &lt;- 'a\n    let mut f = Foo { x: y };    //    'a &lt;- 'b\n    println!(\"x is: {}\", f.x()); //    'a    'b\n}\n</code></pre>\n\n<p>Now the snippet compiles, and the lesson learned here should be a phrase copied from\nthis <a href=\"https://stackoverflow.com/a/44081506/3356777\">answer</a>:</p>\n\n<blockquote>\n  <p>A rule of thumb: don't just spam a single lifetime everywhere. Only use the same lifetime for things that should be the same</p>\n</blockquote>\n\n<h1>Immutable reference</h1>\n\n<p>Ok, but why if <code>Foo::x</code> is an immutable reference the compiler does not throw an error?</p>\n\n<p>The short answer is:</p>\n\n<p>If the inner reference is immutable the compiler is assured that no memory issues can arise for narrowing the lifetime scope.</p>\n\n<p>Instead compiler prevents different lifetimes span in case of inner mutability (in this case prevents <code>'anonymous</code> != <code>'b</code>) because\nif lifetime of reference to <code>Foo</code> (<code>&amp;mut self</code>) and of reference to <code>&amp;mut i32</code> (<code>self.x</code>) are not equals an invalid memory status could happen.</p>\n\n<p>To help make sense of what may happen with inner reference mutability and lifetime narrowing consider this invalid\nrust snippet:</p>\n\n<pre><code>let mut my_ref: &amp;mut i32 = &amp;mut 1;\nlet mut f = Foo { x: my_ref }; \n{                                 | &lt;--- narrowed lifetime scope\n    let y = &amp;mut 5;               |\n    f.x = y;                      |\n}                                 | &lt;---\n// ERROR: invoking f.x() when self.x is no more valid!\nf.x();\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/a/32172407/3356777\">this answer</a> for more details.</p>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 647, "favorite_count": 0, "closed_date": 1525113377, "answer_count": 1, "score": 3, "last_activity_date": 1565448663, "creation_date": 1525030743, "last_edit_date": 1525030957, "question_id": 50090553, "link": "https://stackoverflow.com/questions/50090553/mutable-reference-lifetime-vs-immutable-reference-lifetime", "closed_reason": "Duplicate", "title": "Mutable reference lifetime vs immutable reference lifetime", "body": "<p>I have the following code:</p>\n\n<pre><code>struct Bar&lt;T&gt; {\n    k: [T; 10],\n}\n\nimpl&lt;T&gt; Bar&lt;T&gt; {\n    fn thing(&amp;self, i: usize) -&gt; &amp;T {\n        &amp;self.k[i]\n    }\n\n    fn thing_mut(&amp;mut self, i: usize) -&gt; &amp;mut T {\n        &amp;mut self.k[i]\n    }\n}\n\nstruct Foo&lt;'a, T: 'a&gt; {\n    bar: &amp;'a Bar&lt;T&gt;,\n    count: usize,\n}\n\nimpl&lt;'a, T&gt; Foo&lt;'a, T&gt; {\n    fn get(&amp;mut self) -&gt; Option&lt;&amp;'a T&gt; {\n        if self.count &lt; 10 {\n            let thing = self.bar.thing(self.count);\n            self.count += 1;\n            Some(thing)\n        } else {\n            None\n        }\n    }\n}\n\nstruct FooMut&lt;'a, T: 'a&gt; {\n    bar: &amp;'a mut Bar&lt;T&gt;,\n    count: usize,\n}\n\nimpl&lt;'a, T&gt; FooMut&lt;'a, T&gt; {\n    fn get(&amp;mut self) -&gt; Option&lt;&amp;'a mut T&gt; {\n        if self.count &lt; 10 {\n            let thing = self.bar.thing_mut(self.count);\n            self.count += 1;\n            Some(thing)\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ab83b0d9375304766376d76f23b63c2a&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Rust playground</a></p>\n\n<p><code>Foo</code> compiles, but <code>FooMut</code> does not:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src/main.rs:40:34\n   |\n40 |             let thing = self.bar.thing_mut(self.count);\n   |                                  ^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 38:5...\n  --&gt; src/main.rs:38:5\n   |\n38 | /     fn get(&amp;mut self) -&gt; Option&lt;&amp;'a mut T&gt; {\n39 | |         if self.count &lt; 10 {\n40 | |             let thing = self.bar.thing_mut(self.count);\n41 | |             self.count += 1;\n...  |\n45 | |         }\n46 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:40:25\n   |\n40 |             let thing = self.bar.thing_mut(self.count);\n   |                         ^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 37:1...\n  --&gt; src/main.rs:37:1\n   |\n37 | impl&lt;'a, T&gt; FooMut&lt;'a, T&gt; {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: ...so that the expression is assignable:\n           expected std::option::Option&lt;&amp;'a mut T&gt;\n              found std::option::Option&lt;&amp;mut T&gt;\n</code></pre>\n\n<p>Why does the immutable one compile just fine, but not the mutable one? Is there some lifetime annotation I am missing in the <code>FooMut</code> case? I have seen plenty of answers for lifetimes and references, but I am specifically asking in this case about the mutable vs non-mutable case.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 425, "user_id": 5121473, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/aa9d868f483d009d99b436bee2814dbe?s=128&d=identicon&r=PG", "display_name": "Alexander Mattoni", "link": "https://stackoverflow.com/users/5121473/alexander-mattoni"}, "edited": false, "score": 0, "creation_date": 1525029105, "post_id": 50090290, "comment_id": 87196749, "body": "That makes sense, but when creating a struct that has those Option parameters, it complains when initiating a struct if you leave those optional fields out. If I&#39;m creating a type to describe all possible CSS styles like <code>background-color</code>, it&#39;d be impossible to use because you&#39;d need to list each field you&#39;re not using as well (in which case there could be hundreds)."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 425, "user_id": 5121473, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/aa9d868f483d009d99b436bee2814dbe?s=128&d=identicon&r=PG", "display_name": "Alexander Mattoni", "link": "https://stackoverflow.com/users/5121473/alexander-mattoni"}, "edited": false, "score": 0, "creation_date": 1525029368, "post_id": 50090290, "comment_id": 87196832, "body": "@AlexanderMattoni <code>Default</code> might help, I&#39;ve added example of it to the answer."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525033267, "post_id": 50090290, "comment_id": 87197978, "body": "I&#39;m not a JS guy, but I don&#39;t think you&#39;re using the term &quot;bottom&quot; correctly. <code>null</code> is a value, not a type, right?"}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 2, "last_activity_date": 1525036202, "last_edit_date": 1525036202, "creation_date": 1525028827, "answer_id": 50090290, "question_id": 50089945, "link": "https://stackoverflow.com/questions/50089945/what-is-the-rust-equivalent-of-a-typescript-hashmap-with-optional-typed-values-f/50090290#50090290", "title": "What is the Rust equivalent of a TypeScript hashmap with optional typed values for specific keys?", "body": "<p>TypeScript and JavaScript has two <a href=\"https://en.wikipedia.org/wiki/Nullable_type\" rel=\"nofollow noreferrer\">nullable types</a>: <code>null</code> and <code>undefined</code>.</p>\n\n<p>Most other languages initially didn't, because it's not a clear-cut win to have the two option types (cf. <a href=\"https://www.youtube.com/watch?v=PSGEjv3Tqo0&amp;feature=youtu.be&amp;t=9m21s\" rel=\"nofollow noreferrer\">https://www.youtube.com/watch?v=PSGEjv3Tqo0&amp;feature=youtu.be&amp;t=9m21s</a> from <a href=\"https://basarat.gitbooks.io/typescript/docs/javascript/null-undefined.html\" rel=\"nofollow noreferrer\">https://basarat.gitbooks.io/typescript/docs/javascript/null-undefined.html</a>; <a href=\"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined\" rel=\"nofollow noreferrer\">https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined</a>).</p>\n\n<p>In Rust you'd use the <a href=\"https://doc.rust-lang.org/book/first-edition/error-handling.html#the-option-type\" rel=\"nofollow noreferrer\"><code>Option</code></a> instead, which (most of the time) corresponds to both the <code>null</code> and <code>undefined</code> of JavaScript and TypeScript.</p>\n\n<pre><code>struct Example {\n    value1: String,\n    optional: Option&lt;i64&gt;,\n    value3: Option&lt;String&gt;\n}\n</code></pre>\n\n<p>P.S. In order to specify just the fields you want to specify, and leave all the other fields at <code>None</code>, you can tell the language to implement the <a href=\"https://doc.rust-lang.org/std/default/trait.Default.html\" rel=\"nofollow noreferrer\"><code>Default</code></a> for the struct:</p>\n\n<pre><code>#[derive(Default)]\nstruct Example {\n    value1: String,\n    optional: Option&lt;i64&gt;,\n    value3: Option&lt;String&gt;\n}\n\nfn new_example() -&gt; Example {\n    Example {\n        value1: \"foobar\".into(),\n        ..Default::default()\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 425, "user_id": 5121473, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/aa9d868f483d009d99b436bee2814dbe?s=128&d=identicon&r=PG", "display_name": "Alexander Mattoni", "link": "https://stackoverflow.com/users/5121473/alexander-mattoni"}, "edited": false, "score": 0, "creation_date": 1525029833, "post_id": 50090407, "comment_id": 87196964, "body": "Wow thanks for the in-depth answer. The macro syntax is extremely foreign to me but I&#39;ll give it a look. That is much closer to what I wanted to do. I&#39;ll start down this path and see how it goes. It&#39;s very exciting, and the thought of not having to touch javascript again is extremely appealing :)."}, {"owner": {"reputation": 425, "user_id": 5121473, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/aa9d868f483d009d99b436bee2814dbe?s=128&d=identicon&r=PG", "display_name": "Alexander Mattoni", "link": "https://stackoverflow.com/users/5121473/alexander-mattoni"}, "edited": false, "score": 0, "creation_date": 1525029954, "post_id": 50090407, "comment_id": 87197007, "body": "As an aside, free-style allows arbitrary CSS selector keys, i.e. <code>&amp; &gt;div::hover</code> etc. What do you think is the best way to approach that in a library like this for Rust?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 425, "user_id": 5121473, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/aa9d868f483d009d99b436bee2814dbe?s=128&d=identicon&r=PG", "display_name": "Alexander Mattoni", "link": "https://stackoverflow.com/users/5121473/alexander-mattoni"}, "edited": false, "score": 0, "creation_date": 1525032184, "post_id": 50090407, "comment_id": 87197647, "body": "@AlexanderMattoni I can&#39;t answer that because nowhere in this question are any selectors referenced, so I don&#39;t begin to have the context needed to provide anything useful."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1525031099, "last_edit_date": 1525031099, "creation_date": 1525029572, "answer_id": 50090407, "question_id": 50089945, "link": "https://stackoverflow.com/questions/50089945/what-is-the-rust-equivalent-of-a-typescript-hashmap-with-optional-typed-values-f/50090407#50090407", "title": "What is the Rust equivalent of a TypeScript hashmap with optional typed values for specific keys?", "body": "<p>That's not the usecase for <code>HashMaps</code> in Rust. A <code>HashMap</code> has keys that are unknown at compile time, which is not what you want here. Structs have a fixed set of known keys, while enums have a fixed set of possibilities.</p>\n\n<p>The direct translation of your code creates a struct and an enum, using <code>Option</code> to denote the optional fields:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Example {\n    value1: String,\n    optional: Option&lt;i32&gt;,\n    value3: Option&lt;Value3Values&gt;,\n}\n\n#[derive(Debug)]\nenum Value3Values {\n    Hello,\n    Goodbye,\n}\n</code></pre>\n\n<p>While serviceable, this can be <em>annoying</em> to construct compared to what you are used to:</p>\n\n<pre><code>Example {\n    value1: String::from(\"hello\"),\n    optional: None,\n    value3: Some(Value3Values::Goodbye),\n}\n</code></pre>\n\n<p>We can apply some steps to improve it. Using <code>Default</code> plus the <em>struct literal update syntax</em> makes all the default values easier:</p>\n\n<pre><code>#[derive(Debug, Default)]\nstruct Example { /* ... */ }\n</code></pre>\n\n\n\n<pre><code>Example {\n    value1: String::from(\"hello\"),\n    value3: Some(Value3Values::Goodbye),\n    ..Example::default()\n}\n</code></pre>\n\n<p>You can then also apply the <code>Into</code> / <code>From</code> traits to remove some of the conversion:</p>\n\n<pre><code>Example {\n    value1: \"hello\".into(),\n    value3: Value3Values::Goodbye.into(),\n    ..Example::default()\n}\n</code></pre>\n\n<p>And you can wrap it up in a macro to avoid the repetition:</p>\n\n<pre><code>macro_rules! thing {\n    ($t:ident, { $( $name:ident : $val:expr ),*, }) =&gt; (\n        $t {\n            $( $name: Into::into($val) ),*,\n            .. $t::default()\n        }\n    );\n}\n\nfn main() {\n    thing!(Example, {\n        value1: \"hello\",\n    });\n\n    thing!(Example, {\n        value1: \"hello\",\n        optional: 32,\n    });\n\n    thing!(Example, {\n        value1: \"hello\",\n        value3: Value3Values::Hello,\n    });\n\n    thing!(Example, {\n        value1: \"hello\",\n        optional: 32,\n        value3: Value3Values::Hello,\n    });\n}\n</code></pre>\n\n<p>There are even ways to use string literals for <code>value3</code>, but I'd avoid it. \"Stringly-typed\" APIs are annoying. </p>\n\n<pre><code>macro_rules! value3 {\n    (\"hello\") =&gt; (Value3Values::Hello);\n    (\"goodbye\") =&gt; (Value3Values::Goodbye);\n}\n\nfn main() {\n    thing!(Example, {\n        value1: \"hello\",\n        value3: value3!(\"hello\"),\n    });\n\n    thing!(Example, {\n        value1: \"hello\",\n        optional: 32,\n        value3: value3!(\"goodbye\"),\n    });\n}\n</code></pre>\n\n<p>There may even be cleverer macro tricks to avoid needing to call the macro <code>value3!</code> inside <code>thing!</code>.</p>\n\n<hr>\n\n<p>A <em>very</em> advanced technique would be to use a <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"nofollow noreferrer\"><em>build script</em></a> to generate custom macros for every set of CSS attributes, perhaps using the <a href=\"https://developer.mozilla.org/en-US/docs/MDN/Contribute/Howto/Update_the_CSS_JSON_DB\" rel=\"nofollow noreferrer\">MDN CSS JSON DB</a>. You'd end up with something like:</p>\n\n<pre><code>macro_rules! example {\n    ( $( $name:ident : $val:tt ),*, ) =&gt; (\n        Example {\n            $( $name: example!(field @ $name : $val) ),*,\n            .. Example::default()\n        }\n    );\n\n    // Internal details\n    ( field @ value1 : $val:expr ) =&gt; (Into::into($val));\n    ( field @ optional : $val:expr ) =&gt; (Into::into($val));\n    ( field @ value3 : hello ) =&gt; (Some(Value3Values::Hello));\n    ( field @ value3 : goodbye ) =&gt; (Some(Value3Values::Goodbye));\n    ( field @ value3 : $val:expr ) =&gt; (\n        compile_error!(r#\"value3 can only be \"hello\" or \"goodbye\"\"#)\n    );\n}\n\nfn main() {\n    example! {\n        value1: \"name\",\n    };\n\n    example! {\n        optional: 42,\n    };\n\n    example! {\n        value1: \"name\",\n        value3: hello,\n    };\n\n    example! {\n        value1: \"name\",\n        optional: 42,\n        value3: goodbye,\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 425, "user_id": 5121473, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/aa9d868f483d009d99b436bee2814dbe?s=128&d=identicon&r=PG", "display_name": "Alexander Mattoni", "link": "https://stackoverflow.com/users/5121473/alexander-mattoni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 384, "favorite_count": 0, "accepted_answer_id": 50090407, "answer_count": 2, "score": 1, "last_activity_date": 1525036202, "creation_date": 1525026755, "last_edit_date": 1525027610, "question_id": 50089945, "link": "https://stackoverflow.com/questions/50089945/what-is-the-rust-equivalent-of-a-typescript-hashmap-with-optional-typed-values-f", "title": "What is the Rust equivalent of a TypeScript hashmap with optional typed values for specific keys?", "body": "<p>I want to be able to have a data structure that can have keys with specific types (like a Rust struct) but may have optional values that don't need to exist (like a <code>HashMap</code>). Is there a data type that is halfway between both? What's the best way to approach this? </p>\n\n<p>I'm learning Rust, but use TypeScript on a daily basis. I know that the two type systems are different, I'm just trying to achieve something similar. In TypeScript, I can do:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>interface Example {\n  value1: string;\n  optional?: number;\n  value3?: \"hello\" | \"goodbye\";\n}\n</code></pre>\n\n<p>and when creating an object to match it:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const obj: Example = {\n  value1: \"this works\"\n}\n</code></pre>\n\n<p>I'm exploring contributing to <a href=\"https://github.com/DenisKolodin/yew\" rel=\"nofollow noreferrer\">DenisKolodin/yew</a> and the first thing I wanted to try my hand at was a <a href=\"https://github.com/blakeembrey/free-style\" rel=\"nofollow noreferrer\">free-style</a> implementation in an idiomatic Rust way. Being able to declare styles in a struct with specific enum types (\"flex\", \"block\" etc) but not require each possible style/CSS selector is key to this kind of library. </p>\n\n<p>Any and all examples are welcome.</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 12952, "user_id": 2398375, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1a5530da29f23682b10bb5568076f83d?s=128&d=identicon&r=PG", "display_name": "Dioxin", "link": "https://stackoverflow.com/users/2398375/dioxin"}, "edited": false, "score": 2, "creation_date": 1525020333, "post_id": 50088959, "comment_id": 87193923, "body": "<a href=\"https://www.google.com/amp/s/amp.reddit.com/r/rust/comments/3azc4n/how_does_for_loop_get_a_mutable_iterator/\" rel=\"nofollow noreferrer\">Here&#39;s a post</a> (from reddit) that explains why using an immutable iterator works with for loops."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 12952, "user_id": 2398375, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1a5530da29f23682b10bb5568076f83d?s=128&d=identicon&r=PG", "display_name": "Dioxin", "link": "https://stackoverflow.com/users/2398375/dioxin"}, "edited": false, "score": 2, "creation_date": 1525022576, "post_id": 50088959, "comment_id": 87194592, "body": "@VinceEmigh Why don&#39;t you write a full answer?"}, {"owner": {"reputation": 12952, "user_id": 2398375, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1a5530da29f23682b10bb5568076f83d?s=128&d=identicon&r=PG", "display_name": "Dioxin", "link": "https://stackoverflow.com/users/2398375/dioxin"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1525022846, "post_id": 50088959, "comment_id": 87194678, "body": "@Boiethios I&#39;ve only dabbled in Rust and do not feel confident in it. I would much rather leave this in the hands of someone who is familiar with the language, as they may have some further insight that I have overlooked (may even be a duplicate). Feel free to take the spotlight!"}], "owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 53, "favorite_count": 0, "closed_date": 1525022892, "answer_count": 0, "score": 3, "last_activity_date": 1525023199, "creation_date": 1525019849, "last_edit_date": 1525023199, "question_id": 50088959, "link": "https://stackoverflow.com/questions/50088959/why-can-i-loop-over-an-immutable-iterator-with-for-construct", "closed_reason": "Duplicate", "title": "Why can I loop over an immutable iterator with for construct?", "body": "<p>For learning purposes, I'm trying to <code>match</code> over an iterator's <code>next()</code> method.</p>\n\n<p>If I declare the iterator as immutable like in the following snippet, the compiler yells at me saying that I have to use <code>let mut x_iter</code> instead:</p>\n\n<pre><code>let x = vec![1, 2, 3];\nlet x_iter = x.iter();\n\nloop {\n    match x_iter.next() {\n        Some(v) =&gt; { println!(\"{}\", v); }\n        None    =&gt; { println!(\"end\"); break; }\n    }\n}\n</code></pre>\n\n<p>This triggers the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow immutable local variable `x_iter` as mutable\n --&gt; src/main.rs:6:15\n  |\n3 |     let x_iter = x.iter();\n  |         ------ use `mut x_iter` here to make mutable\n...\n6 |         match x_iter.next() {\n  |               ^^^^^^ cannot borrow mutably\n</code></pre>\n\n<p>If I use <code>let mut x_iter = ...</code> instead, then everything works.</p>\n\n<p>How come I <em>have</em> to declare <code>x_iter</code> as mutable in the first place, since I'm not mutating it in the <code>match</code> block?</p>\n\n<p>One would argue that somehow, the <code>next()</code> method <em>is</em> indeed altering the iterator, as it needs to increment the pointer to its next element. That would make a compelling argument for using a mutable iterator.</p>\n\n<p>However, wouldn't that also be the case when using <code>for v in x_iter { }</code>? This construct definitely works with an immutable iterator. Is it simply because the <code>for</code> construct modifies the pointer <em>internally</em> and then leaves the object unchanged for the outside world, while using <code>next()</code> manually triggers a mutation which is, this time, visible from the outside world?</p>\n"}, {"tags": ["xml", "rust", "serde"], "comments": [{"owner": {"reputation": 504, "user_id": 7024293, "user_type": "registered", "accept_rate": 68, "profile_image": "https://lh3.googleusercontent.com/-_iHS8SMGqHA/AAAAAAAAAAI/AAAAAAAAAbE/HudebqQ1IF4/photo.jpg?sz=128", "display_name": "stevensonmt", "link": "https://stackoverflow.com/users/7024293/stevensonmt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525016135, "post_id": 50083753, "comment_id": 87192430, "body": "That comment is not useful. I provided a link to the full xml but that is quite a long document. I abbreviated the xml with pseudotags indicating what was relevant. What would you suggest I have done differently?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525016451, "post_id": 50083753, "comment_id": 87192559, "body": "I would suggest providing <i>syntactically valid</i> XML. Note that links to offsite resources are specifically what that off-topic reason is all about. Those have no guarantee of being around when the next person comes to this question. That&#39;s why you are supposed to put the shortest code necessary <i>into</i> the question. Check out what a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> is. For example, you could probably <i>remove</i> all of those tags and a whole bunch of your Rust code and reduce the entire question down to 20 lines of XML and a small handful of structs, and a complete driver program including imports, etc."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525016501, "post_id": 50083753, "comment_id": 87192572, "body": "As it is now, your question requires any answerer to do <b>a lot</b> of additional legwork to even reproduce the exact error."}, {"owner": {"reputation": 3864, "user_id": 1202108, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/e9000aa781dbdea1c8f85d8ebf77593b?s=128&d=identicon&r=PG", "display_name": "Adrian Taylor", "link": "https://stackoverflow.com/users/1202108/adrian-taylor"}, "edited": false, "score": 1, "creation_date": 1542587588, "post_id": 50083753, "comment_id": 93610454, "body": "Possibly this? <a href=\"https://github.com/RReverser/serde-xml-rs/issues/55\" rel=\"nofollow noreferrer\">github.com/RReverser/serde-xml-rs/issues/55</a>"}], "answers": [{"comments": [{"owner": {"reputation": 504, "user_id": 7024293, "user_type": "registered", "accept_rate": 68, "profile_image": "https://lh3.googleusercontent.com/-_iHS8SMGqHA/AAAAAAAAAAI/AAAAAAAAAbE/HudebqQ1IF4/photo.jpg?sz=128", "display_name": "stevensonmt", "link": "https://stackoverflow.com/users/7024293/stevensonmt"}, "edited": false, "score": 0, "creation_date": 1542814980, "post_id": 53366978, "comment_id": 93705667, "body": "Thank you for the response. I have moved on from the project and have not yet tested your suggestion. I think your diagnosis of the root problem is correct. When I have a chance to implement your solution if it solves the issue then I will mark your solution as correct. Thanks again."}, {"owner": {"reputation": 884, "user_id": 4997879, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9f517a06f4fa1b0e8279b21fcd8d3c79?s=128&d=identicon&r=PG&f=1", "display_name": "Maxim Gritsenko", "link": "https://stackoverflow.com/users/4997879/maxim-gritsenko"}, "edited": false, "score": 0, "creation_date": 1617888142, "post_id": 53366978, "comment_id": 118438936, "body": "Thank you. I would only add that there is <code>#[serde(rename=&quot;$value&quot;)]</code> attribute needed above <code>Article.details</code> property."}], "tags": [], "owner": {"reputation": 3864, "user_id": 1202108, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/e9000aa781dbdea1c8f85d8ebf77593b?s=128&d=identicon&r=PG", "display_name": "Adrian Taylor", "link": "https://stackoverflow.com/users/1202108/adrian-taylor"}, "is_accepted": false, "score": 2, "last_activity_date": 1542588488, "creation_date": 1542588488, "answer_id": 53366978, "question_id": 50083753, "link": "https://stackoverflow.com/questions/50083753/deserialize-xml-with-serde-xml-rs-creates-errduplicate-field-value/53366978#53366978", "title": "Deserialize XML with serde-xml-rs creates Err(duplicate field `$value`)", "body": "<p>My guess is that you have XML elements with other things in between. You don't show an example in the above snippet, but for instance:</p>\n\n<pre><code>&lt;Author ...&gt;\n&lt;SomethingElse ...&gt;\n&lt;Author&gt;\n</code></pre>\n\n<p>serde_xml_rs appears to want all tags to be adjacent per this comment: <a href=\"https://github.com/RReverser/serde-xml-rs/issues/55\" rel=\"nofollow noreferrer\">https://github.com/RReverser/serde-xml-rs/issues/55</a></p>\n\n<p>i.e.</p>\n\n<pre><code>&lt;Author...&gt;\n&lt;Author...&gt;\n&lt;SomethingElse ...&gt;\n</code></pre>\n\n<p>If your XML isn't like that, you can solve this by using an <code>Enum</code>.</p>\n\n<p>e.g.</p>\n\n<pre><code>#[derive(Deserialize, Debug)]\nstruct Article {\n    details: Vec&lt;Detail&gt;\n}\n\n#[derive(Deserialize, Debug)]\nenum Detail {\n    Author(Author),\n    SomethingElse(SomethingElse)\n}\n\n#[derive(Debug, Deserialize)]\nstruct Author {\n    ...\n}\n\n#[derive(Debug, Deserialize)]\nstruct SomethingElse {\n    ...\n}\n</code></pre>\n"}], "owner": {"reputation": 504, "user_id": 7024293, "user_type": "registered", "accept_rate": 68, "profile_image": "https://lh3.googleusercontent.com/-_iHS8SMGqHA/AAAAAAAAAAI/AAAAAAAAAbE/HudebqQ1IF4/photo.jpg?sz=128", "display_name": "stevensonmt", "link": "https://stackoverflow.com/users/7024293/stevensonmt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1151, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1542588488, "creation_date": 1524980729, "question_id": 50083753, "link": "https://stackoverflow.com/questions/50083753/deserialize-xml-with-serde-xml-rs-creates-errduplicate-field-value", "title": "Deserialize XML with serde-xml-rs creates Err(duplicate field `$value`)", "body": "<p><a href=\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&amp;id=25555558&amp;retmode=xml\" rel=\"nofollow noreferrer\">This</a> is an example of the xml schema I am attempting to parse.  Only a few fields are of interest to me. The root of the schema is the <code>PubmedArticleSet</code> which contains >= 0 <code>PubmedArticle</code> entries.  I am interested in the fields contained in those entries.  I am getting the error in the title, though I do not see the problem associated with that error <a href=\"https://github.com/RReverser/serde-xml-rs/issues/55\" rel=\"nofollow noreferrer\">here</a>.  </p>\n\n<pre><code>&lt;PubmedArticle&gt;\n  &lt;MedlineCitation&gt;\n     &lt;PMID&gt;xxxxxxxx&lt;/PMID&gt;\n     &lt;date tags i don't care about/&gt;\n     &lt;other date tags i don't care about/&gt;\n     &lt;Article&gt;\n       &lt;tags I don't care about/&gt;\n         &lt;children I don't care about&gt;  \n       &lt;other tags I don't care about/&gt;\n         &lt;children I don't care about&gt;\n       &lt;AuthorList&gt;\n         &lt;Author&gt;\n           &lt;LastName&gt;xxxx&lt;/LastName&gt;\n           &lt;FirstName&gt;i don't care about this&lt;/FirstName&gt;\n           &lt;Initials&gt;xx&lt;/Initials&gt;\n           &lt;AffiliationInfo&gt;\n              &lt;Affiliation&gt;String of text&lt;/Affiliation&gt;\n           &lt;/AffiliationInfo&gt;\n          &lt;/Author&gt;\n          &lt;Author&gt;same as above&lt;/Author&gt;\n        &lt;/AuthorList&gt;\n        &lt;Lots of stuff I don't care about/&gt;\n      &lt;/Article&gt;\n      &lt;More stuff I don't care about/&gt;\n    &lt;/MedlineCitation&gt;\n    &lt;Final stuff I don't care about/&gt;\n  &lt;/PubmedArticle&gt;\n</code></pre>\n\n<p>And I have set up the following structs:</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug)]\nstruct PubmedArticleSet {\n    #[serde(rename=\"$value\")]\n    pub articleset: Vec&lt;PubmedArticle&gt;\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct PubmedArticle {\n    #[serde(rename=\"$value\")]\n    pub medlinecitation: MedlineCitation,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct MedlineCitation {\n    #[serde(rename=\"$value\")]\n    pub pmid: PMID,\n    pub article: Article\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct PMID {\n    #[serde(rename=\"$value\")]\n    pub id: String\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Article {\n    pub authorlist: AuthorList,\n    pub publicationtypelist: Vec&lt;PublicationType&gt;\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct PublicationType {\n    #[serde(rename=\"$value\")]\n    pub publicationtype: String\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct AuthorList {\n    #[serde(rename=\"$value\")]\n    pub authorlist: Vec&lt;Author&gt;,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Author {\n    #[serde(rename=\"$value\")]\n    pub author: (LastName, Initials),\n    pub affiliation: Affiliation\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct LastName {\n    #[serde(rename=\"$value\")]\n    pub lastname: String\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Initials {\n    #[serde(rename=\"$value\")]\n    pub initials: String\n}\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Affiliation {\n    #[serde(rename=\"$value\")]\n    pub affiliation: String\n</code></pre>\n\n<p>And I try to parse with the following function:</p>\n\n<pre><code>fn deser_article_records(result: &amp;String) -&gt; Result&lt;PubmedArticleSet, Box&lt;Error&gt;&gt; {\n    if let Some(start) = result.find(\"&lt;PubmedArticleSet&gt;\") {\n        let records = serde_xml_rs::deserialize(result[start..].as_bytes())?;\n        Ok(records)\n    } else {\n        Err(\"no articleset found\")?\n    }\n}\n</code></pre>\n"}, {"tags": ["arrays", "rust", "initialization"], "answers": [{"comments": [{"owner": {"reputation": 2080, "user_id": 9604966, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NeWpE.jpg?s=128&g=1", "display_name": "Jere", "link": "https://stackoverflow.com/users/9604966/jere"}, "edited": false, "score": 0, "creation_date": 1524962525, "post_id": 50081468, "comment_id": 87180619, "body": "Thank you very much!  Two followup questions for my own info: 1.  Do .map() and .collect() not use heap allocation?  I&#39;ve seen them used in context of collections, which typically do.  2.  In the std::mem::replace() call, I know that std::mem::uninitialized() doesn&#39;t do anything normally, but since it is passed in as a parameter, is another equally sized array created temporarily to pass into replace()?  Asking in case I have large arrays."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2080, "user_id": 9604966, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NeWpE.jpg?s=128&g=1", "display_name": "Jere", "link": "https://stackoverflow.com/users/9604966/jere"}, "edited": false, "score": 1, "creation_date": 1524963314, "post_id": 50081468, "comment_id": 87180735, "body": "@Jere no, <code>map</code> and <code>collect</code> do not use the heap (why would they even need to?). They are <a href=\"https://doc.rust-lang.org/core/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\">provided by libcore</a>, which doesn&#39;t even have access to an allocator. You can see the implementations of <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/libcore/iter/mod.rs#L1308-L1310\" rel=\"nofollow noreferrer\"><code>map</code></a> and <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/libcore/iter/iterator.rs#L1302-L1304\" rel=\"nofollow noreferrer\"><code>collect</code></a> to verify for yourself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2080, "user_id": 9604966, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NeWpE.jpg?s=128&g=1", "display_name": "Jere", "link": "https://stackoverflow.com/users/9604966/jere"}, "edited": false, "score": 1, "creation_date": 1524963513, "post_id": 50081468, "comment_id": 87180756, "body": "@Jere it is possible that the copying the uninitialized array may incur some overhead, but returning the array from the call to <code>default</code> may also require moving it, and every time you move the <code>Composite</code> has the same issue. The docs for <a href=\"https://docs.rs/arrayvec/0.4.7/arrayvec/struct.ArrayVec.html#method.into_inner\" rel=\"nofollow noreferrer\"><code>ArrayVec::into_inner</code></a> mention some overhead, which I <i>assume</i> is referring to this."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1524964377, "last_edit_date": 1524964377, "creation_date": 1524953101, "answer_id": 50081468, "question_id": 50081239, "link": "https://stackoverflow.com/questions/50081239/is-there-a-way-to-tell-the-rust-compiler-to-call-drop-on-partially-initialized-a/50081468#50081468", "title": "Is there a way to tell the Rust compiler to call drop on partially-initialized array elements when handling a panic?", "body": "<blockquote>\n  <p>Is there a way to tell the Rust compiler to call drop on partially-initialized array elements when handling a panic?</p>\n</blockquote>\n\n<p><strong>No</strong>, but you can call <code>drop</code> yourself. You need to run code when a panic occurs. </p>\n\n<h3>Brute-force solution</h3>\n\n<p>This uses the building blocks of <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"nofollow noreferrer\"><code>catch_unwind</code></a>, <a href=\"https://doc.rust-lang.org/std/panic/fn.resume_unwind.html\" rel=\"nofollow noreferrer\"><code>resume_unwind</code></a>, and <a href=\"https://doc.rust-lang.org/std/panic/struct.AssertUnwindSafe.html\" rel=\"nofollow noreferrer\"><code>AssertUnwindSafe</code></a> to notice that a panic occurred and run some cleanup code:</p>\n\n<pre><code>fn default() -&gt; Self {\n    use std::panic::{self, AssertUnwindSafe};\n\n    let mut temp = NoDrop::new(Self {\n        data: unsafe { std::mem::uninitialized() },\n    });\n\n    let mut valid = 0;\n\n    let panicked = {\n        let mut temp = AssertUnwindSafe(&amp;mut temp);\n        let mut valid = AssertUnwindSafe(&amp;mut valid);\n\n        std::panic::catch_unwind(move || unsafe {\n            for index in 0..CAPACITY {\n                std::ptr::write(&amp;mut temp.data[index], T::default());\n                **valid += 1;\n            }\n        })\n    };\n\n    if let Err(e) = panicked {\n        for i in 0..valid {\n            unsafe { std::ptr::read(&amp;temp.data[i]) };\n        }\n\n        panic::resume_unwind(e);\n    }\n\n    temp.into_inner()\n}\n</code></pre>\n\n<h3>Slightly nicer</h3>\n\n<p>Once you recognize that a type's <code>Drop</code> implementation is run when a panic occurs, you can use that to your advantage by creating a <em>drop bomb</em> \u2014 a type that cleans up when dropped but in the success path it is not dropped:</p>\n\n<pre><code>extern crate nodrop;\n\nuse nodrop::NoDrop;\n\nuse std::{mem, ptr};\n\nconst CAPACITY: usize = 5;\ntype Data&lt;T&gt; = [T; CAPACITY];\n\nstruct Temp&lt;T&gt; {\n    data: NoDrop&lt;Data&lt;T&gt;&gt;,\n    valid: usize,\n}\n\nimpl&lt;T&gt; Temp&lt;T&gt; {\n    unsafe fn new() -&gt; Self {\n        Self {\n            data: NoDrop::new(mem::uninitialized()),\n            valid: 0,\n        }\n    }\n\n    unsafe fn push(&amp;mut self, v: T) {\n        if self.valid &lt; CAPACITY {\n            ptr::write(&amp;mut self.data[self.valid], v);\n            self.valid += 1;\n        }\n    }\n\n    unsafe fn into_inner(mut self) -&gt; Data&lt;T&gt; {\n        let data = mem::replace(&amp;mut self.data, mem::uninitialized());\n        mem::forget(self);\n        data.into_inner()\n    }\n}\n\nimpl&lt;T&gt; Drop for Temp&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        unsafe {\n            for i in 0..self.valid {\n                ptr::read(&amp;self.data[i]);\n            }\n        }\n    }\n}\n\nstruct Composite&lt;T&gt;(Data&lt;T&gt;);\n\nimpl&lt;T&gt; Default for Composite&lt;T&gt;\nwhere\n    T: Default,\n{\n    fn default() -&gt; Self {\n        unsafe {\n            let mut tmp = Temp::new();\n\n            for _ in 0..CAPACITY {\n                tmp.push(T::default());\n            }\n\n            Composite(tmp.into_inner())\n        }\n    }\n}\n\nimpl&lt;T&gt; From&lt;Data&lt;T&gt;&gt; for Composite&lt;T&gt; {\n    fn from(value: Data&lt;T&gt;) -&gt; Self {\n        Composite(value)\n    }\n}\n\nstruct Dummy;\n\nimpl Drop for Dummy {\n    fn drop(&amp;mut self) {\n        println!(\"dropping\");\n    }\n}\n\nimpl Default for Dummy {\n    fn default() -&gt; Self {\n        use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n\n        static COUNT: AtomicUsize = ATOMIC_USIZE_INIT;\n\n        let count = COUNT.fetch_add(1, Ordering::SeqCst);\n        if count &lt; 3 {\n            println!(\"default\");\n            Dummy {}\n        } else {\n            panic!(\"oh noes!\");\n        }\n    }\n}\n\npub fn main() {\n    let _v1: Composite&lt;Dummy&gt; = Composite::default();\n}\n</code></pre>\n\n<p>Note that I've made some unrelated cleanups:</p>\n\n<ol>\n<li>Using an atomic variable instead of <code>unsafe</code> static mutable variables.</li>\n<li>Don't use <code>return</code> as the last statement of a block.</li>\n<li>Converted <code>Composite</code> into a <em>newtype</em>, as <code>data</code> isn't a wonderful variable name.</li>\n<li>Imported the <code>mem</code> and <code>ptr</code> modules for easier access.</li>\n<li>Created the <code>Data&lt;T&gt;</code> type alias to avoid retyping that detail.</li>\n</ol>\n\n<h3>An elegant solution</h3>\n\n<p>The choice of <code>push</code> in the second solution is no accident. <code>Temp</code> is a poor implementation of a variable-sized stack-allocated vector. There's a <em>good</em> implementation called <a href=\"https://crates.io/crates/arrayvec\" rel=\"nofollow noreferrer\">arrayvec</a> which we can use instead:</p>\n\n<pre><code>extern crate arrayvec;\n\nuse arrayvec::ArrayVec;\n\nconst CAPACITY: usize = 5;\ntype Data&lt;T&gt; = [T; CAPACITY];\n\nstruct Composite&lt;T&gt;(Data&lt;T&gt;);\n\nimpl&lt;T&gt; Default for Composite&lt;T&gt;\nwhere\n    T: Default,\n{\n    fn default() -&gt; Self {\n        let tmp: ArrayVec&lt;_&gt; = (0..CAPACITY).map(|_| T::default()).collect();\n\n        match tmp.into_inner() {\n            Ok(data) =&gt; Composite(data),\n            Err(_) =&gt; panic!(\"Didn't insert enough values\"),\n        }\n    }\n}\n</code></pre>\n\n<p>Would you be surprised to learn that nodrop was created in a large part to be used for arrayvec? The same author created both!</p>\n"}], "owner": {"reputation": 2080, "user_id": 9604966, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NeWpE.jpg?s=128&g=1", "display_name": "Jere", "link": "https://stackoverflow.com/users/9604966/jere"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 365, "favorite_count": 0, "accepted_answer_id": 50081468, "answer_count": 1, "score": 3, "last_activity_date": 1524964377, "creation_date": 1524950989, "last_edit_date": 1524951521, "question_id": 50081239, "link": "https://stackoverflow.com/questions/50081239/is-there-a-way-to-tell-the-rust-compiler-to-call-drop-on-partially-initialized-a", "title": "Is there a way to tell the Rust compiler to call drop on partially-initialized array elements when handling a panic?", "body": "<p>I'm working on a custom type where I have the following requirements:</p>\n\n<ol>\n<li>A collection of elements that avoid heap allocation. I am using arrays instead of a <code>Vec</code>.</li>\n<li>The collection contains non-copyable types</li>\n<li>Implements <code>Default</code> for types that also implement <code>Default</code></li>\n<li>Implements <code>From</code> so that I can build it straight from an array</li>\n</ol>\n\n<p>My biggest problem is implementing <code>Default</code> in a safe and useful way.  Being able to support movable types in the array has provided some challenges.  Initially I blindly used <code>mem::uninitialized()</code> followed by a for loop of <code>ptr::write(&amp;mut data[index], Element::default())</code> calls to initialize it, but I found that if the <code>default()</code> call of the individual elements ever panicked, then it would try to call <code>drop</code> on all of the uninitialized data in the array.  </p>\n\n<p>My next step involved using the nodrop crate to prevent that. I now no longer call <code>drop</code> on any uninitialized data, but if any of the elements do happen to panic on <code>default()</code>, then the ones before it which were correctly built never call <code>drop</code> either. </p>\n\n<p>Is there is any way to either tell the Rust compiler it is safe to call <code>drop</code> on the previous array elements that were correctly built or is there a different way to approach this?</p>\n\n<p>To be clear, if one of the individual calls to <code>Element::default()</code> panics, I want:</p>\n\n<ol>\n<li>Uninitialized elements do not call <code>drop</code></li>\n<li>Properly initialized elements do call <code>drop</code></li>\n</ol>\n\n<p>I'm not sure it is possible based on what I have read so far, but I wanted to check. </p>\n\n<p>This code shows where I am at:</p>\n\n<pre><code>extern crate nodrop;\n\nuse nodrop::NoDrop;\n\nstruct Dummy;\nimpl Drop for Dummy {\n    fn drop(&amp;mut self) {\n        println!(\"dropping\");\n    }\n}\nimpl Default for Dummy {\n    fn default() -&gt; Self {\n        unsafe {\n            static mut COUNT: usize = 0;\n            if COUNT &lt; 3 {\n                COUNT += 1;\n                println!(\"default\");\n                return Dummy {};\n            } else {\n                panic!(\"oh noes!\");\n            }\n        }\n    }\n}\n\nconst CAPACITY: usize = 5;\n\nstruct Composite&lt;Element&gt; {\n    data: [Element; CAPACITY],\n}\n\nimpl&lt;Element&gt; Default for Composite&lt;Element&gt;\nwhere\n    Element: Default,\n{\n    fn default() -&gt; Self {\n        let mut temp: NoDrop&lt;Self&gt; = NoDrop::new(Self {\n            data: unsafe { std::mem::uninitialized() },\n        });\n\n        unsafe {\n            for index in 0..CAPACITY {\n                std::ptr::write(&amp;mut temp.data[index], Element::default());\n            }\n        }\n\n        return temp.into_inner();\n    }\n}\n\nimpl&lt;Element&gt; From&lt;[Element; CAPACITY]&gt; for Composite&lt;Element&gt; {\n    fn from(value: [Element; CAPACITY]) -&gt; Self {\n        return Self { data: value };\n    }\n}\n\npub fn main() {\n    let _v1: Composite&lt;Dummy&gt; = Composite::default();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=26cafbc53b68ceb069e0fa436c0973ba&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>It gets as far as ensuring uninitialized elements of the array don't call <code>drop</code>, but it doesn't yet allow for properly initialized components to call <code>drop</code> (they act like the uninitialized components and don't call <code>drop</code>).  I force the <code>Element::default()</code> call to generate a panic on a later element just to show the issue.  </p>\n\n<h3>Actual output</h3>\n\n<p>Standard Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling playground v0.0.1 (file:///playground)\nFinished dev [unoptimized + debuginfo] target(s) in 0.56 secs\n Running `target/debug/playground`\nthread 'main' panicked at 'oh noes!', src/main.rs:19:17\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>Standard Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>default\ndefault\ndefault\n</code></pre>\n\n<h3>Intended output</h3>\n\n<p>Standard Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling playground v0.0.1 (file:///playground)\nFinished dev [unoptimized + debuginfo] target(s) in 0.56 secs\n Running `target/debug/playground`\nthread 'main' panicked at 'oh noes!', src/main.rs:19:17\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>Standard Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>default\ndefault\ndefault\ndropped\ndropped\ndropped\n</code></pre>\n"}, {"tags": ["rust", "slice"], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 6, "last_activity_date": 1524935305, "last_edit_date": 1524935305, "creation_date": 1524932835, "answer_id": 50078673, "question_id": 50078488, "link": "https://stackoverflow.com/questions/50078488/is-it-possible-to-have-a-non-borrowed-slice/50078673#50078673", "title": "Is it possible to have a non-borrowed slice?", "body": "<p>A non-borrowed slice (<code>[T]</code>) exists, but you cannot use it as value as-is. It is only useful in other types where it is behind a pointer of some kind. For example (not exhaustive):</p>\n\n<ul>\n<li>In borrowed slices: <code>&amp;[T]</code></li>\n<li>In boxed slices (<em>i.e.</em> owned slices): <code>Box&lt;[T]&gt;</code></li>\n<li>In ref-counted slices: <code>Rc&lt;[T]&gt;</code></li>\n</ul>\n\n<p>That is because the compiler cannot know what the size of an unsized type on the stack but a pointer has a known size. </p>\n\n<p>The type can also be used as part of a trait bound for static polymorphism: <code>U: AsRef&lt;[T]&gt;</code>.</p>\n\n<blockquote>\n  <p>It seems a bit weird to require this syntax <code>&amp;vector[]</code> if in fact borrowing (<code>&amp;</code>) is always required. </p>\n</blockquote>\n\n<p>It is not always required to use an <code>&amp;</code> with the indexing syntax because <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\">sometimes the referenced value can be dereferenced</a>:</p>\n\n<pre><code>let scores = vec![1, 2, 3];\nlet score = scores[0];\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27879161/155423\">What is the return type of the indexing operation?</a></li>\n</ul>\n"}], "owner": {"reputation": 615, "user_id": 770476, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/8cf9af3473871c08a5a80833a7d2824a?s=128&d=identicon&r=PG", "display_name": "fabiim", "link": "https://stackoverflow.com/users/770476/fabiim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 263, "favorite_count": 0, "accepted_answer_id": 50078673, "answer_count": 1, "score": 3, "last_activity_date": 1524935305, "creation_date": 1524931692, "last_edit_date": 1524933715, "question_id": 50078488, "link": "https://stackoverflow.com/questions/50078488/is-it-possible-to-have-a-non-borrowed-slice", "title": "Is it possible to have a non-borrowed slice?", "body": "<p>If I try this: </p>\n\n<pre><code>let vector = vec![1, 2, 3];\nlet slice = vector[1..2];\n</code></pre>\n\n<p>I get a compiler error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[{integer}]: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:3:9\n  |\n3 |     let slice = vector[1..2];\n  |         ^^^^^   ------------ help: consider borrowing here: `&amp;vector[1..2]`\n  |         |\n  |         `[{integer}]` does not have a constant size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n  = note: all local variables must have a statically known size\n</code></pre>\n\n<p>I get that we need <code>let slice = &amp;vector[1..2]</code> as the compiler kindly suggests. This makes sense: a slice <em>always</em> comes from another value, thus you need to borrow the vector in this example.</p>\n\n<p>However, I tried this: </p>\n\n<pre><code>let vector = vec![1, 2, 3];\nlet borrowed_vector = &amp;vector;\nlet slice = borrowed_vector[1..2];\n</code></pre>\n\n<p>and I am back to the same error. </p>\n\n<p>I ask because it seems a bit weird to require the <code>&amp;vector[]</code> syntax if in fact borrowing (<code>&amp;</code>) is always required.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524915013, "post_id": 50076002, "comment_id": 87168192, "body": "You need to add an <code>extern crate sd12</code> in your main.rs. All external dependencies need to be linked at the top level."}, {"owner": {"reputation": 125, "user_id": 5862030, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c3ea28fa33abc07ba4b55ca26c4ad35c?s=128&d=identicon&r=PG&f=1", "display_name": "KuSpa", "link": "https://stackoverflow.com/users/5862030/kuspa"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524915342, "post_id": 50076002, "comment_id": 87168288, "body": "the error still occurs"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1524921697, "post_id": 50076002, "comment_id": 87170141, "body": "I can&#39;t reproduce your problem :/ You need to give us more information: how are you compiling? A simple <code>cargo build</code> or something else? Also: what Rust version (<code>rustc -V</code>) are you using? And please give us the full content of <code>main.rs</code> (at least all parts that are necessary to reproduce the problem)."}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1524922390, "post_id": 50077090, "comment_id": 87170337, "body": "You shouldn&#39;t need both a lib and main file. This may be your problem."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1524925364, "post_id": 50077090, "comment_id": 87171174, "body": "Could you explain your problem and your solution in more detail? In its current form, this Q&amp;A is unlikely to help any future visitor. We don&#39;t like this here on SO (our mission is all about building a knowledge base for future visitors). By editing your question and answer, you could improve this situation and give knowledge back to the community."}], "tags": [], "owner": {"reputation": 125, "user_id": 5862030, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c3ea28fa33abc07ba4b55ca26c4ad35c?s=128&d=identicon&r=PG&f=1", "display_name": "KuSpa", "link": "https://stackoverflow.com/users/5862030/kuspa"}, "is_accepted": false, "score": 0, "last_activity_date": 1524941178, "last_edit_date": 1524941178, "creation_date": 1524922311, "answer_id": 50077090, "question_id": 50076002, "link": "https://stackoverflow.com/questions/50076002/how-to-include-sdl2/50077090#50077090", "title": "How to include sdl2", "body": "<p>As stated above, I need to declare extern dependencies at the root. When using a <code>lib.rs</code> file, it has to be written there:</p>\n\n<p><code>lib.rs</code>:</p>\n\n<pre><code>extern crate sdl2;\n//...\n</code></pre>\n\n<p>in order to use it in the\n<code>keyboard.rs</code> file:</p>\n\n<pre><code>use sdl2::keyboard::Scancode;\nuse sdl2;\n// example code below\nfn is_a_pressed(e: &amp;sdl2::EventPump) -&gt; bool {\n    e.keyboard_state().is_scancode_pressed(Scancode::A)\n}\n</code></pre>\n"}], "owner": {"reputation": 125, "user_id": 5862030, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c3ea28fa33abc07ba4b55ca26c4ad35c?s=128&d=identicon&r=PG&f=1", "display_name": "KuSpa", "link": "https://stackoverflow.com/users/5862030/kuspa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 271, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1524941178, "creation_date": 1524914656, "last_edit_date": 1524939255, "question_id": 50076002, "link": "https://stackoverflow.com/questions/50076002/how-to-include-sdl2", "title": "How to include sdl2", "body": "<p>I want to use the <code>sdl2</code> package in Rust.</p>\n\n<p>My project folder:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n    \u251c\u2500\u2500 keyboard.rs\n    \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p>So far I did the following:\nAdded a <code>sdl2</code> line to my Cargo, where extern dependencies are handeled:\n<code>Cargo.toml</code>:</p>\n\n<pre><code>// ...\n[dependencies]\n    sdl2 = \"0.31\"\n</code></pre>\n\n<p>To use <code>sdl2</code> in my <code>keyboard.rs</code>, I added the following lines:</p>\n\n<pre><code>extern crate sdl2;\nuse sdl2::keyboard::Keycode;\n</code></pre>\n\n<p>But when I try to compile (<code>cargo build</code>), I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0433]: failed to resolve. Did you mean `keyboard::sdl2`?\n --&gt; src/keyboard.rs:4:5\n  |\n4 | use sdl2::keyboard::Keycode;\n  |     ^^^^ Did you mean `keyboard::sdl2`?\n\nerror[E0433]: failed to resolve. Did you mean `keyboard::sdl2`?\n</code></pre>\n\n<p>What am I doing wrong? Is it even possible to load extern crates in other files than the <code>main.rs</code> file?</p>\n\n<p><strong>edit 1:</strong></p>\n\n<p>Adding the <code>extern crate sdl2;</code> to my <code>main.rs</code> did not solve the problem</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 467, "user_id": 5264490, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/lwpFY.png?s=128&g=1", "display_name": "Chromium", "link": "https://stackoverflow.com/users/5264490/chromium"}, "edited": false, "score": 0, "creation_date": 1524940646, "post_id": 50074145, "comment_id": 87175649, "body": "Ok, I know that my code example is not a good one in terms of good rust practices. But just ignore that for now. The point I want to ask is that &quot;why <code>Rc::clone</code> doesn&#39;t accept my argument in terms of type?&quot;"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 467, "user_id": 5264490, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/lwpFY.png?s=128&g=1", "display_name": "Chromium", "link": "https://stackoverflow.com/users/5264490/chromium"}, "edited": false, "score": 0, "creation_date": 1524940991, "post_id": 50074145, "comment_id": 87175738, "body": "@Chromium I did address that: you just misunderstood the compiler error. <code>Rc::clone</code> <i>does</i> accept your argument. Try to write <code>Rc::clone(self.get_ref()); unimplemented!()</code> as the body of <code>copy_ref</code>. Then you&#39;ll see. Also: it is not about good practices. In Rust, the compiler will refuse to compile your code (even if you fix your type error), and in languages like C++ you would access garbage memory and trigger undefined behavior."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1524901370, "creation_date": 1524901370, "answer_id": 50074145, "question_id": 50073458, "link": "https://stackoverflow.com/questions/50073458/expected-reference-found-struct-rc-when-cloning-and-returning-an-rc/50074145#50074145", "title": "&quot;Expected reference, found struct Rc&quot; when cloning and returning an Rc", "body": "<p><strong>The error is not talking about the argument you put into <code>Arc::clone()</code>, but the whole expression <code>Rc::clone(...)</code></strong> which has a different type (<code>Rc&lt;...&gt;</code>) than the return type of your function (<code>&amp;Rc&lt;...&gt;</code>).</p>\n\n<p>If you were passing a wrong argument to <code>Rc::clone</code>, it would like look this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  --&gt; src/main.rs:13:19\n   |\n13 |         Rc::clone(false)\n   |                   ^^^^^ expected reference, found bool\n   |\n   = note: expected type `&amp;std::rc::Rc&lt;_&gt;`\n              found type `bool`\n</code></pre>\n\n<p>So the naive way to fix the type error is to write <code>&amp;Rc::clone(...)</code> instead. Then the last expression of your function has the same type as your function's declared return type. But as you will notice, you will get other errors afterwards.</p>\n\n<p>Let's take a step back to see that your approach is flawed here. For the most important point, please see <a href=\"https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function\"><strong>\"Is there any way to return a reference to a variable created in a function?\"</strong></a>. Spoiler: you really don't want to. So constructs like your <code>get_ref()</code> just don't make sense, as you return a reference to a variable you create inside your function (a variable of type <code>Rc</code>).</p>\n\n<p>In your case the direct solution is probably pretty simple: just remove the reference. <code>Rc&lt;T&gt;</code> is already a pointer/reference type, so there is no need (in general) to have a reference to it. </p>\n\n<p>However, since you are using <code>Rc</code>, you are probably interested in reference counting. So in that case, you probably shouldn't create a new <code>Rc</code> every time the function is called. Otherwise you could end up with a bunch of <code>Rc</code>s with reference count 1, which is not really the point. So instead, your type <code>A</code> should already store an <code>Rc&lt;RefCell&lt;bool&gt;&gt;</code>.</p>\n\n<p>But all I'm doing here is guessing what you actually want to do which is not clear from your question. Maybe you can ask a different question, or add the information to this question, or explain this in the comments.</p>\n"}], "owner": {"reputation": 467, "user_id": 5264490, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/lwpFY.png?s=128&g=1", "display_name": "Chromium", "link": "https://stackoverflow.com/users/5264490/chromium"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 546, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1524929616, "creation_date": 1524895733, "last_edit_date": 1524929616, "question_id": 50073458, "link": "https://stackoverflow.com/questions/50073458/expected-reference-found-struct-rc-when-cloning-and-returning-an-rc", "title": "&quot;Expected reference, found struct Rc&quot; when cloning and returning an Rc", "body": "<p>I have a piece of code like this:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct A(bool);\n\nimpl A {\n    fn get_ref(&amp;self) -&gt; &amp;Rc&lt;RefCell&lt;bool&gt;&gt; {\n        &amp;Rc::new(RefCell::new(self.0))\n    }\n\n    fn copy_ref(&amp;self) -&gt; &amp;Rc&lt;RefCell&lt;bool&gt;&gt; {\n        Rc::clone(self.get_ref())\n    }\n}\n\nfn main() {\n    let a = A(true);\n    a.copy_ref();\n}\n</code></pre>\n\n<p>and I received warning complaining about the <code>Rc::clone</code> function not getting a reference:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:12:9\n   |\n12 |         Rc::clone(self.get_ref())\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found struct `std::rc::Rc`\n   |\n   = note: expected type `&amp;std::rc::Rc&lt;std::cell::RefCell&lt;bool&gt;&gt;`\n              found type `std::rc::Rc&lt;std::cell::RefCell&lt;bool&gt;&gt;`\n</code></pre>\n\n<p>I have been working on this all night but I cannot get it to work. The method <code>get_ref</code> is already typed as returning <code>&amp;Rc&lt;RefCell&lt;bool&gt;&gt;</code>, but why would the compiler give the error?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 8658, "user_id": 6760995, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/90da0ebdca4b4b5e3f10c326b9b63ea0?s=128&d=identicon&r=PG&f=1", "display_name": "McGrady", "link": "https://stackoverflow.com/users/6760995/mcgrady"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524966036, "post_id": 50072055, "comment_id": 87181119, "body": "Hi, @shepmaster, I don&#39;t think the two questions are similar."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524967222, "post_id": 50072055, "comment_id": 87181277, "body": "As you can tell by the duplicate marking, I do. Would you care to expand on why you think they <i>are</i> different? Both appear to simply be about using <code>NaiveDateTime</code>."}, {"owner": {"reputation": 8658, "user_id": 6760995, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/90da0ebdca4b4b5e3f10c326b9b63ea0?s=128&d=identicon&r=PG&f=1", "display_name": "McGrady", "link": "https://stackoverflow.com/users/6760995/mcgrady"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524967722, "post_id": 50072055, "comment_id": 87181361, "body": "1. I want to convert unix timestamp:i64 to readable string, the question is about to convert to <code>chrono:: prelude ::Datetime</code>. 2. There&#39;s a tag <code>rust-chrono</code> for that question and I hope built-in functions can do this, not just <code>chrono</code>.3. @coffeed-up-hacker&#39;s answer uses <code>NaiveDateTime </code> to do this trick, but I got a simpler and more general answer which is not about using <code>NaiveDateTime</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524967741, "post_id": 50072055, "comment_id": 87181371, "body": "Also note that there&#39;s <i>nothing wrong</i> with duplicates. This question now provides a signpost to anyone who used the same search terms you used before posting this question, getting them to the right answer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524968053, "post_id": 50072055, "comment_id": 87181413, "body": "<i>I hope built-in functions can do this</i> \u2014 you never stated such a restriction in the question and indeed both accepted an answer and provided your own that use chrono. <i>I got a simpler and more general answer which is not about using NaiveDateTime</i> \u2014 the duplicate&#39;s answer creates a <code>DateTime</code> as well. If you think your solution is a better method, you are encouraged to move your answer to the duplicate."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1524968886, "post_id": 50072055, "comment_id": 87181513, "body": "@McGrady 1. this is pretty must 99% of the job, in rust it&#39;s very easy to convert a result to string 2. Rust standard library avoid to be big, chrono is design to do this job, there is no reason to not use it 3. use <code>NaiveDateTime</code> is perfectly correct for timestamp. I agree this question is answered perfectly in the duplicate."}], "answers": [{"comments": [{"owner": {"reputation": 5684, "user_id": 870207, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/50fa4a2d71492f94030da21388aecd54?s=128&d=identicon&r=PG", "display_name": "teknopaul", "link": "https://stackoverflow.com/users/870207/teknopaul"}, "edited": false, "score": 0, "creation_date": 1578250343, "post_id": 50072164, "comment_id": 105370260, "body": "I could not get the above to compile with &quot;type annotations&quot;   DateTime::&lt;Utc&gt;::from_utc(utc_datetime, Utc);"}], "tags": [], "owner": {"reputation": 1054, "user_id": 2629902, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/jIgtw.png?s=128&g=1", "display_name": "Coffee&#39;d Up Hacker", "link": "https://stackoverflow.com/users/2629902/coffeed-up-hacker"}, "is_accepted": false, "score": 9, "last_activity_date": 1609357744, "last_edit_date": 1609357744, "creation_date": 1524881057, "answer_id": 50072164, "question_id": 50072055, "link": "https://stackoverflow.com/questions/50072055/converting-unix-timestamp-to-readable-time-string-in-rust/50072164#50072164", "title": "Converting Unix timestamp to readable time string in Rust?", "body": "<p>I am not familiar with Rust, but you should be able to convert the Unix timestamp to an integer (i64), and than use <code>NaiveDateTime</code> from <code>chrono</code> to convert the timestamp into a formatted string.</p>\n<p>Here's an example...</p>\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate chrono;\n\nuse chrono::prelude::*;\n\nfn main() {\n    // Convert the timestamp string into an i64\n    let timestamp = &quot;1524820690&quot;.parse::&lt;i64&gt;().unwrap();\n    \n    // Create a NaiveDateTime from the timestamp\n    let naive = NaiveDateTime::from_timestamp(timestamp, 0);\n    \n    // Create a normal DateTime from the NaiveDateTime\n    let datetime: DateTime&lt;Utc&gt; = DateTime::from_utc(naive, Utc);\n    \n    // Format the datetime how you want\n    let newdate = datetime.format(&quot;%Y-%m-%d %H:%M:%S&quot;);\n\n    // Print the newly formatted date and time\n    println!(&quot;{}&quot;, newdate);\n}\n</code></pre>\n<p>I used your Python time format, but the formatting might be different in Rust.</p>\n"}, {"tags": [], "owner": {"reputation": 8658, "user_id": 6760995, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/90da0ebdca4b4b5e3f10c326b9b63ea0?s=128&d=identicon&r=PG&f=1", "display_name": "McGrady", "link": "https://stackoverflow.com/users/6760995/mcgrady"}, "is_accepted": false, "score": 8, "last_activity_date": 1571691105, "last_edit_date": 1571691105, "creation_date": 1524898367, "answer_id": 50073770, "question_id": 50072055, "link": "https://stackoverflow.com/questions/50072055/converting-unix-timestamp-to-readable-time-string-in-rust/50073770#50073770", "title": "Converting Unix timestamp to readable time string in Rust?", "body": "<p>Thanks for @coffeed-up-hacker's answer.It helps me a lot.</p>\n\n<p>I tried many different ways to do this, and it seems that built-in functions can not format SystemTime to readable time string.</p>\n\n<p>Finally, I found a better way and it applies to a variety of situations:</p>\n\n<pre><code>extern crate chrono;\nuse chrono::prelude::DateTime;\nuse chrono::Utc;\nuse std::time::{SystemTime, UNIX_EPOCH, Duration};\n\n\nfn main(){\n    // Creates a new SystemTime from the specified number of whole seconds\n    let d = UNIX_EPOCH + Duration::from_secs(1524885322);\n    // Create DateTime from SystemTime\n    let datetime = DateTime::&lt;Utc&gt;::from(d);\n    // Formats the combined date and time with the specified format string.\n    let timestamp_str = datetime.format(\"%Y-%m-%d %H:%M:%S.%f\").to_string();\n    println!{\"{}\",timestamp_str};\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>2018-04-28 03:15:22.000000000\n</code></pre>\n\n<p>To get local time string, just use this :<code>DateTime::&lt;Local&gt;::from(d)</code>.</p>\n\n<p>Also, we can use <code>Duration::from_millis</code> or <code>Duration::from_micros</code> or <code>Duration::from_nanos</code> to convert millisecond, microsecond, nanoseconds to readable string.</p>\n"}], "owner": {"reputation": 8658, "user_id": 6760995, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/90da0ebdca4b4b5e3f10c326b9b63ea0?s=128&d=identicon&r=PG&f=1", "display_name": "McGrady", "link": "https://stackoverflow.com/users/6760995/mcgrady"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8233, "favorite_count": 2, "closed_date": 1524929390, "answer_count": 2, "score": 8, "last_activity_date": 1609357744, "creation_date": 1524879928, "last_edit_date": 1524929349, "question_id": 50072055, "link": "https://stackoverflow.com/questions/50072055/converting-unix-timestamp-to-readable-time-string-in-rust", "closed_reason": "Duplicate", "title": "Converting Unix timestamp to readable time string in Rust?", "body": "<p>How can I convert the Unix timestamp <code>1524820690</code> to a readable date time string?</p>\n\n<p>Just like this in Python:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>In [1]: from datetime import datetime\nIn [2]: print(\n   ...:     datetime.fromtimestamp(1284101485).strftime('%Y-%m-%d %H:%M:%S')\n   ...: )\n2010-09-10 14:51:25\n</code></pre>\n"}, {"tags": ["arrays", "string", "char", "rust", "type-conversion"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524872905, "post_id": 50071430, "comment_id": 87159743, "body": "Specifically, your case is addressed by <a href=\"https://stackoverflow.com/a/23431977/155423\">this answer</a>: <code>let s: String = ALPH.iter().cloned().collect();</code>"}, {"owner": {"reputation": 1191, "user_id": 5379668, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/57bc0deab1904ce43d7b70aa31103cd8?s=128&d=identicon&r=PG&f=1", "display_name": "Davide", "link": "https://stackoverflow.com/users/5379668/davide"}, "edited": false, "score": 0, "creation_date": 1524873134, "post_id": 50071430, "comment_id": 87159783, "body": "let mut _str = String::from(&quot;&quot;);     for x in &amp;ALPH {         _str.push(*x);     }     println!(&quot;{}&quot;, _str);"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1191, "user_id": 5379668, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/57bc0deab1904ce43d7b70aa31103cd8?s=128&d=identicon&r=PG&f=1", "display_name": "Davide", "link": "https://stackoverflow.com/users/5379668/davide"}, "edited": false, "score": 1, "creation_date": 1524873321, "post_id": 50071430, "comment_id": 87159804, "body": "@Davide while that might work, it&#39;s not very efficient as it has to allocate more times than needed. Also, <b>don&#39;t prefix that variable name with an underscore</b>, as that indicates that the variable is deliberately unused. That&#39;s not the case here. <code>let mut s = String::new(); for &amp;x in &amp;ALPH { s.push(x); } println!(&quot;{}&quot;, s);</code> is a bit closer to idiomatic (but still not as much as the <code>collect</code>)."}, {"owner": {"reputation": 1191, "user_id": 5379668, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/57bc0deab1904ce43d7b70aa31103cd8?s=128&d=identicon&r=PG&f=1", "display_name": "Davide", "link": "https://stackoverflow.com/users/5379668/davide"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524874013, "post_id": 50071430, "comment_id": 87159909, "body": "@Shepmaster That is a very simple mechanism that shows it works. Nobody said it&#39;s the best one but people can understand very easily :-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1191, "user_id": 5379668, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/57bc0deab1904ce43d7b70aa31103cd8?s=128&d=identicon&r=PG&f=1", "display_name": "Davide", "link": "https://stackoverflow.com/users/5379668/davide"}, "edited": false, "score": 0, "creation_date": 1524874162, "post_id": 50071430, "comment_id": 87159934, "body": "@Davide sure, but you didn&#39;t qualify it with any warnings or explanation.  Any newbie who reads that comment might use it without this knowledge and thus introduce sub-par and/or non-idiomatic code, such as by mis-using underscores."}, {"owner": {"reputation": 1191, "user_id": 5379668, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/57bc0deab1904ce43d7b70aa31103cd8?s=128&d=identicon&r=PG&f=1", "display_name": "Davide", "link": "https://stackoverflow.com/users/5379668/davide"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524874536, "post_id": 50071430, "comment_id": 87159992, "body": "@Shepmaster If I could answer the question I would be very pleased to explain the code with a nice formatting (including the underscore)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1191, "user_id": 5379668, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/57bc0deab1904ce43d7b70aa31103cd8?s=128&d=identicon&r=PG&f=1", "display_name": "Davide", "link": "https://stackoverflow.com/users/5379668/davide"}, "edited": false, "score": 0, "creation_date": 1524874759, "post_id": 50071430, "comment_id": 87160021, "body": "@Davide feel free to answer <a href=\"https://stackoverflow.com/questions/38359231/how-do-i-convert-from-a-char-array-char-n-to-a-string-slice-str\">the question this is an exact duplicate of</a>."}, {"owner": {"reputation": 4204, "user_id": 414121, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/fb7188d8be002ece64870dffe9ec6fa7?s=128&d=identicon&r=PG", "display_name": "polemon", "link": "https://stackoverflow.com/users/414121/polemon"}, "edited": false, "score": 0, "creation_date": 1524877810, "post_id": 50071430, "comment_id": 87160574, "body": "OK, well, I was confused, because the other question talks about a <code>vec&lt;A&gt;</code>, rather than a static, primitive array. Since it is static, do I still need to make a <code>.cloned()</code>? Right now, I&#39;ve tried <code>ALPH.into_iter().collect()</code>, seems to work, etc."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524930873, "post_id": 50071430, "comment_id": 87172694, "body": "@polemon that&#39;s fine, that is actually an enhancement to Rust since that answer was created. I&#39;ve updated it accordingly."}], "owner": {"reputation": 4204, "user_id": 414121, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/fb7188d8be002ece64870dffe9ec6fa7?s=128&d=identicon&r=PG", "display_name": "polemon", "link": "https://stackoverflow.com/users/414121/polemon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1345, "favorite_count": 0, "closed_date": 1524872876, "answer_count": 0, "score": 0, "last_activity_date": 1524872993, "creation_date": 1524871715, "last_edit_date": 1524872786, "question_id": 50071430, "link": "https://stackoverflow.com/questions/50071430/how-to-create-a-string-from-an-array-of-chars", "closed_reason": "Duplicate", "title": "How to create a string from an array of chars?", "body": "<p>In the global scope, I have the following definition:</p>\n\n<pre><code>static ALPH: [char; 25] = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O' ];\n</code></pre>\n\n<p>In my <code>main()</code>, I'd like to print that entire array, either by element or concatenated into a string, but I have no clue how.</p>\n\n<p>I tried doing the following:</p>\n\n<pre><code>let s: String = ALPH.to_string();\n</code></pre>\n\n<p>and then printing the string <code>s</code>, but Rust complains about traits not being satisfied.</p>\n\n<p>I tried the usual searching for a solution, but I can only find examples using a <code>Vec</code>, not an array like this.</p>\n\n<p>I'm just starting out with Rust, so the strict type adherence is a bit confusing to me, but I'm also not familiar with what libraries I should use.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1524865183, "creation_date": 1524865183, "answer_id": 50070628, "question_id": 50070414, "link": "https://stackoverflow.com/questions/50070414/how-to-convert-stdfmtarguments-to-a-string/50070628#50070628", "title": "How to convert std::fmt::Arguments to a string?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\" rel=\"noreferrer\"><code>ToString</code></a>:</p>\n\n<pre><code>fn example(a: std::fmt::Arguments) -&gt; String {\n    a.to_string()\n}\n</code></pre>\n\n<p>Or use <a href=\"https://doc.rust-lang.org/std/macro.format.html\" rel=\"noreferrer\"><code>format!</code></a>:</p>\n\n<pre><code>fn example(a: std::fmt::Arguments) -&gt; String {\n    format!(\"{}\", a)\n}\n</code></pre>\n\n<p>Any of the other ways of using the formatting machinery will also work.</p>\n\n<p>You could have figured this out yourself by looking at the <a href=\"https://doc.rust-lang.org/std/fmt/struct.Arguments.html\" rel=\"noreferrer\">documentation for <code>Arguments</code></a> and making note of what methods and traits it implements:</p>\n\n<pre><code>impl&lt;'a&gt; Debug for Arguments&lt;'a&gt;\nimpl&lt;'a&gt; Clone for Arguments&lt;'a&gt;\nimpl&lt;'a&gt; Display for Arguments&lt;'a&gt;\nimpl&lt;'a&gt; Copy for Arguments&lt;'a&gt;\n</code></pre>\n\n<p><code>Copy</code> and <code>Clone</code> aren't relevant here, but <code>Debug</code> and <code>Display</code> are.</p>\n"}], "owner": {"reputation": 543, "user_id": 6861720, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/edfbcf83eddb9c18f9ed3e6c0619ddaf?s=128&d=identicon&r=PG&f=1", "display_name": "Dragonight", "link": "https://stackoverflow.com/users/6861720/dragonight"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 0, "accepted_answer_id": 50070628, "answer_count": 1, "score": 1, "last_activity_date": 1524865354, "creation_date": 1524863705, "last_edit_date": 1524865354, "question_id": 50070414, "link": "https://stackoverflow.com/questions/50070414/how-to-convert-stdfmtarguments-to-a-string", "title": "How to convert std::fmt::Arguments to a string?", "body": "<p>I would like to convert a <code>std::fmt::Arguments</code> to a string type. However, since the fields of <code>Arguments</code> are private, I cannot directly convert it into a string.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1524860470, "post_id": 50069745, "comment_id": 87155974, "body": "This has nothing to do with Rust and is an artifact of how floating point numbers work. <a href=\"http://floating-point-gui.de/\" rel=\"nofollow noreferrer\">What Every Programmer Should Know About Floating-Point Arithmetic</a>."}, {"owner": {"reputation": 132, "user_id": 8132589, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-J4bjThgKSww/AAAAAAAAAAI/AAAAAAAAAjo/AG9quxXqD90/photo.jpg?sz=128", "display_name": "Matias Alvin", "link": "https://stackoverflow.com/users/8132589/matias-alvin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524860902, "post_id": 50069745, "comment_id": 87156151, "body": "Ah I see, guess I forgot the basic. Thank you"}], "owner": {"reputation": 132, "user_id": 8132589, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-J4bjThgKSww/AAAAAAAAAAI/AAAAAAAAAjo/AG9quxXqD90/photo.jpg?sz=128", "display_name": "Matias Alvin", "link": "https://stackoverflow.com/users/8132589/matias-alvin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 32, "favorite_count": 0, "closed_date": 1524860681, "answer_count": 0, "score": 0, "last_activity_date": 1524860521, "creation_date": 1524860346, "last_edit_date": 1524860521, "question_id": 50069745, "link": "https://stackoverflow.com/questions/50069745/why-does-division-of-a-floating-point-number-have-incorrect-trailing-digits", "closed_reason": "Duplicate", "title": "Why does division of a floating point number have incorrect trailing digits?", "body": "<p>I'm trying to create a function that return an intersect point between two lines. Below is my code.</p>\n\n<pre><code>fn main() {\n    let line_1: (f64, f64) = (-2.0, 9.5);\n    let line_2: (f64, f64) = (1.0, -2.0);\n\n    let x_1: f64 = (line_2.1 - line_1.1) / (line_1.0 - line_2.0);\n    let y_1: f64 = line_1.0.mul_add(x_1, line_1.1);\n\n    let x_2: f64 = (line_1.1 - line_2.1) / (line_2.0 - line_1.0);\n    let y_2: f64 = line_2.0.mul_add(x_2, line_2.1);\n\n    println!(\"x_1: {}, y_1: {}\", x_1, y_1);\n    println!(\"x_2: {}, y_2: {}\", x_2, y_2);\n}\n</code></pre>\n\n<p>Mathematically x_1 will be equal with x_2 and y_1 will be equal with y_2. Instead, this is the value that's printed.</p>\n\n<pre><code>x_1: 3.8333333333333335, y_1: 1.833333333333333\nx_2: 3.8333333333333335, y_2: 1.8333333333333335\n</code></pre>\n\n<p>The value isn't supposed to have five in it, and y_1 value is different than y_2. Is this some sort of bug, or there's some steps that I miss on handling floating data?</p>\n"}, {"tags": ["rust", "llvm", "rust-cargo", "llvm-codegen"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524856062, "post_id": 50068793, "comment_id": 87154013, "body": "Not relevant to your question, but why do you want to know?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1524856369, "post_id": 50068793, "comment_id": 87154146, "body": "Note that you&#39;ve linked to a non-official fork of Rust&#39;s LLVM fork, and it was last updated <b>5 years ago</b>. I don&#39;t know why you picked that source, but it&#39;s highly unlikely to still be accurate."}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524946316, "post_id": 50068793, "comment_id": 87177193, "body": "@Shepmaster I&#39;m a grad student working on properties of programming languages. We work with LLVM IR, because many languages compile down to it. Didn&#39;t realize that was a fork, I&#39;ll try to find a list of official passes. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1607039262, "post_id": 50669339, "comment_id": 115155072, "body": "By default, if using the 3 optimization level, are all optimization passes availaible enabled?"}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 3, "last_activity_date": 1528048381, "creation_date": 1528048381, "answer_id": 50669339, "question_id": 50068793, "link": "https://stackoverflow.com/questions/50068793/what-llvm-passes-are-performed-on-emitted-llvm-ir/50669339#50669339", "title": "What LLVM passes are performed on emitted LLVM IR?", "body": "<blockquote>\n  <p>What LLVM passes, if any, have been performed on the emitted IR?</p>\n</blockquote>\n\n<p>If you are using the nightly compiler, you could use the <code>-Z print-llvm-passes</code> to let LLVM print what passes are run. I'd recommend passing in <code>-Z no-parallel-llvm</code> and <code>-C codegen-units=1</code> too to make the output cleaner and less repetitive.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc -C codegen-units=1 -Z no-parallel-llvm -Z print-llvm-passes 1.rs\n\nPass Arguments:  -tti -targetlibinfo -verify -ee-instrument\nTarget Transform Information\nTarget Library Information\n  FunctionPass Manager\n    Module Verifier\n    Instrument function entry/exit with calls to e.g. mcount() (pre inlining)\nPass Arguments:  -tti -assumption-cache-tracker -profile-summary-info -targetlibinfo -forceattrs -basiccg -always-inline\nTarget Transform Information\nAssumption Cache Tracker\nProfile summary info\nTarget Library Information\n  ModulePass Manager\n    Force set function attributes\n    CallGraph Construction\n    Call Graph SCC Pass Manager\n      Inliner for always_inline functions\n...\n</code></pre>\n\n<p>(The <code>-Z print-llvm-passes</code> flag is equivalent to <code>-C llvm-args=-debug-pass=Structure</code> which is usable on stable rustc. However, without <code>-Z no-parallel-llvm</code> the output is quite unreadable.)</p>\n\n<hr>\n\n<blockquote>\n  <p>Is there any way to specify what passes you would like performed before emitting IR?</p>\n</blockquote>\n\n<p>You could append additional passes using the <a href=\"https://doc.rust-lang.org/nightly/rustc/codegen-options/index.html#passes\" rel=\"nofollow noreferrer\"><code>-C passes</code> argument</a>. You may also clear the default optimization passes with <a href=\"https://doc.rust-lang.org/nightly/rustc/codegen-options/index.html#no-prepopulate-passes\" rel=\"nofollow noreferrer\"><code>-C no-prepopulate-passes</code></a>. Example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc -C passes=print-alias-sets 1.rs\n\nAlias sets for function 'Alias sets for function '_ZN3std3sys4unix7process14process_common8ExitCode6as_i3217h65e06df78d6f4a47E':\n_ZN3std2rt10lang_start17hd8fe8cd552faf2aaE':\n...\n</code></pre>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 839, "favorite_count": 0, "accepted_answer_id": 50669339, "answer_count": 1, "score": 2, "last_activity_date": 1564862825, "creation_date": 1524855848, "last_edit_date": 1564862825, "question_id": 50068793, "link": "https://stackoverflow.com/questions/50068793/what-llvm-passes-are-performed-on-emitted-llvm-ir", "title": "What LLVM passes are performed on emitted LLVM IR?", "body": "<p>If I compile with <code>cargo rustc -- --emit=llvm-ir</code> the compiler will emit LLVM IR.</p>\n\n<p><a href=\"https://github.com/vhbit/rust-llvm/blob/master/docs/Passes.rst\" rel=\"nofollow noreferrer\">Here are the LLVM passes that Rust uses.</a> What LLVM passes, if any, have been performed on the emitted IR?</p>\n\n<p>Is there any way to specify what passes you would like performed before emitting IR?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1524845384, "post_id": 50066190, "comment_id": 87149225, "body": "I think this is the same problem as <a href=\"https://stackoverflow.com/q/43590162/155423\">When returning the outcome of consuming a StdinLock, why was the borrow to stdin retained?</a>. TL;DR we think it&#39;s a bug, but don&#39;t know exactly where. Non-lexical lifetimes fixes it. Note that the linked issue matches well: <a href=\"https://github.com/rust-lang/rust/issues/21114\" rel=\"nofollow noreferrer\">There are a number of situations where a trailing expression like a for-loop ends up being treated by the region lifetime inferencer as requiring a much longer lifetime assignment than what you would intuitively expect.</a>"}], "owner": {"reputation": 263, "user_id": 2752617, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fa102a12ce01b661aa42b11fc271bf9?s=128&d=identicon&r=PG&f=1", "display_name": "tanagumo", "link": "https://stackoverflow.com/users/2752617/tanagumo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 80, "favorite_count": 0, "closed_date": 1525107362, "answer_count": 0, "score": 4, "last_activity_date": 1524844844, "creation_date": 1524844662, "last_edit_date": 1524844844, "question_id": 50066190, "link": "https://stackoverflow.com/questions/50066190/why-does-adding-a-semicolon-to-an-if-let-avoid-a-borrow-checker-error", "closed_reason": "Duplicate", "title": "Why does adding a semicolon to an if let avoid a borrow checker error?", "body": "<p>I'm struggling with the borrow checker. This code fails to compile:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    {\n        let clone = Arc::clone(&amp;counter);\n        thread::spawn(move || {\n            if let Ok(mut v) = clone.lock() {\n                *v = 10;\n            }\n        });\n    }\n}\n</code></pre>\n\n<p>Error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `clone` does not live long enough\n  --&gt; src/main.rs:9:32\n   |\n9  |             if let Ok(mut v) = clone.lock() {\n   |                                ^^^^^ borrowed value does not live long enough\n...\n12 |         });\n   |         - `clone` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>If I append <code>;</code> to <code>if let</code>, the code compiles:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    {\n        let clone = Arc::clone(&amp;counter);\n        thread::spawn(move || {\n            if let Ok(mut v) = clone.lock() {\n                *v = 10;\n            };  // &lt;= append \";\"\n        });\n    }\n}\n</code></pre>\n\n<p>Why does the former fail to compile? Is it correct behavior?</p>\n\n<p>My environment:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.27.0-nightly (ac3c2288f 2018-04-18)\nbinary: rustc\ncommit-hash: ac3c2288f9f9d977acb46406ba60033d65165a7b\ncommit-date: 2018-04-18\nhost: x86_64-apple-darwin\nrelease: 1.27.0-nightly\nLLVM version: 6.0\n</code></pre>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1524841432, "post_id": 50065072, "comment_id": 87147049, "body": "You must box your trait objects."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1524841750, "post_id": 50065072, "comment_id": 87147269, "body": "I think <a href=\"https://stackoverflow.com/questions/23437179/traits-as-a-return-value-from-a-function\">Traits as a return value from a function</a> is a considerably closer match."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1524843637, "post_id": 50065072, "comment_id": 87148313, "body": "<a href=\"https://play.rust-lang.org/?gist=d2e2f8ee22ef8c8772f00878b25b3838&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Here&#39;s a working example</a> applying a technique from the first marked duplicate. You could also make <code>new</code> return <code>Box&lt;Entry&gt;</code> directly, or <a href=\"https://play.rust-lang.org/?gist=6789c4a56974eb9b2c9c98127bb66123&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">take <code>new</code> out of the <code>Entry</code> trait entirely</a>; your example doesn&#39;t need the constructor to be part of the trait."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1524925613, "post_id": 50065072, "comment_id": 87171241, "body": "It&#39;s best not to edit new questions into old questions. Feel free to ask a new question, but first, <a href=\"https://play.rust-lang.org/?gist=92fda4088b2839a0effdf4b1dd16383b&amp;version=undefined&amp;mode=undefined\" rel=\"nofollow noreferrer\">take a look at this fixed version</a>. You can&#39;t ever have an object of type <code>Entity</code>, because <code>Entity</code> is an unsized type and unsized types always have to be behind some kind of pointer (see also <a href=\"https://stackoverflow.com/questions/45116984/the-trait-cannot-be-made-into-an-object\">this question</a>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524928405, "post_id": 50065072, "comment_id": 87171978, "body": "Besides, your second issue was <i>already addressed</i> <a href=\"https://stackoverflow.com/questions/38159771/why-can-a-trait-not-construct-itself\">by a duplicate</a>."}], "owner": {"reputation": 685, "user_id": 6048574, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/959c13b271fe9dcc816858f51abdb5ed?s=128&d=identicon&r=PG&f=1", "display_name": "Ukonn Ra", "link": "https://stackoverflow.com/users/6048574/ukonn-ra"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 493, "favorite_count": 0, "closed_date": 1524843782, "answer_count": 0, "score": 0, "last_activity_date": 1524928385, "creation_date": 1524840934, "last_edit_date": 1524928385, "question_id": 50065072, "link": "https://stackoverflow.com/questions/50065072/how-to-imply-returning-a-value-that-uses-dynamic-dispatch-in-rust", "closed_reason": "Duplicate", "title": "How to imply returning a value that uses dynamic dispatch in Rust?", "body": "<p>=== edit at 2018-04-28 10:17AM ===  </p>\n\n<p>Thanks for your answers, but when I follow your answers using <code>Box&lt;&gt;</code>, I found a situation where it won't work still.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=211845d953cd9012f6f214aa5d81332d&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=211845d953cd9012f6f214aa5d81332d&amp;version=stable&amp;mode=debug</a>  </p>\n\n<p>Bug info is:</p>\n\n<pre><code>error[E0038]: the trait `Entity` cannot be made into an object\n  --&gt; src/main.rs:20:5\n   |\n20 |     entities: Vec&lt;Box&lt;Entity&gt;&gt;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Entity` cannot be made into an object\n   |\n   = note: the trait cannot require that `Self : Sized`\n</code></pre>\n\n<p>So I wonder what is <code>cannot be made into an object</code>? How can I fix the problem?</p>\n\n<p>=== original answer ===<br>\nI want to implement a hierarchical structure like Java's interface/abstract class with a normal class:</p>\n\n<pre><code>trait Entry {\n    fn new() -&gt; Entry;\n}\n\nstruct EntryA {}\nimpl Entry for EntryA {\n    fn new() -&gt; EntryA {\n        // I want to return EntryA rather Entry here, just like dynamic dispatch in Java\n    }\n}\n\nstruct EntryB {}\nimpl Entry for EntryB {\n    fn new() -&gt; EntryB {\n        // Another Entry struct\n    }\n}\n</code></pre>\n\n<p>Now I want to create a <code>Vec</code> or an array containing the <code>Entry</code>s:</p>\n\n<pre><code>fn create_an_array() -&gt; [Something to write here] {\n    let mut vec: Vec&lt;Entry&gt; = vec![];\n    let ea = EntryA::new();\n    let eb = EntryB::new();\n    vec.push(ea);\n    vec.push(eb);\n    vec\n}\n</code></pre>\n\n<p>When I use the <code>Vec</code> created by <code>create_an_array()</code>, all the elements I get can just show the <code>Entry</code> facade, rather than the subclass in detail.</p>\n\n<p>However, the main problem is that when overriding the function, Rust considers not only the parameters but also the return type (Why you do that, Rust?!), so I cannot override <code>new()</code> in <code>EntryA</code> or <code>EntryB</code> because the function has a different return type than the <code>Entry</code> trait. </p>\n\n<p>How do I deal with the problem of dynamic dispatch?</p>\n"}, {"tags": ["reference", "rust", "traits"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524834538, "post_id": 50062978, "comment_id": 87142762, "body": "@ljedrz It may not be <i>exactly</i> the same. With <code>PartialEq</code>, it&#39;s quite likely that you&#39;ll want to use members of the concrete type, which means that you won&#39;t be able to implement it for the trait at all. More likely, what the OP tried (along the lines of <code>trait Trait: PartialEq</code>) is the right approach, but he didn&#39;t explain what problem he actually had with that..."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524834622, "post_id": 50062978, "comment_id": 87142810, "body": "@PeterHall fair enough."}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524835632, "post_id": 50062978, "comment_id": 87143461, "body": "@PeterHall  I will try to improve the question"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1524934613, "post_id": 50062978, "comment_id": 87173873, "body": "Why is <code>*self as *const _ == *other as *const _</code> (just comparing the trait object references) not sufficient?"}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525010700, "post_id": 50062978, "comment_id": 87190602, "body": "@trentcl If the trait has several methods, can this approach be used reliably?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525014299, "post_id": 50062978, "comment_id": 87191795, "body": "Please <a href=\"https://stackoverflow.com/posts/50062978/edit\">edit</a> your question to explain why it&#39;s not a duplicate of <a href=\"https://stackoverflow.com/q/25339603/155423\">How to test for equality between trait objects?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525014616, "post_id": 50062978, "comment_id": 87191917, "body": "<i>This approach isn&#39;t reliable [...] and didn&#39;t work using either as <code>usize</code> or as <code>*const _</code></i> \u2014 what do you mean by &quot;reliable&quot;? What do you mean by &quot;didn&#39;t work&quot;? These are crucial bits of information we need to avoid wasting our own time investigating avenues."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525021280, "post_id": 50062978, "comment_id": 87194223, "body": "@Caio I guess I don&#39;t know what effect you&#39;re trying to achieve, so I don&#39;t know what you mean by &quot;reliably&quot;. It will give <code>false</code> when the two references are to distinct objects of the same type, so maybe it&#39;s not what you want. But it can never give <code>true</code> when the objects are of different type. It behaves reliably in that sense."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1525027993, "post_id": 50062978, "comment_id": 87196417, "body": "@Caio I&#39;m fairly confident that this question, in its current form, in an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY Problem</a>. It seems likely that you don&#39;t actually care about testing if that specific method is the same, but that you&#39;ve arrived there after previous work. My guess is that you actually want to perform a comparison based on if the two concrete types are the same, or something else a few steps back. If you <a href=\"https://stackoverflow.com/posts/50062978/edit\">edit</a> your question to focus on the problem you are trying to solve, it&#39;s more likely you will get an answer."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1525162852, "post_id": 50062978, "comment_id": 87243784, "body": "It seems like you&#39;re basically trying to reinvent the <a href=\"https://doc.rust-lang.org/std/any/index.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/any/index.html</a> Any part of the standard library. What you want is something like <code>if a.get_type_id() == b.get_type_id() { a.downcast_ref() == b.downcast_ref() }</code>"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1525162984, "post_id": 50062978, "comment_id": 87243830, "body": "But I agree this seems like more of an X Y problem"}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "edited": false, "score": 0, "creation_date": 1525171620, "post_id": 50062978, "comment_id": 87247329, "body": "trentcl, Shepmaster: The security concern was a IRC suggestion that worried me. Someone who I forgot the name told me that the compiler or the linker could erase/deduplicate the memory location of the pointer used for the PartialEq comparation in a optimization pass"}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525172879, "post_id": 50062978, "comment_id": 87247871, "body": "@Shepmaster Sorry for the possible misunderstanding, I will edit the question accordingly"}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525189547, "post_id": 50062978, "comment_id": 87256370, "body": "@trentcl Your <code>*self as *const _ == *other as *const _</code> suggestion solves my problem and you might want to answer to receive the bounty"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525190299, "post_id": 50062978, "comment_id": 87256775, "body": "Actually, I don&#39;t think it does. Compare <a href=\"https://play.rust-lang.org/?gist=2284e931085e0ad932c809ed9aaad1d2&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">this version</a> (the <code>main</code> function is the only thing I changed). If that&#39;s not what you want, it&#39;ll take some more fancy techniques."}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525194175, "post_id": 50062978, "comment_id": 87258817, "body": "@trentcl You are right, <code>*self as *const _ == *other as *const _</code> is only true for the same instance. I guess that what I am asking is just impossible because a discriminator method is needed to implement <code>PartialEq</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525195495, "post_id": 50062978, "comment_id": 87259435, "body": "&quot;for implementations instances that have the same inner content&quot; \u2014 That sounds exactly like the problem addressed in <a href=\"https://stackoverflow.com/q/25339603/155423\">How to test for equality between trait objects?</a>. In that case, it uses <code>PartialEq</code> to provide the method that returns the boolean, but the idea is the same. <b>Please</b> <a href=\"https://stackoverflow.com/posts/50062978/edit\">edit</a> your question to explain how it&#39;s not the same."}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525196674, "post_id": 50062978, "comment_id": 87260049, "body": "@Shepmaster It seems like it is the same thing. You can mark this question as duplicated or I can close it myself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525196756, "post_id": 50062978, "comment_id": 87260095, "body": "@Caio if you would do it, it&#39;s probably better. I get a lot of... anger... from people seeing I have closed duplicates. Having the OP&#39;s name on there helps a lot ;-)"}, {"owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525197543, "post_id": 50062978, "comment_id": 87260449, "body": "@Shepmaster Deal. I just need to contact some moderator or wait the bounty period."}], "owner": {"reputation": 2920, "user_id": 210304, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3c70d1833ed67198b6e364834b13c770?s=128&d=identicon&r=PG", "display_name": "Caio", "link": "https://stackoverflow.com/users/210304/caio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 682, "favorite_count": 0, "closed_date": 1525708618, "answer_count": 0, "score": 4, "last_activity_date": 1525189031, "creation_date": 1524834055, "last_edit_date": 1525189031, "question_id": 50062978, "link": "https://stackoverflow.com/questions/50062978/is-it-possible-to-implement-partialeq-for-a-trait-reference-that-returns-true", "closed_reason": "Duplicate", "title": "Is it possible to implement `PartialEq` for a trait reference that returns `true` for implementations instances that have the same inner content?", "body": "<p>Is it possible to implement <code>PartialEq</code> for a trait reference that returns <code>true</code> for implementations instances that have the same inner content? The use case is the following snippet:</p>\n\n<pre><code>trait Trait: ::std::fmt::Debug {\n    fn method(&amp;self, i32) -&gt; ();\n}\n\n#[derive(Debug, PartialEq)]\nstruct Struct&lt;'a&gt; {\n    vec: Vec&lt;&amp;'a Trait&gt;,\n}\n\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct AnotherStruct {\n   int: i32\n}\n\nimpl From&lt;AnotherStruct&gt; for i32 {\n    fn from(another_struct: AnotherStruct) -&gt; i32 {\n        another_struct.int\n    }\n}\n\nimpl&lt;T&gt; Trait for T\nwhere\n    T: Copy + ::std::convert::Into&lt;i32&gt; + ::std::fmt::Debug\n{\n    fn method(&amp;self, value: i32) -&gt; () {\n        let into: i32 = (*self).into();\n        println!(\"{} * {} = {}\", into, value, into * value);\n    }\n}\n\nfn main() {\n    let a = Struct { vec: vec![&amp;AnotherStruct { int: 5 }, &amp;10i8] };\n    let b = Struct { vec: vec![&amp;AnotherStruct { int: 5 }, &amp;10i8] };\n    let c = Struct {\n        vec: vec![\n            &amp;AnotherStruct { int: 3 },\n            &amp;3i16,\n            &amp;3u16,\n            &amp;AnotherStruct { int: 3 }\n        ]\n    };\n    assert_eq!(a, b);\n    assert_eq!(c.vec[0], c.vec[3]);\n    c.vec[1].method(5);\n}\n</code></pre>\n\n<p>Can you see in the final lines that I trying to compare two instances of <code>AnotherStruct</code> that have the same <code>int</code> value? Unfortunately, this code doesn't compile (No <code>PartialEq</code> for <code>&amp;Trait</code>) and since <code>Trait</code> isn't a real object, it isn't possible to store traits references inside a vector using <code>trait Trait: PartialEq</code> or <code>trait Trait&lt;'a&gt;: PartialEq&lt;&amp;'a Self&gt;</code>. Note: <code>Vec&lt;Box&lt;Trait&gt;&gt;</code> isn't a viable option because of the runtime cost of memory allocation.</p>\n\n<p>Knowing this limitations and also knowing that the method returning type can't be used as a unique discriminator, I am sharing some attempts I made in hope to shed some light for someone willing to help.</p>\n\n<ol>\n<li><p>Use the method function pointer like <a href=\"https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src/libcore/ptr.rs#L2342\" rel=\"noreferrer\">Rust did for <code>fn</code> pointers</a> to implement <code>PartialEq</code>. After talking with two nice people on IRC about this strategy, they basically told me that I could try casting using <code>as *const _</code> but it isn't reliable because of possible code deduplication.</p>\n\n<pre><code>// Compiler error: attempted to take value of method `method` on type `&amp;&amp;'a Trait + 'a`\n\ntrait Trait {\n    fn method(&amp;self, i32) -&gt; ();\n}\n\nimpl&lt;'a&gt; PartialEq for &amp;'a Trait {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        *self.method as *const _ == *other.method as *const _\n    }\n}\n\n#[derive(PartialEq)]\nstruct Struct&lt;'a&gt; {\n    vec: Vec&lt;&amp;'a Trait&gt;,\n}\n</code></pre></li>\n<li><p>Return the method as a function from another method and use it as a discriminator. This approach works but isn't very ergonomic and I don't consider it a solution.</p>\n\n<pre><code>trait Trait {\n    fn another_method(&amp;self) -&gt; fn(i32);\n}\n\nimpl&lt;'a&gt; PartialEq for &amp;'a Trait {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.another_method() == other.another_method()\n    }\n}\n\n#[derive(PartialEq)]\nstruct Struct&lt;'a&gt; {\n    vec: Vec&lt;&amp;'a Trait&gt;,\n}\n</code></pre></li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 15, "last_activity_date": 1524844480, "last_edit_date": 1524844480, "creation_date": 1524812120, "answer_id": 50056925, "question_id": 50056778, "link": "https://stackoverflow.com/questions/50056778/how-can-you-easily-borrow-a-vecvect-as-a-t/50056925#50056925", "title": "How can you easily borrow a Vec&lt;Vec&lt;T&gt;&gt; as a &amp;[&amp;[T]]?", "body": "<p>You <strong>cannot</strong>.</p>\n\n<p>By definition, a slice is a <em>view</em> on an existing collection of element. It cannot conjure up new elements, or new views of existing elements, out of thin air.</p>\n\n<p>This stems from the fact that Rust generic parameters are generally <strong>invariants</strong>. That is, while a <code>&amp;Vec&lt;T&gt;</code> can be converted as a <code>&amp;[T]</code> after a fashion, the <code>T</code> in those two expressions MUST match.</p>\n\n<hr>\n\n<p>A possible work-around is to go generic yourself.</p>\n\n<pre><code>use std::fmt::Debug;\n\nfn use_slice_of_slices&lt;U, T&gt;(slice_of_slices: &amp;[U])\nwhere\n    U: AsRef&lt;[T]&gt;,\n    T: Debug,\n{\n    for slice in slice_of_slices {\n        println!(\"{:?}\", slice.as_ref());\n    }\n}\n\nfn main() {\n    let vec_of_vec = vec![vec![0]; 10];\n    use_slice_of_slices(&amp;vec_of_vec);\n}\n</code></pre>\n\n<p>Instead of imposing what the type of the element should be, you instead accept any type... but place a bound that it must be coercible to <code>[T]</code>.</p>\n\n<p>This has nearly the same effect, as then the generic function can only manipulate <code>[T]</code> as a slice. As a bonus, it works with multiple types (any which can be coerced into a <code>[T]</code>).</p>\n"}], "owner": {"reputation": 603, "user_id": 5426649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06e8dc32d97b1f0deb88bba090f58e46?s=128&d=identicon&r=PG&f=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5426649/olivier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1156, "favorite_count": 0, "accepted_answer_id": 50056925, "answer_count": 1, "score": 12, "last_activity_date": 1524844537, "creation_date": 1524811594, "last_edit_date": 1524844537, "question_id": 50056778, "link": "https://stackoverflow.com/questions/50056778/how-can-you-easily-borrow-a-vecvect-as-a-t", "title": "How can you easily borrow a Vec&lt;Vec&lt;T&gt;&gt; as a &amp;[&amp;[T]]?", "body": "<p>How can you easily borrow a vector of vectors as a slice of slices?</p>\n\n<pre><code>fn use_slice_of_slices&lt;T&gt;(slice_of_slices: &amp;[&amp;[T]]) {\n    // Do something...\n}\n\nfn main() {\n    let vec_of_vec = vec![vec![0]; 10];\n    use_slice_of_slices(&amp;vec_of_vec);\n}\n</code></pre>\n\n<p>I will get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:7:25\n  |\n7 |     use_slice_of_slices(&amp;vec_of_vec);\n  |                         ^^^^^^^^^^^ expected slice, found struct `std::vec::Vec`\n  |\n  = note: expected type `&amp;[&amp;[_]]`\n             found type `&amp;std::vec::Vec&lt;std::vec::Vec&lt;{integer}&gt;&gt;`\n</code></pre>\n\n<p>I could just as easily define <code>use_slice_of_slices</code> as</p>\n\n<pre><code>fn use_slice_of_slices&lt;T&gt;(slice_of_slices: &amp;[Vec&lt;T&gt;]) {\n    // Do something\n}\n</code></pre>\n\n<p>and the outer vector would be borrowed as a slice and all would work. But what if, just for the sake of argument, I want to borrow it as a slice of slices?</p>\n\n<p>Assuming automatic coercing from <code>&amp;Vec&lt;Vec&lt;T&gt;&gt;</code> to <code>&amp;[&amp;[T]]</code> is not possible, then how can I define a function <code>borrow_vec_of_vec</code> as below?</p>\n\n<pre><code>fn borrow_vec_of_vec&lt;'a, T: 'a&gt;(vec_of_vec: Vec&lt;Vec&lt;T&gt;&gt;) -&gt; &amp;'a [&amp;'a [T]] {\n    // Borrow vec_of_vec...\n}\n</code></pre>\n\n<p>To put it in another way, how could I implement <code>Borrow&lt;[&amp;[T]]&gt;</code> for <code>Vec&lt;Vec&lt;T&gt;&gt;</code>?</p>\n"}, {"tags": ["generics", "rust", "closures"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1524812395, "post_id": 50055756, "comment_id": 87130325, "body": "What you ask is not clear, you want fix your first snipped or your second ?"}, {"owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1524852122, "post_id": 50055756, "comment_id": 87152219, "body": "@Shepmaster is it really necessary to reorder imports to alphabetical in your edit? Is this the preferred practice for Rust or just your personal preference?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1524852419, "post_id": 50055756, "comment_id": 87152374, "body": "@MikeS. I copy all code here, paste it in the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a>, run <a href=\"https://github.com/rust-lang-nursery/rustfmt\" rel=\"nofollow noreferrer\">Rustfmt</a> on it, then copy it back. That&#39;s why my revision comment says &quot;standard Rust indentation and style&quot; and it changes much more than just those imports. I do this so that all Q&amp;A have a consistent style that makes it easier for everyone who will ever look at these posts to not have to adapt to everyone&#39;s individual style just to get an answer. In fact, there are some changes Rustfmt makes that I disagree with, personally."}, {"owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 0, "creation_date": 1524852535, "post_id": 50055756, "comment_id": 87152441, "body": "Thanks for info. That makes sense. I haven&#39;t heard of <code>Rustfmt</code> yet so will check that out."}], "answers": [{"comments": [{"owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 0, "creation_date": 1524839402, "post_id": 50059698, "comment_id": 87145856, "body": "Thanks I will try this and report. By adding the clone I assume you avoid needing the lifetime and passing by reference. Any idea on the performance hit using clone or is that acceptable practice and negligible impact?"}, {"owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 0, "creation_date": 1524839586, "post_id": 50059698, "comment_id": 87145979, "body": "In first attempt (I tried before I believe) I get a lifetime issue with the return in the closure...   ```   --&gt; src/main.rs:40:10    | 40 |         &amp;num    |          ^^^ borrowed value does not live long enough 41 |     });    |     - <code>num</code> dropped here while still borrowed ```  I&#39;ll try omitting lifetimes and using clone..."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 0, "creation_date": 1524839839, "post_id": 50059698, "comment_id": 87146124, "body": "Hi Mike, try <a href=\"https://play.rust-lang.org/?gist=7e41c73b678d629c4ac408ee8914ee9c&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">this</a>"}, {"owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 0, "creation_date": 1524840186, "post_id": 50059698, "comment_id": 87146326, "body": "Thanks! The <code>Clone</code> method does compile and work. The latest method works too. Accepting answer but I&#39;d edit the top part and place your newest snippet in for others&#39; benefit. Which method is recommended (using lifetimes and omitting clone, or simplifying syntax and using clone)?"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 1, "creation_date": 1524840764, "post_id": 50059698, "comment_id": 87146642, "body": "Personally I prefer the solution where the hashmap owns the values because sounds more idiomatic to me, but it is my opinion."}, {"owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "edited": false, "score": 0, "creation_date": 1524840966, "post_id": 50059698, "comment_id": 87146772, "body": "Thanks. Wrapping head around Rust concepts and it seems most stumble with the ownership, borrow, lifetime at first. It&#39;s all making more sense so appreciate. I&#39;ll review some popular crates&#39; source soon and hopefully that will illustrate accepted styles. ;-)"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 2, "last_activity_date": 1524844284, "last_edit_date": 1524844284, "creation_date": 1524822418, "answer_id": 50059698, "question_id": 50055756, "link": "https://stackoverflow.com/questions/50055756/is-it-possible-to-use-a-single-generic-for-both-key-and-value-of-a-hashmap/50059698#50059698", "title": "Is it possible to use a single generic for both key and value of a HashMap?", "body": "<p>Your implementation does not compile because lifetime bounds have to be declared only after <code>impl</code>:</p>\n\n<pre><code>impl&lt;'a, T: 'a, K: 'a, V: 'a&gt; Cacher&lt;'a, T, K, V&gt;\nwhere\n    T: Fn(&amp;'a K) -&gt; &amp;'a V,\n    K: Hash + Eq,\n{\n    fn new(calculation: T) -&gt; Cacher&lt;'a, T, K, V&gt; {\n        Cacher {\n            calculation,\n            values: HashMap::new(),\n        }\n    }\n}\n</code></pre>\n\n<p>Storing references into the <code>HashMap</code> implies that you have to manage lifetimes and assure that the values referenced by <code>HashMap</code> outlive the <code>Cacher</code>.</p>\n\n<p>Another approach to consider may be to cache by values:</p>\n\n<pre><code>struct Cacher&lt;T, K, V&gt;\nwhere\n    T: Fn(K) -&gt; V,\n{\n    calculation: T,\n    value: HashMap&lt;K, V&gt;,\n}\n\nimpl&lt;T, K, V&gt; Cacher&lt;T, K, V&gt;\nwhere\n    T: Fn(K) -&gt; V,\n    K: Hash + Eq + Clone\n{\n    fn new(calculation: T) -&gt; Cacher&lt;T, K, V&gt; {\n        Cacher {\n            calculation,\n            value: HashMap::new(),\n        }\n    }\n\n    fn value(&amp; mut self, arg: K) -&gt; &amp;V {    \n        match self.value.entry(arg.clone()) {\n            Entry::Occupied(v) =&gt; v.into_mut(),\n            Entry::Vacant(v) =&gt;   v.insert((self.calculation)(arg)),\n        }\n    }\n}\n</code></pre>\n\n<p>Please note that in this solution I added the constraint that <code>K</code> is <code>Clone</code></p>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 2053125, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/tG60O.png?s=128&g=1", "display_name": "wembleyleach", "link": "https://stackoverflow.com/users/2053125/wembleyleach"}, "is_accepted": false, "score": 0, "last_activity_date": 1614046689, "creation_date": 1614046689, "answer_id": 66326119, "question_id": 50055756, "link": "https://stackoverflow.com/questions/50055756/is-it-possible-to-use-a-single-generic-for-both-key-and-value-of-a-hashmap/66326119#66326119", "title": "Is it possible to use a single generic for both key and value of a HashMap?", "body": "<p>This question's pretty old, but I found this question while browsing online to see if my solution was &quot;correct.&quot; I'll share it here, as it's slightly different that the accepted answer, and maintains the original signature for the <code>value</code> method in the book:</p>\n<pre><code>struct Cacher&lt;T, K, V&gt;\n    where T: Fn(K) -&gt; V,\n          K: Eq + Hash + Copy,\n          V: Copy {\n    calculation: T,\n    cache: HashMap&lt;K, V&gt;,\n}\n\nimpl&lt;T, K, V&gt; Cacher&lt;T, K, V&gt;\n    where T: Fn(K) -&gt; V,\n          K: Eq + Hash + Copy,\n          V: Copy {\n    fn new(calculation: T) -&gt; Cacher&lt;T, K, V&gt; {\n        Cacher {\n            calculation,\n            cache: HashMap::new(),\n        }\n    }\n\n    fn value(&amp;mut self, arg: K) -&gt; V {\n        match self.cache.get(&amp;arg) {\n            Some(&amp;v) =&gt; v,\n            None =&gt; {\n                let v = (self.calculation)(arg);\n                self.cache.insert(arg, v);\n                v\n            }\n        }\n    }\n}\n</code></pre>\n<p>Here I have explicit generic parameters for the key and value of the HashMap that will cache values for <code>Cacher</code>. <code>K</code> has trait bounds for <code>Eq</code>, <code>Hash</code>, and <code>Copy</code>, and <code>V</code> only needs the <code>Copy</code> trait bound.</p>\n"}], "owner": {"reputation": 4442, "user_id": 1522462, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8f9367af5636ec6666bac915f3dfea23?s=128&d=identicon&r=PG", "display_name": "Mike S.", "link": "https://stackoverflow.com/users/1522462/mike-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 689, "favorite_count": 1, "accepted_answer_id": 50059698, "answer_count": 2, "score": 2, "last_activity_date": 1614046689, "creation_date": 1524806824, "last_edit_date": 1524844211, "question_id": 50055756, "link": "https://stackoverflow.com/questions/50055756/is-it-possible-to-use-a-single-generic-for-both-key-and-value-of-a-hashmap", "title": "Is it possible to use a single generic for both key and value of a HashMap?", "body": "<p>In <a href=\"https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html\" rel=\"nofollow noreferrer\">chapter 13 of the Rust book</a>, you implement a <code>Cacher</code> to use memoization to demonstrate functional programming and how to speed up long-running tasks. As an extra challenge, they recommend making the <code>Cacher</code> allow multiple keys using a <code>HashMap</code> and also leveraging generics to allow more flexibility. </p>\n\n<blockquote>\n  <p>Try modifying <code>Cacher</code> to hold a hash map rather than a single value.\n  The keys of the hash map will be the <code>arg</code> values that are passed in,\n  and the values of the hash map will be the result of calling the\n  closure on that key. Instead of looking at whether <code>self.value</code> directly\n  has a <code>Some</code> or a <code>None</code> value, the value function will look up the <code>arg</code> in\n  the hash map and return the value if it\u2019s present. If it\u2019s not\n  present, the <code>Cacher</code> will call the closure and save the resulting value\n  in the hash map associated with its <code>arg</code> value.</p>\n  \n  <p>The second problem with the current <code>Cacher</code> implementation is that it\n  only accepts closures that take one parameter of type <code>u32</code> and return a\n  <code>u32</code>. We might want to cache the results of closures that take a string\n  slice and return <code>usize</code> values, for example. To fix this issue, try\n  introducing more generic parameters to increase the flexibility of the\n  <code>Cacher</code> functionality.</p>\n</blockquote>\n\n<p>I was able to implement the <code>HashMap</code>, however when trying to replace the closure definition <code>u32</code> with a generic type and use that as the signature of the <code>HashMap</code>, I run into an issue.</p>\n\n<pre><code>use std::collections::hash_map::Entry;\nuse std::collections::HashMap;\nuse std::thread;\nuse std::time::Duration;\n\nstruct Cacher&lt;'a, T&gt;\nwhere\n    T: Fn(&amp;'a u32) -&gt; &amp;'a u32,\n{\n    calculation: T,\n    values: HashMap&lt;&amp;'a u32, &amp;'a u32&gt;,\n}\n\nimpl&lt;'a, T&gt; Cacher&lt;'a, T&gt;\nwhere\n    T: Fn(&amp;'a u32) -&gt; &amp;'a u32,\n{\n    fn new(calculation: T) -&gt; Cacher&lt;'a, T&gt; {\n        Cacher {\n            calculation,\n            values: HashMap::new(),\n        }\n    }\n\n    fn values(&amp;mut self, arg: &amp;'a u32) -&gt; &amp;'a u32 {\n        match self.values.entry(arg) {\n            Entry::Occupied(e) =&gt; &amp;*e.into_mut(),\n            Entry::Vacant(e) =&gt; &amp;*e.insert(&amp;(self.calculation)(&amp;arg)),\n        }\n    }\n}\n\nfn generate_workout(intensity: u32, random_number: u32) {\n    let mut expensive_result = Cacher::new(|num| {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        &amp;num\n    });\n\n    if intensity &lt; 25 {\n        println!(\"Today, do {} pushups!\", expensive_result.values(&amp;intensity));\n        println!(\"Next, do {} situps!\", expensive_result.values(&amp;intensity));\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\n                \"Today, run for {} minutes!\",\n                expensive_result.values(&amp;intensity)\n            );\n        }\n    }\n}\n\nfn main() {\n    let simulated_user_specified_value = 10;\n    let simulated_random_number = 7;\n\n    generate_workout(simulated_user_specified_value, simulated_random_number);\n}\n</code></pre>\n\n<p>I tried <code>K, V</code> generics as below and it complains with <code>Expected one of 7 possible values here</code> pointing to the first type definition.</p>\n\n<pre><code>use std::collections::hash_map::Entry;\nuse std::collections::HashMap;\nuse std::hash::Hash;\nuse std::thread;\nuse std::time::Duration;\n\nstruct Cacher&lt;'a, T: 'a, K: 'a, V: 'a&gt;\nwhere\n    T: Fn(&amp;'a K) -&gt; &amp;'a V,\n    K: Hash + Eq,\n{\n    calculation: T,\n    values: HashMap&lt;&amp;'a K, &amp;'a V&gt;,\n}\n\nimpl&lt;'a, T: 'a, K: 'a, V: 'a&gt; Cacher&lt;'a, T: 'a, K: 'a, V: 'a&gt;\nwhere\n    T: Fn(&amp;'a K) -&gt; &amp;'a V,\n    K: Hash + Eq,\n{\n    fn new(calculation: T) -&gt; Cacher&lt;'a, T: 'a, K: 'a, V: 'a&gt; {\n        Cacher {\n            calculation,\n            values: HashMap::new(),\n        }\n    }\n\n    fn values(&amp;mut self, arg: &amp;'a K) -&gt; &amp;'a V {\n        match self.values.entry(arg) {\n            Entry::Occupied(e) =&gt; &amp;*e.into_mut(),\n            Entry::Vacant(e) =&gt; &amp;*e.insert(&amp;(self.calculation)(&amp;arg)),\n        }\n    }\n}\n\nfn generate_workout(intensity: u32, random_number: u32) {\n    let mut expensive_result = Cacher::new(|num| {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        &amp;num\n    });\n\n    if intensity &lt; 25 {\n        println!(\"Today, do {} pushups!\", expensive_result.values(&amp;intensity));\n        println!(\"Next, do {} situps!\", expensive_result.values(&amp;intensity));\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\n                \"Today, run for {} minutes!\",\n                expensive_result.values(&amp;intensity)\n            );\n        }\n    }\n}\n\nfn main() {\n    let simulated_user_specified_value = 10;\n    let simulated_random_number = 7;\n\n    generate_workout(simulated_user_specified_value, simulated_random_number);\n}\n</code></pre>\n\n<p>Results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `!`, `(`, `+`, `,`, `::`, `&lt;`, or `&gt;`, found `:`\n  --&gt; src/main.rs:16:39\n   |\n16 | impl&lt;'a, T: 'a, K: 'a, V: 'a&gt; Cacher&lt;T: 'a, K: 'a, V: 'a&gt;\n   |                                       ^ expected one of 7 possible tokens here\n</code></pre>\n\n<p>Is the only way to add 2 more generics (i.e. <code>K</code>, <code>V</code>) or is there a way to reuse a single generic? If 2 required, what am I missing above?</p>\n\n<p>Is there a more idiomatic approach to solving this problem? The Rust book does not offer a solution, unfortunately.</p>\n"}, {"tags": ["rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1524760331, "post_id": 50047805, "comment_id": 87112042, "body": "that worked - i actually had <code>#[serde(bound(deserialize = &quot;&quot;))]</code> already in actual implementation due to prior errors. Then the crate with the trait compiled and only when I&#39;m now using it in another crate is that giving an error. Looks pretty strange as I come to know to modify a crate only when it&#39;s later used by another one. Anyway I made the <code>bound = &quot;&quot;</code> (as you suggested) instead of just deserialize bound and now it works. Thanks !"}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 7, "last_activity_date": 1524759677, "creation_date": 1524759677, "answer_id": 50047805, "question_id": 50047334, "link": "https://stackoverflow.com/questions/50047334/deriving-serdes-serialize-or-deserialize-forces-generic-type-to-be-serialisable/50047805#50047805", "title": "Deriving Serde&#39;s Serialize or Deserialize forces generic type to be serialisable although it does not need to be", "body": "<p>During macro expansion the compiler has not yet determined which <code>B</code> is being referred to inside <code>Variant0</code> or how that <code>B</code> may use its type parameters. As such, macro expansion infers trait bounds that would work for the most common cases of what <code>B</code> might be, like if <code>B</code> were <code>Box</code> or <code>Vec</code>. In those cases serializing <code>B&lt;T&gt;</code> would require <code>T: Serialize</code> and deserializing <code>B&lt;T&gt;</code> would require <code>T: Deserialize&lt;'de&gt;</code>.</p>\n\n<p>You can provide <a href=\"https://serde.rs/attr-bound.html\" rel=\"noreferrer\">handwritten generic type bounds</a> to replace the inferred bounds.</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\n#[serde(bound = \"\")]\nenum A&lt;T: Trait&gt; {\n    Variant0(B&lt;T&gt;),\n    Variant1(T::SerialisableType),\n}\n</code></pre>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 846, "favorite_count": 0, "accepted_answer_id": 50047805, "answer_count": 1, "score": 6, "last_activity_date": 1524762812, "creation_date": 1524758104, "last_edit_date": 1524762812, "question_id": 50047334, "link": "https://stackoverflow.com/questions/50047334/deriving-serdes-serialize-or-deserialize-forces-generic-type-to-be-serialisable", "title": "Deriving Serde&#39;s Serialize or Deserialize forces generic type to be serialisable although it does not need to be", "body": "<p>My type <code>A</code>, which can contain anything that implements <code>trait Trait</code>, is serialisable, although the type implementing the trait <code>Trait</code> might not be. In my case, it cannot be - it's a private asymmetric key:</p>\n\n<pre><code>extern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\nuse serde::de::DeserializeOwned;\nuse serde::Serialize;\n\ntrait Trait {\n    type SerialisableType: Clone + Serialize + DeserializeOwned;\n\n    fn inner(&amp;self) -&gt; &amp;Self::SerialisableType;\n}\n\n#[derive(Serialize, Deserialize)]\nenum A&lt;T: Trait&gt; {\n    Variant0(B&lt;T&gt;), // *** NOTE: Compiles if this is commented ***\n    Variant1(T::SerialisableType),\n}\n\n#[derive(Serialize, Deserialize)]\nstruct B&lt;T: Trait&gt; {\n    inner: T::SerialisableType,\n}\n\n// ==============================================\n\nstruct NonSerialisable {\n    serialisable: Serialisable,\n}\n\nimpl Trait for NonSerialisable {\n    type SerialisableType = Serialisable;\n\n    fn inner(&amp;self) -&gt; &amp;Self::SerialisableType {\n        &amp;self.serialisable\n    }\n}\n\n#[derive(Clone, Serialize, Deserialize)]\nstruct Serialisable(Vec&lt;u8&gt;);\n\n#[derive(Serialize, Deserialize)]\nenum E {\n    Variant0(A&lt;NonSerialisable&gt;),\n    Variant1(B&lt;NonSerialisable&gt;),\n}\n\nfn main() {}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=7f73e8eb4689533241b9a8f695d93a0e&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>This errors out with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `NonSerialisable: serde::Serialize` is not satisfied\n  --&gt; src/main.rs:43:10\n   |\n43 | #[derive(Serialize, Deserialize)]\n   |          ^^^^^^^^^ the trait `serde::Serialize` is not implemented for `NonSerialisable`\n   |\n   = note: required because of the requirements on the impl of `serde::Serialize` for `A&lt;NonSerialisable&gt;`\n   = note: required by `serde::Serializer::serialize_newtype_variant`\n\nerror[E0277]: the trait bound `NonSerialisable: serde::Deserialize&lt;'_&gt;` is not satisfied\n  --&gt; src/main.rs:43:21\n   |\n43 | #[derive(Serialize, Deserialize)]\n   |                     ^^^^^^^^^^^ the trait `serde::Deserialize&lt;'_&gt;` is not implemented for `NonSerialisable`\n   |\n   = note: required because of the requirements on the impl of `serde::Deserialize&lt;'_&gt;` for `A&lt;NonSerialisable&gt;`\n   = note: required by `serde::de::VariantAccess::newtype_variant`\n</code></pre>\n\n<p>If I comment out <code>A::Variant0</code>, as mentioned in the inline comment in the code, then it compiles fine. This makes me think that the compiler is unable to deduce that <code>B&lt;T&gt;</code> is serialisable, but then it actually is able to deduce that because it can figure out <code>E</code> is serialisable which would require <code>B</code> to be serialisable as well.</p>\n\n<p>Where is the problem?</p>\n"}, {"tags": ["rust", "interpreter"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1524760592, "post_id": 50047282, "comment_id": 87112201, "body": "You&#39;re right, idiomatic error handling usually halts execution at the first error. In this case, treating errors as errors might not be the right thing, but rather first class, expected data. You can think of the parsing as a traversal, which reduces down to a final state, which consists of a collection of tokens and a collection of errors. But it&#39;s hard to really offer advice without seeing your code. See: <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 0, "creation_date": 1524816706, "post_id": 50052382, "comment_id": 87132559, "body": "you are a gentleman and a scholar. Thank you so much for the thorough answer, this has helped me endlessly!!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 0, "creation_date": 1524845109, "post_id": 50052382, "comment_id": 87149075, "body": "@jonny you are welcome, but please take care in the future about assuming someone&#39;s gender. Humans tend to dislike being misclassified."}, {"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 0, "creation_date": 1524846585, "post_id": 50052382, "comment_id": 87149861, "body": "Just a figure of speech! No offence meant"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1524781835, "last_edit_date": 1524781835, "creation_date": 1524779648, "answer_id": 50052382, "question_id": 50047282, "link": "https://stackoverflow.com/questions/50047282/is-there-a-way-to-emulate-the-java-behaviour-of-calling-a-parent-class-static-m/50052382#50052382", "title": "Is there a way to emulate the Java behaviour of calling a parent class&#39; static method for simple global-ish error handling?", "body": "<h3>Literal translation</h3>\n\n<p>Importantly, a Java static method has no access to any instance state. That means that it can be replicated in Rust by either a <em>function</em> or an <em>associated function</em>, neither of which have any state. The only difference is in how you call them:</p>\n\n<pre><code>fn example() {}\n\nimpl Something {\n    fn example() {}\n}\n\nfn main() {\n    example();\n    Something::example();\n}\n</code></pre>\n\n<p>Looking at the <a href=\"http://craftinginterpreters.com/scanning.html\" rel=\"noreferrer\">source you are copying</a>, it doesn't \"just\" report the error, it has code like this:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public class Lox {\n  static boolean hadError = false;\n\n  static void error(int line, String message) {\n    report(line, \"\", message);\n  }\n\n  private static void report(int line, String where, String message) {\n    System.err.println(\n        \"[line \" + line + \"] Error\" + where + \": \" + message);\n    hadError = true;\n  }\n}\n</code></pre>\n\n<p>I'm no JVM expert, but I'm pretty sure that using a static variable like that means that your code is no longer thread safe. You simply can't do that in safe Rust; you can't \"accidentally\" make memory-unsafe code.</p>\n\n<p>The most literal translation of this that is safe would use associated functions and atomic variables:</p>\n\n<pre><code>use std::sync::atomic::{AtomicBool, Ordering, ATOMIC_BOOL_INIT};\n\nstatic HAD_ERROR: AtomicBool = ATOMIC_BOOL_INIT;\n\nstruct Lox;\n\nimpl Lox {\n    fn error(line: usize, message: &amp;str) {\n        Lox::report(line, \"\", message);\n    }\n\n    fn report(line: usize, where_it_was: &amp;str, message: &amp;str) {\n        eprintln!(\"[line {}] Error{}: {}\", line, where_it_was, message);\n        HAD_ERROR.store(true, Ordering::SeqCst);\n    }\n}\n</code></pre>\n\n<p>You can also choose more rich data structures to store in your global state by using lazy_static and a <code>Mutex</code> or <code>RwLock</code>, if you need them.</p>\n\n<h3>Idiomatic translation</h3>\n\n<p>Although it might be convenient, I don't think such a design is <em>good</em>. Global state is simply terrible. I'd prefer to use dependency injection. </p>\n\n<p>Define an error reporter structure that has the state and methods you need and pass references to the error reporter down to where it needs to be:</p>\n\n<pre><code>struct LoggingErrorSink {\n    had_error: bool,\n}\n\nimpl LoggingErrorSink {\n    fn error(&amp;mut self, line: usize, message: &amp;str) {\n        self.report(line, \"\", message);\n    }\n\n    fn report(&amp;mut self, line: usize, where_it_was: &amp;str, message: &amp;str) {\n        eprintln!(\"[line {} ] Error {}: {}\", line, where_it_was, message);\n        self.had_error = true;\n    }\n}\n\nfn some_parsing_thing(errors: &amp;mut LoggingErrorSink) {\n    errors.error(0, \"It's broken\");\n}\n</code></pre>\n\n<p>In reality, I'd rather define a trait for things that allow reporting errors and implement it for a concrete type. Rust makes this nice because there's zero performance difference when using these generics.</p>\n\n<pre><code>trait ErrorSink {\n    fn error(&amp;mut self, line: usize, message: &amp;str) {\n        self.report(line, \"\", message);\n    }\n\n    fn report(&amp;mut self, line: usize, where_it_was: &amp;str, message: &amp;str);\n}\n\nstruct LoggingErrorSink {\n    had_error: bool,\n}\n\nimpl LoggingErrorSink {\n    fn report(&amp;mut self, line: usize, where_it_was: &amp;str, message: &amp;str) {\n        eprintln!(\"[line {} ] Error {}: {}\", line, where_it_was, message);\n        self.had_error = true;\n    }\n}\n\nfn some_parsing_thing&lt;L&gt;(errors: &amp;mut L)\nwhere\n    L: ErrorSink,\n{\n    errors.error(0, \"It's broken\");\n}\n</code></pre>\n\n<p>There's lots of variants of implementing this, all depending on your tradeoffs.</p>\n\n<ul>\n<li>You could choose to have the logger take <code>&amp;self</code> instead of <code>&amp;mut</code>, which would force this case to use something like a <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"noreferrer\"><code>Cell</code></a> to gain internal mutability of <code>had_error</code>.</li>\n<li>You could use something like an <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noreferrer\"><code>Rc</code></a> to avoid adding any extra lifetimes to the calling chain. </li>\n<li>You could choose to store the logger as a struct member instead of a function parameter.</li>\n</ul>\n\n<p>For your extra keyboard work, you get the benefit of being able to <em>test your errors</em>. Simply whip up a dummy implementation of the trait that saves information to internal variables and pass it in at test time.</p>\n\n<h3>Opinions, ahoy!</h3>\n\n<blockquote>\n  <p>a strategy where I inject a reference to some <code>ErrorReporter</code> struct as a dependency into the <code>Scanner</code></p>\n</blockquote>\n\n<p>Yes, dependency injection is an amazing solution to a large number of coding issues.</p>\n\n<blockquote>\n  <p>and <code>Token</code> structs</p>\n</blockquote>\n\n<p>I don't know why a <em>token</em> would need to report errors, but it would make sense for the <em>tokenizer</em> to do so.</p>\n\n<blockquote>\n  <p>but that seems unwieldy to me. I don't feel like an error reporter should be part of the struct's signature, am I wrong?</p>\n</blockquote>\n\n<p>I'd say yes, you are wrong; you've stated this as an absolute truth, of which very few exist in programming.</p>\n\n<p>Concretely, very few people care about what is <em>inside</em> your type, probably only to be the implementer. The person who constructs a value of your type might care a little because they need to pass in dependencies, but this is a <em>good thing</em>. They now know that this value can generate errors that they need to handle \"out-of-band\", as opposed to reading some documentation after their program doesn't work.</p>\n\n<p>A few more people care about the actual signature of your type. This is a double-edged blade. In order to have maximal performance, Rust will force you to expose your generic types and lifetimes in your type signatures. Sometimes, this sucks, but either the performance gain is worth it, or you can hide it somehow and take the tiny hit. That's the benefit of a language that gives you choices.</p>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/2120248/155423\">How to synchronize a static variable among threads running different instances of a class in Java?</a></li>\n<li><a href=\"https://stackoverflow.com/q/8387989/155423\">Where are static methods and static variables stored in Java?</a></li>\n<li><a href=\"https://stackoverflow.com/q/26549480/155423\">Static fields in a struct in Rust</a></li>\n<li><a href=\"https://stackoverflow.com/q/27221504/155423\">How can you make a safe static singleton in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27791532/155423\">How do I create a global, mutable singleton?</a></li>\n<li><a href=\"https://stackoverflow.com/q/44912349/155423\">How can I avoid a ripple effect from changing a concrete struct to generic?</a></li>\n</ul>\n"}], "owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 50052382, "answer_count": 1, "score": 0, "last_activity_date": 1524781835, "creation_date": 1524757955, "last_edit_date": 1524780580, "question_id": 50047282, "link": "https://stackoverflow.com/questions/50047282/is-there-a-way-to-emulate-the-java-behaviour-of-calling-a-parent-class-static-m", "title": "Is there a way to emulate the Java behaviour of calling a parent class&#39; static method for simple global-ish error handling?", "body": "<p>I'm trying to implement a simple interpreter in Rust for a made up programming language called <code>rlox</code>, following Bob Nystrom's book <a href=\"http://craftinginterpreters.com/scanning.html\" rel=\"nofollow noreferrer\"><em>Crafting Interpreters</em></a>. </p>\n\n<p>I want errors to be able to occur in any child module, and for them to be \"reported\" in the <code>main</code> module (this is done in the book, with Java, by simply calling a static method on the containing class which prints the offending token and line). However, if an error occurs, it's not like I can just return early with <code>Result::Err</code> (which is, I assume, the idiomatic way to handle errors in Rust) because the interpreter should keep running - continually looking for errors.</p>\n\n<p>Is there an (idiomatic) way for me to emulate the Java behaviour of calling a parent class' static method from a child class in Rust with modules? Should I abandon something like that entirely? </p>\n\n<p>I thought about a strategy where I inject a reference to some <code>ErrorReporter</code> struct as a dependency into the <code>Scanner</code> and <code>Token</code> structs, but that seems unwieldy to me (I don't feel like an error reporter should be part of the struct's signature, am I wrong?):</p>\n\n<pre><code>struct Token {\n   error_reporter: Rc&lt;ErrorReporter&gt;, // Should I avoid this?\n   token_type: token::Type,\n   lexeme: String,\n   line: u32   \n}\n</code></pre>\n\n<p>This is the layout of my project if you need to visualise what I'm talking about with regards to module relationships. Happy to provide some source code if necessary. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rlox [package]\n\u2514\u2500\u2500\u2500src\n    \u251c\u2500\u2500\u2500main.rs (uses scanner + token mods, should contain logic for handling errors)\n    \u251c\u2500\u2500\u2500lib.rs (just exports scanner and token mods)\n    \u251c\u2500\u2500\u2500scanner.rs (uses token mod, declares scanner struct and impl)\n    \u2514\u2500\u2500\u2500token.rs (declares token struct and impl)\n</code></pre>\n"}, {"tags": ["rust", "file-permissions"], "comments": [{"owner": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 0, "creation_date": 1524752500, "post_id": 50044956, "comment_id": 87107019, "body": "What is shown when you print f_mode?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 0, "creation_date": 1524753478, "post_id": 50044956, "comment_id": 87107741, "body": "@jhpratt In octal, that&#39;s 100700"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1524753942, "post_id": 50044956, "comment_id": 87108065, "body": "This is a bug IMO."}, {"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1524753979, "post_id": 50044956, "comment_id": 87108089, "body": "The top 1 is indicating that it&#39;s a regular file."}], "answers": [{"comments": [{"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1524753937, "post_id": 50045872, "comment_id": 87108057, "body": "Thanks. I guess I was expecting to see those constants exposed somewhere in <code>std</code>. Your suggestion is satisfactory."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 1, "creation_date": 1524763091, "post_id": 50045872, "comment_id": 87113522, "body": "@EddBarrett The <a href=\"https://docs.rs/libc/0.2.40/libc/constant.S_IFREG.html\" rel=\"nofollow noreferrer\"><code>libc</code> crate does define them</a>!"}, {"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1524775802, "post_id": 50045872, "comment_id": 87119561, "body": "Ah great!  Thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1524753701, "creation_date": 1524753701, "answer_id": 50045872, "question_id": 50044956, "link": "https://stackoverflow.com/questions/50044956/how-do-i-check-if-a-file-has-a-certain-mode-in-rust/50045872#50045872", "title": "How do I check if a file has a certain mode in Rust?", "body": "<p>If you are going to use the low-level primitives of OS-specific permissions, you need to deal with those details:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#define S_IFMT   0170000  /* type of file */\n#define S_IFIFO  0010000  /* named pipe (fifo) */\n#define S_IFCHR  0020000  /* character special */\n#define S_IFDIR  0040000  /* directory */\n#define S_IFBLK  0060000  /* block special */\n#define S_IFREG  0100000  /* regular */\n#define S_IFLNK  0120000  /* symbolic link */\n#define S_IFSOCK 0140000  /* socket */\n#define S_IFWHT  0160000  /* whiteout */\n#define S_ISUID  0004000  /* set user id on execution */\n#define S_ISGID  0002000  /* set group id on execution */\n#define S_ISVTX  0001000  /* save swapped text even after use */\n#define S_IRUSR  0000400  /* read permission, owner */\n#define S_IWUSR  0000200  /* write permission, owner */\n#define S_IXUSR  0000100  /* execute/search permission, owner */\n</code></pre>\n\n<p>When you get the mode, you also get information on what kind of file it is. Here, you have <code>S_IFREG | S_IRUSR | S_IWUSR | S_IXUSR</code>.</p>\n\n<p>Doing a bitwise AND is the simplest fix:</p>\n\n<pre><code>assert_eq!(f_mode &amp; 0o777, MODE);\n</code></pre>\n\n<p>Of course, you can create your own accessor functions in an extension trait and implement them to have nice meaning, or there may be a crate which has already done so. </p>\n"}], "owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 661, "favorite_count": 2, "accepted_answer_id": 50045872, "answer_count": 1, "score": 3, "last_activity_date": 1524753701, "creation_date": 1524751134, "last_edit_date": 1524753102, "question_id": 50044956, "link": "https://stackoverflow.com/questions/50044956/how-do-i-check-if-a-file-has-a-certain-mode-in-rust", "title": "How do I check if a file has a certain mode in Rust?", "body": "<p>I'd expect this to work:</p>\n\n<pre><code>use std::fs::OpenOptions;\nuse std::os::unix::fs::{OpenOptionsExt, PermissionsExt};\n\nconst MODE: u32 = 0o700;\n\nfn main() {\n    let f = OpenOptions::new()\n        .write(true)\n        .create_new(true)\n        .mode(MODE)\n        .open(\"myfile\")\n        .unwrap();\n    let f_mode = f.metadata().unwrap().permissions().mode();\n    assert_eq!(f_mode, MODE);\n}\n</code></pre>\n\n<p>When run, I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `33216`,\n right: `448`', src/main.rs:14:5\n</code></pre>\n\n<p>If I check the output of <code>ls</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ls -al myfile \n-rwx------  1 edd  edd  0 Apr 26 14:50 myfile\n</code></pre>\n\n<p>Clearly there's some other information encoded in the mode field once it gets committed to the file-system.</p>\n\n<p>Is there a good way to check if the file is <code>-rwx------</code> besides using bitwise operators on underlying the octal representation (masking off the irrelevant parts)?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 0, "creation_date": 1524740595, "post_id": 50040689, "comment_id": 87098502, "body": "Fantastic, that&#39;s exactly the Rust syntax I was looking for. Thank you very much!"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 15, "last_activity_date": 1524739517, "last_edit_date": 1524739517, "creation_date": 1524738562, "answer_id": 50040689, "question_id": 50040596, "link": "https://stackoverflow.com/questions/50040596/how-do-i-derive-a-trait-for-another-trait/50040689#50040689", "title": "How do I derive a trait for another trait?", "body": "<p>Traits can't use the <code>#[derive()]</code> attribute; you need to implement it manually:</p>\n\n<pre><code>trait Contract {}\n\nimpl std::fmt::Debug for Contract {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \"{}\", \"derp\")\n    }\n}\n</code></pre>\n\n<p>Since trait objects lose information on the type (<a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html#dynamic-dispatch\" rel=\"noreferrer\">type erasure</a>) you could utilize the functions implemented by <code>Contract</code>, but you won't have access to the underlying types or their specific implementations of <code>Debug</code>.</p>\n\n<p>If, however, you make <code>Contract</code> dependent on the <code>Debug</code> trait, ensuring that all its implementors must also implement <code>Debug</code>:</p>\n\n<pre><code>trait Contract: std::fmt::Debug {}\n</code></pre>\n\n<p>You will be able to <code>#[derive(Debug)]</code> for <code>foo</code> without having to implement <code>Debug</code> for <code>Contract</code> manually.</p>\n"}], "owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2042, "favorite_count": 1, "accepted_answer_id": 50040689, "answer_count": 1, "score": 9, "last_activity_date": 1524754479, "creation_date": 1524738295, "last_edit_date": 1524754479, "question_id": 50040596, "link": "https://stackoverflow.com/questions/50040596/how-do-i-derive-a-trait-for-another-trait", "title": "How do I derive a trait for another trait?", "body": "<p>I have a struct that holds a trait object member like this:</p>\n\n<pre><code>trait Contract {}\n\n#[derive(Debug)]\nstruct Foo {\n    x: Box&lt;Contract&gt;,\n}\n</code></pre>\n\n<p>I want that struct to derive <code>Debug</code>, but the compiler doesn't like it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `Contract + 'static` doesn't implement `std::fmt::Debug`\n --&gt; src/main.rs:5:5\n  |\n5 |     x: Box&lt;Contract&gt;,\n  |     ^^^^^^^^^^^^^^^^ `Contract + 'static` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n  |\n  = help: the trait `std::fmt::Debug` is not implemented for `Contract + 'static`\n  = note: required because of the requirements on the impl of `std::fmt::Debug` for `std::boxed::Box&lt;Contract + 'static&gt;`\n  = note: required because of the requirements on the impl of `std::fmt::Debug` for `&amp;std::boxed::Box&lt;Contract + 'static&gt;`\n  = note: required for the cast to the object type `std::fmt::Debug`\n</code></pre>\n\n<p>I'm not really sure how to approach fixing this. I understand why the compiler can't implement <code>Debug</code> for the trait since it can't tell what types will implement it, but that same reason is what keeps me from implementing it manually for the trait (not even sure if that's even possible).</p>\n\n<p>What would be a good approach to obtain the behaviour I want?</p>\n"}, {"tags": ["file", "rust"], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1524735281, "post_id": 50039389, "comment_id": 87095159, "body": "Yes, this is one of the uses of the <a href=\"https://github.com/rust-unofficial/patterns/blob/master/patterns/builder.md\" rel=\"nofollow noreferrer\">builder pattern</a> in the standard library."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 4, "creation_date": 1524743037, "post_id": 50039389, "comment_id": 87100071, "body": "@Boiethios: I still find the use weirdish. I&#39;d have expected the builder to build an <code>OpenOptions</code> object which is then passed to a <code>File::open_with</code> function. That <code>OpenOptions</code> has the <code>open</code> method feels... strange."}, {"owner": {"reputation": 529, "user_id": 11877195, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ed77976acc203f50e7699ba07061865?s=128&d=identicon&r=PG&f=1", "display_name": "Sahsahae", "link": "https://stackoverflow.com/users/11877195/sahsahae"}, "edited": false, "score": 0, "creation_date": 1570449239, "post_id": 50039389, "comment_id": 102905130, "body": "It&#39;s not strange, it cuts out needless extra steps. Files aren&#39;t the objects you build, they&#39;re something you normally open or create, which is why finalizing method is <code>.open()</code>, not <code>.build()</code>"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 529, "user_id": 11877195, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ed77976acc203f50e7699ba07061865?s=128&d=identicon&r=PG&f=1", "display_name": "Sahsahae", "link": "https://stackoverflow.com/users/11877195/sahsahae"}, "edited": false, "score": 0, "creation_date": 1570450396, "post_id": 50039389, "comment_id": 102905641, "body": "@Sahsahae: Nobody is suggesting it should be <code>.build()</code>. It&#39;s strange because most people would expect <code>let mut file = File::open_with_options(&quot;foo.txt&quot;, OpenOptions::new().read(true).write(true));</code>. In fact, I just checked and that&#39;s actually how it is implemented internally."}, {"owner": {"reputation": 529, "user_id": 11877195, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ed77976acc203f50e7699ba07061865?s=128&d=identicon&r=PG&f=1", "display_name": "Sahsahae", "link": "https://stackoverflow.com/users/11877195/sahsahae"}, "edited": false, "score": 0, "creation_date": 1570452453, "post_id": 50039389, "comment_id": 102906696, "body": "You can always use <a href=\"https://docs.rs/libc/0.2.63/libc/fn.fopen.html\" rel=\"nofollow noreferrer\"><code>libc::fopen</code></a> if <code>std</code> is too convenient."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1572882227, "post_id": 50039389, "comment_id": 103689851, "body": "In nightly you <a href=\"https://github.com/rust-lang/rust/pull/65429\" rel=\"nofollow noreferrer\">can now</a> do <code>File::with_options().read(true).write(true).open(&quot;foo.txt&quot;)</code> which is a lot better. :-)"}], "tags": [], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "is_accepted": true, "score": 9, "last_activity_date": 1532302375, "last_edit_date": 1532302375, "creation_date": 1524734708, "answer_id": 50039389, "question_id": 50039341, "link": "https://stackoverflow.com/questions/50039341/open-file-in-read-write-mode-in-rust/50039389#50039389", "title": "Open file in read-write mode in Rust", "body": "<p>You use the <a href=\"https://doc.rust-lang.org/std/fs/struct.OpenOptions.html\" rel=\"nofollow noreferrer\"><code>OpenOptions</code></a> struct to open the file, rather than using <code>File::open()</code> and passing it an <code>OpenOptions</code> as you might expect.</p>\n\n<pre><code>use std::fs::OpenOptions;\n\nlet mut file = OpenOptions::new()\n    .read(true)\n    .write(true)\n    .open(\"foo.txt\");\n</code></pre>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1829, "favorite_count": 0, "closed_date": 1524752693, "accepted_answer_id": 50039389, "answer_count": 1, "score": 7, "last_activity_date": 1532302375, "creation_date": 1524734549, "question_id": 50039341, "link": "https://stackoverflow.com/questions/50039341/open-file-in-read-write-mode-in-rust", "closed_reason": "Duplicate", "title": "Open file in read-write mode in Rust", "body": "<p>In Rust, how do I open a file for reading <em>and</em> writing? <code>File::open()</code> is read-only, and <code>File::create()</code> claims is write-only (and also creates files which isn't what I want).</p>\n"}, {"tags": ["rust", "sha256", "sha"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1524739250, "post_id": 50038666, "comment_id": 87097696, "body": "It&#39;s hard to help without a complete example, that I can compile. I&#39;m not certain which crypto library you are using, but I&#39;ll guess it&#39;s  <a href=\"https://crates.io/crates/rust-crypto\" rel=\"nofollow noreferrer\"><code>rust-crypto</code></a> rather than <a href=\"https://crates.io/crates/crypto\" rel=\"nofollow noreferrer\"><code>crypto</code></a>, since the latter has no documentation and wasn&#39;t updated since 2014. Most users here won&#39;t be super familiar with these libraries so it would be useful if you include the actual dependencies, as well as <code>use</code> statements, so your code snippets can be compiled.  See: <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1524739834, "post_id": 50038666, "comment_id": 87098042, "body": "Looking at your update.. The <code>[u8]</code> bytes that you&#39;ve shown <i>really are</i> the same as the <code>&amp;str</code>. The error is because <code>keypair</code> expects a slice, not a <code>Sha256</code> struct."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524740805, "post_id": 50038666, "comment_id": 87098610, "body": "Please can you reduce this post down to a single question. If it is just the updated part then please delete the rest and change the subject line."}, {"owner": {"reputation": 8871, "user_id": 1260906, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/aPM5A.png?s=128&g=1", "display_name": "Afr", "link": "https://stackoverflow.com/users/1260906/afr"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1524743760, "post_id": 50038666, "comment_id": 87100551, "body": "Hi @PeterHall, thanks for your comments. It&#39;s indeed <code>rust-crypto</code>, I have totally rewritten the question, I hope it&#39;s more readable now."}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 3, "last_activity_date": 1524745294, "last_edit_date": 1524745294, "creation_date": 1524744574, "answer_id": 50042649, "question_id": 50038666, "link": "https://stackoverflow.com/questions/50038666/how-to-convert-a-cryptosha2sha256-hash-into-a-u8-representation/50042649#50042649", "title": "How to convert a crypto::sha2::Sha256 hash into a &amp;[u8] representation?", "body": "<p>The <code>Sha256</code> API may be a little confusing at first because it is designed so that it doesn't allocate any new memory for the data. That's to avoid wasting a memory allocation, in case you want to allocate it yourself. Instead, you give it a buffer to write to:</p>\n\n<pre><code>// Create a buffer in which to write the bytes, making sure it's\n// big enough for the size of the hash\nlet mut bytes = vec![0; seed.output_bytes()];\n// Write the raw bytes from the hash into the buffer\nseed.result(&amp;mut bytes);\n\n// A reference to a Vec can be coerced to a slice\nlet (_priv, _publ) = ed25519::keypair(&amp;bytes);\n</code></pre>\n"}], "owner": {"reputation": 8871, "user_id": 1260906, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/aPM5A.png?s=128&g=1", "display_name": "Afr", "link": "https://stackoverflow.com/users/1260906/afr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1252, "favorite_count": 0, "accepted_answer_id": 50042649, "answer_count": 1, "score": 9, "last_activity_date": 1547832451, "creation_date": 1524732457, "last_edit_date": 1547832451, "question_id": 50038666, "link": "https://stackoverflow.com/questions/50038666/how-to-convert-a-cryptosha2sha256-hash-into-a-u8-representation", "title": "How to convert a crypto::sha2::Sha256 hash into a &amp;[u8] representation?", "body": "<p>I'm currently trying to generate an ED25519 keypair from a SHA256 hash (via <code>rust-crypto</code> crate):</p>\n\n<pre><code>extern crate crypto; // rust-crypto = \"0.2.36\"\n\nuse crypto::ed25519;\nuse crypto::sha2::Sha256;\nuse crypto::digest::Digest;\n\nfn main() {\n    let phrase = \"purchase hobby popular celery evil fantasy someone party position gossip host gather\";\n    let mut seed = Sha256::new();\n    seed.input_str(&amp;phrase);\n    let (_priv, _publ) = ed25519::keypair(&amp;seed); // expects slice\n}\n</code></pre>\n\n<p>However, I totally fail to understand how to correctly pass the SHA256 to the <code>ed25519::keypair()</code> function. I traced down that <code>&amp;seed.result_str()</code> results in:</p>\n\n<pre><code>\"fc37862cb425ca4368e8e368c54bb6ea0a1f305a225978564d1bdabdc7d99bdb\"\n</code></pre>\n\n<p>This is the correct hash, while <code>&amp;seed.result_str().as_bytes()</code> results in:</p>\n\n<pre><code>[102, 99, 51, 55, 56, 54, 50, 99, 98, 52, 50, 53, 99, 97, 52, 51, 54, 56, 101, 56, 101, 51, 54, 56, 99, 53, 52, 98, 98, 54, 101, 97, 48, 97, 49, 102, 51, 48, 53, 97, 50, 50, 53, 57, 55, 56, 53, 54, 52, 100, 49, 98, 100, 97, 98, 100, 99, 55, 100, 57, 57, 98, 100, 98]\n</code></pre>\n\n<p>Which is something I do not want, something entirely different. The question now breaks down to:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   |\n36 |     let (_priv, _publ) = ed25519::keypair(&amp;seed);\n   |                                           ^^^^^ expected slice, found struct `crypto::sha2::Sha256`\n   |\n   = note: expected type `&amp;[u8]`\n              found type `&amp;crypto::sha2::Sha256`\n</code></pre>\n\n<p>How to correctly convert the <code>crypto::sha2::Sha256</code> hash into a <code>[u8]</code> representation?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1524728815, "post_id": 50037091, "comment_id": 87091146, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/39945901/how-do-i-use-a-macro-defined-in-another-crate/39945929#39945929\">How do I use a macro defined in another crate?</a>"}, {"owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "edited": false, "score": 0, "creation_date": 1524730656, "post_id": 50037091, "comment_id": 87092273, "body": "Does the <code>interrupt!()</code> macro work if you import <code>stm32f103xx-hal</code> like this: <code>#[macro_use] extern crate stm32f103xx-hal;</code>?"}, {"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1525368256, "post_id": 50037091, "comment_id": 87339272, "body": "Found some additional discussion about the now defunct &quot;macro_reexport&quot; feature, which seems very related to the issue at hand: <a href=\"https://github.com/rust-lang/rust/issues/29638\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/29638</a>"}], "answers": [{"comments": [{"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1524752693, "post_id": 50044994, "comment_id": 87107162, "body": "That makes sense, though it seems a little brittle to design Cargo like that. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1524755107, "post_id": 50044994, "comment_id": 87108857, "body": "@MichaelB&#246;ckling what is &quot;brittle&quot; about it? The crate you are using chooses not (or forgot) to export the macros. What do you want Cargo to do about it? Ignore the code as written and just wildly bring in whatever it feels like?"}, {"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1524756369, "post_id": 50044994, "comment_id": 87109700, "body": "Well, they can forget to export the macros. The crate already decided about its public API surface, why should another crate that re-exports it have any say in the matter?"}, {"owner": {"reputation": 3531, "user_id": 1174521, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9a6bc053ffba8996e41c0bbb9a9ce36a?s=128&d=identicon&r=PG", "display_name": "jbg", "link": "https://stackoverflow.com/users/1174521/jbg"}, "reply_to_user": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 0, "creation_date": 1561910067, "post_id": 50044994, "comment_id": 100204684, "body": "@MichaelB&#246;ckling Because what they choose to re-export becomes part of <i>their</i> API surface."}], "tags": [], "owner": {"reputation": 587, "user_id": 6352597, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8GGSj.jpg?s=128&g=1", "display_name": "Kim Desrosiers", "link": "https://stackoverflow.com/users/6352597/kim-desrosiers"}, "is_accepted": true, "score": 3, "last_activity_date": 1524754612, "last_edit_date": 1524754612, "creation_date": 1524751230, "answer_id": 50044994, "question_id": 50037091, "link": "https://stackoverflow.com/questions/50037091/how-to-use-macros-from-re-exported-crates/50044994#50044994", "title": "How to use macros from re-exported crates", "body": "<p>I think you need to add <code>stm32f103xx</code> to your <code>Cargo.toml</code>. Here is why:</p>\n\n<p>For example, in the Diesel <a href=\"https://github.com/diesel-rs/diesel/blob/e67985bc0b0d70cdaca917c05a873fdcad253837/diesel/src/lib.rs#L138\" rel=\"nofollow noreferrer\"><code>lib.rs</code></a> </p>\n\n<pre><code>#[macro_use]\nextern crate diesel_derives;\n#[doc(hidden)]\npub use diesel_derives::*;\n</code></pre>\n\n<p>They put <code>#[macro_use]</code> on the extern crate line then they use everything from the <code>diesel_derives</code> project.</p>\n\n<p>In your case the <a href=\"https://github.com/japaric/stm32f103xx-hal/blob/330c904473dc3a34ef2864166dcbe658992d652a/src/lib.rs#L46\" rel=\"nofollow noreferrer\"><code>lib.rs</code></a> looks like that:</p>\n\n<pre><code>pub extern crate stm32f103xx;\n</code></pre>\n\n<p>So the re-export does not specify the use of macros.</p>\n\n<p>This is why you need to add <code>stm32f103xx</code> to your Cargo.toml in order to specify the use of macros in your own <code>lib.rs</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 587, "user_id": 6352597, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8GGSj.jpg?s=128&g=1", "display_name": "Kim Desrosiers", "link": "https://stackoverflow.com/users/6352597/kim-desrosiers"}, "edited": false, "score": 0, "creation_date": 1524757672, "post_id": 50046521, "comment_id": 87110569, "body": "Shepmaster brings a good point here. In your case, even if the crate <code>stm32f103xx-hal</code> would re-export macros from <code>stm32f103xx</code>, it would be a best practice to import <code>stm32f103xx</code> explicitly allowing you to specify the version you need."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 587, "user_id": 6352597, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8GGSj.jpg?s=128&g=1", "display_name": "Kim Desrosiers", "link": "https://stackoverflow.com/users/6352597/kim-desrosiers"}, "edited": false, "score": 1, "creation_date": 1524762974, "post_id": 50046521, "comment_id": 87113459, "body": "@KimDesrosiers I believe you&#39;ve understood me completely backwards. I&#39;m saying that relying on both the re-exported crate and the crate directly is a <b>bad</b> idea, due to the version incompatibilities that will occur. You should only use the re-exported code (which you cannot because it&#39;s not currently exporting the macro). It is <b>not</b> &quot;a best practice to import <code>stm32f103xx</code> explicitly&quot; because you cannot control the version that <code>stm32f103xx-hal</code> uses."}, {"owner": {"reputation": 587, "user_id": 6352597, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8GGSj.jpg?s=128&g=1", "display_name": "Kim Desrosiers", "link": "https://stackoverflow.com/users/6352597/kim-desrosiers"}, "edited": false, "score": 0, "creation_date": 1524767313, "post_id": 50046521, "comment_id": 87115645, "body": "I read the last sentence too quick my bad. However, maybe it is not a good practice but in the current situation, we don&#39;t have the choice if we want to use macros. Is it possible use two different versions of a crate in the same project? I mean can we alias the re-export where needed and use the other one from our Cargo.toml?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 587, "user_id": 6352597, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8GGSj.jpg?s=128&g=1", "display_name": "Kim Desrosiers", "link": "https://stackoverflow.com/users/6352597/kim-desrosiers"}, "edited": false, "score": 2, "creation_date": 1524770635, "post_id": 50046521, "comment_id": 87117237, "body": "@KimDesrosiers if you mean &quot;the current situation&quot; as the state of these two specific crates right now, then yes, you have to include the crate both directly and indirectly, to your own future detriment. That&#39;s why I encourage OP to file an issue with the crate(s). AFAIK, you cannot specify two versions of the same crate in a Cargo.toml, but you certainly can have multiple versions of a crate in the entire crate dependency graph. See <a href=\"https://stackoverflow.com/q/44437123/155423\">Why is a trait not implemented for a type that clearly has it implemented?</a> as one concrete example."}, {"owner": {"reputation": 587, "user_id": 6352597, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8GGSj.jpg?s=128&g=1", "display_name": "Kim Desrosiers", "link": "https://stackoverflow.com/users/6352597/kim-desrosiers"}, "edited": false, "score": 0, "creation_date": 1524772166, "post_id": 50046521, "comment_id": 87117979, "body": "Definitively open an issue would be the right thing to do."}, {"owner": {"reputation": 482, "user_id": 5286593, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-TEsNm6kITnY/AAAAAAAAAAI/AAAAAAAAAPA/fyrLkdEoX40/photo.jpg?sz=128", "display_name": "AldaronLau", "link": "https://stackoverflow.com/users/5286593/aldaronlau"}, "edited": false, "score": 0, "creation_date": 1526934236, "post_id": 50046521, "comment_id": 87925669, "body": "<code>pub use mac::*; &#47;&#47; Re-export the macros</code> is re-exporting everything, is there a way to just re-export the macros and nothing else?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1524755600, "creation_date": 1524755600, "answer_id": 50046521, "question_id": 50037091, "link": "https://stackoverflow.com/questions/50037091/how-to-use-macros-from-re-exported-crates/50046521#50046521", "title": "How to use macros from re-exported crates", "body": "<p>The intermediate crate should re-export the macros so that they are available: </p>\n\n<p>mac/src/lib.rs</p>\n\n<pre><code>#[macro_export]\nmacro_rules! a_macro {\n    () =&gt; (42);\n}\n</code></pre>\n\n<p>inter/src/lib.rs</p>\n\n<pre><code>pub extern crate mac;\npub use mac::*; // Re-export the macros\n</code></pre>\n\n<p>ex/src/main.rs</p>\n\n<pre><code>#[macro_use]\nextern crate inter;\n\nfn main() {\n    println!(\"Hello, {}\", a_macro!());\n}\n</code></pre>\n\n<p>In your case, it's either a bug with the library or they've deliberately decided to not re-export them, so you need to take it up with them. You can choose to directly rely on the underlying crate, but then you open yourself up to having mismatched versions of the crate, leading to annoying errors.</p>\n"}, {"tags": [], "owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "is_accepted": false, "score": 0, "last_activity_date": 1525707156, "last_edit_date": 1525707156, "creation_date": 1525679609, "answer_id": 50209489, "question_id": 50037091, "link": "https://stackoverflow.com/questions/50037091/how-to-use-macros-from-re-exported-crates/50209489#50209489", "title": "How to use macros from re-exported crates", "body": "<p>This was changed just recently to use the generic import system. </p>\n\n<p>Assuming you want to use the <code>interrupt!</code> macro from the <code>foo</code>crate, the new way to do it looks like this:</p>\n\n<pre><code>#![feature(use_extern_macros)];\n\npub use foo::interrupt;\n</code></pre>\n\n<p>Note that this is not yet stable, so it is feature-gated behind <code>use_extern_macros</code>.</p>\n"}], "owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1909, "favorite_count": 0, "accepted_answer_id": 50044994, "answer_count": 3, "score": 2, "last_activity_date": 1525707156, "creation_date": 1524727291, "last_edit_date": 1524754562, "question_id": 50037091, "link": "https://stackoverflow.com/questions/50037091/how-to-use-macros-from-re-exported-crates", "title": "How to use macros from re-exported crates", "body": "<p>Crates can re-export crates on which they depend. In this example, the <code>stm32f103xx-hal</code> crate does that: <code>pub extern crate stm32f103xx;</code>.</p>\n\n<p>In my code, I depend on <code>stm32f103xx-hal</code>. Now I want to use the <code>interrupt!()</code> macro that is exported by the <code>stm32f103xx</code> crate. Do I have to add a <code>stm32f103xx</code> crate dependency to my Cargo.toml, or is there a way to re-use the exported definition of <code>stm32f103xx-hal</code>?</p>\n\n<p>Note that this is a different problem from simply \"how to use a macro from a different crate\". Declaring <code>#[macro_use(interrupt)]</code> on <code>stm32f103xx-hal</code> yields a <code>cannot find macro 'interrupt!' in this scope</code> error.</p>\n"}, {"tags": ["rust", "rayon"], "comments": [{"owner": {"reputation": 581, "user_id": 5863848, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/s3w85.jpg?s=128&g=1", "display_name": "NishanthSpShetty", "link": "https://stackoverflow.com/users/5863848/nishanthspshetty"}, "edited": false, "score": 0, "creation_date": 1524714042, "post_id": 50034449, "comment_id": 87085038, "body": "you have impl <code>pub fn iter(&amp;self) -&gt; TriangleIterator</code> for Model, but i don see any definition of <code>iter_mut</code>."}, {"owner": {"reputation": 105, "user_id": 1108691, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/b0be8d1da5e825011d605fbe568ed88e?s=128&d=identicon&r=PG", "display_name": "vishpat", "link": "https://stackoverflow.com/users/1108691/vishpat"}, "reply_to_user": {"reputation": 581, "user_id": 5863848, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/s3w85.jpg?s=128&g=1", "display_name": "NishanthSpShetty", "link": "https://stackoverflow.com/users/5863848/nishanthspshetty"}, "edited": false, "score": 0, "creation_date": 1524714380, "post_id": 50034449, "comment_id": 87085129, "body": "@NishanthSpShetty iter_mut  is being called over triangles which is a Vec&lt;Triangle&gt; and not the model that contains the Vec"}], "answers": [{"comments": [{"owner": {"reputation": 105, "user_id": 1108691, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/b0be8d1da5e825011d605fbe568ed88e?s=128&d=identicon&r=PG", "display_name": "vishpat", "link": "https://stackoverflow.com/users/1108691/vishpat"}, "edited": false, "score": 0, "creation_date": 1524750841, "post_id": 50035795, "comment_id": 87105807, "body": "Thanks a bunch. That did it."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 3, "last_activity_date": 1524722437, "creation_date": 1524722437, "answer_id": 50035795, "question_id": 50034449, "link": "https://stackoverflow.com/questions/50034449/no-method-named-par-iter-found-for-type/50035795#50035795", "title": "No method named `par_iter` found for type", "body": "<p>As you probably already know <a href=\"https://github.com/rayon-rs/rayon#using-rayon\" rel=\"nofollow noreferrer\">rayon</a> crate has to be added to <code>Cargo.toml</code> and declared into <code>lib.rs</code>.</p>\n\n<p>Then add the prelude into your <code>mod parser</code>, not into the root crate:</p>\n\n<pre><code>pub mod parser {\n\n    use std::fs::File;\n    use std::io::Read;\n    use std;\n    use rayon::prelude::*;\n</code></pre>\n\n<p>Finally, you have a mutable iterator, use a <code>par_iter_mut</code>:</p>\n\n<pre><code>    model.triangles.par_iter_mut().for_each(|triangle| triangle.calculate_normal());\n</code></pre>\n"}], "owner": {"reputation": 105, "user_id": 1108691, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/b0be8d1da5e825011d605fbe568ed88e?s=128&d=identicon&r=PG", "display_name": "vishpat", "link": "https://stackoverflow.com/users/1108691/vishpat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1067, "favorite_count": 0, "closed_date": 1524750616, "answer_count": 1, "score": 1, "last_activity_date": 1524722437, "creation_date": 1524713789, "question_id": 50034449, "link": "https://stackoverflow.com/questions/50034449/no-method-named-par-iter-found-for-type", "closed_reason": "Not suitable for this site", "title": "No method named `par_iter` found for type", "body": "<p>I am trying to parallelize the following iter call using the rayon crate</p>\n\n<p><a href=\"https://github.com/vishpat/stl/blob/master/src/lib.rs#L315\" rel=\"nofollow noreferrer\">https://github.com/vishpat/stl/blob/master/src/lib.rs#L315</a></p>\n\n<p>and replace the iter call with par_iter but get the following compile error</p>\n\n<pre>\nerror[E0599]: no method named `par_iter` found for type `std::vec::Vec` in the current scope\n   --> src/lib.rs:221:28\n    |\n221 |             self.triangles.par_iter().map(|triangle| triangle.calculate_normals());\n    |                            ^^^^^^^^\n\n</pre>\n\n<p>What am I missing ?</p>\n"}]