[{"tags": ["rust", "rust-diesel"], "comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 2, "creation_date": 1473878257, "post_id": 39497424, "comment_id": 66312368, "body": "Although I don&#39;t know the specifics about Diesel&#39;s workings, macros are expanded at compile time so I doubt what you&#39;re asking for will work."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1473879896, "post_id": 39497424, "comment_id": 66313231, "body": "Probably, but how does schema migration work then?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473888193, "post_id": 39497424, "comment_id": 66317242, "body": "@DanielFath I think <a href=\"https://github.com/diesel-rs/diesel/blob/master/diesel_cli/README.md\" rel=\"nofollow noreferrer\">each migration is run via a separate tool</a>."}], "answers": [{"tags": [], "owner": {"reputation": 3368, "user_id": 385966, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/0f674817f8c6e149518f0a4b4ad3d560?s=128&d=identicon&r=PG", "display_name": "sgrif", "link": "https://stackoverflow.com/users/385966/sgrif"}, "is_accepted": true, "score": 5, "last_activity_date": 1474050971, "creation_date": 1474050971, "answer_id": 39538091, "question_id": 39497424, "link": "https://stackoverflow.com/questions/39497424/can-diesel-change-schema-at-runtime/39538091#39538091", "title": "Can Diesel change schema at runtime?", "body": "<p>No. The schema is determined at compile time. After migrating your database you need to recompile your application.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 316, "favorite_count": 0, "accepted_answer_id": 39538091, "answer_count": 1, "score": 4, "last_activity_date": 1474050971, "creation_date": 1473878200, "question_id": 39497424, "link": "https://stackoverflow.com/questions/39497424/can-diesel-change-schema-at-runtime", "title": "Can Diesel change schema at runtime?", "body": "<p>Is it possible for <code>diesel</code> to listen and change its schema at runtime? Like for example if table is added during runtime, can we detect change and create an appropriate table using <code>table!</code> macro after program has started?</p>\n"}, {"tags": ["struct", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473872247, "post_id": 39495717, "comment_id": 66309249, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>. Your second half is <a href=\"http://stackoverflow.com/q/29861388/155423\">already answered</a>. The Rust coding style is <code>snake_case</code>, not <code>camelCase</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473872424, "post_id": 39495717, "comment_id": 66309342, "body": "Have you looked at any of the <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+%22does+not+live+long+enough%22+is%3Aq\">91 existing questions with the same error message</a>? How does this question differ from those? Please show <a href=\"http://meta.stackoverflow.com/q/261592/155423\">what effort you have already made to solve the problem</a>."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473874183, "post_id": 39495717, "comment_id": 66310289, "body": "I am not asking how to eliminate this error, I know how to do it. A better understanding of lifetime parameters is what I am after."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473874896, "post_id": 39495717, "comment_id": 66310680, "body": "I&#39;m going to mark this as a duplicate of <a href=\"http://stackoverflow.com/q/29861388/155423\">stackoverflow.com/q/29861388/155423</a> because you indicated that the real question is the &quot;what are consequences&quot; and that&#39;s answered well by that other question."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473877907, "post_id": 39495717, "comment_id": 66312200, "body": "I hope I have made myself clear enough now."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1473880538, "post_id": 39495717, "comment_id": 66313586, "body": "The linked question has several issues and the last part of the accepted answer is actually just wrong -- but it&#39;s hard to answer a barrage of questions. Perhaps you could reduce it to &quot;Why can&#39;t I call <code>make_bar</code> with these 2 parameters of different lifetimes?&quot; which is a legitimate question that comes from the fact that the borrow checker is issuing misleading error messages."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1473881408, "post_id": 39495717, "comment_id": 66314058, "body": "I think there is a real question here about how the compiler infers a lifetime parameter of a struct (or function) when its members (or arguments) have different lifetimes in the creator (or caller). I didn&#39;t find any promising questions on that topic when searching."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1473889551, "post_id": 39495717, "comment_id": 66317764, "body": "@trentcl please also leave comments indicating why it&#39;s wrong, downvote incorrect answers, and/or leave a correct answer on the linked question; otherwise people might be mislead when they read it (FWIW, I&#39;m not seeing any egregious errors over there)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473942865, "post_id": 39495717, "comment_id": 66338179, "body": "This was <a href=\"https://www.reddit.com/r/rust/comments/52vfhz/same_lifetime_parameter_for_all_fields_of_a_struct/\" rel=\"nofollow noreferrer\">cross-posted to Reddit</a>."}], "answers": [{"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 1, "last_activity_date": 1474023191, "creation_date": 1474023191, "answer_id": 39529732, "question_id": 39495717, "link": "https://stackoverflow.com/questions/39495717/same-lifetime-parameter-for-all-fields-of-a-struct/39529732#39529732", "title": "Same lifetime parameter for all fields of a struct", "body": "<blockquote>\n  <p>What are the (semantic and practical) differences between the\n  following two structs?</p>\n</blockquote>\n\n<p>There is a small example to demonstrate the difference:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Foo;\n\n#[derive(Debug)]\nstruct Bar1&lt;'b&gt; {\n    foo1: &amp;'b Foo,\n    foo2: &amp;'b Foo,\n}\n\n#[derive(Debug)]\nstruct Bar2&lt;'a, 'b&gt; {\n    foo1: &amp;'a Foo,\n    foo2: &amp;'b Foo,\n}\n\nfn main() {//'a --&gt;\n    let foo1 = Foo;\n    let ref_foo1 = \n    {//'b --&gt;\n        let foo2 = Foo;\n        //error: `foo2` does not live long enough\n        //replace the Bar1 with Bar2 in the row below to fix error \n        let bar = Bar1{foo1:&amp;foo1, foo2:&amp;foo2};\n        bar.foo1\n    };//--&gt; 'b\n    println!(\"ref_foo1={:?}\", ref_foo1);\n}//--&gt; 'a\n</code></pre>\n\n<p>The <code>Bar1</code> truncates the lifetimes of its members to their intersection. So you can't get a reference to the <code>foo1</code> with lifetime <code>'a</code> from the <code>Bar1</code> struct. You get the reference with lifetime <code>'b</code>.</p>\n\n<p>I should note that the error message in this case is a bit misleading  </p>\n"}, {"tags": [], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "is_accepted": false, "score": 0, "last_activity_date": 1474271304, "creation_date": 1474271304, "answer_id": 39567916, "question_id": 39495717, "link": "https://stackoverflow.com/questions/39495717/same-lifetime-parameter-for-all-fields-of-a-struct/39567916#39567916", "title": "Same lifetime parameter for all fields of a struct", "body": "<p>I will paste an answer from reddit that I am really happy with.</p>\n\n<p>The compiler can combine lifetimes by taking their intersection. That is, if you have <code>'a</code> and <code>'b</code>, then there is an intersection <code>'c</code> of <code>'a</code> and <code>'b</code>, during which both lifetimes are 'alive'. I believe it is always the case that this intersection is equal to the shortest of 'a and 'b, because of the way scoping works, but perhaps I am mistaken.</p>\n\n<p>In practice, this means that, when you see a <code>fn&lt;'a&gt;(x: &amp;'a T, y: &amp;'a U) -&gt; &amp;'a V</code>, you can put in a <code>&amp;'static T</code> and a <code>&amp;'b U</code>, and you will get a <code>&amp;'b V</code>, because the intersection of <code>'static</code> and <code>'b</code> is <code>'b</code>.</p>\n\n<p>So, why does your method cause the compiler to complain? Because to the compiler it kinda looks like this (it's not valid syntax):</p>\n\n<pre><code>fn extract_bar2&lt;'a&gt;(foo: &amp;'a Foo) -&gt; &amp;'a Foo {\n    'b: {\n        let foo1 = Foo { f: 22 };\n        'c: { // The next line is wrong\n            let foo2: &amp;'a Foo = make_bar&lt;'a&gt;(&amp;'a foo, &amp;'b foo1).bar1;\n            'd: {\n                return foo2;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I've made the scopes more explicit. What happens? The compiler knows that foo2 must have type <code>&amp;'a Foo</code>, because that is what the function returns. So the Bar returned by make_bar must have had lifetime <code>'a</code>: we couldn't get a <code>&amp;'a Foo</code> out of it otherwise. So we must have called <code>make_bar&lt;'a&gt;</code>. But one of the arguments is wrong! <code>foo2</code> does not have lifetime <code>'a</code>, it has lifetime <code>'b</code>, which is outlived by <code>'a</code>. If you take the intersection and do this:</p>\n\n<pre><code>    let foo2: &amp;'b Foo = make_bar&lt;'b&gt;(&amp;'a foo, &amp;'b foo1).bar1;\n</code></pre>\n\n<p>then <code>foo2</code> does not match the return type. </p>\n\n<p>When you use your second definition of <code>Bar</code>, the code will work, because <code>bar1</code> and <code>bar2</code> need not have the same lifetimes in that case. So your second Bar definition is strictly more flexible, but in practice you rarely need that extra flexibility, and the extra lifetime annotations are annoying.</p>\n\n<p>Credit to <a href=\"https://www.reddit.com/user/thiez\" rel=\"nofollow\">https://www.reddit.com/user/thiez</a></p>\n"}], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 647, "favorite_count": 0, "answer_count": 2, "score": -1, "last_activity_date": 1474271304, "creation_date": 1473871410, "last_edit_date": 1473877884, "question_id": 39495717, "link": "https://stackoverflow.com/questions/39495717/same-lifetime-parameter-for-all-fields-of-a-struct", "title": "Same lifetime parameter for all fields of a struct", "body": "<p>Here is the code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Foo {\n    f: i32,\n}\n\n#[derive(Debug)]\nstruct Bar&lt;'a&gt; {\n    bar1: &amp;'a Foo,\n    bar2: &amp;'a Foo,\n}\n\n#[allow(unused_variables)]\nfn make_bar&lt;'a&gt;(foo1: &amp;'a Foo, foo2: &amp;'a Foo) -&gt; Bar&lt;'a&gt; {\n    Bar {\n        bar1: foo1,\n        bar2: foo2,\n    }\n}\n\nfn extract_bar2&lt;'a&gt;(foo: &amp;'a Foo) -&gt; &amp;'a Foo {\n    let foo1 = Foo { f: 22 };\n    let foo2 = make_bar(&amp;foo, &amp;foo1).bar1;\n    foo2\n}\n\nfn main() {\n    let foo = Foo { f: 11 };\n    let foo1 = extract_bar2(&amp;foo);\n    println!(\"foo1: {:?}\", foo1);\n}\n</code></pre>\n\n<p>This gives an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `foo1` does not live long enough\n  --&gt; src/main.rs:23:32\n   |&gt;\n23 |&gt;     let foo2 = make_bar(&amp;foo, &amp;foo1).bar1;\n   |&gt;                                ^^^^\nnote: reference must be valid for the lifetime 'a as defined on the block at 21:45...\n  --&gt; src/main.rs:21:46\n   |&gt;\n21 |&gt; fn extract_bar2&lt;'a&gt;(foo: &amp;'a Foo) -&gt; &amp;'a Foo {\n   |&gt;                                              ^\nnote: ...but borrowed value is only valid for the block suffix following statement 0 at 22:29\n  --&gt; src/main.rs:22:30\n   |&gt;\n22 |&gt;     let foo1 = Foo { f: 22 };\n   |&gt;                              ^\n</code></pre>\n\n<p>The core question is: What does a lifetime parameter actually means in the context of a struct? </p>\n\n<p>More specifically: What are the consequences of having the same lifetime parameter for all fields of a struct? Do their lifetimes have to be exactly the same? Do they have to overlap? If so to what extent should they overlap?</p>\n\n<p>What are the (semantic and practical) differences between the following two structs?</p>\n\n<pre><code>struct Bar&lt;'b&gt; {\n    bar1: &amp;'b Foo,\n    bar2: &amp;'b Foo,\n}\nstruct Bar&lt;'a, 'b&gt; {\n    bar1: &amp;'a Foo,\n    bar2: &amp;'b Foo,\n}\n</code></pre>\n"}, {"tags": ["rust", "bare-metal"], "answers": [{"comments": [{"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 1, "creation_date": 1520375645, "post_id": 39491059, "comment_id": 85287643, "body": "This needs <code>self.offset += bytes.len();</code> in write_str(), but otherwise this works. Was wondering why formatting a float printed only the fractional parts."}, {"owner": {"reputation": 648, "user_id": 9968825, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6d0332ac7d53381e1a5b84b320fd135?s=128&d=identicon&r=PG", "display_name": "chrysn", "link": "https://stackoverflow.com/users/9968825/chrysn"}, "edited": false, "score": 0, "creation_date": 1534434074, "post_id": 39491059, "comment_id": 90713040, "body": "As a note, this does not directly duplicate io::Cursor, as io::Cursor implements <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html\" rel=\"nofollow noreferrer\">std::io::Write</a>, while this implements <a href=\"https://doc.rust-lang.org/std/fmt/fn.write.html\" rel=\"nofollow noreferrer\">{core,std}::fmt::Write</a>. Those Write traits differ in their result types, but the <a href=\"https://doc.rust-lang.org/std/macro.write.html\" rel=\"nofollow noreferrer\">write! macro</a> happily accepts anything that implements <i>a</i> write_fmt method (both Write traits do) and returns the respective result."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 648, "user_id": 9968825, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6d0332ac7d53381e1a5b84b320fd135?s=128&d=identicon&r=PG", "display_name": "chrysn", "link": "https://stackoverflow.com/users/9968825/chrysn"}, "edited": false, "score": 0, "creation_date": 1534439209, "post_id": 39491059, "comment_id": 90715853, "body": "@chrysn sure; I mean only <i>behavior</i>. You can choose to implement both traits, depending on whichever you need."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1557335332, "last_edit_date": 1557335332, "creation_date": 1473857885, "answer_id": 39491059, "question_id": 39488327, "link": "https://stackoverflow.com/questions/39488327/how-to-format-output-to-a-byte-array-with-no-std-and-no-allocator/39491059#39491059", "title": "How to format output to a byte array with no_std and no allocator?", "body": "<p>Let's start with the standard version:</p>\n\n<pre><code>use std::io::Write;\n\nfn main() {\n    let x = 123;\n    let mut buf = [0 as u8; 20];\n    write!(&amp;mut buf[..], \"{}\", x).expect(\"Can't write\");\n    assert_eq!(&amp;buf[0..3], b\"123\");\n}\n</code></pre>\n\n<p>If we then remove the standard library:</p>\n\n<pre><code>#![feature(lang_items)]\n#![no_std]\n\nuse core::panic::PanicInfo;\n\n#[lang = \"eh_personality\"]\nextern \"C\" fn eh_personality() {}\n\n#[panic_handler]\nfn panic(info: &amp;PanicInfo) -&gt; ! {\n    loop {}\n}\n\nfn main() {\n    let x = 123;\n    let mut buf = [0 as u8; 20];\n    write!(&amp;mut buf[..], \"{}\", x).expect(\"Can't write\");\n    assert_eq!(&amp;buf[0..3], b\"123\");\n}\n</code></pre>\n\n<p>We get the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `write_fmt` found for type `&amp;mut [u8]` in the current scope\n  --&gt; src/main.rs:17:5\n   |\n17 |     write!(&amp;mut buf[..], \"{}\", x).expect(\"Can't write\");\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</code></pre>\n\n<p><code>write_fmt</code> is implemented in the core library by <a href=\"https://doc.rust-lang.org/core/fmt/trait.Write.html\" rel=\"noreferrer\"><code>core::fmt::Write</code></a>. If we implement it ourselves, we are able to pass that error:</p>\n\n<pre><code>#![feature(lang_items)]\n#![feature(start)]\n#![no_std]\n\nuse core::panic::PanicInfo;\n\n#[lang = \"eh_personality\"]\nextern \"C\" fn eh_personality() {}\n\n#[panic_handler]\nfn panic(info: &amp;PanicInfo) -&gt; ! {\n    loop {}\n}\n\nuse core::fmt::{self, Write};\n\nstruct Wrapper&lt;'a&gt; {\n    buf: &amp;'a mut [u8],\n    offset: usize,\n}\n\nimpl&lt;'a&gt; Wrapper&lt;'a&gt; {\n    fn new(buf: &amp;'a mut [u8]) -&gt; Self {\n        Wrapper {\n            buf: buf,\n            offset: 0,\n        }\n    }\n}\n\nimpl&lt;'a&gt; fmt::Write for Wrapper&lt;'a&gt; {\n    fn write_str(&amp;mut self, s: &amp;str) -&gt; fmt::Result {\n        let bytes = s.as_bytes();\n\n        // Skip over already-copied data\n        let remainder = &amp;mut self.buf[self.offset..];\n        // Check if there is space remaining (return error instead of panicking)\n        if remainder.len() &lt; bytes.len() { return Err(core::fmt::Error); }\n        // Make the two slices the same length\n        let remainder = &amp;mut remainder[..bytes.len()];\n        // Copy\n        remainder.copy_from_slice(bytes);\n\n        // Update offset to avoid overwriting\n        self.offset += bytes.len();\n\n        Ok(())\n    }\n}\n\n#[start]\nfn start(_argc: isize, _argv: *const *const u8) -&gt; isize {\n    let x = 123;\n    let mut buf = [0 as u8; 20];\n    write!(Wrapper::new(&amp;mut buf), \"{}\", x).expect(\"Can't write\");\n    assert_eq!(&amp;buf[0..3], b\"123\");\n    0\n}\n</code></pre>\n\n<p>Note that we are duplicating the behavior of <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"noreferrer\"><code>io::Cursor</code></a> into this wrapper. Normally, multiple writes to a <code>&amp;mut [u8]</code> will overwrite each other. This is good for reusing allocation, but not useful when you have consecutive writes of the same data.</p>\n\n<p>Then it's just a matter of writing a macro if you want to.</p>\n\n<p>You should also be able to use a crate like <a href=\"https://crates.io/crates/arrayvec\" rel=\"noreferrer\">arrayvec</a>, which has written this code for you. This is untested:</p>\n\n<pre><code>#![feature(lang_items)]\n#![feature(start)]\n#![no_std]\n\nuse core::panic::PanicInfo;\n\n#[lang = \"eh_personality\"]\nextern \"C\" fn eh_personality() {}\n\n#[panic_handler]\nfn panic(_info: &amp;PanicInfo) -&gt; ! {\n    loop {}\n}\n\nuse arrayvec::ArrayString; // 0.4.10\nuse core::fmt::Write;\n\n#[start]\nfn start(_argc: isize, _argv: *const *const u8) -&gt; isize {\n    let x = 123;\n    let mut buf = ArrayString::&lt;[u8; 20]&gt;::new();\n    write!(&amp;mut buf, \"{}\", x).expect(\"Can't write\");\n    assert_eq!(&amp;buf, \"123\");\n    0\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 0, "last_activity_date": 1605710590, "last_edit_date": 1605710590, "creation_date": 1605316590, "answer_id": 64830007, "question_id": 39488327, "link": "https://stackoverflow.com/questions/39488327/how-to-format-output-to-a-byte-array-with-no-std-and-no-allocator/64830007#64830007", "title": "How to format output to a byte array with no_std and no allocator?", "body": "<p>With <a href=\"https://docs.rs/bare-io/0.2.1/bare_io/\" rel=\"nofollow noreferrer\">bare_io</a>:</p>\n<pre><code>use bare_io::{Cursor, Write};\n\nlet mut buf = [0 as u8; 256];\nlet mut cur = Cursor::new(&amp;mut buf[..]);\nwrite!(&amp;mut cur, &quot;hello world, stack buf, {}\\n\\0&quot;, 234).expect(&quot;!write&quot;);\nunsafe { puts(buf.as_ptr()) };\n</code></pre>\n<p>With <code>bare_io</code>, <a href=\"https://docs.rs/smallvec/1.4.2/smallvec/\" rel=\"nofollow noreferrer\">smallvec</a> and <code>alloc</code>:</p>\n<pre><code>use smallvec::{Array, SmallVec};\n\nstruct WriteSmallVec&lt;A: Array&lt;Item = u8&gt;&gt;(SmallVec&lt;A&gt;);\nimpl&lt;A: Array&lt;Item = u8&gt;&gt; Write for WriteSmallVec&lt;A&gt; {\n    fn write(&amp;mut self, buf: &amp;[u8]) -&gt; bare_io::Result&lt;usize&gt; {\n        self.0.extend_from_slice(buf);\n        Ok(buf.len())\n    }\n    fn flush(&amp;mut self) -&gt; bare_io::Result&lt;()&gt; {\n        Ok(())\n    }\n}\n\nlet mut sv = WriteSmallVec(SmallVec::&lt;[u8; 256]&gt;::new());\nwrite!(&amp;mut sv, &quot;hello world, SmallVec, prev len: {}\\n\\0&quot;, len).expect(&quot;!write&quot;);\nunsafe { puts(sv.0.as_ptr()) };\n</code></pre>\n<p>With <code>bare_io</code>, <a href=\"https://github.com/fitzgen/inlinable_string/pull/31\" rel=\"nofollow noreferrer\">patched inlinable_string</a> and <code>alloc</code>:</p>\n<pre><code>use core::fmt::Write;\nuse inlinable_string::{InlinableString, StringExt};\n\nlet mut is = InlinableString::new();\nwrite!(&amp;mut is, &quot;hello world, InlinableString, {}\\n\\0&quot;, 345).expect(&quot;!write&quot;);\nunsafe { puts(is.as_ptr()) };\n</code></pre>\n<p>Tested in Linux kernel,</p>\n<pre><code>cargo build --release -Z build-std=core,alloc --target=x86_64-linux-kernel\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/mr0QR.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/mr0QR.png\" alt=\"enter image description here\" /></a></p>\n<p>Also did some benchmarks, comparing a simple array with SmallVec and InlinableString: <a href=\"https://gitlab.com/artemciy/lin-socks/-/blob/95d2bb96/bench/stack-string.rs\" rel=\"nofollow noreferrer\">https://gitlab.com/artemciy/lin-socks/-/blob/95d2bb96/bench/stack-string.rs</a></p>\n"}], "owner": {"reputation": 191, "user_id": 6073636, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4cea9aeca6cd1af1d0399cb8ed50dff9?s=128&d=identicon&r=PG&f=1", "display_name": "Andrey Tonkih", "link": "https://stackoverflow.com/users/6073636/andrey-tonkih"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3689, "favorite_count": 4, "accepted_answer_id": 39491059, "answer_count": 2, "score": 11, "last_activity_date": 1605710590, "creation_date": 1473849442, "last_edit_date": 1557334714, "question_id": 39488327, "link": "https://stackoverflow.com/questions/39488327/how-to-format-output-to-a-byte-array-with-no-std-and-no-allocator", "title": "How to format output to a byte array with no_std and no allocator?", "body": "<p>I want to do something like:</p>\n\n<pre><code>let x = 123;\nlet mut buf = [0 as u8; 20];\nformat_to!(x --&gt; buf);\nassert_eq!(&amp;buf[..3], &amp;b\"123\"[..]);\n</code></pre>\n\n<p>With <code>#![no_std]</code> and without any memory allocator.</p>\n\n<p>As I understand, there is an implementation of <code>core::fmt::Display</code> for <code>u64</code>, and I want to use it if possible.</p>\n\n<p>In other words, I want to do something like <code>format!(...)</code>, but without a memory allocator. How can I do this?</p>\n"}, {"tags": ["io", "network-programming", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473856545, "post_id": 39486919, "comment_id": 66298709, "body": "<i>how do I know how big to make my buffer</i> \u2014 well, you&#39;d probably use the <code>buf</code> passed in, not create your own. You should probably at least try compiling the code."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473867823, "post_id": 39486919, "comment_id": 66306692, "body": "Ha yes, true. I forgot I passed one in. The question remains though: How would the called know how big to make it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473867950, "post_id": 39486919, "comment_id": 66306768, "body": "As a 20k rep user, you already know that you should only ask <a href=\"http://meta.stackexchange.com/q/39223/281829\">one question per question, though</a>. That way, we can <a href=\"http://stackoverflow.com/q/36333976/155423\">mark it as a duplicate</a>. ^_^"}], "answers": [{"tags": [], "owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "is_accepted": false, "score": 0, "last_activity_date": 1474004304, "creation_date": 1474004304, "answer_id": 39524376, "question_id": 39486919, "link": "https://stackoverflow.com/questions/39486919/how-do-i-poll-a-stdnetudpsocket/39524376#39524376", "title": "How do I poll a std::net::UdpSocket?", "body": "<p>Generally you either use blocking or non-blocking mode through the whole lifecycle of the socket. In blocking mode you can use <code>set_read_timeout</code> <code>get_read_timeout</code> instead.</p>\n"}, {"tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": false, "score": 1, "last_activity_date": 1474311234, "creation_date": 1474311234, "answer_id": 39580182, "question_id": 39486919, "link": "https://stackoverflow.com/questions/39486919/how-do-i-poll-a-stdnetudpsocket/39580182#39580182", "title": "How do I poll a std::net::UdpSocket?", "body": "<h1>recv_nonblocking</h1>\n\n<p>Just call <code>set_nonblocking</code> and then <code>recv</code>. If you're really going to use both blocking and nonblocking I/O on the same socket, you can write trivial wrapper functions:</p>\n\n<pre><code>fn recv_nonblocking(this: &amp;UdpSocket, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n    this.set_nonblocking(true);\n    this.recv(buf)\n}\n</code></pre>\n\n<h1>recv_callback</h1>\n\n<p>Good asynchronous I/O primitives have been left out of the standard library, so that the design work can be iterated on without locking down to the stability guarantees and release cycle of the language.</p>\n\n<p>The crate to look at is <a href=\"https://crates.io/crates/mio\" rel=\"nofollow\">mio</a>.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 404, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1474311234, "creation_date": 1473845174, "last_edit_date": 1473867963, "question_id": 39486919, "link": "https://stackoverflow.com/questions/39486919/how-do-i-poll-a-stdnetudpsocket", "title": "How do I poll a std::net::UdpSocket?", "body": "<p>With Rust's <a href=\"https://doc.rust-lang.org/std/net/struct.UdpSocket.html\" rel=\"nofollow\">UdpSocket</a>, it appears to only have <code>send()</code>, <code>recv()</code>, and <code>set_nonblocking(bool)</code>. This is a rather limited set of functions, e.g. it would be nice to have <code>recv()</code> which always blocks until a packet is received and <code>recv_nonblocking()</code> which never blocks, and maybe even <code>recv_callback()</code> that calls a function when a packet is received.</p>\n\n<p>Is there any way to do <code>recv_nonblocking()</code> other than something insane like this:</p>\n\n<pre><code>fn recv_nonblocking(socket: &amp;UdpSocket, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt; {\n\n    try!(socket.set_nonblocking(true));\n\n    // By the way, how do I know how big to make my buffer?\n    // There doesn't seem to be any way to know the size of a packet\n    // before it is returned by socket.recv().\n\n    let res = socket.recv(&amp;mut buf);\n\n    // This isn't really right either because there is no get_nonblocking()\n    // so we can't reliably restore the previous state.\n    try!(socket.set_nonblocking(false));\n\n    res\n}\n</code></pre>\n\n<p>Would that even work?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 11, "creation_date": 1473854681, "post_id": 39482164, "comment_id": 66297508, "body": "This isn&#39;t the same as returning <code>impl Trait</code>. For instance, you couldn&#39;t add a method that in <code>Person</code> returns a <code>Pet</code> but in <code>Pet</code> returns a <code>Person</code>, although both implement <code>A</code>. The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\" rel=\"nofollow noreferrer\">RFC (1522)</a> mentions this limitation and expresses a desire to eventually remove it (first bullet under &quot;Initial Limitations&quot;)."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1473857582, "post_id": 39482164, "comment_id": 66299384, "body": "Honestly I hadn&#39;t considered that @trentcl. My answer seems to have helped the OP. How should I proceed given that it is accepted?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1473858556, "post_id": 39482164, "comment_id": 66300085, "body": "@SimonWhitehead I suggested an edit to the first sentence (not sure how the peer review process works exactly, maybe you can see it). But I think your answer is fine and there&#39;s no reason it shouldn&#39;t be accepted (it solved OP&#39;s immediate problem, after all)."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 17, "last_activity_date": 1473863248, "last_edit_date": 1473863248, "creation_date": 1473824590, "answer_id": 39482164, "question_id": 39482131, "link": "https://stackoverflow.com/questions/39482131/is-it-possible-to-use-impl-trait-as-a-functions-return-type-in-a-trait-defini/39482164#39482164", "title": "Is it possible to use `impl Trait` as a function&#39;s return type in a trait definition?", "body": "<p>If you only need to return the specific type for which the trait is currently being implemented, you may be looking for <code>Self</code>.</p>\n\n<pre><code>trait A {\n    fn new() -&gt; Self;\n}\n</code></pre>\n\n<p>For example, this will compile:</p>\n\n<pre><code>trait A {\n    fn new() -&gt; Self;\n}\n\nstruct Person;\n\nimpl A for Person {\n    fn new() -&gt; Person {\n        Person\n    }\n}\n</code></pre>\n\n<p>Or, a fuller example, demonstrating using the trait:</p>\n\n<pre><code>trait A {\n    fn new&lt;S: Into&lt;String&gt;&gt;(name: S) -&gt; Self;\n    fn get_name(&amp;self) -&gt; String;\n}\n\nstruct Person {\n    name: String\n}\n\nimpl A for Person {\n    fn new&lt;S: Into&lt;String&gt;&gt;(name: S) -&gt; Person {\n        Person { name: name.into() }\n    }\n\n    fn get_name(&amp;self) -&gt; String {\n        self.name.clone()\n    }\n}\n\nstruct Pet {\n    name: String\n}\n\nimpl A for Pet {\n    fn new&lt;S: Into&lt;String&gt;&gt;(name: S) -&gt; Pet {\n        Pet { name: name.into() }\n    }\n\n    fn get_name(&amp;self) -&gt; String {\n        self.name.clone()\n    }\n}\n\nfn main() {\n\n    let person = Person::new(\"Simon\");\n    let pet = Pet::new(\"Buddy\");\n\n    println!(\"{}'s pets name is {}\", get_name(&amp;person), get_name(&amp;pet));\n}\n\nfn get_name&lt;T: A&gt;(a: &amp;T) -&gt; String {\n    a.get_name()\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ed91863c50da8404bdbbccd386260cea&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n\n<p>As a side note.. I have used <code>String</code> here in favor of <code>&amp;str</code> references.. to reduce the need for explicit lifetimes and potentially a loss of focus on the question at hand. I believe it's generally the convention to return a <code>&amp;str</code> reference when borrowing the content and that seems appropriate here.. however I didn't want to distract from the actual example too much.</p>\n"}, {"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1473857689, "post_id": 39490692, "comment_id": 66299470, "body": "Thanks again Shepmaster. I hadn&#39;t considered this entirely so I see that my answer doesn&#39;t directly address the question. That said, it is accepted now and seems to have helped the OP. How do I proceed from here? Should the question perhaps be edited to remove the specific use of <code>impl Trait</code> or should we work to remove the answer entirely?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 3, "creation_date": 1473858088, "post_id": 39490692, "comment_id": 66299761, "body": "@SimonWhitehead I&#39;d be loathe to edit the question so drastically. I think it&#39;s fine to leave both answers. You could change your answer to say something like &quot;although you can&#39;t do <i>X</i> yet, here&#39;s a workaround that might help&quot;. Answering the direct question and providing useful alternatives are both valuable contributions. The checkmark mostly means &quot;this answer helped the OP the most&quot;. Votes mean &quot;this answer helped me&quot;."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 44, "last_activity_date": 1573060001, "last_edit_date": 1592644375, "creation_date": 1473856820, "answer_id": 39490692, "question_id": 39482131, "link": "https://stackoverflow.com/questions/39482131/is-it-possible-to-use-impl-trait-as-a-functions-return-type-in-a-trait-defini/39490692#39490692", "title": "Is it possible to use `impl Trait` as a function&#39;s return type in a trait definition?", "body": "<p>As <a href=\"https://stackoverflow.com/questions/39482131/using-impl-trait-in-trait-definition#comment66297508_39482164\">trentcl mentions</a>, you cannot currently place <code>impl Trait</code> in the return position of a trait method.</p>\n<p>From <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\" rel=\"noreferrer\">RFC 1522</a>:</p>\n<blockquote>\n<p><code>impl Trait</code> may only be written within the return type of a freestanding or inherent-impl function, not in trait definitions or any non-return type position. They may also not appear in the return type of closure traits or function pointers, unless these are themselves part of a legal return type.</p>\n<ul>\n<li>Eventually, we will want to allow the feature to be used within traits [...]</li>\n</ul>\n</blockquote>\n<p>For now, you must use a boxed trait object:</p>\n<pre><code>trait A {\n    fn new() -&gt; Box&lt;dyn A&gt;;\n}\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31897330/155423\">Is it possible to have a constructor function in a trait?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38159771/155423\">Why can a trait not construct itself?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30661046/155423\">How do I return an instance of a trait from a method?</a></li>\n</ul>\n<h3>Nightly only</h3>\n<p>If you wish to use unstable nightly features, you can use <a href=\"https://rust-lang.github.io/rfcs/2071-impl-trait-existential-types.html\" rel=\"noreferrer\"><em>existential types</em> (RFC 2071)</a>:</p>\n<pre><code>// 1.40.0-nightly (2019-11-05 1423bec54cf2db283b61)\n#![feature(type_alias_impl_trait)]\n\ntrait FromTheFuture {\n    type Iter: Iterator&lt;Item = u8&gt;;\n\n    fn example(&amp;self) -&gt; Self::Iter;\n}\n\nimpl FromTheFuture for u8 {\n    type Iter = impl Iterator&lt;Item = u8&gt;;\n\n    fn example(&amp;self) -&gt; Self::Iter {\n        std::iter::repeat(*self).take(*self as usize)\n    }\n}\n\nfn main() {\n    for v in 7.example() {\n        println!(&quot;{}&quot;, v);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 7066, "user_id": 94102, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/622606bdd7ad08e2d2e177a8a8bb507a?s=128&d=identicon&r=PG", "display_name": "Jeremy Salwen", "link": "https://stackoverflow.com/users/94102/jeremy-salwen"}, "is_accepted": false, "score": 13, "last_activity_date": 1581432263, "last_edit_date": 1581432263, "creation_date": 1491171718, "answer_id": 43174171, "question_id": 39482131, "link": "https://stackoverflow.com/questions/39482131/is-it-possible-to-use-impl-trait-as-a-functions-return-type-in-a-trait-defini/43174171#43174171", "title": "Is it possible to use `impl Trait` as a function&#39;s return type in a trait definition?", "body": "<p>You can get something similar even in the case where it's not returning <code>Self</code> by using an <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types\" rel=\"noreferrer\"><em>associated type</em></a> and explicitly naming the return type:</p>\n\n<pre><code>trait B {}\nstruct C;\n\nimpl B for C {}\n\ntrait A {\n    type FReturn: B;\n    fn f() -&gt; Self::FReturn;\n}\n\nstruct Person;\n\nimpl A for Person {\n    type FReturn = C;\n    fn f() -&gt; C {\n        C\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3201, "user_id": 5986907, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/0521ce05a7fcb2580e4f513990a5a8c8?s=128&d=identicon&r=PG&f=1", "display_name": "joel", "link": "https://stackoverflow.com/users/5986907/joel"}, "is_accepted": false, "score": 0, "last_activity_date": 1566683496, "last_edit_date": 1566683496, "creation_date": 1566679987, "answer_id": 57641463, "question_id": 39482131, "link": "https://stackoverflow.com/questions/39482131/is-it-possible-to-use-impl-trait-as-a-functions-return-type-in-a-trait-defini/57641463#57641463", "title": "Is it possible to use `impl Trait` as a function&#39;s return type in a trait definition?", "body": "<p>Fairly new to Rust, so may need checking.</p>\n\n<p>You could parametrise over the return type. This has limits, but they're less restrictive than simply returning <code>Self</code>.</p>\n\n<pre><code>trait A&lt;T&gt; where T: A&lt;T&gt; {\n    fn new() -&gt; T;\n}\n\n// return a Self type\nstruct St1;\nimpl A&lt;St1&gt; for St1 {\n    fn new() -&gt; St1 { St1 }\n}\n\n// return a different type\nstruct St2;\nimpl A&lt;St1&gt; for St2 {\n    fn new() -&gt; St1 { St1 }\n}\n\n// won't compile as u32 doesn't implement A&lt;u32&gt;\nstruct St3;\nimpl A&lt;u32&gt; for St3 {\n    fn new() -&gt; u32 { 0 }\n}\n</code></pre>\n\n<p>The limit in this case is that you can only return a type <code>T</code> that implements <code>A&lt;T&gt;</code>. Here, <code>St1</code> implements <code>A&lt;St1&gt;</code>, so it's OK for <code>St2</code> to <code>impl A&lt;St2&gt;</code>. However, it wouldn't work with, for example,</p>\n\n<pre><code>impl A&lt;St1&gt; for St2 ...\nimpl A&lt;St2&gt; for St1 ...\n</code></pre>\n\n<p>For that you'd need to restrict the types further, with e.g.</p>\n\n<pre><code>trait A&lt;T, U&gt; where U: A&lt;T, U&gt;, T: A&lt;U, T&gt; {\n    fn new() -&gt; T;\n}\n</code></pre>\n\n<p>but I'm struggling to get my head round this last one.</p>\n"}], "owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12456, "favorite_count": 4, "accepted_answer_id": 39482164, "answer_count": 4, "score": 44, "last_activity_date": 1581432263, "creation_date": 1473824305, "last_edit_date": 1573059742, "question_id": 39482131, "link": "https://stackoverflow.com/questions/39482131/is-it-possible-to-use-impl-trait-as-a-functions-return-type-in-a-trait-defini", "title": "Is it possible to use `impl Trait` as a function&#39;s return type in a trait definition?", "body": "<p>Is it at all possible to define functions inside of traits as having <code>impl Trait</code> return types?  I want to create a trait that can be implemented by multiple structs so that the <code>new()</code> functions of all of them returns an object that they can all be used in the same way without having to write code specific to each one.</p>\n\n<pre><code>trait A {\n    fn new() -&gt; impl A;\n}\n</code></pre>\n\n<p>However, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n --&gt; src/lib.rs:2:17\n  |\n2 |     fn new() -&gt; impl A;\n  |                 ^^^^^^\n</code></pre>\n\n<p>Is this a limitation of the current implementation of <code>impl Trait</code> or am I using it wrong?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 1074, "user_id": 197498, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9badb8b30cf30d420552e026a921499?s=128&d=identicon&r=PG", "display_name": "Tim Morgan", "link": "https://stackoverflow.com/users/197498/tim-morgan"}, "edited": false, "score": 0, "creation_date": 1473808473, "post_id": 39480264, "comment_id": 66279707, "body": "After typing this out, I&#39;m thinking maybe the closure needs an explicit return type??"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1473813906, "post_id": 39480264, "comment_id": 66280870, "body": "Not related to your problem, but you don&#39;t need to call <code>.to_string()</code> so much if you compare against <code>*t</code> instead of just <code>t</code>. The reason for the <code>*</code> is because an iterator over an array yields references to (not copies of) the array&#39;s elements. <code>.to_string()</code> makes it work, but is kind of convoluted by comparison."}, {"owner": {"reputation": 1074, "user_id": 197498, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9badb8b30cf30d420552e026a921499?s=128&d=identicon&r=PG", "display_name": "Tim Morgan", "link": "https://stackoverflow.com/users/197498/tim-morgan"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1473815887, "post_id": 39480264, "comment_id": 66281296, "body": "Oh, thanks @trentcl!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1473808550, "creation_date": 1473808550, "answer_id": 39480320, "question_id": 39480264, "link": "https://stackoverflow.com/questions/39480264/how-to-return-a-vector-of-boxed-traits-using-map-functional-rather-than-imperat/39480320#39480320", "title": "How to return a vector of boxed traits using map (functional rather than imperative)", "body": "<p>This has nothing to do with functional vs. imperative. Just pure types:</p>\n\n<pre><code>struct Foo {}\nstruct Bar {}\n\ntrait Thing {}\n\nimpl Thing for Foo {}\nimpl Thing for Bar {}\n\nfn main() {\n    let t = \"quux\";\n\n    if t == \"foo\" {\n        Some(Box::new(Foo {}))\n    } else if t == \"bar\" {\n        Some(Box::new(Bar {}))\n    } else {\n        None\n    };\n}\n</code></pre>\n\n<p>What type is returned from the <code>if</code>/<code>else</code>? The first branch says it's an <code>Option&lt;Box&lt;Foo&gt;&gt;</code>. The second says it's <code>Option&lt;Box&lt;Bar&gt;&gt;</code>. Those aren't the same type. If you coerce the types:</p>\n\n<pre><code>if t == \"foo\" {\n    Some(Box::new(Foo {}) as Box&lt;Thing&gt;)\n} else if t == \"bar\" {\n    Some(Box::new(Bar {}) as Box&lt;Thing&gt;)\n} else {\n    None\n};\n</code></pre>\n\n<p>It will all work.</p>\n\n<p>You can also specify the type of the value:</p>\n\n<pre><code>let x: Option&lt;Box&lt;Thing&gt;&gt; = if t == \"foo\" {\n    Some(Box::new(Foo {}))\n} else if t == \"bar\" {\n    Some(Box::new(Bar {}))\n} else {\n    None\n};\n</code></pre>\n\n<p>Or, like you said, specify the type by annotating the closure:</p>\n\n<pre><code>.filter_map(|t| -&gt; Option&lt;Box&lt;Thing&gt;&gt; {\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1074, "user_id": 197498, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9badb8b30cf30d420552e026a921499?s=128&d=identicon&r=PG", "display_name": "Tim Morgan", "link": "https://stackoverflow.com/users/197498/tim-morgan"}, "edited": false, "score": 0, "creation_date": 1473809484, "post_id": 39480329, "comment_id": 66279944, "body": "Thank you for your answer!"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 5, "last_activity_date": 1473808629, "creation_date": 1473808629, "answer_id": 39480329, "question_id": 39480264, "link": "https://stackoverflow.com/questions/39480264/how-to-return-a-vector-of-boxed-traits-using-map-functional-rather-than-imperat/39480329#39480329", "title": "How to return a vector of boxed traits using map (functional rather than imperative)", "body": "<p>This has actually nothing to do with those two programming styles, but is a mere coincidence of your code. In your first function you explicitly state the type of the vector:</p>\n\n<pre><code>let mut things: Vec&lt;Box&lt;Thing&gt;&gt; = vec![];\n</code></pre>\n\n<p>In your second function you never mention that you want a vector full of <code>Box&lt;Thing&gt;</code>. You only have an <code>if-else</code> construct, whose cases return:</p>\n\n<ul>\n<li><code>Some(Box::new(Foo {}))</code></li>\n<li><code>Some(Box::new(Bar {}))</code></li>\n<li><code>None</code></li>\n</ul>\n\n<p>The compiler sees the first case and assumes: \"OK, the programmer wants to return <code>Option&lt;Box&lt;Foo&gt;&gt;</code>\". But then in the next case you have an <code>Option&lt;Box&lt;Bar&gt;&gt;</code>. Now the compiler is confused. But it won't search the whole type space to find a trait that is implemented by both types (<code>Foo</code> and <code>Bar</code>). Also: there could be multiple traits which are all implemented by both, <code>Foo</code> and <code>Bar</code>. My point: you <em>have</em> to tell the compiler something about <code>Thing</code>!</p>\n\n<p>To do so, you have multiple choices, for example:</p>\n\n<pre><code>if t == \"foo\" {\n    Some(Box::new(Foo {}) as Box&lt;Thing&gt;)\n} else { /* ... */ }\n</code></pre>\n\n<p>Just adding <code>as Box&lt;Thing&gt;</code> to the <em>first</em> case is already enough and the compiler is happy.</p>\n"}], "owner": {"reputation": 1074, "user_id": 197498, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9badb8b30cf30d420552e026a921499?s=128&d=identicon&r=PG", "display_name": "Tim Morgan", "link": "https://stackoverflow.com/users/197498/tim-morgan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 662, "favorite_count": 0, "accepted_answer_id": 39480320, "answer_count": 2, "score": 3, "last_activity_date": 1473835583, "creation_date": 1473808138, "last_edit_date": 1473835583, "question_id": 39480264, "link": "https://stackoverflow.com/questions/39480264/how-to-return-a-vector-of-boxed-traits-using-map-functional-rather-than-imperat", "title": "How to return a vector of boxed traits using map (functional rather than imperative)", "body": "<p>I'm new to Rust, and I'm only just beginning to grasp some core concepts.</p>\n\n<p>In my case, I need to return a vector of boxed traits. I'd like to do it in functional programming style, but I can't get it to compile.</p>\n\n<p>Can someone explain why the below code works when I use a <code>for</code> loop (imperative style), but doesn't work when using a functional programming style using an iterator (<code>filter_map</code> in this case)?</p>\n\n<p><em>Note:</em> this is a contrived example and has been reduced to the simplest form I could write in order to demonstrate my misunderstanding. </p>\n\n<pre><code>#![allow(unused_variables)]\n\nstruct Foo {}\nstruct Bar {}\n\ntrait Thing {}\n\nimpl Thing for Foo {}\nimpl Thing for Bar {}\n\nfn main() {\n    let things = get_things_using_for_loop(); // works!\n    let things = get_things_using_iterator(); // doesn't work! :-(\n}\n\nfn get_things_using_for_loop() -&gt; Vec&lt;Box&lt;Thing&gt;&gt; {\n    let mut things: Vec&lt;Box&lt;Thing&gt;&gt; = vec![];\n    for t in [\"foo\".to_string(), \"bar\".to_string()].iter() {\n        if t == \"foo\" {\n            things.push(Box::new(Foo {}))\n        } else if t == \"bar\" {\n            things.push(Box::new(Bar {}))\n        }\n    }\n    things\n}\n\nfn get_things_using_iterator() -&gt; Vec&lt;Box&lt;Thing&gt;&gt; {\n    [\"foo\".to_string(), \"bar\".to_string()]\n        .iter()\n        .filter_map(|t| {\n            if t == \"foo\" {\n                Some(Box::new(Foo {}))\n            } else if t == \"bar\" {\n                Some(Box::new(Bar {}))\n            } else {\n                None\n            }\n        })\n        .collect()\n}\n</code></pre>\n\n<p>The function <code>get_things_using_for_loop()</code> compiles, while the function <code>get_things_using_iterator()</code> does not.</p>\n\n<p>Here is the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [--explain E0308]\n  --&gt; &lt;anon&gt;:23:31\n   |&gt;\n23 |&gt;                 Some(Box::new(Bar {}))\n   |&gt;                               ^^^^^^ expected struct `Foo`, found struct `Bar`\nnote: expected type `Foo`\nnote:    found type `Bar`\n</code></pre>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1473799184, "post_id": 39477684, "comment_id": 66276449, "body": "<i>Crash</i> is a horribly misused word nowadays IMO; people even use it for an unhandled exception in languages with exceptions. Panicking the program is nowhere near as bad as a segfault, for example. Panicking is deliberately saying &quot;the state of the program is <i>wrong</i> and I&#39;m stopping right now, no two ways about it."}, {"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473799351, "post_id": 39477684, "comment_id": 66276519, "body": "@Shepmaster Ok thanks for these precisions!"}], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 2, "creation_date": 1473798472, "post_id": 39477994, "comment_id": 66276108, "body": "I personally think <code>unwrap()</code> is dangerous and prevents your code from modification because it needs you to be very careful when editing the code because <code>unwrap()</code> depends on what is written before. Also, you may know some conditions under which some <code>unwrap()</code> may be safe but you <i>must</i> think that these conditions may change some day and that you will need to reread and understand everything that is done before this unwrap. I also think that if you has already written <code>unwrap()</code> it is better to make a comment <code>&#47;&#47; safe</code> in these lines. I do this to check how much unwrap do I have with <code>grep</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1473798720, "post_id": 39477994, "comment_id": 66276225, "body": "Those conditions may or may not have to change in the future. I&#39;m not saying it&#39;s a rule - it&#39;s just perfectly possible."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1473797028, "last_edit_date": 1473797028, "creation_date": 1473796381, "answer_id": 39477994, "question_id": 39477684, "link": "https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application/39477994#39477994", "title": "Should I avoid unwrap in production application?", "body": "<p><code>unwrap()</code> is not necessarily dangerous. Just like with <code>unreachable!()</code> there are cases where you can be sure some condition will not be triggered.</p>\n\n<p>Functions returning <code>Option</code> or <code>Result</code> are sometimes just suited to a wider range of conditions, but due to how your program is structured those cases might never occur.</p>\n\n<p>For example: when you create an iterator from a <code>Vec</code>tor you buid yourself, you know its exact length and can be sure how long invoking <code>next()</code> on it returns a <code>Some&lt;T&gt;</code> (and you can safely <code>unwrap()</code> it).</p>\n"}, {"comments": [{"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "edited": false, "score": 0, "creation_date": 1473799037, "post_id": 39478185, "comment_id": 66276400, "body": "Boom, super clear! I read it carefully and learned a lot! I will keep this in mind: &quot;you can very often restructure your code to avoid the unwrap()!&quot;"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1473811841, "post_id": 39478185, "comment_id": 66280410, "body": "I&#39;d +1 that answer if it had just one mention of <code>expect()</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1473835302, "post_id": 39478185, "comment_id": 66286392, "body": "I&#39;d rather he used <code>expect(&quot;&quot;)</code> stating what he was expecting in the string rather than <code>unwrap()</code> stating what the was expecting in a comment above!"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1473853422, "post_id": 39478185, "comment_id": 66296732, "body": "I&#39;m not sure about that. Sure, often <code>expect(&quot;&quot;)</code> is a better choice. But: the user should never see panics anyway. And if the stack trace is already enough for the developer to figure out what the problem is, then it&#39;s often enough to simply <code>unwrap()</code>. Also: I&#39;m talking about 4 to 15 lines comments describing exactly why the following <code>unwrap()</code> can&#39;t possibly fail. I don&#39;t want to type that into a string."}, {"owner": {"reputation": 13280, "user_id": 435253, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80df0d0f2a1945a7bed366ff25f8ea5d?s=128&d=identicon&r=PG", "display_name": "ssokolow", "link": "https://stackoverflow.com/users/435253/ssokolow"}, "edited": false, "score": 1, "creation_date": 1529763712, "post_id": 39478185, "comment_id": 88997867, "body": "I prefer something like <code>.expect(&quot;string literal is valid regex&quot;)</code> over <code>.unwrap()</code> because it helps to document <i>why</i> unwrapping was chosen originally, which can be important for deciding on the proper fix when multiple cycles of maintenance and refactoring have obscured it. (Not to mention possibly informing the reafactoring so the odds of a problem being introduced are lower.)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 33, "last_activity_date": 1473797748, "last_edit_date": 1473797748, "creation_date": 1473797178, "answer_id": 39478185, "question_id": 39477684, "link": "https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application/39478185#39478185", "title": "Should I avoid unwrap in production application?", "body": "<p>While the whole \u201cerror handling\u201d-topic is very complicated and often opinion based, this question can actually be answered here, because Rust has rather narrow philosophy. That is:</p>\n\n<ul>\n<li><code>panic!</code> for <strong>programming errors</strong> (\u201cbugs\u201d)</li>\n<li>proper error propagation and handling with <code>Result&lt;T, E&gt;</code> and <code>Option&lt;T&gt;</code> for <strong>expected and <em>recoverable</em> errors</strong></li>\n</ul>\n\n<p>One can think of <code>unwrap()</code> as <em>converting</em> between those two kinds of errors (it is converting a recoverable error into a <code>panic!()</code>). When you write <code>unwrap()</code> in your program, you are saying: </p>\n\n<blockquote>\n  <p>At this point, a <code>None</code>/<code>Err(_)</code> value is a <em>programming error</em> and the program is unable to recover from it.</p>\n</blockquote>\n\n<hr>\n\n<p>For example, say you are working with a <code>HashMap</code> and want to insert a value which you may want to mutate later:</p>\n\n<pre><code>age_map.insert(\"peter\", 21);\n// ...\n\nif /* some condition */ {\n    *age_map.get_mut(\"peter\").unwrap() += 1;\n}\n</code></pre>\n\n<p>Here we use the <code>unwrap()</code>, because we can be sure that the key holds a value. It would be a programming error if it didn't and even more important: it's not really recoverable. What would you do when at that point there is no value with the key <code>\"peter\"</code>? Try inserting it again ... ?</p>\n\n<p>But as you may know, there is a beautiful <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\"><code>entry</code> API</a> for the maps in Rust's standard library. With that API you can avoid all those <code>unwrap()</code>s. And this applies to pretty much all situations: <strong>you can very often restructure your code to avoid the <code>unwrap()</code></strong>! Only in a very few situation there is no way around it. But then it's OK to use it, if you want to signal: at this point, it would be a programming bug.</p>\n\n<hr>\n\n<p>There has been a recent, fairly popular blog post on the topic of \u201cerror handling\u201d whose conclusion is similar to Rust's philosophy. It's rather long but worth reading: <a href=\"http://joeduffyblog.com/2016/02/07/the-error-model/\">\u201cThe Error Model\u201d</a>. Here is my try on summarizing the article in relation to this question:</p>\n\n<ul>\n<li>deliberately distinguish between <em>programming bugs</em> and <em>recoverable errors</em></li>\n<li>use a \u201cfail fast\u201d approach for programming bugs</li>\n</ul>\n\n<p><strong>In summary</strong>: use <code>unwrap()</code> when you are sure that the <em>recoverable</em> error that you get is in fact <em>unrecoverable</em> at that point. Bonus points for explaining <em>\u201cwhy?\u201d</em> in a comment above the affected line ;-) </p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 5, "last_activity_date": 1473803276, "creation_date": 1473803276, "answer_id": 39479511, "question_id": 39477684, "link": "https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application/39479511#39479511", "title": "Should I avoid unwrap in production application?", "body": "<blockquote>\n  <p>In other words, can I say my program is reliable if I use unwrap? Or must I avoid unwrap even if the case seems simple? </p>\n</blockquote>\n\n<p>I think using <code>unwrap</code> judiciously is something you have to learn to handle, it can't just be avoided.</p>\n\n<p>My rhetorical question barrage would be:</p>\n\n<ol>\n<li>Can I say my program is reliable if I use indexing on vectors, arrays or slices?</li>\n<li>Can I say my program is reliable if I use integer division?</li>\n<li>Can I say my program is reliable if I add numbers?</li>\n</ol>\n\n<p>(1) is like unwrap, indexing panics if you make a <em>contract violation</em> and try to index out of bounds. This would be a bug in the program, but it doesn't catch as much attention as a call to <code>unwrap</code>.</p>\n\n<p>(2) is like unwrap, integer division panics if the divisor is zero.</p>\n\n<p>(3) is unlike unwrap, addition does not check for overflow in release builds, so it may silently result in wraparound and logical errors.</p>\n\n<p>Of course, there are strategies for handling all of these without leaving panicky cases in the code, but many programs simply use for example bounds checking as it is.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1473835629, "creation_date": 1473835629, "answer_id": 39484087, "question_id": 39477684, "link": "https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application/39484087#39484087", "title": "Should I avoid unwrap in production application?", "body": "<p>There are two questions folded into one here:</p>\n\n<ul>\n<li>is the use of <code>panic!</code> acceptable in production</li>\n<li>is the use of <code>unwrap</code> acceptable in production</li>\n</ul>\n\n<p><code>panic!</code> is a tool that is used, in Rust, to signal irrecoverable situations/violated assumptions. It can be used to either crash a program that cannot possibly continue in the face of this failure (for example, OOM situation) or to work around the compiler knowing it cannot be executed (at the moment).</p>\n\n<p><code>unwrap</code> is a convenience, that is best avoided in production. The problem about <code>unwrap</code> is that it does not state which assumption was violated, it is better instead to use <code>expect(\"\")</code> which is functionally equivalent but will also give a clue as to what went wrong (without opening the source code).</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1553087070, "post_id": 55250900, "comment_id": 97254207, "body": "<code>unwrap</code> is perfectly <i>safe</i> for production. A process that isn&#39;t running is in the safest possible state."}], "tags": [], "owner": {"reputation": 310, "user_id": 225550, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bb8d029db59da98a0c5e0053b1edc459?s=128&d=identicon&r=PG", "display_name": "KristianR", "link": "https://stackoverflow.com/users/225550/kristianr"}, "is_accepted": false, "score": -2, "last_activity_date": 1553034520, "creation_date": 1553034520, "answer_id": 55250900, "question_id": 39477684, "link": "https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application/55250900#55250900", "title": "Should I avoid unwrap in production application?", "body": "<p>unwrap is great for prototyping, but not safe for production. Once you are done with your initial design you go back and replace <code>unwrap()</code> with <code>Result&lt;Value, ErrorType&gt;</code>.</p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3087, "favorite_count": 4, "accepted_answer_id": 39478185, "answer_count": 5, "score": 25, "last_activity_date": 1553034520, "creation_date": 1473795181, "last_edit_date": 1495541785, "question_id": 39477684, "link": "https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application", "title": "Should I avoid unwrap in production application?", "body": "<p>It's easy to crash at runtime with <code>unwrap</code>:</p>\n\n<pre><code>fn main() {\n    c().unwrap();\n}\n\nfn c() -&gt; Option&lt;i64&gt; {\n    None\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling playground v0.0.1 (file:///playground)\n Running `target/debug/playground`\nthread 'main' panicked at 'called `Option::unwrap()` on a `None` value', ../src/libcore/option.rs:325\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: Process didn't exit successfully: `target/debug/playground` (exit code: 101)\n</code></pre>\n\n<p>Is <code>unwrap</code> only designed for quick tests and proofs-of-concept?</p>\n\n<p>I can not affirm \"My program will not crash here, so I can use <code>unwrap</code>\" if I really want to avoid <code>panic!</code> at runtime, and I think avoiding <code>panic!</code> is what we want in a production application.</p>\n\n<p>In other words, can I say my program is reliable if I use <code>unwrap</code>? Or must I avoid <code>unwrap</code> even if the case seems simple? </p>\n\n<p>I read <a href=\"https://stackoverflow.com/a/36362163/978690\">this</a> answer: </p>\n\n<blockquote>\n  <p>It is best used when you are positively sure that you don't have an error.</p>\n</blockquote>\n\n<p>But I don't think I can be \"positively sure\".</p>\n\n<p>I don't think this is an opinion question, but a question about Rust core and programming.</p>\n"}, {"tags": ["rust", "region"], "answers": [{"comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 2, "creation_date": 1473781855, "post_id": 39473962, "comment_id": 66267676, "body": "Thanks for your answer. Do you know where is this documented?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 3, "creation_date": 1473786722, "post_id": 39473962, "comment_id": 66270248, "body": "I don&#39;t really know, no more than I know where it&#39;s documented that GCC does not link a garbage collector into all programs. It&#39;s just... common knowledge, so to speak."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1473795228, "post_id": 39473962, "comment_id": 66274631, "body": "@antoyo: This is not documented as far as I know, however you can always check out the emitted LLVM IR (I find it more readable than the assembly)."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 13, "last_activity_date": 1473781033, "creation_date": 1473781033, "answer_id": 39473962, "question_id": 39473823, "link": "https://stackoverflow.com/questions/39473823/is-rust-using-region-based-memory-management/39473962#39473962", "title": "Is Rust using region-based memory management?", "body": "<p>While lifetimes can arguably be called \"regions\" in the same sense as in region-based memory management, Rust does <em>not</em> automatically manage memory based on them. Lifetimes are only used for static analysis. Memory is allocated in the normal ways &mdash; registers, stack, heap (some C-style <code>malloc</code> function), possible other abstractions like memory pools if manually implemented as in the <code>typed-arena</code> crate. This perfectly ordinary memory management is then analyzed by the compiler, using the concept of regions, but that doesn't affect the run time behavior at all. In fact, lifetimes are erased from the program before the machine code is even generated.</p>\n\n<p>However, there might be additional <em>moves</em> in your code. <code>Box::new</code> is an ordinary function into which the argument is moved, and likewise <code>String::new</code>'s return might involve a move.</p>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1650, "favorite_count": 0, "accepted_answer_id": 39473962, "answer_count": 1, "score": 6, "last_activity_date": 1473803931, "creation_date": 1473780598, "last_edit_date": 1473803931, "question_id": 39473823, "link": "https://stackoverflow.com/questions/39473823/is-rust-using-region-based-memory-management", "title": "Is Rust using region-based memory management?", "body": "<p>For instance, if we forget about return value optimization, and have the following code:</p>\n\n<pre><code>fn func() -&gt; Box&lt;String&gt; {\n    Box::new(String::new())\n}\n\nfn main() {\n    let boxed_string = func();\n}\n</code></pre>\n\n<p>will the compiler create regions to manage the memory or will it use normal heap allocation?</p>\n\n<p>I know this simple code might be optimized, but in a more complex code, it might not be the case.</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473779409, "post_id": 39473282, "comment_id": 66266069, "body": "What have you <i>tried</i>? You are <a href=\"http://meta.stackoverflow.com/q/261592/155423\">expected to show effort</a>, not just &quot;this doesn&#39;t work, fix it for me&quot;. There are <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+%22closure+may+outlive+the+current+function%22\">other questions with the same error</a>, and <a href=\"https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=site%3Astackoverflow.com%20rust%20%22closure%20may%20outlive%20the%20current%20function%22\" rel=\"nofollow noreferrer\">search engines have more</a>. There&#39;s even a <b>help</b> line in the error message that suggests something to try."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473779699, "post_id": 39473282, "comment_id": 66266271, "body": "Note that tokio (and other async libraries) are <i>bleeding edge</i> and may not currently be the best first choice to learn about Rust."}, {"owner": {"reputation": 2661, "user_id": 258194, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/62467b12094599c71be45210006c528d?s=128&d=identicon&r=PG", "display_name": "estin", "link": "https://stackoverflow.com/users/258194/estin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473802764, "post_id": 39473282, "comment_id": 66277943, "body": "Yep. I was try many stupid ways to solve this, even define static Vec... but without luck. And I do not publish my wrong tries here, because I do not understand many things yet.  async stuff do not disturb learning process of new language if student already works with async stuff on other languages IMHO  Thanks any way"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1474033527, "post_id": 39533043, "comment_id": 66380392, "body": "After typing all of this up, I see that <a href=\"https://github.com/tokio-rs/tokio-curl/issues/3\" rel=\"nofollow noreferrer\">you already asked the maintainer of tokio-curl and got the same response</a>. It&#39;s a shame you didn&#39;t decide to share what you learned with the rest of us."}, {"owner": {"reputation": 2661, "user_id": 258194, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/62467b12094599c71be45210006c528d?s=128&d=identicon&r=PG", "display_name": "estin", "link": "https://stackoverflow.com/users/258194/estin"}, "edited": false, "score": 0, "creation_date": 1474035896, "post_id": 39533043, "comment_id": 66381975, "body": "I do not think so. Yes, I have learned the lesson, but I have other questions corresponding to <code>futures-rs</code>, which I want to resolve before publish the result, a specially after down votes on my question ( And now I have this clearest answer. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1474033455, "creation_date": 1474033455, "answer_id": 39533043, "question_id": 39473282, "link": "https://stackoverflow.com/questions/39473282/tokio-curl-capture-output-into-a-local-vec-may-outlive-borrowed-value/39533043#39533043", "title": "tokio-curl: capture output into a local `Vec` - may outlive borrowed value", "body": "<p>The first thing you have to understand when using the futures library is that you don't have any control over what thread the code is going to run on. </p>\n\n<p>In addition, the documentation for curl's <a href=\"http://alexcrichton.com/curl-rust/curl/easy/struct.Easy.html#method.write_function\" rel=\"nofollow\"><code>Easy::write_function</code></a> says:</p>\n\n<blockquote>\n  <p>Note that the lifetime bound on this function is <code>'static</code>, but that is often too restrictive. To use stack data consider calling the <code>transfer</code> method and then using <code>write_function</code> to configure a callback that can reference stack-local data.</p>\n</blockquote>\n\n<p>The most straight-forward solution is to use some type of locking primitive to ensure that only one thread at a time may have access to the vector. You also have to share ownership of the vector between the main thread and the closure:</p>\n\n<pre><code>use std::sync::Mutex;\nuse std::sync::Arc;\n\nlet out = Arc::new(Mutex::new(Vec::new()));\nlet out_closure = out.clone();\n\n// ...\n\nreq.write_function(move |data| {\n    let mut out = out_closure.lock().expect(\"Unable to lock output\");\n    // ...\n}).expect(\"Cannot set writing function\");\n\n// ...\n\nlet out = out.lock().expect(\"Unable to lock output\");\nprintln!(\"out: {}\", str::from_utf8(&amp;out).expect(\"Data was not UTF-8\"));\n</code></pre>\n\n<p>Unfortunately, the tokio-curl library does not currently support using the <code>Transfer</code> type that would allow for stack-based data.</p>\n"}], "owner": {"reputation": 2661, "user_id": 258194, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/62467b12094599c71be45210006c528d?s=128&d=identicon&r=PG", "display_name": "estin", "link": "https://stackoverflow.com/users/258194/estin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 735, "favorite_count": 0, "accepted_answer_id": 39533043, "answer_count": 1, "score": -2, "last_activity_date": 1486541930, "creation_date": 1473779040, "last_edit_date": 1486541930, "question_id": 39473282, "link": "https://stackoverflow.com/questions/39473282/tokio-curl-capture-output-into-a-local-vec-may-outlive-borrowed-value", "title": "tokio-curl: capture output into a local `Vec` - may outlive borrowed value", "body": "<p>I do not know Rust well enough to understand lifetimes and closures yet...</p>\n\n<p>Trying to collect the downloaded data into a vector using tokio-curl:</p>\n\n<pre><code>extern crate curl;\nextern crate futures;\nextern crate tokio_core;\nextern crate tokio_curl;\n\nuse std::io::{self, Write};\nuse std::str;\n\nuse curl::easy::Easy;\nuse tokio_core::reactor::Core;\nuse tokio_curl::Session;\n\nfn main() {\n    // Create an event loop that we'll run on, as well as an HTTP `Session`\n    // which we'll be routing all requests through.\n    let mut lp = Core::new().unwrap();\n    let mut out = Vec::new();\n    let session = Session::new(lp.handle());\n\n    // Prepare the HTTP request to be sent.\n    let mut req = Easy::new();\n    req.get(true).unwrap();\n    req.url(\"https://www.rust-lang.org\").unwrap();\n    req.write_function(|data| {\n            out.extend_from_slice(data);\n            io::stdout().write_all(data).unwrap();\n            Ok(data.len())\n        })\n        .unwrap();\n\n    // Once we've got our session, issue an HTTP request to download the\n    // rust-lang home page\n    let request = session.perform(req);\n\n    // Execute the request, and print the response code as well as the error\n    // that happened (if any).\n    let mut req = lp.run(request).unwrap();\n    println!(\"{:?}\", req.response_code());\n    println!(\"out: {}\", str::from_utf8(&amp;out).unwrap());\n} \n</code></pre>\n\n<p>Produces an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `out`, which is owned by the current function\n  --&gt; src/main.rs:25:24\n   |\n25 |     req.write_function(|data| {\n   |                        ^^^^^^ may outlive borrowed value `out`\n26 |             out.extend_from_slice(data);\n   |             --- `out` is borrowed here\n   |\nhelp: to force the closure to take ownership of `out` (and any other referenced variables), use the `move` keyword, as shown:\n   |     req.write_function(move |data| {\n</code></pre>\n\n<hr>\n\n<p>Investigating further, I see that <code>Easy::write_function</code> requires the <code>'static</code> lifetime, but the example of how to collect output from the curl-rust docs uses <code>Transfer::write_function</code> instead:</p>\n\n<pre><code>use curl::easy::Easy;\n\nlet mut data = Vec::new();\nlet mut handle = Easy::new();\nhandle.url(\"https://www.rust-lang.org/\").unwrap();\n{\n    let mut transfer = handle.transfer();\n    transfer.write_function(|new_data| {\n        data.extend_from_slice(new_data);\n        Ok(new_data.len())\n    }).unwrap();\n    transfer.perform().unwrap();\n}\nprintln!(\"{:?}\", data);\n</code></pre>\n\n<p>The <a href=\"https://github.com/alexcrichton/curl-rust/blob/c771f81a772a947e537448237804b5a2432b77a6/src/easy.rs#L2996-L2998\" rel=\"nofollow\"><code>Transfer::write_function</code> does not require the <code>'static</code> lifetime</a>:</p>\n\n<pre><code>impl&lt;'easy, 'data&gt; Transfer&lt;'easy, 'data&gt; {\n    /// Same as `Easy::write_function`, just takes a non `'static` lifetime\n    /// corresponding to the lifetime of this transfer.\n    pub fn write_function&lt;F&gt;(&amp;mut self, f: F) -&gt; Result&lt;(), Error&gt;\n        where F: FnMut(&amp;[u8]) -&gt; Result&lt;usize, WriteError&gt; + 'data\n    {\n...\n</code></pre>\n\n<p>But I can't use a <code>Transfer</code> instance on tokio-curl's <code>Session::perform</code> because it <a href=\"https://github.com/tokio-rs/tokio-curl/blob/a5788cd2079b873ce0938fca59f5e1affa9208b6/src/unix.rs#L108\" rel=\"nofollow\">requires the <code>Easy</code> type</a>:</p>\n\n<pre><code>pub fn perform(&amp;self, handle: Easy) -&gt; Perform {\n</code></pre>\n\n<p><code>transfer.easy</code> is a private field that is directly passed to <code>session.perform</code>.</p>\n\n<p>It this an issue with tokio-curl? Maybe it should mark the <code>transfer.easy</code> field as public or implement new function like <code>perform_transfer</code>? Is there another way to collect output using tokio-curl per transfer?</p>\n"}, {"tags": ["io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1473751781, "creation_date": 1473751781, "answer_id": 39464443, "question_id": 39464237, "link": "https://stackoverflow.com/questions/39464237/whats-the-idiomatic-way-to-reference-bufreader-bufwriter-when-passing-it-between/39464443#39464443", "title": "Whats the idiomatic way to reference BufReader/BufWriter when passing it between functions?", "body": "<p>Looking at the way <code>BufReader</code>'s methods are invoked (on <code>&amp;mut self</code> or <code>self</code>) I would say you will usually want to pass <code>&amp;mut BufReader</code>, or <code>BufReader</code> if the function needs to own the <code>BufReader</code> in order to e.g. convert it into a <code>Bytes</code> or <code>Chars</code> iterator.</p>\n\n<p>The reason why docs describe <code>BufReader&lt;File&gt;</code> and not <code>BufReader&lt;&amp;mut File&gt;</code> is because the <a href=\"https://doc.rust-lang.org/src/std/up/src/libstd/io/buffered.rs.html#49\" rel=\"nofollow\"><code>BufReader</code> owns its underlying <code>Read</code> instance</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 607, "user_id": 1632547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0981a6be0e2247d9a87190b219c0a6c6?s=128&d=identicon&r=PG", "display_name": "Philip Ridout", "link": "https://stackoverflow.com/users/1632547/philip-ridout"}, "edited": false, "score": 0, "creation_date": 1560844288, "post_id": 39464493, "comment_id": 99858620, "body": "I&#39;m very new to rust, but wouldn&#39;t fn read_data&lt;R: Read&gt;(r: &amp;mut R) be a better solution?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 607, "user_id": 1632547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0981a6be0e2247d9a87190b219c0a6c6?s=128&d=identicon&r=PG", "display_name": "Philip Ridout", "link": "https://stackoverflow.com/users/1632547/philip-ridout"}, "edited": false, "score": 0, "creation_date": 1560987463, "post_id": 39464493, "comment_id": 99921235, "body": "@PhilipRidout that entirely depends on whether you&#39;re using the <code>BufRead</code> methods. Ones like <code>split</code> or <code>lines</code> are really common."}], "tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": true, "score": 17, "last_activity_date": 1568124689, "last_edit_date": 1568124689, "creation_date": 1473751921, "answer_id": 39464493, "question_id": 39464237, "link": "https://stackoverflow.com/questions/39464237/whats-the-idiomatic-way-to-reference-bufreader-bufwriter-when-passing-it-between/39464493#39464493", "title": "Whats the idiomatic way to reference BufReader/BufWriter when passing it between functions?", "body": "<p>The most idiomatic way is probably not to reference <code>std::io::BufReader</code> at all. You actually want to refer to the traits <code>Read</code> and/or <code>BufRead</code></p>\n\n<pre><code>use std::io:BufRead;\n\n// Could also take by move if needed\nfn read_data&lt;R: BufRead&gt;(r: &amp;mut R);\n</code></pre>\n\n<p>The function usually doesn't really care whether a reader is specifically the type <code>std::io::BufReader</code>, merely that it has the same functionality.</p>\n\n<p>This also gives you complete freedom to choose between <code>BufReader&lt;File&gt;</code>, <code>BufReader&lt;&amp;mut File&gt;</code> or whichever other specialization you need. (It doesn't even have to be a file, which can help for testing!)</p>\n\n<p>As for whether to use <code>&amp;mut</code> versus a move, generally in Rust it's standard to only request what you need. If you (and the functions you call) only require an immutable reference (<code>&amp;T</code>), use that, if you require mutability, use <code>&amp;mut T</code>.</p>\n\n<p>Move is a bit more flexible, because while it can be used simply based on whether you need to use a function that takes something by value, it's also frequently used to assert that the function will \"use up\" the data in some way. </p>\n\n<p>This is why <code>BufReader</code> usually takes a <code>File</code> and not a reference, and why most high-level \"parse this file\" IO functions tend to move by value. It's generally not the case that you consume part of a <code>File</code> or reader with one adapter, and the rest with another.</p>\n\n<p>In fact, this is conceptually so strong that rather than giving a reference, it's much more common to just move the <code>File</code> into a higher-level reader and call a function like <code>into_inner</code> to retrieve the file whenever you need to switch adapters.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3196, "favorite_count": 0, "accepted_answer_id": 39464493, "answer_count": 2, "score": 10, "last_activity_date": 1618488356, "creation_date": 1473751070, "last_edit_date": 1618488356, "question_id": 39464237, "link": "https://stackoverflow.com/questions/39464237/whats-the-idiomatic-way-to-reference-bufreader-bufwriter-when-passing-it-between", "title": "Whats the idiomatic way to reference BufReader/BufWriter when passing it between functions?", "body": "<p>After reading the <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"nofollow noreferrer\"><code>std::io::BufReader</code></a> docs, I'm not sure how to best pass a <code>BufReader</code> between functions. Multiple permutations are allowed, but which is best?</p>\n<p>I have a function that takes a file:</p>\n<pre><code>use std::{fs::File, io::BufReader};\n\nfn read_some_data(f: &amp;mut std::fs::File) {\n    let mut reader = BufReader::new(f);\n    read_some_other_data(&amp;mut reader);\n}\n</code></pre>\n<p>While this can be made to work, which permutation of reference access should be used when passing the reader around to other functions?</p>\n<ul>\n<li><code>&amp;mut BufReader&lt;&amp;mut File&gt;</code></li>\n<li><code>BufReader&lt;&amp;mut File&gt;</code></li>\n<li><code>&amp;mut BufReader&lt;File&gt;</code></li>\n<li><code>BufReader&lt;File&gt;</code></li>\n</ul>\n<p>Since there is no need for each function to own the data I was thinking it would be best to pass as <code>&amp;mut BufReader&lt;&amp;mut File&gt;</code>, but the example in the docs uses <code>&lt;File&gt;</code>.</p>\n<p>Whats a good rule of thumb to use here?</p>\n<p>While this example uses <code>BufReader</code>, I assume the same answer would apply to <code>BufWriter</code> too.</p>\n"}, {"tags": ["pointers", "memory", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1473767866, "post_id": 39463760, "comment_id": 66258527, "body": "The term you are looking for is &quot;reference equality&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 17, "last_activity_date": 1553261335, "last_edit_date": 1553261335, "creation_date": 1473749947, "answer_id": 39463958, "question_id": 39463760, "link": "https://stackoverflow.com/questions/39463760/how-to-check-if-two-variables-point-to-the-same-object-in-memory/39463958#39463958", "title": "How to check if two variables point to the same object in memory?", "body": "<p>There is the function <a href=\"https://doc.rust-lang.org/std/ptr/fn.eq.html\" rel=\"noreferrer\"><code>ptr::eq</code></a>:</p>\n\n<pre><code>use std::ptr;\n\nstruct Foo&lt;'a&gt; {\n    bar: &amp;'a str,\n}\n\nfn main() {\n    let foo_instance = Foo { bar: \"bar\" };\n    let some_vector: Vec&lt;&amp;Foo&gt; = vec![&amp;foo_instance];\n\n    assert!(ptr::eq(some_vector[0], &amp;foo_instance));\n}\n</code></pre>\n\n<p>Before this was stabilized in Rust 1.17.0, you could perform a cast to <code>*const T</code>:</p>\n\n<pre><code>assert!(some_vector[0] as *const Foo == &amp;foo_instance as *const Foo);\n</code></pre>\n\n<p>It will check if the references point to the same place in the memory.</p>\n"}], "owner": {"reputation": 296, "user_id": 4321796, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/7JML0.jpg?s=128&g=1", "display_name": "Vasyl Bratushka", "link": "https://stackoverflow.com/users/4321796/vasyl-bratushka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1727, "favorite_count": 1, "accepted_answer_id": 39463958, "answer_count": 1, "score": 12, "last_activity_date": 1553261335, "creation_date": 1473749137, "last_edit_date": 1473767852, "question_id": 39463760, "link": "https://stackoverflow.com/questions/39463760/how-to-check-if-two-variables-point-to-the-same-object-in-memory", "title": "How to check if two variables point to the same object in memory?", "body": "<p>For example:</p>\n\n<pre><code>struct Foo&lt;'a&gt; { bar: &amp;'a str }\n\nfn main() {\n    let foo_instance = Foo { bar: \"bar\" };\n    let some_vector: Vec&lt;&amp;Foo&gt; = vec![&amp;foo_instance];\n\n    assert!(*some_vector[0] == foo_instance);\n}\n</code></pre>\n\n<ol>\n<li><p>I want to check if <code>foo_instance</code> references the same instance as <code>*some_vector[0]</code>, but I can't do this ...</p></li>\n<li><p>I don't want to know if the two instances are equal; I want to check if the variables point to the same instance in the memory</p></li>\n</ol>\n\n<p>Is it possible to do that?</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1473749468, "post_id": 39463435, "comment_id": 66248084, "body": "Not sure this is a duplicate, its definitely related, but this questions isn&#39;t concerned with lifetimes specifically - just in how to avoid duplicating read-only data."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1473752902, "post_id": 39463435, "comment_id": 66249889, "body": "Your non-cloning code would have yielded exactly that error, so I think it&#39;s a duplicate, because the answer to the other question is basically the same as the one to this question. It&#39;s ok to have different questions for the same answers, but then the question is a duplicate in my opinion. I might be misinterpreting the stackoverflow rules though."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1473753815, "post_id": 39463435, "comment_id": 66250382, "body": "The intent may be important here, with this question the data is read-only and cloning the data may incur an undesirable cost. One of the points in the answer for example - suggests to copy the data. I&#39;m not asking how to avoid the error, I&#39;m asking how to avoid the <code>clone</code>."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1473756360, "post_id": 39463435, "comment_id": 66251799, "body": "I&#39;m probably thinking in circles... But avoiding a <code>clone</code> is done in Rust by using a reference, an <code>Rc</code> or an <code>Arc</code>. Which would then have the answer of the linked question."}], "answers": [{"comments": [{"owner": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 1, "creation_date": 1473749393, "post_id": 39463553, "comment_id": 66248044, "body": "Good answer! For those learning Rust, it might be helpful to provide a little info on the reason the <code>clone</code> OP is trying to get rid of is necessary in the first place. In other words, what rule of Rust requires the <code>clone</code> or the solutions you present?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 0, "creation_date": 1473753016, "post_id": 39463553, "comment_id": 66249932, "body": "While a great idea in general, I think that&#39;s out of scope for an answer to this exact question. If the clone is left out, then there are already multiple questions and answers related to references and threads. But it would certainly be good to add that reasoning to the question."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1473753688, "post_id": 39463553, "comment_id": 66250308, "body": "RE: #2 - <code>crossbeam</code> will launch an honest to god thread for every <code>v</code>, for large data sets it&#39;s usually better to use a thread pool such as the <code>scoped_threadpool</code> crate."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473755634, "post_id": 39463553, "comment_id": 66251392, "body": "Added working example using <code>Arc</code>, hopefully this is in keeping with the answer."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1473756523, "last_edit_date": 1473756523, "creation_date": 1473748357, "answer_id": 39463553, "question_id": 39463435, "link": "https://stackoverflow.com/questions/39463435/how-to-multi-thread-function-calls-on-read-only-data-without-cloning-it/39463553#39463553", "title": "How to multi-thread function calls on read-only data without cloning it?", "body": "<p>There are multiple ways to solve your problem.</p>\n\n<ol>\n<li><p>move the Vector into an <code>Arc&lt;LinkedList&lt;Vec&lt;i32&gt;&gt;&gt;</code> and clone that. After the calculation, you can use <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html#method.try_unwrap\" rel=\"nofollow\"><code>try_unwrap</code></a> to get your <code>LinkedList&lt;Vec&lt;i32&gt;&gt;</code> back. This works with just the Rust standard library.<br><br>Heres a <a href=\"https://play.rust-lang.org/?gist=516f3743e8504752f9f63979baaa14ef&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">working example</a> that uses <code>Arc</code>, though <code>LinkedList</code> was replaced by <code>Vec</code> to allow indexing.<br>Also note that the function needs to own the argument being passed to it in this case.</p></li>\n<li><p>Use the <a href=\"https://crates.io/crates/crossbeam\" rel=\"nofollow\"><code>crossbeam</code></a> crate to create threads that can reference their scope, freeing you from the need to do all that <code>join_handles</code> code by hand. This will have a minimal impact on your code, since it work exactly like you want.</p>\n\n<pre><code>crossbeam::scope(|scope| {\n    for v in list {\n        scope.spawn(|| calculate_vec(&amp;v))\n    }\n});\n</code></pre></li>\n<li><p>Use the <a href=\"https://crates.io/crates/scoped_threadpool\" rel=\"nofollow\"><code>scoped_threadpool</code></a> crate. It works just like <code>crossbeam</code> but doesn't create one thread per task, instead it spreads out the tasks over a limited number of threads. (thanks @delnan)</p></li>\n<li><p>use the <a href=\"https://crates.io/crates/rayon\" rel=\"nofollow\"><code>rayon</code></a> crate for direct data parallelism</p>\n\n<pre><code>use rayon::prelude::*;\nlist.par_iter().map(|v| calculate_vec(&amp;v)).collect()\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 713, "favorite_count": 0, "closed_date": 1473768010, "answer_count": 1, "score": -1, "last_activity_date": 1473825935, "creation_date": 1473747875, "last_edit_date": 1473825935, "question_id": 39463435, "link": "https://stackoverflow.com/questions/39463435/how-to-multi-thread-function-calls-on-read-only-data-without-cloning-it", "closed_reason": "Duplicate", "title": "How to multi-thread function calls on read-only data without cloning it?", "body": "<p>Take this simple example where we're using an immutable list of vectors to calculate new values.</p>\n\n<p>Given this working, single threaded example:</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn calculate_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n    let mut result: i32 = 0;\n    for i in v {\n        result += *i;\n    }\n    return result;\n}\n\nfn calculate_from_list(list: &amp;LinkedList&lt;Vec&lt;i32&gt;&gt;) -&gt; LinkedList&lt;i32&gt; {\n    let mut result: LinkedList&lt;i32&gt; = LinkedList::new();\n    for v in list {\n        result.push_back(calculate_vec(v));\n    }\n    return result;\n}\n\nfn main() {\n    let mut list: LinkedList&lt;Vec&lt;i32&gt;&gt; = LinkedList::new();\n    // some arbitrary values\n    list.push_back(vec![0, -2, 3]);\n    list.push_back(vec![3, -4, 3]);\n    list.push_back(vec![7, -10, 6]);\n\n    let result = calculate_from_list(&amp;list);\n    println!(\"Here's the result!\");\n    for i in result {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>Assuming <code>calculate_vec</code> is a processor intensive function, we may want to use multiple threads to run this, the following example works but requires <em>(what I think is)</em> an unnecessary vector clone.</p>\n\n<pre><code>use std::collections::LinkedList;\n\nfn calculate_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n    let mut result: i32 = 0;\n    for i in v {\n        result += *i;\n    }\n    return result;\n}\n\nfn calculate_from_list(list: &amp;LinkedList&lt;Vec&lt;i32&gt;&gt;) -&gt; LinkedList&lt;i32&gt; {\n    use std::thread;\n    let mut result: LinkedList&lt;i32&gt; = LinkedList::new();\n    let mut join_handles = LinkedList::new();\n    for v in list {\n        let v_clone = v.clone(); // &lt;-- how to avoid this clone?\n        join_handles.push_back(thread::spawn(move || calculate_vec(&amp;v_clone)));\n    }\n    for j in join_handles {\n        result.push_back(j.join().unwrap());\n    }\n    return result;\n}\n\nfn main() {\n    let mut list: LinkedList&lt;Vec&lt;i32&gt;&gt; = LinkedList::new();\n    // some arbitrary values\n    list.push_back(vec![0, -2, 3]);\n    list.push_back(vec![3, -4, 3]);\n    list.push_back(vec![7, -10, 6]);\n\n    let result = calculate_from_list(&amp;list);\n    println!(\"Here's the result!\");\n    for i in result {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>This example works, but it only when the vector is cloned,\nhowever logically, I don't think this should be needed since the vector is immutable.</p>\n\n<p>There is no reason each call to <code>calculate_vec</code> should need to allocate a new vector.</p>\n\n<p>How could this simple example be multi-threaded without needing to clone the data before its passed to the closure?</p>\n\n<hr>\n\n<p>Update, heres a <a href=\"https://play.rust-lang.org/?gist=516f3743e8504752f9f63979baaa14ef&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">working example</a> that uses <code>Arc</code> based on @ker's suggestion, although it does need to take ownership.</p>\n\n<hr>\n\n<p>Note 1) I'm aware there are 3rd party libraries to handle threading, but would be interested to know if this is possible using Rust's standard library.</p>\n\n<p>Note 2) There are quite a few similar questions on threading but examples often involves threads writing to data, which isn't the case here.</p>\n"}, {"tags": ["generics", "iterator", "rust", "adapter"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1473697536, "post_id": 39454589, "comment_id": 66230823, "body": "Next time you have a \u201cI don&#39;t know how to make my program compile.\u201d problem: 1) reduce your code to the smallest example that exhibit the same error, 2) <i>give the error</i>."}, {"owner": {"reputation": 12982, "user_id": 378979, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/FihbE.jpg?s=128&g=1", "display_name": "Vincent Cantin", "link": "https://stackoverflow.com/users/378979/vincent-cantin"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1474011788, "post_id": 39454589, "comment_id": 66367472, "body": "This is the small version of the program already. My problem was more like &quot;how to do something&quot; using the correct syntax.  I didn&#39;t show an error message because it didn&#39;t really make sense here."}], "tags": [], "owner": {"reputation": 12982, "user_id": 378979, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/FihbE.jpg?s=128&g=1", "display_name": "Vincent Cantin", "link": "https://stackoverflow.com/users/378979/vincent-cantin"}, "is_accepted": true, "score": 1, "last_activity_date": 1473696748, "creation_date": 1473696748, "answer_id": 39454589, "question_id": 39454382, "link": "https://stackoverflow.com/questions/39454382/rust-custom-adapter-and-generics/39454589#39454589", "title": "Rust custom adapter and generics", "body": "<p>I found the answer, my problem was purely syntaxic:</p>\n\n<p><code>impl&lt;I: Iterator&lt;Item=u8&gt;&gt; Iterator for Chunker&lt;I&gt;</code></p>\n"}], "owner": {"reputation": 12982, "user_id": 378979, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/FihbE.jpg?s=128&g=1", "display_name": "Vincent Cantin", "link": "https://stackoverflow.com/users/378979/vincent-cantin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 0, "accepted_answer_id": 39454589, "answer_count": 1, "score": 0, "last_activity_date": 1473699862, "creation_date": 1473695912, "last_edit_date": 1473699862, "question_id": 39454382, "link": "https://stackoverflow.com/questions/39454382/rust-custom-adapter-and-generics", "title": "Rust custom adapter and generics", "body": "<p>I am a beginner with Rust and I want to implement an adapter which takes an iterator of <code>u8</code> or <code>&amp;u8</code> as input and outputs some chunks.</p>\n\n<p>I don't know how to make my program compile. I made the adapter work without using <code>ends_with_separator()</code> where there is no constraint on the type of iterator, but now I need to define my adaptor so that it accepts only iterators of <code>u8</code> or <code>&amp;u8</code> and I don't know how to do that.</p>\n\n<pre><code>pub struct Chunk&lt;T&gt; {\n    pub data: Vec&lt;T&gt;,\n}\n\npub struct Chunker&lt;I&gt; {\n    pub iter: I,\n}\n\nimpl&lt;I&gt; Chunker&lt;I&gt; {\n    fn ends_with_separator(buf: &amp;Vec&lt;u8&gt;) -&gt; bool {\n        match buf.last() {\n            Some(v) =&gt; v % 7 == 0,\n            None =&gt; true,\n        }\n    }\n}\n\nimpl&lt;I: Iterator&gt; Iterator for Chunker&lt;I&gt; {\n    type Item = Chunk&lt;I::Item&gt;;\n\n    #[inline]\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let mut buf = Vec::new();\n        while let Some(v) = self.iter.next() {\n            buf.push(v);\n            if Self::ends_with_separator(&amp;buf) {\n                return Some(Chunk { data: buf });\n            }\n        }\n        None\n    }\n}\n\nfn main() {\n    let chunker = Chunker { iter: (0u8..10) };\n    for chunk in chunker {\n        println!(\"{:?}\", chunk.data);\n    }\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1473695661, "post_id": 39454116, "comment_id": 66229889, "body": "May want to add that the <i>direct</i> way of doing this is <code>&lt;$x as Default&gt;::default()</code>.  In general, you can use <code>&lt;Type&gt;</code> to refer to types in paths that aren&#39;t directly valid as paths (which include macro substitutions, <code>[_]</code>, and <code>&amp;T</code>)."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1473695859, "post_id": 39454116, "comment_id": 66230026, "body": "Yes, DK solution is actually what I was looking for, because I wanted a more general solution, than just works with <code>Default</code>."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1473696062, "post_id": 39454116, "comment_id": 66230133, "body": "@DK Expanded with a section on your suggested methods. If there are any details I&#39;ve missed that you feel are important, feel free to suggest them."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1473696455, "post_id": 39454116, "comment_id": 66230330, "body": "@Aurora0001: The answer I was looking for was <code>&lt;$x as Default&gt;</code>, note I said e.g. <code>Default</code>. If trait doesn&#39;t return <code>Self</code>, I can&#39;t use <code>let $alias: $x = Default::default();</code> I used <code>Default</code> as example because it&#39;s the first trait that popped to my mind."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1473697128, "post_id": 39454116, "comment_id": 66230640, "body": "@DanielFath: updated my answer to be more like what you wanted and fixed the playground links that were outdated."}], "tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": true, "score": 8, "last_activity_date": 1473696883, "last_edit_date": 1473696883, "creation_date": 1473694980, "answer_id": 39454116, "question_id": 39453625, "link": "https://stackoverflow.com/questions/39453625/converting-rust-macro-types-into-expressions/39454116#39454116", "title": "Converting Rust macro types into expressions", "body": "<p>You were almost there. You can hint the expected default type to the compiler and then just use the <a href=\"https://doc.rust-lang.org/book/ufcs.html\" rel=\"noreferrer\">universal function call syntax</a>:</p>\n\n<pre><code>macro_rules! get_default {\n    (  $x:ty = $alias:ident ) =&gt; {\n        let $alias = &lt;$x as Default&gt;::default();\n    };\n}\n\nfn main() {\n    get_default!(i32 = z); \n    println!(\"get_default! {:?} \", z);\n    println!(\"i32 default {:?} \", i32::default());\n}\n</code></pre>\n\n<p>(<a href=\"https://gist.github.com/ca4f7578230981a3f9b22b979201632a\" rel=\"noreferrer\">Playground link</a>)</p>\n\n<p>The key bit is this:</p>\n\n<pre><code>let $alias = &lt;$x as Default&gt;::default();\n</code></pre>\n\n<p>This casts <code>$x</code> to the <code>Default</code> trait and then invokes the <code>default()</code> method, as you needed.</p>\n\n<p>You can also use a shorthand when you don't need to disambiguate between traits:</p>\n\n<pre><code>let $alias = &lt;$x&gt;::default();\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=283d04feeb1832c6fa5be5f1f2ec3750\" rel=\"noreferrer\">Playground link</a>)</p>\n\n<h2>More General Usage of UFCS</h2>\n\n<p>Using UFCS as shown above, you can disambiguate between traits that implement the same methods. This is the '<a href=\"https://doc.rust-lang.org/book/ufcs.html#angle-bracket-form\" rel=\"noreferrer\">angle-bracket form</a>' which is useful if the <code>default()</code> method is implemented in two traits.</p>\n\n<p>In this specific scenario, you can also use UFCS more specifically, like so:</p>\n\n<pre><code>let $alias: $x = Default::default();\n</code></pre>\n\n<p>That alone provides enough information for Rust to infer the correct <code>impl</code>.</p>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=283d04feeb1832c6fa5be5f1f2ec3750&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground link</a>)</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 864, "favorite_count": 2, "accepted_answer_id": 39454116, "answer_count": 1, "score": 8, "last_activity_date": 1473696883, "creation_date": 1473693354, "last_edit_date": 1473693922, "question_id": 39453625, "link": "https://stackoverflow.com/questions/39453625/converting-rust-macro-types-into-expressions", "title": "Converting Rust macro types into expressions", "body": "<p>I'd like to assume a given type implements some trait (e.g. <code>Default</code>) with a method (e.g. <code>default()</code>). I want to call that method and store its value into a local variable. Here is a general idea of it:</p>\n\n<pre><code>macro_rules! get_default {\n    (  $x:ty = $alias:ident ) =&gt; {\n        let $alias = $x::default();\n    };\n}\n\nfn main() {\n    // get_default!(i32 = z); \n    // println!(\"get_default! {:?} \", z);\n    println!(\"i32 default {:?} \", i32::default());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=macro_rules!%20get_default%20%7B%0A%20%20%20%20(%20%20%24x%3Aty%20%3D%20%24alias%3Aident%20)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20let%20%24alias%20%3D%20%24x%3A%3Adefault()%3B%0A%20%20%20%20%7D%3B%0A%7D%0A%0A%0Afn%20main()%20%7B%0A%20%20%20%20get_default!(i32%20%3D%20z)%3B%0A%20%20%20%20println!(%22get_default!%20%7B%3A%3F%7D%20%22%2C%20z)%3B%0A%20%20%20%20println!(%22i32%20default%20%7B%3A%3F%7D%20%22%2C%20i32%3A%3Adefault())%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground link</a>.</p>\n\n<p>When I try that I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected expression, found `i32`\n --&gt; &lt;anon&gt;:3:22\n  |&gt;\n3 |&gt;         let $alias = $x::default();\n  |&gt;                      ^^\n</code></pre>\n\n<p>I understand it's because it expects an expression, but I want to limit input to types only. Is there a way to turn <code>$x</code> from <code>ty</code> to <code>expr</code>, or a way to call a method on a type (even if it's potentially missing).</p>\n"}, {"tags": ["compiler-errors", "rust", "atomic"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1473705255, "post_id": 39452284, "comment_id": 66234307, "body": "The atomic doesn&#39;t need to and should not be in a <code>static mut</code>, it should be in a plain <code>static</code>. Atomic operations use interior mutability when modifying them. You see that all their mutating methods use <code>&amp;self</code> as the first argument (a shared reference)."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1473755331, "post_id": 39452284, "comment_id": 66251234, "body": "Ah yes that makes sense, because they don&#39;t need to rely on the borrow checker."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1473707066, "last_edit_date": 1495541703, "creation_date": 1473689470, "answer_id": 39452377, "question_id": 39452284, "link": "https://stackoverflow.com/questions/39452284/const-fns-are-an-unstable-feature-when-using-atomicusizenew/39452377#39452377", "title": "const fns are an unstable feature when using AtomicUsize::new", "body": "<p>Yes, you cannot call functions outside of a function as of Rust 1.10. That requires a feature that is not yet stable: constant function evaluation.</p>\n\n<p>You can initialize an atomic variable to zero using <a href=\"https://doc.rust-lang.org/std/sync/atomic/constant.ATOMIC_USIZE_INIT.html\" rel=\"nofollow noreferrer\"><code>ATOMIC_USIZE_INIT</code></a> (or the appropriate variant):</p>\n\n<pre><code>use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n\nstatic COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n\nfn main() {}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/39452284/const-fns-are-an-unstable-feature-when-using-atomicusizenew/39452377#comment66234307_39452284\">bluss points out</a>, there's no need to make this mutable. And as the compiler points out, <code>static</code> and <code>const</code> values should be in <code>SCREAMING_SNAKE_CASE</code>.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 506, "favorite_count": 0, "accepted_answer_id": 39452377, "answer_count": 1, "score": 5, "last_activity_date": 1473707066, "creation_date": 1473689205, "last_edit_date": 1473689298, "question_id": 39452284, "link": "https://stackoverflow.com/questions/39452284/const-fns-are-an-unstable-feature-when-using-atomicusizenew", "title": "const fns are an unstable feature when using AtomicUsize::new", "body": "<p>What is wrong with this code?</p>\n\n<pre><code>use std::sync::atomic::AtomicUsize;\n\nstatic mut counter: AtomicUsize = AtomicUsize::new(0);\n\nfn main() {}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: const fns are an unstable feature\n --&gt; src/main.rs:3:35\n  |&gt;\n3 |&gt; static mut counter: AtomicUsize = AtomicUsize::new(0);\n  |&gt;                                   ^^^^^^^^^^^^^^^^^^^\nhelp: in Nightly builds, add `#![feature(const_fn)]` to the crate attributes to enable\n</code></pre>\n\n<p>The docs mention that other atomic int sizes are unstable, but <code>AtomicUsize</code> is apparently stable.</p>\n\n<p>The purpose of this is to get an atomic per-process counter.</p>\n"}, {"tags": ["arrays", "polymorphism", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473689046, "post_id": 39451784, "comment_id": 66225640, "body": "Potential duplicate of <a href=\"http://stackoverflow.com/q/27957103/155423\">stackoverflow.com/q/27957103/155423</a>; <a href=\"http://stackoverflow.com/q/25818082/155423\">stackoverflow.com/q/25818082/155423</a>; <a href=\"http://stackoverflow.com/q/36357995/155423\">stackoverflow.com/q/36357995/155423</a>."}, {"owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473689454, "post_id": 39451784, "comment_id": 66225946, "body": "I do not totally agree for the duplicate, as vector is a dynamic use, and array declaration in one line showed features and complexities that are specifics to array."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473689610, "post_id": 39451784, "comment_id": 66226073, "body": "Nope, none of the answer is specific to an array, other than the literal syntax. <code>[&amp;Cat as &amp;Animal, &amp;Dog]</code> and <code>vec![&amp;Cat as &amp;Animal, &amp;Dog]</code> work the same, as do <code>let animals: [&amp;Animal, 2] = [&amp;Cat, &amp;Dog]</code> and <code>let animals: Vec&lt;&amp;Animal&gt; = vec![&amp;Cat, &amp;Dog]</code>. In addition, your question <a href=\"http://meta.stackoverflow.com/q/261592/155423\">showed no effort</a> towards looking for similar questions, or the potential worry that an array is different from a vector."}, {"owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473689791, "post_id": 39451784, "comment_id": 66226219, "body": "ok. I was wrong. In fact when editing my question, similar answers were C++ based, not Rust based."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473691367, "post_id": 39451784, "comment_id": 66227313, "body": "Using <a href=\"https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=site%3Astackoverflow.com%20rust%20polymorphic%20array\" rel=\"nofollow noreferrer\">Google with a URL restriction</a> found those 3 on the first page of results for me. I don&#39;t always trust the SO search engine or related questions when they come up empty."}, {"owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473691584, "post_id": 39451784, "comment_id": 66227428, "body": "Ok, I&#39;ll search in Google with URL restriction next time."}], "answers": [{"comments": [{"owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "edited": false, "score": 1, "creation_date": 1473688472, "post_id": 39451904, "comment_id": 66225206, "body": "Thanks. So I forgot to use Type Objects (references), to cast the first element to Animal Type Object, and to get an iterator from animals. Thank you very much. My path to Rust learning is growing."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "edited": false, "score": 2, "creation_date": 1473764989, "post_id": 39451904, "comment_id": 66256914, "body": "@loloof64 Just being pedantic on the terminology: &quot;trait objects&quot;, not &quot;type objects&quot;.  (All objects <i>must</i> have a type, so it&#39;s redundant to talk specifically about &quot;objects of a type&quot;. Traits, on the other hand are not <i>concrete</i> types by themselves, so a &quot;trait object&quot; has the meaning &quot;an object of a type that implements a certain trait&quot;, which is a good way to talk about those)"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 1, "creation_date": 1473765628, "post_id": 39451904, "comment_id": 66257273, "body": "@Kroltan The way you said it is certainly a good way for beginners to think about all this. But actually (being pedantic :P), a trait is a concrete type. You can write <code>impl MyTrait {}</code> and use the trait name in every situation where you could use a, say, struct name. The only problem being, that trait types are unsized (do not <code>impl Sized</code>), which makes them illegal in many situations. Fun fact: this is why the new &quot;impl trait&quot;-RFC proposes the syntax <code>impl Trait</code> instead of just <code>Trait</code>, because the latter syntax is already valid."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 1, "creation_date": 1473765996, "post_id": 39451904, "comment_id": 66257489, "body": "@LukasKalbertodt Yes, I have simplified the meaning of &quot;concrete&quot; too much. What I meant is that you can&#39;t have an actual value of type <code>SomeTrait</code> directly (because they are unsized), only through trait objects, but then the value itself is &quot;abstracted&quot; (for lack of better word on my vocabulary) behind virtual dispatch, while still being a value of some type that implements <code>SomeTrait</code>."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1473688206, "creation_date": 1473688206, "answer_id": 39451904, "question_id": 39451784, "link": "https://stackoverflow.com/questions/39451784/why-cant-i-use-type-inference-with-an-array-declaration/39451904#39451904", "title": "Why can&#39;t I use type inference with an array declaration?", "body": "<p>Rust arrays are homogeneous, which means each element in it has the same type. So you can't have an array with <code>Dog</code>s and <code>Cat</code>s. <em>But</em> you can have an array full of so called \"trait objects\", in your case <code>&amp;Animal</code>. This is how we explicitly request runtime polymorphism. </p>\n\n<p>You have to tell the compiler explicitly that you want an array full of trait objects. The compiler infers the type of the array based on the first element in the initializer, so let's explicitly cast that thing:</p>\n\n<pre><code>let animals = [&amp;Cat as &amp;Animal, &amp;Dog, &amp;Cat, &amp;Lion, &amp;Dog, &amp;Lion];\n</code></pre>\n\n<p>Note that we also added a <code>&amp;</code> to all values, because you can only work with pointers to trait objects. (another small error in your code is reported afterwards, but the solution is fairly easy). <a href=\"https://play.rust-lang.org/?gist=25a8fd8217da3ee490a752e0433ef675&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">See on the playground</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "edited": false, "score": 0, "creation_date": 1473689205, "post_id": 39452246, "comment_id": 66225761, "body": "Thanks. Don&#39;t worry for trait object features, I&#39;ve already used Java Interfaces, which seems similar. And implementing them does not seems so hard to me."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "edited": false, "score": 2, "creation_date": 1473727491, "post_id": 39452246, "comment_id": 66242273, "body": "@loloof64 It&#39;s not necessarily about whether implementing them is <i>hard</i>; it&#39;s a question of what&#39;s the best tool for the job. You should consider whether Rust offers a better solution before automatically reaching for the solution you are comfortable with in Java."}, {"owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "edited": false, "score": 0, "creation_date": 1473751434, "post_id": 39452246, "comment_id": 66249091, "body": "Yes you&#39;re right. In my case i don&#39;t make so much customisation/definition in animal impl. So in this case that seems very much for so few."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1473689097, "creation_date": 1473689097, "answer_id": 39452246, "question_id": 39451784, "link": "https://stackoverflow.com/questions/39451784/why-cant-i-use-type-inference-with-an-array-declaration/39452246#39452246", "title": "Why can&#39;t I use type inference with an array declaration?", "body": "<p>It's because <code>Cat</code>, <code>Dog</code> and <code>Lion</code> are all different types and you can only have one in an array.</p>\n\n<p>You could use trait objects like Lukas suggested, but what you are after could have been achieved much more easily (trait objects are not something I would recommend to a Rust beginner), with a common <code>Animal</code> enum:</p>\n\n<pre><code>use self::Animal::*;\n\nfn main() {\n    let animals = [Cat, Dog, Cat, Lion, Dog, Lion];\n    for single_animal in animals.iter() {\n        single_animal.talk();\n    }\n}\n\ntrait AnimalSkills {\n    fn talk(&amp;self);\n}\n\nenum Animal {\n    Cat,\n    Dog,\n    Lion\n}\n\nimpl AnimalSkills for Animal {\n    fn talk(&amp;self) {\n        match *self {\n            Cat =&gt; println!(\"Je miaule !\"),\n            Dog =&gt; println!(\"J'aboie !\"),\n            Lion =&gt; println!(\"Je rugit !\")\n        }\n    }\n}\n</code></pre>\n\n<p>Also note that you need to call <code>.iter()</code> in order to be able to iterate over an array.</p>\n"}], "owner": {"reputation": 4580, "user_id": 662618, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/485a36e2fb0e89238446e0789d7094a9?s=128&d=identicon&r=PG", "display_name": "loloof64", "link": "https://stackoverflow.com/users/662618/loloof64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 146, "favorite_count": 0, "accepted_answer_id": 39451904, "answer_count": 2, "score": 0, "last_activity_date": 1473690522, "creation_date": 1473687778, "last_edit_date": 1473690522, "question_id": 39451784, "link": "https://stackoverflow.com/questions/39451784/why-cant-i-use-type-inference-with-an-array-declaration", "title": "Why can&#39;t I use type inference with an array declaration?", "body": "<p>I declared an array of a custom trait <code>Animal</code> in order to experiment with polymorphism in Rust, but the compiler seems to do type inference on the subtype of the first element instead:</p>\n\n<pre><code>fn main() {\n    let animals = [Cat, Dog, Cat, Lion, Dog, Lion];\n    for single_animal in animals {\n        single_animal.talk();\n    }\n}\n\ntrait Animal {\n    fn talk(&amp;self);\n}\n\nstruct Cat;\nstruct Dog;\nstruct Lion;\n\nimpl Animal for Cat {\n    fn talk(&amp;self) { \n        println!(\"Je miaule !\");\n    }\n}\n\nimpl Animal for Dog {\n    fn talk(&amp;self) { \n        println!(\"J'aboie !\");\n    }\n}\n\nimpl Animal for Lion {\n    fn talk(&amp;self) {\n        println!(\"Je rugit !\");\n    }\n}\n</code></pre>\n\n<p>The compiler complains about the fact that the first element is a <code>Cat</code> and not the others:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [--explain E0308]\n --&gt; src/main.rs:3:25\n  |&gt;\n3 |&gt;     let animals = [Cat, Dog, Cat, Lion, Dog, Lion];\n  |&gt;                         ^^^ expected struct `Cat`, found struct `Dog`\nnote: expected type `Cat`\nnote:    found type `Dog`\n\nerror: mismatched types [--explain E0308]\n --&gt; src/main.rs:3:35\n  |&gt;\n3 |&gt;     let animals = [Cat, Dog, Cat, Lion, Dog, Lion];\n  |&gt;                                   ^^^^ expected struct `Cat`, found struct `Lion`\nnote: expected type `Cat`\nnote:    found type `Lion`\n\nerror: mismatched types [--explain E0308]\n --&gt; src/main.rs:3:41\n  |&gt;\n3 |&gt;     let animals = [Cat, Dog, Cat, Lion, Dog, Lion];\n  |&gt;                                         ^^^ expected struct `Cat`, found struct `Dog`\nnote: expected type `Cat`\nnote:    found type `Dog`\n\nerror: mismatched types [--explain E0308]\n --&gt; src/main.rs:3:46\n  |&gt;\n3 |&gt;     let animals = [Cat, Dog, Cat, Lion, Dog, Lion];\n  |&gt;                                              ^^^^ expected struct `Cat`, found struct `Lion`\nnote: expected type `Cat`\nnote:    found type `Lion`\n\nerror: the trait bound `[Cat; 6]: std::iter::Iterator` is not satisfied [--explain E0277]\n --&gt; src/main.rs:4:5\n  |&gt;\n4 |&gt;     for single_animal in animals {\n  |&gt;     ^\nnote: `[Cat; 6]` is not an iterator; maybe try calling `.iter()` or a similar method\nnote: required by `std::iter::IntoIterator::into_iter`\n</code></pre>\n\n<p>Adding <code>Animal</code> type to the array does not solve the problem either. Because this time I get more errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [--explain E0308]\n --&gt; src/main.rs:3:27\n  |&gt;\n3 |&gt;     let animals: Animal = [Cat, Dog, Cat, Lion, Dog, Lion];\n  |&gt;                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait Animal, found array of 6 elements\nnote: expected type `Animal`\nnote:    found type `[Cat; 6]`\n\nerror: the trait bound `Animal: std::marker::Sized` is not satisfied [--explain E0277]\n --&gt; src/main.rs:3:9\n  |&gt;\n3 |&gt;     let animals: Animal = [Cat, Dog, Cat, Lion, Dog, Lion];\n  |&gt;         ^^^^^^^\nnote: `Animal` does not have a constant size known at compile-time\nnote: all local variables must have a statically known size\n\nerror: the trait bound `Animal: std::marker::Sized` is not satisfied [--explain E0277]\n --&gt; src/main.rs:4:5\n  |&gt;\n4 |&gt;     for single_animal in animals {\n  |&gt;     ^\nnote: `Animal` does not have a constant size known at compile-time\nnote: required by `std::iter::IntoIterator::into_iter`\n\nerror: the trait bound `Animal: std::iter::Iterator` is not satisfied [--explain E0277]\n --&gt; src/main.rs:4:5\n  |&gt;\n4 |&gt;     for single_animal in animals {\n  |&gt;     ^\nnote: `Animal` is not an iterator; maybe try calling `.iter()` or a similar method\nnote: required by `std::iter::IntoIterator::into_iter`\n</code></pre>\n"}, {"tags": ["mysql", "rust"], "owner": {"reputation": 402, "user_id": 3809903, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/9e1c36e71e453b8ecea77f2e8127942b?s=128&d=identicon&r=PG&f=1", "display_name": "kai", "link": "https://stackoverflow.com/users/3809903/kai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 287, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1473684709, "creation_date": 1473673389, "last_edit_date": 1473684709, "question_id": 39447485, "link": "https://stackoverflow.com/questions/39447485/how-to-fetch-a-row-along-with-its-one-to-many-relations-with-the-mysql-crate", "title": "How to fetch a row along with its one to many relations with the mysql crate?", "body": "<p>I am able to fetch a single model:</p>\n\n<pre><code>extern crate rustc_serialize;\nextern crate mysql;\n#[macro_use]\nextern crate nickel;\n\nuse nickel::{Nickel, NickelError, Request, HttpRouter, Action, Middleware, MiddlewareResult};\nuse nickel::mimes::MediaType;\nuse nickel::status::*;\nuse rustc_serialize::json;\nuse mysql as my;\n\n#[derive(RustcEncodable , RustcDecodable, Debug, PartialEq, Eq)]\nstruct User {\n    id: i32,\n    username: Option&lt;String&gt;,\n    email: Option&lt;String&gt;,\n}\n\n#[derive(RustcEncodable , RustcDecodable)]\nstruct Car {\n    id: i32,\n    car_name: Option&lt;String&gt;,\n    car_number: Option&lt;String&gt;,\n}\n\n#[derive(RustcEncodable , RustcDecodable)]\nstruct UserInfo {\n    info: User,\n    cars: Vec&lt;Car&gt;,\n}\nfn main() {\n    server.get(\"/users\",\n               middleware! { |request, mut response|\n\n\n    let pool = my::Pool::new(\"mysql://USERID:PASSWORD@localhost:3306/DBNAME\").unwrap();\n\n    let users: Vec&lt;User&gt; = pool.prep_exec(\"SELECT id, username, email FROM users limit 10\", ())\n      .map(|result| {\n        result.map(|x| x.unwrap()).map(|row| {\n          let (id, username, email) = my::from_row(row);\n            User {\n              id: id,\n              username: username,\n              email: email\n            }\n          }).collect()\n        }).unwrap();\n\n\n    let user_data = json::encode(&amp;users).unwrap();\n\n\n    let mut data_result = \"{\\\"data\\\": \".to_owned();\n    data_result.push_str(&amp;user_data.to_string());\n\n    data_result.push_str(\"}\");\n\n    response.set(StatusCode::Ok);\n    response.set(MediaType::Json);\n\n    format!(\"{}\", data_result)\n\n      });\n    server.listen(\"127.0.0.1:6767\");\n} \n</code></pre>\n\n<p>A user has many cars, a one-to-many relationship. I want to fetch a user's info along with the cars:</p>\n\n<pre><code>{username: name, car:[{ car_name: first}, {car_name: second} ...]}\n</code></pre>\n\n<p>How to fetch both user and car data?</p>\n"}, {"tags": ["json", "rust", "nickel"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1473684460, "creation_date": 1473684460, "answer_id": 39450690, "question_id": 39444386, "link": "https://stackoverflow.com/questions/39444386/how-to-return-a-json-file-using-a-nickel-template/39450690#39450690", "title": "How to return a JSON file using a Nickel template?", "body": "<p>It actually returns </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{name: user}\n</code></pre>\n\n<p>All you need to do is add <code>response.set(MediaType::Json);</code> like you <em>already have</em> in the other handler:</p>\n\n<pre><code>#[macro_use]\nextern crate nickel;\n\nuse nickel::{Nickel, HttpRouter};\nuse nickel::mimes::MediaType;\nuse std::collections::HashMap;\n\nfn main() {\n    let mut server = Nickel::new();\n\n    server.get(\"/json\", middleware! { |_, mut response| {\n        let mut data = HashMap::new();\n        data.insert(\"name\", \"user\");\n        response.set(MediaType::Json);\n        return response.render(\"app/views/temp.tpl\", &amp;data);\n    }});\n\n    server.listen(\"127.0.0.1:6767\");\n}\n</code></pre>\n\n<p>Now, this may not be a <strong>good</strong> idea. Creating structured formats (CSV, JSON, XML, etc.) via string concatenation often has problems with malformed documents or improperly escaped data.</p>\n"}], "owner": {"reputation": 402, "user_id": 3809903, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/9e1c36e71e453b8ecea77f2e8127942b?s=128&d=identicon&r=PG&f=1", "display_name": "kai", "link": "https://stackoverflow.com/users/3809903/kai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 240, "favorite_count": 0, "answer_count": 1, "score": -3, "last_activity_date": 1473684460, "creation_date": 1473661314, "last_edit_date": 1473683857, "question_id": 39444386, "link": "https://stackoverflow.com/questions/39444386/how-to-return-a-json-file-using-a-nickel-template", "title": "How to return a JSON file using a Nickel template?", "body": "<p>I'm trying to return a JSON file using a Nickel template. I found some API  sample code that returns a JSON response and modified it:</p>\n\n<pre><code>extern crate rustc_serialize;\n#[macro_use]\nextern crate nickel;\n\nuse nickel::{Nickel, HttpRouter, JsonBody};\nuse nickel::mimes::MediaType;\nuse nickel::status::*;\nuse rustc_serialize::json;\nuse std::collections::HashMap;\n\n#[derive(RustcDecodable, RustcEncodable)]\nstruct Person {\n    firstname: String,\n    lastname: String,\n}\n\nfn main() {\n    let mut server = Nickel::new();\n\n    server.get(\"/post\", middleware! { |request, mut response|\n\n        let person: Person = Person { firstname: \"firstName \".to_string(), lastname: \"lastName\".to_string()};\n\n        let mut p: Vec&lt;Person&gt; = vec![];\n\n        p.push(person);\n\n        let json_data = json::encode(&amp;p).unwrap();\n        let mut data_result = \"{\\\"status\\\": 200, \\\"data\\\":\".to_owned();\n        data_result.push_str(&amp;json_data.to_string());\n\n        data_result.push_str(\"}\");\n\n        response.set(StatusCode::Ok);\n        response.set(MediaType::Json);\n        format!(\"{}\", data_result)\n    });\n\n    server.get(\"/json\", middleware! { |_, response|\n        let mut data = HashMap::new();\n        data.insert(\"name\", \"user\");\n        return response.render(\"app/views/temp.tpl\", &amp;data);\n        // template source \n        //\n        //{name: {{name}}}\n        //\n    });\n\n    server.listen(\"127.0.0.1:6767\");\n}\n</code></pre>\n\n<p>And <code>/post</code> returns this JSON:</p>\n\n<pre><code>{ \"status\": 200, \"data\": [{ \"firstname\": \"firstName \", \"lastname\": \"lastName\" ]}\n</code></pre>\n\n<p><code>/json</code> returns this text:</p>\n\n<pre><code>\"name: user\"\n</code></pre>\n\n<p>How to return a JSON file using templates?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473645825, "post_id": 39442067, "comment_id": 66207132, "body": "Complex initialization is common - that&#39;s usually solved by the Builder pattern; that&#39;s not the problem here. The iterator of a slice expects to be able to hold a reference to the slice for the entire time it exists; in fact you <a href=\"http://stackoverflow.com/questions/25702909/can-i-write-an-iterator-that-yields-a-reference-into-itself\">cannot write an iterator that yields references to itself</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473646242, "post_id": 39442067, "comment_id": 66207219, "body": "You could add a <code>fn borrow(&amp;self) -&gt; Ref&lt;Vec&lt;i32&gt;&gt;</code> method that you can store and then call <code>iter</code> on, or you could accept a closure that is provided an iterator: <code>fn iter&lt;F: Fn(Iter&lt;i32&gt;)&gt;(&amp;self, f: F)</code>"}, {"owner": {"reputation": 180, "user_id": 6820433, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/958909c93aa4cb9534adda447617acc0?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel S.", "link": "https://stackoverflow.com/users/6820433/daniel-s"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473647829, "post_id": 39442067, "comment_id": 66207523, "body": "To clarify: my intent was for the iterator to return values, not references (<code>i32</code> in the example code). My challenge has been to initialize an iterator struct that can produce values by storing an <code>Iterator</code> for the underlying container. For this example, <code>HoldsVecInRefCellIter</code> could hold just the <code>Ref&lt;Vec&lt;i32&gt;&gt;</code> and an index into the vector, but for other <code>Ref&lt;SomeContainer&lt;i32&gt;&gt;</code> I imagine you&#39;d want the container&#39;s <code>Iterator</code>."}, {"owner": {"reputation": 180, "user_id": 6820433, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/958909c93aa4cb9534adda447617acc0?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel S.", "link": "https://stackoverflow.com/users/6820433/daniel-s"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473648024, "post_id": 39442067, "comment_id": 66207564, "body": "As for your idea of a <code>borrow</code> function, it would fundamentally be possible to achieve the end result of iterating over the <code>i32</code>s by doing that, though it doesn&#39;t achieve the goal of abstracting away implementation details of <code>HoldsVecInRefCell</code>.  The closure idea is interesting -- it&#39;s not an iterator, but it does let users receive subsequent <code>i32</code>s without knowing about how they are stored internally."}, {"owner": {"reputation": 5443, "user_id": 216292, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/Z8pUD.jpg?s=128&g=1", "display_name": "Ponkadoodle", "link": "https://stackoverflow.com/users/216292/ponkadoodle"}, "edited": false, "score": 0, "creation_date": 1478641968, "post_id": 39442067, "comment_id": 68238201, "body": "I just edited in a link to a related question, which has an <a href=\"http://stackoverflow.com/a/33542412/216292\">answer</a> very similar to what you want to do. I think all you have to do is to call <code>map(|&amp;x| x.clone())</code> in the <code>into_iter()</code> function of that answer to get the precise behavior you&#39;re after."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1473649240, "creation_date": 1473649240, "answer_id": 39442814, "question_id": 39442067, "link": "https://stackoverflow.com/questions/39442067/encapsulating-sequentially-initialized-state-with-self-references-in-rust-struct/39442814#39442814", "title": "Encapsulating sequentially initialized state with self-references in Rust struct", "body": "<p>We'll have to cheat and lie about lifetimes.</p>\n\n<pre><code>use std::mem;\n\nstruct HoldsVecInRefCellIter&lt;'a&gt; {\n    vec_ref: Ref&lt;'a, Vec&lt;i32&gt;&gt;,\n    vec_iter: Iter&lt;'a, i32&gt;, // 'a is a lie!\n}\n\nimpl HoldsVecInRefCell {\n    fn iter(&amp;self) -&gt; HoldsVecInRefCellIter {\n        unsafe {\n            let vec_ref = self.vec_in_refcell.borrow();\n            // transmute changes the lifetime parameter on the Iter\n            let vec_iter = mem::transmute(vec_ref.iter());\n            HoldsVecInRefCellIter { vec_ref: vec_ref, vec_iter: vec_iter }\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for HoldsVecInRefCellIter&lt;'a&gt; {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.vec_iter.next().cloned()\n    }\n}\n</code></pre>\n\n<p>This only works because the <code>Iter</code> isn't invalidated by moving the <code>Ref</code>, as the <code>Ref</code> points to the <code>Vec</code>, and <code>Iter</code> points to the <code>Vec</code>'s storage, not on the <code>Ref</code> itself.</p>\n\n<p>However, this also enables you to move <code>vec_iter</code> out of the <code>HoldsVecInRefCellIter</code>; if you extract <code>vec_iter</code> and drop <code>vec_ref</code>, then the borrow would be released and the <code>Iter</code> could be invalidated without Rust giving a compiler error (<code>'a</code> is the <code>RefCell</code>'s lifetime). With proper encapsulation, you can keep the struct's contents private and avoid users from performing this unsafe operation.</p>\n\n<p>By the way, we could just as well define the iterator to return references:</p>\n\n<pre><code>impl&lt;'a&gt; Iterator for HoldsVecInRefCellIter&lt;'a&gt; {\n    type Item = &amp;'a i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.vec_iter.next()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 180, "user_id": 6820433, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/958909c93aa4cb9534adda447617acc0?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel S.", "link": "https://stackoverflow.com/users/6820433/daniel-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 680, "favorite_count": 2, "accepted_answer_id": 39442814, "answer_count": 1, "score": 11, "last_activity_date": 1478641992, "creation_date": 1473641432, "last_edit_date": 1495535377, "question_id": 39442067, "link": "https://stackoverflow.com/questions/39442067/encapsulating-sequentially-initialized-state-with-self-references-in-rust-struct", "title": "Encapsulating sequentially initialized state with self-references in Rust struct", "body": "<p>I'm trying to define a struct that can act as an iterator for a <code>Vec</code> that is held within a <code>RefCell</code>:</p>\n\n<pre><code>use std::slice::Iter;\nuse std::cell::Ref;\nuse std::cell::RefCell;\n\nstruct HoldsVecInRefCell {\n    vec_in_refcell: RefCell&lt;Vec&lt;i32&gt;&gt;,\n}\n\n// TODO: struct HoldsVecInRefCellIter implementing Iterator ...\n\nimpl HoldsVecInRefCell {\n    fn new() -&gt; HoldsVecInRefCell {\n        HoldsVecInRefCell { vec_in_refcell: RefCell::new(Vec::new()) }\n    }\n\n    fn add_int(&amp;self, i: i32) {\n        self.vec_in_refcell.borrow_mut().push(i);\n    }\n\n    fn iter(&amp;self) -&gt; HoldsVecInRefCellIter {\n        // TODO ...\n    }\n}\n\nfn main() {\n    let holds_vec = HoldsVecInRefCell::new();\n    holds_vec.add_int(1);\n    holds_vec.add_int(2);\n    holds_vec.add_int(3);\n\n    let mut vec_iter = holds_vec.iter();  // Under the hood: run-time borrow check\n\n    for i in vec_iter {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>By comparison,<code>vec_iter</code> can be initialized in-line in <code>main()</code> as follows (deliberately verbose):</p>\n\n<pre><code>// Elided: lifetime parameter of Ref\nlet vec_ref: Ref&lt;Vec&lt;i32&gt;&gt; = holds_vec.vec_in_refcell.borrow();\n// Elided: lifetime parameter of Iter\nlet mut vec_iter: Iter&lt;i32&gt; = vec_ref.iter();\n</code></pre>\n\n<p>Is there any way to define a struct implementing <code>Iterator</code> that holds both the <code>Ref</code> (to keep the immutable <code>RefCell</code> borrow alive) and the <code>Iter</code> (to maintain iterator state for <code>next()</code>, rather than rolling my own iterator for <code>Vec</code> or whatever other container), when the second is derived from (and holds a reference obtained from) the first?</p>\n\n<p>I've tried several approaches to implementing this, and all run afoul of the borrow checker. If I put both pieces of state as bare struct members, like</p>\n\n<pre><code>struct HoldsVecInRefCellIter&lt;'a&gt; {\n    vec_ref: Ref&lt;'a, Vec&lt;i32&gt;&gt;,\n    vec_iter: Iter&lt;'a, i32&gt;,\n}\n</code></pre>\n\n<p>then I can't initialize both fields at once with <code>HoldsVecInRefCellIter { ... }</code> syntax (see e.g., <a href=\"https://stackoverflow.com/questions/27163593/does-rust-have-syntax-for-initializing-a-struct-field-with-an-earlier-field\">Does Rust have syntax for initializing a struct field with an earlier field?</a>). If I try to shunt sequential initialization with a struct like</p>\n\n<pre><code>struct HoldsVecInRefCellIter&lt;'a&gt; {\n    vec_ref: Ref&lt;'a, Vec&lt;i32&gt;&gt;,\n    vec_iter: Option&lt;Iter&lt;'a, i32&gt;&gt;,\n}\n\n// ...\n\nimpl HoldsVecInRefCell {\n    // ...\n\n    fn iter(&amp;self) -&gt; HoldsVecInRefCellIter {\n        let mut new_iter = HoldsVecInRefCellIter { vec_ref: self.vec_in_refcell.borrow(), vec_iter: None };\n        new_iter.vec_iter = new_iter.vec_ref.iter();\n        new_iter\n    }\n}\n</code></pre>\n\n<p>then I incur a mutable self-borrow of the struct that prevents returning it from <code>iter()</code>. This self-borrowing of a struct can also happen if you try to store a reference to one part of a struct in the struct itself (<a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct?rq=1\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>), which would prevent safely moving instances of the struct. By comparison, it seems like a struct like <code>HoldsVecInRefCellIter</code>, if you could complete initialization, would do the correct thing when moved, since all references internally are to data elsewhere that outlives this struct.</p>\n\n<p>There are tricks to avoid creating self-references using <code>Rc</code> (see examples at <a href=\"https://internals.rust-lang.org/t/self-referencing-structs/418/3\" rel=\"nofollow noreferrer\">https://internals.rust-lang.org/t/self-referencing-structs/418/3</a>), but I don't see how these could be applied if you want to store an existing <code>Iterator</code> struct which is implemented to hold a direct reference to the underlying container, not an <code>Rc</code>.</p>\n\n<p>As a Rust newbie coming from C++, this feels like a problem that would come up often (\"I have some complex state initialization logic in a block of code, and I want to abstract away that logic and hold the resulting state in a struct for use\").</p>\n\n<p><strong>Related Question:</strong> <a href=\"https://stackoverflow.com/questions/33541492/returning-iterator-of-a-vec-in-a-refcell\">Returning iterator of a Vec in a RefCell</a></p>\n"}, {"tags": ["assembly", "optimization", "rust", "benchmarking"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473634419, "post_id": 39441295, "comment_id": 66205123, "body": "If you have 5 things, and you only care about the difference between two of them, it would be considerate to remove all the extra distractions and produce a focused question."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473634882, "post_id": 39441295, "comment_id": 66205212, "body": "@Shepmaster: The fact that only <i>one</i> of the 5 functions exhibits poor performance is what makes the question interesting to me. And it shows &quot;what he&#39;s tried&quot;. :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473635509, "post_id": 39441295, "comment_id": 66205320, "body": "For whatever reason, LLVM is autovectorizing and applying SIMD to all the &quot;fast&quot; ones, but not the <code>closure_b</code> variant. The <code>xmm0</code> registers and the <code>vector.body</code> in the LLVM IR are major hints."}], "answers": [{"comments": [{"owner": {"reputation": 5821, "user_id": 3185968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffc0f4eda45ce3e2ff4249afbfdac43e?s=128&d=identicon&r=PG&f=1", "display_name": "EOF", "link": "https://stackoverflow.com/users/3185968/eof"}, "edited": false, "score": 0, "creation_date": 1473666350, "post_id": 39441800, "comment_id": 66212916, "body": "The <code>xorl %edi, %edi</code> is a dependency breaking idiom on modern x86 micro architectures. There will be no partial register stall after subsequent a<code>setl %dil</code>, AFAIK."}, {"owner": {"reputation": 10368, "user_id": 435904, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ce3dbd2b9c6693c6472c947e758a0e24?s=128&d=identicon&r=PG", "display_name": "4e6", "link": "https://stackoverflow.com/users/435904/4e6"}, "edited": false, "score": 0, "creation_date": 1473688027, "post_id": 39441800, "comment_id": 66224871, "body": "Awesome answer. Now, after it settled down in my head, it looks like a regression to me. I mean, <code>xor_closure_b</code> should be at least as fast as <code>xor_black_box</code>. I am new to Rust ecosystem, do you think it is worth creating an issue regarding this case?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 5821, "user_id": 3185968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffc0f4eda45ce3e2ff4249afbfdac43e?s=128&d=identicon&r=PG&f=1", "display_name": "EOF", "link": "https://stackoverflow.com/users/3185968/eof"}, "edited": false, "score": 0, "creation_date": 1473693644, "post_id": 39441800, "comment_id": 66228648, "body": "@EOF: Thanks for the info, I did not know that. But that&#39;s not the issue I had identified: I hypothesized that a partial register stall would happen on the <code>addl %ebx, %edi</code> following <code>setl %dil</code>. I commented out <code>xorl %edi, %edi</code> only because it was now redundant, but leaving it in doesn&#39;t affect the benchmark."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 10368, "user_id": 435904, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ce3dbd2b9c6693c6472c947e758a0e24?s=128&d=identicon&r=PG", "display_name": "4e6", "link": "https://stackoverflow.com/users/435904/4e6"}, "edited": false, "score": 0, "creation_date": 1473693954, "post_id": 39441800, "comment_id": 66228836, "body": "@4e6: You might want to file an issue again Rust, but if I&#39;m not mistaken, at the moment, Rust doesn&#39;t try very hard to generate optimal LLVM IR, so it might be low priority at the moment."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473694004, "post_id": 39441800, "comment_id": 66228866, "body": "You don&#39;t think the autovectorization and SIMD operations are involved?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473694261, "post_id": 39441800, "comment_id": 66229012, "body": "@Shepmaster: The xor operation has been completely optimized away in both <code>xor_closure_b</code> and <code>xor_pointer_b</code>. The <code>xorl</code> instructions in the assembly only set registers to 0. What is there left to vectorize?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473696061, "post_id": 39441800, "comment_id": 66230132, "body": "Maybe I misunderstood the question. I thought it was &quot;why is this one so much slower than the fast ones (the ones were not optimized away)&quot;. The answer to that would have involved the optimizations."}, {"owner": {"reputation": 5821, "user_id": 3185968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffc0f4eda45ce3e2ff4249afbfdac43e?s=128&d=identicon&r=PG&f=1", "display_name": "EOF", "link": "https://stackoverflow.com/users/3185968/eof"}, "edited": false, "score": 0, "creation_date": 1473707483, "post_id": 39441800, "comment_id": 66235483, "body": "@FrancisGagn&#233;: Your conclusion is ludicrous. First of, removing a full register read after a partial register write (after a dependency breaking idiom no less) is not going to improve performance 900-fold. On the other hand, removing an inner loop by commenting out a <code>cmp</code> instruction that sets the flags for the loop-condition <i>will</i> improve performance arbitrarily. It will also make the program meaningless."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 5821, "user_id": 3185968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffc0f4eda45ce3e2ff4249afbfdac43e?s=128&d=identicon&r=PG&f=1", "display_name": "EOF", "link": "https://stackoverflow.com/users/3185968/eof"}, "edited": false, "score": 0, "creation_date": 1473719432, "post_id": 39441800, "comment_id": 66240605, "body": "@EOF: Doh! I completely missed the <code>jl</code> instruction. Does this edit make more sense?"}, {"owner": {"reputation": 5821, "user_id": 3185968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffc0f4eda45ce3e2ff4249afbfdac43e?s=128&d=identicon&r=PG&f=1", "display_name": "EOF", "link": "https://stackoverflow.com/users/3185968/eof"}, "edited": false, "score": 0, "creation_date": 1473774781, "post_id": 39441800, "comment_id": 66262927, "body": "@FrancisGagn&#233;: Well, a reduction in runtime to 0.35 is <i>a lot</i> more reasonable than one to 0."}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 0, "creation_date": 1473889692, "post_id": 39441800, "comment_id": 66317828, "body": "Your updated version is still a pretty dumb way to loop from 0 to 1000.  The cmp/jge don&#39;t need to be inside the loop.  The JL target should be just before the INC, or (worse) the CMP/JL should be a JMP (like a C while(){} loop instead of a do{}while() loop after a prologue to test that the loop should run at least once.)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1473719401, "last_edit_date": 1495540099, "creation_date": 1473638440, "answer_id": 39441800, "question_id": 39441295, "link": "https://stackoverflow.com/questions/39441295/odd-results-when-evaluating-benchmark-example-from-rust-book/39441800#39441800", "title": "Odd results when evaluating benchmark example from Rust Book", "body": "<p>I'll focus on comparing <code>xor_closure_b</code> and <code>xor_pointer_b</code>, since they should have similar performance (i.e. they should both do nothing).</p>\n\n<p><strong>Update:</strong> I made a mistake in my initial analysis, as pointed out by <a href=\"https://stackoverflow.com/users/3185968/eof\">@EOF</a>, so I revised the text below.</p>\n\n<p>First, let's look at the LLVM IR generated for those two functions. (I find LLVM IR easier to read than ASM because it's more structured.)</p>\n\n<pre class=\"lang-llvm prettyprint-override\"><code>; Function Attrs: uwtable\ndefine internal void @_ZN3xor13xor_closure_b17hb13913a8d2a27b06E(%\"11.test::Bencher\"* nocapture dereferenceable(32)) unnamed_addr #0 personality i32 (i32, i32, i64, %\"8.unwind::libunwind::_Unwind_Exception\"*, %\"8.unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\nentry-block:\n  %dummy.i.i = alloca {}, align 8\n  %dummy.i.i.i = alloca i32, align 4\n  %start1.i = alloca %\"1.std::time::Instant\", align 8\n  %tmp_ret2.i = alloca %\"1.std::time::Duration\", align 8\n  %1 = bitcast %\"1.std::time::Duration\"* %tmp_ret2.i to i8*\n  call void @llvm.lifetime.start(i64 16, i8* %1)\n  %2 = bitcast %\"1.std::time::Instant\"* %start1.i to i8*\n  call void @llvm.lifetime.start(i64 16, i8* %2)\n  call void @_ZN3std4time7Instant3now17h37bccd496c61083dE(%\"1.std::time::Instant\"* noalias nocapture nonnull sret dereferenceable(16) %start1.i)\n  %3 = getelementptr inbounds %\"11.test::Bencher\", %\"11.test::Bencher\"* %0, i64 0, i32 0\n  %4 = load i64, i64* %3, align 8\n  %5 = icmp eq i64 %4, 0\n  br i1 %5, label %_ZN4test7Bencher4iter17h0cab611e22e5c5faE.exit, label %bb7.lr.ph.i\n\nbb7.lr.ph.i:                                      ; preds = %entry-block\n  %6 = bitcast i32* %dummy.i.i.i to i8*\n  %7 = bitcast {}* %dummy.i.i to i8*\n  br label %bb7.i\n\nbb7.i:                                            ; preds = %\"_ZN3xor13xor_closure_b28_$u7b$$u7b$closure$u7d$$u7d$17hbaf8d82981c57ba0E.exit.i\", %bb7.lr.ph.i\n  %iter.sroa.0.019.i = phi i64 [ 0, %bb7.lr.ph.i ], [ %11, %\"_ZN3xor13xor_closure_b28_$u7b$$u7b$closure$u7d$$u7d$17hbaf8d82981c57ba0E.exit.i\" ]\n  call void @llvm.lifetime.start(i64 4, i8* %6) #2\n  store i32 1000, i32* %dummy.i.i.i, align 4\n  call void asm \"\", \"r,~{dirflag},~{fpsr},~{flags}\"(i32* nonnull %dummy.i.i.i) #2, !srcloc !1\n  %8 = load i32, i32* %dummy.i.i.i, align 4\n  call void @llvm.lifetime.end(i64 4, i8* %6) #2\n  br label %bb7.i.i.i\n\nbb7.i.i.i:                                        ; preds = %bb7.i.i.i, %bb7.i\n  %iter.sroa.0.0.i.i.i = phi i32 [ 0, %bb7.i ], [ %iter.sroa.0.1.i.i.i, %bb7.i.i.i ]\n  %9 = icmp slt i32 %iter.sroa.0.0.i.i.i, %8\n  %10 = zext i1 %9 to i32\n  %iter.sroa.0.1.i.i.i = add i32 %10, %iter.sroa.0.0.i.i.i\n  br i1 %9, label %bb7.i.i.i, label %\"_ZN3xor13xor_closure_b28_$u7b$$u7b$closure$u7d$$u7d$17hbaf8d82981c57ba0E.exit.i\"\n\n\"_ZN3xor13xor_closure_b28_$u7b$$u7b$closure$u7d$$u7d$17hbaf8d82981c57ba0E.exit.i\": ; preds = %bb7.i.i.i\n  %11 = add nuw i64 %iter.sroa.0.019.i, 1\n  call void @llvm.lifetime.start(i64 0, i8* %7)\n  call void asm \"\", \"r,~{dirflag},~{fpsr},~{flags}\"({}* nonnull %dummy.i.i) #2, !srcloc !1\n  call void @llvm.lifetime.end(i64 0, i8* %7)\n  %exitcond.i = icmp eq i64 %11, %4\n  br i1 %exitcond.i, label %_ZN4test7Bencher4iter17h0cab611e22e5c5faE.exit.loopexit, label %bb7.i\n\n_ZN4test7Bencher4iter17h0cab611e22e5c5faE.exit.loopexit: ; preds = %\"_ZN3xor13xor_closure_b28_$u7b$$u7b$closure$u7d$$u7d$17hbaf8d82981c57ba0E.exit.i\"\n  br label %_ZN4test7Bencher4iter17h0cab611e22e5c5faE.exit\n\n_ZN4test7Bencher4iter17h0cab611e22e5c5faE.exit:   ; preds = %_ZN4test7Bencher4iter17h0cab611e22e5c5faE.exit.loopexit, %entry-block\n  call void @_ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE(%\"1.std::time::Duration\"* noalias nocapture nonnull sret dereferenceable(16) %tmp_ret2.i, %\"1.std::time::Instant\"* noalias nonnull readonly dereferenceable(16) %start1.i)\n  %12 = getelementptr inbounds %\"1.std::time::Duration\", %\"1.std::time::Duration\"* %tmp_ret2.i, i64 0, i32 0\n  %13 = getelementptr inbounds %\"1.std::time::Duration\", %\"1.std::time::Duration\"* %tmp_ret2.i, i64 0, i32 1\n  %14 = load i64, i64* %12, align 8\n  %15 = load i32, i32* %13, align 8\n  %16 = getelementptr inbounds %\"11.test::Bencher\", %\"11.test::Bencher\"* %0, i64 0, i32 1, i32 0\n  store i64 %14, i64* %16, align 8\n  %17 = getelementptr inbounds %\"11.test::Bencher\", %\"11.test::Bencher\"* %0, i64 0, i32 1, i32 1\n  store i32 %15, i32* %17, align 4\n  call void @llvm.lifetime.end(i64 16, i8* %2)\n  call void @llvm.lifetime.end(i64 16, i8* %1)\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine internal void @_ZN3xor13xor_pointer_b17h7ba0f9760d9fd9f8E(%\"11.test::Bencher\"* nocapture dereferenceable(32)) unnamed_addr #0 personality i32 (i32, i32, i64, %\"8.unwind::libunwind::_Unwind_Exception\"*, %\"8.unwind::libunwind::_Unwind_Context\"*)* @rust_eh_personality {\nentry-block:\n  %dummy.i.i = alloca {}, align 8\n  %dummy.i.i.i = alloca i32, align 4\n  %start1.i = alloca %\"1.std::time::Instant\", align 8\n  %tmp_ret2.i = alloca %\"1.std::time::Duration\", align 8\n  %1 = bitcast %\"1.std::time::Duration\"* %tmp_ret2.i to i8*\n  call void @llvm.lifetime.start(i64 16, i8* %1)\n  %2 = bitcast %\"1.std::time::Instant\"* %start1.i to i8*\n  call void @llvm.lifetime.start(i64 16, i8* %2)\n  call void @_ZN3std4time7Instant3now17h37bccd496c61083dE(%\"1.std::time::Instant\"* noalias nocapture nonnull sret dereferenceable(16) %start1.i)\n  %3 = getelementptr inbounds %\"11.test::Bencher\", %\"11.test::Bencher\"* %0, i64 0, i32 0\n  %4 = load i64, i64* %3, align 8\n  %5 = icmp eq i64 %4, 0\n  br i1 %5, label %_ZN4test7Bencher4iter17hae343b1316e5897bE.exit, label %bb7.lr.ph.i\n\nbb7.lr.ph.i:                                      ; preds = %entry-block\n  %6 = bitcast i32* %dummy.i.i.i to i8*\n  %7 = bitcast {}* %dummy.i.i to i8*\n  br label %bb7.i\n\nbb7.i:                                            ; preds = %bb7.i, %bb7.lr.ph.i\n  %iter.sroa.0.019.i = phi i64 [ 0, %bb7.lr.ph.i ], [ %8, %bb7.i ]\n  %8 = add nuw i64 %iter.sroa.0.019.i, 1\n  call void @llvm.lifetime.start(i64 4, i8* %6) #2\n  store i32 1000, i32* %dummy.i.i.i, align 4\n  call void asm \"\", \"r,~{dirflag},~{fpsr},~{flags}\"(i32* nonnull %dummy.i.i.i) #2, !srcloc !1\n  call void @llvm.lifetime.end(i64 4, i8* %6) #2\n  call void @llvm.lifetime.start(i64 0, i8* %7)\n  call void asm \"\", \"r,~{dirflag},~{fpsr},~{flags}\"({}* nonnull %dummy.i.i) #2, !srcloc !1\n  call void @llvm.lifetime.end(i64 0, i8* %7)\n  %exitcond.i = icmp eq i64 %8, %4\n  br i1 %exitcond.i, label %_ZN4test7Bencher4iter17hae343b1316e5897bE.exit.loopexit, label %bb7.i\n\n_ZN4test7Bencher4iter17hae343b1316e5897bE.exit.loopexit: ; preds = %bb7.i\n  br label %_ZN4test7Bencher4iter17hae343b1316e5897bE.exit\n\n_ZN4test7Bencher4iter17hae343b1316e5897bE.exit:   ; preds = %_ZN4test7Bencher4iter17hae343b1316e5897bE.exit.loopexit, %entry-block\n  call void @_ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE(%\"1.std::time::Duration\"* noalias nocapture nonnull sret dereferenceable(16) %tmp_ret2.i, %\"1.std::time::Instant\"* noalias nonnull readonly dereferenceable(16) %start1.i)\n  %9 = getelementptr inbounds %\"1.std::time::Duration\", %\"1.std::time::Duration\"* %tmp_ret2.i, i64 0, i32 0\n  %10 = getelementptr inbounds %\"1.std::time::Duration\", %\"1.std::time::Duration\"* %tmp_ret2.i, i64 0, i32 1\n  %11 = load i64, i64* %9, align 8\n  %12 = load i32, i32* %10, align 8\n  %13 = getelementptr inbounds %\"11.test::Bencher\", %\"11.test::Bencher\"* %0, i64 0, i32 1, i32 0\n  store i64 %11, i64* %13, align 8\n  %14 = getelementptr inbounds %\"11.test::Bencher\", %\"11.test::Bencher\"* %0, i64 0, i32 1, i32 1\n  store i32 %12, i32* %14, align 4\n  call void @llvm.lifetime.end(i64 16, i8* %2)\n  call void @llvm.lifetime.end(i64 16, i8* %1)\n  ret void\n}\n</code></pre>\n\n<p>If we compare the LLVM IR for <code>xor_closure_b</code> and <code>xor_pointer_b</code>, they look pretty similar. However, one difference stands out: the <code>bb7.i.i.i</code> block has been optimized out in <code>xor_pointer_b</code>, but not in <code>xor_closure_b</code>, for some reason. Here's the block:</p>\n\n<pre class=\"lang-llvm prettyprint-override\"><code>bb7.i.i.i:                                        ; preds = %bb7.i.i.i, %bb7.i\n  %iter.sroa.0.0.i.i.i = phi i32 [ 0, %bb7.i ], [ %iter.sroa.0.1.i.i.i, %bb7.i.i.i ]\n  %9 = icmp slt i32 %iter.sroa.0.0.i.i.i, %8\n  %10 = zext i1 %9 to i32\n  %iter.sroa.0.1.i.i.i = add i32 %10, %iter.sroa.0.0.i.i.i\n  br i1 %9, label %bb7.i.i.i, label %\"_ZN3xor13xor_closure_b28_$u7b$$u7b$closure$u7d$$u7d$17hbaf8d82981c57ba0E.exit.i\"\n</code></pre>\n\n<p>And here it is translated to ASM:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.LBB1_3:\n    xorl    %edi, %edi\n    cmpl    %esi, %ebx\n    setl    %dil\n    addl    %ebx, %edi\n    cmpl    %esi, %ebx\n    movl    %edi, %ebx\n    jl  .LBB1_3\n</code></pre>\n\n<p>This is a pretty dumb way to loop from 0 to 1000. Changing the code above to this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.LBB1_3:\n    cmpl    %esi, %ebx\n    jge .LBB1_3a\n    incl    %ebx\n    cmpl    %esi, %ebx\n    jl  .LBB1_3\n.LBB1_3a:\n</code></pre>\n\n<p>makes the benchmark for <code>xor_closure_b</code> drop from <code>781 ns/iter (+/- 19)</code> to <code>270 ns/iter (+/- 7)</code> on my machine.</p>\n\n<p>I cannot say for sure why the code generated by the compiler is so slow, or why it wasn't optimized away in the first place (as it was in <code>xor_pointer_b</code>)... However, it seems that <code>xor_pointer_a</code> and <code>xor_closure_a</code> and faster still because the generated code is vectorized, which has the effect that the loop performs fewer iterations (i.e. the loop is unrolled), by a factor of 32 (e.g. <code>.LBB0_8</code>, the main loop in <code>xor_closure_a</code>, performs 31 iterations, then the rest is handled after the loop).</p>\n\n<p>For reference, I compiled the edited ASM with this command line:</p>\n\n<blockquote>\n  <p><code>$ gcc target/release/xor-71758a2519026d86.s ~/.multirust/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/lib{test,term,getopts,rustc_unicode,std,libc,rand,collections,alloc_system,alloc,core,panic_unwind}-411f48d3.rlib -pthread -lpthread -lm -ldl</code></p>\n</blockquote>\n\n<p>and I ran it with <code>./a.out --bench</code>. Also, my CPU is an Intel Core i7-4770K.</p>\n"}], "owner": {"reputation": 10368, "user_id": 435904, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ce3dbd2b9c6693c6472c947e758a0e24?s=128&d=identicon&r=PG", "display_name": "4e6", "link": "https://stackoverflow.com/users/435904/4e6"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 260, "favorite_count": 0, "accepted_answer_id": 39441800, "answer_count": 1, "score": 8, "last_activity_date": 1473719401, "creation_date": 1473633274, "last_edit_date": 1495540099, "question_id": 39441295, "link": "https://stackoverflow.com/questions/39441295/odd-results-when-evaluating-benchmark-example-from-rust-book", "title": "Odd results when evaluating benchmark example from Rust Book", "body": "<h1>Benchmark tests from Rust Book</h1>\n\n<p>I am getting odd results from microbenchmarks that can be reproduced with the the example <code>bench_xor_1000_ints</code> from the Rust Book chapter on <a href=\"https://doc.rust-lang.org/nightly/book/benchmark-tests.html\" rel=\"nofollow noreferrer\">Benchmark tests</a>.</p>\n\n<p>The section <a href=\"https://doc.rust-lang.org/nightly/book/benchmark-tests.html#gotcha-optimizations\" rel=\"nofollow noreferrer\"><em>Gotcha: optimizations</em></a> gives general recommendations to return a value from the <code>Bencher::iter</code> closure and/or to use the <code>black_box</code> function. I ended up with these five variants:</p>\n\n<h2>Benchmark code</h2>\n\n<pre><code>#![feature(test)]\n\nextern crate test;\n\nuse test::{Bencher, black_box};\n\nfn xor(x: i32, y: i32) -&gt; i32 { x ^ y }\n\n#[bench]\nfn xor_closure_a(b: &amp;mut Bencher) {\n    b.iter(|| {\n        let n = black_box(1000);\n        (0..n).fold(0, |a, b| a ^ b)\n    });\n}\n\n#[bench]\nfn xor_closure_b(b: &amp;mut Bencher) {\n    b.iter(|| {\n        let n = black_box(1000);\n        (0..n).fold(0, |a, b| a ^ b);\n    });\n}\n\n#[bench]\nfn xor_pointer_a(b: &amp;mut Bencher) {\n    b.iter(|| {\n        let n = black_box(1000);\n        (0..n).fold(0, xor)\n    });\n}\n\n#[bench]\nfn xor_pointer_b(b: &amp;mut Bencher) {\n    b.iter(|| {\n        let n = black_box(1000);\n        (0..n).fold(0, xor);\n    });\n}\n\n#[bench] // closure/pointer or semicolon doesn't affect results\nfn xor_black_box(b: &amp;mut Bencher) {\n    b.iter(|| {\n        black_box((0..1000).fold(0, xor));\n    });\n}\n</code></pre>\n\n<h2>Benchmark naming</h2>\n\n<ul>\n<li>prefix <em>xor_closure_</em>: pass closure <code>|a, b| a ^ b</code></li>\n<li>prefix <em>xor_pointer_</em>: pass function pointer <code>xor</code></li>\n<li>suffix <em>_a</em>: <code>b.iter</code> closure returns value (note lack of semicolon)</li>\n<li>suffix <em>_b</em>: <code>b.iter</code> closure doesn't return value (ends with semicolon)</li>\n<li><em>xor_black_box</em>: throw everything into <code>black_box</code> and hope for the best</li>\n</ul>\n\n<h2>Benchmark results</h2>\n\n<pre><code>test tests::xor_black_box ... bench:          69 ns/iter (+/- 1)\ntest tests::xor_closure_a ... bench:          70 ns/iter (+/- 1)\ntest tests::xor_closure_b ... bench:         921 ns/iter (+/- 5)\ntest tests::xor_pointer_a ... bench:          60 ns/iter (+/- 1)\ntest tests::xor_pointer_b ... bench:           0 ns/iter (+/- 0)\n</code></pre>\n\n<p>Some observations regarding measurements:</p>\n\n<ul>\n<li>Removal of the black-boxed iteration counter <code>let n = black_box(1000)</code> and inlining it into range <code>(0..1000).fold ...</code> doesn't affect any of the results</li>\n<li>Scaling of the iteration counter <code>n</code> scales measurements appropriately (except for <code>xor_pointer_b</code> optimized to 0)</li>\n</ul>\n\n<p>On the whole, results agree with the general recommendations from Rust Book, except for <code>xor_closure_b</code> benchmark.</p>\n\n<p>More specifically, results with the suffix <em>_a</em> (that return a value) seem to agree with the black-boxed <em>xor_black_box</em> which sounds good to me. And <code>xor_pointer_b</code> optimized to 0 seems legit since its closure doesn't return the value. But the result of <code>xor_closure_b</code> is odd.</p>\n\n<p>Assembly code may clarify this question. <a href=\"https://stackoverflow.com/questions/32385805/how-can-i-prevent-the-rust-benchmark-library-from-optimizing-away-my-code\">How can I prevent the Rust benchmark library from optimizing away my code?</a> gives a good overview on reading assembly from the Rust benchmark tests.</p>\n\n<pre><code>cargo rustc --release -- --emit asm\n</code></pre>\n\n<p>produces <a href=\"https://gist.github.com/4e6/bbb0dcb93dba5658645a9748ee791d44\" rel=\"nofollow noreferrer\">this output</a>:</p>\n\n<pre><code>    .text\n    .file   \"fpinrust.cgu-0.rs\"\n    .section    .rodata.cst16,\"aM\",@progbits,16\n    .p2align    4\n.LCPI0_0:\n    .long   0\n    .long   1\n    .long   2\n    .long   3\n.LCPI0_1:\n    .long   4\n    .long   4\n    .long   4\n    .long   4\n.LCPI0_2:\n    .long   8\n    .long   8\n    .long   8\n    .long   8\n.LCPI0_3:\n    .long   12\n    .long   12\n    .long   12\n    .long   12\n.LCPI0_4:\n    .long   16\n    .long   16\n    .long   16\n    .long   16\n.LCPI0_5:\n    .long   20\n    .long   20\n    .long   20\n    .long   20\n.LCPI0_6:\n    .long   24\n    .long   24\n    .long   24\n    .long   24\n.LCPI0_7:\n    .long   28\n    .long   28\n    .long   28\n    .long   28\n.LCPI0_8:\n    .long   32\n    .long   32\n    .long   32\n    .long   32\n    .section    .text._ZN8fpinrust5tests13xor_closure_a17h4df097d1e565a700E,\"ax\",@progbits\n    .globl  _ZN8fpinrust5tests13xor_closure_a17h4df097d1e565a700E\n    .p2align    4, 0x90\n    .type   _ZN8fpinrust5tests13xor_closure_a17h4df097d1e565a700E,@function\n_ZN8fpinrust5tests13xor_closure_a17h4df097d1e565a700E:\n    .cfi_startproc\n    pushq   %r14\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n    pushq   %rbx\n.Ltmp1:\n    .cfi_def_cfa_offset 24\n    subq    $40, %rsp\n.Ltmp2:\n    .cfi_def_cfa_offset 64\n.Ltmp3:\n    .cfi_offset %rbx, -24\n.Ltmp4:\n    .cfi_offset %r14, -16\n    movq    %rdi, %r14\n    leaq    24(%rsp), %rdi\n    callq   _ZN3std4time7Instant3now17h37bccd496c61083dE@PLT\n    movq    (%r14), %r9\n    testq   %r9, %r9\n    je  .LBB0_15\n    xorl    %ecx, %ecx\n    leaq    8(%rsp), %r8\n    movdqa  .LCPI0_0(%rip), %xmm8\n    movdqa  .LCPI0_1(%rip), %xmm15\n    movdqa  .LCPI0_2(%rip), %xmm2\n    movdqa  .LCPI0_3(%rip), %xmm9\n    movdqa  .LCPI0_4(%rip), %xmm10\n    movdqa  .LCPI0_5(%rip), %xmm11\n    movdqa  .LCPI0_6(%rip), %xmm12\n    movdqa  .LCPI0_7(%rip), %xmm13\n    movdqa  .LCPI0_8(%rip), %xmm14\n    .p2align    4, 0x90\n.LBB0_2:\n    incq    %rcx\n    movl    $1000, 8(%rsp)\n    #APP\n    #NO_APP\n    movl    8(%rsp), %esi\n    testl   %esi, %esi\n    movl    $0, %edx\n    jle .LBB0_14\n    xorl    %edx, %edx\n    cmpl    $8, %esi\n    jae .LBB0_5\n    xorl    %edi, %edi\n    jmp .LBB0_13\n    .p2align    4, 0x90\n.LBB0_5:\n    movl    %esi, %eax\n    andl    $-8, %eax\n    movl    $0, %edi\n    je  .LBB0_13\n    leal    -8(%rax), %edx\n    movl    %edx, %edi\n    shrl    $3, %edi\n    leal    1(%rdi), %ebx\n    andl    $3, %ebx\n    pxor    %xmm3, %xmm3\n    cmpl    $24, %edx\n    pxor    %xmm4, %xmm4\n    movdqa  %xmm8, %xmm5\n    jb  .LBB0_9\n    leal    -1(%rbx), %edx\n    subl    %edi, %edx\n    pxor    %xmm3, %xmm3\n    pxor    %xmm4, %xmm4\n    movdqa  %xmm8, %xmm5\n    .p2align    4, 0x90\n.LBB0_8:\n    movdqa  %xmm5, %xmm6\n    paddd   %xmm15, %xmm6\n    movdqa  %xmm5, %xmm7\n    paddd   %xmm2, %xmm7\n    pxor    %xmm5, %xmm3\n    pxor    %xmm4, %xmm6\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm9, %xmm4\n    movdqa  %xmm5, %xmm0\n    paddd   %xmm10, %xmm0\n    pxor    %xmm7, %xmm3\n    movdqa  %xmm5, %xmm7\n    paddd   %xmm11, %xmm7\n    movdqa  %xmm5, %xmm1\n    paddd   %xmm12, %xmm1\n    pxor    %xmm4, %xmm7\n    pxor    %xmm6, %xmm7\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm13, %xmm4\n    paddd   %xmm14, %xmm5\n    pxor    %xmm0, %xmm1\n    pxor    %xmm1, %xmm3\n    pxor    %xmm7, %xmm4\n    addl    $4, %edx\n    jne .LBB0_8\n.LBB0_9:\n    testl   %ebx, %ebx\n    je  .LBB0_12\n    negl    %ebx\n    .p2align    4, 0x90\n.LBB0_11:\n    movdqa  %xmm5, %xmm0\n    pxor    %xmm5, %xmm3\n    paddd   %xmm15, %xmm5\n    paddd   %xmm2, %xmm0\n    pxor    %xmm5, %xmm4\n    incl    %ebx\n    movdqa  %xmm0, %xmm5\n    jne .LBB0_11\n.LBB0_12:\n    pxor    %xmm4, %xmm3\n    pshufd  $78, %xmm3, %xmm0\n    pxor    %xmm3, %xmm0\n    pshufd  $229, %xmm0, %xmm1\n    pxor    %xmm0, %xmm1\n    movd    %xmm1, %edx\n    cmpl    %eax, %esi\n    movl    %eax, %edi\n    je  .LBB0_14\n    .p2align    4, 0x90\n.LBB0_13:\n    xorl    %edi, %edx\n    leal    1(%rdi), %eax\n    cmpl    %eax, %esi\n    movl    %eax, %edi\n    jne .LBB0_13\n.LBB0_14:\n    movl    %edx, 8(%rsp)\n    #APP\n    #NO_APP\n    cmpq    %r9, %rcx\n    jne .LBB0_2\n.LBB0_15:\n    leaq    8(%rsp), %rdi\n    leaq    24(%rsp), %rsi\n    callq   _ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE@PLT\n    movq    8(%rsp), %rax\n    movl    16(%rsp), %ecx\n    movq    %rax, 8(%r14)\n    movl    %ecx, 16(%r14)\n    addq    $40, %rsp\n    popq    %rbx\n    popq    %r14\n    retq\n.Lfunc_end0:\n    .size   _ZN8fpinrust5tests13xor_closure_a17h4df097d1e565a700E, .Lfunc_end0-_ZN8fpinrust5tests13xor_closure_a17h4df097d1e565a700E\n    .cfi_endproc\n\n    .section    .text._ZN8fpinrust5tests13xor_closure_b17h4bdd5e59e5c19a55E,\"ax\",@progbits\n    .globl  _ZN8fpinrust5tests13xor_closure_b17h4bdd5e59e5c19a55E\n    .p2align    4, 0x90\n    .type   _ZN8fpinrust5tests13xor_closure_b17h4bdd5e59e5c19a55E,@function\n_ZN8fpinrust5tests13xor_closure_b17h4bdd5e59e5c19a55E:\n    .cfi_startproc\n    pushq   %r14\n.Ltmp5:\n    .cfi_def_cfa_offset 16\n    pushq   %rbx\n.Ltmp6:\n    .cfi_def_cfa_offset 24\n    subq    $40, %rsp\n.Ltmp7:\n    .cfi_def_cfa_offset 64\n.Ltmp8:\n    .cfi_offset %rbx, -24\n.Ltmp9:\n    .cfi_offset %r14, -16\n    movq    %rdi, %r14\n    leaq    24(%rsp), %rdi\n    callq   _ZN3std4time7Instant3now17h37bccd496c61083dE@PLT\n    movq    (%r14), %rax\n    testq   %rax, %rax\n    je  .LBB1_5\n    xorl    %ecx, %ecx\n    leaq    8(%rsp), %rdx\n    .p2align    4, 0x90\n.LBB1_2:\n    movl    $1000, 8(%rsp)\n    #APP\n    #NO_APP\n    movl    8(%rsp), %esi\n    xorl    %ebx, %ebx\n    .p2align    4, 0x90\n.LBB1_3:\n    xorl    %edi, %edi\n    cmpl    %esi, %ebx\n    setl    %dil\n    addl    %ebx, %edi\n    cmpl    %esi, %ebx\n    movl    %edi, %ebx\n    jl  .LBB1_3\n    incq    %rcx\n    #APP\n    #NO_APP\n    cmpq    %rax, %rcx\n    jne .LBB1_2\n.LBB1_5:\n    leaq    8(%rsp), %rdi\n    leaq    24(%rsp), %rsi\n    callq   _ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE@PLT\n    movq    8(%rsp), %rax\n    movl    16(%rsp), %ecx\n    movq    %rax, 8(%r14)\n    movl    %ecx, 16(%r14)\n    addq    $40, %rsp\n    popq    %rbx\n    popq    %r14\n    retq\n.Lfunc_end1:\n    .size   _ZN8fpinrust5tests13xor_closure_b17h4bdd5e59e5c19a55E, .Lfunc_end1-_ZN8fpinrust5tests13xor_closure_b17h4bdd5e59e5c19a55E\n    .cfi_endproc\n\n    .section    .rodata.cst16,\"aM\",@progbits,16\n    .p2align    4\n.LCPI2_0:\n    .long   0\n    .long   1\n    .long   2\n    .long   3\n.LCPI2_1:\n    .long   4\n    .long   4\n    .long   4\n    .long   4\n.LCPI2_2:\n    .long   8\n    .long   8\n    .long   8\n    .long   8\n.LCPI2_3:\n    .long   12\n    .long   12\n    .long   12\n    .long   12\n.LCPI2_4:\n    .long   16\n    .long   16\n    .long   16\n    .long   16\n.LCPI2_5:\n    .long   20\n    .long   20\n    .long   20\n    .long   20\n.LCPI2_6:\n    .long   24\n    .long   24\n    .long   24\n    .long   24\n.LCPI2_7:\n    .long   28\n    .long   28\n    .long   28\n    .long   28\n.LCPI2_8:\n    .long   32\n    .long   32\n    .long   32\n    .long   32\n    .section    .text._ZN8fpinrust5tests13xor_pointer_a17hca6c00df2b597ce7E,\"ax\",@progbits\n    .globl  _ZN8fpinrust5tests13xor_pointer_a17hca6c00df2b597ce7E\n    .p2align    4, 0x90\n    .type   _ZN8fpinrust5tests13xor_pointer_a17hca6c00df2b597ce7E,@function\n_ZN8fpinrust5tests13xor_pointer_a17hca6c00df2b597ce7E:\n    .cfi_startproc\n    pushq   %r14\n.Ltmp10:\n    .cfi_def_cfa_offset 16\n    pushq   %rbx\n.Ltmp11:\n    .cfi_def_cfa_offset 24\n    subq    $40, %rsp\n.Ltmp12:\n    .cfi_def_cfa_offset 64\n.Ltmp13:\n    .cfi_offset %rbx, -24\n.Ltmp14:\n    .cfi_offset %r14, -16\n    movq    %rdi, %r14\n    leaq    24(%rsp), %rdi\n    callq   _ZN3std4time7Instant3now17h37bccd496c61083dE@PLT\n    movq    (%r14), %r9\n    testq   %r9, %r9\n    je  .LBB2_15\n    xorl    %ecx, %ecx\n    leaq    8(%rsp), %r8\n    movdqa  .LCPI2_0(%rip), %xmm8\n    movdqa  .LCPI2_1(%rip), %xmm15\n    movdqa  .LCPI2_2(%rip), %xmm2\n    movdqa  .LCPI2_3(%rip), %xmm9\n    movdqa  .LCPI2_4(%rip), %xmm10\n    movdqa  .LCPI2_5(%rip), %xmm11\n    movdqa  .LCPI2_6(%rip), %xmm12\n    movdqa  .LCPI2_7(%rip), %xmm13\n    movdqa  .LCPI2_8(%rip), %xmm14\n    .p2align    4, 0x90\n.LBB2_2:\n    incq    %rcx\n    movl    $1000, 8(%rsp)\n    #APP\n    #NO_APP\n    movl    8(%rsp), %esi\n    testl   %esi, %esi\n    movl    $0, %edx\n    jle .LBB2_14\n    xorl    %edx, %edx\n    cmpl    $8, %esi\n    jae .LBB2_5\n    xorl    %edi, %edi\n    jmp .LBB2_13\n    .p2align    4, 0x90\n.LBB2_5:\n    movl    %esi, %eax\n    andl    $-8, %eax\n    movl    $0, %edi\n    je  .LBB2_13\n    leal    -8(%rax), %edx\n    movl    %edx, %edi\n    shrl    $3, %edi\n    leal    1(%rdi), %ebx\n    andl    $3, %ebx\n    pxor    %xmm3, %xmm3\n    cmpl    $24, %edx\n    pxor    %xmm4, %xmm4\n    movdqa  %xmm8, %xmm5\n    jb  .LBB2_9\n    leal    -1(%rbx), %edx\n    subl    %edi, %edx\n    pxor    %xmm3, %xmm3\n    pxor    %xmm4, %xmm4\n    movdqa  %xmm8, %xmm5\n    .p2align    4, 0x90\n.LBB2_8:\n    movdqa  %xmm5, %xmm6\n    paddd   %xmm15, %xmm6\n    movdqa  %xmm5, %xmm7\n    paddd   %xmm2, %xmm7\n    pxor    %xmm5, %xmm3\n    pxor    %xmm4, %xmm6\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm9, %xmm4\n    movdqa  %xmm5, %xmm0\n    paddd   %xmm10, %xmm0\n    pxor    %xmm7, %xmm3\n    movdqa  %xmm5, %xmm7\n    paddd   %xmm11, %xmm7\n    movdqa  %xmm5, %xmm1\n    paddd   %xmm12, %xmm1\n    pxor    %xmm4, %xmm7\n    pxor    %xmm6, %xmm7\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm13, %xmm4\n    paddd   %xmm14, %xmm5\n    pxor    %xmm0, %xmm1\n    pxor    %xmm1, %xmm3\n    pxor    %xmm7, %xmm4\n    addl    $4, %edx\n    jne .LBB2_8\n.LBB2_9:\n    testl   %ebx, %ebx\n    je  .LBB2_12\n    negl    %ebx\n    .p2align    4, 0x90\n.LBB2_11:\n    movdqa  %xmm5, %xmm0\n    pxor    %xmm5, %xmm3\n    paddd   %xmm15, %xmm5\n    paddd   %xmm2, %xmm0\n    pxor    %xmm5, %xmm4\n    incl    %ebx\n    movdqa  %xmm0, %xmm5\n    jne .LBB2_11\n.LBB2_12:\n    pxor    %xmm4, %xmm3\n    pshufd  $78, %xmm3, %xmm0\n    pxor    %xmm3, %xmm0\n    pshufd  $229, %xmm0, %xmm1\n    pxor    %xmm0, %xmm1\n    movd    %xmm1, %edx\n    cmpl    %eax, %esi\n    movl    %eax, %edi\n    je  .LBB2_14\n    .p2align    4, 0x90\n.LBB2_13:\n    xorl    %edi, %edx\n    leal    1(%rdi), %eax\n    cmpl    %eax, %esi\n    movl    %eax, %edi\n    jne .LBB2_13\n.LBB2_14:\n    movl    %edx, 8(%rsp)\n    #APP\n    #NO_APP\n    cmpq    %r9, %rcx\n    jne .LBB2_2\n.LBB2_15:\n    leaq    8(%rsp), %rdi\n    leaq    24(%rsp), %rsi\n    callq   _ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE@PLT\n    movq    8(%rsp), %rax\n    movl    16(%rsp), %ecx\n    movq    %rax, 8(%r14)\n    movl    %ecx, 16(%r14)\n    addq    $40, %rsp\n    popq    %rbx\n    popq    %r14\n    retq\n.Lfunc_end2:\n    .size   _ZN8fpinrust5tests13xor_pointer_a17hca6c00df2b597ce7E, .Lfunc_end2-_ZN8fpinrust5tests13xor_pointer_a17hca6c00df2b597ce7E\n    .cfi_endproc\n\n    .section    .text._ZN8fpinrust5tests13xor_pointer_b17h4ef66678d6655ef4E,\"ax\",@progbits\n    .globl  _ZN8fpinrust5tests13xor_pointer_b17h4ef66678d6655ef4E\n    .p2align    4, 0x90\n    .type   _ZN8fpinrust5tests13xor_pointer_b17h4ef66678d6655ef4E,@function\n_ZN8fpinrust5tests13xor_pointer_b17h4ef66678d6655ef4E:\n    .cfi_startproc\n    pushq   %rbx\n.Ltmp15:\n    .cfi_def_cfa_offset 16\n    subq    $32, %rsp\n.Ltmp16:\n    .cfi_def_cfa_offset 48\n.Ltmp17:\n    .cfi_offset %rbx, -16\n    movq    %rdi, %rbx\n    leaq    16(%rsp), %rdi\n    callq   _ZN3std4time7Instant3now17h37bccd496c61083dE@PLT\n    movq    (%rbx), %rax\n    testq   %rax, %rax\n    je  .LBB3_3\n    leaq    (%rsp), %rcx\n    .p2align    4, 0x90\n.LBB3_2:\n    movl    $1000, (%rsp)\n    #APP\n    #NO_APP\n    #APP\n    #NO_APP\n    decq    %rax\n    jne .LBB3_2\n.LBB3_3:\n    leaq    (%rsp), %rdi\n    leaq    16(%rsp), %rsi\n    callq   _ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE@PLT\n    movq    (%rsp), %rax\n    movl    8(%rsp), %ecx\n    movq    %rax, 8(%rbx)\n    movl    %ecx, 16(%rbx)\n    addq    $32, %rsp\n    popq    %rbx\n    retq\n.Lfunc_end3:\n    .size   _ZN8fpinrust5tests13xor_pointer_b17h4ef66678d6655ef4E, .Lfunc_end3-_ZN8fpinrust5tests13xor_pointer_b17h4ef66678d6655ef4E\n    .cfi_endproc\n\n    .section    .rodata.cst16,\"aM\",@progbits,16\n    .p2align    4\n.LCPI4_0:\n    .long   0\n    .long   1\n    .long   2\n    .long   3\n.LCPI4_1:\n    .long   4\n    .long   4\n    .long   4\n    .long   4\n.LCPI4_2:\n    .long   8\n    .long   8\n    .long   8\n    .long   8\n.LCPI4_3:\n    .long   12\n    .long   12\n    .long   12\n    .long   12\n.LCPI4_4:\n    .long   16\n    .long   16\n    .long   16\n    .long   16\n.LCPI4_5:\n    .long   20\n    .long   20\n    .long   20\n    .long   20\n.LCPI4_6:\n    .long   24\n    .long   24\n    .long   24\n    .long   24\n.LCPI4_7:\n    .long   28\n    .long   28\n    .long   28\n    .long   28\n.LCPI4_8:\n    .long   32\n    .long   32\n    .long   32\n    .long   32\n.LCPI4_9:\n    .long   36\n    .long   36\n    .long   36\n    .long   36\n.LCPI4_10:\n    .long   40\n    .long   40\n    .long   40\n    .long   40\n    .section    .text._ZN8fpinrust5tests13xor_black_box17h8af7e6f80fe83dc8E,\"ax\",@progbits\n    .globl  _ZN8fpinrust5tests13xor_black_box17h8af7e6f80fe83dc8E\n    .p2align    4, 0x90\n    .type   _ZN8fpinrust5tests13xor_black_box17h8af7e6f80fe83dc8E,@function\n_ZN8fpinrust5tests13xor_black_box17h8af7e6f80fe83dc8E:\n    .cfi_startproc\n    pushq   %rbx\n.Ltmp18:\n    .cfi_def_cfa_offset 16\n    subq    $32, %rsp\n.Ltmp19:\n    .cfi_def_cfa_offset 48\n.Ltmp20:\n    .cfi_offset %rbx, -16\n    movq    %rdi, %rbx\n    leaq    16(%rsp), %rdi\n    callq   _ZN3std4time7Instant3now17h37bccd496c61083dE@PLT\n    movq    (%rbx), %rax\n    testq   %rax, %rax\n    je  .LBB4_5\n    xorl    %ecx, %ecx\n    movdqa  .LCPI4_1(%rip), %xmm9\n    movdqa  .LCPI4_2(%rip), %xmm10\n    movdqa  .LCPI4_3(%rip), %xmm11\n    movdqa  .LCPI4_4(%rip), %xmm12\n    movdqa  .LCPI4_5(%rip), %xmm13\n    movdqa  .LCPI4_6(%rip), %xmm14\n    movdqa  .LCPI4_7(%rip), %xmm15\n    movdqa  .LCPI4_8(%rip), %xmm0\n    movdqa  .LCPI4_9(%rip), %xmm1\n    movdqa  .LCPI4_10(%rip), %xmm2\n    leaq    (%rsp), %rdx\n    .p2align    4, 0x90\n.LBB4_2:\n    pxor    %xmm3, %xmm3\n    movl    $1000, %esi\n    pxor    %xmm4, %xmm4\n    movdqa  .LCPI4_0(%rip), %xmm5\n    .p2align    4, 0x90\n.LBB4_3:\n    movdqa  %xmm5, %xmm6\n    paddd   %xmm9, %xmm6\n    movdqa  %xmm5, %xmm7\n    paddd   %xmm10, %xmm7\n    pxor    %xmm5, %xmm3\n    pxor    %xmm4, %xmm6\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm11, %xmm4\n    pxor    %xmm7, %xmm3\n    movdqa  %xmm5, %xmm7\n    paddd   %xmm13, %xmm7\n    pxor    %xmm4, %xmm7\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm12, %xmm4\n    pxor    %xmm6, %xmm7\n    movdqa  %xmm5, %xmm6\n    paddd   %xmm14, %xmm6\n    pxor    %xmm4, %xmm6\n    movdqa  %xmm5, %xmm8\n    paddd   %xmm15, %xmm8\n    pxor    %xmm6, %xmm3\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm0, %xmm4\n    pxor    %xmm4, %xmm3\n    movdqa  %xmm5, %xmm4\n    paddd   %xmm1, %xmm4\n    pxor    %xmm8, %xmm4\n    pxor    %xmm7, %xmm4\n    paddd   %xmm2, %xmm5\n    addl    $-40, %esi\n    jne .LBB4_3\n    pxor    %xmm3, %xmm4\n    pshufd  $78, %xmm4, %xmm3\n    pxor    %xmm4, %xmm3\n    pshufd  $229, %xmm3, %xmm4\n    pxor    %xmm3, %xmm4\n    incq    %rcx\n    movd    %xmm4, (%rsp)\n    #APP\n    #NO_APP\n    #APP\n    #NO_APP\n    cmpq    %rax, %rcx\n    jne .LBB4_2\n.LBB4_5:\n    leaq    (%rsp), %rdi\n    leaq    16(%rsp), %rsi\n    callq   _ZN3std4time7Instant7elapsed17h0b6076720ddfcc2bE@PLT\n    movq    (%rsp), %rax\n    movl    8(%rsp), %ecx\n    movq    %rax, 8(%rbx)\n    movl    %ecx, 16(%rbx)\n    addq    $32, %rsp\n    popq    %rbx\n    retq\n.Lfunc_end4:\n    .size   _ZN8fpinrust5tests13xor_black_box17h8af7e6f80fe83dc8E, .Lfunc_end4-_ZN8fpinrust5tests13xor_black_box17h8af7e6f80fe83dc8E\n    .cfi_endproc\n\n\n    .section    \".note.GNU-stack\",\"\",@progbits\n</code></pre>\n\n<p>Looking at the assembly, <code>xor_closure_a</code>, <code>xor_pointer_a</code> and <code>xor_black_box</code> which all have relatively the same performance, evaluate to similar assembly code. Which is, by the way, a lot more instructions than the amount of ASM for poor <code>xor_closure_b</code>.</p>\n\n<p>This is where my research ends. I would be glad if someone explains, why this blanket of assembly produced by <code>xor_black_box</code> evaluates faster than <code>xor_closure_b</code>. Or put it differently, why the version that should be optimized away by the compiler runs notably slower, and which benchmark variant I should trust?</p>\n\n<h2>Versions</h2>\n\n<pre><code>rustc --version\nrustc 1.13.0-nightly (378195665 2016-09-08)\n\ncargo --version\ncargo 0.13.0-nightly (afaffa1 2016-09-06)\n</code></pre>\n\n<h2>Update</h2>\n\n<p>@Francis Gagn\u00e9 did a fantastic job to investigate the issue in his answer. The steps that took me to reproduce his results are listed below.</p>\n\n<p>Compile benchmarks and emit assembly:</p>\n\n<pre><code>cargo rustc --release -- --test --emit asm\n</code></pre>\n\n<p>Run produced executable to verify previous behavior:</p>\n\n<pre><code>./target/release/deps/xor --bench\n\nrunning 2 tests\ntest tests::xor_closure_b ... bench:         925 ns/iter (+/- 9)\ntest tests::xor_pointer_b ... bench:           0 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n</code></pre>\n\n<p>Compile patched assembly output <code>./target/release/deps/xor.s</code> </p>\n\n<pre><code>export RUSTLIB=/path/to/lib/rustlib\ngcc target/release/deps/xor.s $RUSTLIB/x86_64-unknown-linux-gnu/lib/*.rlib $RUSTLIB/x86_64-unknown-linux-gnu/lib/*.so -pthread -lpthread -lm -ldl\n</code></pre>\n\n<p>Run updated benchmarks:</p>\n\n<pre><code>./a.out --bench\n\nrunning 2 tests\ntest tests::xor_closure_b ... bench:           1 ns/iter (+/- 0)\ntest tests::xor_pointer_b ... bench:           0 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1473621394, "post_id": 39439582, "comment_id": 66201881, "body": "You are likely getting downvotes because it&#39;s expected to show that <a href=\"http://meta.stackoverflow.com/questions/261592/how-much-research-effort-is-expected-of-stack-overflow-users/261593#261593\">you&#39;ve made some effort</a> to solve your problem <i>before</i> asking. As it is currently, your question looks <a href=\"http://odesk.ro/wp-content/uploads/2013/10/Quotes31.jpg\" rel=\"nofollow noreferrer\">like this</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473621559, "post_id": 39439582, "comment_id": 66201942, "body": "Related: <a href=\"http://stackoverflow.com/questions/19507730/how-do-i-parse-a-string-to-a-list-of-floats-using-functional-style\">How do I parse a string to a list of floats using functional style?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1473621875, "post_id": 39439582, "comment_id": 66202025, "body": "Related: <a href=\"http://stackoverflow.com/q/35860264/155423\">What&#39;s the easiest way to read several ints from stdin if it&#39;s ok to fail?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": false, "score": 8, "last_activity_date": 1473621585, "last_edit_date": 1473621585, "creation_date": 1473620941, "answer_id": 39439682, "question_id": 39439582, "link": "https://stackoverflow.com/questions/39439582/how-do-i-read-multiple-integers-from-a-single-line-of-stdin/39439682#39439682", "title": "How do I read multiple integers from a single line of stdin?", "body": "<p>The best way, as far as I know, is just to split the input line and then map those to integers, like this:</p>\n\n<pre><code>use std::io;\n\nlet mut line = String::new();\nio::stdin().read_line(&amp;mut line).expect(\"Failed to read line\");\n\nlet inputs: Vec&lt;u32&gt; = line.split(\" \")\n    .map(|x| x.parse().expect(\"Not an integer!\"))\n    .collect();\n\n// inputs is a Vec&lt;u32&gt; of the inputs.\n</code></pre>\n\n<p>Be aware that this will <code>panic!</code> if the input is invalid; you should instead <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\" rel=\"noreferrer\">handle the result values properly</a> if you wish to avoid this.</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 4, "last_activity_date": 1473622808, "creation_date": 1473622808, "answer_id": 39439947, "question_id": 39439582, "link": "https://stackoverflow.com/questions/39439582/how-do-i-read-multiple-integers-from-a-single-line-of-stdin/39439947#39439947", "title": "How do I read multiple integers from a single line of stdin?", "body": "<p>You can use the <a href=\"https://crates.io/crates/scan-rules/\" rel=\"nofollow\">scan-rules</a> crate (<a href=\"https://danielkeep.github.io/rust-scan-rules/doc/scan_rules/index.html\" rel=\"nofollow\">docs</a>), which makes this kind of scanning easy (and has features to make it powerful too).</p>\n\n<p>The following example code uses <code>scan-rules</code> version 0.1.3 (file can be ran directly with cargo-script).</p>\n\n<p>The example program accepts two integers separated by whitespace, on the same line.</p>\n\n<pre><code>// cargo-deps: scan-rules=\"^0.1\"\n\n#[macro_use]\nextern crate scan_rules;\n\nfn main() {\n    let result = try_readln! {\n        (let n: u32, let m: u32) =&gt; (n, m)\n    };\n    match result {\n        Ok((n, m)) =&gt; println!(\"I read n={}, m={}\", n, m),\n        Err(e) =&gt; println!(\"Failed to parse input: {}\", e),\n    }\n}\n</code></pre>\n\n<p>Test runs:</p>\n\n<pre><code>4  5\nI read n=4, m=5\n\n5 a\nFailed to parse input: scan error: syntax error: expected integer, at offset: 2\n</code></pre>\n"}], "owner": {"reputation": 2484, "user_id": 105634, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/ab2425ae0425be8faaf052cce737b243?s=128&d=identicon&r=PG", "display_name": "Jasiu", "link": "https://stackoverflow.com/users/105634/jasiu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2244, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1473622808, "creation_date": 1473620373, "last_edit_date": 1473620452, "question_id": 39439582, "link": "https://stackoverflow.com/questions/39439582/how-do-i-read-multiple-integers-from-a-single-line-of-stdin", "title": "How do I read multiple integers from a single line of stdin?", "body": "<p>To learn Rust, I'm looking at things like the HackerRank 30 days challenge, Project Euler, and other programming contests. My first obstacle is to read multiple integers from a single line of stdin.</p>\n\n<p>In C++ I can conveniently say:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>cin &gt;&gt; n &gt;&gt; m;\n</code></pre>\n\n<p>How do I do this idiomatically in Rust?</p>\n"}, {"tags": ["rust", "infinite-loop"], "comments": [{"owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "edited": false, "score": 1, "creation_date": 1473842784, "post_id": 39439088, "comment_id": 66290405, "body": "Why downvotes? I believe this is legitimate question, and the answer helped me to undestand the concept."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 13, "last_activity_date": 1473617489, "creation_date": 1473617489, "answer_id": 39439160, "question_id": 39439088, "link": "https://stackoverflow.com/questions/39439088/usability-of-infinite-loop-in-rust/39439160#39439160", "title": "Usability of infinite loop in Rust", "body": "<p><code>loop</code> is often used for loops where we want to break in the middle of the loop's body. That is, you want to do something before testing any condition, then exit the loop if some condition is met, then do something else that must only be done after testing the condition, then repeat. In other languages, this is often rendered as <code>while (true)</code> or <code>for (;;)</code>. This situation is common enough that Rust decided to embrace this pattern by reserving a keyword to declare loops that have no entry condition.</p>\n\n<p>Also, Rust doesn't have the equivalent of C's <code>do..while</code> loop, which tests a condition at the end of an iteration, but not before the first iteration. In Rust, you'd emulate it with a <code>loop</code> and an <code>if condition { break }</code> statement at the end of the loop. <code>do..while</code> loops are relatively rare in practice, rarer than \"break in the middle\" loops in my experience.</p>\n"}, {"comments": [{"owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "edited": false, "score": 0, "creation_date": 1473618146, "post_id": 39439230, "comment_id": 66200934, "body": "You mean infinite loop is running during a gameplay whole time? How is it, it does not causes program crash? If i would do this in Python or Javascript I would suffer program/website crash."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "edited": false, "score": 1, "creation_date": 1473618305, "post_id": 39439230, "comment_id": 66200974, "body": "It doesn&#39;t, because every turn user input is expected; the CPU is not constantly performing calculations - they are done only after some user feedback is received."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1473618746, "post_id": 39439230, "comment_id": 66201098, "body": "I would actually expect some <code>while let Some(xx) = user.input() { game.turn(); }</code> here, because I expect that at some point the user will want to quit..."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1473618962, "post_id": 39439230, "comment_id": 66201156, "body": "That is fine when the break conditions are simple. In my case I handled input as <code>Result</code>s (and didn&#39;t want to exit on an <code>Error</code>), had an additional piece of code to evaluate the game status at the beginning of every turn and allowed an exit right after input."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 7, "last_activity_date": 1473618151, "last_edit_date": 1473618151, "creation_date": 1473617910, "answer_id": 39439230, "question_id": 39439088, "link": "https://stackoverflow.com/questions/39439088/usability-of-infinite-loop-in-rust/39439230#39439230", "title": "Usability of infinite loop in Rust", "body": "<p>I often use <code>loop</code> in programs where I expect constant user input, e.g. in command-line games:</p>\n\n<pre><code>fn play() {\n    let mut game = Game::new();\n\n    loop { game.turn() }\n}\n</code></pre>\n\n<p>It is also useful due to possible input errors - during each turn they can be printed to the player and the game can be continued as long as the player wants until a victory, failure or resignation <code>break</code>s the loop.</p>\n"}], "owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3094, "favorite_count": 2, "accepted_answer_id": 39439160, "answer_count": 2, "score": 9, "last_activity_date": 1473856687, "creation_date": 1473616998, "last_edit_date": 1473856687, "question_id": 39439088, "link": "https://stackoverflow.com/questions/39439088/usability-of-infinite-loop-in-rust", "title": "Usability of infinite loop in Rust", "body": "<p>Rust contains <code>loop</code>, which is specially designed for infinite looping:</p>\n\n<blockquote>\n  <p>Using the keyword <code>loop</code>, <code>Rust</code> provides a way to loop indefinitely until\n  some terminating statement is reached (like program exit)</p>\n</blockquote>\n\n<p>I can't think of a single scenario when I would like my loops to run forever. Are there any scenarios when an infinite loop can be useful?</p>\n"}, {"tags": ["random", "rust", "string-formatting"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1473605040, "post_id": 39437164, "comment_id": 66196813, "body": "Related: <a href=\"http://stackoverflow.com/q/32572486/155423\">How can I use a dynamic format string with the format! macro?</a>."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 2, "creation_date": 1473605143, "post_id": 39437164, "comment_id": 66196853, "body": "Have you considered randomly generating a number and using a <code>match</code> to pick a string to format? It would avoid generating all the strings then throwing them away."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473606634, "post_id": 39437327, "comment_id": 66197319, "body": "My maintainability concern would be the split of the number of choices in the <code>match</code> and the number in the <code>gen_range</code>."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473607932, "post_id": 39437327, "comment_id": 66197747, "body": "Yeah, that&#39;s annoying but difficult to avoid. I tried to work around that by setting the upper bound to <code>max_choices</code> and replacing the irrefutable pattern with <code>n if n &gt;= max_choices</code>, but the compiler isn&#39;t able to tell that it&#39;s exhaustive (<a href=\"http://play.integer32.com/?gist=de8cf938ebc0bb5571bc3b406324627a\" rel=\"nofollow noreferrer\">example of what I mean</a>)."}], "tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": false, "score": 4, "last_activity_date": 1473605940, "last_edit_date": 1473605940, "creation_date": 1473605594, "answer_id": 39437327, "question_id": 39437164, "link": "https://stackoverflow.com/questions/39437164/how-to-randomly-select-a-format-string/39437327#39437327", "title": "How to randomly select a format string", "body": "<p>My suggestion would be to use a match to avoid unnecessary computation and keep the code as compact as possible:</p>\n\n<pre><code>use rand::{thread_rng, Rng};\n\nlet mut rng = thread_rng();\nlet code: u8 = rng.gen_range(0, 5);\nlet time = 5;\nlet response = match code {\n    0 =&gt; format!(\"Running out of time! {} seconds left\", time),\n    1 =&gt; format!(\"Quick! {} seconds left\", time),\n    2 =&gt; format!(\"Hurry, there are {} seconds left\", time),\n    3 =&gt; format!(\"Faster! {} seconds left\", time),\n    4 =&gt; format!(\"Only {} seconds left\", time),\n    _ =&gt; unreachable!()\n};\n</code></pre>\n\n<p>(<a href=\"http://play.integer32.com/?gist=69407d4b1d8b3a7acb220d71edd89378\" rel=\"nofollow\">Playground link</a>)</p>\n\n<p>Admittedly, it's a little bit ugly to match numbers literally, but it's probably the shortest you can get it.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1473607303, "last_edit_date": 1473607303, "creation_date": 1473606581, "answer_id": 39437500, "question_id": 39437164, "link": "https://stackoverflow.com/questions/39437164/how-to-randomly-select-a-format-string/39437500#39437500", "title": "How to randomly select a format string", "body": "<p>Creating multiple strings is straight-forward to avoid by using closures (or function pointers):</p>\n\n<pre><code>extern crate rand;\n\nuse rand::Rng;\n\npub fn h(x: usize) -&gt; String {\n    let messages: &amp;[&amp;Fn() -&gt; String] = &amp;[\n        &amp;|| format!(\"{} minutes remain.\", x),\n        &amp;|| format!(\"Hurry up; only {} minutes left to finish.\", x),\n        &amp;|| format!(\"Haste advisable; time ends in {}.\", x),\n    ];\n    let default_message = || format!(\"{}\", x);\n\n    rand::thread_rng().choose(messages).unwrap_or(&amp;&amp;(&amp;default_message as &amp;Fn()-&gt;String))()\n}\n\nfn main() {\n    println!(\"{}\", h(1));\n}\n</code></pre>\n\n<p>Notes:</p>\n\n<ol>\n<li><code>choose</code> instead of <code>sample</code> for one value.</li>\n<li>No need for a <code>Vec</code>; an array should be fine.</li>\n</ol>\n\n<p>That's unlikely to improve the \"beautiful\" aspect. Macros can remove the drudgery:</p>\n\n<pre><code>extern crate rand;\n\nmacro_rules! messages {\n    {$default: expr, $($msg: expr,)*} =&gt; {\n        use rand::Rng;\n\n        let messages: &amp;[&amp;Fn() -&gt; String] = &amp;[\n            $(&amp;|| $msg),*\n        ];\n        let default_message = || $default;\n\n        rand::thread_rng().choose(messages).unwrap_or(&amp;&amp;(&amp;default_message as &amp;Fn() -&gt; String))()\n    }\n}\n\npub fn h(x: usize) -&gt; String {\n    messages! {\n        format!(\"{}\", x),\n        format!(\"{} minutes remain.\", x),\n        format!(\"Hurry up; only {} minutes left to finish.\", x),\n        format!(\"Haste advisable; time ends in {}.\", x),\n    }\n}\n\nfn main() {\n    println!(\"{}\", h(1));\n}\n</code></pre>\n\n<p>Notes:</p>\n\n<ol>\n<li>The macro requires at least one argument; this will be used as the default message. </li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 593, "user_id": 325228, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/c40d55ff150f2967bb57380849f96af4?s=128&d=identicon&r=PG", "display_name": "mmirate", "link": "https://stackoverflow.com/users/325228/mmirate"}, "edited": false, "score": 0, "creation_date": 1473609110, "post_id": 39437527, "comment_id": 66198147, "body": "This shows why I really should look more into Rust&#39;s macro feature soon. Thanks!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1473607751, "last_edit_date": 1473607751, "creation_date": 1473606725, "answer_id": 39437527, "question_id": 39437164, "link": "https://stackoverflow.com/questions/39437164/how-to-randomly-select-a-format-string/39437527#39437527", "title": "How to randomly select a format string", "body": "<p>Rust supports defining functions inside functions. We can build a slice of function pointers, have <code>rand::sample</code> pick one of them and then call the selected function.</p>\n\n<pre><code>extern crate rand;\n\nuse rand::Rng;\n\npub fn h(x: usize) -&gt; String {\n    fn f0(x: usize) -&gt; String {\n        format!(\"{} minutes remain.\", x)\n    }\n\n    fn f1(x: usize) -&gt; String {\n        format!(\"Hurry up; only {} minutes left to finish.\", x)\n    }\n\n    fn f2(x: usize) -&gt; String {\n        format!(\"Haste advisable; time ends in {}.\", x)\n    }\n\n    let formats: &amp;[fn(usize) -&gt; String] = &amp;[f0, f1, f2];\n    (*rand::thread_rng().choose(formats).unwrap())(x)\n}\n</code></pre>\n\n<p>This addresses the \"wasteful\" aspect of your original solution, but not the \"tedious\" aspect. We can reduce the amount of repetition by using a macro. Note that macros defined within a function are local to that function too! This macro is taking advantage from Rust's hygienic macros to define multiple functions named <code>f</code>, so that we don't need to supply a name for each function when using the macro.</p>\n\n<pre><code>extern crate rand;\n\nuse rand::Rng;\n\npub fn h(x: usize) -&gt; String {\n    macro_rules! messages {\n        ($($fmtstr:tt,)*) =&gt; {\n            &amp;[$({\n                fn f(x: usize) -&gt; String {\n                    format!($fmtstr, x)\n                }\n                f\n            }),*]\n        }\n    }\n\n    let formats: &amp;[fn(usize) -&gt; String] = messages!(\n        \"{} minutes remain.\",\n        \"Hurry up; only {} minutes left to finish.\",\n        \"Haste advisable; time ends in {}.\",\n    );\n    (*rand::thread_rng().choose(formats).unwrap())(x)\n}\n</code></pre>\n"}], "owner": {"reputation": 593, "user_id": 325228, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/c40d55ff150f2967bb57380849f96af4?s=128&d=identicon&r=PG", "display_name": "mmirate", "link": "https://stackoverflow.com/users/325228/mmirate"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 0, "accepted_answer_id": 39437527, "answer_count": 3, "score": 3, "last_activity_date": 1473607751, "creation_date": 1473604643, "last_edit_date": 1473605433, "question_id": 39437164, "link": "https://stackoverflow.com/questions/39437164/how-to-randomly-select-a-format-string", "title": "How to randomly select a format string", "body": "<p>Sometimes there are many ways for a program to phrase a message containing a dynamic value to its users. For instance:</p>\n\n<ul>\n<li>\"{} minutes remaining.\"</li>\n<li>\"You need to finish in less than {} minutes.\"</li>\n</ul>\n\n<p>Not all of the messages contain the value as a mere prefix or suffix. In a dynamic language, this would've seemed the logical task for string formatting.</p>\n\n<p>For media where repetitiveness is undesirable (e.g. Slack channels) there are so many different phrasings that producing each final <code>String</code> to output using something like:</p>\n\n<pre><code>pub fn h(x: usize) -&gt; String {\n    rand::sample(rand::thread_rng(), vec![\n        format!(\"{} minutes remain.\", x),\n        format!(\"Hurry up; only {} minutes left to finish.\", x),\n        format!(\"Haste advisable; time ends in {}.\", x),\n        /* (insert many more elements here) */\n    ], 1).first().unwrap_or(format!(\"{}\", x))\n}\n</code></pre>\n\n<p>Would be:</p>\n\n<ul>\n<li>Tedious to author, with respect to typing out <code>format!(/*...*/, x)</code> each time.</li>\n<li>Wasteful of memory+clock-cycles as every single possibility is fully-generated before one is selected, discarding the others.</li>\n</ul>\n\n<p>Is there any way to avoid these shortcomings?</p>\n\n<p>Were it not for the compile-time evaluation of format strings, a function returning a randomly-selected <code>&amp;'static str</code> (from a static slice) to pass into <code>format!</code>, would have been the preferred solution.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 12, "last_activity_date": 1473605177, "last_edit_date": 1473605177, "creation_date": 1473601043, "answer_id": 39436671, "question_id": 39436571, "link": "https://stackoverflow.com/questions/39436571/cannot-immediately-decode-an-object-written-to-a-file-with-bincode/39436671#39436671", "title": "Cannot immediately decode an object written to a file with bincode", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.open\"><code>File::open</code></a> opens a file in read-only mode, so writing to it will fail.</p>\n\n<p>To open a file with read and write access, you must use <a href=\"https://doc.rust-lang.org/stable/std/fs/struct.OpenOptions.html\"><code>OpenOptions</code></a>.</p>\n\n<pre><code>use std::fs::OpenOptions;\n\nlet file = OpenOptions::new()\n            .read(true)\n            .write(true)\n            .create(true)\n            .open(\"term\");\n</code></pre>\n\n<blockquote>\n  <p>Great, but now I get a new exception:</p>\n  \n  <p><code>thread 'persistent_log::doc::test::test_sync' panicked at 'called Result::unwrap() on an Err value: IoError(Error { repr: Custom(Custom { kind: UnexpectedEof, error: StringError(\"failed to fill whole buffer\") }) })', ../src/libcore/result.rs:783</code></p>\n</blockquote>\n\n<p>After you've written bytes to the file, the file's cursor will be located at the end of the file. Before you try read from the file, you'll have to <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Seek.html\">seek</a> back to the start of the file, otherwise you'll get this error.</p>\n\n<pre><code>file.seek(SeekFrom::Start(0));\n</code></pre>\n"}], "owner": {"reputation": 175, "user_id": 4776496, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c319ce7e959e835122dd719320005556?s=128&d=identicon&r=PG&f=1", "display_name": "kper", "link": "https://stackoverflow.com/users/4776496/kper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1222, "favorite_count": 0, "accepted_answer_id": 39436671, "answer_count": 1, "score": 2, "last_activity_date": 1473605177, "creation_date": 1473600255, "last_edit_date": 1473602452, "question_id": 39436571, "link": "https://stackoverflow.com/questions/39436571/cannot-immediately-decode-an-object-written-to-a-file-with-bincode", "title": "Cannot immediately decode an object written to a file with bincode", "body": "<p>I am getting this exception when I try to run my test:</p>\n\n<pre><code>thread 'persistent_log::doc::test::test_sync' panicked at 'called `Result::unwrap()` on an `Err` value: IoError(Error { repr: Os { code: 9, message: \"Bad file descriptor\" } })', ../src/libcore/result.rs:783\n</code></pre>\n\n<p>Term:</p>\n\n<pre><code>#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord,RustcEncodable,RustcDecodable)]\npub struct Term(u64);\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>fn create() {\n    File::create(&amp;\"term\");\n}\n\n#[test]\nfn test_sync() {\n    create();\n\n    let mut f = File::open(&amp;\"term\").unwrap();\n\n    let term = Term(10);\n\n    encode_into(&amp;term, &amp;mut f, SizeLimit::Infinite).unwrap();\n\n    let decoded_term: Term = decode_from(&amp;mut f, SizeLimit::Infinite).unwrap();\n\n    assert_eq!(decoded_term, term);\n}\n</code></pre>\n\n<p>I want to write the object <code>term</code> into a file and afterwards read it in.</p>\n"}, {"tags": ["string", "rust", "variable-declaration"], "comments": [{"owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "edited": false, "score": 0, "creation_date": 1473599904, "post_id": 39433930, "comment_id": 66195384, "body": "Why downvotes? Answers to these questions helped me understanding Rust right away."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1473600267, "post_id": 39433930, "comment_id": 66195487, "body": "I don&#39;t know why this is getting downvoted. I think it&#39;s a good question."}, {"owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1473600306, "post_id": 39433930, "comment_id": 66195499, "body": "Especialy, I came from high level language background. So Rust is pretty tought for me."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 5, "last_activity_date": 1473580857, "creation_date": 1473580857, "answer_id": 39434029, "question_id": 39433930, "link": "https://stackoverflow.com/questions/39433930/declaring-a-variable-of-type-string-does-not-work/39434029#39434029", "title": "Declaring a variable of type `String` does not work", "body": "<p>It's because the second <code>mystring</code> is not a <code>String</code>, but a <code>&amp;'static str</code>, i.e. a statically allocated string literal.</p>\n\n<p>In order to create a <code>String</code> in this manner (from a literal), you need to write <code>let mystring = String::from(\"Hello\")</code> (<a href=\"https://doc.rust-lang.org/std/string/struct.String.html#examples\" rel=\"noreferrer\">Rust docs</a>).</p>\n"}, {"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 9, "last_activity_date": 1506187653, "last_edit_date": 1506187653, "creation_date": 1473581055, "answer_id": 39434054, "question_id": 39433930, "link": "https://stackoverflow.com/questions/39433930/declaring-a-variable-of-type-string-does-not-work/39434054#39434054", "title": "Declaring a variable of type `String` does not work", "body": "<p>Because a <code>&amp;str</code> is not a <code>String</code>.</p>\n\n<p>There are a few ways you can make that string literal a <code>String</code> instance though:</p>\n\n<pre><code>let mystring = String::from(\"Hello\");\n// ..or..\nlet mystring: String = \"Hello\".into();\n// ..or..\nlet mystring: String = \"Hello\".to_string();\n</code></pre>\n"}], "owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 455, "favorite_count": 0, "closed_date": 1473602221, "accepted_answer_id": 39434054, "answer_count": 2, "score": 4, "last_activity_date": 1506187653, "creation_date": 1473579891, "last_edit_date": 1473602287, "question_id": 39433930, "link": "https://stackoverflow.com/questions/39433930/declaring-a-variable-of-type-string-does-not-work", "closed_reason": "Duplicate", "title": "Declaring a variable of type `String` does not work", "body": "<p>I just read <a href=\"https://doc.rust-lang.org/book/strings.html\" rel=\"nofollow\">the Rust documentation about string data types</a>, which states:</p>\n\n<blockquote>\n  <p>Rust has more than only <code>&amp;str</code>s though. A <code>String</code> is a heap-allocated\n  string. This string is growable, and is also guaranteed to be UTF-8.</p>\n</blockquote>\n\n<p><strong>Trouble</strong>: I want to explicitly declare variable type like follows:</p>\n\n<pre><code>let mystring : &amp;str = \"Hello\"; // this works\nlet mystring : String = \"Hello\"; // this does not. Why?\n</code></pre>\n"}, {"tags": ["string", "file", "io", "rust"], "comments": [{"owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473558879, "post_id": 39431998, "comment_id": 66187464, "body": "@Shepmaster This question is mostly about writing, but the linked question and its answers despite its title are about reading, so I&#39;m not sure whether it should be marked as duplicate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "edited": false, "score": 0, "creation_date": 1473559030, "post_id": 39431998, "comment_id": 66187488, "body": "@krdln indeed. I updated the answer there to include writing (as it should always have due to the name)"}, {"owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "edited": false, "score": 1, "creation_date": 1473559127, "post_id": 39431998, "comment_id": 66187511, "body": "@kosinix The best way to write formatted text to a file (or anything which is <code>Write</code>) would be to use the <a href=\"https://static.rust-lang.org/doc/master/std/macro.write.html\" rel=\"nofollow noreferrer\"><code>write!</code> and <code>writeln!</code> macros</a>. Make sure you wrap the file in a <code>BufWriter</code> though if you&#39;re making a lot of small writes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473559650, "post_id": 39431998, "comment_id": 66187589, "body": "Another <a href=\"http://stackoverflow.com/q/32472495/155423\">question about the <code>write!</code> / <code>writeln!</code> macros</a>."}, {"owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473561049, "post_id": 39431998, "comment_id": 66187816, "body": "@Shepmaster this is a different question from the one you linked to. Please remove the duplicate tag. Somebody has edited the title to better convey the question. Also, notice that your answer is writing string that is already in &amp;[u8] as oppose to std::string::String."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473562038, "post_id": 39431998, "comment_id": 66187931, "body": "@kosinix <a href=\"http://stackoverflow.com/posts/39431998/revisions\">I edited the title</a> :-) Please double check the linked duplicate; notice that it specifically says <i>You can convert a <code>String</code> / <code>&amp;str</code> to bytes with <code>as_bytes</code></i>. That&#39;s the answer you need."}, {"owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "reply_to_user": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "edited": false, "score": 0, "creation_date": 1473562173, "post_id": 39431998, "comment_id": 66187945, "body": "@krdln - if you could turn it into an answer with code and just a bit of explanation i&#39;d be glad to accept it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473562771, "post_id": 39431998, "comment_id": 66188005, "body": "I don&#39;t believe that new answers can be added to a closed question. Others that disagree with my opinion that this is a duplicate can vote to reopen it (you are unfortunately just under the <a href=\"http://stackoverflow.com/help/privileges\">250 reputation needed to vote on it yourself</a>)."}, {"owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473564996, "post_id": 39431998, "comment_id": 66188246, "body": "@Shepmaster How can this be an &quot;exact duplicate&quot; question since this is about converting the String type to primitive string? You yourself edited the title to convey that. Your linked answer, while detailed and thorough, does not have emphasis on converting to and from these two types. The two string types are going to be a source of confusion in the future. (PS. You dont have to be a smug about my lowly points. I dont have the habit of channeling points to my answers by marking other questions duplicate.) :-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473565690, "post_id": 39431998, "comment_id": 66188359, "body": "@kosinix it&#39;s an exact duplicate because the code is <i>exactly</i> the same. Call <code>as_bytes</code> on <code>String</code> or <code>&amp;str</code> to pass it to <code>write</code> like the other answer says. I don&#39;t know what you mean by &quot;primitive string&quot; other than <code>&amp;str</code>. I&#39;m sorry that I&#39;ve given you the impression that I am trying to be smug; that was not my intention. Perhaps I should disengage before giving you a worse opinion of myself."}], "owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 80, "favorite_count": 0, "closed_date": 1473558714, "answer_count": 0, "score": 0, "last_activity_date": 1473558415, "creation_date": 1473556589, "last_edit_date": 1473558096, "question_id": 39431998, "link": "https://stackoverflow.com/questions/39431998/how-to-convert-a-string-to-a-u8-in-order-to-write-it-to-a-file", "closed_reason": "Duplicate", "title": "How to convert a String to a &amp;[u8] in order to write it to a file?", "body": "<p>I'm trying to read a binary file in Rust and output the hex values of it on a file. I got most of the code working but got stuck on the \"write\" part:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() {\n    let f = File::open(\"input\");\n    match f {\n        Ok(f) =&gt; {\n            let mut s = String::new();\n            for byte in f.bytes() {\n                s = s + &amp;format!(\"{:02X} \", byte.unwrap());\n            }\n\n            let mut buffer = File::create(\"out.txt\").unwrap();\n            buffer.write(s);\n        },\n        Err(_) =&gt; println!(\"Bad\") // ignoring bindings\n    }\n\n}\n</code></pre>\n\n<p>I am trying to write <code>s</code> of type <code>std::string::String</code> while <code>buffer.write()</code> will only accept a primitive string of type <code>&amp;[u8]</code>. I've been scouring the docs for a while now to no avail so I decided to ask here.</p>\n"}, {"tags": ["inheritance", "struct", "rust", "code-duplication"], "comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473531860, "post_id": 39429218, "comment_id": 66181882, "body": "I found a similar question where an answer talks about composition -&gt; <a href=\"http://stackoverflow.com/questions/32736170/what-is-the-best-way-to-inherit-a-struct-in-rust-1-3\" title=\"what is the best way to inherit a struct in rust 1 3\">stackoverflow.com/questions/32736170/&hellip;</a> ."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1473532858, "post_id": 39429218, "comment_id": 66182189, "body": "Alternatively we could have a <code>struct Renderer&lt;Shape&gt;</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1473533179, "post_id": 39429218, "comment_id": 66182286, "body": "@kennytm I wouldn&#39;t say that&#39;s &quot;alternative&quot; - that <i>is</i> composition!"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1473533784, "post_id": 39429218, "comment_id": 66182450, "body": "@xetra11 Why not just have an <code>enum Shape</code> and a <code>ShapeRenderer</code> with <code>shape: Shape</code>?"}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1473535591, "post_id": 39429218, "comment_id": 66183019, "body": "@ljedrz enums come with runtime overhead, generics do not. I&#39;m not sure if that matters much here, but (without knowing more), this looks to me a perfect place for generics."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1473546267, "post_id": 39429218, "comment_id": 66185421, "body": "@kennytm how does your example exactly work? Would <code>Shape</code> be a struct which holds the <code>canvas</code> and <code>origin</code> fields and rectangle actually the <code>shape</code> field? And declaring <code>struct Rectangle&lt;Shape&gt;</code> would bring in the properties of <code>Shape</code> similar to Java&#39;s <code>Rectangle extends Shape</code> ? I would try it out myself but am not on my dev machine atm."}], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 1, "creation_date": 1473546831, "post_id": 39430272, "comment_id": 66185542, "body": "Actually I was more looking for something that only decrease the code duplication for the fields itself. Like having a struct <code>ShapeRenderer</code> which holds the <code>canvas</code> and the <code>origin</code> field and then one concrete struct called i.e. <code>RectangleRenderer</code> which holds the <code>shape</code> field but also <i>inherits</i> the fields of <code>ShapeRenderer</code> - similar to Java&#39;s inheritance <code>RectangleRenderer extends ShapeRenderer</code>. Traits only give me the option to abstract functions/methods but not fields."}, {"owner": {"reputation": 655, "user_id": 4064661, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/b64710b9285fc7793b9b782252073c29?s=128&d=identicon&r=PG", "display_name": "breeden", "link": "https://stackoverflow.com/users/4064661/breeden"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473558408, "post_id": 39430272, "comment_id": 66187400, "body": "@xetra11 you can use macros to reduce code duplication too <a href=\"https://users.rust-lang.org/t/best-way-to-reuse-partial-trait-implementation/6840/1\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/&hellip;</a>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473575131, "post_id": 39430272, "comment_id": 66189743, "body": "@xetra11 This does reduce duplication. I think you are just used to Java-style inheritance, but it&#39;s a matter of preference; personally I&#39;m very happy Rust doesn&#39;t have it."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1473579758, "post_id": 39430272, "comment_id": 66190589, "body": "Hm okay maybe I&#39;m really way too used to Java. So there is no other way to avoid duplication on non-method structs?"}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 1, "creation_date": 1473619885, "post_id": 39430272, "comment_id": 66201435, "body": "@xetra11 I have added two other methods to the answer."}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 10, "last_activity_date": 1473619865, "last_edit_date": 1473619865, "creation_date": 1473539043, "answer_id": 39430272, "question_id": 39429218, "link": "https://stackoverflow.com/questions/39429218/how-to-avoid-code-duplication-of-different-structs-with-semantically-equal-field/39430272#39430272", "title": "How to avoid code duplication of different structs with semantically equal fields/properties?", "body": "<p>This looks like a perfect case for <a href=\"https://doc.rust-lang.org/book/generics.html\" rel=\"noreferrer\">generics</a>.</p>\n\n<p>You can make a single struct like this:</p>\n\n<pre><code>struct ShapeRenderer&lt;T: Shape&gt; {\n    canvas: Canvas,\n    origin: Point,\n    shape: T,\n}\n</code></pre>\n\n<p>Note that I have bounded the generic type <code>T</code> by a trait <code>Shape</code> (that you would have to create). You can put any bounds here you like (or no bounds at all), but you will be restricted to using members of those traits.</p>\n\n<p>Anything that you want to be able to access in your shapes would need to be exposed by <code>Shape</code>. For example, if you need the center and area, then the trait definition might look like this:</p>\n\n<pre><code>trait Shape {\n    fn center(&amp;self) -&gt; (f64, f64);\n    fn area(&amp;self) -&gt; f64;\n}\n</code></pre>\n\n<p>If that is not enough flexibility, you could also give <code>ShapeRenderer</code> special behavior for only specific shapes. For example:</p>\n\n<pre><code>impl ShapeRenderer&lt;Rectangle&gt; {\n    fn n_sides(&amp;self) -&gt; u32 {\n        4\n    }\n}\n</code></pre>\n\n<p>Note that inside this <code>impl</code>, we have access to all the fields of <code>Rectangle</code>, not just the functions in <code>Shape</code>.</p>\n\n<hr>\n\n<p>Alternatively, you could create a base struct and then include it as a member of your final structs:</p>\n\n<pre><code>struct Renderer {\n    canvas: Canvas,\n    origin: Point,\n}\n\nstruct CircleRenderer {\n    renderer: Renderer,\n    shape: Circle,\n}\n\nstruct RectangleRenderer {\n    renderer: Renderer,\n    shape: Rectangle,\n}\n</code></pre>\n\n<p>This is the closest thing in Rust to standard inheritance.</p>\n\n<hr>\n\n<p>Thirdly, if you only care about code duplication when creating these structs and don't want them to share anything but fields, you could use a macro:</p>\n\n<pre><code>macro_rules! make_renderer {\n    ($name: ty, $shape: ty) =&gt; (\n        struct $name {\n            canvas: Canvas,\n            origin: Point,\n            shape: $shape,\n        }\n    );\n}\n\nmake_renderer!(CircleRenderer, Circle);\nmake_renderer!(RectangleRenderer, Rectangle);\n</code></pre>\n\n<hr>\n\n<p>While the generics example is the most complicated, it is also the most powerful and flexible. It lets you easily have code shared between your structs, while also letting you have code specific to one that gives you access to all its fields.</p>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1689, "favorite_count": 1, "accepted_answer_id": 39430272, "answer_count": 1, "score": 5, "last_activity_date": 1590461252, "creation_date": 1473531743, "last_edit_date": 1473533112, "question_id": 39429218, "link": "https://stackoverflow.com/questions/39429218/how-to-avoid-code-duplication-of-different-structs-with-semantically-equal-field", "title": "How to avoid code duplication of different structs with semantically equal fields/properties?", "body": "<p>Given these two structs:</p>\n\n<pre><code>pub struct RectangleRenderer {\n    canvas: Canvas,\n    origin: Point,\n    shape: Rectangle,\n}\n\npub struct CircleRenderer {\n    canvas: Canvas,\n    center: Point,\n    shape: Circle,\n}\n</code></pre>\n\n<p>As I come from Java, I would extract a base class <code>ShapeRenderer</code> out of those and apply the fields <code>canvas</code> and <code>origin</code> into that while the specific types will keep their field called <code>shape</code>. What's the best practice in Rust for this situation since traits only act similar to interfaces and therefore do not allow properties/fields?</p>\n"}, {"tags": ["singleton", "rust", "raii"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1473520093, "post_id": 39426759, "comment_id": 66178393, "body": "We need a bot to automatically reply to every question with the word &quot;singleton&quot; with &quot;you don&#39;t really want to do that&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473520137, "post_id": 39426759, "comment_id": 66178411, "body": "In addition to the excellent points here, I&#39;d also add multithreading to the list of problematic cases."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 1, "creation_date": 1473523636, "post_id": 39426759, "comment_id": 66179383, "body": "It has it&#39;s place - here&#39;s a simple example in Rust itself: say you need single object to persist across all your tests (which run as separate threads in parallel during <code>cargo test</code>). Maybe it&#39;s simulating a network, writing to a single file after bunch of transformations depending on global parameters which change as tests run and is important for other tests to see the changes. Pattern is too abstract to be simply trashed and even if some should be used rarely, they still have their place. But you do answer my question that it&#39;s not possible - so if i get no others i&#39;ll accept this - thanks"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 1, "creation_date": 1473582902, "post_id": 39426759, "comment_id": 66191234, "body": "@ustulation: It can be useful maybe, and the <code>lazy_static!</code> macro exists after all. However note how <code>lazy_static!</code> avoids the initialization order issue by being created lazily and avoids the destruction order issue by... not being destructed ever. In the case of tests... I am not comfortable in sharing a common item between randomly scheduled parallel tests, sounds like a recipe for spurious failures."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1473608648, "post_id": 39426759, "comment_id": 66198002, "body": "@ustulation I agree that there <i>are</i> cases where it&#39;s useful, but I&#39;d argue that for every good usage there are a great number of misuses. I think your &quot;fake network in tests&quot; example is an example of a misuse, for exactly the reason that Matthieu M. espouses."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1473515625, "creation_date": 1473515625, "answer_id": 39426759, "question_id": 39426452, "link": "https://stackoverflow.com/questions/39426452/how-to-make-a-rust-singletons-destructor-run/39426759#39426759", "title": "How to make a Rust singleton&#39;s destructor run?", "body": "<p>Singletons in particular, and global constructors/destructors in general, are a bane (especially in language such as C++).</p>\n\n<p>I would say the main (functional) issues they cause are known respectively as <em>static initialization (resp. destruction) order fiasco</em>. That is, it is easy to accidentally create a dependency cycle between those globals, and even without such a cycle it is not immediately clear to compiler in which order they should be built/destroyed.</p>\n\n<p>They may also cause other issues: slower start-up, accidentally shared memory, ...</p>\n\n<p>In Rust, the attitude adopted has been <strong>No life before/after main</strong>. As such, attempting to get the C++ behavior is probably not going to work as expected.</p>\n\n<p>You will get much greater language support if you:</p>\n\n<ul>\n<li>drop the global aspect</li>\n<li>drop the attempt at having a single instance</li>\n</ul>\n\n<p>(and as a bonus, it'll be so much easier to test in parallel, too)</p>\n\n<p>My recommendation, thus, is to simply stick with local variables. Instantiate it in <code>main</code>, pass it by value/reference down the call-stack, and not only do you avoid those tricky initialization order issue, you also get destruction.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 794, "favorite_count": 0, "accepted_answer_id": 39426759, "answer_count": 1, "score": 3, "last_activity_date": 1518366672, "creation_date": 1473513425, "last_edit_date": 1518366672, "question_id": 39426452, "link": "https://stackoverflow.com/questions/39426452/how-to-make-a-rust-singletons-destructor-run", "title": "How to make a Rust singleton&#39;s destructor run?", "body": "<p>These are the ways I know of to create singletons in Rust:</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nuse std::sync::{Mutex, Once, ONCE_INIT};\n\n#[derive(Debug)]\nstruct A(usize);\nimpl Drop for A {\n    fn drop(&amp;mut self) {\n        // This is never executed automatically.\n        println!(\n            \"Dropping {:?} - Important stuff such as release file-handles etc.\",\n            *self\n        );\n    }\n}\n\n// ------------------ METHOD 0 -------------------\nstatic PLAIN_OBJ: A = A(0);\n\n// ------------------ METHOD 1 -------------------\nlazy_static! {\n    static ref OBJ: Mutex&lt;A&gt; = Mutex::new(A(1));\n}\n\n// ------------------ METHOD 2 -------------------\nfn get() -&gt; &amp;'static Mutex&lt;A&gt; {\n    static mut OBJ: *const Mutex&lt;A&gt; = 0 as *const Mutex&lt;A&gt;;\n    static ONCE: Once = ONCE_INIT;\n    ONCE.call_once(|| unsafe {\n        OBJ = Box::into_raw(Box::new(Mutex::new(A(2))));\n    });\n    unsafe { &amp;*OBJ }\n}\n\nfn main() {\n    println!(\"Obj = {:?}\", PLAIN_OBJ); // A(0)\n    println!(\"Obj = {:?}\", *OBJ.lock().unwrap()); // A(1)\n    println!(\"Obj = {:?}\", *get().lock().unwrap()); // A(2)\n}\n</code></pre>\n\n<p>None of these call <code>A</code>'s destructor (<code>drop()</code>) at program exit. This is expected behaviour for Method 2 (which is heap allocated), but I hadn't looked into the implementation of <code>lazy_static!</code> to know it was going to be similar.</p>\n\n<p>There is no RAII here. I could achieve that behaviour of an RAII singleton in C++ (I used to code in C++ until a year a back, so most of my comparisons relate to it - I don't know many other languages) using function local statics:</p>\n\n<pre><code>A&amp; get() {\n  static A obj; // thread-safe creation with C++11 guarantees\n  return obj;\n}\n</code></pre>\n\n<p>This is probably allocated/created (lazily) in implementation defined area and is valid for the lifetime of the program. When the program terminates, the destructor is deterministically run. We need to avoid accessing it from destructors of other statics, but I have never run into that.</p>\n\n<p>I might need to release resources and I want <code>drop()</code> to be run. Right now, I end up doing it manually just before program termination (towards the end of main after all threads have joined etc.).</p>\n\n<p>I don't even know how to do this using <code>lazy_static!</code> so I have avoided using it and only go for Method 2 where I can manually destroy it at the end.</p>\n\n<p>I don't want to do this; is there a way I can have such a RAII behaved singleton in Rust?</p>\n"}, {"tags": ["rust", "ncurses"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473522776, "post_id": 39425731, "comment_id": 66179148, "body": "Could you clarify what you <i>want</i> to happen and what <i>does</i> happen? &quot;fails&quot; and &quot;works&quot; are basically useless to those of us without a deep understanding of your program / ncurses."}, {"owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473523753, "post_id": 39425731, "comment_id": 66179426, "body": "Sorry, &quot;fails&quot; is a bit of a strong word. I mean it doesn&#39;t print anything."}, {"owner": {"reputation": 373, "user_id": 3091673, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6f0f85bd4fb7df2035ef982ea294e0be?s=128&d=identicon&r=PG", "display_name": "OS2", "link": "https://stackoverflow.com/users/3091673/os2"}, "edited": false, "score": 0, "creation_date": 1571693952, "post_id": 39425731, "comment_id": 103318702, "body": "This behaviour is confirmed. Fortunately decrementing the maximum extent of the viewport by 1 solves the problem as suggested."}], "answers": [{"comments": [{"owner": {"reputation": 42737, "user_id": 4518274, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UPurS.png?s=128&g=1", "display_name": "Thomas Dickey", "link": "https://stackoverflow.com/users/4518274/thomas-dickey"}, "edited": false, "score": 1, "creation_date": 1473555687, "post_id": 39430378, "comment_id": 66187023, "body": "It&#39;s not odd (see <a href=\"http://invisible-island.net/ncurses/man/curs_pad.3x.html\" rel=\"nofollow noreferrer\">manpage</a>), but expected since those parameters are zero-based and in error conditions it says <i>&quot;if the area to refresh extends off-screen&quot;</i>.  With <code>LINES,COLS</code>, the area would extend off by one row/column."}], "tags": [], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "is_accepted": true, "score": 1, "last_activity_date": 1473544207, "last_edit_date": 1473544207, "creation_date": 1473539857, "answer_id": 39430378, "question_id": 39425731, "link": "https://stackoverflow.com/questions/39425731/problems-using-newpad-with-a-size-larger-than-the-screen/39430378#39430378", "title": "Problems using newpad with a size larger than the screen", "body": "<p>The behavior is a bit odd.</p>\n\n<p>If the number of lines or rows is greater than the viewport, the last two <code>prefresh</code> arguments must be at most <code>LINES - 1</code> and <code>COLS - 1</code> respectively:</p>\n\n<pre><code>prefresh(pad, 0, 0, 0, 0, LINES - 1, COLS - 1);\n</code></pre>\n\n<p>If it's less, there's no need to subtract 1, as the code will work as expected.</p>\n"}], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 212, "favorite_count": 0, "accepted_answer_id": 39430378, "answer_count": 1, "score": 3, "last_activity_date": 1473544207, "creation_date": 1473508038, "last_edit_date": 1473508415, "question_id": 39425731, "link": "https://stackoverflow.com/questions/39425731/problems-using-newpad-with-a-size-larger-than-the-screen", "title": "Problems using newpad with a size larger than the screen", "body": "<p>I'm trying to scroll some text larger than the screen.</p>\n\n<p>The docs say <code>newpad</code> is not limited by the screen size, but initiating it with values greater than the terminal available columns or lines fails to print anything:</p>\n\n<pre><code>newpad(LINES + 1, COLS); // fails\nnewpad(LINES, COLS); // works\n</code></pre>\n\n<p>Entire code for reference:</p>\n\n<pre><code>extern crate ncurses;\nuse ncurses::*;\n\nfn main() {\n    initscr();\n    start_color();\n    use_default_colors();\n    cbreak();\n    noecho();\n    curs_set(CURSOR_VISIBILITY::CURSOR_INVISIBLE);\n\n    let pad = newpad(1000, COLS);\n\n    refresh();\n    let mut x = 0;\n    while x &lt; 1000 {\n        x += 1;\n        wprintw(pad, &amp;format!(\"Line number {}\\n\", x));\n    }\n    prefresh(pad, 0, 0, 0, 0, LINES, COLS);\n    getch();\n    endwin();\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust", "shared-memory"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1473500406, "post_id": 39424677, "comment_id": 66173469, "body": "Also, you can fix the compile error like this: (I added a sleep() there for demo): <a href=\"https://play.rust-lang.org/?gist=57e0b81ce1fc608dcf6a7622e934ea56&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1473500544, "post_id": 39424677, "comment_id": 66173525, "body": "You might find the solution yourself if you stop confusing yourself by having three different, mutually shadowing variables called <code>data</code>."}], "answers": [{"tags": [], "owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "is_accepted": false, "score": 1, "last_activity_date": 1473520462, "last_edit_date": 1473520462, "creation_date": 1473500794, "answer_id": 39424798, "question_id": 39424677, "link": "https://stackoverflow.com/questions/39424677/how-do-i-modify-a-value-in-one-thread-and-read-the-value-in-another-thread-using/39424798#39424798", "title": "How do I modify a value in one thread and read the value in another thread using shared memory?", "body": "<p>Ok, so let's first fix the compiler error:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let data = Arc::new(Mutex::new([0.0]));\n    let thread_data = data.clone();\n    thread::spawn(move || {\n        let mut data = thread_data.lock().unwrap();\n        data[0] = 1.0;\n    });\n    println!(\"{}\", data.lock().unwrap()[0]);\n}\n</code></pre>\n\n<p>The variable <code>thread_data</code> is always moved into the thread, that is why it cannot be accessed after the thread is spawned.\nBut this still has a problem: you are starting a thread that will run concurrently with the main thread and the last print statement will execute before the thread changes the value most of the time (it will be random).</p>\n\n<p>To fix this you have to wait for the thread to finish before printing the value:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let data = Arc::new(Mutex::new([0.0]));\n    let thread_data = data.clone();\n    let t = thread::spawn(move || {\n        let mut data = thread_data.lock().unwrap();\n        data[0] = 1.0;\n    });\n    t.join().unwrap();\n    println!(\"{}\", data.lock().unwrap()[0]);\n}\n</code></pre>\n\n<p>This will always produce the correct result.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1473520436, "last_edit_date": 1473520436, "creation_date": 1473501063, "answer_id": 39424841, "question_id": 39424677, "link": "https://stackoverflow.com/questions/39424677/how-do-i-modify-a-value-in-one-thread-and-read-the-value-in-another-thread-using/39424841#39424841", "title": "How do I modify a value in one thread and read the value in another thread using shared memory?", "body": "<p>Your code is not that far off! :)</p>\n\n<p>Let's look at the compiler error first: it says that you are apparently attempting to index something. This is true, you want to index the <code>data</code> variable (with <code>data[0]</code>), but the compiler complains that the value you want to index is of type <code>std::sync::Arc&lt;std::sync::Mutex&lt;[_; 1]&gt;&gt;</code> and cannot be indexed.</p>\n\n<p>If you look at the type, you can quickly see: my array is still wrapped in a <code>Mutex&lt;T&gt;</code> which is wrapped in an <code>Arc&lt;T&gt;</code>. This brings us to the solution: <strong>you have to lock for read access, too</strong>. So you have to add the <code>lock().unwrap()</code> like in the other thread:</p>\n\n<pre><code>print!(\"{}\", data.lock().unwrap()[0]);\n</code></pre>\n\n<p>But now a new compiler error arises: <code>use of moved value: `data`</code>. Dang! This comes from your name shadowing. You say <code>let data = data.clone();</code> before starting the thread; this shadows the original <code>data</code>. So how about we replace it by <code>let data_for_thread = data.clone()</code> and use <code>data_for_thread</code> in the other thread? You can see the working result <a href=\"https://play.rust-lang.org/?gist=a484e747bd465710152f601539befb37&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">here on the playground</a>.</p>\n\n<hr>\n\n<p>Making it do the same thing as the Python example isn't that hard anymore then, is it?</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::Duration;\n\nlet data = Arc::new(Mutex::new([0.0, 0.0]));\nlet data_for_thread = data.clone();\nthread::spawn(move || {\n    loop {\n        thread::sleep(Duration::from_secs(5))\n        let mut data = data_for_thread.lock().unwrap();\n        data[0] += 1.0;\n        data[1] -= 1.0;\n    }\n});\n\nloop {\n    let data = data.lock().unwrap();\n    println!(\"{}, {}\", data[0], data[1]);\n}\n</code></pre>\n\n<p>You can try it <a href=\"https://play.rust-lang.org/?gist=521892e40599e9458c3c6e6af9e3abe6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">here on the playground</a>, although I changed a few minor things to allow running on the playground.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473521578, "post_id": 39427539, "comment_id": 66178836, "body": "One does not declare variables as volatile in Rust. There&#39;s also no &quot;synchronized&quot; keyword, if that&#39;s what you mean."}, {"owner": {"reputation": 83, "user_id": 2679628, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/WFYxr.jpg?s=128&g=1", "display_name": "Puneet", "link": "https://stackoverflow.com/users/2679628/puneet"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473522345, "post_id": 39427539, "comment_id": 66179038, "body": "You can do that by creating implicit locks on the objects for the threads which do reads,writes . Cannot believe that python does not provide monitor locking ability  Please see the following link for detail <a href=\"http://effbot.org/zone/thread-synchronization.htm\" rel=\"nofollow noreferrer\">effbot.org/zone/thread-synchronization.htm</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1473522403, "post_id": 39427539, "comment_id": 66179058, "body": "You may wish to re-read the question to double check what language you are attempting to give an answer for."}, {"owner": {"reputation": 83, "user_id": 2679628, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/WFYxr.jpg?s=128&g=1", "display_name": "Puneet", "link": "https://stackoverflow.com/users/2679628/puneet"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473522500, "post_id": 39427539, "comment_id": 66179074, "body": "It does not matter what language you use to programme, Every language does have the ability of locks. Multi-Threading is a common implementation for all languages. Anyways,I was considering Java while i answered."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1474025322, "post_id": 39427539, "comment_id": 66375192, "body": "Please do not assume that all languages do concurrent programming the same way. No one is expecting an answer here from someone who doesn&#39;t understand concurrent programming specifically in Rust."}], "tags": [], "owner": {"reputation": 83, "user_id": 2679628, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/WFYxr.jpg?s=128&g=1", "display_name": "Puneet", "link": "https://stackoverflow.com/users/2679628/puneet"}, "is_accepted": false, "score": -3, "last_activity_date": 1473521562, "last_edit_date": 1473521562, "creation_date": 1473521041, "answer_id": 39427539, "question_id": 39424677, "link": "https://stackoverflow.com/questions/39424677/how-do-i-modify-a-value-in-one-thread-and-read-the-value-in-another-thread-using/39427539#39427539", "title": "How do I modify a value in one thread and read the value in another thread using shared memory?", "body": "<p>If you update common data by a thread, the other threads might not see the updated value, unless you do the following:</p>\n\n<ol>\n<li><p>Declare the variable as volatile which makes sure that the latest update is given back to the threads that read the variable. The data is read from the memory block but not from cache.</p></li>\n<li><p>Make all updates and reads as synchronized which might turn out to be costly in terms of performance but is sure to deal with data corruptions/in-consistency due to non-synchronization methods of writes and reads by distinct threads.</p></li>\n</ol>\n"}], "owner": {"reputation": 179, "user_id": 4694042, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/f2ae152cd3b78c97e87ab852e0f38d9a?s=128&d=identicon&r=PG&f=1", "display_name": "wb9688", "link": "https://stackoverflow.com/users/4694042/wb9688"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 684, "favorite_count": 0, "accepted_answer_id": 39424841, "answer_count": 3, "score": 2, "last_activity_date": 1473521562, "creation_date": 1473499927, "last_edit_date": 1473520336, "question_id": 39424677, "link": "https://stackoverflow.com/questions/39424677/how-do-i-modify-a-value-in-one-thread-and-read-the-value-in-another-thread-using", "title": "How do I modify a value in one thread and read the value in another thread using shared memory?", "body": "<p>The following Python code creates a thread (actually a process) with an array containing two floats passed to it, the thread counts up 1 by the first float and -1 by the second float every 5 seconds, while the main thread is continuously printing the two floats:</p>\n\n<pre><code>from multiprocessing import Process, Array\nfrom time import sleep\n\ndef target(states):\n    while True:\n        states[0] -= 1\n        states[1] += 1\n        sleep(5)\n\ndef main():\n    states = Array(\"d\", [0.0, 0.0])\n    process = Process(target=target, args=(states,))\n    process.start()\n    while True:\n        print(states[0])\n        print(states[1])\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>How can I do the same thing using shared memory in Rust? I've tried doing the following (<a href=\"https://play.rust-lang.org/?gist=bef8ec876ed06de21080f78449aa5fb8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let data = Arc::new(Mutex::new([0.0]));\n    let data = data.clone();\n    thread::spawn(move || {\n        let mut data = data.lock().unwrap();\n        data[0] = 1.0;\n    });\n    print!(\"{}\", data[0]);\n}\n</code></pre>\n\n<p>But that's giving a compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot index a value of type `std::sync::Arc&lt;std::sync::Mutex&lt;[_; 1]&gt;&gt;`\n  --&gt; &lt;anon&gt;:12:18\n   |&gt;\n12 |&gt;     print!(\"{}\", data[0]);\n   |&gt;                  ^^^^^^^\n</code></pre>\n\n<p>And even if that'd work, it does something different. I've read <a href=\"https://doc.rust-lang.org/book/concurrency.html\" rel=\"nofollow\">this</a>, but I've still no idea how to do it.</p>\n"}, {"tags": ["memory", "constructor", "rust", "traits"], "comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 2, "creation_date": 1473502862, "post_id": 39424115, "comment_id": 66174103, "body": "Is this the <i>smallest</i> example you can make it? Try to isolate the specific problem, which will make it clearer for both you and us."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1473507066, "post_id": 39424115, "comment_id": 66175175, "body": "<code>renderer.rs</code> and <code>shapebuilder.rs</code> are already as small as possible and the only <i>important</i> informations. The stuff beginning at the headline <b>NOT involed modules...</b> is - as I mentioned - only for completeness because people asked on another question for a all modules to compile and test it themselves. Please be sure to read all headlines first."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 1, "creation_date": 1473508845, "post_id": 39424115, "comment_id": 66175620, "body": "I don&#39;t think you see my point correctly - your current code example are not minimal and contain imports from your other files. To make your question clearer, you should find the part of your code that is causing your problem, and <b>get rid of the rest completely</b> to make a more simple example that still has the same problem. As it stands, I would need to copy all of your files and directory structure into a project to even reproduce your problem, which would not be necessary if you isolated the problem more."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1473510099, "post_id": 39424115, "comment_id": 66175907, "body": "Well yea you&#39;re right - I&#39;m taking my time to update the question with a more focused example."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1473513871, "post_id": 39424115, "comment_id": 66176741, "body": "made the code more simple now - I like it more that way either thanks"}], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 3, "creation_date": 1473519841, "post_id": 39427203, "comment_id": 66178304, "body": "Wow...this is very explicit. Rust really needs to have things declared very explicitely. It&#39;s hard for me as a Java developer to think about all this - but I am glad that Rust works this way. Let&#39;s me understand how code works way better. Gonna test this soluation and mark this as answered asap. thanks"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1473518918, "creation_date": 1473518918, "answer_id": 39427203, "question_id": 39424115, "link": "https://stackoverflow.com/questions/39424115/static-stdmarkersized-is-not-satisfied-do-i-need-to-box/39427203#39427203", "title": "&#39;static: std::marker::Sized` is not satisfied - do I need to Box?", "body": "<p>Well, the compiler is not really pointing at the source of the error. The problem is here:</p>\n\n<pre><code>pub struct RectangleBuilder {\n    shape: Shape&lt;Builder=RectangleBuilder&gt;\n    //     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this is an unsized type!\n}\n</code></pre>\n\n<p><code>Shape</code> is a trait, and using it as a type yields an unsized type. We could box it to fix this error:</p>\n\n<pre><code>pub struct RectangleBuilder {\n    shape: Box&lt;Shape&lt;Builder=RectangleBuilder&gt;&gt;\n}\n</code></pre>\n\n<p>But then, what do we do about the cast here?</p>\n\n<pre><code>impl ShapeBuilder for RectangleBuilder {\n    fn new&lt;T: Shape&gt;(shape: T) -&gt; Self {\n        RectangleBuilder {\n            shape: shape as Rectangle\n            //     ^^^^^^^^^^^^^^^^^^ can't cast a generic type!\n        }\n    }\n}\n</code></pre>\n\n<p>If <code>RectangleBuilder</code> will indeed be ready to accept any <code>Shape</code> whose <code>Builder</code> is <code>RectangleBuilder</code>, then let's remove the cast and add the appropriate constraints where necessary.</p>\n\n<pre><code>pub mod renderer {\n    use super::shapes::Shape;\n    use super::shapebuilder::ShapeBuilder;\n\n    pub struct Renderer;\n\n    impl Renderer {\n        pub fn set_shape&lt;T: Shape + 'static&gt;(&amp;self, shape: T) -&gt; T::Builder {\n            T::Builder::new(shape)\n        }\n    }\n}\n\nmod shapes {\n    use super::shapebuilder::ShapeBuilder;\n    use super::shapebuilder::RectangleBuilder;\n\n    pub trait Shape {\n        type Builder: ShapeBuilder;\n    }\n\n    #[derive(Clone, Copy)]\n    pub struct Rectangle {\n        pub height: usize,\n        pub width: usize,\n    }\n\n    impl Shape for Rectangle {\n        type Builder = RectangleBuilder;\n    }\n}\n\nmod shapebuilder {\n    use super::shapes::Shape;\n\n    pub trait ShapeBuilder: Sized {\n        fn new&lt;T: Shape&lt;Builder=Self&gt; + 'static&gt;(shape: T) -&gt; Self;\n    }\n\n    pub struct RectangleBuilder {\n        shape: Box&lt;Shape&lt;Builder=RectangleBuilder&gt; + 'static&gt;,\n    }\n\n    impl ShapeBuilder for RectangleBuilder {\n        fn new&lt;T: Shape&lt;Builder=Self&gt; + 'static&gt;(shape: T) -&gt; Self {\n            RectangleBuilder {\n                shape: Box::new(shape)\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The <code>'static</code> bound puts a limit on the references that can be stored in a particular <code>Shape</code> instance. <code>'static</code> means that the implementations cannot contain references, unless they have the <code>'static</code> lifetime.</p>\n\n<p>However, if you'll need to use <code>Rectangle</code>'s fields in <code>RectangleBuilder</code>, then <code>RectangleBuilder</code> should only accept <code>Rectangle</code>s, rather than any shape. We can use associated types again to express this.</p>\n\n<pre><code>pub mod renderer {\n    use super::shapes::Shape;\n    use super::shapebuilder::ShapeBuilder;\n\n    pub struct Renderer;\n\n    impl Renderer {\n        pub fn set_shape&lt;T: Shape&gt;(&amp;self, shape: T) -&gt; T::Builder {\n            T::Builder::new(shape)\n        }\n    }\n}\n\nmod shapes {\n    use super::shapebuilder::ShapeBuilder;\n    use super::shapebuilder::RectangleBuilder;\n\n    pub trait Shape {\n        type Builder: ShapeBuilder&lt;Shape=Self&gt;;\n    }\n\n    #[derive(Clone, Copy)]\n    pub struct Rectangle {\n        pub height: usize,\n        pub width: usize,\n    }\n\n    impl Shape for Rectangle {\n        type Builder = RectangleBuilder;\n    }\n}\n\nmod shapebuilder {\n    use super::shapes::Shape;\n    use super::shapes::Rectangle;\n\n    pub trait ShapeBuilder: Sized {\n        type Shape: Shape + ?Sized;\n\n        fn new(shape: Self::Shape) -&gt; Self;\n    }\n\n    pub struct RectangleBuilder {\n        shape: Rectangle,\n    }\n\n    impl ShapeBuilder for RectangleBuilder {\n        type Shape = Rectangle;\n\n        fn new(shape: Self::Shape) -&gt; Self {\n            RectangleBuilder {\n                shape: shape\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>In <code>ShapeBuilder</code>, we've added a <code>Shape</code> associated type that specifies what type of <code>Shape</code> each <code>ShapeBuilder</code> will operate on. <code>ShapeBuilder::new</code> now uses this associated type, instead of a type parameter, to specify the type of its operand. Note that the <code>+ ?Sized</code> bound is needed because otherwise there's an implicit <code>+ Sized</code> bound, and Rust complains that <code>Shape</code> doesn't imply <code>Sized</code>. Another way to fix this is to add <code>: Sized</code> to <code>Shape</code>'s definition.</p>\n\n<pre><code>pub trait Shape: Sized {\n    type Builder: ShapeBuilder&lt;Shape=Self&gt;;\n}\n</code></pre>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4084, "favorite_count": 1, "accepted_answer_id": 39427203, "answer_count": 1, "score": 6, "last_activity_date": 1473518918, "creation_date": 1473495759, "last_edit_date": 1473513842, "question_id": 39424115, "link": "https://stackoverflow.com/questions/39424115/static-stdmarkersized-is-not-satisfied-do-i-need-to-box", "title": "&#39;static: std::marker::Sized` is not satisfied - do I need to Box?", "body": "<p>I'm about to give a trait as argument to store it through a contructor method called <code>new</code>.</p>\n\n<p><strong>The trait for a struct type is given as argument here:</strong></p>\n\n<p><em>renderer</em>.rs</p>\n\n<pre><code>use super::shapes::Shape;\n\npub struct Renderer;\n\nimpl Renderer{\n    pub fn set_shape&lt;T : Shape&gt;(&amp;self, shape: T) -&gt; T::Builder{\n        T::Builder::new(shape)\n    }\n}\n</code></pre>\n\n<p><strong>then the contructor of the <code>Builder</code> specified by the associated type will be called</strong></p>\n\n<p><em>shapebuilder.rs</em></p>\n\n<pre><code>use super::shapes::Shape;\nuse super::shapes::Rectangle;\n\npub trait ShapeBuilder{\n    fn new&lt;T:Shape&gt;(shape: T) -&gt; Self;\n}\n\npub struct RectangleBuilder{\n    shape: Shape&lt;Builder=RectangleBuilder&gt;\n}\n\nimpl ShapeBuilder for RectangleBuilder{\n    fn new&lt;T:Shape&gt;(shape: T) -&gt; Self{\n        RectangleBuilder{\n            shape: shape as Rectangle\n        }\n    }\n}\n</code></pre>\n\n<p><strong>at this point I already want to point out the compiler output</strong></p>\n\n<p><em>compiler_output</em></p>\n\n<pre><code>error[E0277]: the trait bound `shapes::Shape&lt;Builder=shapebuilder::RectangleBuilder&gt; + 'static: std::marker::Sized` is not satisfied\n  --&gt; shapes.rs:14:6\n   |\n14 | impl Shape for Rectangle{\n   |      ^^^^^\n   |\n   = note: `shapes::Shape&lt;Builder=shapebuilder::RectangleBuilder&gt; + 'static` does not have a constant size known at compile-time\n   = note: required because it appears within the type `shapebuilder::RectangleBuilder`\n   = note: required by `shapes::Shape`\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>I found similar questions here on SO which told something about Boxing. I tried to Box every parameter type to solve the issue. Boxed it like this <code>shape: Box&lt;T&gt;</code>. No success. Do I need to box at all? I understand the issue that the compiler is not able to resolve the size of a trait since the specific/concrete struct types can have different sizes depending on their field/properties. Still I'm not able to find a solution. Hope it's trivial.</p>\n\n<hr>\n\n<h1><strong>NOT involed modules (my opinion) listed for completeness</strong></h1>\n\n<p><em>shapes.rs</em></p>\n\n<pre><code>use super::shapebuilder::ShapeBuilder;\nuse super::shapebuilder::RectangleBuilder;\n\npub trait Shape{\n    type Builder: ShapeBuilder;\n}\n\n#[derive(Clone, Copy)]\npub struct Rectangle{\n    pub height: usize,\n    pub width: usize,\n}\n\nimpl Shape for Rectangle{\n    type Builder = RectangleBuilder;\n}\n</code></pre>\n\n<p><em>lib.rs</em></p>\n\n<pre><code>pub mod renderer;\nmod shapes;\nmod shapebuilder;\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1473465781, "post_id": 39421005, "comment_id": 66167283, "body": "I&#39;m sure I&#39;m missing something, but why not use <code>struct WV&lt;&#39;c&gt; { widgets: Vec&lt;Box&lt;Widget&lt;Ctxt&lt;&#39;c&gt;&gt;&gt;&gt; }</code>? All of the lifetimes have to be known statically and this would unify them all."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473489560, "post_id": 39421005, "comment_id": 66170954, "body": "The lifetime isn&#39;t known until actually calling <code>f</code> when you have a context to pass in. Currently (without <code>WV</code>) I just store a <code>W1</code> which has no lifetime parameters, and when callling <code>w1.f()</code> the trait is effectively specialized for <code>Ctxt&lt;&#39;c&gt;</code> at that moment. Next time <code>w1.f()</code> is called it may be on <code>Widget&lt;Ctxt&lt;&#39;d&gt;&gt;</code>; but the <code>w1</code> is the same. The creation doesn&#39;t happen in the same scope as the method call."}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 3, "last_activity_date": 1473491193, "creation_date": 1473491193, "answer_id": 39423533, "question_id": 39421005, "link": "https://stackoverflow.com/questions/39421005/declaring-a-vector-of-trait-objects-with-a-lifetime-parameter/39423533#39423533", "title": "Declaring a vector of trait objects with a lifetime parameter", "body": "<p>After a night's sleep, I think I have an answer.  I can defer the selection of the <code>Ctxt</code> lifetime by indirecting through a new trait <code>CtxtWidget</code>, and <code>impl&lt;'c&gt; Widget&lt;Ctxt&lt;'c&gt;&gt;</code> for the new trait:</p>\n\n<pre><code>trait Widget&lt;C&gt; {\n    fn f&lt;'a&gt;(&amp;self, ctx: &amp;'a mut C);\n}\n\nstruct W1 {}\nstruct W2 {}\nstruct Ctxt&lt;'c&gt; {\n    data: &amp;'c u32,\n}\n\ntrait CtxtWidget {\n    fn ctxt_f&lt;'a, 'c&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;);\n}\n\nimpl CtxtWidget for W1 {\n    fn ctxt_f&lt;'a, 'c&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;) {\n        unimplemented!()\n    }\n}\nimpl CtxtWidget for W2 {\n    fn ctxt_f&lt;'a, 'c&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;) {\n        unimplemented!()\n    }\n}\n\nimpl&lt;'c&gt; Widget&lt;Ctxt&lt;'c&gt;&gt; for Box&lt;CtxtWidget&gt; {\n    fn f&lt;'a&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;) {\n        self.ctxt_f(ctx);\n    }\n}\n\nstruct WV {\n    pub widgets: Vec&lt;Box&lt;CtxtWidget&gt;&gt;,\n}\n\nfn main() {\n    let mut wv = WV{widgets: Vec::new()};\n    wv.widgets.push(Box::new(W1{}));\n    wv.widgets.push(Box::new(W2{}));\n    let u = 65u32;\n    let mut ctxt = Ctxt{data: &amp;u};\n    for widget in &amp;wv.widgets {\n        widget.f(&amp;mut ctxt);\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=62bef54b7f56b8b86bc0b152b5ab262a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>)</p>\n\n<p>In effect <code>CtxtWidget</code> is roughly equivalent to <code>for&lt;'c&gt; Widget&lt;Ctxt&lt;'c&gt;&gt;</code>.</p>\n\n<p>I'd still be interested in any other solutions (including intrusive changes if there's a better way to do this).</p>\n"}], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 509, "favorite_count": 0, "accepted_answer_id": 39423533, "answer_count": 1, "score": 4, "last_activity_date": 1473491193, "creation_date": 1473463770, "last_edit_date": 1473464467, "question_id": 39421005, "link": "https://stackoverflow.com/questions/39421005/declaring-a-vector-of-trait-objects-with-a-lifetime-parameter", "title": "Declaring a vector of trait objects with a lifetime parameter", "body": "<p>I have a <code>Widget</code> trait parametrised on a context type:</p>\n\n<pre><code>trait Widget&lt;C&gt; {\n    fn f&lt;'a&gt;(&amp;self, ctx: &amp;'a mut C);\n}\n</code></pre>\n\n<p>Some widgets whose context types are the same, but contain references so are parameterised:</p>\n\n<pre><code>struct Ctxt&lt;'c&gt; {\n    data: &amp;'c u32,\n}\n\nstruct W1 {}\nstruct W2 {}\n\nimpl&lt;'c&gt; Widget&lt;Ctxt&lt;'c&gt;&gt; for W1 { // and W2\n    fn f&lt;'a&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;) {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>I have a multi-widget which wants to store several of these:</p>\n\n<pre><code>struct WV {\n    widgets: Vec&lt;Box&lt;Widget&lt;Ctxt&lt;????&gt;&gt;&gt;&gt;,\n}\n\nimpl&lt;'c&gt; Widget&lt;Ctxt&lt;'c&gt;&gt; for WV {\n    fn f&lt;'a&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;) {\n        for w in &amp;self.widgets {\n            w.f(ctx);\n        }\n    }\n}\n</code></pre>\n\n<p>It looks like I need a <code>Vec&lt;Box&lt;Widget&lt;for&lt;'c&gt; Ctxt&lt;'c&gt;&gt;&gt;&gt;</code>; but you can't do that!  Alternatively, only specifying the lifetime in the definition of <code>f</code>:</p>\n\n<pre><code>impl Widget&lt;Ctxt&gt; for W {\n    fn f&lt;'a, 'c&gt;(&amp;self, ctx: &amp;'a mut Ctxt&lt;'c&gt;) {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>This doesn't work either (missing lifetime parameter for <code>Ctxt</code>).</p>\n\n<p>The purpose of the context is to pass a mutable reference to something long-lived which is only needed during <code>f</code>; the <code>&amp;mut</code> reference can't be stored in <code>W1</code> etc. I don't really want to specify any lifetimes for <code>Ctxt</code>.</p>\n\n<p>How can I store multiple implementers of the trait, which allow passing in a context containing references?</p>\n"}, {"tags": ["rust", "macros", "syntex"], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 128, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1552528915, "creation_date": 1473439852, "last_edit_date": 1552528915, "question_id": 39416334, "link": "https://stackoverflow.com/questions/39416334/is-it-possible-to-use-quote-macros-from-syntex", "title": "Is it possible to use quote macros from syntex?", "body": "<p>I am implementing a macro using <a href=\"https://github.com/serde-rs/syntex/blob/master/hello_world/hello_world_macros/src/lib.rs\" rel=\"nofollow\">this sample</a> as basis. I now want to use <code>quote_expr!</code> in the macro expansion code:</p>\n\n<pre><code>fn expand_macro&lt;'cx&gt;(\n    cx: &amp;'cx mut ExtCtxt,\n    sp: Span,\n    _: &amp;[TokenTree]\n) -&gt; Box&lt;MacResult + 'cx&gt; {\n    let expr = quote_expr!(cx, { const A: u32 = 10; });\n    MacEager::expr(expr)\n}\n</code></pre>\n\n<p>The compiler errors because <code>quote_expr!</code> is not defined.</p>\n\n<p>I found that <code>quote_expr!</code> is defined in <a href=\"https://github.com/serde-rs/syntex/blob/master/syntex_syntax/src/ext/base.rs\" rel=\"nofollow\">base.rs</a> via a mechanism similar to my <code>expand_macro</code> function.</p>\n\n<p>My main crate has a <code>build.rs</code> that generates <code>main.rs</code> from <code>src/main.rs.in</code> by expanding macros. I have a <code>expand_macro</code> function in the second crate which uses the <code>build.rs</code> from main crate.</p>\n\n<p>To use <code>quote_expr!</code> should I have three crates, two of them with <code>build.rs</code>?</p>\n\n<p>Is there a simpler way to just write an expression, maybe by putting it in a string and calling the parser to produce a token tree?</p>\n"}, {"tags": ["rust", "clone"], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1525196742, "post_id": 39415236, "comment_id": 87260084, "body": "There is also an <a href=\"https://github.com/rust-lang/rfcs/pull/2353\" rel=\"nofollow noreferrer\">RFC for extending <code>#[derive]</code></a>"}, {"owner": {"reputation": 255, "user_id": 2756937, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0695797b6063143ff79efe5a98a74361?s=128&d=identicon&r=PG", "display_name": "alephalpha", "link": "https://stackoverflow.com/users/2756937/alephalpha"}, "edited": false, "score": 1, "creation_date": 1575096666, "post_id": 39415236, "comment_id": 104458453, "body": "There is a crate for this: <a href=\"https://crates.io/crates/derivative\" rel=\"nofollow noreferrer\"><code>derivative</code></a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 27, "last_activity_date": 1595947117, "last_edit_date": 1595947117, "creation_date": 1473435651, "answer_id": 39415236, "question_id": 39415052, "link": "https://stackoverflow.com/questions/39415052/deriving-a-trait-results-in-unexpected-compiler-error-but-the-manual-implementa/39415236#39415236", "title": "Deriving a trait results in unexpected compiler error, but the manual implementation works", "body": "<p>The answer is buried in the error message:</p>\n<blockquote>\n<pre class=\"lang-none prettyprint-override\"><code>    = note: the method `clone` exists but the following trait bounds were not satisfied:\n            `T: std::clone::Clone`\n            which is required by `Foo&lt;'_, T&gt;: std::clone::Clone`\n</code></pre>\n</blockquote>\n<p>When you derive <code>Clone</code> (and many other automatically-derived types), it adds a <code>Clone</code> bound on <strong>all</strong> generic types. Using <code>rustc -Z unstable-options --pretty=expanded</code>, we can see what it becomes:</p>\n<pre><code>impl &lt;'a, T: ::std::clone::Clone + 'a&gt; ::std::clone::Clone for Foo&lt;'a, T&gt; {\n    #[inline]\n    fn clone(&amp;self) -&gt; Foo&lt;'a, T&gt; {\n        match *self {\n            Foo { t: ref __self_0_0 } =&gt;\n            Foo{t: ::std::clone::Clone::clone(&amp;(*__self_0_0)),},\n        }\n    }\n}\n</code></pre>\n<p>In <em>this</em> case, the bound is not needed because the generic type is behind a reference.</p>\n<p>For now, you will need to implement <code>Clone</code> yourself. <a href=\"https://github.com/rust-lang/rust/issues/26925\" rel=\"nofollow noreferrer\">There's a Rust issue for this</a>, but it's a comparatively rare case with a workaround.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473436544, "post_id": 39415408, "comment_id": 66155577, "body": "This is a good solution, but I disagree with <i>functionally identical</i> \u2014 in this case, the struct can only contain a <code>T</code> that implements <code>Clone</code>, but that particular bound isn&#39;t <b>required</b> to clone a reference. If the program requires <code>T</code> to be cloned for other reasons, this works."}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473436618, "post_id": 39415408, "comment_id": 66155610, "body": "Oh, I assumed that <code>T: ::std::clone::Clone + &#39;a</code> from your example meant that <code>T</code> implemented <code>Clone</code> anyway; am I misunderstanding?"}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473437663, "post_id": 39415408, "comment_id": 66156168, "body": "@Shepmaster, after some testing I&#39;ve found that you can remove the <code>Clone</code> bound on <code>T</code> in the struct without problems, and by doing that I produce exactly the same output from the expanded pretty printer as the manual <code>impl</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473437676, "post_id": 39415408, "comment_id": 66156178, "body": "No, that&#39;s my fault for being unclear. I meant that my &quot;solution&quot; is to implement <code>Clone</code> without deriving it. That allows the structure to not have the restriction at all."}], "tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": false, "score": 4, "last_activity_date": 1473437585, "last_edit_date": 1473437585, "creation_date": 1473436322, "answer_id": 39415408, "question_id": 39415052, "link": "https://stackoverflow.com/questions/39415052/deriving-a-trait-results-in-unexpected-compiler-error-but-the-manual-implementa/39415408#39415408", "title": "Deriving a trait results in unexpected compiler error, but the manual implementation works", "body": "<p>Your example will derive <code>Clone</code> without any problems if you explicitly mark that <code>T</code> should implement <code>Clone</code>, like this:</p>\n\n<pre><code>#[derive(Clone)]\nstruct Foo&lt;'a, T: 'a&gt; {\n    t: &amp;'a T,\n}\n\nfn bar&lt;'a, T: Clone&gt;(foo: Foo&lt;'a, T&gt;) {\n    foo.clone();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=236396791c635a9424379cff0aef6ad9&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground link</a>)</p>\n\n<p>It seems unusual that you can avoid specifying the bound explicitly, but Shepmaster's answer seems to suggest that the compiler inserts it implicitly, so my suggestion is functionally identical.</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1757, "favorite_count": 3, "accepted_answer_id": 39415236, "answer_count": 2, "score": 18, "last_activity_date": 1595947117, "creation_date": 1473434996, "last_edit_date": 1595947069, "question_id": 39415052, "link": "https://stackoverflow.com/questions/39415052/deriving-a-trait-results-in-unexpected-compiler-error-but-the-manual-implementa", "title": "Deriving a trait results in unexpected compiler error, but the manual implementation works", "body": "<p>This code (<a href=\"https://play.rust-lang.org/?gist=76d81c07dffb995b91a86487fd5b5ed4&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>):</p>\n<pre><code>#[derive(Clone)]\nstruct Foo&lt;'a, T: 'a&gt; {\n    t: &amp;'a T,\n}\n\nfn bar&lt;'a, T&gt;(foo: Foo&lt;'a, T&gt;) {\n    foo.clone();\n}\n</code></pre>\n<p>... does not compile:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `clone` found for struct `Foo&lt;'a, T&gt;` in the current scope\n   --&gt; src/main.rs:16:9\n    |\n3   | struct Foo&lt;'a, T: 'a&gt; {\n    | ---------------------\n    | |\n    | method `clone` not found for this\n    | doesn't satisfy `Foo&lt;'_, T&gt;: std::clone::Clone`\n...\n16  |     foo.clone();\n    |         ^^^^^ method not found in `Foo&lt;'a, T&gt;`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n            `T: std::clone::Clone`\n            which is required by `Foo&lt;'_, T&gt;: std::clone::Clone`\nhelp: consider restricting the type parameter to satisfy the trait bound\n    |\n3   | struct Foo&lt;'a, T: 'a&gt; where T: std::clone::Clone {\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n<p>Adding <code>use std::clone::Clone;</code> doesn't change anything, as it's already in the prelude anyway.</p>\n<p>When I remove the <code>#[derive(Clone)]</code> and manually implement <code>Clone</code> for <code>Foo</code>, it <strong>compiles as expected</strong>!</p>\n<pre><code>impl&lt;'a, T&gt; Clone for Foo&lt;'a, T&gt; {\n    fn clone(&amp;self) -&gt; Self {\n        Foo {\n            t: self.t,\n        }\n    }\n}\n</code></pre>\n<p>What is going on here?</p>\n<ul>\n<li>Is there a difference between <code>#[derive()]</code>-impls and manual ones?</li>\n<li>Is this a compiler bug?</li>\n<li>Something else I didn't think of?</li>\n</ul>\n"}, {"tags": ["generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 10, "last_activity_date": 1570626700, "last_edit_date": 1570626700, "creation_date": 1473428096, "answer_id": 39412823, "question_id": 39412626, "link": "https://stackoverflow.com/questions/39412626/unable-to-create-a-polymorphic-type-because-the-trait-cannot-be-made-into-an-obj/39412823#39412823", "title": "Unable to create a polymorphic type because the trait cannot be made into an object", "body": "<p>The error comes from the fact that you can't create trait objects for <code>DnsRecordData</code> due to the trait not being \"object-safe\". This concept is explained in the <a href=\"https://doc.rust-lang.org/book/ch17-02-trait-objects.html#object-safety-is-required-for-trait-objects\" rel=\"nofollow noreferrer\">trait objects section of <em>The Rust Programming Language</em></a>.</p>\n\n<p>In your particular case, the trait contains a generic method. To create a trait object, the compiler has to synthesize a vtable for the trait, containing a function pointer for every method the trait has. But because the trait has a generic method, it effectively has as many methods as the method could be instantiated with, which is potentially infinite. Therefore, you cannot make a trait object for <code>DnsRecordData</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1570626664, "last_edit_date": 1570626664, "creation_date": 1473428107, "answer_id": 39412826, "question_id": 39412626, "link": "https://stackoverflow.com/questions/39412626/unable-to-create-a-polymorphic-type-because-the-trait-cannot-be-made-into-an-obj/39412826#39412826", "title": "Unable to create a polymorphic type because the trait cannot be made into an object", "body": "<blockquote>\n  <p>The intention is that <code>DnsRecord</code> should be able to hold any struct implementing the <code>DnsRecordData</code> trait</p>\n</blockquote>\n\n<p>That's not what the code says. </p>\n\n<pre><code>Vec&lt;DnsRecord&lt;dyn DnsRecordData&gt;&gt;\n</code></pre>\n\n<p>This is a vector of the struct <code>DnsRecord</code> containing the <em>trait</em> <code>DnsRecordData</code>. If you want \"any struct implementing the <code>DnsRecordData</code> trait\", you need a generic:</p>\n\n<pre><code>pub struct DnsPacket&lt;D&gt;\nwhere\n    D: DnsRecordData,\n{\n    pub answers: Vec&lt;DnsRecord&lt;D&gt;&gt;,\n}\n</code></pre>\n\n<p>Traits can be <em>implemented</em>, but they also have their own type. In order to create this type, the trait needs to be <em>object-safe</em> -  <a href=\"https://stackoverflow.com/questions/29985153/trait-object-is-not-object-safe-error\">Trait Object is not Object-safe error</a>.</p>\n\n<p>As the error message states, this trait cannot be a trait object because there are generic types on the method.</p>\n\n<p>The first error states that <code>DnsRecord</code> requires that whatever type it is parameterized with must implement <code>DnsRecordData</code>. However, the <em>type</em> of the trait object doesn't actually implement that. Normally, you'd use a trait object via a reference (<code>&amp;dyn DnsRecordData</code>) or a box (<code>Box&lt;dyn DnsRecordData&gt;</code>), both of which should implement the trait, preventing this error.</p>\n"}], "owner": {"reputation": 37889, "user_id": 73772, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/b4a74d63b7e37a68f94a3425ae7e1900?s=128&d=identicon&r=PG&f=1", "display_name": "Emil H", "link": "https://stackoverflow.com/users/73772/emil-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7537, "favorite_count": 0, "accepted_answer_id": 39412826, "answer_count": 2, "score": 12, "last_activity_date": 1570626700, "creation_date": 1473427485, "last_edit_date": 1570626608, "question_id": 39412626, "link": "https://stackoverflow.com/questions/39412626/unable-to-create-a-polymorphic-type-because-the-trait-cannot-be-made-into-an-obj", "title": "Unable to create a polymorphic type because the trait cannot be made into an object", "body": "<p>I've got this simplified Rust code:</p>\n\n<pre><code>use std::io::Result;\n\npub trait PacketBuffer {}\n\npub trait DnsRecordData {\n    fn write&lt;T: PacketBuffer&gt;(&amp;self, buffer: &amp;mut T) -&gt; Result&lt;usize&gt;;\n}\n\npub struct DnsRecord&lt;R: DnsRecordData + ?Sized&gt; {\n    pub data: Box&lt;R&gt;,\n}\n\npub struct DnsPacket {\n    pub answers: Vec&lt;DnsRecord&lt;dyn DnsRecordData&gt;&gt;,\n}\n</code></pre>\n\n<p>The intention is that <code>DnsRecord</code> should be able to hold any struct implementing the <code>DnsRecordData</code> trait, with the different structs representing A, AAAA, CNAME etc.</p>\n\n<p>This fails with the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `DnsRecordData` cannot be made into an object\n  --&gt; src/lib.rs:14:5\n   |\n14 |     pub answers: Vec&lt;DnsRecord&lt;dyn DnsRecordData&gt;&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `DnsRecordData` cannot be made into an object\n   |\n   = note: method `write` has generic type parameters\n</code></pre>\n\n<p>What's got me the most confused is that by removing the generics from <code>DnsRecordData::write()</code>, it compiles just fine:</p>\n\n<pre><code>use std::io::Result;\n\npub trait PacketBuffer {}\n\npub trait DnsRecordData {\n    fn write(&amp;self, buffer: &amp;mut dyn PacketBuffer) -&gt; Result&lt;usize&gt;;\n}\n\npub struct DnsRecord&lt;R: DnsRecordData + ?Sized&gt; {\n    pub data: Box&lt;R&gt;,\n}\n\npub struct DnsPacket {\n    pub answers: Vec&lt;DnsRecord&lt;dyn DnsRecordData&gt;&gt;,\n}\n</code></pre>\n\n<p>If anyone can explain what I'm missing, I'd very much appreciate it.</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 3, "creation_date": 1473398269, "post_id": 39404265, "comment_id": 66133978, "body": "If you have mixed binary and text in a custom format, perhaps you should parse the <i>whole file</i> using a parser such as <a href=\"https://github.com/Geal/nom\" rel=\"nofollow noreferrer\">nom</a>."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 2, "creation_date": 1473403419, "post_id": 39404265, "comment_id": 66135992, "body": "What does it matter if the file is large? You just convert to string the slice you know contains the number: <code>i32::from_str(str::from_utf8(&amp;data[a..b]).unwrap()).unwrap()</code>&zwnj;&#8203;. IIRC, that is zero-copy."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473403696, "post_id": 39404265, "comment_id": 66136138, "body": "File being large is just a note that it may contain GB of data, so a more optimal method which doesn&#39;t use an extra conversion and intermediate storage may be preferred in some cases, even with <code>from_utf8</code>, I expect the code-path does multi-byte characters checks? if we know the data is an array of digits, its not such a problem to write an <code>atoi</code>, admittedly this isn&#39;t a typical use-case."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1473404243, "post_id": 39404265, "comment_id": 66136360, "body": "@ideasman42: To avoid multi-bytes check you always have <a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\" rel=\"nofollow noreferrer\"><code>from_utf8_unchecked</code></a>, of course it&#39;s unsafe."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1473431738, "last_edit_date": 1473431738, "creation_date": 1473429514, "answer_id": 39413317, "question_id": 39404265, "link": "https://stackoverflow.com/questions/39404265/does-rust-provide-a-way-to-parse-integer-numbers-directly-from-ascii-data-in-byt/39413317#39413317", "title": "Does Rust provide a way to parse integer numbers directly from ASCII data in byte (u8) arrays?", "body": "<p>No, the standard library has no such feature, but it doesn't need one.</p>\n\n<p>As stated in the comments, the raw bytes can be converted to a <code>&amp;str</code> via:</p>\n\n<ol>\n<li><a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8.html\"><code>str::from_utf8</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\"><code>str::from_utf8_unchecked</code></a></li>\n</ol>\n\n<p>Neither of these perform extra allocation. The first one ensures the bytes are valid UTF-8, the second does not. Everyone should use the checked form until such time as <strong>profiling</strong> proves that it's a bottleneck, then use the unchecked form once it's proven safe to do so.</p>\n\n<p>If bytes deeper in the data need to be parsed, a <em>slice</em> of the raw bytes can be obtained before conversion:</p>\n\n<pre><code>use std::str;\n\nfn main() {\n    let raw_data = b\"123132\";\n\n    let the_bytes = &amp;raw_data[1..4];\n    let the_string = str::from_utf8(the_bytes).expect(\"not UTF-8\");\n    let the_number: u64 = the_string.parse().expect(\"not a number\");\n\n    assert_eq!(the_number, 231);\n}\n</code></pre>\n\n<p>As in other code, these these lines can be extracted into a function or a trait to allow for reuse. However, once that path is followed, it would be a good idea to look into one of the many great <a href=\"https://crates.io/search?q=parsing\">crates aimed at parsing</a>. This is especially true if there's a need to parse binary data in addition to textual data.</p>\n"}, {"tags": [], "owner": {"reputation": 814, "user_id": 2430485, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vZThf.png?s=128&g=1", "display_name": "Markus Klein", "link": "https://stackoverflow.com/users/2430485/markus-klein"}, "is_accepted": false, "score": 4, "last_activity_date": 1498797175, "last_edit_date": 1498797175, "creation_date": 1498697369, "answer_id": 44814670, "question_id": 39404265, "link": "https://stackoverflow.com/questions/39404265/does-rust-provide-a-way-to-parse-integer-numbers-directly-from-ascii-data-in-byt/44814670#44814670", "title": "Does Rust provide a way to parse integer numbers directly from ASCII data in byte (u8) arrays?", "body": "<p>I do not know of any way in the standard library, but maybe the <a href=\"https://crates.io/crates/atoi\" rel=\"nofollow noreferrer\">atoi</a> crate works for you?</p>\n\n<pre><code>extern crate atoi;\nuse atoi::atoi;\n\nlet (number, digits) = atoi::&lt;u32&gt;(b\"42 is the answer\"); //returns (42,2)\n</code></pre>\n\n<p>You can check if the second element of the tuple is a zero to see if the slice starts with a digit.</p>\n\n<pre><code>let (number, digits) = atoi::&lt;u32&gt;(b\"x\"); //returns (0,0)\nlet (number, digits) = atoi::&lt;u32&gt;(b\"0\"); //returns (0,1)\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7840, "favorite_count": 2, "answer_count": 2, "score": 16, "last_activity_date": 1498797175, "creation_date": 1473398003, "last_edit_date": 1473432654, "question_id": 39404265, "link": "https://stackoverflow.com/questions/39404265/does-rust-provide-a-way-to-parse-integer-numbers-directly-from-ascii-data-in-byt", "title": "Does Rust provide a way to parse integer numbers directly from ASCII data in byte (u8) arrays?", "body": "<p>Rust has <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html#tymethod.from_str\" rel=\"noreferrer\"><code>FromStr</code></a>, however as far as I can see this only takes Unicode text input. Is there an equivalent to this for <code>[u8]</code> arrays?</p>\n\n<p>By \"parse\" I mean take ASCII characters and return an integer, like C's <code>atoi</code> does.</p>\n\n<p>Or do I need to either...</p>\n\n<ul>\n<li>Convert the <code>u8</code> array to a string first, then call <code>FromStr</code>.</li>\n<li>Call out to libc's <code>atoi</code>.</li>\n<li>Write an <code>atoi</code> in Rust.</li>\n</ul>\n\n<p>In nearly all cases the first option is reasonable, however there are cases where files maybe be very large, with no predefined encoding... or contain mixed binary and text, where its most straightforward to read integer numbers as bytes.</p>\n"}, {"tags": ["rust", "closures"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1473370168, "post_id": 39398837, "comment_id": 66127016, "body": "FYI, the <code>for&lt;&#39;r&gt;</code> stuff is called a higher-ranker lifetime bound. There is <a href=\"https://doc.rust-lang.org/book/syntax-index.html\" rel=\"nofollow noreferrer\">a list</a> of syntax stuffs with easier-to-google names."}], "answers": [{"tags": [], "owner": {"reputation": 771, "user_id": 2056507, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/219495fc4a1c75c27711864d5f14287a?s=128&d=identicon&r=PG", "display_name": "George Madrid", "link": "https://stackoverflow.com/users/2056507/george-madrid"}, "is_accepted": false, "score": 1, "last_activity_date": 1473363878, "last_edit_date": 1473363878, "creation_date": 1473363703, "answer_id": 39398989, "question_id": 39398837, "link": "https://stackoverflow.com/questions/39398837/type-mismatch-with-closure/39398989#39398989", "title": "Type mismatch with closure", "body": "<p>As always, I find the answer five minutes after posting the question to SO. </p>\n\n<p>The <code>visit_dirs()</code> function takes a <em>trait object</em>! So, putting the <code>&amp;</code> in front of the closure fixes my mismatch. </p>\n"}], "owner": {"reputation": 771, "user_id": 2056507, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/219495fc4a1c75c27711864d5f14287a?s=128&d=identicon&r=PG", "display_name": "George Madrid", "link": "https://stackoverflow.com/users/2056507/george-madrid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 304, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1473363878, "creation_date": 1473363124, "last_edit_date": 1473363683, "question_id": 39398837, "link": "https://stackoverflow.com/questions/39398837/type-mismatch-with-closure", "title": "Type mismatch with closure", "body": "<p>I know that Rust has a learning curve, but I didn't expect to hit it so hard so soon. I have been trying to figure out this type mismatch for quite a while now, and I'm not making any progress.</p>\n\n<pre><code>struct FileInfo&lt;'a&gt; {\n    path: &amp;'a Path\n}\n\nfn process_file(entry: &amp;DirEntry, map: &amp;HashMap&lt;&amp;str, &amp;FileInfo&gt;) {\n    let pathbuf = entry.path();\n    let mut f = fs::File::open(pathbuf.as_path()).unwrap();\n    let info = FileInfo { path: pathbuf.as_path() };\n}\n\nfn visit_dirs(dir: &amp;Path, cb: &amp;Fn(&amp;DirEntry) -&gt; ()) -&gt; io::Result&lt;()&gt; {\n    // Taken from Rust read_dir docs\n    // ...\n}\n\nfn main() {\n    let path = Path::new(\"/Users/gmadrid/Media/\");\n    let map : HashMap&lt;&amp;str, &amp;FileInfo&gt; = HashMap::new();\n\n    visit_dirs(path, |e: &amp;DirEntry| process_file(e, &amp;map)).unwrap();\n}\n</code></pre>\n\n<p>The call to <code>visit_dirs</code> barfs on my closure with:</p>\n\n<pre><code>src/main.rs:51:19: 51:55 error: mismatched types [E0308]\nsrc/main.rs:51  visit_dirs(path, |e: &amp;DirEntry| process_file(e, &amp;map)).unwrap();\n                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:51:19: 51:55 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/main.rs:51:19: 51:55 note: expected type `&amp;for&lt;'r&gt; std::ops::Fn(&amp;'r std::fs::DirEntry)`\nsrc/main.rs:51:19: 51:55 note:    found type `[closure@src/main.rs:51:19: 51:55 map:_]`\nerror: aborting due to previous error\n</code></pre>\n\n<p>What is the <code>for&lt;'r&gt;</code> stuff? and why is this type mismatch happening. It looks okay to me, but of course, I have no idea what I'm looking for. :-)</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1473381800, "post_id": 39397157, "comment_id": 66130210, "body": "&quot;I was not able to reduce it further&quot; \u2192 You don&#39;t seem to have tried very hard then. <a href=\"https://play.rust-lang.org/?gist=509460c43257a7e046a636fbbcf5fd28&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">I got it down to this</a> before I called it good enough. That makes the error pretty clear."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1473383106, "post_id": 39397157, "comment_id": 66130518, "body": "Likewise, I got <a href=\"http://play.integer32.com/?gist=86dcf7126fa905801fb7b37c6dda15e9\" rel=\"nofollow noreferrer\">it down to this</a>."}], "answers": [{"comments": [{"owner": {"reputation": 2571, "user_id": 445860, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/f4007267844d9a3f8637531bcdc6870c?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/445860/daniel"}, "edited": false, "score": 0, "creation_date": 1473427587, "post_id": 39402563, "comment_id": 66149610, "body": "Thanks for your answer! That clears things up a bit. I still have a question though: Why is PixelP unknown? Isn&#39;t this a type checking problem at the point where <code>ScalarVal(1) + a</code> is executed? So it is already known that <code>a</code> is <code>Gray&lt;...&gt;</code>?! Is there a way to solve this issue?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 2571, "user_id": 445860, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/f4007267844d9a3f8637531bcdc6870c?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/445860/daniel"}, "edited": false, "score": 1, "creation_date": 1473452482, "post_id": 39402563, "comment_id": 66163366, "body": "@Daniel <code>PixelP</code> is unknown because Rust is still checking the <code>where</code> clause; it hasn&#39;t yet gotten to the <code>add</code> method. I don&#39;t see any obvious way to solve this, but it&#39;s probably solvable with enough work."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 6, "last_activity_date": 1473385163, "creation_date": 1473385163, "answer_id": 39402563, "question_id": 39397157, "link": "https://stackoverflow.com/questions/39397157/overflow-evaluating-the-requirement-but-that-kind-of-recursion-should-not-happ/39402563#39402563", "title": "&quot;Overflow evaluating the requirement&quot; but that kind of recursion should not happen at all", "body": "<p><code>ScalarVal(1) + a</code> resolves basically to <code>&lt;ScalarVal(1) as Add&gt;.add(a)</code>, which looks for an <code>Add</code> implementation on <code>ScalarVal</code>.</p>\n\n<p>For whatever reason, this one is checked first:</p>\n\n<pre><code>impl&lt;PixelP&gt; Add&lt;Image&lt;PixelP&gt;&gt; for ScalarVal&lt;&lt;PixelP as Pixel&gt;::ScalarType&gt;\n    where PixelP: Pixel,\n          ScalarVal&lt;&lt;PixelP as Pixel&gt;::ScalarType&gt;: Add&lt;PixelP, Output = PixelP&gt;\n</code></pre>\n\n<p><code>PixelP</code> is uninstantiated at this point, so <code>PixelP: Pixel</code> can't be checked. Thus we get to</p>\n\n<pre><code>ScalarVal&lt;&lt;PixelP as Pixel&gt;::ScalarType&gt;: Add&lt;PixelP, Output = PixelP&gt;\n</code></pre>\n\n<p>Let's simplify this. Since <code>PixelP</code> is unknown right now, <code>&lt;PixelP as Pixel&gt;::ScalarType</code> is unknown. The actual information known by the compiler looks more like</p>\n\n<pre><code>impl&lt;T&gt; Add&lt;Image&lt;T&gt;&gt; for ScalarVal&lt;_&gt;\n    where ScalarVal&lt;_&gt;: Add&lt;T, Output = T&gt;\n</code></pre>\n\n<p>So <code>ScalarVal&lt;_&gt;</code> looks for an <code>Add&lt;T, Output = T&gt;</code>. This means we should look for an appropriate <code>T</code>. Obviously this means looking in <code>ScalarVal</code>'s <code>Add</code> <code>impl</code>s. Looking at the same one, we get</p>\n\n<pre><code>impl&lt;T2&gt; Add&lt;Image&lt;T2&gt;&gt; for ScalarVal&lt;_&gt;\n    where ScalarVal&lt;_&gt;: Add&lt;T2, Output = T2&gt;\n</code></pre>\n\n<p>which means that <em>if</em> this one matches, <code>T == Image&lt;T2&gt;</code>.</p>\n\n<p>Obviously then <code>T2 == Image&lt;T3&gt;</code>, <code>T3 == Image&lt;T4&gt;</code>, etc. This results in an overflow and general sadness. Rust never finds a <em>disproof</em>, so can't ever guarantee it's going down the wrong path.</p>\n"}], "owner": {"reputation": 2571, "user_id": 445860, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/f4007267844d9a3f8637531bcdc6870c?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/445860/daniel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 319, "favorite_count": 1, "accepted_answer_id": 39402563, "answer_count": 1, "score": 6, "last_activity_date": 1473385163, "creation_date": 1473356446, "last_edit_date": 1473357614, "question_id": 39397157, "link": "https://stackoverflow.com/questions/39397157/overflow-evaluating-the-requirement-but-that-kind-of-recursion-should-not-happ", "title": "&quot;Overflow evaluating the requirement&quot; but that kind of recursion should not happen at all", "body": "<p>Here is a kind of lengthy example because I was not able to reduce it further. <a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Amarker%3A%3APhantomData%3B%0Ause%20std%3A%3Aops%3A%3A%7BAdd%2C%20Sub%2C%20Mul%2C%20Div%7D%3B%0A%0Apub%20trait%20Scalar%0A%20%20%20%20%3A%20Sized%20%2B%20Copy%20%2B%20Add%3CSelf%2C%20Output%20%3D%20Self%3E%20%2B%20Sub%3CSelf%2C%20Output%20%3D%20Self%3E%20%2B%20Mul%3CSelf%2C%20Output%20%3D%20Self%3E%20%2B%20Div%3CSelf%2C%20Output%20%3D%20Self%3E%0A%20%20%20%20%7B%0A%7D%0Aimpl%20Scalar%20for%20u32%20%7B%7D%0A%0Apub%20struct%20ScalarVal%3CT%3E(T)%20where%20T%3A%20Scalar%3B%0A%0Apub%20trait%20Pixel%3A%20Sized%20%7B%0A%20%20%20%20type%20ScalarType%3A%20Scalar%3B%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Copy%2C%20Clone%2C%20PartialEq)%5D%0Apub%20struct%20Gray%3CBaseTypeP%3E%0A%20%20%20%20where%20BaseTypeP%3A%20Scalar%0A%7B%0A%20%20%20%20intensity%3A%20BaseTypeP%2C%0A%7D%0A%0Aimpl%3CBaseTypeP%3E%20Pixel%20for%20Gray%3CBaseTypeP%3E%0A%20%20%20%20where%20BaseTypeP%3A%20Scalar%0A%7B%0A%20%20%20%20type%20ScalarType%20%3D%20BaseTypeP%3B%0A%7D%0A%0Aimpl%3CBaseTypeP%3E%20Add%3CGray%3CBaseTypeP%3E%3E%20for%20ScalarVal%3CBaseTypeP%3E%0A%20%20%20%20where%20BaseTypeP%3A%20Scalar%0A%7B%0A%20%20%20%20type%20Output%20%3D%20Gray%3CBaseTypeP%3E%3B%0A%20%20%20%20fn%20add(self%2C%20rhs%3A%20Gray%3CBaseTypeP%3E)%20-%3E%20Gray%3CBaseTypeP%3E%20%7B%0A%20%20%20%20%20%20%20%20unimplemented!()%0A%20%20%20%20%7D%0A%7D%0A%0Apub%20struct%20Image%3CPixelP%3E%0A%20%20%20%20where%20PixelP%3A%20Pixel%0A%7B%0A%20%20%20%20_marker%3A%20PhantomData%3CPixelP%3E%2C%0A%7D%0A%0Aimpl%3CPixelP%3E%20Add%3CImage%3CPixelP%3E%3E%20for%20ScalarVal%3C%3CPixelP%20as%20Pixel%3E%3A%3AScalarType%3E%0A%20%20%20%20where%20PixelP%3A%20Pixel%2C%0A%20%20%20%20%20%20%20%20%20%20ScalarVal%3C%3CPixelP%20as%20Pixel%3E%3A%3AScalarType%3E%3A%20Add%3CPixelP%2C%20Output%20%3D%20PixelP%3E%0A%7B%0A%20%20%20%20type%20Output%20%3D%20Image%3CPixelP%3E%3B%0A%20%20%20%20fn%20add(self%2C%20rhs%3A%20Image%3CPixelP%3E)%20-%3E%20Image%3CPixelP%3E%20%7B%0A%20%20%20%20%20%20%20%20unimplemented!()%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20Gray%3A%3A%3Cu32%3E%20%7B%20intensity%3A%2041%20%7D%3B%0A%20%20%20%20let%20b%20%3D%20ScalarVal(1)%20%2B%20a%3B%0A%7D&amp;version=stable&amp;backtrace=0\">Rust Playground</a></p>\n\n<pre><code>use std::marker::PhantomData;\nuse std::ops::{Add, Sub, Mul, Div};\n\npub trait Scalar\n    : Sized + Copy + Add&lt;Self, Output = Self&gt; + Sub&lt;Self, Output = Self&gt; + Mul&lt;Self, Output = Self&gt; + Div&lt;Self, Output = Self&gt;\n    {}\nimpl Scalar for u32 {}\n\npub struct ScalarVal&lt;T&gt;(T) where T: Scalar;\n\npub trait Pixel: Sized {\n    type ScalarType: Scalar;\n}\n\n#[derive(Debug, Copy, Clone, PartialEq)]\npub struct Gray&lt;BaseTypeP&gt;\n    where BaseTypeP: Scalar\n{\n    intensity: BaseTypeP,\n}\n\nimpl&lt;BaseTypeP&gt; Pixel for Gray&lt;BaseTypeP&gt;\n    where BaseTypeP: Scalar\n{\n    type ScalarType = BaseTypeP;\n}\n\nimpl&lt;BaseTypeP&gt; Add&lt;Gray&lt;BaseTypeP&gt;&gt; for ScalarVal&lt;BaseTypeP&gt;\n    where BaseTypeP: Scalar\n{\n    type Output = Gray&lt;BaseTypeP&gt;;\n    fn add(self, rhs: Gray&lt;BaseTypeP&gt;) -&gt; Gray&lt;BaseTypeP&gt; {\n        unimplemented!()\n    }\n}\n\npub struct Image&lt;PixelP&gt;\n    where PixelP: Pixel\n{\n    _marker: PhantomData&lt;PixelP&gt;,\n}\n\nimpl&lt;PixelP&gt; Add&lt;Image&lt;PixelP&gt;&gt; for ScalarVal&lt;&lt;PixelP as Pixel&gt;::ScalarType&gt;\n    where PixelP: Pixel,\n          ScalarVal&lt;&lt;PixelP as Pixel&gt;::ScalarType&gt;: Add&lt;PixelP, Output = PixelP&gt;\n{\n    type Output = Image&lt;PixelP&gt;;\n    fn add(self, rhs: Image&lt;PixelP&gt;) -&gt; Image&lt;PixelP&gt; {\n        unimplemented!()\n    }\n}\n\nfn main() {\n    let a = Gray::&lt;u32&gt; { intensity: 41 };\n    let b = ScalarVal(1) + a;\n}\n</code></pre>\n\n<p>Can someone explain why I am getting <code>overflow evaluating the requirement &lt;_ as Pixel&gt;::ScalarType</code> in that code snippet?</p>\n\n<p>I am confused because:</p>\n\n<ul>\n<li>If the <code>Add</code> implementation in line 44 is removed the code compiles fine. But that implementation should not be used at all => <code>main()</code> only uses <code>Gray</code> and not <code>Image</code></li>\n<li>The recursion seems to be in nested <code>Image&lt;Image&lt;...&gt;&gt;</code> structs but that should not happen at all?!</li>\n<li>If line 46 is changed to <code>ScalarVal&lt;&lt;PixelP as Pixel&gt;::ScalarType&gt;: Add</code> it compiles fine - But why?</li>\n</ul>\n\n<h2>Some context</h2>\n\n<p>This is part of an image processing library I want to build. The idea is to have different pixel formats (Gray, RGB, Bayer, ...) which can be used for images. Therefore you have <code>Image&lt;Gray&gt;</code> for a grayscale image. Different <code>Pixel</code> implementations can implement different operators, so you can do calculations (e.g. <code>gray_a = gray_b + gray_c</code>) with them. It is also possible to use scalar values in those implementations to do e.g. <code>gray_a = gray_b + ScalarVal(42)</code>. Because I want to make it possible to have <code>ScalarVal</code> as right- <strong>and</strong> left-hand-argument there need to be two implementations (<code>impl Add&lt;Gray&lt;...&gt;&gt; for ScalarVal&lt;...&gt;</code> and <code>impl Add&lt;ScalarVal&lt;...&gt;&gt; for Gray&lt;...&gt;</code>). </p>\n\n<p>Ok and now the <code>Image</code> type should implement all operators which are supported by the used <code>Pixel</code> type. If it is possible to do <code>gray_pixel + Scalar(42)</code> it should also be possible to do <code>gray_image + Scalar(42)</code>.</p>\n\n<p>Hope this kind of makes sense.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1473353189, "last_edit_date": 1473353189, "creation_date": 1473351902, "answer_id": 39396023, "question_id": 39395813, "link": "https://stackoverflow.com/questions/39395813/function-references-expected-bound-lifetime-parameter-found-concrete-lifetime/39396023#39396023", "title": "Function references: expected bound lifetime parameter , found concrete lifetime [E0271]", "body": "<p>Have you tried specifying the type of <code>args</code>? The following compiles for me:</p>\n\n<pre><code>fn main() {\n    let play_callback = |args: &amp;[&amp;str]| {\n        println!(\"Playing something.\");\n        for arg in args {\n            println!(\"{}\", arg);\n        }\n    };\n    let play_command = Command::new(\"play\", &amp;play_callback);\n}\n</code></pre>\n\n<p>I don't know why it is not inferred, though.</p>\n"}, {"tags": [], "owner": {"reputation": 324, "user_id": 1187538, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e85249c32dff4691c307fb916ab4829?s=128&d=identicon&r=PG", "display_name": "Nercury", "link": "https://stackoverflow.com/users/1187538/nercury"}, "is_accepted": true, "score": 6, "last_activity_date": 1473504166, "last_edit_date": 1473504166, "creation_date": 1473353930, "answer_id": 39396545, "question_id": 39395813, "link": "https://stackoverflow.com/questions/39395813/function-references-expected-bound-lifetime-parameter-found-concrete-lifetime/39396545#39396545", "title": "Function references: expected bound lifetime parameter , found concrete lifetime [E0271]", "body": "<p>The easy fix (by ljedrz) is that <code>args: &amp;[&amp;str]</code> is not inferred in this case. However, it may not be enough to solve your problem.</p>\n\n<p>When you use a reference to some trait as a function argument, it is treated as a trait object. In this case, the <code>&amp;Fn</code> is a trait object that references the closure on the stack. </p>\n\n<p>An easy analogy of trait objects are objects that implement interfaces in other languages.</p>\n\n<p>However, lifetimes work a bit differently with the trait objects. You can think of them as \"detached\" from the usual ownership flow. If we were to annotate the <code>Fn</code> trait object lifetime <code>'c</code> in your example, we would get the following code:</p>\n\n<pre><code>pub struct Command&lt;'a&gt; {\n    name: &amp;'a str,\n    callback: &amp;'a for&lt;'c&gt; Fn(&amp;'c [&amp;'c str]) -&gt; ()\n}\n\nimpl &lt;'a&gt; Command&lt;'a&gt; {\n    pub fn new&lt;'r&gt;(name: &amp;'r str, callback: &amp;'r for&lt;'c&gt; Fn(&amp;'c [&amp;'c str]) -&gt; ()) -&gt; Command&lt;'r&gt; {\n        Command {\n            name: name,\n            callback: callback\n        }\n    }\n}\n\nfn main() {\n    let play_callback = |args: &amp;[&amp;str]| {\n        println!(\"Playing something.\");\n        for arg in args {\n            println!(\"{}\", arg);\n        }\n    };\n    let play_command = Command::new(\"play\", &amp;play_callback);\n}\n</code></pre>\n\n<p>In the code above, the lifetime <code>'c</code> describes a scope in which the callback function will be called.</p>\n\n<p>The above code, however, is not very practical. It couples the command to the scope in which the closure was created (remember, the trait object references the closure in that scope). So you can't exit from the function in which your <code>Command</code> was created, because that would destroy the closure!</p>\n\n<p>The likely solution is to store the closure on the heap, in <code>Box&lt;Fn(&amp;[&amp;str])&gt;</code>. The lifetime of a trait object in the box (heap memory) is controlled by the creation and destruction of the box, so it is the broadest possible (<code>'static</code>).</p>\n\n<pre><code>pub struct Command&lt;'a&gt; {\n    name: &amp;'a str,\n    callback: Box&lt;Fn(&amp;[&amp;str]) -&gt; ()&gt;\n}\n\nimpl &lt;'a&gt; Command&lt;'a&gt; {\n    pub fn new&lt;'r&gt;(name: &amp;'r str, callback: Box&lt;Fn(&amp;[&amp;str]) -&gt; ()&gt;) -&gt; Command&lt;'r&gt; {\n        Command {\n            name: name,\n            callback: callback\n        }\n    }\n}\n\nfn main() {\n    let play_callback = |args: &amp;[&amp;str]| {\n        println!(\"Playing something.\");\n        for arg in args {\n            println!(\"{}\", arg);\n        }\n    };\n    let play_command = Command::new(\"play\", Box::new(play_callback));\n}\n</code></pre>\n\n<p>In the example above, the closure will be <em>moved</em> into the box when the box is created, and will be destroyed together with <code>Command</code>.</p>\n"}], "owner": {"reputation": 834, "user_id": 5376375, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/UhEg6.jpg?s=128&g=1", "display_name": "Torsten Scholz", "link": "https://stackoverflow.com/users/5376375/torsten-scholz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 879, "favorite_count": 0, "accepted_answer_id": 39396545, "answer_count": 2, "score": 3, "last_activity_date": 1473504166, "creation_date": 1473351248, "question_id": 39395813, "link": "https://stackoverflow.com/questions/39395813/function-references-expected-bound-lifetime-parameter-found-concrete-lifetime", "title": "Function references: expected bound lifetime parameter , found concrete lifetime [E0271]", "body": "<p>There are already a lot of threads on this topic but I fail to see if the discussed problems apply to my specific problem.</p>\n\n<p>I have a structure that stores a <code>name</code> and a <code>callback</code> function. Stripped down to the problem it looks like this:</p>\n\n<pre><code>pub struct Command&lt;'a&gt; {\n    name: &amp;'a str,\n    callback: &amp;'a Fn(&amp;[&amp;str]) -&gt; ()\n}\n\nimpl &lt;'a&gt; Command&lt;'a&gt; {\n    pub fn new(name: &amp;'a str, callback: &amp;'a Fn(&amp;[&amp;str]) -&gt; ()) -&gt; Command&lt;'a&gt; {\n        Command {\n            name: name,\n            callback: callback\n        }\n    }\n}\n</code></pre>\n\n<p>What I want to do is store a callback function associated with a name (and prob. more stuff in the future).</p>\n\n<p>But when I try to use this bit of code like so:</p>\n\n<pre><code>fn main() {\n    let play_callback = |args| {\n        println!(\"Playing something.\");\n        for arg in args {\n            println!(\"{}\", arg);\n        }\n    };\n    let play_command = Command::new(\"play\", &amp;play_callback);\n}\n</code></pre>\n\n<p>I get the following error message:</p>\n\n<pre><code>src/main.rs:22:42: 22:56 error: type mismatch resolving `for&lt;'r, 'r&gt; &lt;[closure@src/main.rs:16:22: 21:3] as std::ops::FnOnce&lt;(&amp;'r [&amp;'r str],)&gt;&gt;::Output == ()`:\n expected bound lifetime parameter ,\n    found concrete lifetime [E0271]\nsrc/main.rs:22  let play_command = Command::new(\"play\", &amp;play_callback);\n                                                        ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>I tried to inline the closure like this</p>\n\n<pre><code>fn main() {\n    let play_command = Command::new(\"play\", &amp;|args| {\n        println!(\"Playing something.\");\n        for arg in args {\n            println!(\"{}\", arg);\n        }\n    });\n}\n</code></pre>\n\n<p>but then I get another error</p>\n\n<pre><code>src/main.rs:16:47: 21:7 error: borrowed value does not live long enough\n</code></pre>\n\n<p>which I believe I understand why I get.</p>\n\n<p>I tried using a generic type parameter for <code>Command</code> before switching to a function reference first to store in my <code>Command</code> structure, but when I wanted to initialize a <code>HashSet</code> of command objects like this:</p>\n\n<pre><code>let mut commands: HashSet&lt;Command&gt; = HashSet::new();\n</code></pre>\n\n<p>the compiler wanted me to specify the generic parameter which I think I cannot do as that would mean I could only store the same closure in all my <code>Command</code> objects.</p>\n\n<p>So my question would be: How can I achieve what I want and what is the best way to do so (and why)?</p>\n"}, {"tags": ["rust", "mutex"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1473351773, "post_id": 39393008, "comment_id": 66117881, "body": "Admittedly I don&#39;t know how <code>std::lock</code> works, but (unless you follow mmstick&#39;s answer in lumping the data together and locking/unlocking it at once) I don&#39;t see how you could ever <i>guarantee</i> no deadlocks. Sure, you could write a macro to do them in the right order -- but then you&#39;ve just mutated the problem of <i>checking that you always lock them in the right order</i> into the barely-easier problem of <i>checking that you always use the macro and never call .lock() directly</i>. Right?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1473386096, "post_id": 39393008, "comment_id": 66131137, "body": "<a href=\"http://stackoverflow.com/questions/18520983/is-stdlock-ill-defined-unimplementable-or-useless#18521108\">Interesting, related, but (to me) not entirely satisfactory discussion of <code>std::lock</code></a>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1473348416, "post_id": 39394006, "comment_id": 66115788, "body": "Excellent point, but might want to retain the flexibility of independent values."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1473373157, "post_id": 39394006, "comment_id": 66128117, "body": "We can view tuple is just a single type - so that is basically Mutexing a single type. What i am looking for though is a solution to different Mutexs. For granularity you might not want to <i>always</i> lump them into a single tuple/type - then you are sacrificing cases where they could function independent of each other which abound in my code. It&#39;s really a difference betwen <code>Arc&lt;Mutex</code>ing the whole <code>struct</code> vs <code>Arc&lt;Mutex</code>ing individual fields. The latter gives much finer control and my question was about that - is there a facility similar to <code>std::lock</code> of c++."}, {"owner": {"reputation": 2019, "user_id": 78947, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/ec70afaed235b7af53b40b5588d93af8?s=128&d=identicon&r=PG", "display_name": "Simon Elliott", "link": "https://stackoverflow.com/users/78947/simon-elliott"}, "edited": false, "score": 0, "creation_date": 1473419202, "post_id": 39394006, "comment_id": 66144560, "body": "Does this really allow us to lock the mutextes simultaneously, or are they in reality locked one after the other? If so, what order are the mutextes unlocked in?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 2019, "user_id": 78947, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/ec70afaed235b7af53b40b5588d93af8?s=128&d=identicon&r=PG", "display_name": "Simon Elliott", "link": "https://stackoverflow.com/users/78947/simon-elliott"}, "edited": false, "score": 2, "creation_date": 1473431001, "post_id": 39394006, "comment_id": 66151903, "body": "@SimonElliott There is only one <code>Mutex</code> in this solution; it is used to lock a compound value. The values are locked simultaneously because they are controlled by the same mutex."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "is_accepted": false, "score": 4, "last_activity_date": 1473370890, "last_edit_date": 1473370890, "creation_date": 1473346062, "answer_id": 39394006, "question_id": 39393008, "link": "https://stackoverflow.com/questions/39393008/is-there-a-facility-to-lock-multiple-mutexes-in-rust-while-preventing-deadlockin/39394006#39394006", "title": "Is there a facility to lock multiple mutexes in Rust while preventing deadlocking?", "body": "<p>This is easily solved if the <code>Mutex</code> is a tuple with the contained values, so that locking the tuple locks both values simultaneously.</p>\n\n<pre><code>let tuple_mutex = Arc::new(Mutex::new((A, B)));\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 3, "last_activity_date": 1473528267, "creation_date": 1473528267, "answer_id": 39428691, "question_id": 39393008, "link": "https://stackoverflow.com/questions/39393008/is-there-a-facility-to-lock-multiple-mutexes-in-rust-while-preventing-deadlockin/39428691#39428691", "title": "Is there a facility to lock multiple mutexes in Rust while preventing deadlocking?", "body": "<p><strong>No</strong>, Rust does not (or does not yet) have a function equivalent to C++'s <code>std::lock</code>.</p>\n\n<p>Based on the fact that it doesn't seem to be in the <a href=\"https://doc.rust-lang.org/std/sync/index.html\" rel=\"nofollow\"><code>std::sync</code> documentation</a> and Googling brings up nothing useful, I'm pretty confident in this assertion.</p>\n\n<p>Why not? Well, if I may editorialize a bit, having <code>std::lock</code> isn't that great an idea -- deadlock avoidance is nontrivial and every algorithm will have plausible corner cases that result in poor performance or even livelock. There is no one-size-fits-all deadlock avoidance algorithm.</p>\n\n<p>(You could make the same argument for other functions Rust does have, like <code>Vec::sort</code>, but I contend that \"sorting\" is needed in many applications where performance is not critical, and any reasonable sort algorithm will be performant enough for >75% of applications. Deadlock avoidance is mostly necessary only when you are already writing code that needs to perform well.)</p>\n\n<p>Furthermore, putting a deadlock-avoiding <code>lock</code> function in the standard library suggests that it's a good <em>default</em> choice, and encourages its use without regard for its implementation. In reality, most applications probably would do better with a simpler (and less general-purpose) algorithm.</p>\n\n<p><strong>Anyway</strong>, nothing stops you writing your own \"backing off\" algorithm to solve this problem; it's just not part of the standard library.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1231, "favorite_count": 0, "accepted_answer_id": 39428691, "answer_count": 2, "score": 14, "last_activity_date": 1473528770, "creation_date": 1473343319, "last_edit_date": 1473528770, "question_id": 39393008, "link": "https://stackoverflow.com/questions/39393008/is-there-a-facility-to-lock-multiple-mutexes-in-rust-while-preventing-deadlockin", "title": "Is there a facility to lock multiple mutexes in Rust while preventing deadlocking?", "body": "<p>Is there a C++ <code>std::lock()</code> like facility in Rust to prevent deadlocking in code like this:</p>\n\n<pre><code>type Type0 = Arc&lt;Mutex&lt;u8&gt;&gt;;\ntype Type1 = Arc&lt;Mutex&lt;u16&gt;&gt;;\n\nfn foo(a: Type0, b: Type1) {\n    let a_guard = a.lock().unwrap();\n    let b_guard = b.lock().unwrap();\n}\n\nfn bar(a: Type0, b: Type1) {\n    let b_guard = b.lock().unwrap();\n    let a_guard = a.lock().unwrap();\n}\n</code></pre>\n\n<p>If <code>foo</code> is called by thread-0 and <code>bar</code> by thread-1 there is a chance of deadlock. Is there something, hopefully variadic because I can have more than 2, to help me with this or am I all on my own verifying the correctness of order of locking?</p>\n\n<p>From <a href=\"http://en.cppreference.com/w/cpp/thread/lock\" rel=\"nofollow\">the documentation for <code>std::lock</code></a>:</p>\n\n<blockquote>\n  <p>Locks the given <code>Lockable</code> objects <code>lock1</code>, <code>lock2</code>, <code>...</code>, <code>lockn</code> using a deadlock avoidance algorithm to avoid deadlock.</p>\n</blockquote>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "edited": false, "score": 1, "creation_date": 1473360345, "post_id": 39385218, "comment_id": 66122221, "body": "Why is this downvoted? This is a valid question for newbies trying to learn rust. Coming from dynamic languages the rust type system is foreign to me."}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 4, "creation_date": 1473324214, "post_id": 39385329, "comment_id": 66099454, "body": "Additionally, I&#39;d recommend to read the <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">&quot;Error Handling&quot; chapter of the Rust book</a> to understand <i>why</i> this is the way it is."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 9, "last_activity_date": 1473321523, "last_edit_date": 1473321523, "creation_date": 1473320855, "answer_id": 39385329, "question_id": 39385218, "link": "https://stackoverflow.com/questions/39385218/why-does-not-using-unwrap-result-in-an-error/39385329#39385329", "title": "Why does not using unwrap() result in an error?", "body": "<p>It's because <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Read.html#method.read_to_string\"><code>read_to_string()</code></a> is a method available for types implementing the <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Read.html\"><code>io::Read</code></a> trait. What you are attempting to use it on is a <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html\"><code>Result&lt;fs::File, io::Error&gt;</code></a> which does not implement it.</p>\n\n<p>When you call <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap\"><code>unwrap()</code></a> on a <code>Result&lt;T, E&gt;</code>, it yields <code>T</code> - in this case <a href=\"https://doc.rust-lang.org/stable/std/fs/struct.File.html\"><code>fs::File</code></a> that does implement <code>io::Read</code>.</p>\n\n<p>The warning you are getting when you don't call <code>unwrap()</code> on <code>f.read_to_string(&amp;mut s)</code> is because the type <code>Result&lt;T, E&gt;</code> it returns has an attribute <code>#[must_use]</code> which means that it can not just be discarded; you can perform the following <a href=\"https://doc.rust-lang.org/book/patterns.html#ignoring-bindings\">\"ignoring\" assignment</a> to not get the warning:</p>\n\n<p><code>let _ = f.read_to_string(&amp;mut s);</code></p>\n"}], "owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 906, "favorite_count": 0, "closed_date": 1612990066, "accepted_answer_id": 39385329, "answer_count": 1, "score": 5, "last_activity_date": 1473532550, "creation_date": 1473320494, "last_edit_date": 1473532550, "question_id": 39385218, "link": "https://stackoverflow.com/questions/39385218/why-does-not-using-unwrap-result-in-an-error", "closed_reason": "Duplicate", "title": "Why does not using unwrap() result in an error?", "body": "<p>Using Rust 1.11.0, I get the error:</p>\n\n<p><code>error: no method named read_to_string found for type std::result::Result&lt;std::fs::File, std::io::Error&gt; in the current scope</code></p>\n\n<p>when I'm not using <code>unwrap()</code>:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() {\n    let mut f = File::open(\"D:/test/rust/io.txt\"); // Error thrown here\n    let mut s = String::new();\n    f.read_to_string(&amp;mut s);\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>This works fine:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() {\n    let mut f = File::open(\"D:/test/rust/io.txt\").unwrap();\n    let mut s = String::new();\n    f.read_to_string(&amp;mut s); // Warning thrown here\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>But it also gives a warning so I have to add another <code>unwrap()</code> after <code>read_to_string()</code>:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\n\nfn main() {\n    let mut f = File::open(\"D:/test/rust/io.txt\").unwrap();\n    let mut s = String::new();\n    f.read_to_string(&amp;mut s).unwrap(); // Notice the 2nd unwrap here\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>What's happening here? </p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 1, "creation_date": 1473332157, "post_id": 39383809, "comment_id": 66104419, "body": "Manually implement <code>Serialize</code>?"}], "answers": [{"tags": [], "owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "is_accepted": true, "score": 16, "last_activity_date": 1581544883, "last_edit_date": 1581544883, "creation_date": 1473336677, "answer_id": 39390561, "question_id": 39383809, "link": "https://stackoverflow.com/questions/39383809/how-to-transform-fields-during-serialization-using-serde/39390561#39390561", "title": "How to transform fields during serialization using Serde?", "body": "<h3>The <code>serialize_with</code> attribute</h3>\n\n<p>You can use the <a href=\"https://serde.rs/attributes.html#field-attributes\" rel=\"nofollow noreferrer\"><code>serialize_with</code> attribute</a> to provide <a href=\"https://serde.rs/impl-serialize.html\" rel=\"nofollow noreferrer\">a custom serialization function</a> for your field:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use serde::{Serialize, Serializer}; // 1.0.104\n\nfn round_serialize&lt;S&gt;(x: &amp;f32, s: S) -&gt; Result&lt;S::Ok, S::Error&gt;\nwhere\n    S: Serializer,\n{\n    s.serialize_f32(x.round())\n}\n\n#[derive(Debug, Serialize)]\npub struct NodeLocation {\n    #[serde(rename = \"nodeId\")]\n    id: u32,\n    #[serde(serialize_with = \"round_serialize\")]\n    lat: f32,\n    #[serde(serialize_with = \"round_serialize\")]\n    lon: f32,\n}\n</code></pre>\n\n<p>(I've rounded to the nearest integer to avoid the topic \"what is best way to round a float to k decimal places\").</p>\n\n<h3>Implement <code>serde::Serialize</code></h3>\n\n<p>The other semi-manual approach is to create a separate struct with auto-derived serialization, and implement your serialization using that:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use serde::{Serialize, Serializer}; // 1.0.104\n\n#[derive(Debug)]\npub struct NodeLocation {\n    id: u32,\n    lat: f32,\n    lon: f32,\n}\n\nimpl serde::Serialize for NodeLocation {\n    fn serialize&lt;S&gt;(&amp;self, s: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: Serializer,\n    {\n        // Implement your preprocessing in `from`.\n        RoundedNodeLocation::from(self).serialize(s)\n    }\n}\n\n#[derive(Debug, Serialize)]\npub struct RoundedNodeLocation {\n    #[serde(rename = \"nodeId\")]\n    id: u32,\n    lat: f32,\n    lon: f32,\n}\n\nimpl&lt;'a&gt; From&lt;&amp;'a NodeLocation&gt; for RoundedNodeLocation {\n    fn from(other: &amp;'a NodeLocation) -&gt; Self {\n        Self {\n            id: other.id,\n            lat: other.lat.round(),\n            lon: other.lon.round(),\n        }\n    }\n}\n</code></pre>\n\n<p>Notably, this allows you to also add or remove fields as the \"inner\" serialized type can do basically whatever it wants.</p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4351, "favorite_count": 3, "accepted_answer_id": 39390561, "answer_count": 1, "score": 15, "last_activity_date": 1581544883, "creation_date": 1473315662, "last_edit_date": 1518735009, "question_id": 39383809, "link": "https://stackoverflow.com/questions/39383809/how-to-transform-fields-during-serialization-using-serde", "title": "How to transform fields during serialization using Serde?", "body": "<p>How can I apply a transformation to a field before serialization?</p>\n\n<p>For example, how can I ensure that the fields <code>lat</code> and <code>lon</code> in this struct definition are rounded to at most 6 decimal places before being serialized?</p>\n\n<pre><code>#[derive(Debug, Serialize)]\nstruct NodeLocation {\n    #[serde(rename = \"nodeId\")]\n    id: u32,\n    lat: f32,\n    lon: f32,\n}\n</code></pre>\n"}]