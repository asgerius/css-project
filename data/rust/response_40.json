[{"tags": ["generics", "closures", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444862330, "post_id": 33135472, "comment_id": 54085170, "body": "Note that both of your links are very old in Rust terms. Rust 1.0 was released 2015-05-15, and info from before the 1.0 betas is usually suspect."}], "answers": [{"comments": [{"owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "edited": false, "score": 0, "creation_date": 1444867878, "post_id": 33136532, "comment_id": 54086845, "body": "Thank you very much. I am still adapting from C++ and thus also glad to see how iterators are used in this situation in Rust. It is quite radically different, so I never would have thought to return the Mep that way! The copy elision potential in Rust is strong. I will also look out for more standard formatting practices in Rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "edited": false, "score": 1, "creation_date": 1444869349, "post_id": 33136532, "comment_id": 54087208, "body": "<i>how iterators are used in this situation</i> \u2014 one thing I&#39;ve learned from languages with good iterators is that it&#39;s rare to need a mutable container. Also, in many cases you only need a <code>for</code> loop as a place to cause side-effects. <i>more standard formatting practices</i> \u2014 eventually, <a href=\"https://github.com/nrc/rustfmt\" rel=\"nofollow noreferrer\">rustfmt</a> will be the easy solution to getting consistent formatting. ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1444860955, "creation_date": 1444860955, "answer_id": 33136532, "question_id": 33135472, "link": "https://stackoverflow.com/questions/33135472/how-to-pass-some-sort-of-generic-closure-to-a-function-to-generate-specific-valu/33136532#33136532", "title": "How to pass some sort of generic closure to a function to generate specific values", "body": "<p>The primary change you need to make is to alter your generic bound from <code>Fn</code> to <code>FnMut</code>. Once you've done that, you need to make your parameter <code>random_instruction_generator</code> mutable as well:</p>\n\n<pre><code>struct Mep&lt;Ins&gt; {\n    instructions: Vec&lt;Ins&gt;,\n}\n\nimpl&lt;Ins&gt; Mep&lt;Ins&gt; {\n    fn new&lt;F&gt;(total_instructions: usize, mut random_instruction_generator: F) -&gt; Mep&lt;Ins&gt;\n        where F: FnMut() -&gt; Ins\n    {\n        let instructions =\n            (0..total_instructions)\n            .map(|_| random_instruction_generator())\n            .collect();\n\n        Mep {\n            instructions: instructions,\n        }\n    }\n}\n\nstruct FakeRng;\nimpl FakeRng {\n    // https://xkcd.com/221/\n    fn next_u32(&amp;mut self) -&gt; u32 { 4 }\n}\n\nfn main() {\n    let mut rng = FakeRng;\n    let a = Mep::new(80, || rng.next_u32());\n}\n</code></pre>\n\n<p>I also changed your <code>where</code> clause to use a bit more standard formatting and used <code>map</code> and <code>collect</code> instead of having a mutable vector.</p>\n"}], "owner": {"reputation": 105, "user_id": 4147262, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh3.googleusercontent.com/-Lu5bthyKl5Y/AAAAAAAAAAI/AAAAAAAAABE/gQdIKjHlGz8/photo.jpg?sz=128", "display_name": "vadix", "link": "https://stackoverflow.com/users/4147262/vadix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 366, "favorite_count": 0, "accepted_answer_id": 33136532, "answer_count": 1, "score": 2, "last_activity_date": 1444861104, "creation_date": 1444856328, "last_edit_date": 1444861104, "question_id": 33135472, "link": "https://stackoverflow.com/questions/33135472/how-to-pass-some-sort-of-generic-closure-to-a-function-to-generate-specific-valu", "title": "How to pass some sort of generic closure to a function to generate specific values", "body": "<p>This is my first Rust project. I am working on a genetic programming API and I thought it would be neat if the genes on base pairs (in this case instructions) could be made generic (this is a Multi-Expression Program).</p>\n\n<pre><code>pub struct Mep&lt;Ins&gt; {\n    instructions: Vec&lt;Ins&gt;,\n}\n</code></pre>\n\n<p>I attempt to make a new function that takes a closure to generate <code>Ins</code> in the vector:</p>\n\n<pre><code>impl&lt;Ins&gt; Mep&lt;Ins&gt; {\n    //Generates a new Mep with a particular size and takes a closure to generate random instructions\n    pub fn new&lt;F&gt;(total_instructions: usize, random_instruction_generator: F) -&gt; Mep&lt;Ins&gt;\n        where F : Fn() -&gt; Ins {\n        let mut mep = Mep{instructions: Vec::with_capacity(total_instructions)};\n        for _ in 0..total_instructions {\n            mep.instructions.push(random_instruction_generator());\n        }\n        mep\n    }\n}\n</code></pre>\n\n<p>This builds fine, and appears to work, but the intended use case was not fulfilled. I intended for the user to get access to the state of a PRNG that is reused over many calls to the new and other functions. In my case, this is the problematic situation:</p>\n\n<pre><code>...\nextern crate rand;\nuse rand::isaac::Isaac64Rng;\nuse rand::SeedableRng;\nuse rand::Rng;\n#[test]\nfn mep_new() {\n    let mut rng = Isaac64Rng::from_seed(&amp;[1, 2, 3, 4]);\n    let len = 80;\n    let a: Mep&lt;u32&gt; = Mep::new(len, || rng.next_u32());\n}\n</code></pre>\n\n<p>I create a new PRNG and then wish to capture a mutable reference to it in the closure. Rust complains with this compilation error:</p>\n\n<pre><code>tests/mep.rs:12:40: 12:43 error: cannot borrow data mutably in a captured outer variable in an `Fn` closure [E0387]\ntests/mep.rs:12     let a: Mep&lt;u32&gt; = Mep::new(len, || rng.next_u32());\n                                                       ^~~\n</code></pre>\n\n<p>I found that <a href=\"https://mail.mozilla.org/pipermail/rust-dev/2012-May/001810.html\" rel=\"nofollow\">this post</a> infers that the <a href=\"http://www.rust-ci.org/Kimundi/capture.rs/doc/capture/\" rel=\"nofollow\">closure capture syntax</a> has been moved into this new form. So I attempted this:</p>\n\n<pre><code>#[test]\nfn mep_new() {\n    let mut rng = Isaac64Rng::from_seed(&amp;[1, 2, 3, 4]);\n    let len = 80;\n    let a: Mep&lt;u32&gt; = Mep::new(len, |ref rng| rng.next_u32());\n}\n</code></pre>\n\n<p>But the compiler complains:</p>\n\n<pre><code>tests/mep.rs:12:51: 12:61 error: the type of this value must be known in this context\ntests/mep.rs:12     let a: Mep&lt;u32&gt; = Mep::new(len, |ref rng| rng.next_u32());\n                                                                  ^~~~~~~~~~\ntests/mep.rs:12:23: 12:31 error: type mismatch: the type `[closure@tests/mep.rs:12:37: 12:61]` implements the trait `core::ops::Fn&lt;([type error],)&gt;`, but the trait `core::ops::Fn&lt;()&gt;` is required (expected (), found tuple) [E0281]\ntests/mep.rs:12     let a: Mep&lt;u32&gt; = Mep::new(len, |ref rng| rng.next_u32());\n                                      ^~~~~~~~\n</code></pre>\n\n<p>Should I be doing this differently? Is an iterator a better thing to pass to the new function? I would prefer not passing a generic parameter (in this case the PRNG) from new to the closure just to solve this problem. What is a clean way to solve this problem? Instructions will come in different formats and thus need to be generated as such. Alternatively, I can encode a specific instruction format, but I would like to see this generic approach work so I can use the same code for multiple instruction formats, taking advantage of Rust's capabilities.</p>\n"}, {"tags": ["file", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1444853152, "post_id": 33133882, "comment_id": 54080762, "body": "Off-topic, but you should use <a href=\"http://doc.rust-lang.org/std/path/struct.PathBuf.html\" rel=\"nofollow noreferrer\"><code>PathBuf</code></a> to construct paths instead of <code>format!</code>."}, {"owner": {"reputation": 1524, "user_id": 2734279, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89db342fa8d04559c3ea1a6f4f134c43?s=128&d=identicon&r=PG&f=1", "display_name": "Andre S.", "link": "https://stackoverflow.com/users/2734279/andre-s"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444856334, "post_id": 33133882, "comment_id": 54082537, "body": "Thanks @Shepmaster for the PathBuf recommendation."}], "answers": [{"comments": [{"owner": {"reputation": 1524, "user_id": 2734279, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89db342fa8d04559c3ea1a6f4f134c43?s=128&d=identicon&r=PG&f=1", "display_name": "Andre S.", "link": "https://stackoverflow.com/users/2734279/andre-s"}, "edited": false, "score": 0, "creation_date": 1444856174, "post_id": 33135316, "comment_id": 54082460, "body": "Thanks a lot. I didn&#39;t realize unwrap did that. I have a lot of reading to do."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1530678314, "last_edit_date": 1530678314, "creation_date": 1444855757, "answer_id": 33135316, "question_id": 33133882, "link": "https://stackoverflow.com/questions/33133882/fileopen-panics-when-file-doesnt-exist/33135316#33135316", "title": "File::open() panics when file doesn&#39;t exist", "body": "<p>Your program is doing exactly what you have told it to. Check this version:</p>\n\n<pre><code>use std::{error::Error, fs::File, path::PathBuf};\n\nfn main() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    let x = check_file(\"andre\");\n    println!(\"{}\", x.is_ok());\n    Ok(())\n}\n\nfn check_file(user: &amp;str) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    let mut suspend_file_name = PathBuf::from(\"/var/cpanel/suspended/\");\n    suspend_file_name.push(user);\n    let _suspend_file = File::open(suspend_file_name)?;\n\n    Ok(())\n}\n</code></pre>\n\n<p>The output will be <code>false</code>, which indicates that the result of <code>check_file</code> was an <code>Err</code>. If you <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap\" rel=\"nofollow noreferrer\"><code>unwrap</code></a> that:</p>\n\n<blockquote>\n  <p>Panics if the value is an <code>Err</code>, with a panic message provided by the <code>Err</code>'s value.</p>\n</blockquote>\n\n<p><code>File::open</code> doesn't panic, but the <em>method that explicitly says it will panic</em> on an <code>Err</code> value does indeed panic on an <code>Err</code> value.</p>\n"}], "owner": {"reputation": 1524, "user_id": 2734279, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89db342fa8d04559c3ea1a6f4f134c43?s=128&d=identicon&r=PG&f=1", "display_name": "Andre S.", "link": "https://stackoverflow.com/users/2734279/andre-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 996, "favorite_count": 0, "accepted_answer_id": 33135316, "answer_count": 1, "score": 2, "last_activity_date": 1530678314, "creation_date": 1444850589, "last_edit_date": 1530678152, "question_id": 33133882, "link": "https://stackoverflow.com/questions/33133882/fileopen-panics-when-file-doesnt-exist", "title": "File::open() panics when file doesn&#39;t exist", "body": "<p>I'm running this:</p>\n\n<pre><code>use std::error::Error;\nuse std::fs::File;\n\nfn main() {\n    try_main().unwrap();\n}\n\nfn try_main() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    try!(check_file(\"andre\"));\n    Ok(())\n}\n\nfn check_file(user: &amp;str) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    let suspend_file_name = format!(\"{}{}\", \"/var/cpanel/suspended/\", user);\n    let suspend_file = try!(File::open(suspend_file_name));\n\n    Ok(())\n}\n</code></pre>\n\n<p>And getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }', libcore/result.rs:945:5\n</code></pre>\n\n<p>I thought this was supposed to return an error? I am using Rust 1.3 and have no idea what I'm doing wrong.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 2559, "user_id": 740182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/znKux.jpg?s=128&g=1", "display_name": "Akshaydeep Giri", "link": "https://stackoverflow.com/users/740182/akshaydeep-giri"}, "edited": false, "score": 0, "creation_date": 1444885326, "post_id": 33133921, "comment_id": 54091166, "body": "what will be the right way to do something like this in rust?"}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 2559, "user_id": 740182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/znKux.jpg?s=128&g=1", "display_name": "Akshaydeep Giri", "link": "https://stackoverflow.com/users/740182/akshaydeep-giri"}, "edited": false, "score": 1, "creation_date": 1444919716, "post_id": 33133921, "comment_id": 54112139, "body": "@GOD restructure your code so that you aren&#39;t holding on to references to things which are being mutated"}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": true, "score": 5, "last_activity_date": 1444850735, "creation_date": 1444850735, "answer_id": 33133921, "question_id": 33133329, "link": "https://stackoverflow.com/questions/33133329/why-do-i-get-the-error-cannot-borrow-x-as-mutable-more-than-once/33133921#33133921", "title": "Why do I get the error &quot;cannot borrow x as mutable more than once&quot;?", "body": "<p>The function <code>Point::get</code> mutates the <code>Point</code> that it is called on. The function <code>Point::current</code> returns a reference to a part of the <code>Point</code> that it is called on. So, when you write</p>\n\n<pre><code>while let Some(token) = self.current() {\n    println!(\"{:?}\", token); \n    let _ = self.get();\n}\n</code></pre>\n\n<p><code>token</code> is a reference to something stored in <code>self</code>. Because mutating <code>self</code> might change or delete whatever <code>token</code> points to, the compiler prevents you from calling <code>self.get()</code> while the variable <code>token</code> is in scope.</p>\n"}, {"tags": [], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "is_accepted": false, "score": 2, "last_activity_date": 1444913668, "creation_date": 1444913668, "answer_id": 33149143, "question_id": 33133329, "link": "https://stackoverflow.com/questions/33133329/why-do-i-get-the-error-cannot-borrow-x-as-mutable-more-than-once/33149143#33149143", "title": "Why do I get the error &quot;cannot borrow x as mutable more than once&quot;?", "body": "<p>@Adrian already gave the correct reason for why the compiler is giving the error message. If you bound the mutating expressions within a scope and then call <code>self.get</code> after the scope completion, you can compile the program.<br>\nThe code can be modified as  </p>\n\n<pre><code>loop{\n    {\n        let t = if let Some(token) = self.current(){\n                    token\n                }else{\n                    break\n                };\n        println!(\"{:?}\", t); \n    }\n    let b = self.get();\n    println!(\"{:?}\", b);\n}\n</code></pre>\n"}], "owner": {"reputation": 2559, "user_id": 740182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/znKux.jpg?s=128&g=1", "display_name": "Akshaydeep Giri", "link": "https://stackoverflow.com/users/740182/akshaydeep-giri"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 356, "favorite_count": 0, "accepted_answer_id": 33133921, "answer_count": 2, "score": 1, "last_activity_date": 1444913668, "creation_date": 1444848633, "last_edit_date": 1444851274, "question_id": 33133329, "link": "https://stackoverflow.com/questions/33133329/why-do-i-get-the-error-cannot-borrow-x-as-mutable-more-than-once", "title": "Why do I get the error &quot;cannot borrow x as mutable more than once&quot;?", "body": "<p>I'm implementing a parser in Rust. I have to update the index for the lookahead, but when I call <code>self.get()</code> after <code>self.current()</code> I get an error:</p>\n\n<pre><code>cannot borrow *self as mutable more than once at a time\n</code></pre>\n\n<p>It's confusing since I'm new to Rust. </p>\n\n<pre><code>#[derive(Debug)]\npub enum Token {\n    Random(String),\n    Undefined(String),\n}\n\nstruct Point {\n    token: Vec&lt;Token&gt;,\n    look: usize,\n}\n\nimpl Point {\n    pub fn init(&amp;mut self){\n        while let Some(token) = self.current(){\n            println!(\"{:?}\", token); \n            let _ = self.get();\n        }\n    }\n\n    pub fn current(&amp;mut self) -&gt; Option&lt;&amp;Token&gt; {\n        self.token.get(self.look)\n    }\n\n    pub fn get(&amp;mut self) -&gt; Option&lt;&amp;Token&gt; {\n        let v = self.token.get(self.look);\n        self.look += 1;\n        v\n    }\n\n}\n\nfn main(){\n    let token_list = vec![Token::Undefined(\"test\".to_string()),\n                     Token::Random(\"test\".to_string())];\n\n    let mut o = Point{ token: token_list, look: 0 };\n    o.init();\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1444796939, "post_id": 33116457, "comment_id": 54047146, "body": "It&#39;s not clear what your problem actually is.  &quot;Return value from match to Err(e)&quot; just doesn&#39;t make any sense, and everything you&#39;ve described sounds like it <i>should</i> work.  Your best bet is to update the question including a minimal, compilable example of what you&#39;re trying and the output of the compiler.  Also, a clear indication of what <i>result</i> you&#39;re trying to get (what should happen after this &quot;return&quot;) would help."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 13, "last_activity_date": 1444807860, "creation_date": 1444807860, "answer_id": 33119238, "question_id": 33116457, "link": "https://stackoverflow.com/questions/33116457/return-value-from-match-to-erre/33119238#33119238", "title": "Return value from match to Err(e)", "body": "<p>The same way you \"returned\" <code>buffer_length</code> from inside the <code>Ok</code> arm, you can simply \"return\" a <code>0</code> from the <code>Err</code> arm by leaving the trailing expression without <code>return</code> or a semicolon.</p>\n\n<p><code>return</code> always returns from a function. If you want to get the value of an expression, there's nothing you need to do in Rust. This always happens automatically.</p>\n\n<p>This works for the same reason your <code>let s = 0; s</code> workaround worked. All you did was insert a temporary variable, but you can also directly let the expression get forwarded to the outer expression.</p>\n\n<pre><code>let buffer_length = match stream.read(&amp;mut buffer) {\n    Err(e) =&gt; {\n         println!(\"Error reading from socket stream: {}\", e);\n         0\n    },\n    Ok(buffer_length) =&gt; {\n        stream.write(&amp;buffer).unwrap();\n        buffer_length\n    },\n};\n</code></pre>\n"}], "owner": {"reputation": 247, "user_id": 3900503, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/f073c754c2c57da87df3689c311c6614?s=128&d=identicon&r=PG&f=1", "display_name": "jmoggr", "link": "https://stackoverflow.com/users/3900503/jmoggr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7851, "favorite_count": 1, "accepted_answer_id": 33119238, "answer_count": 1, "score": 8, "last_activity_date": 1444828752, "creation_date": 1444795729, "last_edit_date": 1444828752, "question_id": 33116457, "link": "https://stackoverflow.com/questions/33116457/return-value-from-match-to-erre", "title": "Return value from match to Err(e)", "body": "<p>I'm trying to write a simple TCP echo server in Rust, and I'm a little confused over how to return a value from a match to Err.</p>\n\n<p>I know the return type is supposed to be <code>usize</code>, and I'd like to return a zero. In other languages, I would just <code>return 0;</code> but Rust doesn't let me. I've also tried <code>usize::Zero()</code>. I did get it to work by doing <code>let s:usize = 0; s</code> but that seems awfully silly and I imagine there would be a better way to do it.</p>\n\n<pre><code>let buffer_length =  match stream.read(&amp;mut buffer) {\n    Err(e) =&gt; {\n         println!(\"Error reading from socket stream: {}\", e);\n         // what do i return here?\n         // right now i just panic!\n         // return 0;\n    },\n    Ok(buffer_length) =&gt; {\n        stream.write(&amp;buffer).unwrap();\n        buffer_length\n    },\n};\n</code></pre>\n\n<p>I know I could also just not have the <code>match</code> return anything and consume <code>buffer_length</code> inside the <code>match</code> with a function call or something, but I'd prefer not to in this case.</p>\n\n<p>What is the most idiomatic way to handle something like this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1463, "user_id": 558098, "user_type": "registered", "accept_rate": 23, "profile_image": "https://www.gravatar.com/avatar/52d445b3234e100bc93c9accfce29d98?s=128&d=identicon&r=PG", "display_name": "NN_", "link": "https://stackoverflow.com/users/558098/nn"}, "edited": false, "score": 0, "creation_date": 1551274314, "post_id": 33116578, "comment_id": 96580307, "body": "Is it possible in some way to use Mutex without Arc with thread::spawn or I need to write my own wrapper ? In C/C++ I don&#39;t need reference count overhead to use mutex inside the thread."}, {"owner": {"reputation": 779, "user_id": 1524693, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VvPLH.jpg?s=128&g=1", "display_name": "Chinoto Vokro", "link": "https://stackoverflow.com/users/1524693/chinoto-vokro"}, "reply_to_user": {"reputation": 1463, "user_id": 558098, "user_type": "registered", "accept_rate": 23, "profile_image": "https://www.gravatar.com/avatar/52d445b3234e100bc93c9accfce29d98?s=128&d=identicon&r=PG", "display_name": "NN_", "link": "https://stackoverflow.com/users/558098/nn"}, "edited": false, "score": 0, "creation_date": 1553648708, "post_id": 33116578, "comment_id": 97460085, "body": "@NN_ C/C++ compilers have no concept of lifetimes (except Herb Sutter&#39;s optional C++ lifetime checker for MSVC and Clang), thus you can do whatever potentially racy things you like. Rust used to have scoped threads, but the implementation had a lifetime bug, so it was scrapped. Crossbeam solved the lifetime issue by creating a scope around scoped threads that creates a WaitGroup (similar to barrier), clones that WaitGroup into each thread, and then wait for all references to the WaitGroup to be dropped. You could copy Crossbeam&#39;s solution without implementing lifetime safety if you insist."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 36, "last_activity_date": 1582050071, "last_edit_date": 1582050071, "creation_date": 1444796495, "answer_id": 33116578, "question_id": 33116317, "link": "https://stackoverflow.com/questions/33116317/when-would-you-use-a-mutex-without-an-arc/33116578#33116578", "title": "When would you use a Mutex without an Arc?", "body": "<p><code>Arc</code> is of course the most common one in this context, but there are other pointer types that allow sharing. The major (and most common, in the rest of Rust) one is the shared reference <code>&amp;T</code>. This normally doesn't work with <code>std::thread::spawn</code>'d threads, because it generally points to data controlled by some other thread, and is hence usually not <code>'static</code> (particularly so when it is a <code>&amp;Mutex&lt;T&gt;</code>). However, one can use a <a href=\"https://docs.rs/crossbeam/0.7.3/crossbeam/thread/struct.Scope.html#method.spawn\" rel=\"noreferrer\">scoped thread</a> to create a thread that can share data with its parent. E.g.</p>\n\n<pre><code>use crossbeam; // 0.7.3\nuse std::sync::Mutex;\n\nfn main() {\n    let data = Mutex::new(vec![0, 1]);\n\n    crossbeam::scope(|scope| {\n        // these run concurrently:\n        let _guard = scope.spawn(|_| {\n            data.lock().unwrap().push(2);\n        });\n        data.lock().unwrap().push(3);\n    })\n    .unwrap();\n\n    println!(\"{:?}\", data.lock().unwrap());\n    // one of [0, 1, 2, 3] or [0, 1, 3, 2]\n}\n</code></pre>\n\n<p>The type of <code>data</code> in the closure passed to <code>scope.spawn</code> is in fact <code>&amp;Mutex&lt;Vec&lt;i32&gt;&gt;</code> (since it doesn't have the <code>move</code> keyword the closure is using the default capturing style: by reference).</p>\n\n<p><code>&amp;</code> and <code>Arc</code> are the two that can achieve this sort of thread-safe sharing in the standard library/language, but one can also write pointer types that offer thread-safe sharing in external libraries.</p>\n\n<p>However, moving away from the <code>Pointer&lt;Mutex&lt;...&gt;&gt;</code> pattern, it can be useful to have the mutex and the sharing separated, e.g. <code>Arc&lt;Vec&lt;Mutex&lt;T&gt;&gt;&gt;</code> allows one to share some number of <code>Mutex&lt;T&gt;</code>'s without having to <code>Arc</code> each one individually, or maybe one wants to have some abstraction around a <code>Mutex</code>, and so wrap it in a <code>struct</code>:</p>\n\n<pre><code>struct Wrapped {\n    data: Mutex&lt;T&gt;,\n}\nimpl Wrapped {\n    // fancy methods that abstract over `data.lock()`\n}\n</code></pre>\n\n<p>One would likely then see <code>Arc&lt;Wrapped&gt;</code> (or some other pointer that allows sharing).</p>\n"}], "owner": {"reputation": 12790, "user_id": 37181, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/edcdfd5affb524e0f88ec1a00ed3fe5d?s=128&d=identicon&r=PG", "display_name": "Alex Gaynor", "link": "https://stackoverflow.com/users/37181/alex-gaynor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10887, "favorite_count": 5, "accepted_answer_id": 33116578, "answer_count": 1, "score": 41, "last_activity_date": 1582050071, "creation_date": 1444794678, "question_id": 33116317, "link": "https://stackoverflow.com/questions/33116317/when-would-you-use-a-mutex-without-an-arc", "title": "When would you use a Mutex without an Arc?", "body": "<p>An extremely common pattern in Rust is <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, where <code>Arc</code> provides the memory management, and <code>Mutex</code> provides safe multi-threaded access to the resource. What else <em>could</em> be used in place of <code>Arc</code>, and under what circumstances?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1444826520, "post_id": 33116047, "comment_id": 54063557, "body": "You&#39;re definitely right, but that is the behavior I don&#39;t want, I should have been more clear. Because of the lifetime constraint you pointed out all messages would have to be made in advance before the client is ever created! I want these lifetimes (client &amp; message) to be separate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1444830681, "post_id": 33116047, "comment_id": 54066576, "body": "A bit off topic, but I&#39;d highly encourage you to follow the Rust-standard formatting for where clauses. <a href=\"http://is.gd/h0A9ej\" rel=\"nofollow noreferrer\">Something like this</a>. I&#39;m having lots of trouble scanning your code to see how your generics are used. My more personal preference is to always use a where clause instead of inlining it like <code>&lt;A, B: Foo&lt;A&gt;&gt;</code>"}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "edited": false, "score": 0, "creation_date": 1444833006, "post_id": 33116047, "comment_id": 54068302, "body": "I prefer <code>where</code> too (except for lifetimes). Good to know that there&#39;s a standard style, I&#39;ll be happy to follow it."}, {"owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444837298, "post_id": 33116047, "comment_id": 54071387, "body": "@Shepmaster changed the style."}], "answers": [{"tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": true, "score": 3, "last_activity_date": 1444875125, "creation_date": 1444875125, "answer_id": 33138678, "question_id": 33116047, "link": "https://stackoverflow.com/questions/33116047/borrow-inner-data-from-struct-in-a-wrapper-function/33138678#33138678", "title": "Borrow inner data from struct in a wrapper function", "body": "<p>Change <code>PhantomData&lt;P&gt;</code> to <code>PhantomData&lt;fn(P)&gt;</code>. Your type doesn't store <code>P</code>, it operates on <code>P</code>.</p>\n\n<p>The problem here is that you're claiming to <em>store</em> a <code>P</code> which means that the type <code>P</code> must outlive the type <code>Client&lt;S, P&gt;</code>. For <code>P</code> (the packet type) to outlive the <code>Client</code> type, <code>message</code> itself must outlive <code>client</code> because you're borrowing packets from messages. However, in this case, <code>client</code> outlives <code>message</code> because <code>client</code> is allocated first on the stack (and stacks are torn down in reverse order).</p>\n"}], "owner": {"reputation": 770, "user_id": 4917486, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh5.googleusercontent.com/-DLwv2CDyEBE/AAAAAAAAAAI/AAAAAAAAC7c/CxTPiCPEePk/photo.jpg?sz=128", "display_name": "Michael Eden", "link": "https://stackoverflow.com/users/4917486/michael-eden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 33138678, "answer_count": 1, "score": 3, "last_activity_date": 1444875125, "creation_date": 1444792732, "last_edit_date": 1444837269, "question_id": 33116047, "link": "https://stackoverflow.com/questions/33116047/borrow-inner-data-from-struct-in-a-wrapper-function", "title": "Borrow inner data from struct in a wrapper function", "body": "<p>I've been working on making a library (<code>rust-websocket</code>) use more borrows and less owned data. This involved adding a <code>Cow</code> to a struct, which involved adding a lifetime to that struct, which made the <strong>entire library</strong> need lifetimes.</p>\n\n<p>In short I have one problem left, and I've been trying to solve it for days. It can be summarized with this code:</p>\n\n<pre><code>{   // This works great!\n    let mut sender = Wire;\n    let message = Text(\"Hello World!\".to_string());\n    sender.send_message(&amp;message);\n}\n{   // This DOES NOT COMPILE!\n    let mut client = Client {\n        sender: Wire,\n        packet: PhantomData,\n    };\n    let message = Text(\"Hello World!\".to_string());\n    client.send(&amp;message);\n}\n</code></pre>\n\n<p>In the above example <code>client.send</code> is a wrapper around <code>sender.send_message</code>, both have the same definition. Although in the case of <code>client.send</code> the message being send must live <em>longer</em> than the client. In the <code>sender.send_message</code> case the message only has to live for the lifetime of the function call.</p>\n\n<pre><code>use std::borrow::Cow;\nuse std::iter::{Take, Repeat, repeat};\nuse std::marker::PhantomData;\n\ntrait Sender&lt;P&gt; {\n    fn send_packet(&amp;mut self, packet: &amp;P) -&gt; Result&lt;(), ()&gt;;\n\n    fn send_message&lt;'m, M&gt;(&amp;mut self, message: &amp;'m M) -&gt; Result&lt;(), ()&gt;\n        where M: Message&lt;'m, P&gt;,\n              P: 'm\n    {\n        for ref packet in message.iter() {\n            try!( self.send_packet(packet) );\n        }\n        Ok(())\n    }\n}\n\ntrait Message&lt;'p, P&gt;\n    where P: 'p\n{\n    type PacketIterator: Iterator&lt;Item = P&gt;;\n    fn iter(&amp;'p self) -&gt; Self::PacketIterator;\n}\n\n#[derive(Clone, Debug)]\nstruct Packet&lt;'d&gt; {\n    data: Cow&lt;'d, [u8]&gt;,\n}\n\nstruct Text(String);\n\nimpl&lt;'p&gt; Message&lt;'p, Packet&lt;'p&gt;&gt; for Text {\n    type PacketIterator = Take&lt;Repeat&lt;Packet&lt;'p&gt;&gt;&gt;;\n\n    fn iter(&amp;'p self) -&gt; Take&lt;Repeat&lt;Packet&lt;'p&gt;&gt;&gt; {\n        repeat(Packet {\n            data: Cow::Borrowed(self.0.as_bytes()),\n        }).take(1)\n    }\n}\n\nstruct Wire;\n\nimpl&lt;'s&gt; Sender&lt;Packet&lt;'s&gt;&gt; for Wire {\n    fn send_packet&lt;'p&gt;(&amp;mut self, packet: &amp;Packet&lt;'p&gt;) -&gt; Result&lt;(), ()&gt; {\n        println!(\"Sent {:?}\", packet);\n        Ok(())\n    }\n}\n\nstruct Client&lt;P, S&gt; {\n    sender: S,\n    packet: PhantomData&lt;P&gt;\n}\n\nimpl&lt;P, S&gt; Client&lt;P, S&gt;\n    where S: Sender&lt;P&gt;\n{\n    fn send&lt;'m, M&gt;(&amp;mut self, message: &amp;'m M) -&gt; Result&lt;(), ()&gt;\n        where M: Message&lt;'m, P&gt;,\n              P: 'm\n    {\n        self.sender.send_message(message)\n    }\n}\n\nfn main() {\n    {   // This works great!\n        let mut sender = Wire;\n        let message = Text(\"Hello World!\".to_string());\n        sender.send_message(&amp;message);\n    }\n    {   // This DOES NOT COMPILE!\n        let mut client = Client {\n            sender: Wire,\n            packet: PhantomData,\n        };\n        let message = Text(\"Hello World!\".to_string());\n        client.send(&amp;message);\n    }\n}\n</code></pre>\n\n<p>I put the entire <a href=\"http://is.gd/MiBBbG\" rel=\"nofollow\">code on the Rust Playground</a></p>\n\n<p>I wish I could better describe my problem so it can be better searched for, so I will change my title once I know what's going on.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1444783057, "creation_date": 1444783057, "answer_id": 33114815, "question_id": 33114619, "link": "https://stackoverflow.com/questions/33114619/access-to-components-of-a-read-wrapped-by-take-or-chain/33114815#33114815", "title": "Access to components of a Read wrapped by Take or Chain", "body": "<p>I know of one way, but I don't think it will suit your goal.</p>\n\n<pre><code>use std::io::{self, Read};\n\nfn main() {\n    let file = io::empty();\n    let zeroes = io::repeat(0);\n    let mut ten_zeroes = zeroes.take(10);\n    {\n        let mut with_zeroes = file.chain(ten_zeroes.by_ref());\n        let mut buf = [0; 5];  \n        with_zeroes.read(&amp;mut buf);\n    }\n    println!(\"{}\", ten_zeroes.limit());\n}\n</code></pre>\n\n<p>The key being <a href=\"http://doc.rust-lang.org/std/io/trait.Read.html#method.by_ref\" rel=\"nofollow\"><code>Read::by_ref</code></a>, which returns a mutable reference. <code>Read</code> is implemented for any mutable reference to a type that implements <code>Read</code>, so you can give ownership <em>of the reference</em> to <code>Chain</code>.</p>\n\n<p>The trick is that you have to destroy the <code>Chain</code> before you can use the inner object again. It would also be very painful / impossible to store this in the struct.</p>\n\n<p>Your best bet might be to write your own <code>ZeroPadded</code> adapter that combines <code>Chain</code>, <code>Repeat</code>, and <code>Take</code> and provides the <code>limit</code> method.</p>\n\n<p>If no one else gives better answers, I could also see adding a feature request for methods on the adapters. It's not uncommon to have a <code>into_inner</code> method that consumes an adapter and gives back the wrapped item, but you could also have an <code>as_inner</code> that returns a reference to the wrapped object.</p>\n"}], "owner": {"reputation": 149, "user_id": 5443000, "user_type": "registered", "profile_image": "https://graph.facebook.com/10207825667257183/picture?type=large", "display_name": "Peter Bertok", "link": "https://stackoverflow.com/users/5443000/peter-bertok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 280, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1457706734, "creation_date": 1444781414, "last_edit_date": 1457706734, "question_id": 33114619, "link": "https://stackoverflow.com/questions/33114619/access-to-components-of-a-read-wrapped-by-take-or-chain", "title": "Access to components of a Read wrapped by Take or Chain", "body": "<p>I'm writing a Rust implementation of the Google Brotli decompression algorithm, which uses a fixed number of \"implicit zeroes\" at the end of the stream to enable certain optimisations.</p>\n\n<p>The Google C implementation does this using a spaghetti code of various counters, but I'd like to use the adaptors in the Rust std::io library instead. Something like:</p>\n\n<pre><code>pub struct StreamBitReader&lt;R&gt; {\n    reader: Chain&lt;R,Take&lt;Repeat&gt;&gt;,\n    ...\n}\n</code></pre>\n\n<p>where 'R' is the underlying <code>Read</code> that the bit reader struct is wrapping. However, there are a number of cases where the decompression algorithm checks to see if it has \"overrun\" the stream, and it does this by checking the number of implicit zero bytes read. This appears to be impossible in safe Rust, as there is no way to obtain a reference to the components of <code>Chain</code>, unless I'm missing something.</p>\n\n<p>When <code>Chain</code> is constructed, it takes ownership of (moves) the underlying <code>Read</code> structs, which then are hidden in private members.</p>\n\n<p>Is there any way to construct the <code>Take&lt;Repeat&gt;</code> part such that I can access the <code>limit()</code> fn of <code>Take</code> even after the <code>Chain</code> adaptor takes ownership?</p>\n"}, {"tags": ["rust", "snappy"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444786017, "post_id": 33111737, "comment_id": 54044484, "body": "Is snappy compatible with compressing multiple buffers and then packing them all together? The function signature seems to indicate that it expects to compress and decompress everything in one shot. If that&#39;s the case, you&#39;d need to buffer everything (into a <code>Vec&lt;u8&gt;</code>) and then compress it all at the end."}, {"owner": {"reputation": 109, "user_id": 5377817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://lh4.googleusercontent.com/--tH3CFcFKpo/AAAAAAAAAAI/AAAAAAAACKU/lFVjvmgCTqs/photo.jpg?sz=128", "display_name": "Tenzin Rigden", "link": "https://stackoverflow.com/users/5377817/tenzin-rigden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444823973, "post_id": 33111737, "comment_id": 54061794, "body": "You&#39;re right. I initially thought that since I know that the uncompressed size would be constant, I would also be able to separate the buffers and decompress them one by one. But knowing the uncompressed size won&#39;t help me because the compressed size won&#39;t be constant.   I&#39;ll try using a <code>Vec,u8&gt;</code> and see how that impacts performance. Thanks.  Also, how should I deal with this question stackoverflow-wise? Should I delete it, or is there a way to mark it resolved without selecting an answer?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444824497, "post_id": 33111737, "comment_id": 54062129, "body": "I think that the way you&#39;ve asked the question there is an answer, so I&#39;ll post my answer in the next hour or two. The answer just won&#39;t do exactly what you wanted :-)"}], "answers": [{"comments": [{"owner": {"reputation": 109, "user_id": 5377817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://lh4.googleusercontent.com/--tH3CFcFKpo/AAAAAAAAAAI/AAAAAAAACKU/lFVjvmgCTqs/photo.jpg?sz=128", "display_name": "Tenzin Rigden", "link": "https://stackoverflow.com/users/5377817/tenzin-rigden"}, "edited": false, "score": 0, "creation_date": 1444836717, "post_id": 33126404, "comment_id": 54070968, "body": "This looks good as something that more or less answered my question. I&#39;ll try this, and something else, out and see how they perform. Thanks again!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1444828611, "creation_date": 1444828611, "answer_id": 33126404, "question_id": 33111737, "link": "https://stackoverflow.com/questions/33111737/using-snappy-compression-with-a-buffer/33126404#33126404", "title": "Using Snappy compression with a buffer", "body": "<p>Since it looks like snappy needs to compress all in one go, you will just need to buffer everything up until the end. You can then flush and compress at the end:</p>\n\n<pre><code>use std::io::{self, Write, Cursor};\n\nfn compress(_data: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n    // The best compression ever\n    b\"compressed\".as_ref().into()\n}\n\nstruct SnappyCompressor&lt;W&gt; {\n    inner: W,\n    buffer: Vec&lt;u8&gt;,\n}\n\nimpl&lt;W&gt; SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    fn new(inner: W) -&gt; Self {\n        SnappyCompressor {\n            inner: inner,\n            buffer: vec![],\n        }\n    }\n}\n\nimpl&lt;W&gt; Write for SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    fn write(&amp;mut self, data: &amp;[u8]) -&gt; io::Result&lt;usize&gt; {\n        self.buffer.extend(data);\n        Ok(data.len())\n    }\n\n    fn flush(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n        let compressed = compress(&amp;self.buffer);\n        self.inner.write_all(&amp;compressed)\n    }\n}\n\nfn main() {\n    let mut output = Cursor::new(vec![]);\n    {\n        let mut compressor = SnappyCompressor::new(output.by_ref());\n        assert_eq!(5, compressor.write(b\"hello\").unwrap());\n        assert_eq!(5, compressor.write(b\"world\").unwrap());\n        compressor.flush().unwrap();\n    }\n    let bytes = output.into_inner();\n    assert_eq!(&amp;b\"compressed\"[..], &amp;bytes[..]);\n}\n</code></pre>\n\n<p>This solution has one big questionable aspect \u2014 we are using <code>flush</code> to mark the end of the stream, but that's not really the meaning of that method. It would probably be far better to use a purely streaming compressor, but sometimes you gotta do what you gotta do.</p>\n\n<p>There's also a few landmines:</p>\n\n<ol>\n<li>You have to explicitly call <code>flush</code></li>\n<li>You can't call <code>flush</code> twice.</li>\n</ol>\n\n<p>To allow the user to simply drop the compressor and have it be finalized, you can implement <code>Drop</code>:</p>\n\n<pre><code>impl&lt;W&gt; Drop for SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    fn drop(&amp;mut self) {\n        self.flush().unwrap();\n    }\n}\n</code></pre>\n\n<p>To prevent attempting flushing twice, you need to add a flag to track that:</p>\n\n<pre><code>fn write(&amp;mut self, data: &amp;[u8]) -&gt; io::Result&lt;usize&gt; {\n    if self.is_flushed {\n        return Err(Error::new(ErrorKind::Other, \"Buffer has already been compressed, cannot add more data\"));\n    }\n\n    self.buffer.extend(data);\n    Ok(data.len())\n}\n\nfn flush(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n    if self.is_flushed {\n        return Ok(())\n    }\n\n    self.is_flushed = true;\n    let compressed = compress(&amp;self.buffer);\n    self.inner.write_all(&amp;compressed)\n}\n</code></pre>\n\n<p>All together, the final version looks like:</p>\n\n<pre><code>use std::io::{self, Write, Cursor, Error, ErrorKind};\n\nfn compress(_data: &amp;[u8]) -&gt; Vec&lt;u8&gt; {\n    // The best compression ever\n    b\"compressed\".as_ref().into()\n}\n\nstruct SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    inner: W,\n    buffer: Vec&lt;u8&gt;,\n    is_flushed: bool,\n}\n\nimpl&lt;W&gt; SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    fn new(inner: W) -&gt; Self {\n        SnappyCompressor {\n            inner: inner,\n            buffer: vec![],\n            is_flushed: false,\n        }\n    }\n\n    // fn into_inner\n}\n\nimpl&lt;W&gt; Write for SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    fn write(&amp;mut self, data: &amp;[u8]) -&gt; io::Result&lt;usize&gt; {\n        if self.is_flushed {\n            return Err(Error::new(ErrorKind::Other, \"Buffer has already been compressed, cannot add more data\"));\n        }\n\n        self.buffer.extend(data);\n        Ok(data.len())\n    }\n\n    fn flush(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n        if self.is_flushed {\n            return Ok(())\n        }\n\n        self.is_flushed = true;\n        let compressed = compress(&amp;self.buffer);\n        self.inner.write_all(&amp;compressed)\n    }\n}\n\nimpl&lt;W&gt; Drop for SnappyCompressor&lt;W&gt;\n    where W: Write\n{\n    fn drop(&amp;mut self) {\n        self.flush().unwrap();\n    }\n}\n\nfn main() {\n    let mut output = Cursor::new(vec![]);\n    {\n        let mut compressor = SnappyCompressor::new(output.by_ref());\n        assert_eq!(5, compressor.write(b\"hello\").unwrap());\n        assert_eq!(5, compressor.write(b\"world\").unwrap());\n        compressor.flush().unwrap();\n    }\n    let bytes = output.into_inner();\n    assert_eq!(&amp;b\"compressed\"[..], &amp;bytes[..]);\n}\n</code></pre>\n"}], "owner": {"reputation": 109, "user_id": 5377817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://lh4.googleusercontent.com/--tH3CFcFKpo/AAAAAAAAAAI/AAAAAAAACKU/lFVjvmgCTqs/photo.jpg?sz=128", "display_name": "Tenzin Rigden", "link": "https://stackoverflow.com/users/5377817/tenzin-rigden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 423, "favorite_count": 0, "accepted_answer_id": 33126404, "answer_count": 1, "score": 1, "last_activity_date": 1444828611, "creation_date": 1444767017, "last_edit_date": 1444767272, "question_id": 33111737, "link": "https://stackoverflow.com/questions/33111737/using-snappy-compression-with-a-buffer", "title": "Using Snappy compression with a buffer", "body": "<p>I'm trying to figure out the best way to use a buffer and <a href=\"https://crates.io/crates/snappy\" rel=\"nofollow\">snappy</a> in Rust. Before, I was writing to a file using <a href=\"https://doc.rust-lang.org/std/io/struct.BufWriter.html\" rel=\"nofollow\"><code>BufWriter</code></a>. But now I want to add compression as well. The above snappy crate's <code>compress</code> function requires a <code>&amp;[u8]</code> as a parameter, but the <code>BufWriter</code> won't give me access to its buffer to pass to snappy. I've looked into two ways to get around this. </p>\n\n<p>In the first way, I use a vector (with_capacity) instead of <code>BufWriter</code> as my buffer and created a write function that will make sure that writing to the vector won't cause it to reallocate. If it would, I instead compress what's currently in the buffer then write it out to a file and free the vector (drain function). I wrote this based off of what <code>BufWriter</code> does. The downside is that since it's a vector, if the buffer goes out of scope, it doesn't automatically flush the buffer out to the file. I have to manually do that in the scope that is writing the files, which I don't like.</p>\n\n<p>In the other way, I more or less copied the <code>BufWriter</code> source code and just changed the <code>flush</code> function to compress their buffer (a vector) before outputting it to the file. This way seems the nicest, but I just don't like the idea of just copying code. </p>\n\n<p>What would be the best way to proceed with these two options, or other options?</p>\n\n<p>If relevant, the objects I write into the buffer are always the same size and my buffer size is a multiple of the object size.</p>\n"}, {"tags": ["optimization", "rust", "micro-optimization"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1444766757, "post_id": 33109882, "comment_id": 54037502, "body": "Note that if you are interested in optimization, it&#39;s usually a good idea to try and use an iterator instead of indexing into the slice, which has a bit of overhead for bounds checks. Use <code>for v in &amp;arr</code> instead when possible."}], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 2, "creation_date": 1444785432, "post_id": 33110250, "comment_id": 54044347, "body": "I think the OP is referring to multiple executions of the entire for loop body, whereas you are addressing (correct me if I&#39;m wrong) the iterations of a single execution of the for loop. In other words, he wants to know if, each time the for loop begins, if the range extents are calculated again, even though they cannot change (because the array length cannot change). Notice his for loop is nested in another loop."}, {"owner": {"reputation": 632, "user_id": 4308511, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56c3c96e5374a48aa733565f9e61711d?s=128&d=identicon&r=PG&f=1", "display_name": "Jakub", "link": "https://stackoverflow.com/users/4308511/jakub"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1444837732, "post_id": 33110250, "comment_id": 54071681, "body": "@BenjaminLindley Yes, that&#39;s exactly what I meant."}], "tags": [], "owner": {"reputation": 435402, "user_id": 179910, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8962238339d771f0348967be6f97b1b?s=128&d=identicon&r=PG", "display_name": "Jerry Coffin", "link": "https://stackoverflow.com/users/179910/jerry-coffin"}, "is_accepted": false, "score": 4, "last_activity_date": 1444788879, "last_edit_date": 1444788879, "creation_date": 1444761673, "answer_id": 33110250, "question_id": 33109882, "link": "https://stackoverflow.com/questions/33109882/does-rust-optimize-for-loops-over-calculated-ranges/33110250#33110250", "title": "Does Rust optimize for loops over calculated ranges?", "body": "<p>At least in a quick check with using <code>arr.len()</code> nested inside another loop, no code seems to be generated for the \"call\" to <code>arr.len()</code> at all. In the generated code, the size of the array is simply hard-coded into the output.</p>\n\n<p>In other words, I would not expect your second snippet to execute any faster than the first one.</p>\n"}, {"comments": [{"owner": {"reputation": 435402, "user_id": 179910, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8962238339d771f0348967be6f97b1b?s=128&d=identicon&r=PG", "display_name": "Jerry Coffin", "link": "https://stackoverflow.com/users/179910/jerry-coffin"}, "edited": false, "score": 0, "creation_date": 1444838919, "post_id": 33117945, "comment_id": 54072477, "body": "This is essentially similar to the answer I had before editing, in response to Benjamin Lindley&#39;s comment."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 435402, "user_id": 179910, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8962238339d771f0348967be6f97b1b?s=128&d=identicon&r=PG", "display_name": "Jerry Coffin", "link": "https://stackoverflow.com/users/179910/jerry-coffin"}, "edited": false, "score": 0, "creation_date": 1444839145, "post_id": 33117945, "comment_id": 54072626, "body": "@JerryCoffin: I am afraid I never saw the previous version of your answer :/"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1444803477, "creation_date": 1444803477, "answer_id": 33117945, "question_id": 33109882, "link": "https://stackoverflow.com/questions/33109882/does-rust-optimize-for-loops-over-calculated-ranges/33117945#33117945", "title": "Does Rust optimize for loops over calculated ranges?", "body": "<p>The <code>..</code> is a range operator, which forms a <a href=\"https://doc.rust-lang.org/core/ops/struct.Range.html\" rel=\"nofollow\"><code>Range&lt;Idx&gt;</code></a> object (or a derivative: <code>RangeFrom</code>, <code>RangeFull</code> or <code>RangeTo</code>). Those objects only contain indexes (the <code>Idx</code> type), so you can rest assured that <code>.len()</code> is only evaluated once.</p>\n\n<hr>\n\n<p>In general, it is a good idea to inspect the LLVM IR. If you have a synthetic example, you can use the playground easily enough. For <a href=\"https://gist.github.com/2d6f71579140a043ebe8\" rel=\"nofollow\">example</a>:</p>\n\n<pre><code>// A black-box prevents optimization, and its calls are easy to spot.\nextern {\n    fn doit(i: i32) -&gt; ();\n}\n\nfn main() {\n    let arr = [1, 2, 3, 4, 5];\n\n    for i in 0..arr.len() {\n        unsafe { doit(arr[i]); }\n    }\n}\n</code></pre>\n\n<p>Yields the following function:</p>\n\n<pre><code>; Function Attrs: uwtable\ndefine internal void @_ZN4main20hd87dea49c835fe43laaE() unnamed_addr #1 {\nentry-block:\n  tail call void @doit(i32 1)\n  tail call void @doit(i32 2)\n  tail call void @doit(i32 3)\n  tail call void @doit(i32 4)\n  tail call void @doit(i32 5)\n  ret void\n}\n</code></pre>\n\n<p>In this case, with a fixed length, there is no loop at all: it has been unrolled.</p>\n"}], "owner": {"reputation": 632, "user_id": 4308511, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56c3c96e5374a48aa733565f9e61711d?s=128&d=identicon&r=PG&f=1", "display_name": "Jakub", "link": "https://stackoverflow.com/users/4308511/jakub"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 478, "favorite_count": 0, "accepted_answer_id": 33117945, "answer_count": 2, "score": 1, "last_activity_date": 1444803477, "creation_date": 1444760417, "last_edit_date": 1444764296, "question_id": 33109882, "link": "https://stackoverflow.com/questions/33109882/does-rust-optimize-for-loops-over-calculated-ranges", "title": "Does Rust optimize for loops over calculated ranges?", "body": "<p>As an exercise I'm trying to micro-optimize code in Rust 1.3.0. I have a loop of a loop over an array. Something like this:</p>\n\n<pre><code>loop {\n    for i in 0..arr.len() {\n        // something happens here\n    }\n}\n</code></pre>\n\n<p>Since arrays are fixed size in Rust, will the compiler optimize the code by evaluating <code>arr.len()</code> just once and reusing the value, or will the expression be evaluated with each pass of the top-level loop? The question can be expanded to more calculation-heavy functions without side-effects, other than <code>arr.len()</code>.</p>\n\n<p>In other words, would the above code be equivalent to this:</p>\n\n<pre><code>let arr_len = arr.len();\n\nloop {\n    for i in 0..arr_len {\n        // something happens here\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 16, "creation_date": 1444734061, "post_id": 33099021, "comment_id": 54016656, "body": "Careful! <code>cls</code> only exists on Windows. In *nix, the command is <code>clear</code>. In general, it wouldn&#39;t be recommendable to use system commands for that. This goes through a lot of work: finding the command, starting the process, binding stdout, etc. I would try to stick to libc in this case."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1444802835, "post_id": 33099021, "comment_id": 54049073, "body": "I also wonder why this is seen as &quot;better&quot;. It&#39;s non-portable and a mouthful, what&#39;s better about it?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1444807505, "post_id": 33099021, "comment_id": 54051432, "body": "it&#39;s not unsafe and uses Rust&#39;s <code>Result</code> type to guarantee that you check that it worked. Even if you simply take the program to linux, at least you get a nice failure. If you want a one-liner that runs on all systems you can start chaining the commands: <code>assert!(Command::new(&quot;cls&quot;).status().or_else(|_| Command::new(&quot;clear&quot;)).unwrap().success())</code>"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1444893304, "post_id": 33099021, "comment_id": 54094365, "body": "I wonder if one of the terminal related crates have a clear command... Couldn&#39;t find anything though."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1508364309, "last_edit_date": 1508364309, "creation_date": 1444728573, "answer_id": 33099021, "question_id": 33098685, "link": "https://stackoverflow.com/questions/33098685/how-to-clear-the-command-line/33099021#33099021", "title": "How to clear the command line?", "body": "<p>You could use <a href=\"http://doc.rust-lang.org/libc/libc/funcs/c95/stdlib/fn.system.html\" rel=\"nofollow noreferrer\">C's <code>system</code> function</a> through the <a href=\"https://crates.io/crates/libc\" rel=\"nofollow noreferrer\"><code>libc</code></a> crate. But fortunately there's a much better way: <a href=\"https://doc.rust-lang.org/stable/std/process/struct.Command.html\" rel=\"nofollow noreferrer\"><code>std::process::Command</code></a>.</p>\n\n<p>A quick and dirty way to call <code>cls</code> would be</p>\n\n<pre><code>if std::process::Command::new(\"cls\").status().unwrap().success() {\n    println!(\"screen successfully cleared\");\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 308, "user_id": 9423933, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-54M4uAWlJ5I/AAAAAAAAAAI/AAAAAAAAAfI/Hxf9Ac4CubY/photo.jpg?sz=128", "display_name": "John Doe", "link": "https://stackoverflow.com/users/9423933/john-doe"}, "edited": false, "score": 0, "creation_date": 1610400935, "post_id": 46816921, "comment_id": 116116679, "body": "None of the other comments worked for me either. This worked. But it might be a notable mention for others that you might need to do something like <code>for _ in 0..screen_buffer.dwSize.Y { println!(&quot;&quot;); }</code> after <code>let coord_screen = COORD { X: 0, Y: 0 };</code>. Why? Because this posted method doesn&#39;t ALWAYS clear everything, but if you output newlines it will definitely clear everything. I had special color blocks that weren&#39;t cleared by this method, although ascii text was"}], "tags": [], "owner": {"reputation": 2809, "user_id": 6720987, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/0TSHr.png?s=128&g=1", "display_name": "Jan-Fokke", "link": "https://stackoverflow.com/users/6720987/jan-fokke"}, "is_accepted": false, "score": 3, "last_activity_date": 1508364158, "last_edit_date": 1508364158, "creation_date": 1508351440, "answer_id": 46816921, "question_id": 33098685, "link": "https://stackoverflow.com/questions/33098685/how-to-clear-the-command-line/46816921#46816921", "title": "How to clear the command line?", "body": "<p>The mentioned methods did not work for me</p>\n\n<blockquote>\n  <p>The following method works in windows cmd</p>\n</blockquote>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[dependencies]\nwinapi = \"0.2.8\"\nkernel32-sys = \"0.2.1\"\n</code></pre>\n\n<p><strong>Code</strong></p>\n\n<pre><code>extern crate kernel32;\nextern crate winapi;\n\nuse winapi::HANDLE;\nuse winapi::wincon::CONSOLE_SCREEN_BUFFER_INFO;\nuse winapi::wincon::COORD;\nuse winapi::wincon::SMALL_RECT;\nuse winapi::WORD;\nuse winapi::DWORD;\n\nstatic mut CONSOLE_HANDLE: Option&lt;HANDLE&gt; = None;\n\n\nfn get_output_handle() -&gt; HANDLE {\n    unsafe {\n        if let Some(handle) = CONSOLE_HANDLE {\n            return handle;\n        } else {\n            let handle = kernel32::GetStdHandle(winapi::STD_OUTPUT_HANDLE);\n            CONSOLE_HANDLE = Some(handle);\n            return handle;\n        }\n    }\n}\n\nfn get_buffer_info() -&gt; winapi::CONSOLE_SCREEN_BUFFER_INFO {\n    let handle = get_output_handle();\n    if handle == winapi::INVALID_HANDLE_VALUE {\n        panic!(\"NoConsole\")\n    }\n    let mut buffer = CONSOLE_SCREEN_BUFFER_INFO {\n        dwSize: COORD { X: 0, Y: 0 },\n        dwCursorPosition: COORD { X: 0, Y: 0 },\n        wAttributes: 0 as WORD,\n        srWindow: SMALL_RECT {\n            Left: 0,\n            Top: 0,\n            Right: 0,\n            Bottom: 0,\n        },\n        dwMaximumWindowSize: COORD { X: 0, Y: 0 },\n    };\n    unsafe {\n        kernel32::GetConsoleScreenBufferInfo(handle, &amp;mut buffer);\n    }\n    buffer\n}\n\nfn clear() {\n    let handle = get_output_handle();\n    if handle == winapi::INVALID_HANDLE_VALUE {\n        panic!(\"NoConsole\")\n    }\n\n    let screen_buffer = get_buffer_info();\n    let console_size: DWORD = screen_buffer.dwSize.X as u32 * screen_buffer.dwSize.Y as u32;\n    let coord_screen = COORD { X: 0, Y: 0 };\n\n    let mut amount_chart_written: DWORD = 0;\n    unsafe {\n        kernel32::FillConsoleOutputCharacterW(\n            handle,\n            32 as winapi::WCHAR,\n            console_size,\n            coord_screen,\n            &amp;mut amount_chart_written,\n        );\n    }\n    set_cursor_possition(0, 0);\n}\n\nfn set_cursor_possition(y: i16, x: i16) {\n    let handle = get_output_handle();\n    if handle == winapi::INVALID_HANDLE_VALUE {\n        panic!(\"NoConsole\")\n    }\n    unsafe {\n        kernel32::SetConsoleCursorPosition(handle, COORD { X: x, Y: y });\n    }\n}\n</code></pre>\n\n<p><strong>Example</strong></p>\n\n<pre><code>fn main() {\n    loop {\n        let mut input = String::new();\n        std::io::stdin()\n            .read_line(&amp;mut input)\n            .expect(\"Failed to read line\");\n\n        println!(\"You typed: {}\", input);\n\n        if input.trim() == \"clear\" {\n            clear();\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 309, "user_id": 840010, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/8fc0e8fb7474381c0cb1655e7f0640bc?s=128&d=identicon&r=PG", "display_name": "Tom Tetlaw", "link": "https://stackoverflow.com/users/840010/tom-tetlaw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3609, "favorite_count": 0, "accepted_answer_id": 33099021, "answer_count": 2, "score": 6, "last_activity_date": 1508364309, "creation_date": 1444727694, "last_edit_date": 1508364253, "question_id": 33098685, "link": "https://stackoverflow.com/questions/33098685/how-to-clear-the-command-line", "title": "How to clear the command line?", "body": "<p>Is there a Rust equivalent to the <code>system</code> function in the C/C++ standard library? Specifically I am trying to use <code>cls</code> to clear the command line.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1444684288, "post_id": 33090102, "comment_id": 53996511, "body": "That makes a boatload of sense. Thanks for the clear explanation."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1444686648, "post_id": 33090102, "comment_id": 53997524, "body": "What is the <code>for</code> used for there?"}, {"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1444690490, "post_id": 33090102, "comment_id": 53998877, "body": "@Kroltan When I was trying to fix my problem, I figured out I needed to somehow make the <code>Fn(&amp;&#39;a u32)</code> be generic over some lifetime <code>&#39;a</code>, but I couldn&#39;t figure out where to put it. <code>Fn&lt;&#39;a&gt;(&amp;&#39;a u32)</code> is obviously wrong. As far as I understand it, the <code>for</code>&#39;s purpose is exactly to allow adding a lifetime there."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1444693131, "post_id": 33090102, "comment_id": 53999656, "body": "@Thierry I see that it defines a lifetime requirement, but I didn&#39;t know this syntax."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 3, "creation_date": 1444697993, "post_id": 33090102, "comment_id": 54000949, "body": "&quot;Higher ranked trait bound,&quot; sometimes abbreviated as HRTB. It&#39;s the only syntax not in the book."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1444698172, "last_edit_date": 1444698172, "creation_date": 1444683502, "answer_id": 33090102, "question_id": 33090037, "link": "https://stackoverflow.com/questions/33090037/value-does-not-live-long-enough-with-explicit-lifetime-but-does-live-long-enoug/33090102#33090102", "title": "Value does not live long enough with explicit lifetime, but does live long enough when omitted", "body": "<p>The problem is that the <em>caller</em> of <code>other_function</code> gets to pick the lifetime that will fill in <code>'a</code>, but you want <code>other_function</code> to do it. You could use a bit of syntax called <em>higher ranked trait bounds</em>:</p>\n\n<pre><code>fn other_function&lt;F&gt;(f: F)\n    where F: for &lt;'a&gt; Fn(&amp;'a u32)\n{\n    let the_value = 0;\n    f(&amp;the_value);\n}\n\nfn main() {\n    other_function(|_| { /* do nothing */ });\n}\n</code></pre>\n\n<p>As you pointed out, in this case, it makes more sense to omit the <code>'a</code> completely. It's possible that your case needs something more complicated, but with your example nothing else makes sense. The caller cannot possibly specify any lifetime that will be compatible with a stack-allocated variable inside the method you are calling.</p>\n"}], "owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "accepted_answer_id": 33090102, "answer_count": 1, "score": 5, "last_activity_date": 1444698172, "creation_date": 1444683246, "last_edit_date": 1444683369, "question_id": 33090037, "link": "https://stackoverflow.com/questions/33090037/value-does-not-live-long-enough-with-explicit-lifetime-but-does-live-long-enoug", "title": "Value does not live long enough with explicit lifetime, but does live long enough when omitted", "body": "<p>I have the following Rust program which passes a closure to a function generic in a lifetime <code>'a</code> and a closure of type <code>F</code>, which calls the closure with a reference to some local data:</p>\n\n<pre><code>fn other_function&lt;'a, F&gt;(f: F)\n    where F: Fn(&amp;'a u32)\n{\n    let the_value = 0;\n    f(&amp;the_value);\n}\n\nfn main() {\n    other_function(|_| { /* do nothing */ });\n}\n</code></pre>\n\n<p>This fails to compile, with the following messages:</p>\n\n<pre><code>&lt;anon&gt;:5:8: 5:17 error: `the_value` does not live long enough\n&lt;anon&gt;:5     f(&amp;the_value);\n                ^~~~~~~~~\n&lt;anon&gt;:3:1: 6:2 note: reference must be valid for the lifetime 'a as defined on the block at 3:0...\n&lt;anon&gt;:3 {\n&lt;anon&gt;:4     let the_value = 0;\n&lt;anon&gt;:5     f(&amp;the_value);\n&lt;anon&gt;:6 }\n&lt;anon&gt;:4:23: 6:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 4:22\n&lt;anon&gt;:4     let the_value = 0;\n&lt;anon&gt;:5     f(&amp;the_value);\n&lt;anon&gt;:6 }\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>My minimal example might be a bit <em>too</em> minimal now, since for this example a valid solution is to remove <code>'a,</code> and <code>'a</code>. However, I have a similar situation in a more complicated program in which explicit lifetimes seem required.</p>\n\n<p>Is there a way of specifying lifetimes manually, such that the above program gets accepted by the compiler?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1444644199, "post_id": 33074430, "comment_id": 53973423, "body": "In your example, please add an example use of your SFunction \u2013 I believe this will help us understand better what you intend to do."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1444653776, "post_id": 33074430, "comment_id": 53979258, "body": "This question has the same diagnosis, reason, and solution as your <a href=\"http://stackoverflow.com/q/32879649/155423\">previous question</a>: use <code>FnOnce</code>."}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 2, "last_activity_date": 1444727084, "creation_date": 1444727084, "answer_id": 33098456, "question_id": 33074430, "link": "https://stackoverflow.com/questions/33074430/how-does-one-properly-handle-complex-recursive-lifetimes/33098456#33098456", "title": "How does one properly handle complex recursive lifetimes?", "body": "<p>the issue is that <code>do_something(&amp;'a mut self)</code> borrows self and will not release it until it's done. But your boxed closure is \"promising\" to keep <code>do_something</code> callable multiple times, which is not possible (as the first call will \"lock\" self).</p>\n\n<p>Either you can remove the dependency on self from <code>do_something</code>:</p>\n\n<pre><code>impl Example {\n     fn function&lt;'a&gt;(&amp;'a mut self) -&gt; SFunction&lt;'a&gt; {\n         let closed_function = move || do_something();\n         SFunction::new(Box::new(closed_function))\n     }                           \n}                 \n\nfn do_something&lt;'a&gt;() -&gt; SFunction&lt;'a&gt; {\n    SFunction::empty()\n}\n</code></pre>\n\n<p>or you use <code>FnOnce</code> instead of <code>FnMut</code> as Shepmaster commented. Note that in this case you're moving ownership of self instead of borrowing and you promise to only ever call the closure once.</p>\n\n<pre><code>struct Example {\n    text: String,\n}\n\nimpl Example {\n     fn function&lt;'a&gt;(self) -&gt; SFunction&lt;'a&gt; {\n         let closed_function = move || self.do_something();\n         SFunction::new(Box::new(closed_function))\n     }                           \n\n     fn do_something&lt;'a&gt;(self) -&gt; SFunction&lt;'a&gt; {\n        SFunction::empty()\n     }\n}                 \n\nstruct SFunction&lt;'a&gt; {\n    f: Option&lt;Box&lt;FnOnce() -&gt; SFunction&lt;'a&gt; + 'a&gt;&gt;,\n}                 \n\nimpl&lt;'a&gt; SFunction&lt;'a&gt; {\n    fn new(f: Box&lt;FnOnce() -&gt; SFunction&lt;'a&gt; + 'a&gt;) -&gt; SFunction&lt;'a&gt; { // or no 'a on store\n        SFunction { f: Some(f) }\n    }   \n\n    fn empty() -&gt; SFunction&lt;'a&gt; {\n        SFunction { f: None }\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 1020, "user_id": 2752850, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e7ea3ae5dd4eb7dea7aa992aa970287?s=128&d=identicon&r=PG", "display_name": "Kites", "link": "https://stackoverflow.com/users/2752850/kites"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 680, "favorite_count": 0, "accepted_answer_id": 33098456, "answer_count": 1, "score": 3, "last_activity_date": 1444727084, "creation_date": 1444630813, "last_edit_date": 1444655262, "question_id": 33074430, "link": "https://stackoverflow.com/questions/33074430/how-does-one-properly-handle-complex-recursive-lifetimes", "title": "How does one properly handle complex recursive lifetimes?", "body": "<p>I have two different structs. The main one, <code>Example</code>, and one that wraps a recursively-typed function, <code>SFunction</code>.</p>\n\n<p>Here is what they look like:</p>\n\n<pre><code>struct Example {\n    text: String,\n}\n\nimpl&lt;'a&gt; Example {\n     fn function(&amp;'a mut self) -&gt; SFunction&lt;'a&gt; {\n         let closed_function = move || self.do_something();\n         SFunction::new(Box::new(closed_function))\n     }                           \n\n     fn do_something(&amp;'a mut self) -&gt; SFunction&lt;'a&gt; {\n        SFunction::empty()\n     }\n}                 \n\nstruct SFunction&lt;'a&gt; {\n    f: Option&lt;Box&lt;FnMut() -&gt; SFunction&lt;'a&gt; + 'a&gt;&gt;,\n}                 \n\nimpl&lt;'a&gt; SFunction&lt;'a&gt; {\n    fn new(f: Box&lt;FnMut() -&gt; SFunction&lt;'a&gt; + 'a&gt;) -&gt; SFunction&lt;'a&gt; { // or no 'a on store\n        SFunction { f: Some(f) }\n    }   \n\n    fn empty() -&gt; SFunction&lt;'a&gt; {\n        SFunction { f: None }\n    }\n}                \n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b3793471d3d9da03e330&amp;version=stable\" rel=\"nofollow\">(Here is a version in the Rust Playground)</a></p>\n\n<p>This does not compile, but I am confused as to why that's the case. I'm certain it has to do with the recursively typed function because the whole closure thing was compiling without that part. </p>\n\n<p>Here is the error message:</p>\n\n<pre><code>src/main.rs:34:45: 34:59 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements\nsrc/main.rs:34          let closed_function = move || self.do_something();\n                                                           ^~~~~~~~~~~~~~\nnote: in expansion of closure expansion\nsrc/main.rs:34:32: 34:59 note: expansion site\nsrc/main.rs:34:40: 34:59 note: first, the lifetime cannot outlive the lifetime  as defined on the block at 34:39...\nsrc/main.rs:34          let closed_function = move || self.do_something();\n                                                      ^~~~~~~~~~~~~~~~~~~\nsrc/main.rs:34:40: 34:44 note: ...so that closure can access `self`\nsrc/main.rs:34          let closed_function = move || self.do_something();\n                                                      ^~~~\nnote: in expansion of closure expansion\nsrc/main.rs:34:32: 34:59 note: expansion site\nsrc/main.rs:33:49: 36:7 note: but, the lifetime must be valid for the lifetime 'a as defined on the block at 33:48...\nsrc/main.rs:33      fn function(&amp;'a mut self) -&gt; SFunction&lt;'a&gt; {\nsrc/main.rs:34          let closed_function = move || self.do_something();\nsrc/main.rs:35          SFunction::new(Box::new(closed_function))\nsrc/main.rs:36      }\nsrc/main.rs:35:10: 35:51 note: ...so that expression is assignable (expected `SFunction&lt;'a&gt;`, found `SFunction&lt;'_&gt;`)\nsrc/main.rs:35          SFunction::new(Box::new(closed_function))\n</code></pre>\n"}, {"tags": ["closures", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1444605979, "post_id": 33070902, "comment_id": 53960443, "body": "Note that <code>Box&lt;FnMut(...)&gt;</code> does not impl the <code>FnMut</code> trait, but this is something that could potentially be improved in the future."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1444915998, "post_id": 33070902, "comment_id": 54109201, "body": "I have the feeling you&#39;re asking the wrong question. What problem do you really want to solve?"}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1444916638, "post_id": 33070902, "comment_id": 54109674, "body": "I want to store a <code>Map</code> or <code>FlatMap</code> iterator in a struct, with a closure as a parameter. Thanks to reddit, I&#39;ve now just manually created a struct that implements <code>FnMut</code>, and used that as the parameter to <code>map</code>."}], "answers": [{"comments": [{"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1444610072, "post_id": 33071145, "comment_id": 53961296, "body": "Does this mean that the type of the <code>map</code> expression is now difficult to express?"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1444611333, "post_id": 33071145, "comment_id": 53961540, "body": "What do you mean by &quot;difficult to express&quot;?"}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1444615331, "post_id": 33071145, "comment_id": 53962341, "body": "I think the type can&#39;t be written in a &quot;closed form&quot;, without extra generic parameters, e.g. <a href=\"http://is.gd/pttpBX\" rel=\"nofollow noreferrer\">is.gd/pttpBX</a>. This is problematic when trying to store iterators. Usually my solution for this is to box the closure!"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1444915974, "post_id": 33071145, "comment_id": 54109177, "body": "Dereferencing the box in this cotext will consume it and move the boxed function out of the box into the iterator because <code>map</code> takes its argument by value."}, {"owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "edited": false, "score": 0, "creation_date": 1444916603, "post_id": 33071145, "comment_id": 54109653, "body": "So if I want to describe the type of the resulting value (e.g. to store it in a struct), I can&#39;t, because the type of the closure parameter is no longer <code>Box&lt;FnMut ...&gt;</code>, it&#39;s <code>UnnameableType</code>."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 2, "last_activity_date": 1444605532, "creation_date": 1444605532, "answer_id": 33071145, "question_id": 33070902, "link": "https://stackoverflow.com/questions/33070902/how-do-you-use-boxed-closures-in-fnmut-contexts/33071145#33071145", "title": "How do you use boxed closures in FnMut contexts?", "body": "<p>As <code>Box</code> implements the <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Deref.html\" rel=\"nofollow\"><code>Deref</code></a> trait, you can simply derefence your <code>box</code>ed function:</p>\n\n<pre><code>fn main() {\n    let boxed_fn = Box::new(|i| i * 2);\n    for n in (0..10).map(*boxed_fn) {\n        println!(\"{}\", n);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 4398, "user_id": 417803, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/78bce6b348f3c186e4830cf1dde37382?s=128&d=identicon&r=PG", "display_name": "bfops", "link": "https://stackoverflow.com/users/417803/bfops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 668, "favorite_count": 0, "accepted_answer_id": 33071145, "answer_count": 1, "score": 2, "last_activity_date": 1444605532, "creation_date": 1444603487, "question_id": 33070902, "link": "https://stackoverflow.com/questions/33070902/how-do-you-use-boxed-closures-in-fnmut-contexts", "title": "How do you use boxed closures in FnMut contexts?", "body": "<p>How can you use a boxed closure in a context that requires a <code>FnMut</code> type, e.g.</p>\n\n<pre><code>pub fn main() {\n  for n in (0..10).map(Box::new(|i| i * 2)) {\n    println!(\"{}\", n);\n  }\n}\n</code></pre>\n"}, {"tags": ["memory-management", "rust", "heap-memory"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1444597594, "post_id": 33070098, "comment_id": 53958366, "body": "Is this really just a duplicate of <a href=\"http://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">how to make a global mutable singleton</a>?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444663923, "post_id": 33084807, "comment_id": 53986123, "body": "Why do you feel that this question is not a duplicate of the <a href=\"http://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">one suggested</a>?"}, {"owner": {"reputation": 769, "user_id": 5433623, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-0jplvxnVu04/AAAAAAAAAAI/AAAAAAAAGvQ/VLbN9V7SMJ8/photo.jpg?sz=128", "display_name": "Matt Brubeck", "link": "https://stackoverflow.com/users/5433623/matt-brubeck"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1444664686, "post_id": 33084807, "comment_id": 53986610, "body": "There are sort of two questions here. One is &quot;how do I initialize static variables&quot; which is certainly a duplicate. But another is &quot;how do I correctly initialize a raw pointer from a Box&quot; which is the part I focused on."}], "tags": [], "owner": {"reputation": 769, "user_id": 5433623, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-0jplvxnVu04/AAAAAAAAAAI/AAAAAAAAGvQ/VLbN9V7SMJ8/photo.jpg?sz=128", "display_name": "Matt Brubeck", "link": "https://stackoverflow.com/users/5433623/matt-brubeck"}, "is_accepted": true, "score": 4, "last_activity_date": 1444664551, "last_edit_date": 1444664551, "creation_date": 1444663664, "answer_id": 33084807, "question_id": 33070098, "link": "https://stackoverflow.com/questions/33070098/how-to-initialize-static-struct-on-heap-in-a-function/33084807#33084807", "title": "How to initialize static struct on heap in a function?", "body": "<p>You may may to use the <a href=\"https://crates.io/crates/lazy_static\" rel=\"nofollow\">lazy_static</a> crate to initialize your static variable, and then you won't need to deal with raw pointers.</p>\n\n<p>But if you do want to handle this yourself, you can do it like this:</p>\n\n<pre><code>static mut system_ptr: *mut System = 0 as *mut System;\n\nfn init() {\n    let mut system = Box::new(System(Vec::new()));\n    unsafe {\n        system_ptr = &amp;mut *system;\n    }\n    std::mem::forget(system);\n}\n</code></pre>\n\n<p>Passing the box to <code>std::mem::forget</code> leaks it intentionally, ensuring that its destructor never runs.  Instead of storing a pointer to the Box (which is itself just a pointer in a local stack variable), we store a pointer directly to the value on the heap.</p>\n\n<p>The upcoming Rust 1.4 release will have a <code>Box::into_raw</code> function which handles all of this for you.  If you upgrade to Rust 1.4 (currently on the beta channel), you can replace the above code with:</p>\n\n<pre><code>fn init() {\n    unsafe {\n        system_ptr = Box::into_raw(Box::new(System(Vec::new())));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1191, "favorite_count": 1, "accepted_answer_id": 33084807, "answer_count": 1, "score": 3, "last_activity_date": 1444679146, "creation_date": 1444597389, "last_edit_date": 1444679146, "question_id": 33070098, "link": "https://stackoverflow.com/questions/33070098/how-to-initialize-static-struct-on-heap-in-a-function", "title": "How to initialize static struct on heap in a function?", "body": "<p>I have a global struct that stores my objects and has complicated behavior.\nBesides the data it has a global id-generator for objects. They need them for their work too.</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\nstatic mut system_ptr: *mut Box&lt;System&gt; = 0 as *mut Box&lt;System&gt;;\n\nstruct System {\n    data: Vec&lt;Data&gt;,\n    id_mutex: Arc&lt;Mutex&lt;u32&gt;&gt;,\n}\n\nimpl System {\n    fn get_new_id() -&gt; u32 {\n        unsafe {\n            let s = &amp;mut *system_ptr;\n            let mut data = s.id_mutex.lock().unwrap();\n            *data += 1;\n            *data\n        }\n    }\n}\n</code></pre>\n\n<p>I am initializing that struct like this now:</p>\n\n<pre><code>fn main() {\n    let s = System{data: Vec::new(), id_mutex: Arc::new(Mutex::new(0 as u32))};\n    let mut s_box = Box::new(s);\n    unsafe {\n        system_ptr = &amp;mut s_box as *mut Box&lt;System&gt;;\n    }\n\n    // here I have some work with the initialized \"System\"\n\n}\n</code></pre>\n\n<p>When I move initialization code from <code>main()</code> to some function, the <code>Box</code> is dropped and I have a \"use after free\" error and a crash.</p>\n\n<p>I've tried to use <code>&amp;'static</code> but am not fluent enough with Rust's semantics for now, or it was bad idea.</p>\n\n<p>Anyway, how can I move initialization of some <code>Box</code>'ed memory (raw pointer) to a function or method?</p>\n\n<p>Edit: This is not a question about singleton, it's about initialization of any heap variable. Matt, thanks for the right understanding!</p>\n"}, {"tags": ["rust", "ownership"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1444584188, "post_id": 33067664, "comment_id": 53954108, "body": "Perhaps an <a href=\"http://is.gd/Ht32Jl\" rel=\"nofollow noreferrer\">example like this</a>?"}, {"owner": {"reputation": 83, "user_id": 5433698, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b6d480b0bb7fa175665a0475f37ef634?s=128&d=identicon&r=PG&f=1", "display_name": "Mark Mywords", "link": "https://stackoverflow.com/users/5433698/mark-mywords"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444585110, "post_id": 33067664, "comment_id": 53954382, "body": "Hi, I&#39;m sorry; here&#39;s a <a href=\"http://is.gd/9oz2kT\" rel=\"nofollow noreferrer\">the full code</a>. Your example captures the problem exactly."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1444586854, "post_id": 33067664, "comment_id": 53954978, "body": "Related: <a href=\"http://stackoverflow.com/q/32154387/1763356\">stackoverflow.com/q/32154387/1763356</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1444588482, "post_id": 33068472, "comment_id": 53955527, "body": "<i>holding an aliased mutable borrow</i> \u2014 I was under the impression that that is distinctly a thing that safe Rust forbids?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1444589258, "post_id": 33068472, "comment_id": 53955751, "body": "Rust doesn&#39;t forbid aliased mutable borrows - it forbids using more than one at a time, or overlapping them in non-lexical ways. When you write <code>&amp;mut x</code>, <code>x</code> is still a valid stack location - it just isn&#39;t legal to read or write to it."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1444916936, "post_id": 33068472, "comment_id": 54109914, "body": "Interesting. I always wondered what exact rules were the compiler uses to determine move-vs-reborrow. Up until now, I assumed reborrowing only happens in function calls where the function takes a <code>&amp;mut</code>. But apparently, being more explicit <i>within</i> a function also qualifies for a reborrow."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 7, "last_activity_date": 1444587477, "creation_date": 1444587477, "answer_id": 33068472, "question_id": 33067664, "link": "https://stackoverflow.com/questions/33067664/type-inference-and-borrowing-vs-ownership-transfer/33068472#33068472", "title": "Type inference and borrowing vs ownership transfer", "body": "<p>When you do</p>\n\n<pre><code>let y = x;\n</code></pre>\n\n<p>a move happens. <code>x</code> is emptied, so to speak, and ownership is transferred to <code>y</code>.</p>\n\n<p>When you do either of</p>\n\n<pre><code>let y: &amp;mut _ = x;\nlet y: &amp;'a mut _ = x;\n</code></pre>\n\n<p><code>x</code> is reborrowed to aid matching the lifetimes. This roughly translates to</p>\n\n<pre><code>let y: &amp;mut _ = &amp;mut *x;\nlet y: &amp;'a mut _ = &amp;mut *x;\n</code></pre>\n\n<p>This leaves <code>x</code> non-empty, holding an aliased mutable borrow. Assigning to it thus must wait for <code>y</code> to be destroyed. Alternatively, you can pre-move it</p>\n\n<pre><code>let tmp = x;\nlet y: &amp;'a mut _ = tmp;\n</code></pre>\n\n<p>I'll admit it's nonobvious behaviour, and it's a shame that you can't borrow the contents of a value without borrowing the whole value.</p>\n"}], "owner": {"reputation": 83, "user_id": 5433698, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b6d480b0bb7fa175665a0475f37ef634?s=128&d=identicon&r=PG&f=1", "display_name": "Mark Mywords", "link": "https://stackoverflow.com/users/5433698/mark-mywords"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 145, "favorite_count": 1, "accepted_answer_id": 33068472, "answer_count": 1, "score": 7, "last_activity_date": 1444587477, "creation_date": 1444582773, "last_edit_date": 1444584918, "question_id": 33067664, "link": "https://stackoverflow.com/questions/33067664/type-inference-and-borrowing-vs-ownership-transfer", "title": "Type inference and borrowing vs ownership transfer", "body": "<p>I am learning Rust and I've run into some confusing behaviour. The following code compiles fine and works as expected (<strong>edit</strong>: added code other than test function, previously omitted):</p>\n\n<pre><code>struct Container&lt;'a&gt; {\n    contents : &amp;'a mut i32,\n}\n\nfn main() {\n    let mut one = Container { contents: &amp;mut 5 };\n    test(&amp;mut one);\n    println!(\"Contents: {}\",one.contents);\n}\n\nfn test&lt;'a&gt;(mut x : &amp;'a mut Container) {\n    *x.contents += 1;\n    let y = x;\n    *y.contents += 1;\n    x = y;\n    println!(\"{:?}\",*x.contents)\n}\n</code></pre>\n\n<p>Now in the statement</p>\n\n<pre><code>let y = x;\n</code></pre>\n\n<p>the type is inferred. Because <code>x</code> is of type <code>&amp;'a mut Container</code>, I thought that this would be equivalent:</p>\n\n<pre><code>let y: &amp;'a mut Container = x;\n</code></pre>\n\n<p>But when I do that, the compiler takes issue:</p>\n\n<pre><code>test_3.rs:25:5: 25:10 error: cannot assign to `x` because it is borrowed\ntest_3.rs:25     x = y;\n                 ^~~~~\ntest_3.rs:23:33: 23:34 note: borrow of `x` occurs here\ntest_3.rs:23     let y: &amp;'a mut Container = x;\n</code></pre>\n\n<p>How is <code>x</code> not borrowed by that point in the correctly working example? I tested by omitting the line <code>x = y;</code> from the correctly working version and the compiler said:</p>\n\n<pre><code>test_3.rs:24:13: 24:14 note: `x` moved here because it has type `&amp;mut Container&lt;'_&gt;`, which is moved by default\n</code></pre>\n\n<p>So I'm getting a move when I don't explicitly define the type but a borrow otherwise. What is going on, how do I get the same behavior as before while explicitly giving the type, and what is causing move behavior in one case but borrow in the other?</p>\n\n<p><strong>Edited with full program</strong></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "is_accepted": true, "score": 3, "last_activity_date": 1444711211, "last_edit_date": 1444711211, "creation_date": 1444514434, "answer_id": 33059393, "question_id": 33059281, "link": "https://stackoverflow.com/questions/33059281/struct-must-outlive-member-reference/33059393#33059393", "title": "Struct must outlive member reference", "body": "<p>You have to specify that the reference you are returning is tied to the lifetime <code>'a</code> and not the lifetime of self that compiler will infer for you:</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn new(b: &amp;Bar) -&gt; Foo { Foo { bar: b } }\n    fn get_bar(&amp;self) -&gt; &amp;'a Bar { self.bar }\n}\n</code></pre>\n\n<p>This is equivalent to the original code:</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn new(b: &amp;Bar) -&gt; Foo { Foo { bar: b } }\n    fn get_bar&lt;'b&gt;(&amp;'b self) -&gt; &amp;'b Bar { self.bar }\n}\n</code></pre>\n\n<blockquote>\n  <p>Part of me feel like I should need to specify the lifetime of the &amp;Bar\n  being returned from get_bar, but I don't know how to tie that into the\n  lifetime of the Foo struct?</p>\n</blockquote>\n\n<p>The lifetime of <code>Foo</code> does not matter at all in this case.</p>\n"}], "owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 255, "favorite_count": 0, "accepted_answer_id": 33059393, "answer_count": 1, "score": 0, "last_activity_date": 1444711211, "creation_date": 1444513572, "last_edit_date": 1444541266, "question_id": 33059281, "link": "https://stackoverflow.com/questions/33059281/struct-must-outlive-member-reference", "title": "Struct must outlive member reference", "body": "<p>I'm not sure how to properly title this post. I'm fairly new to Rust and trying to compile a program following this simple structure, but it seems to be incorrect, and I'm not sure why.</p>\n\n<pre><code>struct Bar;\n\nimpl Bar {\n    fn do_thing(&amp;self) { println!(\"Ha, do nothing!\") }\n}\n\nstruct Foo&lt;'a&gt; {\n    bar: &amp;'a Bar\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn new(b: &amp;Bar) -&gt; Foo { Foo { bar: b } }\n    fn get_bar(&amp;self) -&gt; &amp;Bar { self.bar }\n}\n\nfn main() {\n    let b = Bar;\n    let b_ref = {\n        let f = Foo::new(&amp;b);\n        f.get_bar()\n    };\n    b_ref.do_thing();\n}\n</code></pre>\n\n<p>The compiler error here claims that <code>f</code> does not live long enough. It shouldn't matter how long <code>f</code> lives though -- <code>b_ref</code> is valid for as long as <code>b</code> is, and I thought that references were <code>Copy</code> so that we wouldn't have to worry about the actual reference in <code>f</code>. Is this relevant?</p>\n\n<p>Part of me feels like I need to specify the lifetime of the <code>&amp;Bar</code> being returned from <code>get_bar</code>, but I don't know how to tie that into the lifetime of the <code>Foo</code> struct?</p>\n\n<p>What am I missing here?</p>\n"}, {"tags": ["audio", "rust", "wav", "sdl-2"], "comments": [{"owner": {"reputation": 3629, "user_id": 379639, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/4fa63505dd4dd4691b87d30508b1bfd3?s=128&d=identicon&r=PG", "display_name": "Xavier Shay", "link": "https://stackoverflow.com/users/379639/xavier-shay"}, "edited": false, "score": 0, "creation_date": 1444500316, "post_id": 33057198, "comment_id": 53934477, "body": "I tried wrapping <code>AudioSpecWAV</code> in a <code>RwLock</code> to give it <code>Sync</code>, but new problem is it doesn&#39;t implement <code>Send</code>."}], "answers": [{"comments": [{"owner": {"reputation": 3629, "user_id": 379639, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/4fa63505dd4dd4691b87d30508b1bfd3?s=128&d=identicon&r=PG", "display_name": "Xavier Shay", "link": "https://stackoverflow.com/users/379639/xavier-shay"}, "edited": false, "score": 0, "creation_date": 1444586958, "post_id": 33060715, "comment_id": 53955016, "body": "The distortion probably came from freq/channels/samples not lining up. You can use <code>AudioCVT</code> to fix: <code>sdl2::audio::AudioCVT::new(wav.format, wav.channels, wav.freq, spec.format, spec.channels, spec.freq).unwrap().convert(wav.buffer().to_vec());</code>"}], "tags": [], "owner": {"reputation": 71, "user_id": 4484166, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-XjhIulthrVE/AAAAAAAAAAI/AAAAAAAAACU/Lq4cyDPA-7w/photo.jpg?sz=128", "display_name": "Andrew Miller", "link": "https://stackoverflow.com/users/4484166/andrew-miller"}, "is_accepted": true, "score": 2, "last_activity_date": 1444535489, "last_edit_date": 1444535489, "creation_date": 1444527376, "answer_id": 33060715, "question_id": 33057198, "link": "https://stackoverflow.com/questions/33057198/how-to-play-a-wav-file-with-rust-sdl2/33060715#33060715", "title": "How to play a WAV file with Rust SDL2?", "body": "<p><code>AudioCallback</code> requires implementers to be <code>Send</code>. You could do that by wrapping <code>AudioSpecWAV</code> in a struct and doing an <code>unsafe impl</code> for <code>Send</code> on that struct, or you could copy the data. Since you shouldn't typically use unsafe unless you know what you are doing is actually safe, you may want to look at the copy approach.</p>\n\n<p>Here is an example of both approaches: </p>\n\n<pre><code>extern crate sdl2;\n\nuse std::thread::{self};\n\nuse sdl2::{Sdl};\nuse sdl2::audio::{self, AudioSpecDesired, AudioSpecWAV, AudioCallback, AudioDevice};\n\n//----------------------------------------------------------------------------//\n\nstruct CopiedData {\n    bytes: Vec&lt;u8&gt;,\n    position: usize\n}\n\nimpl AudioCallback for CopiedData {\n    type Channel = u8;\n\n    fn callback(&amp;mut self, data: &amp;mut [u8]) {\n        let (start, end) = (self.position, self.position + data.len());\n        self.position += data.len();\n\n        let audio_data = &amp;self.bytes[start..end];\n        for (src, dst) in audio_data.iter().zip(data.iter_mut()) {\n            *dst = *src;\n        }\n    }\n}\n\n//----------------------------------------------------------------------------//\n\nstruct WrappedData {\n    audio: AudioSpecWAV,\n    position: usize\n}\n\nimpl AudioCallback for WrappedData {\n    type Channel = u8;\n\n    fn callback(&amp;mut self, data: &amp;mut [u8]) {\n        let (start, end) = (self.position, self.position + data.len());\n        self.position += data.len();\n\n        let audio_data = &amp;self.audio.buffer()[start..end];\n        for (src, dst) in audio_data.iter().zip(data.iter_mut()) {\n            *dst = *src;\n        }\n    }\n}\n\nunsafe impl Send for WrappedData { }\n\n//----------------------------------------------------------------------------//\n\npub fn main() {\n    let sdl_context = sdl2::init().unwrap();\n    let audio_system = sdl_context.audio().unwrap();\n\n    let audio_spec = AudioSpecDesired{ freq: None, channels: None, samples: None };\n    let audio_wav = AudioSpecWAV::load_wav(\"test.wav\").unwrap();\n\n    let copied_data = CopiedData{ bytes: audio_wav.buffer().to_vec(), position: 0 };\n    //let wrapped_data = WrappedData{ audio: audio_wav, position: 0 };\n\n    let audio_device = audio_system.open_playback(None, audio_spec, move |spec| {\n        copied_data\n    }).unwrap();\n\n    audio_device.resume();\n\n    thread::sleep_ms(5000);\n}\n</code></pre>\n\n<p>Note: The WAV I was playing was quite loud (to the point where it sounded distorted) and I am not a sound guy so I am not sure if that had something to do with my code or the WAV file I was using in general.</p>\n"}], "owner": {"reputation": 3629, "user_id": 379639, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/4fa63505dd4dd4691b87d30508b1bfd3?s=128&d=identicon&r=PG", "display_name": "Xavier Shay", "link": "https://stackoverflow.com/users/379639/xavier-shay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1308, "favorite_count": 0, "accepted_answer_id": 33060715, "answer_count": 1, "score": 4, "last_activity_date": 1444535489, "creation_date": 1444499790, "question_id": 33057198, "link": "https://stackoverflow.com/questions/33057198/how-to-play-a-wav-file-with-rust-sdl2", "title": "How to play a WAV file with Rust SDL2?", "body": "<p>I am trying to play a WAV file using <a href=\"https://github.com/AngryLawyer/rust-sdl2\" rel=\"nofollow\"><code>rust-sdl2</code></a>.</p>\n\n<p>I found <a href=\"https://github.com/AngryLawyer/rust-sdl2/blob/master/src/sdl2/audio.rs#L251\" rel=\"nofollow\"><code>AudioSpecWAV</code></a>, but none of the audio initialisation methods seem to take it as a type, and it doesn't implement <code>AudioCallback</code>. I tried implementing this myself with my own callback looking something like:</p>\n\n<pre><code>struct MyWav {\n    wav: AudioSpecWAV,\n    volume: f32,\n    pos: usize,\n}\n\nimpl AudioCallback for MyWav {\n    type Channel = f32;\n\n    fn callback(&amp;mut self, out: &amp;mut [f32]) {\n        for x in out.iter_mut() {\n            *x = match self.wav.buffer().get(self.pos) {\n                Some(v) =&gt; { self.pos += 1; v as f32 },\n                None =&gt; { 0.0 }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>... but I don't know how to work around the following error I get:</p>\n\n<p><code>the traitcore::marker::Sync is not implemented for the type *mut u8</code></p>\n\n<p>This seems to be the <code>audio_buf</code> field of <code>AudioSpecWAV</code>, but if that's not <code>Sync</code> how am I supposed to pass a buffer to the callback?</p>\n\n<p>(for reference, <a href=\"https://github.com/AngryLawyer/rust-sdl2/blob/master/examples/audio-squarewave.rs\" rel=\"nofollow\">here is an example of playing a generated sound</a>)</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1444473574, "post_id": 33051375, "comment_id": 53926316, "body": "It&#39;s probably better to say &quot;reference&quot; instead of &quot;pointer&quot;. The latter makes me think of a <i>raw pointer</i> <code>* const T</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1444461330, "creation_date": 1444461330, "answer_id": 33051375, "question_id": 33051315, "link": "https://stackoverflow.com/questions/33051315/allowing-both-static-variables-and-boxes-as-a-function-argument/33051375#33051375", "title": "Allowing both static variables and boxes as a function argument?", "body": "<p>In both instances, you can pass a pointer to the function.</p>\n\n<pre><code>pub struct MyData {\n    x: i32\n}\n\nstatic ALLOCATED_STATICALLY: MyData = MyData { x: 1 };\n\n// what should my signature be?\nfn use_data(instance: &amp;MyData) {\n    println!(\"{}\", instance.x);\n}\n\nfn main () {\n    use_data(&amp;Box::new(MyData{ x: 2 }));\n    use_data(&amp;ALLOCATED_STATICALLY);\n}\n</code></pre>\n\n<p>Note that in both cases, the caller needs to use the <code>&amp;</code> operator to take the address of the value. In the first call, the operator yields a <code>&amp;Box&lt;MyData&gt;</code>, but the compiler automatically converts it to a <code>&amp;MyData</code> because <code>Box</code> implements the <a href=\"http://doc.rust-lang.org/stable/std/ops/trait.Deref.html\"><code>Deref</code> trait</a>.</p>\n"}], "owner": {"reputation": 492, "user_id": 288570, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/250ce698f19e67da83e2b8a4742ab519?s=128&d=identicon&r=PG", "display_name": "DrakeAnderson", "link": "https://stackoverflow.com/users/288570/drakeanderson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128, "favorite_count": 0, "accepted_answer_id": 33051375, "answer_count": 1, "score": 5, "last_activity_date": 1444489397, "creation_date": 1444460851, "last_edit_date": 1444489397, "question_id": 33051315, "link": "https://stackoverflow.com/questions/33051315/allowing-both-static-variables-and-boxes-as-a-function-argument", "title": "Allowing both static variables and boxes as a function argument?", "body": "<p>I have a struct, which sometimes I instantiate statically, and sometimes I'd like users to allocate on the heap. Is it possible to allow both in as arguments to a function?</p>\n\n<pre><code>pub struct MyData {\n    x: i32\n}\n\nstatic ALLOCATED_STATICALLY: MyData = MyData {x: 1};\n\n// what should my signature be?\nfn use_data(instance: Box&lt;MyData&gt;) {\n    println!(\"{}\", instance.x);\n}\n\nfn main () {\n    use_data(Box::new(MyData{x: 2}));\n    // this doesn't work currently\n    use_data(ALLOCATED_STATICALLY);\n}\n</code></pre>\n"}, {"tags": ["struct", "enums", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444409445, "post_id": 33043280, "comment_id": 53907656, "body": "That&#39;s not really a &quot;struct within an enum&quot;. Such a thing would look like <code>enum Foo { Variant(StructName) }</code>. I forget what is the exact name of what you have, but it <i>might</i> be an &quot;enum struct&quot; or perhaps a &quot;struct variant enum&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444409534, "post_id": 33043280, "comment_id": 53907705, "body": "Related, but doesn&#39;t answer your question, is this recent <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/08/20/virtual-structs-part-3-bringing-enums-and-structs-together/\" rel=\"nofollow noreferrer\">blog series</a> that talks about bringing the two concepts together in some ways."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1444409954, "post_id": 33043280, "comment_id": 53907926, "body": "It&#39;s called &quot;struct-like enum variant&quot; <a href=\"http://doc.rust-lang.org/reference.html#enumerations\" rel=\"nofollow noreferrer\">according</a> to the reference, but I think it is usually called just struct variant."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1444413663, "post_id": 33043280, "comment_id": 53909767, "body": "I found <a href=\"https://github.com/rust-lang/rust/issues/26948\" rel=\"nofollow noreferrer\">this</a> but one person said that (s)he &quot;does not see how this could work&quot;. Any idea why this could not work?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1444415069, "post_id": 33043280, "comment_id": 53910471, "body": "Well, yes, this couldn&#39;t work because <code>strct</code> is of type <code>Enum</code>, not <code>Enum::Struct</code>, because <code>Enum::Struct</code> is not a type per se. Therefore, even if in this particular case it is always <code>Enum::Struct</code>, the compiler can&#39;t reason about it."}], "answers": [{"tags": [], "owner": {"reputation": 769, "user_id": 5433623, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-0jplvxnVu04/AAAAAAAAAAI/AAAAAAAAGvQ/VLbN9V7SMJ8/photo.jpg?sz=128", "display_name": "Matt Brubeck", "link": "https://stackoverflow.com/users/5433623/matt-brubeck"}, "is_accepted": true, "score": 7, "last_activity_date": 1444575471, "creation_date": 1444575471, "answer_id": 33066434, "question_id": 33043280, "link": "https://stackoverflow.com/questions/33043280/update-field-in-struct-like-enum-variant/33066434#33066434", "title": "Update field in struct-like enum variant", "body": "<p>Here's one way to do it:</p>\n\n<pre><code>match my_enum {\n    Enum::Struct { ref mut field1, .. } =&gt; {\n        *field1 = 3;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 777, "favorite_count": 0, "accepted_answer_id": 33066434, "answer_count": 1, "score": 6, "last_activity_date": 1585441988, "creation_date": 1444408689, "last_edit_date": 1444413003, "question_id": 33043280, "link": "https://stackoverflow.com/questions/33043280/update-field-in-struct-like-enum-variant", "title": "Update field in struct-like enum variant", "body": "<p>I am able to use the struct update syntax with a single struct, but I am not able to use it with a struct-like enum variant. Neither can I update a field from a struct-like enum variant with the dot syntax.</p>\n\n<p>For instance:</p>\n\n<pre><code>enum Enum {\n    Struct {\n        field1: i32,\n        field2: i32,\n    }\n}\n\nfn main() {\n    let mut my_enum = Enum::Struct {\n        field1: 1,\n        field2: 2,\n    };\n\n    my_enum = Enum::Struct {\n        field1: 1,\n        .. my_enum\n    };\n\n    my_enum = match my_enum {\n        strct@Enum::Struct { field1, field2 } =&gt; Enum::Struct {\n            field1: 1,\n            .. strct\n        },\n    };\n}\n</code></pre>\n\n<p>Both ways give me an error:</p>\n\n<pre><code>functional record update syntax requires a struct\n</code></pre>\n\n<p>This code:</p>\n\n<pre><code>my_enum.field1 = 3;\n</code></pre>\n\n<p>gives me the following error:</p>\n\n<pre><code>attempted access of field `field1` on type `Enum`, but no field with that name was found\n</code></pre>\n\n<p>How can I update a field from a struct-like enum variant?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2727, "user_id": 2512774, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8323bc93db4001617eaf11df02f33a18?s=128&d=identicon&r=PG", "display_name": "Carl Levasseur", "link": "https://stackoverflow.com/users/2512774/carl-levasseur"}, "edited": false, "score": 1, "creation_date": 1506176224, "post_id": 33041872, "comment_id": 79719419, "body": "@CarlLevasseur I&#39;ve updated the existing sentence about <code>?Sized</code>; is it any clearer?"}, {"owner": {"reputation": 2727, "user_id": 2512774, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8323bc93db4001617eaf11df02f33a18?s=128&d=identicon&r=PG", "display_name": "Carl Levasseur", "link": "https://stackoverflow.com/users/2512774/carl-levasseur"}, "edited": false, "score": 0, "creation_date": 1506177497, "post_id": 33041872, "comment_id": 79719765, "body": "Yes, so if <code>Box&lt;Solid&gt;</code> is a <code>Solid</code>, then to use it in a function that takes a <code>&amp;Solid</code>, we would have 2 &quot;redirections&quot;, does that have an impact on performances ? Also, when is it useful to implement it for references ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2727, "user_id": 2512774, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8323bc93db4001617eaf11df02f33a18?s=128&d=identicon&r=PG", "display_name": "Carl Levasseur", "link": "https://stackoverflow.com/users/2512774/carl-levasseur"}, "edited": false, "score": 0, "creation_date": 1506177887, "post_id": 33041872, "comment_id": 79719868, "body": "@CarlLevasseur <i>does that have an impact on performance</i> \u2014 that depends on a lot of things (frequency of calls, compiler optimizations, monomorphization, etc.). The <b>only</b> answer for that is to profile to be sure. <i>when is it useful to implement it for references</i> \u2014 whenever you have a trait object reference instead of a boxed trait object (<a href=\"https://stackoverflow.com/a/28220053/155423\">example</a>)... I don&#39;t think I fully understand the question."}, {"owner": {"reputation": 113, "user_id": 7830844, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/thEYV.png?s=128&g=1", "display_name": "Garlic Xu", "link": "https://stackoverflow.com/users/7830844/garlic-xu"}, "edited": false, "score": 0, "creation_date": 1596726420, "post_id": 33041872, "comment_id": 111909325, "body": "Why is the &#39;(**self).intersect(ray)&#39; part able to compile? I assume that &#39;**self&#39; is &#39;?Sized&#39;, which may not necessarily be able to live on stack."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 113, "user_id": 7830844, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/thEYV.png?s=128&g=1", "display_name": "Garlic Xu", "link": "https://stackoverflow.com/users/7830844/garlic-xu"}, "edited": false, "score": 1, "creation_date": 1596726504, "post_id": 33041872, "comment_id": 111909370, "body": "@GarlicXu it doesn&#39;t need to live on the stack though. The compiler will automatically insert a reference when the method call is made: <a href=\"https://stackoverflow.com/q/28519997/155423\">What are Rust&#39;s exact auto-dereferencing rules?</a>"}, {"owner": {"reputation": 113, "user_id": 7830844, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/thEYV.png?s=128&g=1", "display_name": "Garlic Xu", "link": "https://stackoverflow.com/users/7830844/garlic-xu"}, "edited": false, "score": 0, "creation_date": 1596771645, "post_id": 33041872, "comment_id": 111923974, "body": "Why is <code>S::intersect(self, ray)</code> not resolved as a recursive call? Given that <code>self</code> has type <code>&amp;&amp;S</code>, and the <code>impl ... for &amp;&#39;_ S</code> block&#39;s <code>intersect</code> method also wants <code>self: &amp;&amp;S</code>, why does this method not take priority according to the rules?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 113, "user_id": 7830844, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/thEYV.png?s=128&g=1", "display_name": "Garlic Xu", "link": "https://stackoverflow.com/users/7830844/garlic-xu"}, "edited": false, "score": 0, "creation_date": 1597668520, "post_id": 33041872, "comment_id": 112199817, "body": "@GarlicXu because <code>S</code> is a specific type. Our method is defined on <code>&amp;S</code>, so <code>S::intersect</code> <b>must</b> refer to the dereferenced version."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1596595349, "last_edit_date": 1596595349, "creation_date": 1444403863, "answer_id": 33041872, "question_id": 33041736, "link": "https://stackoverflow.com/questions/33041736/trait-implementation-for-both-a-trait-object-and-for-direct-implementors-of-the/33041872#33041872", "title": "Trait implementation for both a trait object and for direct implementors of the trait", "body": "<p>Implement your trait for all <code>Box&lt;S&gt;</code> where <code>S</code> implements your trait. Then you can delegate to the existing implementation:</p>\n<pre><code>impl&lt;S: Solid + ?Sized&gt; Solid for Box&lt;S&gt; {\n    fn intersect(&amp;self, ray: f32) -&gt; f32 {\n        (**self).intersect(ray)\n        // Some people prefer this less-ambiguous form\n        // S::intersect(self, ray)\n    }\n}\n</code></pre>\n<p>You'll also find that it can be useful to do the same for references:</p>\n<pre><code>impl&lt;S: Solid + ?Sized&gt; Solid for &amp;'_ S {\n    fn intersect(&amp;self, ray: f32) -&gt; f32 {\n        (**self).intersect(ray)\n        // Some people prefer this less-ambiguous form\n        // S::intersect(self, ray)\n    }\n}\n</code></pre>\n<p>All together:</p>\n<pre><code>trait Solid {\n    fn intersect(&amp;self, ray: f32) -&gt; f32;\n}\n\nimpl&lt;S: Solid + ?Sized&gt; Solid for Box&lt;S&gt; {\n    fn intersect(&amp;self, ray: f32) -&gt; f32 {\n        (**self).intersect(ray)\n        // S::intersect(self, ray)\n    }\n}\n\nimpl&lt;S: Solid + ?Sized&gt; Solid for &amp;'_ S {\n    fn intersect(&amp;self, ray: f32) -&gt; f32 {\n        (**self).intersect(ray)\n        // S::intersect(self, ray)\n    }\n}\n\nstruct Group&lt;S&gt;(Vec&lt;S&gt;);\n\nimpl&lt;S: Solid&gt; Solid for Group&lt;S&gt; {\n    fn intersect(&amp;self, _ray: f32) -&gt; f32 {\n        42.42\n    }\n}\n\nstruct Point;\n\nimpl Solid for Point {\n    fn intersect(&amp;self, _ray: f32) -&gt; f32 {\n        100.\n    }\n}\n\nfn main() {\n    let direct = Group(vec![Point]);\n    let boxed = Group(vec![Box::new(Point)]);\n    let pt = Point;\n    let reference = Group(vec![&amp;pt]);\n\n    let mixed: Group&lt;Box&lt;dyn Solid&gt;&gt; = Group(vec![\n        Box::new(direct),\n        Box::new(boxed),\n        Box::new(Point),\n        Box::new(reference),\n    ]);\n\n    mixed.intersect(1.0);\n}\n</code></pre>\n<p>The <code>?Sized</code> bound allows the <code>S</code> to not have a size known at compile time. Importantly, this allows you to pass in <em>trait objects</em> such as <code>Box&lt;dyn Solid&gt;</code> or <code>&amp;dyn Solid</code> as the type <code>Solid</code> does not have a known size.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30333607/155423\">What does the question mark mean in a type parameter bound?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27567849/155423\">What makes something a &quot;trait object&quot;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50650070/155423\">What does &quot;dyn&quot; mean in a type?</a></li>\n</ul>\n"}], "owner": {"reputation": 1147, "user_id": 910227, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a4b3c15ceb1d27a05bd82954d1fb54c9?s=128&d=identicon&r=PG", "display_name": "Jannis Froese", "link": "https://stackoverflow.com/users/910227/jannis-froese"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1438, "favorite_count": 4, "accepted_answer_id": 33041872, "answer_count": 1, "score": 9, "last_activity_date": 1596595349, "creation_date": 1444403496, "last_edit_date": 1506175375, "question_id": 33041736, "link": "https://stackoverflow.com/questions/33041736/trait-implementation-for-both-a-trait-object-and-for-direct-implementors-of-the", "title": "Trait implementation for both a trait object and for direct implementors of the trait", "body": "<p>I have a struct that mostly encapsulates a vector:</p>\n\n<pre><code>struct Group&lt;S&gt; {\n    elements: Vec&lt;S&gt;\n}\n</code></pre>\n\n<p>I also have a simple trait which is also implemented for other structs:</p>\n\n<pre><code>trait Solid {\n    fn intersect(&amp;self, ray: f32) -&gt; f32;\n}\n</code></pre>\n\n<p>I want to implement <code>Solid</code> for <code>Group</code>, but I want to be able to use <code>Group</code> both for lists of the same implementation of <code>Solid</code> and for lists of mixed implementations of <code>Solid</code>. Basically I want to use both <code>Group&lt;Box&lt;Solid&gt;&gt;</code> and <code>Group&lt;Sphere&gt;</code> (<code>Sphere</code> implements <code>Solid</code>).</p>\n\n<p>Currently I am using something like this:</p>\n\n<pre><code>impl Solid for Group&lt;Box&lt;Solid&gt;&gt; {\n    fn intersect(&amp;self, ray: f32) -&gt; f32 {\n        //do stuff\n    }\n}\n\nimpl&lt;S: Solid&gt; Solid for Group&lt;S&gt; {\n    fn intersect(&amp;self, ray: f32) -&gt; f32 {\n        //do the same stuff, code copy-pasted from previous impl\n    }\n}\n</code></pre>\n\n<p>This works, but having line-for-line the same code twice can't be the idiomatic solution. I must be missing something obvious?</p>\n\n<p>In my case I measure a notable performance difference between both trait implementations, so always using <code>Group&lt;Box&lt;Solid&gt;&gt;</code> isn't a great option.</p>\n"}, {"tags": ["arrays", "rust", "println"], "answers": [{"comments": [{"owner": {"reputation": 26541, "user_id": 1532460, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/dc5b338bf194a9e117af20bd9b2e4edb?s=128&d=identicon&r=PG", "display_name": "awesoon", "link": "https://stackoverflow.com/users/1532460/awesoon"}, "edited": false, "score": 4, "creation_date": 1444390883, "post_id": 33037243, "comment_id": 53895508, "body": "<a href=\"https://github.com/rust-lang/rust/blob/b30d8969e86fa2c9dd3b8e2e28ddda2202331f0f/src/libcore/array.rs#L112\" rel=\"nofollow noreferrer\">Just a link to the macro implementation</a> - I guess, it may be helpful."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1602166716, "post_id": 33037243, "comment_id": 113639650, "body": "As of Rust 1.47, <code>Debug</code> is now implemented for arrays of all sizes."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1602264563, "post_id": 33037243, "comment_id": 113676117, "body": "@trentcl Thanks for the ping! I updated the answer accordingly :)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 32, "last_activity_date": 1602264540, "last_edit_date": 1602264540, "creation_date": 1444390385, "answer_id": 33037243, "question_id": 33036859, "link": "https://stackoverflow.com/questions/33036859/why-does-println-work-only-for-arrays-with-a-length-less-than-33/33037243#33037243", "title": "Why does println! work only for arrays with a length less than 33?", "body": "<p><strong>Starting with Rust 1.47 (2020-10-08), <a href=\"https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#traits-on-larger-arrays\" rel=\"nofollow noreferrer\">this is no longer true</a>!</strong> Almost all traits are now implemented for arrays of arbitrary length. So <strong>you can now print arrays of length 33</strong>!</p>\n<p>Old answer below for reference.</p>\n<hr />\n<p>Sadly, Rust does not support integers as generic parameters yet. Therefore it's not easy to implement a trait (like <code>Debug</code>) for every array <code>[T; N]</code>. Currently, the standard library uses a macro to easily implement the trait for all length up to 32.</p>\n<p>To output the array, you can easily convert it to a slice (<code>&amp;[T]</code>) this way:</p>\n<pre><code>let a = [0; 33];\nprintln!(&quot;{:?}&quot;, &amp;a[..]);\n</code></pre>\n<p>By the way: Normally you can obtain a slice from an array by simply prefixing <code>&amp;</code>, but <code>println</code> arguments work a bit different, so you need to add the full range index <code>[..]</code>.</p>\n<hr />\n<p>The situation is likely to improve in the future. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md\" rel=\"nofollow noreferrer\">RFC 2000: Const Generics</a> has already been accepted and mostly implemented in the compiler. It would allow for <code>impl</code> blocks generic over the length of the array. You can track the status of implementation and stabilization on <a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"nofollow noreferrer\">the corresponding tracking issue</a>.</p>\n"}], "owner": {"reputation": 1469, "user_id": 1052496, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/2ccb22507c97a9c8b0fbcb627528837a?s=128&d=identicon&r=PG", "display_name": "Nikolai Tschacher", "link": "https://stackoverflow.com/users/1052496/nikolai-tschacher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1963, "favorite_count": 1, "accepted_answer_id": 33037243, "answer_count": 1, "score": 28, "last_activity_date": 1602264540, "creation_date": 1444389252, "last_edit_date": 1490663759, "question_id": 33036859, "link": "https://stackoverflow.com/questions/33036859/why-does-println-work-only-for-arrays-with-a-length-less-than-33", "title": "Why does println! work only for arrays with a length less than 33?", "body": "<p>In Rust, this works:</p>\n\n<pre><code>fn main() {\n    let a = [0; 32];\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>but this doesn't:</p>\n\n<pre><code>fn main() {\n    let a = [0; 33];\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>Compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[{integer}; 33]: std::fmt::Debug` is not satisfied\n --&gt; src/main.rs:3:22\n  |\n3 |     println!(\"{:?}\", a);\n  |                      ^ the trait `std::fmt::Debug` is not implemented for `[{integer}; 33]`\n  |\n  = note: `[{integer}; 33]` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\n  = note: required by `std::fmt::Debug::fmt`\n</code></pre>\n\n<p>I assume that the <code>std::fmt::Debug</code> function somehow detects types up to a length of 32 elements, but then drops it's detection. Or why doesn't it work?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444354536, "post_id": 33028424, "comment_id": 53879363, "body": "You should remove the <code>build_tree</code> method to produce a <a href=\"/help/mcve\">MCVE</a>. Just <code>let root = TreeNode {value: 0, left: None, right: None};</code> is enough, and all the rest is completely unimportant."}], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1444359334, "post_id": 33028562, "comment_id": 53880460, "body": "He said &quot;changing <code>.unwrap()</code> to <code>as_ref()</code>&quot;, not &quot;adding <code>as_ref()</code> before <code>unwrap()</code>; you did the latter. :P"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1444359429, "post_id": 33028562, "comment_id": 53880489, "body": "@FrancisGagn&#233; ah, I guess my brain just parsed it as &quot;I used <code>as_ref</code>&quot;."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1444359516, "last_edit_date": 1444359516, "creation_date": 1444354601, "answer_id": 33028562, "question_id": 33028424, "link": "https://stackoverflow.com/questions/33028424/converting-consuming-tree-into-non-consuming-tree/33028562#33028562", "title": "Converting consuming tree into non consuming tree", "body": "<p>It works just fine with <s>the changes you suggested</s> <strong>adding</strong> <code>as_ref</code>, not replacing <code>unwrap</code> with <code>as_ref</code>:</p>\n\n<pre><code>fn depth_first_pre(&amp;self) {\n    print!(\"{}, \", self.value);\n\n    if self.left.is_some() {\n        self.left.as_ref().unwrap().depth_first_pre();\n    }\n\n    if self.right.is_some() {\n        self.right.as_ref().unwrap().depth_first_pre();\n    }\n}\n</code></pre>\n\n<p>However, it'd be far more idiomatic to use an <code>if let</code>:</p>\n\n<pre><code>fn depth_first_pre(&amp;self) {\n    print!(\"{}, \", self.value);\n\n    if let Some(ref left) = self.left {\n       left.depth_first_pre();\n    }\n\n    if let Some(ref right) = self.right {\n        right.depth_first_pre();\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 179, "user_id": 3614405, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9d48b20d551fef10d6db195252f0def?s=128&d=identicon&r=PG&f=1", "display_name": "Lastwall", "link": "https://stackoverflow.com/users/3614405/lastwall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 33028562, "answer_count": 1, "score": 3, "last_activity_date": 1444403441, "creation_date": 1444353404, "last_edit_date": 1444403441, "question_id": 33028424, "link": "https://stackoverflow.com/questions/33028424/converting-consuming-tree-into-non-consuming-tree", "title": "Converting consuming tree into non consuming tree", "body": "<p>I have created the following tree with a consuming depth first traversal. </p>\n\n<p><a href=\"http://is.gd/0jZFDl\" rel=\"nofollow\">Playpen</a></p>\n\n<pre><code>struct TreeNode {\n    value: i32,\n    left: Option&lt;Box&lt;TreeNode&gt;&gt;,\n    right: Option&lt;Box&lt;TreeNode&gt;&gt;,\n}\n\nfn main() {\n    let root = build_tree();\n    root.depth_first_pre();\n}\n\nfn build_tree() -&gt; TreeNode {\n    let root = TreeNode { value: 2,\n        left: Some(Box::new(TreeNode { value: 7,\n                            left: Some(Box::new(TreeNode { value: 2, left: None, right: None })),\n                            right: Some(Box::new(TreeNode { value: 6,\n                                                left: Some(Box::new(TreeNode { value: 5, left: None, right: None })),\n                                                right: Some(Box::new(TreeNode { value: 11, left: None, right: None })) })) })),\n        right: Some(Box::new(TreeNode { value: 5,\n                            left: None,\n                            right: Some(Box::new(TreeNode { value: 9,\n                                                left: Some(Box::new(TreeNode { value: 4, left: None, right: None })),\n                                                right: None })) }))};\n    return root;\n}\n\nimpl TreeNode {\n    fn depth_first_pre(self) {\n        print!(\"{}, \", self.value);\n\n        if self.left.is_some() {\n            self.left.unwrap().depth_first_pre();\n        }\n\n        if self.right.is_some() {\n            self.right.unwrap().depth_first_pre();\n        }\n    }\n}\n</code></pre>\n\n<p>Unwrap takes the value out of the option which is ok in this case since each value is only accessed once. </p>\n\n<p>The problem occurs if I try to call the function twice:</p>\n\n<pre><code>root.depth_first_pre();\nroot.depth_first_pre();\n</code></pre>\n\n<p>This leads to errors on the second call of the function:</p>\n\n<pre><code>&lt;anon&gt;:10:5: 10:9 error: use of moved value: `root` [E0382]\n&lt;anon&gt;:10     root.depth_first_pre();\n              ^~~~\n&lt;anon&gt;:9:5: 9:9 note: `root` moved here because it has type `TreeNode`, which is non-copyable\n&lt;anon&gt;:9     root.depth_first_pre();\n             ^~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>My understanding is that it's been moved out by the first function call and de-allocated once it went out of scope in that function.</p>\n\n<p>How do I get around that?</p>\n\n<p>I have tried changing the function to take a reference to self (<code>&amp;self</code>) and changing <code>.unwrap()</code> to <code>as_ref()</code> but it did not solve my problem.</p>\n"}, {"tags": ["rust", "multifile", "rust-crates"], "answers": [{"comments": [{"owner": {"reputation": 1486, "user_id": 4313615, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-MbCT0y27XDo/AAAAAAAAAAI/AAAAAAAADeg/KQijoMfdBWw/photo.jpg?sz=128", "display_name": "David Roundy", "link": "https://stackoverflow.com/users/4313615/david-roundy"}, "edited": false, "score": 10, "creation_date": 1497910918, "post_id": 33025972, "comment_id": 76267658, "body": "Is there a way to use a local crate myself (for development) while leaving Cargo.toml referring to crates.io so others can also build my code?"}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 1, "creation_date": 1537195136, "post_id": 33025972, "comment_id": 91684904, "body": "Not possible by default at the moment. You can however work on a local branch, replace Cargo.toml with local dependency references (or mixed references), and before you merge or during, revert to or keep the main Cargo.toml file."}, {"owner": {"reputation": 1455, "user_id": 1217371, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e9fc858d619ac2783c44e081641cca9?s=128&d=identicon&r=PG", "display_name": "Connie Hilarides", "link": "https://stackoverflow.com/users/1217371/connie-hilarides"}, "reply_to_user": {"reputation": 1486, "user_id": 4313615, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-MbCT0y27XDo/AAAAAAAAAAI/AAAAAAAADeg/KQijoMfdBWw/photo.jpg?sz=128", "display_name": "David Roundy", "link": "https://stackoverflow.com/users/4313615/david-roundy"}, "edited": false, "score": 9, "creation_date": 1549050762, "post_id": 33025972, "comment_id": 95779295, "body": "@DavidRoundy if you&#39;re still looking for an answer, it&#39;s now possible to do what you&#39;re asking. You can specify both <code>version</code> and <code>path</code> for a dependency and it will strip the <code>path</code> part out when you publish it :)"}, {"owner": {"reputation": 28407, "user_id": 109618, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/84a4143803eafa1966191c604864a7b5?s=128&d=identicon&r=PG", "display_name": "David J.", "link": "https://stackoverflow.com/users/109618/david-j"}, "edited": false, "score": 0, "creation_date": 1568412470, "post_id": 33025972, "comment_id": 102279014, "body": "Detailed documentation is available at <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies\" rel=\"nofollow noreferrer\">doc.rust-lang.org/cargo/reference/&hellip;</a>"}, {"owner": {"reputation": 141, "user_id": 9158081, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7ba96392acd41a289c1801c9b078231c?s=128&d=identicon&r=PG&f=1", "display_name": "Ruben Kostandyan", "link": "https://stackoverflow.com/users/9158081/ruben-kostandyan"}, "edited": false, "score": 1, "creation_date": 1574545005, "post_id": 33025972, "comment_id": 104272602, "body": "Is it possible to do the same but with <code>git</code> instead of <code>version</code>? Something like this <code>my_lib = { path = &quot;...&quot;, git = &quot;...&quot; }</code> so that I can use my local copy during development and the remote git when someone clones the repo and tries to compile the program?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 173, "last_activity_date": 1525871425, "last_edit_date": 1525871425, "creation_date": 1444338487, "answer_id": 33025972, "question_id": 33025887, "link": "https://stackoverflow.com/questions/33025887/how-to-use-a-local-unpublished-crate/33025972#33025972", "title": "How to use a local unpublished crate?", "body": "<p>Add a dependency section to your executable's <strong>Cargo.toml</strong> and specify the path:</p>\n\n<pre><code>[dependencies.my_lib]\npath = \"../my_lib\"\n</code></pre>\n\n<p>or the equivalent alternate TOML:</p>\n\n<pre><code>[dependencies]\nmy_lib = { path = \"../my_lib\" }\n</code></pre>\n\n<p>Check out the <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\" rel=\"noreferrer\">Cargo docs for specifying dependencies</a> for more detail, like how to use a git repository instead of a local path.</p>\n"}, {"comments": [{"owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "edited": false, "score": 2, "creation_date": 1559764932, "post_id": 56466778, "comment_id": 99525930, "body": "And now this answer is a miniature article: <a href=\"http://www.purplefrog.com/~thoth/rust-external-libraries/\" rel=\"nofollow noreferrer\">purplefrog.com/~thoth/rust-external-libraries</a>"}], "tags": [], "owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "is_accepted": false, "score": 0, "last_activity_date": 1559762851, "last_edit_date": 1559762851, "creation_date": 1559762608, "answer_id": 56466778, "question_id": 33025887, "link": "https://stackoverflow.com/questions/33025887/how-to-use-a-local-unpublished-crate/56466778#56466778", "title": "How to use a local unpublished crate?", "body": "<p>I was looking for an equivalent to <code>mvn install</code>. While this question is not quite a duplicate of my original question, anyone who stumbles across my original question and follows the link here will find a more complete answer.</p>\n\n<p>The answer is \"there is no equivalent to <code>mvn install</code> because you have to hard-code the path in the Cargo.toml file which will probably be wrong on someone else's computer, but you can get pretty close.\"</p>\n\n<p>The existing answer is a bit brief and I had to flail around for a bit longer to actually get things working, so here's more detail:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>/usr/bin/cargo run --color=always --package re5 --bin re5\n   Compiling re5 v0.1.0 (file:///home/thoth/art/2019/radial-embroidery/re5)\nerror[E0432]: unresolved import `embroidery_stitcher`\n --&gt; re5/src/main.rs:5:5\n  |\n5 | use embroidery_stitcher;\n  |     ^^^^^^^^^^^^^^^^^^^ no `embroidery_stitcher` in the root\n</code></pre>\n\n<p><code>rustc --explain E0432</code> includes this paragraph that echos Shepmaster's answer:</p>\n\n<blockquote>\n  <p>Or, if you tried to use a module from an external crate, you may have missed\n  the <code>extern crate</code> declaration (which is usually placed in the crate root):</p>\n\n<pre><code>extern crate core; // Required to use the `core` crate\n\nuse core::any;\n</code></pre>\n</blockquote>\n\n<p>Switching from <code>use</code> to <code>extern crate</code> got me this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>/usr/bin/cargo run --color=always --package re5 --bin re5\n   Compiling embroidery_stitcher v0.1.0 (file:///home/thoth/art/2019/radial-embroidery/embroidery_stitcher)\nwarning: function is never used: `svg_header`\n --&gt; embroidery_stitcher/src/lib.rs:2:1\n  |\n2 | fn svg_header(w: i32, h: i32) -&gt; String\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n\n   Compiling re5 v0.1.0 (file:///home/thoth/art/2019/radial-embroidery/re5)\nerror[E0603]: function `svg_header` is private\n --&gt; re5/src/main.rs:8:19\n  |\n8 |     let mut svg = embroidery_stitcher::svg_header(100,100);\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I had to slap a <code>pub</code> on the front of that function</p>\n\n<pre><code>pub fn svg_header(w: i32, h: i32) -&gt; String\n</code></pre>\n\n<p>Now it works.</p>\n"}], "owner": {"reputation": 1524, "user_id": 2734279, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89db342fa8d04559c3ea1a6f4f134c43?s=128&d=identicon&r=PG&f=1", "display_name": "Andre S.", "link": "https://stackoverflow.com/users/2734279/andre-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 33574, "favorite_count": 24, "accepted_answer_id": 33025972, "answer_count": 2, "score": 132, "last_activity_date": 1559762851, "creation_date": 1444338082, "last_edit_date": 1444338530, "question_id": 33025887, "link": "https://stackoverflow.com/questions/33025887/how-to-use-a-local-unpublished-crate", "title": "How to use a local unpublished crate?", "body": "<p>I've made a library:</p>\n\n<pre><code>cargo new my_lib\n</code></pre>\n\n<p>and I want to use that library in a different program:</p>\n\n<pre><code>cargo new my_program --bin\n</code></pre>\n\n\n\n<pre><code>extern crate my_lib;\n\nfn main {\n    println!(\"Hello, World!\");\n}\n</code></pre>\n\n<p>what do I need to do to get this to work?</p>\n\n<p>They aren't in the same project folder.</p>\n\n<pre><code>.\n\u251c\u2500\u2500 my_lib\n\u2514\u2500\u2500 my_program\n</code></pre>\n\n<p>Hopefully this makes sense.</p>\n\n<p>I thought I'd be able to override the path as per the <a href=\"http://doc.crates.io/guide.html\">Cargo guide</a>, but it states</p>\n\n<blockquote>\n  <p>You cannot use this feature to tell Cargo how to find local unpublished crates.</p>\n</blockquote>\n\n<p>This is when using the latest stable version of Rust (1.3).</p>\n"}, {"tags": ["string", "static", "rust", "slice", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": false, "score": 0, "last_activity_date": 1444320165, "creation_date": 1444320165, "answer_id": 33020726, "question_id": 33020441, "link": "https://stackoverflow.com/questions/33020441/string-to-str-slice-str-slice-does-not-live-long-enough/33020726#33020726", "title": "String to str slice, str slice does not live long enough", "body": "<p>If you can't change the function's signature, then you either need to use a string literal to create a <code>&amp;'static str</code> or leak memory.</p>\n\n<p>i.e. either do this:</p>\n\n<pre><code>do_something(\"hello\");\n</code></pre>\n\n<p>or this (bad idea, will probably break, only works on nightly):</p>\n\n<pre><code>let place = Some(\"hello\".to_string());\nif let Some(s) = place {\n    do_something(unsafe { std::mem::transmute(s.into_boxed_str()) });\n}\n</code></pre>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 95, "favorite_count": 0, "closed_date": 1444328542, "answer_count": 1, "score": 0, "last_activity_date": 1444320165, "creation_date": 1444319357, "question_id": 33020441, "link": "https://stackoverflow.com/questions/33020441/string-to-str-slice-str-slice-does-not-live-long-enough", "closed_reason": "Duplicate", "title": "String to str slice, str slice does not live long enough", "body": "<p>OK, here's my MCVE, right off the bat.</p>\n\n<pre><code>fn do_something (string: &amp;'static str) -&gt; Result&lt;&amp;str, isize&gt; {\n    Ok(string)\n}\n\nfn main() {\n    let place = Some(\"hello\".to_string());\n    match place {\n        Some(input) =&gt; {\n            let place = &amp;input[..];\n            let something = do_something(place);\n        }\n        _ =&gt; (),\n    }\n}\n</code></pre>\n\n<p>I can't seem to figure out a way in which to satisfy <code>do_something</code>. In my actual code, <code>do_something</code> is a library function, so I can't change it's signature.</p>\n\n<p>- Thanks</p>\n"}, {"tags": ["string", "rust", "slice", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444316295, "post_id": 33018591, "comment_id": 53861703, "body": "Your last edit completely changed your question, invalidating the two present answers, so I&#39;m going to roll it back. You are welcome to ask another question now that you know what you want to ask, but one of the present answers likely addresses the question you posed."}, {"owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444316479, "post_id": 33018591, "comment_id": 53861842, "body": "Ok. Sorry, I will ask a new question, now that I have a more clear idea of what I&#39;m doing. By the way, your answer does not actually fix the code in my question, and I can&#39;t seem to find an MCVE that perfectly reproduces my error."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444316575, "post_id": 33018591, "comment_id": 53861906, "body": "Sounds good! I guarantee we will get to the bottom of your problem, but it might take some twists and turns along the way as we all learn :-)"}], "answers": [{"tags": [], "owner": {"reputation": 57743, "user_id": 1090079, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/uWGaU.png?s=128&g=1", "display_name": "Filip Ros&#233;en - refp", "link": "https://stackoverflow.com/users/1090079/filip-ros%c3%a9en-refp"}, "is_accepted": true, "score": 2, "last_activity_date": 1444317877, "last_edit_date": 1444317877, "creation_date": 1444315921, "answer_id": 33019228, "question_id": 33018591, "link": "https://stackoverflow.com/questions/33018591/using-pop3pop3streamconnect-to-connect-to-runtime-given-host/33019228#33019228", "title": "Using `pop3::POP3Stream::connect` to connect to runtime given `host`?", "body": "<h3>The Problem</h3>\n\n<p>Your problem boils down to the use of <code>static</code> since the keyword basically says <em>\"keep this object around forever\"</em>. This means that the lifetime of <code>place</code>, without a doubt, will live long after <code>input</code> &mdash; forever <em>vs</em> the scope of the block.</p>\n\n<pre><code>fn get() -&gt; Option&lt;String&gt; {\n    Some(\"hello world\".to_owned())\n}\n</code></pre>\n\n    \n\n<pre><code>fn main() {\n    let data = match get() {\n        Some(input) =&gt; { let place : &amp;'static str = &amp;input[..]; },\n        None        =&gt; { }\n    };\n}\n</code></pre>\n\n<p>In the above we try to make <code>place</code> a <code>static</code> reference to a <code>str</code>, other other words; a reference that exists for the entire duration of our program. <code>input</code> on the other hand will definitely not exist for this amount of time, and therefor we get an error diagnostic.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:7:54: 7:59 error: `input` does not live long enough\n&lt;anon&gt;:7         Some(input) =&gt; { let place : &amp;'static str = &amp;input[..]; },\n</code></pre>\n\n<hr>\n\n<h3>The Solution</h3>\n\n<p>Remove the use of <code>static</code>, effectively saying that the lifetime of <code>place</code> is that of the block (which is a subset of the lifetime associated with <code>input</code>).</p>\n\n<pre><code>fn get() -&gt; Option&lt;String&gt; {\n    Some(\"hello world\".to_owned())\n}\n</code></pre>\n\n\n\n<pre><code>fn main() {\n    let data = match get() {\n        Some(input) =&gt; { let place : &amp;str = &amp;input[..]; },\n        None        =&gt; { }\n    };   \n}\n</code></pre>\n\n<hr>\n\n<hr>\n\n<h3>Further Digging</h3>\n\n<p>As it turns out, <code>POP3Stream::connect</code> accepts a <code>&amp;'static str</code> as its first argument; this is really bad design since it will only accept string-literals.</p>\n\n<pre><code>impl Pop3Stream {\n    pub fn connect(host: &amp;'static str, ...) -&gt; Result&lt;POP3Stream&gt; {\n        ...\n    }\n}\n</code></pre>\n\n<ul>\n<li><a href=\"https://github.com/mattnenterprise/rust-pop3/blob/master/src/pop3.rs\" rel=\"nofollow\">https://github.com/mattnenterprise/rust-pop3/blob/master/src/pop3.rs</a></li>\n</ul>\n\n<p>You can, however, hack your way around the issue by intentionally leaking the resource&mdash;effectively making it live \"forever\". Please note the usage of <code>unsafe</code>, and keep in mind that this is&mdash;by language design&mdash;considered to be just that.</p>\n\n<pre><code>fn get () -&gt; Option&lt;String&gt; {\n  Some(\"hello world\".to_owned ())\n}\n</code></pre>\n\n\n\n<pre><code>fn connect (host : &amp;'static str) {\n  /* ... */\n}\n</code></pre>\n\n\n\n<pre><code>fn main() { \n    let data = match get() {\n        Some(input) =&gt; {\n            let place : &amp;'static str = unsafe {\n                use std::mem; let x = mem::transmute(&amp;input as &amp;str);\n                mem::forget (x);  x\n            };  \n\n            connect(place);\n        },\n        None =&gt; { }\n    };   \n}\n</code></pre>\n"}], "owner": {"reputation": 1220, "user_id": 2124732, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG", "display_name": "Christopher Dumas", "link": "https://stackoverflow.com/users/2124732/christopher-dumas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "closed_date": 1444316615, "accepted_answer_id": 33019228, "answer_count": 1, "score": 2, "last_activity_date": 1444318473, "creation_date": 1444314304, "last_edit_date": 1444318473, "question_id": 33018591, "link": "https://stackoverflow.com/questions/33018591/using-pop3pop3streamconnect-to-connect-to-runtime-given-host", "closed_reason": "Duplicate", "title": "Using `pop3::POP3Stream::connect` to connect to runtime given `host`?", "body": "<p>I'm trying to read input from the user, and then use it as the URL for the POP3 library. When converting the <code>String</code> that I get to a string slice, it doesn't live long enough to be used. This is strange to me for two reasons:</p>\n\n<ol>\n<li><p>Because everything that uses the POP3 object is inside the same block, so the lifetime of the str slice should be that of the entire block, which would cover everything</p></li>\n<li><p>I've tried almost every different code configuration I could think of, and to no avail, I get the same error every time. </p></li>\n</ol>\n\n\n\n<pre><code>extern crate pop3;\nextern crate smtp;\nextern crate openssl;\nextern crate libc;\n\nuse openssl::ssl::{SslContext, SslMethod};\nuse pop3::POP3Stream;\nuse pop3::POP3Result::{POP3Stat, POP3List, POP3Message};\n\nmod readline;\nuse readline::*;\n\nfn main() {\n    let place = match readline(\"URL: \") {             // Problem line\n        Some(input) =&gt; {                              // Problem line\n            let place: &amp;'static str = &amp;input[..];     // Problem line\n            let mut email_socket = match POP3Stream::connect(place, 995, Some(SslContext::new(SslMethod::Sslv23).unwrap())) { // Problem line\n                Ok(s) =&gt; s,\n                Err(e) =&gt; panic!(\"{}\", e)\n            };\n\n            match readline(\"Username: \") {\n                Some(username) =&gt; {\n                    match readline(\"Password: \") {\n                        Some(password) =&gt; { email_socket.login(&amp;*username, &amp;*password); },\n                        None           =&gt; println!(\"Please enter a password.\")\n                    }\n                },\n                None           =&gt; println!(\"Please enter a username.\")\n            };\n\n            let stat = email_socket.stat();\n            match stat {\n                POP3Stat {num_email,\n                          mailbox_size} =&gt; println!(\"num_email: {},  mailbox_size:{}\", num_email, mailbox_size),\n                e =&gt; println!(\"There was an error signing into your server.\"),\n            }\n\n            let list_all = email_socket.list(None);\n            match list_all {\n                POP3List {emails_metadata} =&gt; {\n                    for i in emails_metadata.iter() {\n                        println!(\"message_id: {},  message_size: {}\", i.message_id, i.message_size);\n                    }\n                },\n                _ =&gt; println!(\"There was an error listing your messages.\"),\n            }\n\n            let message_25 = email_socket.retr(25);\n            match message_25 {\n                POP3Message{raw} =&gt; {\n                    for i in raw.iter() {\n                        println!(\"{}\", i);\n                    }\n                },\n                _ =&gt; println!(\"There was an error getting your 25th message.\"),\n            }\n\n            email_socket.quit();\n        },\n        None        =&gt; { println!(\"Please enter a URL for your server.\"); }\n    };\n}\n</code></pre>\n"}, {"tags": ["rust", "atomic"], "answers": [{"comments": [{"owner": {"reputation": 647, "user_id": 4037231, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fe12602a9e9ca343dc477b81e1244b1b?s=128&d=identicon&r=PG&f=1", "display_name": "kmky", "link": "https://stackoverflow.com/users/4037231/kmky"}, "edited": false, "score": 0, "creation_date": 1444336072, "post_id": 33015864, "comment_id": 53873122, "body": "Sadly, for my use case, doubling the RAM consumption is not an option."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 647, "user_id": 4037231, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fe12602a9e9ca343dc477b81e1244b1b?s=128&d=identicon&r=PG&f=1", "display_name": "kmky", "link": "https://stackoverflow.com/users/4037231/kmky"}, "edited": false, "score": 1, "creation_date": 1444375473, "post_id": 33015864, "comment_id": 53886393, "body": "since your use-case is a vector of 32bit atomics on a 64bit machine, you could create a wrapper around a <code>Vec</code> that internally has half the number of items and always accesses the lower or higher part of the 64bit word, depending on whether the index is even or odd. Are you sure you need a <code>Vec</code> of atomics and not simply a <code>Mutex&lt;Vec&lt;i32&gt;&gt;</code>?"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1444307422, "creation_date": 1444307422, "answer_id": 33015864, "question_id": 33012046, "link": "https://stackoverflow.com/questions/33012046/how-to-implement-atomicu32-an-atomic-32-bit-integer-type/33015864#33015864", "title": "How to implement AtomicU32, an atomic 32-bit integer type?", "body": "<p>I don't think you can implement other sizes than pointer-sized integers. <a href=\"https://github.com/rust-lang/rust/blob/cff04117064ddee95f425c49f22c8aa5a3a665d4/src/libcore/sync/atomic.rs#L86\" rel=\"nofollow\">AtomicBool is actually padded in Rust to pointer size</a>.</p>\n\n<p>LLVM <a href=\"http://llvm.org/docs/Atomics.html\" rel=\"nofollow\">states</a> that</p>\n\n<blockquote>\n  <p>Common architectures have some way of representing at least a pointer-sized lock-free cmpxchg; such an operation can be used to implement all the other atomic operations which can be represented in IR up to that size.</p>\n</blockquote>\n\n<p>Therefor you will never save space with smaller integers.</p>\n\n<p>On the other hand, if you just want nice access and don't care about the memory, you can implement wrappers:</p>\n\n<pre><code>use std::sync::atomic::{AtomicIsize, Ordering};\n\nstruct AtomicI32(AtomicIsize);\nimpl AtomicI32 {\n    fn new(v: i32) -&gt; AtomicI32 {\n        AtomicI32(AtomicIsize::new(v as isize))\n    }\n    fn load(&amp;self, order: Ordering) -&gt; i32 {\n        self.0.load(order) as i32\n    }\n    fn store(&amp;self, val: i32, order: Ordering) {\n        self.0.store(val as isize, order)\n    }\n    fn swap(&amp;self, val: i32, order: Ordering) -&gt; i32 {\n        self.0.swap(val as isize, order) as i32\n    }\n    fn compare_and_swap(&amp;self, current: i32, new: i32, order: Ordering) -&gt; i32 {\n        self.0.compare_and_swap(current as isize, new as isize, order) as i32\n    }\n    fn fetch_add(&amp;self, val: i32, order: Ordering) -&gt; i32 {\n        self.0.fetch_add(val as isize, order) as i32\n    }\n    fn fetch_sub(&amp;self, val: i32, order: Ordering) -&gt; i32 {\n        self.0.fetch_sub(val as isize, order) as i32\n    }\n    fn fetch_and(&amp;self, val: i32, order: Ordering) -&gt; i32 {\n        self.0.fetch_and(val as isize, order) as i32\n    }\n    fn fetch_or(&amp;self, val: i32, order: Ordering) -&gt; i32 {\n        self.0.fetch_or(val as isize, order) as i32\n    }\n    fn fetch_xor(&amp;self, val: i32, order: Ordering) -&gt; i32 {\n        self.0.fetch_xor(val as isize, order) as i32\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1444375195, "post_id": 33029014, "comment_id": 53886228, "body": "&quot;The atomic intrinsics provide common atomic operations on machine words, with multiple possible memory orderings.&quot; this has the same downside as my solution"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1444432309, "post_id": 33029014, "comment_id": 53917745, "body": "The generic intrinsic functions accept any integer type (otherwise LLVM will complain about invalid IR). Look at the IR generated here, for example: <a href=\"http://is.gd/I3Loxb\" rel=\"nofollow noreferrer\">is.gd/I3Loxb</a>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1444358422, "creation_date": 1444358422, "answer_id": 33029014, "question_id": 33012046, "link": "https://stackoverflow.com/questions/33012046/how-to-implement-atomicu32-an-atomic-32-bit-integer-type/33029014#33029014", "title": "How to implement AtomicU32, an atomic 32-bit integer type?", "body": "<p>The <a href=\"https://doc.rust-lang.org/stable/std/intrinsics/index.html\" rel=\"nofollow\"><code>std::intrinsics</code></a> module contains intrinsic atomic functions that are generic. This means you can basically copy-paste <a href=\"https://doc.rust-lang.org/nightly/src/core/sync/atomic.rs.html\" rel=\"nofollow\">the implementation for <code>AtomicUsize</code> and/or <code>AtomicIsize</code></a> and change the wrapped type from <code>usize</code>/<code>isize</code> to <code>u32</code>/<code>i32</code>.</p>\n\n<p>However, these intrinsics are unstable, so you need to use a nightly Rust compiler in order to make this work. If that's not acceptable to you, consider <a href=\"https://github.com/rust-lang/rfcs\" rel=\"nofollow\">submitting an RFC</a> to get such types added to the standard library. If using a nightly Rust compiler is OK for you, then it might be interesting to <a href=\"https://crates.io/\" rel=\"nofollow\">publish a crate</a> that contains these types. This will have the advantage of gathering statistics on how useful such types are. (Dependents will still need to use a nightly compiler though, so the effect might be somewhat underestimated.)</p>\n"}], "owner": {"reputation": 647, "user_id": 4037231, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fe12602a9e9ca343dc477b81e1244b1b?s=128&d=identicon&r=PG&f=1", "display_name": "kmky", "link": "https://stackoverflow.com/users/4037231/kmky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 602, "favorite_count": 0, "accepted_answer_id": 33029014, "answer_count": 2, "score": 3, "last_activity_date": 1444358422, "creation_date": 1444297233, "question_id": 33012046, "link": "https://stackoverflow.com/questions/33012046/how-to-implement-atomicu32-an-atomic-32-bit-integer-type", "title": "How to implement AtomicU32, an atomic 32-bit integer type?", "body": "<p>The module <a href=\"https://doc.rust-lang.org/nightly/std/sync/atomic/index.html\" rel=\"nofollow\">std::sync::atomic</a> doesn't contain fixed size integral atomic types. In my 64-bit application, I need to create a vector of atomic 32-bit integers. Is there a workaround? Can I implement something like an AtomicU32 (or AtomicI32) myself, and how?</p>\n"}, {"tags": ["rust", "readline", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 5743, "user_id": 39443, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8eaa128e738406b877ac89f6781148e2?s=128&d=identicon&r=PG", "display_name": "Martin Carpenter", "link": "https://stackoverflow.com/users/39443/martin-carpenter"}, "edited": false, "score": 0, "creation_date": 1444314467, "post_id": 33016724, "comment_id": 53860290, "body": "Gah, I was using the example in the info pages and that uses a slightly different completer (with signature <code>rl_completion_func_t *rl_attempted_completion_function</code>) so that explains that.I take your point on the <code>CString</code> drop although it isn&#39;t what I expected given its returning pointers to those things. So the caller only owns the returned pointer?   Okay. That gives me plenty to study this evening. Thanks!"}, {"owner": {"reputation": 5743, "user_id": 39443, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8eaa128e738406b877ac89f6781148e2?s=128&d=identicon&r=PG", "display_name": "Martin Carpenter", "link": "https://stackoverflow.com/users/39443/martin-carpenter"}, "edited": false, "score": 0, "creation_date": 1444347792, "post_id": 33016724, "comment_id": 53877651, "body": "Nailed it. Thanks again!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1444311521, "last_edit_date": 1444311521, "creation_date": 1444309464, "answer_id": 33016724, "question_id": 33010623, "link": "https://stackoverflow.com/questions/33010623/readline-custom-completer/33016724#33016724", "title": "Readline custom completer", "body": "<blockquote>\n  <p>and the function signature isn't complicated</p>\n</blockquote>\n\n<p>It's not, but it does help to have the right one... ^_^ From my local version of readline (6.3.8):</p>\n\n<pre><code>extern rl_compentry_func_t *rl_completion_entry_function;\ntypedef char *rl_compentry_func_t PARAMS((const char *, int));\n</code></pre>\n\n<p>Additionally, you have multiple <em>use after free</em> errors:</p>\n\n<pre><code>vec![CString::new(\"one\").unwrap()].iter().map(|s| s.as_ptr());\n</code></pre>\n\n<p>This creates a <code>CString</code> and gets the pointer to it. When the statement is done, <strong>nothing owns</strong> the vector that owns the strings. The vector will be immediately dropped, dropping the strings, invalidating the pointers.</p>\n\n<pre><code>words.as_ptr() as *const *const c_char\n</code></pre>\n\n<p>Similar thing here \u2014 you take the pointer, but then <strong>nothing owns</strong> the <code>words</code> vector anymore, so it is dropped, invalidating that pointer. So now you have an invalid pointer which attempts to point to a sequence of invalid pointers.</p>\n\n<p>The same problem can be found in <code>string_to_mut_c_char</code>.</p>\n\n<p>I don't know enough readline to understand who is supposed to own the returned strings, but it <em>looks like</em> you pass ownership to readline and it frees them. If so, that means you are going to have to use the same allocator that readline does so that it can free the strings for you. You will likely have to write some custom code that copies a CString's data using the appropriate allocator.</p>\n\n<hr>\n\n<p>Style-wise, you can use underscores in variable names to indicate they are unused:</p>\n\n<pre><code>extern fn complete(_text: *const c_char, _start: c_int, _end: c_int)\n</code></pre>\n\n<p>There should be a space after <code>:</code> and there's no need to specify the type of the vector's contents:</p>\n\n<pre><code>let mut words: Vec&lt;_&gt;\n</code></pre>\n"}], "owner": {"reputation": 5743, "user_id": 39443, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8eaa128e738406b877ac89f6781148e2?s=128&d=identicon&r=PG", "display_name": "Martin Carpenter", "link": "https://stackoverflow.com/users/39443/martin-carpenter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 142, "favorite_count": 0, "accepted_answer_id": 33016724, "answer_count": 1, "score": 2, "last_activity_date": 1444311521, "creation_date": 1444293342, "last_edit_date": 1444309744, "question_id": 33010623, "link": "https://stackoverflow.com/questions/33010623/readline-custom-completer", "title": "Readline custom completer", "body": "<p>I'm trying to write a readline custom completer (tab completion) in Rust. I think I have everything straight, but when I try it <em>en vivo</em> it heads off into the weeds and never comes back. Oddly, when I call it directly from <code>main()</code> I appear to get a valid pointer back. I never see a crash or panic in either case. Backtrace output is not consistent over runs (it's busy doing something). Perhaps one clue is that gdb indicates that the arguments passed to the completer are incorrect (although I'm not actually using them). Eg, after callback:</p>\n\n<pre><code>#2  0x00007f141f701272 in readlinetest::complete (text=0x7f141ff27d10 \"\", start=2704437, end=499122176) at src/main.rs:24\n</code></pre>\n\n<p>Or directly, breakpointing the call in <code>main</code>:</p>\n\n<pre><code>#0  readlinetest::complete (text=0x555555559190 &lt;complete::hcda8d6cb2ef52a1bKaa&gt; \"dH;$%p\", start=0, end=0) at src/main.rs:21\n</code></pre>\n\n<p>Do I have an ABI problem? Seems unlikely and the function signature isn't complicated :(</p>\n\n<p>Here is a small test project: <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"readlinetest\"           \nversion = \"0.1.0\"\nauthors = [\"You &lt;you@example.com&gt;\"]\n\n[dependencies]\nlibc = \"*\"\nreadline = \"*\" \n</code></pre>\n\n<p>And <code>main.rs</code>:</p>\n\n<pre><code>extern crate libc;\nextern crate readline;\n\nuse libc::{c_char, c_int};\nuse std::ffi::CString;\nuse std::process::exit;\nuse std::ptr;\nuse std::str;\n\nextern { fn puts(s: *const libc::c_char); } \n\n#[link(name = \"readline\")]\n// Define the global in libreadline that will point to our completion function.\nextern {\n    static mut rl_completion_entry_function: extern fn(text: *const c_char,\n                                                       start: c_int,\n                                                       end: c_int) -&gt; *const *const c_char; \n} \n\n// Our completion function. Returns two strings.\nextern fn complete(text: *const c_char, start: c_int, end: c_int) -&gt; *const *const c_char {\n    let _ = text; let _ = start; let _ = end;\n    let mut words:Vec&lt;*const c_char&gt; =\n        vec!(CString::new(\"one\").unwrap(), CString::new(\"two\").unwrap()).\n        iter().\n        map(|arg| arg.as_ptr()).\n        collect();\n    words.push(ptr::null()); // append null\n    words.as_ptr() as *const *const c_char\n} \n\nfn main() {\n    let words = complete(string_to_mut_c_char(\"hi\"), 1, 2);\n    unsafe { puts(*words) } // prints \"one\"\n    //unsafe { puts((*words + ?)) } // not sure hot to get to \"two\"\n    unsafe { rl_completion_entry_function = complete }\n    // Loop until EOF: echo input to stdout\n    loop {\n        if let Ok(input) = readline::readline_bare(&amp;CString::new(\"&gt; \").unwrap()) {\n            let text = str::from_utf8(&amp;input.to_bytes()).unwrap();\n            println!(\"{}\", text);\n        } else { // EOF/^D\n            exit(0)\n        }\n    }\n}\n\n// Just for testing\nfn string_to_mut_c_char(s: &amp;str) -&gt; *mut c_char {\n    let mut bytes = s.to_string().into_bytes(); // Vec&lt;u8&gt;\n    bytes.push(0); // terminating null\n    let mut cchars = bytes.iter().map(|b| *b as c_char).collect::&lt;Vec&lt;c_char&gt;&gt;();\n    let name: *mut c_char = cchars.as_mut_ptr();\n    name\n\n}\n</code></pre>\n\n<p>Ubuntu 14.04, 64 bit with Rust 1.3.</p>\n\n<p>What am I missing? Thanks for any pointers (ha ha...).</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1444290677, "creation_date": 1444290677, "answer_id": 33009750, "question_id": 33009214, "link": "https://stackoverflow.com/questions/33009214/is-it-possible-to-have-a-struct-generic-over-u-and-v-where-u-v/33009750#33009750", "title": "Is it possible to have a struct generic over U and V, where U : V?", "body": "<p>No, unfortunately it is not possible (yet, maybe in the future...).</p>\n\n<p>The problem is that the syntax <code>U: V</code> is only allowed if <code>V</code> is a <code>trait</code> and there is no way to declare that a generic parameter is a <code>trait</code>; <code>?Sized</code> only indicate a type that may not be sized, which allows traits but also other things...</p>\n\n<p>When I <a href=\"https://github.com/matthieu-m/rust-poly\" rel=\"nofollow\">experimented with polymorphism</a>, the work-around I use was to declare a trait <code>DerivedFrom</code>, and then I would check <code>U: DerivedFrom&lt;V&gt;</code>. Of course, it requires to implement <code>DerivedFrom&lt;Trait&gt;</code> for <code>Struct</code>... which is not exactly ergonomic...</p>\n\n<p>You can check it <a href=\"https://gist.github.com/anonymous/11b36ca978e75185df8b\" rel=\"nofollow\">here</a>:</p>\n\n<pre><code>// Scaffolding\n\npub trait DerivedFrom&lt;T: ?Sized&gt; {}\n\n//\ntrait SomeTrait {}\n\nstruct HelloWorld;\n\nimpl SomeTrait for HelloWorld {}\nimpl DerivedFrom&lt;SomeTrait&gt; for HelloWorld {}\n\npub struct Foo&lt;U, V: ?Sized&gt; where U: DerivedFrom&lt;V&gt; {\n  instance: Option&lt;U&gt;,\n  _v: std::marker::PhantomData&lt;*const V&gt;,\n}\n\ntype HelloFoo = Foo&lt;HelloWorld, SomeTrait&gt;;\n\nfn main() {\n}\n</code></pre>\n\n<p><em>Note: and of course, for this very reason, we cannot have a blanket impl for <code>DerivedFrom</code>.</em></p>\n"}], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 33009750, "answer_count": 1, "score": 3, "last_activity_date": 1444290677, "creation_date": 1444289039, "question_id": 33009214, "link": "https://stackoverflow.com/questions/33009214/is-it-possible-to-have-a-struct-generic-over-u-and-v-where-u-v", "title": "Is it possible to have a struct generic over U and V, where U : V?", "body": "<p>...and V is a trait.\nIe. Something like this, but that works?</p>\n\n<pre><code>use std::marker::PhantomData;\n\npub struct Foo&lt;U, V: ?Sized&gt; where U : V {\n  instance:Option&lt;U&gt;,\n  _v: PhantomData&lt;*const V&gt;,\n}\n\nimpl&lt;U, V&gt; Foo&lt;U, V&gt; {\n\n  /// Create a new instance\n  pub fn new() -&gt; Foo&lt;U, V&gt; {\n    return Foo {\n      instance: None,\n      _v: PhantomData,\n    };\n  }\n\n  /// Return trait\n  pub fn as_ref(&amp;self) -&gt; Option&lt;&amp;V&gt; {\n    return match(self.instance) {\n      Some(v) =&gt; Some(&amp;v as &amp;V),\n      None =&gt; None\n    };\n  }\n}\n\n#[cfg(test)]\nmod test {\n\n  use super::Foo;\n\n  trait Fooish {\n    fn x(&amp;self) -&gt; i32;\n  }\n\n  struct Bar;\n\n  impl Fooish for Bar {\n    fn x(&amp;self) -&gt; i32 {\n      return 0i32;\n    }\n  }\n\n  #[test]\n  fn test_new_foo() {\n    let _ = Foo::&lt;Bar, Fooish&gt;::new();\n  }\n}\n</code></pre>\n\n<p>playpen link: <a href=\"http://is.gd/N7tWwH\" rel=\"nofollow\">http://is.gd/N7tWwH</a></p>\n"}]