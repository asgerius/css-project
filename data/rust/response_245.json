[{"tags": ["math", "optimization", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568838666, "post_id": 58000264, "comment_id": 102406488, "body": "<i>assuming there is no overflow</i> \u2014 why is this assumption valid? Does it not matter if you get the correct result sometimes?"}, {"owner": {"reputation": 1612, "user_id": 1806348, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/7TqKN.png?s=128&g=1", "display_name": "Jochem Kuijpers", "link": "https://stackoverflow.com/users/1806348/jochem-kuijpers"}, "edited": false, "score": 0, "creation_date": 1568838790, "post_id": 58000264, "comment_id": 102406530, "body": "Typically these optimizations are not necessary and may not even be faster due to cache lines and such. Only do them when you have ruled out other known performance issues. Edit: Also I don&#39;t think your logic checks out, this will fail in certain cases due to overflow."}, {"owner": {"reputation": 2173, "user_id": 1804656, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/47ea159b5819a724a31a95f8dd1fc037?s=128&d=identicon&r=PG", "display_name": "kyle", "link": "https://stackoverflow.com/users/1804656/kyle"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568839363, "post_id": 58000264, "comment_id": 102406737, "body": "@Shepmaster I am wanting to know from a theoretical perspective... If what I am describing is a &quot;thing&quot;, is there some way to handle the overflow?"}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 1, "last_activity_date": 1568848629, "last_edit_date": 1568848629, "creation_date": 1568846493, "answer_id": 58001591, "question_id": 58000264, "link": "https://stackoverflow.com/questions/58000264/is-it-valid-to-add-an-entire-array-of-bytes-at-once-by-converting-them-to-a-larg/58001591#58001591", "title": "Is it valid to add an entire array of bytes at once by converting them to a larger integer data type?", "body": "<blockquote>\n  <ol>\n  <li>Does this always result in the right output (assuming there is no overflow)?</li>\n  </ol>\n</blockquote>\n\n<p>Yes. Provided that each sum is less than 256, this will add the bytes as you want. You've specified \"ne\" in each case, for native endianness. This will work, regardless of the native endianness because the operations are byte-wise. </p>\n\n<p>If you wrote code to actually check that the sums are all in range, then you would almost certainly undo any extra speed-up that you had got (if there was any to begin with).</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Is this faster than just doing the additions individually?</li>\n  </ol>\n</blockquote>\n\n<p>Maybe. The only way to know for sure is to test.</p>\n\n<blockquote>\n  <ol start=\"3\">\n  <li>Does it hold true for other integer types? Such as 2 <code>u16</code>s in a <code>u32</code> added with 2 other <code>u16</code>s in a <code>u32</code>?</li>\n  </ol>\n</blockquote>\n\n<p>Yes, but you need to pay attention to byte order.</p>\n\n<blockquote>\n  <p>If this exists and is common, what is it called?</p>\n</blockquote>\n\n<p>It's not common because it's usually unnecessary. This type of optimisation makes code harder to read and introduces considerable complexity and opportunities for bugs. The Rust compiler and LLVM between them are able to find extremely sophisticated optimisations, that you would never think of, while your code stays readable and maintainable.</p>\n\n<p>If it has a name, it's SIMD, and most modern processor support a form of it natively (SSE, MMX, AVX). You can do this manually, using the built-in functions, e.g. <a href=\"https://doc.rust-lang.org/1.29.1/core/arch/x86_64/fn._mm_add_epi8.html\" rel=\"nofollow noreferrer\"><code>core::arch::x86_64::_mm_add_epi8</code></a>, but LLVM might do it automatically. It's possible that trying to do this manually could interfere with optimisations that LLVM would otherwise do, while making your code more bug-prone at the same time.</p>\n\n<hr>\n\n<p>I'm not an expert at assembly code by any means, but I took at a look at the <a href=\"https://godbolt.org/z/BDsy0X\" rel=\"nofollow noreferrer\">assembly generated</a> for the following two functions:</p>\n\n<pre><code>#[no_mangle]\n#[inline(never)]\npub fn f1(a1: u8, b1: u8, c1: u8, d1: u8, a2: u8, b2: u8, c2: u8, d2: u8) -&gt; [u8; 4]{\n    let a = u32::from_le_bytes([a1, b1, c1, d1]);\n    let b = u32::from_le_bytes([a2, b2, c2, d2]);\n    u32::to_le_bytes(a + b)\n}\n\n#[no_mangle]\n#[inline(never)]\npub fn f2(a1: u8, b1: u8, c1: u8, d1: u8, a2: u8, b2: u8, c2: u8, d2: u8) -&gt; [u8; 4]{\n    [a1 + a2, b1 + b2, c1 + c2, d1 + d2]\n}\n</code></pre>\n\n<p>The assembly for <code>f1</code>:</p>\n\n<pre><code>movzx r10d, byte ptr [rsp + 8]\nshl ecx, 24\nmovzx eax, dl\nshl eax, 16\nmovzx edx, sil\nshl edx, 8\nmovzx esi, dil\nor esi, edx\nor esi, eax\nor esi, ecx\nmov ecx, dword ptr [rsp + 16]\nshl ecx, 24\nshl r10d, 16\nmovzx edx, r9b\nshl edx, 8\nmovzx eax, r8b\nor eax, edx\nor eax, r10d\nor eax, ecx\nadd eax, esi\nret\n</code></pre>\n\n<p>And for <code>f2</code>:</p>\n\n<pre><code>add r8b, dil\nadd r9b, sil\nadd dl, byte ptr [rsp + 8]\nadd cl, byte ptr [rsp + 16]\nmovzx ecx, cl\nshl ecx, 24\nmovzx edx, dl\nshl edx, 16\nmovzx esi, r9b\nshl esi, 8\nmovzx eax, r8b\nor eax, esi\nor eax, edx\nor eax, ecx\nret\n</code></pre>\n\n<p>Fewer instructions doesn't necessarily make it faster, but it's not a bad guideline.</p>\n\n<hr>\n\n<p>Consider this kind of optimisation as a last resort, after careful measurement and testing.</p>\n"}], "owner": {"reputation": 2173, "user_id": 1804656, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/47ea159b5819a724a31a95f8dd1fc037?s=128&d=identicon&r=PG", "display_name": "kyle", "link": "https://stackoverflow.com/users/1804656/kyle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "accepted_answer_id": 58001591, "answer_count": 1, "score": 0, "last_activity_date": 1568849811, "creation_date": 1568838243, "last_edit_date": 1568849811, "question_id": 58000264, "link": "https://stackoverflow.com/questions/58000264/is-it-valid-to-add-an-entire-array-of-bytes-at-once-by-converting-them-to-a-larg", "title": "Is it valid to add an entire array of bytes at once by converting them to a larger integer data type?", "body": "<p>If I have two arrays that contain <code>u8</code>s, can I convert them into a larger integer type to reduce the number of additions I need to do? For example, if two byte arrays each contain 4 bytes, can I make them each into a <code>u32</code>, do the addition, and then convert them back? </p>\n\n<p>For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let a = u32::from_ne_bytes([1, 2, 3, 4]);\nlet b = u32::from_ne_bytes([5, 6, 7, 8]);\n\nlet c = a + b;\nlet c_bytes = u32::to_ne_bytes(c);\n\nassert_eq!(c_bytes, [6, 8, 10, 12]);\n</code></pre>\n\n<p>This example results in the correct output.</p>\n\n<ol>\n<li>Does this always result in the right output (assuming there is no overflow)?</li>\n<li>Is this faster than just doing the additions individually?</li>\n<li>Does it hold true for other integer types? Such as 2 <code>u16</code>s in a <code>u32</code> added with 2 other <code>u16</code>s in a <code>u32</code>?</li>\n</ol>\n\n<p>If this exists and is common, what is it called?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568835858, "post_id": 57999749, "comment_id": 102405421, "body": "It looks like your question might be answered by the answers of <a href=\"https://stackoverflow.com/q/46185453/155423\">Should the Copy trait always be implemented if possible?</a>. If not, please <b><a href=\"https://stackoverflow.com/posts/57999749/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568835890, "post_id": 57999749, "comment_id": 102405436, "body": "Specifically: <i>one could still cause a large memory copy operation by merely moving the value (though if you&#39;re lucky, the compiler might optimize it away).</i>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568836053, "post_id": 57999749, "comment_id": 102405499, "body": "For <i>this</i> specific case, I&#39;d trust the optimizer until profiling proved me wrong."}, {"owner": {"reputation": 35644, "user_id": 4954037, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/YOM4r.jpg?s=128&g=1", "display_name": "hiro protagonist", "link": "https://stackoverflow.com/users/4954037/hiro-protagonist"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568836237, "post_id": 57999749, "comment_id": 102405565, "body": "the answer also states: <i>both operations are implemented as a shallow memory copy</i>... hmm. i&#39;m guessing my deep-copy thinking is wrong (in general) and the optimizer will be smart about it in some way."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568836605, "post_id": 57999749, "comment_id": 102405715, "body": "&quot;shallow&quot; and &quot;deep&quot; don&#39;t have strong meaning here. Perhaps you can define what you mean by them?"}, {"owner": {"reputation": 35644, "user_id": 4954037, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/YOM4r.jpg?s=128&g=1", "display_name": "hiro protagonist", "link": "https://stackoverflow.com/users/4954037/hiro-protagonist"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568836699, "post_id": 57999749, "comment_id": 102405752, "body": "ok, you are right. by &quot;deep&quot; i meant that all the elements in the tuple (the 10 integers in my example) are copied."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568836724, "post_id": 57999749, "comment_id": 102405762, "body": "Based on the code that you&#39;ve provided, there&#39;s no need for a copy to take place as <code>tpl</code> is never used again. In fact, the code you&#39;ve provided is likely to be completely removed when optimizations are applied. However, <b>semantically</b>, the data <i>might</i> be moved and it <i>might</i> be copied."}, {"owner": {"reputation": 35644, "user_id": 4954037, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/YOM4r.jpg?s=128&g=1", "display_name": "hiro protagonist", "link": "https://stackoverflow.com/users/4954037/hiro-protagonist"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568836780, "post_id": 57999749, "comment_id": 102405785, "body": "ok, sure, i should have added print statements for both below the assignment. (will do that)."}, {"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 0, "creation_date": 1568838635, "post_id": 57999749, "comment_id": 102406471, "body": "In rust, when you say <code>let x = y</code> you are either copying the entirety of <code>y</code> into <code>x</code> if it&#39;s <code>Copy</code>, but if it&#39;s not, then it <i>could</i> be moved (And therefore incur a <code>memcpy</code>). This is to say, that if I <code>Copy</code> something by reassigning it, then I am doing a bitwise copy of the item."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 0, "creation_date": 1568838984, "post_id": 57999749, "comment_id": 102406595, "body": "@OptimisticPeach that&#39;s overly simplistic. No copy needs to occur if <code>y</code> is never used again. <code>let x = y</code> might result in a move even if the type is <code>Copy</code>."}, {"owner": {"reputation": 2659, "user_id": 8050514, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6CRdl.jpg?s=128&g=1", "display_name": "Optimistic Peach", "link": "https://stackoverflow.com/users/8050514/optimistic-peach"}, "edited": false, "score": 1, "creation_date": 1568839151, "post_id": 57999749, "comment_id": 102406651, "body": "I didn&#39;t mean to over exaggerate, I was talking as if we didn&#39;t apply any optimizations and the compiler produced assembly exactly as written. In other words, I was talking semantically, which says that <code>Copy</code> items <i>can</i> be copied bitwise and non-<code>Copy</code> items are moved. It&#39;s up to the optimizer to decide if you actually move the value or simply copy it."}], "owner": {"reputation": 35644, "user_id": 4954037, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/YOM4r.jpg?s=128&g=1", "display_name": "hiro protagonist", "link": "https://stackoverflow.com/users/4954037/hiro-protagonist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 78, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1568836856, "creation_date": 1568835623, "last_edit_date": 1568836856, "question_id": 57999749, "link": "https://stackoverflow.com/questions/57999749/can-an-assignment-result-in-a-potentially-expensive-deep-copy-of-a-tuple", "title": "Can an assignment result in a potentially expensive deep-copy of a tuple?", "body": "<p><a href=\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> states:</p>\n\n<blockquote>\n  <p>So what types are <code>Copy</code>?</p>\n  \n  <p>[...]</p>\n  \n  <ul>\n  <li>Tuples, if they only contain types that are also <code>Copy</code>. For example, <code>(i32, i32)</code> is <code>Copy</code>, but <code>(i32, String)</code> is not.</li>\n  </ul>\n</blockquote>\n\n<p>Does this mean that an assignment of a tuple with a considerable number of elements that are also <code>Copy</code> can result in a potentially expensive deep-copy of a tuple? </p>\n\n<p>In this example, would Rust make a deep copy of the tuple and all of its contents?</p>\n\n<pre><code>let tpl = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);  // and many more entries\nlet tpl2 = tpl;\nprintln!(\"{:?} {:?}\", tpl, tpl2);\n</code></pre>\n\n<p>This seems counter-intuitive for a language that is fast in almost everything it does. Are tuples (of items that are <code>Copy</code>) just meant to be short enough that this will not have an impact on performance?</p>\n"}, {"tags": ["error-handling", "rust", "type-conversion"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568818854, "post_id": 57995708, "comment_id": 102397991, "body": "It&#39;s hard to answer your question because it doesn&#39;t include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Your error message is about line 185, but there&#39;s not 185 lines of code present. It would make it easier for us to help you if you try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project, then <a href=\"https://stackoverflow.com/posts/57995708/edit\">edit</a> your question to include the additional info. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MRE tips</a> you can use to reduce your original code for posting here. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1568818951, "post_id": 57995708, "comment_id": 102398036, "body": "You&#39;ve linked to the <code>From</code> trait but are not calling the <code>From</code> trait in any manner. It&#39;s not automatic, you have to invoke it (either by directly calling <code>From</code> or indirectly via the <code>?</code> operator)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1568819395, "post_id": 57995708, "comment_id": 102398283, "body": "You may be interested in <a href=\"https://stackoverflow.com/q/48430836/155423\">Rust proper error handling (auto convert from one error type to another with question mark)</a>; <a href=\"https://stackoverflow.com/q/42584368/155423\">How do you define custom <code>Error</code> types in Rust?</a>; <a href=\"https://stackoverflow.com/q/30505639/155423\">How to do error handling in Rust and what are the common pitfalls?</a>"}, {"owner": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1568819823, "post_id": 57995708, "comment_id": 102398511, "body": "@Shepmaster Thank you for the suggestions. I will prepare a minimal reproducible example."}, {"owner": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568819902, "post_id": 57995708, "comment_id": 102398544, "body": "@Shepmaster Regarding the comment that I am not calling <code>From</code> trait, the example code in the rust documentation page is also not calling <code>From</code> trait explicitly."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568820593, "post_id": 57995708, "comment_id": 102398964, "body": "<i>the example code in the rust documentation page is also not calling <code>From</code> trait</i> \u2014 where? You&#39;ll need to be more specific. The very first example has <code>String::from</code>, calling the trait, but I&#39;m not going to hand-check every code example."}, {"owner": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568821449, "post_id": 57995708, "comment_id": 102399466, "body": "@Shepmaster I was referring to the <code>open_and_parse_file</code> function in the second example. <code>fs::read_to_string</code> returns <code>std::io::Result&lt;T, std::io::Error&gt;</code>, whereas <code>open_and_parse_file</code> returns <code>Result&lt;i32, CliError&gt;</code>, yet <code>fs::read_to_string(&amp;file_name)?;</code> within <code>open_and_parse_file</code> compiles successfully."}, {"owner": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568821512, "post_id": 57995708, "comment_id": 102399501, "body": "The documentation says, <code>The &#39;?&#39; operator automatically converts the underlying error type to our custom error type by calling Into&lt;CliError&gt;::into which is automatically provided when implementing From. The compiler then infers which implementation of Into should be used.</code> There is no explicit conversion."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "edited": false, "score": 0, "creation_date": 1568821549, "post_id": 57995708, "comment_id": 102399525, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/199640/discussion-between-shepmaster-and-joyce-babu\">continue this discussion in chat</a>."}], "answers": [{"tags": [], "owner": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "is_accepted": true, "score": 0, "last_activity_date": 1568827962, "last_edit_date": 1568827962, "creation_date": 1568825412, "answer_id": 57997475, "question_id": 57995708, "link": "https://stackoverflow.com/questions/57995708/why-isnt-an-error-type-implicitly-converted-when-i-return-it/57997475#57997475", "title": "Why isn&#39;t an error type implicitly converted when I return it?", "body": "<p>Thanks to @Shepmaster's help, I was able resolve the error.</p>\n\n<p>I did not realize that I was returning the result object directly. I had to unwrap the result object for the conversion to work.</p>\n\n<p>The following code attempts to return a value of type <code>Result&lt;_, windows_services::Error&gt;</code> as <code>Result&lt;_, WinServiceError&gt;</code>.</p>\n\n<pre><code>fn get_manager(request_access: ServiceManagerAccess) -&gt; Result&lt;ServiceManager, WinServiceError&gt; {\n    ServiceManager::local_computer(None::&lt;&amp;str&gt;, request_access)\n}\n</code></pre>\n\n<p>But the following code works, because we are now creating a new Result object of the correct signature, and rust compiler performs the conversion between the error types while creating the new object.</p>\n\n<pre><code>fn get_manager(request_access: ServiceManagerAccess) -&gt; Result&lt;ServiceManager, WinServiceError&gt; {\n    Ok(ServiceManager::local_computer(None::&lt;&amp;str&gt;, request_access)?)\n}\n</code></pre>\n"}], "owner": {"reputation": 15750, "user_id": 465590, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/637c4bbe3ae3ef4e53899bd41a43b614?s=128&d=identicon&r=PG", "display_name": "Joyce Babu", "link": "https://stackoverflow.com/users/465590/joyce-babu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 160, "favorite_count": 0, "accepted_answer_id": 57997475, "answer_count": 1, "score": -1, "last_activity_date": 1568827962, "creation_date": 1568818643, "last_edit_date": 1568827962, "question_id": 57995708, "link": "https://stackoverflow.com/questions/57995708/why-isnt-an-error-type-implicitly-converted-when-i-return-it", "title": "Why isn&#39;t an error type implicitly converted when I return it?", "body": "<p>The following code fails to compile</p>\n\n<pre><code>// winservice.rs\n\n#[macro_use] extern crate err_derive;\nextern crate windows_service;\n\nuse windows_service::service_manager::{ServiceManager, ServiceManagerAccess};\n\n#[derive(Debug, Error)]\npub enum WinServiceError {\n    #[error(display = \"could not query windows services api\")]\n    WinApiError(windows_service::Error),\n}\n\nimpl From&lt;windows_service::Error&gt; for WinServiceError {\n    fn from(error: windows_service::Error) -&gt; Self {\n        WinServiceError::WinApiError(error)\n    }\n}\n\nfn get_manager(request_access: ServiceManagerAccess) -&gt; Result&lt;ServiceManager, WinServiceError&gt; {\n    ServiceManager::local_computer(None::&lt;&amp;str&gt;, request_access)\n}\n\npub fn main() {\n    // get_manager();\n}\n\n</code></pre>\n\n<p>I am getting the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n   --&gt; src/winservice.rs:186:5\n    |\n185 | fn get_manager(request_access: ServiceManagerAccess) -&gt; Result&lt;ServiceManager, Error&gt; {\n    |                                                         ----------------------------- expected `std::result::Result&lt;windows_service::service_manager::ServiceManager, winservice::Error&gt;` because of return type\n186 |     ServiceManager::local_computer(None::&lt;&amp;str&gt;, request_access)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `winservice::Error`, found enum `windows_service::Error`\n    |\n    = note: expected type `std::result::Result&lt;_, winservice::Error&gt;`\n               found type `std::result::Result&lt;_, windows_service::Error&gt;`\n</code></pre>\n\n<p>Why isn't the Rust compiler <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\">auto converting the return type</a> from <code>windows_service::Error</code> to <code>winservice::Error</code>?</p>\n"}, {"tags": ["design-patterns", "rust", "idioms"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1568817546, "post_id": 57995352, "comment_id": 102397135, "body": "I&#39;m glad you like it!"}, {"owner": {"reputation": 7630, "user_id": 709852, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/bf402f309d40d607a369395e32a984fc?s=128&d=identicon&r=PG", "display_name": "Henry Gomersall", "link": "https://stackoverflow.com/users/709852/henry-gomersall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1568818539, "post_id": 57995352, "comment_id": 102397805, "body": "@Shepmaster yes, it has a very elegant API!"}], "answers": [{"comments": [{"owner": {"reputation": 7630, "user_id": 709852, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/bf402f309d40d607a369395e32a984fc?s=128&d=identicon&r=PG", "display_name": "Henry Gomersall", "link": "https://stackoverflow.com/users/709852/henry-gomersall"}, "edited": false, "score": 0, "creation_date": 1568818513, "post_id": 57995491, "comment_id": 102397788, "body": "Ah, that makes sense. So snafu <i>is</i> extending <code>std::result::Result</code>, and to get around the orphan rules it is necessary to import <code>ResultExt</code> so the extension trait exists in the local scope."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1568818540, "last_edit_date": 1568818540, "creation_date": 1568817917, "answer_id": 57995491, "question_id": 57995352, "link": "https://stackoverflow.com/questions/57995352/what-design-pattern-does-the-snafu-library-use-to-extend-external-types/57995491#57995491", "title": "What design pattern does the SNAFU library use to extend external types?", "body": "<p><a href=\"https://docs.rs/snafu/0.5.0/snafu/trait.ResultExt.html\" rel=\"nofollow noreferrer\"><code>ResultExt</code></a> is an <em>extension trait</em>, which is why it uses the somewhat common suffix <code>Ext</code>.</p>\n\n<p>Reduced, the implementation contains the definition of the trait and a small handful of implementations of the trait for specific types (or just one):</p>\n\n<pre><code>pub trait ResultExt&lt;T, E&gt;: Sized {\n    fn context&lt;C, E2&gt;(self, context: C) -&gt; Result&lt;T, E2&gt;\n    where\n        C: IntoError&lt;E2, Source = E&gt;,\n        E2: std::error::Error + ErrorCompat;\n}\n\nimpl&lt;T, E&gt; ResultExt&lt;T, E&gt; for std::result::Result&lt;T, E&gt; {\n    fn context&lt;C, E2&gt;(self, context: C) -&gt; Result&lt;T, E2&gt;\n    where\n        C: IntoError&lt;E2, Source = E&gt;,\n        E2: std::error::Error + ErrorCompat,\n    {\n        self.map_err(|error| context.into_error(error))\n    }\n}\n</code></pre>\n\n<p>By importing <code>ResultExt</code>, you bring the trait and its methods into scope. The library has implemented them for the <code>Result</code> type, so you are able to make use of them as well.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/33376486/155423\">Is there a way other than traits to add methods to a type I don&#39;t own?</a></li>\n</ul>\n\n<blockquote>\n  <p>I'm aware of type aliasing, but not using the syntax in which the left hand side has a generic assigned. Clearly, this is an important part of the design pattern.</p>\n</blockquote>\n\n<p>It's not important for the ability to use <code>.context()</code>, it's just a practice I encourage. Most custom <code>Result</code> aliases shadow the name <code>Result</code> (e.g. <a href=\"https://doc.rust-lang.org/std/io/type.Result.html\" rel=\"nofollow noreferrer\"><code>std::io::Result</code></a>), which means if you need to use a different error type, you need to use ugly full paths or another alias (e.g. <code>type StdResult&lt;T, E&gt; = std::result::Result&lt;T, E&gt;</code>).</p>\n\n<p>By creating the local alias <code>Result</code> with a <em>default generic</em>, the user can  type <code>Result&lt;T&gt;</code> instead of the more verbose <code>Result&lt;T, MyError&gt;</code>, but can still use <code>Result&lt;T, SomeOtherError&gt;</code> when needed. Sometimes, I'll even go further and define a default type for the success type. This is most common in unit tests:</p>\n\n<pre><code>mod test {\n    type Result&lt;T = (), E = Box&lt;dyn std::error::Error&gt;&gt; = std::result::Result&lt;T, E&gt;;\n\n    fn setup() -&gt; Result&lt;String&gt; {\n        Ok(String::new())\n    }\n\n    fn special() -&gt; Result&lt;String, std::io::Error&gt; {\n        std::fs::read_to_string(\"/etc/hosts\")\n    }\n\n    #[test]\n    fn x() -&gt; Result {\n        Ok(())\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7630, "user_id": 709852, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/bf402f309d40d607a369395e32a984fc?s=128&d=identicon&r=PG", "display_name": "Henry Gomersall", "link": "https://stackoverflow.com/users/709852/henry-gomersall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "accepted_answer_id": 57995491, "answer_count": 1, "score": 1, "last_activity_date": 1568818540, "creation_date": 1568817456, "last_edit_date": 1568817540, "question_id": 57995352, "link": "https://stackoverflow.com/questions/57995352/what-design-pattern-does-the-snafu-library-use-to-extend-external-types", "title": "What design pattern does the SNAFU library use to extend external types?", "body": "<p>I've been playing around with the interesting <a href=\"https://docs.rs/crate/snafu/0.5.0\" rel=\"nofollow noreferrer\">SNAFU library</a>.</p>\n\n<p>A slightly modified and stand-alone example from the SNAFU page is as below:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use snafu::{ResultExt, Snafu};\nuse std::{fs, io, path::PathBuf};\n\n#[derive(Debug, Snafu)]\nenum Error {\n    #[snafu(display(\"Unable to read configuration from {}: {}\", path.display(), source))]\n    ReadConfiguration { source: io::Error, path: PathBuf },\n}\n\ntype Result&lt;T, E = Error&gt; = std::result::Result&lt;T, E&gt;;\n\nfn process_data() -&gt; Result&lt;()&gt; {\n    let path = \"config.toml\";\n    let read_result: std::result::Result&lt;String, io::Error&gt; = fs::read_to_string(path);    \n    let _configuration = read_result.context(ReadConfiguration { path })?;\n    Ok(())\n}\n\nfn main() {\n    let foo = process_data();\n\n    match foo {\n        Err(e) =&gt; println!(\"Hello {}\", e),\n        _ =&gt; println!(\"success\")\n    }\n}\n</code></pre>\n\n<p>The change I've made is to make the type on the <code>Result</code> from <code>fs::read_to_string(path)</code> explicit in <code>process_data()</code>.</p>\n\n<p>Given this, I can't understand how <code>read_result</code> has the <code>context</code> method available to it, as the <code>std::result::Result</code> docs don't make any reference to context (and the compiler similarly complains if you strip out the SNAFU stuff and try to access context).</p>\n\n<p>There is a pattern being used here that is not obvious to me. My naive understanding is that external types cannot be extended because of the orphan rules, but something is happening here that looks much like such an extension.</p>\n\n<p>I'm also confused by the <code>type Result...</code> line. I'm aware of type aliasing, but not using the syntax in which the left hand side has a generic assigned. Clearly, this is an important part of the design pattern.</p>\n\n<p>My request is for clarification as to what pattern is being used here and how it works. It seems to get at some pretty interesting aspects of Rust. Further reading would be valued!</p>\n"}, {"tags": ["reference", "rust", "lifetime"], "comments": [{"owner": {"reputation": 13, "user_id": 9117441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83f41fa3ba18e116704b5b7eeebbbdda?s=128&d=identicon&r=PG&f=1", "display_name": "gpoblon", "link": "https://stackoverflow.com/users/9117441/gpoblon"}, "edited": false, "score": 0, "creation_date": 1568806786, "post_id": 57991717, "comment_id": 102390806, "body": "Actually self-response... I&#39;ve been fighting with it for hours and found a fix right after posting. Maybe it will be useful for someone else :<code>pub fn set_child_ref(&amp;mut self) {</code> =&gt; <code>pub fn set_child_ref(&amp;&#39;a mut self) {</code> I am not sure why but this lifetime had to be explicit. Feel free to give further explanations !"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1568810154, "post_id": 57991717, "comment_id": 102392676, "body": "<code>&amp;&#39;a mut self</code>, when <code>&#39;a</code> is a parameter of <code>Self</code>, is almost always a mistake. In this case it works, but you have made it impossible to do anything <i>else</i> with <code>parent</code>, because it&#39;s now permanently (and uniquely) borrowed. The best solution to this kind of problem is to avoid self-referential structs. <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> has further explanation and suggestions."}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 2, "last_activity_date": 1568808407, "creation_date": 1568808407, "answer_id": 57992429, "question_id": 57991717, "link": "https://stackoverflow.com/questions/57991717/infer-an-appropriate-lifetime-for-methods-including-interior-references/57992429#57992429", "title": "Infer an appropriate lifetime for methods including interior references", "body": "<blockquote>\n  <p>To my eyes setting lifetimes here (<code>pub fn get&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Child {</code>) should reassure the compiler the ref will live long enough... but, nah.</p>\n</blockquote>\n\n<p>The lifetime annotations you've provided there are exactly what the Rust compiler would infer if you elided them, so this wouldn't make any difference.</p>\n\n<p>As written, your <code>set_child_ref</code> method has elided the lifetimes, which means the inferred lifetimes are like this:</p>\n\n<pre><code>impl&lt;'a&gt; Parent&lt;'a&gt; {\n    pub fn set_child_ref&lt;'b&gt;(&amp;'b mut self) {\n        self.child_ref.push(self.wrapper.get());\n    }\n}\n</code></pre>\n\n<p>This won't work. The lifetime <code>'b</code> will be determined by how the <em>caller</em> of <code>set_child_ref</code> uses the parameter. The reference to <code>self</code> therefore could be shorter than the lifetime <code>'a</code>. This would cause a problem because the reference to <code>ChildWrapper</code>, that you are storing in <code>child_ref</code>, is borrowed from that (potentially shorter-lived) reference.</p>\n\n<p>The easy fix is to say that the reference to <code>self</code> must outlive <code>'a</code>, which is the lifetime of the references in the <code>child_ref</code> vector:</p>\n\n<pre><code>impl&lt;'a&gt; Parent&lt;'a&gt; {\n    pub fn set_child_ref(&amp;'a mut self) {\n        self.child_ref.push(self.wrapper.get());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 13, "user_id": 9117441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83f41fa3ba18e116704b5b7eeebbbdda?s=128&d=identicon&r=PG&f=1", "display_name": "gpoblon", "link": "https://stackoverflow.com/users/9117441/gpoblon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 49, "favorite_count": 0, "accepted_answer_id": 57992429, "answer_count": 1, "score": 1, "last_activity_date": 1568808534, "creation_date": 1568806086, "last_edit_date": 1568808534, "question_id": 57991717, "link": "https://stackoverflow.com/questions/57991717/infer-an-appropriate-lifetime-for-methods-including-interior-references", "title": "Infer an appropriate lifetime for methods including interior references", "body": "<p>I am learning Rust and facing a compilation issue. I simplified my code (so it does not make any sense as it is right now) to post my problem here.</p>\n\n<p>I have a <code>Parent</code> structure filled with a <code>ChildWrapper</code> and a <code>Vec&lt;&amp;Child&gt;</code>. But the compiler won't let me set the reference, as the created reference would not necessarily outlive its content. To my eyes setting lifetimes here (<code>pub fn get&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Child {</code>) should reassure the compiler the ref will live long enough... but, nah.</p>\n\n<p>If I take <code>ChildWrapper</code> out of <code>Parent</code> I can make it work but still, I don't understand what is not ok in my code.</p>\n\n<pre><code>struct Child {\n    e: bool,\n}\n\nimpl Child {\n    pub fn new() -&gt; Child {\n        Child { e: true }\n    }\n}\n\nstruct ChildWrapper {\n    child: Child,\n}\n\nimpl ChildWrapper {\n    pub fn new() -&gt; ChildWrapper {\n        ChildWrapper { child: Child::new() }\n    }\n\n    pub fn get&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Child {\n        &amp;self.child\n    }\n}\n\nstruct Parent&lt;'a&gt; {\n    child_ref: Vec&lt;&amp;'a Child&gt;,\n    wrapper: ChildWrapper,\n}\n\nimpl&lt;'a&gt; Parent&lt;'a&gt; {\n    pub fn new() -&gt; Parent&lt;'a&gt; {\n        Parent {\n            child_ref : Vec::new(),\n            wrapper: ChildWrapper::new(),\n        }\n    }\n\n    pub fn set_child_ref(&amp;mut self) {\n        self.child_ref.push(self.wrapper.get());\n    }\n}\n\nfn main() {\n    let mut parent = Parent::new();\n    parent.set_child_ref();\n}\n</code></pre>\n\n<p>And this is the error I am getting :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src/main.rs:41:36\n   |\n41 |         self.child_ref.push(self.wrapper.get());\n   |                                          ^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 40:2...\n  --&gt; src/main.rs:40:2\n   |\n40 |       pub fn set_child_ref(&amp;mut self) {\n   |  _____^\n41 | |         self.child_ref.push(self.wrapper.get());\n42 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:41:23\n   |\n41 |         self.child_ref.push(self.wrapper.get());\n   |                             ^^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 32:6...\n  --&gt; src/main.rs:32:6\n   |\n32 | impl&lt;'a&gt; Parent&lt;'a&gt; {\n   |      ^^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:41:23\n   |\n41 |         self.child_ref.push(self.wrapper.get());\n   |                             ^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I know how to workaround the issue, and it probably is the sign of a bad design (or maybe not ?) but I am looking for an explanation and eventually a solution using this same architecture...\nLike how to explicitly set the correct lifetime for <code>self.wrapper.get()</code> ?</p>\n\n<p>Thank you!</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 7, "last_activity_date": 1568801685, "creation_date": 1568801685, "answer_id": 57990375, "question_id": 57990164, "link": "https://stackoverflow.com/questions/57990164/where-does-the-custom-cargo-command-install-ra-in-rust-analyzer-come-from/57990375#57990375", "title": "Where does the custom Cargo command &quot;install-ra&quot; in rust-analyzer come from?", "body": "<p>The repository in question contains a custom <strong>local Cargo configuration file</strong> in <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/.cargo/config\" rel=\"noreferrer\">\".cargo/config\"</a>. In this case, it defines a bunch of aliases, including <code>install-ra</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[alias]\n\n# Installs the visual studio code extension\ninstall-ra   = \"run --package ra_tools --bin ra_tools -- install-ra\"\ninstall-code = \"run --package ra_tools --bin ra_tools -- install-ra\" # just an alias\n\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/46649992/1233251\">Where can I find .cargo/config?</a></li>\n</ul>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 332, "favorite_count": 0, "accepted_answer_id": 57990375, "answer_count": 1, "score": 3, "last_activity_date": 1568811464, "creation_date": 1568801080, "last_edit_date": 1568811464, "question_id": 57990164, "link": "https://stackoverflow.com/questions/57990164/where-does-the-custom-cargo-command-install-ra-in-rust-analyzer-come-from", "title": "Where does the custom Cargo command &quot;install-ra&quot; in rust-analyzer come from?", "body": "<p>The instructions to build <a href=\"https://github.com/rust-analyzer/rust-analyzer\" rel=\"nofollow noreferrer\">rust-analyzer</a> say to run this command:</p>\n\n<pre><code>cargo install-ra\n</code></pre>\n\n<p>It works, but how? It's not an official command and it isn't in <code>cargo --list</code> or <code>Cargo.toml</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1568799056, "post_id": 57989239, "comment_id": 102386477, "body": "That happens because <code>0x80</code> is a special value, since <code>-0x80 as u8 == 0x80</code>. Try with any another value, and you&#39;ll see that&#39;s the two&#39;s complement that is formatted."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 3, "creation_date": 1568799374, "post_id": 57989239, "comment_id": 102386660, "body": "Put another way, the <code>x</code> formatting will convert signed values to unsigned."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1568800590, "post_id": 57989239, "comment_id": 102387341, "body": "To clarify @PeterHall&#39;s comment, as per the documentation: &quot;For primitive signed integers (i8 to i128, and isize), negative values are formatted as the two\u2019s complement representation.&quot;"}, {"owner": {"reputation": 709, "user_id": 10126273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6trXt.png?s=128&g=1", "display_name": "Tenders McChiken", "link": "https://stackoverflow.com/users/10126273/tenders-mcchiken"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1568868064, "post_id": 57989239, "comment_id": 102412596, "body": "It seems this behavior is documented in the <code>Binary</code>, <code>Octal</code>, <code>LowerHex</code>, and <code>UpperHex</code> traits directly rather than in the expected module-level documentation <code>std::fmt</code> as  @mcarton pointed out. Thank you everyone for your input."}], "owner": {"reputation": 709, "user_id": 10126273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6trXt.png?s=128&g=1", "display_name": "Tenders McChiken", "link": "https://stackoverflow.com/users/10126273/tenders-mcchiken"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 41, "favorite_count": 0, "closed_date": 1568799146, "answer_count": 0, "score": 2, "last_activity_date": 1568798262, "creation_date": 1568798262, "question_id": 57989239, "link": "https://stackoverflow.com/questions/57989239/how-can-i-force-rust-to-format-hexadecimal-and-other-non-base-10-integers-correc", "closed_reason": "Duplicate", "title": "How can I force rust to format hexadecimal and other non-base-10 integers correctly?", "body": "<p>I'm trying to print a negative integer in hexadecimal notation, but can't manage to get rust to automatically print the negative sign. The following code illustrates the problem (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ca1e5a8107bd764ba19344979b3dbb86\" rel=\"nofollow noreferrer\">link</a> to the playpen):</p>\n\n<pre><code>fn main() {\n    let x = i8::from_str_radix(\"-80\", 16).unwrap();\n    assert_eq!(x, -0x80);\n    println!(\"{:x}!\", x as i8);\n} \n</code></pre>\n\n<p>When ran, this code writes <code>80!</code> to <code>stdout</code> rather than the expected -80. I've tried to add the <code>+</code> sign flag but the output remained incorrect (in fact, it prepends an incorrect '+' sign!). As far as I can tell, this issue affects every base except 10. Rust's official <a href=\"https://doc.rust-lang.org/std/fmt/\" rel=\"nofollow noreferrer\">documentation</a> makes no mention of this quirk.</p>\n\n<p>My questions are:</p>\n\n<ol>\n<li>Is this intended behavior?</li>\n<li>If it is indeed intended, then is it possible to force rust's formatter to print a negative sign? (to avoid having to handle this as a special case).</li>\n</ol>\n"}, {"tags": ["rust", "serde", "rust-diesel", "rust-rocket"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568766867, "post_id": 57982831, "comment_id": 102376007, "body": "or, you can implement a custom error type and <code>From&lt;diesel::Error&gt;</code> for it. From there, you are quite literally free to do anything. As the error type for diesel is contained in the crate, there is no way you can add serialize to it short of modifying the crate itself."}], "answers": [{"comments": [{"owner": {"reputation": 99, "user_id": 11274749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8f411d49deedda4f2ad58be22a05a6c?s=128&d=identicon&r=PG&f=1", "display_name": "SRugina", "link": "https://stackoverflow.com/users/11274749/srugina"}, "edited": false, "score": 0, "creation_date": 1568963760, "post_id": 57983966, "comment_id": 102449653, "body": "This is the correct answer for the question I asked, so I&#39;ve marked it as correct - though in the code I have I would have to somehow get diesel&#39;s .execute() to return the proxy struct (correct me if I&#39;m wrong). so @Alistair &#39;s answer is what I ended up using in my code"}], "tags": [], "owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "is_accepted": true, "score": 3, "last_activity_date": 1568771341, "creation_date": 1568771341, "answer_id": 57983966, "question_id": 57982831, "link": "https://stackoverflow.com/questions/57982831/can-one-implement-derive-serialize-on-an-enum-without-deriveserialize/57983966#57983966", "title": "Can one implement/derive Serialize on an enum without #[derive(Serialize)]?", "body": "<p>Serde provides a workaround for deriving serialization implementations for external crates - see the section <a href=\"https://serde.rs/remote-derive.html\" rel=\"nofollow noreferrer\">Derive for remote crates</a> in their documentation.</p>\n\n<p>You have to define an enum with the same definition as the one you are trying to serialize (<code>diesel::result::Error</code> in your case), and then identify that as a kind of proxy for the type you are trying to serialize, like this:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\n#[serde(remote = \"diesel::result::Error\")]\nstruct ErrorDef {\n    // Definition in here the same as the enum diesel::result::Error\n    // ...\n}\n</code></pre>\n\n<p>Of course you would have to do the same for all of the types enclosed within the <code>Error</code> type as well (or at least any types that don't already implement Serialize).</p>\n\n<p>The documentation states that Serde checks the definition you provide against the one in the 'remote' crate, and throws an error if they differ, which would help keep them in sync.</p>\n\n<p>Also note that this does not result in <code>diesel::result::Error</code> implementing Serialize - rather you now have a stand-in type that you can use like this:</p>\n\n<pre><code>struct JsonErrorRespone {\n    pub success: bool,\n    #[serde(with = \"ErrorDef\")]\n    pub error: diesel::result::Error,\n}\n</code></pre>\n\n<p>You would then serialize an instance of the above struct instead of your existing <code>json!</code> macro call.</p>\n\n<p>Alternatively the document linked above also gives some tips for manually calling the correct Serialize / Deserialize implementations.</p>\n\n<p>Disclaimer: I haven't used this facility yet, the above was gleaned from the documentation only.</p>\n"}, {"tags": [], "owner": {"reputation": 6186, "user_id": 11324, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/dca5d128e87793d471460d1c3a46617b?s=128&d=identicon&r=PG", "display_name": "Alistair", "link": "https://stackoverflow.com/users/11324/alistair"}, "is_accepted": false, "score": 1, "last_activity_date": 1568784994, "creation_date": 1568784994, "answer_id": 57985729, "question_id": 57982831, "link": "https://stackoverflow.com/questions/57982831/can-one-implement-derive-serialize-on-an-enum-without-deriveserialize/57985729#57985729", "title": "Can one implement/derive Serialize on an enum without #[derive(Serialize)]?", "body": "<p>The short answer: <a href=\"https://serde.rs/impl-serialize.html\" rel=\"nofollow noreferrer\">yes you can</a>. Personally I've always found it a bit difficult.</p>\n\n<p>As a compromise, you could pull out just the parts of the error that are relevant to you, or even do:</p>\n\n<pre><code>ApiResponse {\n    json: json!({\"success\": false, \"error\": error.to_string() }),\n    status: Status::UnprocessableEntity,\n}\n</code></pre>\n\n<p>If you're content with just a textual representation of the error.</p>\n"}], "owner": {"reputation": 99, "user_id": 11274749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8f411d49deedda4f2ad58be22a05a6c?s=128&d=identicon&r=PG&f=1", "display_name": "SRugina", "link": "https://stackoverflow.com/users/11274749/srugina"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 644, "favorite_count": 0, "accepted_answer_id": 57983966, "answer_count": 2, "score": 1, "last_activity_date": 1568793508, "creation_date": 1568759628, "last_edit_date": 1568793508, "question_id": 57982831, "link": "https://stackoverflow.com/questions/57982831/can-one-implement-derive-serialize-on-an-enum-without-deriveserialize", "title": "Can one implement/derive Serialize on an enum without #[derive(Serialize)]?", "body": "<p>I'm using rust + rocket + diesel (orm) + serde_derive to make a rest api. Currently, I'm dealing with error handling for the api if diesel fails to insert a user for whatever reason. It looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn create(user: InsertableUser, connection: &amp;MysqlConnection) -&gt; ApiResponse {\n    let result = diesel::insert_into(users::table)\n        .values(&amp;InsertableUser::hashed_user(user))\n        .execute(connection);\n    match result {\n        Ok(_) =&gt; ApiResponse {\n            json: json!({\"success\": true, \"error\": null}),\n            status: Status::Ok,\n        },\n        Err(error) =&gt; {\n            println!(\"Cannot create the recipe: {:?}\", error);\n            ApiResponse {\n                json: json!({\"success\": false, \"error\": error}),\n                status: Status::UnprocessableEntity,\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>However, <code>json: json!({\"success\": false, \"error\": error}),</code> gives me this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound `diesel::result::Error: user::_IMPL_DESERIALIZE_FOR_User::_serde::Serialize` is not satisfied\n\nthe trait `user::_IMPL_DESERIALIZE_FOR_User::_serde::Serialize` is not implemented for `diesel::result::Error`\n\nnote: required because of the requirements on the impl of `user::_IMPL_DESERIALIZE_FOR_User::_serde::Serialize` for `&amp;diesel::result::Error`\nnote: required by `serde_json::value::to_value`rustc(E0277)\n&lt;::serde_json::macros::json_internal macros&gt;(123, 27): the trait `user::_IMPL_DESERIALIZE_FOR_User::_serde::Serialize` is not implemented for `diesel::result::Error`\n</code></pre>\n\n<p>By the sounds of it, <code>diesel::result::Error</code> does not <code>#[derive(Serialize)]</code>, and so cannot be serialized with the <code>json!</code> macro. Thus, I need some way to make the <code>diesel::result::Error</code> implement/derive <code>Serialize</code>.</p>\n\n<p>Thanks in advance for any help.</p>\n\n<p>BTW the ApiResponse looks like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use rocket::http::{ContentType, Status};\nuse rocket::request::Request;\nuse rocket::response;\nuse rocket::response::{Responder, Response};\nuse rocket_contrib::json::JsonValue;\n\n#[derive(Debug)]\npub struct ApiResponse {\n    pub json: JsonValue,\n    pub status: Status,\n}\n\nimpl&lt;'r&gt; Responder&lt;'r&gt; for ApiResponse {\n    fn respond_to(self, req: &amp;Request) -&gt; response::Result&lt;'r&gt; {\n        Response::build_from(self.json.respond_to(&amp;req).unwrap())\n            .status(self.status)\n            .header(ContentType::JSON)\n            .ok()\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "iterator", "ref", "borrowing"], "comments": [{"owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568749220, "post_id": 57980856, "comment_id": 102371205, "body": "Then I guess the bound should be <code>I: IntoIterator&lt;Item = (&amp;K, Option&lt;&amp;V&gt;)&gt;</code>"}, {"owner": {"reputation": 107, "user_id": 5409773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1716e9e5da8de7799c744fc52ecbf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Argentumbolo", "link": "https://stackoverflow.com/users/5409773/argentumbolo"}, "reply_to_user": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568751648, "post_id": 57980856, "comment_id": 102372188, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f4d2e8128bedb040f23d416667f6e62d\" rel=\"nofollow noreferrer\">This 2 and 3</a> variants don&#39;t work. What I did wrong?"}, {"owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568752125, "post_id": 57980856, "comment_id": 102372381, "body": "the <code>K: AsRef&lt;str&gt;, V: AsRef&lt;str&gt;</code> bounds are missing in <code>extend3</code>."}, {"owner": {"reputation": 107, "user_id": 5409773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1716e9e5da8de7799c744fc52ecbf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Argentumbolo", "link": "https://stackoverflow.com/users/5409773/argentumbolo"}, "reply_to_user": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568753189, "post_id": 57980856, "comment_id": 102372808, "body": "Turned out that it works <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e0ad16a79facd03590abddd17fcb3f8c\" rel=\"nofollow noreferrer\">this way</a>. Closer to @ttarikbnr solution."}, {"owner": {"reputation": 107, "user_id": 5409773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1716e9e5da8de7799c744fc52ecbf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Argentumbolo", "link": "https://stackoverflow.com/users/5409773/argentumbolo"}, "reply_to_user": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568755581, "post_id": 57980856, "comment_id": 102373632, "body": "And <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b573b821e4113cbd8ebd2ecb84fa8b9d\" rel=\"nofollow noreferrer\">also this way</a>. The problem is I don&#39;t understand why <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6e050b617bd3216489b4b269b216e101\" rel=\"nofollow noreferrer\">append works but append2 don&#39;t</a>."}, {"owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568755873, "post_id": 57980856, "comment_id": 102373707, "body": "You need to convert the <code>Option&lt;V&gt;</code> to a <code>Option&lt;&amp;str&gt;</code>, which you can do with <code>v.as_ref().map(|v| v.as_ref())</code>"}, {"owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "edited": false, "score": 0, "creation_date": 1568755918, "post_id": 57980856, "comment_id": 102373724, "body": "Also, you don&#39;t need <code>ref</code>, Rust has match ergonomics. Just write <code>let (k, v) = pair.borrow();</code>"}], "answers": [{"comments": [{"owner": {"reputation": 2420, "user_id": 682349, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=128&d=identicon&r=PG", "display_name": "Ultrasaurus", "link": "https://stackoverflow.com/users/682349/ultrasaurus"}, "edited": false, "score": 0, "creation_date": 1568759340, "post_id": 57982256, "comment_id": 102374668, "body": "I don&#39;t understand what this means: &quot;You don&#39;t need references in the tuple.&quot; The example in the playgroup doesn&#39;t work if I remove <code>Borrow</code> from <code>fn extend</code>:       `error[E0271]: type mismatch resolving &lt;std::slice::Iter&lt;&#39;<i>, (&amp;str, &amp;str)&gt; as std::iter::IntoIterator&gt;::Item == (</i>, _)"}, {"owner": {"reputation": 107, "user_id": 5409773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1716e9e5da8de7799c744fc52ecbf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Argentumbolo", "link": "https://stackoverflow.com/users/5409773/argentumbolo"}, "edited": false, "score": 0, "creation_date": 1568790712, "post_id": 57982256, "comment_id": 102381872, "body": "@Aloso, looks like it works. But what the difference? Wont it be one more copying?"}, {"owner": {"reputation": 107, "user_id": 5409773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1716e9e5da8de7799c744fc52ecbf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Argentumbolo", "link": "https://stackoverflow.com/users/5409773/argentumbolo"}, "edited": false, "score": 0, "creation_date": 1568798107, "post_id": 57982256, "comment_id": 102385867, "body": "OK. Last <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a373db5cd1a69b186b36f0ec5c1447a\" rel=\"nofollow noreferrer\">variation is this</a>. It doesn&#39;t required <b>.iter().copied()</b> and lifetime at <b>apply</b>."}], "tags": [], "owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "is_accepted": false, "score": 0, "last_activity_date": 1568755508, "creation_date": 1568755508, "answer_id": 57982256, "question_id": 57980856, "link": "https://stackoverflow.com/questions/57980856/how-to-specify-iterator-types-in-generic/57982256#57982256", "title": "How to specify Iterator types in generic?", "body": "<p>You don't need references in the tuple:</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e8c7000214513aec00b7de7d7d9b4e6f\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>fn extend&lt;I, K, V&gt;(iter: I)\nwhere\n    I: IntoIterator,\n    I::Item: Borrow&lt;(K, V)&gt;,\n    K: AsRef&lt;str&gt;,\n    V: AsRef&lt;str&gt;,\n{\n    for key in iter {\n        let (k, v) = key.borrow();\n        append(k.as_ref(), v.as_ref());\n    }\n}\n\nfn extend2&lt;I, K, V&gt;(iter: I)\nwhere\n    I: IntoIterator&lt;Item = (K, Option&lt;V&gt;)&gt;,\n    K: AsRef&lt;str&gt;,\n    V: AsRef&lt;str&gt;,\n{\n    for (k, v) in iter {\n        append3(k, v);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 107, "user_id": 5409773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1716e9e5da8de7799c744fc52ecbf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Argentumbolo", "link": "https://stackoverflow.com/users/5409773/argentumbolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 93, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1568755508, "creation_date": 1568748485, "last_edit_date": 1568749337, "question_id": 57980856, "link": "https://stackoverflow.com/questions/57980856/how-to-specify-iterator-types-in-generic", "title": "How to specify Iterator types in generic?", "body": "<p>This question is based on <a href=\"https://github.com/servo/rust-url/blob/7d2c9d6ceb3307a3fad4c4bcb7f5b07b5e24c755/src/form_urlencoded.rs#L276\" rel=\"nofollow noreferrer\">this code from the url crate</a>.</p>\n\n<p>The <code>extend</code> method receives an iterator over tuples with objects which may be borrowed as <code>&amp;str</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn extend&lt;I, K, V&gt;(iter: I)\nwhere\n    I: IntoIterator,\n    I::Item: Borrow&lt;(K, V)&gt;,\n    K: AsRef&lt;str&gt;,\n    V: AsRef&lt;str&gt;\n{\n    {\n        for key in iter {\n            let (ref k, ref v) = key.borrow();\n            append(k.as_ref(), v.as_ref());\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=213314dedd6c4f251d162b92fe8c573e\" rel=\"nofollow noreferrer\">Full example</a>.</p>\n\n<p>I want the <code>extend</code> method to deal with an iterator over <code>(&amp;str, Option&lt;&amp;str&gt;)</code> tuples. I tried different variants like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn extend&lt;I, K, V&gt;(iter: I)\nwhere\n    I: IntoIterator,\n    I::Item: Borrow&lt;(K, Option&lt;V&gt;)&gt;,\n    K: AsRef&lt;str&gt;,\n    V: AsRef&lt;str&gt;\n</code></pre>\n\n<p>but I don't understand how it works.</p>\n\n<p>How can I explain what I want to the compiler?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568748964, "post_id": 57980697, "comment_id": 102371084, "body": "It looks like your question might be answered by the (duplicate) answers of <a href=\"https://stackoverflow.com/q/48504103/155423\">What does the &#39;static lifetime mean in a trait bound in a Rust future?</a>. If not, please <b><a href=\"https://stackoverflow.com/posts/57980697/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 6186, "user_id": 11324, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/dca5d128e87793d471460d1c3a46617b?s=128&d=identicon&r=PG", "display_name": "Alistair", "link": "https://stackoverflow.com/users/11324/alistair"}, "edited": false, "score": 1, "creation_date": 1568790710, "post_id": 57980697, "comment_id": 102381871, "body": "I think this question is more specifically asking why a type which doesn&#39;t have a static lifetime would still satisfy the bound <code>T: &#39;static</code>. That seems different to the more general questions asked in the linked question and the ones it&#39;s marked as a duplicate of. (FWIW, I couldn&#39;t work out the answer to this question just by reading those answers.)"}], "answers": [{"tags": [], "owner": {"reputation": 6186, "user_id": 11324, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/dca5d128e87793d471460d1c3a46617b?s=128&d=identicon&r=PG", "display_name": "Alistair", "link": "https://stackoverflow.com/users/11324/alistair"}, "is_accepted": true, "score": 3, "last_activity_date": 1568790861, "last_edit_date": 1568790861, "creation_date": 1568790408, "answer_id": 57986912, "question_id": 57980697, "link": "https://stackoverflow.com/questions/57980697/do-non-reference-types-always-satisfy-a-lifetime-of-static/57986912#57986912", "title": "Do non-reference types always satisfy a lifetime of &#39;static?", "body": "<p>From the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2093-infer-outlives.md#background-outlives-requirements-today\" rel=\"nofollow noreferrer\">Background section of RFC 2093</a>:</p>\n\n<blockquote>\n  <p>[...] in order for a reference type &amp;'a T to be \"well formed\" (valid),\n  the compiler must know that the type T \"outlives\" the lifetime 'a --\n  meaning that all references contained in the type T must be valid for\n  the lifetime 'a. So, for example, the type i32 outlives any lifetime,\n  including 'static, since it has no references at all.</p>\n</blockquote>\n\n<p>So I'd say the answer to your question is: yes, any type which has no references (or which only contains static references) satisfies the <code>'static</code> bound.</p>\n\n<p>Side note: according to that RFC, bounds like <code>T: 'static</code> and <code>T: 'a</code> are known as <code>outlives requirements</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 2, "last_activity_date": 1568791310, "creation_date": 1568791310, "answer_id": 57987178, "question_id": 57980697, "link": "https://stackoverflow.com/questions/57980697/do-non-reference-types-always-satisfy-a-lifetime-of-static/57987178#57987178", "title": "Do non-reference types always satisfy a lifetime of &#39;static?", "body": "<p>You can think of a type bound <code>T: 'x</code> as \"Instances of <code>T</code> cannot suddenly become invalid because something that lives shorter than <code>'x</code> was dropped.\". However, this does not affect how long the instance of <code>T</code> itself lives.</p>\n\n<p>So, a reference becomes invalid if the referenced thing is dropped. Which means that the referenced thing must live at least as long as <code>'x</code> - for the entire run of the program in the case of <code>'static</code>.</p>\n\n<p>But something that own all its data - an <code>i32</code> or a <code>String</code> for example - never becomes invalid because something else is dropped. An integer is good until it is dropped itself. So it satisfies the <code>'static</code> bound.</p>\n"}], "owner": {"reputation": 2330, "user_id": 939467, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5c2ca1b3b94f649a13dfdee859a4db07?s=128&d=identicon&r=PG", "display_name": "Evan", "link": "https://stackoverflow.com/users/939467/evan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 1, "accepted_answer_id": 57986912, "answer_count": 2, "score": 2, "last_activity_date": 1568791310, "creation_date": 1568747763, "last_edit_date": 1568748904, "question_id": 57980697, "link": "https://stackoverflow.com/questions/57980697/do-non-reference-types-always-satisfy-a-lifetime-of-static", "title": "Do non-reference types always satisfy a lifetime of &#39;static?", "body": "<p>I'm trying to understand why the code below compiles. I wasn't expecting to be able to construct <code>Wrapper&lt;String&gt;</code> since <code>T: 'static</code> and runtime-allocated strings don't live for the entire lifetime of the program. </p>\n\n<p>I think the reason this is allowed is because I'm setting <code>T</code> to a non-reference type (<code>String</code>). When I use a <code>&amp;str</code>, or a struct containing a reference, the compiler issues the error I'd expect.</p>\n\n<p>However, I haven't been able to find anything in the Rust docs that confirms my hypothesis, so maybe I don't fully understand the rules. Will all non-reference types satisfy the <code>'static</code> lifetime bound on <code>Wrapper&lt;T&gt;</code>, or are there some that will fail?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use rand::Rng;\n\nstruct Wrapper&lt;T&gt;\nwhere\n    T: 'static,\n{\n    value: T,\n}\n\nfn wrap_string() -&gt; Wrapper&lt;String&gt; {\n    // Use rng to avoid construcing string at compile time\n    let mut rng = rand::thread_rng();\n    let n: u8 = rng.gen();\n    let text = format!(\"The number is {}\", n);\n    Wrapper { value: text }\n}\n\nfn main() {\n    let wrapped = wrap_string();\n    std::mem::drop(wrapped);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 4970, "user_id": 1726797, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a76b9e0b9a393201d9897082bf70bf07?s=128&d=identicon&r=PG", "display_name": "nnnmmm", "link": "https://stackoverflow.com/users/1726797/nnnmmm"}, "is_accepted": false, "score": 4, "last_activity_date": 1568749112, "last_edit_date": 1568749112, "creation_date": 1568746664, "answer_id": 57980464, "question_id": 57980463, "link": "https://stackoverflow.com/questions/57980463/mismatched-types-expected-struct-found-associated-type/57980464#57980464", "title": "mismatched types: Expected struct, found associated type", "body": "<p>The culprit is the trait bound <code>T: TryFrom&lt;i32&gt;</code>. It doesn't specify that the error is <code>String</code>.</p>\n\n<p>To do that, you can write <code>where T: TryFrom&lt;i32, Error = String&gt;</code>.</p>\n"}], "owner": {"reputation": 4970, "user_id": 1726797, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a76b9e0b9a393201d9897082bf70bf07?s=128&d=identicon&r=PG", "display_name": "nnnmmm", "link": "https://stackoverflow.com/users/1726797/nnnmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 543, "favorite_count": 0, "closed_date": 1568749158, "answer_count": 1, "score": 2, "last_activity_date": 1568749112, "creation_date": 1568746664, "last_edit_date": 1568749099, "question_id": 57980463, "link": "https://stackoverflow.com/questions/57980463/mismatched-types-expected-struct-found-associated-type", "closed_reason": "Duplicate", "title": "mismatched types: Expected struct, found associated type", "body": "<p>I defined a number of <code>TryFrom</code> instances and want to write a function that can use all of these types.</p>\n\n<pre><code>use std::convert::TryFrom;\n\n// several structs like this that are TryFrom&lt;i32&gt;\nstruct SuperiorThanZero(i32);\n\nimpl TryFrom&lt;i32&gt; for SuperiorThanZero {\n    type Error = String;\n\n    fn try_from(value: i32) -&gt; Result&lt;Self, Self::Error&gt; {\n        unimplemented!()\n    }\n}\n\nfn from_three&lt;T&gt;() -&gt; Result&lt;T, String&gt;\nwhere\n    T: TryFrom&lt;i32&gt;,\n{\n    T::try_from(3)\n}\n</code></pre>\n\n<p>This does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:16:9\n   |\n12 |     fn from_three&lt;T&gt;() -&gt; Result&lt;T, String&gt;\n   |                           ----------------- expected `std::result::Result&lt;T, std::string::String&gt;` because of return type\n...\n16 |         T::try_from(3)\n   |         ^^^^^^^^^^^^^^ expected struct `std::string::String`, found associated type\n   |\n   = note: expected type `std::result::Result&lt;_, std::string::String&gt;`\n              found type `std::result::Result&lt;_, &lt;T as std::convert::TryFrom&lt;i32&gt;&gt;::Error&gt;`\n</code></pre>\n\n<p>If I define the error type to be <code>&amp;'static str</code>, the message changes to <code>Expected reference, found associated type</code>.</p>\n\n<p>There are multiple questions about the error <code>Expected associated type, found struct [...]</code>, i.e. with <code>associated type</code> and the concrete type swapped, but they don't seem relevant.</p>\n"}, {"tags": ["rust", "operators", "porting"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1568740017, "post_id": 57978972, "comment_id": 102367373, "body": "<i>I&#39;m porting Java, seems Rust is a lot more verbose even than Java</i> \u2014 writing Java in Rust is likely more verbose than writing Java in Java. My guess is that writing Rust in Rust is equally or less verbose than Java in Java."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568740058, "post_id": 57978972, "comment_id": 102367385, "body": "<i>maybe in a crate somewhere</i> \u2014 FYI, questions asking us to recommend or find a book, tool, software library, tutorial or other off-site resource are off-topic for Stack Overflow."}], "owner": {"reputation": 5684, "user_id": 870207, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/50fa4a2d71492f94030da21388aecd54?s=128&d=identicon&r=PG", "display_name": "teknopaul", "link": "https://stackoverflow.com/users/870207/teknopaul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 118, "favorite_count": 0, "closed_date": 1568739913, "answer_count": 0, "score": 2, "last_activity_date": 1579816625, "creation_date": 1568739891, "last_edit_date": 1579816625, "question_id": 57978972, "link": "https://stackoverflow.com/questions/57978972/can-does-rust-have-a-c-question-mark-colon-equivalent", "closed_reason": "Duplicate", "title": "Can/does rust have a C question mark colon equivalent", "body": "<p>Does Rust have any equivalent to</p>\n\n<p>x = a ? b : c;</p>\n\n<p>I would guess someone could write a macro that writes out</p>\n\n<pre><code>    if a { \n        b \n    } else { \n        c \n    }\n</code></pre>\n\n<p>maybe in a crate somewhere, if not in core?</p>\n\n<pre><code>x = a | b;\n</code></pre>\n\n<p>would be useful as well with C assumptions for truth being non zero.</p>\n\n<p>(I'm porting Java, seems Rust is a lot more verbose even than Java)</p>\n"}, {"tags": ["rust", "serde", "actix-web"], "answers": [{"tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 14, "last_activity_date": 1568781196, "last_edit_date": 1568781196, "creation_date": 1568733043, "answer_id": 57977257, "question_id": 57976096, "link": "https://stackoverflow.com/questions/57976096/how-do-i-resolve-implementation-of-serdedeserialize-is-not-general-enough-wi/57977257#57977257", "title": "How do I resolve &quot;implementation of serde::Deserialize is not general enough&quot; with actix-web&#39;s Json type?", "body": "<p>From <a href=\"https://docs.rs/actix-web/1.0.7/actix_web/web/struct.Json.html#impl-FromRequest\" rel=\"noreferrer\">the <code>actix-web</code> documentation</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T&gt; FromRequest for Json&lt;T&gt;\nwhere\n    T: DeserializeOwned + 'static, \n</code></pre>\n\n<p>It basically says you can only use owned, not borrowed, data with the <code>Json</code> type if you want <code>actix-web</code> to extract types from the request for you. Thus you have to use <code>String</code> here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use actix_web::{post, web, Responder};\nuse serde::Deserialize;\n\n#[derive(Deserialize)]\nstruct UserModel {\n    username: String,\n    password: String,\n}\n\n#[post(\"/\")]\npub fn register(user_model: web::Json&lt;UserModel&gt;) -&gt; impl Responder {\n    unimplemented!()\n}\n</code></pre>\n"}], "owner": {"reputation": 509, "user_id": 6676654, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/GtxHk.jpg?s=128&g=1", "display_name": "thesdev", "link": "https://stackoverflow.com/users/6676654/thesdev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1954, "favorite_count": 1, "accepted_answer_id": 57977257, "answer_count": 1, "score": 8, "last_activity_date": 1568781196, "creation_date": 1568729262, "last_edit_date": 1568737533, "question_id": 57976096, "link": "https://stackoverflow.com/questions/57976096/how-do-i-resolve-implementation-of-serdedeserialize-is-not-general-enough-wi", "title": "How do I resolve &quot;implementation of serde::Deserialize is not general enough&quot; with actix-web&#39;s Json type?", "body": "<p>I'm writing a server using actix-web:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use actix_web::{post, web, Responder};\nuse serde::Deserialize;\n\n#[derive(Deserialize)]\nstruct UserModel&lt;'a, 'b&gt; {\n    username: &amp;'a str,\n    password: &amp;'b str,\n}\n\n#[post(\"/\")]\npub fn register(user_model: web::Json&lt;UserModel&gt;) -&gt; impl Responder {}\n</code></pre>\n\n<p>The compiler gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: implementation of `user::_IMPL_DESERIALIZE_FOR_UserModel::_serde::Deserialize` is not general enough  \n  --&gt; src/user.rs:31:1  \n   |  \n31 | #[post(\"/\")]  \n   | ^^^^^^^^^^^^  \n   |  \n   = note: `user::UserModel&lt;'_, '_&gt;` must implement `user::_IMPL_DESERIALIZE_FOR_UserModel::_serde::Deserialize&lt;'0&gt;`, for any lifetime `'0`  \n   = note: but `user::UserModel&lt;'_, '_&gt;` actually implements `user::_IMPL_DESERIALIZE_FOR_UserModel::_serde::Deserialize&lt;'1&gt;`, for some specific lifetime `'1`\n</code></pre>\n\n<p>How should I resolve this?</p>\n"}, {"tags": ["generics", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "edited": false, "score": 0, "creation_date": 1568729306, "post_id": 57976042, "comment_id": 102361855, "body": "I&#39;ve looked at the first 20 hits for &quot;borrowed value does not live long enough&quot; on Stack Overflow but those didn&#39;t help. I didn&#39;t check the rest, sorry."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1568730098, "post_id": 57976042, "comment_id": 102362358, "body": "It looks like your question might be answered by the answers of <a href=\"https://stackoverflow.com/q/56636442/155423\">Impl trait with generic associated type in return position causes lifetime error</a>, especially <a href=\"https://stackoverflow.com/questions/56636442/impl-trait-with-generic-associated-type-in-return-position-causes-lifetime-error?noredirect=1&amp;lq=1#comment99848978_56637140\">this comment</a>. If not, please <b><a href=\"https://stackoverflow.com/posts/57976042/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568730738, "post_id": 57976042, "comment_id": 102362745, "body": "Thanks! It&#39;s certainly more relevant than what I have seen before. There are a bunch of differences, but it could be that both cases rest on the same underlying issue. I&#39;m reading through the references in the answers."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568738949, "post_id": 57978680, "comment_id": 102366929, "body": "<i>the Rust compiler assumes that the return type could, potentially, borrow the arguments</i> \u2014 please enhance your answer to explain why <code>-&gt; impl Reply + &#39;static</code> doesn&#39;t work."}, {"owner": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "edited": false, "score": 0, "creation_date": 1568740526, "post_id": 57978680, "comment_id": 102367568, "body": "I tried implementing a function that returns such a Reply but failed! Haha! Yeah, that doesn&#39;t prove anything. Is this behavior documented somewhere?"}, {"owner": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "edited": false, "score": 0, "creation_date": 1568740771, "post_id": 57978680, "comment_id": 102367674, "body": "One more thing though that I forgot to mention in the question. This only fails to compile when Container contains a borrow. If it contains a plain i32, it works. Why does the compile not worry that Reply could hold a reference to <code>a</code>? Why only worry about <code>i</code>? Thanks a lot!"}, {"owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "reply_to_user": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "edited": false, "score": 0, "creation_date": 1568745761, "post_id": 57978680, "comment_id": 102369818, "body": "@DanielDarabos that&#39;s interesting. However, it only fails if the borrow references a local variable: <code>let a = Container { x: &amp;123 }</code> works."}, {"owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568746219, "post_id": 57978680, "comment_id": 102369993, "body": "@Shepmaster I don&#39;t know, maybe someone who knows more about how the compiler works can answer this. Maybe this is indeed a bug."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568746477, "post_id": 57978680, "comment_id": 102370079, "body": "@Aloso that&#39;s covered by <a href=\"https://stackoverflow.com/q/50345139/155423\">Why can I return a reference to a local literal but not a variable?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568748797, "post_id": 57978680, "comment_id": 102371018, "body": "There&#39;s <i>already</i> an <a href=\"https://stackoverflow.com/q/56636442/155423\">issue filed on GitHub</a>. It was linked in the comments on the original question here."}], "tags": [], "owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "is_accepted": false, "score": 1, "last_activity_date": 1568749005, "last_edit_date": 1568749005, "creation_date": 1568738750, "answer_id": 57978680, "question_id": 57976042, "link": "https://stackoverflow.com/questions/57976042/borrowed-value-does-not-live-long-enough-with-a-generic-function-that-returns/57978680#57978680", "title": "&quot;borrowed value does not live long enough&quot; with a generic function that returns impl trait", "body": "<p>When the arguments and the return type of a function are generic, the Rust compiler assumes that the return type could, potentially, borrow the arguments. That's why it assumes that <code>f()</code> returns a value referencing the local variable <code>i</code>.</p>\n\n<p>I'm not entirely sure, but I think this is desired, because someone could implement <code>Reply</code> for a type where this would be problematic.</p>\n\n<p>EDIT: This doesn't work because of a bug. It has already been reported on GitHub.</p>\n"}], "owner": {"reputation": 25533, "user_id": 3318517, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa52f0ed961993dce0a5c271dca0b4b7?s=128&d=identicon&r=PG", "display_name": "Daniel Darabos", "link": "https://stackoverflow.com/users/3318517/daniel-darabos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 251, "favorite_count": 1, "answer_count": 1, "score": 7, "last_activity_date": 1568749005, "creation_date": 1568729118, "last_edit_date": 1568738890, "question_id": 57976042, "link": "https://stackoverflow.com/questions/57976042/borrowed-value-does-not-live-long-enough-with-a-generic-function-that-returns", "title": "&quot;borrowed value does not live long enough&quot; with a generic function that returns impl trait", "body": "<p>I get an unexpected error from this Rust code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Container&lt;'a&gt; {\n    x: &amp;'a i32,\n}\n\ntrait Reply {}\nimpl Reply for i32 {}\n\nfn json&lt;T&gt;(_val: &amp;T) -&gt; impl Reply {\n    3\n}\n\nfn f() -&gt; impl Reply {\n    let i = 123;\n    let a = Container { x: &amp;i };\n    json(&amp;a)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f002469f30f1a050100c76b25fe9472e\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `i` does not live long enough\n  --&gt; src/lib.rs:14:28\n   |\n12 | fn f() -&gt; impl Reply {\n   |           ---------- opaque type requires that `i` is borrowed for `'static`\n13 |     let i = 123;\n14 |     let a = Container { x: &amp;i };\n   |                            ^^ borrowed value does not live long enough\n15 |     json(&amp;a)\n16 | }\n   | - `i` dropped here while still borrowed\n</code></pre>\n\n<p>Why?</p>\n\n<p>If I change the declaration of <code>json()</code> to either of these versions, the code compiles:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn json(val: &amp;Container) -&gt; impl Reply\n</code></pre>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn json&lt;T&gt;(val: &amp;T) -&gt; i32\n</code></pre>\n\n<p>It is only when there is both a type parameter and a returned trait object that the compiler rejects the code.</p>\n\n<p>This is a reduction from a real issue we had with <code>warp::reply::json()</code>, but I would prefer to understand it in general.</p>\n"}, {"tags": ["rust", "rust-cargo", "wasm-bindgen"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568717376, "post_id": 57972355, "comment_id": 102355152, "body": "Have you defined your default set of features (<code>default</code> under <code>[features]</code>)? If not, <code>wasm</code> might be getting pulled in automatically."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568717412, "post_id": 57972355, "comment_id": 102355173, "body": "Actually, it is certainly getting pulled in. <code>default-features = off</code> or set a <code>default</code> set of features to avoid this."}, {"owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568718365, "post_id": 57972355, "comment_id": 102355698, "body": "If I add default = [] before the cfg line, the toml won&#39;t parse due to a duplicate key. Is that what you were suggesting?"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568718860, "post_id": 57972355, "comment_id": 102355962, "body": "Let me just write an answer, comments are terrible for this. You can let me know if it works :-)"}], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 2, "last_activity_date": 1568730196, "last_edit_date": 1568730196, "creation_date": 1568729351, "answer_id": 57976133, "question_id": 57972355, "link": "https://stackoverflow.com/questions/57972355/enable-a-cargo-feature-by-default-when-the-target-arch-is-wasm/57976133#57976133", "title": "Enable a Cargo feature by default when the target arch is WASM?", "body": "<p>You can only have target-specific dependencies, not target-specific features. This is a <a href=\"https://github.com/rust-lang/cargo/issues/1197\" rel=\"nofollow noreferrer\">known bug</a> that is unfortunately opened since 2015.</p>\n\n<p>People expects this syntax to be supported, but right now there is nothing scheduled to make this work:</p>\n\n<pre><code>[target.'cfg(target_arch = \"wasm32\")'.features]\ndefault = [\"ed25519-dalek/nightly\", \"rand/wasm-bindgen\", \"js-sys\"]\n</code></pre>\n\n<p>As a ugly workaround, you can create another crate <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#platform-specific-dependencies\" rel=\"nofollow noreferrer\">that depends on your crate</a> and let the user use this new crate:</p>\n\n<pre><code>[target.'cfg(target_arch = \"wasm32\")'.dependencies.your_crate]\nversion = \"1.0.0\"\nfeatures = [\"wasm\"]\n</code></pre>\n"}], "owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 770, "favorite_count": 0, "accepted_answer_id": 57976133, "answer_count": 1, "score": 2, "last_activity_date": 1568730196, "creation_date": 1568716188, "last_edit_date": 1568729541, "question_id": 57972355, "link": "https://stackoverflow.com/questions/57972355/enable-a-cargo-feature-by-default-when-the-target-arch-is-wasm", "title": "Enable a Cargo feature by default when the target arch is WASM?", "body": "<p>Part of my Cargo.toml for my crate:</p>\n\n<pre><code>[features]\nwasm = [\"ed25519-dalek/nightly\", \"rand/wasm-bindgen\", \"js-sys\"]\n</code></pre>\n\n<p>This works, when the crate is used in another project, and the \"wasm\" feature is explicitly chosen.</p>\n\n<p>I want to automatically enable this feature only when the target arch is WASM. I tried adding this:</p>\n\n<pre><code>#[cfg(target_arch = \"wasm32\")]\ndefault = [\"wasm\"]\n</code></pre>\n\n<p>When I compile for a target other than WASM, \"wasm\" is included as the default, how can I make \"wasm\" the default only when the target is WASM?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1568696720, "post_id": 57966801, "comment_id": 102345584, "body": "In short, <code>crate::pack!();</code> works because macros always live at the top-level of a crate. But this is a duplicate nonetheless."}, {"owner": {"reputation": 4195, "user_id": 6882497, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yMbwv.jpg?s=128&g=1", "display_name": "Akiner Alkan", "link": "https://stackoverflow.com/users/6882497/akiner-alkan"}, "edited": false, "score": 0, "creation_date": 1568700991, "post_id": 57966801, "comment_id": 102346983, "body": "You need to add <code>#[macro_use]</code> in your mod declaration."}], "owner": {"reputation": 527, "user_id": 12029705, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd1de2d386e583758ff0fb8ca08e980e?s=128&d=identicon&r=PG&f=1", "display_name": "Hossain Adnan", "link": "https://stackoverflow.com/users/12029705/hossain-adnan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 62, "favorite_count": 0, "closed_date": 1568706005, "answer_count": 0, "score": 2, "last_activity_date": 1589473174, "creation_date": 1568689480, "last_edit_date": 1589473174, "question_id": 57966801, "link": "https://stackoverflow.com/questions/57966801/how-to-access-a-macro-from-a-mod-rs-within-the-same-directory-in-rust-2018", "closed_reason": "Duplicate", "title": "How to access a macro from a mod.rs within the same directory in Rust 2018?", "body": "<p>Is it possible to use a macro that lives in the <code>mod.rs</code> file in the same directory without the use directive? </p>\n\n<p>My project structure is as follows:</p>\n\n<pre><code>src\n |-- ui\n      |-- mod.rs\n      |-- alarm.rs\n</code></pre>\n\n<p>Now in <code>mod.rs</code> I have</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_export]\nmacro_rules! pack {\n    ($container:expr, $widget:expr, $expand:expr) =&gt; {\n        $container.pack_start($widget, $expand, true, crate::consts::DIALOG_BOX_SPACING_U32)\n    };\n}\n</code></pre>\n\n<p>But in <code>alarm.rs</code> I cannot access this macro using <code>super::pack!()</code>. How can I access a macro defined in <code>mod.rs</code>? For reference, I can access functions using <code>super::a_pub_fn(arg)</code> way with no issues.</p>\n"}, {"tags": ["rust", "serde", "hyper"], "comments": [{"owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1568689987, "post_id": 57966774, "comment_id": 102344322, "body": "What is the exact error you&#39;re getting from this code, and what line it refers to?"}, {"owner": {"reputation": 750, "user_id": 6509531, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3deff0730998b5c350c5b2006980016c?s=128&d=identicon&r=PG&f=1", "display_name": "Liam Mueller", "link": "https://stackoverflow.com/users/6509531/liam-mueller"}, "reply_to_user": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1568694352, "post_id": 57966774, "comment_id": 102345016, "body": "Line 32 gives the error <code>expected struct &#39;get_json::futures::Finished&#39;, found type parameter</code>. Lines 44 to 57 give the error <code>expected (), found struct &#39;get_json::futures::Map&#39;</code>."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1568701628, "post_id": 57966774, "comment_id": 102347227, "body": "Can you paste the full error messages in the question? This would make it easier to see which is line 32 and which are lines 44 to 57, and would allow us to see which part of the line the compiler is complaining about."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1568711274, "post_id": 57966774, "comment_id": 102352003, "body": "Do you know that you use the old <code>Future</code> API? If you can, you should use the <code>async</code>/<code>.await</code> notation, that makes the code really easier to read. See: <a href=\"https://seanmonstar.com/post/187493499882/hyper-alpha-supports-asyncawait\" rel=\"nofollow noreferrer\">seanmonstar.com/post/187493499882/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1213, "user_id": 544707, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LVoaL.jpg?s=128&g=1", "display_name": "Anler", "link": "https://stackoverflow.com/users/544707/anler"}, "edited": false, "score": 0, "creation_date": 1568722877, "post_id": 57970588, "comment_id": 102357907, "body": "I usually use <a href=\"https://docs.rs/serde/1.0.101/serde/de/trait.DeserializeOwned.html\" rel=\"nofollow noreferrer\"><code>serde::de::DeserializeOwned</code></a> instead which is an alias for <code>for&lt;&#39;de&gt; Deserialize&lt;&#39;de&gt;</code>"}, {"owner": {"reputation": 750, "user_id": 6509531, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3deff0730998b5c350c5b2006980016c?s=128&d=identicon&r=PG&f=1", "display_name": "Liam Mueller", "link": "https://stackoverflow.com/users/6509531/liam-mueller"}, "edited": false, "score": 0, "creation_date": 1568741174, "post_id": 57970588, "comment_id": 102367859, "body": "First off, thank you so much! I&#39;d spent about 8 hours at that point trying to figure where to even begin solving my questions and I wasn&#39;t thinking straight. Your response has cleared up a ton that multiple tutorials didn&#39;t seem to get through my head. Second, I&#39;ve never seen <code>for&lt;&#39;lifetime&gt;</code> syntax before - is that relatively new?"}, {"owner": {"reputation": 750, "user_id": 6509531, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3deff0730998b5c350c5b2006980016c?s=128&d=identicon&r=PG&f=1", "display_name": "Liam Mueller", "link": "https://stackoverflow.com/users/6509531/liam-mueller"}, "edited": false, "score": 0, "creation_date": 1568742394, "post_id": 57970588, "comment_id": 102368407, "body": "Also, I knew about the connector problem, but was leaving that for after I solved the future bugs. Would it be enough to make it <code>&amp;Client&lt;C, B&gt;</code> with the appropriate traits and lifetimes, or would this still be too restrictive? Seems to me you could use any client then."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 5, "last_activity_date": 1568710657, "last_edit_date": 1568710657, "creation_date": 1568710079, "answer_id": 57970588, "question_id": 57966774, "link": "https://stackoverflow.com/questions/57966774/futures-expected-found-struct-futuresmap/57970588#57970588", "title": "Futures - expected (), found struct futures::Map", "body": "<p>You have multiple errors stemming from logic issues when chaining futures. I have fixed its implementation, and it is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d6c90c15a799446470ef89e6b68fbe46\" rel=\"noreferrer\"><strong>available on the playground</strong></a> but I would strongly recommend you walk with me through what I changed.</p>\n\n<p>But first, a recurring trend in your code:</p>\n\n<h1>#1: <code>Future::map()</code>'s return type</h1>\n\n<p><code>Future::map()</code> allows you to change a future result of type <code>T</code> into type <code>R</code>, and it does so with the assumption that the <em>transformation cannot fail</em> (i.e. <code>Fn(T) -&gt; R</code>). You've used <code>map()</code> multiple times in your code while returning either another <code>Future</code>, or a <code>Result</code>. Both are incorrect.</p>\n\n<p>For <code>Future</code> chaining, <code>and_then()</code> allows you to perform the mapping <code>fn(T) -&gt; IntoFuture&lt;Item = R&gt;</code> with error types remaining the same</p>\n\n<p>For <code>Result</code>, convert them via <code>future::result()</code> into an already-executed future so you can also <code>and_then()</code></p>\n\n<h1>#2: Errors</h1>\n\n<p>Errors do not convert themselves, especially not if you do not define their conversion methods. For this purpose, I've implemented <code>From&lt;hyper::Error&gt;</code> for your error type:</p>\n\n<pre><code>impl From&lt;hyper::Error&gt; for JsonError {\n    fn from(s: hyper::Error) -&gt; JsonError {\n        JsonError::RequestError(s)\n    }\n}\n</code></pre>\n\n<p>This allows you to use <code>into()</code> wherever the typechecker notices that it is possible to do so.</p>\n\n<p>Do note, however, that because of <code>hyper</code>'s own response type, <code>err_into()</code> gets the type checker confused, hence the explicit <code>map(|r| r.into())</code>.</p>\n\n<h1>#3: <code>Deserialize</code> and lifetimes</h1>\n\n<p><code>Deserialize&lt;'t&gt;</code> is not the exact trait you were looking for. This trait implies that the <strong>entire object</strong> needs to live for lifetime <code>'t</code>. In a non-futures world, this would probably pass, but not in this case where the return object needs to be owned (hence the lifetime error you are getting).</p>\n\n<p><code>for&lt;'t&gt; Deserialize&lt;'t&gt;</code> is a completely different beast, and tells the compiler that this trait will have a lifetime <code>'t</code>, but will then be an owned object, or in other words, that the slice used to create the object will need to live for lifetime <code>'t</code>, not the entire returned object. Just what we need!</p>\n\n<p>An additional nitpick: you really ought to separate the response parsing from the HTTP extraction in this function. As it stands right now, if I make a request over HTTPS, I will not be able to use your <code>get_json()</code> function, as my connector for <code>hyper</code> would then be <code>TlsConnector&lt;HttpConnector&gt;</code>. Problematic ;-)</p>\n\n<hr>\n\n<p>The code:</p>\n\n<pre><code>use futures::{future, Future, Stream};\nuse hyper::{client::HttpConnector, Client, StatusCode, Uri};\nuse serde::Deserialize;\n\nenum JsonError {\n    RequestError(hyper::Error),\n    ResponseError(StatusCode),\n    DeserializeError(serde_json::Error),\n}\n\nimpl From&lt;hyper::Error&gt; for JsonError {\n    fn from(s: hyper::Error) -&gt; JsonError {\n        JsonError::RequestError(s)\n    }\n}\n\nfn get_json&lt;T, F&gt;(\n    client: &amp;Client&lt;HttpConnector&gt;,\n    uri: Uri,\n) -&gt; impl Future&lt;Item = T, Error = JsonError&gt;\nwhere\n    T: for&lt;'t&gt; Deserialize&lt;'t&gt; + 'static,\n{\n    client.get(uri).map_err(|e| e.into()).and_then(\n        |response| -&gt; Box&lt;dyn Future&lt;Item = T, Error = JsonError&gt;&gt; {\n            let (parts, body) = response.into_parts();\n\n            match parts.status.is_success() {\n                true =&gt; Box::new(body\n                    .map_err(|e| e.into())\n                    .fold(\n                        vec![],\n                        |mut accum, chunk| -&gt; Box&lt;dyn Future&lt;Item = Vec&lt;u8&gt;, Error = JsonError&gt;&gt;\n                        {\n                            accum.extend_from_slice(&amp;*chunk);\n                            Box::new(future::ok(accum))\n                        }\n                    )\n                    .and_then(|v|\n                    {\n                        future::result(serde_json::from_slice::&lt;T&gt;(&amp;v))\n                            .map_err(|err| JsonError::DeserializeError(err))\n                    })),\n                false =&gt; Box::new(future::err(JsonError::ResponseError(parts.status)))\n            }\n        },\n    )\n}\n</code></pre>\n"}], "owner": {"reputation": 750, "user_id": 6509531, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3deff0730998b5c350c5b2006980016c?s=128&d=identicon&r=PG&f=1", "display_name": "Liam Mueller", "link": "https://stackoverflow.com/users/6509531/liam-mueller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 373, "favorite_count": 0, "accepted_answer_id": 57970588, "answer_count": 1, "score": 2, "last_activity_date": 1568710657, "creation_date": 1568689193, "question_id": 57966774, "link": "https://stackoverflow.com/questions/57966774/futures-expected-found-struct-futuresmap", "title": "Futures - expected (), found struct futures::Map", "body": "<p>I'm attempting to send a request off with <a href=\"https://docs.rs/hyper/0.13.0-alpha.1/hyper/\" rel=\"nofollow noreferrer\">Hyper</a>, then deserialize it via JSON through <a href=\"https://serde.rs/\" rel=\"nofollow noreferrer\">Serde</a>, but I cannot seem to wrap my head around futures and I'm receiving type mismatch errors stating <code>expected (), found struct [put some odd struct here]</code>. Nor can I wrap my head around the incredibly long and confusing error messages they spit out on each change. Here's my code:</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\nextern crate serde;\nextern crate serde_json;\n\nuse futures::{\n    Future,\n    Stream,\n    future\n};\nuse hyper::{\n    Body,\n    Client,\n    Response,\n    StatusCode,\n    Uri,\n    client::HttpConnector,\n};\nuse serde::{ Deserialize };\nuse std::error::{ Error };\n\nenum JsonError\n{\n    RequestError(hyper::Error),\n    ResponseError(StatusCode),\n    DeserializeError(serde_json::Error),\n}\n\nfn get_json\n    &lt;'t, T, F&gt;\n    (client: &amp;Client&lt;HttpConnector&gt;, uri: Uri)\n-&gt; impl Future&lt;Item = T, Error = JsonError&gt;\nwhere\n    T : Deserialize&lt;'t&gt;\n{\n    let f = client\n        .get(uri)\n        .map(|response|\n        {\n            let (parts, body) = response.into_parts();\n\n            if parts.status.is_success()\n            {\n                body\n                    .fold(\n                        vec![],\n                        |mut accum, chunk|\n                        {\n                            accum.extend_from_slice(&amp;*chunk);\n                            Ok(accum)\n                        }\n                    )\n                    .map(|v|\n                    {\n                        serde_json::from_slice::&lt;T&gt;(&amp;v)\n                            .map_err(|err| JsonError::DeserializeError(err))\n                    })\n            }\n\n            future::err(JsonError::ResponseError(parts.status))\n        })\n        .map_err(|err| JsonError::RequestError(err));\n\n    return f;\n}\n</code></pre>\n\n<p>I am completely lost and I think any advice could help at this point.</p>\n"}, {"tags": ["python", "pyspark", "rust", "pyarrow", "apache-arrow"], "comments": [{"owner": {"reputation": 77, "user_id": 7534974, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cc008e7be474829504363a4f389ba3?s=128&d=identicon&r=PG&f=1", "display_name": "kemri", "link": "https://stackoverflow.com/users/7534974/kemri"}, "edited": false, "score": 0, "creation_date": 1568938060, "post_id": 57966032, "comment_id": 102443731, "body": "shot an email over to user@arrow.apache.org and Wes&#39; response (in a nutshell) was that this functionality doesn&#39;t currently exist, although it&#39;s being worked on. Here&#39;s the email chain: <a href=\"https://lists.apache.org/list.html?user@arrow.apache.org\" rel=\"nofollow noreferrer\">lists.apache.org/list.html?user@arrow.apache.org</a>"}, {"owner": {"reputation": 13792, "user_id": 2490497, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/8UW7x.png?s=128&g=1", "display_name": "jangorecki", "link": "https://stackoverflow.com/users/2490497/jangorecki"}, "edited": false, "score": 0, "creation_date": 1605774477, "post_id": 57966032, "comment_id": 114756488, "body": "AFAIR zero copy is not possible because different platform will use different way to keep missing values (NA)."}], "answers": [{"comments": [{"owner": {"reputation": 77, "user_id": 7534974, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cc008e7be474829504363a4f389ba3?s=128&d=identicon&r=PG&f=1", "display_name": "kemri", "link": "https://stackoverflow.com/users/7534974/kemri"}, "edited": false, "score": 0, "creation_date": 1568756837, "post_id": 57967220, "comment_id": 102373979, "body": "very helpful information and links, especially the IPC component. I&#39;ll need to play around with how that actually functions when crossing language barriers, but this is definitely a step in the right direction for me - thanks!"}], "tags": [], "owner": {"reputation": 393, "user_id": 10994363, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-CoOC0rac0zU/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQNHC5XSQoviUMtOzgnQwDCOVn_BGA/mo/photo.jpg?sz=128", "display_name": "Micah Kornfield", "link": "https://stackoverflow.com/users/10994363/micah-kornfield"}, "is_accepted": false, "score": 4, "last_activity_date": 1568693238, "creation_date": 1568693238, "answer_id": 57967220, "question_id": 57966032, "link": "https://stackoverflow.com/questions/57966032/how-does-apache-arrow-facilitate-no-overhead-for-cross-system-communication/57967220#57967220", "title": "How does apache arrow facilitate &quot;No overhead for cross-system communication&quot;?", "body": "<p>There are a few questions here:</p>\n\n<ol>\n<li><p>How does spark share data with python?</p>\n\n<p>This is done over a socket using the <a href=\"https://arrow.apache.org/docs/ipc.html\" rel=\"nofollow noreferrer\">Arrow IPC format</a>, so it isn't quite zero-copy but still  much faster then alternatives</p></li>\n<li><p>How is zero copy achieved in general?</p>\n\n<p>The approaches that I'm aware of are passing pointer addresses between implementations.  For instance, the Gandiva module in Arrow does this via [JNI] (<a href=\"https://github.com/apache/arrow/blob/master/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/JniWrapper.java#L65\" rel=\"nofollow noreferrer\">https://github.com/apache/arrow/blob/master/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/JniWrapper.java#L65</a>) by passing data-buffer addresses and reassembling them into a <a href=\"https://github.com/apache/arrow/blob/master/cpp/src/gandiva/jni/jni_common.cc#L505\" rel=\"nofollow noreferrer\">RowBatch</a>.  </p>\n\n<p>A second approach for specifically python/Java interop is <a href=\"https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_jvm.py\" rel=\"nofollow noreferrer\">Jpype</a> although the implementation isn't 100% complete.</p>\n\n<p>You could potentially do something similar in pyarrow by creating <a href=\"https://arrow.apache.org/docs/cpp/api/memory.html#_CPPv4N5arrow6BufferE\" rel=\"nofollow noreferrer\">buffers</a> from pointers and assembling them into <a href=\"https://arrow.apache.org/docs/python/generated/pyarrow.FixedSizeBinaryArray.html#pyarrow.FixedSizeBinaryArray.from_buffers\" rel=\"nofollow noreferrer\">arrays</a></p></li>\n<li><p>How can it be done in Rust?</p>\n\n<p>I don't have expertise in Rust, but you can e-mail the Arrow users@ or dev@ mailing list to see what others have done or if there is an opportunity to contribute something to standardize this.</p></li>\n</ol>\n"}], "owner": {"reputation": 77, "user_id": 7534974, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62cc008e7be474829504363a4f389ba3?s=128&d=identicon&r=PG&f=1", "display_name": "kemri", "link": "https://stackoverflow.com/users/7534974/kemri"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 875, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1586153512, "creation_date": 1568681678, "last_edit_date": 1568682535, "question_id": 57966032, "link": "https://stackoverflow.com/questions/57966032/how-does-apache-arrow-facilitate-no-overhead-for-cross-system-communication", "title": "How does apache arrow facilitate &quot;No overhead for cross-system communication&quot;?", "body": "<p>I've been very interested in Apache Arrow for a bit now due to the promises of \"zero copy reads\", \"zero serde\", and \"No overhead for cross-system communication\". My understanding of the project (through the lens of pyarrow) is that it describes the <em>memory</em> and <em>format</em> of data, such that multiple tasks can read this like a treasure map and all find their way to the same data (without copying). I think I can see how this works within Python/Pandas in a single process; it's pretty easy to create an Arrow array, pass it around to different objects, and observe the whole \"zero-copy\" thing in action. </p>\n\n<p>However, when we talk about cross-system communication without overhead, I am almost entirely lost. For example, how does PySpark convert Java objects to an arrow format, then pass that to Python/Pandas? I've attempted to look at the code <a href=\"https://github.com/apache/spark/blob/8b6232b1190a5d388a216a90009d7c5d9b5c246d/sql/core/src/main/scala/org/apache/spark/sql/execution/arrow/ArrowConverters.scala#L77\" rel=\"nofollow noreferrer\">here</a> but to a non-java/scala guy it just looks like it's converting spark rows to Arrow objects, then to <code>byteArray</code>s (line 124), which doesn't seem like zero copy, zero overhead to me.</p>\n\n<p>Likewise, if I wanted to try to pass an Arrow array from Python/pyarrow to, say, Rust (using Rust's Arrow API), I can't wrap my mind around how I'd do that, particularly considering that <a href=\"https://developers.redhat.com/blog/2017/11/16/speed-python-using-rust/\" rel=\"nofollow noreferrer\">this</a> approach to calling a Rust function from Python doesn't seem to work with Arrow primitives. Is there a way to point both Rust and Python to same memory address(es)? Do I have to send arrow data as a byteArray somehow? </p>\n\n<pre><code>// lib.rs\n#[macro_use]\nextern crate cpython;\n\nuse cpython::{PyResult, Python};\nuse arrow::array::Int64Array;\nuse arrow::compute::array_ops::sum;\n\nfn sum_col(_py: Python, val: Int64Array) -&gt; PyResult&lt;i64&gt; {\n    let total = sum(val).unwrap();\n    Ok(total)\n}\n\npy_module_initializer!(rust_arrow_2, initrust_arrow_2, Pyinit_rust_arrow_2, |py, m| {\n    m.add(py, \"__doc__\", \"This module is implemented in Rust.\")?;\n    m.add(py, \"sum_col\", py_fn!(py, sum_col(val: Int64Array)))?;\n    Ok(())\n});\n</code></pre>\n\n<pre><code>$ cargo build --release\n...\nerror[E0277]: the trait bound `arrow::array::array::PrimitiveArray&lt;arrow::datatypes::Int64Type&gt;: cpython::FromPyObject&lt;'_&gt;` is not satisfied\n  --&gt; src/lib.rs:15:26\n   |\n15 |     m.add(py, \"sum_col\", py_fn!(py, sum_col(val: Int64Array)))?;\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `cpython::FromPyObject&lt;'_&gt;` is not implemented for `arrow::array::array::PrimitiveArray&lt;arrow::datatypes::Int64Type&gt;`\n   |\n   = note: required by `cpython::FromPyObject::extract`\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</code></pre>\n"}, {"tags": ["docker", "rust", "alpine", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "edited": false, "score": 0, "creation_date": 1568732238, "post_id": 57970915, "comment_id": 102363614, "body": "Does alpine use <code>musl</code> instead of <code>glibc</code>?"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "edited": false, "score": 1, "creation_date": 1568733588, "post_id": 57970915, "comment_id": 102364378, "body": "look at your target name"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "edited": false, "score": 1, "creation_date": 1568735392, "post_id": 57970915, "comment_id": 102365325, "body": "@DeusXMachina just checked the container, the target is indeed <code>1.37.0-x86_64-unknown-linux-musl (default)</code>. So, yes, you&#39;re running musl if you use that."}, {"owner": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "edited": false, "score": 0, "creation_date": 1568757306, "post_id": 57970915, "comment_id": 102374122, "body": "Ah yes, a bit more research turned up the fact that apparently they switched over at least 5 years ago. <a href=\"https://dev.suckless.narkive.com/jkpX0jsz/alpine-linux-switched-to-musl-libc\" rel=\"nofollow noreferrer\">dev.suckless.narkive.com/jkpX0jsz/&hellip;</a>"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "edited": false, "score": 1, "creation_date": 1568762563, "post_id": 57970915, "comment_id": 102375341, "body": "For the record, alpine is a distro centered around security and static linking is a pretty big thing there, for obvious reasons. It doesn&#39;t surprise me that it is based on musl for that reason"}, {"owner": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "edited": false, "score": 0, "creation_date": 1568767957, "post_id": 57970915, "comment_id": 102376196, "body": "Oh I am alllll about the static linking. Right now dealing with a legacy project that is basically dynamic spaghetter."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 4, "last_activity_date": 1568735446, "last_edit_date": 1568735446, "creation_date": 1568711158, "answer_id": 57970915, "question_id": 57965805, "link": "https://stackoverflow.com/questions/57965805/alpine-dockerfile-cannot-produce-proc-macro-does-not-support-these-crate-typ/57970915#57970915", "title": "Alpine dockerfile: &quot;cannot produce proc-macro...does not support these crate types&quot;", "body": "<p>The <code>proc_macro</code> crate relies on a couple of features only available to dynamically-linked executables, and since <code>musl</code> is anything but that, you cannot use <code>proc_macro</code> on <code>musl</code>.</p>\n\n<p>The issue related to this is here, and Alex describes quite well some of the issues and tradeoffs that'd need to be made to make this crate available on full static targets: <a href=\"https://github.com/rust-lang/rust/issues/40174\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/40174</a></p>\n\n<p>Just to confirm from the container:</p>\n\n<pre><code>~# docker run -ti rust:alpine3.10 /bin/sh\n/ # rustup show\nDefault host: x86_64-unknown-linux-musl\nrustup home:  /usr/local/rustup\n</code></pre>\n"}], "owner": {"reputation": 872, "user_id": 3988037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/fn04Q.jpg?s=128&g=1", "display_name": "DeusXMachina", "link": "https://stackoverflow.com/users/3988037/deusxmachina"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1083, "favorite_count": 0, "accepted_answer_id": 57970915, "answer_count": 1, "score": 7, "last_activity_date": 1568811487, "creation_date": 1568679295, "last_edit_date": 1568811487, "question_id": 57965805, "link": "https://stackoverflow.com/questions/57965805/alpine-dockerfile-cannot-produce-proc-macro-does-not-support-these-crate-typ", "title": "Alpine dockerfile: &quot;cannot produce proc-macro...does not support these crate types&quot;", "body": "<p>Total rust noob here. Trying to build a sccache binary for linux x64 with <code>Redis: true</code>. I'm starting with an alpine image: </p>\n\n<pre><code>FROM rust:alpine3.10\n\nWORKDIR /root\n\nRUN apk --no-cache add --update curl\nRUN curl -L https://github.com/mozilla/sccache/archive/0.2.11.tar.gz \\\n        -o sccache.tar.gz\nRUN tar xf sccache.tar.gz\n\nRUN cd sccache-0.2.11 &amp;&amp;\\\n    cargo build --features=all --release \n</code></pre>\n\n<p>I get: </p>\n\n<pre><code>error: cannot produce proc-macro for `derive-error v0.0.3` as the target `x86_64-unknown-linux-musl` does not support these crate types\n</code></pre>\n\n<p>Works fine if I <code>FROM rust</code>, which is based on <code>buster</code>. I could just go with this (and I will), but what is going on here? I'm so out of my element I am not even sure what questions to ask. </p>\n\n<p>Related?: \n<a href=\"https://github.com/rust-lang/rust/issues/59302\" rel=\"noreferrer\">https://github.com/rust-lang/rust/issues/59302</a></p>\n"}, {"tags": ["rust", "gdb", "openocd", "stm32ldiscovery", "rustdoc"], "answers": [{"tags": [], "owner": {"reputation": 472, "user_id": 11847611, "user_type": "registered", "profile_image": "https://graph.facebook.com/2399816810113390/picture?type=large", "display_name": "Faheem Uz Zaman", "link": "https://stackoverflow.com/users/11847611/faheem-uz-zaman"}, "is_accepted": true, "score": 3, "last_activity_date": 1568701152, "creation_date": 1568701152, "answer_id": 57968390, "question_id": 57965415, "link": "https://stackoverflow.com/questions/57965415/rust-discovery-config-file-not-working-as-expected/57968390#57968390", "title": "Rust discovery, config file not working as expected", "body": "<p>Please change runner = \"arm-none-eabi-gdb -q -x openocd.gdb\" to this\nrunner = \"gdb-multiarch -q -x openocd.gdb\".\nBecause, if you are using the Ubuntu 18.04 LTS version then this command will be used as the book mention.</p>\n\n<p>Ubuntu 18.04 or newer / Debian stretch or newer</p>\n\n<blockquote>\n  <p>NOTE <em>gdb-multiarch</em> is the GDB command you'll use to debug your ARM\n  Cortex-M programs</p>\n</blockquote>\n\n<p>Ubuntu 14.04 and 16.04</p>\n\n<blockquote>\n  <p>NOTE <em>arm-none-eabi-gdb</em> is the GDB command you'll use to debug your ARM\n  Cortex-M programs</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 124, "user_id": 2542561, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0d6d5e9d310c9a44aef55a071385612b?s=128&d=identicon&r=PG", "display_name": "Muhammad Ovais", "link": "https://stackoverflow.com/users/2542561/muhammad-ovais"}, "is_accepted": false, "score": 1, "last_activity_date": 1568702118, "creation_date": 1568702118, "answer_id": 57968586, "question_id": 57965415, "link": "https://stackoverflow.com/questions/57965415/rust-discovery-config-file-not-working-as-expected/57968586#57968586", "title": "Rust discovery, config file not working as expected", "body": "<p>While flashing the STM32F3, we have to connect to the respective GDB server. It may be <strong>arm-none-eabi-gdb</strong>, <strong>gdb-multiarch</strong> or <strong>gdb</strong>. You may have to try all the three.</p>\n\n<p>Now, as far as your question is concerned, you have to use the same  parameter in your openocd.gdb. In my case, I have successfully tried with <strong>arm-none-eabi-gdb</strong>. Remember, I am using rust on Windows 10.</p>\n"}], "owner": {"reputation": 222, "user_id": 10846614, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-LA8RIpBdeSY/AAAAAAAAAAI/AAAAAAAACik/440wHakbStc/photo.jpg?sz=128", "display_name": "Jawwad Turabi", "link": "https://stackoverflow.com/users/10846614/jawwad-turabi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 224, "favorite_count": 0, "accepted_answer_id": 57968390, "answer_count": 2, "score": 2, "last_activity_date": 1568702118, "creation_date": 1568675604, "last_edit_date": 1568677263, "question_id": 57965415, "link": "https://stackoverflow.com/questions/57965415/rust-discovery-config-file-not-working-as-expected", "title": "Rust discovery, config file not working as expected", "body": "<p>I am trying to avoid entering the same commands in each GDB sessions. For this, I have followed the instructions in <a href=\"https://docs.rust-embedded.org/discovery/05-led-roulette/the-challenge.html\" rel=\"nofollow noreferrer\">rust discovery book</a> but the program is not working as mentioned in the book when I run the program through cargo run it is giving the following error:</p>\n\n<pre><code>ts/project/discovery/src/06-hello-world$ cargo run\n   error: could not load Cargo configuration  \n</code></pre>\n\n<pre><code>cargo run --target thumbv7em-none-eabihf\n    Finished dev [unoptimized + debuginfo] target(s) in 0.04s\n     Running `arm-none-eabi-gdb -q -x openocd.gdb /home/jawwad-turabi/Documents/project/discovery/target/thumbv7em-none-eabihf/debug/led-roulette`\nerror: could not execute process `arm-none-eabi-gdb -q -x openocd.gdb /home/jawwad-turabi/Documents/project/discovery/target/thumbv7em-none-eabihf/debug/led-roulette` (never executed)\n\nCaused by:\n  No such file or directory (os error 2)\n</code></pre>\n\n<p>My openocd.gdb file contains these content:</p>\n\n<pre><code>   target remote: 3333\n    load\n    break main\n    continue\n</code></pre>\n\n<p>My config file contain these content:</p>\n\n<pre><code> [target.thumbv7em-none-eabihf]\n   runner = \"arm-none-eabi-gdb -q -x openocd.gdb\"\n   rustflags = [\n   \"-C\", \"link-arg=-Tlink.x\",\n   ]\n   +[build]\n   +target = \"thumbv7em-none-eabihf\"\n</code></pre>\n"}, {"tags": ["rust", "actix-web"], "answers": [{"comments": [{"owner": {"reputation": 6456, "user_id": 728236, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/SOeHR.jpg?s=128&g=1", "display_name": "Brian Leishman", "link": "https://stackoverflow.com/users/728236/brian-leishman"}, "edited": false, "score": 0, "creation_date": 1568671813, "post_id": 57964802, "comment_id": 102340845, "body": "Hmm it seems that maybe that <code>.data</code> is in slightly the wrong spot? Also, I get <code>no function or associated item named </code>configure` found for type <code>actix_web::web::Form&lt;MyParams&gt;</code> in the current scope` at the <code>::configure(</code> part"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 6456, "user_id": 728236, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/SOeHR.jpg?s=128&g=1", "display_name": "Brian Leishman", "link": "https://stackoverflow.com/users/728236/brian-leishman"}, "edited": false, "score": 0, "creation_date": 1568707544, "post_id": 57964802, "comment_id": 102349986, "body": "I was on the move all night yesterday, that was typed from my phone. Let&#39;s see where I went wrong"}, {"owner": {"reputation": 6456, "user_id": 728236, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/SOeHR.jpg?s=128&g=1", "display_name": "Brian Leishman", "link": "https://stackoverflow.com/users/728236/brian-leishman"}, "edited": false, "score": 0, "creation_date": 1568722372, "post_id": 57964802, "comment_id": 102357655, "body": "Yeah I got that one, it&#39;s just that config line error that I&#39;m still getting"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 6456, "user_id": 728236, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/SOeHR.jpg?s=128&g=1", "display_name": "Brian Leishman", "link": "https://stackoverflow.com/users/728236/brian-leishman"}, "edited": false, "score": 0, "creation_date": 1568724940, "post_id": 57964802, "comment_id": 102359036, "body": "@BrianLeishman <code>use actix_web::FromRequest</code> - that&#39;s where (indirectly) that method lives"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 3, "last_activity_date": 1568707846, "last_edit_date": 1568707846, "creation_date": 1568670403, "answer_id": 57964802, "question_id": 57963082, "link": "https://stackoverflow.com/questions/57963082/urlencoded-payload-size-is-bigger-than-allowed-default-256kb/57964802#57964802", "title": "&quot;Urlencoded payload size is bigger than allowed (default: 256kB)&quot;", "body": "<p>The quick answer is that there is a second config (<code>FormConfig</code>), which is what you're hitting your head against. It is unclear as it returns the same error type as <code>PayloadConfig</code> (there is a reason for that, which I will explain in the \"longer version\")</p>\n\n<p>Change your actix server definition to this to change it to, say, 256kb:</p>\n\n<pre><code>HttpServer::new(|| {\n    App::new().service(\n        web::resource(\"/\")\n            .route(web::post()\n                .to(index)\n            )\n            .data(web::Form::&lt;MyParams&gt;::configure(|cfg| cfg.limit(256 * 1024)))\n    )\n})\n.bind(\"127.0.0.1:48627\")?\n.run()\n</code></pre>\n\n<p>You will also need to import <code>actix_web::FromRequest</code>, as this is where the object type change from a request to a urlencoded form happens and where the <code>configure()</code> method lives.</p>\n\n<p>Now, for the explanation!</p>\n\n<p>Actix, much like other frameworks, has multiple layers of limits in place. You've found one of them, this is another.</p>\n\n<p>The one you found prevents denial of service through memory exhaustion (i.e. somebody sending a deliberately large payload to oom your server, as it will have to store the body somewhere to process). It governs the <em>entire</em> payload of the request.</p>\n\n<p>The one you are hitting against is a much smaller limitation placed on each individual field, and it exists to prevent a different kind of exhaustion attack. Suppose your attacker knows you're parsing the input with something; let's pretend it's JSON. By sending an arbitrarily large and convoluted JSON, they can effectively lock your server down while processing a single request. Small data input, <em>very</em> large consequences.</p>\n\n<p>For that reason, the two limits are typically independent of each other, and allow you to fine-tune the restrictions based on your requirements. Lots of small fields? No problem. One huge chunk? Also not a problem.</p>\n\n<p>The effect of the <code>FormConfig</code> limit is located <a href=\"https://github.com/actix/actix-web/blob/23d768a77b42c5df45ef76bbc1f84cfee62ee09c/src/types/form.rs#L117\" rel=\"nofollow noreferrer\">here</a> in case you want to see the code itself. As the type return is the same as that of the <code>PayloadConfig</code> limit ( (the <code>Overflow</code> variant of this struct)[<a href=\"https://docs.rs/actix-web/1.0.7/actix_web/error/enum.UrlencodedError.html]\" rel=\"nofollow noreferrer\">https://docs.rs/actix-web/1.0.7/actix_web/error/enum.UrlencodedError.html]</a>), the message is unclear and you end up scratching your head as a result.</p>\n\n<p>The main aim of the error being \"similar\" was, I think, to prevent the server from indicating to a potential attacker which limit they hit, and <a href=\"https://docs.rs/actix-web/1.0.7/src/actix_web/error.rs.html#52\" rel=\"nofollow noreferrer\">it seems to be what they had in mind</a>. The user-facing error description is the problem, and that's something that may get adjusted with a well-placed PR.</p>\n"}], "owner": {"reputation": 6456, "user_id": 728236, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/SOeHR.jpg?s=128&g=1", "display_name": "Brian Leishman", "link": "https://stackoverflow.com/users/728236/brian-leishman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 486, "favorite_count": 0, "accepted_answer_id": 57964802, "answer_count": 1, "score": 3, "last_activity_date": 1568707846, "creation_date": 1568661094, "last_edit_date": 1568661274, "question_id": 57963082, "link": "https://stackoverflow.com/questions/57963082/urlencoded-payload-size-is-bigger-than-allowed-default-256kb", "title": "&quot;Urlencoded payload size is bigger than allowed (default: 256kB)&quot;", "body": "<p>I have a small Rust program that formats MySQL queries, but I found it failing on bigger queries, returning</p>\n\n<blockquote>\n  <p>Urlencoded payload size is bigger than allowed (default: 256kB)</p>\n</blockquote>\n\n<p>I'm using actix web, which looks like this</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use actix_web::{\n    web, App, HttpResponse, HttpServer, Result,\n};\n\n#[derive(Deserialize)]\npub struct MyParams {\n    q: String,\n}\n\nfn index(params: web::Form&lt;MyParams&gt;) -&gt; Result&lt;HttpResponse&gt; {\n    Ok(HttpResponse::Ok()\n        .content_type(\"text/html; charset=utf-8\")\n        .body(\"test\"))\n        // .body(mysql_format2(&amp;params.q[..])))\n}\n\nfn main() -&gt; std::io::Result&lt;()&gt; {\n    HttpServer::new(|| {\n        App::new().service(\n            web::resource(\"/\")\n                .route(web::post().to(index))\n        )\n    })\n    .bind(\"127.0.0.1:48627\")?\n    .run()\n}\n</code></pre>\n\n<p>And the PHP script calling this looks like</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$this-&gt;FormattedMySQL = str_repeat(\"make a big query \", 1024*256);\n\n$query =  http_build_query([\n    'q' =&gt; $this-&gt;FormattedMySQL,\n]);\n\n// if I change this to 16385 (+1)\n// then it breaks and returns that error\n$query = substr($query, 0, 16384);\n\nif ($this-&gt;FormatMySQL &amp;&amp; strlen($query) &lt;= 262144) {\n    try {\n        $this-&gt;VerbosePrint('formatting');\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, MYSQL_FORMAT_ENDPOINT);\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $query);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        $this-&gt;FormattedMySQL = curl_exec($ch);\n        curl_close($ch);\n    } catch (Exception $_) { }\n}\n</code></pre>\n\n<p>What am I missing, or why does this seem to be throwing this error for 16kB instead of 256kB?</p>\n\n<p>I see that it's also possible to <a href=\"https://docs.rs/actix-web/1.0.7/actix_web/web/struct.PayloadConfig.html#method.limit\" rel=\"nofollow noreferrer\">set the <code>Payload</code> config</a> but I'm not totally sure how/where to apply this in my existing code.</p>\n"}, {"tags": ["rust", "null", "optional"], "answers": [{"tags": [], "owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "is_accepted": true, "score": 7, "last_activity_date": 1568657403, "last_edit_date": 1568657403, "creation_date": 1568657035, "answer_id": 57962202, "question_id": 57962168, "link": "https://stackoverflow.com/questions/57962168/how-to-set-a-field-in-a-struct-with-an-empty-value/57962202#57962202", "title": "How to set a field in a struct with an empty value?", "body": "<p>There's no <code>null</code> in Rust (and no Null Pointer Exception, Rust is designed for safety).</p>\n\n<p>You must either</p>\n\n<p><strong>1)</strong> use an <a href=\"https://doc.rust-lang.org/std/option/\" rel=\"noreferrer\">option</a> (i.e. a field of type <code>Option&lt;TcpStream&gt;</code>)</p>\n\n<p><strong>2)</strong> or better: return a <a href=\"https://doc.rust-lang.org/std/result/\" rel=\"noreferrer\">result</a> when building the struct</p>\n\n<p>Here, the best option would probably be to connect from inside a function returning a <code>Result&lt;FistClient&gt;</code>, so that you don't have to check whether your struct has a valid stream.</p>\n\n<p>I would do something like this:</p>\n\n<pre><code>pub struct FistClient {\n    addr: String,\n    conn: TcpStream,\n}\n\nimpl FistClient {\n    pub fn new(ip: &amp;str, port: &amp;str) -&gt; Result&lt;Self&gt; {\n        Ok(FistClient {\n            addr: format!(\"{}:{}\", ip, port),\n            conn: TcpStream::connect(&amp;self.addr)?,\n        })\n    }\n}\n</code></pre>\n\n<p>Side note: It's really preferable to not build your applications with calls to <code>panic</code>, even when you think you're just building a dirty draft. <a href=\"https://doc.rust-lang.org/book/ch09-00-error-handling.html\" rel=\"noreferrer\">Handle errors</a> instead.</p>\n"}, {"tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": false, "score": 2, "last_activity_date": 1568657109, "creation_date": 1568657109, "answer_id": 57962218, "question_id": 57962168, "link": "https://stackoverflow.com/questions/57962168/how-to-set-a-field-in-a-struct-with-an-empty-value/57962218#57962218", "title": "How to set a field in a struct with an empty value?", "body": "<p>You will need to change your type to <code>Option&lt;TCPStream&gt;</code> if you would like to keep this call pattern. an <code>Option</code> expresses the possible lack of a value (I. e. null) with two enum variants: <code>Some(_)</code> and <code>None</code>.</p>\n\n<p>Once you have this in place you can easily retrieve a mutable reference to the inner member by calling <code>as_mut</code> to retrieve an <code>Option&lt;&amp;mut T&gt;</code>. </p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 5, "last_activity_date": 1568657174, "creation_date": 1568657174, "answer_id": 57962231, "question_id": 57962168, "link": "https://stackoverflow.com/questions/57962168/how-to-set-a-field-in-a-struct-with-an-empty-value/57962231#57962231", "title": "How to set a field in a struct with an empty value?", "body": "<p>In Rust, the idea of <code>null</code> is modelled with <code>Option</code>. You give a field the type <code>Option&lt;TcpStream&gt;</code> to indicate that it might not be there (<code>None</code>), or be a valid value (<code>Some(TcpStream)</code>).</p>\n\n<pre><code>pub struct FistClient {\n    addr: String,\n    conn: Option&lt;TcpStream&gt;,\n}\n\nimpl FistClient {\n    pub fn new(ip: &amp;str, port: &amp;str) -&gt; Self {\n        FistClient {\n            addr: String::from(ip) + \":\" + &amp;String::from(port),\n            conn: None,\n        }\n    }\n\n    pub fn connect(&amp;mut self, ip: &amp;str, port: &amp;str) {\n        let res = TcpStream::connect(&amp;self.addr);\n        match res {\n            Ok(c) =&gt; self.conn = Some(c),\n            Err(_) =&gt; panic!(),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 659, "user_id": 6845084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/253b377ee6c971f363de927136d30117?s=128&d=identicon&r=PG", "display_name": "Palash Nigam", "link": "https://stackoverflow.com/users/6845084/palash-nigam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3502, "favorite_count": 1, "accepted_answer_id": 57962202, "answer_count": 3, "score": 3, "last_activity_date": 1568657797, "creation_date": 1568656842, "last_edit_date": 1568657797, "question_id": 57962168, "link": "https://stackoverflow.com/questions/57962168/how-to-set-a-field-in-a-struct-with-an-empty-value", "title": "How to set a field in a struct with an empty value?", "body": "<p>Newbie rustacean here. I am writing a TCP client and have a <code>conn</code> field in my client struct. My client implements two methods <code>new</code> to instantiate the struct and connect to open a connection to the server and set that as the value of the <code>conn</code> field</p>\n\n<pre><code>pub struct FistClient {\n    addr: String,\n    conn: TcpStream,\n}\n\nimpl FistClient {\n    pub fn new(ip: &amp;str, port: &amp;str) -&gt; Self {\n        FistClient {\n            addr: String::from(ip) + \":\" + &amp;String::from(port),\n            // conn: &lt;some-defaullt-value&gt;,\n        }\n    }\n\n    pub fn connect(&amp;mut self, ip: &amp;str, port: &amp;str) {\n        let res = TcpStream::connect(&amp;self.addr);\n        match res {\n            Ok(c) =&gt; self.conn = c,\n            Err(_) =&gt; panic!(),\n        }\n    }\n}\n</code></pre>\n\n<p>I want to set the <code>conn</code> field in the new method to some default value. In Go I can do something like <code>conn: nil</code> but it doesn't work here. I tried <code>Default::default()</code> too but that trait isn't implemented for <code>TCPStream</code> how should I set it to a default value?</p>\n"}, {"tags": ["rust", "pattern-matching"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 4, "creation_date": 1568657862, "post_id": 57962167, "comment_id": 102336097, "body": "<code>len % 2 == 0</code> and match with true and false"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1568659410, "post_id": 57962167, "comment_id": 102336666, "body": "You could aslo do this, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=156dcf0fc428ec74aadf546d98d5c5e0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 348, "user_id": 3561221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e94b4ecf7d3e654e2aa017a7e8e21ec7?s=128&d=identicon&r=PG&f=1", "display_name": "David A", "link": "https://stackoverflow.com/users/3561221/david-a"}, "edited": false, "score": 1, "creation_date": 1568685930, "post_id": 57962291, "comment_id": 102343619, "body": "&gt; The compiler is not smart enough to figure out that the result of len % 2 can only ever be 0 or 1.       Yes, it is. But the type system requires that match arms be exhaustive over the whole type, even when the compiler can figure out that it&#39;s not necessary."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1568706314, "post_id": 57962291, "comment_id": 102349327, "body": "As a quick sidenote: In release mode, the compiler can detect, that only <code>0</code> and <code>1</code> is possible and therefore eleminate the <code>_</code> branch completly. <a href=\"https://rust.godbolt.org/z/PVgltd\" rel=\"nofollow noreferrer\">rust.godbolt.org/z/PVgltd</a>"}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 4, "last_activity_date": 1568657818, "last_edit_date": 1568657818, "creation_date": 1568657459, "answer_id": 57962291, "question_id": 57962167, "link": "https://stackoverflow.com/questions/57962167/non-exhaustive-patterns-rust-match-expressions/57962291#57962291", "title": "Non-exhaustive patterns - Rust match expressions", "body": "<p>The compiler is not smart enough to figure out that the result of <code>len % 2</code> can only ever be <code>0</code> or <code>1</code>. It demands a match arm for cases where the result is some other value. You can solve this by explicitly saying that those cases are impossible:</p>\n\n<pre><code>match len % 2 {\n    0 =&gt; (v[len / 2 - 1] + v[len / 2]) as f32 / 2 as f32,\n    1 =&gt; v[(len - 1) / 2] as f32,\n    _ =&gt; unreachable!()\n}\n</code></pre>\n\n<p>The <code>_</code> will match any other value not previously mentioned. The <a href=\"https://doc.rust-lang.org/std/macro.unreachable.html\" rel=\"nofollow noreferrer\"><code>unreachable!()</code></a> tells the compiler \"this code will never execute\", but cause a <code>panic!()</code> just in case it does in fact execute. That way, the program is <em>correct</em> all the time at practically no cost.</p>\n\n<p>Future versions of the compiler might figure out that the values <code>2..</code> or not possible.</p>\n\n<p>The <code>%</code> is the <a href=\"https://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation\"><code>remainder operator</code></a> (not to be cofused with the <code>mod</code>-operator).</p>\n"}, {"tags": [], "owner": {"reputation": 4061, "user_id": 3393058, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/TmKho.png?s=128&g=1", "display_name": "Aloso", "link": "https://stackoverflow.com/users/3393058/aloso"}, "is_accepted": true, "score": 4, "last_activity_date": 1568751804, "creation_date": 1568751804, "answer_id": 57981583, "question_id": 57962167, "link": "https://stackoverflow.com/questions/57962167/non-exhaustive-patterns-rust-match-expressions/57981583#57981583", "title": "Non-exhaustive patterns - Rust match expressions", "body": "<p>The simplest fix is to use <code>_</code> instead of <code>1</code>:</p>\n\n<pre><code>match len % 2 {\n    0 =&gt; (v[len / 2 - 1] + v[len / 2]) as f32 / 2 as f32,\n    _ =&gt; v[(len - 1) / 2] as f32,\n}\n</code></pre>\n\n<p>Because <code>len</code> is odd and non-negative in the second branch, <code>(len - 1) / 2</code> is the same as <code>len / 2</code>. I would simplify it like this:</p>\n\n<pre><code>let mid = v.len() / 2;\nmatch v.len() % 2 {\n    0 =&gt; (v[mid - 1] + v[mid]) as f32 / 2.0,\n    _ =&gt; v[mid] as f32,\n}\n</code></pre>\n"}], "owner": {"reputation": 189, "user_id": 11342925, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-OhfoTlzRIqE/AAAAAAAAAAI/AAAAAAAAAAA/ABtNlbBK5JrK8tagNaecsQ9INaeaEhhKvQ/mo/photo.jpg?sz=128", "display_name": "fresh", "link": "https://stackoverflow.com/users/11342925/fresh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1237, "favorite_count": 0, "accepted_answer_id": 57981583, "answer_count": 2, "score": 4, "last_activity_date": 1568751804, "creation_date": 1568656841, "last_edit_date": 1568657731, "question_id": 57962167, "link": "https://stackoverflow.com/questions/57962167/non-exhaustive-patterns-rust-match-expressions", "title": "Non-exhaustive patterns - Rust match expressions", "body": "<p>I have an issue with the following Rust code:</p>\n\n<pre><code>pub fn median(v: &amp;Vec&lt;i32&gt;) -&gt; f32 {\n    let len = v.len();\n    match len % 2 {\n        0 =&gt; (v[len / 2 - 1] + v[len / 2]) as f32 / 2 as f32,\n        1 =&gt; v[(len - 1) / 2] as f32,\n    }\n}\n</code></pre>\n\n<p>This code doesn't compile due to a 'Non exhaustive patterns' error.\nWhy is that? What does the % operator return?</p>\n"}, {"tags": ["input", "terminal", "rust", "stdin"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568651841, "post_id": 57960886, "comment_id": 102333715, "body": "As always it&#39;s good to show the solution you tried but you ask a XY problem, please show the code of the real problem instead of showing the code of the problem you have trying to fix your first problem. Currently your question is very confuse."}, {"owner": {"reputation": 399, "user_id": 8532064, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/74ec4cb855fc0dce8376bbeb11141819?s=128&d=identicon&r=PG", "display_name": "aravk33", "link": "https://stackoverflow.com/users/8532064/aravk33"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568652674, "post_id": 57960886, "comment_id": 102334058, "body": "@Stargateur I don&#39;t really <i>have</i> code for the real problem; I just have a problem, and code for the solutions I tried... Please tell me what else I should include!"}, {"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1568653829, "post_id": 57960886, "comment_id": 102334532, "body": "Your question conflicts with itself.  How does a user indicate to use the default value while also being able to submit an empty value?"}, {"owner": {"reputation": 399, "user_id": 8532064, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/74ec4cb855fc0dce8376bbeb11141819?s=128&d=identicon&r=PG", "display_name": "aravk33", "link": "https://stackoverflow.com/users/8532064/aravk33"}, "reply_to_user": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1568653980, "post_id": 57960886, "comment_id": 102334588, "body": "@TheIncorrigible1 in the example solution I gave, where the default value is there but the user can backspace it to submit an empty value, this will work. Why does it conflict itself? In any one case, the user only submits an empty value, or the default value, or a different custom value."}, {"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1568654083, "post_id": 57960886, "comment_id": 102334639, "body": "@Cubetastic What&#39;s the purpose of having an empty value while also being able to submit the default value by keybind?  This is the reference to &quot;XY Problem&quot; above."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568654294, "post_id": 57960886, "comment_id": 102334727, "body": "Using a keyboard shortcut or rebinding a signal (SIGINT, in this case) is a terrible idea on its own. Consider just letting the person enter an empty value and, if possible, consider that as &quot;I didn&#39;t want anything, let me pick the default&quot;. Most prompts actually do that"}, {"owner": {"reputation": 399, "user_id": 8532064, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/74ec4cb855fc0dce8376bbeb11141819?s=128&d=identicon&r=PG", "display_name": "aravk33", "link": "https://stackoverflow.com/users/8532064/aravk33"}, "reply_to_user": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1568654839, "post_id": 57960886, "comment_id": 102334949, "body": "@TheIncorrigible1, @S&#233;bastienRenauld, there is definitely a purpose to being able to submit an empty value as well as a default value. For example, if the input was used to create a config file, the default value could be <code>do action a</code>, while an empty value could be <code>don&#39;t do anything</code>. Or, if they were used to edit a field, then the default value could leave it as it is, and an empty field could delete the existing value"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568656154, "post_id": 57960886, "comment_id": 102335454, "body": "in that case I&#39;d consider escape or refining your prompt so this is never an issue (split it in two - do anything? if so what?)"}], "owner": {"reputation": 399, "user_id": 8532064, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/74ec4cb855fc0dce8376bbeb11141819?s=128&d=identicon&r=PG", "display_name": "aravk33", "link": "https://stackoverflow.com/users/8532064/aravk33"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 153, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1568650829, "creation_date": 1568650829, "question_id": 57960886, "link": "https://stackoverflow.com/questions/57960886/in-rust-whats-a-good-way-to-ask-for-input-when-there-exists-a-default-value-a", "title": "In rust, what&#39;s a good way to ask for input when there exists a default value, and empty input should be possible?", "body": "<p>I want to ask for user input, and the user should also be able to specify an empty value, and should also be able to just use the default value.</p>\n\n<pre><code>Enter a value (\"default\"):\n</code></pre>\n\n<p>The above has an issue if pressing enter is to give the default value <code>default</code>: how will the user specify an empty string as the input?</p>\n\n<p>Some ideas I have are showing the default input and allowing the user to backspace it if they want to, or using a keyboard shortcut to use the default value. Of these two, I think the first would be better, but I don't know great ways to implement it. I tried a couple of crates to at least implement the second, like <a href=\"https://crates.io/crates/crossterm_input\" rel=\"nofollow noreferrer\">crossterm-input</a> and <a href=\"https://crates.io/crates/signal-hook\" rel=\"nofollow noreferrer\">signal-hook</a>, but I wasn't able to do it.</p>\n\n<p>With <code>crossterm-input</code>, I tried something like this:</p>\n\n<pre><code>let mut use_default = false;\nif let Ok(_raw) = RawScreen::into_raw_mode() {\n    let input = input();\n    let mut stdin = input.read_sync();\n\n    if let Some(key_event) = stdin.next() {\n        match key_event {\n            InputEvent::Keyboard(k) =&gt; match k {\n                KeyEvent::Ctrl(c) =&gt; match c {\n                    if c == 'y' {\n                        // use the default value\n                        use_default = true;\n                    }\n                },\n                _ =&gt; {},\n            },\n            _ =&gt; {},\n        };\n    }\n}\n</code></pre>\n\n<p>and this did recognize ctrl + y properly, but as it goes into raw mode, other key presses are also ignored until <code>_raw</code> goes out of scope.\nWith <code>signal-hook</code>, I tried something like this:</p>\n\n<pre><code>let signals = Signals::new(&amp;[SIGINT]).unwrap();\n\nlet mut use_default = false;\nthread::spawn(move || {\n    for sig in signals.forever() {\n        println!(\"Received signal {:?}\", sig);\n        use_default = true;\n    }\n});\n</code></pre>\n\n<p>but this only recognized ctrl + c, and I guess that's because only <code>SIGINT</code> was in the array given to <code>Signals::new()</code>. Then, I realized that <code>signal-hook</code> only seems to support recognizing signals the terminal handles by default.</p>\n\n<p>So what's a good way to get the functionality I want?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1568643665, "post_id": 57958811, "comment_id": 102329494, "body": "What do you want to achieve?"}, {"owner": {"reputation": 329, "user_id": 2555197, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/2IExe.jpg?s=128&g=1", "display_name": "adv", "link": "https://stackoverflow.com/users/2555197/adv"}, "edited": false, "score": 0, "creation_date": 1568643823, "post_id": 57958811, "comment_id": 102329571, "body": "Nothing yet.  I am just learning Rust, and I wondered about this question.  It is not about changing the mutability, just checking if a field is mutable at runtime."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1568643865, "post_id": 57958811, "comment_id": 102329602, "body": "Have you read <a href=\"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i>&#39;s chapter on variables and mutability</a>?"}, {"owner": {"reputation": 329, "user_id": 2555197, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/2IExe.jpg?s=128&g=1", "display_name": "adv", "link": "https://stackoverflow.com/users/2555197/adv"}, "edited": false, "score": 1, "creation_date": 1568643898, "post_id": 57958811, "comment_id": 102329627, "body": "Yes, that is where this question came from."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1568643999, "post_id": 57958811, "comment_id": 102329701, "body": "If you use a <code>RefCell</code> that does do dynamic borrowing, then you can use <code>try_borrow()</code>."}, {"owner": {"reputation": 329, "user_id": 2555197, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/2IExe.jpg?s=128&g=1", "display_name": "adv", "link": "https://stackoverflow.com/users/2555197/adv"}, "edited": false, "score": 0, "creation_date": 1568644118, "post_id": 57958811, "comment_id": 102329778, "body": "Hm, true. I suppose that is why this does not seem to exist then."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 10, "creation_date": 1568644148, "post_id": 57958811, "comment_id": 102329799, "body": "Mutability is a compile-time thing, so you don&#39;t check it at runtime."}], "answers": [{"comments": [{"owner": {"reputation": 329, "user_id": 2555197, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/2IExe.jpg?s=128&g=1", "display_name": "adv", "link": "https://stackoverflow.com/users/2555197/adv"}, "edited": false, "score": 0, "creation_date": 1568652757, "post_id": 57959036, "comment_id": 102334079, "body": "Yea, I am coming from TypeScript."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 9, "last_activity_date": 1568644616, "last_edit_date": 1568644616, "creation_date": 1568644268, "answer_id": 57959036, "question_id": 57958811, "link": "https://stackoverflow.com/questions/57958811/is-there-a-way-to-check-a-fields-mutability/57959036#57959036", "title": "Is there a way to check a field&#39;s mutability?", "body": "<p>You mention \"fields\" in your title. A field does not have the property \"mutability\". Your code suggest that you actually want to ask about the mutability of <em>variable bindings</em>.</p>\n\n<p>There is no way to find out at runtime if a variable binding is mutable or not. This property of variable bindings is always known at compile time <em>and</em> is only relevant at compile time. Therefore there is not really a point in checking this at runtime, as the check would always be either <code>true</code> or always <code>false</code>.</p>\n\n<p>Apart from \"binding mutability\" there is \"reference mutability\", basically the difference between <code>&amp;T</code> and <code>&amp;mut T</code>. That you <em>could</em> check at runtime by using a bit of trait trickery. However, it also does not make sense to check at runtime, as it won't allow you to do anything interesting with that information.</p>\n\n<p>Lastly, there is runtime borrowing via interior mutability containers like <a href=\"https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"noreferrer\"><code>RefCell</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html\" rel=\"noreferrer\"><code>Mutex</code></a>. These do have dedicated methods for checking of something can be borrowed mutably.</p>\n\n<p>Coming from a dynamic language, these things might seem really strange to you, that's normal. Just keep on learning Rust (for example by reading the book) and you will learn soon why your initial question indeed seems strange in the context of Rust.</p>\n"}], "owner": {"reputation": 329, "user_id": 2555197, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/2IExe.jpg?s=128&g=1", "display_name": "adv", "link": "https://stackoverflow.com/users/2555197/adv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 398, "favorite_count": 0, "accepted_answer_id": 57959036, "answer_count": 1, "score": 2, "last_activity_date": 1568644616, "creation_date": 1568643509, "last_edit_date": 1568643729, "question_id": 57958811, "link": "https://stackoverflow.com/questions/57958811/is-there-a-way-to-check-a-fields-mutability", "title": "Is there a way to check a field&#39;s mutability?", "body": "<p>Something like:</p>\n\n<pre><code>let x = 5;\nif x.isMut {\n    // do stuff\n} else {\n    // do other stuff\n}\n</code></pre>\n\n<p>You could try overloading the error handling, but that is an anti-pattern.</p>\n"}, {"tags": ["bash", "command-line", "rust"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568646327, "post_id": 57956747, "comment_id": 102331082, "body": "Edited my answer a bit, added more info on how to catch and redirect that spurious <code>Ok</code>"}], "answers": [{"comments": [{"owner": {"reputation": 508, "user_id": 552391, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1b9cfd9892a765221fe557768987b42d?s=128&d=identicon&r=PG", "display_name": "Matias", "link": "https://stackoverflow.com/users/552391/matias"}, "edited": false, "score": 0, "creation_date": 1568648774, "post_id": 57957179, "comment_id": 102332406, "body": "Thanks for you answer. Yes, I did realize bash was the command returning the status. My confusion was that in the terminal, both ways returned 127 so I expected the same behavior. Now, I wrapped the command execution and return Ok() or Err() depending on status."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 508, "user_id": 552391, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1b9cfd9892a765221fe557768987b42d?s=128&d=identicon&r=PG", "display_name": "Matias", "link": "https://stackoverflow.com/users/552391/matias"}, "edited": false, "score": 0, "creation_date": 1568648861, "post_id": 57957179, "comment_id": 102332457, "body": "All good then :-) just remember, if you do need the status, you can retrieve it back with a bit shift"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 5, "last_activity_date": 1568646955, "last_edit_date": 1568646955, "creation_date": 1568637902, "answer_id": 57957179, "question_id": 57956747, "link": "https://stackoverflow.com/questions/57956747/stdprocesscommand-not-returning-err-result-when-using-bash-c/57957179#57957179", "title": "std::process:Command not returning Err() result when using &#39;bash -c&#39;", "body": "<p>That can be explained pretty easily. Follow along on the <a href=\"https://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html\" rel=\"nofollow noreferrer\">list of error codes</a></p>\n\n<p><code>out1</code> is <code>Ok</code> for obvious reasons</p>\n\n<p><code>out2</code> is an <code>Err</code> type because <code>Command</code> directly looked for the process, could not find it, and returned <code>ENOENT</code> (code 2). This error happened <em>within</em> rust, nothing was actually executed.</p>\n\n<p><code>out3</code> is <code>Ok</code> because the process that <code>Command</code> ran is <code>bash</code>, and it returned its status. In this case, it wouldn't have found the command, so by bash statuses, it'll have returned 127. However, it's not that easy, because there is an additional layer of information contained in <code>ExitStatus</code>. On unix, when a process fails, it actually returns a 16bit/32bit integer (based on platform/libc/etc), separated in two:</p>\n\n<ul>\n<li>The highest bits are what signal triggered the return</li>\n<li>The lowest 8 bits are the return status of the process</li>\n</ul>\n\n<p>And, to no surprise, if we shift 32512 8 bits to the right (it was an <code>u16</code>), we get... 127!</p>\n\n<p>The takeaway is simple:</p>\n\n<ul>\n<li><code>Err</code> <strong>definitely</strong> means the process didn't run</li>\n<li><code>Ok</code> means the main process ran, but you'll need to check <code>ExitStatus::success()</code> to confirm that it actually did (i.e. 0 as exit status)</li>\n</ul>\n\n<p>You could recover it like so:</p>\n\n<pre><code>Command::new(\"bash\").arg(\"-c\").arg(\"wrongcommand\").output().and_then(|r| match r.status.success() {\n  true =&gt; Ok(r),\n  false =&gt; Err(io::Error::new(io::ErrorKind::InvalidData, \"Process error\"))\n});\n</code></pre>\n\n<p>You can play with this on the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3c62f1ad0d60614834bb25e39d0d2862\" rel=\"nofollow noreferrer\">playground</a>. <code>success()</code> is a decently reliable indicator of child process success; all it does is check if the least significant 8 bits of the exit status is non-zero.</p>\n\n<p>Obviously, this does not help if a process returns non-zero on success, but that's a different problem.</p>\n"}], "owner": {"reputation": 508, "user_id": 552391, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1b9cfd9892a765221fe557768987b42d?s=128&d=identicon&r=PG", "display_name": "Matias", "link": "https://stackoverflow.com/users/552391/matias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 206, "favorite_count": 0, "accepted_answer_id": 57957179, "answer_count": 1, "score": 4, "last_activity_date": 1568646955, "creation_date": 1568636201, "last_edit_date": 1568641679, "question_id": 57956747, "link": "https://stackoverflow.com/questions/57956747/stdprocesscommand-not-returning-err-result-when-using-bash-c", "title": "std::process:Command not returning Err() result when using &#39;bash -c&#39;", "body": "<p>I'm trying to understand why I'm not getting an <code>Err()</code> result when using <code>bash -c</code> expression to run a command. </p>\n\n<p>Here is an example and the output below. I expect <strong><code>out2</code></strong> and <strong><code>out3</code></strong> to be an <code>Err()</code> but <strong><code>out3</code></strong> is an <code>Ok()</code> with the failed status. </p>\n\n<p>I'm using <code>bash -c</code> to execute a command from a given string, which is easy. </p>\n\n<p>It's possible to get an <code>Err()</code> result using <code>bash -c</code> syntax? </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![allow(unused)]\n\nuse std::process::{Command, Output};\n\nfn main() {\n    let out1 = Command::new(\"bash\").arg(\"-c\").arg(\"ls\").output();\n    println!(\"out1: {:?}\", out1);\n\n    let out2 = Command::new(\"wrongcommand\").arg(\"-c\").arg(\"ls\").output();\n    println!(\"out2: {:?}\", out2);\n\n    let out3 = Command::new(\"bash\").arg(\"-c\").arg(\"wrongcommand\").output();\n    println!(\"out3: {:?}\", out3);\n}\n</code></pre>\n\n<p>Output: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>out1: Ok(Output { status: ExitStatus(ExitStatus(0)), stdout: \"Cargo.lock\\nCargo.toml\\ncrate-information.json\\nsrc\\ntarget\\n\", stderr: \"\" })\nout2: Err(Os { code: 2, kind: NotFound, message: \"No such file or directory\" })\nout3: Ok(Output { status: ExitStatus(ExitStatus(32512)), stdout: \"\", stderr: \"bash: wrongcommand: command not found\\n\" })\n</code></pre>\n\n<p>I tried from command line and </p>\n\n<pre><code>$ bash -c wrongcommand\n</code></pre>\n\n<p>and </p>\n\n<pre><code>$ wrongcommand\n</code></pre>\n\n<p>and both return the same exit code (127). That's why I expected that Command failed in the same way.</p>\n"}, {"tags": ["node.js", "rust", "ffi"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 3, "creation_date": 1568630472, "post_id": 57954884, "comment_id": 102322205, "body": "What error are you getting?"}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568631007, "post_id": 57954884, "comment_id": 102322496, "body": "@S&#233;bastienRenauld, I have responded to your question? How do one rightly play with <code>unsigned char*</code>?"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568631143, "post_id": 57954884, "comment_id": 102322567, "body": "Surely <code>g</code> (the argument of your FFI function) should not be an owned type there (<code>g: ArrayStruct&lt;u8&gt;</code> as opposed to a mutable reference); I&#39;ve never done node-rust FFI so I&#39;m not entirely certain that&#39;s an eyebrow-raising moment, but it feels like one"}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568631484, "post_id": 57954884, "comment_id": 102322749, "body": "@S&#233;bastienRenauld, But when a static library is made from it(rust) and included into a C++ (path)file it worked.. <a href=\"https://github.com/petrachor/petrachor/blob/master/libdevcrypto/BLS12_381.cpp\" rel=\"nofollow noreferrer\">github.com/petrachor/petrachor/blob/master/libdevcrypto/&hellip;</a>"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568631936, "post_id": 57954884, "comment_id": 102322990, "body": "That is some seriously convoluted stuff, masking that pointer in an owned struct."}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568631982, "post_id": 57954884, "comment_id": 102323013, "body": "@S&#233;bastienRenauld, I am aware of <code>move</code> ... But I mentioned that it works when it is compiled as static lib , and linked via include path for c++ compile."}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568632038, "post_id": 57954884, "comment_id": 102323034, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/199509/discussion-between-user618677-and-sebastien-renauld\">continue this discussion in chat</a>."}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568690474, "post_id": 57954884, "comment_id": 102344394, "body": "Why should someone delete virtually all my comments, what is actually happening here?"}], "answers": [{"comments": [{"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "edited": false, "score": 0, "creation_date": 1568661899, "post_id": 57959460, "comment_id": 102337620, "body": "Waiting for your struct version"}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "edited": false, "score": 0, "creation_date": 1568717685, "post_id": 57959460, "comment_id": 102355329, "body": "Looks like I have solved this issue. I post my answer later."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "edited": false, "score": 0, "creation_date": 1568717861, "post_id": 57959460, "comment_id": 102355435, "body": "Please do; I&#39;ve been swamped with other projects meanwhile :-("}, {"owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "edited": false, "score": 0, "creation_date": 1568757679, "post_id": 57959460, "comment_id": 102374240, "body": "Renauld, Please try it out."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": false, "score": 0, "last_activity_date": 1568645718, "creation_date": 1568645718, "answer_id": 57959460, "question_id": 57954884, "link": "https://stackoverflow.com/questions/57954884/node-ffi-call-and-dynamic-lib-generated-from-rust/57959460#57959460", "title": "Node FFI call and dynamic lib generated from Rust", "body": "<p>This will get edited once I am at home and have my full set of tools available to get the actual, <code>struct</code>-based example to work.</p>\n\n<p>The symptoms across the FFI boundary with the implementation given in the question are as follows:</p>\n\n<ul>\n<li>Pointer integrity is kept (the same pointer surfaces on both sides of the FFI boundary)</li>\n<li>Buffer integrity is <strong>not</strong> kept or updated. Coming from Rust to NodeJS, the buffer should have been updated, but is not</li>\n</ul>\n\n<p>The quick solution when dealing with low-field-count modification structures like this is to pass a fat pointer instead (pointer + length) as follows, for instance:</p>\n\n<pre><code>#[no_mangle]\npub extern \"C\" fn do_something_with_array(buf: *mut u8, len: u32) -&gt; u32 {\n    unsafe {\n        buf.write_bytes(1, 3);\n    }\n    3\n}\n</code></pre>\n\n<p>With the corresponding FFI definition across on the nodeJS front:</p>\n\n<pre><code>var lib = new FFI.Library('target/debug/libtest2', {\n  'do_something_with_array': [ 'int', ['pointer', 'int'] ]\n});\n\nvar buf = new Buffer.alloc(192);\nvar new_len = lib.do_something_with_array(buf, 192);\nvar new_buf = buf.slice(0, new_len);\n</code></pre>\n\n<p>It seems like <code>ref-struct</code> requires a sync of some sort as the underlying memory <em>has the right content</em>.</p>\n"}, {"tags": [], "owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "is_accepted": false, "score": 0, "last_activity_date": 1568755614, "creation_date": 1568755614, "answer_id": 57982265, "question_id": 57954884, "link": "https://stackoverflow.com/questions/57954884/node-ffi-call-and-dynamic-lib-generated-from-rust/57982265#57982265", "title": "Node FFI call and dynamic lib generated from Rust", "body": "<p>While trying to figure out how to get Buffer integrity kept or updated I noticed that I do not really need ref-struct or something complex. I think I am making use of C language internal layout of struct. Just pointer and it's length. For example, </p>\n\n<pre><code>#[repr(C)]\n#[derive(Debug)]\npub struct ArrayStruct&lt;T&gt; {\n    d: *mut T,\n    len: usize,\n}\n\n#[no_mangle]\npub extern \"C\" fn g2_get_one(g: ArrayStruct&lt;u8&gt;) -&gt; bool {\n    return panic::catch_unwind(|| {\n        g2_to_raw(G2Affine::get_generator(), g);\n    }).is_ok();\n}\n</code></pre>\n\n<p>To call the <code>g2_get_one</code> from Nodejs do the following:</p>\n\n<pre><code>var lib = new FFI.Library('target/debug/libtest2', {\n  'do_something_with_array': [ 'int', ['pointer', 'int'] ]\n});\n\nvar buf = new Buffer.alloc(192);\nvar new_len = lib.do_something_with_array(buf, 192);\n</code></pre>\n\n<p>As long as one follows this simple rule you can have multiple structs as parameters in Rust and this rule would be obeyed .</p>\n"}], "owner": {"reputation": 4203, "user_id": 618677, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0474a21ea751fc27f84147ca7feae93b?s=128&d=identicon&r=PG", "display_name": "user618677", "link": "https://stackoverflow.com/users/618677/user618677"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 212, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1568755614, "creation_date": 1568629498, "last_edit_date": 1568631329, "question_id": 57954884, "link": "https://stackoverflow.com/questions/57954884/node-ffi-call-and-dynamic-lib-generated-from-rust", "title": "Node FFI call and dynamic lib generated from Rust", "body": "<p>I am trying to use node-ffi with dynamic lib generated from rust. This is the rust link, <a href=\"https://github.com/petrachor/pairing-ariel\" rel=\"nofollow noreferrer\">https://github.com/petrachor/pairing-ariel</a>. How can I get JavaScript to properly call rust function and return the expected result?\nTo compile rust first change crate-type(Cargo.toml) to [\"dylib\"],  and <code>cargo build --release</code> </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\n#[derive(Debug)]\npub struct ArrayStruct&lt;T&gt; {\n    d: *mut T,\n    len: usize,\n}\n\n#[no_mangle]\npub extern \"C\" fn g2_get_one(g: ArrayStruct&lt;u8&gt;) -&gt; bool {\n    return panic::catch_unwind(|| {\n        g2_to_raw(G2Affine::get_generator(), g);\n    }).is_ok();\n}\n</code></pre>\n\n<p>My node code to call rust via FFI</p>\n\n<pre><code>var ref = require('ref');\nvar FFI = require('ffi');\nvar Struct = require('ref-struct');\n\n//var IArrayType = require('ref-array');\n\nvar ArrayStruct8 = Struct({\n    'd': \"uchar*\",\n    'len': \"int32\"\n});\n\nvar lib = new FFI.Library('target/release/libpairing', { 'g2_get_zero': [ ref.types.bool, [ ArrayStruct8] ]});\n\nvar buf = new Buffer.alloc(192);\nvar a8 = new ArrayStruct8({d: buf, len: 192});\n\nlib.g2_get_zero(a8);\nconsole.dir(a8);\n</code></pre>\n\n<p>I was expecting a8.b to contain unsigned char* .. When I did <code>console.log(a8.d)</code>, I got \"@\". There is something out there I have not fixed yet, please help me.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1568622305, "post_id": 57952936, "comment_id": 102318010, "body": "TLDR: <code>String</code> is an owned type, so the ownership is transferred from <code>s1</code> to <code>s2</code> while <code>&amp;str</code> is a reference type, so there is no ownership to be transferred. Or in other words, <a href=\"https://doc.rust-lang.org/std/primitive.reference.html#trait-implementations\" rel=\"nofollow noreferrer\">reference types implement <code>Copy</code></a>."}, {"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 1, "creation_date": 1568622502, "post_id": 57952936, "comment_id": 102318114, "body": "I&#39;d say that a reference implements the Copy trait, while a String doesn&#39;t. The Copy trait is the real reason why there&#39;s no ownership transfer."}], "owner": {"reputation": 148, "user_id": 1672075, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pdrrK.jpg?s=128&g=1", "display_name": "padmanabhanm", "link": "https://stackoverflow.com/users/1672075/padmanabhanm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 79, "favorite_count": 2, "closed_date": 1568622376, "answer_count": 0, "score": 1, "last_activity_date": 1568622256, "creation_date": 1568622085, "last_edit_date": 1568622256, "question_id": 57952936, "link": "https://stackoverflow.com/questions/57952936/rust-ownership-borrowing", "closed_reason": "Duplicate", "title": "Rust - Ownership &amp; Borrowing", "body": "<p>I am trying to learn rust and got stuck at Ownership and Borrowing. </p>\n\n<pre><code>let s1 = String::from(\"Hello\");\nlet s2 = s1;\nprint!(\"{}\", s1); //---&gt; Why this is an error ?\n\nlet a = \"hello\";\nlet b = a;\nprint!(\"{}\", a); //--&gt; But why this is not ?\n</code></pre>\n\n<p>Can someone kindly help me out on this ? </p>\n"}, {"tags": ["rust", "serde", "serde-json"], "comments": [{"owner": {"reputation": 12075, "user_id": 2241569, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QMrPS.jpg?s=128&g=1", "display_name": "Jussi Kukkonen", "link": "https://stackoverflow.com/users/2241569/jussi-kukkonen"}, "edited": false, "score": 1, "creation_date": 1568622952, "post_id": 57952523, "comment_id": 102318345, "body": "you say a and b are guaranteed to be unique but then use a as if it&#39;s not unique (and it is not in the example data)."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568625822, "post_id": 57952523, "comment_id": 102319809, "body": "Shame you&#39;re using a custom <code>struct</code> for this with a fixed number of fields. If you want more, you&#39;re going to have to make different variants; this is a wasted opportunity and would&#39;ve been a perfect use case for a <code>Vec</code> containing the branch path"}, {"owner": {"reputation": 2058, "user_id": 3958875, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f6149ddd4636bcab17c52b751d79f7fd?s=128&d=identicon&r=PG&f=1", "display_name": "Prime_Aqasix", "link": "https://stackoverflow.com/users/3958875/prime-aqasix"}, "reply_to_user": {"reputation": 12075, "user_id": 2241569, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QMrPS.jpg?s=128&g=1", "display_name": "Jussi Kukkonen", "link": "https://stackoverflow.com/users/2241569/jussi-kukkonen"}, "edited": false, "score": 0, "creation_date": 1568626587, "post_id": 57952523, "comment_id": 102320226, "body": "@JussiKukkonen My bad, I meant <code>b</code> is unique, not a"}, {"owner": {"reputation": 2058, "user_id": 3958875, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f6149ddd4636bcab17c52b751d79f7fd?s=128&d=identicon&r=PG&f=1", "display_name": "Prime_Aqasix", "link": "https://stackoverflow.com/users/3958875/prime-aqasix"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568626717, "post_id": 57952523, "comment_id": 102320286, "body": "@S&#233;bastienRenauld can you explain what you mean by <code>Vec</code> with branch paths? I specifically put in serde_json as context as I&#39;m not sure what the best way to accomplish this is, thanks."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568626862, "post_id": 57952523, "comment_id": 102320355, "body": "If instead of your flat structure definition (using <code>Foo {...}</code>), you had a vector indicating the path to go (i.e. <code>vec![&#39;abc1&#39;, &#39;efg1&#39;, ...]</code>) you would then be able to iteratively walk this path and generate your structure. As it is, sadly, short of implementing something like <code>Into&lt;Vec&lt;String&gt;&gt;</code> to be able to recurse, you&#39;re going to be stuck with procedurally walking down the tree for each element, I think"}], "answers": [{"tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 1, "last_activity_date": 1568628454, "last_edit_date": 1568628454, "creation_date": 1568626898, "answer_id": 57954146, "question_id": 57952523, "link": "https://stackoverflow.com/questions/57952523/functionally-creating-a-nested-object-from-a-flat-structure/57954146#57954146", "title": "Functionally creating a nested object from a flat structure", "body": "<p>A <code>map</code> will preserve the shape of the data. That is not what you want; the cardinality of the data has been changed after the transformation. So a mere <code>map</code> won't be sufficient.</p>\n\n<p>Instead, a <code>fold</code> will do: you start with an empty <code>HashMap</code>, and populate it as you iterate through the collection. But it is hardly any more readable than a loop in this case. I find a <a href=\"https://crates.io/crates/multimap\" rel=\"nofollow noreferrer\"><code>multimap</code></a> is quite useful here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use multimap::MultiMap;\nuse std::collections::HashMap;\n\nstruct Foo {\n    a: String,\n    b: String,\n    c: String,\n    d: String,\n}\n\n#[derive(Debug)]\nstruct NewFoo {\n    c: String,\n    d: String,\n}\n\nfn main() {\n    let flat = vec![\n        Foo {\n            a: \"abc1\".to_owned(),\n            b: \"efg1\".to_owned(),\n            c: \"yyyy\".to_owned(),\n            d: \"aaaa\".to_owned(),\n        },\n        Foo {\n            a: \"abc1\".to_owned(),\n            b: \"efg2\".to_owned(),\n            c: \"zzzz\".to_owned(),\n            d: \"bbbb\".to_owned(),\n        },\n    ];\n    let map = flat\n        .into_iter()\n        .map(|e| (e.a, (e.b, NewFoo { c: e.c, d: e.d })))\n        .collect::&lt;MultiMap&lt;_, _&gt;&gt;()\n        .into_iter()\n        .map(|e| (e.0, e.1.into_iter().collect::&lt;HashMap&lt;_, _&gt;&gt;()))\n        .collect::&lt;HashMap&lt;_, _&gt;&gt;();\n    println!(\"{:#?}\", map);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2420, "user_id": 682349, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/20ee0d23c969c7740d3c936a4675bb23?s=128&d=identicon&r=PG", "display_name": "Ultrasaurus", "link": "https://stackoverflow.com/users/682349/ultrasaurus"}, "is_accepted": false, "score": 0, "last_activity_date": 1568772749, "creation_date": 1568772749, "answer_id": 57984153, "question_id": 57952523, "link": "https://stackoverflow.com/questions/57952523/functionally-creating-a-nested-object-from-a-flat-structure/57984153#57984153", "title": "Functionally creating a nested object from a flat structure", "body": "<p>If you need to do something custom to flatten/merge your <code>Foo</code> structure, you could turn it into json Values in your rust code using something this:</p>\n\n<pre><code>   let mut root: Map&lt;String, Value&gt; = Map::new();\n   for foo in flat.into_iter() {\n       let b = json!({ \"c\": foo.c, \"d\": foo.d });\n       if let Some(a) = root.get_mut(&amp;foo.a) {\n           if let Value::Object(map) = a {\n                map.insert(foo.b, b);\n           }\n       } else {\n           root.insert(foo.a, json!({foo.b: b}));\n       }\n   };\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=26ab2141b0183208d3bcd829efc7d0bb\" rel=\"nofollow noreferrer\">link to playground</a></p>\n"}], "owner": {"reputation": 2058, "user_id": 3958875, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f6149ddd4636bcab17c52b751d79f7fd?s=128&d=identicon&r=PG&f=1", "display_name": "Prime_Aqasix", "link": "https://stackoverflow.com/users/3958875/prime-aqasix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 354, "favorite_count": 0, "accepted_answer_id": 57954146, "answer_count": 2, "score": 1, "last_activity_date": 1568772749, "creation_date": 1568620435, "last_edit_date": 1568626545, "question_id": 57952523, "link": "https://stackoverflow.com/questions/57952523/functionally-creating-a-nested-object-from-a-flat-structure", "title": "Functionally creating a nested object from a flat structure", "body": "<p>I am attempting to turn a flat structure like the following:</p>\n\n<pre><code>let flat = vec![\n    Foo {\n        a: \"abc1\".to_owned(),\n        b: \"efg1\".to_owned(),\n        c: \"yyyy\".to_owned(),\n        d: \"aaaa\".to_owned(),\n    },\n    Foo {\n        a: \"abc1\".to_owned(),\n        b: \"efg2\".to_owned(),\n        c: \"zzzz\".to_owned(),\n        d: \"bbbb\".to_owned(),\n    }];\n</code></pre>\n\n<p>into a nested JSON object through <code>serde_json</code> that looks something like:</p>\n\n<pre><code>{\n    \"abc1\": {\n        \"efg1\": {\n            \"c\": \"hij1\",\n            \"d\": \"aaaa\", \n        },\n        \"efg2\": {\n            \"c\": \"zzzz\",\n            \"d\": \"bbbb\", \n        },\n    }\n}\n</code></pre>\n\n<p>(The values <code>b</code> are guaranteed to be unique within the array)</p>\n\n<p>If I had needed only one layer, I would do something like this:</p>\n\n<pre><code>let map = flat.into_iter().map(|input| (input.a, NewType {\n    b: input.b,\n    c: input.c,\n    d: input.d,\n})).collect::&lt;Hashmap&lt;String, NewType&gt;&gt;();\n\nlet out = serde_json::to_string(map).unwrap();\n</code></pre>\n\n<p>However, this doesn't seem to scale to multiple layers (i.e. <code>(String, (String, NewType))</code> can't collect into <code>Hashmap&lt;String, Hashmap&lt;String, NewType&gt;&gt;</code>)</p>\n\n<p>Is there a better way than manually looping and inserting entries into the hashmaps, before turning them into json?</p>\n"}, {"tags": ["linux", "permissions", "rust"], "comments": [{"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 0, "creation_date": 1568618013, "post_id": 57951893, "comment_id": 102316154, "body": "Maybe <a href=\"https://doc.rust-lang.org/1.9.0/libc/fn.geteuid.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.9.0/libc/fn.geteuid.html</a> ?"}], "answers": [{"comments": [{"owner": {"reputation": 709, "user_id": 10126273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6trXt.png?s=128&g=1", "display_name": "Tenders McChiken", "link": "https://stackoverflow.com/users/10126273/tenders-mcchiken"}, "edited": false, "score": 0, "creation_date": 1568620864, "post_id": 57952011, "comment_id": 102317371, "body": "Yep, it looks like rust doesn&#39;t expose this information yet. I&#39;ll accept your answer and also add an answer that doesn&#39;t depend on crates.io bellow."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 3, "last_activity_date": 1568619081, "last_edit_date": 1568619081, "creation_date": 1568618166, "answer_id": 57952011, "question_id": 57951893, "link": "https://stackoverflow.com/questions/57951893/how-to-determine-the-effective-user-id-of-a-process-in-rust/57952011#57952011", "title": "How to determine the effective user id of a process in Rust?", "body": "<p>This is going to be on an OS-specific dependency as the concept does not exist (or do what you think it will!) for most of the targets you can build rust code for. In particular, you will find this in the <code>libc</code> crate, which is, as the name suggests, a very small wrapper over <code>libc</code>.</p>\n\n<p>The <code>std::os</code> namespace is typically limited for the bare minimum to get process and FS functionality going for the <code>std::process</code>, <code>std::thread</code> and <code>std::fs</code> modules. As such, it would not have been in there. <code>MetadataExt</code> is, for a similar reason, aimed and targeted at filesystem usage.</p>\n\n<p>As you could have expected, the call itself is, unimaginatively, <a href=\"https://docs.rs/libc/0.2.63/libc/fn.geteuid.html\" rel=\"nofollow noreferrer\"><code>geteuid</code></a>.</p>\n\n<p>It is an unsafe <code>extern</code> import, so you'll have to wrap it in an <code>unsafe</code> block.</p>\n"}, {"tags": [], "owner": {"reputation": 709, "user_id": 10126273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6trXt.png?s=128&g=1", "display_name": "Tenders McChiken", "link": "https://stackoverflow.com/users/10126273/tenders-mcchiken"}, "is_accepted": false, "score": 1, "last_activity_date": 1600711355, "last_edit_date": 1600711355, "creation_date": 1568621604, "answer_id": 57952799, "question_id": 57951893, "link": "https://stackoverflow.com/questions/57951893/how-to-determine-the-effective-user-id-of-a-process-in-rust/57952799#57952799", "title": "How to determine the effective user id of a process in Rust?", "body": "<p>It appears that Rust 1.46.0 doesn't expose this functionality in the standard library. If you're using a POSIX system and don't want to rely on an extra dependency, you have four options:</p>\n<ol>\n<li><p>You can use libc directly:</p>\n<pre><code>#[link(name = &quot;c&quot;)]\nextern &quot;C&quot; {\n    fn geteuid() -&gt; u32;\n    fn getegid() -&gt; u32;\n}\n</code></pre>\n<p>If you're using GNU/Linux in particular, you won't need to link to libc at all since the system call symbols are automatically made available to your program via the VDSO. In other words, you can use a plain <code>extern</code> block without the <code>link</code> attribute.</p>\n</li>\n<li><p>Read <code>/proc/self/status</code> (potentially Linux only?). This file contains a line that starts with <code>Uid:</code>. This line lists the real user id, effective user id, and other information that you may also find relevant. Refer to <code>man proc</code> for more information.</p>\n</li>\n<li><p>If you're using a normal GNU/Linux system, you can access the metadata of the <code>/proc/self</code> directory itself. As <a href=\"https://stackoverflow.com/a/55345948/10126273\">pointed out in this question</a>, the owner of this directory should match the effective user id of the process. You can get the euid as follows:</p>\n<pre><code>use std::os::unix::fs::MetadataExt;\nprintln!(&quot;metadata for {:?}&quot;, std::fs::metadata(&quot;/proc/self&quot;).map(|m| m.uid()));\n</code></pre>\n<p>A benefit this approach provides is that it is relatively cheap compared to option #2 since it's only a single <code>stat</code> syscall (as opposed to opening a file and reading/parsing its contents).</p>\n</li>\n<li><p>If you're not using a normal GNU/Linux system, you might find success in creating a new dummy file and obtaining the owner id normally via <code>Metadata</code>.</p>\n</li>\n</ol>\n"}], "owner": {"reputation": 709, "user_id": 10126273, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/6trXt.png?s=128&g=1", "display_name": "Tenders McChiken", "link": "https://stackoverflow.com/users/10126273/tenders-mcchiken"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1044, "favorite_count": 1, "accepted_answer_id": 57952011, "answer_count": 2, "score": 3, "last_activity_date": 1600711355, "creation_date": 1568617620, "question_id": 57951893, "link": "https://stackoverflow.com/questions/57951893/how-to-determine-the-effective-user-id-of-a-process-in-rust", "title": "How to determine the effective user id of a process in Rust?", "body": "<p>On Linux and other POSIX systems, a program can be executed under the identity of another user (i.e. <code>euid</code>). Normally, you'd call <code>geteuid</code> and friends to reliably determine the current identities of the process. However, I couldn't figure out a reliable way to determine these identities using only  rust's standard library. </p>\n\n<p>The only thing I found that was close is <code>std::os::unix::MetadataExt</code>.</p>\n\n<p>Is it currently possible to determine the <code>euid</code> (and other ids) of process using the rust's standard library? Is there a function or trait I'm missing?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1568618434, "post_id": 57950445, "comment_id": 102316353, "body": "I recommend taking a look at <a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.initializer\" rel=\"nofollow noreferrer\"><code>Read::initializer()</code></a>. It provides an (unstable) interface for initializing the buffer for a particular <code>Read</code> implementation, in case that <code>Read</code> implementation requires the buffer to be initialized. (Very few, if any, <code>Read</code> implementations need an initialized buffer.)"}, {"owner": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1568646721, "post_id": 57950445, "comment_id": 102331294, "body": "@SvenMarnach Thanks, I have never heard of it before. I will take a look."}], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1568618195, "post_id": 57951111, "comment_id": 102316242, "body": "I don&#39;t think this answer is appropriate here. Having to initialize big buffers before doing I/O can have a significant performance impact. Rust already provides the unstable <code>Read::initializer()</code> interface for this use case. While I personally don&#39;t have experience with this particular problem, <a href=\"https://github.com/rust-lang/rust/issues/42788#issuecomment-516877440\" rel=\"nofollow noreferrer\">at least some experts think that it matters</a>."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1568618340, "post_id": 57951111, "comment_id": 102316301, "body": "@SvenMarnach In a general situation, you&#39;d be right. In this case, where the OP explicitly set his buffer to exactly the size of <b>one</b> page, however?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1568618574, "post_id": 57951111, "comment_id": 102316414, "body": "I took this as example code for this question, and interpreted the question more generally. Fair enough."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1568618656, "post_id": 57951111, "comment_id": 102316455, "body": "@SvenMarnach I&#39;m editing my answer and providing a memory-optimized sample for much larger reads as a result of your comment, though. Let&#39;s make this one unambiguous - thanks for the input :-)"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1568622667, "post_id": 57951111, "comment_id": 102318199, "body": "@SvenMarnach Added a ton of info, benchmarks, results and conclusions for the generic case"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568627929, "post_id": 57951111, "comment_id": 102320863, "body": "&quot;There is a small performance loss in reading using initialized memory, of about 30%&quot; % is NOT a small penalty !"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568647298, "post_id": 57951111, "comment_id": 102331636, "body": "@Stargateur Keep in mind that this is for reading from memory, so for slower devices the penalty is expected to be lower. However, for some high-performance network applications, it can probably come close."}, {"owner": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "edited": false, "score": 0, "creation_date": 1568647425, "post_id": 57951111, "comment_id": 102331721, "body": "@S&#233;bastienRenauld Thanks for the detailed explanation with some cool benchmark results! It&#39;s my bad that I too simplified my example code, but my usage is not limited to reading a fixed size of region from the file. I basically need a <code>mmap</code> which does not suck :)"}, {"owner": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "edited": false, "score": 1, "creation_date": 1568647665, "post_id": 57951111, "comment_id": 102331855, "body": "@S&#233;bastienRenauld Nit: I think that calling <code>MaybeUnint::unint().assume_init()</code> is a straight undefined behavior."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568647707, "post_id": 57951111, "comment_id": 102331889, "body": "now <b>that</b> is a potential better use. if you wouldn&#39;t mind elaborating; I&#39;m about to take a plane and will read and adjust my answer accordingly when I&#39;m on the ground again :-)"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568648202, "post_id": 57951111, "comment_id": 102332152, "body": "I may be wrong on that but, due to the types (flat, fixed width array of <code>u8</code>) the invariant holds. if we had a <code>Vec</code>, or were dealing with <code>i8</code> then all bets would be off and we would firmly be in the realm of UB"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "edited": false, "score": 1, "creation_date": 1568652185, "post_id": 57951111, "comment_id": 102333864, "body": "@SeiichiUchida no, <code>MaybeUnint::unint().assume_init()</code> is not instant UB <a href=\"https://doc.rust-lang.org/std/mem/union.MaybeUninit.html#initializing-an-array-element-by-element\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/mem/&hellip;</a>"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "edited": false, "score": 0, "creation_date": 1568654095, "post_id": 57951111, "comment_id": 102334646, "body": "@SeiichiUchida I&#39;ve addressed the last part of your question: how to actually read an <code>impl Read</code> object to its end while using an external buffer."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": false, "score": 7, "last_activity_date": 1568654048, "last_edit_date": 1568654048, "creation_date": 1568613579, "answer_id": 57951111, "question_id": 57950445, "link": "https://stackoverflow.com/questions/57950445/in-rust-is-there-a-way-to-directly-read-the-content-of-a-file-into-the-given-un/57951111#57951111", "title": "In Rust, is there a way to directly read the content of a file into the given uninitialized byte array?", "body": "<p>The previous shot at the answer is kept below for posterity. Let's deal with the actual elephant in the room:</p>\n\n<blockquote>\n  <p>Is there a way to initialize an uninitialized memory region with the content of the file without first reading the data to somewhere else, by only using the standard library? Or do we need to go for the OS-specific API?</p>\n</blockquote>\n\n<p>There is: <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_end\" rel=\"nofollow noreferrer\"><code>Read::read_to_end(&amp;mut self, &amp;mut Vec&lt;u8&gt;</code>)</a></p>\n\n<p>This function will drain your <code>impl Read</code> object, and depending on the underlying implementation will do one or more reads, extending the <code>Vec</code> provided as it goes and appending all bytes to it.</p>\n\n<p>It then returns the number of bytes read. It can also be interrupted, and this error needs to be handled.</p>\n\n<hr>\n\n<p>You are trying to micro-optimize something based on heuristics you think are the case, when they are not.</p>\n\n<p>The initialization of the array is done in one go as low-level as it can get with <code>memset</code>, all in one chunk. Both <code>calloc</code> and <code>malloc</code>+<code>memset</code> are highly optimized, <code>calloc</code> relies on a trick or two to make it even more performant. Somebody on codereview <a href=\"https://codereview.stackexchange.com/a/150247/25204\">pitted \"highly optimized code\" against a naive implementation and lost</a> as a result.</p>\n\n<p>The takeaway is that second-guessing the compiler is typically fraught with issues and, overall, not worth micro-optimizing for unless you can put some real numbers on the issues.</p>\n\n<p>The second takeaway is one of memory logic. As I am sure you are aware, allocation of memory is dramatically faster in some cases depending on the <em>position</em> of the memory you are allocating and the <em>size</em> of the contiguous chunk you are allocating, due to how memory is laid out in atomic units (pages). This is a <em>much</em> more impactful factor, to the point that below the hood, the compiler will often align your memory request to an entire page to avoid having to fragment it, particularly as it gets into L1/L2 caches.</p>\n\n<p>If anything isn't clear, let me know and I'll generate some small benchmarks for you.</p>\n\n<p>Finally, <code>MaybeUninit</code> is not at all the tool you want for the job in any case. The point of <code>MaybeUninit</code> isn't to skip a <code>memset</code> or two, since you will be performing those <code>memset</code>s yourself by having to guarantee (by contract due to <code>assume_init</code>) that those types are sane. There <em>are</em> cases for this, but they're rare.</p>\n\n<p><strong>In larger cases</strong></p>\n\n<p>There <em>is</em> an impact on performance in uninitializing vs. initializing memory, and we're going to show this by taking an absolutely perfect scenario: we're going to make ourselves a 64M buffer in memory and wrap it in a <code>Cursor</code> so we get a <code>Read</code> type. This <code>Read</code> type will have latency far, far inferior to most I/O operations you will encounter in the wild, since it is almost guaranteed to reside entirely in L2 cache during the benchmark cycle (due to its size) or L3 cache (because we're single-threaded). This should allow us to notice the performance loss from <code>memset</code>ting.</p>\n\n<p>We're going to run three versions for each case (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a8a80316826e0775edcab004254f7804\" rel=\"nofollow noreferrer\">the code</a>):</p>\n\n<ul>\n<li>One where we define out buffer as <code>[MaybeUninit::uninit().assume_init(); N]</code>, i.e. we're taking N chunks of <code>MaybeUninit&lt;u8&gt;</code></li>\n<li>One where out <code>MaybeUninit</code> is a contiguous N-element long chunk</li>\n<li>One where we're just mapping straight into an initialized buffer</li>\n</ul>\n\n<p>The results (on a core i9-9900HK laptop):</p>\n\n<pre><code>large reads/one uninit  time:   [1.6720 us 1.7314 us 1.7848 us]\n\nlarge reads/small uninit elements\n                        time:   [2.1539 us 2.1597 us 2.1656 us]\n\nlarge reads/safe        time:   [2.0627 us 2.0697 us 2.0771 us]\n\nsmall reads/one uninit  time:   [4.5579 us 4.5722 us 4.5893 us]\n\nsmall reads/small uninit elements\n                        time:   [5.1050 us 5.1219 us 5.1383 us]\n\nsmall reads/safe        time:   [7.9654 us 7.9782 us 7.9889 us]\n</code></pre>\n\n<p>The results are as expected: </p>\n\n<ul>\n<li>Allocating N <code>MaybeUninit</code> is slower than one huge chunk; this is completely expected and should not come as a surprise.</li>\n<li>Small, iterative 4096-byte reads are slower than a huge, single, 128M read even when the buffer only contains 64M</li>\n<li>There is a small performance loss in reading using initialized memory, of about 30%</li>\n<li><strong>Opening <em>anything</em> else</strong> on the laptop while testing causes a 50%+ increase in benchmarked time</li>\n</ul>\n\n<p>The last point is particularly important, and it becomes even more important when dealing with real I/O as opposed to a buffer in memory. The more layers of cache you have to traverse, the more side-effects you get from other processes impacting your own processing. If you are reading a file, you will typically encounter:</p>\n\n<ul>\n<li>The filesystem cache (may or may not be swapped)</li>\n<li>L3 cache (if on the same core)</li>\n<li>L2 cache</li>\n<li>L1 cache</li>\n</ul>\n\n<p>Depending on the level of the cache that produces a cache miss, you're more or less likely to have your performance gain from using uninitialized memory <em>dwarfed</em> by the performance loss in having a cache miss.</p>\n\n<p>So, the (unexpected TL;DR):</p>\n\n<ul>\n<li>Small, iterative reads are slower</li>\n<li>There <em>is</em> a performance gain in using <code>MaybeUninit</code> but it is typically an order of magnitude less than any I/O opt</li>\n</ul>\n"}], "owner": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 949, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1568654048, "creation_date": 1568608589, "question_id": 57950445, "link": "https://stackoverflow.com/questions/57950445/in-rust-is-there-a-way-to-directly-read-the-content-of-a-file-into-the-given-un", "title": "In Rust, is there a way to directly read the content of a file into the given uninitialized byte array?", "body": "<p>I am looking for a way to directly read the content of a file into the provided uninitialized byte array.</p>\n\n<p>Currently, I have a code like the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fs::File;\nuse std::mem::MaybeUninit;\n\nlet buf: MaybeUninit&lt;[u8; 4096]&gt; = MaybeUninit::zeroed();\nlet f = File::open(\"some_file\")?;\nf.read(buf.as_mut_ptr().as_mut().unwrap())?;\n</code></pre>\n\n<p>The code does work, except that it unnecessarily initializes the byte array with 0. I would like to replace <code>MaybeUninit::zeroed()</code> with <code>MaybeUninit::uninit()</code> but doing so will trigger an undefined behavior according to the document of <code>MaybeUninit</code>. Is there a way to initialize an uninitialized memory region with the content of the file without first reading the data to somewhere else, by only using the standard library? Or do we need to go for the OS-specific API?</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 2, "creation_date": 1568604525, "post_id": 57949348, "comment_id": 102312623, "body": "Firstly, neither <code>Key</code> is an <code>i32</code> in your gist. Both are <code>(&amp;&#39;a i32, &amp;&#39;a i32)</code> tuples, where the lifetime comes from the relevant parent struct type. And what I think is happening here is <code>TypeA::Key</code> and <code>TypeB::Key</code> are being treated as different types, instead of both being aliases for <code>(&amp;&#39;a i32, &amp;&#39;a i32)</code>, so the only <code>PartialOrd</code> implementation that is visible is <code>PartialOrd&lt;Self&gt;</code>, which causes the compiler to look for another <code>TypeA</code>. This is more easier to figure out if you explicitly specify the type parameters to <code>compare()</code>."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 1, "creation_date": 1568609562, "post_id": 57949348, "comment_id": 102313476, "body": "The rust HRTB seems to be in fault here. If your <code>compare</code> function is declared as <code>fn compare&lt;&#39;a, &#39;b, A, B&gt;(a: &amp;&#39;a A, b: &amp;&#39;b B) -&gt; Ordering</code>, whole thing compiles. Could be a known <a href=\"https://github.com/rust-lang/rust/issues/56556\" rel=\"nofollow noreferrer\">issue</a>, too. But the errors aren&#39;t exactly the same, so I&#39;m not sure. Does the same workaround work for your real code?"}, {"owner": {"reputation": 13623, "user_id": 371407, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/600ad48eea92da6bdab1e6d2b51bf819?s=128&d=identicon&r=PG", "display_name": "devyn", "link": "https://stackoverflow.com/users/371407/devyn"}, "reply_to_user": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 0, "creation_date": 1568617230, "post_id": 57949348, "comment_id": 102315809, "body": "@IskarJarak Apologies, it&#39;s <code>i32</code> in the real code, but I was trying to use an example that would demonstrate what I was going for in terms of flexibility.  @edwardw The reason why I can&#39;t do that in the real code is that I&#39;m actually working with Streams, and making stream adaptors. The lifetimes for the objects coming out of the streams can&#39;t be based on the context of the impl because the stream passes ownership of objects it produces - a HRTB is really necessary here, I believe."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1568646439, "post_id": 57949348, "comment_id": 102331149, "body": "While the error here is interesting, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4a8e67d839f28269d1f2d4f3361b14c6\" rel=\"nofollow noreferrer\">when <code>Key</code> doesn&#39;t contain a reference this is easy to solve</a>, so there might be another question buried in your actual problem that the minimal example doesn&#39;t demonstrate."}, {"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "reply_to_user": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1568674305, "post_id": 57949348, "comment_id": 102341430, "body": "devyn, Please excuse the nitpick re Key type. Re. what @edwardw said regarding the error message not being an exact match to the issue he linked, I believe your problem really is the same as that bug - a few small modifications of your gist produce the same error."}], "answers": [{"tags": [], "owner": {"reputation": 13623, "user_id": 371407, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/600ad48eea92da6bdab1e6d2b51bf819?s=128&d=identicon&r=PG", "display_name": "devyn", "link": "https://stackoverflow.com/users/371407/devyn"}, "is_accepted": false, "score": 1, "last_activity_date": 1568619485, "creation_date": 1568619485, "answer_id": 57952295, "question_id": 57949348, "link": "https://stackoverflow.com/questions/57949348/rustc-weirdly-assuming-that-type-parameters-have-to-be-the-same-even-when-theyr/57952295#57952295", "title": "rustc weirdly assuming that type parameters have to be the same even when they&#39;re separate?", "body": "<p>I believe I have found a workaround. By providing the following trait and being <em>very</em> specific about which types need to be comparable, you can avoid what I assume to be a Rust bug about evaluating HRTB associated types. It may be related to <a href=\"https://github.com/rust-lang/rust/issues/56556\" rel=\"nofollow noreferrer\">this issue</a> as noted by @edwardw.</p>\n\n<p>This trait does work fine with HRTBs as long as you use the exact types that you require to be comparable in your bounds. I'm thinking this workaround may be applicable to some other cases of that bug too.</p>\n\n<pre><code>pub trait KeyedCmp&lt;'a, B&gt;: Keyed&lt;'a&gt; where B: Keyed&lt;'a&gt; {\n    fn keyed_cmp(&amp;'a self, other: &amp;'a B) -&gt; Ordering;\n}\n\nimpl&lt;'a, A, B&gt; KeyedCmp&lt;'a, B&gt; for A\n    where A: Keyed&lt;'a&gt;,\n          B: Keyed&lt;'a&gt;,\n          &lt;A as Keyed&lt;'a&gt;&gt;::Key: PartialOrd&lt;&lt;B as Keyed&lt;'a&gt;&gt;::Key&gt; {\n\n    fn keyed_cmp(&amp;'a self, other: &amp;'a B) -&gt; Ordering {\n        self.key().partial_cmp(&amp;other.key()).unwrap()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 13623, "user_id": 371407, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/600ad48eea92da6bdab1e6d2b51bf819?s=128&d=identicon&r=PG", "display_name": "devyn", "link": "https://stackoverflow.com/users/371407/devyn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1568633779, "creation_date": 1568596556, "last_edit_date": 1568633779, "question_id": 57949348, "link": "https://stackoverflow.com/questions/57949348/rustc-weirdly-assuming-that-type-parameters-have-to-be-the-same-even-when-theyr", "title": "rustc weirdly assuming that type parameters have to be the same even when they&#39;re separate?", "body": "<p>I'm working on a library that requires as part of its functionality comparison between different types based on a key contained within them.</p>\n\n<p>There is no way to require that the keys are the same in stable Rust (can't use equality bounds), so I'm using PartialOrd even though the keys are required to be Ord. Because of this requirement, it's safe to unwrap the result of <code>partial_cmp()</code> (it must be <code>Some</code> by specification).</p>\n\n<p>However, with this bound, Rust seems to give up trying to resolve the associated type <code>Key</code> and whether it has <code>PartialOrd</code> with the other key, and just assumes that the types must be the same:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:60:29\n   |\n60 |     let order = compare(&amp;a, &amp;b);\n   |                             ^^ expected struct `TypeA`, found struct `TypeB`\n   |\n   = note: expected type `&amp;TypeA`\n              found type `&amp;TypeB`\n</code></pre>\n\n<p>In my much more complex example, where Keyed has another type parameter that determines the sort method (to allow for flexibility), the error I get looks like this:</p>\n\n<pre><code>can't compare `&lt;types::test_helpers::TestObject as types::Keyed&lt;'a, types::test_helpers::SortFirst&gt;&gt;::Key` with `&lt;i32 as types::Keyed&lt;'a, types::test_helpers::SortFirst&gt;&gt;::Key`\n</code></pre>\n\n<p>even though the associated type <code>Key</code> for both is just <code>i32</code>. This maybe provides more clarity into where the compiler is having a problem. The other errors before that seem to end up assuming that the types should be the same, just like in the little example I'm including.</p>\n\n<p>Here is a minimal reproducible example (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=351ca831006058fd4f3ec18f43caecdf\" rel=\"nofollow noreferrer\">link</a>):</p>\n\n<pre><code>use std::cmp::Ordering;\n\ntrait Keyed&lt;'a&gt; {\n    type Key: 'a + Eq + Ord;\n\n    fn key(&amp;'a self) -&gt; Self::Key;\n}\n\n#[derive(Debug, Clone)]\nstruct TypeA {\n    key: (i32, i32),\n    value: String,\n}\n\nimpl&lt;'a&gt; Keyed&lt;'a&gt; for TypeA {\n    type Key = (&amp;'a i32, &amp;'a i32);\n\n    fn key(&amp;'a self) -&gt; (&amp;'a i32, &amp;'a i32) {\n        (&amp;self.key.0, &amp;self.key.1)\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct TypeB {\n    key_a: i32,\n    key_b: i32,\n    value: u64,\n}\n\nimpl&lt;'a&gt; Keyed&lt;'a&gt; for TypeB {\n    type Key = (&amp;'a i32, &amp;'a i32);\n\n    fn key(&amp;'a self) -&gt; (&amp;'a i32, &amp;'a i32) {\n        (&amp;self.key_a, &amp;self.key_b)\n    }\n}\n\nfn compare&lt;A, B&gt;(a: &amp;A, b: &amp;B) -&gt; Ordering\nwhere\n    for&lt;'a&gt; A: Keyed&lt;'a&gt;,\n    for&lt;'a&gt; B: Keyed&lt;'a&gt;,\n    for&lt;'a&gt; &lt;A as Keyed&lt;'a&gt;&gt;::Key: Ord,\n    for&lt;'a&gt; &lt;B as Keyed&lt;'a&gt;&gt;::Key: Ord,\n    for&lt;'a&gt; &lt;A as Keyed&lt;'a&gt;&gt;::Key: PartialOrd&lt;&lt;B as Keyed&lt;'a&gt;&gt;::Key&gt;,\n{\n    a.key().partial_cmp(&amp;b.key()).unwrap()\n}\n\nfn main() {\n    let a = TypeA {\n        key: (3, 4),\n        value: \"Hello!\".into(),\n    };\n\n    let b = TypeB {\n        key_a: 3,\n        key_b: 5,\n        value: 9292,\n    };\n\n    let order = compare(&amp;a, &amp;b);\n\n    println!(\"{:?}.key() = {:?}\", a, a.key());\n    println!(\"{:?}.key() = {:?}\", b, b.key());\n    println!(\"compare({:?}, {:?}) = {:?}\", a, b, order);\n\n    assert_eq!(order, Ordering::Less);\n}\n</code></pre>\n\n<p>Anyone who has experience with how rustc does type calculus or who has had a similar problem have any clue what's going on here?</p>\n"}, {"tags": ["function", "rust", "higher-order-functions"], "answers": [{"tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 3, "last_activity_date": 1568586464, "creation_date": 1568586464, "answer_id": 57948630, "question_id": 57948479, "link": "https://stackoverflow.com/questions/57948479/how-to-write-a-function-that-takes-a-slice-of-functions/57948630#57948630", "title": "How to write a function that takes a slice of functions?", "body": "<p>Your problem is that every element of the array must be of the same type, but the return of a function declared as returning <code>impl Trait</code> is an <em>opaque type</em>, that is an unspecified, unnamed type, that you can only use by means of the given trait.</p>\n\n<p>You have two functions that return the same <code>impl Trait</code> but that does not mean that they return the same type. In fact, as your compiler shows, they are different opaque types, so they cannot be part of the same array. If you were to write an array of values of the same type, such as:</p>\n\n<pre><code>    g(&amp;[f1(), f1(), f1()]);\n</code></pre>\n\n<p>then it would work. But with different functions, there will be different types and the array is impossible to build.</p>\n\n<p>Does that mean there is no solution for your problem? Of course not! You just have to invoke dynamic dispatch. That is you have to make your slice of type <code>&amp;[&amp;dyn Fn(&amp;str) -&gt; usize]</code>. For that you need to do two things:</p>\n\n<ol>\n<li>Add a level of indirection: dynamic dispatching is always done via references or pointers (<code>&amp;dyn Trait</code> or <code>Box&lt;dyn Trait&gt;</code> instead of <code>Trait</code>).</li>\n<li>Do an explicit cast to the <code>&amp;dyn Trait</code> to avoid ambiguities in the conversion.</li>\n</ol>\n\n<p>There are many ways to do the cast: you can cast the first element of the array, or you can declare the temporary variables, or give the slice a type. I prefer the latter, because it is more symmetric. Something like this:</p>\n\n<pre><code>fn main() {\n    let fns: &amp;[&amp;dyn Fn(&amp;str) -&gt; usize] = \n        &amp;[&amp;f1(), &amp;f2()];\n    g(fns);\n}\n</code></pre>\n\n<p>Link to a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=187fcafac1777cc67c0c2c427364f591\" rel=\"nofollow noreferrer\">playground</a> with this solution.</p>\n"}], "owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 0, "accepted_answer_id": 57948630, "answer_count": 1, "score": 1, "last_activity_date": 1568586464, "creation_date": 1568584815, "question_id": 57948479, "link": "https://stackoverflow.com/questions/57948479/how-to-write-a-function-that-takes-a-slice-of-functions", "title": "How to write a function that takes a slice of functions?", "body": "<p>I am trying to write a function that takes a slice of functions. Consider the following simple <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=64723c844e106440244a0465e966a4bc\" rel=\"nofollow noreferrer\">illustration</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn g&lt;P: Fn(&amp;str) -&gt; usize&gt;(ps: &amp;[P]) { }\n\nfn f1() -&gt; impl Fn(&amp;str) -&gt; usize { |s: &amp;str| s.len() }\nfn f2() -&gt; impl Fn(&amp;str) -&gt; usize { |s: &amp;str| s.len() }\n\nfn main() {\n    g(&amp;[f1(), f2()][..]);\n}\n</code></pre>\n\n<p>It fails to compile:</p>\n\n<pre><code>error[E0308]: mismatched types\n --&gt; src/main.rs:6:15\n  |\n6 |     g(&amp;[f1(), f2()][..]);\n  |               ^^^^ expected opaque type, found a different opaque type\n  |\n  = note: expected type `impl for&lt;'r&gt; std::ops::Fn&lt;(&amp;'r str,)&gt;` (opaque type)\n             found type `impl for&lt;'r&gt; std::ops::Fn&lt;(&amp;'r str,)&gt;` (opaque type)\n</code></pre>\n\n<p>Is there any way to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568576316, "post_id": 57947441, "comment_id": 102308294, "body": "&quot;I want to remove a list of indices&quot;, a sequence is different of a list. A list does not imply contigus. So, your question is unclear."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568577152, "post_id": 57947441, "comment_id": 102308456, "body": "That is a really good point, actually, since <code>drain()</code> can only deal with contiguous ranges."}, {"owner": {"reputation": 7133, "user_id": 27074, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/d787ce9740a19eac110217bc8af43cbe?s=128&d=identicon&r=PG", "display_name": "Chris Jefferson", "link": "https://stackoverflow.com/users/27074/chris-jefferson"}, "edited": false, "score": 0, "creation_date": 1568586462, "post_id": 57947441, "comment_id": 102310155, "body": "I&#39;ve clarified that I want to be able to remove an arbitary list of indices, such as indices 1, 2, 5."}], "answers": [{"comments": [{"owner": {"reputation": 7133, "user_id": 27074, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/d787ce9740a19eac110217bc8af43cbe?s=128&d=identicon&r=PG", "display_name": "Chris Jefferson", "link": "https://stackoverflow.com/users/27074/chris-jefferson"}, "edited": false, "score": 0, "creation_date": 1568915692, "post_id": 57948703, "comment_id": 102436750, "body": "That&#39;s close, but reorders the elements (which I don&#39;t want).  I&#39;m thinking of looking to see if there is some kind of &quot;split&quot; function which takes a predicate and separates one iter into two, I could then drain into two different vecs, and finally move one piece back into the original."}, {"owner": {"reputation": 86, "user_id": 11071180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a4cee22eae720b25835d6f78fa02a9c?s=128&d=identicon&r=PG", "display_name": "Earthcomputer", "link": "https://stackoverflow.com/users/11071180/earthcomputer"}, "edited": false, "score": 0, "creation_date": 1607925480, "post_id": 57948703, "comment_id": 115415398, "body": "The answer you linked to appears to have been removed"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 1, "last_activity_date": 1568587223, "creation_date": 1568587223, "answer_id": 57948703, "question_id": 57947441, "link": "https://stackoverflow.com/questions/57947441/remove-a-sequence-of-values-from-a-vec-in-rust/57948703#57948703", "title": "Remove a sequence of values from a Vec in Rust?", "body": "<p>If the indices you want to remove are contiguous, you can use <code>Vec::drain</code>, as shown in <a href=\"https://stackoverflow.com/a/57947480/2408867\">this answer</a>. If not (i.e. you have arbitrary indices you want to remove), things get a lot more complicated.</p>\n\n<p>One can solve the \"expensive\" problem of <code>remove</code> by using <code>swap_remove</code>. Instead of shifting all elements to the left, it will swap the removed element with the last one, thus being a O(1) operation. However, with this it's still very error-prone as indices of elements change after each remove-operation. Additionally, the order of elements is not the same as before which might not work for you.</p>\n\n<p>The only way (I can think of) to efficiently remove multiple arbitrary indices is to <strong>sort these indices in decreasing order</strong>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// `indices_to_remove` have to be sorted in decreased order!\nfn remove_multiple&lt;T&gt;(source: &amp;mut Vec&lt;T&gt;, indices_to_remove: &amp;[usize]) -&gt; Vec&lt;T&gt; {\n    indices_to_remove.iter()\n        .copied()\n        .map(|i| source.swap_remove(i))\n        .collect()\n}\n</code></pre>\n\n<p>Example (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6b77b8aa744e5ed4d3c0c59c0583cfe3\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut vec = vec!['a', 'b', 'c', 'd', 'e', 'f'];\nlet removed = remove_multiple(&amp;mut vec, &amp;[5, 3, 2, 0]);\nprintln!(\"source: {:?}\", vec);        // ['e', 'b']\nprintln!(\"result: {:?}\", removed);    // ['f', 'd', 'c', 'a']\n</code></pre>\n\n<p>If your list of indices is not sorted, I actually think just sorting it is the most efficient way to achieve your goal. At least I can't think of an algorithm that keeps track of all the indices and that is faster than O(n * log n), which is the runtime of sorting first. </p>\n"}, {"tags": [], "owner": {"reputation": 16571, "user_id": 2180189, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0de29e70b63441baf6a99393f7ff2027?s=128&d=identicon&r=PG", "display_name": "MightyPork", "link": "https://stackoverflow.com/users/2180189/mightypork"}, "is_accepted": false, "score": 0, "last_activity_date": 1614983595, "creation_date": 1614983595, "answer_id": 66500430, "question_id": 57947441, "link": "https://stackoverflow.com/questions/57947441/remove-a-sequence-of-values-from-a-vec-in-rust/66500430#66500430", "title": "Remove a sequence of values from a Vec in Rust?", "body": "<p>I was just solving this for my own application, so I'm gonna share the module. It's not perfect and I'm sure it can be optimized, but it works well enough for me.</p>\n<p><code>take_multiple()</code> or <code>take_multiple_in_order()</code> will do exactly what you wanted in the original question.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait RemoveMultiple&lt;T&gt; {\n    /// Remove multiple indices\n    fn remove_multiple(&amp;mut self, to_remove: Vec&lt;usize&gt;);\n    \n    /// Remove multiple indices with swap_remove, this is faster but reorders elements\n    fn swap_remove_multiple(&amp;mut self, to_remove: Vec&lt;usize&gt;);\n    \n    /// Remove and return multiple indices\n    fn take_multiple(&amp;mut self, to_remove: Vec&lt;usize&gt;) -&gt; Vec&lt;T&gt;;\n        \n    /// Remove and return multiple indices, preserving the order specified in the index list\n    fn take_multiple_in_order(&amp;mut self, to_remove: &amp;[usize]) -&gt; Vec&lt;T&gt;;\n    \n    /// Remove and return multiple indices with swap_remove, this is faster but reorders elements and the results are in reverse order\n    fn swap_take_multiple(&amp;mut self, to_remove: Vec&lt;usize&gt;) -&gt; Vec&lt;T&gt;;\n}\n\nimpl&lt;T&gt; RemoveMultiple&lt;T&gt; for Vec&lt;T&gt; {\n    fn remove_multiple(&amp;mut self, mut to_remove: Vec&lt;usize&gt;) {\n        to_remove.sort();\n        to_remove.reverse();\n        for r in to_remove {\n            self.remove(r);\n        }\n    }\n    \n    fn swap_remove_multiple(&amp;mut self, mut to_remove: Vec&lt;usize&gt;) {\n        to_remove.sort();\n        to_remove.reverse();\n        for r in to_remove {\n            self.swap_remove(r);\n        }\n    }\n    \n    fn take_multiple(&amp;mut self, mut to_remove: Vec&lt;usize&gt;) -&gt; Vec&lt;T&gt; {\n        to_remove.sort();\n        to_remove.reverse();\n        let mut collected = vec![];\n        for r in to_remove {\n            collected.push(self.remove(r));\n        }\n        collected.reverse();\n        collected\n    }\n    \n    fn take_multiple_in_order(&amp;mut self, to_remove: &amp;[usize]) -&gt; Vec&lt;T&gt; {\n        let mut to_remove = to_remove.iter().copied().enumerate().collect::&lt;Vec&lt;_&gt;&gt;();\n        to_remove.sort_by_key(|(_, r)| *r);\n        to_remove.reverse();\n        let mut collected : Vec&lt;Option&lt;T&gt;&gt; = std::iter::repeat_with(|| None).take(to_remove.len()).collect();\n        for (i, r) in to_remove {\n            collected[i] = Some(self.remove(r));\n        }\n        collected.into_iter().filter_map(|x| x).collect()\n    }\n    \n    fn swap_take_multiple(&amp;mut self, mut to_remove: Vec&lt;usize&gt;) -&gt; Vec&lt;T&gt; {\n        to_remove.sort();\n        to_remove.reverse();\n        let mut collected = vec![];\n        for r in to_remove {\n            collected.push(self.swap_remove(r));\n        }\n        collected\n    }\n}\n\n\n#[cfg(test)]\nmod test {\n    use super::*;\n    \n    #[test]\n    fn remove_multiple() {\n        let mut list = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];        \n        list.remove_multiple(vec![8, 0, 5, 6]);\n        assert_eq!(vec!['1', '2', '3', '4','7', '9'], list);             \n    }\n    \n    #[test]\n    fn swap_remove_multiple() {\n        let mut list = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];        \n        list.swap_remove_multiple(vec![8, 0, 5, 6]);\n        assert_eq!(vec!['9', '1', '2', '3', '4', '7'], list);      \n    }\n    \n    #[test]\n    fn take_multiple() {\n        let mut list = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];        \n        let taken = list.take_multiple(vec![8, 0, 5, 6]);\n        assert_eq!(vec!['1', '2', '3', '4','7', '9'], list); \n        assert_eq!(vec!['0', '5', '6', '8'], taken);             \n    }\n    \n    #[test]\n    fn swap_take_multiple() {\n        let mut list = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];        \n        let taken = list.swap_take_multiple(vec![8, 0, 5, 6]);\n        assert_eq!(vec!['9', '1', '2', '3', '4', '7'], list); \n        assert_eq!(vec!['8', '6', '5', '0'], taken);                \n    }\n    \n    #[test]\n    fn take_multiple_in_order() {\n        let mut list = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];        \n        let taken = list.take_multiple_in_order(&amp;vec![8, 0, 5, 6]);\n        assert_eq!(vec!['1', '2', '3', '4','7', '9'], list); \n        assert_eq!(vec!['8', '0', '5', '6'], taken);             \n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7133, "user_id": 27074, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/d787ce9740a19eac110217bc8af43cbe?s=128&d=identicon&r=PG", "display_name": "Chris Jefferson", "link": "https://stackoverflow.com/users/27074/chris-jefferson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 796, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1614983595, "creation_date": 1568574807, "last_edit_date": 1568586433, "question_id": 57947441, "link": "https://stackoverflow.com/questions/57947441/remove-a-sequence-of-values-from-a-vec-in-rust", "title": "Remove a sequence of values from a Vec in Rust?", "body": "<p><code>remove</code> on a <code>Vec</code> removes a single value, given by an index, and returns that value.</p>\n\n<p>I want to <code>remove</code> a list of indices, for example remove indices 1, 2 and 5 from a <code>Vec</code> of length 8, and get the values at those indices as another <code>Vec</code>. Calling <code>remove</code> repeatedly is (a) expensive, and (b) error-prone, as after each <code>remove</code> other indices are moved.</p>\n\n<p>So, if I started with <code>let mut v = vec![2,3,4,5,6,7]</code>, and removed indices <code>[1,2,5]</code>, I would end up with a new vector containing <code>vec![3,4,7]</code>, while <code>v</code> would be <code>vec![2,5,6]</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 1, "last_activity_date": 1568574088, "creation_date": 1568574088, "answer_id": 57947338, "question_id": 57946845, "link": "https://stackoverflow.com/questions/57946845/how-can-i-check-whether-a-key-exists-in-toml-with-toml-rs/57947338#57947338", "title": "How can I check whether a key exists in TOML with toml-rs?", "body": "<p><code>get()</code> and what you are doing are two completely different paths into the library. This by-key access is <a href=\"https://docs.rs/toml/0.5.3/toml/map/struct.Map.html#impl-Index&lt;%26%27a%20Q&gt;\" rel=\"nofollow noreferrer\">an implementation of <code>Index&lt;_&gt;</code></a> and <strong>will panic</strong> if the key does not exist.</p>\n\n<p>This is what you are seeing in your code.</p>\n\n<p>The <strong>real</strong> way to do what you are trying to do is indeed by using <code>get()</code>, which will return an <code>Option</code>, but first, we're going to sort out the case where the <code>toml</code> you feed <em>isn't</em> a table, like so:</p>\n\n<pre><code>use toml::{Value};\nuse toml::map::Map;\n\nfn main() {\n    let value = \"foo = 'bar'\".parse::&lt;Value&gt;().ok().and_then(|r| match r {\n        Value::Table(table) =&gt; Some(table),\n        _ =&gt; None\n    }).unwrap_or(Map::new()); // This now contains a HashMap&lt;String, Value&gt;\n    println!(\"{:?}\", value.get(\"foo\"));\n    println!(\"{}\", \"before\");\n    println!(\"{:?}\", value.get(\"foo2\"));\n    println!(\"{}\", \"after\");\n}\n</code></pre>\n"}], "owner": {"reputation": 6807, "user_id": 688161, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/8ddaaab02509f34b6ad2eeacdd30e275?s=128&d=identicon&r=PG&f=1", "display_name": "aufziehvogel", "link": "https://stackoverflow.com/users/688161/aufziehvogel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 260, "favorite_count": 0, "accepted_answer_id": 57947338, "answer_count": 1, "score": 0, "last_activity_date": 1568574088, "creation_date": 1568570744, "question_id": 57946845, "link": "https://stackoverflow.com/questions/57946845/how-can-i-check-whether-a-key-exists-in-toml-with-toml-rs", "title": "How can I check whether a key exists in TOML with toml-rs?", "body": "<p>I have a TOML document in which some keys may or may not exist. E.g. this document is a valid document:</p>\n\n<pre><code>foo = \"bar\"\n</code></pre>\n\n<p>But also this is valid:</p>\n\n<pre><code>foo = \"bar\"\nsomething = \"else\"\n</code></pre>\n\n<p>I am now trying to parse this document in Rust with the library <a href=\"https://docs.rs/toml/0.5.3/toml/index.html\" rel=\"nofollow noreferrer\">toml-rs</a>. However I could not find any guidance in the documentation on how to find out whether a key actually exists in my TOML document. Whenever I try to access this key the program panics with the error <code>index not found</code>.</p>\n\n<p>I came up with the following minimalistic example that shows that the Rust code immediately fails when I try to access a key that does not exist:</p>\n\n<pre><code>use toml::Value;\n\nfn main() {\n    let value = \"foo = 'bar'\".parse::&lt;Value&gt;().unwrap();\n\n    println!(\"{:?}\", value[\"foo\"]);\n    println!(\"{}\", \"before\");\n    println!(\"{:?}\", value[\"foo2\"]);\n    println!(\"{}\", \"after\");\n}\n</code></pre>\n\n<p>Which leads to the output:</p>\n\n<pre><code>String(\"bar\")\nbefore\nthread 'main' panicked at 'index not found', src/libcore/option.rs:1034:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n</code></pre>\n\n<p>In the actual code of the library I found <a href=\"https://docs.rs/toml/0.5.3/src/toml/value.rs.html#76\" rel=\"nofollow noreferrer\">a comment for a function called <code>get</code></a> that states:</p>\n\n<blockquote>\n  <p>Also returns <code>None</code> if the given key does not exist in the map or the given index is not within the bounds of the array.</p>\n</blockquote>\n\n<p>However, I am not sure whether this should also apply to my key access. At least to my tests it does not. I was also unable to find a function in the code that would check whether a key exists.</p>\n\n<p>I guess there must be some way to find out whether a key exists in the TOML document?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2539, "user_id": 285915, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e06d9cba7384296d5aac1e5fba3762a6?s=128&d=identicon&r=PG", "display_name": "mrmcgreg", "link": "https://stackoverflow.com/users/285915/mrmcgreg"}, "edited": false, "score": 4, "creation_date": 1568556484, "post_id": 57944839, "comment_id": 102303456, "body": "languages often allow trailing commas kind so you can add new lines without modifying previous lines. it makes diffs clearer."}], "answers": [{"comments": [{"owner": {"reputation": 17135, "user_id": 581190, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/a503f14866aaa083332c81264860ac8e?s=128&d=identicon&r=PG", "display_name": "zrzka", "link": "https://stackoverflow.com/users/581190/zrzka"}, "edited": false, "score": 0, "creation_date": 1568621475, "post_id": 57944888, "comment_id": 102317623, "body": "Yes, <i>pure convenience</i>, but I&#39;d say recommended. Not for adding additional fields, but imagine you&#39;d like to swap two fields for example, remove them, etc."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 17135, "user_id": 581190, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/a503f14866aaa083332c81264860ac8e?s=128&d=identicon&r=PG", "display_name": "zrzka", "link": "https://stackoverflow.com/users/581190/zrzka"}, "edited": false, "score": 1, "creation_date": 1568621579, "post_id": 57944888, "comment_id": 102317674, "body": "&quot;Adding&quot; is loosely interepreted as modifying, really. I&#39;ll edit the answer to make that obvious. Levenshtein is fun, they said :-)"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 6, "last_activity_date": 1568622858, "last_edit_date": 1568622858, "creation_date": 1568556549, "answer_id": 57944888, "question_id": 57944839, "link": "https://stackoverflow.com/questions/57944839/is-the-final-comma-in-rust-struct-definitions-necessary/57944888#57944888", "title": "Is the final comma in Rust struct definitions necessary?", "body": "<p>The last comma is purely optional in <code>struct</code> definitions. This is pure convenience; it allows you to leave that trailing comma in, so you do not have to go back and modify a line if you add an additional field, delete a field or change their order.</p>\n\n<p>It also, coincidentally, makes code generation from macros easier, as your codegen macro no longer has to care about keeping track of whether you are on the last generated field.</p>\n\n<p>The <strong>one time</strong> when you'll see a trailing comma being mandatory is in macros like the <code>diesel</code> <a href=\"https://docs.diesel.rs/diesel/macro.table.html\" rel=\"nofollow noreferrer\"><code>table!</code></a> macro, and the reason is down to the <a href=\"https://docs.diesel.rs/src/diesel/macros/mod.rs.html#459\" rel=\"nofollow noreferrer\">macro invocation structure</a> chosen by the <code>diesel</code> developers.</p>\n"}, {"tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": false, "score": 0, "last_activity_date": 1568559002, "last_edit_date": 1592644375, "creation_date": 1568556702, "answer_id": 57944916, "question_id": 57944839, "link": "https://stackoverflow.com/questions/57944839/is-the-final-comma-in-rust-struct-definitions-necessary/57944916#57944916", "title": "Is the final comma in Rust struct definitions necessary?", "body": "<p>Have to say that you are an acute observer. They are equivalent according to <a href=\"https://doc.rust-lang.org/stable/reference/items/structs.html\" rel=\"nofollow noreferrer\">rust reference</a>:</p>\n<blockquote>\n<p>StructFields :</p>\n<p>StructField (, StructField)* ,?</p>\n</blockquote>\n<p>It is that way for convenience reason: be able to add or remove lines without touching previous ones.</p>\n<p>Here's a counter-example. In languages that don't have such convenience, people may choose to format the code in unusual ways to achieve virtually the same, such as:</p>\n<pre class=\"lang-hs prettyprint-override\"><code>data Person = Person\n    { firstName :: String\n    , lastName  :: String\n    , age       :: Int\n    } \n</code></pre>\n<p>I like an optional trailing comma more.</p>\n"}], "owner": {"reputation": 189, "user_id": 11342925, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-OhfoTlzRIqE/AAAAAAAAAAI/AAAAAAAAAAA/ABtNlbBK5JrK8tagNaecsQ9INaeaEhhKvQ/mo/photo.jpg?sz=128", "display_name": "fresh", "link": "https://stackoverflow.com/users/11342925/fresh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 397, "favorite_count": 0, "accepted_answer_id": 57944888, "answer_count": 2, "score": 1, "last_activity_date": 1593027538, "creation_date": 1568556216, "last_edit_date": 1593027538, "question_id": 57944839, "link": "https://stackoverflow.com/questions/57944839/is-the-final-comma-in-rust-struct-definitions-necessary", "title": "Is the final comma in Rust struct definitions necessary?", "body": "<p>Consider the following code:</p>\n<pre><code>struct User {\n    user: String,\n    email: String,\n}\n</code></pre>\n<p>The compiler doesn't complain about it. The trailing comma after the <code>email</code> field struck me as odd, so I tried this:</p>\n<pre><code>struct User {\n    user: String,\n    email: String // no comma\n}\n</code></pre>\n<p>The compiler still doesn't complain. Is there a difference or are the two scenarios completely equivalent?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2892, "user_id": 391691, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vCKhh.jpg?s=128&g=1", "display_name": "Simson", "link": "https://stackoverflow.com/users/391691/simson"}, "edited": false, "score": 0, "creation_date": 1568555270, "post_id": 57944423, "comment_id": 102303170, "body": "Interesting question, try to write a test program and measure if you can observe any performance impacts. My guess would be if debug prints are an performance issue for a project you would remove all of them."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 3, "creation_date": 1568555406, "post_id": 57944423, "comment_id": 102303199, "body": "The purpose of both are not the same, they do not return the same values; you&#39;re comparing apples and oranges"}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1568556153, "post_id": 57944423, "comment_id": 102303369, "body": "Depends on why you&#39;re printing the paths. If you want to pipe them to other commands you probably should write the raw bytes to stdout since paths can contain non-unicode byte sequences."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 1, "creation_date": 1568561597, "post_id": 57944423, "comment_id": 102304666, "body": "@the8472 They do not print the same thing. In particular, <code>Debug</code> (<code>{:?}</code> in prints) wraps everything it prints that isn&#39;t a language construct in quotes."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568583858, "post_id": 57944423, "comment_id": 102309676, "body": "@S&#233;bastienRenauld I said nothing about using <code>Debug</code>. I said <i>write the raw bytes</i>. This requires platform-specific code: <a href=\"https://doc.rust-lang.org/std/ffi/index.html#conversions\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/ffi/index.html#conversions</a>"}], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 3, "last_activity_date": 1568555736, "last_edit_date": 1568555736, "creation_date": 1568554572, "answer_id": 57944621, "question_id": 57944423, "link": "https://stackoverflow.com/questions/57944423/in-rust-should-i-prefer-path-display-over-debug-formatting-trait/57944621#57944621", "title": "In Rust should I prefer path.display() over debug {:?} formatting trait?", "body": "<p><a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.display\" rel=\"nofollow noreferrer\">As explained in the documentation</a>, <code>Path::display</code> is for safely printing paths that may contain non-Unicode data.</p>\n\n<p><code>Debug</code> preserves those characters, but is not meant to be presented to the end-user. Also, <code>Debug</code> surrounds the path with quotes.</p>\n\n<p>For example on Linux:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::path::Path;\nuse std::os::unix::ffi::OsStrExt;\nuse std::ffi::OsStr;\n\nfn main() {\n    let path = OsStr::from_bytes(b\"./foo/bar\\xff.txt\");\n    let path = Path::new(path);\n\n    println!(\"{}\", path.display()); // ./foo/bar\ufffd.txt\n    println!(\"{:?}\", path); // \"./foo/bar\\xFF.txt\"\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=284e39d6f0a67ccfb40ba76da3a58041\" rel=\"nofollow noreferrer\">Permalink to the playground</a>)</p>\n"}], "owner": {"reputation": 387, "user_id": 6186709, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/G5lWJ.png?s=128&g=1", "display_name": "I60R", "link": "https://stackoverflow.com/users/6186709/i60r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "accepted_answer_id": 57944621, "answer_count": 1, "score": 0, "last_activity_date": 1568555736, "creation_date": 1568553060, "question_id": 57944423, "link": "https://stackoverflow.com/questions/57944423/in-rust-should-i-prefer-path-display-over-debug-formatting-trait", "title": "In Rust should I prefer path.display() over debug {:?} formatting trait?", "body": "<p>Is there any performance hit when using the first? </p>\n\n<p>Is it possible that some characters will be displayed improperly when using the second?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568547190, "post_id": 57943669, "comment_id": 102301449, "body": "<code>FnBox</code> was removed in rust 1.35. The playground&#39;s nightly (and most likely yours) runs on 1.39. Can you check your rust version using <code>rustc -V</code> and confirm it is &lt; 1.35?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568547732, "post_id": 57943669, "comment_id": 102301527, "body": "@S&#233;bastienRenauld actually it was removed in 1.37 and <a href=\"https://doc.rust-lang.org/1.36.0/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\">was still present in 1.36</a>."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568547778, "post_id": 57943669, "comment_id": 102301540, "body": "Correct, it was deprecated in 1.35. I was following the commit history rather than the release notes"}], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 6, "last_activity_date": 1568548255, "last_edit_date": 1568548255, "creation_date": 1568547417, "answer_id": 57943728, "question_id": 57943669, "link": "https://stackoverflow.com/questions/57943669/fnbox-example-throws-error-no-fnbox-in-boxed/57943728#57943728", "title": "FnBox example throws error: no FnBox in boxed?", "body": "<p><code>FnBox</code> was never stabilized. It was more of a hack used when you wanted a <code>Box&lt;dyn FnOnce()&gt;</code> but this type didn't used to implement <code>FnOnce</code> itself.</p>\n\n<p>Because <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#language-2\" rel=\"noreferrer\"><code>Box&lt;dyn FnOnce()&gt;</code> implements <code>FnOnce</code> since Rust 1.35</a>, <code>FnBox</code> has been removed in Rust 1.37.</p>\n\n<p>All usages of <code>Box&lt;FnBox&lt;_&gt;&gt;</code> can be replaced by <code>Box&lt;FnOnce&lt;_&gt;&gt;</code>, for example the old documentation example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\n\nfn make_map() -&gt; HashMap&lt;i32, Box&lt;dyn FnOnce() -&gt; i32&gt;&gt; {\n    let mut map: HashMap&lt;i32, Box&lt;dyn FnOnce() -&gt; i32&gt;&gt; = HashMap::new();\n    map.insert(1, Box::new(|| 22));\n    map.insert(2, Box::new(|| 44));\n    map\n}\n\nfn main() {\n    let mut map = make_map();\n    for i in &amp;[1, 2] {\n        let f = map.remove(&amp;i).unwrap();\n        assert_eq!(f(), i * 22);\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=24b55c38ddc36dab1b70d4a9082fec38\" rel=\"noreferrer\">Permalink to playground</a>)</p>\n"}], "owner": {"reputation": 379, "user_id": 6676972, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-TotvU8qdfQA/AAAAAAAAAAI/AAAAAAAAABE/-Kg59N1l4D8/photo.jpg?sz=128", "display_name": "\u8042\u5c0f\u6d9b", "link": "https://stackoverflow.com/users/6676972/%e8%81%82%e5%b0%8f%e6%b6%9b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 396, "favorite_count": 0, "accepted_answer_id": 57943728, "answer_count": 1, "score": 2, "last_activity_date": 1593024363, "creation_date": 1568546873, "last_edit_date": 1593024363, "question_id": 57943669, "link": "https://stackoverflow.com/questions/57943669/fnbox-example-throws-error-no-fnbox-in-boxed", "title": "FnBox example throws error: no FnBox in boxed?", "body": "<p>I tried to run the <code>FnBox</code> example from the <a href=\"https://doc.rust-lang.org/1.27.0/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\">official docs</a> but it throws an error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0432]: unresolved import `std::boxed::FnBox`\n --&gt; src/main.rs:4:5\n  |\n4 | use std::boxed::FnBox;\n  |     ^^^^^^^^^^^^^^^^^ no `FnBox` in `boxed`\n</code></pre>\n<p>It's easy to get this error using the rust <a href=\"https://play.rust-lang.org/?version=nightly\" rel=\"nofollow noreferrer\">playground</a>, and I got the same error locally.</p>\n<p>Actually I found some declarations from std locally:</p>\n<pre><code>#[rustc_paren_sugar]\n#[unstable(feature = &quot;fnbox&quot;,\n           reason = &quot;will be deprecated if and when `Box&lt;FnOnce&gt;` becomes usable&quot;, issue = &quot;28796&quot;)]\npub trait FnBox&lt;A&gt;: FnOnce&lt;A&gt; {\n    /// Performs the call operation.\n    fn call_box(self: Box&lt;Self&gt;, args: A) -&gt; Self::Output;\n}\n\n#[unstable(feature = &quot;fnbox&quot;,\n           reason = &quot;will be deprecated if and when `Box&lt;FnOnce&gt;` becomes usable&quot;, issue = &quot;28796&quot;)]\nimpl&lt;A, F&gt; FnBox&lt;A&gt; for F\n    where F: FnOnce&lt;A&gt;\n{\n    fn call_box(self: Box&lt;F&gt;, args: A) -&gt; F::Output {\n        self.call_once(args)\n    }\n}\n</code></pre>\n<p>But there's still an error.</p>\n"}, {"tags": ["function", "generics", "rust"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568546940, "post_id": 57943635, "comment_id": 102301407, "body": "We&#39;re going to need more code than this. We don&#39;t have the definition of <code>Basic0123</code>, let alone its implementation; we don&#39;t have the definition of that <code>U128</code> type of yours, you haven&#39;t even told us what the error <b>actually is</b>!"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568547030, "post_id": 57943635, "comment_id": 102301426, "body": "If you would like some concrete help, please create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">MCVE</a> using the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust playground</a> replicating your problem. This isn&#39;t just for clarity, a ton of problems get solved by changing the context of code from the problem you&#39;re facing, to a simplified version of the same problem"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 3, "creation_date": 1568547566, "post_id": 57943635, "comment_id": 102301502, "body": "Finally, I&#39;m not entirely sure why you implemented a <code>U128</code> yourself since <a href=\"https://doc.rust-lang.org/std/primitive.u128.html\" rel=\"nofollow noreferrer\">it exists in <code>std</code> since rust 1.26</a>"}, {"owner": {"reputation": 103, "user_id": 10159779, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hdhfJPv3zvg/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rAcXnTGvATJegVIrEDkSEZnjoipw/mo/photo.jpg?sz=128", "display_name": "Youness Kafia", "link": "https://stackoverflow.com/users/10159779/youness-kafia"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568555043, "post_id": 57943635, "comment_id": 102303108, "body": "I didn&#39;t know u128 existsed in the std. I&#39;m quite new to rust and stack overflow, i take note to the lack of informations and will do my best the next time i ask a question. :)"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568555180, "post_id": 57943635, "comment_id": 102303144, "body": "It wasn&#39;t meant as a telling-off, just as pointers to let people help you faster and more effectively :-) for the integer types (and others), they&#39;re all under <a href=\"https://doc.rust-lang.org/book/ch03-02-data-types.html\" rel=\"nofollow noreferrer\">data types</a>. The main caveat is that pretty much everything exists up to 128-bit size except floats, for IEEE-related reasons"}, {"owner": {"reputation": 103, "user_id": 10159779, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hdhfJPv3zvg/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rAcXnTGvATJegVIrEDkSEZnjoipw/mo/photo.jpg?sz=128", "display_name": "Youness Kafia", "link": "https://stackoverflow.com/users/10159779/youness-kafia"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568558433, "post_id": 57943635, "comment_id": 102303928, "body": "No worries, thank you for your fast answer, I got to understand how things work a bit more!"}], "answers": [{"tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": false, "score": 2, "last_activity_date": 1568550423, "creation_date": 1568550423, "answer_id": 57944087, "question_id": 57943635, "link": "https://stackoverflow.com/questions/57943635/how-to-use-generics-in-functions-and-pattern-matching-in-rust/57944087#57944087", "title": "how to use Generics in functions and pattern matching in rust?", "body": "<p>I'm just going to assume most of the stuff in the comments has been dealt with and you're back to using the <code>std::u128</code> primitive type rather than your own.</p>\n\n<p>The proper way to implement the Syracuse conjecture on a generic type is as follows:</p>\n\n<pre><code>fn syracuse&lt;T&gt;(n: T) -&gt; T\n    where T : Copy + Eq + Add&lt;Output = T&gt; + Mul&lt;Output = T&gt; + Div&lt;Output = T&gt; + Rem&lt;Output = T&gt; + From&lt;u32&gt; {\n\n    let zero:T = 0.into();\n    match n % 2.into() == zero {\n        true =&gt; n/(2.into()),\n        false =&gt; n * (3.into()) + 1.into()\n    }\n}\n</code></pre>\n\n<p>In order of appearance:</p>\n\n<ul>\n<li><code>Copy</code> is required because we did not require <code>Rem</code> on <code>&amp;T</code>, but on <code>T</code></li>\n<li>All the <code>Output</code> type specifications are so we do not implicitly change type - an operation on <code>T</code> will always map to <code>T</code></li>\n<li>We are requiring <code>Eq</code> so we can compare the result of the remainder</li>\n<li>We are requiring <code>From&lt;u32&gt;</code> so we can <code>into()</code> every single numerical constant</li>\n</ul>\n\n<p>A working version can be found <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=67da13b80736c0ba674bab8356c1272a\" rel=\"nofollow noreferrer\">here</a></p>\n"}], "owner": {"reputation": 103, "user_id": 10159779, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hdhfJPv3zvg/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7rAcXnTGvATJegVIrEDkSEZnjoipw/mo/photo.jpg?sz=128", "display_name": "Youness Kafia", "link": "https://stackoverflow.com/users/10159779/youness-kafia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1568550423, "creation_date": 1568546592, "question_id": 57943635, "link": "https://stackoverflow.com/questions/57943635/how-to-use-generics-in-functions-and-pattern-matching-in-rust", "title": "how to use Generics in functions and pattern matching in rust?", "body": "<p>I'm solving a little math problem called the Syracuse problem (3n+1 problem).</p>\n\n<p>Thing is i want my function to work for 2 types, one is u64 the other is a struct that extends the size of u64 by containing 2 u64 that i called U128.</p>\n\n<p>my u64 function looks like this</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn syracuse(n: u64) -&gt; u64 {\n    match n % 2 {\n        0 =&gt; n / 2,\n        1 =&gt; 3 * n + 1,\n        _ =&gt; 1,\n    }\n}\n</code></pre>\n\n<p>I've tried implementing a trait to my U128 and u64.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn syracuse&lt;T&gt;(n: T) -&gt; T where T : Add +Mul+Div+Rem + Basic0123 {\n    match n % Basic0123::two() {\n        Basic0123::zero() =&gt; n / Basic0123::two(),\n        Basic0123::one() =&gt; Basic0123::three() * n + Basic0123::one(),\n        _ =&gt; Basic0123::one(),\n    }\n}\n</code></pre>\n\n<p>It doesn't compile, the pattern matching doesn't like this. I'm new to rust and i'm trying to understand if creating a function with generic typing is okay for this problem that only treats 2 different types the DRY way or i should just stick with simply rewriting the function for the U128 type?</p>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1358, "user_id": 4454752, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e8273afa6aa2fb20caab5fe3b9c45ecd?s=128&d=identicon&r=PG&f=1", "display_name": "grahan", "link": "https://stackoverflow.com/users/4454752/grahan"}, "edited": false, "score": 0, "creation_date": 1568543939, "post_id": 57942993, "comment_id": 102300782, "body": "Thanks a lot for your very comprehensive answer and explanation. Now everything makes much more sense. Does this also works for converting errors in <code>ok_or</code> ?"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 1358, "user_id": 4454752, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e8273afa6aa2fb20caab5fe3b9c45ecd?s=128&d=identicon&r=PG&f=1", "display_name": "grahan", "link": "https://stackoverflow.com/users/4454752/grahan"}, "edited": false, "score": 0, "creation_date": 1568544285, "post_id": 57942993, "comment_id": 102300848, "body": "It works whenever the compiler expects (due to types) your custom error type but starts off with something different - it checks if it can convert."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 2, "last_activity_date": 1568541305, "creation_date": 1568541305, "answer_id": 57942993, "question_id": 57942901, "link": "https://stackoverflow.com/questions/57942901/how-to-implement-from-trait-for-custom-error-types/57942993#57942993", "title": "How to implement From trait for custom error types?", "body": "<p>You've mixed up a whole bunch of concepts; let's see if we can walk through this together and hopefully clarify all of it.</p>\n\n<p>The <code>git2</code> crate has its own error type, that you no doubt have discovered. Your definition of custom errors is fine as well.</p>\n\n<p>The issue is twofold:</p>\n\n<ol>\n<li><strong>Your implementation of <code>From&lt;_&gt;</code></strong></li>\n</ol>\n\n<p><code>From&lt;E&gt;</code> allows you to transform a type from one type to another by providing the translation function (<code>from()</code>).</p>\n\n<p>Your implementation of this was the following:</p>\n\n<pre><code>impl From&lt;(git2::Error)&gt; for CustomError {\n    fn from(cause: git2::Error) -&gt; Self {\n        CustomError::Git(cause)\n    }\n}\n</code></pre>\n\n<p>Brackets in <code>rust</code> aren't added where they should not be, and this is precisely one of the cases where this is the case. By doing this, you've actually defined <code>From&lt;(T)&gt;</code>, not <code>From&lt;T&gt;</code>. That's mistake #1.</p>\n\n<p>The correct implementation simply drops the brackets:</p>\n\n<pre><code>impl From&lt;git2::Error&gt; for CustomError {\n    fn from(cause) -&gt; Self {\n        CustomError::Git(cause)\n    }\n}\n</code></pre>\n\n<ol start=\"2\">\n<li><strong>Your actual conversion</strong></li>\n</ol>\n\n<p>Not an error per se, but a completely unnecessary operation as the <code>?</code> operator handles it for you. There is no need for the <code>map_err()</code>, and if there was you'd be using <code>into()</code> rather than hard-calling the type (which should already be defined as a type in your function).</p>\n\n<p>Remember, the whole point of conversion traits is to define them <em>so you don't have to explicitly call them</em>.</p>\n\n<p>A final \"demo\" version of the code in working order could look like this:</p>\n\n<pre><code>extern crate git2;\nuse git2::Repository;\n\n#[derive(Debug)] // Allow the use of \"{:?}\" format specifier\npub enum CustomError {\n    Git(git2::Error),\n    Other\n}\nimpl From&lt;(git2::Error)&gt; for CustomError {\n    fn from(cause: git2::Error) -&gt; Self {\n        CustomError::Git(cause)\n    }\n}\nfn test() -&gt; Result&lt;(), CustomError&gt; {\n    let path = \"foo\";\n    let output = Repository::open(path)?;\n    Ok(())\n}\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n"}], "owner": {"reputation": 1358, "user_id": 4454752, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e8273afa6aa2fb20caab5fe3b9c45ecd?s=128&d=identicon&r=PG&f=1", "display_name": "grahan", "link": "https://stackoverflow.com/users/4454752/grahan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 0, "accepted_answer_id": 57942993, "answer_count": 1, "score": 0, "last_activity_date": 1568541305, "creation_date": 1568540624, "question_id": 57942901, "link": "https://stackoverflow.com/questions/57942901/how-to-implement-from-trait-for-custom-error-types", "title": "How to implement From trait for custom error types?", "body": "<p>I am currently trying to write a custom error type for my CLI application. Now I want to write an implementation of the <code>From</code> trait so my custom error type can wrap all third party library errors that can occur. </p>\n\n<p>The error enum:</p>\n\n<pre><code>#[derive(Debug)] // Allow the use of \"{:?}\" format specifier\npub enum CustomError {\n    Git(git2::Error),\n    Other\n}\n</code></pre>\n\n<p>Now I want to implement the <code>From</code> Trait for the <code>git2::Error</code> from the <code>git2</code> library to use the <code>?</code> operator in my functions.</p>\n\n<pre><code>impl From&lt;(git2::Error)&gt; for CustomError {\n    fn from(cause: git2::Error) -&gt; Self {\n        CustomError::Git(cause)\n    }\n}\n</code></pre>\n\n<p>But when I try to use my custom error to map an error like this:</p>\n\n<pre><code>let repo = Repository::open(path).map_err(|err| CustomError::Git)?;\n</code></pre>\n\n<p>I am getting the following error message:</p>\n\n<pre><code>the trait `std::convert::From&lt;fn(git2::error::Error) -&gt; error::CustomError {error::CustomError::Git}&gt;` is not implemented for `error::CustomError `\n</code></pre>\n\n<p>Can anyone help me to understand why I am getting this error and how to solve this problem ?</p>\n\n<p>Any help is appreciated</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568536894, "post_id": 57942415, "comment_id": 102299487, "body": "Visual studio isn&#39;t enough, you also need the entire MSVC C/C++ toolchain if memory serves me right."}, {"owner": {"reputation": 1481, "user_id": 11915854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34b4ba370c4dc9583ed1de5f778e118b?s=128&d=identicon&r=PG&f=1", "display_name": "Sid", "link": "https://stackoverflow.com/users/11915854/sid"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568536929, "post_id": 57942415, "comment_id": 102299493, "body": "Thanks, where can I get this?"}, {"owner": {"reputation": 1481, "user_id": 11915854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34b4ba370c4dc9583ed1de5f778e118b?s=128&d=identicon&r=PG&f=1", "display_name": "Sid", "link": "https://stackoverflow.com/users/11915854/sid"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568536957, "post_id": 57942415, "comment_id": 102299498, "body": "I did select the Visual C++ option while downloading."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 1, "creation_date": 1568537086, "post_id": 57942415, "comment_id": 102299524, "body": "<a href=\"https://github.com/rust-lang/rustup.rs/issues/1455\" rel=\"nofollow noreferrer\">This</a> is your exact issue along with resolution steps. make sure your path was updated after installing the build tools (I.e. don&#39;t use an old shell opened before installation), make sure link.exe is in your path and you should be good"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1568633115, "post_id": 57942415, "comment_id": 102323567, "body": "You shouldn&#39;t be trying to use <code>rustc</code> directly. Install <a href=\"https://rustup.rs/\" rel=\"nofollow noreferrer\">rustup</a> and then do everything using cargo. It should all just work."}, {"owner": {"reputation": 1481, "user_id": 11915854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34b4ba370c4dc9583ed1de5f778e118b?s=128&d=identicon&r=PG&f=1", "display_name": "Sid", "link": "https://stackoverflow.com/users/11915854/sid"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1569162409, "post_id": 57942415, "comment_id": 102498527, "body": "@S&#233;bastienRenauld, thanks for the help. I updated the path but I get the error as mentioned in the updated question."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1569164545, "post_id": 57942415, "comment_id": 102499068, "body": "@Sid and now this is your problem: <a href=\"https://github.com/rust-lang/rust/issues/43039#issuecomment-317237291\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/43039#issuecomment-31723729&zwnj;&#8203;1</a> with solution in there. there&#39;s a reason rustup is recommended."}, {"owner": {"reputation": 11963, "user_id": 2707864, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/LYdpu.png?s=128&g=1", "display_name": "sancho.s ReinstateMonicaCellio", "link": "https://stackoverflow.com/users/2707864/sancho-s-reinstatemonicacellio"}, "edited": false, "score": 0, "creation_date": 1571991492, "post_id": 57942415, "comment_id": 103428988, "body": "@Sid - Did you find any answer useful? It is good to provide feedback. Thanks."}, {"owner": {"reputation": 1481, "user_id": 11915854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34b4ba370c4dc9583ed1de5f778e118b?s=128&d=identicon&r=PG&f=1", "display_name": "Sid", "link": "https://stackoverflow.com/users/11915854/sid"}, "reply_to_user": {"reputation": 11963, "user_id": 2707864, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/LYdpu.png?s=128&g=1", "display_name": "sancho.s ReinstateMonicaCellio", "link": "https://stackoverflow.com/users/2707864/sancho-s-reinstatemonicacellio"}, "edited": false, "score": 0, "creation_date": 1571992525, "post_id": 57942415, "comment_id": 103429429, "body": "@sancho.s I had actually accepted an answer and given it a bounty as well. For some reason it has been deleted."}, {"owner": {"reputation": 11963, "user_id": 2707864, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/LYdpu.png?s=128&g=1", "display_name": "sancho.s ReinstateMonicaCellio", "link": "https://stackoverflow.com/users/2707864/sancho-s-reinstatemonicacellio"}, "edited": false, "score": 0, "creation_date": 1571992803, "post_id": 57942415, "comment_id": 103429563, "body": "@Sid - Hmmm, strange."}], "answers": [{"tags": [], "owner": {"reputation": 11963, "user_id": 2707864, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/LYdpu.png?s=128&g=1", "display_name": "sancho.s ReinstateMonicaCellio", "link": "https://stackoverflow.com/users/2707864/sancho-s-reinstatemonicacellio"}, "is_accepted": false, "score": 1, "last_activity_date": 1569618615, "creation_date": 1569618615, "answer_id": 58141365, "question_id": 57942415, "link": "https://stackoverflow.com/questions/57942415/cant-compile-rust-program/58141365#58141365", "title": "Can&#39;t compile rust program", "body": "<p><a href=\"https://github.com/rust-lang/rust/issues/51659\" rel=\"nofollow noreferrer\">This</a> reports your exact problem.\nSo the solution seems to use VS installer and installing C++ for Desktop Module.</p>\n\n<p>Use of <code>rustup</code> is a matter of convenience but shouldn't be mandatory.</p>\n"}], "owner": {"reputation": 1481, "user_id": 11915854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34b4ba370c4dc9583ed1de5f778e118b?s=128&d=identicon&r=PG&f=1", "display_name": "Sid", "link": "https://stackoverflow.com/users/11915854/sid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 681, "favorite_count": 1, "answer_count": 1, "score": 8, "last_activity_date": 1569767208, "creation_date": 1568536356, "last_edit_date": 1569162314, "question_id": 57942415, "link": "https://stackoverflow.com/questions/57942415/cant-compile-rust-program", "title": "Can&#39;t compile rust program", "body": "<p>I'm new to rust and  made a simple rust program(hello world). I installed rust and Visual Studio from here - <a href=\"https://visualstudio.microsoft.com/downloads/\" rel=\"noreferrer\">https://visualstudio.microsoft.com/downloads/</a> and restarted the device. However when I type in <code>rustc &lt;path&gt;</code> on command prompt, I get:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>error: linker `link.exe` not found\n  |\n  = note: The system cannot find the file specified. (os error 2)\n\nnote: the msvc targets depend on the msvc linker but `link.exe` was not found\n\nnote: please ensure that VS 2013, VS 2015 or VS 2017 was installed with the Visual C++ option\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>What's wrong?</p>\n\n<p><strong>Update</strong></p>\n\n<p>I updated my system path to include <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.22.27905\\bin\\Hostx64\\x64</code>, but now it gives this error:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>error: linking with `link.exe` failed: exit code: 1181\n  |\n  = note: \"link.exe\" \"/NOLOGO\" \"/NXCOMPAT\" \"/LIBPATH:C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"main.main.7rcbfp3g-cgu.0.rcgu.o\" \"main.main.7rcbfp3g-cgu.1.rcgu.o\" \"main.main.7rcbfp3g-cgu.2.rcgu.o\" \"main.main.7rcbfp3g-cgu.3.rcgu.o\" \"main.main.7rcbfp3g-cgu.4.rcgu.o\" \"main.main.7rcbfp3g-cgu.5.rcgu.o\" \"/OUT:main.exe\" \"main.4s37gsrti678ik8u.rcgu.o\" \"/OPT:REF,NOICF\" \"/DEBUG\" \"/NATVIS:C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\etc\\\\intrinsic.natvis\" \"/NATVIS:C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\etc\\\\liballoc.natvis\" \"/NATVIS:C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\etc\\\\libcore.natvis\" \"/LIBPATH:C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libstd-b2f27b8d08c4688f.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libpanic_unwind-9c73c9c2e052b2f1.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libbacktrace-7a588e8fa018f6bc.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\librustc_demangle-74b71f441b8acffe.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libhashbrown-42efce06651eab9c.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\librustc_std_workspace_alloc-7518db6030684168.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libunwind-f7edde5930d50b47.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcfg_if-30189c8e78e151e8.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liblibc-5f5719f1cab83a12.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\liballoc-f297c401e81b90c6.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\librustc_std_workspace_core-f8c80c1aefab6a32.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcore-6d66b6e58725d3ed.rlib\" \"C:\\\\Users\\\\Sid\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-msvc\\\\lib\\\\rustlib\\\\x86_64-pc-windows-msvc\\\\lib\\\\libcompiler_builtins-1f6a73e107798f53.rlib\" \"advapi32.lib\" \"ws2_32.lib\" \"userenv.lib\" \"msvcrt.lib\"\n  = note: LINK : fatal error LNK1181: cannot open input file 'advapi32.lib'\n\n\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["python", "rust"], "comments": [{"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1568524924, "post_id": 57941377, "comment_id": 102297610, "body": "This just means python is good at executing simple code."}, {"owner": {"reputation": 176, "user_id": 11152289, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Y. P", "link": "https://stackoverflow.com/users/11152289/y-p"}, "reply_to_user": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1568526681, "post_id": 57941377, "comment_id": 102297834, "body": "Oh, I understood. if I introduced for loop, the rust extension was speedy, thanks."}], "answers": [{"tags": [], "owner": {"reputation": 176, "user_id": 11152289, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Y. P", "link": "https://stackoverflow.com/users/11152289/y-p"}, "is_accepted": false, "score": -1, "last_activity_date": 1568526793, "creation_date": 1568526793, "answer_id": 57941518, "question_id": 57941377, "link": "https://stackoverflow.com/questions/57941377/speed-does-not-improve-with-python-extension-with-pyo3/57941518#57941518", "title": "Speed does not improve with python extension with pyo3", "body": "<p>As SOFe said, in simple code, the difference between pure python and rust extension is ignoble. When I put for loop in my code, the performance was high in extension with rust.</p>\n"}], "owner": {"reputation": 176, "user_id": 11152289, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Y. P", "link": "https://stackoverflow.com/users/11152289/y-p"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 98, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1568526793, "creation_date": 1568524675, "question_id": 57941377, "link": "https://stackoverflow.com/questions/57941377/speed-does-not-improve-with-python-extension-with-pyo3", "title": "Speed does not improve with python extension with pyo3", "body": "<h2>My Environment</h2>\n\n<ul>\n<li>Ubuntu 18.04</li>\n<li>Rust 1.36.0 (nightly)</li>\n<li>Python 3.7.3</li>\n</ul>\n\n<h2>Problem</h2>\n\n<p>I want to write a python extension with Rust. I used PyO3 as follows,</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use pyo3::prelude::*;\n\n\n#[pymodule(example)]\nfn rust2py(py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {\n     #[pyfn(m, \"fib\")]\n     fn fib(_py: Python, n:i64) -&gt; PyResult&lt;i64&gt; {\n         let out = fib_rust(n);\n         Ok(out)\n     }\n\n     Ok(())\n}\n\n\nfn fib_rust(n: i64) -&gt; i64 {\n      if n == 1 || n == 2 {\n          return 1\n      }\n\n      fib_rust(n - 1) + fib_rust(n - 2)\n}\n</code></pre>\n\n<p>I compared the speed of calculating Fibonacci sequence between extension with rust and pure python. I built this program as</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>cargo build --release\n</code></pre>\n\n<p>and copied <code>.so</code> file in current directory. I measured the elapsed time with time library in python, but that was almost same between extension and pure python.</p>\n\n<p>What is wrong in this program.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 374, "user_id": 11013589, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-SjzgI1NBqHE/AAAAAAAAAAI/AAAAAAAAAFE/WfN1HD9az5g/photo.jpg?sz=128", "display_name": "Cutwow475", "link": "https://stackoverflow.com/users/11013589/cutwow475"}, "edited": false, "score": 0, "creation_date": 1568507756, "post_id": 57940266, "comment_id": 102295640, "body": "You might want to take a look at the <a href=\"https://stackoverflow.com/tour\">SO Tour</a> and read <a href=\"https://stackoverflow.com/help/how-to-ask\">How do I ask a good question?</a>. These two documents will help others answer your question quicker."}, {"owner": {"reputation": 12075, "user_id": 2241569, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QMrPS.jpg?s=128&g=1", "display_name": "Jussi Kukkonen", "link": "https://stackoverflow.com/users/2241569/jussi-kukkonen"}, "edited": false, "score": 0, "creation_date": 1568533546, "post_id": 57940266, "comment_id": 102298847, "body": "Have you read the split() documentation? The result you get is exactly as documented: The separators (&#39;+&#39;) are not included in the results and contiguous separators result in empty strings in the result."}], "answers": [{"tags": [], "owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "is_accepted": true, "score": 0, "last_activity_date": 1568560211, "last_edit_date": 1568560211, "creation_date": 1568559767, "answer_id": 57945333, "question_id": 57940266, "link": "https://stackoverflow.com/questions/57940266/why-after-split-i-got-an-empty-str/57945333#57945333", "title": "Why after .split() I got an empty &amp;str?", "body": "<p>I think you misunderstand what <code>split</code> does.</p>\n\n<p><code>split</code> looks for instances of the pattern you supply and returns the substrings <em>after</em> resp. <em>before</em> those patterns (i.e. <em>not</em> including the pattern). I.e. if you look for \"<code>+</code>\" in a string \"<code>++++</code>\", you can only get substrings since there are no actual characters between the \"<code>+</code>\". I.e. in this case you get 5 empty strings.</p>\n\n<p>That said: If you really want to generate the whole string and then subdivide it, you could try <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.split_at\" rel=\"nofollow noreferrer\"><code>split_at</code></a> (or others). However, depending on what you want to do, it may be easier to just generate the thing line by line.</p>\n"}], "owner": {"reputation": 366, "user_id": 11492659, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e61e264c1094508a0ae578af2fc03e6?s=128&d=identicon&r=PG&f=1", "display_name": "hzqelf", "link": "https://stackoverflow.com/users/11492659/hzqelf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "accepted_answer_id": 57945333, "answer_count": 1, "score": 0, "last_activity_date": 1568560211, "creation_date": 1568507595, "last_edit_date": 1568509586, "question_id": 57940266, "link": "https://stackoverflow.com/questions/57940266/why-after-split-i-got-an-empty-str", "title": "Why after .split() I got an empty &amp;str?", "body": "<p>I want to get a square generated by \"+\", and here is what I thought.</p>\n\n<ol>\n<li>write a function, and parameter n is side length.</li>\n<li>repeat \"+\" n*n times, than I can got all \"+\"</li>\n<li>split it by square's side, than I can got an array, which is made by the number of square's side.</li>\n<li>Then join \"\\n\" and to string.</li>\n</ol>\n\n<p>For example, n = 4, so I expect a 4x4 square back just like below as a string:</p>\n\n<pre><code>++++\n++++\n++++\n++++\n</code></pre>\n\n<p>Here is my code, after .split(), I got an empty array, I don't know why.</p>\n\n<pre><code>fn generate_square(n: i32) -&gt; String {\n    \"+\".repeat((n * n) as usize) //got all \"+\"\n        .split(&amp;*\"+\".repeat(n as usize)).collect::&lt;Vec&lt;&amp;str&gt;&gt;() //got empty, why?\n        .join(\"\\n\").trim_end().to_string()\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 523, "user_id": 10998312, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a629534f2e86430525c30c60a11d6a6?s=128&d=identicon&r=PG&f=1", "display_name": "KAction", "link": "https://stackoverflow.com/users/10998312/kaction"}, "edited": false, "score": 1, "creation_date": 1568505035, "post_id": 57939935, "comment_id": 102295354, "body": "Note, that <code>as_ptr()</code> method is unsafe: it is my responsibility to make sure that pointer is not used after string is dropped, borrow checker does not protect me here."}], "tags": [], "owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "is_accepted": true, "score": 0, "last_activity_date": 1568502628, "creation_date": 1568502628, "answer_id": 57939935, "question_id": 57939688, "link": "https://stackoverflow.com/questions/57939688/when-exactly-temporary-object-in-function-call-is-dropped-in-rust/57939935#57939935", "title": "When exactly temporary object in function call is dropped in Rust?", "body": "<p>In the <a href=\"https://doc.rust-lang.org/reference/expressions.html#temporary-lifetimes\" rel=\"nofollow noreferrer\">rust reference</a>, under 'Temporary Lifetimes', it says:</p>\n\n<blockquote>\n  <p>... the lifetime of temporary values is typically</p>\n  \n  <ul>\n  <li>the innermost enclosing statement; the tail expression of a block is considered part of the statement that encloses the block, or</li>\n  </ul>\n</blockquote>\n\n<p>The innermost enclosing statement in your case is the call to <code>bar(  )</code>. There are examples in the same section very similar to your case.</p>\n\n<p>The compiler would not have compiled your code if this were not the case.</p>\n"}], "owner": {"reputation": 523, "user_id": 10998312, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a629534f2e86430525c30c60a11d6a6?s=128&d=identicon&r=PG&f=1", "display_name": "KAction", "link": "https://stackoverflow.com/users/10998312/kaction"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 0, "accepted_answer_id": 57939935, "answer_count": 1, "score": 1, "last_activity_date": 1568502628, "creation_date": 1568499622, "question_id": 57939688, "link": "https://stackoverflow.com/questions/57939688/when-exactly-temporary-object-in-function-call-is-dropped-in-rust", "title": "When exactly temporary object in function call is dropped in Rust?", "body": "<p>What are scoping rules for temporary objects inside function call in Rust? What I actually interested in whether it is safe to do following:</p>\n\n<pre><code>fn foo() -&gt; CString { /* */ }\nfn bar(arg: *const libc::c_char) { /* */ }\n\nbar(foo().as_ptr())\n</code></pre>\n\n<p>I created minimal example, and it works as I want -- object is dropped after function call returns.</p>\n\n<pre><code>struct Bar {\n    pub x: u32\n}\n\nimpl Bar {\n    pub fn new(x: u32) -&gt; Self {\n        println!(\"New Bar made!\");\n        Bar { x }\n    }\n    pub fn extract(&amp;self) -&gt; u32{\n        self.x\n    }\n}\n\nimpl Drop for Bar {\n    fn drop(&amp;mut self) {\n        println!(\"Bar dropped!\");\n    }\n}\n\npub fn foo(arg: u32) {\n    println!(\"Function called with arg = {}\", arg);\n}\n\nfn main () {\n    foo(Bar::new(12).extract());\n}\n</code></pre>\n\n<p>Can I rely on this behaviour?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6165, "user_id": 102834, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/6afb1a1f7f5fc5fff8b898309c317945?s=128&d=identicon&r=PG", "display_name": "FireAphis", "link": "https://stackoverflow.com/users/102834/fireaphis"}, "edited": false, "score": 0, "creation_date": 1572298442, "post_id": 57937759, "comment_id": 103509915, "body": "Any chance you could add the definition of <code>list_files</code> function?"}], "answers": [{"tags": [], "owner": {"reputation": 275, "user_id": 11694170, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/GHN4u.jpg?s=128&g=1", "display_name": "miquels", "link": "https://stackoverflow.com/users/11694170/miquels"}, "is_accepted": true, "score": 0, "last_activity_date": 1568498334, "creation_date": 1568498334, "answer_id": 57939569, "question_id": 57937759, "link": "https://stackoverflow.com/questions/57937759/actix-web-pass-config-to-handlers/57939569#57939569", "title": "actix_web pass config to handlers", "body": "<p>It's because you have 2 levels of closures. The first one is the argument to HttpServer::new(), which is non-moving: it captures a reference to cfg, which you then try to move into the second closure, web::get().to().</p>\n\n<p>If you create a clone in the first closure, you can move that into the second, like this:</p>\n\n<pre><code>let cfg = Arc::new(read_config());\nlet server = HttpServer::new(|| {\n    let cfg = cfg.clone();\n    App::new()\n        .wrap(middleware::Logger::default())\n        .service(web::resource(\"/api/files\").route(web::get().to(move || {\n            list_files(cfg);\n        })))\n        .service(fs::Files::new(\"/\", \"client/public\").index_file(\"index.html\"))\n});\n</code></pre>\n"}], "owner": {"reputation": 281, "user_id": 5405354, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5a987b9748fdf6d084e4c204912d740b?s=128&d=identicon&r=PG&f=1", "display_name": "Rich", "link": "https://stackoverflow.com/users/5405354/rich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 174, "favorite_count": 0, "accepted_answer_id": 57939569, "answer_count": 1, "score": 1, "last_activity_date": 1568498334, "creation_date": 1568481952, "question_id": 57937759, "link": "https://stackoverflow.com/questions/57937759/actix-web-pass-config-to-handlers", "title": "actix_web pass config to handlers", "body": "<p>I'm writing an API server and want to read in a configuration file and pass that info to the request handlers. I'm having trouble getting Rust to allow that to happen.</p>\n\n<pre><code>let cfg = Arc::new(read_config());\nlet server = HttpServer::new(|| {\n    App::new()\n        .wrap(middleware::Logger::default())\n        .service(web::resource(\"/api/files\").route(web::get().to(move || {\n            list_files(cfg.clone());\n        })))\n        .service(fs::Files::new(\"/\", \"client/public\").index_file(\"index.html\"))\n});\n</code></pre>\n\n<p>The error I'm currently getting is</p>\n\n<pre><code>56 |       let cfg = Arc::new(read_config());\n   |           --- captured outer variable\n...\n60 |               .service(web::resource(\"/api/files\").route(web::get().to(move || {\n   |  ______________________________________________________________________^\n61 | |                 list_files(cfg.clone());\n62 | |             })))\n   | |_____________^ cannot move out of captured variable in an `Fn` closure\n</code></pre>\n\n<p>How should this be done? What's the correct way to pass a variable to a request handler?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1568481827, "post_id": 57937436, "comment_id": 102291258, "body": "It&#39;s not clear -- do you have many functions that all return <i>the same</i> type implementing <code>Fn(u32) -&gt; u32</code>, or many functions that all return <i>different</i> types (different closures) which all implement <code>Fn(u32) -&gt; u32</code>? I&#39;m guessing the second one?"}], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1568495839, "post_id": 57937836, "comment_id": 102293995, "body": "Aliasing an existential type is <i>quite</i> different from aliasing a trait, which is why I asked the OP for clarification in the question comments. Neither is necessarily incorrect, but your answer should at least mention that they do different things."}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1568509548, "post_id": 57937836, "comment_id": 102295862, "body": "@trentcl I&#39;ve clarified the difference. Thanks for letting me know. I&#39;d assumed that they were the same, but I guess not."}, {"owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 0, "creation_date": 1568640771, "post_id": 57937836, "comment_id": 102327789, "body": "I like the hack. Thanks!"}], "tags": [], "owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "is_accepted": true, "score": 10, "last_activity_date": 1604352285, "last_edit_date": 1604352285, "creation_date": 1568482638, "answer_id": 57937836, "question_id": 57937436, "link": "https://stackoverflow.com/questions/57937436/how-to-alias-an-impl-trait/57937836#57937836", "title": "How to alias an impl trait?", "body": "<p>You're exactly right. <code>impl X</code> requires <code>X</code> to be a trait, and it's impossible to have proper trait aliases until <a href=\"https://github.com/rust-lang/rust/issues/41517\" rel=\"nofollow noreferrer\">trait aliases</a> land. When that happens you'll be able to do this:</p>\n<pre><code>#![feature(trait_alias)]\n\ntrait X = Fn(u32) -&gt; u32;\n\nfn f() -&gt; impl X {\n    |x: u32| x\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c205d52442f27d01e8613fdc0eb33cee\" rel=\"nofollow noreferrer\">(playground)</a></p>\n<hr />\n<p>Alternatively, when <a href=\"https://github.com/rust-lang/rust/issues/63063\" rel=\"nofollow noreferrer\">Permit impl Trait in type aliases</a> lands, you'll be able to make <code>impl trait</code> a <em>type</em> alias. This is slightly different though. When we alias with <code>type X = impl Trait</code>, the compiler will ensure that every usage of <code>X</code> is actually the same concrete type. That would mean that, in your case, you wouldn't be able to use this with multiple different closures, since every closure has its own unique type.</p>\n<pre><code>#![feature(type_alias_impl_trait)]\n\ntype X = impl Fn(u32) -&gt; u32;\n\nfn f() -&gt; X {\n    |x: u32| x\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f5f06b2e828dd3f596d9317df69795fc\" rel=\"nofollow noreferrer\">(playground)</a></p>\n<p>However, this <em>won't compile</em>.</p>\n<pre><code>#![feature(type_alias_impl_trait)]\n\ntype X = impl Fn(u32) -&gt; u32;\n\nfn f() -&gt; X {\n    |x: u32| x\n}\n\n// Even a closure with exactly the same form has a different type.\nfn g() -&gt; X {\n    |x: u32| x\n}\n</code></pre>\n<p>The error is</p>\n<pre class=\"lang-none prettyprint-override\"><code>error: concrete type differs from previous defining opaque type use\n  --&gt; src/lib.rs:10:1\n   |\n10 | / fn g() -&gt; X {\n11 | |     |x: u32| x\n12 | | }\n   | |_^ expected `[closure@src/lib.rs:7:5: 7:15]`, got `[closure@src/lib.rs:11:5: 11:15]`\n   |\nnote: previous use here\n  --&gt; src/lib.rs:6:1\n   |\n6  | / fn f() -&gt; X {\n7  | |     |x: u32| x\n8  | | }\n   | |_^\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6e7cfb3e65efe635682fae1451671a3d\" rel=\"nofollow noreferrer\">(playground)</a></p>\n<p>This is in contrast to trait aliases, which would allow a different concrete type to be used with every function returning <code>impl TraitAlias</code>. See the RFCs that introduced <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2515-type_alias_impl_trait.md\" rel=\"nofollow noreferrer\">this syntax</a> and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2071-impl-trait-existential-types.md\" rel=\"nofollow noreferrer\">existential types in general</a> for more.</p>\n<hr />\n<p>Until one of those two features lands, you can get similar behavior to the trait alias with what is essentially a hack. The idea is to make a new trait which is essentially equivalent to the original trait, but has a shorter name.</p>\n<pre><code>// This trait is local to this crate,\n// so we can implement it on any type we want.\ntrait ShortName: Fn(u32) -&gt; u32 {}\n\n// So let's go ahead and implement `ShortName`\n// on any type that implements `Fn(u32) -&gt; u32`.\nimpl&lt;T: Fn(u32) -&gt; u32&gt; ShortName for T {}\n\n// We can use `ShortName` to alias `Fn(u32) -&gt; u32`.\nfn f() -&gt; impl ShortName {\n    |x: u32| x\n}\n\n// Moreover, the result of that can be used in places\n// that expect `Fn(u32) -&gt; u32`.\nfn g&lt;T: Fn(u32) -&gt; u32&gt;(x: &amp;T) -&gt; u32 {\n    x(6_u32)\n}\n\nfn main() {\n    // We only know that `x` implements `ShortName`,\n    let x = f();\n    // But we can still use `x` in `g`,\n    // which expects an `Fn(u32) -&gt; u32` argument\n    let _ = g(&amp;x);\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a77bb7beed4911bceb0cc60638121a9c\" rel=\"nofollow noreferrer\">(playground)</a></p>\n"}], "owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1080, "favorite_count": 1, "accepted_answer_id": 57937836, "answer_count": 1, "score": 6, "last_activity_date": 1604352302, "creation_date": 1568479118, "last_edit_date": 1604352302, "question_id": 57937436, "link": "https://stackoverflow.com/questions/57937436/how-to-alias-an-impl-trait", "title": "How to alias an impl trait?", "body": "<p>I have many functions of the following type signature:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn f() -&gt; impl Fn(u32) -&gt; u32 { \n    |x: u32| x \n}\n</code></pre>\n<p>How can I give a name to <code>Fn(u32) -&gt; u32</code> so that I don't have to repeat it? Although I can do <code>type X = Fn(u32) -&gt; u32;</code>, Rust will not let me use this because it is a type and not a trait. Must I wait for <a href=\"https://doc.rust-lang.org/unstable-book/language-features/trait-alias.html\" rel=\"nofollow noreferrer\"><code>trait_alias</code></a> or can I do something else?</p>\n"}, {"tags": ["python", "rust"], "answers": [{"comments": [{"owner": {"reputation": 176, "user_id": 11152289, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Y. P", "link": "https://stackoverflow.com/users/11152289/y-p"}, "edited": false, "score": 0, "creation_date": 1568475590, "post_id": 57936751, "comment_id": 102289751, "body": "Thank you! I tried newer version and succeeded in execution!"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 2, "last_activity_date": 1568473722, "creation_date": 1568473722, "answer_id": 57936751, "question_id": 57936617, "link": "https://stackoverflow.com/questions/57936617/error-no-py-in-the-root-when-i-build-python-library-with-pyo3-in-rust/57936751#57936751", "title": "Error &quot;no py in the root&quot; when I build python library with pyo3 in Rust", "body": "<p>There is <a href=\"https://docs.rs/pyo3/0.8.0/pyo3/\" rel=\"nofollow noreferrer\">no <code>mod</code> called <code>py</code></a> in the latest version of <code>pyo3</code>. You've landed on documentation or examples related to an old version of the library. The last version that had this <code>mod</code> was 0.2.7.</p>\n\n<p>If you have no interest other than running the code, set the version you require of <code>pyo3</code> in your <code>Cargo.toml</code> dependencies to <code>0.2.7</code> and it should compile out of the box (a cursory glance confirms that all symbols seem to exist in that version).</p>\n\n<p>If you want to actually investigate the newer version, <a href=\"https://pyo3.rs/v0.8.0/module.html\" rel=\"nofollow noreferrer\">the new documentation</a> has up to date examples.</p>\n"}], "owner": {"reputation": 176, "user_id": 11152289, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Y. P", "link": "https://stackoverflow.com/users/11152289/y-p"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 148, "favorite_count": 0, "accepted_answer_id": 57936751, "answer_count": 1, "score": 1, "last_activity_date": 1568473722, "creation_date": 1568472750, "question_id": 57936617, "link": "https://stackoverflow.com/questions/57936617/error-no-py-in-the-root-when-i-build-python-library-with-pyo3-in-rust", "title": "Error &quot;no py in the root&quot; when I build python library with pyo3 in Rust", "body": "<h2>My Environments</h2>\n\n<ul>\n<li>Ubuntu 18.04</li>\n<li>Rust 1.39.0-nightly</li>\n<li>Python 3.7.3</li>\n</ul>\n\n<h2>What I want to do and the problems</h2>\n\n<p>I want to write a library for python. As my practice, I tried the code in document.</p>\n\n<p>Cargo.toml</p>\n\n<pre><code>[package]\nname = \"example\"\nversion = \"0.1.0\"\nauthors = [\"Yudai Hayashi\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n[lib]\nname = \"example\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\n\n[dependencies.pyo3]\nversion = \"*\"\nfeatures = [\"extension-module\"]\n</code></pre>\n\n<p>src/lib.rs</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(proc_macro, specialization)]\n\nextern crate pyo3;\nuse pyo3::{py, PyResult, Python, PyModule};\n\nuse pyo3::py::modinit as pymodinit;\n\n// add bindings to the generated python module\n// N.B: names: \"librust2py\" must be the name of the `.so` or `.pyd` file\n/// This module is implemented in Rust.\n#[pymodinit(rust2py)]\nfn init_mod(py: Python, m: &amp;PyModule) -&gt; PyResult&lt;()&gt; {\n\n    #[pyfn(m, \"sum_as_string\")]\n    // pyo3 aware function. All of our python interface could be declared in a separate module.\n    // Note that the `#[pyfn()]` annotation automatically converts the arguments from\n    // Python objects to Rust values; and the Rust return value back into a Python object.\n    fn sum_as_string_py(_: Python, a:i64, b:i64) -&gt; PyResult&lt;String&gt; {\n       let out = sum_as_string(a, b);\n       Ok(out)\n    }\n\n    Ok(())\n}\n\n// logic implemented as a normal Rust function\nfn sum_as_string(a:i64, b:i64) -&gt; String {\n    format!(\"{}\", a + b).to_string()\n}\n</code></pre>\n\n<p>When I build this program, I got some errors.</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>error[E0432]: unresolved import `pyo3::py`\n --&gt; src/lib.rs:4:12\n  |\n4 | use pyo3::{py, PyResult, Python, PyModule};\n  |            ^^\n  |            |\n  |            no `py` in the root\n  |            help: a similar name exists in the module: `Py`\n\nerror[E0432]: unresolved import `pyo3::py`\n --&gt; src/lib.rs:6:11\n  |\n6 | use pyo3::py::modinit as pymodinit;\n  |           ^^ could not find `py` in `pyo3`\n\nerror: cannot determine resolution for the attribute macro `pymodinit`\n  --&gt; src/lib.rs:11:3\n   |\n11 | #[pymodinit(rust2py)]\n   |   ^^^^^^^^^\n   |\n   = note: import resolution is stuck, try simplifying macro imports\n\nerror: cannot find attribute macro `pyfn` in this scope\n  --&gt; src/lib.rs:14:7\n   |\n14 |     #[pyfn(m, \"sum_as_string\")]\n   |       ^^^^\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: Could not compile `example`.\n</code></pre>\n\n<p>This error message says that there is no \"py\" in pyo3 module. I looked for this error message, but I cannot find similar errors.</p>\n\n<p>How to deal with this issue?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568465780, "post_id": 57935618, "comment_id": 102287341, "body": "I need to know if your <code>PackageCore</code>, particularly the <code>start()</code> or <code>send_command()</code> fns actually require mutability"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568465821, "post_id": 57935618, "comment_id": 102287346, "body": "@KhadimFall and while we are at it, is there anything that prevents you from reversing the order of invocation (as in, <code>start()</code> then listen)"}, {"owner": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568466066, "post_id": 57935618, "comment_id": 102287416, "body": "Start needs mut and reversing order should be possible :)"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568466107, "post_id": 57935618, "comment_id": 102287422, "body": "Then if you reverse the order of calls (i.e. <code>start</code> before <code>listen</code>) you&#39;ll be able to <code>move</code> the core straight in, assuming no dangling references to <code>core</code> anywhere else and nothing else needs to change :-)"}, {"owner": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568466347, "post_id": 57935618, "comment_id": 102287492, "body": "Actually i have this: <code>let _ = core.thread.unwrap().join();</code> at the very bottom of the script."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568467899, "post_id": 57935618, "comment_id": 102287910, "body": "Yeah, that indicates there&#39;s some structural weaknesses in the way you laid out what <code>PackageCore</code> does. What do you need to <code>start()</code> if you then randomly grab the thread to <code>join</code> it?"}, {"owner": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568468683, "post_id": 57935618, "comment_id": 102288131, "body": "ye idk anyting about rust basically. At start i create a tcp connection. I dont want to close the application so i wait for the listining thread :)"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568469398, "post_id": 57935618, "comment_id": 102288274, "body": "Okay. I&#39;ve read into what <code>rouille</code> is and how it works, and there are issues there too. <code>start_server</code> never returns. So even if your code was sane, <code>start()</code> would never get called."}, {"owner": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568469728, "post_id": 57935618, "comment_id": 102288345, "body": "ahhh okay i got it, so i can actually start before rouille and then just start_server and the program will stay open right ? Sorry for spamming comments"}, {"owner": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568469920, "post_id": 57935618, "comment_id": 102288399, "body": "still giving me: <code>cannot move out of captured variable in an Fn closure</code> after i moved start to the top and removed the join."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "edited": false, "score": 0, "creation_date": 1568470512, "post_id": 57935618, "comment_id": 102288526, "body": "Are you sure there isn&#39;t anything else using (directly or through a reference held elsewhere) <code>core</code>?"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": false, "score": 0, "last_activity_date": 1568465149, "creation_date": 1568465149, "answer_id": 57935618, "question_id": 57935581, "link": "https://stackoverflow.com/questions/57935581/cannot-move-out-of-captured-variable-in-an-fn-closure/57935618#57935618", "title": "Cannot move out of captured variable in an `Fn` closure", "body": "<p>I've indicated where the issue is on your snippet:</p>\n\n<pre><code>let core: PackageCore = package_core::init();\nlet html = include_str!(\"./html/index.html\");\n\nrouille::start_server(\"0.0.0.0:44\", move |request| {\n    core.send_command(); // &lt;-- this is where you moved\n    return Response::html(html.clone());\n});\n\ncore.start(); // &lt;-- but you need it here outside of the closure\n</code></pre>\n\n<p>You <code>move</code> the <code>core</code> inside the closure, but then you call <code>start()</code> outside it. That's not possible; it is either moved inside, or it is outside. To get around it, you can either wrap it in a structure that allows multiple pointers to it to exist (<code>Arc</code> or <code>Rc</code> being the prime candidates), and if I'm right and <code>start()</code> requires <code>&amp;mut self</code>, you'll need a structure guaranteeing interior mutability (<code>Mutex</code>, <code>RwLock</code> or <code>RefCell</code> being some of the candidates) to allow you to temporarily acquire a mutable reference to it.</p>\n"}], "owner": {"reputation": 84, "user_id": 5165889, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-U1gG4MvCBuQ/AAAAAAAAAAI/AAAAAAAAAEI/3yl7cGL6K1Y/photo.jpg?sz=128", "display_name": "Khadim Fall", "link": "https://stackoverflow.com/users/5165889/khadim-fall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 179, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1568465149, "creation_date": 1568464804, "last_edit_date": 1568464910, "question_id": 57935581, "link": "https://stackoverflow.com/questions/57935581/cannot-move-out-of-captured-variable-in-an-fn-closure", "title": "Cannot move out of captured variable in an `Fn` closure", "body": "<p>I am pretty much new to rust-lang. I am trying to create my first program, and i am just lost with the ownership/borrowing of rust-lang.</p>\n\n<p>That is my code:</p>\n\n<pre><code>let core: PackageCore = package_core::init();\nlet html = include_str!(\"./html/index.html\");\n\nrouille::start_server(\"0.0.0.0:44\", move |request| {\n    core.send_command();\n    return Response::html(html.clone());\n});\n\ncore.start();\n</code></pre>\n\n<p>And that is my error:\n<a href=\"https://i.stack.imgur.com/D1jJa.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/D1jJa.png\" alt=\"enter image description here\"></a></p>\n\n<p>Probably someone can help me here :)</p>\n\n<p>Cheers</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568454608, "post_id": 57933461, "comment_id": 102285003, "body": "What prevents you from just writing this as a loop? Nothing in this requires <code>futures</code> as you&#39;re using <code>poll_write()</code> as opposed to (properly) using something on top"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568454641, "post_id": 57933461, "comment_id": 102285008, "body": "To be more specific, <code>pull()</code> isn&#39;t returning a future, <code>poll_write()</code> isn&#39;t returning a future either, so <i>what do you need the entire future chain for</i>?"}, {"owner": {"reputation": 27, "user_id": 11414906, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-lWlT8JkFdYk/AAAAAAAAAAI/AAAAAAAAAVk/lSopxMy4oT8/photo.jpg?sz=128", "display_name": "Vikas Shetty", "link": "https://stackoverflow.com/users/11414906/vikas-shetty"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568456307, "post_id": 57933461, "comment_id": 102285371, "body": "you mean use something like <code>while server_queue.get_size() &gt; 0 { socket.write_all(server_queue.pull()) } </code> ?"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568463851, "post_id": 57933461, "comment_id": 102286870, "body": "For instance, or just <code>write()</code>. You do not need the timing iterator in your case as every single one of your calls is blocking. That&#39;s what I don&#39;t get"}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568463879, "post_id": 57933461, "comment_id": 102286877, "body": "Do note that in general <b>blocking calls</b> like yours are a bad idea, for obvious reasons, so that&#39;s where I would focus my efforts if I were you, not on the &quot;speed&quot;"}], "owner": {"reputation": 27, "user_id": 11414906, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-lWlT8JkFdYk/AAAAAAAAAAI/AAAAAAAAAVk/lSopxMy4oT8/photo.jpg?sz=128", "display_name": "Vikas Shetty", "link": "https://stackoverflow.com/users/11414906/vikas-shetty"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 467, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1568446739, "creation_date": 1568446739, "question_id": 57933461, "link": "https://stackoverflow.com/questions/57933461/how-to-send-multiple-messages-over-a-tcpstream-in-rust", "title": "How to send multiple messages over a TCPStream in Rust?", "body": "<p>I have a list of string messages which I want to send over to another machine by opening a TCP connection between the both of them. I'm not looking to use existing solutions like mpsc::channel.</p>\n\n<p>I had seen examples about how we can do the same thing in tokio by using intervals and poll writes. But assuming we want to send the messages as fast as possible how do we do that? I also tried using tokio::spawn and loop through the entire queue to write the required messages but always ended up getting errors from the socket ( cannot be moved....)</p>\n\n<pre><code>let done = listener\n    .incoming()\n    .for_each(move |socket| {\n        let server_queue = _cqueue.clone();\n        let (reader, mut writer) = socket.split();\n        let sender = Interval::new_interval(std::time::Duration::from_millis(1))\n            .for_each(move |_| {\n                writer\n                    .poll_write(server_queue.pull().borrow())\n                    .map_err(|_| {\n                        tokio::timer::Error::shutdown();\n                    })\n                    .unwrap();\n                return Ok(());\n            })\n            .map_err(|e| println!(\"{}\", e));\n        ;\n        tokio::spawn(sender);\n        return Ok(());\n    })\n    .map_err(|e| println!(\"Future_error {}\", e));\n\ntokio::run(done);\n</code></pre>\n\n<p>Using this I was able to get messages on the consumer side but I feel like intervals slow us down because we wait before sending other messages. Is there another way to achieve something similar without using interval?</p>\n"}, {"tags": ["rust", "smart-pointers", "hashset", "borrowing"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1568424407, "post_id": 57931641, "comment_id": 102280685, "body": "Are you sure you need the items to be <code>Rc&lt;String&gt;</code>? There may be a simpler solution if your underlying requirement could admit a different data structure."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1568425445, "post_id": 57931641, "comment_id": 102280798, "body": "Justified uses of <code>Rc&lt;String&gt;</code> are not unheard of, but rare, since you can&#39;t mutate it. Consider <code>Rc&lt;str&gt;</code> instead, which has less indirection and does implement <code>Borrow&lt;str&gt;</code>"}, {"owner": {"reputation": 491, "user_id": 2772760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c259cb4c4f49639ba76c20f0cdf7cf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Victor Akimov", "link": "https://stackoverflow.com/users/2772760/victor-akimov"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1568546115, "post_id": 57931641, "comment_id": 102301208, "body": "@trentcl thanks, <code>Rc&lt;str&gt;</code> could be the solution. The only downside I&#39;ve found, in the current implementation of <code>Rc::from(input_string)</code> input_string memory is not reused <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1845-shared-from-slice.md#vec-and-box\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1568547278, "post_id": 57931641, "comment_id": 102301461, "body": "Yep, that&#39;s a drawback. Ultimately it comes down to whether an extra copy at creation time, or an extra indirection every time you access it, is more costly. (Note too the extra copy can sometimes be avoided; turning a <code>&amp;str</code> into an <code>Rc&lt;str&gt;</code> can be done in one step without creating an intermediate <code>String</code>.)"}], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 4, "last_activity_date": 1568424575, "last_edit_date": 1568424575, "creation_date": 1568424246, "answer_id": 57931787, "question_id": 57931641, "link": "https://stackoverflow.com/questions/57931641/check-if-a-string-slice-is-contained-in-hashsetrcstring-without-allocating-a/57931787#57931787", "title": "Check if a string slice is contained in HashSet&lt;Rc&lt;String&gt;&gt; without allocating a new String", "body": "<p>As the error message says, <code>HashSet::contains</code> requires that the type of the item stored in the collection has a <code>Borrow</code> implementation for its argument type. There is no implementation of <code>Borrow&lt;str&gt;</code> for <code>Rc&lt;String&gt;</code>.</p>\n\n<p>You can't add this implementation yourself because neither the types involved nor the trait are from your crate. However, you can create a newtype wrapper for <code>Rc&lt;String&gt;</code> and implement whichever <code>Borrow</code> implementations you might need:</p>\n\n<pre><code>#[derive(Debug, Eq, PartialEq, Hash)]\nstruct CacheItem(Rc&lt;String&gt;);\n\nimpl Borrow&lt;str&gt; for CacheItem {\n    fn borrow(&amp;self) -&gt; &amp;str {\n        &amp;self.0\n    }\n}\n\nimpl Borrow&lt;String&gt; for CacheItem {\n    fn borrow(&amp;self) -&gt; &amp;String {\n        &amp;self.0\n    }\n}\n\nimpl Borrow&lt;Rc&lt;String&gt;&gt; for CacheItem {\n    fn borrow(&amp;self) -&gt; &amp;Rc&lt;String&gt; {\n        &amp;self.0\n    }\n}\n\nlet string_cache: HashSet&lt;CacheItem&gt; = [rc_string.clone()].iter().cloned().map(CacheItem).collect();\nassert!(string_cache.contains(&amp;rc_string));\nassert!(string_cache.contains(&amp;string));\nassert!(string_cache.contains(input));\n</code></pre>\n\n<p>Newtype wrappers constructed like this should have zero runtime cost. However, you may need to add a number of extra trait implementations in order to use it conveniently.</p>\n"}], "owner": {"reputation": 491, "user_id": 2772760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c259cb4c4f49639ba76c20f0cdf7cf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Victor Akimov", "link": "https://stackoverflow.com/users/2772760/victor-akimov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 299, "favorite_count": 0, "accepted_answer_id": 57931787, "answer_count": 1, "score": 3, "last_activity_date": 1568424575, "creation_date": 1568422071, "last_edit_date": 1568424347, "question_id": 57931641, "link": "https://stackoverflow.com/questions/57931641/check-if-a-string-slice-is-contained-in-hashsetrcstring-without-allocating-a", "title": "Check if a string slice is contained in HashSet&lt;Rc&lt;String&gt;&gt; without allocating a new String", "body": "<p>I'm caching words coming from the input in a <code>HashSet&lt;Rc&lt;String&gt;&gt;</code>.\nCan I somehow use <code>&amp;str</code> as a key for this set when checking if it contained in set as I could for <code>HashSet&lt;String&gt;</code>?</p>\n\n<p>Using a <code>HashSet&lt;String&gt;</code>, it works:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::collections::HashSet;\n\nlet input = \"\";\nlet string = input.to_string();\nlet rc_string: Rc&lt;String&gt; = Rc::new(string.clone());\n\nlet set: HashSet&lt;String&gt; = [string.clone()].iter().cloned().collect();\nassert!(set.contains(&amp;string));\nassert!(set.contains(input));\n</code></pre>\n\n<p>But if I try to use a <code>HashSet&lt;Rc&lt;String&gt;&gt;</code>:</p>\n\n<pre><code>let string_cache: HashSet&lt;Rc&lt;String&gt;&gt; = [rc_string.clone()].iter().cloned().collect();\nassert!(string_cache.contains(&amp;rc_string));\nassert!(string_cache.contains(&amp;string));\nassert!(string_cache.contains(input));\n</code></pre>\n\n<p>Then I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::rc::Rc&lt;std::string::String&gt;: std::borrow::Borrow&lt;str&gt;` is not satisfied\n  --&gt; src/main.rs:16:26\n   |\n16 |     assert!(string_cache.contains(input));\n   |                          ^^^^^^^^ the trait `std::borrow::Borrow&lt;str&gt;` is not implemented for `std::rc::Rc&lt;std::string::String&gt;`\n   |\n   = help: the following implementations were found:\n             &lt;std::rc::Rc&lt;T&gt; as std::borrow::Borrow&lt;T&gt;&gt;\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 1, "creation_date": 1568409121, "post_id": 57930311, "comment_id": 102278191, "body": "Does <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5450d6172eae9d58d85a3867a18d63be\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> help?"}, {"owner": {"reputation": 3, "user_id": 9189181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/479535f11aa4ac442dd829e0d4e231de?s=128&d=identicon&r=PG", "display_name": "gdelazzari", "link": "https://stackoverflow.com/users/9189181/gdelazzari"}, "reply_to_user": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 0, "creation_date": 1568418862, "post_id": 57930311, "comment_id": 102280117, "body": "It does indeed help, thank you very much. I didn&#39;t think about using <code>_</code> to phase out the lifetime in the type and that the lifetime associated to the type itself might have been the problem. I guess the lesson to learn is to try working with as few lifetimes specifiers as possible?"}], "answers": [{"comments": [{"owner": {"reputation": 348, "user_id": 3561221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e94b4ecf7d3e654e2aa017a7e8e21ec7?s=128&d=identicon&r=PG&f=1", "display_name": "David A", "link": "https://stackoverflow.com/users/3561221/david-a"}, "edited": false, "score": 0, "creation_date": 1568415106, "post_id": 57931121, "comment_id": 102279539, "body": "Fixing the <code>mut</code> issue yields <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8678f6450d2c93316ba4d486dd5ee5e8\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> which compiles."}, {"owner": {"reputation": 3, "user_id": 9189181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/479535f11aa4ac442dd829e0d4e231de?s=128&d=identicon&r=PG", "display_name": "gdelazzari", "link": "https://stackoverflow.com/users/9189181/gdelazzari"}, "edited": false, "score": 0, "creation_date": 1568455025, "post_id": 57931121, "comment_id": 102285083, "body": "Thank you very much for the explanation. In a comment under my question @ry also proposed this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5450d6172eae9d58d85a3867a18d63be\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> which declares the type as <code>type FooFunc = dyn Fn(&amp;mut Foo&lt;&#39;_&gt;) -&gt; bool;</code>. I guess in this case the Rust compiler is just inferring lifetimes that, in the code you provided, are instead explicitly given?"}, {"owner": {"reputation": 348, "user_id": 3561221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e94b4ecf7d3e654e2aa017a7e8e21ec7?s=128&d=identicon&r=PG&f=1", "display_name": "David A", "link": "https://stackoverflow.com/users/3561221/david-a"}, "reply_to_user": {"reputation": 3, "user_id": 9189181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/479535f11aa4ac442dd829e0d4e231de?s=128&d=identicon&r=PG", "display_name": "gdelazzari", "link": "https://stackoverflow.com/users/9189181/gdelazzari"}, "edited": false, "score": 0, "creation_date": 1568661924, "post_id": 57931121, "comment_id": 102337629, "body": "Well the type you wrote is not a reference, so it&#39;s entirely different. But, basically, yes; I used all explicit lifetime annotations declared with <code>for&lt;&gt;</code>. I&#39;m not entirely sure how many of them can be elided TBH because I don&#39;t yet remember how <code>&#39;_</code> interacts with other entirely-elided lifetimes (are they inferred distinct or the same?). It&#39;s better to be explicit if you&#39;re not sure."}], "tags": [], "owner": {"reputation": 348, "user_id": 3561221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e94b4ecf7d3e654e2aa017a7e8e21ec7?s=128&d=identicon&r=PG&f=1", "display_name": "David A", "link": "https://stackoverflow.com/users/3561221/david-a"}, "is_accepted": true, "score": 1, "last_activity_date": 1568414864, "creation_date": 1568414864, "answer_id": 57931121, "question_id": 57930311, "link": "https://stackoverflow.com/questions/57930311/const-array-of-closures-taking-a-mutable-reference-to-a-struct-with-lifetime-par/57931121#57931121", "title": "Const array of closures taking a mutable reference to a struct with lifetime parameter in Rust", "body": "<p>The line <code>type FooFunc&lt;'a&gt; = &amp;'a dyn Fn(&amp;'a mut Foo&lt;'a&gt;) -&gt; bool;</code> does <strong>not</strong> say \"A <code>FooFunc</code> is a reference of any lifetime to a closure which takes a reference of any lifetime (to a <code>Foo</code> of the same lifetime)\". Instead it says \"A <code>FooFunc&lt;'a&gt;</code> is a reference with a <em>specific</em> lifetime <code>'a</code> to a closure which takes a reference of that <em>specific</em> lifetime <code>'a</code> (to a <code>Foo</code> of the same specific lifetime <code>'a</code>), <em>which is the same every time that closure is called</em>.\"</p>\n\n<p>Moreover, when you omit the lifetime in the item declaration (<code>[FooFunc; 4]</code>) it's inferred to be <code>'static</code>. (This is because types themselves can't outlive their type parameters, but the item must be <code>'static</code>, so the only valid lifetime parameter is also <code>'static</code>.) So <code>funcs</code> is an array of references to closures which only accept <code>&amp;'static mut Foo&lt;'static&gt;</code>.</p>\n\n<p>What you probably want is <code>type FooFunc&lt;'r&gt; = &amp;'r for&lt;'a, 'b&gt; dyn Fn(&amp;'a mut Foo&lt;'b&gt;) -&gt; bool;</code>, although this still fails due to mutability issues elsewhere. What that says is \"A <code>FooFunc&lt;'r&gt;</code> is a reference of lifetime <code>'r</code> to a closure which accepts references of <em>any</em> lifetime to <code>Foo</code>s with <em>any</em> lifetime (the latter lifetime implicitly outlives the first lifetime).\" <code>'r</code> will still be inferred as <code>'static</code> but that's okay because that's what you have.</p>\n"}], "owner": {"reputation": 3, "user_id": 9189181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/479535f11aa4ac442dd829e0d4e231de?s=128&d=identicon&r=PG", "display_name": "gdelazzari", "link": "https://stackoverflow.com/users/9189181/gdelazzari"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 252, "favorite_count": 0, "accepted_answer_id": 57931121, "answer_count": 1, "score": 0, "last_activity_date": 1568414864, "creation_date": 1568408575, "question_id": 57930311, "link": "https://stackoverflow.com/questions/57930311/const-array-of-closures-taking-a-mutable-reference-to-a-struct-with-lifetime-par", "title": "Const array of closures taking a mutable reference to a struct with lifetime parameter in Rust", "body": "<p>I have the following scenario in a Rust project:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Foo&lt;'a&gt; {\n    stuff: &amp;'a i32,\n}\n</code></pre>\n\n<p>thus I'm telling the compiler that my <code>Foo</code> struct holds a reference to something and I have to give it a lifetime to make that work, fine.</p>\n\n<p>Now, I declare this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>type FooFunc&lt;'a&gt; = &amp;'a dyn Fn(&amp;'a mut Foo&lt;'a&gt;) -&gt; bool;\n\nconst funcs: [FooFunc; 4] = [\n    &amp;|f| { *f.stuff = 0; false },\n    &amp;|f| { *f.stuff = 1; true },\n    &amp;|f| { *f.stuff = 2; true },\n    &amp;|f| { *f.stuff = 3; true },\n];\n</code></pre>\n\n<p>and try to call a closure from that const array inside a \"method\" of <code>Foo</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn bar(&amp;mut self, i: usize) -&gt; bool {\n        funcs[i](self)\n    }\n}\n</code></pre>\n\n<p>Reasoning about lifetimes, this should be fine since the <code>self</code> reference to the <code>Foo</code> struct has a lifetime <code>'a</code> (which sure thing doesn't outlive <code>'static</code>, that is the lifetime of the closures) so the closures should be able to receive <code>self</code> as a parameter without any issue.</p>\n\n<p>And the borrow checker sort of agrees with this, but still reports an error I don't understand:</p>\n\n<pre><code>error[E0308]: mismatched types\n --&gt; src/main.rs:7:18\n  |\n7 |         funcs[i](self)\n  |                  ^^^^ lifetime mismatch\n  |\n  = note: expected type `&amp;'static mut Foo&lt;'static&gt;`\n             found type `&amp;'static mut Foo&lt;'a&gt;`\nnote: the lifetime 'a as defined on the impl at 5:6...\n --&gt; src/main.rs:5:6\n  |\n5 | impl&lt;'a&gt; Foo&lt;'a&gt; {\n  |      ^^\n  = note: ...does not necessarily outlive the static lifetime\n\nerror[E0312]: lifetime of reference outlives lifetime of borrowed content...\n --&gt; src/main.rs:7:18\n  |\n7 |         funcs[i](self)\n  |                  ^^^^\n  |\n  = note: ...the reference is valid for the static lifetime...\nnote: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 6:5\n --&gt; src/main.rs:6:5\n  |\n6 | /     fn bar(&amp;mut self, i: usize) -&gt; bool {\n7 | |         funcs[i](self)\n8 | |     }\n  | |_____^\n</code></pre>\n\n<p>It's telling me (in the <code>note</code> tags) that <code>the lifetime 'a as defined on the impl at 5:6 does not necessarily outlive the static lifetime</code> and that <code>the reference is valid for the static lifetime but the borrowed content is only valid for the anonymous lifetime #1 defined on the method body at 6:5</code>. While a compiler giving these kind of error messages is amazing, I still don't get what the problem is.</p>\n\n<p>Talking about the second <code>note</code> (which is the one that sort of (tries to) explain the issue), I can't understand if the borrowed content is meant to be the const array or the self reference, but in either case:</p>\n\n<ul>\n<li><p>if the \"borrowed content\" is the const array, why would that be a problem even if an anonymous lifetime that matches the function body has been assigned to it? The closure just has to operate on the reference that gets passed as a parameter and return by transferring ownership of the return value, and not by returning a reference with some weird lifetime that could cause problems.</p></li>\n<li><p>if the \"borrowed content\" is the self reference, again, why would that be the problem? Okay, the self reference is no more <code>'a</code>, but it's another one (let's call it <code>'b</code>) which is \"included\" in <code>'a</code>, thus shouldn't outlive <code>'static</code>, right?</p></li>\n</ul>\n\n<p>Sure thing I'm missing something here, any help would be appreciated.</p>\n\n<p><strong>Note</strong>: all the code in this post is just a stripped down version of the \"architecture\" I'm trying to implement - of course the logic you see in the example code could be easily implemented in a way simple manner, but that's not what I need. I would like to have a table of operations to do on my struct (thus the idea to make the elements closures that accept a <code>&amp;mut</code> reference) and run these operations from a \"method\" of my struct. The actual type in the actual project is instead <code>[Option&lt;[FooFunc&lt;'a&gt;; 6]&gt;; 256]</code>, so we're talking a pretty big bi-dimensional \"table\", which I imagine would become quite unpleasant to implement with <code>match</code> statements, especially considering I reuse <code>FooFunc</code>s very often.</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=17034fe41c74d65d7a296ae812f19945\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=17034fe41c74d65d7a296ae812f19945</a></p>\n"}, {"tags": ["rust", "image-uploading"], "answers": [{"tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 1, "last_activity_date": 1568438446, "last_edit_date": 1568438446, "creation_date": 1568417786, "answer_id": 57931367, "question_id": 57929505, "link": "https://stackoverflow.com/questions/57929505/unsupported-image-format-when-trying-to-load-an-image-from-a-response-body/57931367#57931367", "title": "Unsupported Image Format when trying to load an image from a response body", "body": "<p>The problem is that the request body has both http headers and image data. You need to parse it somehow according to <a href=\"https://tools.ietf.org/html/rfc7578\" rel=\"nofollow noreferrer\">RFC 7578</a>.</p>\n\n<p>Surprisingly I couldn't find a ready-made decent MIME multipart/form-data parser crate. The following code works, but it resorts to extremely crude <code>regex</code> split instead of proper parsing. Also, it omits the tensor model training part:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate image;\nextern crate mime;\n\nuse futures::{future, Future, Stream};\nuse gotham::handler::{HandlerFuture, IntoHandlerError};\nuse gotham::helpers::http::response::create_response;\nuse gotham::router::builder::{build_simple_router, DefineSingleRoute, DrawRoutes};\nuse gotham::router::Router;\nuse gotham::state::{FromState, State};\nuse hyper::{Body, StatusCode};\nuse regex::bytes::Regex;\n\nfn prediction_handler(mut state: State) -&gt; Box&lt;HandlerFuture&gt; {\n    let f = Body::take_from(&amp;mut state)\n        .concat2()\n        .then(|full_body| match full_body {\n            Ok(valid_body) =&gt; {\n                let body_content = valid_body.into_bytes();\n                let re = Regex::new(r\"\\r\\n\\r\\n\").unwrap();\n                let contents: Vec&lt;_&gt; = re.split(body_content.as_ref()).collect();\n\n                let image = image::load_from_memory(contents[1]).unwrap().to_rgb();\n\n                let res = create_response(\n                    &amp;state,\n                    StatusCode::OK,\n                    mime::TEXT_PLAIN,\n                    format!(\"{:?}\\r\\n\", image.dimensions()),\n                );\n                future::ok((state, res))\n            }\n            Err(e) =&gt; future::err((state, e.into_handler_error())),\n        });\n\n    Box::new(f)\n}\n</code></pre>\n"}], "owner": {"reputation": 2860, "user_id": 2016353, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0d7b22e8ea693b36a249f7f626df6439?s=128&d=identicon&r=PG", "display_name": "Daniel Bank", "link": "https://stackoverflow.com/users/2016353/daniel-bank"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "accepted_answer_id": 57931367, "answer_count": 1, "score": 1, "last_activity_date": 1568438446, "creation_date": 1568403677, "last_edit_date": 1568405781, "question_id": 57929505, "link": "https://stackoverflow.com/questions/57929505/unsupported-image-format-when-trying-to-load-an-image-from-a-response-body", "title": "Unsupported Image Format when trying to load an image from a response body", "body": "<p>Starting from the <a href=\"https://github.com/gotham-rs/gotham/tree/master/examples/routing\" rel=\"nofollow noreferrer\">gotham-rs routing example</a>, I am trying to make a REST API that extracts an image from a request body so that it can be analyzed.  I upload the image to the server with the following cURL command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>curl -i -X POST -F \"image=@/Users/DanielBank/Desktop/grace_hopper.jpg\" http://127.0.0.1:7878/\n</code></pre>\n\n<p>I get an unsupported image format error when I try to load the image from memory:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'gotham-worker-0' panicked at 'called `Result::unwrap()` on an `Err` value: UnsupportedError(\"Unsupported image format\")', src/libcore/result.rs:999:5\n</code></pre>\n\n<p><strong>/src/main.rs</strong>:</p>\n\n<pre><code>extern crate futures;\nextern crate gotham;\nextern crate hyper;\nextern crate mime;\nextern crate url;\n\nuse futures::{future, Future, Stream};\nuse hyper::{Body, StatusCode};\n\nuse gotham::handler::{HandlerFuture, IntoHandlerError};\nuse gotham::helpers::http::response::create_response;\nuse gotham::router::builder::{build_simple_router, DefineSingleRoute, DrawRoutes};\nuse gotham::router::Router;\nuse gotham::state::{FromState, State};\n\nuse tract_core::ndarray;\nuse tract_core::prelude::*;\n\n/// Extracts the image from a POST request and responds with a prediction tuple (probability, class)\nfn prediction_handler(mut state: State) -&gt; Box&lt;HandlerFuture&gt; {\n  let f = Body::take_from(&amp;mut state)\n    .concat2()\n    .then(|full_body| match full_body {\n      Ok(valid_body) =&gt; {\n        // load the model\n        let mut model = tract_tensorflow::tensorflow()\n          .model_for_path(\"mobilenet_v2_1.4_224_frozen.pb\")\n          .unwrap();\n\n        // specify input type and shape\n        model\n          .set_input_fact(\n            0,\n            TensorFact::dt_shape(f32::datum_type(), tvec!(1, 224, 224, 3)),\n          )\n          .unwrap();\n\n        // optimize the model and get an execution plan\n        let model = model.into_optimized().unwrap();\n        let plan = SimplePlan::new(&amp;model).unwrap();\n        let body_content = valid_body.into_bytes();\n\n        // extract the image from the body as input\n        let image = image::load_from_memory(body_content.as_ref())\n          .unwrap()\n          .to_rgb();\n        let resized = image::imageops::resize(&amp;image, 224, 224, ::image::FilterType::Triangle);\n        let image: Tensor = ndarray::Array4::from_shape_fn((1, 224, 224, 3), |(_, y, x, c)| {\n          resized[(x as _, y as _)][c] as f32 / 255.0\n        })\n        .into();\n\n        // run the plan on the input\n        let result = plan.run(tvec!(image)).unwrap();\n\n        // find and display the max value with its index\n        let best = result[0]\n          .to_array_view::&lt;f32&gt;()\n          .unwrap()\n          .iter()\n          .cloned()\n          .zip(1..)\n          .max_by(|a, b| a.0.partial_cmp(&amp;b.0).unwrap());\n\n        // respond with the prediction tuple\n        let res = create_response(\n          &amp;state,\n          StatusCode::OK,\n          mime::TEXT_PLAIN,\n          format!(\"{:?}\", best.unwrap()),\n        );\n        future::ok((state, res))\n      }\n      Err(e) =&gt; future::err((state, e.into_handler_error())),\n    });\n\n  Box::new(f)\n}\n\n/// Create a `Router`\nfn router() -&gt; Router {\n  build_simple_router(|route| {\n    route.post(\"/\").to(prediction_handler);\n  })\n}\n\n/// Start a server and use a `Router` to dispatch requests\npub fn main() {\n  let addr = \"127.0.0.1:7878\";\n  println!(\"Listening for requests at http://{}\", addr);\n  gotham::start(addr, router())\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[package]\nname = \"offline-ml\"\ndescription = \"Offline ML but with a REST API that's not Offline\"\nversion = \"0.1.0\"\nauthors = [\"Daniel Bank\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nfutures = \"0.1\"\ngotham = \"0.4.0\"\nhyper = \"0.12\"\nimage = \"0.22.2\"\nmime = \"0.3\"\ntract-core = \"0.4.2\"\ntract-tensorflow = \"0.4.2\"\nurl = \"2.1.0\"\n</code></pre>\n"}, {"tags": ["rust", "pattern-matching", "ownership"], "answers": [{"tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 5, "last_activity_date": 1568398694, "last_edit_date": 1568398694, "creation_date": 1568397815, "answer_id": 57928407, "question_id": 57928209, "link": "https://stackoverflow.com/questions/57928209/matching-with-rcrefcelt/57928407#57928407", "title": "Matching with Rc&lt;RefCel&lt;T&gt;&gt;", "body": "<pre class=\"lang-rust prettyprint-override\"><code>    match (*wrapped1.borrow(), *wrapped2.borrow()) {\n</code></pre>\n\n<p>You created a tuple here on the spot. And the values were being moved into the newly created tuple. This works though:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::rc::Rc;\nuse std::cell::RefCell;\nuse crate::Foo::Something;\n\nenum Foo {\n    Nothing,\n    Something(i32),\n}\n\nfn main() {\n    let wrapped1 = Rc::new(RefCell::new(Foo::Nothing));\n    let wrapped2 = Rc::new(RefCell::new(Foo::Nothing));\n\n    match (&amp;*wrapped1.borrow(), &amp;*wrapped2.borrow()) {\n        (Something(x), Something(y)) =&gt; println!(\"{}, {}\", x, y),\n        _ =&gt; println!(\"Nothing\"),\n    };        \n}\n</code></pre>\n"}], "owner": {"reputation": 16233, "user_id": 4253229, "user_type": "registered", "accept_rate": 83, "profile_image": "https://lh4.googleusercontent.com/-e2FAQvlj5CQ/AAAAAAAAAAI/AAAAAAAAAqM/TlSnekirgNE/photo.jpg?sz=128", "display_name": "Eugene Sh.", "link": "https://stackoverflow.com/users/4253229/eugene-sh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 831, "favorite_count": 0, "accepted_answer_id": 57928407, "answer_count": 1, "score": 2, "last_activity_date": 1568398694, "creation_date": 1568396695, "last_edit_date": 1568398158, "question_id": 57928209, "link": "https://stackoverflow.com/questions/57928209/matching-with-rcrefcelt", "title": "Matching with Rc&lt;RefCel&lt;T&gt;&gt;", "body": "<p>Consider the following code - which compiles and works:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\nuse crate::Foo::{Something, Nothing};\n\nenum Foo {\n    Nothing,\n    Something(i32),\n}\n\nfn main() {\n    let wrapped = Rc::new(RefCell::new(Foo::Nothing));\n    //....\n\n    match *wrapped.borrow() {\n        Something(x) =&gt; println!(\"{}\", x),\n        Nothing =&gt; println!(\"Nothing\"),\n    };        \n}\n</code></pre>\n\n<p>Now I want to match two wrapped values instead of just one:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\nuse crate::Foo::{Something, Nothing};\n\nenum Foo {\n    Nothing,\n    Something(i32),\n}\n\nfn main() {\n    let wrapped1 = Rc::new(RefCell::new(Foo::Nothing));\n    let wrapped2 = Rc::new(RefCell::new(Foo::Nothing));\n    //....\n\n    match (*wrapped1.borrow(), *wrapped2.borrow()) {\n        (Something(x), Something(y)) =&gt; println!(\"{}, {}\", x, y),\n        _ =&gt; println!(\"Nothing\"),\n    };        \n}\n</code></pre>\n\n<p>Now this will give the compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of dereference of `std::cell::Ref&lt;'_, Foo&gt;`\n  --&gt; src\\main.rs:16:12\n   |\n16 |     match (*wrapped1.borrow(), *wrapped2.borrow()) {\n   |            ^^^^^^^^^^^^^^^^^^ move occurs because value has type `Foo`, which does not implement the `Copy` trait\n\nerror[E0507]: cannot move out of dereference of `std::cell::Ref&lt;'_, Foo&gt;`\n  --&gt; src\\main.rs:16:32\n   |\n16 |     match (*wrapped1.borrow(), *wrapped2.borrow()) {\n   |                                ^^^^^^^^^^^^^^^^^^ move occurs because value has type `Foo`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I do not quite understand the fundamental difference between the semantics of the two examples. Why is it happening and what would be the correct way of making the second snippet work? </p>\n"}, {"tags": ["winapi", "rust", "linker", "ffi", "rust-cargo"], "comments": [{"owner": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1568476882, "post_id": 57926615, "comment_id": 102290056, "body": "Does the error go away if you add a <code>#[no_mangle]</code> attribute to function definition (in the <code>extern &quot;system&quot;</code> block)? The encoding error seems to be not due to the linker itself, but due to Cargo not understanding your locale."}, {"owner": {"reputation": 67, "user_id": 11379454, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xeu3m.jpg?s=128&g=1", "display_name": "centipede_", "link": "https://stackoverflow.com/users/11379454/centipede"}, "reply_to_user": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1568542342, "post_id": 57926615, "comment_id": 102300493, "body": "No it didn&#39;t worked."}, {"owner": {"reputation": 67, "user_id": 11379454, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xeu3m.jpg?s=128&g=1", "display_name": "centipede_", "link": "https://stackoverflow.com/users/11379454/centipede"}, "reply_to_user": {"reputation": 3836, "user_id": 3003401, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f2de9e3bd27825488f4cf0a1dd86ac0?s=128&d=identicon&r=PG&f=1", "display_name": "Cerberus", "link": "https://stackoverflow.com/users/3003401/cerberus"}, "edited": false, "score": 0, "creation_date": 1568547669, "post_id": 57926615, "comment_id": 102301519, "body": "I also tried to just use <code>rustc</code> and leaving <code>libc</code> from cargo by using types from Rust std but I still get the same error. I&#39;m really confused."}], "answers": [{"tags": [], "owner": {"reputation": 67, "user_id": 11379454, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xeu3m.jpg?s=128&g=1", "display_name": "centipede_", "link": "https://stackoverflow.com/users/11379454/centipede"}, "is_accepted": true, "score": 0, "last_activity_date": 1568661377, "last_edit_date": 1568661377, "creation_date": 1568661251, "answer_id": 57963120, "question_id": 57926615, "link": "https://stackoverflow.com/questions/57926615/link-error-during-rust-compilation-cargo/57963120#57963120", "title": "Link Error during Rust compilation (Cargo)", "body": "<p>I changed my Visual Studio default language to English because of encoding problems with <code>link.exe</code>.</p>\n\n<p>Then I got an error about <code>unresolved external: MessageBoxA@16</code>. To solve that, I moved the line <code>extern \"system\"{ /* Functions prototypes */ }</code> directly after <code>#[link(name=\"user32\")]</code> declaration.</p>\n\n<p>You also need Windows 10 SDK installed.</p>\n\n<p>Thanks to <code>rustup.exe</code> for giving really good installation indications!</p>\n"}], "owner": {"reputation": 67, "user_id": 11379454, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xeu3m.jpg?s=128&g=1", "display_name": "centipede_", "link": "https://stackoverflow.com/users/11379454/centipede"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 324, "favorite_count": 0, "accepted_answer_id": 57963120, "answer_count": 1, "score": 1, "last_activity_date": 1568661377, "creation_date": 1568389269, "last_edit_date": 1568542372, "question_id": 57926615, "link": "https://stackoverflow.com/questions/57926615/link-error-during-rust-compilation-cargo", "title": "Link Error during Rust compilation (Cargo)", "body": "<p>I'm calling some WinAPI functions with the Rust FFI (in this case MessageBoxA).</p>\n\n<p>My code was working until I did a little variable change and the compilation gave me an error as:</p>\n\n<pre><code>= note: Non-UTF-8 output: WinAPI-dd8845a539e186b8.4ojwfrbxjnkzuhga.rcgu.o : er\nror LNK2019: symbole externe non r\\xe9solu MessageBoxA r\\xe9f\\xe9renc\\xe9 dans l\na fonction _ZN6WinAPI4main17hdf93991da0bc3966E\\r\\nd:\\\\core\\\\Confidential\\\\Forens\nic\\\\Rust\\\\WinAPI\\\\target\\\\debug\\\\deps\\\\WinAPI-dd8845a539e186b8.exe : fatal error\n LNK1120: 1 externes non r\\xe9solus\\r\\n\n</code></pre>\n\n<p>The last line is in french and it means <code>LNK1120: 1 unresolved external</code>.</p>\n\n<p>I kind of understand that is an encoding error but I have no ideas how to solve it.</p>\n\n<p>So I canceled the little changes I did in my code but it keep displaying that weird message (The error message is actually bigger but not comprehensible).</p>\n\n<p>It's actually a <code>cargo</code> project, the code if you want to check it:</p>\n\n<pre><code>#[cfg(windows)]\n#[link(name = \"user32\", kind = \"dylib\")]\nextern crate libc;\nmod ffi{\n    use libc::{c_uint,uintptr_t,c_void};\n    type HANDLE = *mut c_void;\n    pub type UINT = c_uint;\n    pub type UINT_PTR = uintptr_t;\n    pub type HWND = HANDLE;\n    pub type LPCTSTR = *const i8;\n    pub const MB_OK: u32 = 0x0;\n    pub const MB_OKCANCEL: u32 = 0x00000001;\n    pub const MB_ICONWARNING: u32 = 0x00000030;\n    pub const MB_ICONINFORMATION: u32 = 0x00000040;\n    pub const MB_ICONQUESTION: u32 = 0x00000020;\n}\nextern \"system\"{\n    fn MessageBoxA(hWnd: ffi::HWND, lpText: ffi::LPCTSTR, lpCaption: ffi::LPCTSTR, uType: u32) -&gt; u32;\n}\nuse ffi::LPCTSTR;\nuse ffi::MB_OK;\nuse ffi::MB_ICONINFORMATION;\nfn main() -&gt; std::io::Result&lt;()&gt;{\n    unsafe{\n        let buffer: &amp;[u8] = &amp;[97,99,107,101,0]; // \"acke\" as a null terminated str\n        let lpData: LPCTSTR = core::str::from_utf8_unchecked(buffer).as_ptr() as *const i8;\n        let lpCaption: LPCTSTR = \"Information\".as_ptr() as *const i8;\n        MessageBoxA(\n            std::ptr::null_mut(),\n            lpData,\n            lpCaption,\n            MB_OK | MB_ICONINFORMATION,\n        );\n    };\n    return Ok(());\n}\n#[cfg(not(windows))]\nfn main() -&gt; std::io::Result&lt;()&gt;{\n    println!(\"That program only runs on Windows 10 architectures.\");\n    return Ok(());\n}\n\n</code></pre>\n\n<p><strong>Important :</strong> The error doesn't occure when I put the call to <code>MessageBoxA</code> in comment.</p>\n"}, {"tags": ["rust", "nom"], "answers": [{"comments": [{"owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 0, "creation_date": 1568387766, "post_id": 57925844, "comment_id": 102270081, "body": "Thanks. That solves the immediate problem, but it sidestepped the issue I noted which is that ambiguous parsing could require backtracking. Does nom do this or must one rely on converting the grammar into a parsing solution that doesn&#39;t require backtracking?"}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 0, "creation_date": 1568388380, "post_id": 57925844, "comment_id": 102270406, "body": "@Listerone, in this specific case, there&#39;s no ambiguity. And you may notice my 3rd test case, which doesn&#39;t consume all the input. You can continue parse whatever left with any parser you wish. That&#39;s also the strategy to deal with failure / ambiguity; you try other options with remaining input. Until there&#39;s no option left or all input consumed w/o success, then that&#39;s a hard failure."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "reply_to_user": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "edited": false, "score": 0, "creation_date": 1568388853, "post_id": 57925844, "comment_id": 102270637, "body": "@Listerone there&#39;s also <a href=\"https://docs.rs/nom/5.0.1/nom/combinator/fn.peek.html\" rel=\"nofollow noreferrer\"><code>peek</code></a> combinator that is specifically designed to <b>not</b> consume the input."}], "tags": [], "owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "is_accepted": true, "score": 3, "last_activity_date": 1568963394, "last_edit_date": 1568963394, "creation_date": 1568386090, "answer_id": 57925844, "question_id": 57924862, "link": "https://stackoverflow.com/questions/57924862/how-to-parse-slightly-ambiguous-data-using-nom/57925844#57925844", "title": "How to parse slightly ambiguous data using nom?", "body": "<blockquote>\n  <p>domainlabel = alphadigit | alphadigit *[ alphadigit | \"-\" ] alphadigit</p>\n</blockquote>\n\n<p>It is a series of alphanumeric sequence delimited by any number of character <code>-</code>. So here is one way to do it:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use nom::bytes::complete::{tag, take_while1};\nuse nom::character::is_alphanumeric;\nuse nom::combinator::recognize;\nuse nom::multi::{many1, separated_list};\nuse nom::IResult;\n\nfn domain_label(input: &amp;[u8]) -&gt; IResult&lt;&amp;[u8], &amp;[u8]&gt; {\n    let alphadigits = take_while1(is_alphanumeric);\n    let delimiter = many1(tag(b\"-\"));\n    let parser = separated_list(delimiter, alphadigits);\n\n    recognize(parser)(input)\n}\n\nfn main() {\n    let (_, res) = domain_label(b\"abcde\").unwrap();\n    assert_eq!(res, b\"abcde\");\n    let (_, res) = domain_label(b\"abcde-123-xyz-\").unwrap();\n    assert_eq!(res, b\"abcde-123-xyz\");\n    let (_, res) = domain_label(b\"rust-lang--1---37---0.org\").unwrap();\n    assert_eq!(res, b\"rust-lang--1---37---0\");\n}\n</code></pre>\n\n<p>Notice, you don't need individual parts of a successful parsing. The result is just the longest input that conforms to the domain label BNF. That's where the <code>recognize</code> combinator comes in.</p>\n"}], "owner": {"reputation": 939, "user_id": 11140945, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/j5Esk.png?s=128&g=1", "display_name": "Listerone", "link": "https://stackoverflow.com/users/11140945/listerone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 410, "favorite_count": 0, "accepted_answer_id": 57925844, "answer_count": 1, "score": 3, "last_activity_date": 1568963394, "creation_date": 1568382407, "last_edit_date": 1568384784, "question_id": 57924862, "link": "https://stackoverflow.com/questions/57924862/how-to-parse-slightly-ambiguous-data-using-nom", "title": "How to parse slightly ambiguous data using nom?", "body": "<p>In <a href=\"https://www.ietf.org/rfc/rfc1738.txt\" rel=\"nofollow noreferrer\">RFC1738</a>, the BNF for <code>domainlabel</code> is the following:</p>\n\n<blockquote>\n  <p>domainlabel    = alphadigit | alphadigit *[ alphadigit | \"-\" ]\n  alphadigit</p>\n</blockquote>\n\n<p>That is, it's either an alphadigit, or it's a string where the first/last characters have to be an alphadigit but the intermediate characters can be an alphadigit or a dash.</p>\n\n<p>How do I implement this with <a href=\"https://docs.rs/nom\" rel=\"nofollow noreferrer\">nom</a>? Ignoring the single character scenario to simplify the case, my final attempt is:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn domain_label(s: &amp;[u8]) -&gt; IResult&lt;&amp;[u8], (&amp;[u8], &amp;[u8], &amp;[u8])&gt; {\n    let left = take_while_m_n(1, 1, is_alphanumeric);\n    let middle = take_while(|c| is_alphanumeric(c) || c == b'-');\n    let right = take_while_m_n(1, 1, is_alphanumeric);\n    let whole = tuple((left, middle, right));\n    whole(s)\n}\n</code></pre>\n\n<p>The problem with this is that <code>middle</code> can consume the last character and hence <code>right</code> fails because there is no character to consume. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>println!(\"{:?}\", domain_label(b\"abcde\"));\nErr(Error(([], TakeWhileMN)))\n</code></pre>\n\n<p>Parsers should be able to attempt all possible consumption paths, but how to do this with <code>nom</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 1, "creation_date": 1568366152, "post_id": 57920179, "comment_id": 102259137, "body": "This seems to be a known <a href=\"https://github.com/rust-lang/rust/issues/56556\" rel=\"nofollow noreferrer\">issue</a>. And check this out: &quot;The only workaround I know of is to remove the lifetime parameter&quot;. Ouch."}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 1, "creation_date": 1568366991, "post_id": 57920179, "comment_id": 102259585, "body": "@edwardw thanks for the pointer. I&#39;m not sure yet this is the exact same problem, though. The error message is not the same anyway. But they may have the same root cause..."}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 4, "creation_date": 1568369283, "post_id": 57920979, "comment_id": 102260787, "body": "While it has nothing to do with the specific problem at hand, it&#39;s also worth pointing out that the dot-method-call-syntax does some things like auto-referencing and dereferencing. So the two lines are generally not equivalent, even in cases less crazy than this one."}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 1, "creation_date": 1568369333, "post_id": 57920979, "comment_id": 102260821, "body": "Oh, this makes sense! Thanks a lot, fellow lyonnais rustacean ;-)"}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1568369412, "post_id": 57920979, "comment_id": 102260873, "body": "@LukasKalbertodt yes, indeed, x.foo() could be Foo:foo(&amp;mut x) or Foo:foo(x) depending on how foo is declared..."}], "tags": [], "owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "is_accepted": true, "score": 6, "last_activity_date": 1568377536, "last_edit_date": 1568377536, "creation_date": 1568367211, "answer_id": 57920979, "question_id": 57920179, "link": "https://stackoverflow.com/questions/57920179/why-does-the-compiler-treat-those-two-equivalent-lines-differently/57920979#57920979", "title": "Why does the compiler treat those two equivalent(?) lines differently?", "body": "<blockquote>\n  <p>From what I understand, when x implements trait Foo, the following two lines should be equivalent.</p>\n\n<pre><code>x.foo();\nFoo::foo(&amp;x);\n</code></pre>\n</blockquote>\n\n<p>This is true for an inherent method (one that is defined on the type of <code>x</code> itself), but not for a trait method. In your case the equivalent is <code>&lt;Vec&lt;i32&gt; as Foo&gt;::foo(&amp;x);</code>.</p>\n\n<p>Here is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d42c580007143f7a78ed795088077663\" rel=\"nofollow noreferrer\">a playground link</a></p>\n"}], "owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 137, "favorite_count": 0, "accepted_answer_id": 57920979, "answer_count": 1, "score": 5, "last_activity_date": 1568377536, "creation_date": 1568364278, "last_edit_date": 1568365906, "question_id": 57920179, "link": "https://stackoverflow.com/questions/57920179/why-does-the-compiler-treat-those-two-equivalent-lines-differently", "title": "Why does the compiler treat those two equivalent(?) lines differently?", "body": "<p>From what I understand, when <code>x</code> implements trait <code>Foo</code>,\nthe following two lines should be equivalent.</p>\n\n<pre><code>x.foo();\nFoo::foo(&amp;x);\n</code></pre>\n\n<p>However, I am facing a problem where the compiler accepts the first one, and rejects the second one, with a rather strange error message.</p>\n\n<p>As usual, this example is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4b8ada5cc29c06387581d29d45701caf\" rel=\"nofollow noreferrer\">available on the playground</a>.</p>\n\n<p>Consider the following two related traits.</p>\n\n<pre><code>pub trait Bar&lt;'a&gt; {\n    type BarError: Into&lt;MyError&gt;;\n    fn bar(&amp;self) -&gt; Result&lt;(), Self::BarError&gt;;\n}\n\npub trait Foo: for&lt;'a&gt; Bar&lt;'a&gt; {\n    type FooError: Into&lt;MyError&gt;;\n    fn foo(&amp;self) -&gt; Result&lt;(), Self::FooError&gt;\n    where\n        for&lt;'a&gt; &lt;Self as Bar&lt;'a&gt;&gt;::BarError: Into&lt;&lt;Self as Foo&gt;::FooError&gt;;\n}\n</code></pre>\n\n<p>This example is a bit complex, but I do need the lifetime parameter on <code>Bar</code>, and I can't have it on <code>Foo</code>. As a consequence:</p>\n\n<ul>\n<li>I have to resort on <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">Higher-Rank Trait Bounds</a> (HRTB);</li>\n<li>I can not rely on <code>Bar::BarError</code> in <code>Foo</code> (there are actually an infinite number of types <code>Bar&lt;'_&gt;::BarError</code>), so <code>Foo</code> must have its own <code>FooError</code>;</li>\n<li>and so I need the complex trait bound in the <code>foo</code> method to convert <code>BarError</code>s to <code>FooError</code>s.</li>\n</ul>\n\n<p>Now, let's implement <code>Bar</code> and <code>Foo</code> for a concrete type, e.g. <code>Vec&lt;i32&gt;</code>.</p>\n\n<pre><code>impl&lt;'a&gt; Bar&lt;'a&gt; for Vec&lt;i32&gt; {\n    type BarError = Never;\n    fn bar(&amp;self) /* ... */\n}\n\nimpl Foo for Vec&lt;i32&gt; {\n    type FooError = Never;\n    fn foo(&amp;self) /* ... */\n}\n</code></pre>\n\n<p>Note that <code>Never</code> is an empty enum, indicating that these implementations never fail. In order to comply with the trait definitions, <code>From&lt;Never&gt;</code> is implemented for <code>MyError</code>.</p>\n\n<p>We can now demonstrate the problem: the following compiles like charm.</p>\n\n<pre><code>let x = vec![1, 2, 3];\nlet _ = x.foo();\n</code></pre>\n\n<p>But the following des not.</p>\n\n<pre><code>let x = vec![1, 2, 3];\nlet _ = Foo::foo(&amp;x);\n</code></pre>\n\n<p>The error messages says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;std::vec::Vec&lt;i32&gt; as Foo&gt;::FooError == MyError`\n  --&gt; src/main.rs:49:13\n   |\n49 |     let _ = Foo::foo(&amp;x);\n   |             ^^^^^^^^ expected enum `Never`, found struct `MyError`\n   |\n   = note: expected type `Never`\n              found type `MyError`\n</code></pre>\n\n<p>The compiler seems to believe that I wrote something like this (NB: this is not correct Rust, but just to give the idea).</p>\n\n<pre><code>let _ = Foo::&lt;FooError=MyError&gt;::foo(&amp;x);\n</code></pre>\n\n<p>And this does not work because <code>x</code> implements <code>Foo&lt;FooError=Never&gt;</code>.</p>\n\n<p>Why does the compiler adds this additional constraint? Is it a bug? If not, is it possible to write it otherwise so it compiles?</p>\n\n<p>NB: you may wonder why I don't just stick to the first version (<code>x.foo(&amp;x)</code>). In my actual situation, <code>foo</code> is actually named <code>retain</code>, which is also the name of a method in <code>Vec</code>. So I must use the second form, to avoid the ambiguity.</p>\n\n<p>NB2: if I remove the HRTB in the declaration of method <code>foo</code>, both lines compile. But then I can not call <code>Bar::bar</code> in any implementation of <code>Foo::foo</code>, which is not an option for me. And changing <code>foo</code> to something like <code>fn foo&lt;'a&gt;(&amp;'a self) -&gt; Result&lt;(), &lt;Self as Bar&lt;'a&gt;&gt;::BarError)</code> is not an option either, unfortunately.</p>\n"}, {"tags": ["unit-testing", "rust", "macros", "assert", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1568359545, "post_id": 57915353, "comment_id": 102256103, "body": "Wow, that&#39;s a really nice display for the diff; the library (or version) I use is not nearly as nice, I&#39;ll need to switch/upgrade!"}, {"owner": {"reputation": 3782, "user_id": 751533, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/c991993ee238fbae918f93f46edac3cd?s=128&d=identicon&r=PG", "display_name": "David Sanders", "link": "https://stackoverflow.com/users/751533/david-sanders"}, "edited": false, "score": 0, "creation_date": 1568405310, "post_id": 57915353, "comment_id": 102277063, "body": "This is useful but, as it turns out, it doesn&#39;t work for my original question.  I&#39;m looking for a line diff when two strings aren&#39;t equal, not a character diff of two debug representations when two values aren&#39;t equal.  With <code>pretty_assertions</code>, I get a big mess when two strings are diffed because newlines show up as &quot;\\n&quot; escape sequences."}], "tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": false, "score": 6, "last_activity_date": 1568329480, "last_edit_date": 1568329480, "creation_date": 1568328534, "answer_id": 57915353, "question_id": 57915265, "link": "https://stackoverflow.com/questions/57915265/is-it-possible-for-the-assert-eq-macro-to-show-a-diff-when-two-strings-arent-eq/57915353#57915353", "title": "Is it possible for the assert_eq macro to show a diff when two strings aren&#39;t equal?", "body": "<p>Yes, but not with the <code>assert_eq</code> macro provided by the standard library<sup>&dagger;</sup>.  You could use the <a href=\"https://crates.io/crates/pretty_assertions\" rel=\"noreferrer\"><code>pretty_assertions</code></a> crate which was designed to do exactly what you are looking for.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/colin-kiegel/rust-pretty-assertions/master/examples/pretty_assertion.png\" alt=\"diff\"></p>\n\n<hr>\n\n<p><sup>&dagger;</sup> Actually, the built-in macro could take more than two arguments to provide more information about the assertion by extending it with a custom message.  So technically, if you provide some sort of diff'ing implementation yourself or an external one, which is either <code>Display</code> or <code>Debug</code>, you could then pass it to the macro.  Strictly speaking in some ways this macro is also usable for such a thing.</p>\n"}, {"tags": [], "owner": {"reputation": 3782, "user_id": 751533, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/c991993ee238fbae918f93f46edac3cd?s=128&d=identicon&r=PG", "display_name": "David Sanders", "link": "https://stackoverflow.com/users/751533/david-sanders"}, "is_accepted": false, "score": 3, "last_activity_date": 1568405545, "creation_date": 1568405545, "answer_id": 57929832, "question_id": 57915265, "link": "https://stackoverflow.com/questions/57915265/is-it-possible-for-the-assert-eq-macro-to-show-a-diff-when-two-strings-arent-eq/57929832#57929832", "title": "Is it possible for the assert_eq macro to show a diff when two strings aren&#39;t equal?", "body": "<p>See the update in my post as to why <code>pretty_assertions</code> doesn't quite work for my particular problem.  Instead, I ended up just using the <code>difference</code> library that <code>pretty_assertions</code> uses internally.  I just made a wrapper struct for <code>difference::Changeset</code> so that I could override its <code>fmt::Display</code> implementation:</p>\n\n<pre><code>fn prefix_lines(prefix: &amp;str, lines: &amp;str) -&gt; String {\n    lines\n        .lines()\n        .map(|i| [prefix, i].concat())\n        .collect::&lt;Vec&lt;String&gt;&gt;()\n        .join(\"\\n\")\n}\n\npub struct Diff(difference::Changeset);\n\nimpl Diff {\n    pub fn new(left: &amp;str, right: &amp;str) -&gt; Self {\n        Self(difference::Changeset::new(left, right, \"\\n\"))\n    }\n}\n\nimpl fmt::Display for Diff {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        for d in &amp;self.0.diffs {\n            match *d {\n                difference::Difference::Same(ref x) =&gt; {\n                    write!(f, \"{}{}\", prefix_lines(\" \", x), self.0.split)?;\n                }\n                difference::Difference::Add(ref x) =&gt; {\n                    write!(f, \"\\x1b[92m{}\\x1b[0m{}\", prefix_lines(\"+\", x), self.0.split)?;\n                }\n                difference::Difference::Rem(ref x) =&gt; {\n                    write!(f, \"\\x1b[91m{}\\x1b[0m{}\", prefix_lines(\"-\", x), self.0.split)?;\n                }\n            }\n        }\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>Then I just have a macro, as in the <code>pretty_assertions</code> implementation, that creates an instance of that struct and string formats it inside of a panic message when the assertion fails.</p>\n"}], "owner": {"reputation": 3782, "user_id": 751533, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/c991993ee238fbae918f93f46edac3cd?s=128&d=identicon&r=PG", "display_name": "David Sanders", "link": "https://stackoverflow.com/users/751533/david-sanders"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 458, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1568405545, "creation_date": 1568327549, "last_edit_date": 1568405195, "question_id": 57915265, "link": "https://stackoverflow.com/questions/57915265/is-it-possible-for-the-assert-eq-macro-to-show-a-diff-when-two-strings-arent-eq", "title": "Is it possible for the assert_eq macro to show a diff when two strings aren&#39;t equal?", "body": "<p>I'm writing some tests for a language tokenizer and I'm comparing a JSON-serialized version of the tokenization produced by the tokenizer with a serialization of a known-good tokenization.  So I have some tests like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[test]\nfn test_tokenize() {\n    let actual_token_json = /* string */;\n    let expected_token_json = /* string */;\n\n    assert_eq!(actual_token_json, expected_token_json);\n}\n</code></pre>\n\n<p>However, when those tests fail, <code>cargo test</code> just says that the JSON strings weren't equal and prints them both out, which isn't that useful.  Since the JSON strings are both pretty-printed, it would be more helpful if <code>cargo test</code> printed out a line diff of the two strings.  Is there any way I could do this?</p>\n\n<p><strong><em>Update</em></strong>:\nSomeone edited the title of this post but deleted an important piece of information: I'm looking for a <em>line</em> diff when <em>two strings</em> aren't equal.  One of the answers I'm seeing here is for the more general question of getting a <em>line <strong>and</strong> character</em> diff of the debug representations of two values when they're not equal.  That's either more than I need or not what I need.  For example, the diff of the debug representations of two strings won't give me a line diff but a large, convoluted character diff (since the lines show up in the debug representation as escaped \"\\n\" tokens).</p>\n"}, {"tags": ["rust", "streaming", "nom"], "answers": [{"tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": true, "score": 0, "last_activity_date": 1568659135, "creation_date": 1568659135, "answer_id": 57962650, "question_id": 57914504, "link": "https://stackoverflow.com/questions/57914504/parsing-number-with-nom-5-0/57962650#57962650", "title": "Parsing number with nom 5.0", "body": "<p>One can argue that the test in its original form is correct: The parser can't decide whether the given input is a number or not, so the parsing-result is in fact undecided yet. In production, especially when reading large files as you do, the buffer of already-read-but-to-be-parsed bytes might end right in between what <em>could</em> be a number unless it's actually not. Then, the parser needs to preserve its current state and ask for more input so it can retry/continue. Think of <code>Incomplete</code> not as a final error but as <code>I don't even know: This could be an error depending on the next byte, this problem is undecidable as of yet!</code>.</p>\n\n<p>You can use the <a href=\"https://docs.rs/nom/5.0.1/nom/combinator/fn.complete.html\" rel=\"nofollow noreferrer\"><code>complete</code>-combinator</a> <em>on your top-level parser</em> so when you do in fact reach <code>EOF</code>, you error out on that. <code>Incomplete</code>-results <em>within</em> the top-level parser should be handled e.g. by expanding the read-buffer by some margin and retrying.</p>\n\n<p>You can wrap the parser in a <code>complete()</code>-parser local to the current unittest and test on that. Something to the tune of</p>\n\n<pre><code>#[test]\nfn match_positive_integer() {\n    let (_, res) = complete(number(\"0\")).unwrap();\n    assert_eq!(\"0\", res);\n}\n</code></pre>\n"}], "owner": {"reputation": 2012, "user_id": 205674, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/32a2b57f8035456fd763cbb2610c8f58?s=128&d=identicon&r=PG", "display_name": "Bittrance", "link": "https://stackoverflow.com/users/205674/bittrance"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 476, "favorite_count": 0, "accepted_answer_id": 57962650, "answer_count": 1, "score": 1, "last_activity_date": 1568659135, "creation_date": 1568322359, "question_id": 57914504, "link": "https://stackoverflow.com/questions/57914504/parsing-number-with-nom-5-0", "title": "Parsing number with nom 5.0", "body": "<p>I'm trying to parse a large file (tens of GB) streaming using Nom 5.0. One piece of the parser tries to parse numbers:</p>\n\n<pre><code>use nom::IResult;\nuse nom::character::streaming::{char, digit1};\n// use nom::character::complete::{char, digit1};\nuse nom::combinator::{map, opt};\nuse nom::multi::many1;\nuse nom::sequence::{preceded, tuple};\n\npub fn number(input: &amp;str) -&gt; IResult&lt;&amp;str, &amp;str&gt; {\n    map(\n        tuple((\n            opt(char('-')),\n            many1(digit1),\n            opt(preceded(char('.'), many1(digit1)))\n        )),\n        |_| \"0\"\n    )(input)\n}\n</code></pre>\n\n<p>(Obviously, it should not return \"0\" for all number; that's just to make the function as simple as possible.) For this parser, I wrote a test:</p>\n\n<pre><code>#[test]\nfn match_positive_integer() {\n    let (_, res) = number(\"0\").unwrap();\n    assert_eq!(\"0\", res);\n}\n</code></pre>\n\n<p>This test fails with <code>Incomplete(Size(1))</code> because the \"decimals\" <code>opt()</code> wants to read data and it isn't there. If I switch to the <code>complete</code> versions of the matchers (as commented-out line), the test passes.</p>\n\n<p>I assume this will actually work in production, because it will be fed additional data when complaining about incompleteness, but I would still like to create unit tests. Additionally, the issue would occur in production if a number happened to be the very last bit of input in a file. How do I convince a streaming Nom parser that there is no more data available?</p>\n"}, {"tags": ["c", "multithreading", "rust", "multiprocessing", "fork"], "comments": [{"owner": {"reputation": 663663, "user_id": 15168, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/WtEI9.png?s=128&g=1", "display_name": "Jonathan Leffler", "link": "https://stackoverflow.com/users/15168/jonathan-leffler"}, "edited": false, "score": 0, "creation_date": 1568324959, "post_id": 57913789, "comment_id": 102248549, "body": "In C, you\u2019d probably use shared memory.  I don\u2019t know whether Rust supports that."}, {"owner": {"reputation": 8402, "user_id": 4664415, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hsfxj.jpg?s=128&g=1", "display_name": "mevets", "link": "https://stackoverflow.com/users/4664415/mevets"}, "edited": false, "score": 1, "creation_date": 1568325786, "post_id": 57913789, "comment_id": 102248746, "body": "Is servo/ipc_channel insufficient?"}, {"owner": {"reputation": 27648, "user_id": 9952196, "user_type": "registered", "profile_image": "https://graph.facebook.com/10216835866235879/picture?type=large", "display_name": "Shawn", "link": "https://stackoverflow.com/users/9952196/shawn"}, "edited": false, "score": 2, "creation_date": 1568326167, "post_id": 57913789, "comment_id": 102248838, "body": "<code>fork()</code> creates new <b>processes</b>, not <b>threads</b>. If you want global state between processes, you have to use shared memory or another IPC mechanism."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568327297, "post_id": 57913789, "comment_id": 102249078, "body": "<a href=\"https://docs.rs/shared_memory/0.8.2/shared_memory/\" rel=\"nofollow noreferrer\"><code>shared_memory</code></a> is what you&#39;re looking for."}, {"owner": {"reputation": 8002, "user_id": 1143850, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2927fac544c9960cd5433688fe4cae1d?s=128&d=identicon&r=PG", "display_name": "Serge", "link": "https://stackoverflow.com/users/1143850/serge"}, "edited": false, "score": 0, "creation_date": 1568335509, "post_id": 57913789, "comment_id": 102250544, "body": "the example you provided only demonstrated that you are not familiar with how <code>fork</code> works.  What exactly do you want from your program?"}, {"owner": {"reputation": 846, "user_id": 4284268, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/30b644609ddad0c9648857d5c04cdb3b?s=128&d=identicon&r=PG&f=1", "display_name": "usbpc102", "link": "https://stackoverflow.com/users/4284268/usbpc102"}, "edited": false, "score": 0, "creation_date": 1568353021, "post_id": 57913789, "comment_id": 102253735, "body": "Yes I don\u2019t really know much about C and not much about systems programming. I come from kotlin/jvm and python. For me a global means that within one application everything that accesses this global access the same thing. Here that would mean only initializing my lazy static once."}], "owner": {"reputation": 846, "user_id": 4284268, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/30b644609ddad0c9648857d5c04cdb3b?s=128&d=identicon&r=PG&f=1", "display_name": "usbpc102", "link": "https://stackoverflow.com/users/4284268/usbpc102"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 125, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1568321181, "creation_date": 1568318588, "last_edit_date": 1568321181, "question_id": 57913789, "link": "https://stackoverflow.com/questions/57913789/global-state-across-forked-processes", "title": "global state across forked processes", "body": "<p>I have to write a plugin for an C application. I want to do that in rust. The problem that I'm facing is that the C application uses <code>fork()</code> for multithreading and that my knowledge about how multithreading with fork and shared memory and so on works on a lower level.</p>\n\n<p>What I'm trying to achive is to have one GLOBAL state that needs to be a bit mutable in the end. I want use an globally accessable <a href=\"https://crates.io/crates/evmap\" rel=\"nofollow noreferrer\">evmap</a> ReadHandleFactory that gives access to some <a href=\"https://crates.io/crates/ssh2\" rel=\"nofollow noreferrer\">libssh2</a> connections, to get some information from a ssh server. For writing to the evmap I was planning on <a href=\"https://doc.rust-lang.org/std/thread/\" rel=\"nofollow noreferrer\">spawning my own rust thread</a>. And sending messages to it throug a  <a href=\"https://docs.rs/crossbeam/0.7.2/crossbeam/\" rel=\"nofollow noreferrer\">crossbeam</a> channel.</p>\n\n<p>The problem boils down that for rust every process that was created by a fork is like it's executing on it's own and like all other processes don't exist. Demonstrated with the following code:</p>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"cinteroptest\"\nversion = \"0.1.0\"\nauthors = [\"usbpc\"]\nedition = \"2018\"\n\n[lib]\nname = \"cinteroptest\"\ncrate-type = [\"cdylib\"]\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nlibc = \"0.2.62\"\nlazy_static = \"1.4.0\"\n</code></pre>\n\n<p>Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[marco_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref TEST: u32 = init();\n}\n\nfn init() -&gt; u32 {\n    println!(\"Initializing!\");\n    5\n}\n\n#[no_mangle]\nextern \"C\" fn foo() {\n    println!(\"Hello world! {}\", *TEST)\n}\n</code></pre>\n\n<p>C:</p>\n\n<pre><code>#include &lt;dlfcn.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;    \n\ntypedef void *foo();\n\nint main() {\n    void *myso = dlopen(\"./libcinteroptest.so\", RTLD_NOW);\n    foo *func = dlsym(myso, \"foo\");\n    fork();\n    func();\n    return 0;\n}\n</code></pre>\n\n<p>To compile the C code:</p>\n\n<pre><code>gcc test.c -ldl\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Initializing!\nInitializing!\nHello world! 5\nHello world! 5\n</code></pre>\n\n<p>Is there a way for easy global state in rust in these circumstances?</p>\n"}, {"tags": ["rust", "spreadsheet"], "owner": {"reputation": 11, "user_id": 11147459, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-bt4LeJan-tM/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3reD-mnYmVtrojKG1uDNoNKWVQxeRw/mo/photo.jpg?sz=128", "display_name": "Syed Kamran", "link": "https://stackoverflow.com/users/11147459/syed-kamran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 35, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1568312299, "creation_date": 1568312299, "question_id": 57912467, "link": "https://stackoverflow.com/questions/57912467/how-to-extract-value-of-a-cell-using-spsheet-carate", "title": "How to extract value of a cell using spsheet carate", "body": "<p>I wanted to extract cell values of spread sheet in rust using \"spsheets\" crate. Please help me how to do that</p>\n\n<pre><code>   extern crate spsheet;\n   use spsheet::ods;\n   use spsheet::{Book,Sheet,Cell};\n   use spsheet::style::Style;\n   use std::path::Path;\n\n   fn main() {\n\n    let work_book=ods::read(Path::new(\"tests/DailyRoutine.ods\")).\n    unwrap();\n    let  sheet= work_book.get_sheet(0);\n\n    println!(\"Sheet Name: {}\", sheet.get_name());\n    println!(\"Number of Rows: {}\",   sheet.get_rows().len());\n\n    let cel = sheet.get_cell(0,0);\n\n    for i in 0..sheet.get_rows().len(){\n    enter code here\n       let cell=  sheet.get_cell(i,0);\n        println!(\"Contnest of Row[{}.{}] {:?} \",i, 0, cell);\n     }\n\n   }\n</code></pre>\n"}, {"tags": ["c#", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 65, "user_id": 5800159, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8234a49ff03a614c85c8b812d9b1987d?s=128&d=identicon&r=PG&f=1", "display_name": "Martin Smith", "link": "https://stackoverflow.com/users/5800159/martin-smith"}, "edited": false, "score": 0, "creation_date": 1568316718, "post_id": 57912629, "comment_id": 102245871, "body": "Got an rrror when I tried to run my test involving <code>Marshal.StructureToPtr()</code>   System.ArgumentNullException : Value cannot be null. Parameter name: ptr"}, {"owner": {"reputation": 28373, "user_id": 5015238, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8790f8091d3c6c58fd45664a165117a?s=128&d=identicon&r=PG", "display_name": "jdweng", "link": "https://stackoverflow.com/users/5015238/jdweng"}, "reply_to_user": {"reputation": 65, "user_id": 5800159, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8234a49ff03a614c85c8b812d9b1987d?s=128&d=identicon&r=PG&f=1", "display_name": "Martin Smith", "link": "https://stackoverflow.com/users/5800159/martin-smith"}, "edited": false, "score": 0, "creation_date": 1568323436, "post_id": 57912629, "comment_id": 102248146, "body": "You need to add items to the array before calling the method.  I set it to null to remove the compiler errors."}], "tags": [], "owner": {"reputation": 28373, "user_id": 5015238, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8790f8091d3c6c58fd45664a165117a?s=128&d=identicon&r=PG", "display_name": "jdweng", "link": "https://stackoverflow.com/users/5015238/jdweng"}, "is_accepted": false, "score": 0, "last_activity_date": 1568312992, "creation_date": 1568312992, "answer_id": 57912629, "question_id": 57912335, "link": "https://stackoverflow.com/questions/57912335/how-do-i-get-rust-ffi-to-return-array-of-structs-or-update-memory/57912629#57912629", "title": "How do I get Rust FFI to return array of structs or update memory?", "body": "<p>Try following :</p>\n\n<pre><code>    [StructLayout(LayoutKind.Sequential)]\n    public struct Item\n    {\n        [MarshalAs(UnmanagedType.AnsiBStr)]\n        public string id;\n        [MarshalAs(UnmanagedType.AnsiBStr)]\n        public string name;\n        public uint variation;\n        public uint category;\n        public uint quality;\n    }\n\n    public class Inventory {\n\n\n\n        [DllImport(\"stuff\")]\n        [System.Security.SecurityCritical]\n        private static extern void ffi_sort_inventory(uint length, IntPtr items);\n\n        public void sort_inventory()\n        {\n             Item[] items = null;\n             IntPtr itemsPtr =  IntPtr.Zero;\n            Marshal.StructureToPtr(items, itemsPtr, true);\n            ffi_sort_inventory((uint) items.Length, itemsPtr);\n\n        } \n    }\n</code></pre>\n"}], "owner": {"reputation": 65, "user_id": 5800159, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8234a49ff03a614c85c8b812d9b1987d?s=128&d=identicon&r=PG&f=1", "display_name": "Martin Smith", "link": "https://stackoverflow.com/users/5800159/martin-smith"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 467, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1568313025, "creation_date": 1568311635, "last_edit_date": 1568313025, "question_id": 57912335, "link": "https://stackoverflow.com/questions/57912335/how-do-i-get-rust-ffi-to-return-array-of-structs-or-update-memory", "title": "How do I get Rust FFI to return array of structs or update memory?", "body": "<p>Currently learning to use Rust FFI with C# and one of the of my problems at the moment is working with an array of struct <code>Item[]</code>.</p>\n\n<p>What I'm trying to achieve is <code>C# =&gt; Rust =&gt; C#</code> I've been able to get the array into Rust and perform some operations on the data. What I'm stuck on is getting the result of saying a sorted Array from Rust back out to C#.</p>\n\n<p>So what I assumed was that I could modify the memory directly from C# in Rust using pointers. However, despite being able to slice the data from the ptr and then sort the array in Rust, the result didn't propagate back into the C# scope.</p>\n\n<p>I've also tried returning the array back to C# a return value, but my current knowledge of working with pointers from Rust back to C# is lacking, and I imagine it slightly more complicated since its a pointer to an array of struct.</p>\n\n<p>Here a gist to a more flush out example. \n<a href=\"https://gist.github.com/Ostoyae/4511448776a4e54c0b4077883e761f11\" rel=\"nofollow noreferrer\">https://gist.github.com/Ostoyae/4511448776a4e54c0b4077883e761f11</a></p>\n\n<p>lib.rs</p>\n\n<pre><code>#[repr(C)]\n#[derive(Eq, PartialEq)]\npub struct Item {\n    id: *const c_char,\n    name: *const c_char,\n    variation: u32,\n    category: u32,\n    quality: u32,\n}\n\n#[no_mangle]\npub extern \"C\" fn ffi_sort_inventory(length: u32, array_ptr: *mut Item) {\n    let items: &amp;mut [Item] = unsafe {\n        assert!(!array_ptr.is_null());\n        std::slice::from_raw_parts_mut(array_ptr, length as usize)\n    }; \n        // some sorting to items //\n}\n\n</code></pre>\n\n<p>rust_ffi.cs</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>\n[StructLayout(LayoutKind.Sequential)]\n    public struct Item\n    {\n        public string id;\n        public string name;\n        public uint variation;\n        public uint category;\n        public uint quality;\n    }\n\npublic class Inventory {\n        private Item[] items;\n\n        [DllImport(\"stuff\")]\n        [System.Security.SecurityCritical]\n        private static extern void ffi_sort_inventory(uint length, Item[] items);\n\n        public void sort_inventory()\n        {\n            ffi_sort_inventory((uint) Items.Length, this.items);\n\n            WriteLine(items);\n        }\n    }\n}\n\n</code></pre>\n\n<p>What I would hope the best case is to modify the array that already exists in memory by using a pointer instead of returning newly allocated memory. But i would also appreciate seeing both solutions.</p>\n\n<p>Thanks.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1568315776, "post_id": 57912253, "comment_id": 102245536, "body": "I&#39;m not sure what&#39;s going on, but I think if you try to explicitly specify the relation between the lifetimes in your closure (e.g. <code>|x: &amp;&#39;d mut X&lt;&#39;e&gt;|</code>) and the lifetime <code>&#39;c</code> from eggs, you might get more helpful error messages?"}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1568316156, "post_id": 57912253, "comment_id": 102245663, "body": "for instance it compiles if the lifetimes for the input to the closure are tied to <code>&#39;c</code>. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9e001465257bf84aaa4da7ca06a5b7fa\" rel=\"nofollow noreferrer\">Playground Link</a>"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1568316656, "post_id": 57912253, "comment_id": 102245842, "body": "In general, with lifetimes, less is more. Pay attention to the lifetimes that you actually need to be the same. e.g. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2960108ebd48136d641d17d14258a615\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "edited": false, "score": 0, "creation_date": 1568317942, "post_id": 57912253, "comment_id": 102246292, "body": "Well, some of the lifetimes can be removed from the example because it is simplified.  I could add a couple of dozen more lines to make the motivation for the lifetimes a little clearer.  Maybe I&#39;ll do that."}], "answers": [{"comments": [{"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1568324545, "post_id": 57914537, "comment_id": 102248443, "body": "related: <a href=\"https://stackoverflow.com/questions/34704612/is-there-a-way-to-obtain-elided-lifetime-parameters-from-the-rust-compiler\" title=\"is there a way to obtain elided lifetime parameters from the rust compiler\">stackoverflow.com/questions/34704612/&hellip;</a>"}], "tags": [], "owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "is_accepted": false, "score": 0, "last_activity_date": 1568322511, "creation_date": 1568322511, "answer_id": 57914537, "question_id": 57912253, "link": "https://stackoverflow.com/questions/57912253/how-do-i-work-around-closures-causing-errore0495-cannot-infer-an-appropriate/57914537#57914537", "title": "How do I work around closures causing error[E0495]: cannot infer an appropriate lifetime", "body": "<p>I was able to get the code to compile by replacing the declarations of the form <code>&amp;'b mut X&lt;'b&gt;</code> with <code>&amp;'z mut X&lt;'b&gt;</code> , basically decoupling the lifetime of the reference from the lifetime of the field inside X.</p>\n\n<p>Another important change was to remove all lifetimes from the <code>eggs()</code> function.  This actually raises its own question:  Is it possible to explcitly declare the lifetimes in the eggs function and still get it to compile?  I have made a few clumsy attempts and ended up with <code>[E0502]: cannot borrow</code>*x<code>as immutable because it is also borrowed as mutable</code> which confirms there are subtleties I do not yet understand. </p>\n\n<p>The patch looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>@@ -7,13 +7,13 @@\n\n impl&lt;'c&gt; X&lt;'c&gt;\n {\n-    pub fn wrap&lt;'a:'c,'b:'c&gt; (prefix:&amp;'a str, base: &amp;'b mut X&lt;'b&gt;) -&gt;X&lt;'c&gt;\n+    pub fn wrap&lt;'a:'c,'b:'c,'z:'c&gt; (prefix:&amp;'a str, base: &amp;'z mut X&lt;'b&gt;) -&gt;X&lt;'c&gt;\n     {\n         return X::&lt;'c&gt; {\n             maybe_file: Some(Box::new(X::wrapper(prefix, base))),\n         }\n     }\n-    pub fn wrapper&lt;'a, 'b&gt;(prefix:&amp;'a str, base:&amp;'b mut X&lt;'b&gt;) -&gt; Wrapper&lt;'a,'b&gt;\n+    pub fn wrapper&lt;'a, 'b, 'z&gt;(prefix:&amp;'a str, base:&amp;'z mut X&lt;'b&gt;) -&gt; Wrapper&lt;'a,'b, 'z&gt;\n     {\n         Wrapper {\n             prefix:prefix, base:base\n@@ -25,13 +25,13 @@\n\n //\n\n-pub struct Wrapper&lt;'a,'b&gt;\n+pub struct Wrapper&lt;'a,'b, 'z&gt;\n {\n     pub prefix: &amp;'a str,\n-    pub base: &amp;'b X&lt;'b&gt;,\n+    pub base: &amp;'z X&lt;'b&gt;,\n }\n\n-impl&lt;'a,'b&gt; Write for Wrapper&lt;'a,'b&gt;\n+impl&lt;'a,'b,'z&gt; Write for Wrapper&lt;'a,'b,'z&gt;\n {\n     fn write(&amp;mut self, buf:&amp;[u8]) -&gt;Result&lt;usize, std::io::Error&gt; { Ok(0) }\n     fn flush(&amp;mut self) -&gt;Result&lt;(), std::io::Error&gt; { Ok(()) }\n@@ -43,7 +43,7 @@\n\n }\n\n-pub fn eggs&lt;'c&gt;(x:&amp;'c mut X&lt;'c&gt;, scale:f32)\n+pub fn eggs(x:&amp; mut X, scale:f32)\n {\n     bacon( &amp; mut X::wrap(\"A:\\t\", x), scale);\n\n@@ -53,5 +53,7 @@\n\n     f(x);\n\n+    x.boop_the_snoot();\n+\n     f(x);\n }\n</code></pre>\n\n<p>And the complete \"fixed\" source code is </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::Write;\n\npub struct X&lt;'c&gt;\n{\n    maybe_file: Option&lt;Box&lt;dyn Write+'c&gt;&gt;,\n}\n\nimpl&lt;'c&gt; X&lt;'c&gt;\n{\n    pub fn wrap&lt;'a:'c,'b:'c,'z:'c&gt; (prefix:&amp;'a str, base: &amp;'z mut X&lt;'b&gt;) -&gt;X&lt;'c&gt;\n    {\n        return X::&lt;'c&gt; {\n            maybe_file: Some(Box::new(X::wrapper(prefix, base))),\n        }\n    }\n    pub fn wrapper&lt;'a, 'b, 'z&gt;(prefix:&amp;'a str, base:&amp;'z mut X&lt;'b&gt;) -&gt; Wrapper&lt;'a,'b, 'z&gt;\n    {\n        Wrapper {\n            prefix:prefix, base:base\n        }\n    }\n\n    pub fn boop_the_snoot(&amp;self) {}\n}\n\n//\n\npub struct Wrapper&lt;'a,'b, 'z&gt;\n{\n    pub prefix: &amp;'a str,\n    pub base: &amp;'z X&lt;'b&gt;,\n}\n\nimpl&lt;'a,'b,'z&gt; Write for Wrapper&lt;'a,'b,'z&gt;\n{\n    fn write(&amp;mut self, buf:&amp;[u8]) -&gt;Result&lt;usize, std::io::Error&gt; { Ok(0) }\n    fn flush(&amp;mut self) -&gt;Result&lt;(), std::io::Error&gt; { Ok(()) }\n}\n\n\npub fn bacon(x:&amp;mut X, scale:f32)\n{\n\n}\n\npub fn eggs(x:&amp; mut X, scale:f32)\n{\n    bacon( &amp; mut X::wrap(\"A:\\t\", x), scale);\n\n    let f = |x:&amp;mut X| {\n        bacon(&amp; mut X::wrap(\"B:\\t\", x), scale);\n    };\n\n    f(x);\n\n    x.boop_the_snoot();\n\n    f(x);\n}\n</code></pre>\n\n<p>So, this is basically half an answer: the code compiles and I can continue with my project using this pattern; However it relies on the rust compiler to do some lifetime inferences while compiling eggs().  What would the code look like if we were to annotate eggs() with lifetime information that matches what the compiler infers?  The answer to that would be educational.</p>\n"}], "owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 89, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1568322511, "creation_date": 1568311295, "last_edit_date": 1568321659, "question_id": 57912253, "link": "https://stackoverflow.com/questions/57912253/how-do-i-work-around-closures-causing-errore0495-cannot-infer-an-appropriate", "title": "How do I work around closures causing error[E0495]: cannot infer an appropriate lifetime", "body": "<p>I have this \"simplified\" code to demonstrate a problem I am having with a more complicated project.</p>\n\n<p>I have created a closure to capture some parameters so I can invoke a small function in two places without repeating the code.  Unfortunately, lifetimes are now involved, and I am having difficulty understanding what exactly has the compiler confused:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::Write;\n\npub struct X&lt;'c&gt;\n{\n    maybe_file: Option&lt;Box&lt;dyn Write+'c&gt;&gt;,\n}\n\nimpl&lt;'c&gt; X&lt;'c&gt;\n{\n    pub fn wrap&lt;'a:'c,'b:'c&gt; (prefix:&amp;'a str, base: &amp;'b mut X&lt;'b&gt;) -&gt;X&lt;'c&gt;\n    {\n        return X::&lt;'c&gt; {\n            maybe_file: Some(Box::new(X::wrapper(prefix, base))),\n        }\n    }\n    pub fn wrapper&lt;'a, 'b&gt;(prefix:&amp;'a str, base:&amp;'b mut X&lt;'b&gt;) -&gt; Wrapper&lt;'a,'b&gt;\n    {\n        Wrapper {\n            prefix:prefix, base:base\n        }\n    }\n\n    pub fn boop_the_snoot(&amp;self) {}\n}\n\n//\n\npub struct Wrapper&lt;'a,'b&gt;\n{\n    pub prefix: &amp;'a str,\n    pub base: &amp;'b X&lt;'b&gt;,\n}\n\nimpl&lt;'a,'b&gt; Write for Wrapper&lt;'a,'b&gt;\n{\n    fn write(&amp;mut self, buf:&amp;[u8]) -&gt;Result&lt;usize, std::io::Error&gt; { Ok(0) }\n    fn flush(&amp;mut self) -&gt;Result&lt;(), std::io::Error&gt; { Ok(()) }\n}\n\n\npub fn bacon(x:&amp;mut X, scale:f32)\n{\n\n}\n\npub fn eggs&lt;'c&gt;(x:&amp;'c mut X&lt;'c&gt;, scale:f32)\n{\n    bacon( &amp; mut X::wrap(\"A:\\t\", x), scale);\n\n    let f = |x:&amp; mut X| {\n        bacon(&amp; mut X::wrap(\"B:\\t\", x), scale);\n    };\n\n    f(x);\n\n    f(x);\n}\n</code></pre>\n\n<p>This gives me the following compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n  --&gt; /home/thoth/src/embroidery/filler/src/lifetimes_shenanigans.rs:68:19\n   |\n68 |       bacon(&amp; mut X::wrap(\"B:\\t\", x), scale);\n   |                   ^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 67:13...\n  --&gt; /home/thoth/src/embroidery/filler/src/lifetimes_shenanigans.rs:67:13\n   |\n67 |       let f = |x:&amp;mut X| {\n   |  _____________^\n68 | |       bacon(&amp; mut X::wrap(\"B:\\t\", x), scale);\n69 | |     };\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; /home/thoth/src/embroidery/filler/src/lifetimes_shenanigans.rs:68:35\n   |\n68 |       bacon(&amp; mut X::wrap(\"B:\\t\", x), scale);\n   |                                   ^\nnote: but, the lifetime must be valid for the anonymous lifetime #2 defined on the body at 67:13...\n  --&gt; /home/thoth/src/embroidery/filler/src/lifetimes_shenanigans.rs:67:13\n   |\n67 |       let f = |x:&amp;mut X| {\n   |  _____________^\n68 | |       bacon(&amp; mut X::wrap(\"B:\\t\", x), scale);\n69 | |     };\n   | |_____^\n   = note: ...so that the expression is assignable:\n           expected &amp;mut lifetimes_shenanigans::X&lt;'_&gt;\n              found &amp;mut lifetimes_shenanigans::X&lt;'_&gt;\n</code></pre>\n\n<p>What sort of lifetime crimes is this logic protecting me from?\nWhat should I add to this code to enable the rust compiler to understand the lifetimes of the various objects?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1, "user_id": 12059729, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/062ce855f4ed063077014a9f7a93d371?s=128&d=identicon&r=PG&f=1", "display_name": "Christy Haragan", "link": "https://stackoverflow.com/users/12059729/christy-haragan"}, "is_accepted": false, "score": 0, "last_activity_date": 1568317329, "creation_date": 1568317329, "answer_id": 57913530, "question_id": 57912202, "link": "https://stackoverflow.com/questions/57912202/rust-benching-built-in-sort-from-slice-vs-compiled-sort-code-gives-x16-differen/57913530#57913530", "title": "Rust: Benching built-in sort from Slice vs compiled sort code gives x16 difference?", "body": "<p>Ahh, I figured out my mistake.</p>\n\n<p>Each iteration of the benchmark, I'm passing the same array into the sort function. First iteration, the sort actually does its job, but the built-in sort function has a quick-exit if the array is already sorted (so for 99 of the 100 iterations, the built-in is just quitting early). The code I copied was just the quicksort/heapsort, without the quick-exit check. The other sort algorithms I was testing, also did not have a quick-exit.</p>\n"}], "owner": {"reputation": 1, "user_id": 12059729, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/062ce855f4ed063077014a9f7a93d371?s=128&d=identicon&r=PG&f=1", "display_name": "Christy Haragan", "link": "https://stackoverflow.com/users/12059729/christy-haragan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 87, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1568317329, "creation_date": 1568311086, "question_id": 57912202, "link": "https://stackoverflow.com/questions/57912202/rust-benching-built-in-sort-from-slice-vs-compiled-sort-code-gives-x16-differen", "title": "Rust: Benching built-in sort from Slice vs compiled sort code gives x16 difference?", "body": "<p>I was looking to run some benchmarks on sort algorithms written in Rust (benchmarking is using Criterion and cargo bench). When I compared the compiled versions vs the built-in sort(), I saw an order of magnitude difference in speed.</p>\n\n<p>My question is: how is the \"out-of-the-box\" sort on slices SO much faster than its exact same code compiled as a library.</p>\n\n<p>To try and compare apples-with-apples, I took the quicksort algorithm from the Rust source code (<a href=\"https://github.com/rust-lang/rust/blob/stable/src/libcore/slice/sort.rs\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/blob/stable/src/libcore/slice/sort.rs</a>). When I compared this directly to the sort() function provided out-of-the-box, I noticed a x16 difference in speed. I also tried playing around with optimisation settings in Cargo.toml, but these didn't make much difference.</p>\n\n<p>My set-up for the test is the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_use]\nextern crate criterion;\nextern crate sort_test;\nextern crate rand;\n\nuse criterion::Criterion;\nuse criterion::BenchmarkId;\nuse rand::prelude::*;\n\nuse sort_test::rust_libcore::{heapsort, quicksort};\n\npub fn criterion_benchmark(c: &amp;mut Criterion) {\n  let mut group = c.benchmark_group(\"sort\");\n\n  let mut rng = thread_rng();\n\n  for j in 0..10 {\n  let mut arr_A: [u8; 160] = [0; 160];\n  let mut arr_B: [u8; 160] = [0; 160];\n  for i in 0..arr_A.len() {\n    let mut e: u8 = rng.gen();\n    loop {\n      let mut is_unique = true;\n      for j in 0..i {\n        if arr_A[j] == e {\n          e = rng.gen();\n          is_unique = false;\n          break;\n        }\n      }\n      if is_unique {\n        break;\n      }\n    }\n    arr_A[i] = e;\n    arr_B[i] = e;\n  }\n\n  group.bench_with_input(BenchmarkId::new(\"rust-quicksort\", j), &amp;j, |b, j| b.iter(|| quicksort(&amp;mut arr_A, &amp;mut u8::lt)));\n  group.bench_with_input(BenchmarkId::new(\"rust-heapsort\", j), &amp;j, |b, j| b.iter(|| heapsort(&amp;mut arr_A, &amp;mut u8::lt)));\n  group.bench_with_input(BenchmarkId::new(\"built-in-unstable\", j), &amp;j, |b, j| b.iter(|| arr_C.sort_unstable()));\n  group.bench_with_input(BenchmarkId::new(\"built-in-stable\", j), &amp;j, |b, j| b.iter(|| arr_C.sort()));\n}\n</code></pre>\n\n<p>To summarise, even when comparing (what I understand to be) the actual Rust sort code with the built-in equivalent, I see x16 difference in speed. Why is this? I know benchmarking can be a subtle art, and maybe my benchmark is written incorrectly.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568312583, "post_id": 57911001, "comment_id": 102244293, "body": "that what <a href=\"https://github.com/rust-num/num\" rel=\"nofollow noreferrer\"><code>num</code></a> is for"}, {"owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1568315646, "post_id": 57911001, "comment_id": 102245482, "body": "@Stargateur Unless I&#39;m missing something, num covers the (val,val) situation and then relies on the <code>Copy</code> trait.  Which trait allows all of the different combinations of ref or not?"}], "owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 82, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1568305650, "creation_date": 1568305650, "question_id": 57911001, "link": "https://stackoverflow.com/questions/57911001/how-to-combine-all-operator-overloading-combinations-into-a-single-trait-in-rust", "title": "How to combine all operator overloading combinations into a single trait in Rust?", "body": "<p>Is there a good way to combine all operator overloading combinations into a single trait in Rust?  As discussed, in the question <a href=\"https://stackoverflow.com/questions/38811387/how-to-implement-idiomatic-operator-overloading-for-values-and-references-in-rus\">How to implement idiomatic operator overloading for values and references in Rust?</a>, there are four different combinations for operator overloading binary operators: (ref,ref), (ref,val), (val,ref), and (val,val).  Further, there's a number of macros and such for helping define these routines.  My question is how to require all of these combinations in a sane way through a trait or another mechanism.  Consider the following code that attempts to create an algebra for a general float/real type:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Create some random type that we want to represent as a Real\n#[derive(Debug,Clone)]\nstruct Foo &lt;Real&gt; {\n    x : Real,\n    y : Real,\n}\n\n// Add the algebra for Foo\nimpl &lt;Real&gt; std::ops::Add &lt;&amp;'_ Foo&lt;Real&gt;&gt; for &amp;'_ Foo &lt;Real&gt;\nwhere\n    for &lt;'a&gt; &amp;'a Real : std::ops::Add&lt;&amp;'a Real,Output=Real&gt;\n{\n    type Output = Foo &lt;Real&gt;;\n    fn add(self, other : &amp;'_ Foo &lt;Real&gt;) -&gt; Self::Output {\n        Foo {\n            x : &amp;self.x + &amp;other.x,\n            y : &amp;self.y + &amp;other.y,\n        }\n    }\n}\nimpl &lt;Real&gt; std::ops::Add &lt;Foo&lt;Real&gt;&gt; for &amp;'_ Foo &lt;Real&gt;\nwhere\n    for &lt;'a&gt; &amp;'a Real : std::ops::Add&lt;Real,Output=Real&gt;\n{\n    type Output = Foo &lt;Real&gt;;\n    fn add(self, other : Foo &lt;Real&gt;) -&gt; Self::Output {\n        Foo {\n            x : &amp;self.x + other.x,\n            y : &amp;self.y + other.y,\n        }\n    }\n}\nimpl &lt;Real&gt; std::ops::Add &lt;&amp;'_ Foo&lt;Real&gt;&gt; for Foo &lt;Real&gt;\nwhere\n    for &lt;'a&gt; Real : std::ops::Add&lt;&amp;'a Real,Output=Real&gt;\n{\n    type Output = Foo &lt;Real&gt;;\n    fn add(self, other : &amp;'_ Foo &lt;Real&gt;) -&gt; Self::Output {\n        Foo {\n            x : self.x + &amp;other.x,\n            y : self.y + &amp;other.y,\n        }\n    }\n}\nimpl &lt;Real&gt; std::ops::Add &lt;Foo&lt;Real&gt;&gt; for Foo &lt;Real&gt;\nwhere\n    Real : std::ops::Add&lt;Real,Output=Real&gt;\n{\n    type Output = Foo &lt;Real&gt;;\n    fn add(self, other : Foo &lt;Real&gt;) -&gt; Self::Output {\n        Foo {\n            x : self.x + other.x,\n            y : self.y + other.y,\n        }\n    }\n}\n\n// Compute a function on a slice of Reals.  This should work for f64 and Foo &lt;f64&gt;\nfn foo &lt;Real&gt; (x : &amp;[Real]) -&gt; Real\nwhere\n    for &lt;'a&gt; &amp;'a Real :\n        std::ops::Add&lt;&amp;'a Real,Output=Real&gt; +\n        std::ops::Add&lt;Real,Output=Real&gt; +\n        Clone,\n    for &lt;'a&gt; Real :\n        std::ops::Add&lt;&amp;'a Real,Output=Real&gt; +\n        std::ops::Add&lt;Real,Output=Real&gt; +\n        Clone,\n    Real : Clone\n{\n    (&amp;x[0]+x[1].clone())+&amp;x[2]\n}\n\n// Run foo on two different types\nfn main() {\n    let x = vec![1.2,2.3,3.4];\n    let _x = foo::&lt;f64&gt;(&amp;x);\n    println!(\"{:?}\",_x);\n    let y : Vec &lt;Foo&lt;f64&gt;&gt;= x.into_iter().map(|z|Foo{x:z,y:z+1.0}).collect();\n    let _y = foo::&lt;Foo&lt;f64&gt;&gt;(&amp;y);\n    println!(\"{:?}\",_y);\n}\n</code></pre>\n\n<p>The routine <code>foo</code> places a requirement both on <code>Real</code> and its reference <code>for &lt;'a&gt; &amp;'a Real</code> to complete the algebra.  Now, this is pretty verbose and will only get worse as we add <code>Mul</code>, <code>Div</code>, etc.  I'd like to either have a single trait for <code>Real</code> or at least a single trait for <code>Real</code> and <code>for &lt;'a&gt; &amp;'a Real</code>.  That said, I can't quite figure out a definition for it.  Typically, I'd place all of the definitions in a new trait such as:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait MyFloat :        \n    std::ops::Add &lt;REFSELF,Output = NOREFSELF&gt; +\n    std::ops::Add &lt;NOREFSELF,Output = NOREFSELF&gt;\nwhere\n    Self : std::marker::Sized,\n{}                                                  \nimpl &lt;T&gt; MyFloat for T where T:         \n    std::ops::Add &lt;REFSELF,Output = NOREFSELF&gt; +\n    std::ops::Add &lt;NOREFSELF,Output = NOREFSELF&gt;          \n{} \n</code></pre>\n\n<p>But, this is already getting odd.  We need the output to always be the non-reference form of the type and we want the right hand side to be either the reference form or the non-reference form of the type.  However, as far as I know, there's not a mechanism for achieving this by manipulating <code>Self</code>.</p>\n\n<p>Is there a good way for combining these definitions into a single trait?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "edited": false, "score": 0, "creation_date": 1568300417, "post_id": 57909436, "comment_id": 102238833, "body": "&amp;Box&lt;S&gt; is not directly equal to Box&lt;&amp;S&gt;. But isn&#39;t the type of &amp;Box&lt;S&gt;::borow() actually &amp;S in both cases ?"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": false, "score": 1, "last_activity_date": 1568300106, "creation_date": 1568300106, "answer_id": 57909436, "question_id": 57908970, "link": "https://stackoverflow.com/questions/57908970/why-cant-a-boxed-struct-be-borrowed-as-a-trait/57909436#57909436", "title": "Why can&#39;t a boxed struct be borrowed as a trait?", "body": "<p><code>&amp;Box&lt;S&gt;</code> is not directly equal to <code>Box&lt;&amp;S&gt;</code>, and this is why it does not compile directly.</p>\n\n<p>You can relatively easily fix this by <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#impl-Deref\" rel=\"nofollow noreferrer\">dereferencing</a>, like so:</p>\n\n<pre><code>use std::ops::Deref;\ntrait T{}\nstruct S{}\nimpl T for S{}\n\nfn f1(s : &amp;S) -&gt; &amp;(dyn T) {\n    s\n}\n\nfn f2(s : &amp;Box&lt;S&gt;) -&gt; &amp;(dyn T) {\n    s.deref()\n}\n</code></pre>\n\n<p>(The trait <code>Deref</code> is there for slightly easier readability)</p>\n\n<p>The call to <code>deref()</code> operates over <code>&amp;self</code>, so having <code>&amp;Box&lt;S&gt;</code> is sufficient to call it. It simply returns <code>&amp;S</code>, and since that implements <code>T</code> the types check out.</p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 3, "last_activity_date": 1568303985, "last_edit_date": 1568303985, "creation_date": 1568302954, "answer_id": 57910273, "question_id": 57908970, "link": "https://stackoverflow.com/questions/57908970/why-cant-a-boxed-struct-be-borrowed-as-a-trait/57910273#57910273", "title": "Why can&#39;t a boxed struct be borrowed as a trait?", "body": "<p>This is to do with the way that type inference and type coercion work. The <code>Borrow&lt;B&gt;</code> trait's parameter is the type of the borrowed value, and the type checker needs to know what it is.</p>\n\n<p>If you just write:</p>\n\n<pre><code>std::borrow::Borrow::borrow(s)\n</code></pre>\n\n<p>Then the type <code>B</code> in <code>Borrow&lt;B&gt;</code> will be inferred from the surrounding code. In your case it is inferred to be <code>dyn T</code> because that's the return value. However, <code>dyn T</code> is a completely different type from <code>S</code>, so it doesn't type-check.</p>\n\n<p>Once the type checker knows that the value being returned is of type <code>&amp;S</code> then it can coerce it to a <code>&amp;dyn T</code>, but you need to give it that information:</p>\n\n<pre><code>fn f2(s: &amp;Box&lt;S&gt;) -&gt; &amp;dyn T {\n    let s: &amp;S = std::borrow::Borrow::borrow(s);\n    s\n}\n</code></pre>\n\n<p>Or, more concisely:</p>\n\n<pre><code>fn f2(s: &amp;Box&lt;S&gt;) -&gt; &amp;dyn T {\n    std::borrow::Borrow::&lt;S&gt;::borrow(s)\n}\n</code></pre>\n\n<hr>\n\n<p>The reason why <a href=\"https://stackoverflow.com/a/57909436/493729\">S\u00e9bastien Renauld's answer</a> works is because <code>Deref</code> uses an associated type instead of a type parameter. The type-checker can easily infer the <code>&lt;S as Deref&gt;::Target</code> because there can only be one implementation of <code>Deref</code> per type and the associated <code>Target</code> type is uniquely determined. <code>Borrow</code> is different because <code>Box&lt;S&gt;</code> <em>could</em> implement <code>Borrow&lt;()&gt;</code>, <code>Borrow&lt;i32&gt;</code>, <code>Borrow&lt;Box&lt;Option&lt;Vec&lt;bool&gt;&gt;&gt;&gt;</code>,... so you have to be more explicit about which implementation you intend.</p>\n"}], "owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 1, "accepted_answer_id": 57910273, "answer_count": 2, "score": 1, "last_activity_date": 1568303985, "creation_date": 1568298636, "last_edit_date": 1568303147, "question_id": 57908970, "link": "https://stackoverflow.com/questions/57908970/why-cant-a-boxed-struct-be-borrowed-as-a-trait", "title": "Why can&#39;t a boxed struct be borrowed as a trait?", "body": "<p>Given a struct <code>S</code> implementing a trait <code>T</code>, why doesn't <code>Box&lt;S&gt;</code> implement <code>Borrow&lt;dyn T&gt;</code>?</p>\n\n<p>The following code, that I would have expected to compile, doesn't:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait T{}\nstruct S{}\nimpl T for S{}\n\nfn f1(s: &amp;S) -&gt; &amp;dyn T {\n    s\n}\n\nfn f2(s: &amp;Box&lt;S&gt;) -&gt; &amp;dyn T {\n    std::borrow::Borrow::borrow(s)\n}\n</code></pre>\n\n<p>Why does <code>f1</code> compile while <code>f2</code> doesn't? (The conversion from <code>&amp;S</code> to <code>&amp;dyn T</code> is done in the first case and not in the second). </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 2, "creation_date": 1568292603, "post_id": 57906689, "comment_id": 102234070, "body": "You&#39;re assuming that the panic definition (done in your <code>target</code> and in your <code>Cargo.toml</code>) is set to <code>panic = unwind</code>. Check this; the default for not-cross-compiled rust code is <code>panic = unwind</code>, but the default for cross-compilation is <code>panic = abort</code>, which does <b>not</b> trigger unwind."}, {"owner": {"reputation": 206, "user_id": 1013428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/576d91518a939b203ace26c7d640de14?s=128&d=identicon&r=PG", "display_name": "Zellius", "link": "https://stackoverflow.com/users/1013428/zellius"}, "reply_to_user": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "edited": false, "score": 0, "creation_date": 1568294858, "post_id": 57906689, "comment_id": 102235395, "body": "About <code>Cargo.toml</code>. That was my first thought. I set <code>panic = &quot;unwind&quot;</code> inside <code>[profile.release]</code> (I don&#39;t use debug builds for now). How to check it in my <code>target</code>? The strange thing is that if I change <code>Result&lt;String, MyError&gt;</code> to <code>Result&lt;(), String&gt;</code> all work fine and <code>catch_unwind</code> return proper Err. Or <code>futures</code> crate which can catch panic inside it if I use <code>Future.catch_unwind()</code>."}], "owner": {"reputation": 206, "user_id": 1013428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/576d91518a939b203ace26c7d640de14?s=128&d=identicon&r=PG", "display_name": "Zellius", "link": "https://stackoverflow.com/users/1013428/zellius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 166, "favorite_count": 1, "answer_count": 0, "score": 2, "last_activity_date": 1568293030, "creation_date": 1568291147, "last_edit_date": 1568293030, "question_id": 57906689, "link": "https://stackoverflow.com/questions/57906689/catch-unwind-signal-sigabrt-when-unwrap-a-result-inside-it", "title": "catch_unwind signal SIGABRT when unwrap a Result inside it", "body": "<p>I develop an Android app that call some Rust (stable 1.37.0) native functions via JNI. And I want to catch any panic inside them to convert it into <code>java.lang.Error</code>. </p>\n\n<p>So, I've read about <code>std::panic::catch_unwind</code> and decided to try it. But I received <code>signal Fatal signal 6 (SIGABRT), code -6 (SI_TKILL)</code> when tried to unwrap some custom Error.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>///Some custom error\n#[derive(Debug)]\nstruct MyError;\n\nimpl Error for MyError {}\n\nimpl Display for MyError {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;'_&gt;) -&gt; std::fmt::Result {\n        writeln!(f, \"I'm an Error struct\")\n    }\n}\n</code></pre>\n\n<ol>\n<li><strong>OK</strong>. Catch the error above in Rust's unit tests or executable.</li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let result = panic::catch_unwind(|| {\n        Result::&lt;String, _&gt;::Err(MyError).unwrap();\n    });\n\n    // works!\n    if let (Err(_)) = result {\n        println!(\"I'm an Error!\")\n    }\n}\n</code></pre>\n\n<ol start=\"2\">\n<li><strong>SIGABRT</strong>. Call it via jni on Android</li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// Some function called from an Android thread\n/// args omitted\n#[no_mangle]\npub unsafe extern \"C\" fn Java_com_example_test() {\n    // that won't help\n    panic::set_hook(Box::new(|_| {}));\n\n    let result = panic::catch_unwind(|| {\n        // signal Fatal signal 6 (SIGABRT), code -6 (SI_TKILL)\n        Result::&lt;String, _&gt;::Err(MyError).unwrap();\n\n        // BUT! These code will not abort the process and work properly\n        //inner::unwrap(Result::&lt;String, _&gt;::Err(MyError));\n        //Result::&lt;(), _&gt;::Err(\"error\".to_string()).unwrap();\n\n        ()\n    });\n\n    // doesn't work!\n    if let (Err(_)) = result {\n        println!(\"I'm an Error!\")\n    }\n}\n\nmod inner {\n    #[inline]\n    pub fn unwrap&lt;T, E: ::std::fmt::Debug&gt;(r: Result&lt;T, E&gt;) -&gt; T {\n        match r {\n            Ok(t) =&gt; t,\n            Err(e) =&gt; unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", e),\n        }\n    }\n\n    #[inline(never)]\n    #[cold]\n    fn unwrap_failed&lt;E: ::std::fmt::Debug&gt;(msg: &amp;str, error: E) -&gt; ! {\n        panic!(\"{}: {:?}\", msg, error)\n    }\n}\n</code></pre>\n\n<ol start=\"3\">\n<li><strong>OK</strong>. Use futures catch_unwind on Android.</li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// Some function called from an Android thread\n/// args omitted\n#[no_mangle]\npub unsafe extern \"C\" fn Java_com_example_test2() {\n    let result = futures::lazy(|| {\n        if true {\n            Err(MyError)\n        } else {\n            Ok(\"error\".to_string())\n        }\n        .unwrap();\n\n        futures::future::ok::&lt;_, ()&gt;(())\n    })\n    .catch_unwind()\n    .wait();\n\n    // works!\n    if let (Err(_)) = result {\n        println!(\"I'm an Error!\")\n    }\n}\n</code></pre>\n\n<p>Same, but on the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d23fcabfbbf973b69dda407083607b84\" rel=\"nofollow noreferrer\">Playground</a>.</p>\n\n<p>I don't understand what is a difference between these variants? They are all use the panic! macro that work properly inside <code>panic::catch_unwind</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 1, "creation_date": 1568289013, "post_id": 57906027, "comment_id": 102232038, "body": "The most important point in this answer is that callback based designs aren&#39;t suitable to Rust. Just don&#39;t try to apply those patterns to Rust."}, {"owner": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "edited": false, "score": 0, "creation_date": 1568289202, "post_id": 57906027, "comment_id": 102232129, "body": "If callback based designs aren&#39;t suitable for rust, what do I use instead? In my case, this is a puzzle solver, and every time the solver finds a solution, it should call a user-defined function that tells him that it found a solution. I think channels are a good idea, but that would force the program to become multi-threaded. Are there similar single-threaded solutions?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "edited": false, "score": 0, "creation_date": 1568289505, "post_id": 57906027, "comment_id": 102232320, "body": "@Finomnis I&#39;ve added an example. Channel and multi-threaded code are totally uncorrelated."}, {"owner": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "edited": false, "score": 0, "creation_date": 1568289512, "post_id": 57906027, "comment_id": 102232323, "body": "Also, I disagree that <code>Rc</code> is necessary, that was a mistake in my code. I edited my question, added a new scope, so that the <code>Rc</code> and <code>RefCell</code> isn&#39;t necessary any more."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "edited": false, "score": 0, "creation_date": 1568289568, "post_id": 57906027, "comment_id": 102232362, "body": "@Finomnis Honestly, don&#39;t use callbacks. Channels are much more easier to reason about, and you don&#39;t need to fight the borrow-checker."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "edited": false, "score": 0, "creation_date": 1568289760, "post_id": 57906027, "comment_id": 102232481, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/199367/discussion-between-french-boiethios-and-finomnis\">continue this discussion in chat</a>."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 2, "last_activity_date": 1568289680, "last_edit_date": 1568289680, "creation_date": 1568288729, "answer_id": 57906027, "question_id": 57905873, "link": "https://stackoverflow.com/questions/57905873/initializing-a-fnmut-member-variable-with-a-static-fn-function/57906027#57906027", "title": "Initializing a FnMut member variable with a static Fn function", "body": "<p>You should really box the trait object function. That makes the whole code much easier to use:</p>\n\n<pre><code>struct Config&lt;'a&gt;{\n    callback: Box&lt;dyn FnMut(&amp;str) + 'a&gt;,\n}\n\nfn default_fn(msg: &amp;str){\n    println!(\"default_fn({})\", msg);\n}\n\nimpl&lt;'a&gt; Config&lt;'a&gt; {\n    pub fn new() -&gt; Config&lt;'a&gt; {\n        Config{\n            callback: Box::new(default_fn)\n        }\n    }\n\n    pub fn set_callback(self, callback: &amp;'a mut dyn (FnMut(&amp;str))) -&gt; Config&lt;'a&gt; {\n        Config {\n            callback: Box::new(callback),\n            ..self\n        }\n    }\n}\n\nfn main() {\n    // Our FnMut callback\n    let mut msg_log = vec![];\n    let mut callback_fn = |msg: &amp;str| {\n        msg_log.push(msg.to_string());\n    };\n\n    {\n        let mut config = Config::new();\n        (config.callback)(\"Hello World!\");\n\n        config = config.set_callback(&amp;mut callback_fn);\n        (config.callback)(\"Hello World!\");\n    }\n\n    // Demonstration that the callback actually works\n    println!(\"{:?}\", msg_log);\n}\n</code></pre>\n\n<hr>\n\n<p>Note that it is difficult to use callbacks in idiomatic Rust. I would even say that they aren't idiomatic at all. You should use a <a href=\"https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html\" rel=\"nofollow noreferrer\">channel</a>, something like that:</p>\n\n<pre><code>use std::sync::mpsc::{channel, Sender, SendError};\n\nstruct Config {\n    sender: Sender&lt;String&gt;,\n}\n\nimpl Config {\n    pub fn new(sender: Sender&lt;String&gt;) -&gt; Config {\n        Config{\n            sender\n        }\n    }\n\n    pub fn send(&amp;self, message: String) -&gt; Result&lt;(), SendError&lt;String&gt;&gt; {\n        self.sender.send(message)\n    }\n}\n\nfn main() {\n    let (sender, receiver) = channel();\n\n    let config = Config::new(sender);\n    config.send(\"Hello world!\".into()).unwrap();\n\n    println!(\"{:?}\", receiver.recv().unwrap());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "is_accepted": false, "score": 1, "last_activity_date": 1568306835, "last_edit_date": 1568306835, "creation_date": 1568290675, "answer_id": 57906562, "question_id": 57905873, "link": "https://stackoverflow.com/questions/57905873/initializing-a-fnmut-member-variable-with-a-static-fn-function/57906562#57906562", "title": "Initializing a FnMut member variable with a static Fn function", "body": "<p>Just wanted to share the solution I found:\nSingle-threaded, callback-based.</p>\n\n<p>While in my opinion this one really answers the question I had, I think you guys are still right about the problems I might encounter in the future with this programming style. I will definitely reconsider your advice about using channels.</p>\n\n<pre><code>struct Config&lt;'a&gt;{\n    callback: Option&lt;&amp;'a mut dyn (FnMut(&amp;str))&gt;\n}\n\nimpl&lt;'a&gt; Config&lt;'a&gt; {\n    pub fn new() -&gt; Config&lt;'a&gt; {\n        Config{\n            callback: None\n        }\n    }\n\n    pub fn set_callback(mut self, callback_fn: &amp;'a mut dyn (FnMut(&amp;str))) -&gt; Config&lt;'a&gt; {\n        self.callback = Some(callback_fn);\n        self\n    }\n\n    pub fn run_callback(&amp;mut self, msg: &amp;str){\n        if let Some(callback) = &amp;mut self.callback{\n            callback(msg);\n        } else {\n            // Default code\n            println!(\"default_fn({})\", msg);\n        }\n    }\n}\n\nfn main() {\n    // Our FnMut callback\n    let mut msg_log: Vec&lt;String&gt; = vec![];\n    let mut callback_fn = |msg: &amp;str| {\n        msg_log.push(msg.to_string());\n    };\n\n    let mut config = Config::new();\n    config.run_callback(\"Hello World!\");\n\n    config = config.set_callback(&amp;mut callback_fn);\n    config.run_callback(\"Hello World!\");\n\n    // Demonstration that the callback actually works\n    println!(\"{:?}\", msg_log);\n}\n</code></pre>\n"}], "owner": {"reputation": 2154, "user_id": 3763264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43c767b10ee2ee9aa75680bf7377779?s=128&d=identicon&r=PG&f=1", "display_name": "Finomnis", "link": "https://stackoverflow.com/users/3763264/finomnis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 57906027, "answer_count": 2, "score": 1, "last_activity_date": 1568306835, "creation_date": 1568288191, "last_edit_date": 1592644375, "question_id": 57905873, "link": "https://stackoverflow.com/questions/57905873/initializing-a-fnmut-member-variable-with-a-static-fn-function", "title": "Initializing a FnMut member variable with a static Fn function", "body": "<h1>Problem Description</h1>\n<p>I have a <code>Config</code> struct that can store a <code>FnMut</code> callback function. The catch is: not all of my configurations require a callback function, so I would like to make adding a callback function optional. This requires the member variable to be initialized with a default function that will get used if no callback is set.</p>\n<h1>Existing Code</h1>\n<pre class=\"lang-rust prettyprint-override\"><code>struct Config&lt;'a&gt;{\n    callback: &amp;'a mut dyn (FnMut(&amp;str))\n}\n\nfn default_fn(msg: &amp;str){\n    println!(&quot;default_fn({})&quot;, msg);\n}\n\nimpl&lt;'a&gt; Config&lt;'a&gt; {\n    pub fn new() -&gt; Config&lt;'a&gt; {\n        Config{\n            callback: &amp;default_fn // ERROR: types differ in mutability\n        }\n    }\n    \n    pub fn set_callback(mut self, callback_fn: &amp;'a mut dyn (FnMut(&amp;str))) -&gt; Config&lt;'a&gt; {\n        self.callback = callback_fn;\n        self\n    }\n}\n\nfn main() {\n    // Our FnMut callback\n    let mut msg_log: Vec&lt;String&gt; = vec![];\n    let mut callback_fn = |msg: &amp;str| {\n        msg_log.push(msg.to_string());\n    };\n    \n    {\n        let mut config = Config::new();\n        (config.callback)(&quot;Hello World!&quot;);\n        \n        config = config.set_callback(&amp;mut callback_fn);\n        (config.callback)(&quot;Hello World!&quot;);\n    }\n    \n    // Demonstration that the callback actually works\n    println!(&quot;{:?}&quot;, msg_log);\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:13:23\n   |\n13 |             callback: &amp;default_fn // ERROR: types differ in mutability\n   |                       ^^^^^^^^^^^ types differ in mutability\n   |\n   = note: expected type `&amp;mut dyn for&lt;'r&gt; std::ops::FnMut(&amp;'r str)`\n              found type `&amp;for&lt;'r&gt; fn(&amp;'r str) {default_fn}`\n</code></pre>\n<p>Does someone have any suggestions on how to solve that problem?</p>\n<p>Things I already tried, without any success:</p>\n<ul>\n<li>Initializing it with a closure: <code>callback: &amp;|_: &amp;str|{}</code></li>\n<li>Using a member function instead of a global function</li>\n<li>Creating a mutable reference: <code>callback: &amp;mut default_fn</code>\n(causes: <code>cannot return value referencing temporary value</code>)</li>\n</ul>\n<p>I'm running out of ideas, any help is appreciated. Even if the answer is that what I am trying to do is impossible for reasons I didn't realize yet.</p>\n"}, {"tags": ["mongodb", "rust", "rust-actix", "actix-web"], "answers": [{"comments": [{"owner": {"reputation": 513, "user_id": 8491066, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ZFNEP.jpg?s=128&g=1", "display_name": "sirisakc", "link": "https://stackoverflow.com/users/8491066/sirisakc"}, "edited": false, "score": 0, "creation_date": 1568291274, "post_id": 57906307, "comment_id": 102233324, "body": "Thank you very much, your answer is very useful for me."}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 4, "last_activity_date": 1568289765, "creation_date": 1568289765, "answer_id": 57906307, "question_id": 57904457, "link": "https://stackoverflow.com/questions/57904457/does-the-rust-actix-web-support-mongodb/57906307#57906307", "title": "Does the Rust Actix Web support MongoDB?", "body": "<p>The short version is yes, it will, since your libraries return <code>Result</code>s, and that's basically independent of whatever framework you decide to use.</p>\n\n<p>The long answer is yes, but with a word of caution. As the official mongoDB client (the one you are using) and pretty much every alternative out there have fully blocking operations (from the time you call <code>find()</code> to the time you get the <code>Result</code>, the main thread is blocked), this means that your entire event loop will potentially block during that interval.</p>\n\n<p>There seems to be no community effort to improve the underlying mongo C library, or to shift all the operations to another thread and provide data access to and from that thread, so you're short of options right now, sadly.</p>\n"}, {"tags": [], "owner": {"reputation": 31, "user_id": 4614067, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e165afb8f74c8af33da5e4e9d2527599?s=128&d=identicon&r=PG", "display_name": "Cube Inspire", "link": "https://stackoverflow.com/users/4614067/cube-inspire"}, "is_accepted": false, "score": 3, "last_activity_date": 1578215625, "creation_date": 1578215625, "answer_id": 59598440, "question_id": 57904457, "link": "https://stackoverflow.com/questions/57904457/does-the-rust-actix-web-support-mongodb/59598440#59598440", "title": "Does the Rust Actix Web support MongoDB?", "body": "<p>Mongodb on it's last version allow multithreads on its core. \nFor that reason r2d2_mongodb has been deprecated in December 2019.\nIt should then be possible to use RwLock on the connection and pass it to actix.</p>\n"}], "owner": {"reputation": 513, "user_id": 8491066, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ZFNEP.jpg?s=128&g=1", "display_name": "sirisakc", "link": "https://stackoverflow.com/users/8491066/sirisakc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 578, "favorite_count": 0, "accepted_answer_id": 57906307, "answer_count": 2, "score": 0, "last_activity_date": 1578215625, "creation_date": 1568283020, "question_id": 57904457, "link": "https://stackoverflow.com/questions/57904457/does-the-rust-actix-web-support-mongodb", "title": "Does the Rust Actix Web support MongoDB?", "body": "<p>I have a new Backend Learning by Rust Programming.\nStarting from Web Framework.\nSince I would like to use Rust Backend with MongoDB so I have the example code of Nickel.\nAnyway, I also see that there is Actix Web Framework.</p>\n\n<p>Does Actix Web support MongoDB like Nickel?</p>\n\n<p>The following example provide the Nickel with MongoDB.</p>\n\n<pre><code>//main.rs \u2014 Nickel\n#[macro_use]\u00a0\nextern\u00a0crate\u00a0nickel;\nextern\u00a0crate\u00a0rustc_serialize;\n\n#[macro_use(bson,\u00a0doc)]\nextern\u00a0crate\u00a0bson;\nextern\u00a0crate\u00a0mongodb;\n\n//\u00a0Nickel\nuse\u00a0nickel::{Nickel,\u00a0JsonBody,\u00a0HttpRouter,\u00a0MediaType};\nuse\u00a0nickel::status::StatusCode::{self};\n\n//\u00a0MongoDB\nuse\u00a0mongodb::{Bson,\u00a0bson,\u00a0doc};\nuse\u00a0mongodb::{Client,\u00a0ThreadedClient};\nuse\u00a0mongodb::db::ThreadedDatabase;\nuse\u00a0mongodb::error::Result\u00a0as\u00a0MongoResult;\n\n//\u00a0bson\nuse\u00a0bson::{Bson,\u00a0Document};\nuse\u00a0bson::oid::ObjectId;\n\n//\u00a0serde\nuse\u00a0serde::{Serialize,\u00a0Deserialize};\n\nuse\u00a0std::fs::File;\nuse\u00a0std::io::Read;\n#[derive(Debug,\u00a0Serialize,\u00a0Deserialize)]\nstruct\u00a0User\u00a0{\n\u00a0\u00a0\u00a0\u00a0firstname:\u00a0String,\n\u00a0\u00a0\u00a0\u00a0lastname:\u00a0String,\n\u00a0\u00a0\u00a0\u00a0email:\u00a0String\n}\n\nfn\u00a0main(){\n\u00a0\u00a0\u00a0\u00a0let\u00a0mut\u00a0server\u00a0=\u00a0Nickel::new();\n\u00a0\u00a0\u00a0\u00a0let\u00a0mut\u00a0router\u00a0=\u00a0Nickel::router();\n\n\u00a0\u00a0\u00a0\u00a0router.get(\"/users\",\u00a0middleware!\u00a0{\u00a0|_req,\u00a0_res|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0client\u00a0=\u00a0Client::connect(\"localhost\",\u00a027017)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ok().expect(\"Error\u00a0establishing\u00a0connection.\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0coll\u00a0=\u00a0client.db(\"rusty\").collection(\"users\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0mut\u00a0cursor\u00a0=\u00a0coll.find(None,\u00a0None).unwrap();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0mut\u00a0data_result\u00a0=\u00a0\"{\\\"data\\\":[\".to_owned();\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0(i,\u00a0result)\u00a0in\u00a0cursor.enumerate()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0let\u00a0Ok(item)\u00a0=\u00a0result\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0let\u00a0Some(&amp;Bson::String(ref\u00a0firstname))\u00a0=\u00a0item.get(\"firstname\")\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0string_data\u00a0=\u00a0if\u00a0i\u00a0==\u00a00\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format!(\"{},\",\u00a0firstname)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0format!(\"{},\",\u00a0firstname)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_result.push_str(&amp;string_data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0data_result.push_str(\"]}\");\n\n\u00a0\u00a0\u00a0\u00a0format!(\"{}\",\u00a0data_result)\n\n\u00a0\u00a0\u00a0\u00a0});\n\n\u00a0\u00a0\u00a0\u00a0router.post(\"/users/new\",\u00a0middleware!\u00a0{\u00a0|_req,\u00a0_res|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0user\u00a0=\u00a0_req.json_as::&lt;User&gt;().unwrap();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0firstname\u00a0=\u00a0user.firstname.to_string();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0lastname\u00a0=\u00a0user.lastname.to_string();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0email\u00a0=\u00a0user.email.to_string();\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0client\u00a0=\u00a0Client::connect(\"localhost\",\u00a027017)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ok().expect(\"Error\u00a0establishing\u00a0connection.\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0coll\u00a0=\u00a0client.db(\"rusty\").collection(\"users\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0match\u00a0coll.insert_one(doc!\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"firstname\"\u00a0=&gt;\u00a0firstname,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"lastname\"\u00a0=&gt;\u00a0lastname,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"email\"\u00a0=&gt;\u00a0email\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\u00a0None)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ok(_)\u00a0=&gt;\u00a0(StatusCode::Ok,\u00a0\"Item\u00a0saved!\"),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Err(e)\u00a0=&gt;\u00a0return\u00a0_res.send(format!(\"{}\",\u00a0e))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0router.delete(\"/users/:id\",\u00a0middleware!\u00a0{\u00a0|_req,\u00a0_res|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0client\u00a0=\u00a0Client::connect(\"localhost\",\u00a027017)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ok().expect(\"Failed\u00a0to\u00a0initialize\u00a0standalone\u00a0client.\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0coll\u00a0=\u00a0client.db(\"rusty\").collection(\"users\");\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0object_id\u00a0=\u00a0_req.param(\"id\").unwrap();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let\u00a0id\u00a0=\u00a0match\u00a0ObjectId::with_string(object_id)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ok(oid)\u00a0=&gt;\u00a0oid,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Err(e)\u00a0=&gt;\u00a0return\u00a0_res.send(format!(\"{}\",\u00a0e))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0match\u00a0coll.delete_one(doc!\u00a0{\"_id\"\u00a0=&gt;\u00a0id},\u00a0None)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ok(_)\u00a0=&gt;\u00a0(StatusCode::Ok,\u00a0\"Item\u00a0deleted!\"),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Err(e)\u00a0=&gt;\u00a0return\u00a0_res.send(format!(\"{}\",\u00a0e))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0server.utilize(router);\n\u00a0\u00a0\u00a0\u00a0server.listen(\"0.0.0.0:3000\").unwrap();\n}\n</code></pre>\n"}, {"tags": ["data-structures", "rust", "circular-buffer"], "answers": [{"comments": [{"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568291211, "post_id": 57905462, "comment_id": 102233295, "body": "My base idea is the same as yours: Store the data as one big Array/Vec of u8 where you insert into the different Strings, avoiding any fragmentation. What I can&#39;t see from your approach is a) how you deal with accessing the n-th element. Or b) iterating over all elements in the ringbuffer. Or did I understand you wrong ? The VecDeque is used in my first code but it won&#39;t be able to give me specific lines / elements. Just specific bytes."}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568291381, "post_id": 57905462, "comment_id": 102233396, "body": "I edited my question in the hopes of making more clear that my question is exactly about porting the first approach over to the continuous array structure."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 1, "creation_date": 1568292168, "post_id": 57905462, "comment_id": 102233832, "body": "Added <code>get(usize)</code> to my implementation; to get an iterator, you obviously will need to build an interator. I&#39;d strongly recommend <b>not</b> calling <code>get()</code> iteratively, but rather to keep a cursor to your state."}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568301711, "post_id": 57905462, "comment_id": 102239546, "body": "Oh thanks. I think I got your storage method now. This looks promising. This approach is indeed pretty good for insertion. What I don&#39;t get is how you would do this with rusts own vecdeque. Also it seems like you&#39;re dropping the last inserted entry if the insertion doesn&#39;t fit anymore ? Because I want to drop the first insertion, a wrapping circular buffer. Have to investigate this at home a little bit more later."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568302194, "post_id": 57905462, "comment_id": 102239835, "body": "I fucked up in naming my methods; <code>pop</code> is actually a <code>shift</code>, apologies for that. as for how you would use <code>VecDeque</code>, that was a comment regarding the previous method. Using one when you are storing variable length items defeats the performance gains of it."}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568327282, "post_id": 57905462, "comment_id": 102249073, "body": "Ok so I cleaned it up a bit and commented the different parts locally. I&#39;ll do some performance comparisions later but this already looks pretty promising and is neat idea, to store it in the buffer itself. Oh and I switched to NativeEndian for obvious reasons."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568327490, "post_id": 57905462, "comment_id": 102249134, "body": "There&#39;s a couple of additional changes you can make. In my example I stored the length of strings as 4 bytes (i.e. <code>u32</code>); if you know your strings do not need this, you can probably drop down to <code>u16</code> to conserve some space (actual processor and memory access patterns will remain the same irrespective of preamble size). The biggest place where you could gain space is by keeping a lookahead of the first N elements to reduce the amount of times the loop iterates on insertion"}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1568327565, "post_id": 57905462, "comment_id": 102249148, "body": "I have to limit incoming data to u32 or allow usize.. It&#39;s uncontrolled, untrusted input. Also there is one other limitation: I have to store some additional flag, an enum for the &quot;kind&quot; of data. Stdout/Stderr/Stdin/Status. So I&#39;ll probably add +1 byte."}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1569529847, "post_id": 57905462, "comment_id": 102637166, "body": "This implementation has one big downside: splice is doing a &quot;half an memory copy&quot; on average."}, {"owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "reply_to_user": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1569532472, "post_id": 57905462, "comment_id": 102638080, "body": "That is a drawback you cannot really avoid, since the memory is contiguous and part of the same buffer as the rest. you are not dodging the copy, but the compiler does optimize some of the overhead in most circumstances."}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1569591451, "post_id": 57905462, "comment_id": 102658022, "body": "I can avoid copying the whole buffer around by just using a clock-wise pointer and using that to count start/stop. Currently rewriting to take advantage of that."}, {"owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "edited": false, "score": 0, "creation_date": 1571845467, "post_id": 57905462, "comment_id": 103377615, "body": "It&#39;s released: <a href=\"https://crates.io/crates/linebuffer\" rel=\"nofollow noreferrer\">LineBuffer</a>"}], "tags": [], "owner": {"reputation": 17581, "user_id": 2167834, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9699e22406fb8e57a0c90f576c610b1c?s=128&d=identicon&r=PG", "display_name": "S&#233;bastien Renauld", "link": "https://stackoverflow.com/users/2167834/s%c3%a9bastien-renauld"}, "is_accepted": true, "score": 0, "last_activity_date": 1568327555, "last_edit_date": 1568327555, "creation_date": 1568286747, "answer_id": 57905462, "question_id": 57904011, "link": "https://stackoverflow.com/questions/57904011/circular-buffer-for-strings/57905462#57905462", "title": "Circular Buffer for Strings", "body": "<p>Let's go back to basics.</p>\n\n<p>A circular buffer typically guarantees no fragmentation because it is not typed by the content you store, but by size. You might define a 1MB circular buffer, for example. For fixed-length types, this gives you a fixed number of elements you can store.</p>\n\n<p>You're evidently not doing this. By storing <code>Vec&lt;u8&gt;</code> as an element, even though the overarching array is fixed-length, the content is not. Each element stored is, in the array, a fat pointer pointing to the <code>Vec</code> (starting point and length).</p>\n\n<p>Naturally, when you insert, you will therefore have to:</p>\n\n<ol>\n<li>Create this <code>Vec</code> (this is the fragmentation you're thinking of, but not really seeing, as the rust allocator is pretty efficient at this kind of stuff)</li>\n<li>Insert the vec where it should be, shifting everything sideways if you have to (the standard circular buffer techniques are at play here)</li>\n</ol>\n\n<p>Your second option is an <strong>actual</strong> circular buffer. You gain in fixed size and zero allocs if you do it right, you lose out on the ability to store <em>entire</em> lines with 100% guarantee of having an entire line at the start of your buffer.</p>\n\n<p>Before we head into the wide lands of DYI, a quick pointer to <a href=\"https://doc.rust-lang.org/src/alloc/collections/vec_deque.rs.html#47\" rel=\"nofollow noreferrer\"><code>VecDeque</code></a> is in order. This is a much more optimized version of what you implemented, albeit with some (fully warranted) <code>unsafe</code> sections.</p>\n\n<hr>\n\n<h1>Implementing our own circular buffer</h1>\n\n<p>We're going to make a bunch of assumptions and set some requirements for this:</p>\n\n<ul>\n<li>We want to be able to store large strings</li>\n<li>Our buffer stores bytes. The entire stack is therefore dealing with owned <code>u8</code></li>\n<li>We will make use of a simple <code>Vec</code>; in practice you would not reimplement this entire structure at all, the array is purely there for demonstration</li>\n</ul>\n\n<p>The result of these choices is the following element structure:</p>\n\n<pre><code>| Element size | Data     |\n|--------------|----------|\n|  4 bytes     |  N bytes |\n</code></pre>\n\n<p>We are therefore losing 4 bytes ahead of every message to be able to get a clear pointer/skip reference to the next element (of maximum size comparable to a <code>u32</code>).</p>\n\n<p>A naive implementation example is as follows (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=56d675da9eec606c6e9f0b7c4272f992\" rel=\"nofollow noreferrer\"><strong>playground link</strong></a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};\n\npub struct CircularBuffer {\n    data: Vec&lt;u8&gt;,\n    tail: usize,\n    elements: usize,\n}\nimpl CircularBuffer {\n    pub fn new(max: usize) -&gt; Self {\n        CircularBuffer {\n            data: Vec::with_capacity(max),\n            elements: 0,\n            tail: 0,\n        }\n    }\n\n    /// Amount of elements in buffer\n    pub fn elements(&amp;self) -&gt; usize {\n        self.elements\n    }\n\n    /// Amount of used bytes in buffer, including metadata\n    pub fn len(&amp;self) -&gt; usize {\n        self.tail\n    }\n\n    /// Length of first element in ringbuffer\n    pub fn next_element_len(&amp;self) -&gt; Option&lt;usize&gt; {\n        self.data\n            .get(0..4)\n            .and_then(|mut v| v.read_u32::&lt;NativeEndian&gt;().ok().map(|r| r as usize))\n    }\n\n    /// Remove first element in ringbuffer (wrap)\n    pub fn pop(&amp;mut self) -&gt; Option&lt;Vec&lt;u8&gt;&gt; {\n        self.next_element_len().map(|chunk_size| {\n            self.tail -= chunk_size + 4;\n            self.elements -= 1;\n            self.data\n                .splice(..(chunk_size + 4), vec![])\n                .skip(4)\n                .collect()\n        })\n    }\n\n    pub fn get(&amp;self, idx: usize) -&gt; Option&lt;&amp;[u8]&gt; {\n        if self.elements &lt;= idx {\n            return None;\n        }\n        let mut current_head = 0;\n        let mut current_element = 0;\n        while current_head &lt; self.len() - 4 {\n            // Get the length of the next block\n            let element_size = self\n                .data\n                .get(0..4)\n                .and_then(|mut v| v.read_u32::&lt;NativeEndian&gt;().ok().map(|r| r as usize))\n                .unwrap();\n            if current_element == idx {\n                return self\n                    .data\n                    .get((current_head + 4)..(current_head + element_size + 4));\n            }\n            current_element += 1;\n            current_head += 4 + element_size;\n        }\n        return None;\n    }\n\n    pub fn insert(&amp;mut self, mut element: Vec&lt;u8&gt;) {\n        let e_len = element.len();\n\n        let capacity = self.data.capacity();\n        while self.len() + e_len + 4 &gt; capacity {\n            self.pop();\n        }\n        self.data.write_u32::&lt;NativeEndian&gt;(e_len as u32).unwrap();\n        self.data.append(&amp;mut element);\n        self.tail += 4 + e_len;\n        self.elements += 1;\n        println!(\"{:?}\", self.data);\n    }\n}\n</code></pre>\n\n<p>Do note again that this is a <strong>naive</strong> implementation aimed at showing you how you'd go around the problem of clipping strings in your buffer. The \"real\", optimal implementation would <code>unsafe</code> to shift and remove elements.</p>\n"}], "owner": {"reputation": 113, "user_id": 3332686, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15e2ed5715a8480a4398943918930128?s=128&d=identicon&r=PG&f=1", "display_name": "proc", "link": "https://stackoverflow.com/users/3332686/proc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 832, "favorite_count": 0, "accepted_answer_id": 57905462, "answer_count": 1, "score": 0, "last_activity_date": 1568327555, "creation_date": 1568281584, "last_edit_date": 1568291337, "question_id": 57904011, "link": "https://stackoverflow.com/questions/57904011/circular-buffer-for-strings", "title": "Circular Buffer for Strings", "body": "<p>I'm buffering the last X lines of stdout, stderr &amp; stdin of a process.\nI'd like to keep the last X lines and be able to access a line by its id (line number).\nSo if we store 100 lines and insert 200 of them, you can access lines 100-200.\n(In reality we want to store ~2000 lines.)</p>\n\n<p>The performance case is insertion. So insertion itself should be fast. Retrieving will occasionally happen but is probably at 10% of the use case.\n(We won't look into the output for most of the time.)</p>\n\n<p><strong><em>Old approach, fragmenting</em></strong><br>\nI used a wrapping <code>ArrayDeque</code> and then kept book over the line-count, but this means we're using a <code>[Vec&lt;u8&gt;;100]</code> in the example above. An array of String thus an Array of <code>Vec&lt;u8&gt;</code>.</p>\n\n<p><strong><em>New approach, with open questions</em></strong><br>\nMy* new idea is to store data in one array of u8 and then keep book over start position and length of each entry in the array. The problem here is that we would need the book-keeping to be also some kind of ringbuffer and erase old entries the moment our array of data has to wrap. Maybe there are also better ways to implement this ? At least this takes full advantage of a ringbuffer and prevents memory fragmentation.</p>\n\n<p>*thanks also to sebk from the rust community</p>\n\n<p>Current easy approach</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>const MAX: usize = 5;\n\npub struct LineRingBuffer {\n    counter: Option&lt;usize&gt;,\n    data: ArrayDeque&lt;[String; MAX], Wrapping&gt;,\n    min_line: usize,\n}\n\nimpl LineRingBuffer {\n    pub fn new() -&gt; Self {\n        Self {\n            counter: None,\n            data: ArrayDeque::new(),\n            min_line: 0,\n        }\n    }\n\n    pub fn get&lt;'a&gt;(&amp;'a self,pos: usize) -&gt; Option&lt;&amp;String&gt; {\n        if let Some(max) = self.counter {\n            if pos &gt;= self.min_line &amp;&amp; pos &lt;= max {\n                return self.data.get(pos - self.min_line);\n            }\n        }\n        None\n    }\n\n    pub fn insert(&amp;mut self, line: String) {\n        self.data.push_back(line);\n        if let Some(ref mut v) = self.counter {\n            *v += 1;\n            if *v - self.min_line &gt;= MAX {\n                self.min_line += 1;\n            }\n        } else {\n            self.counter = Some(0);\n        }\n    }\n}\n</code></pre>\n\n<p>Draft of the new idea questioned about:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct SliceRingbuffer {\n    counter: Option&lt;usize&gt;,\n    min_line: usize,\n    data: Box&lt;[u8;250_000]&gt;,\n    index: ArrayDeque&lt;Entry,Wrapping&gt;,\n}\n\nstruct Entry {\n    start: usize,\n    length: usize,\n}\n</code></pre>\n\n<p>For whatever reason the current approach is still pretty fast, even though I expect a lot of allocations of different size (depending on the lines) and thus fragmentation.</p>\n"}, {"tags": ["rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 2, "last_activity_date": 1568631449, "last_edit_date": 1568631449, "creation_date": 1568294856, "answer_id": 57907800, "question_id": 57903579, "link": "https://stackoverflow.com/questions/57903579/rust-serde-deserializing-a-mixed-array/57907800#57907800", "title": "Rust serde deserializing a mixed array", "body": "<p>Serde can deserialize to a Rust struct from sequence-like structures as well as map-like ones.</p>\n\n<p>Your structs are almost right, but there is an extra layer of hierarchy in your JSON. If your JSON was:</p>\n\n<pre><code>{\n    \"id\": 1,\n    \"a\": [1.2345, 5, 9.8765]\n}\n</code></pre>\n\n<p>then this will just work, with the right <code>serde</code> annotations:</p>\n\n<pre><code>use serde::{Serialize, Deserialize};\n\n#[derive(Deserialize)]\nstruct Ask {\n    price: f64,\n    whole_lot_volume: i64,\n    lot_volume: f64,\n}\n\n#[derive(Deserialize)]\nstruct MyStruct {\n    id: i32,\n    a: Ask,\n}\n</code></pre>\n\n<p>If you can't change the JSON, you can use an extra layer of structs to match:</p>\n\n<pre><code>use serde::{Deserialize, Serialize};\n\n#[derive(Debug, Deserialize)]\nstruct Order {\n    price: f64,\n    whole_lot_volume: i64,\n    lot_volume: f64,\n}\n\n#[derive(Debug, Deserialize)]\nstruct Ask {\n    a: Order,\n}\n\n#[derive(Debug, Deserialize)]\nstruct MyStruct {\n    id: i32,\n    a: Ask,\n}\n</code></pre>\n\n<p>It is rare that you need to implement your own <code>Visitor</code>; the <code>Deserialize</code> macro provided by <code>serde</code> is quite customisable. However, if you want to omit the extra struct, that's what you'd have to do.</p>\n\n<p>You may need to do more work if some of the numbers are represented as JSON strings, but you can still do that without a custom <code>Visitor</code> implementation. See:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/46753955/how-to-transform-fields-during-deserialization-using-serde\">How to transform fields during deserialization using Serde?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/39383809/how-to-transform-fields-during-serialization-using-serde\">How to transform fields during serialization using Serde?</a></li>\n<li><a href=\"https://serde.rs/field-attrs.html\" rel=\"nofollow noreferrer\">Serde field attributes</a></li>\n</ul>\n"}], "owner": {"reputation": 1865, "user_id": 10617218, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f177615451e594d1c2d74c7c8ada58a?s=128&d=identicon&r=PG", "display_name": "Robin  van Leeuwen", "link": "https://stackoverflow.com/users/10617218/robin-van-leeuwen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 582, "favorite_count": 1, "accepted_answer_id": 57907800, "answer_count": 1, "score": 1, "last_activity_date": 1568631449, "creation_date": 1568280159, "last_edit_date": 1568334796, "question_id": 57903579, "link": "https://stackoverflow.com/questions/57903579/rust-serde-deserializing-a-mixed-array", "title": "Rust serde deserializing a mixed array", "body": "<p>In Rust i am receiving data from a websocket. For simplicity it looks like this:</p>\n\n<pre><code> [1, {\"a\": [\"1.2345\", 5, \"9.8765\"]}]\n</code></pre>\n\n<p>The string i get from the websocket is indeed double-quoted 'floating point values' (thus in actuality strings), and unquoted integers.</p>\n\n<p>I want to deserialize this object into a struct. But since the return array \"a\" is of mixed type, I can't use something like:</p>\n\n<pre><code> struct MyStruct {\n    id: i32, \n    a: [f64; 3],\n }\n</code></pre>\n\n<p>So I thought let's define another struct:</p>\n\n<pre><code> struct Ask {\n    price: f64,\n    whole_lot_volume: i64,\n    lot_volume: f64\n }\n\n struct MyStruct {\n    id: i32,\n    a: Ask\n }\n</code></pre>\n\n<p>But how should I write the deserializer for this? Looking at the <code>serde</code> docs I understand that I should write a <code>Visitor</code> for <code>Ask</code>:</p>\n\n<pre><code> impl&lt;'de&gt; Visitor&lt;'de&gt; for Ask {\n    type Value = ...\n }\n</code></pre>\n\n<p>But what would be the <code>Value</code> type then?</p>\n\n<p>So I'm sure I am not correctly understanding how the deserialization process works. Or is the fact that the Websocket returns an array of mixed types just incompatible with the serde deserialization process?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 34388, "user_id": 2610810, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c8c6433073e71478e8da278a188e1d15?s=128&d=identicon&r=PG", "display_name": "Caleth", "link": "https://stackoverflow.com/users/2610810/caleth"}, "edited": false, "score": 0, "creation_date": 1568276700, "post_id": 57902478, "comment_id": 102225410, "body": "What&#39;s the format of the file you are reading? What if you try <code>.flat_map(|s| s)</code>?"}, {"owner": {"reputation": 1925, "user_id": 2865757, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4dcfe7782349d59e50b1fa196f9c6669?s=128&d=identicon&r=PG&f=1", "display_name": "Zefick", "link": "https://stackoverflow.com/users/2865757/zefick"}, "edited": false, "score": 1, "creation_date": 1568277922, "post_id": 57902478, "comment_id": 102226036, "body": "The difference is that your code iterates over <code>String</code>s but the example iterates over <code>&amp;&#39;static str</code>."}], "answers": [{"comments": [{"owner": {"reputation": 1750, "user_id": 416338, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/702f18d1739dd70e6a89fd30038d8bbf?s=128&d=identicon&r=PG", "display_name": "Nick Long", "link": "https://stackoverflow.com/users/416338/nick-long"}, "edited": false, "score": 0, "creation_date": 1568286017, "post_id": 57903992, "comment_id": 102230432, "body": "Superb answer thank you. Given it&#39;s just a toy example as you rightly point out performance doesn&#39;t matter, but I&#39;m interested as a learning point so I know what to do when performance is important.."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1568290934, "post_id": 57903992, "comment_id": 102233145, "body": "I&#39;ve put a nice version of your loop in my answer: <a href=\"https://stackoverflow.com/questions/45882329/read-large-files-line-by-line-in-rust/45882510#45882510\" title=\"read large files line by line in rust\">stackoverflow.com/questions/45882329/&hellip;</a>"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1568281853, "last_edit_date": 1568281853, "creation_date": 1568281509, "answer_id": 57903992, "question_id": 57902478, "link": "https://stackoverflow.com/questions/57902478/why-do-i-need-to-collect-into-a-vector-when-using-flat-map/57903992#57903992", "title": "Why do I need to collect into a vector when using `flat_map`?", "body": "<p>The iterator <code>reader.lines().map(|x| x.unwrap())</code> iterates over <code>String</code> items, i.e. by value. Consequently, in <code>.flat_map(|s| ...)</code>, the variable <code>s</code> has the type <code>String</code> (i.e. owned, not borrowed). In other words: the string is a local variable now and lives in the function. It's a simple rule that you cannot return references to local variables (see <a href=\"https://stackoverflow.com/questions/32682876/is-there-any-way-to-return-a-reference-to-a-variable-created-in-a-function/32683137\">this Q&amp;A</a>). But that's exactly what <code>s.chars()</code> does, even if it's a bit hidden.</p>\n\n<p>Taking a look <a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.chars\" rel=\"noreferrer\">at <code>str::chars</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn chars(&amp;self) -&gt; Chars&lt;'_&gt;\n</code></pre>\n\n<p>One can see that the string is borrowed. The returned <code>Chars</code> object contains a reference to the original string. That's why we cannot return <code>s.chars()</code> from the closure.</p>\n\n<blockquote>\n  <p>So why is it different in my code?</p>\n</blockquote>\n\n<p>In the documentation's example, the iterator <code>words.iter()</code> actually iterates over items of the type <code>&amp;&amp;'static str</code>. Calling <code>s.chars()</code> will also return a <code>Chars</code> object that borrows some string, but that string's lifetime is <code>'static</code> (lives forever), so there is no problem with returning <code>Chars</code> from that closure.</p>\n\n<h3>Solution?</h3>\n\n<p>It would be great if the standard library had an <code>OwnedChars</code> iterator that consumes a <code>String</code>, works like <code>Chars</code> and drops the string once the iterator is dropped. In that case it's fine to call <code>s.owned_chars()</code> because the returned object does not reference the local <code>s</code>, but owns it. But: such an owned iterator does not exist in the standard library!</p>\n\n<blockquote>\n  <p>I'm assuming creating unneeded vectors which will be immediately destroyed is inefficient</p>\n</blockquote>\n\n<p>Yes, that is true in a way. But you might have missed that the <code>reader.lines()</code> iterator also creates temporary objects of type <code>String</code>. Those are more or less immediately destroyed as well! So even without the <code>collect</code> in the <code>flat_map</code> you have a bunch of unnecessary allocations. Note that sometimes that's Ok. In this case, I guess that input parsing is very fast in comparison to the actual algorithm you have to implement. So ... just <code>collect</code>? It's probably fine in this case.</p>\n\n<p>If you want to have high performance input parsing, I think you will not be able to avoid a standard loop, in particular in order to avoid unnecessary <code>String</code> allocations. (<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=eeb72bc2881dae67eb5c6c2180ec100e\" rel=\"noreferrer\">Playground</a>)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut line = String::new();\nlet mut input = Vec::new();\nloop {\n    line.clear(); // clear contents, but keep memory buffer\n\n    // TODO: handle IO error properly\n    let bytes_read = reader.read_line(&amp;mut line).expect(\"IO error\"); \n    if bytes_read == 0 {\n        break;\n    }\n\n    if line.starts_with(\"Grid\") {\n        continue;\n    }\n\n    // TODO: handle invalid input error\n    input.extend(line.trim().chars().map(|c| c.to_digit(10).unwrap()));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 1, "last_activity_date": 1568295708, "creation_date": 1568295708, "answer_id": 57908072, "question_id": 57902478, "link": "https://stackoverflow.com/questions/57902478/why-do-i-need-to-collect-into-a-vector-when-using-flat-map/57908072#57908072", "title": "Why do I need to collect into a vector when using `flat_map`?", "body": "<p>In addition to the other answer, note that an owned iterator is easy to write:</p>\n\n<pre><code>struct OwnedChars {\n    s: String,\n    i: usize,\n}\n\nimpl Iterator for OwnedChars {\n    type Item = char;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let c = self.s[self.i..].chars().next()?;\n\n        self.i += c.len_utf8();\n\n        Some(c)\n    }\n}\n\nfn into_iter(string: String) -&gt; OwnedChars {\n    OwnedChars {\n        s: string,\n        i: 0,\n    }\n}\n\nfn main() {\n    let owned_iter = into_iter(\"Za\u017c\u00f3\u0142\u0107 g\u0119\u015bl\u0105 ja\u017a\u0144\".into());\n\n    for c in owned_iter {\n        println!(\"{}\", c);\n    }\n}\n</code></pre>\n\n<p>And then, you don't need to collect:</p>\n\n<pre><code>fn main() {\n    use std::io::prelude::*;\n\n    let file = std::fs::File::open(std::env::args().nth(1).unwrap()).expect(\"Sudoku file not found\");\n    let reader = std::io::BufReader::new(file);\n\n    let x = reader\n        .lines()\n        .map(|x| x.unwrap())\n        .filter(|x| !x.starts_with(\"Grid\"))\n        .flat_map(into_iter)\n        .map(|x| x.to_digit(10).unwrap())\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n}\n</code></pre>\n"}], "owner": {"reputation": 1750, "user_id": 416338, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/702f18d1739dd70e6a89fd30038d8bbf?s=128&d=identicon&r=PG", "display_name": "Nick Long", "link": "https://stackoverflow.com/users/416338/nick-long"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 274, "favorite_count": 0, "accepted_answer_id": 57903992, "answer_count": 2, "score": 5, "last_activity_date": 1568295708, "creation_date": 1568276069, "last_edit_date": 1568280287, "question_id": 57902478, "link": "https://stackoverflow.com/questions/57902478/why-do-i-need-to-collect-into-a-vector-when-using-flat-map", "title": "Why do I need to collect into a vector when using `flat_map`?", "body": "<p>I'm working on <a href=\"https://projecteuler.net/problem=96\" rel=\"nofollow noreferrer\">Project Euler 96</a> to teach myself Rust. I've written this code to read in the file and convert it into a vector of integers (<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c71d801f1a19b0d1956913b4fd2dc1c2\" rel=\"nofollow noreferrer\">Playground</a>).</p>\n\n<pre><code>let file = File::open(&amp;args[1]).expect(\"Sudoku file not found\");\nlet reader = BufReader::new(file);\n\nlet x = reader\n    .lines()\n    .map(|x| x.unwrap())\n    .filter(|x| !x.starts_with(\"Grid\"))\n    .flat_map(|s| s.chars().collect::&lt;Vec&lt;_&gt;&gt;())  // &lt;-- collect here!\n    .map(|x| x.to_digit(10).unwrap())\n    .collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>This all works fine but I'm puzzled why I have to collect into a vector in my <code>flat_map</code> (I'm assuming creating unneeded vectors which will be immediately destroyed is inefficient). If I don't collect, it doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0515]: cannot return value referencing function parameter `s`\n  --&gt; src/main.rs:13:23\n   |\n13 |         .flat_map(|s| s.chars())\n   |                       -^^^^^^^^\n   |                       |\n   |                       returns a value referencing data owned by the current function\n   |                       `s` is borrowed here\n</code></pre>\n\n<p>The example from <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map\" rel=\"nofollow noreferrer\">the docs</a> shows almost the same code, but a collect is not required:</p>\n\n<pre><code>let words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n</code></pre>\n\n<p>So why is it different in my code?</p>\n"}]