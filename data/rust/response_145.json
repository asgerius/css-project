[{"tags": ["struct", "rust", "match"], "answers": [{"comments": [{"owner": {"reputation": 39, "user_id": 6727725, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-LpgK8aHbOD4/AAAAAAAAAAI/AAAAAAAABJg/VuH7UE6dHgQ/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/6727725/joe"}, "edited": false, "score": 1, "creation_date": 1508356363, "post_id": 46817761, "comment_id": 80583629, "body": "Thank you so much, didn&#39;t realize that it threw it away at the end of the line. I tried the less idiomatic one, but didn&#39;t block it so it still threw away I presume."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 39, "user_id": 6727725, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-LpgK8aHbOD4/AAAAAAAAAAI/AAAAAAAABJg/VuH7UE6dHgQ/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/6727725/joe"}, "edited": false, "score": 1, "creation_date": 1508366705, "post_id": 46817761, "comment_id": 80588180, "body": "@Joe To be clear, it&#39;s not the <code>{}</code> that makes the difference between discarding or not, it&#39;s the <code>let environment =</code> before the <code>match</code> expression. <code>Ok(environment) =&gt; environment,</code> would have worked as well. (Assuming that&#39;s what you meant by &quot;block it&quot;)"}, {"owner": {"reputation": 39, "user_id": 6727725, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-LpgK8aHbOD4/AAAAAAAAAAI/AAAAAAAABJg/VuH7UE6dHgQ/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/6727725/joe"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1508367951, "post_id": 46817761, "comment_id": 80588527, "body": "@trentcl I see. Yes, I noticed the braces and just realized that return values in rust are usually implicit with the last statement so I see you have <code>environment</code> after the <code>Ok(environment) =&gt;</code>. Thank you!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1508367017, "last_edit_date": 1508367017, "creation_date": 1508354792, "answer_id": 46817761, "question_id": 46816614, "link": "https://stackoverflow.com/questions/46816614/how-do-i-populate-a-struct-instance-with-match-results-when-using-envy/46817761#46817761", "title": "How do I populate a struct instance with match results when using envy?", "body": "<p>You are calling the envy method which does all the parsing and population for you. The problem is that you <strong>throw away the result</strong> \u2014 it's only available inside the <code>match</code>:</p>\n\n<pre><code>match envy::from_env::&lt;Environment&gt;() {\n    Ok(environment) =&gt; println!(\"{:#?}\", environment), // gone now\n    Err(error) =&gt; panic!(\"{:#?})\", error),\n};\n</code></pre>\n\n<p>You need to not throw it away:</p>\n\n<pre><code>let environment = match envy::from_env::&lt;Environment&gt;() {\n    Ok(environment) =&gt; {\n        println!(\"{:#?}\", environment);\n        environment // Now the entire `match` evaluates to `environment` \n    }\n    Err(error) =&gt; panic!(\"{:#?})\", error),\n};\n</code></pre>\n\n<p>Or, more idiomatically, just use <code>expect</code>:</p>\n\n<pre><code>let environment: Environment = envy::from_env()\n    .expect(\"Couldn't parse environment\");\n\nprintln!(\"{:#?}\", environment);\n</code></pre>\n\n<hr>\n\n<p>Complete example:</p>\n\n<pre><code>extern crate serde;\n#[macro_use]\nextern crate serde_derive;\nextern crate envy;\n\n#[derive(Debug, Deserialize)]\nstruct Environment {\n    username: String,\n    port: u16,\n}\n\nfn main() {\n    let mut environment: Environment = envy::from_env()\n        .expect(\"Couldn't parse environment variables\");\n\n    println!(\"{:#?}\", environment);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ USERNAME=overflow PORT=8787 cargo run\n\nEnvironment {\n    username: \"overflow\",\n    port: 8787\n}\n</code></pre>\n"}], "owner": {"reputation": 39, "user_id": 6727725, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-LpgK8aHbOD4/AAAAAAAAAAI/AAAAAAAABJg/VuH7UE6dHgQ/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/6727725/joe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 89, "favorite_count": 0, "accepted_answer_id": 46817761, "answer_count": 1, "score": 2, "last_activity_date": 1508367017, "creation_date": 1508350334, "last_edit_date": 1508354848, "question_id": 46816614, "link": "https://stackoverflow.com/questions/46816614/how-do-i-populate-a-struct-instance-with-match-results-when-using-envy", "title": "How do I populate a struct instance with match results when using envy?", "body": "<p>I want to populate a mutable variable with the results of matching an environment variable:</p>\n\n<pre><code>struct Environment {\n    some_env_variable_1: String,\n    some_env_variable_2: String,\n    some_env_variable_3: String,\n    some_env_variable_4: String,\n}\n\nmatch envy::from_env::&lt;Environment&gt;() {\n    Ok(environment) =&gt; println!(\"{:#?}\", environment),\n    Err(error) =&gt; panic!(\"{:#?})\", error),\n};\n\n//where I'm stuck\nlet mut e = Environment {\n    some_env_variable_1: // want this to be from match\n};\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1508315331, "post_id": 46805540, "comment_id": 80558658, "body": "The big question is how you want to treat &quot;wrong&quot; arguments. If you do this at runtime, and a function returns a <code>String</code>, but the next one expects a <code>u64</code>, what do you do?"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1508315429, "post_id": 46805540, "comment_id": 80558709, "body": "@oli_obk-ker I would like have a functionality of checking that during insertion which returns Result&lt;()&gt;, for example. I think this is impossible actually, I have asked this question just to be sure in this."}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 2, "creation_date": 1508315608, "post_id": 46805540, "comment_id": 80558793, "body": "In F# you could do <code>f1 () |&gt; f2 |&gt; f3</code> or <code>(f1 &gt;&gt; f2 &gt;&gt; f3) ()</code>; in C++ with any number of functional libs e.g. Boost.Fit you could do <code>f1() | f2 | f3</code> \u2014 I would <b>love</b> to find a way to enable this sort of composition without overhead in Rust."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 1, "creation_date": 1508327254, "post_id": 46805540, "comment_id": 80565891, "body": "@ildjarn in F# the piping is not happening at runtime (as I believe the question aks). If you&#39;re interested in something similar for Rust, have you checked the <a href=\"https://crates.io/crates/pipeline\" rel=\"nofollow noreferrer\">pipeline</a> crate?"}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1508328905, "post_id": 46805540, "comment_id": 80566969, "body": "@PaoloFalabella : Re: the other languages, you&#39;re right \u2013 I hadn&#39;t read the question thoroughly before commenting. But I&#39;m glad I did since I hadn&#39;t seen the pipeline crate before, so thank you for that. :-]"}], "answers": [{"comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 1, "creation_date": 1508315725, "post_id": 46805918, "comment_id": 80558855, "body": "Is there a clean way to do this without type erasure like one can in C++?"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1508316367, "post_id": 46805918, "comment_id": 80559206, "body": "@ildjarn I added another answer for the issue of statically gluing functions together."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 1, "last_activity_date": 1508330414, "last_edit_date": 1508330414, "creation_date": 1508315678, "answer_id": 46805918, "question_id": 46805540, "link": "https://stackoverflow.com/questions/46805540/is-it-possible-to-compose-a-chain-of-functions-at-runtime/46805918#46805918", "title": "Is it possible to compose a chain of functions at runtime?", "body": "<p><strong>Edit:</strong> This answer is for the question as I originally understood it. The chaining comment at the end makes this answer not ideally; that's a different beast. The answer to that is, yes, it's possible, but like any metaprogramming not easy.</p>\n\n<hr>\n\n<p>Not well, but this has nothing to do with being functional or not. It's about typing.</p>\n\n<p>You can do this in Rust:</p>\n\n<pre><code>struct Chain {\n    f1: Box&lt;FnMut() -&gt; u64&gt;,\n    f2: Box&lt;FnMut(u64) -&gt; Box&lt;FnMut()&gt;&gt;,\n    f3: Box&lt;FnMut(Box&lt;FnMut()&gt;)&gt;,\n}\n\nimpl Chain {\n    fn run(&amp;self) {\n        f3(f2(f1()));\n    }\n}\n\nfn f1() -&gt; u64 {\n    println!(\"Hello world: 1\");\n    2\n}\n\nfn f2(i: u64) -&gt; Box&lt;FnMut()&gt; {\n    println!(\"Hello world: {}\", i);\n    Box::new(|| println!(\"Hello world: {}\", 3))\n}\n\nfn f3(mut f: Box&lt;FnMut()&gt;) {\n    f()\n}\n\nfn main() {\n    let chain = Chain {\n        f1: Box::new(f1),\n        f2: Box::new(f2),\n        f3: Box::new(f3),\n    };\n    chain.run();\n}\n</code></pre>\n\n<p>But you can't append arbitrary functions to this chain, nor can you substitute <code>f4</code> for <code>f3</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;fn(std::boxed::Box&lt;std::ops::FnMut() + 'static&gt;) -&gt; bool {f4} as std::ops::FnOnce&lt;(std::boxed::Box&lt;std::ops::FnMut() + 'static&gt;,)&gt;&gt;::Output == ()`\n  --&gt; src/main.rs:36:13\n   |\n36 |         f3: Box::new(f4),\n   |             ^^^^^^^^^^^^ expected bool, found ()\n   |\n   = note: expected type `bool`\n              found type `()`\n   = note: required for the cast to the object type `std::ops::FnMut(std::boxed::Box&lt;std::ops::FnMut() + 'static&gt;)`\n</code></pre>\n\n<p>Because Rust is strictly typed, the functions in the chain have to be of known types, and those types have to fit together.</p>\n\n<p>That said, anything a dynamic language can do, Rust can emulate if you just implement enough of the dynamic typing machinery yourself. You can make a struct that contains a <code>Vec&lt;Box&lt;FnMut(&amp;Any) -&gt; Any&gt;&gt;</code> and an <code>add_func</code> generic method that takes some function and adds a wrapper that does the necessary unwrapping, checking and rewrapping to the <code>Vec</code>. The <code>run</code> method then calls these functions in order.</p>\n"}, {"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 3, "last_activity_date": 1533297934, "last_edit_date": 1533297934, "creation_date": 1508316250, "answer_id": 46806092, "question_id": 46805540, "link": "https://stackoverflow.com/questions/46805540/is-it-possible-to-compose-a-chain-of-functions-at-runtime/46806092#46806092", "title": "Is it possible to compose a chain of functions at runtime?", "body": "<p>Here's how you can do the simple chaining issue. Converting it from free functions to a builder or operator style is left as an exercise. It also uses the \"impl Trait\" feature introduced in Rust 1.26 to make it nicer.</p>\n\n<pre><code>fn f1(_: ()) -&gt; u64 {\n    println!(\"Hello world: 1\");\n    2\n}\nfn f2(i: u64) -&gt; Box&lt;FnMut()&gt; {\n    println!(\"Hello world: {}\", i);\n    Box::new(|| println!(\"Hello world: {}\", 3))\n}\nfn f3(mut f: Box&lt;FnMut()&gt;) {\n    f()\n}\nfn f4(_: Box&lt;FnMut()&gt;) -&gt; bool {\n    println!(\"Hello world: 4\");\n    true\n}\n\nfn dot&lt;I, X, O, F1, F2&gt;(mut f1: F1, mut f2: F2) -&gt; impl FnMut(I) -&gt; O\nwhere\n    F1: FnMut(I) -&gt; X,\n    F2: FnMut(X) -&gt; O,\n{\n    move |i| f2(f1(i))\n}\n\nfn main() {\n    let mut c = dot(dot(f1, f2), f3);\n    c(());\n    let mut c2 = dot(dot(f1, f2), f4);\n    c2(());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2158c2b92e752db73c28cec457adfb45&amp;version=nightly&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Gluing two functions together is not very hard, but you may run into lifetime issues if your types are more complex. In particular, if the input parameter to a function in the chain is a reference to the type that the previous function returns, this code will not compile. I believe that some more parameters and generic bounds can solve this issue, but you would have to experiment a bit.</p>\n\n<p>See also the <a href=\"https://stebalien.github.io/tool-rs/tool/\" rel=\"nofollow noreferrer\">tool crate</a> (<code>compose</code> is pretty much what I just posted) and the <a href=\"https://github.com/algermissen/rustz\" rel=\"nofollow noreferrer\">rustz crate</a>, both of which add more functional idioms to Rust.</p>\n"}, {"tags": [], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "is_accepted": false, "score": -1, "last_activity_date": 1508421516, "last_edit_date": 1508421516, "creation_date": 1508410294, "answer_id": 46828239, "question_id": 46805540, "link": "https://stackoverflow.com/questions/46805540/is-it-possible-to-compose-a-chain-of-functions-at-runtime/46828239#46828239", "title": "Is it possible to compose a chain of functions at runtime?", "body": "<p>I have actually done this I think. This code may need some review, but I think everything can be implement in the following way:</p>\n\n<ol>\n<li><p>Define the functions you wanna call:</p>\n\n<pre><code>fn f1() -&gt; u64 {\n    println!(\"Hello world: 1\");\n    2\n}\nfn f2(i: u64) -&gt; Box&lt;FnMut()&gt; {\n    println!(\"Hello world: {}\", i);\n    Box::new(|| println!(\"Hello world: {}\", 3))\n}\nfn f3(mut f: Box&lt;FnMut()&gt;) {\n    f()\n}\nfn f4(_: Box&lt;FnMut()&gt;) -&gt; bool {\n    println!(\"Hello world: 4\");\n    true\n}\n</code></pre></li>\n<li><p>Take the advantage of having <code>Any</code> type in Rust type system as same as closures:</p>\n\n<pre><code>use std::any::Any;\n\nstruct Bridge&lt;'a&gt; {\n    function: &amp;'a mut FnMut(Box&lt;Any&gt;) -&gt; Box&lt;Any&gt;,\n}\n</code></pre>\n\n<p>The closures can then be used for type erasure of called functions. However, we would still need some work in function checking arguments:</p>\n\n<pre><code>fn run_chain(chain: &amp;mut [Bridge]) -&gt; Box&lt;Any&gt; {\n    if chain.is_empty() {\n        return Box::new(false)\n    }\n\n    let mut args;\n    {\n        let function = &amp;mut chain.first_mut().unwrap().function;\n        args = function(Box::new(0));\n    }\n    for c in chain.iter_mut().skip(1) {\n        let res = (c.function)(args);\n        args = res;\n    }\n    args\n}\n\nfn main() {\n    let mut f1 = |_: Box&lt;Any&gt;| { let res = f1(); Box::new(res) as Box&lt;Any&gt; };\n    let mut f2 = |args: Box&lt;Any&gt;| { let res = f2(*args.downcast::&lt;u64&gt;().unwrap()); Box::new(res) as Box&lt;Any&gt; };\n    let mut f3 = |args: Box&lt;Any&gt;| { let res = f3(*args.downcast::&lt;Box&lt;FnMut()&gt;&gt;().unwrap()); Box::new(res) as Box&lt;Any&gt; };\n    let mut f4 = |args: Box&lt;Any&gt;| { let res = f4(*args.downcast::&lt;Box&lt;FnMut()&gt;&gt;().unwrap()); Box::new(res) as Box&lt;Any&gt; };\n    let mut fns: Vec&lt;Bridge&gt; = Vec::new();\n    fns.push(Bridge { function: &amp;mut f1 });\n    fns.push(Bridge { function: &amp;mut f2 });\n    fns.push(Bridge { function: &amp;mut f3 });\n    let _ = run_chain(&amp;mut fns);\n    fns.pop();\n    fns.push(Bridge { function: &amp;mut f4 });\n    let res = run_chain(&amp;mut fns);\n\n    println!(\"Result: {:?}\", res.downcast::&lt;bool&gt;().unwrap());\n}\n</code></pre></li>\n</ol>\n\n<p>So basically all we do is writing a closure wrapper with the same interface. The type checking can be done right inside the closure before passing the argument further and it can be checked so that it will not lead to a crash.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 934, "favorite_count": 1, "answer_count": 3, "score": 2, "last_activity_date": 1533297934, "creation_date": 1508314309, "last_edit_date": 1533297790, "question_id": 46805540, "link": "https://stackoverflow.com/questions/46805540/is-it-possible-to-compose-a-chain-of-functions-at-runtime", "title": "Is it possible to compose a chain of functions at runtime?", "body": "<p>I have 3 functions:</p>\n\n<pre><code>fn f1() -&gt; u64 {\n    println!(\"Hello world: 1\");\n    2\n}\n\nfn f2(i: u64) -&gt; Box&lt;FnMut()&gt; {\n    println!(\"Hello world: {}\", i);\n    Box::new(|| println!(\"Hello world: {}\", 3))\n}\n\nfn f3(mut f: Box&lt;FnMut()&gt;) {\n    f()\n}\n</code></pre>\n\n<p>One functional technique is chaining \u2014 connecting the output of function A to the input of function B:</p>\n\n<pre><code>fn main() {\n    f3(f2(f1()));\n}\n</code></pre>\n\n<p>This may help in Rust because this method is purely functional and the functions can be pure functions; they don't touch global variables, only work with its arguments which were <strong>moved</strong> (which is awesome).</p>\n\n<p>How can I do this chain at runtime? If I have function <code>f4</code> which accepts the input of <code>f2</code> but does not use it as <code>f3</code>. We can also use it for further chaining by adding a return type to it:</p>\n\n<pre><code>fn f4(_: Box&lt;FnMut()&gt;) -&gt; bool {\n    println!(\"Hello world: 4\");\n    true\n}\n\nfn main() {\n    f4(f2(f1())) // returns f4's result (true)\n}\n</code></pre>\n\n<p>I want to be able to decide how to chain my functions at runtime. The example would be this Lua code (sorry for this):</p>\n\n<pre class=\"lang-lua prettyprint-override\"><code>function f1()\n    print(\"Hello world: 1\")\n    return 2\nend\n\nfunction f2(args)\n    print(\"Hello world: \" .. args)\n    return function()\n        print(\"Hello world: \" .. args + 1)\n    end\nend\n\nfunction f3(args)\n    args()\nend\n\nfunction f4()\n    print(\"Hello world: 4\")\nend\n\n\nfunction run_chain(list)\n    local args\n    for _, v in ipairs(list) do\n        args = v(args)\n    end\nend\n\nlocal list = {}\nlist[#list + 1] = f1\nlist[#list + 1] = f2\nlist[#list + 1] = f3\nrun_chain(list)\nlist[#list] = f4\nrun_chain(list)\n</code></pre>\n\n<p>This is a big plus of dynamic typing of scripting languages, but as far as I know Rust alleges that it is much more functional than C++ for example. Is it possible to chain the functions in such a way?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1508254017, "post_id": 46793702, "comment_id": 80534186, "body": "TBH it&#39;s one of those instances where I long for the Zen of Python :) Also, historically there have been minor discrepancies, I remember <code>?Sized</code> could only be used in a <code>where</code> clause for a while."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1508254088, "post_id": 46793702, "comment_id": 80534225, "body": "@MatthieuM. it was the other way around \u2014 <code>?Sized</code> only worked inline. I remember because I also prefer a single style (using a <code>where</code>) but it didn&#39;t work for <code>?Sized</code>..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1595385219, "last_edit_date": 1595385219, "creation_date": 1508253750, "answer_id": 46793702, "question_id": 46793494, "link": "https://stackoverflow.com/questions/46793494/whats-the-difference-between-t-trait-and-where-t-trait/46793702#46793702", "title": "What&#39;s the difference between `&lt;T: Trait&gt;` and `where T: Trait`?", "body": "<p>Trait bounds defined inside a <code>where</code> clause are a superset of the trait bounds declared inline. The inline style existed before the <code>where</code> clause; the <code>where</code> clause  was <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0135-where.md\" rel=\"nofollow noreferrer\">introduced in RFC 135</a>:</p>\n<blockquote>\n<p>Add <code>where</code> clauses, which provide a more expressive means of\nspecifying trait parameter bounds. [...] The existing bounds notation\nwould remain as syntactic sugar for <code>where</code> clauses.</p>\n</blockquote>\n\n<blockquote>\n<p>Here is a list of limitations with the current bounds syntax that are\novercome with the where syntax:</p>\n<ul>\n<li><p><strong>It cannot express bounds on anything other than type parameters.</strong> Therefore, if you have a function generic in <code>T</code>, you can write\n<code>T:MyTrait</code> to declare that <code>T</code> must implement <code>MyTrait</code>, but you can't\nwrite <code>Option&lt;T&gt; : MyTrait</code> or <code>(int, T) : MyTrait</code>. These forms are less\ncommonly required but still important.</p>\n</li>\n<li><p><strong>It does not work well with associated types.</strong> This is because there is no space to specify the value of an associated type. Other\nlanguages use where clauses (or something analogous) for this purpose.</p>\n</li>\n<li><p><strong>It's just plain hard to read.</strong> Experience has shown that as the number of bounds grows, the current syntax becomes hard to read and\nformat.</p>\n</li>\n</ul>\n</blockquote>\n<p>Since then you can also use <em>higher-ranked trait bounds</em> (<code>for &lt;'a&gt; ...</code>) in a <code>where</code> clause:</p>\n<pre><code>fn foo&lt;T, U&gt;()\nwhere\n    // higher-ranked trait bounds\n    for&lt;'a&gt; T: SomethingElse&lt;'a&gt;,\n    // Bound not directly on the generic type\n    i32: From&lt;U&gt;,\n    T: Iterator,\n    // Bound on an associated type\n    T::Item: Clone,\n    // Just really long\n    U: ReallyLong + AnotherReallyLong + WowReallyLong,\n{}\n</code></pre>\n<p>If your needs can be met by the inline trait bounds, then there is no impact on your code. If you need the extra powers that only <code>where</code> enables, then you need to use <code>where</code>.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/47514930/155423\">What are the differences between an impl trait argument and generic function parameter?</a></li>\n</ul>\n<hr />\n<p>My personal style is to <em>always</em> use the <code>where</code> form. Having a single shape that is also easier to <code>git diff</code> when adding new bounds is worth the extra line of code for me.</p>\n"}, {"tags": [], "owner": {"reputation": 1034911, "user_id": 6309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7aa22372b695ed2b26052c340f9097eb?s=128&d=identicon&r=PG", "display_name": "VonC", "link": "https://stackoverflow.com/users/6309/vonc"}, "is_accepted": false, "score": 1, "last_activity_date": 1561159232, "last_edit_date": 1592644375, "creation_date": 1561159232, "answer_id": 56711404, "question_id": 46793494, "link": "https://stackoverflow.com/questions/46793494/whats-the-difference-between-t-trait-and-where-t-trait/56711404#56711404", "title": "What&#39;s the difference between `&lt;T: Trait&gt;` and `where T: Trait`?", "body": "<p>The <a href=\"https://doc.rust-lang.org/stable/rust-by-example/generics/where.html\" rel=\"nofollow noreferrer\"><code>where</code> clause documentation</a> now includes the example:</p>\n<blockquote>\n<p>When specifying generic types and bounds separately is clearer:</p>\n</blockquote>\n<pre><code>impl &lt;A: TraitB + TraitC, D: TraitE + TraitF&gt; MyTrait&lt;A, D&gt; for YourType {}\n\n// Expressing bounds with a `where` clause\nimpl &lt;A, D&gt; MyTrait&lt;A, D&gt; for YourType where\n    A: TraitB + TraitC,\n    D: TraitE + TraitF {}\n</code></pre>\n<p><a href=\"https://stackoverflow.com/users/155423/shepmaster\">shepmaster</a> mentions:</p>\n<blockquote>\n<p>My personal style is to always use the where form.<br />\nHaving a single shape that is also easier to <code>git diff</code> when adding new bounds is worth the extra line of code for me.</p>\n</blockquote>\n<p>I agree, considering Git 2.23 (Q3 2019) will add rust to its  funcname and words\nboundaries.</p>\n<p>See <a href=\"https://github.com/git/git/commit/33be7b38c23fbbaf75197f6150323e0d4c84bf12\" rel=\"nofollow noreferrer\">commit 33be7b3</a> (30 May 2019) by <a href=\"https://github.com/j6t\" rel=\"nofollow noreferrer\">Johannes Sixt (<code>j6t</code>)</a>.<br />\nSee <a href=\"https://github.com/git/git/commit/d74e78602e3d562f5db64d553d4be21c201ef7b3\" rel=\"nofollow noreferrer\">commit d74e786</a> (16 May 2019) by <a href=\"https://github.com/\" rel=\"nofollow noreferrer\">Marc-Andr\u00e9 Lureau (``)</a>.<br />\n<sup>(Merged by <a href=\"https://github.com/gitster\" rel=\"nofollow noreferrer\">Junio C Hamano -- <code>gitster</code> --</a> in <a href=\"https://github.com/git/git/commit/a41dad4330c8291893b5c5b013457499855ec9b5\" rel=\"nofollow noreferrer\">commit a41dad4</a>, 21 Jun 2019)</sup></p>\n<blockquote>\n<h2>userdiff: add built-in pattern for rust</h2>\n<p>This adds <code>xfuncname</code> and <code>word_regex</code> patterns for Rust, a quite popular programming language.<br />\nIt also includes test cases for the <code>xfuncname</code> regex (<a href=\"https://github.com/git/git/tree/d74e78602e3d562f5db64d553d4be21c201ef7b3/t/t4018\" rel=\"nofollow noreferrer\">t4018</a>) and updated documentation.</p>\n</blockquote>\n"}], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 614, "favorite_count": 5, "accepted_answer_id": 46793702, "answer_count": 2, "score": 10, "last_activity_date": 1595385219, "creation_date": 1508253145, "last_edit_date": 1574468687, "question_id": 46793494, "link": "https://stackoverflow.com/questions/46793494/whats-the-difference-between-t-trait-and-where-t-trait", "title": "What&#39;s the difference between `&lt;T: Trait&gt;` and `where T: Trait`?", "body": "<p>In <a href=\"https://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"noreferrer\">the docs</a> for the <code>Send</code> trait, I see both</p>\n\n<pre><code>impl&lt;T&gt; Send for LinkedList&lt;T&gt; \nwhere\n    T: Send, \n</code></pre>\n\n<p>and</p>\n\n<pre><code>impl&lt;T: Send&gt; Send for LinkedList&lt;T&gt;\n</code></pre>\n\n<p>What is the difference between these two syntaxes, and how would it impact my code if I was writing <code>impl</code> declarations for my own trait?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 0, "creation_date": 1508237124, "post_id": 46788199, "comment_id": 80522622, "body": "<a href=\"https://stackoverflow.com/questions/39349286/can-macros-match-against-constant-arguments-instead-of-literals\" title=\"can macros match against constant arguments instead of literals\">stackoverflow.com/questions/39349286/&hellip;</a>"}, {"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "edited": false, "score": 5, "creation_date": 1508237359, "post_id": 46788199, "comment_id": 80522736, "body": "But you can define them as macros: <code>macro_rules! FORMAT_A { () =&gt; { &quot;a: {}&quot; }; }</code> and <code>format!(FORMAT_A!(), &quot;a&quot;)</code>."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1508237396, "post_id": 46788199, "comment_id": 80522767, "body": "Also related: <a href=\"https://stackoverflow.com/questions/27734708/println-error-format-argument-must-be-a-string-literal\">println! error: format argument must be a string literal</a>."}, {"owner": {"reputation": 2865, "user_id": 171520, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3da837d1227e7df8153c68d502f64994?s=128&d=identicon&r=PG", "display_name": "Dave Challis", "link": "https://stackoverflow.com/users/171520/dave-challis"}, "edited": false, "score": 0, "creation_date": 1508237869, "post_id": 46788199, "comment_id": 80523103, "body": "Thanks, tried searching for similar questions, but didn&#39;t include the word &quot;macro&quot; so nothing useful came up (I thought from error messages that I wasn&#39;t declaring string literals correctly)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1508254783, "post_id": 46788199, "comment_id": 80534646, "body": "@DaveChallis One of the other questions had a link to this but I think it&#39;s worth repeating here: <a href=\"https://en.wikipedia.org/wiki/Literal_%28computer_programming%29\" rel=\"nofollow noreferrer\">meaning of the term &quot;literal&quot;</a>"}, {"owner": {"reputation": 448, "user_id": 4157713, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VHMkt.png?s=128&g=1", "display_name": "Vladimir Demirev", "link": "https://stackoverflow.com/users/4157713/vladimir-demirev"}, "edited": false, "score": 0, "creation_date": 1581538386, "post_id": 46788199, "comment_id": 106472560, "body": "simple things like this should be implemented in the language :( using macros for it is just silly"}], "owner": {"reputation": 2865, "user_id": 171520, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3da837d1227e7df8153c68d502f64994?s=128&d=identicon&r=PG", "display_name": "Dave Challis", "link": "https://stackoverflow.com/users/171520/dave-challis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 4760, "favorite_count": 0, "closed_date": 1508237305, "answer_count": 0, "score": 8, "last_activity_date": 1508244041, "creation_date": 1508236896, "question_id": 46788199, "link": "https://stackoverflow.com/questions/46788199/how-to-create-a-constant-string-literal-in-rust", "closed_reason": "Duplicate", "title": "How to create a constant string literal in Rust?", "body": "<p>I'm trying to define a constant format string that is used in a number of places with the <code>format!</code> macro.</p>\n\n<p>I've tried something like:</p>\n\n<pre><code>const FORMAT_A: &amp;'static str = \"a: {}\";\nstatic FORMAT_B: &amp;'static str = \"b: {}\";\n\nfn main() {\n    format!(FORMAT_A, \"a\");\n    format!(FORMAT_B, \"b\");\n}\n</code></pre>\n\n<p>However, this fails to compile with:</p>\n\n<pre><code>error: format argument must be a string literal.\n --&gt; src/main.rs:5:13\n  |\n5 |     format!(FORMAT_A, \"a\");\n  |             ^^^^^^^^\n\nerror: format argument must be a string literal.\n --&gt; src/main.rs:6:13\n  |\n6 |     format!(FORMAT_B, \"b\");\n  |             ^^^^^^^^\n</code></pre>\n\n<p>Is there another way I should be defining a constant string literal to use with <code>format!</code>?</p>\n"}, {"tags": ["git", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 12, "last_activity_date": 1508233392, "creation_date": 1508233392, "answer_id": 46787162, "question_id": 46786956, "link": "https://stackoverflow.com/questions/46786956/can-i-add-a-dependent-crate-that-is-a-subdirectory-in-a-git-repository/46787162#46787162", "title": "Can I add a dependent crate that is a subdirectory in a git repository?", "body": "<p>From <a href=\"http://doc.crates.io/specifying-dependencies.html\" rel=\"noreferrer\">the Cargo documentation</a>:</p>\n\n<blockquote>\n  <p>Cargo will fetch the git repository at this location then look for a <code>Cargo.toml</code> for the requested crate <strong>anywhere</strong> inside the git repository (<strong>not necessarily at the root</strong>).</p>\n</blockquote>\n\n<p>(<em>emphasis mine</em>)</p>\n\n<p>This means that you can just say:</p>\n\n<pre><code>[dependencies]\nedn = { git = \"https://github.com/mozilla/mentat\" }\n</code></pre>\n"}], "owner": {"reputation": 157, "user_id": 4685140, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-T08eTE_l_BQ/AAAAAAAAAAI/AAAAAAAAC6A/Q4pYAI2JIPc/photo.jpg?sz=128", "display_name": "Vee Satayamas", "link": "https://stackoverflow.com/users/4685140/vee-satayamas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1118, "favorite_count": 0, "accepted_answer_id": 46787162, "answer_count": 1, "score": 6, "last_activity_date": 1508245728, "creation_date": 1508232779, "last_edit_date": 1508245728, "question_id": 46786956, "link": "https://stackoverflow.com/questions/46786956/can-i-add-a-dependent-crate-that-is-a-subdirectory-in-a-git-repository", "title": "Can I add a dependent crate that is a subdirectory in a git repository?", "body": "<p>I want to use an EDN parser but it is inside <a href=\"https://github.com/mozilla/mentat\" rel=\"noreferrer\">https://github.com/mozilla/mentat</a>. <a href=\"https://github.com/mozilla/mentat/tree/master/edn\" rel=\"noreferrer\">https://github.com/mozilla/mentat/tree/master/edn</a> has its own Cargo.toml.</p>\n\n<p>I tried this:</p>\n\n<pre><code>[dependencies]\nedn = { git = \"https://github.com/mozilla/mentat/tree/master/edn\" }\n</code></pre>\n\n<p>But it doesn't work.</p>\n\n<p>Is it possible to add dependency to this crate inside the mentat repository?</p>\n"}, {"tags": ["optimization", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 1, "creation_date": 1508193675, "post_id": 46780074, "comment_id": 80506160, "body": "<code>rustc -C target-cpu=native ...</code>"}], "answers": [{"comments": [{"owner": {"reputation": 1885, "user_id": 370562, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/a59e5c81d88134e98662be745d42ac8b?s=128&d=identicon&r=PG", "display_name": "Josh", "link": "https://stackoverflow.com/users/370562/josh"}, "edited": false, "score": 0, "creation_date": 1508249960, "post_id": 46780708, "comment_id": 80531293, "body": "That&#39;s absolutely true...  I knew I was missing something.  I was thinking that crates are installed locally through cargo install - which compiles from source.  Dependencies are also source-based.  Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1508199293, "creation_date": 1508199293, "answer_id": 46780708, "question_id": 46780074, "link": "https://stackoverflow.com/questions/46780074/does-rustc-cargo-have-a-march-native-equivalent/46780708#46780708", "title": "Does rustc / cargo have a -march=native equivalent?", "body": "<p>As mentioned in the comments, pass the <code>-C target-cpu</code> option to rustc:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc -C target-cpu=native\n</code></pre>\n\n<p>For more options:</p>\n\n<pre><code>$ rustc -C help\n    ...     \n    -C        target-cpu=val -- select target processor (rustc --print target-cpus for details)\n    ...\n</code></pre>\n\n<p>See <a href=\"https://stackoverflow.com/q/38040327/155423\">How to pass rustc flags to cargo?</a> for more methods of passing the option.</p>\n\n<blockquote>\n  <p>I feel like binary portability isn't really a concern</p>\n</blockquote>\n\n<p>I'm pretty sure that the Firefox developers that rely on Rust would disagree with you, as well as plenty of others.</p>\n"}], "owner": {"reputation": 1885, "user_id": 370562, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/a59e5c81d88134e98662be745d42ac8b?s=128&d=identicon&r=PG", "display_name": "Josh", "link": "https://stackoverflow.com/users/370562/josh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1794, "favorite_count": 1, "accepted_answer_id": 46780708, "answer_count": 1, "score": 9, "last_activity_date": 1508199293, "creation_date": 1508193596, "question_id": 46780074, "link": "https://stackoverflow.com/questions/46780074/does-rustc-cargo-have-a-march-native-equivalent", "title": "Does rustc / cargo have a -march=native equivalent?", "body": "<p>I feel like binary portability isn't really a concern, and so something like -march=native may always be the default behavior.  I can't find anything saying one way or the other though.</p>\n"}, {"tags": ["c", "rust", "libc"], "comments": [{"owner": {"reputation": 1714, "user_id": 7404323, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/jYEFn.png?s=128&g=1", "display_name": "sailfish009", "link": "https://stackoverflow.com/users/7404323/sailfish009"}, "edited": false, "score": 0, "creation_date": 1508200142, "post_id": 46779914, "comment_id": 80507721, "body": "transmute: <a href=\"https://doc.rust-lang.org/book/first-edition/casting-between-types.html#transmute\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/first-edition/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1714, "user_id": 7404323, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/jYEFn.png?s=128&g=1", "display_name": "sailfish009", "link": "https://stackoverflow.com/users/7404323/sailfish009"}, "edited": false, "score": 1, "creation_date": 1508200648, "post_id": 46779914, "comment_id": 80507823, "body": "@sailfish009 it&#39;s pretty irresponsible to hand someone Rust&#39;s <i>single largest  footgun</i> with zero warning about using it. <code>transmute</code> is almost never the right tool for the job."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508202097, "post_id": 46779914, "comment_id": 80508183, "body": "<i>I want to turn a vector (<code>Vec&lt;u8&gt;</code>) into a nested vector (<code>Vec&lt;Vec&lt;u8&gt;&gt;</code>)</i> \u2014 <b>why</b> do you want to do this? <i>I don&#39;t want to use iterators, <code>collect</code> or <code>reduce</code></i> \u2014 <b>why</b> do you not want to use these? You mention performance, but you&#39;re not even sure that this transformation will help. Are you already familiar with of slices? You can just do <code>let a = &amp;my_vec[0..3]</code> and you don&#39;t have to allocate anything."}], "answers": [{"comments": [{"owner": {"reputation": 4375, "user_id": 4756304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/rKJAb.png?s=128&g=1", "display_name": "boehm_s", "link": "https://stackoverflow.com/users/4756304/boehm-s"}, "edited": false, "score": 0, "creation_date": 1508220504, "post_id": 46780593, "comment_id": 80513285, "body": "Hi, thanks for the enlightment, I didn&#39;t want to use iterators because if my Vector length is around 1 million, I&#39;ll have to iterate 1 million time to get the job done right ? Is there a way (for very large vector) to do it via the GPU ?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 4375, "user_id": 4756304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/rKJAb.png?s=128&g=1", "display_name": "boehm_s", "link": "https://stackoverflow.com/users/4756304/boehm-s"}, "edited": false, "score": 0, "creation_date": 1508220735, "post_id": 46780593, "comment_id": 80513401, "body": "@boehm_s: You are asking how to transform the layout of the data.  There is <i>no way of doing this</i> that doesn&#39;t involve processing the entire thing.  A GPU cannot help you.  You cannot magically wave away the cost of doing this.  The only other alternative would be to wrap the <code>Vec&lt;u8&gt;</code> in a type that does the lookup on the fly (<i>i.e.</i> ask for element <code>i</code>, it returns <code>&amp;[3*i..3*(i+1)]</code>)."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1508198258, "creation_date": 1508198258, "answer_id": 46780593, "question_id": 46779914, "link": "https://stackoverflow.com/questions/46779914/is-it-possible-to-convert-a-vector-into-a-nested-vector-using-a-libc-pointer/46780593#46780593", "title": "Is it possible to convert a vector into a nested vector using a libc pointer?", "body": "<blockquote>\n  <p>Is it possible ?</p>\n</blockquote>\n\n<p>No.  You <em>cannot</em> perform structural changes like that through pointer casting.  Calling <code>as_ptr</code> on a <code>Vec&lt;u8&gt;</code> will get you a pointer to the <code>Vec</code>'s elements of type <code>*const u8</code>.  Casting that to <code>*const *const [u8; 3]</code> makes no sense, because now you're trying to treat it as a pointer to an array of pointers to arrays of <code>u8</code>.  In other words, you'd be interpreting the <code>u8</code>s <em>as</em> pointers to non-existent arrays.</p>\n\n<p>Worse, even if this <em>did</em> work, if you converted this pointer back into <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>, you'd crash the instant you started deallocating things, because you'd have split ownership of the <em>single</em> allocation of the original <code>Vec</code> between multiple <code>Vec</code>s.  This is a problem because you <em>can't</em> split ownership of an allocation; each <code>Vec</code> would be trying to deallocate the entire chunk of memory.</p>\n\n<blockquote>\n  <p>To do so, I don't want to use Iterators, ...</p>\n</blockquote>\n\n<p>I can't think of any reason <em>not</em> to use iterators for this, given that any valid solution to this problem is going to be equivalent to:</p>\n\n<pre><code>fn main() {\n    let v = vec![1,2,3,4,5,6];\n    let vs = v.chunks(3).collect::&lt;Vec&lt;_&gt;&gt;();\n    println!(\"{:?}\", vs);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 2, "last_activity_date": 1508223471, "creation_date": 1508223471, "answer_id": 46784223, "question_id": 46779914, "link": "https://stackoverflow.com/questions/46779914/is-it-possible-to-convert-a-vector-into-a-nested-vector-using-a-libc-pointer/46784223#46784223", "title": "Is it possible to convert a vector into a nested vector using a libc pointer?", "body": "<p>Given what you've said, I'm willing to bet that you don't really want a <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>, but that you want a way to <em>index</em> your data as if it was a 2D rectangular matrix (i.e. a matrix where all rows have the same length). And I'm assuming that you don't want to write the actual formula (<code>row*stride+col</code>) each time. There is probably something on <a href=\"http://crates.io\" rel=\"nofollow noreferrer\">http://crates.io</a> that would help, but if you want to do it yourself, you can wrap your <code>Vec&lt;u8&gt;</code> into a struct:</p>\n\n<pre><code>struct VecWrapper {\n   stride: usize,\n   data:   Vec&lt;u8&gt;,\n}\n\nimpl VecWrapper {\n   fn get (&amp;self, row: usize, col: usize) -&gt; u8 {\n      self.data[row*self.stride + col]\n   }\n   fn set (&amp;self, row: usize, col: usize, val: u8) {\n      self.data[row*self.stride + col] = val;\n   }\n}\n</code></pre>\n\n<p>Or you can implement the <code>Index</code> and <code>IndexMut</code> traits to index through the <code>[]</code> operator (although you will need to use tuple indices, and using will look like <code>array[(row, col)]</code>)</p>\n"}], "owner": {"reputation": 4375, "user_id": 4756304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/rKJAb.png?s=128&g=1", "display_name": "boehm_s", "link": "https://stackoverflow.com/users/4756304/boehm-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 229, "favorite_count": 0, "accepted_answer_id": 46784223, "answer_count": 2, "score": 0, "last_activity_date": 1508223471, "creation_date": 1508192497, "last_edit_date": 1508199115, "question_id": 46779914, "link": "https://stackoverflow.com/questions/46779914/is-it-possible-to-convert-a-vector-into-a-nested-vector-using-a-libc-pointer", "title": "Is it possible to convert a vector into a nested vector using a libc pointer?", "body": "<p>I want to turn a vector (<code>Vec&lt;u8&gt;</code>) into a nested vector (<code>Vec&lt;Vec&lt;u8&gt;&gt;</code>), for example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[1,2,3,4,5,6] -&gt; [[1,2,3], [4,5,6]]\n</code></pre>\n\n<p>To do so, I don't want to use iterators, <code>collect</code> or <code>reduce</code>, I want to convert the <code>Vec</code> into a C pointer: </p>\n\n<pre><code>let ptr_vec = my_vec.as_ptr() as *const libc::c_void;\n</code></pre>\n\n<p>and then, convert this pseudo-<code>char *my_vec</code> into a pseudo-<code>char *my_vec[3]</code>, so I don't have to read through my entire vector.</p>\n\n<p>Is this possible? If so, does it really increase performance on huge vectors?</p>\n"}, {"tags": ["rust", "traits", "method-signature", "type-signature"], "answers": [{"comments": [{"owner": {"reputation": 4710, "user_id": 2281274, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/sHobc.gif?s=128&g=1", "display_name": "George Shuklin", "link": "https://stackoverflow.com/users/2281274/george-shuklin"}, "edited": false, "score": 0, "creation_date": 1508240684, "post_id": 46779548, "comment_id": 80524883, "body": "Than you. I think, if Rust support optional traits, one can create &#39;or&#39; operator as ?Trait1 + ?Trait2. Or not?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4710, "user_id": 2281274, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/sHobc.gif?s=128&g=1", "display_name": "George Shuklin", "link": "https://stackoverflow.com/users/2281274/george-shuklin"}, "edited": false, "score": 0, "creation_date": 1508241764, "post_id": 46779548, "comment_id": 80525559, "body": "@GeorgeShuklin Rust does <b>not</b> support optional traits. The <code>?</code> (question mark) only applies to the specific trait <code>Sized</code>. For ergonomics, every generic type has an implicit <code>T: Sized</code> bound <i>unless</i> you remove that default bound using <code>?Sized</code>."}, {"owner": {"reputation": 636, "user_id": 986730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2605883a1352c96af1e097687971b97?s=128&d=identicon&r=PG", "display_name": "user986730", "link": "https://stackoverflow.com/users/986730/user986730"}, "edited": false, "score": 0, "creation_date": 1597529746, "post_id": 46779548, "comment_id": 112163920, "body": "It&#39;s not available, but it does make sense. Say you have a function like <code>fn print_related_stuff&lt;A, B&gt;(a: A, b: B){ print(a.to_string(), b.to_string()) }</code>. A where clause like <code>where A:Stringable, B:Stringable, (A == B or (A: ISomething and B: ISomethingElse))</code> makes a lot of sense to me if you want the compiler to not allow just any <code>Stringable</code> types in the function, but rather to only allow types that are related in any one of several possible relationships"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 636, "user_id": 986730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2605883a1352c96af1e097687971b97?s=128&d=identicon&r=PG", "display_name": "user986730", "link": "https://stackoverflow.com/users/986730/user986730"}, "edited": false, "score": 0, "creation_date": 1597668436, "post_id": 46779548, "comment_id": 112199775, "body": "@user986730 that specific example would be achieved by using only one generic type, which will ensure that the two values have the same type."}, {"owner": {"reputation": 4073, "user_id": 11498773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/79d317da8c76af3f45f63986e9783740?s=128&d=identicon&r=PG&f=1", "display_name": "Mihir", "link": "https://stackoverflow.com/users/11498773/mihir"}, "edited": false, "score": 0, "creation_date": 1605626388, "post_id": 46779548, "comment_id": 114704697, "body": "I am still not that experienced with rust, so not very sure. Still I think I needed that <code>or</code> thing today. Wanted to have a trait that with supertrait BitOr&lt;T&gt;. T could be any integer (u8, u32, i32 etc). It could be done by specifying trait bounds on the trait itself but then trait could be implemented multiple times and also funcs receiving my trait as arg will have unecessary generic bounds. As the trait implemented <code>BitOr</code> with any integer, bit or could be done on type implementing my trait with an integer expression (whose type i32, i64 etc would be inferred automatically). Contd.."}, {"owner": {"reputation": 4073, "user_id": 11498773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/79d317da8c76af3f45f63986e9783740?s=128&d=identicon&r=PG&f=1", "display_name": "Mihir", "link": "https://stackoverflow.com/users/11498773/mihir"}, "edited": false, "score": 0, "creation_date": 1605626493, "post_id": 46779548, "comment_id": 114704759, "body": "<code>BitOr&lt;impl Int&gt;</code> would be nice but it &lt;impl Trait&gt; says this is only possible in functions. I am not sure if it&#39;s even possible but will there by something like <code>BitOr&lt;impl Trait&gt;</code> in super traits possible in future versions of rust?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4073, "user_id": 11498773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/79d317da8c76af3f45f63986e9783740?s=128&d=identicon&r=PG&f=1", "display_name": "Mihir", "link": "https://stackoverflow.com/users/11498773/mihir"}, "edited": false, "score": 0, "creation_date": 1605637498, "post_id": 46779548, "comment_id": 114710292, "body": "@Mihir I&#39;ve read your comment a few times, but I&#39;m not sure that I understand your goal. What I&#39;d suggest is to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> that demonstrates what you&#39;d <i>like</i> to do and then post a top-level question instead of a comment, That way, we can answer the question or identify any possible duplicates, but with a lot less guessing."}, {"owner": {"reputation": 4073, "user_id": 11498773, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/79d317da8c76af3f45f63986e9783740?s=128&d=identicon&r=PG&f=1", "display_name": "Mihir", "link": "https://stackoverflow.com/users/11498773/mihir"}, "edited": false, "score": 0, "creation_date": 1605657976, "post_id": 46779548, "comment_id": 114717731, "body": "@Shepmaster, I switched to a different approach. But here is an example of what I was trying to do: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=823333393886039b4ec7fe3af7274a76\" rel=\"nofollow noreferrer\">example</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1508190125, "creation_date": 1508190125, "answer_id": 46779548, "question_id": 46779310, "link": "https://stackoverflow.com/questions/46779310/what-are-the-possible-operators-for-traits-in-a-where-clause-in-rust/46779548#46779548", "title": "What are the possible operators for traits in a where clause in Rust?", "body": "<blockquote>\n  <p>'or' notation</p>\n</blockquote>\n\n<p>No. Such a thing doesn't make sense to me \u2014 what would the code do if something could be <code>A</code> OR <code>B</code>?</p>\n\n<blockquote>\n  <p>brackets</p>\n</blockquote>\n\n<p>No, unless you count the parenthesis in <code>Fn(...)</code> and friends, the use of angle brackets as generics (<code>Vec&lt;T&gt;</code>) or the use of square brackets in slices (<code>[u8]</code>), but these are parts of types.</p>\n\n<p>Again, such a request doesn't make sense to me, why would you need any kind of grouping?</p>\n\n<blockquote>\n  <p>negation</p>\n</blockquote>\n\n<p>No. I believe this is due to the fact that handling negative logic makes things a lot more complicated.</p>\n\n<blockquote>\n  <p>other operators </p>\n</blockquote>\n\n<p><a href=\"https://stackoverflow.com/q/30333607/155423\">There's the <code>?</code> (question mark) bound</a>.</p>\n\n<hr>\n\n<p>Source: I've written <a href=\"https://github.com/shepmaster/fuzzy-pickles\" rel=\"nofollow noreferrer\">a parser of Rust code</a>. While it's possible I've missed something, it parses all the ~37500 Rust files I've thrown at it, so it's a pretty good fit.</p>\n"}], "owner": {"reputation": 4710, "user_id": 2281274, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/sHobc.gif?s=128&g=1", "display_name": "George Shuklin", "link": "https://stackoverflow.com/users/2281274/george-shuklin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 444, "favorite_count": 0, "accepted_answer_id": 46779548, "answer_count": 1, "score": 2, "last_activity_date": 1508252656, "creation_date": 1508188938, "last_edit_date": 1508252656, "question_id": 46779310, "link": "https://stackoverflow.com/questions/46779310/what-are-the-possible-operators-for-traits-in-a-where-clause-in-rust", "title": "What are the possible operators for traits in a where clause in Rust?", "body": "<p>I'm learning Rust and got to the chapter on trait bounds. In that chapter, they give an example with the <code>+</code> (plus) operator to enumerate all required traits in a <code>where</code> clause.</p>\n\n<p>What other operators are allowed on traits in Rust? I searched but I wasn't able to find any documentation about this. Does Rust support 'or' notation, brackets, negation?</p>\n"}, {"tags": ["graph", "rust", "connected-components", "petgraph"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1508188811, "post_id": 46778636, "comment_id": 80504391, "body": "The nature of this question is very similar to <a href=\"https://stackoverflow.com/questions/31775915/binding-does-not-live-long-enough-when-storing-a-reference-to-a-vector-item-in-a\" title=\"binding does not live long enough when storing a reference to a vector item in a\">stackoverflow.com/questions/31775915/&hellip;</a>, <a href=\"https://stackoverflow.com/questions/33286213/why-does-my-variable-not-live-long-enough\" title=\"why does my variable not live long enough\">stackoverflow.com/questions/33286213/&hellip;</a>, or any number of similar hits to the search &quot;does not live long enough&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 8, "last_activity_date": 1508286136, "creation_date": 1508286136, "answer_id": 46801060, "question_id": 46778636, "link": "https://stackoverflow.com/questions/46778636/return-all-petgraph-connected-components-in-a-hashtable/46801060#46801060", "title": "Return all petgraph connected components in a hashtable", "body": "<p>This much smaller piece of code exhibits the same problem (<a href=\"https://play.rust-lang.org/?gist=bd55c979600379a9a7505fc8ae469a31&amp;version=stable\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>let mut v = Vec::new(); // Vec&lt;&amp;'a NodeIndex&gt; ... but what is 'a?\nfor n in 0..10 {\n    let nx: NodeIndex = NodeIndex::new(n);\n    v.push(&amp;nx);\n}\n</code></pre>\n\n<p>i.e., you're creating a short-lived <code>NodeIndex</code> inside a loop and trying to store a reference to it in a longer-lived <code>Vec</code>.</p>\n\n<p>In this case the solution is very simple: just move the <code>NodeIndex</code> instead of taking a reference.</p>\n\n<pre><code>    v.push(nx)\n</code></pre>\n\n<p>In your original code the fix is no different.</p>\n\n<pre><code>// nit: \"indices\" is the plural of \"index\"; there is no singular word \"indice\"\nfor current_node_index in myGraph.node_indices() {\n    // actually you don't need to supply a type here, but if you did...\n    let mut current_vec: Vec&lt;petgraph::graph::NodeIndex&gt; = Vec::new();\n    if already_visited.contains(&amp;current_node_index) {\n        continue;\n    }\n    let mut dfs = Dfs::new(&amp;myGraph, current_node_index);\n    while let Some(nx) = dfs.next(&amp;myGraph) {\n        current_vec.push(nx);\n        //               ^-----v- Look Ma, no &amp;s!\n        already_visited.insert(nx);\n    }\n    map_real_index.insert(cpt, current_vec);\n    cpt = cpt + 1\n}\n</code></pre>\n\n<p>\"But,\" you say, \"I don't want to copy an entire <code>NodeIndex</code>! I just want to have a pointer to it! <code>NodeIndex</code> is a big fat hairy struct, right?\"</p>\n\n<p>Well, if that (an owning pointer) is really what you need, <code>Box</code> is what you almost always want. But first look at the definition of <a href=\"https://docs.rs/petgraph/0.4.10/petgraph/graph/struct.NodeIndex.html\" rel=\"noreferrer\"><code>NodeIndex</code></a> and check out the <a href=\"https://docs.rs/petgraph/0.4.10/src/petgraph/graph_impl/mod.rs.html#89\" rel=\"noreferrer\">source code</a>, if you want to know how heavyweight these indices really are:</p>\n\n<pre><code>pub struct NodeIndex&lt;Ix=DefaultIx&gt;(Ix);\n</code></pre>\n\n<p>A <code>NodeIndex</code> is just an <code>Ix</code>, which is (if you look up <a href=\"https://docs.rs/petgraph/0.4.10/petgraph/graph/type.DefaultIx.html\" rel=\"noreferrer\"><code>DefaultIx</code></a>) just an alias for <code>u32</code>. On a 64 bit PC, that's actually <em>smaller</em> than the pointer you were trying to store, and in Rust, you don't pay any extra cost for using it -- at runtime, it's really <em>just</em> a <code>u32</code>.</p>\n\n<p>Conveniently, <a href=\"https://docs.rs/petgraph/0.4.10/petgraph/graph/struct.NodeIndex.html#impl-Copy\" rel=\"noreferrer\"><code>NodeIndex</code> is <code>Copy</code></a> (when <code>Ix</code> is <code>Copy</code>), so you don't even need to throw that extra <code>.clone()</code> in; you can just do <code>current_vec.push(nx)</code> followed by <code>already_visited.insert(nx)</code> as I did above. (But even if you do write <code>.clone()</code>, you pay no runtime cost for doing so; it's just unnecessary.)</p>\n"}], "owner": {"reputation": 860, "user_id": 5972993, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8775e13a26bf45d511e49f64b565c48c?s=128&d=identicon&r=PG", "display_name": "RomainL.", "link": "https://stackoverflow.com/users/5972993/romainl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 352, "favorite_count": 0, "accepted_answer_id": 46801060, "answer_count": 1, "score": 1, "last_activity_date": 1580252299, "creation_date": 1508185917, "last_edit_date": 1580252299, "question_id": 46778636, "link": "https://stackoverflow.com/questions/46778636/return-all-petgraph-connected-components-in-a-hashtable", "title": "Return all petgraph connected components in a hashtable", "body": "<p>I'm using petgraph and I would like to extract connected components.</p>\n\n<p>I want to have a <code>HashMap&lt;u32, Vec&lt;&amp;petgraph::graph::NodeIndex&gt;&gt;</code>\nwith a <code>u32</code> as the identifier for the connected component and a <code>Vec</code> as a container with references to all nodes in the connected component.</p>\n\n<p>If this is a bad design, don't hesitate to point out a better one; I am quite a Rust beginner.</p>\n\n<p>I tried something like this:</p>\n\n<pre><code>extern crate fnv;\nextern crate petgraph;\n\nuse petgraph::visit::Dfs;\n\nuse fnv::FnvHashMap; // a faster hash for small key\nuse fnv::FnvHashSet;\n\n\n// structure definition\npub struct NodeAttr {\n    pub name_real: String,\n}\n\nimpl Default for NodeAttr {\n    fn default() -&gt; Self {\n        NodeAttr {\n            name_real: \"default_name_for_testing\".to_string(),\n        }\n    }\n}\n\n\npub struct EdgesAttr {\n    pub eval: f64,\n    pub pid: f32,\n    pub cov: f32, // minimum coverage\n}\n\nimpl Default for EdgesAttr {\n    fn default() -&gt; Self {\n        EdgesAttr {\n            eval: 0.0,\n            pid: 100.0,\n            cov: 100.0,\n        }\n    }\n}\n\npub fn cc_dfs&lt;'a&gt;(\n    myGraph: &amp;petgraph::Graph&lt;NodeAttr, EdgesAttr, petgraph::Undirected&gt;,\n) -&gt; FnvHashMap&lt;u32, Vec&lt;&amp;'a petgraph::graph::NodeIndex&gt;&gt; {\n    let mut already_visited = FnvHashSet::&lt;&amp;petgraph::graph::NodeIndex&gt;::default();\n    let mut map_real_index: FnvHashMap&lt;u32, Vec&lt;&amp;petgraph::graph::NodeIndex&gt;&gt; =\n        FnvHashMap::with_capacity_and_hasher(myGraph.node_count(), Default::default());\n\n    let mut cpt = 0;\n\n    for current_node_indice in myGraph.node_indices() {\n        let mut current_vec: Vec&lt;&amp;petgraph::graph::NodeIndex&gt; = Vec::new();\n        if already_visited.contains(&amp;current_node_indice) {\n            continue;\n        }\n        let mut dfs = Dfs::new(&amp;myGraph, current_node_indice);\n        while let Some(nx) = dfs.next(&amp;myGraph) {\n            // the problem is around here\n            // I believe the just assigned nx live only for the while\n            //But it should live for the upper for loop. What to do?\n            current_vec.push(&amp;nx);\n            already_visited.insert(&amp;nx);\n        }\n        map_real_index.insert(cpt, current_vec);\n        cpt = cpt + 1\n    }\n\n    return map_real_index;\n}\n\nfn main() {}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>enter[dependencies]\nfnv=\"*\"\npetgraph=\"*\" \n</code></pre>\n\n<p>With the compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `nx` does not live long enough\n  --&gt; src/main.rs:59:31\n   |\n59 |             current_vec.push(&amp;nx);\n   |                               ^^ does not live long enough\n60 |             already_visited.insert(&amp;nx);\n61 |         }\n   |         - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 40:1...\n  --&gt; src/main.rs:40:1\n   |\n40 | / pub fn cc_dfs&lt;'a&gt;(\n41 | |     myGraph: &amp;petgraph::Graph&lt;NodeAttr, EdgesAttr, petgraph::Undirected&gt;,\n42 | | ) -&gt; FnvHashMap&lt;u32, Vec&lt;&amp;'a petgraph::graph::NodeIndex&gt;&gt; {\n43 | |     let mut already_visited = FnvHashSet::&lt;&amp;petgraph::graph::NodeIndex&gt;::default();\n...  |\n66 | |     return map_real_index;\n67 | | }\n   | |_^\n\nerror[E0597]: `nx` does not live long enough\n  --&gt; src/main.rs:61:9\n   |\n60 |             already_visited.insert(&amp;nx);\n   |                                     -- borrow occurs here\n61 |         }\n   |         ^ `nx` dropped here while still borrowed\n...\n67 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p>I cloned the node index in my vector and that worked:</p>\n\n<pre><code>current_vec.push(nx.clone()); // instead of (&amp;nx)\nalready_visited.insert(nx.clone());`\n</code></pre>\n\n<p>I believe (maybe wrongly) that working with references will be more effective than copying.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508182074, "post_id": 46777578, "comment_id": 80501082, "body": "Did you do as the compiler suggests: <i>consider adding an explicit lifetime bound <code>S: &#39;static</code> so that the type <code>S</code> will meet its required lifetime bounds</i>?"}, {"owner": {"reputation": 758, "user_id": 992006, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a06f6f95cac06d59acd366322095c378?s=128&d=identicon&r=PG", "display_name": "tamato", "link": "https://stackoverflow.com/users/992006/tamato"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508182522, "post_id": 46777578, "comment_id": 80501310, "body": "yes, and I tried adding a lifetype, couldn&#39;t find a way to add it. And just &#39;S: &#39;static` doesn&#39;t help me in actually adding it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508182718, "post_id": 46777578, "comment_id": 80501415, "body": "<i>doesn&#39;t help me in actually adding it</i> \u2014 <a href=\"https://play.rust-lang.org/?gist=3890cb86f1c1ee0e15165609a25a3503&amp;version=stable\" rel=\"nofollow noreferrer\">seems to work for me</a>."}, {"owner": {"reputation": 758, "user_id": 992006, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a06f6f95cac06d59acd366322095c378?s=128&d=identicon&r=PG", "display_name": "tamato", "link": "https://stackoverflow.com/users/992006/tamato"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508182786, "post_id": 46777578, "comment_id": 80501451, "body": "What you have in your link <i>does</i> help. Part of my problem is not knowing the synatx"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508183169, "post_id": 46777578, "comment_id": 80501654, "body": "Seriously, I encourage you to file an issue (or find an existing one) at the <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow noreferrer\">Rust repository</a>. Rust always wants to make error messages better \u2014 if this wasn&#39;t clear enough, it can probably be improved."}], "owner": {"reputation": 758, "user_id": 992006, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a06f6f95cac06d59acd366322095c378?s=128&d=identicon&r=PG", "display_name": "tamato", "link": "https://stackoverflow.com/users/992006/tamato"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 269, "favorite_count": 0, "closed_date": 1508182159, "answer_count": 0, "score": 0, "last_activity_date": 1508182219, "creation_date": 1508181465, "last_edit_date": 1508182044, "question_id": 46777578, "link": "https://stackoverflow.com/questions/46777578/how-to-add-lifetime-to-object-in-a-vecbox-owned-by-self", "closed_reason": "Duplicate", "title": "How to add lifetime to object in a Vec&lt;Box&lt;_&gt;&gt; owned by Self?", "body": "<p>How do I go about making it clear to the compiler that <code>World</code> will own <code>system</code> and that their lifetimes are similar?</p>\n\n<pre><code>trait System {\n    fn process(&amp;self);\n}\n\nstruct Action {\n    who: i32,\n}\nimpl System for Action {\n    fn process(&amp;self) {\n        println!(\"id: {}\", self.who);\n    }\n}\n\ntype SystemVec = Vec&lt;Box&lt;System&gt;&gt;;\nstruct World {\n    systems: SystemVec,\n}\nimpl World {\n    fn new() -&gt; Self {\n        World {\n            systems: Vec::new(),\n        }\n    }\n\n    fn add_system&lt;S: System&gt;(&amp;mut self, system: S) {\n        self.systems.push(Box::new(system));\n    }\n}\n\nfn main() {\n    let mut w = World::new();\n    w.add_system(Action { who: 0 });\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `S` may not live long enough\n  --&gt; src/main.rs:26:27\n   |\n26 |         self.systems.push(Box::new(system));\n   |                           ^^^^^^^^^^^^^^^^\n   |\n   = help: consider adding an explicit lifetime bound `S: 'static`...\nnote: ...so that the type `S` will meet its required lifetime bounds\n  --&gt; src/main.rs:26:27\n   |\n26 |         self.systems.push(Box::new(system));\n   |                           ^^^^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 14813, "user_id": 141502, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/zgvfq.png?s=128&g=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/141502/daniel"}, "is_accepted": false, "score": 6, "last_activity_date": 1508182762, "last_edit_date": 1508182762, "creation_date": 1508181532, "answer_id": 46777592, "question_id": 46777457, "link": "https://stackoverflow.com/questions/46777457/how-do-i-add-feature-to-another-crates-attributes-without-forking-the/46777592#46777592", "title": "How do I add #![feature(***)] to another crate&#39;s attributes without forking the crate?", "body": "<p>Associated constants were stabilized recently in Rust 1.20; this error should disappear without any code changes if you upgrade your Rust compiler.</p>\n\n<p>In addition to <a href=\"http://doc.crates.io/specifying-dependencies.html#overriding-dependencies\" rel=\"nofollow noreferrer\"><code>[replace]</code> and <code>[patch]</code></a>, there's also the option of using <a href=\"http://doc.crates.io/config.html\" rel=\"nofollow noreferrer\"><code>.cargo/config</code></a> to <a href=\"http://doc.crates.io/specifying-dependencies.html#overriding-with-local-dependencies\" rel=\"nofollow noreferrer\">override a dependency locally</a> without changing <code>Cargo.toml</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 4375, "user_id": 4756304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/rKJAb.png?s=128&g=1", "display_name": "boehm_s", "link": "https://stackoverflow.com/users/4756304/boehm-s"}, "edited": false, "score": 0, "creation_date": 1508185151, "post_id": 46777838, "comment_id": 80502709, "body": "Thanks, I&#39;m using a nightly compiler because I will use crates that relies on non-stable features, and it doesn&#39;t only concern the <code>associated_consts</code> feature, this was just an example"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4375, "user_id": 4756304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/rKJAb.png?s=128&g=1", "display_name": "boehm_s", "link": "https://stackoverflow.com/users/4756304/boehm-s"}, "edited": false, "score": 1, "creation_date": 1508185532, "post_id": 46777838, "comment_id": 80502884, "body": "@boehm_s right, which is why I put the stuff specific to <code>associated_consts</code> at the end of the answer \u2014 all the rest of it is generic."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1508184083, "last_edit_date": 1508184083, "creation_date": 1508182612, "answer_id": 46777838, "question_id": 46777457, "link": "https://stackoverflow.com/questions/46777457/how-do-i-add-feature-to-another-crates-attributes-without-forking-the/46777838#46777838", "title": "How do I add #![feature(***)] to another crate&#39;s attributes without forking the crate?", "body": "<blockquote>\n  <p>How do I add #![feature(***)] to another crate's attributes without forking the crate?</p>\n</blockquote>\n\n<p>You <strong>don't</strong>. You cannot change another crate without... changing it.</p>\n\n<p>You are using an old nightly compiler; <strong>update it</strong>. If you are using a nightly compiler, it's your responsibility to keep it up-to-date. If you don't know why you have a nightly compiler, switch to a stable compiler.</p>\n\n<hr>\n\n<p>This can only occur if:</p>\n\n<ol>\n<li>You are using a nightly compiler. If you weren't, you wouldn't get the suggestion to add the attribute, it'd be a hard error.</li>\n<li>You are using a crate that relies on a feature that has not been stabilized in your version of the compiler and thus requires the attribute to enable it.</li>\n<li>The feature has been stabilized in a newer version of Rust and thus the crate no longer needs to have the attribute itself.</li>\n</ol>\n\n<hr>\n\n<p>For this example, you can read <a href=\"https://github.com/rust-lang-nursery/bitflags/blob/master/CHANGELOG.md#100\" rel=\"nofollow noreferrer\">the crates changelog</a>:</p>\n\n<blockquote>\n  <h2>1.0.0</h2>\n  \n  <ul>\n  <li><p><strong>[breaking change]</strong> Macro now generates associated constants (#24)</p></li>\n  <li><p><strong>[breaking change]</strong> Minimum supported version is Rust 1.20, due to usage of associated constants</p></li>\n  </ul>\n</blockquote>\n"}], "owner": {"reputation": 4375, "user_id": 4756304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/rKJAb.png?s=128&g=1", "display_name": "boehm_s", "link": "https://stackoverflow.com/users/4756304/boehm-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 951, "favorite_count": 1, "accepted_answer_id": 46777838, "answer_count": 2, "score": 1, "last_activity_date": 1508184083, "creation_date": 1508180962, "last_edit_date": 1508182314, "question_id": 46777457, "link": "https://stackoverflow.com/questions/46777457/how-do-i-add-feature-to-another-crates-attributes-without-forking-the", "title": "How do I add #![feature(***)] to another crate&#39;s attributes without forking the crate?", "body": "<p>Every time I see an error like: </p>\n\n<blockquote>\n  <p>error: associated constants are experimental (see issue #29646)<br>\n  ... <br>\n  = help: add #![feature(associated_consts)] to the crate attributes to enable <br>\n  = note: this error originates in a macro outside of the current crate</p>\n</blockquote>\n\n<p>I fork the crate and add the feature to the crate attributes and then replace the dependency in my Cargo.toml: </p>\n\n<pre><code>[replace.\"bitflags:1.0.0\"]\ngit = \"https://github.com/boehm-s/bitflags\"\nrev = \"bb2afce\"\n</code></pre>\n\n<p>Is there a way to get rid of these errors without forking crates?</p>\n"}, {"tags": ["multithreading", "rust", "relaxed-atomics"], "answers": [{"comments": [{"owner": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 0, "creation_date": 1508177852, "post_id": 46776185, "comment_id": 80498857, "body": "This doesn&#39;t quite answer where the code which syncs caches is resided. Is there a memory barrier when exiting a crossbeam scope?"}, {"owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "reply_to_user": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 0, "creation_date": 1508179540, "post_id": 46776185, "comment_id": 80499740, "body": "According to <a href=\"https://doc.rust-lang.org/nomicon/atomics.html#relaxed\" rel=\"nofollow noreferrer\">this section of the nomicon</a>, these writes are still atomic so there shouldn&#39;t be anything in the cache that will cause any issues."}, {"owner": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 1, "creation_date": 1508180418, "post_id": 46776185, "comment_id": 80500243, "body": "It also says that Relaxed ordering establishes no happens-before relationships. The fact that writes are atomic doesn&#39;t mean that they will be seen by other threads."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 1, "creation_date": 1508180838, "post_id": 46776185, "comment_id": 80500475, "body": "@AlexanderTorstling Relaxed ordering doesn&#39;t automatically establish happens-before, but you can still introduce an explicit fence. For example, <code>x = bla.load(Relaxed); if !x.is_null() { fence(Acquire); &lt;dereference x&gt; }</code> is a valid pattern. <a href=\"http://preshing.com/20130505/introducing-mintomic-a-small-portable-lock-free-api/\" rel=\"nofollow noreferrer\">This atomic library</a> is completely based on relaxed reads/writes and explicit fences."}], "tags": [], "owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "is_accepted": false, "score": 0, "last_activity_date": 1508176084, "creation_date": 1508176084, "answer_id": 46776185, "question_id": 46775732, "link": "https://stackoverflow.com/questions/46775732/does-calling-into-inner-on-an-atomic-take-into-account-all-the-relaxed-write/46776185#46776185", "title": "Does calling `into_inner()` on an atomic take into account all the relaxed writes?", "body": "<p>The fact that you can call <code>into_inner</code> (which consumes the <code>AtomicUsize</code>) means that there are no more borrows on that backing storage.</p>\n\n<p>Each <code>fetch_add</code> is an atomic with the <code>Relaxed</code> ordering, so once the threads are complete there shouldn't be any thing that changes it (if so, then there's a bug in crossbeam).</p>\n\n<p>See <a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html#method.into_inner\" rel=\"nofollow noreferrer\">the description on <code>into_inner</code> for more info</a></p>\n"}, {"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1508186313, "post_id": 46777411, "comment_id": 80503233, "body": "I was trying to answer this question, but was missing the evidence that there is a synchronize-with relation upon a thread join. Can you provide additional sources on this in specific? Am I searching with the wrong key terms?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1508186614, "post_id": 46777411, "comment_id": 80503362, "body": "@E_net4 It&#39;s documented <a href=\"http://en.cppreference.com/w/cpp/thread/thread/join\" rel=\"nofollow noreferrer\">in C++</a>, immediately in the second sentence. (Similar wording is also present in the C++ standard.) My reasoning is that this applies to Rust is because: a) as noted in the answer, Rust documents that it inherits C++&#39;s memory model, and b) without such a fence, <code>into_inner</code> would constitute a data race and would definitely not be safe in the Rust sense."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1508186984, "post_id": 46777411, "comment_id": 80503542, "body": "Yeah, the documentation on <code>join</code> is nice. I certainly understood a) and b), but if we consider <a href=\"https://play.rust-lang.org/?gist=65ff0be362120d13bbd735f306a31acd&amp;version=stable\" rel=\"nofollow noreferrer\">this version</a> of the program, where the value is not consumed with <code>into_inner</code>, there had to be some mechanism that makes the main thread see the outcome of all counter incrementations."}, {"owner": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 1, "creation_date": 1508482422, "post_id": 46777411, "comment_id": 80635003, "body": "Thank you. I also found <a href=\"https://stackoverflow.com/a/43102737/83741\">stackoverflow.com/a/43102737/83741</a> and <a href=\"http://en.cppreference.com/w/cpp/atomic/atomic_thread_fence\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/atomic/atomic_thread_fence</a> informative. The sychronizes-with relation is the key detail which I had missed. Your linked article is great. Thanks again."}, {"owner": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 0, "creation_date": 1508502509, "post_id": 46777411, "comment_id": 80645441, "body": "I used the ASM view in the playground to look at the specific instructions generated, and it seems as if <a href=\"https://doc.rust-lang.org/core/sync/atomic/fn.fence.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/core/sync/atomic/fn.fence.html</a> is used, which results in an mfence instruction on x86: <a href=\"http://x86.renejeschke.de/html/file_module_x86_id_170.html\" rel=\"nofollow noreferrer\">x86.renejeschke.de/html/file_module_x86_id_170.html</a>"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "edited": false, "score": 1, "creation_date": 1508756243, "post_id": 46777411, "comment_id": 80722317, "body": "@AlexanderTorstling I&#39;ve now submitted <a href=\"https://github.com/rust-lang/rust/issues/45467\" rel=\"nofollow noreferrer\">an issue</a> for this to be documented explicitly."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 5, "last_activity_date": 1508336008, "last_edit_date": 1508336008, "creation_date": 1508180734, "answer_id": 46777411, "question_id": 46775732, "link": "https://stackoverflow.com/questions/46775732/does-calling-into-inner-on-an-atomic-take-into-account-all-the-relaxed-write/46777411#46777411", "title": "Does calling `into_inner()` on an atomic take into account all the relaxed writes?", "body": "<blockquote>\n  <p>Does <code>into_inner()</code> return all the relaxed writes in this example program? If so, which concept guarantees this?</p>\n</blockquote>\n\n<p>It's not <code>into_inner</code> that guarantees it, it's <code>join</code>.</p>\n\n<p>What <code>into_inner</code> guarantees is that either <em>some</em> synchronization has been performed since the final concurrent write (<code>join</code> of thread, last <code>Arc</code> having been dropped and unwrapped with <code>try_unwrap</code>, etc.), or the atomic was never sent to another thread in the first place. Either case is sufficient to make the read data-race-free.</p>\n\n<p>Crossbeam <a href=\"https://docs.rs/crossbeam/0.3.0/crossbeam/struct.Scope.html#method.spawn\" rel=\"nofollow noreferrer\">documentation</a> is explicit about using <code>join</code> at the end of a scope:</p>\n\n<blockquote>\n  <p>This [the thread being guaranteed to terminate] is ensured by having the parent thread join on the child thread before the scope exits.</p>\n</blockquote>\n\n<p>Regarding losing writes:</p>\n\n<blockquote>\n  <p>Which concept guarantees that all writes are finished and all caches are synced back to the main thread when <code>into_inner()</code> is called? Is it possible to lose writes?</p>\n</blockquote>\n\n<p>As stated in <a href=\"https://doc.rust-lang.org/nomicon/atomics.html\" rel=\"nofollow noreferrer\">various</a> <a href=\"https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html\" rel=\"nofollow noreferrer\">places</a> in the documentation, Rust inherits the C++ memory model for atomics. <a href=\"http://en.cppreference.com/w/cpp/thread/thread/join\" rel=\"nofollow noreferrer\">In C++11</a> and later, the completion of a thread <a href=\"http://preshing.com/20130823/the-synchronizes-with-relation/\" rel=\"nofollow noreferrer\"><em>synchronizes with</em></a> the corresponding successful return from <code>join</code>. This means that by the time <code>join</code> completes, all actions performed by the joined thread must be visible to the thread that called <code>join</code>, so it is not possible to lose writes in this scenario.</p>\n\n<p>In terms of atomics, you can think of a <code>join</code> as an acquire read of an atomic that the thread performed a release store on just before it finished executing.</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 1, "last_activity_date": 1508232746, "last_edit_date": 1508232746, "creation_date": 1508230262, "answer_id": 46786135, "question_id": 46775732, "link": "https://stackoverflow.com/questions/46775732/does-calling-into-inner-on-an-atomic-take-into-account-all-the-relaxed-write/46786135#46786135", "title": "Does calling `into_inner()` on an atomic take into account all the relaxed writes?", "body": "<p>I will include this answer as a potential complement to the other two.</p>\n\n<p>The kind of inconsistency that was mentioned, namely whether some writes could be missing before the final reading of the counter, is not possible here. It would have been undefined behaviour if writes to a value could be postponed until after its consumption with <code>into_inner</code>. However, there are no unexpected race conditions in this program, even without the counter being consumed with <code>into_inner</code>, and even without the help of <code>crossbeam</code> scopes.</p>\n\n<p>Let us write a new version of the program without crossbeam scopes and where the counter is not consumed (<a href=\"https://play.rust-lang.org/?gist=62049d0340814610428a7627c6d65b43&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>let thread_count = 10;\nlet increments_per_thread = 100000;\nlet i = Arc::new(AtomicUsize::new(0));\nlet threads: Vec&lt;_&gt; = (0..thread_count)\n    .map(|_| {\n        let i = i.clone();\n        thread::spawn(move || for _ in 0..increments_per_thread {\n            i.fetch_add(1, Ordering::Relaxed);\n        })\n    })\n    .collect();\n\nfor t in threads {\n    t.join().unwrap();\n}\n\nprintln!(\n    \"Result of {}*{} increments: {}\",\n    thread_count,\n    increments_per_thread,\n    i.load(Ordering::Relaxed)\n);\n</code></pre>\n\n<p>This version still works pretty well! Why? Because a <em>synchronizes-with</em> relation is established between the ending thread and its corresponding <code>join</code>. And so, as well explained in <a href=\"https://stackoverflow.com/a/46777411/1233251\">a separate answer</a>, all actions performed by the joined thread must be visible to the caller thread.</p>\n\n<p>One could probably also wonder whether even the relaxed memory ordering constraint is sufficient to guarantee that the full program behaves as expected. This part is addressed by the <a href=\"https://doc.rust-lang.org/stable/nomicon/atomics.html#relaxed\" rel=\"nofollow noreferrer\">Rust Nomicon</a>, emphasis mine:</p>\n\n<blockquote>\n  <p>Relaxed accesses are the absolute weakest. They can be freely re-ordered and provide no happens-before relationship. Still, <strong>relaxed operations are still atomic</strong>. That is, they don't count as data accesses and any read-modify-write operations done to them occur atomically. Relaxed operations are appropriate for things that you definitely want to happen, but don't particularly otherwise care about. For instance, <strong>incrementing a counter can be safely done by multiple threads using a relaxed fetch_add</strong> if you're not using the counter to synchronize any other accesses.</p>\n</blockquote>\n\n<p>The mentioned use case is exactly what we are doing here. Each thread is not required to observe the incremented counter in order to make decisions, and yet all operations are atomic. In the end, the thread <code>join</code>s synchronize with the main thread, thus implying a happens-before relation, and guaranteeing that the operations are made visible there. As Rust adopts the same memory model as C++11's (this is implemented by LLVM internally), we can see regarding the C++ <a href=\"http://en.cppreference.com/w/cpp/thread/thread/join\" rel=\"nofollow noreferrer\">std::thread::join</a> function that <em>\"The completion of the thread identified by <code>*this</code> synchronizes with the corresponding successful return\"</em>. In fact, the very same example in C++ <a href=\"http://en.cppreference.com/w/cpp/atomic/memory_order\" rel=\"nofollow noreferrer\">is available in cppreference.com</a> as part of the explanation on the relaxed memory order constraint:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;atomic&gt;\n\nstd::atomic&lt;int&gt; cnt = {0};\n\nvoid f()\n{\n    for (int n = 0; n &lt; 1000; ++n) {\n        cnt.fetch_add(1, std::memory_order_relaxed);\n    }\n}\n\nint main()\n{\n    std::vector&lt;std::thread&gt; v;\n    for (int n = 0; n &lt; 10; ++n) {\n        v.emplace_back(f);\n    }\n    for (auto&amp; t : v) {\n        t.join();\n    }\n    std::cout &lt;&lt; \"Final counter value is \" &lt;&lt; cnt &lt;&lt; '\\n';\n}\n</code></pre>\n"}], "owner": {"reputation": 16572, "user_id": 83741, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/60adb60c59462ef0cb9db65853736cf4?s=128&d=identicon&r=PG", "display_name": "Alexander Torstling", "link": "https://stackoverflow.com/users/83741/alexander-torstling"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 175, "favorite_count": 0, "accepted_answer_id": 46777411, "answer_count": 3, "score": 4, "last_activity_date": 1508336008, "creation_date": 1508174304, "last_edit_date": 1508175229, "question_id": 46775732, "link": "https://stackoverflow.com/questions/46775732/does-calling-into-inner-on-an-atomic-take-into-account-all-the-relaxed-write", "title": "Does calling `into_inner()` on an atomic take into account all the relaxed writes?", "body": "<p>Does <code>into_inner()</code> return all the relaxed writes in this example program? If so, which concept guarantees this?</p>\n\n<pre><code>extern crate crossbeam;\n\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\nfn main() {\n    let thread_count = 10;\n    let increments_per_thread = 100000;\n    let i = AtomicUsize::new(0);\n\n    crossbeam::scope(|scope| {\n        for _ in 0..thread_count {\n            scope.spawn(|| {\n                for _ in 0..increments_per_thread {\n                    i.fetch_add(1, Ordering::Relaxed);\n                }\n            });\n        }\n    });\n\n    println!(\n        \"Result of {}*{} increments: {}\",\n        thread_count,\n        increments_per_thread,\n        i.into_inner()\n    );\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=96f49f8eb31a6788b970cf20ec94f800&amp;version=stable\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=96f49f8eb31a6788b970cf20ec94f800&amp;version=stable</a>)</p>\n\n<p>I understand that crossbeam guarantees that all threads are finished and since the ownership goes back to the main thread, I also understand that there will be no outstanding borrows, but the way I see it, there could still be outstanding pending writes, if not on the CPUs, then in the caches. </p>\n\n<p>Which concept guarantees that all writes are finished and all caches are synced back to the main thread when <code>into_inner()</code> is called? Is it possible to lose writes? </p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 9656, "user_id": 665488, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/ed4ce6d9f3561a7c63d4c6245158d7e6?s=128&d=identicon&r=PG", "display_name": "Cam Jackson", "link": "https://stackoverflow.com/users/665488/cam-jackson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508162277, "post_id": 46771810, "comment_id": 80489765, "body": "@Shepmaster The script that generates it places plain old <code>.rs</code> files throughout your codebase, which you then import and call, much like normal code."}, {"owner": {"reputation": 9656, "user_id": 665488, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/ed4ce6d9f3561a7c63d4c6245158d7e6?s=128&d=identicon&r=PG", "display_name": "Cam Jackson", "link": "https://stackoverflow.com/users/665488/cam-jackson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1508162552, "post_id": 46771810, "comment_id": 80489969, "body": "I import it like <code>mod autogen_code; pub use self::autogen_code::*;</code>. And I mean, technically yes I can open the generated file and edit it, but when I rebuild my project, the generation script runs again and my changes are gone. These files are <code>.gitignore</code>&#39;d, and have big comments at the top saying <code>This is all auto-generated. Do not touch.</code>"}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 1, "creation_date": 1508163535, "post_id": 46771810, "comment_id": 80490658, "body": "offload generated code to a new crate? you can have more than one crate in a workspace which may be useful"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 2, "creation_date": 1508164161, "post_id": 46771810, "comment_id": 80491084, "body": "If you import it like <code>mod autogen_code</code> - simply use <code>allow</code> on it?"}, {"owner": {"reputation": 9656, "user_id": 665488, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/ed4ce6d9f3561a7c63d4c6245158d7e6?s=128&d=identicon&r=PG", "display_name": "Cam Jackson", "link": "https://stackoverflow.com/users/665488/cam-jackson"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1508211656, "post_id": 46771810, "comment_id": 80510526, "body": "Thanks @VictorPolevoy, I didn&#39;t realise I could use <code>allow</code> on a <code>mod</code>!"}], "answers": [{"comments": [{"owner": {"reputation": 9656, "user_id": 665488, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/ed4ce6d9f3561a7c63d4c6245158d7e6?s=128&d=identicon&r=PG", "display_name": "Cam Jackson", "link": "https://stackoverflow.com/users/665488/cam-jackson"}, "edited": false, "score": 0, "creation_date": 1508211585, "post_id": 46772792, "comment_id": 80510506, "body": "Thanks, this gives me a few options to explore :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1598272110, "last_edit_date": 1598272110, "creation_date": 1508164367, "answer_id": 46772792, "question_id": 46771810, "link": "https://stackoverflow.com/questions/46771810/can-i-tell-the-rust-compiler-to-ignore-warnings-only-on-files-matching-a-specifi/46772792#46772792", "title": "Can I tell the Rust compiler to ignore warnings only on files matching a specific name?", "body": "<p>No, you cannot apply lints using a filename pattern.</p>\n<p>Instead, you can...</p>\n<ul>\n<li><p>Instead of using <code>!#[allow(...)]</code> <em>inside</em> the file, use <code>#[allow(...)]</code> on the <code>mod</code> declaration:</p>\n<pre><code>  #[allow(dead_code)]\n  mod autogen;\n</code></pre>\n</li>\n<li><p>Modify the generation step to change the files. For example, instead of running <code>library-generator foo.input</code>, run <code>library-generator foo.input &amp;&amp; sed -i '' '1s/^/#![allow(whatever)]/' myfile.rs</code>. You can also do this in pure Rust. Since &quot;the generated files all have a predictable name&quot; you could also find all the files this way and perform this transformation. Now the transform will be applied every time you regenerate the files.</p>\n</li>\n<li><p>Modify the generator itself to add an option to either restrict what functions are output or to add the <code>allow</code> setting. If you experience the problem, it's likely others do as well. Might as well fix it for everyone.</p>\n</li>\n<li><p>In certain cases, you can create a &quot;shim&quot; module that does whatever you need to do and then <code>include!</code> the real code. This is kind of nasty though:</p>\n<pre><code>  #![allow(...)]\n\n  include!(&quot;autogen_real.rs&quot;);\n</code></pre>\n</li>\n</ul>\n"}], "owner": {"reputation": 9656, "user_id": 665488, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/ed4ce6d9f3561a7c63d4c6245158d7e6?s=128&d=identicon&r=PG", "display_name": "Cam Jackson", "link": "https://stackoverflow.com/users/665488/cam-jackson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1221, "favorite_count": 0, "accepted_answer_id": 46772792, "answer_count": 1, "score": 10, "last_activity_date": 1598272110, "creation_date": 1508161335, "last_edit_date": 1508338211, "question_id": 46771810, "link": "https://stackoverflow.com/questions/46771810/can-i-tell-the-rust-compiler-to-ignore-warnings-only-on-files-matching-a-specifi", "title": "Can I tell the Rust compiler to ignore warnings only on files matching a specific name?", "body": "<p>I'm using a library that generates a bunch of code for me, and it's often quite eager in generating methods that I'm not using yet. This results in a bunch of noisy warnings when building my project.</p>\n\n<p>The script generates plain old .rs files throughout my codebase, which I then import and call, much like normal code: </p>\n\n<pre><code>mod autogen_code; \npub use self::autogen_code::*;\n</code></pre>\n\n<p>I can't use <code>#![allow(unused_whatever)]</code> on the generated code, because when I rebuild my project, the generation script runs again and any changes would be gone. These files are <code>.gitignore</code>'d, and have big comments at the top saying \"This is all auto-generated. Do not touch.\"</p>\n\n<p>I don't want to allow unused stuff across my whole project, so placing <code>#![allow(unused_whatever)]</code> at the top of my crate is also a non-starter.</p>\n\n<p>The good thing is that the generated files all have a predictable name, so what I'm hoping is that there's a way to tell cargo/rustc not to emit warnings for files matching a particular file name. Is this possible?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 7, "creation_date": 1508147549, "post_id": 46766560, "comment_id": 80480127, "body": "This is basically the <a href=\"https://en.wikipedia.org/wiki/Element_distinctness_problem\" rel=\"nofollow noreferrer\">Element distinctness problem</a>. There are more efficient ways to do it than checking every element against the rest of the list, which is <code>O(n^2)</code>, but none of these are implemented in std. However, the trade-off is that they might require more memory.  See an approach to <a href=\"https://github.com/Hoverbear/rust-rosetta/blob/master/tasks/remove-duplicate-elements/src/main.rs\" rel=\"nofollow noreferrer\">removing dupes with a HashSet</a> on rosetta-code. It&#39;s to remove vs just check but it should give you an idea of how it can be done."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1508148613, "post_id": 46766560, "comment_id": 80480773, "body": "@PaoloFalabella This is strange that such a basic algorithm is not in the std."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508162620, "post_id": 46766560, "comment_id": 80490020, "body": "@Boiethios why do you believe that this is a &quot;basic&quot; algorithm? Even if it is, remember that things like <i>random number generation</i>, which many people consider &quot;basic&quot;, are provided by a crate."}], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1508145460, "post_id": 46766782, "comment_id": 80478840, "body": "Indexing checks if the index is in the bounds. So there is a (small) overhead. But this small overhead can make a greater difference in a loop."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1508145926, "post_id": 46766782, "comment_id": 80479140, "body": "LLVM will take care of such simple loops. You are correct in the general case though."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 6, "last_activity_date": 1508145354, "creation_date": 1508145354, "answer_id": 46766782, "question_id": 46766560, "link": "https://stackoverflow.com/questions/46766560/how-to-check-if-there-are-duplicates-in-a-slice/46766782#46766782", "title": "How to check if there are duplicates in a slice?", "body": "<p>Indexing is not less optimized, it's just not idiomatic <em>in the presence of an iterator solution</em>. There is no iterator solution, so your code is already the optimal solution.</p>\n\n<p>If you want to go down a more functional road, you can write</p>\n\n<pre><code>(1..slice.len()).any(|i| slice[i..].contains(&amp;slice[i - 1]))\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1508153190, "post_id": 46767732, "comment_id": 80483548, "body": "I like this solution, but there are more constraints on the type (<code>Hash</code> + <code>Clone</code>)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 3, "creation_date": 1508154356, "post_id": 46767732, "comment_id": 80484294, "body": "Can&#39;t make an omelette without breaking eggs. :P Either a hash function or a total order relation is required for faster look-ups. I&#39;m not sure whether making copies of the previously fetched items can be avoided."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1508161405, "post_id": 46767732, "comment_id": 80489090, "body": "Is it possible to use <code>.cloned().all(move |x| uniq.insert(x))</code>?. The <code>ExactSizeIterator</code> constraint should not be needed."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1508161668, "post_id": 46767732, "comment_id": 80489311, "body": "Why yes, that&#39;s a nice improvement (you don&#39;t even need to clone the iterator). It&#39;s updated now."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1508162127, "post_id": 46767732, "comment_id": 80489642, "body": "<code>cloned</code> (with a <code>d</code>) does not clone the iterator but lazily clone each item while iterating."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1508331030, "post_id": 46767732, "comment_id": 80568273, "body": "@Boiethios: Note about <code>Clone</code>, if you call this method on <code>&amp;Vec</code>, then you get an iterator of <i>references</i> which are cloneable by default. I think it&#39;ll be pretty rare to be calling this by value."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 19, "last_activity_date": 1508163093, "last_edit_date": 1508163093, "creation_date": 1508148344, "answer_id": 46767732, "question_id": 46766560, "link": "https://stackoverflow.com/questions/46766560/how-to-check-if-there-are-duplicates-in-a-slice/46767732#46767732", "title": "How to check if there are duplicates in a slice?", "body": "<p>In terms of algorithmic complexity, it is often better to keep track of unique values in an index. If you can check equality with <code>Hash</code> and <code>Eq</code>, you can try this utility function:</p>\n\n<pre><code>fn has_unique_elements&lt;T&gt;(iter: T) -&gt; bool\nwhere\n    T: IntoIterator,\n    T::Item: Eq + Hash,\n{\n    let mut uniq = HashSet::new();\n    iter.into_iter().all(move |x| uniq.insert(x))\n}\n\nassert!(!has_unique_elements(vec![10, 20, 30, 10, 50]));\nassert!(has_unique_elements(vec![10, 20, 30, 40, 50]));\nassert!(has_unique_elements(Vec::&lt;u8&gt;::new()));\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f16ecd16f4048abe5ec79ae6daf76bd5&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n\n<p>Likewise, if your elements don't implement <code>Hash</code> but do implement <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noreferrer\"><code>Ord</code></a>, you can use a <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html\" rel=\"noreferrer\"><code>BTreeSet</code></a> instead (<a href=\"https://play.rust-lang.org/?gist=634c7911c13ff96a3a63a756e083beea&amp;version=stable\" rel=\"noreferrer\">Playground</a>).</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4313, "favorite_count": 1, "accepted_answer_id": 46767732, "answer_count": 2, "score": 13, "last_activity_date": 1539242850, "creation_date": 1508144585, "last_edit_date": 1539242850, "question_id": 46766560, "link": "https://stackoverflow.com/questions/46766560/how-to-check-if-there-are-duplicates-in-a-slice", "title": "How to check if there are duplicates in a slice?", "body": "<p>Is there a native way to check if a slice has duplicates? For now, I use this:</p>\n\n<pre><code>fn has_dup&lt;T: PartialEq&gt;(slice: &amp;[T]) -&gt; bool {\n    for i in 1..slice.len() {\n        if slice[i..].contains(&amp;slice[i - 1]) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    assert_eq!(has_dup(&amp;[1, 2, 3, 2, 5, 6]), true);\n    assert_eq!(has_dup(&amp;[1, 2, 3, 4, 5, 6]), false);\n}\n</code></pre>\n\n<p>but for this kind of basic operations, I do not like to use hand-made code.</p>\n\n<p>If there is no available function to do this in the standard library, is it a way to optimize my code? I know that indexing the slice is not the most optimized way (<code>for i in slice {}</code> vs <code>for i in 0..slice.len() { slice[i] }</code>).</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 491, "user_id": 2772760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c259cb4c4f49639ba76c20f0cdf7cf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Victor Akimov", "link": "https://stackoverflow.com/users/2772760/victor-akimov"}, "is_accepted": false, "score": 2, "last_activity_date": 1508115322, "last_edit_date": 1508115322, "creation_date": 1508105272, "answer_id": 46760506, "question_id": 46760026, "link": "https://stackoverflow.com/questions/46760026/how-to-avoid-redundant-function-calls-when-pattern-matching/46760506#46760506", "title": "How to avoid redundant function calls when pattern matching?", "body": "<p>I found out that I could beautify the second approach with macro:</p>\n\n<pre><code>macro_rules! lazy_match {\n    (($condition:expr =&gt; $expect:pat) =&gt; $on_expected:expr, _ =&gt; $other:expr) =&gt; (\n        match $condition {\n            $expect =&gt; $on_expected,\n            _ =&gt; $other,\n        }\n    );\n    (\n        ($condition:expr =&gt; $expect:pat, $($c:expr =&gt; $e:pat),+)\n        =&gt; $on_expected:expr, _ =&gt; $other:expr\n    ) =&gt; (\n        match $condition {\n            $expect =&gt; lazy_match!(($($c =&gt; $e),+) =&gt; $on_expected, _ =&gt; $other),\n            _ =&gt; $other,\n        }\n    );\n}\n\nlazy_match! {\n    (foo() =&gt; false, foo() =&gt; true) =&gt; println!(\"Bingo\"),\n    _ =&gt; println!(\"Wrong result\")\n};\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 3, "last_activity_date": 1508163770, "last_edit_date": 1508163770, "creation_date": 1508143947, "answer_id": 46766375, "question_id": 46760026, "link": "https://stackoverflow.com/questions/46760026/how-to-avoid-redundant-function-calls-when-pattern-matching/46766375#46766375", "title": "How to avoid redundant function calls when pattern matching?", "body": "<p>You can simply do:</p>\n\n<pre><code>if !foo() &amp;&amp; foo() { println!(\"Bingo\") } else { println!(\"Wrong result\") }\n</code></pre>\n\n<p>The \"and\" (<code>&amp;&amp;</code>) and \"or\" (<code>||</code>) logical operators in Rust are short-circuiting, like in most languages. </p>\n\n<p>Since <code>!foo()</code> is <code>false</code>, the right side of the <code>&amp;&amp;</code> will not be evaluated and <code>foo()</code> will not be called a second time.\nYour macro solution is basically re-inventing short-circuiting, at least for this toy example (maybe it becomes more readable with your actual code...). </p>\n"}], "owner": {"reputation": 491, "user_id": 2772760, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c259cb4c4f49639ba76c20f0cdf7cf6b?s=128&d=identicon&r=PG&f=1", "display_name": "Victor Akimov", "link": "https://stackoverflow.com/users/2772760/victor-akimov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 230, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1508163770, "creation_date": 1508101789, "last_edit_date": 1508102026, "question_id": 46760026, "link": "https://stackoverflow.com/questions/46760026/how-to-avoid-redundant-function-calls-when-pattern-matching", "title": "How to avoid redundant function calls when pattern matching?", "body": "<p>I want to match several function results without calling all of them if it is not necessary:</p>\n\n<pre><code>fn foo() -&gt; bool {\n    println!(\"foo executed\");\n    true\n}\n\n// I want to do something like this\n// but there is a redundant function call\nmatch (foo(), foo()) {\n    (false, true) =&gt; println!(\"Bingo!\"),\n    _ =&gt; println!(\"Wrong result\"),\n}\n\n// No redundant function call\n// but less impressive and doubling of wrong result processing\nmatch foo() {\n    false =&gt; match foo() {\n        true =&gt; println!(\"Bingo\"),\n        _ =&gt; println!(\"Wrong result\"),\n    },\n    _ =&gt; println!(\"Wrong result\"),\n}\n</code></pre>\n\n<p>How can I do this?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1508093447, "post_id": 46756046, "comment_id": 80462862, "body": "Why must this be a macro? What would be wrong with having a functions named <code>Z</code> and &#39;N&#39;, e.g. fn Z(&amp;mut self, value: u8) { self.z_flag = self.A == 0; }` and <code>fn N(&amp;mut self, bit: u8) { self.n_flag = self.A &amp; (1u8 &lt;&lt; bit) != 0; }</code> Then you can call them as <code>self.Z(0); self.N(7);</code>. When called with constant args, they should be as efficient as the macros would have been."}, {"owner": {"reputation": 197, "user_id": 6573388, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-L0xo75Zs0t0/AAAAAAAAAAI/AAAAAAAAAPg/kY31JcfEbg8/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Kr&#225;l", "link": "https://stackoverflow.com/users/6573388/tom%c3%a1%c5%a1-kr%c3%a1l"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1508144443, "post_id": 46756046, "comment_id": 80478237, "body": "Yes, I will propably use functions. In the end, they are easier to debug."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1508152639, "post_id": 46756046, "comment_id": 80483214, "body": "I&#39;ve now posted the above as an answer."}], "answers": [{"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 2, "last_activity_date": 1508163238, "last_edit_date": 1508163238, "creation_date": 1508152627, "answer_id": 46769061, "question_id": 46756046, "link": "https://stackoverflow.com/questions/46756046/how-do-i-write-a-macro-that-conditionally-updates-an-emulators-cpu-flags/46769061#46769061", "title": "How do I write a macro that conditionally updates an emulators CPU flags?", "body": "<p>A macro is not necessary here, since equal (if not better) ergonomy and efficiency can be achieved with functions.</p>\n\n<p>For example, you could define methods such as:</p>\n\n<pre><code>fn Z(&amp;mut self, value: u8) {\n    self.z_flag = self.A == value;\n}\n\nfn N(&amp;mut self, bit: u8) {\n    self.n_flag = self.A &amp; (1u8 &lt;&lt; bit) != 0;\n}\n</code></pre>\n\n<p>Instead of <code>update_flags!(self.cpu, \"Z0\", \"N7\");</code>, you would write <code>self.Z(0); self.N(7);</code>. When called with constant args, they should be as efficient as the macros would have been.</p>\n"}], "owner": {"reputation": 197, "user_id": 6573388, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-L0xo75Zs0t0/AAAAAAAAAAI/AAAAAAAAAPg/kY31JcfEbg8/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Kr&#225;l", "link": "https://stackoverflow.com/users/6573388/tom%c3%a1%c5%a1-kr%c3%a1l"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "accepted_answer_id": 46769061, "answer_count": 1, "score": 1, "last_activity_date": 1508163238, "creation_date": 1508077139, "last_edit_date": 1508089136, "question_id": 46756046, "link": "https://stackoverflow.com/questions/46756046/how-do-i-write-a-macro-that-conditionally-updates-an-emulators-cpu-flags", "title": "How do I write a macro that conditionally updates an emulators CPU flags?", "body": "<p>I'm writing a 6502 CPU emulator using Rust and I'm trying to make my code as DRY as possible. </p>\n\n<p>The code for decoding opcodes and executing them looks like this:</p>\n\n<pre><code>//self refers to CPU struct\n\nmatch opcode {\n    0x29 =&gt; {self.A &amp;= self.imm(); update_flags!(self.cpu, \"Z0\", \"N7\");},\n    // ... other 55 opcodes\n}\n</code></pre>\n\n<p>I want an easy way to update the CPU flags after executing each instruction. For example, after executing the AND instruction, flag Z should be set if A = 0 and flag N should be set if bit 7 is 1. I could describe these two conditions as Z0 and N7.</p>\n\n<p>I need to write a macro that takes the CPU struct, Z0 and N7 as arguments and expands into something like:</p>\n\n<pre><code>if self.A == 0 {set flag Z};\nif self.A.7thbit == 1 {set flag N};\n</code></pre>\n\n<p>Is this possible?</p>\n"}, {"tags": ["rust", "hex", "serde"], "answers": [{"comments": [{"owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "edited": false, "score": 0, "creation_date": 1508097108, "post_id": 46755370, "comment_id": 80464024, "body": "Thanks @Shepmaster. This is exactly what I&#39;m looking for. The only issue is with the reference to the string as I get this panic msg: invalid type: string &quot;0x400&quot;, expected a borrowed string."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "edited": false, "score": 0, "creation_date": 1508097322, "post_id": 46755370, "comment_id": 80464104, "body": "@phodina Both of my examples run successfully, so evidently you&#39;ve changed something. I am not a mind reader, so I don&#39;t know what that difference is. You could try <code>let s: String = ...</code> in case the XML decoder cannot provide string slices."}, {"owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "edited": false, "score": 0, "creation_date": 1508098973, "post_id": 46755370, "comment_id": 80464651, "body": "I&#39;ve tried both of your examples in playground and on my PC and they both work. The issue comes up when I change the underlying format from json to xml. Here is the code (playground misses crate serde_xml_rs)     let raw = r#&quot;&lt;EtheriumTransaction&gt;&lt;account&gt;0xDEADBEEF&lt;/account&gt;&lt;amount&zwnj;&#8203;&gt;100&lt;/amount&gt;&lt;/Ether&zwnj;&#8203;iumTransaction&gt;&quot;#;     let transaction: EtheriumTransaction = serde_xml_rs::deserialize(raw.as_bytes()).unwrap();"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "edited": false, "score": 0, "creation_date": 1508165424, "post_id": 46755370, "comment_id": 80491894, "body": "@phodina yes, it appears that switching to <code>let s: String</code> <a href=\"https://stackoverflow.com/questions/46753955/how-to-transform-fields-before-deserialization-using-serde/46755370#comment80464104_46755370\">as I suggested earlier</a> works."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 30, "last_activity_date": 1562427488, "last_edit_date": 1562427488, "creation_date": 1508072914, "answer_id": 46755370, "question_id": 46753955, "link": "https://stackoverflow.com/questions/46753955/how-to-transform-fields-during-deserialization-using-serde/46755370#46755370", "title": "How to transform fields during deserialization using Serde?", "body": "<h3>The <code>deserialize_with</code> attribute</h3>\n\n<p>The easiest solution is to use the <a href=\"https://serde.rs/field-attrs.html\" rel=\"noreferrer\">Serde field attribute</a> <code>deserialize_with</code> to set a custom serialization function for your field. You then can get the raw string and <a href=\"https://stackoverflow.com/questions/32381414/converting-hexadecimal-string-to-decimal\">convert it as appropriate</a>:</p>\n\n<pre><code>use serde::{de::Error, Deserialize, Deserializer}; // 1.0.94\nuse serde_json; // 1.0.40\n\n#[derive(Debug, Deserialize)]\nstruct EtheriumTransaction {\n    #[serde(deserialize_with = \"from_hex\")]\n    account: u64, // hex\n    amount: u64, // decimal\n}\n\nfn from_hex&lt;'de, D&gt;(deserializer: D) -&gt; Result&lt;u64, D::Error&gt;\nwhere\n    D: Deserializer&lt;'de&gt;,\n{\n    let s: &amp;str = Deserialize::deserialize(deserializer)?;\n    // do better hex decoding than this\n    u64::from_str_radix(&amp;s[2..], 16).map_err(D::Error::custom)\n}\n\nfn main() {\n    let raw = r#\"{\"account\": \"0xDEADBEEF\", \"amount\": 100}\"#;\n    let transaction: EtheriumTransaction =\n        serde_json::from_str(raw).expect(\"Couldn't derserialize\");\n    assert_eq!(transaction.amount, 100);\n    assert_eq!(transaction.account, 0xDEAD_BEEF);\n}\n</code></pre>\n\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=83c99d83e5bf34c0238c0aaf900135a8\" rel=\"noreferrer\">playground</a></p>\n\n<p>Note how this can use any other existing Serde implementation to decode. Here, we decode to a string slice (<code>let s: &amp;str = Deserialize::deserialize(deserializer)?</code>). You can also create intermediate structs that map directly to your raw data, derive <code>Deserialize</code> on them, then deserialize to them inside your implementation of <code>Deserialize</code>.</p>\n\n<h3>Implement <code>serde::Deserialize</code></h3>\n\n<p>From here, it's a tiny step to promoting it to your own type to allow reusing it:</p>\n\n<pre><code>#[derive(Debug, Deserialize)]\nstruct EtheriumTransaction {\n    account: Account, // hex\n    amount: u64,      // decimal\n}\n\n#[derive(Debug, PartialEq)]\nstruct Account(u64);\n\nimpl&lt;'de&gt; Deserialize&lt;'de&gt; for Account {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;Self, D::Error&gt;\n    where\n        D: Deserializer&lt;'de&gt;,\n    {\n        let s: &amp;str = Deserialize::deserialize(deserializer)?;\n        // do better hex decoding than this\n        u64::from_str_radix(&amp;s[2..], 16)\n            .map(Account)\n            .map_err(D::Error::custom)\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=614bd7ad5aada5d7bd4109b9d45a6620\" rel=\"noreferrer\">playground</a></p>\n\n<p>This method allows you to also add or remove fields as the \"inner\" deserialized type can do basically whatever it wants.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/39383809/155423\">How to transform fields during serialization using Serde?</a></li>\n</ul>\n"}], "owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5867, "favorite_count": 3, "answer_count": 1, "score": 20, "last_activity_date": 1562427488, "creation_date": 1508062538, "last_edit_date": 1518734759, "question_id": 46753955, "link": "https://stackoverflow.com/questions/46753955/how-to-transform-fields-during-deserialization-using-serde", "title": "How to transform fields during deserialization using Serde?", "body": "<p>I'm using Serde to deserialize an XML file which has the hex value <code>0x400</code> as a string and I need to convert it to the value <code>1024</code> as a <code>u32</code>.</p>\n\n<p>Do I need to implement the <code>Visitor</code> trait so that I separate 0x and then decode 400 from base 16 to base 10? If so, how do I do that so that deserialization for base 10 integers remains intact?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 7, "creation_date": 1508055798, "post_id": 46751435, "comment_id": 80451924, "body": "You already <a href=\"https://www.reddit.com/r/rust/comments/76grm4/add_a_key_to_each_element_of_a_vector/\" rel=\"nofollow noreferrer\">asked the exact same question on /r/rust</a> and got an answer there. As the people on Reddit already explained: what you want is not possible in Rust. Structs have a fixed layout at compile time and cannot be modified at runtime. To have an arbitrary key-value store, use a <code>HashMap</code> or something similar."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1508056009, "post_id": 46751435, "comment_id": 80451970, "body": "But instead of using a <code>HashMap</code> you should probably do one of these things: switch to a language like JavaScript that can actually do what you want <i>or</i> try to think about your program in another way. Literally translating your way of thinking in one programming language to another programming language doesn&#39;t work, especially not with Rust. If you rethink your problem, you&#39;ll likely come up with a far better solution."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1508075529, "last_edit_date": 1508075529, "creation_date": 1508074615, "answer_id": 46755607, "question_id": 46751435, "link": "https://stackoverflow.com/questions/46751435/adding-a-new-key-to-each-element-of-vector-in-rust/46755607#46755607", "title": "Adding a new key to each element of vector in Rust", "body": "<p>Rust is a <a href=\"https://en.wikipedia.org/wiki/Category:Statically_typed_programming_languages\" rel=\"nofollow noreferrer\">statically-typed language</a>; you may be familiar with other similar languages like C++, Java or Swift. In these languages, the members, types, and layout of a struct are fixed when the program is compiled.</p>\n\n<p>Because of this, there's <strong>no way</strong> to add a new struct field at runtime \u2014 no \"ifs\", \"ands\", or \"buts\" \u2014 you can't do it.</p>\n\n<p>Instead, you have to model that dynamic nature some other way:</p>\n\n<ol>\n<li><p>Use a type that allows for arbitrary expansion. <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code></a> and <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"nofollow noreferrer\"><code>BTreeMap</code></a> (and many other similar types) allow you to have an arbitrary number of key-value pairs. Under the hood, this is basically how many dynamic languages work - a mapping of strings to arbitrary values:</p>\n\n<pre><code>use std::collections::HashMap;\n\n#[derive(Debug, Default)]\nstruct Element(HashMap&lt;String, u8&gt;);\n\nfn get_data(_: &amp;Element) -&gt; u8 {\n    42\n}\n\nfn main() {\n    let mut items = vec![\n        Element::default(),\n        Element::default(),\n        Element::default(),\n        Element::default(),\n    ];\n\n    for x in &amp;mut items {\n        let value = get_data(x);\n        x.0\n            .entry(\"some_additional_key\".to_string())\n            .or_insert(value);\n    }\n}\n</code></pre></li>\n<li><p>Use a type that allows for specific expansion. <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\"><code>Option</code></a> allows for a value to be present or not:</p>\n\n<pre><code>#[derive(Debug, Default)]\nstruct Element {\n    some_additional_key: Option&lt;u8&gt;,\n}\n\nfn get_data(_: &amp;Element) -&gt; u8 {\n    42\n}\n\nfn main() {\n    let mut items = vec![\n        Element::default(),\n        Element::default(),\n        Element::default(),\n        Element::default(),\n    ];\n\n    for x in &amp;mut items {\n        let value = get_data(x);\n        x.some_additional_key = Some(value);\n    }\n}\n</code></pre></li>\n<li><p>Use composition. Create a new type that wraps your existing type:</p>\n\n<pre><code>#[derive(Debug, Default)]\nstruct Element;\n\n#[derive(Debug)]\nstruct EnhancedElement {\n    element: Element,\n    some_additional_key: u8,\n}\n\nfn get_data(_: &amp;Element) -&gt; u8 {\n    42\n}\n\nfn main() {\n    let items = vec![\n        Element::default(),\n        Element::default(),\n        Element::default(),\n        Element::default(),\n    ];\n\n    let enhanced: Vec&lt;_&gt; = items\n        .into_iter()\n        .map(|element| {\n            let some_additional_key = get_data(&amp;element);\n            EnhancedElement {\n                element,\n                some_additional_key,\n            }\n        })\n        .collect();\n}\n</code></pre></li>\n</ol>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28512394/155423\">How to lookup from and insert into a HashMap efficiently?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30414424/155423\">Update value in mutable HashMap</a></li>\n</ul>\n"}], "owner": {"reputation": 59, "user_id": 8693246, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/16338d716e8f3b08b0b493579e2dfacf?s=128&d=identicon&r=PG&f=1", "display_name": "Bingi", "link": "https://stackoverflow.com/users/8693246/bingi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 528, "favorite_count": 0, "answer_count": 1, "score": -4, "last_activity_date": 1508075529, "creation_date": 1508038677, "last_edit_date": 1508055871, "question_id": 46751435, "link": "https://stackoverflow.com/questions/46751435/adding-a-new-key-to-each-element-of-vector-in-rust", "title": "Adding a new key to each element of vector in Rust", "body": "<p>I have a vector of structures. I want to add one additional field to each element. What's the best way to do that?</p>\n\n<p>Something like this:</p>\n\n<pre><code>// Pseudo code\n\nlet items = vec![elem1, elem2, elem3, elem4];\nfor x in items {\n    // Something like this\n    x[\"some_additional_key\"] = get_data(x);\n} \n\n//\n// Now I have items[i].some_additional_key in each element\n</code></pre>\n"}, {"tags": ["rust", "mutable"], "comments": [{"owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "edited": false, "score": 1, "creation_date": 1508061198, "post_id": 46750141, "comment_id": 80453184, "body": "The <code>json!</code> is more when <a href=\"https://github.com/serde-rs/json#constructing-json-values\" rel=\"nofollow noreferrer\">you need to write a json value with json syntax in your code</a>. You should try to create struct matching your object, and then parsing to this struct: <a href=\"https://github.com/serde-rs/json#parsing-json-as-strongly-typed-data-structures\" rel=\"nofollow noreferrer\">github.com/serde-rs/&hellip;</a> and <a href=\"https://github.com/serde-rs/json#creating-json-by-serializing-data-structures\" rel=\"nofollow noreferrer\">github.com/serde-rs/&hellip;</a>"}, {"owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "reply_to_user": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "edited": false, "score": 0, "creation_date": 1508072682, "post_id": 46750141, "comment_id": 80456092, "body": "@FrancoisMockers - I also thought about this. But in my case I&#39;m transforming an xml to json. Since the xml can be structured in very different ways I&#39;m not sure how this could be represented as a struct"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1508092256, "post_id": 46750141, "comment_id": 80462418, "body": "Can&#39;t you do  <code>let is_null = curr_obj.is_null();</code>  before borrowing it and then just use the variable?"}], "owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 151, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1508075187, "creation_date": 1508021932, "last_edit_date": 1508075187, "question_id": 46750141, "link": "https://stackoverflow.com/questions/46750141/how-to-deal-with-a-mutable-variable-once-it-is-assigned", "title": "How to deal with a mutable variable once it is assigned?", "body": "<p>From other questions, I figured out how to structure a complex JSON object. To get my JSON object right, I need to check if a \"key\" is already assigned to this <code>result_object</code>.</p>\n\n<p>Since the object is now <code>&amp;mut</code> I'm not able to use this for other operations, like in an <code>if</code> condition.</p>\n\n<p>How can I deal with a circumstance like this? </p>\n\n<pre><code>#[macro_use]\nextern crate serde_json;\n\nfn main() {\n    let my_vec = [\"foo\", \"bar\", \"baz\", \"foobar\", \"barfoo\"];\n    let mut curr_obj = json!(null);\n    {\n        let mut obj_ref = &amp;mut curr_obj;\n        for i in 0..my_vec.len() {\n            let name = my_vec[i];\n\n            if curr_obj.is_null() {\n                //do stuff\n            }\n            obj_ref = &amp;mut { obj_ref }[name]; // note the curly braces\n        }\n    }\n    println!(\"{:?}\", curr_obj);\n}\n</code></pre>\n\n<p>Error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `curr_obj` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:12:16\n   |\n8  |         let mut obj_ref = &amp;mut curr_obj;\n   |                                -------- mutable borrow occurs here\n...\n12 |             if curr_obj.is_null() {\n   |                ^^^^^^^^ immutable borrow occurs here\n...\n17 |     }\n   |     - mutable borrow ends here\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1583768003, "last_edit_date": 1583768003, "creation_date": 1508018742, "answer_id": 46749785, "question_id": 46749679, "link": "https://stackoverflow.com/questions/46749679/is-there-a-way-to-customize-debug-output-without-implementing-the-debug-trait-di/46749785#46749785", "title": "Is there a way to customize Debug output without implementing the Debug trait directly?", "body": "<blockquote>\n  <p>Is there a simple way to get output like this, without implementing the <code>Debug</code> trait directly on the struct (a <code>Debug</code> trait on another type would be fine)</p>\n</blockquote>\n\n<p>Yes. <code>#[derive(Debug)]</code> implements <code>Debug</code> by just calling <code>Debug::debug</code> on each of the members in turn. Follow the instructions in <a href=\"https://stackoverflow.com/q/22243527/155423\">How to implement a custom &#39;fmt::Debug&#39; trait?</a> for your newtype wrapper:</p>\n\n<pre><code>use std::fmt;\n\n#[derive(Debug)]\nstruct Test {\n    int: u8,\n    bits: Bits,\n    hex: u8,\n}\n\nstruct Bits(u8);\n\nimpl fmt::Debug for Bits {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        write!(f, \"0b{:08b}\", self.0)\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>In a different direction, it would not be strange to have a method on your primary struct that returns another struct \"for display purposes\", akin to <a href=\"https://doc.rust-lang.org/std/path/struct.Display.html\" rel=\"noreferrer\"><code>std::path::Display</code></a>. This allows you to move complicated display logic to a separate type while allowing your original struct to not have newtypes that might get in your way:</p>\n\n<pre><code>use std::fmt;\n\n#[derive(Debug)]\nstruct Test {\n    int: u8,\n    bits: u8,\n    hex: u8,\n}\n\nimpl Test {\n    fn pretty_debug(&amp;self) -&gt; PrettyDebug&lt;'_&gt; {\n        PrettyDebug {\n            int: &amp;self.int,\n            bits: Bits(&amp;self.bits),\n            hex: &amp;self.hex,\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct PrettyDebug&lt;'a&gt; {\n    int: &amp;'a u8,\n    bits: Bits&lt;'a&gt;,\n    hex: &amp;'a u8,\n}\n\nstruct Bits&lt;'a&gt;(&amp;'a u8);\n\nimpl fmt::Debug for Bits&lt;'_&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        write!(f, \"0b{:08b}\", self.0)\n    }\n}\n</code></pre>\n\n<p>It's a little silly to have a reference to a <code>u8</code>, but references are the most generic solution here \u2014\u00a0choose appropriate data types for your case.</p>\n\n<p>You could also implement <code>Debug</code> directly for your <code>PrettyDebug</code> type:</p>\n\n<pre><code>use std::fmt;\n\n#[derive(Debug)]\nstruct Test {\n    int: u8,\n    bits: u8,\n    hex: u8,\n}\n\nimpl Test {\n    fn pretty_debug(&amp;self) -&gt; PrettyDebug&lt;'_&gt; {\n        PrettyDebug(self)\n    }\n}\n\nstruct PrettyDebug&lt;'a&gt;(&amp;'a Test);\n\nimpl fmt::Debug for PrettyDebug&lt;'_&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {\n        f.debug_struct(\"Test\")\n            .field(\"int\", &amp;self.0.int)\n            .field(\"bits\", &amp;format_args!(\"0b{:08b}\", self.0.bits))\n            .field(\"hex\", &amp;format_args!(\"0x{:02x}\", self.0.hex))\n            .finish()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 52633, "user_id": 3155639, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d254eedd932f950213109aa3706aba74?s=128&d=identicon&r=PG", "display_name": "Alexander O&#39;Mara", "link": "https://stackoverflow.com/users/3155639/alexander-omara"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2584, "favorite_count": 0, "accepted_answer_id": 46749785, "answer_count": 1, "score": 9, "last_activity_date": 1583768003, "creation_date": 1508017788, "last_edit_date": 1508018932, "question_id": 46749679, "link": "https://stackoverflow.com/questions/46749679/is-there-a-way-to-customize-debug-output-without-implementing-the-debug-trait-di", "title": "Is there a way to customize Debug output without implementing the Debug trait directly?", "body": "<p>Consider the following code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Test {\n    int: u8,\n    bits: u8,\n    hex: u8\n}\n\nfn main() {\n    let t = Test {\n        int: 1,\n        bits: 2,\n        hex: 3\n    };\n    println!(\"{:#?}\", t);\n}\n</code></pre>\n\n<p>When run, it outputs the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Test {\n    int: 1,\n    bits: 2,\n    hex: 3\n}\n</code></pre>\n\n<p>That's cool that we can dump a struct with very little effort, but some of my data structures contain bit masks or other data not easily read in base 10. For the bits field, it would be much easier to read it they were output like <code>0b00000010</code>.</p>\n\n<p>Is there a simple way to get output like this, without implementing the <code>Debug</code> trait directly on the struct (a <code>Debug</code> trait on another type would be fine)?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Test {\n    int: 1,\n    bits: 0b00000010,\n    hex: 0x03\n}\n</code></pre>\n\n<p>I'm fine with using different types if I have to, but I'm hoping to keep the debug trait on the struct itself as simple as <code>#[derive(Debug)]</code>.</p>\n"}, {"tags": ["file", "path", "directory", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2147, "user_id": 848627, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6eea8dbe6666f342104c0e56c04e3a9a?s=128&d=identicon&r=PG", "display_name": "drojf", "link": "https://stackoverflow.com/users/848627/drojf"}, "edited": false, "score": 0, "creation_date": 1598666687, "post_id": 46749415, "comment_id": 112541442, "body": "The docs for PathBuf::pop now say:  &quot;Truncates self to self.parent.  Returns false and does nothing if self.parent is None. Otherwise, returns true.&quot;  This is different from what this answer has quoted (I guess from the old documentation) which says &quot;does nothing if self.file_name is None&quot;"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1508016331, "last_edit_date": 1508016331, "creation_date": 1508015742, "answer_id": 46749415, "question_id": 46749360, "link": "https://stackoverflow.com/questions/46749360/how-to-get-only-the-directory-portion-of-the-current-executables-path/46749415#46749415", "title": "How to get only the directory portion of the current executable&#39;s path?", "body": "<p><a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.pop\" rel=\"noreferrer\"><code>PathBuf::pop</code></a> is the mirror of <code>PathBuf::push</code>:</p>\n\n<blockquote>\n  <p>Truncates <code>self</code> to <code>self.parent</code>.</p>\n  \n  <p>Returns <code>false</code> and does nothing if <code>self.file_name</code> is <code>None</code>. Otherwise,\n  returns <code>true</code>.</p>\n</blockquote>\n\n<p>In your case:</p>\n\n<pre><code>use std::env;\nuse std::io;\nuse std::path::PathBuf;\n\nfn inner_main() -&gt; io::Result&lt;PathBuf&gt; {\n    let mut dir = env::current_exe()?;\n    dir.pop();\n    dir.push(\"Config\");\n    dir.push(\"test.txt\");\n    Ok(dir)\n}\n\nfn main() {\n    let path = inner_main().expect(\"Couldn't\");\n    println!(\"{}\", path.display());\n}\n</code></pre>\n\n<p>There's also the possibility of using <a href=\"https://doc.rust-lang.org/std/path/struct.Path.html#method.parent\" rel=\"noreferrer\"><code>Path::parent</code></a>:</p>\n\n<blockquote>\n  <p>Returns the <code>Path</code> without its final component, if there is one.</p>\n  \n  <p>Returns <code>None</code> if the path terminates in a root or prefix.</p>\n</blockquote>\n\n<p>In your case:</p>\n\n<pre><code>fn inner_main() -&gt; io::Result&lt;PathBuf&gt; {\n    let exe = env::current_exe()?;\n    let dir = exe.parent().expect(\"Executable must be in some directory\");\n    let mut dir = dir.join(\"Config\");\n    dir.push(\"test.txt\");\n    Ok(dir)\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/36848132/155423\">How to get the name of current program without the directory part?</a></li>\n</ul>\n"}], "owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5384, "favorite_count": 1, "accepted_answer_id": 46749415, "answer_count": 1, "score": 7, "last_activity_date": 1508016331, "creation_date": 1508015337, "last_edit_date": 1508015634, "question_id": 46749360, "link": "https://stackoverflow.com/questions/46749360/how-to-get-only-the-directory-portion-of-the-current-executables-path", "title": "How to get only the directory portion of the current executable&#39;s path?", "body": "<p>I want to read files from a config folder at the directory where the executable is located. I do that using the following functions:</p>\n\n<pre><code>use std::env;\n\n// add part of path to te path gotten from fn get_exe_path();\nfn get_file_path(path_to_file: &amp;str) -&gt; PathBuf {\n    let final_path = match get_exe_path() {\n        Ok(mut path) =&gt; {\n            path.push(path_to_file);\n            path\n        }\n        Err(err) =&gt; panic!(\"Path does not exists\"),\n    };\n    final_path\n}\n\n// Get path to current executable\nfn get_exe_path() -&gt; Result&lt;PathBuf, io::Error&gt; {\n    //std::env::current_exe()\n    env::current_exe()\n}\n</code></pre>\n\n<p>In my case, <code>get_exe_path()</code> will return <code>C:\\Users\\User\\Documents\\Rust\\Hangman\\target\\debug\\Hangman.exe</code>.</p>\n\n<p>With <code>get_file_path(\"Config\\test.txt\")</code>, I want to append <code>Config\\test.txt</code> To the above path. Then I get the following path to the file: <code>C:\\Users\\User\\Documents\\Rust\\Hangman\\target\\debug\\Hangman.exe\\Config\\test.txt</code></p>\n\n<p>The problem is that <code>std::env::current_exe()</code> will get the file name of the executable also and I do not need that. I only need the directory where it is located.</p>\n\n<p><strong>Question</strong></p>\n\n<p>The following the following function call should return <code>C:\\Users\\User\\Documents\\Rust\\Hangman\\target\\debug\\Config\\test.txt</code>:</p>\n\n<pre><code>let path = get_file_path(\"Config\\\\test.txt\");\n</code></pre>\n\n<p>How can I get the path from the current directory without the executable name like above example? Are there any other ways to do this than using <code>std::env::current_exe()</code></p>\n"}, {"tags": ["char", "rust", "newline"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1507988162, "post_id": 46745138, "comment_id": 80436282, "body": "<i>a newline &#39;character&#39; is [...] two characters</i> \u2014 no, it&#39;s not."}, {"owner": {"reputation": 483, "user_id": 5536001, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/b724454eea2f7469a1f8074c520c720c?s=128&d=identicon&r=PG", "display_name": "cbcoutinho", "link": "https://stackoverflow.com/users/5536001/cbcoutinho"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1507988195, "post_id": 46745138, "comment_id": 80436288, "body": "I added current output, which shows the problem. I&#39;d be happy to repost it to code review if necessary"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1507988275, "post_id": 46745138, "comment_id": 80436310, "body": "You main problem with this is that there <b>is no question</b>. You haven&#39;t said &quot;why is this broken&quot; or anything vaguely like it. Stack Overflow is a <b>question and answer</b> site, but there&#39;s no obvious question."}, {"owner": {"reputation": 483, "user_id": 5536001, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/b724454eea2f7469a1f8074c520c720c?s=128&d=identicon&r=PG", "display_name": "cbcoutinho", "link": "https://stackoverflow.com/users/5536001/cbcoutinho"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1507988388, "post_id": 46745138, "comment_id": 80436338, "body": "How should I rephrase the question? I think I need to newline character to be a key in my key-value pair, but it&#39;s currently two keys."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1507988824, "post_id": 46745138, "comment_id": 80436472, "body": "&quot;What&#39;s going on here?&quot;  You&#39;re displaying a newline character.  Which is starting a new line.  What did you <i>expect</i> to happen?"}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "edited": false, "score": 1, "creation_date": 1507989207, "post_id": 46745138, "comment_id": 80436578, "body": "Or put it this way: What does <code>println!(&quot;{}: {}&quot;, &#39;\\n&#39;, 9);</code> do?"}], "answers": [{"comments": [{"owner": {"reputation": 483, "user_id": 5536001, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/b724454eea2f7469a1f8074c520c720c?s=128&d=identicon&r=PG", "display_name": "cbcoutinho", "link": "https://stackoverflow.com/users/5536001/cbcoutinho"}, "edited": false, "score": 4, "creation_date": 1507990659, "post_id": 46745292, "comment_id": 80437041, "body": "Thanks for the quick responses and answer @Shepmaster, you&#39;re totally right. I didn&#39;t know where the issue was - I thought it was related to BTreeMap. I should have taken more time to break it down into a MCVE and use debug output instead of normal output. I&#39;ll delete the code review post and consider this an answer. Thanks for your help patience."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1508015067, "last_edit_date": 1508015067, "creation_date": 1507988957, "answer_id": 46745292, "question_id": 46745138, "link": "https://stackoverflow.com/questions/46745138/why-does-a-newline-character-count-as-two-keys-in-a-btreemap/46745292#46745292", "title": "Why does a newline character count as two keys in a BTreeMap?", "body": "<blockquote>\n  <p>Unfortunately, a newline 'character' is <code>\\n</code>, which I think is not being handled corrected due to being two characters.</p>\n</blockquote>\n\n<p>No, it is not. A newline character (UTF-8 codepoint 0x0A) is a single character.</p>\n\n<blockquote>\n  <p>I think I need to newline character to be a key in my key-value pair, but it's currently two keys.</p>\n</blockquote>\n\n<p>No, it is not. Such a thing cannot happen \"accidentally\" either. If  we somehow had two keys, you would have to call <code>insert</code> twice; there's no built-in concept of a multi-key map.</p>\n\n<p>All that's happening here is that a newline character is <em>printed</em> as... a newline!</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>y: 10\n\n: 9    \n</code></pre>\n\n<p>If you take the time to create a <a href=\"/help/mcve\">MCVE</a>, you'd see this quickly:</p>\n\n<pre><code>fn main() {\n    let c = '\\n';\n    println!(\"&gt;{}&lt;\", c);\n    println!(\"&gt;{:?}&lt;\", c);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt;\n&lt;\n&gt;'\\n'&lt;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2308, "user_id": 603346, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/9fc6a6287e391c50af26ad5863431da8?s=128&d=identicon&r=PG", "display_name": "Thomas Ward", "link": "https://stackoverflow.com/users/603346/thomas-ward"}, "is_accepted": false, "score": 2, "last_activity_date": 1508015159, "last_edit_date": 1508015159, "creation_date": 1507989324, "answer_id": 46745352, "question_id": 46745138, "link": "https://stackoverflow.com/questions/46745138/why-does-a-newline-character-count-as-two-keys-in-a-btreemap/46745352#46745352", "title": "Why does a newline character count as two keys in a BTreeMap?", "body": "<p>The newline character is actually an <em>escape sequence</em> character.  This means that if you write it as <code>\\n</code> in the code which shows up as two characters, it's actually a placeholder for a single character - a new line - and should be treated as 'one character' in the program during runtime.</p>\n\n<p>The core issue you have here is that you're using <code>println</code> to print it out to the command line and actually <strong><em>printing</em></strong> an new line, as the <code>\\n</code> is interpreted to mean \"A new line\".  This is why, when you use <code>println</code> here, you get the behavior you see.  This is typical of <strong><em>most</em></strong> languages.</p>\n\n<p>While this adds a little additional bit of code, you may wish to do something like this instead to specially-handle new-line data being printed:</p>\n\n<pre><code>// Print key-value pair of input file\nprintln!(\"Number of occurrences of each character\");\nfor &amp;(key, value) in v.iter() {\n    if key == '\\n' {\n        println!(\"\\\\n\": {}, value);\n    } else {\n        println!(\"{}: {}\", key, value);\n    }\n}\n</code></pre>\n\n<p>Consider as explained by Shepmaster though to create an <a href=\"/help/mcve\">MCVE</a> to thoroughly test things, it helps rule out misinterpretation of what is actually happening behind the scenes.</p>\n\n<p>(NOTE: I am not a Rust master; there is probably a better way to achieve the above, but this is the shortest solution I came up with in a short period of time)</p>\n"}], "owner": {"reputation": 483, "user_id": 5536001, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/b724454eea2f7469a1f8074c520c720c?s=128&d=identicon&r=PG", "display_name": "cbcoutinho", "link": "https://stackoverflow.com/users/5536001/cbcoutinho"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "accepted_answer_id": 46745292, "answer_count": 2, "score": -2, "last_activity_date": 1508015159, "creation_date": 1507987922, "last_edit_date": 1507988662, "question_id": 46745138, "link": "https://stackoverflow.com/questions/46745138/why-does-a-newline-character-count-as-two-keys-in-a-btreemap", "title": "Why does a newline character count as two keys in a BTreeMap?", "body": "<p>I'm creating a compression/decompression library in Rust using Huffman encoding. One of the first steps is creating a data structure that contains all unique characters and the number of occurrences. I'm starting with just a simple text file, and having issues related to newline 'characters'.</p>\n\n<p>My first attempt at solving this problem was constructing a <code>BTreeMap</code>, essentially a key-value pair of unique characters and their occurrences, respectively. Unfortunately, a newline 'character' is \\n, which I think is not being handled corrected due to being two characters. I then converted the <code>BTreeMap</code> into a <code>Vec</code> to order by value, but that didn't solve the newline issue.</p>\n\n<p>Here's my initial attempt at my <code>comp</code> binary package. Calling the binary is done using <code>cargo</code>, and my sample file is reproduced at the end of this question:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo run &lt;text-file-in&gt; &lt;compressed-output-file&gt;\n</code></pre>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>extern crate comp;\n\nuse std::env;\nuse std::process;\nuse std::io::prelude::*;\n\nuse comp::Config;\n\nfn main() {\n    // Collect command-line args into a vector of strings\n    let mut stderr = std::io::stderr();\n\n    let config = Config::new(env::args()).unwrap_or_else(|err| {\n        writeln!(&amp;mut stderr, \"Parsing error: {}\", err).expect(\"Could not write to stderr\");\n        process::exit(1)\n    });\n\n    println!(\"Filename In: {}\", config.filename_in);\n    println!(\"Filename Out: {}\", config.filename_out);\n\n    if let Err(e) = comp::run(config) {\n        writeln!(&amp;mut stderr, \"Application error: {}\", e).expect(\"Could not write to stderr\");\n        process::exit(1);\n    }\n}\n</code></pre>\n\n<p><strong>lib.rs</strong></p>\n\n<pre><code>use std::collections::btree_map::BTreeMap;\nuse std::error::Error;\nuse std::fs::File;\nuse std::io::Read;\nuse std::iter::FromIterator;\n\npub struct Config {\n    pub filename_in: String,\n    pub filename_out: String\n}\n\nimpl Config {\n    pub fn new(mut args: std::env::Args) -&gt; Result&lt;Config, &amp;'static str&gt; {\n        args.next();\n\n        let filename_in = match args.next() {\n            Some(arg) =&gt; arg,\n            None =&gt; return Err(\"Didn't get a filename_in string\"),\n        };\n\n        let filename_out = match args.next() {\n            Some(arg) =&gt; arg,\n            None =&gt; return Err(\"Didn't get a filename_out string\"),\n        };\n\n        Ok(Config {\n            filename_in: filename_in,\n            filename_out: filename_out,\n        })\n    }\n}\n\npub fn run(config: Config) -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    let mut f = File::open(config.filename_in)?;\n\n    let mut contents = String::new();\n    f.read_to_string(&amp;mut contents)?;\n\n    for line in contents.lines() {\n        println!(\"{}\", line);\n    }\n\n    // Put unique occurrences into a BTreeMap\n    let mut count = BTreeMap::new();\n\n    for c in contents.chars() {\n        *count.entry(c).or_insert(0) += 1;\n    }\n\n    // Put contents into a Vec to order by value\n    let mut v = Vec::from_iter(count);\n    v.sort_by(|&amp;(_, a), &amp;(_, b)| b.cmp(&amp;a));\n\n    // Print key-value pair of input file\n    println!(\"Number of occurrences of each character\");\n    for &amp;(key, value) in v.iter() {\n        println!(\"{}: {}\", key, value);\n    }\n\n    Ok(())\n}\n</code></pre>\n\n<p>Sample text file, <strong>poem.txt</strong>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>I'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us \u2014 don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n</code></pre>\n\n<p>Usage:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run poem.txt poem\n   Compiling comp v0.1.0 (file:///home/chris/Projects/learn_rust/comp-rs)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.96 secs\n     Running `target/debug/comp poem.txt poem`\nFilename In: poem.txt\nFilename Out: poem\nI'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us \u2014 don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\nNumber of occurrences of each character\n : 36\no: 24\ne: 15\na: 10\nn: 10\ny: 10\n        &lt; What's going on here?\n: 9     &lt; What's going on here?\nr: 9\nd: 8\nl: 8\nb: 7\ni: 7\nt: 7\nu: 7\nh: 6\ns: 5\n!: 4\n': 4\nT: 4\ng: 4\nm: 4\n,: 3\nw: 3\n?: 2\nH: 2\nf: 2\nk: 2\np: 2\n.: 1\nA: 1\nI: 1\nW: 1\nc: 1\nv: 1\n\u2014: 1\n</code></pre>\n"}, {"tags": ["design-patterns", "rust", "chain-of-responsibility"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1507980772, "post_id": 46743353, "comment_id": 80434096, "body": "I think that questions like &quot;how do I implement pattern X in Rust&quot; are hard to answer. &quot;How do I solve problem X&quot; is better."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1507984105, "post_id": 46743353, "comment_id": 80435109, "body": "&lt;paperclip voice&gt;It looks like you&#39;re trying to make a linked list in Rust. Have you read <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"nofollow noreferrer\">Learning Rust With Entirely Too Many Linked Lists</a>?&lt;/paperclip voice&gt;"}, {"owner": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "edited": false, "score": 0, "creation_date": 1507984282, "post_id": 46743353, "comment_id": 80435150, "body": "No. I&#39;ll start reading right now."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1507984797, "post_id": 46743353, "comment_id": 80435297, "body": "No solution for the whole question but a reminder that if you use the same <b>lifetime parameter</b> in multiple locations in an item, you&#39;re creating a restriction: the compiler must find a concrete lifetime that satisfies all three locations simultaneously. This is most often not what you want, it&#39;s too restrictive."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1508008550, "post_id": 46743353, "comment_id": 80442837, "body": "@trentcl Beautiful text, excellent humor! Thanks for the link."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1508012509, "post_id": 46743353, "comment_id": 80443968, "body": "@user4815162342 It is very good. I was skimming it again today and realized that there are some corners where it is out of date; for example, you don&#39;t need nightly for <code>Rc::try_unwrap</code> anymore, as that was stabilized in 1.4.0. By and large it is still a good introduction to many common patterns in Rust."}], "answers": [{"comments": [{"owner": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "edited": false, "score": 0, "creation_date": 1507986690, "post_id": 46744771, "comment_id": 80435849, "body": "Thank you for detailed explanation. <code>So everything is fine? No! We chose the lifetime &#39;a = &#39;j now.</code> I thought that <code>&#39;a &gt;= &#39;j</code>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "edited": false, "score": 0, "creation_date": 1507987197, "post_id": 46744771, "comment_id": 80436007, "body": "@ArkadiyKuznetsov What exactly do you mean by <code>&#39;a &gt;= &#39;j</code>? Anyway, I don&#39;t see the problem in what you said. But I might be confused again :P"}, {"owner": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "edited": false, "score": 0, "creation_date": 1507988221, "post_id": 46744771, "comment_id": 80436293, "body": "I thought that compiller khows all lifetimes and just checks the code.   <code>vincent</code> is <code>Officer&lt;&#39;v&gt;, </code>john` is <code>Officer&lt;&#39;j&#39;&gt;</code>.   When I call <code>john.set_next(&amp;vincent)</code> compiller just checks that <code>&#39;v &gt;= &#39;j</code>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "edited": false, "score": 0, "creation_date": 1507988536, "post_id": 46744771, "comment_id": 80436381, "body": "@ArkadiyKuznetsov Well, the compiler tries to find out all the lifetimes, yes! That&#39;s the process I described in my answer. It&#39;s not (necessarily) true that <code>vincent</code> is <code>Officer&lt;&#39;v&gt;</code> and <code>john</code> is <code>Officer&lt;&#39;j&gt;</code>. Those lifetime parameters are determined by other things (as described in the answer)."}, {"owner": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "edited": false, "score": 0, "creation_date": 1507988688, "post_id": 46744771, "comment_id": 80436428, "body": "Thank you for that. I see my mistake."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 8, "last_activity_date": 1507985412, "creation_date": 1507985412, "answer_id": 46744771, "question_id": 46743353, "link": "https://stackoverflow.com/questions/46743353/how-do-i-implement-the-chain-of-responsibility-pattern-using-a-chain-of-trait-ob/46744771#46744771", "title": "How do I implement the Chain of Responsibility pattern using a chain of trait objects?", "body": "<h2>Detailed explanation</h2>\n\n<p>Your problem is quite interesting and it's certainly hard to understand directly why it doesn't work. It helps a lot if you understand how the compiler does unification. We will walk through all steps the compiler does in order to find out types.</p>\n\n<p>In order to make it a bit easier, we use this simplified example:</p>\n\n<pre><code>let vincent = Officer::new(8);\nlet mut john = Officer::new(5);\n\njohn.set_next(&amp;vincent);\n</code></pre>\n\n<p>This results in the same error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `john` does not live long enough\n  --&gt; src/main.rs:26:1\n   |\n25 |     john.set_next(&amp;vincent);\n   |     ---- borrow occurs here\n26 | }  \n   | ^ `john` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>First, let's transform the code in a form that's more explicit, lifetime wise:</p>\n\n<pre><code>{ // start 'v\n    let vincent = Officer::new(8);   \n\n    { // start 'j\n        let mut john = Officer::new(5);  \n\n        john.set_next(&amp;vincent);    \n    } // end 'j\n} // end 'v\n</code></pre>\n\n<hr>\n\n<p>Ok, now we're prepared to see what the compiler is thinking, step by step:</p>\n\n<blockquote>\n<pre><code>{ // start 'v\n    let vincent = Officer::new(8); // : Officer&lt;'?arg_vincent&gt;\n</code></pre>\n</blockquote>\n\n<p>Rust doesn't know the lifetime parameter yet, thus it can only deduce an incomplete type here. Hopefully we can fill out the details later! When the compiler wants to show missing type information, it prints an underscore (e.g. <code>Vec&lt;_&gt;</code>). In this example I've written the missing information as <code>'?arg_vincent</code>. That way we can refer to it later.</p>\n\n<blockquote>\n<pre><code>    { // start 'j\n        let mut john = Officer::new(5); // : Officer&lt;'?arg_john&gt;\n</code></pre>\n</blockquote>\n\n<p>The same as above.</p>\n\n<blockquote>\n<pre><code>        john.set_next(&amp;vincent);\n</code></pre>\n</blockquote>\n\n<p>Now it get's interesting! The compiler has this function signature:</p>\n\n<pre><code>fn set_next(&amp;'a mut self, next: &amp;'a Policeman&lt;'a&gt;)\n</code></pre>\n\n<p>Now, the compiler's job is to find a fitting lifetime <code>'a</code> that satisfies a bunch of conditions:</p>\n\n<ul>\n<li>We have <code>&amp;'a mut self</code> and <code>john</code> is <code>self</code> here. So <code>'a</code> can't live longer than <code>john</code>. In other words: <code>'j</code> <em>outlives</em> <code>'a</code>, denoted <code>'j: 'a</code>.</li>\n<li>We have <code>next: &amp;'a ...</code> and <code>next</code> is <code>vincent</code>, so (just like above), <code>'a</code> can't live longer than <code>vincent</code>. <code>'v</code> <em>outlives</em> <code>'a</code> => 'v: 'a`.</li>\n<li>Lastly, the <code>'a</code> in <code>Policeman&lt;'a&gt;</code> refers to the (yet to be determined) lifetime parameter <code>'?arg_vincent</code> (since that's what we pass as argument). But <code>'?arg_vincent</code> is not yet fixed and totally unbounded. So this doesn't impose a restriction on <code>'a</code> (unlike the previous two points). Instead, our choice for <code>'a</code> determines<code>'?arg_vincent</code> later: <code>'?arg_vincent := 'a</code>.</li>\n</ul>\n\n<p>So in short: </p>\n\n<pre><code>'j: 'a    and\n'v: 'a\n</code></pre>\n\n<p>So what's a lifetime which lives at most as long as john <strong>and</strong> as most as long as vincent? <code>'v</code> isn't sufficient, since it outlives <code>john</code>. <code>'j</code> is fine; it satisfied the conditions above.</p>\n\n<p>So everything is fine? No! We chose the lifetime <code>'a = 'j</code> now. Thus we also know that <code>'?arg_vincent = 'j</code>! So the full type of <code>vincent</code> is <code>Officer&lt;'j&gt;</code>. This in turn tells the compiler that <code>vincent</code> borrowed something with the lifetime <code>j</code>. But <code>vincent</code> lives longer than <code>'j</code>, so it outlives its borrow! That's bad. That's why the compiler complains. </p>\n\n<p>This whole thing is really rather complex, and I guess that after reading my explanation, most people feel exactly like I feel after reading most math proofs: each step made sense, but the result isn't intuitive. <em>Maybe</em> this improves the situation slightly: </p>\n\n<p>Since the <code>set_next()</code> function requires all lifetimes to <em>be</em> <code>'a</code>, we impose a lot of restrictions on all lifetimes in our program. This quickly leads to contradictions in restrictions, as it happened here.</p>\n\n<h3>A quick fix for my small example</h3>\n\n<p>... is to remove the <code>'a</code> from the <code>self</code> parameter:</p>\n\n<pre><code>fn set_next(&amp;mut self, next: &amp;'a Policeman&lt;'a&gt;)\n</code></pre>\n\n<p>By doing that we remove unnecessary restrictions. Unfortunately, this isn't enough to make your whole example compile.</p>\n\n<h2>A more general solution</h2>\n\n<p>I'm not very familiar with the design pattern you mentions, but from the looks of it, it's close to impossible to track the involved lifetimes at compile time. Thus I'd use <code>Rc</code> or <code>Arc</code> instead of references. With those smartpointers, you don't need to annotate lifetimes and everything \"just works\". Only disadvantage: a tiny bit of runtime cost. </p>\n\n<p>But it's impossible to tell you the best solution: it really depends on the problem at hand. </p>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 8, "last_activity_date": 1529505780, "last_edit_date": 1529505780, "creation_date": 1507990783, "answer_id": 46745579, "question_id": 46743353, "link": "https://stackoverflow.com/questions/46743353/how-do-i-implement-the-chain-of-responsibility-pattern-using-a-chain-of-trait-ob/46745579#46745579", "title": "How do I implement the Chain of Responsibility pattern using a chain of trait objects?", "body": "<p><a href=\"https://stackoverflow.com/a/46744771/3650362\">Lukas's excellent answer</a> explains why this won't work and you should consider using smart pointers -- either <code>Box</code> for single ownership, or <code>Rc</code>/<code>Arc</code> for shared ownership.</p>\n\n<p>That said, you can do something similar (although not very useful) by getting rid of the <code>Policeman</code> trait and making <code>set_next</code> inherent to <code>Officer</code>:</p>\n\n<pre><code>pub struct Officer&lt;'a&gt; {\n    deduction: u8,\n    next: Option&lt;&amp;'a Officer&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Officer&lt;'a&gt; {\n    pub fn new(deduction: u8) -&gt; Officer&lt;'a&gt; {\n        Officer {deduction, next: None}\n    }\n    fn set_next(&amp;mut self, next: &amp;'a Officer&lt;'a&gt;) {\n        self.next = Some(next);\n    }\n}\n\nfn main() {\n    let vincent = Officer::new(8);    // -+ vincent enters the scope\n    let mut john = Officer::new(5);   // -+ john enters the scope\n    let mut martin = Officer::new(3); // -+ martin enters the scope\n                                      //  |\n    john.set_next(&amp;vincent);          //  |\n    martin.set_next(&amp;john);           //  |\n}                                     // martin, john, vincent out of scope\n</code></pre>\n\n<p>This works (<a href=\"https://play.rust-lang.org/?gist=85c307be12b4be680fbbcbd5bbfbaa64&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>) because the struct <code>Officer</code> is <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html#variance\" rel=\"nofollow noreferrer\">covariant</a> with respect to <code>'a</code>. That means that if you have an <code>Officer&lt;'a&gt;</code>, you can treat it like an <code>Officer&lt;'b&gt;</code> as long as <code>'a: 'b</code>; that is, when <code>'a</code> outlives <code>'b</code>, <code>Officer&lt;'a&gt;</code> is a <em>subtype</em> of <code>Officer&lt;'b&gt;</code>. This knowledge lets the compiler shrink the lifetimes of each reference in the way you probably expected at first. (There's another <a href=\"https://stackoverflow.com/questions/42637911/how-can-this-instance-seemingly-outlive-its-own-parameter-lifetime\">really good Q&amp;A</a> about variance that you may enjoy, although it doesn't quite apply to your situation.)</p>\n\n<p><a href=\"https://stackoverflow.com/questions/50946525/why-do-the-lifetimes-on-a-trait-object-passed-as-an-argument-require-higher-rank\">Traits, on the other hand, are always <em>in</em>variant with respect to their parameters</a>, so <code>Policeman&lt;'a&gt;</code> is <em>not</em> a subtype of <code>Policeman&lt;'b&gt;</code>. This robs the compiler of the ability to adjust lifetimes: the reference <code>&amp;'_ john</code> could perhaps have a shorter lifetime, but the <code>Policeman&lt;'_&gt;</code> trait can't. That's why even Lukas's \"quick fix\" won't work on your whole example.</p>\n\n<p>There's at least one more way to make the original example work by adding a lifetime parameter so that <code>set_next</code> doesn't unify the two lifetimes in <code>&amp;'?first Policeman&lt;'?second&gt;</code>, but from that change you get only one extra layer of indirection -- i.e., it would make the example work, but if you added <code>michael</code> who reports to <code>martin</code>, you'd be back where you started.</p>\n"}], "owner": {"reputation": 435, "user_id": 4344645, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9sfR.jpg?s=128&g=1", "display_name": "Arkadiy Kuznetsov", "link": "https://stackoverflow.com/users/4344645/arkadiy-kuznetsov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 399, "favorite_count": 0, "accepted_answer_id": 46744771, "answer_count": 2, "score": 7, "last_activity_date": 1529505780, "creation_date": 1507976027, "last_edit_date": 1507989346, "question_id": 46743353, "link": "https://stackoverflow.com/questions/46743353/how-do-i-implement-the-chain-of-responsibility-pattern-using-a-chain-of-trait-ob", "title": "How do I implement the Chain of Responsibility pattern using a chain of trait objects?", "body": "<p>I'm trying to implement the Chain of Responsibility design pattern in Rust:</p>\n\n<pre><code>pub trait Policeman&lt;'a&gt; {\n    fn set_next(&amp;'a mut self, next: &amp;'a Policeman&lt;'a&gt;);\n}\n\npub struct Officer&lt;'a&gt; {\n    deduction: u8,\n    next: Option&lt;&amp;'a Policeman&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Officer&lt;'a&gt; {\n    pub fn new(deduction: u8) -&gt; Officer&lt;'a&gt; {\n        Officer {deduction, next: None}\n    }\n}\n\nimpl&lt;'a&gt; Policeman&lt;'a&gt; for Officer&lt;'a&gt; {\n    fn set_next(&amp;'a mut self, next: &amp;'a Policeman&lt;'a&gt;) {\n        self.next = Some(next);\n    }\n}\n\nfn main() {\n    let vincent = Officer::new(8);    // -+ vincent enters the scope\n    let mut john = Officer::new(5);   // -+ john enters the scope\n    let mut martin = Officer::new(3); // -+ martin enters the scope\n                                      //  |\n    john.set_next(&amp;vincent);          //  |\n    martin.set_next(&amp;john);           //  |\n}                                     // martin, john, vincent out of scope\n</code></pre>\n\n<p>This produces the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `john` does not live long enough\n  --&gt; src\\main.rs:29:1\n   |\n27 |     john.set_next(&amp;vincent);\n   |     ---- borrow occurs here\n28 |     martin.set_next(&amp;john);\n29 | }\n   | ^ `john` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n\nerror[E0597]: `martin` does not live long enough\n  --&gt; src\\main.rs:29:1\n   |\n28 |     martin.set_next(&amp;john);\n   |     ------ borrow occurs here\n29 | }\n   | ^ `martin` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n\nerror[E0597]: `john` does not live long enough\n  --&gt; src\\main.rs:29:1\n   |\n28 |     martin.set_next(&amp;john);\n   |                      ---- borrow occurs here\n29 | }\n   | ^ `john` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>Why does <code>john</code> not live long enough?  </p>\n\n<ol>\n<li>Created <code>vincent</code></li>\n<li>Created <code>john</code></li>\n<li>Created <code>martin</code></li>\n<li><code>john</code> refers to <code>vincent</code> (<code>vincent</code> in scope)</li>\n<li><code>martin</code> refers to <code>john (john</code> in scope)</li>\n<li><code>martin</code> out of scope (<code>john</code> still in scope)</li>\n<li><code>john</code> out of scope (<code>vincent</code> still in scope)</li>\n<li><code>vincent</code> out of scope</li>\n</ol>\n\n<p>How do I need to change the lifetimes or the code to correctly implement the Chain of Responsibility pattern in Rust?</p>\n"}, {"tags": ["arrays", "json", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1507990172, "post_id": 46742125, "comment_id": 80436883, "body": "<code>addObj</code> is not idiomatic Rust style, it should be snake_case: <code>add_obj</code>."}], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1507969106, "post_id": 46742408, "comment_id": 80431003, "body": "I remember there was similar question, but I can&#39;t find it right now."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1507969427, "post_id": 46742408, "comment_id": 80431090, "body": "Can you please add more details (or a reference) about the magic of curly braces and the distinction between moving and reborrowing the mutable reference?"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1507969539, "post_id": 46742408, "comment_id": 80431114, "body": "I need to go. Search SO for reborrowing, there is good description."}, {"owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "edited": false, "score": 0, "creation_date": 1507971509, "post_id": 46742408, "comment_id": 80431555, "body": "you sir - are a genius :)"}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 3, "last_activity_date": 1507969023, "creation_date": 1507969023, "answer_id": 46742408, "question_id": 46742125, "link": "https://stackoverflow.com/questions/46742125/convert-a-vector-of-strings-to-a-deeply-nested-json-object/46742408#46742408", "title": "Convert a vector of strings to a deeply-nested JSON object", "body": "<p>It can be done with a little bit of magic.</p>\n\n<pre><code>fn main() {   \n    let my_vec = [\"foo\",\"bar\",\"baz\",\"foobar\",\"barfoo\"];\n    let mut curr_obj = object!();\n    {\n        let mut obj_ref = &amp;mut curr_obj;\n        for i in 0..my_vec.len() {\n            let name = my_vec[i];\n            obj_ref = &amp;mut {obj_ref}[name]; // note the curly braces\n        }\n    }\n    println!(\"{:?}\", curr_obj);\n}\n</code></pre>\n\n<p>Mutable reference is moved instead of being reborrowed.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1507989990, "creation_date": 1507989990, "answer_id": 46745451, "question_id": 46742125, "link": "https://stackoverflow.com/questions/46742125/convert-a-vector-of-strings-to-a-deeply-nested-json-object/46745451#46745451", "title": "Convert a vector of strings to a deeply-nested JSON object", "body": "<p>It's much simpler to use iterator methods:</p>\n\n<pre><code>#[macro_use]\nextern crate json;\n\nfn main() {\n    let my_vec = [\"foo\", \"bar\", \"baz\", \"foobar\", \"barfoo\"];\n\n    let result = my_vec.iter().rev().fold(object!(), |object, name| {\n        object!(name =&gt; object)\n    });\n\n    println!(\"{}\", json::stringify_pretty(result, 2));\n}\n</code></pre>\n\n<p>Produces:</p>\n\n<pre><code>{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": {\n        \"foobar\": {\n          \"barfoo\": {}\n        }\n      }\n    }\n  }\n}\n</code></pre>\n"}], "owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 99, "favorite_count": 0, "accepted_answer_id": 46742408, "answer_count": 2, "score": 0, "last_activity_date": 1547299036, "creation_date": 1507966813, "last_edit_date": 1547299036, "question_id": 46742125, "link": "https://stackoverflow.com/questions/46742125/convert-a-vector-of-strings-to-a-deeply-nested-json-object", "title": "Convert a vector of strings to a deeply-nested JSON object", "body": "<p>I'm trying to get a deeply-nested JSON object from a vector of strings using <a href=\"https://docs.rs/json/0.11.10/json/\" rel=\"nofollow noreferrer\">the <code>json</code> crate</a>: </p>\n\n<pre><code>fn main() {   \n    let my_vec = [\"foo\", \"bar\", \"baz\", \"foobar\", \"barfoo\"];\n    let mut curr_obj = object!();\n    for i in 0..my_vec.len() {\n        let name = my_vec[i];\n        curr_obj = addObj(curr_obj, name);   \n    }\n}\n\nfn addObj(mut obj: json::JsonValue, name: &amp;str) -&gt; json::JsonValue {\n    obj[name] = json::JsonValue::new_object();\n    let retob = obj[name];\n    retob.to_owned() // is empty but should be obj[\"foo\"] = object!();\n}\n</code></pre>\n\n<p>The object is an empty one here. My desired output looks like this:</p>\n\n<pre><code>{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": {\n        \"foobar\": {\n          \"barfoo\": {}\n        }\n      }\n    }\n  }\n}\n</code></pre>\n\n<p>I get the error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of indexed content\n  --&gt; src/main.rs:15:17\n   |\n15 |     let retob = obj[name];\n   |                 ^^^^^^^^^\n   |                 |\n   |                 cannot move out of indexed content\n   |                 help: consider using a reference instead: `&amp;obj[name]`\n</code></pre>\n"}, {"tags": ["rust", "rustup"], "comments": [{"owner": {"reputation": 12296, "user_id": 461597, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7fa573d21875f5b980a2d81c695c71f3?s=128&d=identicon&r=PG", "display_name": "Unapiedra", "link": "https://stackoverflow.com/users/461597/unapiedra"}, "edited": false, "score": 0, "creation_date": 1604103677, "post_id": 46739842, "comment_id": 114254596, "body": "<code>rustup which rustup</code> tells you where the rustup executable is!"}], "answers": [{"comments": [{"owner": {"reputation": 1053, "user_id": 984407, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/899e39ce4e87fad8ed88bd4a0b7d5126?s=128&d=identicon&r=PG", "display_name": "aaaaaa", "link": "https://stackoverflow.com/users/984407/aaaaaa"}, "edited": false, "score": 0, "creation_date": 1609992446, "post_id": 46739857, "comment_id": 115994811, "body": "fwiw I tried installing via the standalone msi.  It does not install in the default location as described and I didn&#39;t bother to check where it was installed because my path was also not updated as expected.  So I uninstalled it then chose the appropriate exe under <a href=\"https://forge.rust-lang.org/infra/other-installation-methods.html#other-ways-to-install-rustup\" rel=\"nofollow noreferrer\">forge.rust-lang.org/infra/&hellip;</a>.  This worked fine"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1610362274, "last_edit_date": 1610362274, "creation_date": 1507943336, "answer_id": 46739857, "question_id": 46739842, "link": "https://stackoverflow.com/questions/46739842/where-does-rustup-install-itself-to/46739857#46739857", "title": "Where does rustup install itself to?", "body": "<p>By <strong>default</strong>, rustup is also installed to your home directory:</p>\n<pre class=\"lang-none prettyprint-override\"><code>$ which rustup\n/Users/shep/.cargo/bin/rustup\n</code></pre>\n<p>The <a href=\"https://github.com/rust-lang-nursery/rustup.rs/#installation\" rel=\"nofollow noreferrer\">documentation states</a>:</p>\n<blockquote>\n<p><code>rustup</code> installs <code>rustc</code>, <code>cargo</code>, <code>rustup</code> and other standard tools to Cargo's <code>bin</code> directory. On Unix it is located at <code>$HOME/.cargo/bin</code> and on Windows at <code>%USERPROFILE%\\.cargo\\bin</code>. This is the same directory that <code>cargo install</code> will install Rust programs and Cargo plugins.</p>\n</blockquote>\n<p>It <a href=\"https://rust-lang.github.io/rustup/installation/index.html#choosing-where-to-install\" rel=\"nofollow noreferrer\">goes on to describe how to change the defaults</a>:</p>\n<blockquote>\n<p><code>rustup</code> allows you to customise your installation by setting the environment variables <code>CARGO_HOME</code> and <code>RUSTUP_HOME</code> before running the rustup-init executable. As mentioned in the Environment Variables section, <code>RUSTUP_HOME</code> sets the root rustup folder, which is used for storing installed toolchains and configuration options. <code>CARGO_HOME</code> contains cache files used by cargo.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1617640996, "post_id": 66956065, "comment_id": 118353936, "body": "Does Chocolatey install <b>rustup</b>? That&#39;s what this question is about: <i>Where does rustup install itself to?</i> This question isn&#39;t about <code>rustc</code> in general."}, {"owner": {"reputation": 147, "user_id": 2879015, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XJQmQ.png?s=128&g=1", "display_name": "Kyle Stay", "link": "https://stackoverflow.com/users/2879015/kyle-stay"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1617663544, "post_id": 66956065, "comment_id": 118361672, "body": "It doesn&#39;t, but this is the first question/answer that comes up when you <a href=\"https://www.google.com/search?q=where+does+rust+install+itself&amp;oq=where+does+rust+install+itself\" rel=\"nofollow noreferrer\">google &quot;where does rust install itself?&quot;</a>. I guess I didn&#39;t read the whole question, but this answer seems likely to help others to me."}], "tags": [], "owner": {"reputation": 147, "user_id": 2879015, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XJQmQ.png?s=128&g=1", "display_name": "Kyle Stay", "link": "https://stackoverflow.com/users/2879015/kyle-stay"}, "is_accepted": false, "score": -2, "last_activity_date": 1617640965, "last_edit_date": 1617640965, "creation_date": 1617639227, "answer_id": 66956065, "question_id": 46739842, "link": "https://stackoverflow.com/questions/46739842/where-does-rustup-install-itself-to/66956065#66956065", "title": "Where does rustup install itself to?", "body": "<p>If you used Chocolatey to install Rust, it installs to <code>C:\\ProgramData\\chocolatey\\bin</code> (at least when I used it).</p>\n<p>To verify it was installed by Chocolatey, in a PowerShell window run <code>choco list --local-only</code> and see if the returned list contains Rust.</p>\n<p>You can uninstall Chocolatey's Rust instance by running <code>choco uninstall rust</code> in an admin PowerShell window.</p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 5115460, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-j9sBSu85XOc/AAAAAAAAAAI/AAAAAAAAA6s/LpoRlH8nFuE/photo.jpg?sz=128", "display_name": "Antony Savvidi", "link": "https://stackoverflow.com/users/5115460/antony-savvidi"}, "is_accepted": false, "score": 0, "last_activity_date": 1618416038, "creation_date": 1618416038, "answer_id": 67095192, "question_id": 46739842, "link": "https://stackoverflow.com/questions/46739842/where-does-rustup-install-itself-to/67095192#67095192", "title": "Where does rustup install itself to?", "body": "<p>In my case rustup (along with it's installed toolchains) is in a folder named .rustup which is on the same level as .cargo</p>\n"}], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7094, "favorite_count": 1, "accepted_answer_id": 46739857, "answer_count": 3, "score": 8, "last_activity_date": 1618416038, "creation_date": 1507943181, "last_edit_date": 1507943301, "question_id": 46739842, "link": "https://stackoverflow.com/questions/46739842/where-does-rustup-install-itself-to", "title": "Where does rustup install itself to?", "body": "<p>I understand that <code>rustup</code> installs the <code>rustc</code> and <code>cargo</code> binaries to <code>~/.cargo/bin</code>, but where does it install the <code>rustup</code> executable to? As far as I can tell this isn't explained in any documentation and running the installer doesn't tell you either. I'd like to avoid it being installed to anywhere except my home directory, if possible. I'm using macOS if that makes a difference.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 613, "user_id": 295987, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/ea0959e6753984fb056916761140eef9?s=128&d=identicon&r=PG", "display_name": "Sushisource", "link": "https://stackoverflow.com/users/295987/sushisource"}, "edited": false, "score": 0, "creation_date": 1508179642, "post_id": 46737786, "comment_id": 80499802, "body": "Ah, makes sense. Not as ergonomic as it&#39;d be in an ideal world but the explanation is reasonable. Would be a nice feature to have it work in the future.  Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1507990291, "last_edit_date": 1507990291, "creation_date": 1507927681, "answer_id": 46737786, "question_id": 46737593, "link": "https://stackoverflow.com/questions/46737593/if-i-implement-froma-for-b-will-fromveca-for-vecb-also-be-implemented/46737786#46737786", "title": "If I implement From&lt;A&gt; for B, will From&lt;Vec&lt;A&gt;&gt; for Vec&lt;B&gt; also be implemented?", "body": "<p>There's no need to guess at which implementations of <code>From</code> exist for <code>Vec</code>; they are <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-From&lt;Box&lt;[T]&gt;&gt;\" rel=\"nofollow noreferrer\">all listed in the docs</a>. The list as of Rust 1.21.0:</p>\n\n<pre><code>impl&lt;'a, T&gt; From&lt;&amp;'a mut [T]&gt; for Vec&lt;T&gt; { /**/ }\n\nimpl&lt;T&gt; From&lt;BinaryHeap&lt;T&gt;&gt; for Vec&lt;T&gt; { /**/ }\n\nimpl&lt;T&gt; From&lt;VecDeque&lt;T&gt;&gt; for Vec&lt;T&gt; { /**/ }\n\nimpl&lt;'a, T&gt; From&lt;&amp;'a [T]&gt; for Vec&lt;T&gt;  { /**/ }\n\nimpl From&lt;String&gt; for Vec&lt;u8&gt; { /**/ }\n\nimpl&lt;'a, T&gt; From&lt;Cow&lt;'a, [T]&gt;&gt; for Vec&lt;T&gt; { /**/ } \n\nimpl&lt;'a&gt; From&lt;&amp;'a str&gt; for Vec&lt;u8&gt; { /**/ }\n\nimpl&lt;T&gt; From&lt;Box&lt;[T]&gt;&gt; for Vec&lt;T&gt; { /**/ }\n</code></pre>\n\n<p>Instead, you will want to do something like:</p>\n\n<pre><code>let b: Vec&lt;Wrapper&gt; = a.into_iter().map(Into::into).collect();\n</code></pre>\n\n<hr>\n\n<p>If you tried to implement this, you'd get a failure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `core::convert::From&lt;vec::Vec&lt;_&gt;&gt;` for type `vec::Vec&lt;_&gt;`:\n    --&gt; /Users/shep/Projects/rust/src/liballoc/vec.rs:2190:1\n     |\n2190 | / impl&lt;A, B&gt; From&lt;Vec&lt;A&gt;&gt; for Vec&lt;B&gt;\n2191 | |     where A: Into&lt;B&gt;\n2192 | | {\n2193 | |     fn from(s: Vec&lt;A&gt;) -&gt; Vec&lt;B&gt; {\n2194 | |         s.into_iter().map(Into::into).collect()\n2195 | |     }\n2196 | | }\n     | |_^\n     |\n     = note: conflicting implementation in crate `core`\n</code></pre>\n\n<p>Nothing prevents <code>A</code> and <code>B</code> from being <strong>the same type</strong>. In that case, you'd be conflicting with the reflexive implementation of <code>From</code>: <code>impl&lt;T&gt; From&lt;T&gt; for T</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/37347311/155423\">How is there a conflicting implementation of `From` when using a generic type?</a></li>\n</ul>\n"}], "owner": {"reputation": 613, "user_id": 295987, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/ea0959e6753984fb056916761140eef9?s=128&d=identicon&r=PG", "display_name": "Sushisource", "link": "https://stackoverflow.com/users/295987/sushisource"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 81, "favorite_count": 0, "accepted_answer_id": 46737786, "answer_count": 1, "score": 1, "last_activity_date": 1507990291, "creation_date": 1507926647, "last_edit_date": 1507927223, "question_id": 46737593, "link": "https://stackoverflow.com/questions/46737593/if-i-implement-froma-for-b-will-fromveca-for-vecb-also-be-implemented", "title": "If I implement From&lt;A&gt; for B, will From&lt;Vec&lt;A&gt;&gt; for Vec&lt;B&gt; also be implemented?", "body": "<p>It seems like no, because I have code that implements <code>From&lt;A&gt; for &lt;B&gt;</code>, and I can convert an <code>A</code> to a <code>B</code> with <code>.into()</code>, but the same thing isn't working for a <code>Vec&lt;A&gt;</code> <code>.into()</code> a <code>Vec&lt;B&gt;</code>.</p>\n\n<p>Either I've screwed up something that's preventing the implementation from being derived, or this isn't supposed to happen. </p>\n\n<p>If it's not supposed to work, why not? It seems like code such as this would work: </p>\n\n<pre><code>impl&lt;A: From&lt;B&gt;, B&gt; From&lt;Vec&lt;A&gt;&gt; for Vec&lt;B&gt; {\n    // ... map .into onto vec of As to vec of Bs ...\n}\n</code></pre>\n\n<p>I'm guessing there's more complexity to it than that.</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1507901574, "creation_date": 1507901574, "answer_id": 46731207, "question_id": 46731018, "link": "https://stackoverflow.com/questions/46731018/parsing-an-url-in-iron-and-getting-a-dynamic-part/46731207#46731207", "title": "Parsing an url in Iron and getting a dynamic part", "body": "<p>Use the <a href=\"https://crates.io/crates/router\" rel=\"nofollow noreferrer\">router crate</a>:</p>\n\n<pre><code>let mut router = Router::new();\nrouter.get(\"/users/:user_id\", user_show, \"user_show\");\nlet _server = Iron::new(router).http((\"127.0.0.1\", 8787)).unwrap();\n</code></pre>\n\n<p>Inside your handler, you get a reference to the <code>Router</code>'s <a href=\"https://docs.rs/router/0.5.1/router/struct.Params.html\" rel=\"nofollow noreferrer\"><code>Params</code></a> which lets you get the value for each named parameter. Note that the argument to <code>Params::find</code> matches the names assigned when the route was defined:</p>\n\n<pre><code>fn user_show(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let router = req.extensions.get::&lt;Router&gt;()\n        .expect(\"Unable to get router\");\n    user_id = router.find(\"user_id\")\n        .expect(\"A user id is required\");\n}\n</code></pre>\n\n<p>One you have a parameter as string, you <a href=\"https://stackoverflow.com/q/27043268/155423\">parse it into a number like anywhere else in Rust</a>.</p>\n"}], "owner": {"reputation": 1, "user_id": 8749559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4598babddb6fd63e945ef192f86bbca?s=128&d=identicon&r=PG&f=1", "display_name": "Joharu", "link": "https://stackoverflow.com/users/8749559/joharu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 137, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1507901574, "creation_date": 1507901018, "last_edit_date": 1507901089, "question_id": 46731018, "link": "https://stackoverflow.com/questions/46731018/parsing-an-url-in-iron-and-getting-a-dynamic-part", "title": "Parsing an url in Iron and getting a dynamic part", "body": "<p>I have 2 routes in Iron:</p>\n\n<ol>\n<li><code>/something/:some_int</code> # integer</li>\n<li><code>/something2/:some_str</code> # string</li>\n</ol>\n\n<p>How can I get these <code>:some_{int, str}</code> parts of them?</p>\n\n<pre><code>fn my_something_int_route_handler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let ref query = req.extensions.get::&lt;Router&gt;().unwrap().find(\"query\").unwrap_or(\"/\");\n\n    //what next ???\n    // how can I get the \":some_int\" from :/something/:some_int\n</code></pre>\n\n\n\n<pre><code>fn my_something2_str_route_handler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let ref query = req.extensions.get::&lt;Router&gt;().unwrap().find(\"query\").unwrap_or(\"/\");\n\n    // how can I get the \":some_str\" from :/something/:some_str\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1507862635, "post_id": 46721566, "comment_id": 80390032, "body": "At that point, it doesn&#39;t really seem to fit with the concept of &quot;just&quot; an example to me. I&#39;d encourage you to just split it out completely (perhaps using a workspace?). For my own curiosity, why does your example need a build script when your library doesn&#39;t?"}, {"owner": {"reputation": 43, "user_id": 8768584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/069c62a4681f179676fbe558c0fca400?s=128&d=identicon&r=PG&f=1", "display_name": "Zack", "link": "https://stackoverflow.com/users/8768584/zack"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1508001229, "post_id": 46721566, "comment_id": 80440453, "body": "The build script is to find the correct SDL2 DLL for Windows targets."}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 1, "creation_date": 1508032278, "post_id": 46721566, "comment_id": 80447806, "body": "@Zack that sounds like a problem in setting up the correct path/environment. &quot;Allow compiler/linker to find correct path to the SDL2 DLL&quot; seems a more appropriate (and new) question to ask."}], "owner": {"reputation": 43, "user_id": 8768584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/069c62a4681f179676fbe558c0fca400?s=128&d=identicon&r=PG&f=1", "display_name": "Zack", "link": "https://stackoverflow.com/users/8768584/zack"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 74, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1507861505, "creation_date": 1507861505, "question_id": 46721566, "link": "https://stackoverflow.com/questions/46721566/specify-build-file-for-an-example", "title": "Specify build file for an example", "body": "<p>I have a build script that is unnecessary for the library but required to build some examples. How do I specify a build file for an example with Cargo? I tried the following:</p>\n\n<pre><code>[[example]]\nname = \"basic\"\nbuild = \"examples/build.rs\"\n</code></pre>\n\n<p>but Cargo tells me the <code>build</code> key is unused.</p>\n"}, {"tags": ["rust", "undefined-behavior", "bit-shift"], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1507825248, "post_id": 46714338, "comment_id": 80375175, "body": "The same function with same parameters (<code>x.shr(y)</code>) gives different answers in different calls. Is not this an UB?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1507825689, "post_id": 46714338, "comment_id": 80375428, "body": "@Boiethios I&#39;m not sure that you are using the term <i>undefined behavior</i> correctly. <code>random()</code> (usually) returns different answers in different calls, but that doesn&#39;t mean that its behavior is undefined."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1507826874, "last_edit_date": 1507826874, "creation_date": 1507824772, "answer_id": 46714338, "question_id": 46714279, "link": "https://stackoverflow.com/questions/46714279/is-it-expected-that-a-too-large-bitshift-is-undefined-behavior-in-rust/46714338#46714338", "title": "Is it expected that a too large bitshift is undefined behavior in Rust?", "body": "<p>No, this is <strong>not</strong> expected, but it is <strong>not undefined behavior</strong>. <a href=\"https://github.com/rust-lang/rust/issues/45239\" rel=\"nofollow noreferrer\">This is \"just\" a bug</a>.</p>\n\n<p>There <em>should</em> be no difference between how the constant is computed at compile time and how the value is computed at runtime. This is a hard problem in general as the machine performing the compilation and the machine running the code might have completely different architectures.</p>\n\n<hr>\n\n<p>When talking about debug vs release builds, the behavior of \"too large\" bitshifts is expected, and is also <strong>not undefined behavior</strong>. The clue is in the error message:</p>\n\n<blockquote>\n  <p>attempt to shift right with overflow</p>\n</blockquote>\n\n<p><a href=\"https://doc.rust-lang.org/beta/reference/behavior-not-considered-unsafe.html#integer-overflow\" rel=\"nofollow noreferrer\">Integer overflow is neither unsafe nor undefined</a>:</p>\n\n<blockquote>\n  <p>The Rust compiler does not consider the following behaviors unsafe,\n  though a programmer may (should) find them undesirable, unexpected, or\n  erroneous.</p>\n  \n  <ul>\n  <li>...</li>\n  <li>Integer overflow</li>\n  </ul>\n</blockquote>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31215139/155423\">How can integer overflow protection be turned off?</a></li>\n</ul>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 957, "favorite_count": 0, "accepted_answer_id": 46714338, "answer_count": 1, "score": 5, "last_activity_date": 1507826874, "creation_date": 1507824575, "last_edit_date": 1507824818, "question_id": 46714279, "link": "https://stackoverflow.com/questions/46714279/is-it-expected-that-a-too-large-bitshift-is-undefined-behavior-in-rust", "title": "Is it expected that a too large bitshift is undefined behavior in Rust?", "body": "<p>When you run this code:</p>\n\n<pre><code>#![allow(exceeding_bitshifts)]\n\nfn main() {\n    const NUMBER: u64 = 0b_10101010;\n\n    fn print_shift(i: u32) {\n        println!(\"{:b}\", NUMBER &gt;&gt; i);\n    }\n\n    print_shift(65);\n    println!(\"{:b}\", NUMBER &gt;&gt; 65);\n}\n</code></pre>\n\n<p>You see that shifting the bits of a number with a value that exceed the bit length produces different behavior when doing at compile time or runtime.</p>\n\n<p>Is it a normal behavior? Is it documented somewhere? This is not in the <a href=\"https://doc.rust-lang.org/beta/reference/behavior-considered-undefined.html\" rel=\"nofollow noreferrer\">list of documented undefined behavior</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 4, "creation_date": 1507816454, "post_id": 46711357, "comment_id": 80369221, "body": "Look at the sentence before the highlighted one: &quot;It\u2019s important that the value field is private so that code using the Guess struct is not allowed to set value directly&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1507817514, "post_id": 46711357, "comment_id": 80370013, "body": "<i>Couldn&#39;t they get around the requirement</i> \u2014 did you <b>try</b> to write some code outside the module that &quot;gets around the requirement&quot;? If you had, you&#39;d quickly see the compiler error that prevents you."}], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 4, "creation_date": 1507817385, "post_id": 46711521, "comment_id": 80369937, "body": "Conversely, if you <i>want</i> the <code>Guess</code> value constructor to be public, all you have to do is mark all its members <code>pub</code>."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 11, "last_activity_date": 1507817402, "last_edit_date": 1507817402, "creation_date": 1507816626, "answer_id": 46711521, "question_id": 46711357, "link": "https://stackoverflow.com/questions/46711357/why-must-callers-use-a-constructor-instead-of-creating-a-struct-directly/46711521#46711521", "title": "Why must callers use a constructor instead of creating a struct directly?", "body": "<p>This applies only when the <code>Guess</code> struct is defined in a different module than the code using it; the struct itself is public but its <code>value</code> field is not, so you can't access it directly.</p>\n\n<p>You can verify it with the following example (<a href=\"https://play.rust-lang.org/?gist=565509e40aaa28986b88413f459a75b2&amp;version=stable\" rel=\"noreferrer\">playground link</a>):</p>\n\n<pre><code>use self::guess::Guess;\n\nfn main() {\n    let guess1 = Guess::new(20); // works\n    let guess2 = Guess::new(200); // panic: 'Guess value must be between 1 and 100, got 200.'\n    let guess3 = Guess { value: 20 }; // error: field `value` of struct `guess::Guess` is private\n    let guess4 = Guess { value: 200 }; // error: field `value` of struct `guess::Guess` is private\n}\n\nmod guess {\n    pub struct Guess {\n        value: u32,\n    }\n\n    impl Guess {\n        pub fn new(value: u32) -&gt; Guess {\n            if value &lt; 1 || value &gt; 100 {\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n            }\n\n            Guess {\n                value\n            }\n        }\n\n        pub fn value(&amp;self) -&gt; u32 {\n            self.value\n        }\n    }\n}\n</code></pre>\n\n<p>The Book explains the rationale behind keeping a struct's contents private pretty well.</p>\n"}], "owner": {"reputation": 5821, "user_id": 1770201, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/46bcb5d2018194c9beb884b6797e57e0?s=128&d=identicon&r=PG", "display_name": "George", "link": "https://stackoverflow.com/users/1770201/george"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 200, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1507817402, "creation_date": 1507816196, "last_edit_date": 1507817090, "question_id": 46711357, "link": "https://stackoverflow.com/questions/46711357/why-must-callers-use-a-constructor-instead-of-creating-a-struct-directly", "title": "Why must callers use a constructor instead of creating a struct directly?", "body": "<p>Consider the following Rust snippet <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch09-03-to-panic-or-not-to-panic.html\" rel=\"nofollow noreferrer\">from <em>The Rust Programming Language</em>, second edition</a>:</p>\n\n<pre><code>pub struct Guess {\n    value: u32,\n}\n\nimpl Guess {\n    pub fn new(value: u32) -&gt; Guess {\n        if value &lt; 1 || value &gt; 100 {\n            panic!(\"Guess value must be between 1 and 100, got {}.\", value);\n        }\n\n        Guess {\n            value\n        }\n    }\n\n    pub fn value(&amp;self) -&gt; u32 {\n        self.value\n    }\n}\n</code></pre>\n\n<p>and commentary from the corresponding tutorial, emphasis mine:</p>\n\n<blockquote>\n  <p>Next, we implement a method named <code>value</code> that borrows <code>self</code>, doesn\u2019t have any\n  other parameters, and returns a <code>u32</code>. This is a kind of method sometimes\n  called a <em>getter</em>, since its purpose is to get some data from its fields and\n  return it. This public method is necessary because the <code>value</code> field of the\n  <code>Guess</code> struct is private. It\u2019s important that the <code>value</code> field is private so\n  that code using the <code>Guess</code> struct is not allowed to set <code>value</code> directly:\n  <strong>callers outside the module <em>must</em> use the <code>Guess::new</code> function to create an\n  instance of <code>Guess</code>,  which ensures there\u2019s no way for a <code>Guess</code> to have a\n  <code>value</code> that hasn\u2019t been checked by the conditions in the <code>Guess::new</code> function</strong>.</p>\n</blockquote>\n\n<p>Why must callers use the <code>new</code> function? Couldn't they get around the requirement that <code>Guess.value</code> be between 1 and 100 by doing something like:</p>\n\n<pre><code>let g = Guess { value: 200 };\n</code></pre>\n"}, {"tags": ["rust", "compiler-warnings", "rust-cargo"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1507772944, "post_id": 46699982, "comment_id": 80347554, "body": "I&#39;ll ask the obvious question I guess: if its only used by test code - why not move it into the test module?"}, {"owner": {"reputation": 44207, "user_id": 141719, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5026f7977fda423dc990cc74b2ad4c9d?s=128&d=identicon&r=PG&f=1", "display_name": "HighCommander4", "link": "https://stackoverflow.com/users/141719/highcommander4"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1507774222, "post_id": 46699982, "comment_id": 80347854, "body": "@SimonWhitehead: Because it will be used by the program&#39;s code in due course."}], "owner": {"reputation": 44207, "user_id": 141719, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5026f7977fda423dc990cc74b2ad4c9d?s=128&d=identicon&r=PG&f=1", "display_name": "HighCommander4", "link": "https://stackoverflow.com/users/141719/highcommander4"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 320, "favorite_count": 0, "closed_date": 1507773905, "answer_count": 0, "score": 4, "last_activity_date": 1507862682, "creation_date": 1507771736, "last_edit_date": 1507862682, "question_id": 46699982, "link": "https://stackoverflow.com/questions/46699982/cargo-check-gives-dead-code-warning-for-function-used-only-by-test", "closed_reason": "Duplicate", "title": "&quot;cargo check&quot; gives dead code warning for function used only by test", "body": "<p>In the following code:</p>\n\n<pre><code>mod foo {\n    pub fn bar() -&gt; i32 { 42 }\n}\n\n#[cfg(test)]\nmod tests {\n    use foo;\n\n    #[test]\n    fn test_bar() {\n        assert_eq!(42, foo::bar());\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>the function <code>bar()</code> is only used by test code.</p>\n\n<p><code>cargo check</code> gives a dead code warning for this code:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: function is never used: `bar`\n --&gt; src/main.rs:2:5\n  |\n2 |     pub fn bar() -&gt; i32 { 42 }\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(dead_code)] on by default\n</code></pre>\n\n<p>I find \"dead code\" warnings useful in general, but I would only like them to be produced for functions that are really unused, including by test code. Is there a way to get <code>cargo check</code> to behave that way?</p>\n"}]