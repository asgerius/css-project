[{"tags": ["rust", "rust-cargo", "arrayfire"], "comments": [{"owner": {"reputation": 4656, "user_id": 1787388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pSr04.png?s=128&g=1", "display_name": "shusson", "link": "https://stackoverflow.com/users/1787388/shusson"}, "edited": false, "score": 1, "creation_date": 1484178403, "post_id": 41602744, "comment_id": 70408124, "body": "It&#39;d be nice to get some feedback on the down vote, I&#39;m new to the rust dev environment and any help is appreciated"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484179520, "post_id": 41602744, "comment_id": 70408467, "body": "That function <a href=\"https://github.com/arrayfire/arrayfire-rust/blob/456a3354d4d29a38a0b528e5db59eee1f87e5d71/src/backend.rs#L28-L35\" rel=\"nofollow noreferrer\">appears to be pretty self-contained</a> and basically only calls the C function with a bit of error handling. It may not be related to Rust at all..."}, {"owner": {"reputation": 4656, "user_id": 1787388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pSr04.png?s=128&g=1", "display_name": "shusson", "link": "https://stackoverflow.com/users/1787388/shusson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484179724, "post_id": 41602744, "comment_id": 70408540, "body": "I thought that might be the case but the only difference is how the executable is called, which is related to rust?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484179998, "post_id": 41602744, "comment_id": 70408626, "body": "Not <i>Rust</i>, really. Rust is done once the file is compiled. <i>Cargo</i>, on the other hand, might be doing something to environment variables (nothing interesting I&#39;ve seen yet). However, if the C code were to fail, it looks like you should be getting an error message from the library."}, {"owner": {"reputation": 4656, "user_id": 1787388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pSr04.png?s=128&g=1", "display_name": "shusson", "link": "https://stackoverflow.com/users/1787388/shusson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484180100, "post_id": 41602744, "comment_id": 70408663, "body": "I see, I&#39;ll remove the rust tag"}, {"owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "edited": false, "score": 0, "creation_date": 1520239323, "post_id": 41602744, "comment_id": 85217688, "body": "This relates to a Rust library or possibly Rust package manager, and understanding of Rust is basically required in solving it, so I believe [rust] tag was appropriate. Re-applied tag."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1520239406, "post_id": 41602744, "comment_id": 85217735, "body": "Are there any data files or plugin libraries that the library requires to run? Doing a cargo run and calling the executable directly might lead to different working directories."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1520239503, "post_id": 41602744, "comment_id": 85217789, "body": "Also, is it just me or is there someone going around downvoting every single Rust question? Seems to me every new Rust question I see first goes into the negative."}], "owner": {"reputation": 4656, "user_id": 1787388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pSr04.png?s=128&g=1", "display_name": "shusson", "link": "https://stackoverflow.com/users/1787388/shusson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 131, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1520239077, "creation_date": 1484177763, "last_edit_date": 1520239077, "question_id": 41602744, "link": "https://stackoverflow.com/questions/41602744/how-to-configure-arrayfire-rust-to-use-cargo-run", "title": "How to configure `arrayfire-rust` to use `cargo run`?", "body": "<p>I'm following <a href=\"https://github.com/arrayfire/arrayfire-rust#use-from-cratesio-\" rel=\"nofollow noreferrer\">the arrayfire-rust guide</a> to set up my own Rust project. I can <code>cargo build</code>, but when I <code>cargo run</code>, I get unexpected results. If I run the program directly from the shell, I get the expected results.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$cargo run\nFinished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n Running `target/debug/xxx`\n There are 0 available backends\n\n$cargo build\nFinished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n\n$./target/debug/xxx\nThere are 2 available backends\n</code></pre>\n\n<p><strong>main.rs</strong>:</p>\n\n<pre><code>extern crate arrayfire as af;\nuse af::*;\n\nfn main() {\n    println!(\"There are {:?} available backends\", get_backend_count());\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"xxx\"\nversion = \"0.1.0\"\nauthors = [\"xxx\"]\n\n[dependencies]\narrayfire = \"3.4.1\"\n</code></pre>\n\n<p>I've filed <a href=\"https://github.com/arrayfire/arrayfire-rust/issues/97\" rel=\"nofollow noreferrer\">an issue with the crate</a>, and the maintainers are investigating.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484171456, "post_id": 41601197, "comment_id": 70405465, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/30243606/155423\">stackoverflow.com/q/30243606/155423</a> ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1484171625, "post_id": 41601197, "comment_id": 70405551, "body": "Unrelated to your question; why do you use <code>.eq(</code>? I&#39;ve seen other people do the same. What&#39;s the rationale behind avoiding <code>==</code>?"}, {"owner": {"reputation": 8285, "user_id": 93345, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/79c40d2fd90802e59e9b9ee70cc84c5e?s=128&d=identicon&r=PG", "display_name": "steamer25", "link": "https://stackoverflow.com/users/93345/steamer25"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484172066, "post_id": 41601197, "comment_id": 70405748, "body": "@Shepmaster I&#39;m not sure if they&#39;re duplicates since the other question is dealing with the else block (which I don&#39;t have) and is solved by an early return."}, {"owner": {"reputation": 8285, "user_id": 93345, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/79c40d2fd90802e59e9b9ee70cc84c5e?s=128&d=identicon&r=PG", "display_name": "steamer25", "link": "https://stackoverflow.com/users/93345/steamer25"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484172241, "post_id": 41601197, "comment_id": 70405816, "body": "@Shepmaster For my part, and probably true for others as well, experience with Java has made us bit gunshy about using == for string comparison. In Java, the == operator compares the memory offset/pointer of the strings instead of a deep comparison of bytes/characters ."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1484172410, "post_id": 41601197, "comment_id": 70405898, "body": "I was afraid it was Java. It&#39;s so strange that a high level language like Java made such a mis-step with <code>==</code> while Rust, a much lower level language, favors value equality over reference equality."}, {"owner": {"reputation": 15985, "user_id": 312594, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b8b523b0f454b7aff317d8e392df69fd?s=128&d=identicon&r=PG&f=1", "display_name": "par", "link": "https://stackoverflow.com/users/312594/par"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484174244, "post_id": 41601197, "comment_id": 70406678, "body": "@Shepmaster Java didn&#39;t misstep at all. Value equality can be expensive and doesn&#39;t always mean what you think it might, particularly when inheritance gets involved. Explicit value-comparators are often better. Java also built on C which uses reference equality for the <code>==</code> operator.  Many languages do."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15985, "user_id": 312594, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b8b523b0f454b7aff317d8e392df69fd?s=128&d=identicon&r=PG&f=1", "display_name": "par", "link": "https://stackoverflow.com/users/312594/par"}, "edited": false, "score": 5, "creation_date": 1484174851, "post_id": 41601197, "comment_id": 70406893, "body": "@par this probably isn&#39;t the best venue to argue about it, but that sounds more like &quot;inheritance makes code hard to understand&quot;; I&#39;m not sure how an <code>equals</code> method is exempt from any inheritance strangeness that would affect <code>==</code>. Expensive operations that do the <i>correct thing</i> will always beat out fast operations that don&#39;t do what the programmer wants. We have also learned that you cannot just point to C as the gold standard. If that were the case, Java would not exist, much less Rust! It&#39;s tricky to say C has reference equality, as it has <i>value equality of pointers</i>, which is different."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1531277367, "last_edit_date": 1531277367, "creation_date": 1484173450, "answer_id": 41601816, "question_id": 41601197, "link": "https://stackoverflow.com/questions/41601197/is-there-a-way-to-release-a-binding-before-it-goes-out-of-scope/41601816#41601816", "title": "Is there a way to release a binding before it goes out of scope?", "body": "<p>Short answer: No.</p>\n\n<blockquote>\n  <p>I'm done with the <code>Match</code></p>\n</blockquote>\n\n<p>You may be, but the compiler doesn't know that. Specifically, lifetimes are currently bound to the lexical scope they are defined in. The feature you are looking for is called <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em></a>. It's not stable now, but it's planned to be enabled in the Rust 2018 edition.</p>\n\n<p>As an example:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n\n    let matched = &amp;s[..];\n    println!(\"{}\", matched);\n\n    s.clear();\n\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>A programmer can tell we are done with <code>matched</code> after we print it, but the compiler says that the borrow lasts until the closing <code>}</code>. The fix is to introduce a scope:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n\n    {\n        let matched = &amp;s[..];\n        println!(\"{}\", matched);\n    }\n    s.clear();\n\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Your case is more insidious, as the decision to clear the string is interwoven with the value of the borrow of the string itself. Something like this would be my first place to reach:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n\n    let do_clear;\n\n    {\n        let matched = &amp;s[..];\n        println!(\"{}\", matched);\n        do_clear = matched.contains(\"ll\");\n    }\n\n    if do_clear {\n        s.clear();\n    }\n\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>However, your specific case might be able to be transformed to avoid multiple <code>if</code> / <code>if let</code> statements:</p>\n\n<pre><code>let is_in_right_section = section_header_pattern.captures(&amp;line)\n    .and_then(|c| c.get(1))\n    .map_or(false, |m| m.as_str() == section_name);\n\nif is_in_right_section {\n    line.clear();\n    continue;\n}\n</code></pre>\n\n<p>Which wouldn't look too bad if you introduce a new type and/or method. As a bonus, there's a place for the <code>Regex</code> to live:</p>\n\n<pre><code>struct Section(Regex);\n\nimpl Section {\n    fn is(&amp;self, s: &amp;str, section: &amp;str) -&gt; bool {\n        self.0\n            .captures(s)\n            .and_then(|c| c.get(1))\n            .map_or(false, |m| m.as_str() == section)\n    }\n}\n\n// ----\n\nif section.is(&amp;line, section_name) {\n    line.clear();\n    continue;\n}\n</code></pre>\n\n<hr>\n\n<p>The original code works as-is when NLL is enabled:</p>\n\n<pre><code>#![feature(nll)]\n\nextern crate regex; // 1.0.1\n\nuse regex::Regex;\n\nfn main() {\n    let section_header_pattern = Regex::new(\".\").unwrap();\n    let section_name = \"\";\n    let mut line = String::new();\n    let mut is_in_right_section = false;\n\n    loop {\n        if let Some(m) = section_header_pattern\n            .captures(&amp;line)\n            .and_then(|c| c.get(1))\n        {\n            is_in_right_section = m.as_str().eq(section_name);\n            line.clear();\n            continue;\n        }\n\n        return; // I don't really want to loop\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 8285, "user_id": 93345, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/79c40d2fd90802e59e9b9ee70cc84c5e?s=128&d=identicon&r=PG", "display_name": "steamer25", "link": "https://stackoverflow.com/users/93345/steamer25"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 265, "favorite_count": 2, "accepted_answer_id": 41601816, "answer_count": 1, "score": 11, "last_activity_date": 1531277524, "creation_date": 1484170922, "last_edit_date": 1531277524, "question_id": 41601197, "link": "https://stackoverflow.com/questions/41601197/is-there-a-way-to-release-a-binding-before-it-goes-out-of-scope", "title": "Is there a way to release a binding before it goes out of scope?", "body": "<p>I'm trying to parse a file using regexes:</p>\n\n<pre><code>extern crate regex; // 1.0.1\n\nuse regex::Regex;\n\nfn example(\n    section_header_pattern: Regex,\n    section_name: &amp;str,\n    mut line: String,\n    mut is_in_right_section: bool,\n) {\n    loop {\n        if let Some(m) = section_header_pattern\n            .captures(&amp;line)\n            .and_then(|c| c.get(1))\n        {\n            is_in_right_section = m.as_str().eq(section_name);\n            line.clear();\n            continue;\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>...but the compiler complains because the <code>RegEx</code>'s <code>captures()</code> method has a borrow which endures for the lifetime of the match:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `line` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:17:13\n   |\n13 |             .captures(&amp;line)\n   |                        ---- immutable borrow occurs here\n...\n17 |             line.clear();\n   |             ^^^^ mutable borrow occurs here\n18 |             continue;\n19 |         }\n   |         - immutable borrow ends here\n</code></pre>\n\n<p>By the time I get to <code>line.clear();</code>, I'm done with the <code>Match</code> and would like to clear the buffer and move onto the next line in the file without further processing. Is there a good/clean/elegant/idiomatic solution or do I need to just bite the bullet and introduce a subsequent 'if' block?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484166147, "post_id": 41599921, "comment_id": 70402791, "body": "The question shows signs of poor editing. You had missing braces and the names are mismatched (<code>Logger</code>?). Please take the time to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. This shows that you have done the appropriate work ahead of time and that you respect the time of those that might want to answer your question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484166668, "post_id": 41599921, "comment_id": 70403052, "body": "Additionally, I believe your question could be reasonably broadened to &quot;how can I wrap a non-<code>Send + Sync</code> type to make it <code>Send + Sync</code>?&quot;. There shouldn&#39;t be anything special about <code>io::Write</code> or even the trait. Those are good details to include in the body of the post, however."}], "answers": [{"comments": [{"owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 0, "creation_date": 1484169799, "post_id": 41600877, "comment_id": 70404670, "body": "I don&#39;t want the inner type to be constrained to be Sync+Send"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "edited": false, "score": 0, "creation_date": 1484170373, "post_id": 41600877, "comment_id": 70404960, "body": "@user2722968 can be be constrained to Send? It will have to be if you are going to wrap it in a Mutex."}], "tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 3, "last_activity_date": 1541116847, "last_edit_date": 1541116847, "creation_date": 1484169486, "answer_id": 41600877, "question_id": 41599921, "link": "https://stackoverflow.com/questions/41599921/how-to-define-a-struct-that-is-sendsync-and-is-holding-a-iowrite-member/41600877#41600877", "title": "How to define a struct that is Send+Sync and is holding a io::Write member", "body": "<p>Basically, you just need to constrain <code>T</code> to be <code>Write + Send</code>:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::io::Write;\n\n//This is the important bit\nstruct Foobar&lt;T: Write + Send&gt; {\n    stream: Arc&lt;Mutex&lt;T&gt;&gt;,\n}\n\nimpl&lt;T: Write + Send&gt; Foobar&lt;T&gt;\n{\n    pub fn new(stream: T) -&gt; Foobar&lt;T&gt; {\n        Foobar { stream: Arc::new(Mutex::new(stream)) }\n    }\n}\n\ntrait Test: Write + Send {}\n\n//verify that Foobar is Send + Sync\nimpl&lt;T: Write + Send&gt; Test for Foobar&lt;T&gt; { }\n</code></pre>\n"}], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1294, "favorite_count": 0, "accepted_answer_id": 41600877, "answer_count": 1, "score": 2, "last_activity_date": 1541116847, "creation_date": 1484165634, "last_edit_date": 1484169693, "question_id": 41599921, "link": "https://stackoverflow.com/questions/41599921/how-to-define-a-struct-that-is-sendsync-and-is-holding-a-iowrite-member", "title": "How to define a struct that is Send+Sync and is holding a io::Write member", "body": "<p>I've a struct that needs to <code>impl</code> a given trait that itself is <code>Send + Sync</code>; I also want the struct to hold any generic type that is <code>io::Write</code> (but not necessarily <code>Send + Sync</code>). I'm completely lost on how to formulate that.</p>\n\n<p>Let's say</p>\n\n<pre><code>struct Foobar&lt;T&gt; {\n    stream: T,\n}\n\nimpl&lt;T&gt; Foobar&lt;T&gt;\n    where T: io::Write\n{\n    pub fn new(stream: T) -&gt; Foobar&lt;T&gt; {\n        Foobar { stream: stream }\n    }\n}\n</code></pre>\n\n<p>That would not be <code>Send + Sync</code> to begin with so we can (can't) do</p>\n\n<pre><code>struct Foobar&lt;T&gt; {\n    stream: Arc&lt;Mutex&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; Foobar&lt;T&gt;\n    where T: io::Write\n{\n    pub fn new(stream: T) -&gt; Foobar&lt;T&gt; {\n        Foobar { stream: Arc::new(Mutex::new(stream)) }\n    }\n}\n\nimpl&lt;T&gt; mycrate::TraitRequiringSendSync for Foobar&lt;T&gt; {\n    fn write(the_msg: &amp;str) {\n        self.stream.lock().unwrap().write(...)\n    }\n}\n</code></pre>\n\n<p>I'm completely lost on how to formulate that the inner type of <code>stream</code> needs to be <code>io::Write</code> and the overall <code>impl</code> of <code>Foobar</code>is <code>Send + Sync</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1484212217, "post_id": 41597833, "comment_id": 70419707, "body": "Note: you are ignoring the return value of <code>thread::spawn</code>, if you used it, you could query whether the thread has completed, or wait for its completion (which might take a while for an infinite loop)."}], "answers": [{"comments": [{"owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "edited": false, "score": 0, "creation_date": 1484159484, "post_id": 41598049, "comment_id": 70399074, "body": "I read the part in bold before posting this question but it wasn&#39;t that clear to me. It&#39;s clear to me now. Thx."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1617326368, "last_edit_date": 1617326368, "creation_date": 1484159077, "answer_id": 41598049, "question_id": 41597833, "link": "https://stackoverflow.com/questions/41597833/shouldnt-a-loop-spawned-in-a-thread-print-repeatedly/41598049#41598049", "title": "Shouldn&#39;t a loop spawned in a thread print repeatedly?", "body": "<blockquote>\n<p>Shouldn't <code>a</code> print repeatedly in the first case as well?</p>\n</blockquote>\n<p>No. The documentation of <a href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>thread:spawn</code></a> says (emphasis mine):</p>\n<blockquote>\n<p>The join handle will implicitly detach the child thread upon being dropped. In this case, the child thread may outlive the parent (<strong>unless the parent thread is the main thread; the whole process is terminated when the main thread finishes.</strong>) Additionally, the join handle provides a join method that can be used to join the child thread. If the child thread panics, join will return an Err containing the argument given to panic.</p>\n</blockquote>\n<p>Your entire program exits because the main thread has exited. There was never even a chance for the child thread to start, much less print anything.</p>\n<p>In the second example, you prevent the main thread from exiting by also causing that to spin forever.</p>\n<blockquote>\n<p>What happens when you <code>spawn</code> a loop?</p>\n</blockquote>\n<p>That thread will spin in the loop, <em>as long as the program executes</em>.</p>\n<hr />\n<p>Idiomatically, you don't need the extra curly braces in the <code>spawn</code>, and it's more standard to only import the <code>std::thread</code> and then call <code>thread::spawn</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    use std::thread;\n    thread::spawn(|| loop {\n        println!(&quot;a&quot;)\n    });\n}\n</code></pre>\n<p>To have the main thread wait for the child, you need to keep the <a href=\"https://doc.rust-lang.org/std/thread/struct.JoinHandle.html\" rel=\"nofollow noreferrer\"><code>JoinHandle</code></a> from <code>thread::spawn</code> and call <a href=\"https://doc.rust-lang.org/std/thread/struct.JoinHandle.html#method.join\" rel=\"nofollow noreferrer\"><code>join</code></a> on it:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    use std::thread;\n    let handle = thread::spawn(|| loop {\n        println!(&quot;a&quot;)\n    });\n    \n    handle.join().expect(&quot;The thread panicked&quot;);\n}\n</code></pre>\n"}], "owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 896, "favorite_count": 1, "accepted_answer_id": 41598049, "answer_count": 1, "score": 4, "last_activity_date": 1617326368, "creation_date": 1484158273, "last_edit_date": 1561905903, "question_id": 41597833, "link": "https://stackoverflow.com/questions/41597833/shouldnt-a-loop-spawned-in-a-thread-print-repeatedly", "title": "Shouldn&#39;t a loop spawned in a thread print repeatedly?", "body": "<p>Example code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    use std::thread::spawn;\n    spawn(|| { loop { println!(\"a\") } });\n    // `a` is never printed\n}\n</code></pre>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    use std::thread::spawn;\n    spawn(|| { loop { println!(\"a\") } });\n    loop { }\n    // `a` is printed repeatedly\n}\n</code></pre>\n\n<p><code>a</code> prints to the standard output in the second case, but the same is not true in the first case. Why is that? Shouldn't <code>a</code> print repeatedly in the first case as well?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1484156475, "post_id": 41596628, "comment_id": 70397456, "body": "The short answer is &quot;not right off the bat&quot;. You might find this question useful: <a href=\"http://stackoverflow.com/q/36416773/1233251\">How does Rust implement reflection?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484159975, "post_id": 41596628, "comment_id": 70399381, "body": "Rust uses <code>CamelCase</code> for structs, enums, and traits. You should be using <code>Foo</code>."}], "answers": [{"comments": [{"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 1, "creation_date": 1484170623, "post_id": 41597323, "comment_id": 70405085, "body": "Thank you, Matthieu. That clears things up. I think I need to change my design in general, I keep laying out my code &quot;C style&quot;. Thanks!"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1484175135, "post_id": 41597323, "comment_id": 70407011, "body": "+1 for &quot;don&#39;t do that&quot;, and I&#39;ll just point out that Rust <i>has</i> <code>enum</code>, which is a better (shorter, clearer, idiomatic and compile-time checked) way of writing all those <code>TypeId::of</code> checks."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1484206553, "post_id": 41597323, "comment_id": 70416661, "body": "@trentcl: It depends. <code>enum</code> is for closed-polymorphism whereas <code>trait</code> is for open-polymorphism... if that makes sense."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1484234952, "post_id": 41597323, "comment_id": 70435237, "body": "@MatthieuM. It makes sense. You&#39;d already mentioned traits, though, so I thought I&#39;d point out the other solution"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 27, "last_activity_date": 1573691982, "last_edit_date": 1573691982, "creation_date": 1484156446, "answer_id": 41597323, "question_id": 41596628, "link": "https://stackoverflow.com/questions/41596628/how-to-match-on-data-type-in-rust/41597323#41597323", "title": "How to match on data type in Rust?", "body": "<p><strong>Idiomatic Solution</strong></p>\n\n<p>Create a trait which constrains the parameter <code>T</code> in <code>Foo</code>, implement any specific behavior as an associated function of this trait.</p>\n\n<p>Example:</p>\n\n<pre><code>trait PrintMe {\n    fn print_me(&amp;self);\n}\n\nimpl PrintMe for String {\n    fn print_me(&amp;self) { println!(\"I am a string\"); }\n}\n\nstruct Foo&lt;T: PrintMe&gt; {\n    bar: T\n}\n\nfn main() {\n    // ...\n    x.bar.print_me();\n}\n</code></pre>\n\n<p>This is <em>principled</em> generic programming, where you declare exactly the difference of behavior of the possible generic parameters, so that there is no surprise.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28225958/155423\">Why is this match pattern unreachable when using non-literal patterns?</a></li>\n</ul>\n\n<hr>\n\n<p><strong>Exact Solution</strong></p>\n\n<p>Rust can indeed query types: each type has a unique <a href=\"https://doc.rust-lang.org/std/any/struct.TypeId.html\" rel=\"noreferrer\"><code>TypeId</code></a> associated, and you can match on <code>TypeId</code> with a series of <code>if</code> checks. It's clunky.</p>\n\n<pre><code>fn print_me&lt;T&gt;(x: &amp;Foo&lt;T&gt;) {\n    if TypeId::of::&lt;T&gt;() == TypeId::of::&lt;String&gt;() {\n        println!(\"I am a string\");\n    } else // ...\n}\n</code></pre>\n\n<p>But please... don't do that :)</p>\n"}], "owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11372, "favorite_count": 3, "accepted_answer_id": 41597323, "answer_count": 1, "score": 17, "last_activity_date": 1606382694, "creation_date": 1484154230, "last_edit_date": 1573691950, "question_id": 41596628, "link": "https://stackoverflow.com/questions/41596628/how-to-match-on-data-type-in-rust", "title": "How to match on data type in Rust?", "body": "<p>I'm trying to match on the datatype of a generic field of a struct and react accordingly. My general idea was like this (code doesn't compile):</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    bar: T,\n}\n\nfn main() {\n    let x = Foo::&lt;String&gt; {\n        bar: \"world\".to_string(),\n    };\n\n    match x.bar {\n        String =&gt; println!(\"It's a string!\"),\n        u32 =&gt; println!(\"It's a u32!\"),\n        _ =&gt; println!(\"Something else\"),\n    };\n\n    println!(\"end of program!\");\n}\n</code></pre>\n\n<p>The error message from the compiler:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unreachable pattern\n  --&gt; src/main.rs:12:9\n   |\n11 |         String =&gt; println!(\"It's a string!\"),\n   |         ------ matches any value\n12 |         u32 =&gt; println!(\"It's a u32!\"),\n   |         ^^^ unreachable pattern\n   |\n   = note: `#[warn(unreachable_patterns)]` on by default\n\nwarning: unreachable pattern\n  --&gt; src/main.rs:13:9\n   |\n11 |         String =&gt; println!(\"It's a string!\"),\n   |         ------ matches any value\n12 |         u32 =&gt; println!(\"It's a u32!\"),\n13 |         _ =&gt; println!(\"Something else\"),\n   |         ^ unreachable pattern\n\nwarning: unused variable: `String`\n  --&gt; src/main.rs:11:9\n   |\n11 |         String =&gt; println!(\"It's a string!\"),\n   |         ^^^^^^ help: consider prefixing with an underscore: `_String`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `u32`\n  --&gt; src/main.rs:12:9\n   |\n12 |         u32 =&gt; println!(\"It's a u32!\"),\n   |         ^^^ help: consider prefixing with an underscore: `_u32`\n\nwarning: variable `String` should have a snake case name\n  --&gt; src/main.rs:11:9\n   |\n11 |         String =&gt; println!(\"It's a string!\"),\n   |         ^^^^^^ help: convert the identifier to snake case: `string`\n   |\n   = note: `#[warn(non_snake_case)]` on by default\n</code></pre>\n\n<p>What I wanted was for <code>x</code> to match the first one. I'm actually not sure what I want to do can be done, but what would achieve the desired effect?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 239269, "user_id": 464709, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ab3363d257d780bd4c1f0c844b020a2?s=128&d=identicon&r=PG", "display_name": "Fr&#233;d&#233;ric Hamidi", "link": "https://stackoverflow.com/users/464709/fr%c3%a9d%c3%a9ric-hamidi"}, "edited": false, "score": 0, "creation_date": 1484130615, "post_id": 41588182, "comment_id": 70380460, "body": "<code>const</code> inside of <code>impl</code> denotes an <a href=\"https://doc.rust-lang.org/book/associated-constants.html\" rel=\"nofollow noreferrer\">associated constant</a>, which is an experimental feature, gated with <code>associated_consts</code>. You will need a nightly compiler and a <code>#![feature(associated_consts)]</code> attribute in your crate."}], "answers": [{"comments": [{"owner": {"reputation": 2726, "user_id": 3612643, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/3e18288eaaaef95535b2ba6deb069db5?s=128&d=identicon&r=PG&f=1", "display_name": "user3612643", "link": "https://stackoverflow.com/users/3612643/user3612643"}, "edited": false, "score": 0, "creation_date": 1484131168, "post_id": 41588419, "comment_id": 70380825, "body": "Okay, my concrete usecase is a bit more complex. Let&#39;s say I want to create a generic shortcut (type alias, but not new type):    trait KeyValue {     type Key;     type Value;   }    type HashMapEntry&lt;&#39;a, H: KeyValue&gt; = std::collections::hash_map::OccupiedEntry&lt;&#39;a, H::Key, H::Value&gt;;  The compiler complains with:    warning[E0122]: trait bounds are not (yet) enforced in type definitions"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2726, "user_id": 3612643, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/3e18288eaaaef95535b2ba6deb069db5?s=128&d=identicon&r=PG&f=1", "display_name": "user3612643", "link": "https://stackoverflow.com/users/3612643/user3612643"}, "edited": false, "score": 1, "creation_date": 1484133531, "post_id": 41588419, "comment_id": 70382443, "body": "@user3612643: I would encourage you to make it a full-blown question, with a MCVE which produces the error you highlight here, it will allow for more space than comments to answer."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1484130690, "creation_date": 1484130690, "answer_id": 41588419, "question_id": 41588182, "link": "https://stackoverflow.com/questions/41588182/how-can-i-define-an-associated-const-or-type-alias-in-rust/41588419#41588419", "title": "How can I define an associated const or type alias in Rust?", "body": "<p>As mentioned in the error message, associated constants (<code>const c: i32 = 42</code>) are experimental.</p>\n\n<p>This means that, unless you switch to a nightly compiler <em>and</em> enable the feature, you cannot have constants nested inside implementations or traits.</p>\n\n<p>You can, however, have constants at module scope:</p>\n\n<pre><code>const C: i32 = 42;\n</code></pre>\n\n<p>If you fix this, you will get to the next error: associated types are only allowed in <em>traits</em> and their implementation, not in \"inherent\" implementations.</p>\n\n<p>Once again, the work-around is to pull out the type alias at module scope:</p>\n\n<pre><code>type V = i32;\n</code></pre>\n\n<p>The following code compiles:</p>\n\n<pre><code>const C: i32 = 42;\ntype V = i32;\n\nstruct Foo;\n\nimpl Foo {\n    fn bar() -&gt; V { C }\n}\n</code></pre>\n\n<p>and with <code>C</code> and <code>V</code> being private (only accessible within the module) they do not leak.</p>\n"}], "owner": {"reputation": 2726, "user_id": 3612643, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/3e18288eaaaef95535b2ba6deb069db5?s=128&d=identicon&r=PG&f=1", "display_name": "user3612643", "link": "https://stackoverflow.com/users/3612643/user3612643"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 715, "favorite_count": 0, "accepted_answer_id": 41588419, "answer_count": 1, "score": 1, "last_activity_date": 1484139496, "creation_date": 1484130057, "last_edit_date": 1484139496, "question_id": 41588182, "link": "https://stackoverflow.com/questions/41588182/how-can-i-define-an-associated-const-or-type-alias-in-rust", "title": "How can I define an associated const or type alias in Rust?", "body": "<p>Basically, I just want \"shortcuts\":</p>\n\n<pre><code>impl Foo {\n    const c : i32 = 42;\n    type V = i32;\n    fn bar() -&gt; V { c }\n}\n</code></pre>\n\n<p>But the compiler complains with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: associated constants are experimental (see issue #29646)\n</code></pre>\n"}, {"tags": ["file-io", "rust"], "comments": [{"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484120639, "post_id": 41585143, "comment_id": 70374468, "body": "Right, but the error is thrown at line 31."}, {"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484120809, "post_id": 41585143, "comment_id": 70374551, "body": "after removed line 32 &amp; added comments, <a href=\"https://play.rust-lang.org/?gist=fa07e627043890122ca31fba9b31a96c&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484121576, "post_id": 41585143, "comment_id": 70374922, "body": "I included your new link in the question."}, {"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1484122338, "post_id": 41585143, "comment_id": 70375284, "body": "alright, thx :)"}], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "edited": false, "score": 0, "creation_date": 1484192850, "post_id": 41588104, "comment_id": 70411850, "body": "Thank you! I just wonder why <code>PathBuf::from(&quot;.\\todos.txt&quot;)</code>  works fine instead <code>PathBuf::from(&quot;todos.txt&quot;)</code> doesn&#39;t ? For me I think these two should be sematically same, do I missing or misunderstand anything?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "reply_to_user": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "edited": false, "score": 0, "creation_date": 1484221661, "post_id": 41588104, "comment_id": 70426093, "body": "I would agree that it makes sense to treat <code>.\\todos.txt</code> and <code>todos.txt</code> identical. But reading the current documentation at <a href=\"https://doc.rust-lang.org/std/path/\" rel=\"nofollow noreferrer\">std::path</a>, they are not. Normalization takes place, but adding a <code>&quot;.&quot;</code> is not one of them. However, this might change in the future."}, {"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "edited": false, "score": 0, "creation_date": 1484275099, "post_id": 41588104, "comment_id": 70454007, "body": "well, I guess I better stick with <code>.\\xx</code> :)"}], "tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": true, "score": 0, "last_activity_date": 1484129819, "creation_date": 1484129819, "answer_id": 41588104, "question_id": 41585143, "link": "https://stackoverflow.com/questions/41585143/cant-figure-out-a-weird-path-behavior-in-rust/41588104#41588104", "title": "Can&#39;t figure out a weird Path behavior in Rust", "body": "<p>In your example code, you test with <code>PathBuf::from(\"todos.txt\")</code>. This is a relative path, it does not include a starting <code>/</code> or <code>c:\\</code>.</p>\n\n<p>When you do <code>let parent = pf.parent();</code>, it will return <code>Some(\"\")</code>. So the parent is an empty string, not <code>Some(\".\")</code>, and also not <code>None</code>. <a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.parent\" rel=\"nofollow noreferrer\"><code>parent</code></a> will only return <code>None</code> if the path terminates in a root or prefix. In your example above, you only included the <code>None</code> part, but that will not be called.</p>\n\n<p><a href=\"https://doc.rust-lang.org/std/fs/fn.read_dir.html\" rel=\"nofollow noreferrer\"><code>read_dir</code></a> will return an error if the provided path doesn't exist. That is the case when you pass an empty string like <code>read_dir(PathBuf::from(\"\"))</code>, but it works perfectly fine if you use <code>read_dir(PathBuf::from(\".\"))</code>.</p>\n"}], "owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 193, "favorite_count": 0, "accepted_answer_id": 41588104, "answer_count": 1, "score": 0, "last_activity_date": 1484139623, "creation_date": 1484120113, "last_edit_date": 1484139623, "question_id": 41585143, "link": "https://stackoverflow.com/questions/41585143/cant-figure-out-a-weird-path-behavior-in-rust", "title": "Can&#39;t figure out a weird Path behavior in Rust", "body": "<p>I am writing a function that reads a <code>Path</code> and returns a <code>DirEntry</code> instance. There's some weird behaviour that I don't understand.</p>\n\n<pre><code>pub fn file_to_direntry&lt;T: AsRef&lt;Path&gt;&gt;(filepath: T) -&gt; Result&lt;DirEntry, Box&lt;Error&gt;&gt; {\n    match filepath.has_parent() {\n        Some(parent) =&gt; {\n            //..\n        }\n        // has no parent\n        // this line would cause an error\n        // Err(Error { repr: Os { code: 2, message: \"No such file or directory\" } })\n        None =&gt; path_to_entry(Path::new(\".\"), path),\n    }\n}\n\n\nfn path_to_entry&lt;A: AsRef&lt;Path&gt;, B: AsRef&lt;Path&gt;&gt;(path: A, filename: B) -&gt; Result&lt;DirEntry, Box&lt;Error&gt;&gt; {\n    let filename: &amp;Path = filename.as_ref();\n    let path: &amp;Path = path.as_ref();\n\n    // this line prints, \"\" \".\"\n    println!(\"{:?} {:?}\", path, PathBuf::from(\".\"));\n\n    // when I replace this line to\n    // for entry in try!(read_dir(PathBuf::from(\".\")))\n    // it works perfectly fine\n\n    for entry in try!(read_dir(path)) {\n        println!(\"{:?}\", try!(entry));\n    }\n    Err(From::from(\"no file found\"))\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=fa07e627043890122ca31fba9b31a96c&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Full code on the Rust playground</a></p>\n"}, {"tags": ["rust", "timezone", "rust-chrono"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1484119357, "creation_date": 1484119357, "answer_id": 41584937, "question_id": 41582209, "link": "https://stackoverflow.com/questions/41582209/converting-a-utc-time-via-timezones/41584937#41584937", "title": "Converting a UTC time via Timezones", "body": "<p>You can use the <code>chrono-tz</code> crate, which allows you to convert a string to a timezone with <code>chrono_tz::Tz::from_str(\"Europe/Berlin\")</code>. So all your user has to do is to supply a valid timezone string.</p>\n\n<p>You can then use</p>\n\n<pre><code>fn date_time_str&lt;Tz: chrono::TimeZone&gt;(date: DateTime&lt;Tz&gt;, user: User) -&gt; String {\n    if let Some(user) = user {\n        if let Ok(tz) = chrono_tz::Tz::from_str(user.timezone) {\n            let newdate = date.with_timezone(tz);\n            return newdate.format(\"%H:%M %d/%m/%y\").to_string();\n        }\n    }\n    date.format(\"%H:%M %d/%m/%y\").to_string()\n}\n</code></pre>\n\n<p>You cannot modify the original <code>date</code> variable, because the types won't match. The timezone is part of the type. If you move completely to <code>DateTime&lt;chrono_tz::Tz&gt;</code>, then you could modify the variable, but all your uses of <code>DateTime</code> would need to be changed.</p>\n"}], "owner": {"reputation": 507, "user_id": 3562799, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/5g55t.png?s=128&g=1", "display_name": "tl8", "link": "https://stackoverflow.com/users/3562799/tl8"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 859, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1521656506, "creation_date": 1484105253, "last_edit_date": 1521656506, "question_id": 41582209, "link": "https://stackoverflow.com/questions/41582209/converting-a-utc-time-via-timezones", "title": "Converting a UTC time via Timezones", "body": "<p>I am displaying a date on the screen using the chrono crate.</p>\n\n<p>The intention is to show the date in the users preferred time or UTC if no is set.</p>\n\n<p>I have the UTC default set up, but I am unsure on the best method to record the user's timezone and how to apply that to the current date.</p>\n\n<p>Note: <code>date</code> might not be set here so I'd prefer to modify <code>date</code> rather than use a different constructor.</p>\n\n<pre><code>let mut date: DateTime&lt;UTC&gt; = UTC::now();\n\n//Convert to the User's Timezone if present\nif let Some(user) = user {\n    //Extract the timezone\n    date.with_timezone(TimeZone::from_offset(&amp;user.timezone));\n}\n\nlet date_text = date.format(\"%H:%M %d/%m/%y\").to_string();\n</code></pre>\n\n<p>What I would like is a type to use for <code>user.timezone</code> and an example on how to set the date.</p>\n"}, {"tags": ["generics", "rust", "type-conversion", "closures", "traits"], "answers": [{"comments": [{"owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 0, "creation_date": 1484140956, "post_id": 41582037, "comment_id": 70387275, "body": "OK, that makes sense, thanks. But then why isn&#39;t the <code>as Box&lt;Fn()&gt;</code> needed in my first example using the <code>Foo</code> function?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1484145199, "post_id": 41582037, "comment_id": 70390061, "body": "The <code>into</code> version also works if you make <code>call</code> generic over any <code>T:Fn()</code>: <a href=\"https://play.rust-lang.org/?gist=85ba2009dac88693b05caa2f5373e975&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484145385, "post_id": 41582037, "comment_id": 70390169, "body": "@ChrisEmerson a good point, but it <i>is</i> different. In that case, you no longer have a <code>Box&lt;Fn()&gt;</code>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484146045, "post_id": 41582037, "comment_id": 70390637, "body": "Agreed.  I haven&#39;t got time to go through in detail now, but I think the <a href=\"https://doc.rust-lang.org/reference.html#type-coercions\" rel=\"nofollow noreferrer\">&quot;Coercion sites&quot; section</a> of the reference is probably relevant.  I think it says that function arguments can be directly coerced (the first case), and the second case doesn&#39;t match."}, {"owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1484147353, "post_id": 41582037, "comment_id": 70391547, "body": "@ChrisEmerson Thanks, I&#39;ll take a look at that section! I need dynamic rather than static dispatch because I&#39;m storing a tree; my actual type looks something like this: <code>enum Node&lt;T&gt; { Branch(HashMap&lt;String, Node&lt;T&gt;&gt;), Leaf(Bar, T) }</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1484145697, "last_edit_date": 1495541637, "creation_date": 1484103976, "answer_id": 41582037, "question_id": 41581317, "link": "https://stackoverflow.com/questions/41581317/why-doesnt-my-generic-from-implementation-accept-boxfn-values/41582037#41582037", "title": "Why doesn&#39;t my generic From implementation accept Box&lt;Fn()&gt; values?", "body": "<p>I don't know for sure, but I suspect that this won't happen because there are two conversions required, and that's too many jumps to take. Check out the error message again:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>From&lt;Box&lt;[closure@src/main.rs:15:19: 15:47]&gt;&gt;\n</code></pre>\n\n<p>Note that the error mentions a closure. In Rust, each closure is a unique, un-namable type (sometimes called a <a href=\"https://wiki.dlang.org/Voldemort_types\" rel=\"nofollow noreferrer\">Voldemort type</a>). A closure is <strong>not</strong> a <code>Fn</code>, but it does <em>implement</em> <code>Fn</code>.</p>\n\n<p>For the <code>From</code> conversion to work, the starting type would need to be a <code>Box&lt;Fn()&gt;</code>. We can see that an explicit cast to <code>Box&lt;Fn()&gt;</code> allows it to compile:</p>\n\n<pre><code>call((Box::new(|| println!(\"Hello, world!\")) as Box&lt;Fn()&gt;).into());\n</code></pre>\n\n<blockquote>\n  <p>why isn't the <code>as Box&lt;Fn()&gt;</code> needed in my first example using the <code>Foo</code> function?</p>\n</blockquote>\n\n<p>Again, I <em>suspect</em> that this works because there's only one conversion taking place. The complier knows how to convert a <code>Box&lt;closure&gt;</code> to a <code>Box&lt;Fn()&gt;</code> - it's just creating a <a href=\"https://doc.rust-lang.org/stable/book/trait-objects.html\" rel=\"nofollow noreferrer\">boxed trait object</a>.</p>\n\n<p>I look at it like a little graph. There are two edges:</p>\n\n<ol>\n<li>From <code>Box&lt;closure&gt;</code> to <code>Box&lt;Fn()&gt;</code>. This is provided by the compiler / the <code>as</code> keyword.</li>\n<li>From <code>T</code> to <code>Foo&lt;T&gt;</code>. This is provided by the <code>From</code> implementation.</li>\n</ol>\n\n<p>You can perform the first step (or have it done implicitly), or you can perform the second step via <code>.into()</code>. However, there's no step that goes from the very beginning to the very end.</p>\n\n<p>It would probably be a bad idea for the compiler to attempt to traverse the conversion graph to find a conversion path that has arbitrary number of steps. There's also the possibility for there to be many paths, leading to ambiguity.</p>\n\n<hr>\n\n<p>I'd probably write it so that the function takes a generic and does the boxing and conversion itself. This way, the client of <code>call</code> doesn't need to deal with those details:</p>\n\n<pre><code>fn call&lt;F&gt;(f: F) \n    where F: Fn(),\n{\n    let x: Foo&lt;_&gt; = Box::new(f).into();\n    // I'm assuming something interesting happens\n    // here before we unpack the variable again\n    let Foo(f) = x;\n    f()\n}\n\nfn main() {\n    call(|| println!(\"Hello, world!\"));\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/41581317/why-doesnt-my-generic-from-implementation-accept-boxfn-values/41582037?noredirect=1#comment70390061_41582037\">Chris Emerson points out</a> that you can also accept a generic type:</p>\n\n<pre><code>fn callg&lt;T:Fn()&gt;(x: Foo&lt;Box&lt;T&gt;&gt;) {\n    let Foo(f) = x;\n    f()\n}\n\nfn main() {\n    callg(Box::new(|| println!(\"Hello, world!\")).into());\n}\n</code></pre>\n\n<p>This works because we are no longer converting to <code>Box&lt;Fn()&gt;</code>, and thus only need one conversion step.</p>\n"}], "owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 197, "favorite_count": 0, "accepted_answer_id": 41582037, "answer_count": 1, "score": 1, "last_activity_date": 1484145697, "creation_date": 1484098122, "question_id": 41581317, "link": "https://stackoverflow.com/questions/41581317/why-doesnt-my-generic-from-implementation-accept-boxfn-values", "title": "Why doesn&#39;t my generic From implementation accept Box&lt;Fn()&gt; values?", "body": "<p>Consider the following simple struct, implementation of <code>From</code> for that struct, and function that takes instances of the struct containing boxed functions:</p>\n\n<pre><code>struct Foo&lt;T&gt;(T);\n\nimpl&lt;T&gt; From&lt;T&gt; for Foo&lt;T&gt; {\n    fn from(x: T) -&gt; Self {\n        Foo(x)\n    }\n}\n\nfn call(x: Foo&lt;Box&lt;Fn()&gt;&gt;) {\n    let Foo(f) = x;\n    f()\n}\n</code></pre>\n\n<p>This prints \"Hello, world!\":</p>\n\n<pre><code>call(Foo(Box::new(|| println!(\"Hello, world!\"))))\n</code></pre>\n\n<p>This fails to compile:</p>\n\n<pre><code>call(Box::new(|| println!(\"Hello, world!\")).into())\n</code></pre>\n\n<p>The following error message is given:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Foo&lt;Box&lt;std::ops::Fn()&gt;&gt;: std::convert::From&lt;Box&lt;[closure@src/main.rs:15:19: 15:47]&gt;&gt;` is not satisfied\n  --&gt; src/main.rs:15:49\n   |\n15 |     call(Box::new(|| println!(\"Hello, world!\")).into())\n   |                                                 ^^^^ the trait `std::convert::From&lt;Box&lt;[closure@src/main.rs:15:19: 15:47]&gt;&gt;` is not implemented for `Foo&lt;Box&lt;std::ops::Fn()&gt;&gt;`\n   |\n   = help: the following implementations were found:\n   = help:   &lt;Foo&lt;T&gt; as std::convert::From&lt;T&gt;&gt;\n   = note: required because of the requirements on the impl of `std::convert::Into&lt;Foo&lt;Box&lt;std::ops::Fn()&gt;&gt;&gt;` for `Box&lt;[closure@src/main.rs:15:19: 15:47]&gt;`\n</code></pre>\n\n<p>I can't see any way in which my <code>From</code> implementation is any stricter than the <code>Foo</code> constructor. Why does <code>into</code> fail where <code>Foo</code> succeeds here?</p>\n"}, {"tags": ["generics", "rust", "rayon"], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484077840, "post_id": 41576619, "comment_id": 70359170, "body": "I guess it follows the std lib, whereby <code>collect</code> delegates to a <code>FromXXX</code> iterator implementation... but, there is <i>nothing</i> here that would point me to looking at <code>FromParallelIterator</code> for the hint that helps fix the problem. Well, not in a straight forward way anyway."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484078028, "post_id": 41576619, "comment_id": 70359275, "body": "@SimonWhitehead hmm. I did neglect to add that part to my answer, but it&#39;s still a bit hollow. The error message indicates <code>Map</code> as not implementing <code>collect</code>, but really it&#39;s not really <code>Map</code> that is at fault..."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1484084160, "post_id": 41576619, "comment_id": 70362550, "body": "Ah, I can see it now with your updates. If I were not so obsessed with Rust I would certainly be very confused about the error here though and probably give up. Sometimes its very clear to see why so many people drop Rust after a short time. Thanks for the edit to make it a bit clearer!"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1484084639, "post_id": 41576619, "comment_id": 70362827, "body": "<code>Send</code> and <code>Sync</code> will both show up a lot when it comes to threading! The logic here should be simple. <code>par_iter</code> means distributing <code>&amp;T</code> to different threads. That means <code>T: Sync</code>. Map is returning <code>T</code>s by value (and passing them to potential new threads) that requires <code>T: Send</code>. <code>collect</code> requires <code>T: Send</code> the same way.  Rayon can possibly help by tightening trait bounds up front: <a href=\"https://github.com/nikomatsakis/rayon/issues/204\" rel=\"nofollow noreferrer\">github.com/nikomatsakis/rayon/issues/204</a>"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1484087121, "post_id": 41576619, "comment_id": 70364073, "body": "@bluss Only with my (almost) 12 months of Rust behind me can I grok that requirement by looking at the Rust documentation, rayons function/type signatures and their trait bounds. I&#39;m just recalling back to  9 months ago when the above error message would have completely confused me :) A nice idea to have rayon try to help in this regard - I will follow the issue!"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1484126213, "post_id": 41576619, "comment_id": 70377319, "body": "I&#39;m suggesting the Send/Sync bounds should also be understandable from principles without looking at the API"}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1505189718, "post_id": 41576619, "comment_id": 79297641, "body": "@SimonWhitehead i am a Rust dropper partly for what you mentioned (partly because API moved too fast, this was a year or two ago)... but im thinking of giving Rust another chance because more and more examples i see are relatively clean looking. I can recall being dumbfounded by bash scripts and 200 page long C++ template errors and 10,000 line build script fails in the past... somehow I got used to them. And they are ridiculously complicated. Maybe any system that has people helping each other figure stuff out on StackOverflow is hopefully heading in a good direction."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1484077973, "last_edit_date": 1495541239, "creation_date": 1484075716, "answer_id": 41576619, "question_id": 41576433, "link": "https://stackoverflow.com/questions/41576433/how-to-use-rayons-par-iter-with-a-vector-of-generics/41576619#41576619", "title": "How to use rayon&#39;s .par_iter() with a vector of generics?", "body": "<p>First, read <a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String) or Vec (&amp;Vec) as a function argument?</a>. Then...</p>\n\n<p>Review the implementors of <a href=\"https://docs.rs/rayon/0.6.0/rayon/par_iter/trait.IntoParallelIterator.html\" rel=\"nofollow noreferrer\"><code>IntoParallelIterator</code></a>:</p>\n\n<pre><code>impl&lt;'data, T: Sync + 'data&gt; IntoParallelIterator for &amp;'data [T]\n</code></pre>\n\n<p>Adding the <code>Sync</code> bound fixes that issue. Rayon works by potentially using multiple threads, but your original <code>T</code> makes no guarantees about if it is safe to share or between threads! This comes up a second time:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `collect` found for type `rayon::par_iter::map::Map&lt;rayon::par_iter::slice::SliceIter&lt;'_, T&gt;, rayon::par_iter::map::MapFn&lt;[closure@src/main.rs:7:27: 7:39]&gt;&gt;` in the current scope\n --&gt; src/main.rs:7:41\n  |\n7 |     floats.par_iter().map(|f| f.sqrt()).collect()\n  |                                         ^^^^^^^\n  |\n  = note: the method `collect` exists but the following trait bounds were not satisfied: `rayon::par_iter::map::MapFn&lt;[closure@src/main.rs:7:27: 7:39]&gt; : rayon::par_iter::map::MapOp&lt;&amp;_&gt;`, `rayon::par_iter::map::Map&lt;rayon::par_iter::slice::SliceIter&lt;'_, T&gt;, rayon::par_iter::map::MapFn&lt;[closure@src/main.rs:7:27: 7:39]&gt;&gt; : std::iter::Iterator`\n</code></pre>\n\n<p>Checking out <a href=\"https://docs.rs/rayon/0.6.0/rayon/par_iter/trait.ParallelIterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>collect</code></a>:</p>\n\n<pre><code>fn collect&lt;C&gt;(self) -&gt; C \n    where C: FromParallelIterator&lt;Self::Item&gt;\n</code></pre>\n\n<p>We can see that the target type needs to implement <a href=\"https://docs.rs/rayon/0.6.0/rayon/par_iter/from_par_iter/trait.FromParallelIterator.html\" rel=\"nofollow noreferrer\"><code>FromParallelIterator</code></a>:</p>\n\n<pre><code>impl&lt;T&gt; FromParallelIterator&lt;T&gt; for Vec&lt;T&gt; where T: Send\n</code></pre>\n\n<p>Thus, adding both bounds allows it to compile:</p>\n\n<pre><code>fn sqrts&lt;T: Float + Send + Sync&gt;(floats: &amp;[T]) -&gt; Vec&lt;T&gt;\n</code></pre>\n"}], "owner": {"reputation": 147, "user_id": 7400966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6bb4f033405681004c456114b5ce9261?s=128&d=identicon&r=PG&f=1", "display_name": "davidMcneil", "link": "https://stackoverflow.com/users/7400966/davidmcneil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3404, "favorite_count": 3, "accepted_answer_id": 41576619, "answer_count": 1, "score": 7, "last_activity_date": 1484077973, "creation_date": 1484075034, "last_edit_date": 1484075175, "question_id": 41576433, "link": "https://stackoverflow.com/questions/41576433/how-to-use-rayons-par-iter-with-a-vector-of-generics", "title": "How to use rayon&#39;s .par_iter() with a vector of generics?", "body": "<p>This is a contrived example but I believe if I can get this working I can apply it to my specific case.</p>\n\n<pre><code>extern crate num;\nextern crate rayon;\nuse rayon::prelude::*;\nuse num::Float;\n\nfn sqrts&lt;T: Float&gt;(floats: &amp;Vec&lt;T&gt;) -&gt; Vec&lt;T&gt; {\n    floats.par_iter().map(|f| f.sqrt()).collect()\n}\n\nfn main() {\n    let v = vec![1.0, 4.0, 9.0, 16.0, 25.0];\n    println!(\"{:?}\", sqrts(&amp;v));\n}\n</code></pre>\n\n<p>This errors at compile time with \"the method <code>par_iter</code> exists but the following trait bounds were not satisfied: <code>&amp;std::vec::Vec&lt;T&gt; : rayon::par_iter::IntoParallelIterator</code>\". The code works fine if I use <code>iter</code> instead of <code>par_iter</code> or if I switch to using <code>f32</code> or <code>f64</code> instead of the generic.</p>\n\n<p>What can I do to be able to use <code>par_iter</code> on a vector of generics? Is the <code>IntoParallelIterator</code> trait meant to be implemented by the end user? How would I go about doing that?</p>\n"}, {"tags": ["error-handling", "rust", "rust-result"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484074058, "post_id": 41575606, "comment_id": 70357038, "body": "See also <a href=\"http://stackoverflow.com/q/41384597/155423\">stackoverflow.com/q/41384597/155423</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "edited": false, "score": 0, "creation_date": 1484078571, "post_id": 41576212, "comment_id": 70359557, "body": "Thanks, that&#39;s exactly what I wanted!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1484074821, "last_edit_date": 1484074821, "creation_date": 1484074270, "answer_id": 41576212, "question_id": 41575606, "link": "https://stackoverflow.com/questions/41575606/whats-the-idiomatic-rust-way-to-wrap-a-non-error-function-with-result/41576212#41576212", "title": "What&#39;s the idiomatic Rust way to wrap a non-error function with Result?", "body": "<p>I would probably just use an <code>if</code>:</p>\n\n<pre><code>\"123\"\n    .parse::&lt;f64&gt;()\n    .map_err(|_| SaleError(6010, 1999))\n    .and_then(|n| {\n        if n.is_sign_positive() {\n            Ok(n)\n        } else {\n            Err(SaleError(6010, 1465))\n        }\n    });\n</code></pre>\n\n<hr>\n\n<p>If you really want it though, you can make it:</p>\n\n<pre><code>struct SaleError(i32, i32);\n\nfn main() {\n    \"123\"\n        .parse::&lt;f64&gt;()\n        .map_err(|_| SaleError(6010, 1999))\n        .wonky(SaleError(6010, 1465), |n| n.is_sign_positive());\n}\n\ntrait Wonky&lt;T, E&gt; {\n    fn wonky&lt;F&gt;(self, error: E, f: F) -&gt; Result&lt;T, E&gt;\n        where F: FnOnce(&amp;T) -&gt; bool;\n}\n\nimpl&lt;T, E&gt; Wonky&lt;T, E&gt; for Result&lt;T, E&gt; {\n    fn wonky&lt;F&gt;(self, error: E, f: F) -&gt; Result&lt;T, E&gt;\n        where F: FnOnce(&amp;T) -&gt; bool\n    {\n        match self {\n            Ok(n) =&gt; if f(&amp;n) { Ok(n) } else { Err(error) },\n            Err(e) =&gt; Err(e),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 561, "favorite_count": 0, "accepted_answer_id": 41576212, "answer_count": 1, "score": 0, "last_activity_date": 1556752530, "creation_date": 1484072067, "last_edit_date": 1556752530, "question_id": 41575606, "link": "https://stackoverflow.com/questions/41575606/whats-the-idiomatic-rust-way-to-wrap-a-non-error-function-with-result", "title": "What&#39;s the idiomatic Rust way to wrap a non-error function with Result?", "body": "<p>I have a function that parses a <code>str</code> to a number and returns it or an error</p>\n\n<pre><code>fn parse_str&lt;T: FromStr&gt;(text: &amp;str) -&gt; Result&lt;T, SaleError&gt; {\n    match text.parse::&lt;T&gt;() {\n        Ok(value) =&gt; Ok(value),\n        _ =&gt; Err(SaleError::new(6010, 1999)),\n    }\n}\n</code></pre>\n\n<p><code>SaleError</code> is my custom error struct.</p>\n\n<p>After parsing, I want to do some other checking in the result value, for example, check if the number is positive with <code>is_sign_positive()</code>, if it's not, I want to issue an <code>Err(SaleError)</code>.</p>\n\n<p>Since <code>is_sign_positive()</code> returns only a <code>bool</code>, what I've done was create this function:</p>\n\n<pre><code>fn is_positive(number: f64) -&gt; Result&lt;f64, SaleError&gt; {\n    match number.is_sign_positive() {\n        true =&gt; Ok(number),\n        false =&gt; Err(SaleError::new(6010, 1999)),\n    }\n}\n</code></pre>\n\n<p>Now I can use it like that:</p>\n\n<pre><code>let value1 = try!(parse_str::&lt;f64&gt;(\"123\").and_then(is_positive)\n                  .or(Err(SaleError::new(6010, 1465))));\nlet value2 = try!(parse_str::&lt;f64&gt;(\"321\").and_then(is_positive)\n                  .or(Err(SaleError::new(6010, 5000))));\n</code></pre>\n\n<p>This works great, but note that I want a specific <code>SaleError</code> instance for <code>value1</code> and <code>value2</code>, so I've used the <code>or()</code> function.</p>\n\n<p>Now, since I will always want a specific error instead of the one <code>is_positive</code> returns to me, is it possible to wrap <code>is_sign_positive()</code> so I can use it without the need to create the function <code>is_positive</code>.</p>\n\n<p>Something like that:</p>\n\n<pre><code>let value1 = try!(parse_str::&lt;f64&gt;(\"123\").check_if(|n| n.is_sign_positive())\n                  .or(Err(SaleError::new(6010, 1465))));\n</code></pre>\n"}, {"tags": ["rust", "variable-assignment", "optional"], "comments": [{"owner": {"reputation": 18643, "user_id": 1737909, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/058573b71875bc70b5a4e30140c94040?s=128&d=identicon&r=PG", "display_name": "Ven", "link": "https://stackoverflow.com/users/1737909/ven"}, "edited": false, "score": 3, "creation_date": 1484066360, "post_id": 41573764, "comment_id": 70352297, "body": "&quot;In one case I ran into&quot; what&#39;s that case?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484066904, "post_id": 41573764, "comment_id": 70352708, "body": "Or a duplicate of <a href=\"http://stackoverflow.com/q/30463490/155423\">stackoverflow.com/q/30463490/155423</a>; <a href=\"http://stackoverflow.com/q/30365055/155423\">stackoverflow.com/q/30365055/155423</a>; or any of the <a href=\"http://stackoverflow.com/search?q=is%3Aq+%5Brust%5D+cannot+move+out+of+borrowed\"><b>105 other</b> questions about &quot;cannot move out of borrowed content&quot;</a>. Too bad there&#39;s not enough detail present here to pick a better duplicate."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484067069, "post_id": 41573764, "comment_id": 70352823, "body": "This question isn&#39;t about borrowed context, its about using <code>let Some(var) = option_var</code> - if it&#39;s possible outside an if statement."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1484067633, "post_id": 41573764, "comment_id": 70353214, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/34953711/unwrap-inner-type-when-enum-variant-is-known\" title=\"unwrap inner type when enum variant is known\">stackoverflow.com/questions/34953711/&hellip;</a> ? And the answer is: no you can&#39;t use the syntax... luckily in the case of <code>Option</code> you have <code>unwrap()</code> at your fingertips. Why not use that?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1484067910, "post_id": 41573764, "comment_id": 70353406, "body": "@LukasKalbertodt stackoverflow.com/questions/34953711 is quite a vague question, the answer to that isn&#39;t a direct answer to this question so don&#39;t think its a duplicate. This question is direct - <i>&quot;can a &#39;let Some(var) = option_var;&#39; expression be used outside an if statement - yes or no&quot;</i>, if the answer is no, then thats all I wanted to know. I asked this because the warning doesn&#39;t explicitly state that that its not supported, which made me think if I knew the right way to write it - it could be made to work."}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1484068972, "post_id": 41573764, "comment_id": 70354125, "body": "How are you getting a warning for <code>let Some(var) = option;</code>? I receive an error for the refutable pattern."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484069961, "post_id": 41573764, "comment_id": 70354725, "body": "It gives an error, corrected the question."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1484069843, "post_id": 41574667, "comment_id": 70354655, "body": "Re: <i>&quot;but since in this case the pattern doesn&#39;t cover the other possible case, it is not a valid pattern matching context.&quot;</i> - is it possible to satisfy this constraint? or does it <i>require</i> being used with <code>if let ... etc</code> under every circumstance?"}, {"owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 0, "creation_date": 1484071628, "post_id": 41574667, "comment_id": 70355692, "body": "<i>The only contexts which the <code>let Some(x) = y</code> statement is applicable to are the <code>if let</code> expressions and <code>while let</code> loops.</i>  This is true for <code>Option</code> but not true in general. In general, the pattern passed to <code>let</code> must be irrefutable. For Option, since it has two variants, the <code>Some(_)</code> pattern is refutable, this requires testing via <code>if let</code>. If we consider an enum with only one variant, regular <code>let Variant(_) = some_enum;</code> will work fine."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 7, "last_activity_date": 1484070597, "last_edit_date": 1484070597, "creation_date": 1484069026, "answer_id": 41574667, "question_id": 41573764, "link": "https://stackoverflow.com/questions/41573764/can-the-let-somevar-option-syntax-be-used-in-a-situation-where-its-known/41574667#41574667", "title": "Can the `let Some(var) = option;` syntax be used in a situation where it&#39;s known that it&#39;s not `None`?", "body": "<p>Given the following case:</p>\n\n<pre><code>fn main() {\n    let foo = Some(1);\n    let Some(bar) = foo;\n}\n</code></pre>\n\n<blockquote>\n  <p>error[E0005]: refutable pattern in local binding: <code>None</code> not covered</p>\n</blockquote>\n\n<p><code>let Some(x) = y</code> introduces a pattern; <code>let</code> and <code>match</code> statements and function arguments are pattern-matching contexts, but since in this case the pattern doesn't cover the other possible case, it is not a valid pattern matching context.</p>\n\n<p>The only contexts which the <code>let Some(x) = y</code> statement is applicable to are the <a href=\"https://doc.rust-lang.org/reference.html#if-let-expressions\" rel=\"nofollow noreferrer\"><code>if let</code></a> expressions and <a href=\"https://doc.rust-lang.org/reference.html#while-let-loops\" rel=\"nofollow noreferrer\"><code>while let</code></a> loops.</p>\n\n<p>If you are sure (e.g. with an earlier <code>assert!()</code> or if it is introduced \"by hand\") that a <code>None</code> is not possible, you can just use <code>unwrap()</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1691, "user_id": 710895, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/4074211a059075db95a4f42dcdbab5c3?s=128&d=identicon&r=PG", "display_name": "Tanin", "link": "https://stackoverflow.com/users/710895/tanin"}, "is_accepted": false, "score": 3, "last_activity_date": 1570225554, "creation_date": 1570225554, "answer_id": 58243493, "question_id": 41573764, "link": "https://stackoverflow.com/questions/41573764/can-the-let-somevar-option-syntax-be-used-in-a-situation-where-its-known/58243493#58243493", "title": "Can the `let Some(var) = option;` syntax be used in a situation where it&#39;s known that it&#39;s not `None`?", "body": "<p>I've just encountered a similar problem with enum like:</p>\n\n<p><code>let SomeEnum::First(first) = item;</code></p>\n\n<p>I know <code>item</code> is <code>SomeEnum::First</code>. But Rust won't let me compile.</p>\n\n<p>One way to bypass this problem is to use a macro like this:</p>\n\n<pre><code>    macro_rules! unwrap {\n        ($enum:path, $expr:expr) =&gt; {{\n            if let $enum(item) = $expr {\n                item\n            } else {\n                panic!()\n            }\n        }};\n    }\n</code></pre>\n\n<p>And you can invoke <code>unwrap!</code> like this:</p>\n\n<p><code>let first = unwrap!(SomeEnum::First, item);</code></p>\n\n<p>PS. I'm using this in my tests. It helps shorten the tests.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1519, "favorite_count": 0, "accepted_answer_id": 41574667, "answer_count": 2, "score": 1, "last_activity_date": 1570225554, "creation_date": 1484066228, "last_edit_date": 1484070444, "question_id": 41573764, "link": "https://stackoverflow.com/questions/41573764/can-the-let-somevar-option-syntax-be-used-in-a-situation-where-its-known", "title": "Can the `let Some(var) = option;` syntax be used in a situation where it&#39;s known that it&#39;s not `None`?", "body": "<p>When an option variable is known to be non-<code>None</code>, its normally fine to write:</p>\n\n<pre><code>let var = option_var.unwrap();\n</code></pre>\n\n<p>In one case I ran into, this caused an error about moving out of borrowed context.</p>\n\n<pre><code>if let Some(var) = option_var { ... }\n</code></pre>\n\n<p><em>(Handy since it allows <code>Some(ref mut var) = option_var</code> too).</em></p>\n\n<p>This works, however in this case I don't want this to be an <code>if</code> statement.\nWriting <code>let Some(var) = option_var;</code> fails with the error \"pattern <code>None</code> not covered\".</p>\n\n<p>To be clear <strong>this question isn't about borrowed context</strong>.</p>\n\n<p>Can the <code>let Some(var) = option;</code> syntax be used in a situation where it's known that it's not <code>None</code>? Resolving the \"Pattern <code>None</code> not covered\" warning? Or is this simply not supported outside an <code>if</code> statement?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 5, "creation_date": 1484057810, "post_id": 41570875, "comment_id": 70346306, "body": "Your question is answered in the linked thread. But I would write your code as: <code>s.iter().filter(|&amp;e| e == c).count()</code> :)"}], "owner": {"reputation": 2051, "user_id": 997768, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/8ef9c79e41a6a0b2e1e14a29c9ec55e9?s=128&d=identicon&r=PG", "display_name": "matthias", "link": "https://stackoverflow.com/users/997768/matthias"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 37, "favorite_count": 0, "closed_date": 1484057740, "answer_count": 0, "score": 1, "last_activity_date": 1484057685, "creation_date": 1484057522, "last_edit_date": 1484057685, "question_id": 41570875, "link": "https://stackoverflow.com/questions/41570875/is-it-impossible-to-match-a-value-outside-a-folds-closure", "closed_reason": "Duplicate", "title": "Is it impossible to match a value outside a fold&#39;s closure?", "body": "<p>I have these variables and I want to count how many times <code>c</code> appears in <code>s</code>.</p>\n\n<pre><code>let c = 2;\nlet s = vec![1, 2, 5, 2, 4, 2, 7];\n</code></pre>\n\n<p>Folding with a closure that uses an <code>if</code> expression compiles and works fine:</p>\n\n<pre><code>let r1 = s.iter().fold(0, |a, &amp;x| a + if x == c { 1 } else { 0 });\n</code></pre>\n\n<p>However, if I want to use a <code>match</code> like</p>\n\n<pre><code>let r2 = s.iter().fold(0, |a, &amp;x| a + match x { c =&gt; 1, _ =&gt; 0 });\n</code></pre>\n\n<p>the compiler complains with an unreachable pattern error message:</p>\n\n<pre><code>22 |     let r2 = s.iter().fold(0, |a, &amp;x| a + match x { c =&gt; 1, _ =&gt; 0 });\n   |                                                                 ^ this is an unreachable pattern\n</code></pre>\n\n<p>Is it really impossible to do it this way?</p>\n"}, {"tags": ["error-handling", "functional-programming", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1484053520, "post_id": 41569472, "comment_id": 70343175, "body": "Amusingly, I have a <a href=\"https://github.com/rust-lang/rust/pull/38580\" rel=\"nofollow noreferrer\">PR to add that support directly to <code>Result</code></a>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1484055136, "last_edit_date": 1484055136, "creation_date": 1484054398, "answer_id": 41569840, "question_id": 41569472, "link": "https://stackoverflow.com/questions/41569472/how-can-i-use-fold-with-a-result-return-value/41569840#41569840", "title": "How can I use fold with a Result return value?", "body": "<p>There's no need to guess, the error message tells you. I've reorganized it to make it more obvious:</p>\n\n<pre><code>actual:   for&lt;'r, 'r&gt; std::ops::FnMut&lt;(f64, (&amp;'r str, &amp;'r str))&gt;\nrequired:             std::ops::FnMut&lt;({float}, (&amp;&amp;str, &amp;&amp;str))&gt;\n</code></pre>\n\n<p>It also says <code>(expected &amp;str, found str)</code>. This is because you have a slice of string slices (<code>&amp;[&amp;str]</code>). The iterator of a slice returns references to each element, so the value is of type <code>&amp;&amp;str</code>. The function accepts a <code>&amp;str</code>, so that's a mismatch.</p>\n\n<p>On the flip side, the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold\" rel=\"nofollow noreferrer\">documentation for <code>fold</code></a> shows what it expects:</p>\n\n<pre><code>fn fold&lt;B, F&gt;(self, init: B, f: F) -&gt; B \n    where F: FnMut(B, Self::Item) -&gt; B\n</code></pre>\n\n<p>In words: <code>fold</code> takes an iterator by value (<code>self</code>), an initial value of some type (<code>init: B</code>), and a function <code>(f: F</code>). The function takes that type, an iterator value, and returns the type (<code>FnMut(B, Self::Item) -&gt; B</code>).</p>\n\n<p>Working backwards, you want to return a <code>Result</code>, so <code>B</code> must be fixed to that. That means your accumulator must be a <code>Result</code>, presumably you want an <code>Ok</code>, otherwise we will have failed from the start. Let's do the direct implementation of that:</p>\n\n<pre><code>fn calculate_result() -&gt; Result&lt;f64, SaleError&gt; {\n    let q_coms = [\"1\", \"2\", \"3\"];\n    let v_un_coms = [\"1\", \"2\", \"3\"];\n    let pairs = q_coms.iter().zip(v_un_coms.iter());\n    pairs.fold(Ok(0.0), |acc, (a, b)| {\n        match acc {\n            Ok(old) =&gt; mult_and_sum(old, (a, b)),\n            other =&gt; other,\n        }\n    })\n}\n</code></pre>\n\n<p>Which can be simplified with <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then\" rel=\"nofollow noreferrer\"><code>and_then</code></a></p>\n\n<pre><code>pairs.fold(Ok(0.0), |acc, (a, b)| \n    acc.and_then(|old| mult_and_sum(old, (a, b)))\n)\n</code></pre>\n\n<p>And then <em>maybe</em> a bit smaller as:</p>\n\n<pre><code>let pairs = q_coms.iter().cloned().zip(v_un_coms.iter().cloned());\npairs.fold(Ok(0.0), |acc, i| acc.and_then(|old| mult_and_sum(old, i)))\n</code></pre>\n\n<p>We use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow noreferrer\"><code>cloned</code></a> to convert the <code>&amp;&amp;str</code> to a <code>&amp;str</code>, but you could also change the function to accept a <code>&amp;&amp;str</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1484054522, "creation_date": 1484054522, "answer_id": 41569876, "question_id": 41569472, "link": "https://stackoverflow.com/questions/41569472/how-can-i-use-fold-with-a-result-return-value/41569876#41569876", "title": "How can I use fold with a Result return value?", "body": "<blockquote>\n  <p>Since the <code>test</code> function can fail, how can I use fold with a <code>Result</code> return value so if it fails, [if one element is an <code>Err</code>]?</p>\n</blockquote>\n\n<p>Your accumulator (the thing that is \"changed\" in each iteration) just needs to be a <code>Result</code> as well! Look at this code:</p>\n\n<pre><code>let q_coms = [\"1\", \"2\", \"3\"];\nlet v_un_coms = [\"1\", \"2\", \"3\"];\n\nq_coms.iter()\n    // We don't need to call `iter()` on `v_un_coms`, because `zip()`\n    // takes an argument which implements `IntoIterator`\n    .zip(&amp;v_un_coms)\n\n    // As you can see: the starting value is `Ok(0.0)` to say: so far, \n    // there was no error.\n    .fold(Ok(0.0), |acc, (a, b)| {\n        // The `and_then()` method calls the given closure when the `acc`\n        // (the outer one) is `Ok`. The inner `acc` represents the `Ok` \n        // value. The closure will then return another `Result`.\n        acc.and_then(|acc| {\n            // More fun with `and_then()` and `map()`. Read docs for more\n            // information.\n            test::&lt;f64&gt;(a)\n                .and_then(|a| test::&lt;f64&gt;(b).map(|b| a * b))\n                .map(|new_product| acc + new_product)\n        })\n    })\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=c0ca03e12a383cad1ce935f842d15d79&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Try it on playground</a>)</p>\n"}], "owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "accepted_answer_id": 41569840, "answer_count": 2, "score": 1, "last_activity_date": 1484055136, "creation_date": 1484053279, "last_edit_date": 1484054508, "question_id": 41569472, "link": "https://stackoverflow.com/questions/41569472/how-can-i-use-fold-with-a-result-return-value", "title": "How can I use fold with a Result return value?", "body": "<p>I have a function:</p>\n\n<pre><code>fn test&lt;T: FromStr&gt;(text: &amp;str) -&gt; Result&lt;T, SaleError&gt;\n</code></pre>\n\n<p><code>SaleError</code> is my custom error struct in this case.</p>\n\n<p>I have 2 arrays that I want to multiply the same position values and sum the result:</p>\n\n<pre><code>fn calculate_result() -&gt; Result&lt;f64, SaleError&gt; {\n    let q_coms = [\"1\", \"2\", \"3\"];\n    let v_un_coms = [\"1\", \"2\", \"3\"];\n    Ok(try!(q_coms.iter().zip(v_un_coms.iter()).fold(0.0, mult_and_sum)))\n}\n</code></pre>\n\n<p>The function tries to zip both arrays and than tries to call <code>fold</code> on the <code>mult_and_sum</code> function:</p>\n\n<pre><code>fn mult_and_sum(sum: f64, (q_com, v_un_com): (&amp;str, &amp;str)) -&gt; Result&lt;f64, SaleError&gt; {\n    Ok(sum + try!(test::&lt;f64&gt;(q_com)) * try!(test::&lt;f64&gt;(v_un_com)))\n}\n</code></pre>\n\n<p>The problem, as far as I can understand, is that <code>fold</code> expects a function with the signature</p>\n\n<pre><code>fn mult_and_sum(sum: f64, (q_com, v_un_com): (&amp;str, &amp;str)) -&gt; f64\n</code></pre>\n\n<p>Since the <code>test</code> function can fail, how can I use <code>fold</code> with a <code>Result</code> return value so if it fails, <code>calculate_result</code> will return <code>Err(SaleError)</code>?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1484047982, "post_id": 41567761, "comment_id": 70339615, "body": "Have you read the <a href=\"https://doc.rust-lang.org/book/traits.html\" rel=\"nofollow noreferrer\">Traits chapter in the Rust book</a>? It explains the basics and should help you solve your problem."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 4, "last_activity_date": 1484048557, "creation_date": 1484048557, "answer_id": 41567994, "question_id": 41567761, "link": "https://stackoverflow.com/questions/41567761/generic-function-to-parse-numbers-fails-with-fromstr-is-not-implemented/41567994#41567994", "title": "Generic function to parse numbers fails with &quot;FromStr is not implemented&quot;", "body": "<p>When you declare a generic type parameter <code>T</code>, you don't know anything about that type. It could be <code>i32</code>, <code>String</code>, <code>()</code> or <code>PinkElephant</code>; only two of those can be parsed from a string.</p>\n\n<p>The way to restrict types in Rust is by <em>trait bounds</em>: we explicitly request a specific behavior from the type. Like \"this type can be any type but I at least want the possibility to clone one instance of this type\" (this would be the <code>Clone</code> trait). You can (and should!) read more about the topic of traits <a href=\"https://doc.rust-lang.org/book/traits.html\" rel=\"nofollow noreferrer\">in the dedicated chapter in the Rust book</a>.</p>\n\n<p>So what feature do you expect from your type <code>T</code>? You want to create an instance of <code>T</code> from a string by using <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow noreferrer\"><code>str::parse()</code></a>. The function signature of <code>parse()</code> is:</p>\n\n<pre><code>fn parse&lt;F&gt;(&amp;self) -&gt; Result&lt;F, F::Err&gt; \n    where F: FromStr\n</code></pre>\n\n<p>It also takes this generic parameter <code>F</code> and bounds it with the trait <code>FromStr</code>. Thus, in order to use <code>parse()</code>, <em>your</em> type parameter <code>T</code> also needs to implement <code>FromStr</code>. Your function could look like this:</p>\n\n<pre><code>use std::str::FromStr;\n\nfn test&lt;T: FromStr&gt;(text: &amp;str) -&gt; T {\n    text.parse::&lt;T&gt;().expect(\"string was invalid!\")\n}\n</code></pre>\n\n<p>What is this <code>expect()</code> you ask? Well... we are touching another topic here: error handling. There is also a <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">chapter on that topic in the book</a>, which you should read. In short: you need to somehow handle the case that the string was invalid (like <code>\"peter\"</code> when you were trying to parse an integer). <code>expect()</code> is probably the wrong way here: it just panics (aborts the thread) when the parsing did not succeed.</p>\n\n<p>Also remember that there is a compiler error index, in which you can read more about a specific error. <a href=\"https://doc.rust-lang.org/error-index.html#E0277\" rel=\"nofollow noreferrer\">Here is the entry</a> for your error E0277.</p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 8, "last_activity_date": 1484048638, "creation_date": 1484048638, "answer_id": 41568028, "question_id": 41567761, "link": "https://stackoverflow.com/questions/41567761/generic-function-to-parse-numbers-fails-with-fromstr-is-not-implemented/41568028#41568028", "title": "Generic function to parse numbers fails with &quot;FromStr is not implemented&quot;", "body": "<p>Like the error message states, <code>T</code> needs to implement <code>core::str::FromStr</code> in order to be applicable for the <code>parse</code> function. The type signature of <code>parse</code> is:</p>\n\n<pre><code>fn parse&lt;F&gt;(&amp;self) -&gt; Result&lt;F, F::Err&gt; where F: FromStr\n</code></pre>\n\n<p>Which limits the sort of <code>F</code> (or, in your case <code>T</code>) you can use to those implementing <code>FromStr</code>. Your other problem is the type returned by <code>test</code>; it should be the same as the one of <code>parse</code> - a <code>Result</code>.</p>\n\n<p>When you fix those issues, your function will work:</p>\n\n<pre><code>use std::str::FromStr;\n\nfn test&lt;T: FromStr&gt;(text: &amp;str) -&gt; Result&lt;T, T::Err&gt; {\n    text.parse::&lt;T&gt;()\n}\n\nfn main() {\n    println!(\"{:?}\", test::&lt;u64&gt;(\"2313\"));\n}\n</code></pre>\n\n<blockquote>\n  <p>Ok(2313)</p>\n</blockquote>\n"}], "owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2112, "favorite_count": 0, "accepted_answer_id": 41568028, "answer_count": 2, "score": 0, "last_activity_date": 1484054705, "creation_date": 1484047827, "last_edit_date": 1484054705, "question_id": 41567761, "link": "https://stackoverflow.com/questions/41567761/generic-function-to-parse-numbers-fails-with-fromstr-is-not-implemented", "title": "Generic function to parse numbers fails with &quot;FromStr is not implemented&quot;", "body": "<p>I have this generic function in my Rust code:</p>\n\n<pre><code>fn test&lt;T&gt;(text: &amp;str) -&gt; T {\n    text.parse::&lt;T&gt;()\n}\n</code></pre>\n\n<p>The idea is that the caller would do something like</p>\n\n<pre><code>test::&lt;u64&gt;(\"2313\");\n</code></pre>\n\n<p>But the compilation fails with this message</p>\n\n<pre><code>error: the trait `core::str::FromStr` is not implemented for the type `T` [E0277]\n</code></pre>\n\n<p>I just started learning Rust yesterday, so this is probably a very basic question that I've failed to find the answer to.</p>\n"}, {"tags": ["multithreading", "rust", "raii"], "comments": [{"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1484087799, "post_id": 41560442, "comment_id": 70364380, "body": "I&#39;ve raise this as an issue with the rust compiler <a href=\"https://github.com/rust-lang/rfcs/issues/1850\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1850</a> after identifying that CPU pipelining, etc. were not the culprits."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1484102879, "post_id": 41560442, "comment_id": 70368448, "body": "Answer there is to never put secret key material on the stack because anything on the stack gets copied around."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1484123520, "post_id": 41560442, "comment_id": 70375888, "body": "maybe add a <a href=\"https://doc.rust-lang.org/std/sync/atomic/fn.fence.html\" rel=\"nofollow noreferrer\">fence</a>. AIUI that should prevent reordering."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1484160073, "post_id": 41560442, "comment_id": 70399444, "body": "I tried that, not the problem here.  I should add a correct answer"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484050743, "post_id": 41563811, "comment_id": 70341266, "body": "The presented code <b>does</b> use volatile writes though."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484050786, "post_id": 41563811, "comment_id": 70341299, "body": "Yes, which is why I say that the OP is going out of its way to convince the compiler that there are side effects."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484051596, "post_id": 41563811, "comment_id": 70341864, "body": "@Shepmaster: What do you mean &quot;fail&quot;, I don&#39;t see any failure related to the use of volatile in the OP&#39;s question, I only see the non-volatile cases failing (because dead-writes)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484052648, "post_id": 41563811, "comment_id": 70342527, "body": "Maybe I&#39;m still asleep? OP says &quot;This test fails if I use ::std::mem::drop(s)&quot;. The <code>Drop</code> implementation uses volatile writes either way, but <i>the way that drop is invoked</i> changes behavior."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1484053284, "post_id": 41563811, "comment_id": 70342975, "body": "@Shepmaster: Ah! I&#39;m the one asleep. I thought the OP meant using <code>drop</code> without a special <code>Drop</code> implementation. Indeed, I can reproduce the issue replacing the <code>drop_in_place</code> intrinsics by <code>mem::drop</code> in the macro. Which is interesting, as it happens even in Debug mode, and NOT using <code>mem::drop</code> causes everything to work. There might be some undefined behavior at play here, since the OP is using a pointer to &quot;moved&quot; memory..."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1484060586, "post_id": 41563811, "comment_id": 70348332, "body": "I donno if Rust&#39;s <code>Mutex</code> is truly opaque but the long running computation certainly won&#39;t be opaque.  It&#39;s possible the CPU&#39;s pipelining caused this particular one."}, {"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1484061074, "post_id": 41563811, "comment_id": 70348657, "body": "I&#39;ll try this with a <code>std::thread::sleep</code> and/or some heavy computation to see if maybe it&#39;s just the CPU."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1484035034, "creation_date": 1484035034, "answer_id": 41563811, "question_id": 41560442, "link": "https://stackoverflow.com/questions/41560442/is-there-any-safe-way-to-ensure-an-arbitrary-drop-happens-before-some-expensive/41563811#41563811", "title": "Is there any safe way to ensure an arbitrary drop happens before some expensive computation?", "body": "<p><strong>Yes</strong>: side effects.</p>\n\n<p>Optimizers in general, and LLVM in particular, operate under the as-if rule: you build a program which has a specific observable behavior, and the optimizer is given free reign to produce whatever binary it wants as long as it has the very same observable behavior.</p>\n\n<p>Note that the burden of proof is on the compiler. That is, when calling an opaque function (defined in another library, for example) the compiler <em>has</em> to assume it may have side effects. Furthermore, side effects cannot be re-ordered, as this could change the observable behavior.</p>\n\n<p>In the case of <code>Mutex</code>, for example, acquiring and releasing the <code>Mutex</code> is generally opaque for the compiler (it requires an OS call), so it is seen as a side effect. I would expect compilers not to fiddle with those.</p>\n\n<p>On the other hand, your <code>Secret</code> is a tricky case: most of the time there is no side-effect in dropping the secret (zeroing out to-be-released memory is a dead-write, to be optimized out), which is why you need to go out of your way to ensure it occurs... by convincing the compiler that there are side effects using a <code>volatile</code> write.</p>\n"}, {"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 4, "last_activity_date": 1484160546, "creation_date": 1484160546, "answer_id": 41598474, "question_id": 41560442, "link": "https://stackoverflow.com/questions/41560442/is-there-any-safe-way-to-ensure-an-arbitrary-drop-happens-before-some-expensive/41598474#41598474", "title": "Is there any safe way to ensure an arbitrary drop happens before some expensive computation?", "body": "<p>Answer from <a href=\"https://github.com/rust-lang/rfcs/issues/1850\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rfcs/issues/1850</a> : </p>\n\n<p>In debug mode, any call to <code>::std::mem::drop(s)</code> physically moves <code>s</code> on the stack, so <code>p</code> points to an old copy that does not get erased.  And <code>unsafe { ::std::intrinsics::drop_in_place(&amp;mut s); }</code> works because it does not move <code>s</code>.</p>\n\n<p>In general, there is no good way to either prevent LLVM from moving values around on the stack, or else to zero after moving them, so you must never put cryptographically sensitive data on the stack.  Instead you must <code>Box</code> any sensitive data, like say</p>\n\n<pre><code>#[derive(Debug, Default)]\npub struct AnotherSecret(Box&lt;[u8; 32]&gt;);\n\nimpl Drop for AnotherSecret {\n    fn drop(&amp;mut self) {\n        *self.0 = [0u8; 32];\n    }\n}\n</code></pre>\n\n<p>There should be no problem with <code>Mutex</code> or <code>RwLock</code> because they can safely leave residue on the stack when they are <code>drop</code>ed.</p>\n"}], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1484160546, "creation_date": 1484017284, "last_edit_date": 1484017507, "question_id": 41560442, "link": "https://stackoverflow.com/questions/41560442/is-there-any-safe-way-to-ensure-an-arbitrary-drop-happens-before-some-expensive", "title": "Is there any safe way to ensure an arbitrary drop happens before some expensive computation?", "body": "<p>I've found that <code>mem::drop</code> does not necessary run near where it gets called, which likely results in <code>Mutex</code> or <code>RwLock</code> guards being held during expensive computations.  How can I control when <code>drop</code> gets called?</p>\n\n<p>As a simple example, I've made the following test for a zeroing drop of cryptographic material work by using <code>unsafe { ::std::intrinsics::drop_in_place(&amp;mut s); }</code> instead of simply <code>::std::mem::drop(s)</code>.</p>\n\n<pre><code>#[derive(Debug, Default)]\npub struct Secret&lt;T&gt;(pub T);\n\nimpl&lt;T&gt; Drop for Secret&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        unsafe { ::std::intrinsics::volatile_set_memory::&lt;Secret&lt;T&gt;&gt;(self, 0, 1); }\n    }\n}\n\n#[derive(Debug, Default)]\npub struct AnotherSecret(pub [u8; 32]);\n\nimpl Drop for AnotherSecret {\n    fn drop(&amp;mut self) {\n        unsafe { ::std::ptr::write_volatile::&lt;$t&gt;(self, AnotherSecret([0u8; 32])); }\n        assert_eq!(self.0,[0u8; 32]);\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    macro_rules! zeroing_drop_test {\n        ($n:path) =&gt; {\n            let p : *const $n;\n            {\n                let mut s = $n([3u8; 32]);  p = &amp;s;  \n                unsafe { ::std::intrinsics::drop_in_place(&amp;mut s); }  \n            }\n            unsafe { assert_eq!((*p).0,[0u8; 32]); }\n        }\n    }\n    #[test]\n    fn zeroing_drops() {\n        zeroing_drop_test!(super::Secret&lt;[u8; 32]&gt;);\n        zeroing_drop_test!(super::AnotherSecret);\n    }\n}\n</code></pre>\n\n<p>This test fails if I use <code>::std::mem::drop(s)</code> or even </p>\n\n<pre><code>#[inline(never)]\npub fn drop_now&lt;T&gt;(_x: T) { }\n</code></pre>\n\n<p>It's obviously fine to use <code>drop_in_place</code> for a test that a buffer gets zeroed, but I'd worry that calling <code>drop_in_place</code> on a <code>Mutex</code> or <code>RwLock</code> guard might result in use after free.  </p>\n\n<p>These two guards could maybe be handled with this approach :</p>\n\n<pre><code>#[inline(never)]\npub fn drop_now&lt;T&gt;(t: mut T) {\n    unsafe { ::std::intrinsics::drop_in_place(&amp;mut t); }\n    unsafe { ::std::intrinsics::volatile_set_memory::&lt;Secret&lt;T&gt;&gt;(&amp;t, 0, 1); }\n}\n</code></pre>\n"}, {"tags": ["arrays", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "edited": false, "score": 1, "creation_date": 1484014351, "post_id": 41558133, "comment_id": 70325142, "body": "This is the same thing I came up with. Benchmark shows it&#39;s 1.7x faster."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1484002681, "last_edit_date": 1484002681, "creation_date": 1484001343, "answer_id": 41558133, "question_id": 41557604, "link": "https://stackoverflow.com/questions/41557604/whats-an-efficient-way-to-transform-a-two-dimensional-array-of-labels-to-a-map/41558133#41558133", "title": "What&#39;s an efficient way to transform a two dimensional array of labels to a map from label to coordinates?", "body": "<p>Use the <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\"><code>entry</code></a> API:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let p = [['I', 'P', 'P', 'Y', 'Y', 'Y', 'Y', 'V', 'V', 'V'],\n             ['I', 'P', 'P', 'X', 'Y', 'L', 'L', 'L', 'L', 'V'],\n             ['I', 'P', 'X', 'X', 'X', 'F', 'Z', 'Z', 'L', 'V'],\n             ['I', 'T', 'W', 'X', 'F', 'F', 'F', 'Z', 'U', 'U'],\n             ['I', 'T', 'W', 'W', 'N', 'N', 'F', 'Z', 'Z', 'U'],\n             ['T', 'T', 'T', 'W', 'W', 'N', 'N', 'N', 'U', 'U']];\n\n    let mut pieces = HashMap::new();\n    for (n0, j0) in p.iter().enumerate() {\n        for (n1, j1) in j0.iter().enumerate() {\n            pieces.entry(j1).or_insert_with(Vec::new).push((n0, n1));\n        }\n    }\n\n    println!(\"{:?}\", pieces);\n}\n</code></pre>\n\n<p>Efficient: A single pass through the data and a single hash lookup per item. </p>\n\n<p>Simple: beauty is in the eye of the beholder. </p>\n"}], "owner": {"reputation": 1369, "user_id": 509928, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/57d816a396798416d079c92adbabdbf3?s=128&d=identicon&r=PG", "display_name": "Dave Compton", "link": "https://stackoverflow.com/users/509928/dave-compton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 41558133, "answer_count": 1, "score": 1, "last_activity_date": 1484014507, "creation_date": 1483998772, "last_edit_date": 1484014507, "question_id": 41557604, "link": "https://stackoverflow.com/questions/41557604/whats-an-efficient-way-to-transform-a-two-dimensional-array-of-labels-to-a-map", "title": "What&#39;s an efficient way to transform a two dimensional array of labels to a map from label to coordinates?", "body": "<p>The following code works but does multiple passes over the entire array, which I would like to avoid.  Another alternative would have been to sort the <code>named_coords</code> array by name and then gather the <code>pieces</code> while iterating through the sorted array, but I didn't find a clean way to make that work.  Ideally the answer would use standard adapters and such to transform the collection as a whole.</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let p = [ ['I', 'P', 'P', 'Y', 'Y', 'Y', 'Y', 'V', 'V', 'V']\n            , ['I', 'P', 'P', 'X', 'Y', 'L', 'L', 'L', 'L', 'V']\n            , ['I', 'P', 'X', 'X', 'X', 'F', 'Z', 'Z', 'L', 'V']\n            , ['I', 'T', 'W', 'X', 'F', 'F', 'F', 'Z', 'U', 'U']\n            , ['I', 'T', 'W', 'W', 'N', 'N', 'F', 'Z', 'Z', 'U']\n            , ['T', 'T', 'T', 'W', 'W', 'N', 'N', 'N', 'U', 'U']\n            ];\n\n    // Gather named coordinates into a Vec\n    let mut named_coords = Vec::new();\n\n    for (n0, j0) in p.iter().enumerate() {\n        for (n1, j1) in j0.iter().enumerate() {\n            named_coords.push(((n0, n1), *j1));\n        }\n    }\n\n    // Transform the named coordinates into Vector of names.\n    let mut names = named_coords.iter().map(|x| x.1).collect::&lt;Vec&lt;_&gt;&gt;();\n    names.sort();\n    names.dedup();\n\n    // Filter the named coordinates by name and collect results.\n    // Inefficient - iterates over entire named_coords vector multiple times.\n    let mut pieces = HashMap::new();\n    for name in names {\n        pieces.insert(name, named_coords.iter().filter(|&amp;p| p.1 == name).map(|p| p.0).collect::&lt;Vec&lt;_&gt;&gt;());\n    }\n\n    // Print out results.\n    for n in pieces.iter() {\n        for coord in n.1.iter() {\n            println!(\"{} {} {}\", n.0, coord.0, coord.1);\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1483974861, "post_id": 41551036, "comment_id": 70307180, "body": "In my case, I want to run tests against some web-based API, and I need to get a login token to be used by each test (which in turn will be used by each API call)."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1483977778, "post_id": 41551193, "comment_id": 70309138, "body": "Note: I confirm <code>Drop</code> is not called for <code>lazy_static</code> variables; valgrind <i>will</i> complain :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1483978160, "post_id": 41551193, "comment_id": 70309382, "body": "@MatthieuM. what&#39;s one more memory leak between friends, really? On a serious note, you can always add a suppression to Valgrind if you are deliberately attempting to leak one thing but still want to be warned about other accidental leaks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1606853858, "last_edit_date": 1606853858, "creation_date": 1483975243, "answer_id": 41551193, "question_id": 41551036, "link": "https://stackoverflow.com/questions/41551036/sharing-dynamic-state-between-tests/41551193#41551193", "title": "Sharing dynamic state between #[test]s", "body": "<p>There's nothing special about tests. They are &quot;just&quot; functions that run in multiple threads. Therefore, one solution is do the same thing you would in other code: <a href=\"https://stackoverflow.com/q/27791532/155423\">create a global mutable singleton</a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use once_cell::sync::Lazy; // 1.5.2\n\nstatic DATABASE: Lazy&lt;String&gt; = Lazy::new(|| format!(&quot;{} {}&quot;, &quot;This was&quot;, &quot;expensive&quot;));\n\n#[test]\nfn one() {\n    println!(&quot;{}&quot;, *DATABASE);\n}\n\n#[test]\nfn two() {\n    println!(&quot;{}&quot;, *DATABASE);\n}\n</code></pre>\n<p>The test framework provides no hooks for an &quot;after&quot; callback, so there is no nice avenue to clean up this resource. <code>Drop</code> will not be called for singleton variables either.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 728, "favorite_count": 0, "accepted_answer_id": 41551193, "answer_count": 1, "score": 7, "last_activity_date": 1606853858, "creation_date": 1483974756, "last_edit_date": 1570259673, "question_id": 41551036, "link": "https://stackoverflow.com/questions/41551036/sharing-dynamic-state-between-tests", "title": "Sharing dynamic state between #[test]s", "body": "<p>How do I share state between tests, short of storing it externally (e.g. environment variables, file, etc)?</p>\n\n<p><a href=\"https://github.com/reem/stainless#example\" rel=\"nofollow noreferrer\">Stainless</a> has a setup macro thing named <code>before_each</code>, and I'm thinking of a similar thing, say <code>shared_values</code>, but whose variables would be accessible to all tests, and which would also be ran once (at the beginning of the test suite).</p>\n"}, {"tags": ["rust", "stdout", "stdin", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1483971041, "post_id": 41549516, "comment_id": 70304720, "body": "If the question is rephrased to stdin/stdout it&#39;s not a duplicate, since stdin/stdout are a rather special case."}], "answers": [{"comments": [{"owner": {"reputation": 983, "user_id": 723374, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/97ba6199f64137e19e3bc7a14df5f97e?s=128&d=identicon&r=PG", "display_name": "webdesserts", "link": "https://stackoverflow.com/users/723374/webdesserts"}, "edited": false, "score": 0, "creation_date": 1483981172, "post_id": 41549727, "comment_id": 70311233, "body": "Yeah, I&#39;ve considered the <code>&#39;static</code> lifetime but, wow, I didn&#39;t think that would cause problems too. I can see the usability issues in taking control of <code>stdin</code> &amp; <code>stdout</code> for prolonged periods of time so perhaps I&#39;ll let this be. Thank you for the explanation."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1483999323, "post_id": 41549727, "comment_id": 70320817, "body": "Wouldn&#39;t it be possible to implement <code>default</code> that returns <code>PrompSet&lt;HelperIn, HelperOut&gt;</code>, with <code>HelperIn</code> and <code>HelperOut</code> being classes that contain (own) instances of <code>Stdin</code> and <code>Stdout</code>, and implement <code>BufRead</code> and <code>Write</code> respectively (by locking the stream for each operation and calling the appropriate method on the lock guard)? It seems like it should be possible, but when I wrote it up, it wouldn&#39;t compile due to <code>BufRead::fill_buf</code> not satisfying the life-time requirements."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1484032177, "post_id": 41549727, "comment_id": 70330413, "body": "That would create a broken <code>BufRead</code> implementation. You would loose all buffered bytes that weren&#39;t read within the <code>BufRead</code> call. What you can do is to implement the buffering yourself, but then you would be mixing arbitrary bytes between different readers. There&#39;s a reason <code>StdinLock</code> doesn&#39;t already work like this."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1601652882, "post_id": 41549727, "comment_id": 113481670, "body": "This is extremely useful in case when you e.g. need to lock stdin and pass it to code that (for various technical reasons) expects <code>impl Read + &#39;static</code> with the intent of exhausting it. Since stdin is about to be exhausted and it&#39;s a short-lived process, it is not an issue that it will not be usable afterwards."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 8, "last_activity_date": 1529342327, "last_edit_date": 1529342327, "creation_date": 1483970590, "answer_id": 41549727, "question_id": 41549516, "link": "https://stackoverflow.com/questions/41549516/is-there-a-way-to-use-locked-standard-input-and-output-in-a-constructor-to-live/41549727#41549727", "title": "Is there a way to use locked standard input and output in a constructor to live as long as the struct you&#39;re constructing?", "body": "<p>The <code>lock</code> method's signature is <code>fn lock(&amp;self) -&gt; StdinLock</code>, which, when fully expanded with lifetime annotations, is <code>fn lock&lt;'a&gt;(&amp;'a self) -&gt; StdinLock&lt;'a&gt;</code>. Thus the <code>StdinLock</code> can only live as long as the value that the <code>lock</code> method is called on. Since you defined <code>stdin</code> in this very function, the <code>StdinLock</code> can't outlive the function. This is the same as <a href=\"http://stackoverflow.com/q/32682876/155423\">returning a reference to a local value</a>. You also <a href=\"https://stackoverflow.com/q/32300132/155423\">can't return the reference and the referred-to value together</a>.</p>\n\n<p>You can't do this, and you can't work around it. The only fix is to have the <code>default</code> method take a <code>Stdin</code> and a <code>Stdout</code> object as arguments.</p>\n\n<p>That said, you <em>can</em> work around it. Yes I know, I just said the exact opposite, but it's more of a \"no one other than me will ever use stdin/stdout\" <strong>(a.k.a., <code>println!</code> will not work anymore!)</strong>.</p>\n\n<p>In Rust 1.26, you can use <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak\" rel=\"noreferrer\"><code>Box::leak</code></a> to leak the <code>Stdin</code> to a <code>&amp;'static Stdin</code>, which will yield a <code>StdinLock&lt;'static&gt;</code>. Before Rust 1.26, you can use the <a href=\"https://crates.io/crates/leak/\" rel=\"noreferrer\"><code>leak</code></a> crate:</p>\n\n<pre><code>pub fn default() -&gt; PromptSet&lt;StdinLock&lt;'static&gt;, StdoutLock&lt;'static&gt;&gt; {\n    let stdin = Box::leak(Box::new(io::stdin()));\n    let stdout = Box::leak(Box::new(io::stdout()));\n\n    PromptSet {\n        reader: stdin.lock(),\n        writer: stdout.lock(),\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1375, "user_id": 246376, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e7400cca6e3f9e2a4bb57135423186d7?s=128&d=identicon&r=PG", "display_name": "Dzmitry Lazerka", "link": "https://stackoverflow.com/users/246376/dzmitry-lazerka"}, "is_accepted": false, "score": 1, "last_activity_date": 1519769958, "last_edit_date": 1519769958, "creation_date": 1519768076, "answer_id": 49018480, "question_id": 41549516, "link": "https://stackoverflow.com/questions/41549516/is-there-a-way-to-use-locked-standard-input-and-output-in-a-constructor-to-live/49018480#49018480", "title": "Is there a way to use locked standard input and output in a constructor to live as long as the struct you&#39;re constructing?", "body": "<p>Might be not really the answer to your question, but to a similar problem. Here's my solution. </p>\n\n<p>The main trick here is to call <code>stdin.lock()</code> for every single line.</p>\n\n<pre><code>use std::io;\nuse std::io::prelude::*;\nuse std::io::Stdin;\n\nstruct StdinWrapper {\n    stdin: Stdin,\n}\n\nimpl Iterator for StdinWrapper {\n    type Item = String;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let stdin = &amp;self.stdin;\n        let mut lines = stdin.lock().lines();\n        match lines.next() {\n            Some(result) =&gt; Some(result.expect(\"Cannot read line\")),\n            None =&gt; None,\n        }\n    }\n}\n\n/**\n * Callers of this method should not know concrete source of the strings.\n * It could be Stdin, a file, DB, or even aliens from SETI.\n */\nfn read() -&gt; Box&lt;Iterator&lt;Item = String&gt;&gt; {\n    let stdin = io::stdin();\n    Box::new(StdinWrapper { stdin })\n}\n\nfn main() {\n    let lines = read();\n\n    for line in lines {\n        println!(\"{}\", line);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 983, "user_id": 723374, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/97ba6199f64137e19e3bc7a14df5f97e?s=128&d=identicon&r=PG", "display_name": "webdesserts", "link": "https://stackoverflow.com/users/723374/webdesserts"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1788, "favorite_count": 0, "accepted_answer_id": 41549727, "answer_count": 2, "score": 2, "last_activity_date": 1529342327, "creation_date": 1483969729, "last_edit_date": 1529341861, "question_id": 41549516, "link": "https://stackoverflow.com/questions/41549516/is-there-a-way-to-use-locked-standard-input-and-output-in-a-constructor-to-live", "title": "Is there a way to use locked standard input and output in a constructor to live as long as the struct you&#39;re constructing?", "body": "<p>I'm building a <code>PromptSet</code> that can ask a series of questions in a row. For testing reasons, it allows you to pass a reader and writer instead of using stdin &amp; stdout directly. </p>\n\n<p>Because stdin and stdout are the common use case, I would like to create a default \"constructor\" that allows the user to produce a <code>PromptSet&lt;StdinLock, StdoutLock&gt;</code> without needing any parameters. Here's the code so far:</p>\n\n<pre><code>use std::io::{self, BufRead, StdinLock, StdoutLock, Write};\n\npub struct PromptSet&lt;R, W&gt;\nwhere\n    R: BufRead,\n    W: Write,\n{\n    pub reader: R,\n    pub writer: W,\n}\n\nimpl&lt;R, W&gt; PromptSet&lt;R, W&gt;\nwhere\n    R: BufRead,\n    W: Write,\n{\n    pub fn new(reader: R, writer: W) -&gt; PromptSet&lt;R, W&gt; {\n        return PromptSet {\n            reader: reader,\n            writer: writer,\n        };\n    }\n\n    pub fn default&lt;'a&gt;() -&gt; PromptSet&lt;StdinLock&lt;'a&gt;, StdoutLock&lt;'a&gt;&gt; {\n        let stdin = io::stdin();\n        let stdout = io::stdout();\n\n        return PromptSet {\n            reader: stdin.lock(),\n            writer: stdout.lock(),\n        };\n    }\n\n    pub fn prompt(&amp;mut self, question: &amp;str) -&gt; String {\n        let mut input = String::new();\n\n        write!(self.writer, \"{}: \", question).unwrap();\n        self.writer.flush().unwrap();\n        self.reader.read_line(&amp;mut input).unwrap();\n\n        return input.trim().to_string();\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p><code>StdinLock</code> and <code>StdoutLock</code> both need a lifetime declared. To complicate it, I think the original <code>stdin()</code>/<code>stdout()</code> handles need to live at least as long as the locks do. I would like the references to <code>StdinLock</code> and <code>StdoutLock</code> to live as long as my <code>PromptSet</code> does but no matter what I try I can't get it to work. Here is the error that I keep getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `stdin` does not live long enough\n  --&gt; src/main.rs:30:21\n   |\n30 |             reader: stdin.lock(),\n   |                     ^^^^^ borrowed value does not live long enough\n...\n33 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the method body at 25:5...\n  --&gt; src/main.rs:25:5\n   |\n25 | /     pub fn default&lt;'a&gt;() -&gt; PromptSet&lt;StdinLock&lt;'a&gt;, StdoutLock&lt;'a&gt;&gt; {\n26 | |         let stdin = io::stdin();\n27 | |         let stdout = io::stdout();\n28 | |\n...  |\n32 | |         };\n33 | |     }\n   | |_____^\n\nerror[E0597]: `stdout` does not live long enough\n  --&gt; src/main.rs:31:21\n   |\n31 |             writer: stdout.lock(),\n   |                     ^^^^^^ borrowed value does not live long enough\n32 |         };\n33 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the method body at 25:5...\n  --&gt; src/main.rs:25:5\n   |\n25 | /     pub fn default&lt;'a&gt;() -&gt; PromptSet&lt;StdinLock&lt;'a&gt;, StdoutLock&lt;'a&gt;&gt; {\n26 | |         let stdin = io::stdin();\n27 | |         let stdout = io::stdout();\n28 | |\n...  |\n32 | |         };\n33 | |     }\n   | |_____^\n</code></pre>\n\n<p>It's perfectly possible I just don't understand the concept of lifetimes or something else super basic.</p>\n"}, {"tags": ["rust", "llvm-codegen"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1483947944, "post_id": 41541835, "comment_id": 70290954, "body": "Interestingly, if I use <code>&amp;mut i32, &amp;mut i32, &amp;i32</code> as the prototype, the <code>noalias</code> attribute is tacked on <code>x</code> instead. I seem to remember that <code>noalias</code> is not actively passed to LLVM as there are concerns that the <code>unsafe</code> semantics need be clarified first, and optimizations applies second, lest LLVM &quot;breaks&quot; the code."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1483954198, "post_id": 41541835, "comment_id": 70294056, "body": "Maybe relevant: <a href=\"https://doc.rust-lang.org/std/ptr/struct.Unique.html\" rel=\"nofollow noreferrer\"><code>Unique&lt;T&gt;</code></a>"}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 2, "creation_date": 1483978273, "post_id": 41541835, "comment_id": 70309466, "body": "For the record, I reported the lack of optimization here as <a href=\"https://github.com/rust-lang/rust/issues/38941\" rel=\"nofollow noreferrer\">issue #38941</a>."}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1483978410, "post_id": 41541835, "comment_id": 70309544, "body": "@MatthieuM.: Are you perhaps thinking of <a href=\"https://github.com/rust-lang/rust/issues/31681\" rel=\"nofollow noreferrer\">issue #31681</a>? Indeed, some references aren&#39;t marked as <code>noalias</code> due to a bug in LLVM (which has recently been fixed), but not all. Some are still able to be marked as <code>noalias</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537535555, "post_id": 52429879, "comment_id": 91831781, "body": "The function / closure is unnecessary. <a href=\"https://play.rust-lang.org/?gist=394715120674a36188bd6e8ac7ff0cd8&amp;version=stable&amp;mode=release&amp;edition=2015\" rel=\"nofollow noreferrer\">All you are doing is converting the raw pointers to references</a>. This doesn&#39;t really show how to treat <i>pointers</i> as non-aliasing, just how to convert pointers to references."}, {"owner": {"reputation": 97521, "user_id": 565635, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7b4b3e7c9ac68b7d2c93ad02d0b9c79d?s=128&d=identicon&r=PG", "display_name": "orlp", "link": "https://stackoverflow.com/users/565635/orlp"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537537361, "post_id": 52429879, "comment_id": 91832804, "body": "@Shepmaster That&#39;s just not true - compare the assembly. In your example <code>safe_x</code> is loaded twice - evidence the references are <b>not</b> considered non-aliasing. The closure is necessary."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1537537737, "post_id": 52429879, "comment_id": 91833044, "body": "Hmm, I see what you mean. That seems like a bug (limitation?) By definition, references should not alias. Looking for an issue, I found <a href=\"https://github.com/rust-lang/rust/issues/38941\" rel=\"nofollow noreferrer\">the one filed by OP</a>!"}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1537541394, "post_id": 52429879, "comment_id": 91835247, "body": "Yeah, sorry, I should have made that more explicit in my OP (this is what I meant by &quot;The parameters could easily be changed to <code>&amp;i32</code>/<code>&amp;mut i32</code>&quot; and what <a href=\"https://stackoverflow.com/questions/41541835/is-there-a-way-to-get-rust-to-treat-pointers-as-non-aliasing-so-it-can-mark-the#comment70290954_41541835\">Matthieu M.&#39;s comment refers to</a>). Currently <code>noalias</code> is only applied to reference function arguments as far as I can tell. I suppose this is a perfectly valid answer to the question, though."}], "tags": [], "owner": {"reputation": 97521, "user_id": 565635, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7b4b3e7c9ac68b7d2c93ad02d0b9c79d?s=128&d=identicon&r=PG", "display_name": "orlp", "link": "https://stackoverflow.com/users/565635/orlp"}, "is_accepted": false, "score": 3, "last_activity_date": 1537535329, "last_edit_date": 1537535329, "creation_date": 1537462495, "answer_id": 52429879, "question_id": 41541835, "link": "https://stackoverflow.com/questions/41541835/is-there-a-way-to-get-rust-to-treat-pointers-as-non-aliasing-so-it-can-mark-the/52429879#52429879", "title": "Is there a way to get Rust to treat pointers as non-aliasing, so it can mark them as `noalias` for LLVM&#39;s optimizer?", "body": "<p>There is, wrap the safe reference in a function or closure:</p>\n\n<pre><code>pub unsafe fn f(a: *mut i32, b: *mut i32, x: *const i32) {\n    (|safe_a: &amp;mut i32, safe_b: &amp;mut i32, safe_x: &amp;i32| {\n        *safe_a = *safe_x;\n        *safe_b = *safe_x;\n    })(&amp;mut *a, &amp;mut *b, &amp;*x)\n}\n</code></pre>\n\n<p>This produces the wanted non-aliasing behavior:</p>\n\n<pre><code>example::f:\n        movl    (%rdx), %eax\n        movl    %eax, (%rdi)\n        movl    %eax, (%rsi)\n        retq\n</code></pre>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 510, "favorite_count": 1, "answer_count": 1, "score": 26, "last_activity_date": 1564862353, "creation_date": 1483941620, "last_edit_date": 1564862353, "question_id": 41541835, "link": "https://stackoverflow.com/questions/41541835/is-there-a-way-to-get-rust-to-treat-pointers-as-non-aliasing-so-it-can-mark-the", "title": "Is there a way to get Rust to treat pointers as non-aliasing, so it can mark them as `noalias` for LLVM&#39;s optimizer?", "body": "<p>The following example of pointer aliasing:</p>\n\n<pre><code>pub unsafe fn f(a: *mut i32, b: *mut i32, x: *const i32) {\n  *a = *x;\n  *b = *x;\n}\n</code></pre>\n\n<p>compiles into the following assembly (with <code>-C opt-level=s</code>):</p>\n\n<pre><code>example::f:\n        push    rbp\n        mov     rbp, rsp\n        mov     eax, dword ptr [rdx]\n        mov     dword ptr [rdi], eax\n        mov     eax, dword ptr [rdx]\n        mov     dword ptr [rsi], eax\n        pop     rbp\n        ret\n</code></pre>\n\n<p>Notice that <code>x</code> is being dereferenced twice. LLVM is not treating it as <code>noalias</code>. My first thought was to avoid using pointers in the assignments and instead use safe references (since those \"<a href=\"https://doc.rust-lang.org/reference.html#behavior-considered-undefined\" rel=\"noreferrer\">follow LLVM\u2019s scoped <code>noalias</code> model</a>\") to give a hint to the optimizer:</p>\n\n<pre><code>pub fn g(a: *mut i32, b: *mut i32, x: *const i32) {\n  let safe_a = unsafe { &amp;mut *a };\n  let safe_b = unsafe { &amp;mut *b };\n  let safe_x = unsafe { &amp;*x };\n  *safe_a = *safe_x;\n  *safe_b = *safe_x;\n}\n</code></pre>\n\n<p>But alas, this produces the exact same result. <code>safe_x</code> is still dereferenced twice. </p>\n\n<p>I know this example code is dumb. The parameters could easily be changed to <code>&amp;i32</code>/<code>&amp;mut i32</code>, or I could just dereference <code>x</code> once and store it in a temporary that is used for the assignment. The code here is just meant to be a super simple aliasing test, and I'm interested in the broader picture my question is asking.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 8, "last_activity_date": 1483939448, "creation_date": 1483939448, "answer_id": 41541495, "question_id": 41540882, "link": "https://stackoverflow.com/questions/41540882/convert-boxed-trait-to-mutable-trait-reference-in-rust/41541495#41541495", "title": "Convert boxed trait to mutable trait reference in Rust", "body": "<p>I think you're running into a limitation of the current compiler's lifetime handling. <code>borrow_mut</code>, being a function, imposes stricter lifetime requirements than necessary.</p>\n\n<p>Instead, you can take a mutable borrow to the box's interior by first dereferencing the box, like this:</p>\n\n<pre><code>fn main() {\n    let mut boxed_trait: Box&lt;MyTrait&gt; = Box::new(MyStruct {});\n    invoke_from_ref(&amp;mut *boxed_trait);\n}\n</code></pre>\n"}], "owner": {"reputation": 356, "user_id": 5280790, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eac429a5a60ea7f567cc51ad67a95034?s=128&d=identicon&r=PG&f=1", "display_name": "Iceberg", "link": "https://stackoverflow.com/users/5280790/iceberg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 730, "favorite_count": 1, "accepted_answer_id": 41541495, "answer_count": 1, "score": 7, "last_activity_date": 1483968932, "creation_date": 1483934654, "last_edit_date": 1483968932, "question_id": 41540882, "link": "https://stackoverflow.com/questions/41540882/convert-boxed-trait-to-mutable-trait-reference-in-rust", "title": "Convert boxed trait to mutable trait reference in Rust", "body": "<p>I am having some trouble with the dynamic dispatch pointer types in Rust. I want to convert a value of type <code>Box&lt;MyTrait&gt;</code> to <code>&amp;mut MyTrait</code> to pass to a function. For example, I tried:</p>\n\n<pre><code>use std::borrow::BorrowMut;\n\ntrait MyTrait {\n    fn say_hi(&amp;mut self);\n}\n\nstruct MyStruct { }\n\nimpl MyTrait for MyStruct {\n    fn say_hi(&amp;mut self) {\n        println!(\"hi\");\n    }\n}\n\nfn invoke_from_ref(value: &amp;mut MyTrait) {\n    value.say_hi();\n}\n\nfn main() {\n    let mut boxed_trait: Box&lt;MyTrait&gt; = Box::new(MyStruct {});\n    invoke_from_ref(boxed_trait.borrow_mut());\n}\n</code></pre>\n\n<p>This fails with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `boxed_trait` does not live long enough\n  --&gt; &lt;anon&gt;:22:5\n   |\n21 |         invoke_from_ref(boxed_trait.borrow_mut());\n   |                         ----------- borrow occurs here\n22 |     }\n   |     ^ `boxed_trait` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>Strangely enough, this works for <code>&amp;MyTrait</code> but not for <code>&amp;mut MyTrait</code>. Is there any way I can get this conversion to work in the mutable case?</p>\n"}, {"tags": ["linux", "rust", "memory-mapping", "windows-subsystem-for-linux"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1483929784, "post_id": 41539960, "comment_id": 70285623, "body": "For what it&#39;s worth, Running your Rust code in an Ubuntu 16.04 Docker image, I get <code>stack \u2248 0x7ffc2a01636c</code>; <code>.text \u2248 0x559f58ae4270</code>; <code>.data \u2248 0x559f58b2735b</code>. This is not that close to the stack."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483948577, "post_id": 41540473, "comment_id": 70291226, "body": "Wouldn&#39;t ASLR give a different address each execution?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483953052, "post_id": 41540473, "comment_id": 70293396, "body": "@MatthieuM. I&#39;ve been wondering about the scope of ASLR myself. I do get slightly different addresses each time, but on my machine it always starts with 0x7f (never something like 0x55 as in Shepmaster&#39;s comment above). Great answer anyway, Shepmaster!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483967140, "post_id": 41540473, "comment_id": 70302203, "body": "@MatthieuM. I do get different addresses with each execution, which I&#39;ve updated with."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483971095, "post_id": 41540473, "comment_id": 70304752, "body": "@Shepmaster: Great, then it&#39;s definitely ASLR."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1483967135, "last_edit_date": 1495542834, "creation_date": 1483931476, "answer_id": 41540473, "question_id": 41539960, "link": "https://stackoverflow.com/questions/41539960/why-is-my-rust-executable-mapped-to-such-high-addresses-near-the-stack-instead/41540473#41540473", "title": "Why is my Rust executable mapped to such high addresses (near the stack) instead of 0x400000?", "body": "<p>Using <code>rustc -Z print-link-args addr.rs</code>, you can see what linker invocation the Rust compiler will use. Since the current linker happens to be <code>cc</code>, we can directly reuse these options for the C program. Ignoring unimportant arguments and removing others one-by-one, I was left with this compiler invocation:</p>\n\n<pre><code>gcc -fPIC -pie addr.c -o addr-c\n</code></pre>\n\n<p>Compiling the C code like this produces similar addresses as the Rust-compiled executable, indicating that one or both of those options is a likely culprit. This changes the question to \"why does <code>-fPIC</code> and/or <code>-pie</code> map to such high addresses?\"</p>\n\n<p>I found another question <a href=\"https://stackoverflow.com/a/28132120/155423\">and answer</a> that seems to shed light on that:</p>\n\n<blockquote>\n  <p>The <code>PIE</code> binary is linked just as a shared library, and so its default load address (the <code>.p_vaddr</code> of the first <code>LOAD</code> segment) is zero. The expectation is that something will relocate this binary away from zero page, and load it at some random address.</p>\n</blockquote>\n\n<p>Using <code>readelf -e</code> on the Rust executable, we can see that the first <code>LOAD</code> segment does have a virtual address of zero:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Program Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x000000000005e6b4 0x000000000005e6b4  R E    200000\n  LOAD           0x000000000005ead0 0x000000000025ead0 0x000000000025ead0\n                 0x00000000000039d1 0x00000000000049e8  RW     200000\n</code></pre>\n\n<p>I guess that this then changes the question to \"why are these random addresses chosen\", but I'm not sure of that answer. ^_^ A <em>hunch</em> tells me that ASLR comes into play. This <a href=\"https://stackoverflow.com/a/5030518/155423\">other answer</a> seems to bear that out:</p>\n\n<blockquote>\n  <p>PIE is to support <a href=\"http://en.wikipedia.org/wiki/Address_space_layout_randomization\" rel=\"nofollow noreferrer\">ASLR</a> in executable files.</p>\n</blockquote>\n\n<p>ASLR is a security technique to help harden programs against certain types of attacks, so it makes sense that Rust, with its safety-minded approach, would attempt to enable something like this by default. Indeed, the addresses change a small bit each invocation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>root@97bcff9a925c:/# ./addr | grep 'r-xp' | grep 'addr'\n5587cea9d000-5587ceafc000 r-xp 00000000 00:21 206                        /addr\n561d8aae2000-561d8ab41000 r-xp 00000000 00:21 206                        /addr\n555c30ffd000-555c3105c000 r-xp 00000000 00:21 206                        /addr\n55db249d5000-55db24a34000 r-xp 00000000 00:21 206                        /addr\n55e988572000-55e9885d1000 r-xp 00000000 00:21 206                        /addr\n560400e1b000-560400e7a000 r-xp 00000000 00:21 206                        /addr\n</code></pre>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 410, "favorite_count": 0, "accepted_answer_id": 41540473, "answer_count": 1, "score": 7, "last_activity_date": 1483967135, "creation_date": 1483927121, "last_edit_date": 1483929417, "question_id": 41539960, "link": "https://stackoverflow.com/questions/41539960/why-is-my-rust-executable-mapped-to-such-high-addresses-near-the-stack-instead", "title": "Why is my Rust executable mapped to such high addresses (near the stack) instead of 0x400000?", "body": "<p>I am learning about the Linux user space memory layout on x86_64 systems and wanted to print some addresses from some of the sections. I used this Rust code:</p>\n\n<pre><code>fn main() {\n    let x = 3;        // should be stored on stack\n    let s = \"hello\";  // should be in the .data section\n\n    println!(\"stack \u2248 {:p}\", &amp;x);\n    println!(\".text \u2248 {:p}\", main as *const ());\n    println!(\".data \u2248 {:p}\", s);\n\n\n    use std::io;\n\n    let mut f = std::fs::File::open(\"/proc/self/maps\").unwrap();\n    let out = io::stdout();\n    io::copy(&amp;mut f, &amp;mut out.lock()).unwrap();\n}\n</code></pre>\n\n<p>This code also prints the file <code>/proc/self/maps</code> to stdout. I compiled this file <code>mem.rs</code> simply with <code>rustc mem.rs</code>. It printed:</p>\n\n<pre><code>stack \u2248 0x7ffffbf82f2c\n.text \u2248 0x7f45b7c0a2b0\n.data \u2248 0x7f45b7c4d35b\n\n7f45b6800000-7f45b6c00000 rw-- 00000000 00:00 0\n7f45b6de0000-7f45b6f9a000 r-x- 00000000 00:00 664435             /lib/x86_64-linux-gnu/libc-2.19.so\n7f45b6f9a000-7f45b6fa2000 ---- 001ba000 00:00 664435             /lib/x86_64-linux-gnu/libc-2.19.so\n[ ... more .so files]\n7f45b7a22000-7f45b7a23000 r--- 00022000 00:00 663920             /lib/x86_64-linux-gnu/ld-2.19.so\n7f45b7a23000-7f45b7a24000 rw-- 00023000 00:00 663920             /lib/x86_64-linux-gnu/ld-2.19.so\n7f45b7a24000-7f45b7a25000 rw-- 00000000 00:00 0\n7f45b7aa0000-7f45b7aa2000 rw-- 00000000 00:00 0\n7f45b7ab0000-7f45b7ab2000 rw-- 00000000 00:00 0\n7f45b7ac0000-7f45b7ac1000 rw-- 00000000 00:00 0\n7f45b7ad0000-7f45b7ad1000 rw-- 00000000 00:00 0\n7f45b7ae0000-7f45b7ae2000 rw-- 00000000 00:00 0\n7f45b7c00000-7f45b7c5f000 r-x- 00000000 00:00 1134580            /home/lukas/tmp/mem\n7f45b7e5e000-7f45b7e62000 r--- 0005e000 00:00 1134580            /home/lukas/tmp/mem\n7f45b7e62000-7f45b7e63000 rw-- 00062000 00:00 1134580            /home/lukas/tmp/mem\n7f45b7e63000-7f45b7e64000 rw-- 00000000 00:00 0\n7ffffb784000-7ffffb785000 ---- 00000000 00:00 0                  [stack]\n7ffffb785000-7ffffbf84000 rw-- 00000000 00:00 0\n7ffffc263000-7ffffc264000 r-x- 00000000 00:00 0                  [vdso]\n</code></pre>\n\n<p>At least the addresses I printed on my own seem to match what <code>maps</code> says. But when I execute <code>cat /proc/self/maps</code> in the terminal, I get this output:</p>\n\n<pre><code>00400000-0040b000 r-x- 00000000 00:00 107117                     /bin/cat\n0060a000-0060b000 r--- 0000a000 00:00 107117                     /bin/cat\n0060b000-0060c000 rw-- 0000b000 00:00 107117                     /bin/cat\n0071c000-0073d000 rw-- 00000000 00:00 0                          [heap]\n7f7deb933000-7f7debc30000 r--- 00000000 00:00 758714             /usr/lib/locale/locale-archive\n7f7debc30000-7f7debdea000 r-x- 00000000 00:00 664435             /lib/x86_64-linux-gnu/libc-2.19.so\n7f7debdea000-7f7debdf2000 ---- 001ba000 00:00 664435             /lib/x86_64-linux-gnu/libc-2.19.so\n[ ... more .so files ...]\n7f7dec222000-7f7dec223000 r--- 00022000 00:00 663920             /lib/x86_64-linux-gnu/ld-2.19.so\n7f7dec223000-7f7dec224000 rw-- 00023000 00:00 663920             /lib/x86_64-linux-gnu/ld-2.19.so\n7f7dec224000-7f7dec225000 rw-- 00000000 00:00 0\n7f7dec250000-7f7dec252000 rw-- 00000000 00:00 0\n7f7dec260000-7f7dec261000 rw-- 00000000 00:00 0\n7f7dec270000-7f7dec272000 rw-- 00000000 00:00 0\n7ffff09e8000-7ffff11e8000 rw-- 00000000 00:00 0                  [stack]\n7ffff1689000-7ffff168a000 r-x- 00000000 00:00 0                  [vdso]\n</code></pre>\n\n<p>The latter result matches everything I read about this topic: the sections from the executable are mapped in the lower end of the virtual address space (beginning around 0x400000).</p>\n\n<p>I executed and compiled everything in the Linux Subsystem for Windows (Ubuntu 14.04 basically). I know, it's new and stuff, but I'm fairly sure this is not an issue with the subsystem (please tell me if it is, though!). Rust 1.14 is that matters (I doubt it),</p>\n\n<p>I also tried the same with a C program (excuse my probably bad C):</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char **argv) {\n    FILE *test_file;\n    char buf[4096];\n    if ((test_file = fopen (\"/proc/self/maps\", \"r\")) != NULL) {\n        while (!feof (test_file)) {\n            fgets (buf, sizeof (buf), test_file);\n            puts (buf);\n        }\n    }\n\n    return 0;\n}\n</code></pre>\n\n<p>It outputs something similar to <code>cat</code>:</p>\n\n<pre><code>00400000-00401000 r-x- 00000000 00:00 1325490                    /home/lukas/tmp/a.out\n00600000-00601000 r--- 00000000 00:00 1325490                    /home/lukas/tmp/a.out\n00601000-00602000 rw-- 00001000 00:00 1325490                    /home/lukas/tmp/a.out\n</code></pre>\n\n<hr>\n\n<p><strong>Why is the Rust executable mapped to large addresses near the stack?</strong></p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 16, "last_activity_date": 1529351748, "last_edit_date": 1529351748, "creation_date": 1483922447, "answer_id": 41539502, "question_id": 41539212, "link": "https://stackoverflow.com/questions/41539212/where-does-cargo-get-my-name-and-email-from-when-creating-a-project/41539502#41539502", "title": "Where does Cargo get my name and email from when creating a project?", "body": "<p><a href=\"https://github.com/rust-lang/cargo/blob/0.27.0/src/cargo/ops/cargo_new.rs#L587-L633\" rel=\"noreferrer\">Cargo uses your git configuration, among other environment variables</a>. </p>\n\n<p>To override it, you should be able to set the <code>CARGO_EMAIL</code> and <code>CARGO_NAME</code> environment variables when running cargo. E.g: </p>\n\n<pre><code>CARGO_NAME=not-ross cargo new --bin project_name\n</code></pre>\n\n<p>For example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>simon /c/rust\n$ CARGO_NAME=Not-Simon CARGO_EMAIL=not_simon@not_simon.com cargo new --bin override-author\n     Created binary (application) `override-author` project\n\nsimon /c/rust\n$ cd !$\n\nsimon /c/rust/override-author (master)\n$ cat Cargo.toml\n[package]\nname = \"override-author\"\nversion = \"0.1.0\"\nauthors = [\"Not-Simon &lt;not_simon@not_simon.com&gt;\"]\n\n[dependencies]\n</code></pre>\n\n<p>Using <code>CARGO_NAME</code> and <code>CARGO_EMAIL</code> lets <code>cargo</code> figure out the author name and email at a higher \"scope\". Looking at the code in more detail, it will check git first but you can override it with the <code>--vcs</code> flag which will still use <code>CARGO_NAME</code> and <code>CARGO_EMAIL</code> if provided.</p>\n"}], "owner": {"reputation": 497, "user_id": 3776174, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/g5m86.gif?s=128&g=1", "display_name": "ross", "link": "https://stackoverflow.com/users/3776174/ross"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2382, "favorite_count": 0, "accepted_answer_id": 41539502, "answer_count": 1, "score": 17, "last_activity_date": 1529351748, "creation_date": 1483919540, "last_edit_date": 1483921533, "question_id": 41539212, "link": "https://stackoverflow.com/questions/41539212/where-does-cargo-get-my-name-and-email-from-when-creating-a-project", "title": "Where does Cargo get my name and email from when creating a project?", "body": "<p>Working through Rust's <a href=\"https://doc.rust-lang.org/nightly/book/getting-started.html\" rel=\"noreferrer\">Getting Started</a> page on macOS, I ran the following command for Cargo to generate a project:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo new hello_world --bin\n</code></pre>\n\n<p>When I inspected the <code>Cargo.toml</code> file, it contained my real name as well as my email address.</p>\n\n<p>From where is Cargo getting my name and email? How can I configure the name and email address Cargo uses?</p>\n"}, {"tags": ["rust", "digits"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1565944216, "post_id": 41536479, "comment_id": 101509456, "body": "I&#39;ve written a crate for that: <a href=\"https://docs.rs/digits_iterator/\" rel=\"nofollow noreferrer\">docs.rs/digits_iterator</a>"}], "answers": [{"comments": [{"owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "edited": false, "score": 0, "creation_date": 1483901740, "post_id": 41536521, "comment_id": 70278244, "body": "I don&#39;t see how that would become a use after free bug. Wouldn&#39;t it just get used immediately, and THEN freed afterwards?"}, {"owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "edited": false, "score": 0, "creation_date": 1483902107, "post_id": 41536521, "comment_id": 70278391, "body": "about adding special case testing for negative numbers: the function that uses this uses <code>u32</code>, negative numbers will never happen"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "edited": false, "score": 3, "creation_date": 1483902232, "post_id": 41536521, "comment_id": 70278442, "body": "@ElectricCoffee: The use-after-free comes because <code>to_string</code> creates a temporary which only lives as long as the statement in which it was created. However your <code>digits</code> iterator, which works by referencing this temporary, lives far longer, which is incorrect. If you call <code>collect</code> immediately in the same statement, then there is no longer a problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483902294, "post_id": 41536521, "comment_id": 70278466, "body": "Beat me to it @MatthieuM.!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "edited": false, "score": 0, "creation_date": 1483902363, "post_id": 41536521, "comment_id": 70278489, "body": "@ElectricCoffee the question mentions nothing about the range of the integer, so I felt free to restrict my answer to unsigned values, but felt it prudent to warn future readers."}, {"owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "edited": false, "score": 0, "creation_date": 1483902485, "post_id": 41536521, "comment_id": 70278533, "body": "@Shepmaster very valid argument"}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 1, "creation_date": 1483916534, "post_id": 41536521, "comment_id": 70282972, "body": "If performance is a concern it could be further optimized by using /100 instead of /10 and using a lookup table for the 100 possibilities, yielding 2 digits at a time. I assume that the compiler can fuse % and / into a single instruction."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1483916638, "post_id": 41536521, "comment_id": 70283002, "body": "@the8472 yeah, I&#39;m a little surprised that <code>divmod</code> isn&#39;t exposed yet, IIRC LLVM has it. I also hope that is an automatic optimization."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 16, "last_activity_date": 1576421404, "last_edit_date": 1576421404, "creation_date": 1483901639, "answer_id": 41536521, "question_id": 41536479, "link": "https://stackoverflow.com/questions/41536479/how-do-i-split-an-integer-into-individual-digits/41536521#41536521", "title": "How do I split an integer into individual digits?", "body": "<blockquote>\n  <p>But the borrow checker says the string doesn't live long enough.</p>\n</blockquote>\n\n<p>That's because it <em>doesn't</em>. You aren't using the iterator, so the type of <code>digits</code> is</p>\n\n<pre><code>std::iter::Map&lt;std::str::Chars&lt;'_&gt;, &lt;closure&gt;&gt;\n</code></pre>\n\n<p>That is, a yet-to-be-evaluated iterator that contains references to the allocated string (the unnamed lifetime <code>'_</code> in <code>Chars</code>). However, since that string has no owner, it is dropped at the end of the statement; before the iterator is consumed.</p>\n\n<p>So, yay for Rust, it prevented a use-after-free bug!</p>\n\n<p>Consuming the iterator would \"solve\" the problem, as the references to the allocated string would not attempt to live longer than the allocated string; they all end at the end of the statement:</p>\n\n<pre><code>let digits: Vec&lt;_&gt; = num.to_string().chars().map(|d| d.to_digit(10).unwrap()).collect();\n</code></pre>\n\n<p>If you wanted to return an iterator, you can then convert the <code>Vec</code> back into an iterator:</p>\n\n<pre><code>fn digits(num: usize) -&gt; impl Iterator&lt;Item = u32&gt; {\n    num.to_string()\n        .chars()\n        .map(|d| d.to_digit(10).unwrap())\n        .collect::&lt;Vec&lt;_&gt;&gt;()\n        .into_iter()\n}\n</code></pre>\n\n<hr>\n\n<p>As for an alternate solution, there's the <a href=\"https://stackoverflow.com/questions/4615046/c-get-each-digit-in-int\">math way, stolen from the C++ question</a> to create a vector:</p>\n\n<pre><code>fn x(n: usize) -&gt; Vec&lt;usize&gt; {\n    fn x_inner(n: usize, xs: &amp;mut Vec&lt;usize&gt;) {\n        if n &gt;= 10 {\n            x_inner(n / 10, xs);\n        }\n        xs.push(n % 10);\n    }\n    let mut xs = Vec::new();\n    x_inner(n, &amp;mut xs);\n    xs\n}\n\nfn main() {\n    let num = 42;\n    let digits: Vec&lt;_&gt; = num.to_string().chars().map(|d| d.to_digit(10).unwrap()).collect();\n    println!(\"{:?}\", digits);\n    let digits = x(42);\n    println!(\"{:?}\", digits);\n}\n</code></pre>\n\n<p>However, you might want to add all the special case logic for negative numbers, and testing wouldn't be a bad idea.</p>\n\n<p>You might also want a fancy-pants iterator version:</p>\n\n<pre><code>fn digits(mut num: usize) -&gt; impl Iterator&lt;Item = usize&gt; {\n    let mut divisor = 1;\n    while num &gt;= divisor * 10 {\n        divisor *= 10;\n    }\n\n    std::iter::from_fn(move || {\n        if divisor == 0 {\n            None\n        } else {\n            let v = num / divisor;\n            num %= divisor;\n            divisor /= 10;\n            Some(v)\n        }\n    })\n}\n</code></pre>\n\n<p>Or the completely custom type:</p>\n\n<pre><code>struct Digits {\n    n: usize,\n    divisor: usize,\n}\n\nimpl Digits {\n    fn new(n: usize) -&gt; Self {\n        let mut divisor = 1;\n        while n &gt;= divisor * 10 {\n            divisor *= 10;\n        }\n\n        Digits {\n            n: n,\n            divisor: divisor,\n        }\n    }\n}\n\nimpl Iterator for Digits {\n    type Item = usize;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.divisor == 0 {\n            None\n        } else {\n            let v = Some(self.n / self.divisor);\n            self.n %= self.divisor;\n            self.divisor /= 10;\n            v\n        }\n    }\n}\n\nfn main() {\n    let digits: Vec&lt;_&gt; = Digits::new(42).collect();\n    println!(\"{:?}\", digits);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n</ul>\n"}], "owner": {"reputation": 10492, "user_id": 1351298, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/KJKqs.jpg?s=128&g=1", "display_name": "Electric Coffee", "link": "https://stackoverflow.com/users/1351298/electric-coffee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7772, "favorite_count": 0, "accepted_answer_id": 41536521, "answer_count": 1, "score": 13, "last_activity_date": 1576421404, "creation_date": 1483901383, "last_edit_date": 1576419577, "question_id": 41536479, "link": "https://stackoverflow.com/questions/41536479/how-do-i-split-an-integer-into-individual-digits", "title": "How do I split an integer into individual digits?", "body": "<p>I'm writing a function that requires the individual digits of a larger integer to perform operations on. </p>\n\n<p>I've tried the following:</p>\n\n<pre><code>fn example(num: i32) {\n    // I can safely unwrap because I know the chars of the string are going to be valid\n    let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap());\n    for digit in digits {\n        println!(\"{}\", digit)\n    }\n}\n</code></pre>\n\n<p>But the borrow checker says the string doesn't live long enough:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0716]: temporary value dropped while borrowed\n --&gt; src/lib.rs:3:18\n  |\n3 |     let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap());\n  |                  ^^^^^^^^^^^^^^^                                         - temporary value is freed at the end of this statement\n  |                  |\n  |                  creates a temporary which is freed while still in use\n4 |     for digit in digits {\n  |                  ------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n</code></pre>\n\n<p>The following does work:</p>\n\n<pre><code>let temp = num.to_string();\nlet digits = temp.chars().map(|d| d.to_digit(10).unwrap());\n</code></pre>\n\n<p>But that looks even more contrived.</p>\n\n<p>Is there a better, and possibly more natural way of doing this?</p>\n"}, {"tags": ["opengl", "rust"], "comments": [{"owner": {"reputation": 1221, "user_id": 4285290, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a6312206b9e2c38d5f08968c41331656?s=128&d=identicon&r=PG&f=1", "display_name": "eldo", "link": "https://stackoverflow.com/users/4285290/eldo"}, "edited": false, "score": 1, "creation_date": 1483945774, "post_id": 41536256, "comment_id": 70290048, "body": "So just to make sure, the above should look like the last picture?"}, {"owner": {"reputation": 891, "user_id": 6630230, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/5HYQ5.jpg?s=128&g=1", "display_name": "Crouching Kitten", "link": "https://stackoverflow.com/users/6630230/crouching-kitten"}, "edited": false, "score": 1, "creation_date": 1483974125, "post_id": 41536256, "comment_id": 70306709, "body": "Does it really &quot;flicker&quot;, meaning: it happens only for a fraction of a second or so? Or permanently? Could you include the code which sets the vertices? I&#39;m interested in the vertex coordinates."}, {"owner": {"reputation": 200, "user_id": 3814613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/385fc5722b37c1931e5efb25f7acd2db?s=128&d=identicon&r=PG&f=1", "display_name": "user3814613", "link": "https://stackoverflow.com/users/3814613/user3814613"}, "reply_to_user": {"reputation": 891, "user_id": 6630230, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/5HYQ5.jpg?s=128&g=1", "display_name": "Crouching Kitten", "link": "https://stackoverflow.com/users/6630230/crouching-kitten"}, "edited": false, "score": 0, "creation_date": 1483980407, "post_id": 41536256, "comment_id": 70310774, "body": "@CrouchingKitten It keeps on &quot;flickering&quot; permanently. For lack of a better expression, it&#39;s pretty much &quot;spazzing out.&quot; I also included the vertices and UV coordinates in my original question"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1483981109, "post_id": 41536256, "comment_id": 70311192, "body": "If you want a solution, you need to provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. I know, it&#39;s hard to produce but otherwise we have a hard time helping. &quot;flickering&quot; sounds like z-fighting, are you talking about that? You could use an OpenGL debugger to trace API calls from both the C and Rust version and compare them. But the best would be if you provide a MCVE for both your Rust and C code..."}, {"owner": {"reputation": 200, "user_id": 3814613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/385fc5722b37c1931e5efb25f7acd2db?s=128&d=identicon&r=PG&f=1", "display_name": "user3814613", "link": "https://stackoverflow.com/users/3814613/user3814613"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1483985761, "post_id": 41536256, "comment_id": 70313870, "body": "@LukasKalbertodt I added my C++ code and my full Rust code"}], "owner": {"reputation": 200, "user_id": 3814613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/385fc5722b37c1931e5efb25f7acd2db?s=128&d=identicon&r=PG&f=1", "display_name": "user3814613", "link": "https://stackoverflow.com/users/3814613/user3814613"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 702, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1483985538, "creation_date": 1483900157, "last_edit_date": 1483985538, "question_id": 41536256, "link": "https://stackoverflow.com/questions/41536256/opengl-texture-flickers", "title": "OpenGL Texture flickers", "body": "<p>I have the following Rust code to render a cube with a texture. I am using <code>piston2d-opengl_graphics</code> to load the textures.\nMy <code>main.rs</code></p>\n\n<pre><code>extern crate sdl2;\nextern crate glm;\nextern crate gl;\nextern crate libc;\nextern crate num_traits;\nextern crate opengl_graphics;\n\nmod graphics;\n\nuse graphics::shader::Shader;\n\nuse sdl2::video::GLProfile;\nuse sdl2::event::Event;\nuse sdl2::keyboard::Keycode;\n\nuse std::ffi::CString;\nuse std::ptr;\nuse num_traits::identities::One;\nuse gl::types::*;\nuse std::mem;\nuse std::path::Path;\n\nfn find_sdl_gl_driver() -&gt; Option&lt;u32&gt; {\n    for (index, item) in sdl2::render::drivers().enumerate() {\n        if item.name == \"opengl\" {\n            return Some(index as u32);\n        }\n    }\n    None\n}\n\nfn main() {\n    let sdl_context = sdl2::init().unwrap();\n    let video_subsystem = sdl_context.video().unwrap();\n    let gl_attr = video_subsystem.gl_attr();\n\n    gl_attr.set_context_profile(GLProfile::Core);\n    gl_attr.set_context_flags().debug().set();\n    gl_attr.set_context_version(3, 3);\n\n    gl_attr.set_depth_size(24);\n    gl_attr.set_red_size(8);\n    gl_attr.set_green_size(8);\n    gl_attr.set_blue_size(8);\n    gl_attr.set_alpha_size(8);\n    gl_attr.set_stencil_size(8);\n\n    let window = video_subsystem.window(\"Renderer\", 1024, 768,).opengl().build().unwrap();\n    let renderer = window.renderer().present_vsync().index(find_sdl_gl_driver().unwrap()).build().unwrap();\n\n    unsafe {\n        gl::load_with(|name| video_subsystem.gl_get_proc_address(name) as *const _);\n        renderer.window().unwrap().gl_set_context_to_current().unwrap();\n\n        gl::ClearColor(0.0, 0.0, 0.0, 1.0);\n        gl::Enable(gl::DEPTH_TEST);\n        gl::DepthFunc(gl::LESS);\n    }\n\n    let mut vao = 0;\n\n    unsafe {\n        gl::GenVertexArrays(1, &amp;mut vao);\n        gl::BindVertexArray(vao);\n    }\n\n    let shader_program = Shader::new(\"shader.vert\", \"shader.frag\").unwrap();\n    let mvp_location;\n    let texture_sampler_id;\n\n    unsafe {\n        mvp_location = gl::GetUniformLocation(shader_program.program, CString::new(\"MVP\").unwrap().as_ptr());\n        texture_sampler_id = gl::GetUniformLocation(shader_program.program, CString::new(\"texture_sampler\").unwrap().as_ptr());\n    }\n\n    let projection = glm::ext::perspective(45f32, 4f32 / 3f32, 0.1f32, 100f32);\n    let view = glm::ext::look_at(glm::Vec3::new(4f32, 3f32, 3f32),\n                            glm::Vec3::new(0f32, 0f32, 0f32),\n                            glm::Vec3::new(0f32, 1f32, 0f32));\n\n    let model_mat = glm::Matrix4::&lt;f32&gt;::one();\n    let mvp = projection * view * model_mat;\n\n    let mvp_array_vec4 = mvp.as_array();\n\n    let mut mvp_array: Vec&lt;f32&gt; = Vec::new();\n\n    for i in 0..mvp_array_vec4.len() {\n        for j in 0..4 {\n            mvp_array.push(mvp_array_vec4[i][j]);\n        }\n    }\n\n    let cube_vertices = vec![\n        -1.0f32,-1.0f32,-1.0f32,\n        -1.0f32,-1.0f32, 1.0f32,\n        -1.0f32, 1.0f32, 1.0f32,\n         1.0f32, 1.0f32,-1.0f32,\n        -1.0f32,-1.0f32,-1.0f32,\n        -1.0f32, 1.0f32,-1.0f32,\n         1.0f32,-1.0f32, 1.0f32,\n        -1.0f32,-1.0f32,-1.0f32,\n         1.0f32,-1.0f32,-1.0f32,\n         1.0f32, 1.0f32,-1.0f32,\n         1.0f32,-1.0f32,-1.0f32,\n        -1.0f32,-1.0f32,-1.0f32,\n        -1.0f32,-1.0f32,-1.0f32,\n        -1.0f32, 1.0f32, 1.0f32,\n        -1.0f32, 1.0f32,-1.0f32,\n         1.0f32,-1.0f32, 1.0f32,\n        -1.0f32,-1.0f32, 1.0f32,\n        -1.0f32,-1.0f32,-1.0f32,\n        -1.0f32, 1.0f32, 1.0f32,\n        -1.0f32,-1.0f32, 1.0f32,\n         1.0f32,-1.0f32, 1.0f32,\n         1.0f32, 1.0f32, 1.0f32,\n         1.0f32,-1.0f32,-1.0f32,\n         1.0f32, 1.0f32,-1.0f32,\n         1.0f32,-1.0f32,-1.0f32,\n         1.0f32, 1.0f32, 1.0f32,\n         1.0f32,-1.0f32, 1.0f32,\n         1.0f32, 1.0f32, 1.0f32,\n         1.0f32, 1.0f32,-1.0f32,\n        -1.0f32, 1.0f32,-1.0f32,\n         1.0f32, 1.0f32, 1.0f32,\n        -1.0f32, 1.0f32,-1.0f32,\n        -1.0f32, 1.0f32, 1.0f32,\n         1.0f32, 1.0f32, 1.0f32,\n        -1.0f32, 1.0f32, 1.0f32,\n         1.0f32,-1.0f32, 1.0f32\n    ];\n\n    let cube_uv_coords: Vec&lt;GLfloat&gt; = vec![\n        0.000059, 1.0-0.000004,\n        0.000103, 1.0-0.336048,\n        0.335973, 1.0-0.335903,\n        1.000023, 1.0-0.000013,\n        0.667979, 1.0-0.335851,\n        0.999958, 1.0-0.336064,\n        0.667979, 1.0-0.335851,\n        0.336024, 1.0-0.671877,\n        0.667969, 1.0-0.671889,\n        1.000023, 1.0-0.000013,\n        0.668104, 1.0-0.000013,\n        0.667979, 1.0-0.335851,\n        0.000059, 1.0-0.000004,\n        0.335973, 1.0-0.335903,\n        0.336098, 1.0-0.000071,\n        0.667979, 1.0-0.335851,\n        0.335973, 1.0-0.335903,\n        0.336024, 1.0-0.671877,\n        1.000004, 1.0-0.671847,\n        0.999958, 1.0-0.336064,\n        0.667979, 1.0-0.335851,\n        0.668104, 1.0-0.000013,\n        0.335973, 1.0-0.335903,\n        0.667979, 1.0-0.335851,\n        0.335973, 1.0-0.335903,\n        0.668104, 1.0-0.000013,\n        0.336098, 1.0-0.000071,\n        0.000103, 1.0-0.336048,\n        0.000004, 1.0-0.671870,\n        0.336024, 1.0-0.671877,\n        0.000103, 1.0-0.336048,\n        0.336024, 1.0-0.671877,\n        0.335973, 1.0-0.335903,\n        0.667969, 1.0-0.671889,\n        1.000004, 1.0-0.671847,\n        0.667979, 1.0-0.335851\n    ];\n\n    let texture = opengl_graphics::Texture::from_path(&amp;Path::new(\"uvtemplate.jpg\")).unwrap();\n\n    let mut vertex_buffer: GLuint = 0;\n    let mut uv_buffer: GLuint = 0;\n\n    unsafe {\n        // generate buffer for the cube vertices\n        gl::GenBuffers(1, &amp;mut vertex_buffer);\n        gl::BindBuffer(gl::ARRAY_BUFFER, vertex_buffer);\n        gl::BufferData(gl::ARRAY_BUFFER, (cube_vertices.len() * mem::size_of::&lt;f32&gt;()) as GLsizeiptr,\n            mem::transmute(&amp;cube_vertices[0]), gl::STATIC_DRAW);\n\n        // generate buffer for the uv coordinates\n        gl::GenBuffers(1, &amp;mut uv_buffer);\n        gl::BindBuffer(gl::ARRAY_BUFFER, uv_buffer);\n        gl::BufferData(gl::ARRAY_BUFFER, (cube_uv_coords.len() * mem::size_of::&lt;f32&gt;()) as GLsizeiptr,\n            mem::transmute(&amp;cube_uv_coords[0]), gl::STATIC_DRAW);\n    }\n\n    let mut event_pump = sdl_context.event_pump().unwrap();\n\n    'running: loop {\n\n        for event in event_pump.poll_iter() {\n            match event {\n                Event::Quit {..} | Event::KeyDown { keycode: Some(Keycode::Escape), .. } =&gt; {\n                    break 'running\n                },\n                _ =&gt; {}\n            }\n        }\n\n        unsafe { gl::Clear(gl::COLOR_BUFFER_BIT | gl::DEPTH_BUFFER_BIT) };\n\n        shader_program.use_program();\n\n        unsafe {\n\n            gl::UniformMatrix4fv(mvp_location, 1, gl::FALSE, mvp_array.as_ptr());\n\n            // bind texture to texture unit 0 and tell sampler to use unit 0\n            gl::ActiveTexture(gl::TEXTURE0);\n            gl::BindTexture(gl::TEXTURE_2D, texture.get_id());\n            gl::Uniform1i(texture_sampler_id, 0);\n\n            // set vertex data\n            gl::EnableVertexAttribArray(0);\n            gl::BindBuffer(gl::ARRAY_BUFFER, vertex_buffer);\n            gl::VertexAttribPointer(0, 3, gl::FLOAT, gl::FALSE, 0, ptr::null_mut());\n\n            // set uv data\n            gl::EnableVertexAttribArray(1);\n            gl::BindBuffer(gl::ARRAY_BUFFER, uv_buffer);\n            gl::VertexAttribPointer(1, 2, gl::FLOAT, gl::FALSE, 0, ptr::null_mut());\n\n            gl::DrawArrays(gl::TRIANGLES, 0, 12 * 3);\n\n            gl::DisableVertexAttribArray(0);\n            gl::DisableVertexAttribArray(1);\n        }\n\n        renderer.window().unwrap().gl_swap_window();\n    }\n}\n</code></pre>\n\n<p>My <code>shader.rs</code>:</p>\n\n<pre><code>extern crate glm;\nextern crate gl;\n\nuse self::gl::types::*;\nuse std::fs::File;\nuse std::io::Read;\nuse std::io;\nuse std::fmt;\nuse std::error;\nuse std::ffi::CString;\nuse std::ptr;\nuse std::str; \n\n#[derive(Debug)]\npub enum ShaderError {\n    IoError(io::Error),\n    CompilationError(String),\n    LinkError(String),\n    InfoLogError(str::Utf8Error)\n}\n\nimpl fmt::Display for ShaderError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self {\n            ShaderError::IoError(ref error) =&gt; write!(f, \"IO Error: {}\", error),\n            ShaderError::CompilationError(ref error) =&gt; write!(f, \"Shader compilation error: {}\", error),\n            ShaderError::LinkError(ref error) =&gt; write!(f, \"Linking error: {}\", error),\n            ShaderError::InfoLogError(ref error) =&gt; write!(f, \"InfoLog Error: {}\", error),\n        }\n    }\n}\n\nimpl error::Error for ShaderError {\n    fn description(&amp;self) -&gt; &amp;str {\n        match *self {\n            ShaderError::IoError(ref err) =&gt; err.description(),\n            ShaderError::CompilationError(..) =&gt; \"Error during shader compilation\",\n            ShaderError::LinkError(..) =&gt; \"Error during linking\",\n            ShaderError::InfoLogError(ref err) =&gt; err.description(),\n        }\n    }\n\n    fn cause(&amp;self) -&gt; Option&lt;&amp;error::Error&gt; {\n        match *self {\n            ShaderError::IoError(ref error) =&gt; Some(error),\n            ShaderError::InfoLogError(ref error) =&gt; Some(error),\n            _ =&gt; None\n        }\n    }\n}\n\nimpl From&lt;io::Error&gt; for ShaderError {\n    fn from(err: io::Error) -&gt; ShaderError {\n        ShaderError::IoError(err)\n    }\n}\n\nimpl From&lt;str::Utf8Error&gt; for ShaderError {\n    fn from(err: str::Utf8Error) -&gt; ShaderError {\n        ShaderError::InfoLogError(err)\n    }\n}\n\npub struct Shader\n{\n    pub vertex_path: String,\n    pub fragment_path: String,\n    pub program: GLuint\n}\n\nimpl Shader\n{\n    pub fn new(vert_path: &amp;str, frag_path: &amp;str) -&gt; Result&lt;Shader, ShaderError&gt; {\n        let vertex_shader = try!(Shader::compile_shader(vert_path, gl::VERTEX_SHADER));\n        let fragment_shader = try!(Shader::compile_shader(frag_path, gl::FRAGMENT_SHADER));\n        let program = try!(Shader::link_program(vertex_shader, fragment_shader));\n\n        Ok(Shader {\n            vertex_path: vert_path.to_string(),\n            fragment_path: frag_path.to_string(),\n            program: program\n        })\n    }\n\n    fn compile_shader(path: &amp;str, shader_type: GLenum) -&gt; Result&lt;GLuint, ShaderError&gt; {\n        let mut shader_data = String::new();\n        let mut file = try!(File::open(path));\n\n        try!(file.read_to_string(&amp;mut shader_data));\n\n        let shader;\n\n        unsafe {\n            shader = gl::CreateShader(shader_type);\n            let shader_src = CString::new(shader_data.as_bytes()).unwrap();\n            gl::ShaderSource(shader, 1, &amp;shader_src.as_ptr(), ptr::null());\n            gl::CompileShader(shader);\n\n            // Get the compile status\n            let mut status = gl::FALSE as GLint;\n            gl::GetShaderiv(shader, gl::COMPILE_STATUS, &amp;mut status);\n\n            // Fail on error\n            if status != (gl::TRUE as GLint) {\n                let mut len = 0;\n                gl::GetShaderiv(shader, gl::INFO_LOG_LENGTH, &amp;mut len);\n                let mut buf = Vec::with_capacity(len as usize);\n                buf.set_len((len as usize) - 1); // subtract 1 to skip the trailing null character\n                gl::GetShaderInfoLog(shader, len, ptr::null_mut(), buf.as_mut_ptr() as *mut GLchar);\n\n                return match str::from_utf8(&amp;buf) {\n                    Ok(msg) =&gt; Err(ShaderError::CompilationError(msg.to_string())),\n                    Err(err) =&gt; Err(ShaderError::InfoLogError(err))\n                }\n            }\n        }\n        Ok(shader)\n    }\n\n    fn link_program(vertex_shader: GLuint, fragment_shader: GLuint) -&gt; Result&lt;GLuint, ShaderError&gt; {\n        unsafe {\n            let program = gl::CreateProgram();\n            gl::AttachShader(program, vertex_shader);\n            gl::AttachShader(program, fragment_shader);\n            gl::LinkProgram(program);\n\n            // get link status\n            let mut status = gl::FALSE as GLint;\n\n            gl::GetProgramiv(program, gl::LINK_STATUS, &amp;mut status);\n\n            // Fail on error\n            if status != (gl::TRUE as GLint) {\n                let mut len: GLint = 0;\n                gl::GetProgramiv(program, gl::INFO_LOG_LENGTH, &amp;mut len);\n                let mut buf = Vec::with_capacity(len as usize);\n                buf.set_len((len as usize) - 1); // subtract 1 to skip the trailing null character\n                gl::GetProgramInfoLog(program, len, ptr::null_mut(), buf.as_mut_ptr() as *mut GLchar);\n\n                return match str::from_utf8(&amp;buf) {\n                    Ok(msg) =&gt; Err(ShaderError::LinkError(msg.to_string())),\n                    Err(err) =&gt; Err(ShaderError::InfoLogError(err))\n                }\n            }\n\n            Ok(program)\n        }\n    }\n\n    pub fn use_program(&amp;self) {\n        unsafe {\n            gl::UseProgram(self.program);\n        }\n    }\n}\n</code></pre>\n\n<p>My vertex shader:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#version 330 core\n\nlayout(location = 0) in vec3 vertex_position_modelspace;\nlayout(location = 1) in vec2 vertex_uv;\n\nout vec2 uv_coord;\n\nuniform mat4 MVP;\n\nvoid main()\n{\n    gl_Position = MVP * vec4(vertex_position_modelspace, 1);\n\n    uv_coord = uv_coord;\n}\n</code></pre>\n\n<p>My fragment shader:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#version 330 core\n\nin vec2 uv_coord;\n\nout vec3 color;\n\nuniform sampler2D texture_sampler;\n\nvoid main()\n{\n    color = texture(texture_sampler, uv_coord).rgb;\n}\n</code></pre>\n\n<p>Whenever I try and render the cube, I always end up with a results like</p>\n\n<p><a href=\"https://i.stack.imgur.com/fC4sC.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/fC4sC.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/JNGVl.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/JNGVl.png\" alt=\"enter image description here\"></a></p>\n\n<p>It always flickers and doesn't show the proper result: </p>\n\n<p><a href=\"https://i.stack.imgur.com/4qys5.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/4qys5.png\" alt=\"enter image description here\"></a></p>\n\n<p>I tried using <code>glutin</code> as the window manager, but that didn't work, so I tried switching to <code>SDL2</code>, but that doesn't work either. I also tried it with a BMP file instead of a JPEG, but I got the same result. However, if I write the same code in C++, then I get the correct result.</p>\n\n<p>Here's my C++ code, which renders the cube correctly:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\n// Include GLEW\n#include &lt;GL/glew.h&gt;\n\n// Include GLFW\n#include &lt;glfw3.h&gt;\nGLFWwindow* window;\n\n// Include GLM\n#include &lt;glm/glm.hpp&gt;\n#include &lt;glm/ext.hpp&gt;\nusing namespace glm;\n\nGLuint LoadShader(const char * vertex_file_path, const char * fragment_file_path) {\n\n    // Create the shaders\n    GLuint VertexShaderID = glCreateShader(GL_VERTEX_SHADER);\n    GLuint FragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);\n\n    // Read the Vertex Shader code from the file\n    std::string VertexShaderCode;\n    std::ifstream VertexShaderStream(vertex_file_path, std::ios::in);\n    if (VertexShaderStream.is_open()) {\n        std::string Line = \"\";\n        while (getline(VertexShaderStream, Line))\n            VertexShaderCode += \"\\n\" + Line;\n        VertexShaderStream.close();\n    }\n    else {\n        printf(\"Impossible to open %s. \\n\", vertex_file_path);\n        getchar();\n        return 0;\n    }\n\n    // Read the Fragment Shader code from the file\n    std::string FragmentShaderCode;\n    std::ifstream FragmentShaderStream(fragment_file_path, std::ios::in);\n    if (FragmentShaderStream.is_open()) {\n        std::string Line = \"\";\n        while (getline(FragmentShaderStream, Line))\n            FragmentShaderCode += \"\\n\" + Line;\n        FragmentShaderStream.close();\n    }\n\n    GLint Result = GL_FALSE;\n    int InfoLogLength;\n\n    // Compile Vertex Shader\n    printf(\"Compiling shader : %s\\n\", vertex_file_path);\n    char const * VertexSourcePointer = VertexShaderCode.c_str();\n    glShaderSource(VertexShaderID, 1, &amp;VertexSourcePointer, NULL);\n    glCompileShader(VertexShaderID);\n\n    // Check Vertex Shader\n    glGetShaderiv(VertexShaderID, GL_COMPILE_STATUS, &amp;Result);\n    glGetShaderiv(VertexShaderID, GL_INFO_LOG_LENGTH, &amp;InfoLogLength);\n    if (InfoLogLength &gt; 0) {\n        std::vector&lt;char&gt; VertexShaderErrorMessage(InfoLogLength + 1);\n        glGetShaderInfoLog(VertexShaderID, InfoLogLength, NULL, &amp;VertexShaderErrorMessage[0]);\n        printf(\"%s\\n\", &amp;VertexShaderErrorMessage[0]);\n    }\n\n    // Compile Fragment Shader\n    printf(\"Compiling shader : %s\\n\", fragment_file_path);\n    char const * FragmentSourcePointer = FragmentShaderCode.c_str();\n    glShaderSource(FragmentShaderID, 1, &amp;FragmentSourcePointer, NULL);\n    glCompileShader(FragmentShaderID);\n\n    // Check Fragment Shader\n    glGetShaderiv(FragmentShaderID, GL_COMPILE_STATUS, &amp;Result);\n    glGetShaderiv(FragmentShaderID, GL_INFO_LOG_LENGTH, &amp;InfoLogLength);\n    if (InfoLogLength &gt; 0) {\n        std::vector&lt;char&gt; FragmentShaderErrorMessage(InfoLogLength + 1);\n        glGetShaderInfoLog(FragmentShaderID, InfoLogLength, NULL, &amp;FragmentShaderErrorMessage[0]);\n        printf(\"%s\\n\", &amp;FragmentShaderErrorMessage[0]);\n    }\n\n    // Link the program\n    printf(\"Linking program\\n\");\n    GLuint ProgramID = glCreateProgram();\n    glAttachShader(ProgramID, VertexShaderID);\n    glAttachShader(ProgramID, FragmentShaderID);\n    glLinkProgram(ProgramID);\n\n    // Check the program\n    glGetProgramiv(ProgramID, GL_LINK_STATUS, &amp;Result);\n    glGetProgramiv(ProgramID, GL_INFO_LOG_LENGTH, &amp;InfoLogLength);\n    if (InfoLogLength &gt; 0) {\n        std::vector&lt;char&gt; ProgramErrorMessage(InfoLogLength + 1);\n        glGetProgramInfoLog(ProgramID, InfoLogLength, NULL, &amp;ProgramErrorMessage[0]);\n        printf(\"%s\\n\", &amp;ProgramErrorMessage[0]);\n    }\n\n    glDetachShader(ProgramID, VertexShaderID);\n    glDetachShader(ProgramID, FragmentShaderID);\n\n    glDeleteShader(VertexShaderID);\n    glDeleteShader(FragmentShaderID);\n\n    return ProgramID;\n}\n\nGLuint loadBMP(const char * imagepath) {\n\n    printf(\"Reading %s\\n\", imagepath);\n\n    // Data read from the header of the BMP file\n    unsigned char header[54];\n    unsigned int dataPos;\n    unsigned int imageSize;\n    unsigned int width, height;\n    // Actual RGB data\n    unsigned char * data;\n\n    // Open the file\n    FILE * file = fopen(imagepath, \"rb\");\n    if (!file)\n    {\n        printf(\"%s could not be opened.\\n\", imagepath);\n        getchar();\n        return 0;\n    }\n\n    // Read the header, i.e. the 54 first bytes\n\n    // If less than 54 bytes are read, problem\n    if (fread(header, 1, 54, file) != 54) {\n        printf(\"Not a correct BMP file\\n\");\n        return 0;\n    }\n    // A BMP files always begins with \"BM\"\n    if (header[0] != 'B' || header[1] != 'M') {\n        printf(\"Not a correct BMP file\\n\");\n        return 0;\n    }\n    // Make sure this is a 24bpp file\n    if (*(int*)&amp;(header[0x1E]) != 0)\n    {\n        printf(\"Not a correct BMP file\\n\");\n        return 0;\n    }\n    if (*(int*)&amp;(header[0x1C]) != 24)\n    {\n        printf(\"Not a correct BMP file\\n\");\n        return 0;\n    }\n\n    // Read the information about the image\n    dataPos = *(int*)&amp;(header[0x0A]);\n    imageSize = *(int*)&amp;(header[0x22]);\n    width = *(int*)&amp;(header[0x12]);\n    height = *(int*)&amp;(header[0x16]);\n\n    if (imageSize == 0)    imageSize = width*height * 3;\n    if (dataPos == 0)      dataPos = 54;\n\n    data = new unsigned char[imageSize];\n\n    // Read the actual data from the file into the buffer\n    fread(data, 1, imageSize, file);\n\n    fclose(file);\n\n    GLuint textureID;\n    glGenTextures(1, &amp;textureID);\n    glBindTexture(GL_TEXTURE_2D, textureID);\n\n    // Give the image to OpenGL\n    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_BGR, GL_UNSIGNED_BYTE, data);\n\n    delete[] data;\n\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);\n    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\n\n    glGenerateMipmap(GL_TEXTURE_2D);\n\n    return textureID;\n}\n\nint main(void)\n{\n    // Initialise GLFW\n    if (!glfwInit())\n    {\n        fprintf(stderr, \"Failed to initialize GLFW\\n\");\n        return -1;\n    }\n\n    glfwWindowHint(GLFW_SAMPLES, 4);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n\n    window = glfwCreateWindow(1024, 768, \"Tutorial 05 - Textured Cube\", NULL, NULL);\n    if (window == NULL) {\n        fprintf(stderr, \"Failed to open GLFW window. If you have an Intel GPU, they are not 3.3 compatible. Try the 2.1 version of the tutorials.\\n\");\n        glfwTerminate();\n        return -1;\n    }\n    glfwMakeContextCurrent(window);\n\n    // Initialize GLEW\n    glewExperimental = true;\n    if (glewInit() != GLEW_OK) {\n        fprintf(stderr, \"Failed to initialize GLEW\\n\");\n        return -1;\n    }\n\n    glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);\n\n    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\n    glEnable(GL_DEPTH_TEST);\n    glDepthFunc(GL_LESS);\n\n    GLuint VertexArrayID;\n    glGenVertexArrays(1, &amp;VertexArrayID);\n    glBindVertexArray(VertexArrayID);\n\n    GLuint programID = LoadShader(\"shader.vert\", \"shader.frag\");\n\n    GLuint MatrixID = glGetUniformLocation(programID, \"MVP\");\n\n    glm::mat4 Projection = glm::perspective(45.0f, 4.0f / 3.0f, 0.1f, 100.0f);\n\n    glm::mat4 View = glm::lookAt(\n        glm::vec3(4, 3, 3),\n        glm::vec3(0, 0, 0),\n        glm::vec3(0, 1, 0)\n    );\n\n    glm::mat4 Model = glm::mat4(1.0f);\n    glm::mat4 MVP = Projection * View * Model;\n\n    GLuint Texture = loadBMP(\"uvtemplate.bmp\");\n\n    // Get a handle for \"textureSampler\" uniform\n    GLuint TextureID = glGetUniformLocation(programID, \"textureSampler\");\n\n    static const GLfloat g_vertex_buffer_data[] = {\n        -1.0f,-1.0f,-1.0f,\n        -1.0f,-1.0f, 1.0f,\n        -1.0f, 1.0f, 1.0f,\n        1.0f, 1.0f,-1.0f,\n        -1.0f,-1.0f,-1.0f,\n        -1.0f, 1.0f,-1.0f,\n        1.0f,-1.0f, 1.0f,\n        -1.0f,-1.0f,-1.0f,\n        1.0f,-1.0f,-1.0f,\n        1.0f, 1.0f,-1.0f,\n        1.0f,-1.0f,-1.0f,\n        -1.0f,-1.0f,-1.0f,\n        -1.0f,-1.0f,-1.0f,\n        -1.0f, 1.0f, 1.0f,\n        -1.0f, 1.0f,-1.0f,\n        1.0f,-1.0f, 1.0f,\n        -1.0f,-1.0f, 1.0f,\n        -1.0f,-1.0f,-1.0f,\n        -1.0f, 1.0f, 1.0f,\n        -1.0f,-1.0f, 1.0f,\n        1.0f,-1.0f, 1.0f,\n        1.0f, 1.0f, 1.0f,\n        1.0f,-1.0f,-1.0f,\n        1.0f, 1.0f,-1.0f,\n        1.0f,-1.0f,-1.0f,\n        1.0f, 1.0f, 1.0f,\n        1.0f,-1.0f, 1.0f,\n        1.0f, 1.0f, 1.0f,\n        1.0f, 1.0f,-1.0f,\n        -1.0f, 1.0f,-1.0f,\n        1.0f, 1.0f, 1.0f,\n        -1.0f, 1.0f,-1.0f,\n        -1.0f, 1.0f, 1.0f,\n        1.0f, 1.0f, 1.0f,\n        -1.0f, 1.0f, 1.0f,\n        1.0f,-1.0f, 1.0f\n    };\n\n    static const GLfloat g_uv_buffer_data[] = {\n        0.000059f, 1.0f - 0.000004f,\n        0.000103f, 1.0f - 0.336048f,\n        0.335973f, 1.0f - 0.335903f,\n        1.000023f, 1.0f - 0.000013f,\n        0.667979f, 1.0f - 0.335851f,\n        0.999958f, 1.0f - 0.336064f,\n        0.667979f, 1.0f - 0.335851f,\n        0.336024f, 1.0f - 0.671877f,\n        0.667969f, 1.0f - 0.671889f,\n        1.000023f, 1.0f - 0.000013f,\n        0.668104f, 1.0f - 0.000013f,\n        0.667979f, 1.0f - 0.335851f,\n        0.000059f, 1.0f - 0.000004f,\n        0.335973f, 1.0f - 0.335903f,\n        0.336098f, 1.0f - 0.000071f,\n        0.667979f, 1.0f - 0.335851f,\n        0.335973f, 1.0f - 0.335903f,\n        0.336024f, 1.0f - 0.671877f,\n        1.000004f, 1.0f - 0.671847f,\n        0.999958f, 1.0f - 0.336064f,\n        0.667979f, 1.0f - 0.335851f,\n        0.668104f, 1.0f - 0.000013f,\n        0.335973f, 1.0f - 0.335903f,\n        0.667979f, 1.0f - 0.335851f,\n        0.335973f, 1.0f - 0.335903f,\n        0.668104f, 1.0f - 0.000013f,\n        0.336098f, 1.0f - 0.000071f,\n        0.000103f, 1.0f - 0.336048f,\n        0.000004f, 1.0f - 0.671870f,\n        0.336024f, 1.0f - 0.671877f,\n        0.000103f, 1.0f - 0.336048f,\n        0.336024f, 1.0f - 0.671877f,\n        0.335973f, 1.0f - 0.335903f,\n        0.667969f, 1.0f - 0.671889f,\n        1.000004f, 1.0f - 0.671847f,\n        0.667979f, 1.0f - 0.335851f\n    };\n\n    GLuint vertexbuffer;\n    glGenBuffers(1, &amp;vertexbuffer);\n    glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);\n\n    GLuint uvbuffer;\n    glGenBuffers(1, &amp;uvbuffer);\n    glBindBuffer(GL_ARRAY_BUFFER, uvbuffer);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(g_uv_buffer_data), g_uv_buffer_data, GL_STATIC_DRAW);\n\n    do {\n\n        // Clear the screen\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n        glUseProgram(programID);\n\n        glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &amp;MVP[0][0]);\n\n        glActiveTexture(GL_TEXTURE0);\n        glBindTexture(GL_TEXTURE_2D, Texture);\n        glUniform1i(TextureID, 0);\n\n        // 1rst attribute buffer : vertices\n        glEnableVertexAttribArray(0);\n        glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);\n        glVertexAttribPointer(\n            0, \n            3,\n            GL_FLOAT,\n            GL_FALSE,\n            0,\n            (void*)0\n        );\n\n        // 2nd attribute buffer : UVs\n        glEnableVertexAttribArray(1);\n        glBindBuffer(GL_ARRAY_BUFFER, uvbuffer);\n        glVertexAttribPointer(\n            1,\n            2,\n            GL_FLOAT,\n            GL_FALSE,\n            0,\n            (void*)0\n        );\n\n        glDrawArrays(GL_TRIANGLES, 0, 12 * 3);\n\n        glDisableVertexAttribArray(0);\n        glDisableVertexAttribArray(1);\n\n        // Swap buffers\n        glfwSwapBuffers(window);\n        glfwPollEvents();\n\n    } // Check if the ESC key was pressed or the window was closed\n    while (glfwGetKey(window, GLFW_KEY_ESCAPE) != GLFW_PRESS &amp;&amp;\n        glfwWindowShouldClose(window) == 0);\n\n    // Cleanup VBO and shader\n    glDeleteBuffers(1, &amp;vertexbuffer);\n    glDeleteBuffers(1, &amp;uvbuffer);\n    glDeleteProgram(programID);\n    glDeleteTextures(1, &amp;TextureID);\n    glDeleteVertexArrays(1, &amp;VertexArrayID);\n\n    // Close OpenGL window and terminate GLFW\n    glfwTerminate();\n\n    return 0;\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 137, "user_id": 6472567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a673e0546f4d934abb47ca4278ba3816?s=128&d=identicon&r=PG&f=1", "display_name": "Novus", "link": "https://stackoverflow.com/users/6472567/novus"}, "edited": false, "score": 0, "creation_date": 1483884293, "post_id": 41533508, "comment_id": 70272060, "body": "Also, this was just an experiment, I wouldn&#39;t write this type of code normally."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1483884863, "post_id": 41533508, "comment_id": 70272243, "body": "Vec also implements Drop which then drops its members"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 6, "creation_date": 1483886052, "post_id": 41533508, "comment_id": 70272624, "body": "<code>Vec::push</code> takes its argument by value, so <code>x</code> is moved into <code>vector</code>, which is why there&#39;s no error. This has nothing to do with <code>PhantomData</code>..."}, {"owner": {"reputation": 137, "user_id": 6472567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a673e0546f4d934abb47ca4278ba3816?s=128&d=identicon&r=PG&f=1", "display_name": "Novus", "link": "https://stackoverflow.com/users/6472567/novus"}, "edited": false, "score": 1, "creation_date": 1483887189, "post_id": 41533508, "comment_id": 70273006, "body": "Thank Matthieu that makes sense but I am still confused then why the Vec implementation needs PhantomData at all."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1483895011, "post_id": 41533508, "comment_id": 70275616, "body": "You may want to read a bit earlier on that page: &quot;The drop checker will generously determine that Vec&lt;T&gt; does not own any values of type T. This will in turn make it conclude that it doesn&#39;t need to worry about Vec dropping any T&#39;s in its destructor for determining drop check soundness. This will in turn allow people to create unsoundness using Vec&#39;s destructor.&quot;"}, {"owner": {"reputation": 137, "user_id": 6472567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a673e0546f4d934abb47ca4278ba3816?s=128&d=identicon&r=PG&f=1", "display_name": "Novus", "link": "https://stackoverflow.com/users/6472567/novus"}, "edited": false, "score": 0, "creation_date": 1483895731, "post_id": 41533508, "comment_id": 70275875, "body": "I did read that statement, but the word &quot;worry&quot; is ambiguous. What does it mean &quot;worry&quot; about dropping the T&#39;s.  In particular does  using PhantomData have implications for setting the drop flag for the Vec or something along those lines? I appreciate the explanations, maybe I should have been clearer with my initial question."}], "answers": [{"tags": [], "owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "is_accepted": true, "score": 12, "last_activity_date": 1489155154, "creation_date": 1489155154, "answer_id": 42720413, "question_id": 41533508, "link": "https://stackoverflow.com/questions/41533508/what-is-the-phantomdata-actually-doing-in-the-implementation-of-vec/42720413#42720413", "title": "What is the `PhantomData` actually doing in the implementation of `Vec`?", "body": "<p>The <code>PhantomData&lt;T&gt;</code> within <code>Vec&lt;T&gt;</code> (held indirectly via a <code>Unique&lt;T&gt;</code> within <code>RawVec&lt;T&gt;</code>) communicates to the compiler that the vector may own instances of <code>T</code>, and therefore the vector may run destructors for <code>T</code> when the vector is dropped.</p>\n\n<hr>\n\n<p>Deep dive: We have a combination of factors here:</p>\n\n<ul>\n<li><p>We have a <code>Vec&lt;T&gt;</code> which has an <code>impl Drop</code> (i.e. a destructor implementation).</p></li>\n<li><p>Under the rules of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\" rel=\"noreferrer\">RFC 1238</a>, this would usually imply a relationship between instances of <code>Vec&lt;T&gt;</code> and any lifetimes that occur within <code>T</code>, by requiring that all lifetimes within <code>T</code> strictly outlive the vector.</p></li>\n<li><p>However, the destructor for <code>Vec&lt;T&gt;</code> specifically opts out of this semantics <em>for just that destructor</em> (of <code>Vec&lt;T&gt;</code> itself) via the use of special unstable attributes (see <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\" rel=\"noreferrer\">RFC 1238</a> and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md\" rel=\"noreferrer\">RFC 1327</a>). This allows for a vector to hold references that have the same lifetime of the vector itself. This is considered sound; after all, the vector itself will not dereference data pointed to by such references (all its doing is dropping values and deallocating the backing array), as long as an important caveat holds.</p></li>\n<li><p>The important caveat: While the vector itself will not dereference pointers within its contained values while destructing itself, it <em>will</em> drop the values held by the vector. If those values of type <code>T</code> themselves have destructors, those destructors for <code>T</code> get run. And if those destructors access the data held within their references, then we would have a problem <em>if</em> we allowed dangling pointers within those references.</p></li>\n<li><p>So, diving in even more deeply: the way that we confirm dropck validity for a given structure <code>S</code>, we first double check if <code>S</code> itself has an <code>impl Drop for S</code> (and if so, we enforce rules on <code>S</code> with respect to its type parameters). But even after that step, we then recursively <em>descend into</em> the structure of <code>S</code> itself, and double check for each of its fields that everything is kosher according to dropck. (Note that we do this even if a type parameter of <code>S</code> is tagged with <code>#[may_dangle]</code>.)</p></li>\n<li><p>In this specific case, we have a <code>Vec&lt;T&gt;</code> which (indirectly via <code>RawVec&lt;T&gt;</code>/<code>Unique&lt;T&gt;</code>) owns a collection of values of type <code>T</code>, represented in a raw pointer <code>*const T</code>. However, the compiler attaches no ownership semantics to <code>*const T</code>; that field alone in a structure <code>S</code> implies <em>no relationship</em> between <code>S</code> and <code>T</code>, and thus enforces <em>no constraint</em> in terms of the relationship of lifetimes within the types <code>S</code> and <code>T</code> (at least from the viewpoint of dropck).</p></li>\n<li><p>Therefore, if the <code>Vec&lt;T&gt;</code> had <em>solely</em> a <code>*const T</code>, the recursive descent into the structure of the vector would fail to capture the ownership relation between the vector and the instances of <code>T</code> contained within the vector. That, combined with the <code>#[may_dangle]</code> attribute on <code>T</code>, would cause the compiler to accept unsound code (namely cases where destructors for <code>T</code> end up trying to access data that has already been deallocated).</p></li>\n<li><p>BUT: <code>Vec&lt;T&gt;</code> does <em>not</em> solely contain a <code>*const T</code>. There is also a <code>PhantomData&lt;T&gt;</code>, and <em>that</em> conveys to the compiler \"hey, even though you can assume (due to the <code>#[may_dangle] T</code>) that the destructor for <code>Vec</code> won't access data of <code>T</code> when the vector is dropped, it is <em>still</em> possible that some destructor of <code>T</code> <em>itself</em> will access data of <code>T</code> as the vector is dropped.\"</p></li>\n</ul>\n\n<p>The end effect: Given <code>Vec&lt;T&gt;</code>, if <code>T</code> <em>doesn't</em> have a destructor, then the compiler provides you with more flexibility (namely, it allows a vector to hold data with references to data that lives for the same amount of time as the vector itself, even though such data may be torn down before the vector is). But if <code>T</code> <em>does</em> have a destructor (and that destructor is not otherwise communicating to the compiler that it won't access any referenced data), then the compiler is more strict, requiring any referenced data to strictly outlive the vector (thus ensuring that when the destructor for <code>T</code> runs, all the referenced data will still be valid).</p>\n"}], "owner": {"reputation": 137, "user_id": 6472567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a673e0546f4d934abb47ca4278ba3816?s=128&d=identicon&r=PG&f=1", "display_name": "Novus", "link": "https://stackoverflow.com/users/6472567/novus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1364, "favorite_count": 4, "closed_date": 1489160476, "accepted_answer_id": 42720413, "answer_count": 1, "score": 8, "last_activity_date": 1489155154, "creation_date": 1483884106, "last_edit_date": 1483887947, "question_id": 41533508, "link": "https://stackoverflow.com/questions/41533508/what-is-the-phantomdata-actually-doing-in-the-implementation-of-vec", "closed_reason": "Duplicate", "title": "What is the `PhantomData` actually doing in the implementation of `Vec`?", "body": "<p>How does <code>PhantomData</code> work in Rust? <a href=\"https://doc.rust-lang.org/nomicon/phantom-data.html\" rel=\"noreferrer\">In the Nomicon it says the following</a>:</p>\n\n<blockquote>\n  <p>In order to tell dropck that we do own values of type T, and therefore may drop some T's when we drop, we must add an extra PhantomData saying exactly that.</p>\n</blockquote>\n\n<p>To me that seems to imply that when we add a <code>PhantomData</code> field to a structure, say in the case of a <code>Vec</code>.</p>\n\n<pre><code>pub struct Vec&lt;T&gt; {\n    data: *mut T,\n    length: usize,\n    capacity: usize,\n    phantom: PhantomData&lt;T&gt;,\n}\n</code></pre>\n\n<p>that the drop checker should forbid the following sequence of code:</p>\n\n<pre><code>fn main() -&gt; () {\n    let mut vector = Vec::new();\n\n    let x = Box::new(1 as i32);\n    let y = Box::new(2 as i32);\n    let z = Box::new(3 as i32);\n\n    vector.push(x);\n    vector.push(y);\n    vector.push(z);\n}\n</code></pre>\n\n<p>Since the freeing of <code>x</code>, <code>y</code>, and <code>z</code> would occur <strong>before</strong> the freeing of the <code>Vec</code>, I would expect some complaint from the compiler. However, if you run the code above there is no warning or error.</p>\n"}, {"tags": ["struct", "macros", "rust", "traits", "formatter"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1484044778, "last_edit_date": 1484044778, "creation_date": 1483885004, "answer_id": 41533643, "question_id": 41533360, "link": "https://stackoverflow.com/questions/41533360/macro-that-generates-formatters-dynamically-in-rust/41533643#41533643", "title": "Macro that generates formatters dynamically in Rust", "body": "<p><strong>Why are you getting this error?</strong> Let's take a look at the expansion of <code>create_formatters!(MyStruct&lt;T&gt;, std::fmt::Display);</code>:</p>\n\n<pre><code>impl&lt;T: std::fmt::Display&gt; std::fmt::Display for MyStruct&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n        let output = match \"std::fmt::Display\" {\n            \"std::fmt::Display\" =&gt; format!(\"{}\", self.0),\n            \"std::fmt::Debug\" =&gt; format!(\"{:?}\", self.0),\n            // other formatters will be implemented soon\n        };\n        write!(f, \"Content is: {}\", output)\n    }\n}\n</code></pre>\n\n<p>Here, <code>T</code> is only bounded to be <code>Display</code>, but somewhere inside the impl-body, you use the <code>{:?}</code> formatter with the type <code>T</code>. Yes, the match case with <code>{:?}</code> will never be executed during runtime, but the compiler can't know that in the general case. The code for every match arm still needs to be generated! And this is obviously impossible to do.</p>\n\n<p><strong>How to fix it?</strong></p>\n\n<p>Probably the cleanest solution is to avoid the use of formatter strings entirely. If you have a variable of type <code>T</code> which implements a trait, you can just call the method of the trait directly:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n    self.0.fmt(f)\n}\n</code></pre>\n"}], "owner": {"reputation": 95, "user_id": 7388133, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b56835bd5da7c6f8f3fbef2ca4fbe0b1?s=128&d=identicon&r=PG&f=1", "display_name": "Benedikt Schumacher", "link": "https://stackoverflow.com/users/7388133/benedikt-schumacher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 41533643, "answer_count": 1, "score": 0, "last_activity_date": 1484044778, "creation_date": 1483883184, "last_edit_date": 1483889585, "question_id": 41533360, "link": "https://stackoverflow.com/questions/41533360/macro-that-generates-formatters-dynamically-in-rust", "title": "Macro that generates formatters dynamically in Rust", "body": "<p>I'm writing a macro to dynamically generate formatters like <code>Display</code> and <code>Debug</code> for a given struct that contains a single generic type. The code is the following:</p>\n\n<pre><code>macro_rules! create_formatters {\n    ($type_name:ident &lt; $gen_param:ident &gt; ,  $t:path) =&gt; {\n        impl&lt;$gen_param: $t&gt; $t for $type_name&lt;$gen_param&gt; {\n            fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n                let output = match stringify!($t) {\n                    \"std::fmt::Display\" =&gt; format!(\"{}\", self.0),\n                    \"std::fmt::Debug\" =&gt; format!(\"{:?}\", self.0),\n                    // other formatters will be implemented soon\n                };\n                write!(f, \"Content is: {}\", output)\n            }\n        }\n    };\n}\n</code></pre>\n\n<p>The macro is called by <code>create_formatters!(MyStruct&lt;T&gt;, std::fmt::Display);</code> or <code>create_formatters!(MyStruct&lt;T&gt;, std::fmt::Debug);</code></p>\n\n<p>The compiler gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `T: std::fmt::Debug` is not satisfied\n  --&gt; &lt;anon&gt;:8:58\n   |\n8  |                     \"std::fmt::Debug\" =&gt; format!(\"{:?}\", self.0),\n   |                                                          ^^^^^^ the trait `std::fmt::Debug` is not implemented for `T`\n...\n28 | create_formatters!(Swagger&lt;T&gt;, std::fmt::Display);\n   | -------------------------------------------------- in this macro invocation\n   |\n   = help: consider adding a `where T: std::fmt::Debug` bound\n   = note: required by `std::fmt::Debug::fmt`\n</code></pre>\n\n<p>How can I fix it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1483885746, "post_id": 41533162, "comment_id": 70272530, "body": "<i>And it doesn&#39;t work</i> =&gt; I just misplaced my mind-reading crystal ball, could you be slightly more explicit... such as including any compiler error? Please produce a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>."}, {"owner": {"reputation": 141, "user_id": 5031153, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/17g21.jpg?s=128&g=1", "display_name": "Tijl Van den Brugghen", "link": "https://stackoverflow.com/users/5031153/tijl-van-den-brugghen"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483886874, "post_id": 41533162, "comment_id": 70272904, "body": "I added the compiler error message and my <code>Cargo.toml</code>."}], "answers": [{"comments": [{"owner": {"reputation": 141, "user_id": 5031153, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/17g21.jpg?s=128&g=1", "display_name": "Tijl Van den Brugghen", "link": "https://stackoverflow.com/users/5031153/tijl-van-den-brugghen"}, "edited": false, "score": 0, "creation_date": 1483902434, "post_id": 41534878, "comment_id": 70278515, "body": "Could you provide me with the actual fixed code ? After making multiple edits that I think should do what you said I can&#39;t get it working. I just started working with Rust too, 2 days ago, so it&#39;s rather new."}, {"owner": {"reputation": 141, "user_id": 5031153, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/17g21.jpg?s=128&g=1", "display_name": "Tijl Van den Brugghen", "link": "https://stackoverflow.com/users/5031153/tijl-van-den-brugghen"}, "edited": false, "score": 0, "creation_date": 1483981549, "post_id": 41534878, "comment_id": 70311462, "body": "It now results on a <code>cannot borrow immutable borrowed content as mutable</code> on <code>event_handle.read().unwrap()</code>, even if I add <code>mut</code> after every <code>let</code> in the function."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 1, "last_activity_date": 1483904286, "last_edit_date": 1483904286, "creation_date": 1483892672, "answer_id": 41534878, "question_id": 41533162, "link": "https://stackoverflow.com/questions/41533162/use-a-closure-inside-a-thread/41534878#41534878", "title": "Use a closure inside a thread", "body": "<p>You lock the mutex and then try to move the locked object into the thread. That's the wrong way around. You need to clone the <code>Arc</code> and move that into the thread.</p>\n\n<p><strong>Edit:</strong> I haven't tested this, but something like this should work:</p>\n\n<pre><code>pub fn start&lt;F&gt;(&amp;self, mut event_handle: F) -&gt; ()\n    where F: FnMut(Arc&lt;Event&gt;, Arc&lt;SharedMutex&lt;Discord&gt;&gt;) + Send + 'static\n{\n    let (mut connection, _) = self.client.read().unwrap().connect().unwrap();\n    let event_handle = Arc::new(SharedMutex::new(event_handle));\n\n    loop {\n        let event = Arc::new(connection.recv_event().unwrap());\n        let event_handle = event_handle.clone();\n        let client = self.client.clone();\n\n        // Start a thread so we don't block shit\n        thread::spawn(move || {\n\n            // Match event to actions we want to handle\n            event_handle.read().unwrap()(event, client);\n        });\n    }\n}\n</code></pre>\n\n<p>Note that we create clones of the <code>Arc</code>s outside the lambda, and then use them inside. Except for <code>event</code>, which we don't clone, because we're fine with moving the one pointer we have. This moves the clones into the lambda. You could probably get rid of the <code>Arc</code> around <code>Event</code>, though. You don't have any other pointers to it, don't need to keep it alive, and it has to be <code>Send</code> anyway (I think <code>&amp;T</code> is only <code>Sync</code> if <code>T</code> is <code>Send</code>).</p>\n\n<p>If this doesn't work, please update with the new compiler error.</p>\n\n<p>As a side note on terminology, a \"handle\" is an object that refers to some resource. A function that deals with events is a \"handle<strong>r</strong>\".</p>\n"}], "owner": {"reputation": 141, "user_id": 5031153, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/17g21.jpg?s=128&g=1", "display_name": "Tijl Van den Brugghen", "link": "https://stackoverflow.com/users/5031153/tijl-van-den-brugghen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 145, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1483904286, "creation_date": 1483881753, "last_edit_date": 1483887818, "question_id": 41533162, "link": "https://stackoverflow.com/questions/41533162/use-a-closure-inside-a-thread", "title": "Use a closure inside a thread", "body": "<p>I'm trying to use a closure in a thread but after 2 hours of trying I can't seem to find how. Here's the file <code>discord_async.rs</code>:</p>\n\n<pre><code>use discord::*;\nuse discord::model::Event;\nuse std::sync::Arc;\nuse shared_mutex::SharedMutex;\nuse std::thread;\n\npub struct DiscordAsync {\n    client: Arc&lt;SharedMutex&lt;Discord&gt;&gt;\n}\n\nimpl DiscordAsync {\n    pub fn new(bot_token: &amp;str) -&gt; DiscordAsync {\n        let client = Arc::new(SharedMutex::new(Discord::from_bot_token(bot_token).unwrap()));\n        DiscordAsync {\n            client: client\n        }\n    }\n\n    pub fn start&lt;F&gt;(&amp;self, mut event_handle: F) -&gt; () where F: FnMut(Arc&lt;Event&gt;, Arc&lt;SharedMutex&lt;Discord&gt;&gt;) + Send + 'static {\n        let (mut connection, _) = self.client.read().unwrap().connect().unwrap();\n        let event_handle = Arc::new(SharedMutex::new(event_handle));\n\n        loop {\n            let event = Arc::new(connection.recv_event().unwrap());\n            let event_handle = event_handle.read().unwrap();\n\n            // Start a thread so we don't block shit\n            thread::spawn(move || {\n\n                // Match event to actions we want to handle\n                event_handle(event.clone(), self.client);\n            });\n        }\n    }\n}\n</code></pre>\n\n<p>I use it like this in <code>main.rs</code>:</p>\n\n<pre><code>extern crate colored;\nextern crate discord;\nextern crate shared_mutex;\n\nmod discord_async;\n\nuse std::thread;\nuse colored::*;\nuse discord::*;\nuse discord::model::{Event, Channel, ServerId};\nuse discord_async::DiscordAsync;\n\nfn main() {\n    // Server info\n    let bot_token = \"...\";\n    let server_id = ServerId(12345);\n\n    let dis_async = DiscordAsync::new(bot_token);\n    dis_async.start(|event, _| {\n        println!(\"{:?}\", event);\n    });\n}\n</code></pre>\n\n<p>Compiler message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling bottest1 v0.1.0 (file:///home/kindlyfire/Documents/dev/rust/bottest1)\nerror[E0477]: the type `[closure@src/discord_async.rs:29:18: 33:5 event_handle:shared_mutex::SharedMutexReadGuard&lt;'_, F&gt;, event:std::sync::Arc&lt;discord::model::Event&gt;, self:&amp;discord_async::DiscordAsync]` does not fulfill the required lifetime\n  --&gt; src/discord_async.rs:29:4\n   |\n29 |            thread::spawn(move || {\n   |            ^^^^^^^^^^^^^\n   |\n   = note: type must outlive the static lifetime\n</code></pre>\n\n<p>And my <code>Cargo.toml</code>:</p>\n\n<pre><code>[package]\nname = \"bottest1\"\nversion = \"0.1.0\"\nauthors = [\"kindlyfire\"]\n\n[dependencies]\ndiscord = \"0.7.0\"\ncolored = \"1.4\"\nshared-mutex = \"0.2\"\n</code></pre>\n\n<p>I've looked at a lot of different ways to do this, including on SO, but I can't find any that work. </p>\n"}, {"tags": ["import", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1483878618, "post_id": 41532680, "comment_id": 70270391, "body": "How do you compile? What command do you execute in your terminal?"}, {"owner": {"reputation": 167, "user_id": 6421446, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/9ddc6555e8a1e939d28cdc97919987ad?s=128&d=identicon&r=PG&f=1", "display_name": "Sessho", "link": "https://stackoverflow.com/users/6421446/sessho"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1483878738, "post_id": 41532680, "comment_id": 70270424, "body": "It&#39;s simply <code>cargo build</code>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1483879161, "post_id": 41532680, "comment_id": 70270541, "body": "Could you edit your question to include your <code>Cargo.toml</code> then? :)  (PS: StackOverflow pro tip: if you want to notify someone, better write @UserName in your comment!)"}, {"owner": {"reputation": 167, "user_id": 6421446, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/9ddc6555e8a1e939d28cdc97919987ad?s=128&d=identicon&r=PG&f=1", "display_name": "Sessho", "link": "https://stackoverflow.com/users/6421446/sessho"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1483879479, "post_id": 41532680, "comment_id": 70270623, "body": "@LukasKalbertodt doesn&#39;t matter, already solved"}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 4, "last_activity_date": 1483879191, "creation_date": 1483879191, "answer_id": 41532787, "question_id": 41532680, "link": "https://stackoverflow.com/questions/41532680/rust-importing-rs-fails/41532787#41532787", "title": "Rust importing .rs fails", "body": "<p>The problem here is some confusion between crates and modules.  All of your source files are modules in the same crate.  It sounds like <code>lib.rs</code> isn't needed, and you just want a <code>cfgtools</code> module.  <code>extern crate</code> is used to import other libraries kept separately; extern crates also need to be declared in <code>Cargo.toml</code> so that Cargo can find them.</p>\n\n<p>So it should be something like this:</p>\n\n<p><code>main.rs</code>:</p>\n\n\n\n<pre><code>// Declare the module, which will be there as cfgtools.rs in the same directory.\nmod cfgtools;\n\n// Make things in cfgtools visible.  Note that wildcard imports\n// aren't recommended as they can make it confusing to find where\n// things actually come from.\nuse cfgtools::foo;\n\n// and use it:\nfn main() {\n    foo();\n}\n</code></pre>\n\n<p>And <code>cfgtools.rs</code>:</p>\n\n<pre><code>// Note pub to make it visible outside the module\npub fn foo() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>I put those files in <code>src/</code> after <code>cargo init --bin .</code> to create a new blank crates, and <code>cargo run</code> prints out the message.</p>\n"}], "owner": {"reputation": 167, "user_id": 6421446, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/9ddc6555e8a1e939d28cdc97919987ad?s=128&d=identicon&r=PG&f=1", "display_name": "Sessho", "link": "https://stackoverflow.com/users/6421446/sessho"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 105, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1483887731, "creation_date": 1483878418, "last_edit_date": 1483887731, "question_id": 41532680, "link": "https://stackoverflow.com/questions/41532680/rust-importing-rs-fails", "title": "Rust importing .rs fails", "body": "<p>I have three files in my <code>src/</code> folder: <code>main.rs</code>, <code>lib.rs</code> and <code>cfgtools.rs</code>. I want to import <code>cfgtools.rs</code>.</p>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>extern crate cfgtools;\n\nuse cfgtools::*;\n\nfn main() {\n    let os = get_os();\n    println!(\"Your OS: {}\",os);\n}\n</code></pre>\n\n<p><strong>lib.rs</strong></p>\n\n<pre><code>pub mod cfgtools;\n</code></pre>\n\n<p><strong>cfgtools.rs</strong></p>\n\n<pre><code>pub fn get_os() -&gt; &amp;'static str {\n        let mut sys:&amp;'static str = \"unknown\";\n        if cfg!(target_os = \"windows\")   { sys = \"windows\" };\n        if cfg!(target_os = \"macos\")     { sys = \"macos\" };\n        if cfg!(target_os = \"ios\")       { sys = \"ios\" };\n        if cfg!(target_os = \"linux\")     { sys = \"linux\" };\n        if cfg!(target_os = \"android\")   { sys = \"android\" };\n        if cfg!(target_os = \"freebsd\")   { sys = \"freebsd\" };\n        if cfg!(target_os = \"dragonfly\") { sys = \"dragonfly\" };\n        if cfg!(target_os = \"bitrig\")    { sys = \"bitrig\" };\n        if cfg!(target_os = \"openbsd\")   { sys = \"openbsd\" };\n        if cfg!(target_os = \"netbsd\")    { sys = \"netbsd\" };\n        return sys;\n}\n</code></pre>\n\n<p>Still, I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling sys_recog v0.1.0 (file:///home/sessho/rust/sys_recog)\nerror[E0463]: can't find crate for `cfgtools`\n  --&gt; main.rs:17:1\n   |\n17 | extern crate cfgtools;\n   | ^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n</code></pre>\n\n<p>I am new to Rust and this concept of importing.</p>\n"}, {"tags": ["validation", "rust", "modular-arithmetic"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483907822, "post_id": 41530144, "comment_id": 70280378, "body": "Even <i>if</i> something major enough was changed or added to Rust, it would still be appropriate to add those answers to the existing question. Otherwise every single question on Stack Overflow would need to be re-asked every few months on the off chance that something had changed with the surrounding environment. The answer you received here echoes the pre-existing answer (down to the constructor and trait implementations), so I haven&#39;t seen a reason they aren&#39;t duplicates. There&#39;s also the bounty avenue if you believe an older question needs more attention."}, {"owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483910935, "post_id": 41530144, "comment_id": 70281403, "body": "@Shepmaster Thank you for the clarification. That is a fair perspective on the matter."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483911006, "post_id": 41530144, "comment_id": 70281424, "body": "No worries! The broader community might still disagree with me and vote to reopen; I&#39;m just trying to do my part in keeping things tidy. ^_^"}, {"owner": {"reputation": 13302, "user_id": 4082217, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/15ad55dad62ce17d0852311c0e3fa92c?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammad Yusuf", "link": "https://stackoverflow.com/users/4082217/mohammad-yusuf"}, "edited": false, "score": 0, "creation_date": 1483960328, "post_id": 41530144, "comment_id": 70298009, "body": "@Aaron3468 No version related tag for rust?"}, {"owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "reply_to_user": {"reputation": 13302, "user_id": 4082217, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/15ad55dad62ce17d0852311c0e3fa92c?s=128&d=identicon&r=PG&f=1", "display_name": "Mohammad Yusuf", "link": "https://stackoverflow.com/users/4082217/mohammad-yusuf"}, "edited": false, "score": 0, "creation_date": 1484024692, "post_id": 41530144, "comment_id": 70327580, "body": "@MYGz Though they exist and I think there are other factors diminishing the amount of version tags (rust-0.8, rust-0.9, rust-0.11), your implied point is fair. At the moment it seems &quot;rust&quot; is 1.0+ and everything prior is not-quite-rust. But this is the first time I&#39;ve observed a young language becoming de facto, so I don&#39;t know to what extent the terminology -- or need to differentiate -- has solidified."}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 7, "last_activity_date": 1483869075, "creation_date": 1483869075, "answer_id": 41531406, "question_id": 41530144, "link": "https://stackoverflow.com/questions/41530144/how-to-create-a-typesafe-range-limited-numeric-type/41531406#41531406", "title": "How to create a typesafe range-limited numeric type?", "body": "<blockquote>\n  <p>Expose a method which checks parameters before setting the fields, the\n  textbook associated function. This doesn't prevent assigning using the\n  struct constructor.</p>\n</blockquote>\n\n<p>It does if the field is private.</p>\n\n<p>In Rust, functions in the same module, or submodules, can see private items...  but if you put the type into its own module, the private fields are not available from outside:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>mod mynumber {\n    // The struct is public, but the fields are not.\n    // Note I've used a tuple struct, since this is a shallow\n    // wrapper around the underlying type.\n    // Implementing Copy since it should be freely copied,\n    // Clone as required by Copy, and Debug for convenience.\n    #[derive(Clone,Copy,Debug)]\n    pub struct MyNumber(i8);\n</code></pre>\n\n<p>And here's a simple <code>impl</code> with a saturating add, which leverages <code>i8</code>'s built in <code>saturating_add</code> to avoid wrapping so that simple clamping works.  The type can be constructed using the <code>pub fn new</code> function, which now returns an <code>Option&lt;MyNumber&gt;</code> since it can fail.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    impl MyNumber {\n        fn is_in_range(val: i8) -&gt; bool {\n            val &gt;= -100 &amp;&amp; val &lt;= 100\n        }\n        fn clamp(val: i8) -&gt; i8 {\n            if val &lt; -100 {\n                return -100;\n            }\n            if val &gt; 100 {\n                return 100;\n            }\n            // Otherwise return val itself\n            val\n        }\n        pub fn new(val: i8) -&gt; Option&lt;MyNumber&gt; {\n            if MyNumber::is_in_range(val) {\n                Some(MyNumber(val))\n            } else {\n                None\n            }\n        }\n\n        pub fn add(&amp;self, other: MyNumber) -&gt; MyNumber {\n            MyNumber(MyNumber::clamp(self.0.saturating_add(other.0)))\n        }\n    }\n}\n</code></pre>\n\n<p>Other modules can <code>use</code> the type:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use mynumber::MyNumber;\n</code></pre>\n\n<p>And some example uses:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a1 = MyNumber::new(80).unwrap();\n    let a2 = MyNumber::new(70).unwrap();\n    println!(\"Sum: {:?}\", a1.add(a2));\n    // let bad = MyNumber(123); // won't compile; accessing private field\n    let bad_runtime = MyNumber::new(123).unwrap();  // panics\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=efeca776ec23bf2ba7d0cef399503e87&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n\n<p>In a more complete implementation I would probably implement <a href=\"https://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"noreferrer\"><code>std::ops::Add</code></a> etc. so that I could use <code>a1 + a2</code> instead of calling named methods.</p>\n"}], "owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 164, "favorite_count": 1, "accepted_answer_id": 41531406, "answer_count": 1, "score": 5, "last_activity_date": 1483974124, "creation_date": 1483857154, "last_edit_date": 1495541637, "question_id": 41530144, "link": "https://stackoverflow.com/questions/41530144/how-to-create-a-typesafe-range-limited-numeric-type", "title": "How to create a typesafe range-limited numeric type?", "body": "<p>In Rust, I have need of a numeric type with the property of having a domain symmetric around 0. If a number <em>n</em> is a valid value, then the number <em>-n</em> must also be valid. How would I ensure type-safety during initialization and arithmetic? How would it be best to implement modular and saturation arithmetic on the type?</p>\n\n<hr>\n\n<p>The simplest example of the problem is:</p>\n\n<pre><code>type MyNumber = i8; // Bound to domain (-100, 100)\n\nfn main() {\n    let a = MyNumber(128); // Doesn't panic when 128 &gt; 100\n}\n</code></pre>\n\n<hr>\n\n<p>There are a few considerations to make, and I've attempted different solutions. I'll avoid generic programming for the examples of them below:</p>\n\n<ul>\n<li><p>Basing the type off enum ensures that only valid values are possible values. This becomes messy very fast:</p>\n\n<pre><code>enum MyNumber {\n    One,\n    Two,\n    ...\n}\nimpl MyNumber {\n    fn convert(i8) -&gt; MyNumber {\n        match {\n            1 =&gt; MyNumber::One,\n            2 =&gt; MyNumber::Two,\n            ...\n        }\n    }\n}\n</code></pre></li>\n<li><p>Expose a method which checks parameters before setting the fields, the textbook <a href=\"https://doc.rust-lang.org/book/method-syntax.html#associated-functions\" rel=\"nofollow noreferrer\">associated function</a>. This doesn't prevent assigning using the struct constructor.</p></li>\n<li><p>Validate operands (and forcibly rectify them) whenever an operation occurs. This seems reasonable, but requires each method to repeat the validation code.</p>\n\n<pre><code>extern crate num;\n\nuse num::Bounded;\nuse std::cmp;\nstruct MyNumber {\n    val: i8,\n}\n\nimpl Bounded for MyNumber {\n    fn max_value() -&gt; Self {\n        MyNumber { val: 65 }\n    }\n    fn min_value() -&gt; Self {\n        MyNumber { val: -50 }\n    }\n}\nimpl MyNumber {\n    fn clamp(&amp;mut self) {\n        self.val = cmp::min(MyNumber::max_value().val, \n                            cmp::max(MyNumber::min_value().val, self.val))\n    }\n    fn add(&amp;mut self, mut addend: Self) {\n        self.clamp();\n        addend.clamp(); \n        //TODO: wrap or saturate result\n        self.val = self.val + addend.val\n    }\n}\n\nfn main() {\n    let mut a = MyNumber { val: i8::max_value() };\n    let b = MyNumber { val: i8::min_value() };\n    a.add(b);\n    println!(\"{} + {} = {}\",\n             MyNumber::max_value().val,\n             MyNumber::min_value().val, \n             a.val);\n}\n</code></pre></li>\n</ul>\n\n<p>None of the solutions above are very elegant - to some degree this is because they are prototype implementations. There must be a cleaner way to limit the domain of a numeric type! </p>\n\n<p>What combination of type and traits would check bounds, use them for modular/saturation arithmetic, and easily convert to a numeric primitive?</p>\n\n<p>EDIT: This question has been flagged as a duplicate of a much older question from <a href=\"https://stackoverflow.com/questions/27673674/data-type-that-only-takes-on-a-range-of-values\">2014</a>. I do not believe the questions are the same on the grounds that Rust was <a href=\"https://blog.rust-lang.org/2015/01/09/Rust-1.0-alpha.html\" rel=\"nofollow noreferrer\">pre alpha</a> and major improvements to the language were brought with version 1.0. The difference is of a greater scale than that between Python 2 and 3.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 3, "last_activity_date": 1483848186, "last_edit_date": 1483848186, "creation_date": 1483846964, "answer_id": 41529261, "question_id": 41529200, "link": "https://stackoverflow.com/questions/41529200/rust-lifetime-variable-does-not-live-long-enough-error/41529261#41529261", "title": "Rust lifetime - variable does not live long enough error", "body": "<p>You're trying to return a reference to an object that will be destroyed once the function ends. <code>vector_temp</code> will no longer exist once <code>index</code> returns and so returning a reference to it is illegal (because that reference would point to nowhere).</p>\n\n<p>What you want to do, is return the slice you're creating and let the caller decide what to do with it:</p>\n\n<pre><code>impl&lt;T: Clone&gt; Index&lt;usize&gt; for Matrix&lt;T&gt; {\n    type Output = [T];\n\n    fn index(&amp;self, i: usize) -&gt; &amp;[T] {\n        let index = i as i32;\n        let start = (index * &amp;self.num_cols) as usize;\n        let end = (((index + 1) * &amp;self.num_cols) - 1) as usize;\n\n        &amp;self.data[start..end]\n    }\n}\n</code></pre>\n\n<p>You can then have the caller do what you did in your original implementation:</p>\n\n<pre><code>let m1 = Matrix { ... };\nlet owned_vector = m1[index_here].to_owned();\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a35ad73743494310c917410ccd7e3137&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">I am not 100% sure where you go from here</a>, given I'm not sure how much further you're going to take this. Returning the unsized slice can have its problems and so without knowing your specific use case I'm not sure if there is a better way you could handle this.</p>\n\n<p>Hopefully this helps with your immediate issue though.</p>\n"}], "owner": {"reputation": 55, "user_id": 5534715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a81886a0397d2f90bbbcf20844b7b0fe?s=128&d=identicon&r=PG&f=1", "display_name": "user5534715", "link": "https://stackoverflow.com/users/5534715/user5534715"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 310, "favorite_count": 0, "closed_date": 1483887529, "answer_count": 1, "score": 1, "last_activity_date": 1483848186, "creation_date": 1483846210, "question_id": 41529200, "link": "https://stackoverflow.com/questions/41529200/rust-lifetime-variable-does-not-live-long-enough-error", "closed_reason": "Duplicate", "title": "Rust lifetime - variable does not live long enough error", "body": "<p>I'm running into an issue with lifetimes in rust that I'm having trouble figuring out.  I've tried a lot of tweaks to the below but I keep introducing new errors.  I want index to return a Vector object.</p>\n\n<p>I have: </p>\n\n<pre><code>struct Matrix&lt;T&gt; {\n    num_rows: i32,\n    num_cols: i32,\n    data: Vec&lt;T&gt;\n}\n\nstruct Vector&lt;T&gt; {\n    data: Vec&lt;T&gt;\n}\n</code></pre>\n\n<p>And I'm trying to do</p>\n\n<pre><code>impl&lt;T: Clone&gt; Index&lt;usize&gt; for Matrix&lt;T&gt; {\n    type Output = Vector&lt;T&gt;;\n\n    fn index(&amp;self, i: usize) -&gt; &amp;Vector&lt;T&gt; {\n        let index = i as i32;\n        let start = (index * &amp;self.num_cols) as usize;\n        let end = (((index + 1) * &amp;self.num_cols) - 1) as usize;\n        let data_slice = &amp;self.data[start..end];\n        let data = data_slice.to_vec();\n        let vector_temp = Vector::&lt;T&gt;::new(data);\n        return &amp;vector_temp;\n    }\n}\n</code></pre>\n\n<p>But I'm getting </p>\n\n<pre><code>error: `vector_temp` does not live long enough\n  --&gt; src\\main.rs:45:17\n   |\n45 |         return &amp;vector_temp;\n   |                 ^^^^^^^^^^^ does not live long enough\n46 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on        the block at 38:44...\n  --&gt; src\\main.rs:38:45\n   |\n38 |     fn index(&amp;self, i: usize) -&gt; &amp;Vector&lt;T&gt; {\n   |                                             ^\n\n error: aborting due to previous error\n\n error: Could not compile `hello_world`.\n</code></pre>\n\n<p>I haven't fully grokked lifetimes in rust yet so was hoping someone could help me out.  Thanks! </p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 7, "creation_date": 1483830969, "post_id": 41527587, "comment_id": 70261269, "body": "This might be opinionated, but I&#39;d just wrap a new type around the array and implement traits to make it behave like a 2D array, such as <code>Index&lt;(usize,usize), Target=u8&gt;</code>."}, {"owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1483861029, "post_id": 41527587, "comment_id": 70266394, "body": "@E_net4 Exactly. There isn&#39;t much point in writing the data twice in different formats. The only difficult step is using modulo to change a 1 dimensional index into two; Rust only has a remainder function."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1483866435, "post_id": 41527587, "comment_id": 70267491, "body": "Can you read from the file into each sub-array in turn?"}, {"owner": {"reputation": 4156, "user_id": 3072896, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/WWVXA.png?s=128&g=1", "display_name": "Joe Thomas", "link": "https://stackoverflow.com/users/3072896/joe-thomas"}, "reply_to_user": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "edited": false, "score": 0, "creation_date": 1483868913, "post_id": 41527587, "comment_id": 70268042, "body": "@Aaron3468 I can&#39;t really redo the way lookups at this point since there&#39;s a lot of code with the assumption that there is a multidimensional array."}, {"owner": {"reputation": 4156, "user_id": 3072896, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/WWVXA.png?s=128&g=1", "display_name": "Joe Thomas", "link": "https://stackoverflow.com/users/3072896/joe-thomas"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1483868936, "post_id": 41527587, "comment_id": 70268048, "body": "@ChrisEmerson I&#39;ve tried that, but it&#39;s way too slow at startup."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1483869648, "post_id": 41527587, "comment_id": 70268215, "body": "If you really need to reinterpret the 1D array as a 2D array, then it sounds like <code>mem::transmute</code> is the tool you need; you just need to be careful that it&#39;s used correctly."}], "owner": {"reputation": 4156, "user_id": 3072896, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/WWVXA.png?s=128&g=1", "display_name": "Joe Thomas", "link": "https://stackoverflow.com/users/3072896/joe-thomas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 326, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1483887451, "creation_date": 1483830519, "last_edit_date": 1483887451, "question_id": 41527587, "link": "https://stackoverflow.com/questions/41527587/safe-way-to-convert-array-dimensions-in-rust", "title": "Safe way to convert array dimensions in Rust", "body": "<p>I have program that has a large lookup table in it. To save time, rather than generating the appropriate values every time the program runs, I simply load it from a file. </p>\n\n<p>When I read the values from a file buffer, I get an array of <code>u8</code>'s. My lookup table is a two dimensional array of <code>u8</code>'s. Right now I'm using <code>std::mem::transmute</code> to convert from this one dimensional array to the two dimensional array. However, I've noticed that the community generally frowns on the use of <code>std::mem::transmute</code> e.g.</p>\n\n<blockquote>\n  <p>transmute is incredibly unsafe. There are a vast number of ways to cause undefined behavior with this function. transmute should be the absolute last resort.</p>\n  \n  <p><a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/std/mem/fn.transmute.html</a></p>\n</blockquote>\n\n<p>Currently, this is the only efficient way I could think of with the large array that I'm using. Is there a safer or recommended way?</p>\n"}, {"tags": ["compiler-errors", "rust", "type-mismatch"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1483828782, "post_id": 41527266, "comment_id": 70260701, "body": "Removing the <code>where</code> clause on the <code>struct</code> itself makes it work, as does qualifying as e.g. <code>Container::&lt;AliveCat&gt;</code> in <code>alive_cat()</code>.  I think the circular nature of the <code>struct</code>/<code>impl</code> (both need each other) means the inference fails."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1483829293, "post_id": 41527266, "comment_id": 70260841, "body": "One could also get rid of <code>Cat2</code> altogether and implement <code>Container&lt;DeadCat&gt;</code> and <code>Container&lt;AliveCat&gt;</code> in separate <code>impl</code> blocks. But indeed, the failed inference is surprising."}, {"owner": {"reputation": 76, "user_id": 1266662, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0eb4f5268c7e58ddd894128ddc0ec2c6?s=128&d=identicon&r=PG", "display_name": "CallumJHays", "link": "https://stackoverflow.com/users/1266662/callumjhays"}, "edited": false, "score": 0, "creation_date": 1483829796, "post_id": 41527266, "comment_id": 70260964, "body": "Thanks! I had no idea qualifying syntax as you mentioned worked with struct declarations,  which fixes the issue."}], "owner": {"reputation": 76, "user_id": 1266662, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0eb4f5268c7e58ddd894128ddc0ec2c6?s=128&d=identicon&r=PG", "display_name": "CallumJHays", "link": "https://stackoverflow.com/users/1266662/callumjhays"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 229, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1483888622, "creation_date": 1483827939, "last_edit_date": 1483888622, "question_id": 41527266, "link": "https://stackoverflow.com/questions/41527266/rust-mismatched-types-confusing-compiler", "title": "Rust mismatched types confusing compiler", "body": "<p>I've attempted use an impl to handle some strange type logic. Here is a quick reconstruction of the bug:</p>\n\n<pre><code>trait Schrodingers {}\n\nstruct AliveCat;\nimpl Schrodingers for Container&lt;AliveCat&gt; {}\nstruct DeadCat;\nimpl Schrodingers for Container&lt;DeadCat&gt; {}\n\nstruct Container&lt;Cat1&gt;\n    where Container&lt;Cat1&gt;: Schrodingers\n{\n    cat: Cat1,\n}\n\nimpl&lt;Cat2&gt; Container&lt;Cat2&gt;\n    where Container&lt;Cat2&gt;: Schrodingers\n{\n    fn dead_cat() -&gt; Container&lt;DeadCat&gt; {\n        let observed_cat = DeadCat;\n        Container { cat: observed_cat }\n    }\n\n    fn alive_cat() -&gt; Container&lt;AliveCat&gt; {\n        let observed_cat = AliveCat;\n        Container { cat: observed_cat }\n    }\n}\n\nfn main() {\n    let dead_cat = Container::dead_cat();\n    let alive_cat = Container::alive_cat();\n}\n</code></pre>\n\n<p>Which results in the compiler errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:19:26\n   |\n19 |         Container { cat: observed_cat }\n   |                          ^^^^^^^^^^^^ expected type parameter, found struct `DeadCat`\n   |\n   = note: expected type `Cat2`\n   = note:    found type `DeadCat`\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:19:9\n   |\n19 |         Container { cat: observed_cat }\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `DeadCat`, found type parameter\n   |\n   = note: expected type `Container&lt;DeadCat&gt;`\n   = note:    found type `Container&lt;Cat2&gt;`\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:24:26\n   |\n24 |         Container { cat: observed_cat }\n   |                          ^^^^^^^^^^^^ expected type parameter, found struct `AliveCat`\n   |\n   = note: expected type `Cat2`\n   = note:    found type `AliveCat`\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:24:9\n   |\n24 |         Container { cat: observed_cat }\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `AliveCat`, found type parameter\n   |\n   = note: expected type `Container&lt;AliveCat&gt;`\n   = note:    found type `Container&lt;Cat2&gt;`\n</code></pre>\n\n<p>I have been able to solve this using other methods, but why would the compiler find this confusing?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1483832654, "post_id": 41527212, "comment_id": 70261623, "body": "Can you show us that particular dead end?"}, {"owner": {"reputation": 103, "user_id": 2421221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b233e1c0930e6ae458905eac3ae55dbb?s=128&d=identicon&r=PG", "display_name": "AGF", "link": "https://stackoverflow.com/users/2421221/agf"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1483854774, "post_id": 41527212, "comment_id": 70265367, "body": "It suggests to keep putting lifetime information on everything that calls it all the way up to main."}], "owner": {"reputation": 103, "user_id": 2421221, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b233e1c0930e6ae458905eac3ae55dbb?s=128&d=identicon&r=PG", "display_name": "AGF", "link": "https://stackoverflow.com/users/2421221/agf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 138, "favorite_count": 0, "closed_date": 1483887375, "answer_count": 0, "score": 0, "last_activity_date": 1483827507, "creation_date": 1483827507, "question_id": 41527212, "link": "https://stackoverflow.com/questions/41527212/rust-sdl2-ttf-fonts-and-lifetimes", "closed_reason": "Duplicate", "title": "rust-sdl2 ttf fonts and lifetimes", "body": "<p>I'm following along with this <a href=\"http://jadpole.github.io/arcaders/arcaders-1-9\" rel=\"nofollow noreferrer\">tutorial</a>, but trying to update it to use the most recent version of rust-sdl2 which already includes bindings for sdl2_ttf and sdl2_image. My issue is that in the following code</p>\n\n<pre><code>pub struct Phi&lt;'window&gt; {\n    pub events: Events,\n    pub renderer: ::sdl2::render::Renderer&lt;'window&gt;,\n    ttf_context: ::sdl2::ttf::Sdl2TtfContext,\n    cached_fonts: HashMap&lt;(&amp;'static str, u16), ::sdl2::ttf::Font&lt;'window&gt;&gt;,\n}\n\nimpl&lt;'window&gt; Phi&lt;'window&gt; {\n    fn new (events: Events, renderer: ::sdl2::render::Renderer&lt;'window&gt;, \n        ttf_context: ::sdl2::ttf::Sdl2TtfContext) -&gt; Phi&lt;'window&gt; {\n\n        Phi {\n            events: events,\n            renderer: renderer,\n            ttf_context: ttf_context,\n            cached_fonts: HashMap::new(),\n        }\n    }\n\n    pub fn output_size(&amp;self) -&gt; (f64,f64) {\n        let (w,h) = self.renderer.output_size().unwrap();\n        (w as f64, h as f64)\n    }\n\n    pub fn ttf_str_sprite (&amp;mut self, text: &amp;str, font_path: &amp;'static str, \n        size: u16, color: Color) -&gt; Option&lt;Sprite&gt; {\n\n        if let Some(font) = self.cached_fonts.get(&amp;(font_path, size)) {\n            return font.render(text).blended(color).ok()\n                .and_then(|surface| self.renderer.create_texture_from_surface(&amp;surface).ok())\n                .map(Sprite::new)\n        }\n        self.ttf_context.load_font(Path::new(font_path), size).ok()\n            .and_then(|font| {\n                self.cached_fonts.insert((font_path, size), font);\n                self.ttf_str_sprite(text, font_path, size, color)\n            })\n    }\n}\n</code></pre>\n\n<p>I get this compilation error</p>\n\n<pre><code>Compiling arcade-rs v0.1.0 (file:///D:/Programming/Rust/arcade-rs)\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src\\phi/mod.rs:58:20\n   |\n58 |            self.ttf_context.load_font(Path::new(font_path), size).ok()\n   |                             ^^^^^^^^^\n   |\nhelp: consider using an explicit lifetime parameter as shown: fn ttf_str_sprite(&amp;'window mut self, text: &amp;str, font_path: &amp;'static str,\n                  size: u16, color: Color) -&gt; Option&lt;Sprite&gt;\n  --&gt; src\\phi/mod.rs:50:2\n   |\n50 |    pub fn ttf_str_sprite (&amp;mut self, text: &amp;str, font_path: &amp;'static str,\n   |    ^\n\nerror: aborting due to previous error\n\nerror: Could not compile `arcade-rs`.\n</code></pre>\n\n<p>If I go along with the compiler suggestion the original code now compiles fine, but</p>\n\n<pre><code>struct Action{\n\n    func: Box&lt;Fn(&amp;mut Phi) -&gt; ViewAction&gt;,\n    idle_sprite: Sprite,\n    hover_sprite: Sprite,\n}\n\nimpl Action{\n\n    fn new(phi: &amp;mut Phi, label: &amp;'static str, func: Box&lt; Fn(&amp;mut Phi) -&gt; ViewAction&gt;)\n        -&gt; Action{\n            Action {\n                func: func,\n                idle_sprite: phi.ttf_str_sprite(label, \"assets/belligerent.ttf\", 32, \n                    Color::RGB(220,220,220)).unwrap(),\n                hover_sprite: phi.ttf_str_sprite(label, \"assets/belligerent.ttf\", 38,\n                    Color::RGB(255,255,255)).unwrap(),\n            }\n        }\n}\n</code></pre>\n\n<p>now gives the compilation error</p>\n\n<pre><code>   Compiling arcade-rs v0.1.0 (file:///D:/Programming/Rust/arcade-rs)\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src\\views\\main_menu.rs:95:22\n   |\n95 |                            idle_sprite: phi.ttf_str_sprite(label, \"assets/belligerent.ttf\", 32,\n   |                                             ^^^^^^^^^^^^^^\n\nerror[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src\\views\\main_menu.rs:97:23\n   |\n97 |                            hover_sprite: phi.ttf_str_sprite(label, \"assets/belligerent.ttf\", 38,\n   |                                              ^^^^^^^^^^^^^^\n   |\nhelp: consider using an explicit lifetime parameter as shown: fn new&lt;'a&gt;(phi: &amp;'a mut Phi&lt;'a&gt;, label: &amp;'static str,\n           func: Box&lt;Fn(&amp;mut Phi) -&gt; ViewAction&gt;) -&gt; Action\n  --&gt; src\\views\\main_menu.rs:91:2\n   |\n91 |    fn new(phi: &amp;mut Phi, label: &amp;'static str, func: Box&lt; Fn(&amp;mut Phi) -&gt; ViewAction&gt;)\n   |    ^\n\nerror: aborting due to 2 previous errors\nerror: Could not compile `arcade-rs`.\n</code></pre>\n\n<p>Following the compiler suggestions all the way through leads to a dead-end. I'm not sure why it even cares about the lifetime in this case because aren't the Sprites just owned by Action?</p>\n"}, {"tags": ["generics", "macros", "rust"], "comments": [{"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 1, "creation_date": 1483818681, "post_id": 41523542, "comment_id": 70257488, "body": "It does work if you use <code>ident</code> for the fragment specifier used for the trait bound. (That also means you need to call it with <code>Display</code> and add <code>use std::fmt::Display;</code>). But I am not sure why."}], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 5, "last_activity_date": 1483825094, "last_edit_date": 1483825094, "creation_date": 1483822645, "answer_id": 41526473, "question_id": 41523542, "link": "https://stackoverflow.com/questions/41523542/problems-with-creating-an-impl-block-using-a-macro-in-rust/41526473#41526473", "title": "Problems with creating an impl-block using a macro in Rust", "body": "<p>This does seem mysterious!  It seems the problem is down to the way that the output of a macro is parsed: since it's been partly pre-parsed as a <code>path</code> during the macro processing, it no longer matches the parse rule for a trait bound.  There was a <a href=\"https://github.com/rust-lang/rust/issues/38461\" rel=\"nofollow noreferrer\">bug raised a few weeks ago</a> about this.</p>\n\n<p>However, there is good news - <a href=\"https://github.com/rust-lang/rust/pull/38279\" rel=\"nofollow noreferrer\">it's been fixed</a>!  The example actually works in the beta or nightly compilers (<a href=\"https://play.rust-lang.org/?gist=2f9389f27e260f0bc429670afa0a1f42&amp;version=beta&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>), though note I had to rename <code>$trait</code> to <code>$t</code> as <code>trait</code> is a keyword.</p>\n"}], "owner": {"reputation": 95, "user_id": 7388133, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b56835bd5da7c6f8f3fbef2ca4fbe0b1?s=128&d=identicon&r=PG&f=1", "display_name": "Benedikt Schumacher", "link": "https://stackoverflow.com/users/7388133/benedikt-schumacher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 275, "favorite_count": 0, "accepted_answer_id": 41526473, "answer_count": 1, "score": 9, "last_activity_date": 1483825094, "creation_date": 1483805861, "last_edit_date": 1483817436, "question_id": 41523542, "link": "https://stackoverflow.com/questions/41523542/problems-with-creating-an-impl-block-using-a-macro-in-rust", "title": "Problems with creating an impl-block using a macro in Rust", "body": "<p>I want to create a macro generating a given formatter (<code>Display</code>, <code>Debug</code>,...) for a struct containing a single generic type.</p>\n\n<pre><code>macro_rules! create_formatter {\n    ($type_name:ident&lt;$gen_param:ident&gt;, $trait:path) =&gt; {\n        impl&lt;$gen_param: $trait&gt; $trait for $type_name&lt;$gen_param&gt; {\n            fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; Result&lt;(), fmt::Error&gt; {\n                // isn't yet implemented \n            }\n        }\n    };\n}\n</code></pre>\n\n<p>When I call the macro later in the code (<code>create_formatter!(MyStruct&lt;T&gt;, std::fmt::Display);</code>), the compiler gives the following feedback:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `,`, `=`, `&gt;`, or `?`, found `std::fmt::Display`\n--&gt; test.rs:6:26\n |\n6|         impl&lt;$gen_param: $trait&gt; $trait for $type_name&lt;$gen_param&gt; {\n |                          ^^^^^^^^\n</code></pre>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["rust", "language-lawyer", "rvalue", "lvalue"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1483788317, "post_id": 41520642, "comment_id": 70247548, "body": "Funnily enough, <code>*&amp;mut 27 = 28;</code> does compile."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1483788783, "post_id": 41520642, "comment_id": 70247665, "body": "@mcarton in your example, the promotion happens due to the borrowing operator, not the assignment operator. But interesting indeed ^_^"}, {"owner": {"user_type": "does_not_exist", "display_name": "user743382"}, "edited": false, "score": 1, "creation_date": 1483801425, "post_id": 41520642, "comment_id": 70251455, "body": "Related: the documentation appears to also say that <code>let mut a = 1; *&amp;mut (a) = 2; assert_eq!(a, 1);</code> should pass: the <code>a</code> in <code>(a)</code> is not the operand of <code>&amp;mut</code>, so should be converted to an rvalue. <code>(a)</code> then is an rvalue, which is the operand of <code>&amp;mut</code>, so a temporary should be created from it, and that temporary should be assigned <code>2</code>. Instead, <code>a</code> is assigned <code>2</code>. (Simpler is to say <code>(a) = 2;</code> should be rejected, but I think code that compiles either way but has different behaviour at run-time is more interesting.) The compiler behaviour makes sense though, for your code and mine."}], "answers": [{"comments": [{"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "edited": false, "score": 0, "creation_date": 1609240383, "post_id": 46024417, "comment_id": 115785570, "body": "Doesn&#39;t <code>let ref _ = rvalue</code> and <code>let _ = &amp;rvalue</code> is the same thing? I am sure it applies to the <code>ref</code> bindings too."}], "tags": [], "owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "is_accepted": true, "score": 3, "last_activity_date": 1504448881, "creation_date": 1504448881, "answer_id": 46024417, "question_id": 41520642, "link": "https://stackoverflow.com/questions/41520642/why-isnt-this-rvalue-promoted-to-an-lvalue-as-specified-in-the-reference/46024417#46024417", "title": "Why isn&#39;t this rvalue promoted to an lvalue as specified in the reference?", "body": "<p><a href=\"https://doc.rust-lang.org/reference/expressions.html\" rel=\"nofollow noreferrer\">The reference</a> has been updated since the time this question was posted. Now it says that rvalue to lvalue promotion doesn't happen during assignment, so this was apparently an error in the old reference.</p>\n\n<p><a href=\"https://doc.rust-lang.org/reference/expressions.html#borrow-operators\" rel=\"nofollow noreferrer\">Borrow operators</a>:</p>\n\n<blockquote>\n  <p>If the &amp; or &amp;mut operators are applied to an rvalue, a temporary value is created</p>\n</blockquote>\n\n<p>This is probably meant to apply to <code>ref</code> bindings as well, although I don't see it explicitly mentioned.</p>\n\n<p><a href=\"https://doc.rust-lang.org/reference/expressions.html#assignment-expressions\" rel=\"nofollow noreferrer\">Assignment</a>:</p>\n\n<blockquote>\n  <p>The left-hand operand must be an lvalue: using an rvalue results in a compiler error, rather than promoting it to a temporary.</p>\n</blockquote>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 394, "favorite_count": 0, "accepted_answer_id": 46024417, "answer_count": 1, "score": 6, "last_activity_date": 1504448881, "creation_date": 1483786521, "last_edit_date": 1504446763, "question_id": 41520642, "link": "https://stackoverflow.com/questions/41520642/why-isnt-this-rvalue-promoted-to-an-lvalue-as-specified-in-the-reference", "title": "Why isn&#39;t this rvalue promoted to an lvalue as specified in the reference?", "body": "<p>The <a href=\"https://doc.rust-lang.org/reference.html#lvalues-rvalues-and-temporaries\" rel=\"nofollow noreferrer\">Rust Reference</a> says:</p>\n\n<blockquote>\n  <p>The left operand of an assignment or compound-assignment expression is an lvalue context, as is the single operand of a unary borrow.</p>\n  \n  <p>[...]</p>\n  \n  <p>When an rvalue is used in an lvalue context, a temporary un-named lvalue is created and used instead.</p>\n</blockquote>\n\n<p>This rvalue promotion obviously works with borrowing:</p>\n\n<pre><code>let ref_to_i32 = &amp;27;  // a temporary i32 variable with value 27 is created\n</code></pre>\n\n<p>But it doesn't seem to work in an assignment (although the reference speaks about <em>all</em> lvalue contexts, not just borrowing):</p>\n\n<pre><code>27 = 28;   // error[E0070]: invalid left-hand side expression\n</code></pre>\n\n<p>The <a href=\"https://doc.rust-lang.org/error-index.html#E0070\" rel=\"nofollow noreferrer\">error description of E0070</a> doesn't mention this rvalue promotion. Is this a mistake in the reference or is there indeed some way to trigger rvalue promotion with assignment or compound assignment expressions?</p>\n\n<p>There is a third kind of lvalue context, which the reference describes incorrectly, too. Whenever there is a pattern with a <code>ref</code> in it, the left value binding to that pattern is an lvalue context. It turns out that promotion works in this case:</p>\n\n<pre><code>let ref x = 3;  // works\n</code></pre>\n\n<p>So apparently, promotion only doesn't work for (compound-)assignments?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1483757663, "last_edit_date": 1495540427, "creation_date": 1483757663, "answer_id": 41517340, "question_id": 41517187, "link": "https://stackoverflow.com/questions/41517187/split-string-only-once-in-rust/41517340#41517340", "title": "Split string only once in Rust", "body": "<p>You are looking for <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.splitn\" rel=\"noreferrer\"><code>str::splitn</code></a>:</p>\n\n<pre><code>fn split_once(in_string: &amp;str) -&gt; (&amp;str, &amp;str) {\n    let mut splitter = in_string.splitn(2, ':');\n    let first = splitter.next().unwrap();\n    let second = splitter.next().unwrap();\n    (first, second)\n}\n\nfn main() {\n    let (a, b) = split_once(\"hello:world:earth\");\n    println!(\"{} --- {}\", a, b)\n}\n</code></pre>\n\n<p>Note that Rust uses <code>snake_case</code>.</p>\n\n<hr>\n\n<blockquote>\n  <p>I guess it's saying that because splitter only exists inside the function block </p>\n</blockquote>\n\n<p>Nope, it's because you've created a <code>String</code> and are trying to return a reference to it; <a href=\"https://stackoverflow.com/questions/29428227/return-local-string-as-a-slice-str\">you cannot do that</a>. <code>second</code> is what doesn't live long enough.</p>\n\n<blockquote>\n  <p>How to I coerce <code>second</code> into existing beyond the function block?</p>\n</blockquote>\n\n<p>You don't. This is a fundamental aspect of Rust. If something needs to live for a certain mount of time, you <em>just have to make it exist for that long</em>. In this case, as in the linked question, you'd return the <code>String</code>:</p>\n\n<pre><code>fn split_once(in_string: &amp;str) -&gt; (&amp;str, String) {\n    let mut splitter = in_string.split(':');\n    let first = splitter.next().unwrap();\n    let second = splitter.fold(\"\".to_string(), |a, b| a + b); \n    (first, second)\n}\n</code></pre>\n"}], "owner": {"reputation": 435, "user_id": 4314528, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/c6fc8b2a85f97a147671e98dc1bac0ad?s=128&d=identicon&r=PG&f=1", "display_name": "erp", "link": "https://stackoverflow.com/users/4314528/erp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4354, "favorite_count": 0, "accepted_answer_id": 41517340, "answer_count": 1, "score": 8, "last_activity_date": 1483757686, "creation_date": 1483756010, "last_edit_date": 1483757686, "question_id": 41517187, "link": "https://stackoverflow.com/questions/41517187/split-string-only-once-in-rust", "title": "Split string only once in Rust", "body": "<p>I want to split a string by a separator only once and put it into a tuple. I tried doing</p>\n\n<pre><code>fn splitOnce(in_string: &amp;str) -&gt; (&amp;str, &amp;str) {\n    let mut splitter = in_string.split(':');\n    let first = splitter.next().unwrap();\n    let second = splitter.fold(\"\".to_string(), |a, b| a + b); \n    (first, &amp;second)\n}\n</code></pre>\n\n<p>but I keep getting told that <code>second</code> does not live long enough. I guess it's saying that because <code>splitter</code> only exists inside the function block but I'm not really sure how to address that. How to I coerce <code>second</code> into existing beyond the function block? Or is there a better way to split a string only once?</p>\n"}, {"tags": ["attributes", "rust", "inline", "conditional-compilation"], "answers": [{"comments": [{"owner": {"reputation": 57, "user_id": 1562846, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cee6e6c94015f895badabcee303b1942?s=128&d=identicon&r=PG", "display_name": "NeuralSandwich", "link": "https://stackoverflow.com/users/1562846/neuralsandwich"}, "edited": false, "score": 0, "creation_date": 1483743268, "post_id": 41515564, "comment_id": 70237348, "body": "I started looking at the code for a project and the crash happens in an inlined function. The function is inlined even during debug builds (unless I am building it wrong) I know I could just delete the line to work out the issue but I thought it might be handy to know if it could be conditionally applied."}, {"owner": {"reputation": 57, "user_id": 1562846, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cee6e6c94015f895badabcee303b1942?s=128&d=identicon&r=PG", "display_name": "NeuralSandwich", "link": "https://stackoverflow.com/users/1562846/neuralsandwich"}, "edited": false, "score": 0, "creation_date": 1483743484, "post_id": 41515564, "comment_id": 70237451, "body": "Hmm, I still get multiple locations in lldb when using <code>#[cfg_attr(not(debug_assertions), inline)]</code>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 57, "user_id": 1562846, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cee6e6c94015f895badabcee303b1942?s=128&d=identicon&r=PG", "display_name": "NeuralSandwich", "link": "https://stackoverflow.com/users/1562846/neuralsandwich"}, "edited": false, "score": 0, "creation_date": 1483743969, "post_id": 41515564, "comment_id": 70237614, "body": "@NeuralSandwich I changed my code and added a bit explanation. Basically, you can never be sure. The reference says: &quot;<code>#[inline(never)]</code> <b>asks</b> the compiler to never perform an inline expansion&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1483744497, "post_id": 41515564, "comment_id": 70237806, "body": "Might as well mention that <code>#[inline]</code> (no <code>always</code> / <code>never</code>) allows a function to be inlined <i>across crates</i>, but still up to the compiler for the final decision."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 57, "user_id": 1562846, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cee6e6c94015f895badabcee303b1942?s=128&d=identicon&r=PG", "display_name": "NeuralSandwich", "link": "https://stackoverflow.com/users/1562846/neuralsandwich"}, "edited": false, "score": 0, "creation_date": 1483744901, "post_id": 41515564, "comment_id": 70237949, "body": "@NeuralSandwich for the purposes of tracking the problem, why not just force it to not be inlined in all build types?"}, {"owner": {"reputation": 57, "user_id": 1562846, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cee6e6c94015f895badabcee303b1942?s=128&d=identicon&r=PG", "display_name": "NeuralSandwich", "link": "https://stackoverflow.com/users/1562846/neuralsandwich"}, "edited": false, "score": 0, "creation_date": 1483746922, "post_id": 41515564, "comment_id": 70238710, "body": "I&#39;m not sure about my particular problem, even with <code>#[inline(never)]</code> I can still find the symbol in multiple locations. I&#39;m very new to rust so I just did some println! debugging instead of using the debugger. &#175;_(\u30c4)_/&#175;  @LukasKalbertodt was totally right with the original and current answer, I checked the IR and it does clearly work."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1483743871, "last_edit_date": 1483743871, "creation_date": 1483742525, "answer_id": 41515564, "question_id": 41515342, "link": "https://stackoverflow.com/questions/41515342/is-it-possible-to-set-a-function-to-only-be-inlined-during-a-release-build/41515564#41515564", "title": "Is it possible to set a function to only be inlined during a release build?", "body": "<blockquote>\n  <p>[...] is it possible to only include an attribute based on build type [...]?</p>\n</blockquote>\n\n<p>Yes. That's what <a href=\"https://doc.rust-lang.org/reference.html#conditional-compilation\" rel=\"nofollow noreferrer\"><code>cfg_attr</code></a> is for:</p>\n\n<pre><code>#[cfg_attr(not(debug_assertions), inline(always))]\n#[cfg_attr(debug_assertions, inline(never))]\nfn foo() {\n    println!(\"moo\")\n}\n</code></pre>\n\n<p>This is probably the closest you will get to your goal. Note that inline annotations (even with \"always\" and \"never\") can be ignored by the compiler. There are good reasons for that, as you can read below.</p>\n\n<hr>\n\n<p><strong>However</strong>: what do you want to achieve?</p>\n\n<p>Humans are pretty bad at inlining decisions, while compilers are pretty smart. Even without <code>#[inline]</code>, the compiler will inline the function in release mode whenever it's a good idea to do so. And it won't be inlined in debug mode.</p>\n\n<p>If you don't have a very good and special reason to tinker with the inlining yourself, you should not touch it! The compiler will do the right thing in nearly all cases :)</p>\n\n<p>Even <a href=\"https://doc.rust-lang.org/reference.html#inline-attributes\" rel=\"nofollow noreferrer\">the reference</a> says:</p>\n\n<blockquote>\n  <p>The compiler automatically inlines functions based on internal heuristics. Incorrectly inlining functions can actually make the program slower, so it should be used with care.</p>\n</blockquote>\n"}], "owner": {"reputation": 57, "user_id": 1562846, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cee6e6c94015f895badabcee303b1942?s=128&d=identicon&r=PG", "display_name": "NeuralSandwich", "link": "https://stackoverflow.com/users/1562846/neuralsandwich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 0, "accepted_answer_id": 41515564, "answer_count": 1, "score": 3, "last_activity_date": 1483744449, "creation_date": 1483741493, "last_edit_date": 1483744449, "question_id": 41515342, "link": "https://stackoverflow.com/questions/41515342/is-it-possible-to-set-a-function-to-only-be-inlined-during-a-release-build", "title": "Is it possible to set a function to only be inlined during a release build?", "body": "<p>Possible example:</p>\n\n<pre><code>#[inline(release)]\nfn foo() {\n    println!(\"moo\");\n}\n</code></pre>\n\n<p>If not, is it possible to only include an attribute based on build type or another attribute?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483739534, "post_id": 41514708, "comment_id": 70235933, "body": "As the linked duplicate says, use an owned <code>String</code> if you need to own the string."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1483739669, "post_id": 41514708, "comment_id": 70235995, "body": "In short: your x is a local variable of type <code>String</code> which life ends at the end of the function. But you are assigning a reference to it to <code>self</code> which lives <i>longer</i> than the function. That&#39;s illegal, of course. Either use a <code>String</code> in <code>Test</code> or if you&#39;re really concerned about performance, maybe <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;&#39;a, str&gt;</code></a>!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483740204, "post_id": 41514708, "comment_id": 70236188, "body": "<a href=\"http://play.integer32.com/?gist=8e5bdcf1852cc1136af8f9b79275d9e3&amp;version=stable\" rel=\"nofollow noreferrer\">A concrete reimplementation</a>."}, {"owner": {"reputation": 53, "user_id": 882682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b58a6f61b13d15a4d01a128d06f66c39?s=128&d=identicon&r=PG", "display_name": "on_pwogram&#232;", "link": "https://stackoverflow.com/users/882682/on-pwogram%c3%a8"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1483751201, "post_id": 41514708, "comment_id": 70239858, "body": "Thank you @LukasKalbertodt and @Shepmaster!"}], "owner": {"reputation": 53, "user_id": 882682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b58a6f61b13d15a4d01a128d06f66c39?s=128&d=identicon&r=PG", "display_name": "on_pwogram&#232;", "link": "https://stackoverflow.com/users/882682/on-pwogram%c3%a8"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 42, "favorite_count": 0, "closed_date": 1483739402, "answer_count": 0, "score": 1, "last_activity_date": 1483739342, "creation_date": 1483738360, "last_edit_date": 1483739342, "question_id": 41514708, "link": "https://stackoverflow.com/questions/41514708/x-does-not-live-long-enough", "closed_reason": "Duplicate", "title": "&#39;x&#39; does not live long enough", "body": "<p>I'm writing a library to learn Rust in a more efficient way. This  simplified code shows the compiler error I'm getting. It may be really poorly designed also: </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Test&lt;'a&gt; {\n    pub bar: Option&lt;&amp;'a str&gt;,\n}\n\nimpl&lt;'a&gt; Test&lt;'a&gt; {\n    fn new() -&gt; Test&lt;'a&gt; {\n        Test { bar: None }\n    }\n\n    fn foobar(&amp;mut self) -&gt; Result&lt;Option&lt;&amp;str&gt;, String&gt; {\n        self.bar = match self.bar {\n            Some(x) =&gt; Some(x),\n            None =&gt; {\n                match a_function() {\n                    Ok(x) =&gt; Some(x.as_str()),\n                    Err(e) =&gt; return Err(e),\n                }\n            }\n        };\n        Ok(self.bar)\n    }\n}\n\nfn a_function() -&gt; Result&lt;String, String&gt; {\n    Ok(\"hello_world\".to_string())\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `x` does not live long enough\n--&gt; src/main.rs:15:35\n   |\n15 |                     Ok(x) =&gt; Some(x.as_str()),\n   |                                   ^ does not live long enough\n16 |                     Err(e) =&gt; return Err(e),\n17 |                 }\n   |                 - borrowed value only lives until here\n</code></pre>\n\n<p>I think I understand the issue about <code>x</code> going out of scope too soon, but how can I bind any value to <code>self.bar</code> in the <code>foobar</code> method then?</p>\n"}, {"tags": ["rust", "language-lawyer"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 3, "creation_date": 1483736102, "post_id": 41514122, "comment_id": 70234399, "body": "Great answer as usual!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1483802080, "post_id": 41514122, "comment_id": 70251660, "body": "<i>There&#39;s also talk that someday, we might want to pass dynamically-sized types (DSTs) by value, although I don&#39;t understand how.</i> =&gt; There&#39;s a difference between language and implementation. Just because the language considers it a move (pass by value) does not imply that at ABI level the value is not passed by pointer. And thus it is perfectly sensible to have the language pass DST by values with the actual implementation being that a pointer is used. Returning them by value, however, seems trickier :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1483800681, "last_edit_date": 1483800681, "creation_date": 1483735813, "answer_id": 41514122, "question_id": 41513631, "link": "https://stackoverflow.com/questions/41513631/why-is-the-idx-type-parameter-of-the-index-trait-allowed-to-be-unsized/41514122#41514122", "title": "Why is the `Idx` type parameter of the `Index` trait allowed to be unsized?", "body": "<p>I'm pretty sure this is just an accident of history. That looser bound <a href=\"https://github.com/rust-lang/rust/commit/9f1217da9132551ee5708c16aba821fe3c671d09\" rel=\"nofollow noreferrer\">was introduced in 2014</a>. At that time, the trait looked a bit different:</p>\n\n<pre><code>// Syntax predates Rust 1.0!\npub trait Index&lt;Sized? Index, Sized? Result&gt; for Sized? {\n    /// The method for the indexing (`Foo[Bar]`) operation\n    fn index&lt;'a&gt;(&amp;'a self, index: &amp;Index) -&gt; &amp;'a Result;\n}\n</code></pre>\n\n<p>Note that at this point in time, the <code>Index</code> type was passed <em>by reference</em>. Later on the <a href=\"https://github.com/rust-lang/rust/commit/bc1dde468c1613743c919cb9f33923cc9916c5b4\" rel=\"nofollow noreferrer\">renamed <code>Idx</code> type changed to pass by value</a>:</p>\n\n<pre><code>fn index&lt;'a&gt;(&amp;'a self, index: Idx) -&gt; &amp;'a Self::Output;\n</code></pre>\n\n<p>However, note that <em>both</em> forms coexisted in the different compiler bootstrap stages. That's probably why the optional <code>Sized</code> bound couldn't be immediately removed. It's <em>my guess</em> that it basically was forgotten due to more important changes, and now we are where we are.</p>\n\n<p><s>It's an interesting thought experiment to decide if restricting the bound (by removing <code>?Sized</code>) would break anything... maybe someone should submit a PR... ^_^</s></p>\n\n<p>Thought experiment over! <a href=\"https://github.com/rust-lang/rust/pull/38895\" rel=\"nofollow noreferrer\">Lukas submitted a PR</a>! There's been discussion that it might break downstream code that creates subtraits of <code>Index</code> like:</p>\n\n<pre><code>use std::ops::Index;\ntrait SubIndex&lt;I: ?Sized&gt;: Index&lt;I&gt; { }\n</code></pre>\n\n<p>There's also talk that someday, we might want to pass dynamically-sized types (DSTs) by value, although I don't understand how.</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 0, "accepted_answer_id": 41514122, "answer_count": 1, "score": 7, "last_activity_date": 1504446811, "creation_date": 1483733644, "last_edit_date": 1504446811, "question_id": 41513631, "link": "https://stackoverflow.com/questions/41513631/why-is-the-idx-type-parameter-of-the-index-trait-allowed-to-be-unsized", "title": "Why is the `Idx` type parameter of the `Index` trait allowed to be unsized?", "body": "<p>In Rust 1.14, the <a href=\"https://doc.rust-lang.org/1.14.0/std/ops/trait.Index.html\" rel=\"noreferrer\"><code>Index</code> trait</a> is defined as follows:</p>\n\n<pre><code>pub trait Index&lt;Idx&gt; where Idx: ?Sized {\n    type Output: ?Sized;\n    fn index(&amp;self, index: Idx) -&gt; &amp;Self::Output;\n}\n</code></pre>\n\n<p>The implicit <code>Sized</code> bound of the <code>Output</code> type is relaxed with <code>?Sized</code> here. Which makes sense, because the <code>index()</code> method returns a reference to <code>Output</code>. Thus, unsized types can be used, which is useful; example:</p>\n\n<pre><code>impl&lt;T&gt; Index&lt;Range&lt;usize&gt;&gt; for Vec&lt;T&gt; {\n    type Output = [T];  // unsized!\n    fn index(&amp;self, index: Range&lt;usize&gt;) -&gt; &amp;[T] { \u2026 } // no problem: &amp;[T] is sized!\n}\n</code></pre>\n\n<p>The <code>Idx</code> type parameter's implicit bound is also relaxed and can be unsized. But <code>Idx</code> is used by value as method argument and using unsized types as arguments is not possible AFAIK. <strong>Why is <code>Idx</code> allowed to be unsized?</strong></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 6, "creation_date": 1483723659, "post_id": 41510505, "comment_id": 70227942, "body": "I&#39;d just like to point out that there&#39;s a pretty common pattern for &quot;configuration&quot; structs that looks like   <code>let config = MyConfig { option1: 2, option2: None, .. Default::default() }</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 4, "creation_date": 1483724318, "post_id": 41510505, "comment_id": 70228301, "body": "@WesleyWiser yep! although you aren&#39;t restricted to <code>Default::default()</code> there; it can be <code>MyStruct::new()</code> or even an existing variable."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1546868933, "last_edit_date": 1546868933, "creation_date": 1483721890, "answer_id": 41510505, "question_id": 41510424, "link": "https://stackoverflow.com/questions/41510424/most-idiomatic-way-to-create-a-default-struct/41510505#41510505", "title": "Most idiomatic way to create a default struct", "body": "<p>If you <em>had</em> to pick one, implementing the <code>Default</code> trait is the better choice to allow your type to be used generically in more places while the <code>new</code> method is probably what a human trying to use your code directly would look for.</p>\n\n<p>However, your question is a false dichotomy: you can do <strong>both</strong>, and I encourage you to do so! Of course, repeating yourself is silly, so I'd call one from the other (it doesn't really matter which way):</p>\n\n<pre><code>impl Point {\n    fn new() -&gt; Self {\n        Default::default()\n    }\n}\n</code></pre>\n\n<p><a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\" rel=\"noreferrer\">Clippy even has a lint for this exact case!</a></p>\n\n<p>I use <code>Default::default()</code> in structs that have member data structures where I might change out the implementation. For example, I might be currently using a <code>HashMap</code> but want to switch to a <code>BTreeMap</code>. Using <code>Default::default</code> gives me one less place to change.</p>\n\n<hr>\n\n<p>In this particular case, you can even derive <code>Default</code>, making it very succinct: </p>\n\n<pre><code>#[derive(Default)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Point {\n    fn new() -&gt; Self {\n        Default::default()\n    }\n}\n\nfn main() {\n    let _p1 = Point::new();\n    let _p2: Point = Default::default();\n}\n</code></pre>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5274, "favorite_count": 1, "accepted_answer_id": 41510505, "answer_count": 1, "score": 16, "last_activity_date": 1546868933, "creation_date": 1483721644, "question_id": 41510424, "link": "https://stackoverflow.com/questions/41510424/most-idiomatic-way-to-create-a-default-struct", "title": "Most idiomatic way to create a default struct", "body": "<p>To create a default struct, I used to see <code>fn new() -&gt; Self</code> in Rust, but today, I discovered <code>Default</code>. So there are two ways to create a default struct:</p>\n\n<pre><code>struct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Point {\n    fn new() -&gt; Self {\n        Point {\n            x: 0,\n            y: 0,\n        }\n    }\n}\n\nimpl Default for Point {\n    fn default() -&gt; Self {\n        Point {\n            x: 0,\n            y: 0,\n        }\n    }\n}\n\nfn main() {\n    let _p1 = Point::new();\n    let _p2: Point = Default::default();\n}\n</code></pre>\n\n<p>What is the better / the most idiomatic way to do so?</p>\n"}, {"tags": ["generics", "rust", "higher-kinded-types"], "answers": [{"comments": [{"owner": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "edited": false, "score": 1, "creation_date": 1483724958, "post_id": 41509242, "comment_id": 70228652, "body": "thanks for such a long answer! Very interesting. Only the <code>for</code> syntax seems a bit confusing to me but I will definitely read the chapter about it"}, {"owner": {"reputation": 1160, "user_id": 1395536, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/5feed9a5b3d1ace6ab77479fd5669139?s=128&d=identicon&r=PG&f=1", "display_name": "Ricky Han", "link": "https://stackoverflow.com/users/1395536/ricky-han"}, "edited": false, "score": 0, "creation_date": 1521790006, "post_id": 41509242, "comment_id": 85890342, "body": "Thanks. Explains the issue well enough. I think the real power comes from type omission of associated types."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 20, "last_activity_date": 1526314965, "last_edit_date": 1526314965, "creation_date": 1483717872, "answer_id": 41509242, "question_id": 41508680, "link": "https://stackoverflow.com/questions/41508680/generic-struct-over-a-generic-type-without-type-parameter/41509242#41509242", "title": "Generic struct over a generic type without type parameter", "body": "<p>\u21d2 This is <strong>currently impossible</strong> to express in Rust's type system \u2639</p>\n\n<p>Fortunately, it will be possible in the future thanks to \"Generic Associated Types\" as proposed in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"noreferrer\">this RFC</a>. You can track the status of implementation and stabilization in <a href=\"https://github.com/rust-lang/rust/issues/44265\" rel=\"noreferrer\">the corresponding tracking issue</a>.</p>\n\n<hr>\n\n<p>The important term here is \"HKT\" (<em><strong>h</strong>igher <strong>k</strong>inded <strong>t</strong>ypes</em>). It's a feature of a type system which is not yet implemented in Rust. Haskell offers HKTs. In the C++ world HKTs are known as \"template templates\". The generic associated types mentioned above are also a form of HKTs.</p>\n\n<h3>But what are HKTs, really?</h3>\n\n<p>Let's start slowly: what is a simple type as we know it? Let's list some types: <code>i32</code>, <code>bool</code>, <code>String</code>. These are all types... you can have a value (variable) of these types. What about <code>Vec&lt;i32&gt;</code>? It's also a simple type! You can have a variable of type <code>Vec&lt;i32&gt;</code>, no problem! </p>\n\n<p>We want to group these types together; we call this categorisation a \"<em>kind</em> of a type\". If we want to talk in a very abstract way (about types of types) we choose other words, <em>kind</em> in this case. There is even a notation for <em>kinds</em> of types. For our simple types from above, we say: the kind of those types is</p>\n\n<pre><code>*\n</code></pre>\n\n<p>Yes, just a star, very easy. The notation makes more sense later!</p>\n\n<hr>\n\n<p>Let's search for types that are of a different kind than our simple types. <code>Mutex&lt;HashMap&lt;Vec&lt;i32&gt;, String&gt;&gt;</code>? Nope, it's fairly complex maybe, but it's still of kind <code>*</code> and we still can have a variable of that type.</p>\n\n<p>What about <code>Vec</code>? Yes, we omitted the angle-brackets. Yes, this is indeed another kind of type! Can we have a variable of type <code>Vec</code>? No! A vector of <em>what</em>?!</p>\n\n<p>This kind is donated as:</p>\n\n<pre><code>* -&gt; *\n</code></pre>\n\n<p>This just says: give me a normal type (<code>*</code>) and I will return a normal type! Give a normal type <code>i32</code> to this thing (<code>Vec</code>) and it will return a normal type <code>Vec&lt;i32&gt;</code>! It's also called a <em>type constructor</em>, because it is used to construct types. We can even go further:</p>\n\n<pre><code>* -&gt; * -&gt; *\n</code></pre>\n\n<p>This is a bit strange, because it has to do with <a href=\"https://en.wikipedia.org/wiki/Currying\" rel=\"noreferrer\">currying</a> and reads odd for a non-Haskell programmer. But it means: give me <em>two</em> types and I will return a type. Let's think about an example... <code>Result</code>! The <code>Result</code> type constructor will return a concrete type <code>Result&lt;A, B&gt;</code> after you provided two concrete types <code>A</code> and <code>B</code>.</p>\n\n<p>The term <em>higher kinded types</em> just refers to all kinds of types which are not <code>*</code>, which are type constructors. </p>\n\n<h3>In your example</h3>\n\n<p>When you write <code>struct Bar&lt;T: Foo&gt;</code> you want <code>T</code> to be of the kind <code>* -&gt; *</code>, meaning: you can give one type to <code>T</code> and receive a simple type. But as I said, this is not yet expressible in Rust. To use a similar syntax, one might imagine that this could work in the future:</p>\n\n<pre><code>// This does NOT WORK!\nstruct Bar&lt;for&lt;U&gt; T&gt; where T&lt;U&gt;: Foo {\n    a: T&lt;A&gt;,\n    b: T&lt;B&gt;,\n}\n</code></pre>\n\n<p>The <code>for&lt;&gt;</code> syntax is borrowed from <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"noreferrer\">\"higher-ranked trait bounds\" (HRTB)</a>, which can be used today for abstracting over lifetimes (most commonly used with closures).</p>\n\n<h3>Links</h3>\n\n<p>In case you want to read more about this topic, here are some links:</p>\n\n<ul>\n<li><a href=\"http://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/\" rel=\"noreferrer\">Niko Matsakis' great series of blog posts discussing one possible solution (associated type constructors) to the HKT problem</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"noreferrer\">The RFC proposing generic associated types (just a less scary name for \"associated type constructors\")</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35592750/how-does-for-syntax-differ-from-a-regular-lifetime-bound/35595491\">HRTB explanation</a></li>\n</ul>\n\n<hr>\n\n<p><strong>Bonus</strong>: the solution to your problem in case associated type constructors will be implemented (I think, as there is no way to test)!</p>\n\n<p>We have to take a detour in our implementation since the RFC wouldn't allow to pass <code>Rc</code> as a type parameter directly. It doesn't introduce HKTs directly, so to speak. But as Niko argues in his blog post, we can have the same flexibility and power as HKTs with associated type constructors by using so called \"family traits\".</p>\n\n<pre><code>/// This trait will be implemented for marker types, which serve as\n/// kind of a proxy to get the real type.\ntrait RefCountedFamily {\n    /// An associated type constructor. `Ptr` is a type constructor, because\n    /// it is generic over another type (kind * -&gt; *).\n    type Ptr&lt;T&gt;;\n}\n\nstruct RcFamily;\nimpl RefCountedFamily for RcFamily {\n    /// In this implementation we say that the type constructor to construct\n    /// the pointer type is `Rc`.\n    type Ptr&lt;T&gt; = Rc&lt;T&gt;;\n}\n\nstruct ArcFamily;\nimpl RefCountedFamily for ArcFamily {\n    type Ptr&lt;T&gt; = Arc&lt;T&gt;;\n}\n\nstruct Graph&lt;P: RefCountedFamily&gt; {\n    // Here we use the type constructor to build our types\n    nodes: P::Ptr&lt;Node&gt;,\n    edges: P::Ptr&lt;Edge&gt;,\n}\n\n// Using the type is a bit awkward though:\ntype MultiThreadedGraph = Graph&lt;ArcFamily&gt;;\n</code></pre>\n\n<p>For more information, you should really read Niko's blog posts. Difficult topics explained well enough, that even I can understand them more or less!</p>\n\n<p><strong>EDIT</strong>: I just noticed that Niko actually used the <code>Arc</code>/<code>Rc</code> example in his blog post! I totally forgot that and thought of the code above myself... but maybe my subconscious still remembered, as I choose a few names exactly as Niko did. Anyway, here is <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/#parameterizing-over-smart-pointers-and-thread-safety\" rel=\"noreferrer\">his (probably way better) take on the issue</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 7, "last_activity_date": 1483725260, "last_edit_date": 1483725260, "creation_date": 1483721671, "answer_id": 41510432, "question_id": 41508680, "link": "https://stackoverflow.com/questions/41508680/generic-struct-over-a-generic-type-without-type-parameter/41510432#41510432", "title": "Generic struct over a generic type without type parameter", "body": "<p>In a way Rust <em>does</em> have what looks a lot like HKT (see Lukas's answer for a good description of what they are), though with some arguably awkward syntax.</p>\n\n<p>First, you need to define the interface for the pointer type you want, which can be done using a generic trait.  For example: </p>\n\n<pre><code>trait SharedPointer&lt;T&gt;: Clone {\n    fn new(v: T) -&gt; Self;\n    // more, eg: fn get(&amp;self) -&gt; &amp;T;\n}\n</code></pre>\n\n<p>Plus a generic trait which defines an associated type which is the type you really want, which must implement your interface:</p>\n\n<pre><code>trait Param&lt;T&gt; {\n    type Pointer: SharedPointer&lt;T&gt;;\n}\n</code></pre>\n\n<p>Next, we implement that interface for the types we're interested in:</p>\n\n<pre><code>impl&lt;T&gt; SharedPointer&lt;T&gt; for Rc&lt;T&gt; {\n    fn new(v: T) -&gt; Self {\n        Rc::new(v)\n    }\n}\nimpl&lt;T&gt; SharedPointer&lt;T&gt; for Arc&lt;T&gt; {\n    fn new(v: T) -&gt; Self {\n        Arc::new(v)\n    }\n}\n</code></pre>\n\n<p>And define some dummy types which implement the <code>Param</code> trait above.  This is the key part; we can have one type (<code>RcParam</code>) which implements <code>Param&lt;T&gt;</code> for any <code>T</code>, including being able to supply a type, which means we're simulating a higher-kinded type.</p>\n\n<pre><code>struct RcParam;\nstruct ArcParam;\n\nimpl&lt;T&gt; Param&lt;T&gt; for RcParam {\n    type Pointer = Rc&lt;T&gt;;\n}\n\nimpl&lt;T&gt; Param&lt;T&gt; for ArcParam {\n    type Pointer = Arc&lt;T&gt;;\n}\n</code></pre>\n\n<p>And finally we can use it:</p>\n\n<pre><code>struct A;\nstruct B;\n\nstruct Foo&lt;P: Param&lt;A&gt; + Param&lt;B&gt;&gt; {\n    a: &lt;P as Param&lt;A&gt;&gt;::Pointer,\n    b: &lt;P as Param&lt;B&gt;&gt;::Pointer,\n}\n\nimpl&lt;P: Param&lt;A&gt; + Param&lt;B&gt;&gt; Foo&lt;P&gt; {\n    fn new(a: A, b: B) -&gt; Foo&lt;P&gt; {\n        Foo {\n            a: &lt;P as Param&lt;A&gt;&gt;::Pointer::new(a),\n            b: &lt;P as Param&lt;B&gt;&gt;::Pointer::new(b),\n        }\n    }\n}\n\nfn main() {\n    // Look ma, we're using a generic smart pointer type!\n    let foo = Foo::&lt;RcParam&gt;::new(A, B);\n    let afoo = Foo::&lt;ArcParam&gt;::new(A, B);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=081b3883b50e15ecd5f0c4e7eef09f49&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4687, "favorite_count": 6, "accepted_answer_id": 41509242, "answer_count": 2, "score": 11, "last_activity_date": 1526314965, "creation_date": 1483715927, "last_edit_date": 1483721395, "question_id": 41508680, "link": "https://stackoverflow.com/questions/41508680/generic-struct-over-a-generic-type-without-type-parameter", "title": "Generic struct over a generic type without type parameter", "body": "<p>Is it possible to do something like this in Rust?</p>\n\n<pre><code>trait Foo&lt;T&gt; {}\n\nstruct A;\nstruct B;\n\nstruct Bar&lt;T: Foo&gt; {\n    a: T&lt;A&gt;,\n    b: T&lt;B&gt;\n}\n</code></pre>\n\n<p>I know I could just use two parameters for <code>Bar</code>, but I think there has to be a better way to do this.</p>\n\n<p>I want to implement a <code>Graph</code> structure. As I can't just bind the nodes and edges to their parents lifetime, I want to have something like <code>Rc</code>. However, sometimes one may need a <code>Graph</code> with access from multiple threads. So I'd have to have both an implementation with <code>Rc</code> and <code>Arc</code>.</p>\n\n<p>That's what <code>Foo</code> is good for: I implement <code>Foo</code> for both <code>Rc</code> and <code>Arc</code> (<code>Foo</code> would require <code>Deref</code>) and I use a parameter <code>T</code> bound to <code>Foo</code>. That's how I wanted to have one struct for single thread and multi thread usage.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1483710060, "creation_date": 1483710060, "answer_id": 41507013, "question_id": 41506857, "link": "https://stackoverflow.com/questions/41506857/casting-a-primitive-type-to-t-which-is-also-primitive-is-rust/41507013#41507013", "title": "Casting a primitive type to T (which is also primitive) is Rust", "body": "<p>The <code>num</code> crate has a <a href=\"http://rust-num.github.io/num/num/cast/trait.FromPrimitive.html\" rel=\"nofollow noreferrer\"><code>FromPrimitive</code></a> trait which looks like what you want.</p>\n\n<p>So you'd use it like:</p>\n\n<pre><code>use num::FromPrimitive;\n\nfn get_len&lt;T:FromPrimitive&gt;(v: Vec&lt;T&gt;) -&gt; Option&lt;T&gt; {\n    T::from_usize(v.len())\n}\n</code></pre>\n\n<p>And any <code>T</code> would obviously need to implement <code>FromPrimitive</code>; according to the documentation it comes with implementations for the primitive number types and <code>BigInt</code>/<code>BigUint</code>.</p>\n"}], "owner": {"reputation": 5, "user_id": 5483682, "user_type": "registered", "profile_image": "https://graph.facebook.com/912293698852580/picture?type=large", "display_name": "Kamil Rutkowski", "link": "https://stackoverflow.com/users/5483682/kamil-rutkowski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "closed_date": 1483711507, "accepted_answer_id": 41507013, "answer_count": 1, "score": 0, "last_activity_date": 1483710060, "creation_date": 1483709540, "question_id": 41506857, "link": "https://stackoverflow.com/questions/41506857/casting-a-primitive-type-to-t-which-is-also-primitive-is-rust", "closed_reason": "Duplicate", "title": "Casting a primitive type to T (which is also primitive) is Rust", "body": "<p>as I have a problem with casting primitive type (usize) to T.</p>\n\n<p>Now I have something like this:</p>\n\n<pre><code>fn calculate_center_of_points(points: &amp;Vec&lt;point::Point&lt;T&gt;&gt;) -&gt; Option&lt;point::Point&lt;T&gt;&gt;\n{\n    if points.len() == 0\n    {\n        return None\n    }\n    let tmp: T = Default::default();\n    let mut pointCount : T = Default::default();\n    let mut center_point = point::Point::new(tmp, tmp);\n    for p in points\n    {\n        center_point.move_point(p.x,p.y);\n        pointCount = pointCount + T::one();\n    }\n    let center_point = point::Point::new(center_point.x / pointCount, center_point.y / pointCount);\n    Some(center_point)\n}\n</code></pre>\n\n<p>but I would like to achive something like</p>\n\n<pre><code>for p in points\n    {\n        center_point.move_point(p.x,p.y);\n        pointCount = pointCount + T::one();\n    }\n    let center_point = point::Point::new(center_point.x / points.len() as T, center_point.y / points.len() as T);\n</code></pre>\n\n<p>I already looked up the num crate, but I couldn't find something that I would like to use in my \"good\" solution.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1537719439, "last_edit_date": 1537719439, "creation_date": 1483707485, "answer_id": 41506280, "question_id": 41506075, "link": "https://stackoverflow.com/questions/41506075/what-is-the-right-way-to-share-a-reference-between-closures-if-the-value-outlive/41506280#41506280", "title": "What is the right way to share a reference between closures if the value outlives the closures?", "body": "<p>Reference counting is unnecessary here because the entity lives longer than any of the closures. You can get away with:</p>\n\n<pre><code>fn something(f: &amp;mut Foo) {\n    let f = RefCell::new(f);\n\n    let operation = || f.borrow().get();\n    let notify = || {\n        f.borrow_mut().incr();\n    };\n\n    retry(operation, notify);\n\n    println!(\"{:?}\", f);\n}\n</code></pre>\n\n<p>which is quite simpler.</p>\n\n<p>The use of <code>RefCell</code>, however, is necessary to move the enforcement of the <strong>Aliasing XOR Mutability</strong> from compile-time to run-time.</p>\n"}], "owner": {"reputation": 90539, "user_id": 576875, "user_type": "registered", "accept_rate": 43, "profile_image": "https://i.stack.imgur.com/WNlaL.jpg?s=128&g=1", "display_name": "Arnaud Le Blanc", "link": "https://stackoverflow.com/users/576875/arnaud-le-blanc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 428, "favorite_count": 0, "accepted_answer_id": 41506280, "answer_count": 1, "score": 2, "last_activity_date": 1537719439, "creation_date": 1483706762, "last_edit_date": 1537719373, "question_id": 41506075, "link": "https://stackoverflow.com/questions/41506075/what-is-the-right-way-to-share-a-reference-between-closures-if-the-value-outlive", "title": "What is the right way to share a reference between closures if the value outlives the closures?", "body": "<p>I want to share a reference between two closures; mutably in one closure. This is an artificial situation, but I find it interesting in the context of learning Rust.</p>\n\n<p>In order to make it work, I had to make use of <code>Rc</code>, <code>Weak</code>, and <code>RefCell</code>. Is there a simpler way of achieving this?</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Foo {\n    i: i32,\n}\n\nimpl Foo {\n    fn get(&amp;self) -&gt; i32 {\n        self.i\n    }\n    fn incr(&amp;mut self) {\n        self.i += 1\n    }\n}\n\nfn retry&lt;O, N&gt;(mut operation: O, mut notify: N) -&gt; i32\nwhere\n    O: FnMut() -&gt; i32,\n    N: FnMut() -&gt; (),\n{\n    operation();\n    notify();\n    operation()\n}\n\nfn something(f: &amp;mut Foo) {\n    let f_rc = Rc::new(RefCell::new(f));\n    let f_weak = Rc::downgrade(&amp;f_rc);\n\n    let operation = || {\n        // f.get()\n        let cell = f_weak.upgrade().unwrap();\n        let f = cell.borrow();\n        f.get()\n    };\n\n    let notify = || {\n        // f.incr();\n        let cell = f_weak.upgrade().unwrap();\n        let mut f = cell.borrow_mut();\n        f.incr();\n    };\n\n    retry(operation, notify);\n\n    println!(\"{:?}\", f_rc);\n}\n\nfn main() {\n    let mut f = Foo { i: 1 };\n    something(&amp;mut f);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-compiler-plugin"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1483702732, "post_id": 41503880, "comment_id": 70214992, "body": "Nice one, it&#39;s something that can indeed puzzle newcomers who didn&#39;t follow the development of the crate!"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1483702807, "post_id": 41503881, "comment_id": 70215035, "body": "What I personally would like to see is a <code>const fn</code> story sufficiently advanced to allow allocating memory, such that a Regex could be compiled at compile-time without any trick... may never see the light of day and would not help much for the Lazy DFA approach."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 4, "creation_date": 1483705004, "post_id": 41503881, "comment_id": 70216280, "body": "I think &quot;potential to run a lot faster&quot; is overstating things. Otherwise, good answer. :-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 4, "creation_date": 1483708944, "post_id": 41503881, "comment_id": 70218790, "body": "@BurntSushi5 psssh, what do you even know about it anyway? (For others: BurntSushi5 is the primary author of the regex crate ^_^)"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1483709175, "post_id": 41503881, "comment_id": 70218936, "body": "@BurntSushi5 I slightly edited the sentence ;-) I guess I just really like the idea that regexes could compile down to the exact code, I would have written by hand (or probably even better code!)."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 12, "last_activity_date": 1483709238, "last_edit_date": 1483709238, "creation_date": 1483699210, "answer_id": 41503881, "question_id": 41503880, "link": "https://stackoverflow.com/questions/41503880/why-isnt-regex-a-wrapper-for-regexnew-to-offer-the-same-regex-matching-s/41503881#41503881", "title": "Why isn&#39;t `regex!` a wrapper for `Regex::new` to offer the same regex matching speed?", "body": "<p>The answer is very subtle: one feature of the macro is that <strong>the result of <code>regex!</code> can be put into <em>static</em> data</strong>, like so:</p>\n\n<pre><code>static r: Regex = regex!(\"t?rust\");\n</code></pre>\n\n<p>The main problem is that <code>Regex::new()</code> uses heap allocations during the regex compilation. This is problematic and would require a rewrite of the <code>Regex::new()</code> engine to also allow for static storage. You can also read <a href=\"https://www.reddit.com/r/rust/comments/3b2i0f/psa_regex_is_now_slower_than_regexnew/csi9n3c/\" rel=\"noreferrer\">burntsushi's comment about this issue on reddit</a>.</p>\n\n<hr>\n\n<p>There are some suggestions about how to improve <code>regex!</code>:</p>\n\n<ul>\n<li>Drop the <code>static</code> support and just <em>validate</em> the regex string at compile time while still <em>compiling</em> the regex at runtime</li>\n<li>Keep the <code>static</code> support by using a similar trick as <code>lazy_static!</code> does</li>\n</ul>\n\n<p>As of the beginning of 2017, the developers are focused on stabilizing the standard API to release version 1.0. Since <code>regex!</code> requires a nightly compiler anyway, it has a low priority right now.</p>\n\n<p>However, the compiler-plugin approach could offer even better performance than <code>Regex::new()</code>, which is already super fast: since the regex's DFA  <a href=\"https://www.reddit.com/r/rust/comments/45yxcz/psa_regex_got_a_lazy_dfa_its_fast/d02648z/\" rel=\"noreferrer\">could be compiled into code instead of data</a>, it has the potential to run a bit faster and benefit from compiler optimizations. But more research has to be done in the future to know for sure.</p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1147, "favorite_count": 0, "accepted_answer_id": 41503881, "answer_count": 1, "score": 11, "last_activity_date": 1483709238, "creation_date": 1483699210, "last_edit_date": 1483709072, "question_id": 41503880, "link": "https://stackoverflow.com/questions/41503880/why-isnt-regex-a-wrapper-for-regexnew-to-offer-the-same-regex-matching-s", "title": "Why isn&#39;t `regex!` a wrapper for `Regex::new` to offer the same regex matching speed?", "body": "<p>The <a href=\"https://github.com/rust-lang/regex\" rel=\"noreferrer\">Rust Regex crate</a> offers the <code>regex!</code> syntax extension which makes it possible to compile a regex during the standard compile time. This is good in two ways:</p>\n\n<ul>\n<li>we don't need to do that work during runtime (better program performance)</li>\n<li>if our regex is malformed, the compiler can tell us during compilation instead of triggering a runtime panic</li>\n</ul>\n\n<p>Unfortunately, the docs say:</p>\n\n<blockquote>\n  <p><strong>WARNING:</strong> The <code>regex!</code> compiler plugin is orders of magnitude slower than the normal <code>Regex::new(...)</code> usage. You should not use the compiler plugin unless you have a very special reason for doing so. </p>\n</blockquote>\n\n<p>This sounds like a completely different regex engine is used for <code>regex!</code> than for <code>Regex::new()</code>. Why isn't <code>regex!()</code> just a wrapper for <code>Regex::new()</code> to combine the advantages from both worlds? As I understand it, these syntax-extension compiler plugins can execute arbitrary code; why not <code>Regex::new()</code>?</p>\n"}, {"tags": ["rust", "freebsd", "lldb", "debug-symbols"], "comments": [{"owner": {"reputation": 1004, "user_id": 239140, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/03c738a97e4f7e8dd46a846224fb275b?s=128&d=identicon&r=PG", "display_name": "myfreeweb", "link": "https://stackoverflow.com/users/239140/myfreeweb"}, "edited": false, "score": 0, "creation_date": 1496447547, "post_id": 41502490, "comment_id": 75681459, "body": "I&#39;m also getting backtraces full of  &lt;unknown&gt; with RUST_BACKTRACE on 11-STABLE\u2026 :("}], "owner": {"reputation": 21, "user_id": 7383159, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-XwzkLI-O-oM/AAAAAAAAAAI/AAAAAAAAQfY/tIP01-WceBo/photo.jpg?sz=128", "display_name": "Ulrich Alt", "link": "https://stackoverflow.com/users/7383159/ulrich-alt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 211, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1483950144, "creation_date": 1483694466, "last_edit_date": 1483950144, "question_id": 41502490, "link": "https://stackoverflow.com/questions/41502490/lldb-does-not-display-source-for-rust-program-on-freebsd-12", "title": "LLDB does not display source for Rust program on FreeBSD 12", "body": "<p>When using LLDB to debug a simple Rust program, I am not shown the source code. It seems like the debug information can not be read. Here is a log of what I am trying to do. To double-check, I have also done a test with a small C++ program and its source displays fine.</p>\n\n<p>There is no change when using stable Rust or when leaving out the <code>[profile.dev]</code> section of Cargo.toml.</p>\n\n<p>The same thing works fine on an Arch Linux machine with LLDB 3.9.1 and stable Rust.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>~/tsupdate_rust/target% lldb --version\nlldb version 3.9.0 ( revision )\n~/tsupdate_rust/target% rustc --version\nrustc 1.16.0-nightly (468227129 2017-01-03)\n~/tsupdate_rust/target% uname -a\nFreeBSD trueos-7337.west-gmbh 12.0-CURRENT FreeBSD 12.0-CURRENT #11 8b9df91(drm-next-4.7): Sat Dec 24 15:17:28 UTC 2016     root@gauntlet:/usr/obj/usr/src/sys/GENERIC  amd64\n~/tsupdate_rust/target% cargo build\n    Finished debug [unoptimized + debuginfo] target(s) in 0.1 secs\n~/tsupdate_rust/target% lldb debug/tsupdate test 7.10\n(lldb) target create \"debug/tsupdate\"\nCurrent executable set to 'debug/tsupdate' (x86_64).\n(lldb) settings set -- target.run-args  \"test\" \"7.10\"\n(lldb) b tsupdate::main\nBreakpoint 1: where = tsupdate`tsupdate::main::h8bec70c0222b27b2 + 11, address = 0x00000000000a882b\n(lldb) r\nProcess 7265 launching\nProcess 7265 launched: '/usr/home/ualt/tsupdate_rust/target/debug/tsupdate' (x86_64)\nProcess 7265 stopped\n* thread #1: tid = 101113, 0x00000000010c982b tsupdate`tsupdate::main::h8bec70c0222b27b2 + 11, stop reason = breakpoint 1.1\n    frame #0: 0x00000000010c982b tsupdate`tsupdate::main::h8bec70c0222b27b2 + 11\ntsupdate`tsupdate::main::h8bec70c0222b27b2:\n-&gt;  0x10c982b &lt;+11&gt;: movb   $0x0, -0x2e1(%rbp)\n    0x10c9832 &lt;+18&gt;: movb   $0x0, -0x2de(%rbp)\n    0x10c9839 &lt;+25&gt;: movb   $0x0, -0x2db(%rbp)\n    0x10c9840 &lt;+32&gt;: movb   $0x0, -0x2d9(%rbp)\n(lldb) image list\n[  0] 01FC6739-0000-0000-0000-000000000000                    /usr/home/ualt/tsupdate_rust/target/debug/tsupdate\n[  1] 1F9F33BA-0000-0000-0000-000000000000                    /lib/libthr.so.3\n      /usr/lib/debug/lib/libthr.so.3.debug\n[  2] C0DF7F3D-0000-0000-0000-000000000000                    /lib/libgcc_s.so.1\n      /usr/lib/debug/lib/libgcc_s.so.1.debug\n[  3] 53AD8C42-0000-0000-0000-000000000000                    /lib/libc.so.7\n      /usr/lib/debug/lib/libc.so.7.debug\n[  4] D9B23F51-0000-0000-0000-000000000000                    /libexec/ld-elf.so.1\n      /usr/lib/debug/libexec/ld-elf.so.1.debug\n(lldb) script lldb.target.module['/usr/home/ualt/tsupdate_rust/target/debug/tsupdate']\n&lt;lldb.SBModule; proxy of &lt;Swig Object of type 'lldb::SBModule *' at 0x808f3d660&gt; &gt;\n(lldb) script lldb.target.module['/usr/home/ualt/tsupdate_rust/target/debug/tsupdate'].GetNumCompileUnits()\n60\n(lldb) q\nQuitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y\n~/tsupdate_rust/target% \n~/tsupdate_rust/target% cd ~/cpp\n~/cpp% clang++ --version\nclang version 3.9.0 (tags/RELEASE_390/final)\nTarget: x86_64-unknown-freebsd12.0\nThread model: posix\nInstalledDir: /usr/local/llvm39/bin\n~/cpp% clang++ -g hello.cc \n~/cpp% lldb a.out\n(lldb) target create \"a.out\"\nCurrent executable set to 'a.out' (x86_64).\n(lldb) b main\nBreakpoint 1: where = a.out`main + 35 at hello.cc:4, address = 0x0000000000401083\n(lldb) r\nProcess 7562 launching\nProcess 7562 launched: '/usr/home/ualt/cpp/a.out' (x86_64)\nProcess 7562 stopped\n* thread #1: tid = 101114, 0x0000000000401083 a.out`main + 35 at hello.cc:4, stop reason = breakpoint 1.1\n    frame #0: 0x0000000000401083 a.out`main + 35 at hello.cc:4\n   1    #include &lt;iostream&gt;\n   2   \n   3    int main() {\n-&gt; 4      std::cout &lt;&lt; \"Hello !\" &lt;&lt; std::endl;\n   5      return 0;\n   6    }\n   7   \n(lldb) q\nQuitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] \n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"tsupdate\"\nversion = \"0.1.0\"\nauthors = [\"ualt\"]\n\n[dependencies]\nregex = \"^0.2.1\"\nyaml-rust = \"^0.3.5\"\ndocopt = \"^0.6.86\"\nrustc-serialize = \"^0.3.22\"\nhyper = { version = \"0.9\", default-features=false, features=[] }\nmd5 = \"^0.3.2\"\n\n[profile.dev]\nopt-level = 0\ndebug = true\nlto = false\nrpath = false\ndebug-assertions = true\ncodegen-units = 1\npanic = 'unwind'\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1483719135, "post_id": 41501411, "comment_id": 70225074, "body": "I <i>suspect</i> this is a bug, but I&#39;m <i>very</i> sure that error message pointing at nothing is a bug too, so <a href=\"https://github.com/rust-lang/rust/issues/38875\" rel=\"nofollow noreferrer\">I filed that</a>."}, {"owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "edited": false, "score": 0, "creation_date": 1520067444, "post_id": 41501411, "comment_id": 85170119, "body": "This works as of Rust 1.18, released Jun 8, 2017."}], "owner": {"reputation": 71, "user_id": 5934166, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3e2e25eae4be20f70b95a92c8e6e556?s=128&d=identicon&r=PG&f=1", "display_name": "chamaken", "link": "https://stackoverflow.com/users/5934166/chamaken"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 189, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1483718553, "creation_date": 1483689617, "last_edit_date": 1483718553, "question_id": 41501411, "link": "https://stackoverflow.com/questions/41501411/is-there-a-proper-way-to-create-a-const-from-an-enum-value-in-a-crate", "title": "Is there a proper way to create a const from an enum value in a crate?", "body": "<p>Create a crate:</p>\n\n<pre><code>cargo new --lib constenum\n</code></pre>\n\n<p><strong>src/lib.rs</strong></p>\n\n<pre><code>#[repr(u16)]\npub enum MyEnum {\n    ONE = 1,\n    TWO = 2,\n}\npub const CRATE_ONE: u16        = MyEnum::ONE as u16;\npub const CRATE_TWO: u16        = MyEnum::TWO as u16;\n</code></pre>\n\n<p><strong>tests/lib.rs</strong></p>\n\n<pre><code>extern crate constenum;\n\n#[test]\nfn f() {\n    let test_x = [0; constenum::CRATE_TWO as usize];\n    // the above causes a compile error below\n\n    // error[E0080]: constant evaluation error\n    //    --&gt; src/lib.rs:7:28\n    //    |\n    // 10 |\n    //    |                              ^^^^^^^^^^^^^ unimplemented constant expression: enum variants\n    //    |\n    // note: for repeat count here\n    //     --&gt; tests/lib.rs:5:22\n    //    |\n    // 5  |     let test_x = [0; constenum::CRATE_TWO as usize];\n    //    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n}\n</code></pre>\n\n<p>If I put the same code into <strong>examples/main.rs</strong>, which is very similar to the tests but does not use the crate, it succeeds:</p>\n\n<pre><code>#[repr(u16)]\npub enum ExampleEnum {\n    ONE = 1,\n    TWO = 2,\n}\npub const EXAMPLE_ONE: u16      = ExampleEnum::ONE as u16;\npub const EXAMPLE_TWO: u16      = ExampleEnum::TWO as u16;\n\nfn main() {\n    let example_x = [0; EXAMPLE_TWO as usize];\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 769, "user_id": 5433623, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-0jplvxnVu04/AAAAAAAAAAI/AAAAAAAAGvQ/VLbN9V7SMJ8/photo.jpg?sz=128", "display_name": "Matt Brubeck", "link": "https://stackoverflow.com/users/5433623/matt-brubeck"}, "is_accepted": true, "score": 5, "last_activity_date": 1483759825, "last_edit_date": 1483759825, "creation_date": 1483682378, "answer_id": 41499849, "question_id": 41499789, "link": "https://stackoverflow.com/questions/41499789/possible-to-pass-a-str-or-string-to-function-in-rust-using-into/41499849#41499849", "title": "Possible to pass a &#39;&amp;str&#39; or &#39;&amp;String&#39; to function in Rust using &#39;Into&#39;?", "body": "<p>You can simply make your function accept <code>&amp;str</code>, and then pass an <code>&amp;String</code> will work by implicitly de-referencing it.</p>\n\n<p>See <a href=\"https://doc.rust-lang.org/book/deref-coercions.html\" rel=\"nofollow noreferrer\">deref coercion</a>.</p>\n\n<pre><code>fn main() {\n    fn get_by_key(_key: &amp;str) {}\n\n    let s1: &amp;str = \"foo\";\n    let s2: String = \"foo\".into();\n\n    get_by_key(s1);\n    get_by_key(&amp;s2);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2147, "favorite_count": 0, "accepted_answer_id": 41499849, "answer_count": 1, "score": 1, "last_activity_date": 1483759825, "creation_date": 1483682084, "last_edit_date": 1483708803, "question_id": 41499789, "link": "https://stackoverflow.com/questions/41499789/possible-to-pass-a-str-or-string-to-function-in-rust-using-into", "title": "Possible to pass a &#39;&amp;str&#39; or &#39;&amp;String&#39; to function in Rust using &#39;Into&#39;?", "body": "<p>In Rust a function may take an <code>Into&lt;String&gt;</code>:</p>\n\n<pre><code>fn get_by_key&lt;S: Into&lt;String&gt;&gt;(&amp;self, key: S) -&gt; Option&lt;&amp;Value&gt;;\n</code></pre>\n\n<p>Is it possible to pass in a reference to string, so there is no need to clone a <code>String</code> when passing it into the function (using something like <code>Into&lt;&amp;String&gt;&gt;</code>)?</p>\n"}, {"tags": ["formatting", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1483664610, "post_id": 41496982, "comment_id": 70200787, "body": "Please disregard my previous replies. That was a mistake. It is actually  for <a href=\"https://doc.rust-lang.org/std/fmt/index.html#formatting-traits\" rel=\"nofollow noreferrer\">formatting traits</a>"}, {"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1483664721, "post_id": 41496982, "comment_id": 70200817, "body": "Absolutely no problem. :-)"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 3, "last_activity_date": 1483666616, "last_edit_date": 1483666616, "creation_date": 1483665032, "answer_id": 41497402, "question_id": 41496982, "link": "https://stackoverflow.com/questions/41496982/what-does-the-type-in-the-formatting-types-syntax-do/41497402#41497402", "title": "What does the type in the formatting types syntax do?", "body": "<p>What must be noted here is that the syntax above is for <code>format_spec</code>, which always follows a colon.</p>\n\n<blockquote>\n  <p><code>format := '{' [ argument ] [ ':' format_spec ] '}'</code></p>\n  \n  <p><code>format_spec := [[fill]align][sign]['#']['0'][width]['.' precision][type]</code></p>\n</blockquote>\n\n<p>With that in mind, the <code>type</code> part is used to specify <a href=\"https://doc.rust-lang.org/std/fmt/index.html#formatting-traits\" rel=\"nofollow noreferrer\">formatting traits</a>, which are documented as thus:</p>\n\n<blockquote>\n  <p>When requesting that an argument be formatted with a particular type, you are actually requesting that an argument ascribes to a particular trait. This allows multiple actual types to be formatted via <code>{:x}</code> (like i8 as well as isize).</p>\n  \n  <p>[...]</p>\n  \n  <p>If no format is specified (as in {} or {:6}), then the format trait used is the Display trait.</p>\n</blockquote>\n\n<p>Here's an example (<a href=\"https://play.rust-lang.org/?gist=5e1a3bc4232f167dc7828d057218b413&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>println!(\"{:b}\", 31); // prints 11111\nprintln!(\"{:08b}\", 31); // prints 00011111\n</code></pre>\n\n<p>Type formatting works for any data type that implements the corresponding formatting type, such as <a href=\"https://doc.rust-lang.org/std/fmt/trait.Binary.html\" rel=\"nofollow noreferrer\"><code>Binary</code></a> or <a href=\"https://doc.rust-lang.org/std/fmt/trait.LowerHex.html\" rel=\"nofollow noreferrer\"><code>LowerHex</code></a>.</p>\n\n<hr>\n\n<p>At first I guessed it would be named parameters, but those actually go before the colon. Just for the record, this also works (<a href=\"https://play.rust-lang.org/?gist=0fa4e4f3e9c28a89b189f3de31739fb1&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>format!(\"{a:08b}\", a = 31)\n</code></pre>\n"}], "owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 60, "favorite_count": 0, "accepted_answer_id": 41497402, "answer_count": 1, "score": 1, "last_activity_date": 1483666616, "creation_date": 1483661861, "last_edit_date": 1483664612, "question_id": 41496982, "link": "https://stackoverflow.com/questions/41496982/what-does-the-type-in-the-formatting-types-syntax-do", "title": "What does the type in the formatting types syntax do?", "body": "<p>What does the &lsquo;type&rsquo; in the formatting types <a href=\"https://doc.rust-lang.org/std/fmt/index.html#syntax\" rel=\"nofollow noreferrer\">syntax</a> of <code>format!</code> do?</p>\n\n<p>Of this, that is:</p>\n\n<blockquote>\n  <p><code>[[fill]align][sign]['#']['0'][width]['.' precision][type]</code></p>\n</blockquote>\n\n<p>The rest appears to be well documented, but that particular one seems to have some information left out. Under its explanation it says:</p>\n\n<blockquote>\n  <p><code>type := identifier | ''</code></p>\n</blockquote>\n\n<p>But what on Earth is it used for?</p>\n\n<h2>Edits</h2>\n\n<h3>1.</h3>\n\n<p>Someone suggested that they be for <a href=\"https://doc.rust-lang.org/std/fmt/index.html#named-parameters\" rel=\"nofollow noreferrer\">named parameters</a>, and that feels reasonable to assume. However, should the following code not work had that been the case?</p>\n\n<pre><code>println!(\"{:.2test}\", test=32.432);\n</code></pre>\n\n<p>This generates me a rather depressing error:</p>\n\n<blockquote>\n<pre><code>error: unknown format trait `test`\n  --&gt; src\\main.rs:12:29\n   |\n12 |    println!(\"{:.2test}\", test=32.432);\n   |                               ^^^^^^\n</code></pre>\n</blockquote>\n"}, {"tags": ["format", "rust"], "comments": [{"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483656337, "post_id": 41496035, "comment_id": 70198321, "body": "And so @Shepmaster is at it correcting my styling again. :-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1483656445, "post_id": 41496035, "comment_id": 70198362, "body": "You&#39;ll find my hand in most every SO question in <a href=\"https://stackoverflow.com/questions/tagged/rust\">rust</a>. I strive to provide a uniform style and improve the grammar of every post, in the hopes of making each and every question and answer useful to those that come after us."}], "answers": [{"comments": [{"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "edited": false, "score": 0, "creation_date": 1483657011, "post_id": 41496138, "comment_id": 70198580, "body": "That works well for me! Certainly if one had a time they could make a method (or function for that matter), making use of your example, to always print out centered strings with the same amount of a given character on both sides. That should not be further away than a little flow control. :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1483656700, "creation_date": 1483656700, "answer_id": 41496138, "question_id": 41496035, "link": "https://stackoverflow.com/questions/41496035/center-rust-string-in-a-number-of-characters/41496138#41496138", "title": "Center Rust string in a number of characters", "body": "<blockquote>\n  <p>Is it possible to center a string using numbers to achieve something like the following?</p>\n</blockquote>\n\n<p>Yes, kind of, as long as you truly mean \"something like\"...</p>\n\n<pre><code>fn main() {\n    let s = format!(\"{:-^30}\", \"SO is AWESOME\");\n    assert_eq!(s, \"--------SO is AWESOME---------\");\n    //             ^-- 8 here           ^-- 9 here\n}\n</code></pre>\n\n<p>Referring to the <a href=\"https://doc.rust-lang.org/std/fmt/index.html#syntax\" rel=\"noreferrer\">formatting syntax</a>, here's the relevant parts:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>format_spec := [[fill]align][sign]['#']['0'][width]['.' precision][type]\nfill := character\nalign := '&lt;' | '^' | '&gt;'\nwidth := count\n</code></pre>\n\n<p>We specify a <em>fill</em> (<code>-</code>), an <em>alignment</em> (<code>^</code> / center), and a <em>width</em> (<code>30</code>). However, the string is 13 units wide, so to pad it out to 30 units, the fill has to be bigger on one side.</p>\n"}], "owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 921, "favorite_count": 0, "accepted_answer_id": 41496138, "answer_count": 1, "score": 3, "last_activity_date": 1483656700, "creation_date": 1483656128, "last_edit_date": 1483656362, "question_id": 41496035, "link": "https://stackoverflow.com/questions/41496035/center-rust-string-in-a-number-of-characters", "title": "Center Rust string in a number of characters", "body": "<p>I have been reading up on <code>format!</code> and all of the <a href=\"https://doc.rust-lang.org/std/fmt/index.html\" rel=\"nofollow noreferrer\">formatting options</a> and saw there was a beautiful way of centering a string of text using either <code>&lt;</code>, <code>^</code> or <code>&gt;</code>. Rather than centering a string in whitespace, is it possible to center it in a character?</p>\n\n<pre><code>{:^32} // Centers it nicely in 32 characters of whitespace\n</code></pre>\n\n<p>I was thinking something like:</p>\n\n<pre><code>{:^32'c'} // But this does not work\n</code></pre>\n\n<p>I have tried almost every way thinkable, except those that seem way too crazy. But luckily there is <em>Stack Overflow</em>!</p>\n\n<p>Is it possible to center a string using numbers to achieve something like the following?</p>\n\n<blockquote>\n  <p>--------SO is AWESOME--------</p>\n</blockquote>\n"}, {"tags": ["rust", "rust-cargo", "asm.js"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483643128, "post_id": 41492672, "comment_id": 70191390, "body": "Have you seen <a href=\"http://www.hellorust.com/emscripten/\" rel=\"nofollow noreferrer\">Compiling Rust to your Browser</a>?"}, {"owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483643394, "post_id": 41492672, "comment_id": 70191558, "body": "Yeah, I skimmed it but I might be missing something.  The only code samples (in rust) I saw were just annotating public functions with #[no_mangle].  That doesn&#39;t seem to work on my end.  I noticed they were using rustc instead of cargo...?  This <a href=\"http://www.hellorust.com/emscripten/demos/04-call-into-lib/\" rel=\"nofollow noreferrer\">link</a> seems to be the source for the users comment above, but link_args is still deprecated -- and what&#39;s the deal with the empty main(){}?"}], "answers": [{"tags": [], "owner": {"reputation": 860, "user_id": 2013924, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/395a6aa699f13ec2543c98da550e5414?s=128&d=identicon&r=PG", "display_name": "davidpodhola", "link": "https://stackoverflow.com/users/2013924/davidpodhola"}, "is_accepted": false, "score": 2, "last_activity_date": 1492877489, "creation_date": 1492877489, "answer_id": 43561468, "question_id": 41492672, "link": "https://stackoverflow.com/questions/41492672/how-can-you-compile-a-rust-library-to-target-asm-js/43561468#43561468", "title": "How can you compile a Rust library to target asm.js?", "body": "<p>Very interesting question! I was running into <a href=\"https://github.com/fable-compiler/Fable/issues/777\" rel=\"nofollow noreferrer\">similar dependency issues</a> with <a href=\"http://fable.io/\" rel=\"nofollow noreferrer\">fable</a>.</p>\n\n<p>I have checked <a href=\"http://www.hellorust.com/emscripten/demos/04-call-into-lib/\" rel=\"nofollow noreferrer\">Compiling Rust to your Browser - Call from JavaScript</a>, <a href=\"https://doc.rust-lang.org/book/advanced-linking.html\" rel=\"nofollow noreferrer\">Advanced Linking - Link args</a> and <a href=\"https://users.rust-lang.org/t/how-to-pass-cargo-linker-args/3163\" rel=\"nofollow noreferrer\">How to pass cargo linker args</a> however was not able to use <code>cargo</code> in the same way as <a href=\"http://www.hellorust.com/emscripten/demos/04-call-into-lib/\" rel=\"nofollow noreferrer\"><code>rustc --target asmjs-unknown-emscripten call-into-lib.rs</code></a>.</p>\n\n<p>The closer I was able to get was to run both <code>cargo</code> and <code>rustc</code> like</p>\n\n<pre><code>cd lib1\ncargo build --target asmjs-unknown-emscripten\nrustc --target=asmjs-unknown-emscripten src\\lib.rs\ncd ..\n\ncd lib2\ncargo build --target asmjs-unknown-emscripten\nrustc --target=asmjs-unknown-emscripten src\\lib.rs --extern lib1=..\\lib1\\target\\asmjs-unknown-emscripten\\debug\\liblib1.rlib\ncd ..\n\ncd lib3\ncargo build --target asmjs-unknown-emscripten\nrem rustc --target=asmjs-unknown-emscripten src\\lib.rs --extern webplatform=..\\lib3\\target\\asmjs-unknown-emscripten\\debug\\deps\\libwebplatform-80d107ece17b262d.rlib\nrem the line above fails with \"error[E0460]: found possibly newer version of crate `libc` which `webplatform` depends on\"\ncd ..\n\ncd app\ncargo build --target asmjs-unknown-emscripten\ncd ..\n</code></pre>\n\n<p>see the <a href=\"https://github.com/davidpodhola/so-41492672-rust-js-structure/blob/master/build.cmd\" rel=\"nofollow noreferrer\">so-41492672-rust-js-structure</a>. It allows to have several libraries that compile together to the JavaScript in the final application.</p>\n\n<p>I still think some manual linking would help. Would be interested to know.</p>\n\n<p>P.S. to see what <code>rustc</code> uses to link, you can pass <code>-Z print-link-args</code> to it.</p>\n"}], "owner": {"reputation": 403, "user_id": 1935361, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/e1b127d480162b1c628aef4fa30e02dd?s=128&d=identicon&r=PG&f=1", "display_name": "user1935361", "link": "https://stackoverflow.com/users/1935361/user1935361"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1225, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1494031116, "creation_date": 1483642843, "last_edit_date": 1483642985, "question_id": 41492672, "link": "https://stackoverflow.com/questions/41492672/how-can-you-compile-a-rust-library-to-target-asm-js", "title": "How can you compile a Rust library to target asm.js?", "body": "<p>I've got a Rust library with the following usual structure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Cargo.toml\nsrc\n |--lib.rs\n.cargo\n |--config (specifies target=asmjs-unknown-emscripten)\ntarget\n |......\n</code></pre>\n\n<p>When I do <code>cargo build</code>, I get a new directory under target called <code>asmjs-unknown-emscripten</code>, but the .js files that I'd expect are not there.  </p>\n\n<p><a href=\"https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627/14\" rel=\"noreferrer\">As this user notes</a>, you've got to do something special to export functions to asm.js besides marking them public:</p>\n\n<blockquote>\n  <p>Basically you have this boilerplate right now:</p>\n\n<pre><code>#[link_args = \"-s EXPORTED_FUNCTIONS=['_hello_world']\"]\nextern {}\n\nfn main() {}\n\n#[no_mangle]\npub extern fn hello_world(n: c_int) -&gt; c_int {\n    n + 1\n}\n</code></pre>\n  \n  <p>Then you can use this in your javascript to access and call the function:</p>\n\n<pre><code>var hello_world = cwrap('hello_world', 'number', ['number']);\n\nconsole.log(hello_world(41));\n</code></pre>\n</blockquote>\n\n<p>However, Rust complains about the <code>#[link_args...]</code> directive as deprecated.  Is there any documentation out there that can explain how this works?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483635147, "post_id": 41490429, "comment_id": 70186419, "body": "Please <a href=\"https://stackoverflow.com/posts/41490429/edit\">edit</a> your question to <i>include the error</i> you are getting."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483635446, "post_id": 41490523, "comment_id": 70186652, "body": "How would OP perform the replacement of <code>\\r</code> they wish to make?"}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483635608, "post_id": 41490523, "comment_id": 70186776, "body": "that just skips the last byte it seems"}], "tags": [], "owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "is_accepted": false, "score": 2, "last_activity_date": 1483635966, "last_edit_date": 1483635966, "creation_date": 1483635381, "answer_id": 41490523, "question_id": 41490429, "link": "https://stackoverflow.com/questions/41490429/how-to-use-stdout-save-image-in-rust/41490523#41490523", "title": "how to use stdout save image in Rust?", "body": "<p>Image data is binary, not a Unicode string. So you need to print a <code>&amp;[u8]</code> and not a UTF-8 <code>String</code>.</p>\n\n<pre><code>let out = std::io::stdout();\nout.write_all(slice)?;\nout.flush()?;\n</code></pre>\n\n<p>The <code>flush</code> is necessary since <code>write_all</code> immediately followed by a program exit fails to deliver the bytes to the underlying file descriptor.</p>\n\n<p>Since rust has no string processing for u8 arrays you need to undo the adb mangling manually by iterating over the bytes and checking whether the current one is \\r and the next is \\n and then skip the current one.</p>\n"}], "owner": {"reputation": 255, "user_id": 7328541, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2acf0e34d229dd1622f978708cf17693?s=128&d=identicon&r=PG&f=1", "display_name": "maku", "link": "https://stackoverflow.com/users/7328541/maku"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 516, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1522748658, "creation_date": 1483635087, "last_edit_date": 1522748658, "question_id": 41490429, "link": "https://stackoverflow.com/questions/41490429/how-to-use-stdout-save-image-in-rust", "title": "how to use stdout save image in Rust?", "body": "<p>In my terminal command the <code>adb shell screencap -p | sed 's/\\r$//' &gt; screen.png</code> it is work, save my android screen.</p>\n\n<p>I know can use <code>adb pull</code>, but I want to know how to use stdout way save an image in Rust? So, I try this code, buy can't open the image. There may be a problem on encoding, but I don't know how to fix them</p>\n\n<pre><code>    let output = Command::new(\"adb\")\n            .arg(\"shell\")\n            .arg(\"screencap -p\")\n            .output()\n            .expect(\"failed to execute process\");\n\n    let byte_string = String::from_utf8_lossy(&amp;output.stdout).replace(\"\\r\\n\",\"\\n\");\n\n\n    let byte_string = String::from_utf8_lossy(&amp;output.stdout);\n    let mut buffer = File::create(\"foo.png\")?;\n\n    buffer.write(&amp;byte_string.as_bytes())?;\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483634856, "post_id": 41490202, "comment_id": 70186221, "body": "Your title asks about having the same type, but that&#39;s not a problem; <a href=\"http://play.integer32.com/?gist=9be3072407fb654fc0035404120150a5&amp;version=stable\" rel=\"nofollow noreferrer\">your code as presented will <i>compile</i></a>. Perhaps you want to revisit the title after reviewing what question you are asking in the body?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483634962, "post_id": 41490202, "comment_id": 70186292, "body": "Also, your &quot;question&quot; feels like it is missing a <b>question</b>. Reading through the body of the post, I&#39;m just nodding and saying &quot;yes, that sounds right&quot; to most everything. What do you want from the Stack Overflow community?"}, {"owner": {"reputation": 2254, "user_id": 1003650, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6b653616a592b8bdc296b0abf6207a71?s=128&d=identicon&r=PG", "display_name": "Venantius", "link": "https://stackoverflow.com/users/1003650/venantius"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483635466, "post_id": 41490202, "comment_id": 70186675, "body": "Edited the original question to clarify that I need help implementing <code>link</code>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483656176, "post_id": 41495852, "comment_id": 70198250, "body": "<i>You can use a kind of deque to allocate the memory in chunks but without reallocations that vector does</i> \u2014 that&#39;s how many of the arenas are implemented."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1483657032, "post_id": 41495852, "comment_id": 70198590, "body": "@Shepmaster That&#39;s why deque is such a good example. It&#39;s a general purpose structure, yet unlike a vector it&#39;s usually designed with the pointer preservation in mind. In C++ this property is carved in stone: &quot;<i>insertion and deletion at either end of a deque never invalidates pointers or references to the rest of the elements</i>&quot; - <a href=\"http://en.cppreference.com/w/cpp/container/deque\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/container/deque</a>."}, {"owner": {"reputation": 2254, "user_id": 1003650, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6b653616a592b8bdc296b0abf6207a71?s=128&d=identicon&r=PG", "display_name": "Venantius", "link": "https://stackoverflow.com/users/1003650/venantius"}, "edited": false, "score": 0, "creation_date": 1483657540, "post_id": 41495852, "comment_id": 70198750, "body": "Yeah, this has been the avenue that has seemed the most promising (I was looking specifically at <code>Rc</code> and seeing a lot of chatter around <code>Vec</code>), although I have trouble finding clear examples on the usage of <code>Rc</code> whereas quite a few people seem to go the route of <code>Vec</code>. So, to be clear, the idea here is that since each <code>Cell</code> is stored in a <code>Vec</code>, they can also include a <code>HashMap</code> that points to other <code>Cells</code> stored in that same <code>Vec</code>?"}, {"owner": {"reputation": 36328, "user_id": 5483526, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ec50563f80bacd2a7fed69bd31d0c810?s=128&d=identicon&r=PG&f=1", "display_name": "Matt Timmermans", "link": "https://stackoverflow.com/users/5483526/matt-timmermans"}, "edited": false, "score": 0, "creation_date": 1483657653, "post_id": 41495852, "comment_id": 70198791, "body": "In summary: Have Maze own the Cells and represent the links as lists of raw pointers or (row,column) pairs."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 2, "last_activity_date": 1483655247, "last_edit_date": 1592644375, "creation_date": 1483655247, "answer_id": 41495852, "question_id": 41490202, "link": "https://stackoverflow.com/questions/41490202/how-can-i-create-a-struct-with-a-hashmap-where-the-keys-the-same-type-as-the-con/41495852#41495852", "title": "How can I create a struct with a HashMap where the keys the same type as the container", "body": "<blockquote>\n<p>How can I create a struct with a HashMap where the keys the same type as the container</p>\n<p>the original code is in Ruby</p>\n</blockquote>\n<p>I'm not that well acquainted with Ruby, but I know a lot of similar languages so I'll make some educated guesses.</p>\n<p>Ruby is a <a href=\"https://stackoverflow.com/questions/18790442/are-there-primitive-types-in-ruby\">thoroughly garbage collected language</a>. What it means is that you <strong>never</strong> get to store the keys of some type in a Ruby HashMap. You might <strong>think</strong> that you're storing a key of type <code>Cell</code>, but what really happens is that you're storing a garbage-collected <strong>pointer</strong> to an instance of that <code>Cell</code>.</p>\n<p>And a <strong>pointer</strong> is just an <strong>index</strong> into some memory region.</p>\n<p>Now, Rust is a different kind of language. In Rust you can store the actual <code>Cell</code> right there in the underlying keys array of the HashMap. In other words, Rust gives you more control, and that often translates to better memory usage and speed.</p>\n<p>But with control comes responsibility (unless you want to break things and break them fast). In Rust you are supposed to explicitly specify who <em>owns</em> the instance. And when you create a struct that points to itself (a cyclic graph), the ownership gets muddled.</p>\n<p>So one way to implement a cyclic structure is to move the ownership <a href=\"https://en.wikipedia.org/wiki/Concern_(computer_science)\" rel=\"nofollow noreferrer\">concern</a> out of the equation!</p>\n<p>In Ruby the garbage collector solves this. Memory management is the concern of the garbage collector and you implement cyclic structures without ever dealing with it.</p>\n<p>In Rust you can do the same by using an (experimental) garbage collector, maybe <a href=\"https://github.com/Manishearth/rust-gc/\" rel=\"nofollow noreferrer\">rust-gc</a>.</p>\n<p>Or you can get your hands dirty and actually manage the memory.</p>\n<p>This isn't as hard as it sounds. All you need is some non-cyclic structure <em>own</em> the Cell. <code>Vec&lt;Cell&gt;</code> would suffice. After you have stored the <code>Cell</code> in a vector, you don't have to worry about the ownership anymore. Because the <code>Cell</code> is now owned by that vector, plain and simple. You can make cyclic structurs, referencing the <code>Cell</code> by its vector index, just like the Ruby does with its pointers!</p>\n<p>There are all kinds of variations on this. When you manage the ownership, you are the boss, the choice is yours. You can optimize some algorithms with <a href=\"http://www.apachetutor.org/dev/pools\" rel=\"nofollow noreferrer\">memory pools</a>, also known as arenas. You can use reference counting (there's no need for a vector then, but you'd want to carefully clear the references when removing the cells from your structure - in order to break the reference counting cycles). You can use a kind of deque to allocate the memory in chunks but without reallocations that vector does, then store direct pointers into that deque. Some of the options are mentioned in <a href=\"https://www.reddit.com/r/rust/comments/5czp0j/safe_and_even_more_efficient_bidirectional_trees/\" rel=\"nofollow noreferrer\">this reddit discussion</a>.</p>\n<p>But the principle is simple. Make sure that something (<code>Vec</code>, <code>Rc</code>, <code>Gc</code>) covers the ownership concern. And when that's covered, you can program just like in Ruby, because the ownership is no longer an issue.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1483660481, "last_edit_date": 1495540915, "creation_date": 1483660481, "answer_id": 41496763, "question_id": 41490202, "link": "https://stackoverflow.com/questions/41490202/how-can-i-create-a-struct-with-a-hashmap-where-the-keys-the-same-type-as-the-con/41496763#41496763", "title": "How can I create a struct with a HashMap where the keys the same type as the container", "body": "<blockquote>\n  <p>possibly ignoring the issue of <code>Cell</code> structs entirely in favor of something more direct like a big <code>HashMap</code> of tuples.</p>\n</blockquote>\n\n<p>This is the approach I would normally go for in a \"two dimensional grid with holes\" structure (Game of Life style). However, in this case, you find that you want to be able to state which cells connect to other cells, so then you need to keep around a bunch of booleans (or a bitmask or other representation). And then you will want to perform traversal from one cell to another, and then realize that you don't want to cycle back on yourself.</p>\n\n<p>Quickly, you realize that you are <a href=\"https://en.wikipedia.org/wiki/Graph_(abstract_data_type)\" rel=\"nofollow noreferrer\">describing a <em>graph</em></a>. <a href=\"https://stackoverflow.com/a/41495852/155423\">As ArtemGr says</a>:</p>\n\n<blockquote>\n  <p>when you create a struct that points to itself (a cyclic graph), the ownership gets muddled.</p>\n</blockquote>\n\n<p>One of the most popular Rust graph libraries, <a href=\"https://github.com/bluss/petgraph\" rel=\"nofollow noreferrer\">petgraph</a>, makes use of the described \"vector of nodes\". <a href=\"https://docs.rs/petgraph/0.4.1/petgraph/graph/struct.Graph.html#pros-and-cons-of-indices\" rel=\"nofollow noreferrer\">From the documentation</a>:</p>\n\n<blockquote>\n  <p>Pros and Cons of Indices</p>\n  \n  <ul>\n  <li><p>The fact that the node and edge indices in the graph each are numbered in compact intervals (from 0 to n - 1 for n nodes) simplifies\n  some graph algorithms.</p></li>\n  <li><p>You can select graph index integer type after the size of the graph. A smaller size may have better performance.</p></li>\n  <li><p>Using indices allows mutation while traversing the graph, see <code>Dfs</code>, and <code>.neighbors(a).detach()</code>.</p></li>\n  <li><p>You can create several graphs using the equal node indices but with differing weights or differing edges.</p></li>\n  <li><p>The <code>Graph</code> is a regular rust collection and is <code>Send</code> and <code>Sync</code> (as long as associated data <code>N</code> and <code>E</code> are).</p></li>\n  <li><p>Some indices shift during node or edge removal, so that is a drawback of removing elements. Indices don't allow as much compile\n  time checking as references.</p></li>\n  </ul>\n</blockquote>\n\n<p>I'd still use a library like this because I believe that the author is more likely to have spent time optimizing it than I have.</p>\n"}], "owner": {"reputation": 2254, "user_id": 1003650, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6b653616a592b8bdc296b0abf6207a71?s=128&d=identicon&r=PG", "display_name": "Venantius", "link": "https://stackoverflow.com/users/1003650/venantius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2734, "favorite_count": 0, "accepted_answer_id": 41495852, "answer_count": 2, "score": 1, "last_activity_date": 1483660481, "creation_date": 1483634401, "last_edit_date": 1483635575, "question_id": 41490202, "link": "https://stackoverflow.com/questions/41490202/how-can-i-create-a-struct-with-a-hashmap-where-the-keys-the-same-type-as-the-con", "title": "How can I create a struct with a HashMap where the keys the same type as the container", "body": "<p>I'm going through <a href=\"https://pragprog.com/book/jbmaze/mazes-for-programmers\" rel=\"nofollow noreferrer\">Mazes for Programmers</a> and thought I'd try to do it in Rust (the original code is in Ruby).</p>\n\n<p>One of the first things you do in the book is to implement a <code>Cell</code> class that includes links to other cells. Naively, I thought I'd be able to do something like this:</p>\n\n<pre><code>pub struct Cell {\n    row: u32,\n    column: u32,\n\n    links: HashMap&lt;Box&lt;Cell&gt;, bool&gt;,\n}\n</code></pre>\n\n<p>The idea being that each <code>Cell</code> in a maze knows what other cells it connects to, and that a <code>Maze</code> is just a collection of <code>Cells</code>. Unfortunately, this leads one into the doubly-linked-list problem of Rust's borrowing and ownership semantics, and I'm not sure how to get around this. </p>\n\n<p>Specifically, I cannot figure out how to implement <code>link</code> here:</p>\n\n<pre><code>impl Cell {\n    pub fn new (row: u32, column: u32) -&gt; Cell {\n        return Cell {\n            row: row,\n            column: column,\n            links: HashMap::new(),\n        };\n    }\n\n    pub fn link(&amp;mut self, other: &amp;mut Cell, bidi: bool) {\n        self.links.insert(Box::new(other), true); // cannot get anything even remotely like this to work here.\n    }\n}\n</code></pre>\n\n<p>I took a look at the Rust Book's section on choosing your guarantees, which has some good info on one's respective choices of pointer-wrappers and abstractions, but I'm really not sure how to reason about what I'd like to do with the compiler. </p>\n\n<p>I think that I want each <code>Cell</code> struct to maintain (via an embedded <code>HashMap</code>) a reference (in the non-explicit use of the term) to other <code>Cells</code> that it is connected to, but since that link will be bi-directional it seems to me that I'm going to end up using <code>Rc</code> or something similar. </p>\n\n<p>It's also possible that I should just take a step away from the literal translation of the Ruby code in the book and think about a more idiomatic approach -- possibly ignoring the issue of <code>Cell</code> structs entirely in favor of something more direct like a big <code>HashMap</code> of tuples. </p>\n"}, {"tags": ["enums", "macros", "rust"], "comments": [{"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 1, "creation_date": 1483634378, "post_id": 41486477, "comment_id": 70185913, "body": "Perhaps consider macros 1.1 or using the build.rs script (with handlebars templating) to do codegen?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1483634670, "post_id": 41486477, "comment_id": 70186102, "body": "@user25064 Could you expand on how you think Macros 1.1 would help here? The answer below already mentions a build script."}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1483635001, "post_id": 41486477, "comment_id": 70186321, "body": "since you have the enum elements as a string is it possible to iterate over chars with macros 1.1?"}], "answers": [{"comments": [{"owner": {"reputation": 992, "user_id": 1579244, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/91326e6e4a8829c456ad73e58c3405ed?s=128&d=identicon&r=PG", "display_name": "Blank Chisui", "link": "https://stackoverflow.com/users/1579244/blank-chisui"}, "edited": false, "score": 0, "creation_date": 1483625948, "post_id": 41487011, "comment_id": 70179831, "body": "thanks for the comprehensive answer. A buildscript seems to be the cleanest solution. Although I&#39;d hoped to be able to solve this in language."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 992, "user_id": 1579244, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/91326e6e4a8829c456ad73e58c3405ed?s=128&d=identicon&r=PG", "display_name": "Blank Chisui", "link": "https://stackoverflow.com/users/1579244/blank-chisui"}, "edited": false, "score": 0, "creation_date": 1483626021, "post_id": 41487011, "comment_id": 70179892, "body": "@BlankChisui <i>to solve this in language</i> \u2014 a build script <b>is</b> part of the language. You are still writing Rust code, and it&#39;s a first-class aspect of Cargo. Plenty of projects use build scripts."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1483634621, "last_edit_date": 1483634621, "creation_date": 1483624927, "answer_id": 41487011, "question_id": 41486477, "link": "https://stackoverflow.com/questions/41486477/is-it-possible-to-calculate-a-c-style-enum-value-using-a-macro/41487011#41487011", "title": "Is it possible to calculate a C-style `enum` value using a macro?", "body": "<p>Kind of, yes, but remember that macros really only allow you to remove drudgery, not really add new features.</p>\n\n<p>Start by writing the code you want <strong>without macros</strong>. This lets you see what is possible. For example, my exploring went like this:</p>\n\n<pre><code>#[repr(u32)]\nenum Foo {\n    Start = (1 &lt;&lt; 24 | 2 &lt;&lt; 16 | 3 &lt;&lt; 8 | 4) as u32,\n    Start2 = ((b'1' as u32) &lt;&lt; 24 | 2 &lt;&lt; 16 | 3 &lt;&lt; 8 | 4) as u32,\n    // the index operation on const values is unstable\n    //Start3 = ((b\"1\"[0] as u32) &lt;&lt; 24 | 2 &lt;&lt; 16 | 3 &lt;&lt; 8 | 4) as u32,\n}\n</code></pre>\n\n<p>Sadly, we cannot use the last form as indexing into a constant isn't a constant expression (yet). As far as I can tell, the best we can do is <code>Start2</code>. Next, repeat the pattern a few times to see where the redundancy occurs:</p>\n\n<pre><code>#[repr(u32)]\nenum Foo {\n    Start = ((b'S' as u32) &lt;&lt; 24 | (b'T' as u32) &lt;&lt; 16 | (b'R' as u32) &lt;&lt; 8 | (b'T' as u32)) as u32,\n    End   = ((b' ' as u32) &lt;&lt; 24 | (b'E' as u32) &lt;&lt; 16 | (b'N' as u32) &lt;&lt; 8 | (b'D' as u32)) as u32,\n}\n</code></pre>\n\n<p>Now you are primed to create a macro:</p>\n\n<pre><code>macro_rules! tagged_ascii_headers {\n    (enum $name:ident {\n        $($var:ident = $v1:expr, $v2:expr, $v3:expr, $v4:expr,)*\n    }) =&gt; {\n        #[repr(u32)]\n        enum $name {\n            $($var = (($v1 as u32) &lt;&lt; 24 | ($v2 as u32) &lt;&lt; 16 | ($v3 as u32) &lt;&lt; 8 | $v4 as u32),)*\n        }\n    }\n}\n\ntagged_ascii_headers! {\n    enum Foo {\n        Start = b'S', b'T', b'R', b'T',\n        End   = b' ', b'E', b'N', b'D',\n    }\n}\n</code></pre>\n\n<p>Then you can play with the macro syntax to find something that looks nice. I got down to</p>\n\n<pre><code>macro_rules! tagged_ascii_headers {\n    (enum $name:ident {\n        $($var:ident = $v1:tt $v2:tt $v3:tt $v4:tt,)*\n    }) =&gt; {\n        #[repr(u32)]\n        enum $name {\n            $($var = (($v1 as u32) &lt;&lt; 24 | ($v2 as u32) &lt;&lt; 16 | ($v3 as u32) &lt;&lt; 8 | $v4 as u32),)*\n        }\n    }\n}\n\ntagged_ascii_headers! {\n    enum Foo {\n        Start = 'S' 'T' 'R' 'T',\n        End   = ' ' 'E' 'N' 'D',\n    }\n}\n</code></pre>\n\n<p>This is a bit nicer, but ultimately you might need more constant evaluation to be available. <strong>If</strong> arrays could be indexed, you could evolve to something like</p>\n\n<pre><code>tagged_ascii_headers! {\n    enum Foo {\n        Start = b\"STRT\",\n        End   = b\" END\",\n    }\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>Since the macro will simply be replaced by the resulting AST</p>\n</blockquote>\n\n<p>This is true</p>\n\n<blockquote>\n  <p>the compiler will see a non constant expression</p>\n</blockquote>\n\n<p>This is half-true. For example, this compiles just fine:</p>\n\n<pre><code>macro_rules! foo {\n    () =&gt; { 42 }\n}\n\nenum Foo {\n    Start = foo!(),\n}\n</code></pre>\n\n<p>So really, the <em>macro</em> is irrelevant to the const-ness, it's all about what the macro <em>expands to</em>.</p>\n\n<hr>\n\n<p>You could also move to a build script:</p>\n\n<pre><code>const THINGS: &amp;'static [(&amp;'static str, &amp;'static [u8; 4])] = &amp;[\n    (\"Start\", b\"STRT\"),\n    (\"End\",   b\" END\"),\n];\n\nfn main() {\n    println!(\"#[repr(u32)]\");\n    println!(\"enum Foo {{\");\n    for &amp;(name, code) in THINGS {\n        let code = (code[0] as u32) &lt;&lt; 24 | \n                   (code[1] as u32) &lt;&lt; 16 |\n                   (code[2] as u32) &lt;&lt; 8  |\n                    code[3] as u32;\n        println!(\"    {} = {},\", name, code);\n    }\n    println!(\"}}\");\n}\n</code></pre>\n\n<p>You'd want to write that to a file instead of standard output, then include the generated file from the production code. A build script would also allow you to have some external file that defines all the names / codes, if that was valuable.</p>\n"}], "owner": {"reputation": 992, "user_id": 1579244, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/91326e6e4a8829c456ad73e58c3405ed?s=128&d=identicon&r=PG", "display_name": "Blank Chisui", "link": "https://stackoverflow.com/users/1579244/blank-chisui"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 64, "favorite_count": 0, "accepted_answer_id": 41487011, "answer_count": 1, "score": 1, "last_activity_date": 1483634621, "creation_date": 1483623286, "last_edit_date": 1483624230, "question_id": 41486477, "link": "https://stackoverflow.com/questions/41486477/is-it-possible-to-calculate-a-c-style-enum-value-using-a-macro", "title": "Is it possible to calculate a C-style `enum` value using a macro?", "body": "<p>I have a huge list of four letter identifiers. I want an enum constant for each of them. The value of the constant should be the ASCII identifier as <code>u32</code>.</p>\n\n<pre><code>enum E {\n    Elem = my_macro!(Elem),\n}\n</code></pre>\n\n<p>Since the macro will simply be replaced by the resulting AST the compiler will see a non constant expression and raise an error.</p>\n\n<p>Is this possible, or do I have to generate write the constants out explicitly?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": true, "score": 2, "last_activity_date": 1483610605, "creation_date": 1483610605, "answer_id": 41482050, "question_id": 41480859, "link": "https://stackoverflow.com/questions/41480859/lifetime-trouble-when-slice-filtering/41482050#41482050", "title": "Lifetime trouble when slice filtering", "body": "<blockquote>\n  <p>Declaring filtered outside of the definition of z won't work, because it requires set to do the filtering.</p>\n</blockquote>\n\n<p>I don't understand why not. In the statement <code>filtered.as_slice()</code>, you borrow from <code>filtered</code>, so you must make sure <code>filtered</code> lives longer than the variable you assign it to (<code>z</code>):</p>\n\n<pre><code>use std::collections::HashSet;\n\nfn main() {\n    let mut h = HashSet::new();\n    h.insert(2);\n    let exclude: Option&lt;HashSet&lt;i8&gt;&gt; = Some(h);\n    let y: &amp;[i8] = &amp;[1, 2, 3];\n\n    let filtered: Vec&lt;i8&gt;;\n    let z: &amp;[i8] = match exclude {\n        Some(set) =&gt; {\n            filtered = y.iter().filter(|&amp;i| !set.contains(i)).map(|&amp;i| i).collect();\n            filtered.as_slice()\n        },\n        None =&gt; y\n    };\n    println!(\"{:?}\", z);  // outputs [1, 3]\n}\n</code></pre>\n\n<p>Note I inverted the logic in <code>filter</code>. </p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 41482050, "answer_count": 1, "score": 0, "last_activity_date": 1483610605, "creation_date": 1483607003, "question_id": 41480859, "link": "https://stackoverflow.com/questions/41480859/lifetime-trouble-when-slice-filtering", "title": "Lifetime trouble when slice filtering", "body": "<p>I want to optionally filter a slice without changing the type. The following approach fails:</p>\n\n<pre><code>use std::collections::HashSet;\n\nfn main() {\n    let include: Option&lt;HashSet&lt;i8&gt;&gt; = Some(HashSet::new());\n    let y: &amp;[i8] = &amp;[1, 2, 3];\n    let z: &amp;[i8] = match include {\n        Some(set) =&gt; {\n            let filtered: Vec&lt;i8&gt; = y.iter().filter(|&amp;i| set.contains(i)).map(|&amp;i| i).collect();\n            filtered.as_slice()\n        },\n        None =&gt; y\n    };\n    println!(\"{:?}\", z);\n}\n</code></pre>\n\n<p>with error</p>\n\n<pre><code>error: `filtered` does not live long enough\n  --&gt; &lt;anon&gt;:10:9\n   |\n9  |             filtered.as_slice()\n   |             -------- borrow occurs here\n10 |         },\n   |         ^ `filtered` dropped here while still borrowed\n...\n14 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p>-- <a href=\"https://play.rust-lang.org/?gist=de54009dec06699adedf03f063d7eb64&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>I understand that <code>filtered</code> doesn't live long enough because the slice is simply a reference into it. I have tried to copy or clone or otherwise make a static version of the resulting <code>filtered.as_slice()</code>, but nothing compiles.</p>\n\n<p>Declaring <code>filtered</code> outside of the definition of <code>z</code> won't work, because it requires <code>set</code> to do the filtering.</p>\n\n<p>I expect this dance of converting to an iterator, then to a vector, and then to a slice is probably not idiomatic. So I'm interested to know of a better approach.</p>\n"}, {"tags": ["linux", "rust"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1483605356, "post_id": 41478901, "comment_id": 70166046, "body": "This seems like an <a href=\"http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a> to me: instead of asking about specific ioctl use case you&#39;re asking how to use the <code>nix</code> crate. Still, it&#39;s worth mentioning that a similar ioctl use case seems to be covered at <a href=\"http://hermanradtke.com/2016/03/17/unions-rust-ffi.html\" rel=\"nofollow noreferrer\">hermanradtke.com/2016/03/17/unions-rust-ffi.html</a>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1483608323, "post_id": 41478901, "comment_id": 70167683, "body": "@ArtemGr The OP provided a short and simple snippet of C code and asked how to do the equivalent in Rust. How exactly is that an XY problem?"}], "answers": [{"comments": [{"owner": {"reputation": 301, "user_id": 7338173, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/cf5f4cc9a6c6173f95951a727c87cc59?s=128&d=identicon&r=PG&f=1", "display_name": "Jodooomi", "link": "https://stackoverflow.com/users/7338173/jodooomi"}, "edited": false, "score": 0, "creation_date": 1483614929, "post_id": 41482623, "comment_id": 70172000, "body": "why aren&#39;t they defined in &quot;nix&quot;? what does rust-spidev have to do with &quot;nix&quot;?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 301, "user_id": 7338173, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/cf5f4cc9a6c6173f95951a727c87cc59?s=128&d=identicon&r=PG&f=1", "display_name": "Jodooomi", "link": "https://stackoverflow.com/users/7338173/jodooomi"}, "edited": false, "score": 3, "creation_date": 1483616878, "post_id": 41482623, "comment_id": 70173339, "body": "@Jodooomi Here rust-spidev merely serves to demonstrate how to correctly use nix&#39;s <code>ioctl!</code> macro. Since <code>ioctl</code> is open-ended and inherently unsafe, it is impossible to provide a single definition that would work for all cases. Instead, <code>nix</code> provides the <code>ioctl!</code> macro as a <i>helper</i> to define functions that provide a safe (or at least convenient) interface to particular uses of <code>ioctl</code>."}, {"owner": {"reputation": 301, "user_id": 7338173, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/cf5f4cc9a6c6173f95951a727c87cc59?s=128&d=identicon&r=PG&f=1", "display_name": "Jodooomi", "link": "https://stackoverflow.com/users/7338173/jodooomi"}, "edited": false, "score": 0, "creation_date": 1483797055, "post_id": 41482623, "comment_id": 70250070, "body": "alright, but how does the author of rust-spidev know what those constants are? where can they be found?"}, {"owner": {"reputation": 301, "user_id": 7338173, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/cf5f4cc9a6c6173f95951a727c87cc59?s=128&d=identicon&r=PG&f=1", "display_name": "Jodooomi", "link": "https://stackoverflow.com/users/7338173/jodooomi"}, "edited": false, "score": 0, "creation_date": 1483797177, "post_id": 41482623, "comment_id": 70250112, "body": "I mean, yes, the TUN.. constant is defined at &quot;<a href=\"http://lxr.free-electrons.com\" rel=\"nofollow noreferrer\">lxr.free-electrons.com</a>&quot;, but what if I needed other constant, where would have to look for its definition in C?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1483797458, "post_id": 41482623, "comment_id": 70250201, "body": "If you can find them in a C header file, it is probably the easiest. But somewhere they must be documented, you can try google to find it. (That&#39;s also how I found that definition of <code>TUNSETIFF</code>). You can also create a rust crate containing all definitions, so others can use you crate if they need something."}, {"owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1546849921, "post_id": 41482623, "comment_id": 94974373, "body": "Would it be possible to get this example updated with the latest version of nix? it seems ioctl! doesn&#39;t exist anymore"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "reply_to_user": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 1, "creation_date": 1546856381, "post_id": 41482623, "comment_id": 94977625, "body": "@Cecile It looks like <code>ioctl!</code> is split into several functions like <code>ioctl_read!</code>, <code>ioctl_write_ptr!</code>, <code>ioctl_write_buf!</code>, and so on :<a href=\"https://github.com/nix-rust/nix/blob/master/src/sys/ioctl/mod.rs\" rel=\"nofollow noreferrer\">github.com/nix-rust/nix/blob/master/src/sys/ioctl/mod.rs</a>. So depending on the usage of the ioctl, you would need a different name. It looks like this example would be <code>ioctl_write_int!</code>. But it is probably better to read the documentation in mod.rs which explains it better then I do."}], "tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": true, "score": 9, "last_activity_date": 1483623854, "last_edit_date": 1483623854, "creation_date": 1483612230, "answer_id": 41482623, "question_id": 41478901, "link": "https://stackoverflow.com/questions/41478901/how-to-use-nixs-ioctl/41482623#41482623", "title": "How to use nix&#39;s ioctl?", "body": "<p>There is some example usage in <a href=\"https://github.com/rust-embedded/rust-spidev/blob/master/src/spidevioctl.rs#L115\" rel=\"noreferrer\">rust-spidev</a>. I will try to apply that to your code.</p>\n\n<p><code>TUNSETIFF</code> is <a href=\"http://lxr.free-electrons.com/source/include/uapi/linux/if_tun.h#L33\" rel=\"noreferrer\">defined</a> as:</p>\n\n<pre><code>#define TUNSETIFF     _IOW('T', 202, int)\n</code></pre>\n\n<p>That would be this in Rust using nix:</p>\n\n<pre><code>const TUN_IOC_MAGIC: u8 = 'T' as u8;\nconst TUN_IOC_SET_IFF: u8 = 202;\nioctl!(write tun_set_iff with TUN_IOC_MAGIC, TUN_IOC_SET_IFF; u32);\n</code></pre>\n\n<p>The above macro will define the function, which you can call like this:</p>\n\n<pre><code>let err = unsafe { tun_set_iff(fd, ifr) }; // assuming ifr is an u32\n</code></pre>\n"}], "owner": {"reputation": 301, "user_id": 7338173, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/cf5f4cc9a6c6173f95951a727c87cc59?s=128&d=identicon&r=PG&f=1", "display_name": "Jodooomi", "link": "https://stackoverflow.com/users/7338173/jodooomi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 884, "favorite_count": 0, "accepted_answer_id": 41482623, "answer_count": 1, "score": 8, "last_activity_date": 1483628978, "creation_date": 1483599194, "last_edit_date": 1483628978, "question_id": 41478901, "link": "https://stackoverflow.com/questions/41478901/how-to-use-nixs-ioctl", "title": "How to use nix&#39;s ioctl?", "body": "<p>I want to call <code>ioctl</code> from Rust. I know that I should use <a href=\"https://github.com/nix-rust/nix\" rel=\"noreferrer\">the nix crate</a>, but how exactly? From the documentation it's not clear.</p>\n\n<p>I have this C:</p>\n\n<pre><code>int tun_open(char *devname)\n{\n  struct ifreq ifr;\n  int fd, err;\n\n  if ( (fd = open(\"/dev/net/tun\", O_RDWR)) == -1 ) {\n       perror(\"open /dev/net/tun\");exit(1);\n  }\n  memset(&amp;ifr, 0, sizeof(ifr));\n  ifr.ifr_flags = IFF_TUN;\n  strncpy(ifr.ifr_name, devname, IFNAMSIZ);  \n\n  /* ioctl will use if_name as the name of TUN \n   * interface to open: \"tun0\", etc. */\n  if ( (err = ioctl(fd, TUNSETIFF, (void *) &amp;ifr)) == -1 ) {\n    perror(\"ioctl TUNSETIFF\");close(fd);exit(1);\n  }\n  //..........\n</code></pre>\n\n<p>How would I do that same thing using the nix crate? There are no <code>TUN*</code> constants in the nix crate and it isn't clear how to use the <code>ioctl</code> macro.</p>\n"}, {"tags": ["linux", "operating-system", "rust"], "comments": [{"owner": {"reputation": 5446, "user_id": 4687348, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8de53eca1206063d96d2c309b362fc8b?s=128&d=identicon&r=PG&f=1", "display_name": "FelixSFD", "link": "https://stackoverflow.com/users/4687348/felixsfd"}, "edited": false, "score": 3, "creation_date": 1483638044, "post_id": 41477570, "comment_id": 70188393, "body": "Please don&#39;t deface your post by rolling back our improvements."}], "answers": [{"tags": [], "owner": {"reputation": 433, "user_id": 262750, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8947a9372f254fd9293ff34372df1991?s=128&d=identicon&r=PG", "display_name": "ktsujister", "link": "https://stackoverflow.com/users/262750/ktsujister"}, "is_accepted": true, "score": 0, "last_activity_date": 1483705121, "last_edit_date": 1483705121, "creation_date": 1483604497, "answer_id": 41480222, "question_id": 41477570, "link": "https://stackoverflow.com/questions/41477570/how-to-open-and-close-a-device-in-rust-such-as-dev-something/41480222#41480222", "title": "How to open and close a device in Rust such as &quot;/dev/something&quot;?", "body": "<p><a href=\"https://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"nofollow noreferrer\"><code>std::fs::File</code></a> should work for \"/dev/something\" as well.\nYou can use <code>File::open</code> for reading files. </p>\n\n<p>Below is example for reading from <code>/dev/null</code>.</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\nlet mut f = try!(File::open(\"/dev/null\"));\nlet mut s = String::new();\ntry!(f.read_to_string(&amp;mut s));\nprintln!(\"s:'{}'\", s);\n</code></pre>\n"}], "owner": {"reputation": 301, "user_id": 7338173, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/cf5f4cc9a6c6173f95951a727c87cc59?s=128&d=identicon&r=PG&f=1", "display_name": "Jodooomi", "link": "https://stackoverflow.com/users/7338173/jodooomi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1076, "favorite_count": 0, "accepted_answer_id": 41480222, "answer_count": 1, "score": -2, "last_activity_date": 1483718110, "creation_date": 1483592384, "last_edit_date": 1483718110, "question_id": 41477570, "link": "https://stackoverflow.com/questions/41477570/how-to-open-and-close-a-device-in-rust-such-as-dev-something", "title": "How to open and close a device in Rust such as &quot;/dev/something&quot;?", "body": "<p>In C I can use the function <code>open</code> to open a file or anything else such as <code>/dev/something</code>. And there's <code>close</code> as well. How can I open and close <code>/dev/something</code> in Rust?</p>\n\n<p>In fact, I also need to write to and read from it. How can I do that?</p>\n"}, {"tags": ["rust", "static-analysis", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 0, "creation_date": 1483625399, "post_id": 41477557, "comment_id": 70179396, "body": "Thanks! It seems that the problem with this approach (besides having to annotate <code>Cargo.toml</code>, <code>build.rs</code>, and <code>lib.rs</code> or <code>main.rs</code>) is that clippy only runs when the file to be analyzed is recompiled, whereas <code>cargo clippy</code> always runs clippy even if the file doesn&#39;t need to be recompiled. Is there a better way to achieve this behavior than simply making an edit to <code>build.rs</code> before running <code>cargo build</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 0, "creation_date": 1483641698, "post_id": 41477557, "comment_id": 70190513, "body": "You can run <code>cargo clean --package &lt;project_name&gt;</code> beforehand; this&#39;ll clean both the project itself and the build script."}, {"owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 0, "creation_date": 1483648113, "post_id": 41477557, "comment_id": 70194188, "body": "That doesn&#39;t seem to work; when I run that command and then run <code>rustup run nightly cargo build --features clippy</code> again, I get the clippy output for my <code>src</code> code, but not my <code>build.rs</code> file."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 0, "creation_date": 1483659378, "post_id": 41477557, "comment_id": 70199333, "body": "Hmm, it works for me with <code>cargo 0.17.0-nightly (71e996e 2017-01-02)</code>. I get the clippy output for both. Do you have an older nightly? Do you have the same problem with just <code>cargo clean</code>?"}, {"owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 0, "creation_date": 1483665095, "post_id": 41477557, "comment_id": 70200896, "body": "After a full <code>cargo clean</code>, clippy runs properly on <code>build.rs</code> as expected. It looks like you&#39;re right about the version; if I run <code>rustup default nightly</code>, then <code>cargo clean --package &lt;project_name&gt;</code>, then <code>cargo build --features clippy</code>, I get the expected output, but if I run <code>rustup default stable</code>, then <code>cargo clean --package &lt;project_name&gt;</code>, then <code>cargo +nightly build --features clippy</code>, I don&#39;t get the expected output."}, {"owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "edited": false, "score": 1, "creation_date": 1483727472, "post_id": 41477557, "comment_id": 70230040, "body": "Also, since clippy takes a <code>--features</code> option, you can run it on both <code>build.rs</code> and the <code>src</code> code by doing the <code>build-dependencies</code> and <code>build.rs</code> setup you mentioned your answer and then running <code>cargo +nightly clippy --features clippy</code>."}, {"owner": {"reputation": 3595, "user_id": 234658, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/19439b09bfe5d5c63096ff104c825d2f?s=128&d=identicon&r=PG&f=1", "display_name": "dkim", "link": "https://stackoverflow.com/users/234658/dkim"}, "edited": false, "score": 0, "creation_date": 1585276700, "post_id": 41477557, "comment_id": 107710050, "body": "This method does not appear to work at present probably because the use of clippy as a compiler plugin has been deprecated: <a href=\"https://github.com/rust-lang/rust-clippy/pull/2712\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust-clippy/pull/2712</a>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1483624554, "last_edit_date": 1483624554, "creation_date": 1483592296, "answer_id": 41477557, "question_id": 41477040, "link": "https://stackoverflow.com/questions/41477040/is-there-a-simpler-way-to-run-clippy-on-my-build-script/41477557#41477557", "title": "Is there a simpler way to run clippy on my build script?", "body": "<p>There are two ways to use Clippy: the <code>cargo clippy</code> command and the <code>clippy</code> compiler plugin. <code>cargo clippy</code> detects the build script as a dependency of the main project, so it doesn't load the compiler plugin.</p>\n\n<p>Therefore, the other option is to use the compiler plugin directly. The instructions for doing this are in <a href=\"https://github.com/Manishearth/rust-clippy/blob/master/README.md\" rel=\"nofollow noreferrer\">clippy's README</a>. We need to make a few adaptations for using it on the build script, though.</p>\n\n<p>First, we need to add <code>clippy</code> as a build dependency:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[build-dependencies]\nclippy = { version = \"*\", optional = true }\n\n[features]\ndefault = []\n</code></pre>\n\n<p>Adding it to <code>[dependencies]</code> instead will not work (the result is <code>error[E0463]: can't find crate for `clippy`</code>), as Cargo will not pass the path to dependencies to the compiler when building the build script.</p>\n\n<p>Then, we need to add this at the top of <code>build.rs</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![cfg_attr(feature=\"clippy\", feature(plugin))]\n#![cfg_attr(feature=\"clippy\", plugin(clippy))]\n</code></pre>\n\n<p>Finally, we need to build with the <code>clippy</code> feature enabled:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ cargo build --features clippy\n</code></pre>\n\n<p>If you want to run <code>clippy</code> on both the build script and on the main project when you use the command above, add the same <code>clippy</code> dependency to <code>[dependencies]</code>, then add the <code>cfg_attr</code> attributes to the crate root(s) (<code>lib.rs</code>, <code>main.rs</code>, etc.).</p>\n"}], "owner": {"reputation": 12070, "user_id": 5044950, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/9yN0x.jpg?s=128&g=1", "display_name": "Sam Estep", "link": "https://stackoverflow.com/users/5044950/sam-estep"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2647, "favorite_count": 4, "accepted_answer_id": 41477557, "answer_count": 1, "score": 6, "last_activity_date": 1483625773, "creation_date": 1483588180, "last_edit_date": 1592644375, "question_id": 41477040, "link": "https://stackoverflow.com/questions/41477040/is-there-a-simpler-way-to-run-clippy-on-my-build-script", "title": "Is there a simpler way to run clippy on my build script?", "body": "<p>In a Cargo project, I can easily run <a href=\"https://github.com/Manishearth/rust-clippy\" rel=\"nofollow noreferrer\">clippy</a> on my <code>src</code> code using this command:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>rustup run nightly cargo clippy\n</code></pre>\n<p>However, if I'm using a <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow noreferrer\">build script</a>, I'd like to run clippy on that as well. For instance, if my <code>build.rs</code> file looks like this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let foo = &quot;Hello, world!&quot;;\n    println!(&quot;{}&quot;, foo);\n}\n</code></pre>\n<p>I'd like to see this when I run clippy:</p>\n<pre class=\"lang-none prettyprint-override\"><code>warning: use of a blacklisted/placeholder name `foo`, #[warn(blacklisted_name)] on by default\n --&gt; build.rs:2:9\n  |\n2 |     let foo = &quot;Hello, world!&quot;;\n  |         ^^^\n  |\n  = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name\n</code></pre>\n<p>The only way I can think of to run clippy on my build script is to copy it into a <code>cargo new</code> temporary project, run clippy, make my changes there, and copy back, but this is horribly inconvenient and quickly becomes infeasible when <a href=\"http://doc.crates.io/build-script.html#build-dependencies\" rel=\"nofollow noreferrer\">build dependencies</a> and the like are added to the mix.</p>\n<p>Is there a simpler way to analyze my build script with clippy?</p>\n"}]