[{"tags": ["rust", "traits"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 4, "creation_date": 1455721336, "post_id": 35458562, "comment_id": 58616693, "body": "<code>#[derive(Clone, Copy)]</code> is the right way, but for the record, it&#39;s not magical: It&#39;s easy to implement those traits manually, especially in easy cases such as yours: <code>impl Copy for Direction {} impl Clone for Direction { fn clone(&amp;self) -&gt; Self { *self } }</code>"}], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 2, "creation_date": 1472445128, "post_id": 35458874, "comment_id": 65737218, "body": "why is the &quot;Clone&quot; needed? Does it always need to be added if one wants to implement Copy?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 12, "creation_date": 1472658451, "post_id": 35458874, "comment_id": 65843740, "body": "@xetra11Yes, <code>Clone</code> is a supertrait of <code>Copy</code> so every type implementing <code>Copy</code> also needs to implement <code>Clone</code>."}, {"owner": {"reputation": 8361, "user_id": 439026, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/eb050c54b891309ffdd14a0e1fdd5e66?s=128&d=identicon&r=PG", "display_name": "zeh", "link": "https://stackoverflow.com/users/439026/zeh"}, "edited": false, "score": 1, "creation_date": 1583760112, "post_id": 35458874, "comment_id": 107213576, "body": "It&#39;s not exactly an answer, but I rather prefer deriving <code>Clone</code> <i>without</i> deriving <code>Copy</code>. It allows developers to do <code>.clone()</code> on the element explicitly, but it won&#39;t do it for you (that&#39;s <code>Copy</code>&#39;s job). So at least there&#39;s a reason for <code>Clone</code> to exist separately from <code>Copy</code>; I would go further and assume <code>Clone</code> implements the method, but <code>Copy</code> makes it automatic, without redundancy between the two."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 62, "last_activity_date": 1527958326, "last_edit_date": 1527958326, "creation_date": 1455717936, "answer_id": 35458874, "question_id": 35458562, "link": "https://stackoverflow.com/questions/35458562/how-can-i-implement-rusts-copy-trait/35458874#35458874", "title": "How can I implement Rust&#39;s Copy trait?", "body": "<p>You don't have to implement <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noreferrer\"><code>Copy</code></a> yourself; the compiler can derive it for you:</p>\n\n<pre><code>#[derive(Copy, Clone)]\nenum Direction {\n    North,\n    East,\n    South,\n    West,\n}\n\n#[derive(Copy, Clone)]\nstruct RoadPoint {\n    direction: Direction,\n    index: i32,\n}\n</code></pre>\n\n<p>Note that every type that implements <code>Copy</code> must also implement <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noreferrer\"><code>Clone</code></a>. <code>Clone</code> can also be derived.</p>\n"}, {"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 16, "last_activity_date": 1455773753, "last_edit_date": 1455773753, "creation_date": 1455717956, "answer_id": 35458884, "question_id": 35458562, "link": "https://stackoverflow.com/questions/35458562/how-can-i-implement-rusts-copy-trait/35458884#35458884", "title": "How can I implement Rust&#39;s Copy trait?", "body": "<p>Just prepend <code>#[derive(Copy, Clone)]</code> before your enum.</p>\n\n<p>If you really want, you can also</p>\n\n<pre><code>impl Copy for MyEnum {}\n</code></pre>\n\n<p>The derive-attribute does the same thing under the hood.</p>\n"}], "owner": {"reputation": 722, "user_id": 270943, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7811eb1b0c6a0ddcd80c04457af54f2b?s=128&d=identicon&r=PG", "display_name": "tehnyit", "link": "https://stackoverflow.com/users/270943/tehnyit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 32999, "favorite_count": 6, "accepted_answer_id": 35458874, "answer_count": 2, "score": 45, "last_activity_date": 1527958326, "creation_date": 1455717073, "last_edit_date": 1527878655, "question_id": 35458562, "link": "https://stackoverflow.com/questions/35458562/how-can-i-implement-rusts-copy-trait", "title": "How can I implement Rust&#39;s Copy trait?", "body": "<p>I am trying to initialise an array of structs in Rust:</p>\n\n<pre><code>enum Direction {\n    North,\n    East,\n    South,\n    West,\n}\n\nstruct RoadPoint {\n    direction: Direction,\n    index: i32,\n}\n\n// Initialise the array, but failed.\nlet data = [RoadPoint { direction: Direction::East, index: 1 }; 4]; \n</code></pre>\n\n<p>When I try to compile, the compiler complains that the <code>Copy</code> trait is not implemented:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `main::RoadPoint: std::marker::Copy` is not satisfied\n  --&gt; src/main.rs:15:16\n   |\n15 |     let data = [RoadPoint { direction: Direction::East, index: 1 }; 4]; \n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `main::RoadPoint`\n   |\n   = note: the `Copy` trait is required because the repeated element will be copied\n</code></pre>\n\n<p>How can the <code>Copy</code> trait be implemented?</p>\n"}, {"tags": ["closures", "rust"], "comments": [{"owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "edited": false, "score": 2, "creation_date": 1455702483, "post_id": 35451853, "comment_id": 58602806, "body": "may i ask, why is the output of <code>get_token</code>, <code>Box&lt;Vec&lt;u8&gt;&gt;</code> rather than just <code>Vec&lt;u8&gt;</code>"}], "answers": [{"comments": [{"owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "edited": false, "score": 0, "creation_date": 1455709518, "post_id": 35455335, "comment_id": 58607983, "body": "Thanks, I will use the playground next time I post something. Apologies."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1455712227, "post_id": 35455335, "comment_id": 58609873, "body": "Nice solution... but oh is this <code>|| -&gt; _ { ...  } ()</code> pattern perl like!"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1455708251, "last_edit_date": 1495540235, "creation_date": 1455708251, "answer_id": 35455335, "question_id": 35451853, "link": "https://stackoverflow.com/questions/35451853/capturing-the-same-variable-in-one-of-multiple-closures/35455335#35455335", "title": "Capturing the same variable in one of multiple closures", "body": "<p>First of all: Please make sure to provide an <a href=\"https://stackoverflow.com/help/mcve\">MCVE</a> in the future, it's not fun to have to fix syntax errors before being able to reproduce your problem: <a href=\"http://is.gd/tXr7WK\" rel=\"nofollow noreferrer\">http://is.gd/tXr7WK</a></p>\n\n<p>Rust does not know that the only way the second closure can run, is if the first closure did not run and will never run. You can either wait for the <a href=\"https://github.com/rust-lang/rfcs/pull/1303\" rel=\"nofollow noreferrer\"><code>let/else</code></a> RFC to be accepted, implemented and stabilized, or you can create your error in steps, first create an inner closure that does all the operations for that one error kind without using up the <code>token</code>, then run the closure, then map the error to your custom error type.</p>\n\n<pre><code>|| -&gt; _ {\n    try!(do_stuff(\"a\").map_err(|e| (\"foo\".to_owned(), e)));\n    try!(do_other_stuff(\"b\",\"c\").map_err(|e| (\"bar\".to_owned(), e)));\n    Ok(())\n} ().map_err(|(reason, e)| MyError::IoError{ token: token, reason: reason })\n</code></pre>\n\n<p>There's something weird going on where the closure requires us to specify that it returns something with <code>-&gt; _</code>, but I'm not sure what it is.</p>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 2, "last_activity_date": 1455712577, "creation_date": 1455712577, "answer_id": 35456921, "question_id": 35451853, "link": "https://stackoverflow.com/questions/35451853/capturing-the-same-variable-in-one-of-multiple-closures/35456921#35456921", "title": "Capturing the same variable in one of multiple closures", "body": "<p>You can use <code>and_then()</code> combinator to avoid additional closure:</p>\n\n<pre><code>try!(do_stuff(\"a\").map_err(|_| \"foo\" )\n        .and_then(|_|\n            do_other_stuff(\"b\",\"c\").map_err(|_| \"bar\")\n        )\n        .map_err(|e| MyError::IoError{token:token,reason:e.into()})\n);\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1455717095, "post_id": 35457632, "comment_id": 58613354, "body": "the problem with this is that you loose the <code>Ok</code> value, but since that&#39;s not required in this question anyway, your answer is the prettiest."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1455717316, "post_id": 35457632, "comment_id": 58613523, "body": "@ker You can <code>match</code> instead if you want the <code>Ok</code> value."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 3, "last_activity_date": 1455714518, "creation_date": 1455714518, "answer_id": 35457632, "question_id": 35451853, "link": "https://stackoverflow.com/questions/35451853/capturing-the-same-variable-in-one-of-multiple-closures/35457632#35457632", "title": "Capturing the same variable in one of multiple closures", "body": "<p>Much more straightforward is to just not use <code>try!</code> or closures:</p>\n\n<pre><code>if let Err(e) = do_stuff(\"a\") {\n    return Err(MyError::IoError{token: token, reason: \"foo\".to_owned()});\n}\nif let Err(e) = do_other_stuff(\"b\", \"c\") {\n    return Err(MyError::IoError{token: token, reason: \"bar\".to_owned()});\n}\n</code></pre>\n\n<p>This lets Rust perform straightforward analysis like you want it to, and is much more readable than dancing through hoops.</p>\n"}], "owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 35455335, "answer_count": 3, "score": 0, "last_activity_date": 1455720672, "creation_date": 1455699224, "last_edit_date": 1455720672, "question_id": 35451853, "link": "https://stackoverflow.com/questions/35451853/capturing-the-same-variable-in-one-of-multiple-closures", "title": "Capturing the same variable in one of multiple closures", "body": "<p>I have two closures that capture the same <code>Vec</code> and I don't know how to write this in idiomatic Rust:</p>\n\n<pre><code>use std::error;\n\nfn get_token -&gt; Box&lt;Vec&lt;u8&gt;&gt;() {...}\nfn do_stuff(file: &amp;str) -&gt; std::io::Result&lt;i32&gt; {...}\nfn do_other_stuff(a: &amp;str, a: &amp;str) -&gt; std::io::Result&lt;i32&gt; {...}\n\nenum MyError {\n    IoError { token: Vec&lt;u8&gt;, reason: String ),\n}\n\nfn consumer() -&gt; Result&lt;MyError, ()&gt; {\n    let token = get_token();\n\n    try!(do_stuff(\"a\")\n        .map_err(|e| MyError::IoError { token: token, reason: \"foo\".to_str() }));\n    try!(do_other_stuff(\"b\", \"c\")\n        .map_err(|e| MyError::IoError { token: token, reason: \"bar\".to_str() }));\n}\n</code></pre>\n\n<p>I could replace the <code>map_err</code> calls with <code>match</code> expressions but I really am stumped by this: how do I pass a <code>Vec</code> to multiple closures?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455645389, "post_id": 35439546, "comment_id": 58577246, "body": "<i>as I understand it, this is not currently possible in Rust</i> \u2014 where does that understanding come from? <i>I would have to match for every state</i> \u2014 you can always have a &quot;default&quot; case by using the <code>_</code> pattern."}, {"owner": {"reputation": 8289, "user_id": 391806, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/88a2ea78dadbdaf73e1033fe7cbdeb73?s=128&d=identicon&r=PG", "display_name": "Dale Wilson", "link": "https://stackoverflow.com/users/391806/dale-wilson"}, "edited": false, "score": 0, "creation_date": 1455649357, "post_id": 35439546, "comment_id": 58579740, "body": "Suggeston:  Try the code that returns a new instance of GameState.  Show the code and the error message you receive (if any)."}, {"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1455649693, "post_id": 35439546, "comment_id": 58579925, "body": "You are probably looking for boxed trait objects."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455654318, "post_id": 35439546, "comment_id": 58582495, "body": "Relevant, but maybe not an exact duplicate? <a href=\"http://stackoverflow.com/q/31897986/155423\">stackoverflow.com/q/31897986/155423</a>"}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 0, "creation_date": 1531574001, "post_id": 35439546, "comment_id": 89653103, "body": "There are people using function pointers to do this now, <a href=\"https://dev.to/mindflavor/lets-build-zork-using-rust-1opm\" rel=\"nofollow noreferrer\">dev.to/mindflavor/lets-build-zork-using-rust-1opm</a> is an example very similar to the question."}], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1510126036, "post_id": 35442867, "comment_id": 81296791, "body": "I think <code>fn things() -&gt; impl Iterator</code> in traits either won&#39;t be allowed or will just be syntactic sugar for an associated type in the trait: <code>trait PlayerState { type NewState: PlayerState; fn handle(&amp;self, event: Event) -&gt; Self::NewState; }</code>.  You wouldn&#39;t be able to box it without knowing the <code>NewState</code> type. (Even if you could, you still can&#39;t store the result without boxing it, but this is basically the same limitation)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1479313306, "last_edit_date": 1479313306, "creation_date": 1455656404, "answer_id": 35442867, "question_id": 35439546, "link": "https://stackoverflow.com/questions/35439546/a-pattern-for-finite-game-state-machine-in-rust-with-changing-behavior/35442867#35442867", "title": "A pattern for finite (game) state machine in Rust with changing behavior?", "body": "<p>A finite state machine (FSM) can be directly modeled using two enums, one representing all the states and another representing all the transitions:</p>\n\n<pre><code>#[derive(Debug)]\nenum Event {\n    Coin,\n    Push,\n}\n\n#[derive(Debug)]\nenum Turnstyle {\n    Locked,\n    Unlocked,\n}\n\nimpl Turnstyle {\n    fn next(self, event: Event) -&gt; Turnstyle {\n        use Event::*;\n        use Turnstyle::*;\n\n        match self {\n            Locked =&gt; {\n                match event {\n                    Coin =&gt; Unlocked,\n                    _ =&gt; self,\n                }\n            },\n            Unlocked =&gt; {\n                match event {\n                    Push =&gt; Locked,\n                    _ =&gt; self,\n                }\n            }\n        }\n    }\n}\n\nfn main() {\n    let t = Turnstyle::Locked;\n    let t = t.next(Event::Push);\n    println!(\"{:?}\", t);\n    let t = t.next(Event::Coin);\n    println!(\"{:?}\", t);\n    let t = t.next(Event::Coin);\n    println!(\"{:?}\", t);\n    let t = t.next(Event::Push);\n    println!(\"{:?}\", t);\n}\n</code></pre>\n\n<p>The biggest downside is that one method ends up becoming very cluttered with all the state / transition pairs. You can sometimes neaten up the <code>match</code> a bit by matching on the pairs:</p>\n\n<pre><code>match (self, event) {\n    (Locked, Coin) =&gt; Unlocked,\n    (Unlocked, Push) =&gt; Locked,\n    (prev, _) =&gt; prev,\n}\n</code></pre>\n\n<blockquote>\n  <p>avoid writing lengthy pattern matching statements.</p>\n</blockquote>\n\n<p>Each match arm can be a function that you call for every unique action you'd like to do. Above, <code>Unlocked</code> could be replaced with a function called <code>unlocked</code> that does whatever it needs to.</p>\n\n<blockquote>\n  <p>using enums [...] ended up being a dead end since I would have to match for every state.</p>\n</blockquote>\n\n<p>Note that you can use the <code>_</code> to match any pattern.</p>\n\n<p>A downside to the enum is that it is not open for other people to add to it. Maybe you'd like to have an extensible system for your game where mods can add new concepts. In that case, you can use traits:</p>\n\n<pre><code>#[derive(Debug)]\nenum Event {\n    Damage,\n    Healing,\n    Poison,\n    Esuna,\n}\n\n#[derive(Debug)]\nstruct Player {\n    state: Box&lt;PlayerState&gt;,\n}\n\nimpl Player {\n    fn handle(&amp;mut self, event: Event) {\n         let new_state = self.state.handle(event);\n         self.state = new_state;\n    }\n}\n\ntrait PlayerState: std::fmt::Debug {\n    fn handle(&amp;self, event: Event) -&gt; Box&lt;PlayerState&gt;;\n}\n\n#[derive(Debug)]\nstruct Healthy;\n#[derive(Debug)]\nstruct Poisoned;\n\nimpl PlayerState for Healthy {\n    fn handle(&amp;self, event: Event) -&gt; Box&lt;PlayerState&gt; {\n        match event {\n            Event::Poison =&gt; Box::new(Poisoned),\n            _ =&gt; Box::new(Healthy),\n        }\n    }\n}\n\nimpl PlayerState for Poisoned {\n    fn handle(&amp;self, event: Event) -&gt; Box&lt;PlayerState&gt; {\n        match event {\n            Event::Esuna =&gt; Box::new(Healthy),\n            _ =&gt; Box::new(Poisoned),\n        }\n    }\n}\n\nfn main() {\n    let mut player = Player { state: Box::new(Healthy) };\n    println!(\"{:?}\", player);\n    player.handle(Event::Damage);\n    println!(\"{:?}\", player);\n    player.handle(Event::Healing);\n    println!(\"{:?}\", player);\n    player.handle(Event::Poison);\n    println!(\"{:?}\", player);\n    player.handle(Event::Esuna);\n    println!(\"{:?}\", player);\n}\n</code></pre>\n\n<p>Now, you can implement whatever states you'd like.</p>\n\n<blockquote>\n  <p>I want <code>handle</code> to be a pure function that returns a new <code>GameState</code> instance.</p>\n</blockquote>\n\n<p>You cannot return a <code>GameState</code> instance because the compiler needs to know how much space each value requires. If you could return a struct that took up 4 bytes in one call or 8 bytes from another, the compiler wouldn't have any idea how much space the call you actually make needs.</p>\n\n<p>The trade-off you have to make is to always return a newly allocated <em>trait object</em>. This allocation is required to give a homogenous size to every possible variant of <code>PlayerState</code> that might arise.</p>\n\n<p>In the future, there might be support for saying that a function returns a trait (<code>fn things() -&gt; impl Iterator</code> for example). This is basically hiding the fact that there <em>is</em> a value with a known size that the programmer doesn't / cannot write. If I understand correctly, it would <strong>not</strong> help in this case because the ambiguity of size would not be determinable at compile time.</p>\n\n<p>In the <em>extremely rare case</em> that your states don't have any actual <em>state</em>, you could create a shared, immutable, global instance of each state:</p>\n\n<pre><code>trait PlayerState: std::fmt::Debug {\n    fn handle(&amp;self, event: Event) -&gt; &amp;'static PlayerState;\n}\n\nstatic HEALTHY: Healthy = Healthy;\nstatic POISONED: Poisoned = Poisoned;\n\nimpl PlayerState for Healthy {\n    fn handle(&amp;self, event: Event) -&gt; &amp;'static PlayerState {\n        match event {\n            Event::Poison =&gt; &amp;POISONED,\n            _ =&gt; &amp;HEALTHY,\n        }\n    }\n}\n\nimpl PlayerState for Poisoned {\n    fn handle(&amp;self, event: Event) -&gt; &amp;'static PlayerState {\n        match event {\n            Event::Esuna =&gt; &amp;HEALTHY,\n            _ =&gt; &amp;POISONED,\n        }\n    }\n}\n</code></pre>\n\n<p>This will avoid the overhead (whatever it may be) of the allocation. I wouldn't try this until you know there's no state and there's lots of time spent in the allocation.</p>\n"}, {"tags": [], "owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "is_accepted": false, "score": 2, "last_activity_date": 1510097632, "creation_date": 1510097632, "answer_id": 47169154, "question_id": 35439546, "link": "https://stackoverflow.com/questions/35439546/a-pattern-for-finite-game-state-machine-in-rust-with-changing-behavior/47169154#47169154", "title": "A pattern for finite (game) state machine in Rust with changing behavior?", "body": "<p>I'm experimenting with encoding the FSM into the type model. This requires each state and each event to have it's type but I guess it's just bytes underneath and the explicit types allow me to break the transitions apart. Here's a <a href=\"https://play.rust-lang.org/?gist=73b2dd5f0a77b493cdaed911e34d5c29&amp;version=stable\" rel=\"nofollow noreferrer\">playground with a tourniquet</a> example.</p>\n\n<p>We start with the simplest assumptions. Machine is represented by it's states and transitions. An event transits the machine in one step to a new state, consuming old state. This allows for the machine to be encoded in immutable state and event structs. States implement this generic <code>Machine</code> trait to add transitions: </p>\n\n<pre><code>pub trait Machine&lt;TEvent&gt; {\n    type State;\n    fn step(self, event: TEvent) -&gt; Self::State;\n}\n</code></pre>\n\n<p>That's all the framework for this pattern really. The rest is application and implementation. You cannot make a transition that is not defined and there's no unpredictable state. It looks very readable. For instance:</p>\n\n<pre><code>enum State {\n    Go(Open),\n    Wait(Locked),\n}\n\nstruct Locked {\n    price: u8,\n    credit: u8,\n}\n\nstruct Open {\n    price: u8,\n    credit: u8,\n}\n\nstruct Coin {\n    value: u8,\n}\n\nimpl Machine&lt;Coin&gt; for Locked {\n    type State = State;\n    fn step(self, coin: Coin) -&gt; Self::State {\n        let credit = self.credit + coin.value;\n        if credit &gt;= self.price {\n            println!(\"Thanks, you've got enough: {}\", credit);\n            State::Go(Open {\n                credit: credit,\n                price: self.price,\n            })\n        } else {\n            println!(\"Thanks, {} is still missing\", self.price - credit);\n            State::Wait(Locked {\n                credit: credit,\n                price: self.price,\n            })\n        }\n    }\n}\n</code></pre>\n\n<p>And the client code is pretty semantic, too:</p>\n\n<pre><code>let locked = Locked {\n    price: 25,\n    credit: 0,\n};\nmatch locked.step(Coin { value: 5 }) {\n    State::Go(open) =&gt; {println!(\"Weeeeeeeeeeeeee!\");},\n    State::Wait(locked) =&gt; {panic!(\"Oooops\");},\n}\n</code></pre>\n\n<p>I was much inspired by <a href=\"https://hoverbear.org/2016/10/12/rust-state-machine-pattern/\" rel=\"nofollow noreferrer\">Andrew Hobben's Pretty State Machine Pattern</a>.</p>\n"}], "owner": {"reputation": 474, "user_id": 2430977, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0J6vW.png?s=128&g=1", "display_name": "ntdef", "link": "https://stackoverflow.com/users/2430977/ntdef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2467, "favorite_count": 1, "accepted_answer_id": 35442867, "answer_count": 2, "score": 1, "last_activity_date": 1510097632, "creation_date": 1455644737, "last_edit_date": 1455645297, "question_id": 35439546, "link": "https://stackoverflow.com/questions/35439546/a-pattern-for-finite-game-state-machine-in-rust-with-changing-behavior", "title": "A pattern for finite (game) state machine in Rust with changing behavior?", "body": "<p>I'm trying to write a turn-based game in Rust and I'm running up against a wall in the language (unless I'm not understanding something quite right \u2013 I'm new to the language). Basically, I'd like to change states in my game where each state has different behavior. For example I have something like:</p>\n\n<pre><code>struct Game {\n    state: [ Some GameState implementer ],\n}\n\nimpl Game {\n    fn handle(&amp;mut self, event: Event) {\n         let new_state = self.handle(event);\n         self.state = new_state;\n    }\n}\n\nstruct ChooseAttackerPhase {\n    // ...\n}\n\nstruct ResolveAttacks  {\n    // ...\n}\n\nimpl ResolveAttacks {\n    fn resolve(&amp;self) {\n        // does some stuff\n    }\n}\n\ntrait GameState {\n    fn handle(&amp;self, event: Event) -&gt; [ A New GateState implementer ]\n}\n\nimpl GameState for ChooseAttackerPhase {\n    fn handle(&amp;self, event: Event) -&gt; [ A New GameState implementer ] {\n        // ...\n    }\n}\n\nimpl GameState for ResolveAttacks {\n    fn handle(&amp;self, event: Event) -&gt; [ A New GameState implementer ] {\n        // ...\n    }\n}\n</code></pre>\n\n<p>This was my original plan. I want <code>handle</code> to be a pure function that returns a new <code>GameState</code> instance. But as I understand it, this is not currently possible in Rust. So I tried using <code>enums</code> with tuples, each with their respective handler, that ended up being a dead end since I would have to match for every state. </p>\n\n<p>Anyways, the code is not from my original project. Its just an example. My question is: is there a pattern for doing this in Rust that I'm missing? I'd like to be able to separate the logic for things I need to do in each state that are unique to each state and avoid writing lengthy pattern matching statements. </p>\n\n<p>Let me know if I need to clarify my question a bit more. </p>\n"}, {"tags": ["rust", "dynamic-dispatch"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455872269, "post_id": 35439507, "comment_id": 58693580, "body": "@Shepmaster sorry I had not noticed your comment. I think you&#39;re right that the questions are very similar. Up to you... happy to move my answer to the other question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1455895404, "post_id": 35439507, "comment_id": 58708488, "body": "@PaoloFalabella let&#39;s do that!"}], "owner": {"reputation": 883, "user_id": 1509255, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/1bdbc7273bc265e4e92f2fcacbb6c419?s=128&d=identicon&r=PG", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/1509255/aleksandr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 90, "favorite_count": 0, "closed_date": 1455895411, "answer_count": 0, "score": 2, "last_activity_date": 1455872571, "creation_date": 1455644626, "last_edit_date": 1455646816, "question_id": 35439507, "link": "https://stackoverflow.com/questions/35439507/vector-of-traits-dynamic-dispatch-which-contains-associated-type-also-dynamic", "closed_reason": "Duplicate", "title": "Vector of traits (dynamic dispatch) which contains associated type (also dynamic dispatch)", "body": "<p>I have a trait:</p>\n\n<pre><code>pub trait Plugin {\n    type Error: error::Error;\n\n    fn handle(&amp;mut self, client: &amp; Client, message: Message) -&gt; Result&lt;(), Self::Error&gt;;\n}\n</code></pre>\n\n<hr>\n\n<p>There are many implementations of this trait (each implementation contains a specific error type):</p>\n\n<pre><code>impl ::Plugin for first::Plugin {\n    type Error = first::Error;\n\n    fn handle(&amp;mut self, client: &amp; Client, message: Message) -&gt; first::Result&lt;()&gt; {\n        ...\n        Ok(())\n    }\n}\n\nimpl ::Plugin for second::Plugin {\n    type Error = second::Error;\n\n    fn handle(&amp;mut self, client: &amp; Client, message: Message) -&gt; second::Result&lt;()&gt; {\n        ...\n        Ok(())\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>I need to create vector of plugins:</p>\n\n<pre><code>let mut plugins: Vec&lt;Box&lt;Plugin&lt;Error=_&gt;&gt;&gt; = vec![\n    Box::new(first::Plugin::new()),\n    Box::new(second::Plugin::new()),\n];\n</code></pre>\n\n<p>But the code throws this error:</p>\n\n<pre><code>error: type mismatch resolving `&lt;plugins::first::Plugin&lt;'_&gt; as plugin::Plugin&gt;::Error == plugins::second::error::Error`:\n</code></pre>\n\n<p>How to reorganize the code to create vector of plugins (dynamic dispatch, <code>impl trait Plugin</code>) which contains an associated type (also dynamic dispatch, <code>impl trait error::Error</code>)?</p>\n\n<p>--</p>\n\n<p>Here is the complete code:</p>\n\n<pre><code>fn main() {\n    let mut plugins: Vec&lt;Box&lt;Plugin&lt;Error = _&gt;&gt;&gt; = vec![\n        Box::new(first::Plugin::new()),\n        Box::new(second::Plugin::new()),\n    ];\n}\n\npub trait Plugin {\n    type Error: std::error::Error;\n\n    fn handle(&amp;mut self) -&gt; Result&lt;(), Self::Error&gt;;\n}\n\nmod first {\n    use std;\n\n    pub struct Plugin;\n\n    impl Plugin {\n        pub fn new() -&gt; Plugin {\n            Plugin\n        }\n    }\n\n    impl ::Plugin for Plugin {\n        type Error = Error;\n\n        fn handle(&amp;mut self) -&gt; Result&lt;(), Error&gt; {\n            Ok(())\n        }\n    }\n\n    #[derive(Debug)]\n    pub struct Error;\n\n    impl std::fmt::Display for Error {\n        fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n            write!(f, \"{}\", \"first error\")\n        }\n    }\n\n    impl std::error::Error for Error {\n        fn description(&amp;self) -&gt; &amp;str {\n            \"first error\"\n        }\n    }\n}\n\nmod second {\n    use std;\n\n    pub struct Plugin;\n\n    impl Plugin {\n        pub fn new() -&gt; Plugin {\n            Plugin\n        }\n    }\n\n    impl ::Plugin for Plugin {\n        type Error = Error;\n\n        fn handle(&amp;mut self) -&gt; Result&lt;(), Error&gt; {\n            Ok(())\n        }\n    }\n\n    #[derive(Debug)]\n    pub struct Error;\n\n    impl std::fmt::Display for Error {\n        fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n            write!(f, \"{}\", \"second error\")\n        }\n    }\n\n    impl std::error::Error for Error {\n        fn description(&amp;self) -&gt; &amp;str {\n            \"second error\"\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/M0qNlJ\" rel=\"nofollow\">Rust playground</a></p>\n"}, {"tags": ["python", "rust", "hashset"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1455645107, "post_id": 35439376, "comment_id": 58577056, "body": "When I move the set-building out of the loop and only repeat the intersection, for both cases of course, Rust is faster than python2.7. So the question is slightly wrong."}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1455645671, "post_id": 35439376, "comment_id": 58577442, "body": "@bluss good point, on my machine <code>rust</code> is only a tiny bit faster, <code>0m4.168s</code> vs <code>0m3.838s</code>. And the initialization was taking a good bit of time. Thanks again."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1455648339, "post_id": 35439376, "comment_id": 58579126, "body": "@bluss <i>But</i> if I use <code>set1 &amp; set2</code> on PyPy3 I get 1.0s vs 2.3s, so Python&#39;s back in the lead ;P"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 18, "last_activity_date": 1457284607, "last_edit_date": 1495535364, "creation_date": 1455646702, "answer_id": 35440146, "question_id": 35439376, "link": "https://stackoverflow.com/questions/35439376/why-is-python-set-intersection-faster-than-rust-hashset-intersection/35440146#35440146", "title": "Why is Python set intersection faster than Rust HashSet intersection?", "body": "<p>The performance problem boils down to the default hashing implementation of <code>HashMap</code> and <code>HashSet</code>. Rust's default hash algorithm is a good general-purpose one that also prevents against certain types of DOS attacks. However, it doesn't work great for very small or very large amounts of data.</p>\n\n<p>Some profiling showed that <code>make_hash&lt;i32, std::collections::hash::map::RandomState&gt;</code> was taking up about 41% of the total runtime. As of <a href=\"http://blog.rust-lang.org/2016/03/02/Rust-1.7.html\" rel=\"noreferrer\">Rust 1.7</a>, you can choose which hashing algorithm to use. Switching to the <a href=\"https://crates.io/crates/fnv\" rel=\"noreferrer\">FNV hashing algorithm</a> speeds up the program considerably:</p>\n\n<pre><code>extern crate fnv;\n\nuse std::collections::HashSet;\nuse std::hash::BuildHasherDefault;\nuse fnv::FnvHasher;\n\nfn main() {\n    let mut len_sums = 0;\n    for _ in 0..100000 {\n        let set_1: HashSet&lt;i32, BuildHasherDefault&lt;FnvHasher&gt;&gt; = (0..1000).collect();\n        let set_2: HashSet&lt;i32, BuildHasherDefault&lt;FnvHasher&gt;&gt; = (500..1500).collect();\n        let intersection_len = set_1.intersection(&amp;set_2).count();\n        len_sums += intersection_len;\n    }\n    println!(\"{}\", len_sums);\n}\n</code></pre>\n\n<p>On my machine, this takes 2.714s compared to Python's 9.203s.</p>\n\n<p>If you make the same <a href=\"https://stackoverflow.com/a/35440350/155423\">changes to move the set building out of the loop</a>, the Rust code takes 0.829s compared to the Python code's 3.093s.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1455701419, "post_id": 35440350, "comment_id": 58602007, "body": "<i>Rust HashSets have instance-unique keys for their hash functions, so during intersection they must rehash keys from one set with the other set&#39;s hash function.</i> =&gt; could this be optimized out? I am thinking of maybe having a method on the <code>BuilderHashDefault</code> or just <i>comparing</i> said builders between the two instances of the <code>HashSet</code>/<code>HashMap</code> to optimize out the hash recomputation when possible. This way, you could use the same builder or equivalent builders on the sets on which you need to perform intersection/union/..."}, {"owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "edited": false, "score": 0, "creation_date": 1545255086, "post_id": 35440350, "comment_id": 94566699, "body": "Since elements need to be and are rehashed (they&#39;re fed to contains_key on the other set), why does the method require the same type of hash function on both sets, i.e. why is there is only one generic type parameter <code>S: BuildHasher + Default</code>?"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 24, "last_activity_date": 1455649575, "last_edit_date": 1455649575, "creation_date": 1455647346, "answer_id": 35440350, "question_id": 35439376, "link": "https://stackoverflow.com/questions/35439376/why-is-python-set-intersection-faster-than-rust-hashset-intersection/35440350#35440350", "title": "Why is Python set intersection faster than Rust HashSet intersection?", "body": "<p>When I move the set-building out of the loop and only repeat the intersection, for both cases of course, Rust is faster than Python 2.7.</p>\n\n<p>I've only been reading Python 3 <a href=\"https://github.com/python/cpython/blob/master/Objects/setobject.c#L1274\">(setobject.c)</a>, but Python's implementation has some things going for it.</p>\n\n<p>It uses the fact that both Python set objects use the same hash function, so it does not recompute the hash. Rust <code>HashSet</code>s have instance-unique keys for their hash functions, so during intersection they must rehash keys from one set with the other set's hash function.</p>\n\n<p>On the other hand, Python must call out to a dynamic key comparison function like <code>PyObject_RichCompareBool</code> for each matching hash, while the Rust code uses generics and will specialize the hash function and comparison code for <code>i32</code>. The code for hashing an <code>i32</code> in Rust looks relatively cheap, and much of the hashing algorithm (handling longer input than 4 bytes) is removed.</p>\n\n<hr>\n\n<p>It appears it's the construction of the sets that <em>sets</em> Python and Rust apart. And in fact not just construction, there's some significant code running to destruct the Rust <code>HashSet</code>s as well. (This can be improved, filed bug here: <a href=\"https://github.com/rust-lang/rust/issues/31711\">#31711</a>)</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 6, "creation_date": 1545169062, "post_id": 53841407, "comment_id": 94531100, "body": "You might as well see if you can submit a PR to the standard library for this. Seems like a safe enough change to make for everyone."}, {"owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1545170370, "post_id": 53841407, "comment_id": 94531635, "body": "Perhaps people would argue against a cost for those who know up front that the left set is smaller, or even worse, who know it&#39;s bigger but require the left set to be there because of slow hashing functions or something else? In any case, at least it should be documented and right now it isn&#39;t (where I looked)."}, {"owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1545220180, "post_id": 53841407, "comment_id": 94548582, "body": "On closer inspection <a href=\"https://github.com/rust-lang/rust/tree/master/src/libstd/collections/hash/set.rs\" rel=\"nofollow noreferrer\">of the code</a>, it doesn&#39;t seem like too much thought went into it, so trying to provide the fix along with a bug report."}, {"owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1550271932, "post_id": 53841407, "comment_id": 96222064, "body": "By the way, the default Set in Scala has the same performance quirk: you need to put the small set first."}], "tags": [], "owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "is_accepted": false, "score": 7, "last_activity_date": 1562072367, "last_edit_date": 1562072367, "creation_date": 1545168789, "answer_id": 53841407, "question_id": 35439376, "link": "https://stackoverflow.com/questions/35439376/why-is-python-set-intersection-faster-than-rust-hashset-intersection/53841407#53841407", "title": "Why is Python set intersection faster than Rust HashSet intersection?", "body": "<p>Hashing aside, Python races past previous versions of Rust when you intersect a tiny and a huge set the wrong way around. E.g. this <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=b95a9a42680d7d311eb0f7cc03f4efb5\" rel=\"nofollow noreferrer\">code on playground</a>:</p>\n\n<pre><code>use std::collections::HashSet;\nfn main() {\n    let tiny: HashSet&lt;i32&gt; = HashSet::new();\n    let huge: HashSet&lt;i32&gt; = (0..1_000).collect();\n    for (left, right) in &amp;[(&amp;tiny, &amp;huge), (&amp;huge, &amp;tiny)] {\n        let sys_time = std::time::SystemTime::now();\n        assert_eq!(left.intersection(right).count(), 0);\n        let elapsed = sys_time.elapsed().unwrap();\n        println!(\n            \"{:9}ns starting from {:4} element set\",\n            elapsed.subsec_nanos(),\n            left.len(),\n        );\n    }\n}\n</code></pre>\n\n<p>when run with the 1.32 or earlier versions of Rust rather than a current version, reveals that you really want to invoke the intersection method on the smaller of the two sets (even in the borderline case that one set is empty). I got nice performance gains by calling this function instead of the intersection method:</p>\n\n<pre><code>fn smart_intersect&lt;'a, T, S&gt;(\n    s1: &amp;'a HashSet&lt;T, S&gt;,\n    s2: &amp;'a HashSet&lt;T, S&gt;,\n) -&gt; std::collections::hash_set::Intersection&lt;'a, T, S&gt;\nwhere\n    T: Eq + std::hash::Hash,\n    S: std::hash::BuildHasher,\n{\n    if s1.len() &lt; s2.len() {\n        s1.intersection(s2)\n    } else {\n        s2.intersection(s1)\n    }\n}\n</code></pre>\n\n<p>The method in Python treats the two sets equally (at least in version 3.7).</p>\n\n<p>PS Why is this?\nSay small set Sa has A items, big set Sb has B items, it takes Th time to hash one key, Tl(X) time to locate a hashed key in a set with X elements. Then:</p>\n\n<ul>\n<li><code>Sa.intersection(&amp;Sb)</code> costs A * (Th + Tl(B))</li>\n<li><code>Sb.intersection(&amp;Sa)</code> costs B * (Th + Tl(A))</li>\n</ul>\n\n<p>Assuming the hash function is good and the buckets plenty (because if we're worrying about performance of intersection, so we should have made sure that the sets are efficient to begin with) then Tl(B) should be on par with Tl(A), or at least Tl(X) should scale much less than linearly with set size. Therefore it's A versus B that determines the cost of the operation.</p>\n\n<p>PS The same problem and workaround existed for <code>is_disjoint</code> and also a bit for <code>union</code> (it's cheaper to copy the big set and add a few elements, than it is to copy the small set and add a lot, but not hugely). <a href=\"https://github.com/rust-lang/rust/pull/57043#event-2073438691\" rel=\"nofollow noreferrer\">A pull request</a> was merged in, so this discrepancy has disappeared since Rust 1.35.</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4627, "favorite_count": 1, "accepted_answer_id": 35440350, "answer_count": 3, "score": 25, "last_activity_date": 1562072367, "creation_date": 1455644299, "last_edit_date": 1558544088, "question_id": 35439376, "link": "https://stackoverflow.com/questions/35439376/why-is-python-set-intersection-faster-than-rust-hashset-intersection", "title": "Why is Python set intersection faster than Rust HashSet intersection?", "body": "<p>Here is my Python code:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>len_sums = 0\nfor i in xrange(100000):\n    set_1 = set(xrange(1000))\n    set_2 = set(xrange(500, 1500))\n    intersection_len = len(set_1.intersection(set_2))\n    len_sums += intersection_len\nprint len_sums\n</code></pre>\n\n<p>Here is my Rust code:</p>\n\n<pre><code>use std::collections::HashSet;\n\nfn main() {\n    let mut len_sums = 0;\n    for _ in 0..100000 {\n        let set_1: HashSet&lt;i32&gt; = (0..1000).collect();\n        let set_2: HashSet&lt;i32&gt; = (500..1500).collect();\n        let intersection_len = set_1.intersection(&amp;set_2).count();\n        len_sums += intersection_len;\n    }\n    println!(\"{}\", len_sums);\n}\n</code></pre>\n\n<p>I believe these are roughly equivalent. I get the following performance results:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>time python set_performance.py\n50000000\n\nreal    0m11.757s\nuser    0m11.736s\nsys 0m0.012s\n</code></pre>\n\n<p>and</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc set_performance.rs -O       \ntime ./set_performance 50000000\n\nreal    0m17.580s\nuser    0m17.533s\nsys 0m0.032s\n</code></pre>\n\n<p>Building with <code>cargo</code> and <code>--release</code> give the same result.</p>\n\n<p>I realize that Python's <code>set</code> is implemented in C, and so is expected to be fast, but I did not expect it to be faster than Rust. Wouldn't it have to do extra type checking that Rust would not?</p>\n\n<p>Perhaps I'm missing something in the way I compile my Rust program, are there any other optimizations flags that I should be using?</p>\n\n<p>Another possibility is that the code is not really equivalent, and Rust is doing unnecessary extra work, am I missing anything?</p>\n\n<p>Python version:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>In [3]: import sys\n\nIn [4]: sys.version\nOut[4]: '2.7.6 (default, Jun 22 2015, 17:58:13) \\n[GCC 4.8.2]'\n</code></pre>\n\n<p>Rust version</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc --version\nrustc 1.5.0 (3d7cd77e4 2015-12-04)\n</code></pre>\n\n<p>I am using Ubuntu 14.04 and my system architecture is x86_64.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 2, "creation_date": 1455635190, "post_id": 35432368, "comment_id": 58569988, "body": "And then you only have to take the first char of the vector : <a href=\"https://play.rust-lang.org/?gist=cd2f82bd96c6ffa26ef1&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>  Isn&#39;t this very bloated for such a trivial thing to do ?"}, {"owner": {"reputation": 1589, "user_id": 2770092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2321a7b8ee2a179e16b50242ecb21c4f?s=128&d=identicon&r=PG&f=1", "display_name": "Cecilio Pardo", "link": "https://stackoverflow.com/users/2770092/cecilio-pardo"}, "edited": false, "score": 1, "creation_date": 1455635659, "post_id": 35432368, "comment_id": 58570331, "body": "No, my answer is wrong. Please read the comments. That will work in some cases, but is incorrect on the general case."}, {"owner": {"reputation": 1589, "user_id": 2770092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2321a7b8ee2a179e16b50242ecb21c4f?s=128&d=identicon&r=PG&f=1", "display_name": "Cecilio Pardo", "link": "https://stackoverflow.com/users/2770092/cecilio-pardo"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1455654719, "post_id": 35432368, "comment_id": 58582692, "body": "@LukasKalbertodt I can&#39;t answer the question myself. I haven&#39;t deleted the answer yet because comments contain valid information. Should I delete it?"}, {"owner": {"reputation": 1589, "user_id": 2770092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2321a7b8ee2a179e16b50242ecb21c4f?s=128&d=identicon&r=PG&f=1", "display_name": "Cecilio Pardo", "link": "https://stackoverflow.com/users/2770092/cecilio-pardo"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1455655190, "post_id": 35432368, "comment_id": 58582943, "body": "@LukasKalbertodt:  Just did. Thanks."}], "tags": [], "owner": {"reputation": 1589, "user_id": 2770092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2321a7b8ee2a179e16b50242ecb21c4f?s=128&d=identicon&r=PG&f=1", "display_name": "Cecilio Pardo", "link": "https://stackoverflow.com/users/2770092/cecilio-pardo"}, "is_accepted": true, "score": 12, "last_activity_date": 1577126367, "last_edit_date": 1577126367, "creation_date": 1455624918, "answer_id": 35432368, "question_id": 35432199, "link": "https://stackoverflow.com/questions/35432199/convert-a-char-to-upper-case/35432368#35432368", "title": "Convert a char to upper case", "body": "<p><code>ToUppercase</code> is an iterator, because the uppercase version of the character may be composed of several codepoints, as delnan pointed in the comments. You can convert that to a Vector of characters: </p>\n\n<pre><code>c.to_uppercase().collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>Then, you should collect those characters into a string, as ker pointed.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 23, "last_activity_date": 1531691681, "last_edit_date": 1531691681, "creation_date": 1455656481, "answer_id": 35442894, "question_id": 35432199, "link": "https://stackoverflow.com/questions/35432199/convert-a-char-to-upper-case/35442894#35442894", "title": "Convert a char to upper case", "body": "<h3>Explanation</h3>\n\n<p><code>ToUppercase</code> is an <code>Iterator</code>, that may yield more than one <code>char</code>. This is necessary, because some Unicode characters consist of multiple \"Unicode Scalar Values\" (which a Rust <code>char</code> represents). </p>\n\n<p>A nice example are the so called <a href=\"https://en.wikipedia.org/wiki/Typographic_ligature\" rel=\"noreferrer\">ligatures</a>. Try this for example (<a href=\"https://play.rust-lang.org/?gist=618d0ddf2ccb9f6f50756a3b9713d4b1&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"noreferrer\">on playground</a>):</p>\n\n<pre><code>let fi_upper: Vec&lt;_&gt; = '\ufb01'.to_uppercase().collect();\nprintln!(\"{:?}\", fi_upper);   // prints: ['F', 'I']\n</code></pre>\n\n<p>The '\ufb01' ligature is a single character whose uppercase version consists of two letters/characters.</p>\n\n<hr>\n\n<h3>Solution</h3>\n\n<p>There are multiple possibilities how to deal with that:</p>\n\n<ol>\n<li><strong>Work on <code>&amp;str</code></strong>: if your data is actually in string form, use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.to_uppercase\" rel=\"noreferrer\"><code>str::to_uppercase</code></a> which returns a <code>String</code> which is easier to work with.</li>\n<li><strong>Use ASCII methods</strong>: if you are sure that your data is ASCII only and/or you don't care about unicode symbols you can use <a href=\"https://doc.rust-lang.org/std/ascii/trait.AsciiExt.html#tymethod.to_ascii_uppercase\" rel=\"noreferrer\"><code>std::ascii::AsciiExt::to_ascii_uppercase</code></a> which returns just a <code>char</code>. But it only changes the letters <code>'a'</code> to <code>'z'</code> and ignores all other characters! </li>\n<li><strong>Deal with it manually</strong>: Collect into a <code>String</code> or <code>Vec</code> like in the example above. </li>\n</ol>\n"}], "owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6193, "favorite_count": 0, "accepted_answer_id": 35432368, "answer_count": 2, "score": 16, "last_activity_date": 1577126367, "creation_date": 1455624436, "last_edit_date": 1455632952, "question_id": 35432199, "link": "https://stackoverflow.com/questions/35432199/convert-a-char-to-upper-case", "title": "Convert a char to upper case", "body": "<p>I have a variable which contains a single <code>char</code>. I want to convert this <code>char</code> to upper case. However, the <code>to_uppercase</code> function returns a <code>rustc_unicode::char::ToUppercase</code> struct instead of a <code>char</code>.</p>\n"}, {"tags": ["rust", "type-mismatch"], "answers": [{"comments": [{"owner": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455628137, "post_id": 35432880, "comment_id": 58564945, "body": "Yeah, I considered this solution, but I intend to use this function with vector of samples that is much bigger than two, and it wouldn&#39;t be very convenient to do it this way."}, {"owner": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455629412, "post_id": 35432880, "comment_id": 58565878, "body": "Does your addendum cause the Vec&lt;Token&gt;s to be all moved into <code>validate</code> function? Or, because you take them as_ref, they stay in the original samples vector?"}, {"owner": {"reputation": 699, "user_id": 3957040, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e88a425a40322e715b799744b3a89898?s=128&d=identicon&r=PG&f=1", "display_name": "Pablo", "link": "https://stackoverflow.com/users/3957040/pablo"}, "reply_to_user": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455629629, "post_id": 35432880, "comment_id": 58566048, "body": "They stay. <code>samples</code> is being passed by reference, so there can be no move of the inner <code>Vec</code>."}, {"owner": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455640274, "post_id": 35432880, "comment_id": 58573805, "body": "Thanks for such detailed answer! I hoped that maybe there exists a syntax that would allow to declare static arrays in similar way as static strings are declared, but I can go with your addendum."}], "tags": [], "owner": {"reputation": 699, "user_id": 3957040, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e88a425a40322e715b799744b3a89898?s=128&d=identicon&r=PG&f=1", "display_name": "Pablo", "link": "https://stackoverflow.com/users/3957040/pablo"}, "is_accepted": true, "score": 2, "last_activity_date": 1455636227, "last_edit_date": 1455636227, "creation_date": 1455626377, "answer_id": 35432880, "question_id": 35432036, "link": "https://stackoverflow.com/questions/35432036/way-to-specify-a-static-slice-of-variable-length/35432880#35432880", "title": "Way to specify a static slice of variable length", "body": "<blockquote>\n  <p>In short, I would like to find a syntax that creates an array with\n  static lifetime (or at least a lifetime that is as long as the samples\n  vector's one), and returns slice of it.</p>\n</blockquote>\n\n<p>You\u2019d want something like this:</p>\n\n<pre><code>fn sliced(array: [Token; 3]) -&gt; &amp;'static [Token] { unimplemented!() }\n</code></pre>\n\n<p>So you could use it like this in your example:</p>\n\n<pre><code>let samples: Vec&lt;(&amp;str, &amp;[Token])&gt; = vec![\n    (\"a string\", sliced([Token::PLUS, Token::MINUS, Token::PLUS])),\n    // ...\n</code></pre>\n\n<p>But there are two problems with it. The first and most glaring is that you can\u2019t get a <code>static</code> reference out of a function which doesn\u2019t take in a <code>static</code> reference (in which case it would just return it).</p>\n\n<p>Therefore, since you want a slice at least as long-lived as your array, either you declare a <code>const</code>/<code>static</code> slice (which requires also a <code>const</code>/<code>static</code> declaration of its array), or you declare the array with a <code>let</code> statement first, and then make the slice. (This is what is done at my first alternative, below.) If you create the array inside a use of <code>vec!</code>, together with its slice, the array end its life with <code>vec!</code>, rendering the slice invalid. As an illustration, consider this, which fails due to the same reason:</p>\n\n<pre><code>fn main() {\n    let slice;\n    {\n        let array: [u8; 3] = [1,2,3];\n        slice = &amp;array;\n    }\n}\n</code></pre>\n\n<p>The second problem with the <code>sliced</code> function is that its input array has a fixed size, and you\u2019d want to work generically over arrays of arbitrary size. However, this is currently not supported by Rust<sup>[1]</sup>. You have to work with slices in order to deal with arrays of arbitrary size.</p>\n\n<p>One possibility, then, is to do the following [<a href=\"http://is.gd/laHg7y\" rel=\"nofollow\">playpen</a>]:</p>\n\n<pre><code>enum Token {\n    PLUS,\n    MINUS,\n    MUL,\n}\n\nfn validate(samples: &amp;[(&amp;str, &amp;[Token])]) {\n    unimplemented!()\n}    \n\nfn main() {\n    let tokens_0 = [Token::PLUS, Token::MINUS, Token::PLUS];\n    let tokens_1 = [Token::MUL];\n    let samples: Vec&lt;(&amp;str, &amp;[Token])&gt; = vec![\n        (\"a string\", &amp;tokens_0),\n        (\"another string\", &amp;tokens_1),\n    ];\n    validate(&amp;samples);\n}\n</code></pre>\n\n<p>There are two changes here with respect to your code.</p>\n\n<p>One, this code relies on implicit coercing of an array (<code>[T; N]</code>) as a slice (<code>&amp;[T]</code>) by taking a reference to it. This is demanded by the declaration of <code>samples</code> as being of type <code>Vec&lt;(&amp;str, &amp;[Token])&gt;</code>. This is later satisfied, when using <code>vec!</code>, by passing references to the arrays, and thus eliciting the appropriate coercions.</p>\n\n<p>Two, it creates the arrays of <code>Token</code> before using the <code>vec!</code> macro, which guarantees that they\u2019ll live enough to be referenced from within the <code>Vec</code> it creates, keeping these references valid after <code>vec!</code> is done. This is necessary after resolving the previous type mismatch.</p>\n\n<hr>\n\n<p><em>Addendum</em>:</p>\n\n<p>Or, for convenience, you may prefer to use a <code>Vec</code> instead of slices. Consider the following alternative [<a href=\"http://is.gd/KuQhzu\" rel=\"nofollow\">playpen</a>]:</p>\n\n<pre><code>enum Token {\n    PLUS,\n    MINUS,\n    MUL,\n}\n\nfn validate&lt;T&gt;(samples: &amp;[(&amp;str, T)]) where\n    T: AsRef&lt;[Token]&gt;\n{\n    let _: &amp;[Token] = samples[0].1.as_ref();\n\n    unimplemented!()\n}    \n\nfn main() {\n    let samples: Vec&lt;(&amp;str, Vec&lt;Token&gt;)&gt; = vec![\n        (\"a string\", vec![Token::PLUS, Token::MINUS, Token::PLUS]),\n        (\"another string\", vec![Token::MUL]),\n    ];\n    validate(&amp;samples);\n}\n</code></pre>\n\n<p>In this case, the <code>AsRef&lt;[Token]&gt;</code> bound on the second element of the tuple accepts any type from which you may take a <code>&amp;[Token]</code>, offering an <code>as_ref()</code> method which returns the expected reference. <code>Vec&lt;Token&gt;</code> is an example of such kind of type.</p>\n\n<hr>\n\n<p><sup>[1]</sup> \u201cRust does not currently support generics over the size of an array type.\u201d [<a href=\"https://doc.rust-lang.org/std/primitive.array.html\" rel=\"nofollow\">source</a>]</p>\n"}, {"comments": [{"owner": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455628016, "post_id": 35432888, "comment_id": 58564857, "body": "Yeah, I meant slice with static lifetime. Sorry for the confusion, I don&#39;t know all the terminology yet ;)"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455628664, "post_id": 35432888, "comment_id": 58565343, "body": "I think I&#39;m probably wrong about static slices, I recall that this term is indeed frequently used as a synonym for &quot;slice with static lifetime&quot;, so there <i>is</i> such thing. But again, in this case these slices won&#39;t have static lifetimes because they point to temporary variables which contain these arrays."}, {"owner": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455628963, "post_id": 35432888, "comment_id": 58565543, "body": "I tried this one, but it doesn&#39;t work unfortunately, due to the fact that the vector doesn&#39;t live long enough: <code>token.rs:15:23: 15:63 error: borrowed value does not live long enough  token.rs:15         (&quot;a string&quot;, &amp;[Token::PLUS, Token::MINUS, Token::PLUS] as &amp;[_])</code> (the same thing happens without <code>as &amp;[_]</code>). I guess that the big problem here is how to declare an array so that it has a static lifetime, but I get just ref to it. Something similar to how string literals work. I could use @Pablo &#39;s solution, but it has a bit too much boilerplate code."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "edited": false, "score": 0, "creation_date": 1455634183, "post_id": 35432888, "comment_id": 58569293, "body": "Yes, you&#39;re right, I was under impression that it should work, but it seems that the compiler creates temporary variables as local as possible, and in a complex nested expression it would mean that the temporary variable is only valid for the duration of the inner expression. Therefore, I see no other way than the one suggested by @Pablo."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1455634374, "last_edit_date": 1495540235, "creation_date": 1455626390, "answer_id": 35432888, "question_id": 35432036, "link": "https://stackoverflow.com/questions/35432036/way-to-specify-a-static-slice-of-variable-length/35432888#35432888", "title": "Way to specify a static slice of variable length", "body": "<p><strong>Note:</strong> this answer is not valid in this particular situation because the arrays pointed by the nested slices cannot outlive the vector because they are only allocated for the duration of their respective expressions, therefore slices to them can't be stored in the vector.</p>\n\n<p>The proper way would be to either hoist slices to the upper level and put them before the vector, or to use an entirely different structure, e.g. nested <code>Vec</code>s. Examples of all of these are provided in <a href=\"https://stackoverflow.com/a/35432880/788207\">Pablo's answer</a>.</p>\n\n<hr>\n\n<p>You need to do this:</p>\n\n<pre><code>let samples = vec![\n    (\"a string\", &amp;[Token::PLUS, Token::MINUS, Token::PLUS] as &amp;[_]),\n    (\"another string\", &amp;[Token::MUL] as &amp;[_]),\n];\nvalidate(&amp;samples);\n</code></pre>\n\n<p>Rust automatically converts references to arrays (<code>&amp;[T; n]</code>) to slices (<code>&amp;[T]</code>) when the target type is known, but in this case type inference doesn't work well because of the necessary deref coercion, so the compiler can't deduce that you need a slice instead of array and can't insert the appropriate conversion, thus you need to specify the type explicitly.</p>\n\n<p>Also, there is no such thing as \"static slice\". The closest entity would be a slice with static lifetime, <code>&amp;'static [T]</code>, but as far as I remember, this is not the case of it.</p>\n"}], "owner": {"reputation": 351, "user_id": 1482664, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ff369a4b70f05978d1b5e83dbcceaa6e?s=128&d=identicon&r=PG", "display_name": "anula", "link": "https://stackoverflow.com/users/1482664/anula"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2230, "favorite_count": 0, "accepted_answer_id": 35432880, "answer_count": 2, "score": 2, "last_activity_date": 1455636227, "creation_date": 1455624010, "last_edit_date": 1455633795, "question_id": 35432036, "link": "https://stackoverflow.com/questions/35432036/way-to-specify-a-static-slice-of-variable-length", "title": "Way to specify a static slice of variable length", "body": "<p>Let's say I have a function with following signature:</p>\n\n<pre><code>fn validate(samples: &amp;[(&amp;str, &amp;[Token])])\n</code></pre>\n\n<p>Where <code>Token</code> is a custom enum.\nI would like to be able to write something along those lines:</p>\n\n<pre><code>    let samples = vec![\n        (\"a string\", &amp;[Token::PLUS, Token::MINUS, Token::PLUS]),\n        (\"another string\", &amp;[Token::MUL]),\n    ];\n    validate(&amp;samples);\n</code></pre>\n\n<p>But code like this yields mismatched types compile error:</p>\n\n<pre><code>error: mismatched types:\nexpected `&amp;[(&amp;str, &amp;[Token])]`,\n   found `&amp;collections::vec::Vec&lt;(&amp;str, &amp;[Token; 3])&gt;`\n</code></pre>\n\n<p>Is it possible to somehow convert the version with static length (<code>&amp;[Token; 3]</code>) to a static slice (<code>&amp;[Token]</code>)?\nIn other words, I would like to be able to specify a static slice in similar way I specify <code>&amp;str</code>, as some kind of \"slice literal\".</p>\n\n<p>Or I am doing it completely wrong?</p>\n\n<p>EDIT:\nIn short, I would like to find a syntax that creates an array with static lifetime (or at least a lifetime that is as long as the <code>samples</code> vector's one), and returns slice of it.</p>\n\n<p>Something similar to how strings work, where just typing \"a string\" gives me reference of type <code>&amp;'static str</code>.</p>\n\n<p>EDIT2:\n@Pablo's answer provides pretty good solution to my particular problem, although it is not exactly what I have meant at first.</p>\n\n<p>I guess that the exact thing I have in mind might not be possible, so I will just accept that one for now, unless something more in lines of my initial idea come around.</p>\n"}, {"tags": ["rust", "elf"], "answers": [{"comments": [{"owner": {"reputation": 71, "user_id": 5934166, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3e2e25eae4be20f70b95a92c8e6e556?s=128&d=identicon&r=PG&f=1", "display_name": "chamaken", "link": "https://stackoverflow.com/users/5934166/chamaken"}, "edited": false, "score": 0, "creation_date": 1455679796, "post_id": 35436960, "comment_id": 58592390, "body": "It works fine with <code>[link_section = &quot;.ctors&quot;]</code> in my case, thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1455660350, "last_edit_date": 1455660350, "creation_date": 1455637698, "answer_id": 35436960, "question_id": 35428834, "link": "https://stackoverflow.com/questions/35428834/how-to-specify-which-elf-section-to-use-in-a-rust-dylib/35436960#35436960", "title": "How to specify which ELF section to use in a Rust dylib", "body": "<p>The direct answer is to use the <code>#[link_section = \"foo\"]</code> attribute.</p>\n\n<p>I tried to reverse engineer what GCC creates on OS X to replicate it:</p>\n\n<pre><code>pub extern fn do_a_thing() {\n    println!(\"I was called by .init\");\n    cool_code();\n}\n\n#[link_section = \"__DATA,__mod_init_func\"]\npub static CONSTRUCTOR: extern fn() = do_a_thing;\n\nfn cool_code() {\n    println!(\"I'm just some code\");\n}\n</code></pre>\n\n<p>This does actually print both lines when it is loaded with <code>dlopen</code>, but then the whole program has a segmentation fault. I don't know enough of the details around this early initialization to completely narrow it down.</p>\n\n<p>Actually, it might be <a href=\"https://github.com/nagisa/rust_libloading/issues/5\" rel=\"nofollow\">this bug</a>, which indicates the problem might just be because of internal data structures used in <code>println!</code>.</p>\n"}], "owner": {"reputation": 71, "user_id": 5934166, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3e2e25eae4be20f70b95a92c8e6e556?s=128&d=identicon&r=PG&f=1", "display_name": "chamaken", "link": "https://stackoverflow.com/users/5934166/chamaken"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 584, "favorite_count": 0, "accepted_answer_id": 35436960, "answer_count": 1, "score": 2, "last_activity_date": 1455660350, "creation_date": 1455615616, "last_edit_date": 1455636137, "question_id": 35428834, "link": "https://stackoverflow.com/questions/35428834/how-to-specify-which-elf-section-to-use-in-a-rust-dylib", "title": "How to specify which ELF section to use in a Rust dylib", "body": "<p>I can create a shared object using the Rust <code>dylib</code> crate type, but could not figure out how to specify the ELF <code>.init</code> section. I have a C program which loads a shared object with <code>dlopen()</code> and the shared object will register something like a callback function at <code>.init</code>. Compilation fails if I write:</p>\n\n<pre><code>#[no_mangle]\npub extern fn _init() {\n    ...\n</code></pre>\n\n<p>then,</p>\n\n<pre><code>test.0.rs:(.text._init+0x0): multiple definition of `_init'\n</code></pre>\n\n<p>How do I specify the ELF section (like GCC's <code>constructor</code> attribute) or is there another way to specify a function which will be called just after a <code>.so</code> has loaded?</p>\n"}, {"tags": ["arguments", "global-variables", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1455632305, "post_id": 35427112, "comment_id": 58567949, "body": "This is a poor question because the problem is not described clearly enough for an answerer to understand it. There&#39;s not an obvious parallel between your first example (where the &quot;extra&quot; data is static) and the trait-based example (where it&#39;s a member of a struct). Consider whether you may have an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY Problem</a>. If you can&#39;t generalize the question, at least provide an example with enough code for potential answerers to grasp the context."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1455664206, "post_id": 35427112, "comment_id": 58587695, "body": "@trencl, Thanks for the suggestion, the question should be better now because it has a clearer example describing my specific case and problem."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1455669894, "post_id": 35427112, "comment_id": 58589562, "body": "Thank you for improving your question! So few people do. It&#39;s still not clear to me why <code>WingFitnessFunction</code> is a trait, though, since it doesn&#39;t have any methods (functions with <code>self</code>). I&#39;m with you right up until &quot;It optimizes something else...&quot; Can you explain why and how a user would implement <code>WingFitnessFunction</code> instead of just implementing <code>FitnessFunction</code> directly?"}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1455670294, "post_id": 35427112, "comment_id": 58589700, "body": "@trentcl, I meant to add <code>self</code> to it, fixed. The reason a user would implement <code>WingFitnessFunction</code> is because it makes it easier to use, and it guarantees the users doesn&#39;t break anything. I have two libraries: an optimization algorithm with the <code>FitnessFunction</code> trait, and another optimization algorithm that in this example would optimize the material and size of wings. If a user implemented the <code>FitnessFunction</code> trait directly, it would mean they have to set parameters manually and work with my wrapper struct in my answer."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1455670583, "post_id": 35427112, "comment_id": 58589790, "body": "@trentcl, To implement <code>WingFitnessFunction</code>, the user would make a function that reads the material, size, and parameters of the wing given as an argument, then returns its fitness. The second library uses an algorithm that would generate many different wings, and use my first library to optimize their parameters. In my use case the user would simply use a method on the <code>Wing</code> struct and calculate fitness based on the result, so it will be much simpler. The point is for the user to judge the fitness not based on the parameter values themselves, but in an indirect way."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1455675152, "post_id": 35427112, "comment_id": 58591108, "body": "Ah! All is clear now. Glad to see you have resolved it."}], "answers": [{"tags": [], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "is_accepted": false, "score": 3, "last_activity_date": 1455669206, "last_edit_date": 1455669206, "creation_date": 1455617344, "answer_id": 35429505, "question_id": 35427112, "link": "https://stackoverflow.com/questions/35427112/pass-instance-of-type-from-argument-list-into-function-declaration-dynamic-envi/35429505#35429505", "title": "Pass instance of type from argument list into function declaration (dynamic environment capture)", "body": "<p>The solution to my problem is to add a wrapper:</p>\n\n<pre><code>struct WingWrapper&lt;'a, T: WingFitnessFunction&gt; {\n    wing: Wing,\n    object: T\n}\n</code></pre>\n\n<p>And implement <code>FitnessFunction</code> for it:</p>\n\n<pre><code>impl&lt;'a, T: WingFitnessFunction&gt; FitnessFunction for WingWrapper&lt;'a, T&gt; {\n    fn get_fitness(&amp;self, parameters: &amp;[f64]) -&gt; f64 {\n        let wing = Wing {\n            parameters: parameters,\n            .. self.wing\n        }\n\n        self.object.get_fitness(&amp;wing)\n    }\n}\n</code></pre>\n\n<p>In the function that takes a type that implements <code>WingFitnessFunction</code> as an argument, first build a <code>WingWrapper</code>:</p>\n\n<pre><code>let wrapper = WingWrapper {\n    wing: // Instance of wing here\n    object: // Instance of object here (taken as an argument)\n}\n</code></pre>\n\n<p>Now, you can call the <code>get_fitness</code> method from the <code>WingFitnessFunction</code> trait through the method from <code>FitnessFunction</code>:</p>\n\n<pre><code>println!(\"{}\", wrapper.get_fitness(&amp;[1, 2, 3]));\n</code></pre>\n\n<p>This does not add any difficult to using the library; it is exactly the same from the user's perspective.</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 455, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1455670049, "creation_date": 1455610459, "last_edit_date": 1455670049, "question_id": 35427112, "link": "https://stackoverflow.com/questions/35427112/pass-instance-of-type-from-argument-list-into-function-declaration-dynamic-envi", "title": "Pass instance of type from argument list into function declaration (dynamic environment capture)", "body": "<p>I made a library that implements an optimization algorithm <a href=\"https://github.com/pengowen123/cmaes\" rel=\"nofollow\">here</a>. These are the signatures for the relevant function and trait:</p>\n\n<pre><code>pub fn cmaes_loop&lt;T&gt;(object: &amp;T, options: CMAESOptions) -&gt; Option&lt;Vec&lt;f64&gt;&gt;\n    where T: 'static + FitnessFunction\n\npub trait FitnessFunction {\n    fn get_fitness(&amp;self, parameters: &amp;[f64]) -&gt; f64;\n}\n</code></pre>\n\n<p>If I apply the library to a simple problem, I can calculate the fitness based on the parameters given. However, let's say I want to optimize the shape of a wing for a given size and material:</p>\n\n<pre><code>struct Wing&lt;'a&gt; {\n    material: String,\n    size: i32,\n    parameters: &amp;'a [f64]\n}\n</code></pre>\n\n<p>I can implement the fitness function to read from the other fields and factor them into the calculation, then give an instance of <code>Wing</code> to the <code>cmaes_loop</code> function to optimize a specific material and size. I am making another library that will use this one. It optimizes something else (like <code>Wing</code>), so I have a wrapper trait to make the second library easier to use:</p>\n\n<pre><code>pub trait WingFitnessFunction {\n    fn get_fitness(&amp;self, wing: &amp;Wing) -&gt; f64;\n}\n</code></pre>\n\n<p>I implement the <code>FitnessFunction</code> trait like this:</p>\n\n<pre><code>impl FitnessFunction for Wing {\n    fn get_fitness(&amp;self, parameters: &amp;[f64]) -&gt; f64 {\n        let wing = Wing {\n            parameters: parameters,\n            .. self\n        };\n\n        // error here\n        let result = WingFitnessFunction::get_fitness(wing);\n    }\n}\n</code></pre>\n\n<p><code>WingFitnessFunction</code> has a <code>&amp;self</code> argument for the the same reason <code>FitnessFunction</code> does. I want a user of my second library to be able to pass an instance of their type that implements the <code>WingFitnessFunction</code>. I put the <code>impl</code> of <code>FitnessFunction</code> into the body of a function that takes an instance of the user's type:</p>\n\n<pre><code>fn foo&lt;T: WingFitnessFunction&gt;(object: T) {\n    impl FitnessFunction for Wing {\n        ...\n        object.get_fitness(wing)\n    }\n</code></pre>\n\n<p>But  when I try to call the <code>get_fitness</code> method of <code>object</code> I get this error:</p>\n\n<blockquote>\n  <p>can't capture dynamic environment in a fn item; use the || { ... } closure form instead</p>\n</blockquote>\n\n<p>I need to know how to call <code>object</code>'s <code>get_fitness</code> method on a specific instance (a closure could do this, but I do not know how I would make it work with the <code>cmaes_loop</code> function).</p>\n"}, {"tags": ["performance", "rust", "performance-testing", "biginteger"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1455607575, "post_id": 35423277, "comment_id": 58551615, "body": "Note: <code>core::ops</code> is re-exported as <code>std::ops</code>, so you need not import it."}], "answers": [{"comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455638224, "post_id": 35428028, "comment_id": 58572268, "body": "@peterpeiguo I tested quickly on the same machine (but it&#39;s Windows). I&#39;ll try benchmarking more properly later. It would be best to remove the printing of the list from the benchmark, to make sure IO is not the actual bottleneck"}, {"owner": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455640748, "post_id": 35428028, "comment_id": 58574144, "body": "true, I can comment out the printing from both rust and java and re-benchmark. In all test, I did redirect all printing to a file, so at least was not printing to the screen, which is super slow. I am on windows too. I will dig this deeper later."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455640904, "post_id": 35428028, "comment_id": 58574279, "body": "@PeterPeiGuo if you haven&#39;t seen it before, Rust has a <a href=\"https://doc.rust-lang.org/book/benchmark-tests.html\" rel=\"nofollow noreferrer\">good built-in way to benchmark</a>"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 1, "creation_date": 1455698885, "post_id": 35428028, "comment_id": 58600292, "body": "@PeterPeiGuo after benchmarking and checking the source code for BigUint I think this answer is almost all wrong. I wanted to revise it, but I don&#39;t like to change substantially an accepted answer... Could you please un-accept, so that others are not misdirected? I&#39;ll review it and you can decide if accepting or not (and in the meanwhile others might chime in and provide a better answer too)"}, {"owner": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455704176, "post_id": 35428028, "comment_id": 58604106, "body": "Done, Thanks for your most detailed analysis and that is the spirit!"}, {"owner": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455720490, "post_id": 35428028, "comment_id": 58616044, "body": "By the way, just to share some info, I was going to try xxxassgin as others suggested, so I downloaded the unstable rust 1.8. It took 60+s for the baseline code to finish, which is 1.5* slow, and I dropped that idea."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455721931, "post_id": 35428028, "comment_id": 58617159, "body": "@PeterPeiGuo yes that&#39;s one of the points I think I had overlooked... Looking at <a href=\"https://github.com/rust-num/num/blob/master/src/bigint.rs#L760-L776\" rel=\"nofollow noreferrer\">how Add is implemented</a> it&#39;s already reusing the first value (adding the second value to it and returning it again)"}, {"owner": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "edited": false, "score": 0, "creation_date": 1455724953, "post_id": 35428028, "comment_id": 58619573, "body": "To be honest, I do not expect there is any way to speed up the code dramatically, I think that is just the current state of language. I still intend to accept this as the answer, for couple reasons: 1) after removing those calls of clone(), there was a 10% performance improvement; 2) the suggestion of using overloaded operators; 3) the meaningful discussion we had. But I will wait until you complete your planned update to your answer."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 6, "last_activity_date": 1455786760, "last_edit_date": 1455786760, "creation_date": 1455613375, "answer_id": 35428028, "question_id": 35423277, "link": "https://stackoverflow.com/questions/35423277/is-the-big-integer-implementation-in-the-num-crate-slow/35428028#35428028", "title": "Is the big integer implementation in the num crate slow?", "body": "<p>You can remove most of the clones pretty easily. <code>BigUint</code> has all ops traits implemented also for operations with <code>&amp;BigUint</code>, not just working with values. With that, it becomes faster but still about half as fast as Java...</p>\n\n<p>Also (not related to performance, just readability) you don't need to use <code>add</code>, <code>sub</code>, <code>mul</code> and <code>shr</code> explicitly; they override the regular <code>+</code>, <code>-</code>, <code>*</code> and <code>&gt;&gt;</code> operators. </p>\n\n<p>For instance you could rewrite <code>might_be_prime</code> and <code>mod_exp</code> like this, which already gives a good speedup on my machine (from 40 to 24sec on avg):</p>\n\n<pre><code>fn might_be_prime(n: &amp;BigUint) -&gt; bool {\n    let one = BigUint::one();\n    let nsub1 = n - &amp;one;\n    let two = BigUint::new(vec![2]);\n    let mut rng = rand::thread_rng();\n\n    let (r, mut d) = find_r_and_d(nsub1.clone());\n    let mut x;\n    let mut a: BigUint;\n    'WitnessLoop: for kk in 0..6u64 {\n        a = rng.gen_biguint_range(&amp;two, &amp;nsub1);\n        x = mod_exp(&amp;mut a, &amp;mut d, &amp;n);\n        if &amp;x == &amp;one || x == nsub1 {\n            continue;\n        }\n        for rr in 1..r {\n            x = (&amp;x * &amp;x) % n;\n            if &amp;x == &amp;one {\n                return false;\n            } else if x == nsub1 {\n                continue 'WitnessLoop;\n            } \n        }\n        return false;\n    }\n    true\n}\n\nfn mod_exp(base: &amp;mut BigUint, exponent: &amp;mut BigUint, modulus: &amp;BigUint) -&gt; BigUint {\n    let one = BigUint::one();\n    let zero = BigUint::zero();\n    let mut result = BigUint::one();\n\n    while &amp;*exponent &gt; &amp;zero {\n        if &amp;*exponent &amp; &amp;one == one {\n           result = (result * &amp;*base) % modulus;\n        }\n        *base = (&amp;*base * &amp;*base) % modulus;\n        *exponent = &amp;*exponent &gt;&gt; 1usize;\n    }\n    result\n}\n</code></pre>\n\n<p>Note that I've moved the println! out of the timing, so that we're not benchmarking IO. </p>\n\n<pre><code>fn main() {  \n    let now1 = now();\n\n    let v = (5u64..1_000_000u64)\n        .filter_map(|n| n.to_biguint())\n        .filter(|n| might_be_prime(&amp;n))\n        .collect::&lt;Vec&lt;BigUint&gt;&gt;();\n\n    let now2 = now();\n    for n in v {\n        println!(\"{}\", n);\n    }\n    println!(\"time spent seconds: {}\", now2.to_timespec().sec - now1.to_timespec().sec);\n} \n</code></pre>\n"}], "owner": {"reputation": 7536, "user_id": 2419183, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/ac151b3eb8086a1f05da6f80ab1b1f50?s=128&d=identicon&r=PG", "display_name": "Peter Pei Guo", "link": "https://stackoverflow.com/users/2419183/peter-pei-guo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3401, "favorite_count": 3, "accepted_answer_id": 35428028, "answer_count": 1, "score": 11, "last_activity_date": 1455786760, "creation_date": 1455594058, "last_edit_date": 1455715152, "question_id": 35423277, "link": "https://stackoverflow.com/questions/35423277/is-the-big-integer-implementation-in-the-num-crate-slow", "title": "Is the big integer implementation in the num crate slow?", "body": "<p>I implemented the Miller-Rabin Strong Pseudoprime Test in Rust using <code>BigUint</code> to support arbitrary large primes. To run through the numbers between 5 and 10^6, it took about 40s with <code>cargo run --release</code>.</p>\n\n<p>I implemented the same algorithm with Java's <code>BigInteger</code> and the same test took 10s to finish. Rust appears to be 4 times slower. I assume this is caused by the implementation of <code>num::bigint</code>. </p>\n\n<p>Is this just the current state of <code>num::bigint</code>, or can anyone spot any obvious improvement in my code? (Mainly about how I used the language. Regardless whether my implementation of the algorithm is good or bad, it is almost implemented exactly the same in both languages - so does not cause the difference in performance.) </p>\n\n<p>I did notice there are lots of <code>clone()</code> required, due to Rust's ownership model, that could well impact the speed to some level. But I guess there is no way around that, am I right? </p>\n\n<p>Here is the code:</p>\n\n<pre><code>extern crate rand;\nextern crate num;\nextern crate core;\nextern crate time;\n\nuse std::time::{Duration};\nuse time::{now, Tm};\n\nuse rand::Rng;\nuse num::{Zero, One};\nuse num::bigint::{RandBigInt, BigUint, ToBigUint};\nuse num::traits::{ToPrimitive};\nuse num::integer::Integer;\nuse core::ops::{Add, Sub, Mul, Div, Rem, Shr};\n\nfn find_r_and_d(i: BigUint) -&gt; (u64, BigUint) {\n    let mut d = i;\n    let mut r = 0;\n    loop {\n        if d.clone().rem(&amp;2u64.to_biguint().unwrap()) == Zero::zero() {\n            d = d.shr(1usize);\n            r = r + 1;\n        } else {\n            break;\n        }\n    }\n    return (r, d);\n}\n\nfn might_be_prime(n: &amp;BigUint) -&gt; bool {\n    let nsub1 = n.sub(1u64.to_biguint().unwrap());\n    let two = 2u64.to_biguint().unwrap();\n\n    let (r, d) = find_r_and_d(nsub1.clone());\n    'WitnessLoop: for kk in 0..6u64 {\n        let a = rand::thread_rng().gen_biguint_range(&amp;two, &amp;nsub1);\n        let mut x = mod_exp(&amp;a, &amp;d, &amp;n);\n        if x == 1u64.to_biguint().unwrap() || x == nsub1 {\n            continue;\n        }\n        for rr in 1..r {\n            x = x.clone().mul(x.clone()).rem(n);\n            if x == 1u64.to_biguint().unwrap() {\n                return false;\n            } else if x == nsub1 {\n                continue 'WitnessLoop;\n            } \n        }\n        return false;\n    }\n    return true;\n}\n\nfn mod_exp(base: &amp;BigUint, exponent: &amp;BigUint, modulus: &amp;BigUint) -&gt; BigUint {\n    let one = 1u64.to_biguint().unwrap();\n    let mut result = one.clone();\n    let mut base_clone = base.clone();\n    let mut exponent_clone = exponent.clone();\n\n    while exponent_clone &gt; 0u64.to_biguint().unwrap() {\n        if exponent_clone.clone() &amp; one.clone() == one {\n            result = result.mul(&amp;base_clone).rem(modulus);\n        } \n        base_clone = base_clone.clone().mul(base_clone).rem(modulus);\n        exponent_clone = exponent_clone.shr(1usize);\n    }\n    return result;\n}\n\nfn main() {  \n    let now1 = now();\n\n    for n in 5u64..1_000_000u64 {\n        let b = n.to_biguint().unwrap();\n        if might_be_prime(&amp;b) {\n            println!(\"{}\", n);\n        }\n    }\n\n    let now2 = now();\n    println!(\"{}\", now2.to_timespec().sec - now1.to_timespec().sec);\n}  \n</code></pre>\n"}, {"tags": ["module", "rust", "libraries", "rust-crates"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1455606087, "post_id": 35420938, "comment_id": 58550848, "body": "<code>LogStreamProcessor</code> is not the same as <code>LogstreamProcessor</code> (<code>s</code> has different case). Also better follow the Rust code style with lowercase names for modules. <a href=\"https://doc.rust-lang.org/style/\" rel=\"nofollow noreferrer\">doc.rust-lang.org/style</a>"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1455626639, "last_edit_date": 1455626639, "creation_date": 1455602038, "answer_id": 35424806, "question_id": 35420938, "link": "https://stackoverflow.com/questions/35420938/how-am-i-messing-up-these-modules/35424806#35424806", "title": "How am I messing up these modules?", "body": "<p>This should work:</p>\n\n<pre><code>use lib_plotMote::lib_plotMote::LogStreamProcessor;\n</code></pre>\n\n<p>The first <code>lib_plotMote</code> comes from <code>extern crate</code>, and the second one comes from the module you have defined in the library crate:</p>\n\n<pre><code>pub mod lib_plotMote;\n</code></pre>\n\n<p>Therefore, the library crate contains one module which, coincidentally, has the same name as the crate itself.</p>\n\n<p>Also, as @starblue has noticed, you have case mismatch in the declaration site of the structure (<code>LogstreamProcessor</code>) and its use site (<code>LogStreamProcessor</code>). This should also be fixed.</p>\n\n<p>As as side note, I suggest you to follow the idiomatic naming convention and avoid camelCase in module/crate names.</p>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 366, "favorite_count": 0, "accepted_answer_id": 35424806, "answer_count": 1, "score": 0, "last_activity_date": 1455638114, "creation_date": 1455578502, "last_edit_date": 1495539903, "question_id": 35420938, "link": "https://stackoverflow.com/questions/35420938/how-am-i-messing-up-these-modules", "title": "How am I messing up these modules?", "body": "<p>I'm trying to create a crate that has a library and one or more binaries. I've looked at <a href=\"https://stackoverflow.com/questions/26946646/rust-package-with-both-a-library-and-a-binary\">Rust package with both a library and a binary?</a> and <a href=\"http://rust.dev/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">the Rust book section on crates and modules</a> but am still running into errors when I try and compile.</p>\n\n<p>I've included the relevant sections of each file (I think).</p>\n\n<p>../cargo.toml:</p>\n\n<pre><code>[package]\nname = \"plotmote\"\nversion = \"0.1.0\"\nauthors = [\"Camden Narzt &lt;my@nice.email&gt;\"]\n\n[lib]\nname = \"lib_plotMote\"\npath = \"src/lib.rs\"\n\n[[bin]]\nname = \"plotMote\"\npath = \"src/main.rs\"\n</code></pre>\n\n<p>lib.rs:</p>\n\n<pre><code>pub mod lib_plotMote;\n</code></pre>\n\n<p>lib_plotMote/mod.rs:</p>\n\n<pre><code>pub mod LogstreamProcessor;\n</code></pre>\n\n<p>lib_plotMote/LogstreamProcessor.rs:</p>\n\n<pre><code>pub struct LogstreamProcessor {\n</code></pre>\n\n<p>main.rs:</p>\n\n<pre><code>extern crate lib_plotMote;\nuse lib_plotMote::LogStreamProcessor;\n</code></pre>\n\n<p>error:</p>\n\n<pre><code>cargo build\n   Compiling plotmote v0.1.0 (file:///Users/camdennarzt/Developer/Rust/plotmote)\nmain.rs:6:5: 6:37 error: unresolved import `lib_plotMote::LogStreamProcessor`. There is no `LogStreamProcessor` in `lib_plotMote` [E0432]\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1455602144, "post_id": 35419432, "comment_id": 58549165, "body": "That&#39;s a strange project you have. How come the source directory is called <code>foo-bar</code> if this is a cargo project? And if it isn&#39;t, you need to call rustc with proper arguments to specify the crate name. Or maybe <code>lib.rs</code> here is not a crate root?"}, {"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1455642050, "post_id": 35419432, "comment_id": 58575104, "body": "@VladimirMatveev The project is a detached clone of it&#39;s parent who went cold. I want to continue development but under a different repository name. <a href=\"https://github.com/cpjreynolds/rustty\" rel=\"nofollow noreferrer\">rustty</a> is the parent, <a href=\"https://github.com/Syntaf/fe-rustty\" rel=\"nofollow noreferrer\">fe-rustty</a> is the clone. If people want to integrate fe instead of the dead repo, all they need to do it change the package name."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1455649242, "post_id": 35419432, "comment_id": 58579666, "body": "Well yes, but in the project you have linked to <code>lib.rs</code> is under <code>src&#47;</code> directory, not under <code>foo-bar</code>. That&#39;s what confused me - this may happen if one does not use Cargo for building. If I were you I would have formulated the question slightly differently: how to change the name of the <i>library crate</i>, so it would be different from the name of the <i>Cargo package</i>. At least, that&#39;s what starblue&#39;s answer is about and I guess it is what you want, given that you have accepted it."}], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 5, "last_activity_date": 1455572536, "creation_date": 1455572536, "answer_id": 35419628, "question_id": 35419432, "link": "https://stackoverflow.com/questions/35419432/use-namespace-instead-of-folder-name/35419628#35419628", "title": "use namespace instead of folder name", "body": "<p>You can specify the name of the library in <code>Cargo.toml</code>, see the <a href=\"http://doc.crates.io/manifest.html#configuring-a-target\" rel=\"noreferrer\">Cargo documentation</a>.</p>\n\n<pre><code>[lib]\n# The name of a target is the name of the library that will be generated. This\n# is defaulted to the name of the package or project.\nname = \"foo\"\n</code></pre>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 35419628, "answer_count": 1, "score": 2, "last_activity_date": 1458227095, "creation_date": 1455571737, "last_edit_date": 1458227095, "question_id": 35419432, "link": "https://stackoverflow.com/questions/35419432/use-namespace-instead-of-folder-name", "title": "use namespace instead of folder name", "body": "<p>Say I have a project:</p>\n\n<pre><code>foo-bar\n  | - lib.rs\n  | - ....\n</code></pre>\n\n<p>But I don't want the namespace <code>foo-bar</code>, I only want <code>bar</code>. Is there anyway to specify this in <code>lib.rs</code>? The obvious solution would be to rename <code>foo-bar</code> to <code>bar</code>, but I can't do that in this case. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1314, "user_id": 4449496, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bb259191f2f8360c503a13b78d900893?s=128&d=identicon&r=PG&f=1", "display_name": "DocRattie", "link": "https://stackoverflow.com/users/4449496/docrattie"}, "edited": false, "score": 1, "creation_date": 1455531642, "post_id": 35406496, "comment_id": 58514739, "body": "What&#39;s the problem with it?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1455539527, "post_id": 35406496, "comment_id": 58519694, "body": "Your question is not clear. What are the dimensions of the array(s)? Do you only want to execute this loop you are showing (which requires only indexing to work) or do you want a specific type in Rust?"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1455544255, "post_id": 35406496, "comment_id": 58522834, "body": "Maybe you want to implement <code>std::ops::Index</code>? <a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/ops/trait.Index.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 5, "last_activity_date": 1455534439, "creation_date": 1455534439, "answer_id": 35407756, "question_id": 35406496, "link": "https://stackoverflow.com/questions/35406496/convert-mut-mut-f32-into-f32/35407756#35407756", "title": "Convert &quot;*mut *mut f32&quot; into &quot;&amp;[&amp;[f32]]&quot;", "body": "<p>In Rust <code>&amp;[T]</code>/<code>&amp;mut [T]</code> is called a slice. A slice is not an array; it is a pointer to the beginning of an array <em>and</em> the number of items in this array. Therefore, to create <code>&amp;mut [T]</code> out of <code>*mut T</code>, you need to known the length of the array behind the pointer.</p>\n\n<p><code>*mut *mut T</code> looks like a C implementation of a 2D, possibly jagged, array, i.e. an array of arrays (this is different from a contiguous 2D array, as you probably know). There is no free way to convert it to <code>&amp;mut [&amp;mut [T]]</code>, because, as I said before, <code>*mut T</code> is one pointer-sized number, while <code>&amp;mut [T]</code> is two pointer-sized numbers. So you can't, for example, transmute <code>*mut T</code> to <code>&amp;mut [T]</code>, it would be a size mismatch. Therefore, you can't simply transform <code>*mut *mut f32</code> to <code>&amp;mut [&amp;mut [f32]]</code> because of the layout mismatch.</p>\n\n<p>In order to safely work with numbers stored in <code>*mut *mut f32</code>, you need, first, determine the length of the outer array and lengths of all of the inner arrays. For simplicity, let's consider that they are all known statically:</p>\n\n<pre><code>const ROWS: usize = 48000;\nconst COLUMNS: usize = 48000;\n</code></pre>\n\n<p>Now, since you know the length, you can convert the outer pointer to a slice of raw pointers:</p>\n\n<pre><code>use std::slice;\n\nlet buffer: *mut *mut f32 = func();\n\nlet buf_slice: &amp;mut [*mut f32] = unsafe {\n    slice::from_raw_parts_mut(buffer, ROWS);\n};\n</code></pre>\n\n<p>Now you need to go through this slice and convert each item to a slice, collecting the results into a vector:</p>\n\n<pre><code>let matrix: Vec&lt;&amp;mut [f32]&gt; = buf_slice.iter_mut()\n    .map(|p| unsafe { slice::from_raw_parts_mut(p, COLUMNS) })\n    .collect();\n</code></pre>\n\n<p>And now you can indeed access your buffer by indices:</p>\n\n<pre><code>for n in 0..COLUMNS {\n    matrix[0][n] = 1.0;\n    matrix[1][n] = 3.0;\n}\n</code></pre>\n\n<p>(I have put explicit types on bindings for readability, most of them in fact can be omitted)</p>\n\n<p>So, there are two main things to consider when converting raw pointers to slices:</p>\n\n<ol>\n<li>you need to know exact length of the array to create a slice from it; if you know it, you can use <a href=\"http://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\"><code>slice::from_raw_parts()</code></a> or <a href=\"http://doc.rust-lang.org/std/slice/fn.from_raw_parts_mut.html\"><code>slice::from_raw_parts_mut()</code></a>;</li>\n<li>if you are converting nested arrays, you need to rebuild each layer of the indirection because pointers have different size than slices.</li>\n</ol>\n\n<p>And naturally, you have to track who is the owner of the buffer and when it will be freed, otherwise you can easily get a slice pointing to a buffer which does not exist anymore. This is <code>unsafe</code>, after all.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1455535571, "creation_date": 1455535571, "answer_id": 35408148, "question_id": 35406496, "link": "https://stackoverflow.com/questions/35406496/convert-mut-mut-f32-into-f32/35408148#35408148", "title": "Convert &quot;*mut *mut f32&quot; into &quot;&amp;[&amp;[f32]]&quot;", "body": "<p>Since your array seems to be an array of pointers to an array of 48000 <code>f32</code>s, you can simply use fixed size arrays (<code>[T; N]</code>) instead of slices (<code>[T]</code>):</p>\n\n<pre><code>fn func() -&gt; *mut *mut f32 { unimplemented!() }\n\nfn main() {\n    let buffer = func();\n    let buffer: &amp;mut [&amp;mut [f32; 48000]; 2] = unsafe { std::mem::transmute(buffer) };\n    for n in 0..48000 {\n        buffer[0][n] = 1.0;\n        buffer[1][n] = 3.0;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 31, "user_id": 2978513, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/870abba080a9fd681d3b69163153e90f?s=128&d=identicon&r=PG&f=1", "display_name": "farodin91", "link": "https://stackoverflow.com/users/2978513/farodin91"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 260, "favorite_count": 0, "accepted_answer_id": 35408148, "answer_count": 2, "score": 2, "last_activity_date": 1455539275, "creation_date": 1455530934, "last_edit_date": 1455539275, "question_id": 35406496, "link": "https://stackoverflow.com/questions/35406496/convert-mut-mut-f32-into-f32", "title": "Convert &quot;*mut *mut f32&quot; into &quot;&amp;[&amp;[f32]]&quot;", "body": "<p>I want to convert arrays.</p>\n\n<p>Example:</p>\n\n<pre><code>func()-&gt; *mut *mut f32;\n...\nlet buffer = func();\nfor n in 0..48000 {\n    buffer[0][n] = 1.0;\n    buffer[1][n] = 3.0;\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 6, "last_activity_date": 1455527595, "creation_date": 1455527595, "answer_id": 35405326, "question_id": 35404844, "link": "https://stackoverflow.com/questions/35404844/how-to-convert-string-to-binary-string-in-rust/35405326#35405326", "title": "How to convert string to binary string in Rust?", "body": "<p>There's no such thing as a binary string in Rust. There's byte strings, which are a special literal used to create arrays of <code>u8</code>; they are indistinguishable from other arrays of <code>u8</code>.</p>\n\n<p>When you do manipulation of arrays of <code>u8</code>, you want to work with <code>Vec&lt;u8&gt;</code>, not arrays. If you want to convert a <code>String</code> or <code>str</code> to an array of <code>u8</code>, you get a slice using <code>as_bytes</code>. If you want to get a <code>Vec&lt;u8&gt;</code> from a <code>String</code>, you can use <code>into_bytes</code> instead.</p>\n"}, {"tags": [], "owner": {"reputation": 71, "user_id": 10887917, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-1tSIyWb6rNw/AAAAAAAAAAI/AAAAAAAAAEE/_xUG-CECweY/photo.jpg?sz=128", "display_name": "Senre Dynacity", "link": "https://stackoverflow.com/users/10887917/senre-dynacity"}, "is_accepted": false, "score": 7, "last_activity_date": 1597399652, "last_edit_date": 1597399652, "creation_date": 1590631906, "answer_id": 62055856, "question_id": 35404844, "link": "https://stackoverflow.com/questions/35404844/how-to-convert-string-to-binary-string-in-rust/62055856#62055856", "title": "How to convert string to binary string in Rust?", "body": "<p>You probably meant a binary representation of your string in the type <em>String</em>.</p>\n<pre><code>fn main() {\n    let name = &quot;Jake&quot;.to_string();\n    let mut name_in_binary = &quot;&quot;.to_string();\n\n    // Call into_bytes() which returns a Vec&lt;u8&gt;, and iterate accordingly\n    // I only called clone() because this for loop takes ownership\n    for character in name.clone().into_bytes() {\n        name_in_binary += &amp;format!(&quot;0{:b} &quot;, character);\n    }\n    println!(&quot;\\&quot;{}\\&quot; in binary is {}&quot;, name, name_in_binary);\n}\n</code></pre>\n<p>And that results:</p>\n<pre><code>&quot;Jake&quot; in binary is 01001010 01100001 01101011 01100101\n</code></pre>\n"}], "owner": {"reputation": 297, "user_id": 4637393, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/fd5e83c03caaad2804a0cb8b4ee0adf1?s=128&d=identicon&r=PG&f=1", "display_name": "Leviathan", "link": "https://stackoverflow.com/users/4637393/leviathan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5428, "favorite_count": 1, "answer_count": 2, "score": 6, "last_activity_date": 1597399652, "creation_date": 1455525972, "last_edit_date": 1455550905, "question_id": 35404844, "link": "https://stackoverflow.com/questions/35404844/how-to-convert-string-to-binary-string-in-rust", "title": "How to convert string to binary string in Rust?", "body": "<p>I have a string and I want to convert it to a binary string.</p>\n\n<pre><code>let content = request_version.to_string() + &amp;request_length.to_string() + request_json;\n</code></pre>\n"}, {"tags": ["iterator", "rust", "move-semantics"], "answers": [{"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 5, "last_activity_date": 1455535606, "last_edit_date": 1495535394, "creation_date": 1455524522, "answer_id": 35404470, "question_id": 35402244, "link": "https://stackoverflow.com/questions/35402244/whats-the-most-efficient-way-to-reuse-an-iterator-in-rust/35404470#35404470", "title": "What&#39;s the most efficient way to reuse an iterator in Rust?", "body": "<p>You may use closure to get identical iterators:</p>\n\n<pre><code>#[derive(Debug)]\nstruct MyStruct{\n    one:Vec&lt;char&gt;,\n    two:Vec&lt;char&gt;,\n    three:String\n}\n\nfn main() {\n    let my_string:String = \"ABCD1234absd\".into();\n    let my_iter = || my_string.chars();\n    let my_struct = MyStruct{\n        one: my_iter().collect(),\n        two: my_iter().filter(|x| x.is_numeric()).collect(),\n        three: my_iter().filter(|x| x.is_lowercase()).collect()\n    };\n    println!(\"{:?}\", my_struct);\n}\n</code></pre>\n\n<p>See also this <a href=\"https://stackoverflow.com/q/27535289\">Correct way to return an Iterator?</a> question.</p>\n\n<p>Also you may clone iterator (see @Paolo Falabella answer about iterators cloneability):</p>\n\n<pre><code>fn main() {\n    let v = vec![1,2,3,4,5,6,7,8,9]; \n    let mut i = v.iter().skip(2);\n    let mut j = i.clone();\n    println!(\"{:?}\", i.take(3).collect::&lt;Vec&lt;_&gt;&gt;());\n    println!(\"{:?}\", j.filter(|&amp;x| x%2==0).collect::&lt;Vec&lt;_&gt;&gt;());\n}\n</code></pre>\n\n<p>Unfortunately I can't tell which way is more effective</p>\n"}, {"tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 9, "last_activity_date": 1456742288, "last_edit_date": 1456742288, "creation_date": 1455527017, "answer_id": 35405164, "question_id": 35402244, "link": "https://stackoverflow.com/questions/35402244/whats-the-most-efficient-way-to-reuse-an-iterator-in-rust/35405164#35405164", "title": "What&#39;s the most efficient way to reuse an iterator in Rust?", "body": "<p>You should profile before you optimize something, otherwise you might end making things <em>both</em> slower and more complex than they need to.</p>\n\n<p>The iterators in your example </p>\n\n<pre><code>let my_iter = my_string.unwrap_or(\"A\").chars().flat_map(|c|c.to_uppercase()).map(|c| Tag::from(c).unwrap() );\n</code></pre>\n\n<p>are thin structures allocated on the stack. Cloning them isn't going to be much cheaper than building them from scratch.</p>\n\n<p>Constructing an iterator with <code>.chars().flat_map(|c| c.to_uppercase())</code> takes only a single nanosecond when I <a href=\"https://gist.github.com/ArtemGr/a6b080c7bf8a65d1d65f\" rel=\"nofollow noreferrer\">benchmark</a> it.</p>\n\n<p>According to the same benchmark, wrapping iterator creation in a closure takes more time than simply building the iterator in-place.</p>\n\n<p>Cloning a <code>Vec</code> iterator is not much faster than building it in-place, both are practically instant.</p>\n\n<pre><code>test construction_only    ... bench:           1 ns/iter (+/- 0)\ntest inplace_construction ... bench:         249 ns/iter (+/- 20)\ntest closure              ... bench:         282 ns/iter (+/- 18)\ntest vec_inplace_iter     ... bench:           0 ns/iter (+/- 0)\ntest vec_clone_iter       ... bench:           0 ns/iter (+/- 0)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 7, "last_activity_date": 1455531066, "creation_date": 1455531066, "answer_id": 35406538, "question_id": 35402244, "link": "https://stackoverflow.com/questions/35402244/whats-the-most-efficient-way-to-reuse-an-iterator-in-rust/35406538#35406538", "title": "What&#39;s the most efficient way to reuse an iterator in Rust?", "body": "<p>Iterators in general are <code>Clone</code>-able if all their \"pieces\" are <code>Clone</code>-able. You have a couple of them in <code>my_iter</code> that are not: the anonymous closures (like the one in flat_map) and the <a href=\"http://doc.rust-lang.org/std/char/struct.ToUppercase.html\" rel=\"noreferrer\">ToUppercase</a> struct returned by <code>to_uppercase</code>.</p>\n\n<p>What you can do is:</p>\n\n<ol>\n<li>rebuild the whole thing (as @ArtemGr suggests). You could use a macro to avoid repetition. A bit ugly but should work.</li>\n<li>collect <code>my_iter</code> into a <code>Vec</code> before populating my_struct (since you seem to collect it anyway in there): <code>let my_iter: Vec&lt;char&gt; = my_string.unwrap_or(\"A\").chars().flat_map(|c|c.to_uppercase()).map(|c| Tag::from(c).unwrap() ).collect();</code></li>\n<li>create your own custom iterator. Without your definitions of <code>my_string</code> (since you call <code>unwrap_or</code> on it I assume it's not a <code>String</code>) and <code>Tag</code> it's hard to help you more concretely with this.</li>\n</ol>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4443, "favorite_count": 0, "accepted_answer_id": 35406538, "answer_count": 3, "score": 11, "last_activity_date": 1456742288, "creation_date": 1455515074, "question_id": 35402244, "link": "https://stackoverflow.com/questions/35402244/whats-the-most-efficient-way-to-reuse-an-iterator-in-rust", "title": "What&#39;s the most efficient way to reuse an iterator in Rust?", "body": "<p>I'd like to reuse an iterator I made, so as to avoid paying to recreate it from scratch. But iterators don't seem to be <code>clone</code>able and <code>collect</code> moves the iterator so I can't reuse it.</p>\n\n<p>Here's more or less the equivalent of what I'm trying to do.</p>\n\n<pre><code>let my_iter = my_string.unwrap_or(\"A\").chars().flat_map(|c|c.to_uppercase()).map(|c| Tag::from(c).unwrap() );\nlet my_struct = {\n  one: my_iter.collect(),\n  two: my_iter.map(|c|{(c,Vec::new())}).collect(),\n  three: my_iter.filter_map(|c|if c.predicate(){Some(c)}else{None}).collect(),\n  four: my_iter.map(|c|{(c,1.0/my_float)}).collect(),\n  five: my_iter.map(|c|(c,arg_time.unwrap_or(time::now()))).collect(),\n  //etc...\n}\n</code></pre>\n"}, {"tags": ["types", "architecture", "rust", "32bit-64bit"], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 5927966, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec3479a5b46be5e24486526fa105135?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/5927966/steve"}, "edited": false, "score": 0, "creation_date": 1455509627, "post_id": 35401038, "comment_id": 58504710, "body": "wow nice! usize, thats interesting. Thank you! If I just set it to usize I can let Rust handle it."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1455506796, "creation_date": 1455506796, "answer_id": 35401038, "question_id": 35400873, "link": "https://stackoverflow.com/questions/35400873/switching-data-types-based-on-system/35401038#35401038", "title": "Switching data types based on system?", "body": "<p>You mean <code>usize</code>, as <a href=\"http://doc.rust-lang.org/book/primitive-types.html#variable-sized-types\" rel=\"nofollow\">explained in the Rust Book</a>?</p>\n\n<p>That's the solution to what you appear to <em>actually</em> want.  The solution to what you <em>asked</em> is <a href=\"http://doc.rust-lang.org/book/conditional-compilation.html\" rel=\"nofollow\">conditional compilation</a>, like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[cfg(target_pointer_width=\"32\")]\ntype SystemWord = u32;\n\n#[cfg(target_pointer_width=\"64\")]\ntype SystemWord = u64;\n</code></pre>\n\n<p>But don't do that when you can just use <code>usize</code>.  In fact, don't do it unless you <em>absolutely</em> have to, since this will often lead to you having two or more code paths in your code: one that's well tested, and the other which is often not tested <em>at all</em>.</p>\n"}], "owner": {"reputation": 35, "user_id": 5927966, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cec3479a5b46be5e24486526fa105135?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/5927966/steve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 40, "favorite_count": 0, "accepted_answer_id": 35401038, "answer_count": 1, "score": 2, "last_activity_date": 1455551002, "creation_date": 1455505513, "last_edit_date": 1455551002, "question_id": 35400873, "link": "https://stackoverflow.com/questions/35400873/switching-data-types-based-on-system", "title": "Switching data types based on system?", "body": "<p>I have a project where I need to read some bytes from disk. If the system is a 64 bit system, this will read a double word to get the correct amount of bytes. If it is a 32 bit system it will read a single word.</p>\n\n<p>I'd like to have one type that can represent either of these options. call it <code>SystemWord</code>.</p>\n\n<p>I'm unsure of the best way to handle this in a way that will allow me to have something like</p>\n\n<pre><code>let test: SystemWord = 0x01;\n</code></pre>\n\n<p>and it will know immediately whether to choose u64 or u32.</p>\n\n<p>Can anyone provide any guidance on the best way to do this? I'm still fairly new to Rust.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 722, "user_id": 270943, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7811eb1b0c6a0ddcd80c04457af54f2b?s=128&d=identicon&r=PG", "display_name": "tehnyit", "link": "https://stackoverflow.com/users/270943/tehnyit"}, "edited": false, "score": 0, "creation_date": 1455488661, "post_id": 35398710, "comment_id": 58499775, "body": "Yep, that fixes it. I need to reread the section for namespaces scopes for enums. Thanks for the answer!"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1455541778, "last_edit_date": 1455541778, "creation_date": 1455488372, "answer_id": 35398710, "question_id": 35398673, "link": "https://stackoverflow.com/questions/35398673/using-enum-in-a-struct-results-in-unresolved-name-error/35398710#35398710", "title": "Using enum in a struct results in &quot;unresolved name&quot; error", "body": "<p>Yes this is possible. In Rust <code>enum</code> variants (like <code>EastDirection</code>) are <strong>not</strong> in the global namespace by default. To create your <code>TrafficLight</code> instance, write:</p>\n\n<pre><code>let mut t1 = TrafficLight {\n    direction: Direction::EastDirection,\n    time_elapse: 0,\n};\n</code></pre>\n\n<p>Please note that, because variants aren't in the global namespace, you should not repeat the <code>enum</code> name within the variants name. So better change it to:</p>\n\n<pre><code>enum Direction {\n    East,\n    West,\n}\n\n/* struct TrafficLight */\n\nlet mut tl = TrafficLight {\n    direction: Direction::East, \n    time_elapse: 0\n};\n</code></pre>\n"}], "owner": {"reputation": 722, "user_id": 270943, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7811eb1b0c6a0ddcd80c04457af54f2b?s=128&d=identicon&r=PG", "display_name": "tehnyit", "link": "https://stackoverflow.com/users/270943/tehnyit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 247, "favorite_count": 0, "accepted_answer_id": 35398710, "answer_count": 1, "score": 4, "last_activity_date": 1455541778, "creation_date": 1455488147, "last_edit_date": 1455488596, "question_id": 35398673, "link": "https://stackoverflow.com/questions/35398673/using-enum-in-a-struct-results-in-unresolved-name-error", "title": "Using enum in a struct results in &quot;unresolved name&quot; error", "body": "<p>I come from a C programming background and started to learn Rust. </p>\n\n<p>Is it possible to use an <code>enum</code> in a struct as in the code snippet below?</p>\n\n<pre><code>enum Direction {\n    EastDirection,\n    WestDirection\n}\n\nstruct TrafficLight {\n    direction: Direction,  // the direction of the traffic light\n    time_elapse : i32,  // the counter used for the elpase time\n}\n\nlet mut tl = TrafficLight {direction:EastDirection, time_elapse:0};\n</code></pre>\n\n<p>When I compile the code, it complains that <code>EastDirection</code> is not known.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 0, "last_activity_date": 1455533327, "last_edit_date": 1455533327, "creation_date": 1455471758, "answer_id": 35394960, "question_id": 35394358, "link": "https://stackoverflow.com/questions/35394358/rustboot-errors-with-rust-1-8-0-nightly-compiler/35394960#35394960", "title": "Rustboot errors with Rust 1.8.0 nightly compiler", "body": "<p><code>IntRange</code> does not implement <code>core::iter::Iterator</code>, so naturally it can't be used in a <code>for</code> loop. The error about the type of <code>i</code> is related - since <code>IntRange</code> does not implement <code>Iterator</code>, so when it is used as one, the type of its items is not known.</p>\n\n<p>You should implement <code>Iterator</code> instead of providing <code>next()</code> as an inherent method:</p>\n\n<pre><code>use core::iter::Iterator;\n\nimpl Iterator for IntRange {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;i32&gt; {\n        // your implementation\n    }\n}\n</code></pre>\n\n<p>This may be not enough, however, because <code>for</code> loop also relies on <code>Option</code>, but I don't remember now whether it is a lang item or if it is looked for by a full path.</p>\n"}], "owner": {"reputation": 3, "user_id": 5261960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c96c3d096bee9b56ff5d7cb2f3641bc?s=128&d=identicon&r=PG&f=1", "display_name": "Grsan", "link": "https://stackoverflow.com/users/5261960/grsan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "accepted_answer_id": 35394960, "answer_count": 1, "score": 0, "last_activity_date": 1455533327, "creation_date": 1455468577, "question_id": 35394358, "link": "https://stackoverflow.com/questions/35394358/rustboot-errors-with-rust-1-8-0-nightly-compiler", "title": "Rustboot errors with Rust 1.8.0 nightly compiler", "body": "<p>I am attempting to fix Rustboot, so that it will build and run in the Rust 1.8.0 nightly using i686-unknown-linux-gnu. I have two main errors that I cannot seem to fix, and these are it:</p>\n\n<pre><code>main.rs:50:5: 54:6 error: the trait `core::iter::Iterator` is not implemented for the type `IntRange` [E0277]\nmain.rs:50     for i in range(0, 80 * 25) {\nmain.rs:51         unsafe {\nmain.rs:52             *((0xb8000 + i * 2) as *mut u16) = (background as u16) &lt;&lt; 12;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>main.rs:52:15: 52:44 error: the type of this value must be known in this context\nmain.rs:52             *((0xb8000 + i * 2) as *mut u16) = (background as u16) &lt;&lt; 12;\n</code></pre>\n\n<p>Any ideas on why this is happening, and how I can fix it?</p>\n\n<p>Link to Rustboot main.rs file: <a href=\"http://pastebin.com/wyDywYN8\" rel=\"nofollow\">http://pastebin.com/wyDywYN8</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1455457577, "post_id": 35392382, "comment_id": 58488790, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/24574741/iterator-returning-items-by-reference-lifetime-issue\">Iterator returning items by reference, lifetime issue</a>"}, {"owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1455458286, "post_id": 35392382, "comment_id": 58489034, "body": "It&#39;s certainly relevant (I&#39;m already mentioning it above) but I do not think it&#39;s a duplicate since it suggests using a reference, but does not describe <b>how</b> to do it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1455463526, "post_id": 35392382, "comment_id": 58490628, "body": "@ynimous: A lack of clarity in the answer does not make it &quot;not an answer&quot; (you can of course comment on the answer asking for clarification). In your case, as mentioned by Chris Morgan: remove the <code>&#39;a</code> so <code>next_(&amp;&#39;a mut self)</code> becomes <code>next_(&amp;mut self)</code> =&gt; by reusing <code>&#39;a</code> you are unintentionally tying up the lifetime of the iterator itself to that of the collection iterated over which is your mistake."}, {"owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "edited": false, "score": 0, "creation_date": 1455464492, "post_id": 35392382, "comment_id": 58491012, "body": "@Mathhieu M. please see EDIT 2. Also I&#39;m not sure where your quote &quot;not an answer&quot; comes from. I never said that, it&#39;s just that it&#39;s not exactly the same question."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 1, "last_activity_date": 1455538776, "last_edit_date": 1455538776, "creation_date": 1455481602, "answer_id": 35397592, "question_id": 35392382, "link": "https://stackoverflow.com/questions/35392382/is-it-possible-to-build-an-iterator-that-yields-a-reference-to-an-object-that-it/35397592#35397592", "title": "Is it possible to build an iterator that yields a reference to an object that it modifies in next()?", "body": "<p>Here's a modification of your <code>next_()</code> method that seems to work:</p>\n\n<pre><code>fn next_&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;&amp;'b Vec&lt;T&gt;&gt;\nwhere 'a: 'b { ... }\n</code></pre>\n\n<p>The <code>'b</code> parameter will be elided (<a href=\"https://doc.rust-lang.org/book/lifetimes.html#lifetime-elision\" rel=\"nofollow\">lifetime elision</a>), so this will work just as well:</p>\n\n<pre><code>fn next_(&amp;mut self) -&gt; Option&lt;&amp;Vec&lt;T&gt;&gt; { ... }\n</code></pre>\n\n<p>The lifetimes of <code>self</code> and of <code>self.x</code> are different. <s>I'm having some trouble figuring out the precise reason this doesn't work, but</s> in general, you don't need to write <code>&amp;'x self</code>, and if you ever do, <code>'x</code> is never a parameter on the type of <code>self</code>.</p>\n\n<p><strong>EDIT:</strong> Ok, I get it now. I kept overlooking the fact that <code>self.x</code> is a <em>mutable</em> borrow of a <code>Vec</code>, but you're trying to return an <em>immutable</em> reference to it. If <code>self.x</code> were not marked <code>mut</code>, you could just return <code>Some(self.x)</code> and it would be copied. But you can't copy a mutable reference, so it has to be reborrowed. Furthermore, the existence of a reborrowed (immutable) reference would make it impossible to call <code>&amp;mut self</code> methods or destroy <code>self</code> until the reference was destroyed, so <code>self</code> has to outlast the new borrow. That's why you can't return <code>&amp;'a Vec&lt;T&gt;</code>: if you could, it would become impossible to destroy <code>self</code>.</p>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "accepted_answer_id": 35397592, "answer_count": 1, "score": 3, "last_activity_date": 1455538776, "creation_date": 1455456708, "last_edit_date": 1495535296, "question_id": 35392382, "link": "https://stackoverflow.com/questions/35392382/is-it-possible-to-build-an-iterator-that-yields-a-reference-to-an-object-that-it", "title": "Is it possible to build an iterator that yields a reference to an object that it modifies in next()?", "body": "<p>I'm trying to build an iterator that yields a reference to a <code>Vec</code>. I'll try to explain my rationale to understand where my flaw is.</p>\n\n<p>My first attempt was to have the iterator own the object:</p>\n\n<pre><code>pub struct VecIter&lt;T&gt; {\n    x: Vec&lt;T&gt;,\n}\n</code></pre>\n\n<p>However, according to <a href=\"https://stackoverflow.com/questions/24574741/iterator-returning-items-by-reference-lifetime-issue/24575591#24575591\">Iterator returning items by reference, lifetime issue</a>, this would not work. There were two suggestions in the above answer: don't return a reference, or have a reference to the object.</p>\n\n<p>Quoting from the answer:</p>\n\n<blockquote>\n  <p>For your specific, presumably simple example, you should either stop\n  yielding references, or alter it so that your iterator object does not\n  contain the data that you are iterating over\u2014let it merely contain a\n  reference to it, e.g. &amp;'a [T] or even something like Items&lt;'a, T>.</p>\n</blockquote>\n\n<p>I want to implement the second option: i.e, return a reference by having the iterator contain a reference.</p>\n\n<p>I've reduced the code to the simplest version that I cannot make it compile:</p>\n\n<pre><code>pub struct VecIter&lt;'a, T&gt; where T: 'a {\n    x: &amp;'a mut Vec&lt;T&gt;,\n}\n\nimpl&lt;'a, T&gt; VecIter&lt;'a, T&gt; {\n    fn next_(&amp;'a mut self) -&gt; Option&lt;&amp;'a Vec&lt;T&gt;&gt; {\n        // do something to modify self.x\n        Some(self.x)\n    }\n}\n\npub fn main() {\n    let mut vec_i = VecIter{x: &amp;mut vec![100,200,300]};\n    while let Some(x) = vec_i.next_() {\n        // ...\n    }\n}\n</code></pre>\n\n<p>I would expect the above code to work because each mutable borrow only lives inside the loop body. So the idea is to borrow the reference for the body of the loop, use it inside the loop, and end the borrow at the end of the loop.</p>\n\n<p>Is it possible to build such an iterator? i.e., build an iterator that yields a reference to an object that it modifies in <code>next()</code>?</p>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>In a comment by Matthieu M, it was suggested that for this to work I should:</p>\n\n<blockquote>\n  <p>remove the <code>'a</code> so <code>next_(&amp;'a mut self)</code> becomes <code>next_(&amp;mut self)</code></p>\n</blockquote>\n\n<p>Maybe I'm understanding something wrong, but I tried this and I got the following compile error. To avoid any confusion here's the code that I tried (<a href=\"http://is.gd/tgS1GJ\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>&lt;anon&gt;:8:14: 8:20 error: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements [E0495]\n&lt;anon&gt;:8         Some(self.x)\n                      ^~~~~~\n&lt;anon&gt;:6:5: 9:6 help: consider using an explicit lifetime parameter as shown: fn next_(&amp;'a mut self) -&gt; Option&lt;&amp;'a Vec&lt;T&gt;&gt;\n&lt;anon&gt;:6     fn next_(&amp;mut self) -&gt; Option&lt;&amp;'a Vec&lt;T&gt;&gt; {\n&lt;anon&gt;:7         // do something to modify self.x\n&lt;anon&gt;:8         Some(self.x)\n&lt;anon&gt;:9     }\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n"}, {"tags": ["oop", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1455463289, "post_id": 35390615, "comment_id": 58490530, "body": "Why do you think you need getters and setters? Why not <code>struct Person { pub first_name: String, pub last_name: String, }</code> which is quite simpler?"}, {"owner": {"reputation": 4455, "user_id": 1460448, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0dd5a0fbb2b5d5592a49d2e60ef98f0a?s=128&d=identicon&r=PG&f=1", "display_name": "xji", "link": "https://stackoverflow.com/users/1460448/xji"}, "edited": false, "score": 1, "creation_date": 1523512818, "post_id": 35390615, "comment_id": 86592921, "body": "Note that sometimes getters and setters can still be useful, e.g. when you define a default method in a trait, since for now you can&#39;t define/access any fields in a trait. See <a href=\"https://internals.rust-lang.org/t/fields-in-traits/6933\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/fields-in-traits/6933</a>"}], "answers": [{"comments": [{"owner": {"reputation": 608, "user_id": 3716627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://graph.facebook.com/1158362605/picture?type=large", "display_name": "ajm113", "link": "https://stackoverflow.com/users/3716627/ajm113"}, "edited": false, "score": 0, "creation_date": 1455447376, "post_id": 35390852, "comment_id": 58485834, "body": "Hey thanks for the very helpful feed back! Makes sense to do everything directly, now you put it that way. Obviously I came from a very heavy OOP background w/ PHP/Java. So in this case I need to start thinking more simply functional in this case is pretty much what I need to be doing for the most part. Unless we are talking about adding functionality to the struct."}], "tags": [], "owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "is_accepted": false, "score": 4, "last_activity_date": 1455460902, "last_edit_date": 1455460902, "creation_date": 1455446733, "answer_id": 35390852, "question_id": 35390615, "link": "https://stackoverflow.com/questions/35390615/writing-getter-setter-properties-in-rust/35390852#35390852", "title": "Writing getter/setter properties in Rust", "body": "<p>Your getter method borrows <code>self</code>. When your return <code>self.name</code>, you're moving <code>name</code> from a borrowed reference which is not allowed. You should return a copy of name.</p>\n\n<p>Also, You do not need to pass a mutable reference to <code>self</code> in the getter methods since you are not modifying the internal struct. </p>\n\n<p>Therefore, your getter methods should be:</p>\n\n<pre><code>fn get_first_name(&amp;self) -&gt; &amp;String { &amp;self.firstName }\nfn get_last_name(&amp;self) -&gt; &amp;String {  &amp;self.lastName }\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "edited": false, "score": 0, "creation_date": 1455448701, "post_id": 35391084, "comment_id": 58486197, "body": "Isn&#39;t it more correct to use <code>&amp;str</code> instead of <code>&amp;String</code>?"}, {"owner": {"reputation": 608, "user_id": 3716627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://graph.facebook.com/1158362605/picture?type=large", "display_name": "ajm113", "link": "https://stackoverflow.com/users/3716627/ajm113"}, "reply_to_user": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "edited": false, "score": 0, "creation_date": 1455449270, "post_id": 35391084, "comment_id": 58486350, "body": "@W.K.S, funny I actually had the same question. I remember reading something along the lines of using str instead, but I don&#39;t remember..."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 608, "user_id": 3716627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://graph.facebook.com/1158362605/picture?type=large", "display_name": "ajm113", "link": "https://stackoverflow.com/users/3716627/ajm113"}, "edited": false, "score": 0, "creation_date": 1455451493, "post_id": 35391084, "comment_id": 58486904, "body": "@ajm113 Normally, yes.  <i>However</i>, in this case, you <i>also</i> have mutable access to the <code>String</code>, and there is one thing you can do with a <code>&amp;String</code> that you cannot do with a <code>&amp;str</code>: check the capacity.  Plus, <i>in general</i>, the two pointers will be of the same type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1455463244, "post_id": 35391084, "comment_id": 58490503, "body": "@DK.: What is the benefit of handing over a mutable reference to your field over just making the field public?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1455469742, "post_id": 35391084, "comment_id": 58492944, "body": "@MatthieuM. About the only things it buys you are that users can&#39;t move out of it, and you can change where it&#39;s stored on the fly.  Beyond that... <i>shrugs</i>"}, {"owner": {"reputation": 112, "user_id": 1260526, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b51a225ef112cf70f579c42b5665f716?s=128&d=identicon&r=PG", "display_name": "Leo Dutra", "link": "https://stackoverflow.com/users/1260526/leo-dutra"}, "edited": false, "score": 0, "creation_date": 1603608022, "post_id": 35391084, "comment_id": 114086909, "body": "setter pattern will still be better for the setter to be really encapsulated. If you wanted any other action than just the set, like debug logging or some internal counter, returning &amp;mut would cause some refactoring."}, {"owner": {"reputation": 24791, "user_id": 499214, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PObJM.png?s=128&g=1", "display_name": "John Dvorak", "link": "https://stackoverflow.com/users/499214/john-dvorak"}, "edited": false, "score": 0, "creation_date": 1607428436, "post_id": 35391084, "comment_id": 115263688, "body": "&quot;there is absolutely no reason to require &amp;mut self on a getter&quot; - lazy initialization (that isn&#39;t quite invisible to the outside world)?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user9723177"}, "reply_to_user": {"reputation": 24791, "user_id": 499214, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PObJM.png?s=128&g=1", "display_name": "John Dvorak", "link": "https://stackoverflow.com/users/499214/john-dvorak"}, "edited": false, "score": 0, "creation_date": 1608325769, "post_id": 35391084, "comment_id": 115558968, "body": "@JohnDvorak - I think in the case of lazy initialization you could still avoid resorting to &amp;mut self on the getter by using things like Cell or RefCell."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 40, "last_activity_date": 1455448435, "last_edit_date": 1495540389, "creation_date": 1455448435, "answer_id": 35391084, "question_id": 35390615, "link": "https://stackoverflow.com/questions/35390615/writing-getter-setter-properties-in-rust/35391084#35391084", "title": "Writing getter/setter properties in Rust", "body": "<p>Ok, the specific problem here is not being able to move out of borrowed content.  This has been <a href=\"https://stackoverflow.com/questions/25587655/cannot-move-out-of-mut-pointer\">answered</a> <a href=\"https://stackoverflow.com/questions/28527702/cannot-move-out-of-borrowed-context-and-use-of-moved-value\">numerous</a> <a href=\"https://stackoverflow.com/questions/28258548/cannot-move-out-of-borrowed-content-when-trying-to-transfer-ownership\">times</a> <a href=\"https://stackoverflow.com/questions/28158738/cannot-move-out-of-borrowed-content\">before</a> under a variety of conditions, not to mention <a href=\"http://doc.rust-lang.org/book/ownership.html\" rel=\"noreferrer\">the chapter on the subject of ownership in the Rust Book</a>.</p>\n\n<p>The more interesting one is about getters and setters.  Yes, you <em>can</em> write them in Rust, but they may not be the best choice.</p>\n\n<p>Before I go on, I just want to note that there is <em>absolutely no reason</em> to require <code>&amp;mut self</code> on a getter... unless you intend to modify the value as part of removing the value, but then you're not really dealing with a getter any more.</p>\n\n<p>Secondly, you <em>should not</em> <code>clone</code> in a getter.  This is hugely wasteful if all the user wants to do is, for example, read from the value.  It's better to return an immutable borrow, from which the user can <code>clone</code> <em>if</em> they need to.</p>\n\n<p>Anyway, if you're writing these because you want some kind of logic run in order to validate new values, keep using setters.  Otherwise, you could do something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Default)]\nstruct Person {\n    first_name: String,\n    last_name: String,\n}\n\nimpl Person {\n    // Immutable access.\n    fn first_name(&amp;self) -&gt; &amp;String {\n        &amp;self.first_name\n    }\n    fn last_name(&amp;self) -&gt; &amp;String {\n        &amp;self.last_name\n    }\n\n    // Mutable access.\n    fn first_name_mut(&amp;mut self) -&gt; &amp;mut String {\n        &amp;mut self.first_name\n    }\n    fn last_name_mut(&amp;mut self) -&gt; &amp;mut String {\n        &amp;mut self.last_name\n    }\n}\n\nfn main() {\n    let mut my_person = Person::default();\n\n    *my_person.first_name_mut() = String::from(\"John\");\n    *my_person.last_name_mut() = \"Doe\".into();\n\n    println!(\"first_name: {}\", my_person.first_name());\n    println!(\"last_name: {}\", my_person.last_name());\n\n    // Can't do this efficiently with getter/setter!\n    {\n        let s = my_person.last_name_mut();\n        s.truncate(2);\n        s.push('w');\n    }\n\n    println!(\"first_name: {}\", my_person.first_name());\n    println!(\"last_name: {}\", my_person.last_name());\n}\n</code></pre>\n\n<p>This gives users more-or-less direct access to the fields, without <em>actually</em> giving them direct access to the fields.  In addition to writing new values, this also allows users to mutate existing values in-place, which can be important for large, heap-allocated things.</p>\n\n<p>In addition, I made a few other changes:</p>\n\n<ul>\n<li><p>You can just mechanically derive <code>Default</code>; there's no reason in this case to write it yourself.</p></li>\n<li><p>Conventional style is <code>snake_case</code> for fields.</p></li>\n<li><p>The way you created the <code>Person</code> was needlessly roundabout.</p></li>\n</ul>\n"}], "owner": {"reputation": 608, "user_id": 3716627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://graph.facebook.com/1158362605/picture?type=large", "display_name": "ajm113", "link": "https://stackoverflow.com/users/3716627/ajm113"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 20512, "favorite_count": 4, "answer_count": 2, "score": 24, "last_activity_date": 1608187752, "creation_date": 1455444850, "last_edit_date": 1455551292, "question_id": 35390615, "link": "https://stackoverflow.com/questions/35390615/writing-getter-setter-properties-in-rust", "title": "Writing getter/setter properties in Rust", "body": "<p>I'm writing a very simple getter/setting model that I would like to start using in Rust for simplicity reasons using <code>struct</code> and <code>impl</code>.</p>\n\n<pre><code>struct Person {\n    firstName: String,\n    lastName: String,\n}\n\nimpl Person {\n    fn get_first_name(&amp;mut self) -&gt; String { return self.firstName; }\n    fn get_last_name(&amp;mut self) -&gt; String {  return self.lastName; }\n\n    fn set_first_name(&amp;mut self, x: String) { self.firstName = x; }\n    fn set_last_name(&amp;mut self, x: String) { self.lastName = x; }\n\n    fn default() -&gt; Person {\n        Person {firstName: \"\".to_string(), lastName: \"\".to_string()}\n    }\n}\n\nfn main() {\n    let mut my_person : Person = Person{ ..Person::default() };\n\n    my_person.set_first_name(\"John\".to_string());\n    my_person.set_last_name(\"Doe\".to_string());\n\n    println!(\"{}\", my_person.firstName);\n    println!(\"{}\", my_person.lastName);\n}\n</code></pre>\n\n<p>When I run this snippet I get the following error.</p>\n\n<pre><code>src\\main.rs:7:53: 7:57 error: cannot move out of borrowed content [E0507]\nsrc\\main.rs:7     fn get_first_name(&amp;mut self) -&gt; String { return self.firstName; }\n                                                                  ^~~~\nsrc\\main.rs:8:53: 8:57 error: cannot move out of borrowed content [E0507]\nsrc\\main.rs:8     fn get_last_name(&amp;mut self) -&gt; String {  return self.lastName; }\n                                                                  ^~~~\nerror: aborting due to 2 previous errors\nCould not compile `sandbox`.\n</code></pre>\n\n<p>Can someone point out the mistake to me since I'm very new to Rust?</p>\n\n<p>Tips on writing this snippet better would be accepted too. I'm always looking for easier/faster readability.</p>\n"}, {"tags": ["c++", "c", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1455463057, "post_id": 35389886, "comment_id": 58490436, "body": "<i>It would be nice to have somewhat that actually returns a value</i> =&gt; you can always create a C struct that holds both a <code>char*</code> and a <code>size_t</code> and use that as the return type; it&#39;s hardly Rust&#39;s fault here if C does not have a all-in-one result and you have to write it yourself."}, {"owner": {"reputation": 289, "user_id": 2155217, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wgZMS.jpg?s=128&g=1", "display_name": "Andrew Kondratev", "link": "https://stackoverflow.com/users/2155217/andrew-kondratev"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1455487112, "post_id": 35389886, "comment_id": 58499316, "body": "Thanks, Matthieu! There&#39;s EOF symbol in the end of C &quot;string&quot; which is sufficient. The question was more about deallocating the thing."}], "answers": [{"tags": [], "owner": {"reputation": 289, "user_id": 2155217, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wgZMS.jpg?s=128&g=1", "display_name": "Andrew Kondratev", "link": "https://stackoverflow.com/users/2155217/andrew-kondratev"}, "is_accepted": true, "score": 0, "last_activity_date": 1456377104, "creation_date": 1456377104, "answer_id": 35618878, "question_id": 35389886, "link": "https://stackoverflow.com/questions/35389886/the-best-way-in-rust-to-return-a-dynamic-string-from-extern-c-method-to-be-con/35618878#35618878", "title": "The best way in Rust to return a dynamic string from extern &quot;C&quot; method to be consumed by C or C++", "body": "<p>Not sure if it is a brand new, but documentation states (<a href=\"https://doc.rust-lang.org/book/custom-allocators.html#default-allocator\" rel=\"nofollow\">https://doc.rust-lang.org/book/custom-allocators.html#default-allocator</a>), that libraries use alloc_system by default, which means that we're free to use free in C/C++. It is also possible to add #![feature(alloc_system)] to the header to feel safer.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1457845248, "creation_date": 1457845248, "answer_id": 35966709, "question_id": 35389886, "link": "https://stackoverflow.com/questions/35389886/the-best-way-in-rust-to-return-a-dynamic-string-from-extern-c-method-to-be-con/35966709#35966709", "title": "The best way in Rust to return a dynamic string from extern &quot;C&quot; method to be consumed by C or C++", "body": "<p>You can use the <a href=\"http://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.into_raw\" rel=\"nofollow\"><code>into_raw</code></a> on a <code>CString</code> to turn it into a raw pointer, which you can then return from your function.</p>\n\n<p>You shouldn't rely on Rust using the system allocator. There's no guarantee that your Rust code will link to the same <code>free</code> as the C/C++ code. On Windows, for example, there's <code>msvcrt</code>, <code>msvcr80</code>, <code>msvcr90</code>, etc., and they all manage separate heaps. Therefore, your library should still provide a function to free memory that it allocates. For <code>CString</code>, you should use <a href=\"http://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.from_raw\" rel=\"nofollow\"><code>CString::from_raw</code></a> for this (you don't need to use the result, Rust will automatically drop it, which will free the string on the heap).</p>\n"}], "owner": {"reputation": 289, "user_id": 2155217, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wgZMS.jpg?s=128&g=1", "display_name": "Andrew Kondratev", "link": "https://stackoverflow.com/users/2155217/andrew-kondratev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 754, "favorite_count": 0, "accepted_answer_id": 35618878, "answer_count": 2, "score": 0, "last_activity_date": 1457845248, "creation_date": 1455439082, "last_edit_date": 1495539916, "question_id": 35389886, "link": "https://stackoverflow.com/questions/35389886/the-best-way-in-rust-to-return-a-dynamic-string-from-extern-c-method-to-be-con", "title": "The best way in Rust to return a dynamic string from extern &quot;C&quot; method to be consumed by C or C++", "body": "<p><em>This one is somewhat relevant, but the answer is not really clear for me:\n<a href=\"https://stackoverflow.com/questions/28866103/c-library-freeing-a-pointer-coming-from-rust\">C library freeing a pointer coming from Rust</a></em></p>\n\n<p>There's also an <a href=\"https://doc.rust-lang.org/book/ffi.html#calling-rust-code-from-c\" rel=\"nofollow noreferrer\">example with static string</a> in the book, however it would not properly work with the dynamically created string.</p>\n\n<p>I came to this solution finally where calling C/C++ code allocates and later deallocates memory for the string to be received, but it looks somewhat ugly and has to define some particular length for unknown string:</p>\n\n<pre><code>#[no_mangle]\npub extern fn rs_string_in_string_out(s_raw: *const c_char, out: *mut c_char) -&gt; c_int {\n    // take string from the input C string\n    if s_raw.is_null() { return 0; }\n\n    let c_str: &amp;CStr = unsafe { CStr::from_ptr(s_raw) };\n    let buf: &amp;[u8] = c_str.to_bytes();\n    let str_slice: &amp;str = std::str::from_utf8(buf).unwrap();\n    let str_buf: String = str_slice.to_owned();\n\n    //produce a new string\n    let result = String::from(str_buf + \" append from Rust\");\n    let len = result.len();\n\n    //create C string for output\n    let c_result = CString::new(result);\n\n    //write string into out pointer passed by C++ addon\n    unsafe{ std::ptr::copy(c_result.unwrap().as_ptr(), out, len); };\n\n    // return result length\n    return len as c_int;\n}\n</code></pre>\n\n<p>It would be nice to have somewhat that actually returns a value, rather than writing into mutable argument.</p>\n"}, {"tags": ["function", "lambda", "closures", "rust", "anonymous-function"], "answers": [{"comments": [{"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455430122, "post_id": 35388899, "comment_id": 58481863, "body": "That&#39;s too bad, because a function that doesn&#39;t close over anything has a named type and can be used in a collection, whereas a closure cannot for obvious reasons."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455432854, "post_id": 35388899, "comment_id": 58482326, "body": "@CamdenNarzt are you trying to create a collection of functions with different types? Maybe if you expanded a bit on your scenario there might be an alternative"}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1455433604, "post_id": 35388899, "comment_id": 58482486, "body": "Well I&#39;m trying to decide what to do with a collection of functions with different types in another unrelated section of code, but in this case I&#39;m trying to hoist a branch out of a loop."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1455559581, "post_id": 35388899, "comment_id": 58533113, "body": "&gt; Closures -are_ the &quot;anonymous function&quot; feature of Rust.  Don&#39;t forget about function pointers, of which this is.  These aren&#39;t closures, they&#39;re function poointers."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 1, "last_activity_date": 1455429878, "creation_date": 1455429878, "answer_id": 35388899, "question_id": 35388729, "link": "https://stackoverflow.com/questions/35388729/can-i-have-an-anonymous-function-that-isnt-typed-as-a-closure-in-rust/35388899#35388899", "title": "Can I have an anonymous function that isn&#39;t typed as a closure in Rust?", "body": "<p>No.</p>\n\n<p>Closures <em>are</em> the \"anonymous function\" feature of Rust.</p>\n\n<p>That said, you can <em>slightly</em> reduce the redundancy in what you have:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let a: fn(_) -&gt; _ = { fn anon(_: &amp;Mask) -&gt; bool { true }; anon };\n</code></pre>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 191, "favorite_count": 0, "accepted_answer_id": 35388899, "answer_count": 1, "score": 0, "last_activity_date": 1455429878, "creation_date": 1455428267, "question_id": 35388729, "link": "https://stackoverflow.com/questions/35388729/can-i-have-an-anonymous-function-that-isnt-typed-as-a-closure-in-rust", "title": "Can I have an anonymous function that isn&#39;t typed as a closure in Rust?", "body": "<p>I'm using 1.6.0 (stable), but any future/nightly feature that enables this or that I can watch/track is cool too.</p>\n\n<p>what I'd like in theory (simplified for brevity):</p>\n\n<pre><code>let a:fn(&amp;lib_plotMote::mask::Mask) -&gt; bool = {fn(_)-&gt;true};\n</code></pre>\n\n<p>the closest I've gotten:</p>\n\n<pre><code>let a:fn(&amp;lib_plotMote::mask::Mask) -&gt; bool = { fn anon(_:&amp;Mask)-&gt;bool{true}; anon };\n</code></pre>\n"}, {"tags": ["io", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1455401243, "post_id": 35385703, "comment_id": 58476178, "body": "For some types of text files: <code>f.lines().flat_map(|l| l.chars())</code> ... but this is not really a good solution."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1455424718, "post_id": 35385703, "comment_id": 58481024, "body": "Have you considered just copying the implementation in the meantime? It&#39;s only ~100 lines and means your code will be trivial to upgrade if <code>chars</code>  stabilizes as-is."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463058172, "post_id": 37176860, "comment_id": 61908136, "body": "As a heads-up, it&#39;s generally OK to move useful comments to answers, but if you aren&#39;t really adding to the content, it&#39;s probably <a href=\"http://meta.stackoverflow.com/q/269913/155423\">more acceptable to mark the answer as community wiki</a>."}, {"owner": {"reputation": 1093, "user_id": 3642914, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/034a47abb43659aba14fef3ff0eff17c?s=128&d=identicon&r=PG", "display_name": "Leonora Tindall", "link": "https://stackoverflow.com/users/3642914/leonora-tindall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1463172296, "post_id": 37176860, "comment_id": 61969122, "body": "Sorry! I&#39;ll make sure to do that next time."}], "tags": [], "owner": {"reputation": 1093, "user_id": 3642914, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/034a47abb43659aba14fef3ff0eff17c?s=128&d=identicon&r=PG", "display_name": "Leonora Tindall", "link": "https://stackoverflow.com/users/3642914/leonora-tindall"}, "is_accepted": false, "score": 0, "last_activity_date": 1463024564, "creation_date": 1463024564, "answer_id": 37176860, "question_id": 35385703, "link": "https://stackoverflow.com/questions/35385703/read-file-character-by-character-in-rust/37176860#37176860", "title": "Read file character-by-character in Rust", "body": "<p>There are two solutions that make sense here. </p>\n\n<p>First, you could copy the implementation of <code>Read::chars()</code> and use it; that would make it completely trivial to move your code over to the standard library implementation if/when it stabilizes. </p>\n\n<p>On the other hand, you could simply iterate line by line (using <code>f.lines()</code>) and then use <code>line.chars()</code> on each line to get the chars. This is a little more hacky, but it will definitely work.</p>\n\n<p>If you only wanted one loop, you could use <code>flat_map()</code> with a lambda like <code>|line| line.chars()</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 1362, "user_id": 1810962, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/4MfRM.jpg?s=128&g=1", "display_name": "joseph", "link": "https://stackoverflow.com/users/1810962/joseph"}, "edited": false, "score": 0, "creation_date": 1613405831, "post_id": 37189758, "comment_id": 117059171, "body": "Where can I find the old Read::chars() implementation?"}, {"owner": {"reputation": 1362, "user_id": 1810962, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/4MfRM.jpg?s=128&g=1", "display_name": "joseph", "link": "https://stackoverflow.com/users/1810962/joseph"}, "edited": false, "score": 0, "creation_date": 1613406307, "post_id": 37189758, "comment_id": 117059406, "body": "For now I&#39;ve settled on this crate: <a href=\"https://crates.io/crates/utf8-chars\" rel=\"nofollow noreferrer\">crates.io/crates/utf8-chars</a>"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 11, "last_activity_date": 1463062858, "creation_date": 1463062858, "answer_id": 37189758, "question_id": 35385703, "link": "https://stackoverflow.com/questions/35385703/read-file-character-by-character-in-rust/37189758#37189758", "title": "Read file character-by-character in Rust", "body": "<p>Let's compare 4 approaches.</p>\n\n<p><strong>1. <code>Read::chars</code></strong></p>\n\n<p>You could copy <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Read.html#method.chars\" rel=\"noreferrer\"><code>Read::chars</code></a> implementation, but it is marked unstable with</p>\n\n<blockquote>\n  <p>the semantics of a partial read/write of where errors happen is currently unclear and may change</p>\n</blockquote>\n\n<p>so some care must be taken. Anyway, this seems to be the best approach.</p>\n\n<p><strong>2. <code>flat_map</code></strong></p>\n\n<p>The <code>flat_map</code> alternative does not compile:</p>\n\n<pre><code>use std::io::{BufRead, BufReader};\nuse std::fs::File;\n\npub fn main() {\n    let mut f = BufReader::new(File::open(\"input.txt\").expect(\"open failed\"));\n\n    for c in f.lines().flat_map(|l| l.expect(\"lines failed\").chars()) {\n        println!(\"Character: {}\", c);\n    }\n}\n</code></pre>\n\n<p>The problems is that <code>chars</code> borrows from the string, but <code>l.expect(\"lines failed\")</code> lives only inside the closure, so compiler gives the error <code>borrowed value does not live long enough</code>.</p>\n\n<p><strong>3. Nested for</strong></p>\n\n<p>This code</p>\n\n<pre><code>use std::io::{BufRead, BufReader};\nuse std::fs::File;\n\npub fn main() {\n    let mut f = BufReader::new(File::open(\"input.txt\").expect(\"open failed\"));\n\n    for line in f.lines() {\n        for c in line.expect(\"lines failed\").chars() {\n            println!(\"Character: {}\", c);\n        }\n    }\n}\n</code></pre>\n\n<p>works, but it keeps allocation a string for each line. Besides, if there is no line break on the input file, the whole file would be load to the memory.</p>\n\n<p><strong>4. <code>BufRead::read_until</code></strong></p>\n\n<p>A memory efficient alternative to approach 3 is to use <code>Read::read_until</code>, and use a single string to read each line: </p>\n\n<pre><code>use std::io::{BufRead, BufReader};\nuse std::fs::File;\n\npub fn main() {\n    let mut f = BufReader::new(File::open(\"input.txt\").expect(\"open failed\"));\n\n    let mut buf = Vec::&lt;u8&gt;::new();\n    while f.read_until(b'\\n', &amp;mut buf).expect(\"read_until failed\") != 0 {\n        // this moves the ownership of the read data to s\n        // there is no allocation\n        let s = String::from_utf8(buf).expect(\"from_utf8 failed\");\n        for c in s.chars() {\n            println!(\"Character: {}\", c);\n        }\n        // this returns the ownership of the read data to buf\n        // there is no allocation\n        buf = s.into_bytes();\n        buf.clear();\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1362, "user_id": 1810962, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/4MfRM.jpg?s=128&g=1", "display_name": "joseph", "link": "https://stackoverflow.com/users/1810962/joseph"}, "is_accepted": false, "score": 1, "last_activity_date": 1613409344, "last_edit_date": 1613409344, "creation_date": 1613406837, "answer_id": 66211843, "question_id": 35385703, "link": "https://stackoverflow.com/questions/35385703/read-file-character-by-character-in-rust/66211843#66211843", "title": "Read file character-by-character in Rust", "body": "<p>I cannot use <code>lines()</code> because my file could be a single line that is gigabytes in size. This an improvement on <a href=\"https://stackoverflow.com/a/37189758/155423\">@malbarbo's recommendation</a> of copying  <code>Read::chars</code> from the an old version of Rust. The <a href=\"https://crates.io/crates/utf8-chars\" rel=\"nofollow noreferrer\">utf8-chars crate</a> already adds <code>.chars()</code> to <code>BufRead</code> for you.</p>\n<p>Inspecting their <a href=\"https://github.com/A1-Triard/utf8-chars/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">repository</a>, it doesn't look like they load more than 4 bytes at a time.</p>\n<p>Your code will look the same as it did before Rust removed <code>Read::chars</code>:</p>\n<pre><code>use std::io::stdin;\nuse utf8_chars::BufReadCharsExt;\n\nfn main() {\n    for c in stdin().lock().chars().map(|x| x.unwrap()) {\n        println!(&quot;{}&quot;, c);\n    }\n}\n</code></pre>\n<p>Add the following to your Cargo.toml:</p>\n<pre><code>[dependencies]\nutf8-chars = &quot;1.0.0&quot;\n</code></pre>\n"}], "owner": {"reputation": 1137, "user_id": 595228, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/c10759c95ccd09685b5e4cc9fdfee1d8?s=128&d=identicon&r=PG", "display_name": "Tim McLean", "link": "https://stackoverflow.com/users/595228/tim-mclean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7101, "favorite_count": 2, "accepted_answer_id": 37189758, "answer_count": 3, "score": 18, "last_activity_date": 1613409344, "creation_date": 1455400068, "last_edit_date": 1455452522, "question_id": 35385703, "link": "https://stackoverflow.com/questions/35385703/read-file-character-by-character-in-rust", "title": "Read file character-by-character in Rust", "body": "<p>Is there an idiomatic way to process a file one character at a time in Rust?</p>\n\n<p>This seems to be roughly what I'm after:</p>\n\n<pre><code>let mut f = io::BufReader::new(try!(fs::File::open(\"input.txt\")));\n\nfor c in f.chars() {\n    println!(\"Character: {}\", c.unwrap());\n}\n</code></pre>\n\n<p>But <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.chars\"><code>Read::chars</code></a> is still unstable as of Rust v1.6.0.</p>\n\n<p>I considered using <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\"><code>Read::read_to_string</code></a>, but the file may be large and I don't want to read it all into memory.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1455374241, "last_edit_date": 1455374241, "creation_date": 1455358524, "answer_id": 35378606, "question_id": 35378474, "link": "https://stackoverflow.com/questions/35378474/clonable-iterator-trait-object/35378606#35378606", "title": "Clonable iterator trait object", "body": "<p>Do you need dynamic dispatch? If not, you should use generic parameters instead of trait objects -- it doesn't necessarily complicate the definition. Try this for example:</p>\n\n<pre><code>pub struct UseClonableIterator&lt;I: Iterator + Clone&gt; {\n    it: I\n}\n</code></pre>\n\n<p>Here you save the object that implements <code>Iterator</code> and <code>Clone</code> within your type. If you just want to have a reference to it, this is of course possible, too:</p>\n\n<pre><code>pub struct UseClonableIterator2&lt;'a, I: Iterator + Clone + 'a&gt; {\n    it: &amp;'a I\n}\n</code></pre>\n\n<p>Note that in both examples we use static dispatch and monomorphization. This usually results in better performance. </p>\n\n<p>However, this is not always possible -- sometimes dynamic dispatch with trait objects (like you tried to implement it) is needed. In that case you can only solve your problem by restructuring your code, since Rust does not allow trait objects of multiple traits yet. </p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 1, "last_activity_date": 1616964925, "last_edit_date": 1616964925, "creation_date": 1528647294, "answer_id": 50785654, "question_id": 35378474, "link": "https://stackoverflow.com/questions/35378474/clonable-iterator-trait-object/50785654#50785654", "title": "Clonable iterator trait object", "body": "<p>If you need the iterator to be dynamically dispatched, meaning the <code>Iterator</code> implementation type cannot be a type parameter of <code>UseClonableIterator</code>, then I would solve this as follows using my <a href=\"https://github.com/dtolnay/dyn-clone\" rel=\"nofollow noreferrer\"><strong><code>dyn-clone</code></strong></a> crate.</p>\n<hr />\n<pre><code>use dyn_clone::{clone_trait_object, DynClone};\n\ntrait ClonableIterator: Iterator + DynClone {}\n\nimpl&lt;I: Iterator + DynClone&gt; ClonableIterator for I {}\n\nclone_trait_object!(&lt;T&gt; ClonableIterator&lt;Item = T&gt;);\n\n#[derive(Clone)]\nstruct UseClonableIterator&lt;T&gt; {\n    it: Box&lt;dyn ClonableIterator&lt;Item = T&gt;&gt;,\n}\n\nfn main() {\n    let thing1 = UseClonableIterator {\n        it: Box::new(vec![1, 2, 3].into_iter()),\n    };\n\n    let thing2 = thing1.clone();\n\n    // prints 1 2 3 from thing1's iterator\n    for i in thing1.it {\n        println!(&quot;{}&quot;, i);\n    }\n\n    // prints 1 2 3 from thing2's iterator\n    for i in thing2.it {\n        println!(&quot;{}&quot;, i);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 349, "favorite_count": 0, "accepted_answer_id": 35378606, "answer_count": 2, "score": 4, "last_activity_date": 1616964925, "creation_date": 1455357663, "question_id": 35378474, "link": "https://stackoverflow.com/questions/35378474/clonable-iterator-trait-object", "title": "Clonable iterator trait object", "body": "<p>I'm trying to define a struct with a clonable iterator object. So far, I've reached to:</p>\n\n<pre><code>pub struct UseClonableIterator2&lt;'a,T:'a&gt; {\n    it: &amp;'a (Iterator&lt;Item=T&gt; + Clone)\n}\n</code></pre>\n\n<p>Which does not compile because <code>Clone</code> is not a \"builtin trait\":</p>\n\n<pre><code>x.rs:2:33: 2:38 error: only the builtin traits can be used as closure or object bounds [E0225]\nx.rs:2     it: &amp;'a (Iterator&lt;Item=T&gt; + Clone)\n                                       ^~~~~           \nx.rs:2:33: 2:38 help: run `rustc --explain E0225` to see a detailed explanation\n</code></pre>\n\n<p>One option might be to add another type parameter for the Iterator, but this complicates definitions and I'd rather avoid it.</p>\n"}, {"tags": ["tdd", "rust"], "comments": [{"owner": {"reputation": 864, "user_id": 146850, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c5fbb79fc57057d11be9f3c6da1512b?s=128&d=identicon&r=PG", "display_name": "Artem Govorov", "link": "https://stackoverflow.com/users/146850/artem-govorov"}, "edited": false, "score": 0, "creation_date": 1473506708, "post_id": 35377930, "comment_id": 66175093, "body": "Quick note: wallaby.js doesn&#39;t actually need you to save files, it runs tests as you type code."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1455356607, "last_edit_date": 1455356607, "creation_date": 1455355293, "answer_id": 35378156, "question_id": 35377930, "link": "https://stackoverflow.com/questions/35377930/continuous-test-driven-development-for-rust/35378156#35378156", "title": "Continuous test-driven development for Rust", "body": "<p>You can use <a href=\"https://github.com/passcod/cargo-watch\" rel=\"noreferrer\"><code>cargo-watch</code></a>.</p>\n\n<ol>\n<li>Install it by running <code>$ cargo install cargo-watch</code></li>\n<li>In your project directory run <code>$ cargo watch</code> (or <code>$ cargo watch test</code> to be specific)</li>\n</ol>\n\n<hr>\n\n<p>However, there are some differences to JS and Ruby: Rust is a compiled language and the compilation step takes some time. So you cannot expect immediate feedback, like you get from interpreted languages.</p>\n"}], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 678, "favorite_count": 1, "accepted_answer_id": 35378156, "answer_count": 1, "score": 6, "last_activity_date": 1455356607, "creation_date": 1455353643, "question_id": 35377930, "link": "https://stackoverflow.com/questions/35377930/continuous-test-driven-development-for-rust", "title": "Continuous test-driven development for Rust", "body": "<p>Ruby has <a href=\"https://github.com/grosser/autotest\" rel=\"noreferrer\">Autotest</a>, JavaScript has <a href=\"http://wallabyjs.com/\" rel=\"noreferrer\">Wallabyjs</a>, both run test and present the results automatically on every save.</p>\n\n<p>Is there any <a href=\"https://en.wikipedia.org/wiki/Continuous_test-driven_development\" rel=\"noreferrer\">Continuous test-driven development</a> system available for rust?</p>\n\n<p>Otherwise, what is the reason for the absence? Is there a technical reason, why such a system makes no sense with rust, or did simply no one care about writing one, yet?</p>\n"}, {"tags": ["html", "rust"], "comments": [{"owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 1, "creation_date": 1455354850, "post_id": 35376961, "comment_id": 58461439, "body": "Did you have a look at the <a href=\"https://github.com/servo/html5ever/blob/master/examples/print-rcdom.rs#L67\" rel=\"nofollow noreferrer\">main function</a> of the official example?"}, {"owner": {"reputation": 305, "user_id": 827024, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/124f73bb21e1b10a7fb1c2bbced2be11?s=128&d=identicon&r=PG", "display_name": "Vignesh", "link": "https://stackoverflow.com/users/827024/vignesh"}, "reply_to_user": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 0, "creation_date": 1455376963, "post_id": 35376961, "comment_id": 58468097, "body": "@michas I didn&#39;t see that till now. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 501, "user_id": 1299238, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/d59c7d98503b8b96cbc3e064b868e171?s=128&d=identicon&r=PG", "display_name": "Sam Saint-Pettersen", "link": "https://stackoverflow.com/users/1299238/sam-saint-pettersen"}, "edited": false, "score": 1, "creation_date": 1485353518, "post_id": 35380315, "comment_id": 70891180, "body": "This works for 0.2.2 as of 01/25/2017. But newer versions the API has changed I think."}], "tags": [], "owner": {"reputation": 399, "user_id": 2139291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8E5jB.jpg?s=128&g=1", "display_name": "creativcoder", "link": "https://stackoverflow.com/users/2139291/creativcoder"}, "is_accepted": true, "score": 16, "last_activity_date": 1455378137, "last_edit_date": 1455378137, "creation_date": 1455369135, "answer_id": 35380315, "question_id": 35376961, "link": "https://stackoverflow.com/questions/35376961/is-there-an-alternative-library-to-html5ever-that-takes-a-string-and-returns-a-q/35380315#35380315", "title": "Is there an alternative library to html5ever that takes a string and returns a queryable object?", "body": "<p>You can use the <a href=\"https://crates.io/crates/select\" rel=\"noreferrer\">select</a> crate, which is basically a wrapper over the html5ever, but gives a nicer api.</p>\n\n<p>For example:</p>\n\n<pre><code>use select::document::Document;\nuse select::predicate::Name;\n\nfor i in Document::from_str(html_src_string).find(Name(\"article\")).iter() {\n    println!(\"{:?}\",i.text() );       //prints text content of all articles\n};\n</code></pre>\n\n<p><a href=\"https://github.com/utkarshkukreti/select.rs\" rel=\"noreferrer\">select.rs</a> repository has more elaborate examples.</p>\n"}], "owner": {"reputation": 305, "user_id": 827024, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/124f73bb21e1b10a7fb1c2bbced2be11?s=128&d=identicon&r=PG", "display_name": "Vignesh", "link": "https://stackoverflow.com/users/827024/vignesh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3882, "favorite_count": 1, "closed_date": 1486837245, "accepted_answer_id": 35380315, "answer_count": 1, "score": 8, "last_activity_date": 1486825756, "creation_date": 1455345965, "last_edit_date": 1486825756, "question_id": 35376961, "link": "https://stackoverflow.com/questions/35376961/is-there-an-alternative-library-to-html5ever-that-takes-a-string-and-returns-a-q", "closed_reason": "Not suitable for this site", "title": "Is there an alternative library to html5ever that takes a string and returns a queryable object?", "body": "<p>I am trying to parse HTML in Rust. The one library that seems to do this is <code>html5ever</code>. I can't find any simple way to make it take a string and return a queryable object.</p>\n\n<p>Is there an alternative library that I can use that takes a string and returns an object that I can query on?</p>\n\n<p>I am trying to do something like web scraping here. </p>\n\n<p>I am a complete Rust newbie.</p>\n"}, {"tags": ["sorting", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1455376084, "post_id": 35376286, "comment_id": 58467832, "body": "A <i>queue</i> is <a href=\"http://www.merriam-webster.com/dictionary/queue\" rel=\"nofollow noreferrer\">&quot;a line of people who are waiting for something&quot;</a>, a <i>cue</i> is a <a href=\"http://www.merriam-webster.com/dictionary/cue\" rel=\"nofollow noreferrer\">&quot;a signal &#91;...&#93; to a performer to begin&quot;</a>. <i>Que</i> is not a word AFAIK."}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1455391609, "post_id": 35378203, "comment_id": 58473138, "body": "It&#39;s worth noting that in some situations <code>&amp;mut T</code> will get auto-reborrowed, and so not count as a move. Knowing which is which seems to be a bit of a dark art."}, {"owner": {"reputation": 156, "user_id": 5615967, "user_type": "registered", "accept_rate": 92, "profile_image": "https://lh3.googleusercontent.com/-k7tbrpdLkTo/AAAAAAAAAAI/AAAAAAAAACQ/zwe5HlAFMV0/photo.jpg?sz=128", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/5615967/sebastian"}, "edited": false, "score": 0, "creation_date": 1455402647, "post_id": 35378203, "comment_id": 58476609, "body": "It seems that in my case the answer was to make it show.iter() instead as doing &amp;show cased a type conflict"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 156, "user_id": 5615967, "user_type": "registered", "accept_rate": 92, "profile_image": "https://lh3.googleusercontent.com/-k7tbrpdLkTo/AAAAAAAAAAI/AAAAAAAAACQ/zwe5HlAFMV0/photo.jpg?sz=128", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/5615967/sebastian"}, "edited": false, "score": 1, "creation_date": 1455402733, "post_id": 35378203, "comment_id": 58476627, "body": "@SebastianMalton are you sure? <code>&amp;show</code> and <code>show.iter()</code> should be doing the exact same thing in your situation..."}, {"owner": {"reputation": 156, "user_id": 5615967, "user_type": "registered", "accept_rate": 92, "profile_image": "https://lh3.googleusercontent.com/-k7tbrpdLkTo/AAAAAAAAAAI/AAAAAAAAACQ/zwe5HlAFMV0/photo.jpg?sz=128", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/5615967/sebastian"}, "edited": false, "score": 0, "creation_date": 1458223026, "post_id": 35378203, "comment_id": 59771878, "body": "Yup, I can post the compiler log later"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1455356036, "last_edit_date": 1455356036, "creation_date": 1455355606, "answer_id": 35378203, "question_id": 35376286, "link": "https://stackoverflow.com/questions/35376286/using-moved-values-in-a-function/35378203#35378203", "title": "Using &quot;moved&quot; values in a function", "body": "<h2>Solution</h2>\n\n<p>Your problem is in this line:</p>\n\n<pre><code>for l in show {\n    ...\n}\n</code></pre>\n\n<p>This consumes the vector <code>show</code>. If you want to just borrow it's elements, you should write:</p>\n\n<pre><code>for l in &amp;show {\n    ...\n}\n</code></pre>\n\n<p>If you want to borrow them mutably, write <code>for l in &amp;mut show</code>.</p>\n\n<h2>Explanation</h2>\n\n<p>The Rust for loop expects a type that implements <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow\"><code>IntoIterator</code></a>. First thing to note: <code>IntoIterator</code> is implemented for every <code>Iterator</code>. See:</p>\n\n<pre><code>impl&lt;I&gt; IntoIterator for I where I: Iterator\n</code></pre>\n\n<p>Now lets search for the <code>Vec</code> impls:</p>\n\n<pre><code>impl&lt;T&gt; IntoIterator for Vec&lt;T&gt; {\n    type Item = T\n    ...\n}\n\nimpl&lt;'a, T&gt; IntoIterator for &amp;'a Vec&lt;T&gt; {\n    type Item = &amp;'a T\n    ...\n}\n\nimpl&lt;'a, T&gt; IntoIterator for &amp;'a mut Vec&lt;T&gt; {\n    type Item = &amp;'a mut T\n    ...\n}\n</code></pre>\n\n<p>Here you can see that it's implemented for the <code>Vec</code> directly, but also for references to it. I hope these three impl blocks speak for themselves.</p>\n"}], "owner": {"reputation": 156, "user_id": 5615967, "user_type": "registered", "accept_rate": 92, "profile_image": "https://lh3.googleusercontent.com/-k7tbrpdLkTo/AAAAAAAAAAI/AAAAAAAAACQ/zwe5HlAFMV0/photo.jpg?sz=128", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/5615967/sebastian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "accepted_answer_id": 35378203, "answer_count": 1, "score": 0, "last_activity_date": 1455376150, "creation_date": 1455339681, "last_edit_date": 1455376150, "question_id": 35376286, "link": "https://stackoverflow.com/questions/35376286/using-moved-values-in-a-function", "title": "Using &quot;moved&quot; values in a function", "body": "<p>I want to learn Rust and am making a small program to deal with sound ques. I have a function with this signature:</p>\n\n<pre><code>fn edit_show(mut show: &amp;mut Vec&lt;Que&gt;) {\n    show.sort_by(|a, b| que_ordering(&amp;a.id, &amp;b.id));\n    loop {\n        println!(\"Current ques\");\n        for l in show {\n            println!(\"{}\", que_to_line(&amp;l));\n        }\n    }\n}\n</code></pre>\n\n<p>I get an error:</p>\n\n<blockquote>\n  <p>use of moved value: 'show'</p>\n</blockquote>\n\n<p>I cannot find anything on how to fix this. This seems like an odd error for sort since (I assume) if I was to do this in the main function where I pass in the value which seems quite useless.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1455306044, "post_id": 35370584, "comment_id": 58447765, "body": "Sure, I&#39;ll get right on it"}], "answers": [{"comments": [{"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1455308681, "post_id": 35371467, "comment_id": 58449053, "body": "Oh, I can&#39;t believe it was something so trivial. Thanks for pointing it out + fixing the other bugs. The compiler hadn&#39;t gotten to the end so I didn&#39;t pay attention to them!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1455308204, "creation_date": 1455308204, "answer_id": 35371467, "question_id": 35370584, "link": "https://stackoverflow.com/questions/35370584/the-trait-rustc-serializejsontojson-is-not-implemented-for-the-type-json/35371467#35371467", "title": "the trait `rustc_serialize::json::ToJson` is not implemented for the type `Json`", "body": "<p>The problem occurs here:</p>\n\n<pre><code>impl&lt;Json&gt; ToApiResult&lt;Json&gt; for Result&lt;Option&lt;String&gt;, String&gt;\n//   ^^^^\n</code></pre>\n\n<p>Specifically, this defines a new generic type parameter called <code>Json</code>. This is <strong>not</strong> the <code>rustc_serialize::json::Json</code> enum.</p>\n\n<p>Beyond that, you have some other small errors that prevent compilation. Once the main error is cleared up, you would have to address:</p>\n\n<ol>\n<li>Typos (<code>Error</code> vs <code>Err</code>)</li>\n<li>Using a <code>&amp;str</code> as opposed to a <code>String</code>.</li>\n<li>Printing a non-<code>Display</code> type with <code>{}</code>.</li>\n<li>Trying to move out of borrowed values.</li>\n</ol>\n\n<p>All the issues fixed, the code looks like:</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json::{Json, ToJson};\n\n#[derive(Debug)]\nenum ApiResult&lt;T: Sized + ToJson&gt; {\n    Ok(T),\n    Err(T),\n}\n\ntrait ToApiResult&lt;T: Sized + ToJson&gt; {\n    fn to_api_result(&amp;self) -&gt; ApiResult&lt;T&gt;;\n}\n\nimpl ToApiResult&lt;Json&gt; for Result&lt;Option&lt;String&gt;, String&gt; {\n    fn to_api_result(&amp;self) -&gt; ApiResult&lt;Json&gt; {\n        match *self {\n            Ok(Some(ref text)) =&gt; ApiResult::Ok(text.to_json()),\n            Ok(None) =&gt; ApiResult::Err(().to_json()),\n            Err(ref e) =&gt; ApiResult::Err(e.to_json()),\n        }\n    }\n}\n\nfn main(){\n    let r = Result::Ok(Some(\"hello\".to_string()));\n    print!(\"{:?}\", r.to_api_result());\n}\n</code></pre>\n"}], "owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 240, "favorite_count": 0, "accepted_answer_id": 35371467, "answer_count": 1, "score": 2, "last_activity_date": 1455308264, "creation_date": 1455304802, "last_edit_date": 1455308264, "question_id": 35370584, "link": "https://stackoverflow.com/questions/35370584/the-trait-rustc-serializejsontojson-is-not-implemented-for-the-type-json", "title": "the trait `rustc_serialize::json::ToJson` is not implemented for the type `Json`", "body": "<p>I'm using Nickel.rs and MongoDB to create a REST API. I've defined an <code>enum ApiResult&lt;T&gt;</code> and I've implemented the <code>nickel::Responder</code> trait for it. <code>ApiResult&lt;T&gt;</code> can be generated from any type that implements the trait <code>ToApiResult</code>. I'm trying to implement this trait for <code>mongodb::error::Result&lt;Option&lt;bson::Document&gt;&gt;</code> but I get an error:</p>\n\n<blockquote>\n  <p>the trait <code>rustc_serialize::json::ToJson</code> is not implemented for the\n  type <code>Json</code></p>\n</blockquote>\n\n<p>I checked the documentation and can see that <code>ToJson</code> has been implemented for <code>Json</code>:</p>\n\n<pre><code>impl ToJson for Json {\n    fn to_json(&amp;self) -&gt; Json { self.clone() }\n}\n</code></pre>\n\n<p>So what is causing the error? Here is an MCVE that reproduces the issue:</p>\n\n<pre><code>    // rustc_serialize\nextern crate rustc_serialize;\nuse rustc_serialize::json::{self,Json, ToJson};\nuse std::{result,error};\n\nenum ApiResult&lt;T : Sized + ToJson&gt;{\n    Ok(T),\n    Err(T)\n}\n\ntrait ToApiResult&lt;T: Sized + ToJson&gt;{\n    fn to_api_result(&amp;self)-&gt;ApiResult&lt;T&gt;;\n}\n\nimpl&lt;Json&gt; ToApiResult&lt;Json&gt; for Result&lt;Option&lt;String&gt;,String&gt; {\n\n    fn to_api_result(&amp;self)-&gt;ApiResult&lt;Json&gt;{\n\n        match *self {\n            Ok(Some(text))=&gt;{\n                ApiResult::Ok(text.to_json())\n            },\n            Ok(None)=&gt;{\n                ApiResult::Error(().to_json())\n            },\n            Err(e)=&gt;{\n                ApiResult::Error(e.to_json())\n            }\n\n        }\n    }\n\n}\n\nfn main(){\n    let r = Result::Ok(Some(\"hello\"));\n    print!(\"{}\",r.to_api_result());\n}\n</code></pre>\n"}, {"tags": ["mongodb", "rust", "nickel"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1455283804, "post_id": 35363810, "comment_id": 58433518, "body": "Where does the <code>Responder</code> trait come from?"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1455286018, "post_id": 35363810, "comment_id": 58434950, "body": "&quot;either the trait or the type you\u2019re implementing it for must be defined [...]  in the same crate as the impl&quot; <a href=\"https://doc.rust-lang.org/book/traits.html#rules-for-implementing-traits\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}, {"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1455286171, "post_id": 35363810, "comment_id": 58435053, "body": "The Responder trait comes from nickel: <a href=\"http://docs.nickel.rs/nickel/trait.Responder.html\" rel=\"nofollow noreferrer\">docs.nickel.rs/nickel/trait.Responder.html</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1455288183, "post_id": 35363810, "comment_id": 58436472, "body": "@starblue: That&#39;s an answer. You might also expand it to explain tuple struct which can be used to wrap a type in a local one and thus implement traits with it."}], "answers": [{"comments": [{"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1455291561, "post_id": 35366213, "comment_id": 58438905, "body": "After reading your comment I understood what the explanation meant and I did pretty much exactly what you describe in your answer. Thanks a lot!"}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 4, "last_activity_date": 1455310146, "last_edit_date": 1455310146, "creation_date": 1455290718, "answer_id": 35366213, "question_id": 35363810, "link": "https://stackoverflow.com/questions/35363810/error-type-parameter-d-must-be-used-as-the-type-parameter-for-some-local-type/35366213#35366213", "title": "error: type parameter `D` must be used as the type parameter for some local type", "body": "<p>When you implement a trait then <a href=\"https://doc.rust-lang.org/book/traits.html#rules-for-implementing-traits\" rel=\"nofollow\">either the trait or the type you are implementing it for must be defined in the same crate</a>.  In you example that is not the case: the trait <code>Responder</code> is defined by <code>nickel</code>, and <code>Result</code> is defined by <code>mongodb</code>.</p>\n\n<p>The common way to work around this is to define your own type, by wrapping the desired type into a <a href=\"https://doc.rust-lang.org/book/structs.html#tuple-structs\" rel=\"nofollow\">tuple struct</a> with a single component (the so-called <em>newtype pattern</em>):</p>\n\n<pre><code>struct Result(mongodb::error::Result&lt;Option&lt;Document&gt;&gt;);\n\nimpl Responder for Result {\n    ...\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1455551082, "creation_date": 1455551082, "answer_id": 35413443, "question_id": 35363810, "link": "https://stackoverflow.com/questions/35363810/error-type-parameter-d-must-be-used-as-the-type-parameter-for-some-local-type/35413443#35413443", "title": "error: type parameter `D` must be used as the type parameter for some local type", "body": "<p>Based on starblue's answer, I replaced <code>ApiResponse</code> and <code>ApiError</code> with a tuple struct and refactored my code as follows:</p>\n\n<pre><code>struct ApiResponse&lt;T&gt;(T);\n\nimpl&lt;D&gt; Responder&lt;D&gt; for ApiResponse&lt;Result&lt;Option&lt;Document&gt;&gt;&gt; {\n\n    fn respond&lt;'a&gt;(self, mut response: Response&lt;'a, D&gt;) -&gt; MiddlewareResult&lt;'a, D&gt; {\n\n        let mut d = BTreeMap::new();\n        match self.0 {\n            Ok(Some(doc))=&gt;{\n                d.insert(\"data\".to_string(),Bson::Document(doc).to_json());\n            },\n            Ok(None)=&gt;{\n                response.set(StatusCode::NotFound);\n                d.insert(\"error\".to_string(),\"Not Found\".to_json());\n            },\n            Err(e)=&gt;{\n                response.set(StatusCode::InternalServerError);\n                d.insert(\"error\".to_string(),format!(\"{}\",e).to_json());\n            }\n\n        }\n        response.set(MediaType::Json);\n        response.send(Json::Object(d))\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1315, "favorite_count": 0, "accepted_answer_id": 35366213, "answer_count": 2, "score": 4, "last_activity_date": 1455551082, "creation_date": 1455283599, "last_edit_date": 1455551056, "question_id": 35363810, "link": "https://stackoverflow.com/questions/35363810/error-type-parameter-d-must-be-used-as-the-type-parameter-for-some-local-type", "title": "error: type parameter `D` must be used as the type parameter for some local type", "body": "<p>I'm using Nickel.rs with MongoDB to build a RESTful api.\nI'd like to implement a generic <code>Responder</code> for the type <code>mongodb::error::Result&lt;Option&lt;bson::Document&gt;&gt;</code>.</p>\n\n<p>This is the implementation I wrote based on the examples I found for <code>Responder</code>:</p>\n\n<pre><code>impl&lt;D&gt; Responder&lt;D&gt; for Result&lt;Option&lt;Document&gt;&gt; {\n\n    fn respond&lt;'a&gt;(self, mut response: Response&lt;'a, D&gt;) -&gt; MiddlewareResult&lt;'a, D&gt; {\n        response.set(MediaType::Json);\n\n        match self {\n            Ok(Some(doc))=&gt;{\n                ApiResponse{data: Bson::Document(doc).to_json()}.to_json()\n            },\n            Ok(None)=&gt;{\n                response.set(StatusCode::NotFound);\n                ApiError{error: \"Not found\".to_string()}.to_json()\n            },\n            Err(e)=&gt;{\n                response.set(StatusCode::InternalServerError);\n                ApiError{error: format!(\"{}\",e)}.to_json()\n            }\n\n        }\n    }\n}\n</code></pre>\n\n<p>and I'm getting the following error:</p>\n\n<blockquote>\n  <p>error: type parameter <code>D</code> must be used as the type parameter for some\n  local type (e.g. <code>MyStruct&lt;T&gt;</code>); only traits defined in the current\n  crate can be implemented for a type parameter [E0210]</p>\n</blockquote>\n\n<p>I ran <code>rustc --explain E0210</code> for an explanation and if my understanding is correct, I need to provide a trait <code>D</code> as a type argument to <code>impl&lt;D&gt;</code>, but I don't understand which trait to provide. </p>\n\n<p>I tried <code>impl&lt;D: =()&gt;</code> but that produced the same error.</p>\n"}, {"tags": ["iterator", "rust", "move-semantics", "ownership-semantics"], "answers": [{"comments": [{"owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 0, "creation_date": 1455268230, "post_id": 35358575, "comment_id": 58423306, "body": "Thank you very very much kind sir!"}, {"owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 1, "creation_date": 1455268300, "post_id": 35358575, "comment_id": 58423340, "body": "BTW how did you know that the problem was that the iter was going out of scope in the while loop? What gave it away? What should I have been looking for?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 2, "creation_date": 1455268445, "post_id": 35358575, "comment_id": 58423448, "body": "<code>use of moved value: &#39;iter&#39;.</code> means that the ownership of <code>iter</code> was transferred to something else. &quot;move&quot; in Rust means &quot;transfer ownership&quot;. You&#39;ll get used to it ;)"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 1, "creation_date": 1455282935, "post_id": 35358575, "comment_id": 58432878, "body": "@neektza: The <code>iter</code> didn&#39;t &quot;go out of scope&quot;, though, that&#39;s a different notion. When you try to use an identifier that&#39;s &quot;out of scope&quot;, you get an &quot;unresolved name&quot; error. That&#39;s not what happened here!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1455267985, "creation_date": 1455267985, "answer_id": 35358575, "question_id": 35357871, "link": "https://stackoverflow.com/questions/35357871/can-rust-consume-an-iterator-passed-into-a-function/35358575#35358575", "title": "Can Rust consume an iterator passed into a function?", "body": "<p>The answer is yes, it's done in the <code>FromIterator</code> trait.</p>\n\n<p>What you experience here is much more basic:</p>\n\n<pre><code>fn consume_number(mut iter: std::str::Chars) -&gt; Option&lt;i32&gt; { ... }\n\nwhile let Some(c) = iter.next() {\n    ...\n    match_consume_number(iter)\n    ...\n}\n</code></pre>\n\n<p>When calling <code>match_consume_number</code> you are transferring ownership of the iterator to it. It means that at the next iteration of the loop body, this <code>iter</code> variable is no longer available.</p>\n\n<p>If the iterator is meant to still be usable afterward, you should pass a reference to it:</p>\n\n<pre><code>fn consume_number(iter: &amp;mut std::str::Chars) -&gt; Option&lt;i32&gt; { ... }\n\nwhile let Some(c) = iter.next() {\n    ...\n    match_consume_number(&amp;mut iter)\n    ...\n}\n</code></pre>\n\n<p>You were close!</p>\n"}], "owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1816, "favorite_count": 0, "accepted_answer_id": 35358575, "answer_count": 1, "score": 1, "last_activity_date": 1455267985, "creation_date": 1455265522, "question_id": 35357871, "link": "https://stackoverflow.com/questions/35357871/can-rust-consume-an-iterator-passed-into-a-function", "title": "Can Rust consume an iterator passed into a function?", "body": "<p>I'm trying to implement a simple REPL calculator in Rust and I'm hitting brick walls all over the place. </p>\n\n<p>I'm consuming chars while iterating over a hardcoded string. When I hit a numeric character I want to pass control over to a function that will consume the rest of the number (assuming the number has more than one digit) and return the number, converted to an Integer.</p>\n\n<p>I'm having trouble with passing <code>Chars</code> iterator to a function. The error I'm getting is <code>use of moved value: 'iter'</code>.</p>\n\n<p>I understand that I can't mutate something that I gave to someone else - something that had its ownership moved - but I don't know any other way of doing this, especially since the Chars iterator is non-copyable.</p>\n\n<pre><code>#[derive(Clone, Debug)]\nenum Token {\n    Addition,\n    Substraction,\n    Multiplication,\n    Division,\n    Integer(i32),\n    Error,\n}\n\nfn consume_number(mut iter: std::str::Chars) -&gt; Option&lt;i32&gt; {\n    while let Some(item) = iter.next() {\n        println!(\"{:?}\", item);\n    }\n\n    return Some(1337);\n}\n\nfn tokenize(line: &amp;str) -&gt; Vec&lt;Token&gt; {\n    let mut iter = line.chars();\n    let mut tokens = Vec::new();\n    let mut token;\n\n    while let Some(c) = iter.next() {\n        if c.is_whitespace() { continue };\n\n        if c.is_digit(10) {\n            token = match consume_number(iter) {\n                Some(i32) =&gt; Token::Integer(i32),\n                None =&gt; Token::Error,\n            };\n        } else {\n            token = match c {\n                '+'                    =&gt; Token::Addition,\n                '-'                    =&gt; Token::Substraction,\n                '*'                    =&gt; Token::Multiplication,\n                '/'                    =&gt; Token::Division,\n                _                      =&gt; Token::Error,\n            };\n        };\n        tokens.push(token);\n    }\n    return tokens;\n}\n\n\n\nfn main() {\n    let line = \"631 * 32 + 212 - 15 / 89\";\n    println!(\"{:?}\", tokenize(&amp;line));\n}\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1455266977, "creation_date": 1455266977, "answer_id": 35358284, "question_id": 35354716, "link": "https://stackoverflow.com/questions/35354716/should-cloned-be-before-or-after-filter/35358284#35358284", "title": "Should .cloned() be before or after .filter()", "body": "<p>This is not a matter of style.</p>\n\n<p>The example of <code>inspect</code> is made to show-case <code>inspect</code>, that is all. It uses <code>.cloned</code> in an arguably silly way, but <code>cloned</code> was probably chosen because of its easy to understand semantic so as to create an easy to understand \"complex iterator sequence\".</p>\n\n<hr>\n\n<p>So, <code>.cloned()</code> before or after <code>.filter(...)</code> ? As you mention, unless cloning is necessary for filtering (which would be surprising) the rule of thumb will be to clone after so as to minimize the number of cloned elements.</p>\n\n<p>No style here, just a pragmatic performance assessment.</p>\n"}, {"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1549455731, "post_id": 35370500, "comment_id": 95906841, "body": "I disagree, <code>clone</code> should always be seen as &quot;not cheap&quot;, compiler should do its job and optimize a &quot;useless reference&quot;. If you put <code>cloned()</code> after even if you change your code you will always do the &quot;good thing&quot; but if you put it before you will need to not forget to move <code>cloned()</code> after."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1549464018, "post_id": 35370500, "comment_id": 95911944, "body": "I would agree if you use <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.copied\" rel=\"nofollow noreferrer\"><code>copied()</code></a> where it&#39;s force that the type to implement copy."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1549502160, "post_id": 35370500, "comment_id": 95928624, "body": "@Stargateur I&#39;ve added a note."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 7, "last_activity_date": 1549552343, "last_edit_date": 1549552343, "creation_date": 1455304524, "answer_id": 35370500, "question_id": 35354716, "link": "https://stackoverflow.com/questions/35354716/should-cloned-be-before-or-after-filter/35370500#35370500", "title": "Should .cloned() be before or after .filter()", "body": "<p>This is an alternative to <a href=\"https://stackoverflow.com/a/35358284/155423\">Matthieu M.'s answer</a>.</p>\n\n<p>When you have small, <code>Copy</code> elements, you should <code>Clone</code> them as soon as possible. Cloning is nearly always free in these cases, but I have seen extra indirection confuse the optimizer. When you call <code>iter</code> on a container of integers, <code>cloned</code> should nearly always be the one to follow it unless you can merge it into the next call, eg. by an extra dereference in a call to <code>map</code>.</p>\n\n<p>So in the case given, using <code>cloned</code> early is entirely sensible. It's true that this is a micro-optimization, but it's so easy to do and often makes the types simpler to work with, so I see no downsides to doing it.</p>\n\n<p>In the future, <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.copied\" rel=\"nofollow noreferrer\"><code>copied</code></a> will likely become available as the preferred way to handle this.</p>\n\n<hr>\n\n<p>When working with non-<code>Copy</code> types, where <code>Clone</code> might not be so cheap, delaying cloning is a much better default.</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 335, "favorite_count": 0, "accepted_answer_id": 35358284, "answer_count": 2, "score": 4, "last_activity_date": 1549552343, "creation_date": 1455250431, "question_id": 35354716, "link": "https://stackoverflow.com/questions/35354716/should-cloned-be-before-or-after-filter", "title": "Should .cloned() be before or after .filter()", "body": "<p>Let's say that I have vector and I want just keep the even elements. I would need to used <code>cloned()</code> and <code>filter()</code>. For example:</p>\n\n<pre><code>fn main() {\n    let my_vec: Vec&lt;i32&gt; = vec![1,2,3,4];\n\n    let my_vec_1: Vec&lt;i32&gt; = my_vec.iter().cloned().filter(|&amp;x| x % 2 == 0).collect();\n    println!(\"{:?}\", my_vec_1);\n\n    let my_vec_2: Vec&lt;i32&gt; = my_vec.iter().filter(|&amp;x| x % 2 == 0).cloned().collect();\n    println!(\"{:?}\", my_vec_2);\n\n}\n</code></pre>\n\n<p>Both approaches work. Using <code>cloned()</code> after <code>filter()</code> seems a little bit more efficient. Because then I don't have to convert all elements of the iterator from <code>&amp;T</code> to <code>T</code>, but only the ones that have been filtered. In my example that's half the elements. </p>\n\n<p>However, I seem to see <code>cloned()</code> applied before <code>filter()</code>. Here is one example: <a href=\"https://doc.rust-lang.org/core/iter/trait.Iterator.html#method.inspect\" rel=\"nofollow\">method.inspect</a></p>\n\n<p>I thought that maybe <code>.cloned()</code> has to be used before for types that don't implement <code>Copy</code> trait, but it does not seem to be the case: <a href=\"http://is.gd/QRycon\" rel=\"nofollow\">nested vec example</a>. Also, because filter uses <code>FnMut(&amp;Self::Item)</code>, I don' think that should be a problem.</p>\n\n<p>Are there advantages to using <code>cloned()</code> before <code>filter()</code>? Is this more of a stylistic issue? If so, is there preferred style? </p>\n"}, {"tags": ["github", "rust", "travis-ci"], "answers": [{"comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455259317, "post_id": 35355620, "comment_id": 58419161, "body": "I tried this and it builds and tests, but still does not push documentation to the gh-pages branch. A side note, following the tutorial for creating a gh-pages branch I accidentally deleted my project. I cloned it from Github, but I had to reinitialize the repository and now I can&#39;t push anything."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455259999, "post_id": 35355620, "comment_id": 58419475, "body": "EDIT: I fixed the git issues but now I have to use <code>git push cmaes master</code> and <code>git pull cmaes master</code>, so it complicates things. I had to delete the repository on Github, and from now on I will keep a copy of my projects  somewhere else."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455279128, "post_id": 35355620, "comment_id": 58430450, "body": "@pengowen123, this is all very strange. travis-cargo does not require absolutely anything for you to do with the repository. It should create gh-pages branch automatically. My workflow with all my projects using travis-cargo is absolutely no different from the workflow on other projects. Note that you do not need to keep gh-pages branch locally, unless you want to inspect the generated docs manually for some reason, so it is not mandatory to pull the repository after you push things there."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455325118, "post_id": 35355620, "comment_id": 58455381, "body": "I deleted the gh-pages branch and it did not generate them when I pushed to the master branch. I have the target directory in my .gitignore as well, which might be a problem."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455350445, "post_id": 35355620, "comment_id": 58460366, "body": "Nope, that shouldn&#39;t be a problem. What travis output do you have? If there are problems, it should be visible in the output."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455355124, "post_id": 35355620, "comment_id": 58461507, "body": "I am using your .travis.yml, and travis says passing. I looked through the logs <a href=\"https://travis-ci.org/pengowen123/cmaes\" rel=\"nofollow noreferrer\">here</a>, but there are no errors."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455360794, "post_id": 35355620, "comment_id": 58462924, "body": "@pengowen123 but there <a href=\"https://travis-ci.org/pengowen123/cmaes/jobs/108973629#L194\" rel=\"nofollow noreferrer\"><i>are</i> errors</a>. You should set your GH_TOKEN in order for travis-cargo to work, just as you&#39;d do with the guide you are linking to. I usually do this in travis settings, but lots of examples on the net do this by embedding an encrypted string into <code>.travis.yml</code>. Do either way, and it should work."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1455402875, "post_id": 35355620, "comment_id": 58476662, "body": "I used the travis gem to encrypt my key, and now it works. I did not see any errors because I was looking on the stable branch, should have realized it would only error on beta from the travis-cargo command. Thanks for the help."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1455360977, "last_edit_date": 1455360977, "creation_date": 1455255934, "answer_id": 35355620, "question_id": 35353346, "link": "https://stackoverflow.com/questions/35353346/rustdoc-on-gh-pages-with-travis/35355620#35355620", "title": "Rustdoc on gh-pages with Travis", "body": "<p>It is better to use <a href=\"https://github.com/huonw/travis-cargo\" rel=\"nofollow\">travis-cargo</a>, which is intended to simplify deploying docs and which also has other features. Its readme provides an example of <code>.travis.yml</code> file, although in the simplest form it could look like this:</p>\n\n<pre><code>language: rust\nsudo: false\n\nrust:\n  - nightly\n  - beta\n  - stable\n\nbefore_script:\n  - pip install 'travis-cargo&lt;0.2' --user &amp;&amp; export PATH=$HOME/.local/bin:$PATH\n\nscript:\n  - |\n      travis-cargo build &amp;&amp;\n      travis-cargo test &amp;&amp;\n      travis-cargo --only beta doc\n\nafter_success:\n  - travis-cargo --only beta doc-upload\n\n# needed to forbid travis-cargo to pass `--feature nightly` when building with nightly compiler\nenv:\n  global:\n    - TRAVIS_CARGO_NIGHTLY_FEATURE=\"\"\n</code></pre>\n\n<p>It is very self-descriptive, so it is obvious, for example, what to do if you want to use another Rust release train for building docs.</p>\n\n<p>In order for the above <code>.travis.yml</code> to work, you need to set your <code>GH_TOKEN</code> somehow. There are basically two ways to do it: inside <code>.travis.yml</code> via an encrypted string, or by configuring it in the Travis itself, in project options. I prefer the latter way, so I don't need to install travis command line tool or pollute my <code>.travis.yml</code> (and so the above config file does not contain <code>secure</code> option), but you may choose otherwise.</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 417, "favorite_count": 0, "accepted_answer_id": 35355620, "answer_count": 1, "score": 2, "last_activity_date": 1455360977, "creation_date": 1455240919, "last_edit_date": 1455289017, "question_id": 35353346, "link": "https://stackoverflow.com/questions/35353346/rustdoc-on-gh-pages-with-travis", "title": "Rustdoc on gh-pages with Travis", "body": "<p>I have generated documentation <a href=\"https://github.com/pengowen123/cmaes\" rel=\"nofollow\">for my project</a> with <code>cargo doc</code>, and it is made in the target/doc directory. I want to allow users to view this documentation without a local copy, but I cannot figure out how to push this documentation to the gh-pages branch of the repository. Travis CI would help me automatically do this, but I cannot get it to work either. I followed <a href=\"https://github.com/steveklabnik/automatically_update_github_pages_with_travis_example\" rel=\"nofollow\">this guide</a>, and set up a .travis.yml file and a deploy.sh script. According to the build logs, everything goes fine but the gh-pages branch never gets updated. My operating system is Windows 7.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2366, "user_id": 59210, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/87cbcbf5bbac40ef10a28daec87391d3?s=128&d=identicon&r=PG", "display_name": "Tabitha", "link": "https://stackoverflow.com/users/59210/tabitha"}, "edited": false, "score": 0, "creation_date": 1455230236, "post_id": 35351367, "comment_id": 58410212, "body": "Thanks this helped. I happened to also find  <a href=\"http://stackoverflow.com/questions/28587698/whats-the-difference-in-mut-before-a-variable-name-and-after-the?rq=1\">28587698</a> which this is a duplicate of so I&#39;m going to close the question."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1455229813, "creation_date": 1455229813, "answer_id": 35351367, "question_id": 35351273, "link": "https://stackoverflow.com/questions/35351273/what-is-the-difference-between-mut-on-the-type-and-the-ident-in-a-function-si/35351367#35351367", "title": "What is the difference between `&amp;mut` on the type and the ident in a function signature?", "body": "<p><code>&amp;mut x: T</code> is not valid, unless <code>T</code> is a <code>&amp;mut U</code>.</p>\n\n<pre><code>fn foo(&amp;mut a: i32) {\n    unimplemented!()\n}\n</code></pre>\n\n<p>gives this error:</p>\n\n<pre><code>&lt;anon&gt;:1:8: 1:14 error: mismatched types:\n expected `i32`,\n    found `&amp;mut _`\n(expected i32,\n    found &amp;-ptr) [E0308]\n&lt;anon&gt;:1 fn foo(&amp;mut a: i32) {\n                ^~~~~~\n</code></pre>\n\n<p>However, the following function is valid:</p>\n\n<pre><code>fn foo(&amp;mut a: &amp;mut i32) {\n    unimplemented!()\n}\n</code></pre>\n\n<p>What <code>&amp;mut x: &amp;mut U</code> means is, <em>given a value of type <code>&amp;mut U</code>, destructure the <code>&amp;mut U</code> by dereferencing it and assign the result to <code>x</code></em> (this is only valid if <code>U</code> implements <code>Copy</code>, otherwise you'll get a \"cannot move out of borrowed content\" error). In this situation, <code>&amp;mut x</code> is a <a href=\"http://doc.rust-lang.org/stable/book/patterns.html\" rel=\"nofollow\"><em>pattern</em></a>. You also find patterns in <code>let</code> statements and in <code>match</code> arms, and the meaning is always the same.</p>\n\n<pre><code>fn foo(a: &amp;mut i32) {\n    let &amp;mut b = a;\n    match a {\n        &amp;mut c =&gt; unimplemented!()\n    }\n}\n</code></pre>\n\n<p>In practice, we rarely write something like <code>&amp;mut a: &amp;mut T</code> in a function signature.</p>\n"}], "owner": {"reputation": 2366, "user_id": 59210, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/87cbcbf5bbac40ef10a28daec87391d3?s=128&d=identicon&r=PG", "display_name": "Tabitha", "link": "https://stackoverflow.com/users/59210/tabitha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 383, "favorite_count": 0, "closed_date": 1455230798, "answer_count": 1, "score": 2, "last_activity_date": 1455229813, "creation_date": 1455229407, "question_id": 35351273, "link": "https://stackoverflow.com/questions/35351273/what-is-the-difference-between-mut-on-the-type-and-the-ident-in-a-function-si", "closed_reason": "Duplicate", "title": "What is the difference between `&amp;mut` on the type and the ident in a function signature?", "body": "<p>In a library I'm writing to understand Rust I created a trait Decodeable.</p>\n\n<pre><code>pub trait Decodeable {\n    fn read_and_decode(&amp;mut types::ReadSeeker) -&gt; Result&lt;Self, ::error::Error&gt;;\n}\n</code></pre>\n\n<p>I then implemented the type:</p>\n\n<pre><code>impl Decodeable for u32 {\n    fn read_and_decode(&amp;mut stream: types::ReadSeeker) -&gt; Result&lt;u32, error::Error&gt; {\n        try!(stream.big_edian_read_u32());\n    }\n}\n</code></pre>\n\n<p>This was failing with an error of:</p>\n\n<pre><code>error: method `read_and_decode` has an incompatible type for trait:\n expected &amp;-ptr,\n    found trait types::ReadSeeker\n</code></pre>\n\n<p>I eventually figured out if I change the function signature to <code>read_and_decode(stream: &amp;mut types::ReadSeeker)</code>, it worked.</p>\n\n<p>I'd like to understand what the difference between <code>&amp;mut stream: types::ReadSeeker</code> and <code>stream: &amp;mut types::ReadSeeker</code>. This feels like it is a fundamental part of rust, but I don't have any grasp on what the difference is beyond the fact that they are in fact different.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1553196951, "last_edit_date": 1553196951, "creation_date": 1455206014, "answer_id": 35343945, "question_id": 35343839, "link": "https://stackoverflow.com/questions/35343839/how-to-express-that-a-returned-associated-type-implements-a-trait/35343945#35343945", "title": "How to express that a returned associated type implements a trait?", "body": "<p>Using a <code>where</code> clause, we can add an additional constraint on the generic <code>impl</code> so that it only applies if <code>GenStruct&lt;M&gt;</code> indeed implements <code>Return</code>.</p>\n\n<pre><code>impl&lt;M: Marker&gt; Trait&lt;M&gt; for Fake\nwhere\n    GenStruct&lt;M&gt;: Return,\n{\n    type Ret = GenStruct&lt;M&gt;;\n\n    fn meth(m: M) -&gt; GenStruct&lt;M&gt; {\n        GenStruct { field: m }\n    }\n}\n</code></pre>\n\n<p>Rust 1.33 even indicates this via help text:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   = help: consider adding a `where GenStruct&lt;M&gt;: Return` bound\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "edited": false, "score": 0, "creation_date": 1455206997, "post_id": 35344045, "comment_id": 58395823, "body": "Thank you for information. &quot;anyone can add new implementations of the trait in the future&quot; - that is what I didn&#39;t take into account"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1553196999, "last_edit_date": 1553196999, "creation_date": 1455206295, "answer_id": 35344045, "question_id": 35343839, "link": "https://stackoverflow.com/questions/35343839/how-to-express-that-a-returned-associated-type-implements-a-trait/35344045#35344045", "title": "How to express that a returned associated type implements a trait?", "body": "<blockquote>\n<pre><code>// actually implement `Return` for GenStruct&lt;M: Marker&gt;,\n// but compiler don't recognize that\nimpl Return for GenStruct&lt;i32&gt; {}\nimpl Return for GenStruct&lt;u32&gt; {}\n</code></pre>\n</blockquote>\n\n<p>Why do you think that you are implementing <code>Return</code> for any <code>GenStruct&lt;M: Marker&gt;</code>? This only implements it for two specific variants. The types that implement a trait are not a closed set; anyone can add new implementations of the trait in the future. The Rust designers don't want to allow the changes of a downstream crate to affect the compilation of your crate \u2014 that way lies madness!</p>\n\n<blockquote>\n<pre><code>impl&lt;M: Marker&gt; Return for GenStruct&lt;M&gt; {\n    fn ret() {\n        if M::is_i32() { } else { }\n    }\n}\n</code></pre>\n</blockquote>\n\n<p>This is the correct way of saying \"for every <code>M</code> that implements <code>Marker</code>,  <code>GenStruct&lt;M&gt;</code> implements <code>Return</code>. It doesn't matter how or where someone implements the traits, because there is guaranteed to be an implementation.</p>\n\n<blockquote>\n  <p>I cannot write a specialized implementation </p>\n</blockquote>\n\n<p>That's correct, <em>for now</em>. There's an ongoing RFC, <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow noreferrer\">RFC 1020: impl specialization</a> that aims to allow specialization in these cases.</p>\n"}], "owner": {"reputation": 297, "user_id": 4039738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100006313548910/picture?type=large", "display_name": "Oleh Devua", "link": "https://stackoverflow.com/users/4039738/oleh-devua"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 849, "favorite_count": 0, "accepted_answer_id": 35343945, "answer_count": 2, "score": 2, "last_activity_date": 1553196999, "creation_date": 1455205723, "last_edit_date": 1553196887, "question_id": 35343839, "link": "https://stackoverflow.com/questions/35343839/how-to-express-that-a-returned-associated-type-implements-a-trait", "title": "How to express that a returned associated type implements a trait?", "body": "<p>This is abstract example that shows my problem, extracted from my attempts to refactor some Rust code and learn Rust simultaneously.</p>\n\n<pre><code>struct GenStruct&lt;T&gt; {\n    field: T,\n}\n\ntrait Marker {}\ntrait Return {}\n\nimpl Marker for i32 {}\nimpl Marker for u32 {}\n\n// actually implement `Return` for GenStruct&lt;M: Marker&gt;,\n// but compiler don't recognize that\nimpl Return for GenStruct&lt;i32&gt; {}\nimpl Return for GenStruct&lt;u32&gt; {}\n\nstruct Fake;\n\ntrait Trait&lt;M: Marker&gt; {\n    type Ret: Return;\n    fn meth(m: M) -&gt; Self::Ret;\n}\n\nimpl&lt;M: Marker&gt; Trait&lt;M&gt; for Fake {\n    type Ret = GenStruct&lt;M&gt;;\n\n    fn meth(m: M) -&gt; GenStruct&lt;M&gt; {\n        GenStruct { field: m }\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `GenStruct&lt;M&gt;: Return` is not satisfied\n  --&gt; src/lib.rs:23:17\n   |\n23 | impl&lt;M: Marker&gt; Trait&lt;M&gt; for Fake {\n   |                 ^^^^^^^^ the trait `Return` is not implemented for `GenStruct&lt;M&gt;`\n   |\n</code></pre>\n\n<p>The compiler doesn't recognize that I actually implement <code>Return</code> for every <code>GenStruct&lt;M&gt;</code> where M is <code>Marker</code>. To fix it, I can write something like:</p>\n\n<pre><code>trait Marker {\n    fn is_i32() -&gt; bool;\n}\ntrait Return {\n    fn ret();\n}\n\nimpl Marker for i32 {\n    fn is_i32() -&gt; bool {\n        true\n    }\n}\nimpl Marker for u32 {\n    fn is_i32() -&gt; bool {\n        false\n    }\n}\n\n// compiler is satisfied by such implementation\nimpl&lt;M: Marker&gt; Return for GenStruct&lt;M&gt; {\n    fn ret() {\n        if M::is_i32() {\n        } else {\n        }\n    }\n}\n</code></pre>\n\n<p>or use a trait object:</p>\n\n<pre><code>impl&lt;M: Marker&gt; Return for GenStruct&lt;M&gt; {}\n\ntrait Trait&lt;'a, M: Marker + 'a&gt; {\n    fn meth(m: M) -&gt; Box&lt;Return + 'a&gt;;\n}\n\nimpl&lt;'a, M: Marker + 'a&gt; Trait&lt;'a, M&gt; for Fake {\n    fn meth(m: M) -&gt; Box&lt;Return + 'a&gt; {\n        Box::new(GenStruct { field: m })\n    }\n}\n</code></pre>\n\n<p>However, if I use a trait object, I cannot write a specialized implementation of <code>Return</code> for <code>GenStruct&lt;i32&gt;</code> and <code>GenStruct&lt;u32&gt;</code>.</p>\n\n<p>Will the compiler be able to recognize that I do implement <code>GenStruct&lt;M: Marker&gt;</code> or is my code is not idiomatic Rust? If my code is not idiomatic, then what is the right way to write it?</p>\n"}, {"tags": ["rust", "heap"], "answers": [{"comments": [{"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455199908, "post_id": 35341599, "comment_id": 58390367, "body": "What if I want to also use references in the <code>struct</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455199977, "post_id": 35341599, "comment_id": 58390411, "body": "Do you mean that sometimes you want the struct to just borrow a value, and sometimes to own the value?"}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455200103, "post_id": 35341599, "comment_id": 58390503, "body": "I don&#39;t want to borrow. I may have some <code>&amp;value</code> created in a function and some <code>Cont</code>s created and used afterwards without returning any of them or actually passing them further down. So then <code>&amp;value</code> would make sense because I don&#39;t want to allocate that on the heap. Is there a way to use either a <code>Box</code> or a <code>Ref</code>?"}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455200326, "post_id": 35341599, "comment_id": 58390648, "body": "For example: in a function create <code>value</code>, send <code>&amp;value</code> to <code>Cont</code>, have some <code>Cont</code> method return some <code>i32</code>, return that <code>i32</code> from this function."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455200705, "post_id": 35341599, "comment_id": 58390934, "body": "I&#39;ve added another solution to my answer."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "edited": false, "score": 0, "creation_date": 1455201159, "post_id": 35341599, "comment_id": 58391284, "body": "Because when you drop a <code>Cont&lt;Box&lt;i32&gt;&gt;</code>, you need to free the heap-allocated memory (which is done automatically by the compiler), while dropping a <code>Cont&lt;&amp;i32&gt;</code> doesn&#39;t need that. You could do something similar with an <code>enum</code> instead, if you know exactly what kinds of pointers you need to handle, but if you were making a library, maybe some users would like to use <code>Rc&lt;i32&gt;</code> or even a custom smart pointer, and the generic approach works well for this, but not the <code>enum</code> approach."}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1455201477, "post_id": 35341599, "comment_id": 58391551, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/103206/discussion-between-dragostis-and-francis-gagne\">continue this discussion in chat</a>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1455200374, "last_edit_date": 1455200374, "creation_date": 1455199864, "answer_id": 35341599, "question_id": 35341523, "link": "https://stackoverflow.com/questions/35341523/how-can-i-return-boxed-value/35341599#35341599", "title": "How can I return boxed value?", "body": "<p>You cannot return a structure that only contains a borrowed pointer to your object, because your <code>Box</code> would be destroyed at the end of the function.</p>\n\n<p>You need to transfer ownership of the <code>Box</code> out of the function so that the heap-allocated object remains alive. The simplest way to do this is to move the <code>Box</code> into your struct:</p>\n\n<pre><code>struct Cont {\n    pub v: Box&lt;i32&gt;\n}\n\nimpl Cont {\n    fn new(v: Box&lt;i32&gt;) -&gt; Cont {\n        Cont {\n            v: v\n        }\n    }\n}\n\nfn f() -&gt; Cont {\n    let v = Box::new(6);\n    Cont::new(v)\n}\n\nfn main() {\n    let c = f();\n\n    println!(\"{}\", c.v);\n}\n</code></pre>\n\n<p>If you want a struct that is able to store either a borrowed pointer or an owning <code>Box</code> (or other kinds of smart pointers), we can make it generic over the <a href=\"http://doc.rust-lang.org/stable/std/borrow/trait.Borrow.html\" rel=\"noreferrer\"><code>Borrow</code></a> trait.</p>\n\n<pre><code>use std::borrow::Borrow;\n\nstruct Cont&lt;T&gt; where T: Borrow&lt;i32&gt; {\n    pub v: T\n}\n\nimpl&lt;T&gt; Cont&lt;T&gt; where T: Borrow&lt;i32&gt; {\n    fn new(v: T) -&gt; Cont&lt;T&gt; {\n        Cont {\n            v: v\n        }\n    }\n}\n\nfn owned() -&gt; Cont&lt;Box&lt;i32&gt;&gt; {\n    let v = Box::new(6);\n    Cont::new(v)\n}\n\nfn borrowed(v: &amp;i32) -&gt; Cont&lt;&amp;i32&gt; {\n    Cont::new(v)\n}\n\nfn main() {\n    let c = owned();\n    println!(\"{}\", c.v);\n\n    let x = 123;\n    let c = borrowed(&amp;x);\n    println!(\"{}\", c.v);\n}\n</code></pre>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2181, "favorite_count": 0, "accepted_answer_id": 35341599, "answer_count": 1, "score": 4, "last_activity_date": 1455200374, "creation_date": 1455199625, "question_id": 35341523, "link": "https://stackoverflow.com/questions/35341523/how-can-i-return-boxed-value", "title": "How can I return boxed value?", "body": "<p>I basically have a function that creates some object which need to be allocated on the heap. What I want to do is return from that function a structure containing a reference to that heap-allocated value.</p>\n\n<pre><code>struct Cont&lt;'a&gt; {\n    pub v: &amp;'a i32\n}\n\nimpl&lt;'a&gt; Cont&lt;'a&gt; {\n    fn new(v: &amp;'a i32) -&gt; Cont {\n        Cont {\n            v: v\n        }\n    }\n}\n\nfn f&lt;'a&gt;() -&gt; Cont&lt;'a&gt; {\n    let v = Box::new(6);\n\n    Cont::new(&amp;v)\n}\n\nfn main() {\n    let c = f();\n\n    println!(\"{}\", c.v);\n}\n</code></pre>\n\n<p>I'm getting <code>error: 'v' does not live long enough</code>.</p>\n\n<p>You can find the example <a href=\"http://is.gd/R9Ps1d\" rel=\"nofollow\">here</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "edited": false, "score": 0, "creation_date": 1455169642, "post_id": 35331289, "comment_id": 58371240, "body": "Take a look at <a href=\"http://stackoverflow.com/a/22597760/994206\">this answer</a>. This is also covered in <a href=\"http://static.rust-lang.org/doc/master/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">the tutorial</a>"}, {"owner": {"reputation": 541, "user_id": 8407160, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ATLGJ.png?s=128&g=1", "display_name": "Akshay Naik", "link": "https://stackoverflow.com/users/8407160/akshay-naik"}, "edited": false, "score": 0, "creation_date": 1607840105, "post_id": 35331289, "comment_id": 115395975, "body": "<a href=\"https://fasterthanli.me/articles/rust-modules-vs-files\" rel=\"nofollow noreferrer\">fasterthanli.me/articles/rust-modules-vs-files</a>"}], "answers": [{"comments": [{"owner": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "edited": false, "score": 0, "creation_date": 1455186509, "post_id": 35331931, "comment_id": 58380849, "body": "For me the comprehension of mod is equivalent to a C or Cpp #include directive with some search capabilities to look for either name/mod or name.rs, but I might have missed to subtleties."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "edited": false, "score": 4, "creation_date": 1455190850, "post_id": 35331931, "comment_id": 58383882, "body": "@XavierT. the two major differences between C/C++ and Rust is, first, that a compilation unit in Rust is much larger than in C/C++ (a crate, which corresponds to one or more .rs files and one or more modules, vs. an object file, which corresponds to exactly one .c/.cpp file with textually included headers), and second, that in Rust modules actually provide namespaces and encapsulation, which is not true for C and only partially true for C++ (where namespaces do exist, but are not tied to compilation units and do not provide abstraction boundaries)."}, {"owner": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "edited": false, "score": 0, "creation_date": 1455194519, "post_id": 35331931, "comment_id": 58386471, "body": "Ah yes, the namespacing is important too !"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 12, "last_activity_date": 1455185318, "last_edit_date": 1455185318, "creation_date": 1455170650, "answer_id": 35331931, "question_id": 35331289, "link": "https://stackoverflow.com/questions/35331289/can-i-include-modules-sideways-in-rust/35331931#35331931", "title": "Can I include modules &quot;sideways&quot; in Rust?", "body": "<p><code>mod</code> is <em>module declaration</em>. This directive declares a module and all of its contents. It just so happens that these contents may be located in another file. So this:</p>\n\n<pre><code>mod game;\nmod matrix;\n</code></pre>\n\n<p>is roughly equivalent to this:</p>\n\n<pre><code>mod game {\n    // game.rs contents\n}\n\nmod matrix {\n    // matrix.rs contents\n}\n</code></pre>\n\n<p>Naturally, since <code>mod</code> is a declaration of a module, you can't do it multiple times for the same module. That is, you can try and write something like</p>\n\n<pre><code>mod game {\n    mod matrix;\n    ...\n}\n\nmod matrix;\n</code></pre>\n\n<p>but, as you can see, <code>matrix</code> and <code>game::matrix</code> are different modules, and naturally rustc requires different paths to their respective files, if they are external.</p>\n\n<p><code>use</code>, however, is <em>import declaration</em>. <code>use</code> declarations pull names from other modules for use in the current module. You can <code>use</code> any module and any public items from it any number of times from anywhere this module is accessible.</p>\n\n<p>So, in order to reference <code>matrix</code> from <code>game</code> you need to <code>use</code> it:</p>\n\n<pre><code>// game.rs\nuse matrix;\n</code></pre>\n\n<p>Naturally, in order for this to work <code>matrix</code> should be declared with <code>mod</code> in the crate root.</p>\n\n<p>As a side note, I personally think that the simplest way to understand Rust module system is to first forget that modules can be put in different files at all. That is, think as if a crate can only be defined in a single file. In Rust <code>mod</code> directives can have bodies and can nest, so nested <code>mod</code>s actually define the module system of a crate:</p>\n\n<pre><code>mod foo {\n    mod bax {\n        ...\n    }\n    mod baz {\n        ...\n    }\n}\nmod bar {\n    mod qux {\n        mod zux {\n            ...\n        }\n    }\n}\n</code></pre>\n\n<p>If you only have a single file, you can easily see how <code>mod</code> and <code>use</code> directives would work, and relationship between modules should become clear.</p>\n\n<p>And now you only need to add to the picture the fact that if a module is declared without a body, like in <code>mod name;</code>, its content is loaded either from <code>name.rs</code> or <code>name/mod.rs</code>, whatever is available. However, the full picture does not change in the slightest - these still are nested modules which can <em>always</em> be represented as a single source file with nested <code>mod</code> directives. In fact, <code>cargo rustc -Z unstable-options --pretty=normal</code> will print your crate in this form, after all modules in external source files are assembled into a single document. I suggest running this command on some crates with complex module structure to see how it looks in practice.</p>\n"}], "owner": {"reputation": 123, "user_id": 5886122, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8cdadff74d1a111c7c47e5ea2c8991d5?s=128&d=identicon&r=PG&f=1", "display_name": "Rak", "link": "https://stackoverflow.com/users/5886122/rak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 725, "favorite_count": 4, "accepted_answer_id": 35331931, "answer_count": 1, "score": 8, "last_activity_date": 1455185318, "creation_date": 1455167773, "question_id": 35331289, "link": "https://stackoverflow.com/questions/35331289/can-i-include-modules-sideways-in-rust", "title": "Can I include modules &quot;sideways&quot; in Rust?", "body": "<p>I want to split a Rust program into multiple files, but the use of <code>mod</code> doesn't see to allow me to reference files in the same directory from files other than <code>main.rs</code>.</p>\n\n<p>For example, if I have <code>main.rs</code>, <code>game.rs</code>, and <code>matrix.rs</code> in the same folder, I can reference structs/functions from <code>game.rs</code> or <code>matrix.rs</code> in <code>main.rs</code> with a <code>mod game;</code> or <code>mod matrix;</code>. I can't, however, reference <code>matrix.rs</code> from <code>game.rs</code> with a statement like <code>mod matrix</code>.</p>\n\n<p>I've looked at several resources and all of them only have modules structures like trees that don't reference each other. Is it possible to use structs/functions from files in each other in Rust, or is that against the rules? If so, why doesn't Rust let you do that?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1455150449, "post_id": 35328392, "comment_id": 58365728, "body": "What is <code>MovieInsert</code> <i>for</i>? It\u2019s just a <code>Movie</code> without the ID? You should probably think about remodelling things in some way; hard to suggest things without much more information."}, {"owner": {"reputation": 314, "user_id": 1321456, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/4bd54ccbccbb1bb894075339e4f3a42f?s=128&d=identicon&r=PG", "display_name": "shinriyo", "link": "https://stackoverflow.com/users/1321456/shinriyo"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1455151560, "post_id": 35328392, "comment_id": 58366078, "body": "yes. It\u2019s just a Movie without the ID? because, if I insert sql by POST, it doesn&#39;t have id yes so <code>let movie = request.json_as::&lt;MovieInsert&gt;().unwrap();</code> failed"}, {"owner": {"reputation": 314, "user_id": 1321456, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/4bd54ccbccbb1bb894075339e4f3a42f?s=128&d=identicon&r=PG", "display_name": "shinriyo", "link": "https://stackoverflow.com/users/1321456/shinriyo"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1455151694, "post_id": 35328392, "comment_id": 58366117, "body": "I added code for inserting"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1455162345, "post_id": 35328392, "comment_id": 58368944, "body": "Inheritance wouldn\u2019t be a good solution to this anyway; you\u2019ll doubtless want other permutations of fields at a later date, e.g. the fields one is allowed to update may vary by permissions, and so on. You\u2019re definitely not dealing with a case where inheritance would be <i>honest</i>, even if it would\u2014for this basic case\u2014work. If you did it, you\u2019d regret it later."}, {"owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "edited": false, "score": 1, "creation_date": 1455179808, "post_id": 35328392, "comment_id": 58376352, "body": "I think <code>MovieInsert</code> avoids solving the real problem which is how you&#39;re decoding the JSON. You can either write a custom decoder for <code>Movie</code> or I believe you can declare id as type Option&lt;i32&gt; (not sure about this). Here&#39;s a good article on implementing custom deserialization: <a href=\"http://valve.github.io/blog/2014/08/26/json-serialization-in-rust-part-2/\" rel=\"nofollow noreferrer\">valve.github.io/blog/2014/08/26/&hellip;</a>"}, {"owner": {"reputation": 314, "user_id": 1321456, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/4bd54ccbccbb1bb894075339e4f3a42f?s=128&d=identicon&r=PG", "display_name": "shinriyo", "link": "https://stackoverflow.com/users/1321456/shinriyo"}, "edited": false, "score": 0, "creation_date": 1455184962, "post_id": 35328392, "comment_id": 58379711, "body": "Thank you fore replying. I read your github.io link.  <code>#[deriving(Encodable, Decodable, Show)]</code> is obsoleted isn&#39;t it? <code>impl</code> also doesn&#39;t needed. Finally, I just changed <code>_id: Option&lt;i32&gt;,</code>"}, {"owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "edited": false, "score": 1, "creation_date": 1455190711, "post_id": 35328392, "comment_id": 58383786, "body": "The tutorial is a bit outdated but the implementation of decode is still relevant. I&#39;m glad you were able to solve your problem!"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482649887, "post_id": 35328392, "comment_id": 69842223, "body": "@shepmaster Given that the RFC about struct inheritance mentioned in the duplicate (<a href=\"http://aturon.github.io/blog/2015/09/18/reuse/\" rel=\"nofollow noreferrer\">aturon.github.io/blog/2015/09/18/reuse</a>) has been merged, would anyone mind if I asked a canonical question &quot;How do I do this struct inheritance thing?&quot;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1482848773, "post_id": 35328392, "comment_id": 69895586, "body": "@bright-star which RFC are you talking about? Please link to the <a href=\"https://github.com/rust-lang/rfcs\" rel=\"nofollow noreferrer\">merged RFC in the repo</a>."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1482867086, "post_id": 35328392, "comment_id": 69903858, "body": "<a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/1210</a>"}], "owner": {"reputation": 314, "user_id": 1321456, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/4bd54ccbccbb1bb894075339e4f3a42f?s=128&d=identicon&r=PG", "display_name": "shinriyo", "link": "https://stackoverflow.com/users/1321456/shinriyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 114, "favorite_count": 0, "closed_date": 1455151321, "answer_count": 0, "score": 0, "last_activity_date": 1455185386, "creation_date": 1455148861, "last_edit_date": 1455185386, "question_id": 35328392, "link": "https://stackoverflow.com/questions/35328392/can-i-inherit-structs-in-rust", "closed_reason": "Duplicate", "title": "Can I inherit structs in Rust?", "body": "<p>I'd like to inherit structs because these structs are very redundant. Only <code>id</code> is different:</p>\n\n<pre><code>#[derive(RustcDecodable, RustcEncodable)]\nstruct Movie {\n    id: i32,\n    title: String,\n    director: String,\n    releaseYear: i16,\n    genre: String,\n}\n\n#[derive(RustcDecodable, RustcEncodable)]\nstruct MovieInsert  {\n    title: String,\n    director: String,\n    releaseYear: i16,\n    genre: String,\n}\n</code></pre>\n\n<p>Why do I define these structs? When I GET JSON data from the database, I can convert like this:</p>\n\n<pre><code>let movie = request.json_as::&lt;MovieInsert&gt;().unwrap();\n</code></pre>\n\n<p>When I insert JSON data by POST, I can convert like this.</p>\n\n<pre><code>let movies = conn.query(\"select id, title, releaseYear, director, genre from movie\", &amp;[]).unwrap();\nlet mut v: Vec&lt;Movie&gt; = vec![];\n\nfor row in &amp;movies {\n    let movie = Movie {\n        id: row.get(0),\n        title: row.get(1),\n        releaseYear: row.get(2),\n        director: row.get(3),\n        genre: row.get(4),\n    };\n\n    v.push(movie);\n}\n\nlet json_obj = json::encode(&amp;v).unwrap();\n</code></pre>\n\n<p>Could you tell me how to inherit structs or other good practice for this situation?</p>\n\n<p>it is my inserting code.\nif I change <code>let movie = request.json_as::&lt;MovieInsert&gt;().unwrap();</code>\nto <code>let movie = request.json_as::&lt;Movie&gt;().unwrap();</code>,\nit failed.\n<code>MovieInsert</code> to <code>Movie</code></p>\n\n<pre><code>// insert\n{\n    let conn = shared_connection.clone();\n    router.post(\"/api/movies\", middleware! { |request, mut response|\n        let conn = conn.lock().unwrap();\n        let stmt = match conn.prepare(\"insert into movie (title, releaseYear, director, genre)\n            values ($1, $2, $3, $4)\") {\n            Ok(stmt) =&gt; stmt,\n            Err(e) =&gt; {\n                return response.send(format!(\"Preparing query failed: {}\", e));\n            }\n        };\n\n        let movie = request.json_as::&lt;MovieInsert&gt;().unwrap();\n        match stmt.execute(&amp;[\n            &amp;movie.title.to_string(),\n            &amp;movie.releaseYear,\n            &amp;movie.director.to_string(),\n            &amp;movie.genre.to_string()\n        ]) {\n            Ok(v) =&gt; println!(\"Inserting movie was Success.\"),\n            Err(e) =&gt; println!(\"Inserting movie failed. =&gt; {:?}\", e),\n        };\n    });\n}\n</code></pre>\n\n<p><strong>Tried(Obsolated practice)</strong></p>\n\n<pre><code>extern crate serialize;\nuse std::default::Default;\n\nuse serialize::{json, Decodable, Decoder};\n\n#[deriving(Encodable, Decodable, Show)]\nstruct Movie {\n    _id: Option&lt;i32&gt;,\n    title: String,\n    director: String,\n    releaseYear: i16,\n    genre: String,\n}\n\nimpl&lt;S: Decoder&lt;E&gt;, E&gt; Decodable&lt;S, E&gt; for Movie {\n    fn decode(decoder: &amp;mut S) -&gt; Result&lt;Movie, E&gt; {\n        decoder.read_struct(\"root\", 0, |decoder| {\n            decoder.read_struct_field(\"data\", 0, |decoder| {\n                Ok(Person{\n                    age: try!(decoder.read_struct_field(\"_id\", -1, |decoder| Decodable::decode(decoder)))\n                })\n            })\n        })\n    }\n}\n</code></pre>\n\n<p>However, <code>Show</code> doesn't exist ``#[derive]<code>for custom traits is not stable enough for use and is subject to change (see issue #29644)\nsrc/main.rs:28 #[derive(Encodable, Decodable, Show)]</code></p>\n\n<p>Later I changed <code>deriving</code> to <code>derive</code>.</p>\n\n<p><code>warning: derive(Decodable) is deprecated in favor of derive(RustcDecodable)\nsrc/main.rs:28 #[derive(Encodable, Decodable, Show)]</code></p>\n\n<p><code>RustcDecodable</code> was good. Decodable was obsolated..</p>\n\n<h2>Finally</h2>\n\n<p>I just changed type of <code>_id</code></p>\n\n<pre><code>#[derive(RustcDecodable, RustcEncodable)]\nstruct Movie {\n    _id: Option&lt;i32&gt;,\n    title: String,\n    director: String,\n    releaseYear: i16,\n    genre: String,\n}\n</code></pre>\n"}]