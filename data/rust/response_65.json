[{"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1459949584, "post_id": 36446642, "comment_id": 60518101, "body": "I don&#39;t think the <code>build.rs</code> scripts are meant to handle this kind of logic. They are meant to provide everything needed to build the library/binary I don&#39;t think they are even meant for tests/benches (use another crate + <code>build.rs</code> for that). What exactly do you want to do only for <code>cargo doc</code>?"}, {"owner": {"reputation": 732, "user_id": 170073, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/bf23691966fc34bef94131e7217b58bc?s=128&d=identicon&r=PG", "display_name": "adam", "link": "https://stackoverflow.com/users/170073/adam"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1459957437, "post_id": 36446642, "comment_id": 60524414, "body": "I want to generate some images that contains some schematics (UML diagrams basically) and include them in the docs. The images are generated from other format and I&#39;d like it to happen automatically on <code>cargo doc</code>. I don&#39;t insist on using build.rs if there is a better way to do it."}, {"owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "edited": false, "score": 0, "creation_date": 1487952749, "post_id": 36446642, "comment_id": 72030293, "body": "<code>build.rs</code> is intended for <code>cargo build</code> and <code>cargo doc</code> runs <code>cargo build</code> before generating documentation. <code>cargo build</code> needs to generate the same thing whoever calls it. That means <code>build.rs</code> won&#39;t be able to do exactly what you want, it will only be able to always generate the diagrams even if <code>cargo doc</code> will not be run afterwards. AFAIK there is nothing in cargo currently that can do what you want, perhaps file an issue with a feature request for a <code>doc.rs</code>?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1564599605, "post_id": 36446642, "comment_id": 101088737, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/57158261/how-to-generate-the-documentation-of-an-ffi-crate-when-the-native-library-is-not\">How to generate the documentation of an FFI crate when the native library is not present?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1605643190, "last_edit_date": 1605643190, "creation_date": 1570036338, "answer_id": 58206214, "question_id": 36446642, "link": "https://stackoverflow.com/questions/36446642/how-to-access-current-cargo-profile-build-test-bench-doc-from-the-bui/58206214#58206214", "title": "How to access current cargo profile (build, test, bench, doc, ....) from the build script (build.rs)", "body": "<p>This is not possible as of Rust 1.47. <a href=\"https://github.com/rust-lang/cargo/issues/4001\" rel=\"nofollow noreferrer\">Cargo issue #4001</a> tracks the possibility of supporting this in some fashion.</p>\n"}], "owner": {"reputation": 732, "user_id": 170073, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/bf23691966fc34bef94131e7217b58bc?s=128&d=identicon&r=PG", "display_name": "adam", "link": "https://stackoverflow.com/users/170073/adam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 689, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1605643190, "creation_date": 1459934157, "question_id": 36446642, "link": "https://stackoverflow.com/questions/36446642/how-to-access-current-cargo-profile-build-test-bench-doc-from-the-bui", "title": "How to access current cargo profile (build, test, bench, doc, ....) from the build script (build.rs)", "body": "<p>I want to write a custom <code>build.rs</code> script that generates some diagrams to accompany the documentation for a crate I'm working on. I want this script to run only when I run <code>cargo doc</code>, not the other profiles (<code>cargo build</code>, <code>cargo test</code>, ...). What would be the best way to do that?</p>\n\n<p>I was hoping that cargo would pass this info to <code>build.rs</code> in the <code>PROFILE</code> env variable, but that seems to only contain \"debug\" or \"release\".</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1459933678, "post_id": 36446257, "comment_id": 60505868, "body": "<code>clone</code> doesn&#39;t create an owned copy, it just clones the reference, not what the reference points at, you want <code>to_owned</code>"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1459934148, "last_edit_date": 1459934148, "creation_date": 1459933728, "answer_id": 36446457, "question_id": 36446257, "link": "https://stackoverflow.com/questions/36446257/rust-slice-ownership-outlives-its-scope/36446457#36446457", "title": "Rust slice ownership outlives its scope", "body": "<p>Of course it does not agree, because the lifetime of <code>tmpBuf</code> doesn't end in the inner block. <code>clone()</code> called on a slice returns a copy of that slice, that is, a copy of a pointer and a length. For all intents and purposes, the slice returned by <code>tmpSlice.clone()</code> is equivalent to <code>tmpSlice</code>, including its lifetime. Because you assign it to <code>tmpBuf</code> in the outer scope, it naturally outlives the scope of the inner block.</p>\n\n<p>Actually, if Rust allowed it, your code would break - <code>clone_from_slice()</code> source and destination could overlap. For example, if <code>self.tail</code> is <code>0</code> and <code>self.head</code> is, say, <code>10</code>, then the source and the destination overlap completely.</p>\n\n<p>Unfortunately, there is no way to create a fixed-size stack array with size determined at runtime, so the only way around this is to allocate the data on the heap by calling <code>to_owned()</code> or <code>to_vec()</code> on the slice to obtain <code>Vec&lt;u8&gt;</code>.</p>\n\n<p>Alternatively, you can allocate a second fixed-size array which is guaranteed not to be smaller than the one in the structure, and use it as a temporary space. You would need to use <code>clone_from_slice()</code> two times for that.</p>\n"}], "owner": {"reputation": 345, "user_id": 1041831, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/63542ac25e09115c3ba823097a1c825f?s=128&d=identicon&r=PG", "display_name": "NougatRillettes", "link": "https://stackoverflow.com/users/1041831/nougatrillettes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 218, "favorite_count": 0, "accepted_answer_id": 36446457, "answer_count": 1, "score": 2, "last_activity_date": 1459972473, "creation_date": 1459933255, "last_edit_date": 1459972473, "question_id": 36446257, "link": "https://stackoverflow.com/questions/36446257/rust-slice-ownership-outlives-its-scope", "title": "Rust slice ownership outlives its scope", "body": "<p>I'm getting mad trying to wrap my head around a Rust lifetime issue. When running the following code:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\nuse std::clone::Clone;\n\nconst BUFSIZE : usize = 4096;\n\nstruct LexBuf&lt;T: Read&gt; {\n    f: T,\n    buf: [u8; BUFSIZE],\n    tail: usize,\n    head: usize\n}\n\nimpl &lt;T : Read&gt; LexBuf&lt;T&gt; {\n    fn fetch(&amp;mut self) {\n        let keepSize = self.head - self.tail + 1;\n        let mut tmpBuf;\n        {\n            let tmpSlice = &amp;self.buf[self.tail..self.head+1];\n            tmpBuf = tmpSlice.clone();\n        }\n        &amp;mut self.buf[0..keepSize]\n            .clone_from_slice(tmpBuf);\n        let mut n = self.f\n            .read(&amp;mut self.buf[keepSize..]).unwrap();\n        if n &lt; BUFSIZE - keepSize {\n            self.buf[keepSize+n] = 0;\n        }\n    }\n}\n</code></pre>\n\n<p>I expect that the fact <code>tmpSlice</code> is in its own scope will allow me to borrow <code>self.buf</code> afterwards but it seems that the borrow checker doesn't agree as it says that <code>tmpSlice</code>'s borrow ends at the <code>fn fetch</code> scope.</p>\n"}, {"tags": ["rust", "api-design"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1459932541, "post_id": 36444761, "comment_id": 60505069, "body": "This seems like a potentially very subjective question... anyway, is checking multiple rights at one a requirement? Because otherwise you can use concrete rights (instead of a trait object)."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459949876, "post_id": 36444761, "comment_id": 60518338, "body": "Yeah, any API design question will have a certain amount of subjectivity, but I think it&#39;s still an answerable question. And yes, checking multiple rights at once is a requirement, because of the fact that doing so may involve interaction with the user. You want to only prompt the user for their password, or for an administrator password, once, rather than once for each right."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459950019, "post_id": 36444761, "comment_id": 60518445, "body": "By the way, on IRC, @Quuxy pointed out that the API requirements here are fairly similar to those of <a href=\"https://github.com/reem/rust-typemap\" rel=\"nofollow noreferrer\">typemap</a>. And I agree; that API would probably fit the best with what I&#39;m trying to do. So now I just need someone to write that up as an answer (or I&#39;ll do so myself if I have the time a little later), unless there is something obviously better."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459950917, "post_id": 36444761, "comment_id": 60519194, "body": "I would note that only asking the user for its password once can be solved by caching said password (for a limited amount of time)."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459962511, "post_id": 36444761, "comment_id": 60527871, "body": "@MatthieuM. For this API, the application does not prompt for the password. The system prompts for the password, if necessary, depending on the rights requested, the system policy, the groups the user is in, etc. So you don&#39;t get access to the password in the application, and you can&#39;t tell which rights will require no interaction, confirmation, user password, or administrator password. Thus, requesting all rights in one call is necessary if you don&#39;t want to possibly prompt for the user password, then immediately prompt for an administrator password again."}], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 98, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1459929097, "creation_date": 1459929097, "question_id": 36444761, "link": "https://stackoverflow.com/questions/36444761/api-design-for-parsing-different-types-of-data-based-on-tag", "title": "API design for parsing different types of data based on tag", "body": "<p>I have a C library, which is a bit clunky to use, and I am trying to wrap a Rust API around it in a safe, idiomatic, and ergonomic manner.</p>\n\n<p>To make this question a little easier to follow, rather than going through all of the gory details of the C API, the below is a slightly nicer Rust version of the API, but which still needs wrapping to be ergonomic to use.</p>\n\n<pre><code>struct Authorization {\n    // private\n}\n\nstruct Right {\n    name: String,\n    value: Vec&lt;u8&gt;,\n    authorized: bool,\n}\n\nenum Flags {\n    InteractionAllowed = (1 &lt;&lt; 0),\n    ExtendRights = (1 &lt;&lt; 1),\n    PartialRights = (1 &lt;&lt; 2),\n    // ...etc...\n}\n\nenum Error {\n    Denied,\n    Cancelled,\n    InteractionNotAllowed,\n    // ...etc...\n}\n\nimpl Authorization {\n    fn new() -&gt; Self;\n    fn authorize(&amp;mut self, rights: &amp;[Right], flags: Flags) -&gt; Result&lt;Vec&lt;Right&gt;, Error&gt;;\n}\n</code></pre>\n\n<p>The idea is that you create this opaque authorization reference, and later can query for whether certain rights are currently authorized, or ask it to authorize those rights, possibly by prompting the user for a password or confirmation. Each right consists of a name and a value. The set of names is extensible; users can define their own rights. What the value consists of depends on the name; it could be any arbitrary serialized data.</p>\n\n<p>The flags determine what kind of operation you are doing. If you pass no flags, it just checks whether the rights requested are currently authorized, returning <code>Ok(_)</code> if so. If you add the <code>ExtendRights</code> flag, it tries to give your process new rights if possible. If you add the <code>InteractionAllowed</code> flag, it may prompt the user for a password or confirmation before extending rights. If you add the <code>PartialRights</code> flag, it will succeed even if not all requested rights could be granted, and the returned <code>Vec&lt;Right&gt;</code> will indicated using the <code>authorized</code> flag which rights were granted.</p>\n\n<p>Now, this API is a bit clunky to use, because you need to use string constants to refer to rights, serialize and deserialize any <code>value</code> data that may be associated with a right yourself with no type safety, and the real API actually contains an additional <code>environment</code> slice of name/value pairs that you need to pass in to provide some additional information.</p>\n\n<p>To make this API friendlier, I've built up a builder API around it, and a trait that allows defining different types of rights and passing in associated data.</p>\n\n<p>This looks like the following, for building up and checking </p>\n\n<pre><code>pub trait Right {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn value(&amp;self) -&gt; Vec&lt;u8&gt; {\n        vec![]\n    }\n}\n\npub struct Execute;\n\nimpl Right for Execute {\n    fn name(&amp;self) -&gt; &amp;str {\n        \"com.example.execute\"\n    }\n}\n\npub struct MyCustomRight {\n    authorized_dirs: Vec&lt;Path&gt;,\n}\n\nimpl Right for MyCustomRight {\n    fn name(&amp;self) -&gt; &amp;str {\n        \"com.example.custom\"\n    }\n    fn value(&amp;self) -&gt; Vec&lt;u8&gt; {\n        let mut buf = Vec::new();\n        let mut serializer = some_serializer(&amp;mut buf);\n        self.authorized_dirs.serialize(serializer);\n        buf\n    }\n}\n\nimpl Builder {\n    fn new() -&gt; Self;\n    fn right&lt;R&gt;(&amp;mut self, right: R) -&gt; &amp;mut Self;\n    fn extend_rights(&amp;mut self) -&gt; &amp;mut Self;\n    fn interaction_allowed(&amp;mut self) -&gt; &amp;mut Self;\n    fn check(&amp;mut self) -&gt; Result&lt;(), Error&gt;;\n}\n</code></pre>\n\n<p>That allows you to use the API as so, if you just want to check if the given rights are authorized</p>\n\n<pre><code>Builder::new()\n    .interaction_allowed()\n    .right(Execute)\n    .right(MyCustomRight { authorized_dirs: vec![] })\n    .check();\n</code></pre>\n\n<p>So far, for just checking if a given set of rights is authorized (possibly with interaction) this API is working well; the trait allows you to implement your own custom rights, and pass the right in as a data structure, and so be able to easily encapsulate the serialization.</p>\n\n<p>Now, I want to extend the API to support the partial authorization case; instead of just an all or nothing check if a set of rights is allowed, I want to be able to pass in the <code>PartialRights</code> flag and get back some kind of set of rights that were able to be authorized, including deserialized versions of their associated values.</p>\n\n<p>The problem is, how to best return one of a number of different types, which may be extensible by users of this API (so can't be an enum defined ahead of time, with a fixed set of types embedded in it).</p>\n\n<p>I few possibilities I have thought of, but they all seem a little cumbersome in one way or another:</p>\n\n<ul>\n<li>For most of these, you could register a trait object when you called <code>right</code> to specify a right to query, that would be capable of deserializing the value to the appropriate type and doing something with it.</li>\n<li>Return a vector of trait objects of the <code>Right</code> trait, extended with whatever operations you may want to do with the value. Seems like then you'd need to predict every possible thing users would want to do with the value, which would be cumbersome.</li>\n<li>Return a vector of <code>Box&lt;Any&gt;</code>, and have the client try downcasting to each type of <code>Right</code> that they care about.</li>\n<li>Add a version of the <code>right</code> call that takes a closure, which gets called with the <code>Right</code> returned with information about whether it was authorized.</li>\n<li>Just take the rights passed in mutably, and set an <code>authorized</code> flag on them, so you would just define a variable for each right you cared about beforehand, pass it in, and check it after.</li>\n<li>Have your own custom <code>enum</code>, and implement some way of converting all of the types that you care about to your custom <code>enum</code></li>\n</ul>\n\n<p>I'm just having trouble coming up with a good design that would allow downstream crates to define their own rights and associated data (including serialization and deserialization), and then getting something back that makes it easy to check which rights were authorized out of the set that you care about. Suggestions and sketches of how this API would work in practice are appreciated.</p>\n\n<p>If I have tried to abstract away from the original problem too much in my above simplification of the API, <a href=\"https://gist.github.com/lambda/73b55a185bd090163da3\" rel=\"nofollow\">here is an excerpt of the raw C bindings, and my current wrapper around it</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 19, "last_activity_date": 1459912648, "last_edit_date": 1459912648, "creation_date": 1459908549, "answer_id": 36440227, "question_id": 36440021, "link": "https://stackoverflow.com/questions/36440021/whats-purpose-of-errorkind-nonexhaustive/36440227#36440227", "title": "What&#39;s purpose of ErrorKind::__Nonexhaustive?", "body": "<p>It is designed to allow the <code>ErrorKind</code> enum to be expanded in future, by forcing any <code>match</code> statements in stable code to have a catch-all <code>_</code> arm.</p>\n\n<p>Specifically, <a href=\"https://github.com/rust-lang/rust/blob/241a9d0ddf99fd40d273c615e9b1e8ce6052d94a/src/libstd/io/error.rs#L163-L166\">the variant is marked unstable</a> and so cannot be referred to on the stable channel, and so the compiler rejects code like</p>\n\n<pre><code>fn foo(x: Error) {\n    match x.kind() {\n        ErrorKind::NotFound =&gt; {}\n        ErrorKind::PermissionDenied =&gt; {}\n        ErrorKind::ConnectionRefused =&gt; {}\n        ErrorKind::ConnectionReset =&gt; {}\n        ErrorKind::ConnectionAborted =&gt; {}\n        ErrorKind::NotConnected =&gt; {}\n        ErrorKind::AddrInUse =&gt; {}\n        ErrorKind::AddrNotAvailable =&gt; {}\n        ErrorKind::BrokenPipe =&gt; {}\n        ErrorKind::AlreadyExists =&gt; {}\n        ErrorKind::WouldBlock =&gt; {}\n        ErrorKind::InvalidInput =&gt; {}\n        ErrorKind::InvalidData =&gt; {}\n        ErrorKind::TimedOut =&gt; {}\n        ErrorKind::WriteZero =&gt; {}\n        ErrorKind::Interrupted =&gt; {}\n        ErrorKind::Other =&gt; {}\n        ErrorKind::UnexpectedEof =&gt; {}\n        ErrorKind::UnexpectedEOF =&gt; {}\n        ErrorKind::__Nonexhaustive =&gt; {}\n    }\n}\n</code></pre>\n\n\n\n<pre><code>&lt;anon&gt;:24:9: 24:35 error: use of unstable library feature 'io_error_internals': better expressed through extensible enums that this enum cannot be exhaustively matched against (see issue #0)\n&lt;anon&gt;:24         ErrorKind::__Nonexhaustive =&gt; {}\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>If this code compiled successfully on stable Rust, then adding a variant to <code>ErrorKind</code> in a future version would break any code that had <code>match</code>s like the above, and breaking stable code is bad. The code breaks because matches in Rust must be exhaustive, that is, they must cover every possibility, in some way, and thus adding a variant would mean that possibility isn't covered.</p>\n\n<p>Instead, programmers must write:</p>\n\n<pre><code>fn foo(x: Error) {\n    match x.kind() {\n        ErrorKind::NotFound =&gt; {}\n        ErrorKind::PermissionDenied =&gt; {}\n        ErrorKind::ConnectionRefused =&gt; {}\n        ErrorKind::ConnectionReset =&gt; {}\n        ErrorKind::ConnectionAborted =&gt; {}\n        ErrorKind::NotConnected =&gt; {}\n        ErrorKind::AddrInUse =&gt; {}\n        ErrorKind::AddrNotAvailable =&gt; {}\n        ErrorKind::BrokenPipe =&gt; {}\n        ErrorKind::AlreadyExists =&gt; {}\n        ErrorKind::WouldBlock =&gt; {}\n        ErrorKind::InvalidInput =&gt; {}\n        ErrorKind::InvalidData =&gt; {}\n        ErrorKind::TimedOut =&gt; {}\n        ErrorKind::WriteZero =&gt; {}\n        ErrorKind::Interrupted =&gt; {}\n        ErrorKind::Other =&gt; {}\n        ErrorKind::UnexpectedEof =&gt; {}\n        ErrorKind::UnexpectedEOF =&gt; {}\n        _ =&gt; {}\n    }\n}\n</code></pre>\n\n<p>This means that any variants added to <code>ErrorKind</code> in future (e.g. new error possibilities for new IO functions) will fall under the <code>_</code> arm, and thus existing stable code won't break.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 7, "last_activity_date": 1459908736, "creation_date": 1459908736, "answer_id": 36440257, "question_id": 36440021, "link": "https://stackoverflow.com/questions/36440021/whats-purpose-of-errorkind-nonexhaustive/36440257#36440257", "title": "What&#39;s purpose of ErrorKind::__Nonexhaustive?", "body": "<p>The purpose of this hidden variant is to prevent you from writing something like this (which doesn't compile precisely because of the presence of <code>__Nonexhaustive</code>):</p>\n\n<pre><code>use std::io::ErrorKind;\n\nfn main() {\n    let error_kind: ErrorKind = unimplemented!();\n    match error_kind {\n        ErrorKind::NotFound =&gt; unimplemented!(),\n        ErrorKind::PermissionDenied =&gt; unimplemented!(),\n        ErrorKind::ConnectionRefused =&gt; unimplemented!(),\n        ErrorKind::ConnectionReset =&gt; unimplemented!(),\n        ErrorKind::ConnectionAborted =&gt; unimplemented!(),\n        ErrorKind::NotConnected =&gt; unimplemented!(),\n        ErrorKind::AddrInUse =&gt; unimplemented!(),\n        ErrorKind::AddrNotAvailable =&gt; unimplemented!(),\n        ErrorKind::BrokenPipe =&gt; unimplemented!(),\n        ErrorKind::AlreadyExists =&gt; unimplemented!(),\n        ErrorKind::WouldBlock =&gt; unimplemented!(),\n        ErrorKind::InvalidInput =&gt; unimplemented!(),\n        ErrorKind::InvalidData =&gt; unimplemented!(),\n        ErrorKind::TimedOut =&gt; unimplemented!(),\n        ErrorKind::WriteZero =&gt; unimplemented!(),\n        ErrorKind::Interrupted =&gt; unimplemented!(),\n        ErrorKind::Other =&gt; unimplemented!(),\n        ErrorKind::UnexpectedEOF =&gt; unimplemented!(),\n        ErrorKind::UnexpectedEof =&gt; unimplemented!(),\n        // note: no wildcard match arm here\n    };\n}\n</code></pre>\n\n<p>The reason <em>why</em> the developers of the standard library don't want you to do this is to retain the ability to add variants to <code>ErrorKind</code> in the future. The <code>__Nonexhaustive</code> variant prevents you from doing an exhaustive match by simply handling each individual variant; you <strong>must</strong> have a wildcard arm to have an exhaustive match.</p>\n\n<p>In Rust, the <code>match</code> expression requires that all possible patterns for the expression being matched on have a corresponding arm, so that the <code>match</code> expression always has a well-defined, explicit value. A <code>match</code> that covers all patterns is called an <strong>exhaustive</strong> match. With <code>enum</code>s, Rust lets us simply list all variants. For example, with <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noreferrer\"><code>Option</code></a>, which only has 2 variants, named <code>None</code> and <code>Some</code>, we can write:</p>\n\n<pre><code>fn main() {\n    let option: Option&lt;()&gt; = unimplemented!();\n    match option {\n        None =&gt; unimplemented!(),\n        Some(()) =&gt; unimplemented!(),\n    };\n}\n</code></pre>\n\n<p>This <code>match</code> compiles fine, because it covers all possible patterns for <code>option</code>. However, if the <code>Option</code> type gained another variant, then suddenly <em>your</em> code wouldn't compile anymore, because it would no longer be exhaustive. Naturally, this wouldn't make sense for <code>Option</code>, so the <code>Option</code> type doesn't play the \"nonexhaustive\" game. But if <code>__Nonexhaustive</code> wasn't there, adding a variant to <code>ErrorKind</code> would be a breaking change; any code that did an exhaustive match (without wildcards) on an <code>ErrorKind</code> would suddenly stop compiling. This code might be in a crate that your application depends on, and that breakage could prevent you from upgrading Rust until <em>that</em> crate is fixed!</p>\n"}], "owner": {"reputation": 263, "user_id": 2752617, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fa102a12ce01b661aa42b11fc271bf9?s=128&d=identicon&r=PG&f=1", "display_name": "tanagumo", "link": "https://stackoverflow.com/users/2752617/tanagumo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1111, "favorite_count": 2, "accepted_answer_id": 36440227, "answer_count": 2, "score": 13, "last_activity_date": 1459912648, "creation_date": 1459907120, "question_id": 36440021, "link": "https://stackoverflow.com/questions/36440021/whats-purpose-of-errorkind-nonexhaustive", "title": "What&#39;s purpose of ErrorKind::__Nonexhaustive?", "body": "<p><code>std::io::ErrorKind</code> has a variant <code>__Nonexhaustive</code>.\nI don't know what is the problem if this variant doesn't exist.</p>\n\n<p>What's purpose of this variant?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2371, "user_id": 270006, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/874bcba40024d48919097b29a25e852d?s=128&d=identicon&r=PG", "display_name": "\u0179V -", "link": "https://stackoverflow.com/users/270006/%c5%b9v"}, "edited": false, "score": 0, "creation_date": 1459892895, "post_id": 36437375, "comment_id": 60490141, "body": "I cannot understand this question at all -- can you maybe rewrite some components of it?"}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 2371, "user_id": 270006, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/874bcba40024d48919097b29a25e852d?s=128&d=identicon&r=PG", "display_name": "\u0179V -", "link": "https://stackoverflow.com/users/270006/%c5%b9v"}, "edited": false, "score": 0, "creation_date": 1459893826, "post_id": 36437375, "comment_id": 60490558, "body": "@\uffdc\uff3a\uff36\uffdc I update I hope you understand better. Thank you"}], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459896518, "post_id": 36437902, "comment_id": 60491626, "body": "I was at this -&gt; <a href=\"https://doc.rust-lang.org/collections/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/collections/vec/struct.Vec.html</a> the link you put is more detailed thanks. I and looking rust/vec.rs see now deref and I look more about it Thank for your time."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459898053, "post_id": 36437902, "comment_id": 60492165, "body": "You can help me with this, I can not really understand the documentation (my English is not very good), I can understand that using Deref, the struct that implements Deref can access methods to which it applies, in this case is slice, but it could be another"}], "tags": [], "owner": {"reputation": 106, "user_id": 5554486, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/82ac6d32c6695d300aa7cb476f2d75ea?s=128&d=identicon&r=PG&f=1", "display_name": "Jascha", "link": "https://stackoverflow.com/users/5554486/jascha"}, "is_accepted": true, "score": 5, "last_activity_date": 1459893925, "creation_date": 1459893925, "answer_id": 36437902, "question_id": 36437375, "link": "https://stackoverflow.com/questions/36437375/why-i-can-use-sort-by-key-with-a-vec/36437902#36437902", "title": "Why I can use sort_by_key with a Vec?", "body": "<p><code>Vec&lt;T&gt;</code> implements <code>Deref&lt;Target=[T]&gt;</code> (<code>[T]</code> is a slice). You can find more about deref coercions <a href=\"https://doc.rust-lang.org/book/deref-coercions.html\" rel=\"noreferrer\">here</a>. The API documentation even lists all <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort_by_key\" rel=\"noreferrer\">methods</a> accessible through <code>Deref</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459926664, "post_id": 36443643, "comment_id": 60501492, "body": "thank you very much for your explanation now understand better how it works"}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459926946, "post_id": 36443643, "comment_id": 60501669, "body": "I was thinking that maybe it would be good to put on the title &quot;Why I can use sort_by_key with a Vec? ( Deref )&quot; but did not know before, maybe if that word is added, makes it easier for others to access the information you and other detailed in this question. But I do not know if it would be good to add that to the title?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459930176, "post_id": 36443643, "comment_id": 60503649, "body": "@AngelAngel: I don&#39;t know :x"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459955418, "post_id": 36443643, "comment_id": 60522850, "body": "@AngelAngel no, it would not be useful. Putting <code>Deref</code> in the title would require people to <i>know the answer</i> before they are even able to <i>ask the question</i>."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459967830, "post_id": 36443643, "comment_id": 60531206, "body": "@Shepmaster thanks for answering, I thought the same, so I ask that. But if someone is looking for information about Defer, they somehow could access this information, but you are right in what you said, thanks for your time"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 7, "last_activity_date": 1459925747, "creation_date": 1459925747, "answer_id": 36443643, "question_id": 36437375, "link": "https://stackoverflow.com/questions/36437375/why-i-can-use-sort-by-key-with-a-vec/36443643#36443643", "title": "Why I can use sort_by_key with a Vec?", "body": "<p>As Jascha mentioned, <code>Vec&lt;T&gt;</code> implements <code>Deref&lt;Target=[T]&gt;</code> and <code>DerefMut</code>.</p>\n\n<p>Note the specific syntax here: <code>Target</code> is an associated type of <code>Deref</code> (not an input) and the implementation looks like:</p>\n\n<pre><code>impl&lt;T&gt; Deref for Vec&lt;T&gt; {\n    type Target = [T];\n\n    // ..\n}\n</code></pre>\n\n<p>The fact that <code>Target</code> is an associated type of <code>Deref</code> is important, because it means that <code>Deref</code> <strong>can only ever be implemented once</strong> for any given (concrete) type.</p>\n\n<p>This, in turns, means that when resolving methods on a type, the compiler can easily apply <em>deref coercions</em>. That is, as long as no method of the given name is found, it can see if the current type can be deref'ed once more and try again (yes, this can be chained).</p>\n\n<hr>\n\n<p>In the current situation this means the compiler:</p>\n\n<ul>\n<li>looks for a <code>sort_by_key</code> on <code>&amp;mut Vec&lt;T&gt;</code>, there is none</li>\n<li>looks for a <code>sort_by_key</code> on <code>&amp;mut [T]</code>, it exists</li>\n</ul>\n\n<p>it then transforms the call from:</p>\n\n<pre><code>let mut v = vec![1, 3, 2];\nv.sort_by_key(...);\n</code></pre>\n\n<p>into:</p>\n\n<pre><code>let mut v = vec![1, 3, 2];\n(&amp;mut *v).sort_by_key(...);\n</code></pre>\n\n<p>automatically.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1339, "favorite_count": 0, "accepted_answer_id": 36437902, "answer_count": 2, "score": 2, "last_activity_date": 1459925747, "creation_date": 1459891636, "last_edit_date": 1495540783, "question_id": 36437375, "link": "https://stackoverflow.com/questions/36437375/why-i-can-use-sort-by-key-with-a-vec", "title": "Why I can use sort_by_key with a Vec?", "body": "<p>Taking this example</p>\n\n<pre><code>fn main() {\n\n    let mut test: Vec&lt;u32&gt; = Vec::new(); \n\n    test.push(5);\n    test.push(8);\n    test.push(0);\n\n    test.sort_by_key(|k| k.abs());\n}\n</code></pre>\n\n<p>I searched <a href=\"https://github.com/rust-lang/rust/blob/c66d2380a810c9a2b3dbb4f93a830b101ee49cc2/src/libcollections/vec.rs\" rel=\"nofollow noreferrer\">the source code for <code>Vec</code></a>, but I do not see a trait or something like <code>derive</code>.</p>\n\n<pre><code>trait SomeTrait {\n    fn sort_by_key...\n}\n\nimpl SomeTrait for Vec... { }\n</code></pre>\n\n<p>The IntelliSense of my IDE did not detect <code>sort_by_key</code> either.</p>\n\n<p>I searched the Rust Github and found <a href=\"https://github.com/rust-lang/rust/blob/c66d2380a810c9a2b3dbb4f93a830b101ee49cc2/src/libcollections/slice.rs#L784\" rel=\"nofollow noreferrer\">this implementation in slice.rs</a>:</p>\n\n<pre><code>pub fn sort_by_key&lt;B, F&gt;(&amp;mut self, mut f: F)\n    where F: FnMut(&amp;T) -&gt; B, B: Ord\n{\n    self.sort_by(|a, b| f(a).cmp(&amp;f(b)))\n}\n</code></pre>\n\n<p>But I can not see how <code>Vec</code> relates to a slice and how <code>Vec</code> can access <code>sort_by_key</code>.</p>\n\n<p>I saw this constructor in <code>vec.rs</code>:</p>\n\n<pre><code>pub fn new() -&gt; Vec&lt;T&gt; {\n    Vec {\n        buf: RawVec::new(),\n        len: 0,\n    }\n} \n</code></pre>\n\n<p>I navigated the <code>struct</code> but I fail to understand where <code>sort_by_key</code> comes from.</p>\n\n<hr>\n\n<p>After the <a href=\"https://stackoverflow.com/questions/36437375/vec-that-way-you-can-use-sort-by-key-what-is-the-relationship#36437902\">response by Jascha</a></p>\n\n<p>I can not understand the documentation as my English is not very good. I  understand that by using <code>Deref</code>, the struct that implements <code>Deref</code> can access methods to which it applies, in this case a slice, but it could be another?</p>\n\n<hr>\n\n<p>I found <a href=\"http://ncameron.org/nool15.pdf\" rel=\"nofollow noreferrer\">this url</a> which helps me understand my follow up question and may help others:</p>\n\n<pre><code>struct Foo;\nimpl Foo {\n     fn foo(&amp;self) { }\n}\n\nstruct Bar {\n    foo: Foo,\n}\n\nimpl std::ops::Deref for Bar {\n     type Target = Foo;\n\n    fn deref(&amp;self) -&gt; &amp;Foo {\n        &amp;self.foo\n    }\n}\n\nfn main() {\n    let test: Bar = Bar { foo: Foo }; \n    test.foo();  \n}\n</code></pre>\n\n<p><em>I think this is very cool</em></p>\n"}, {"tags": ["request", "rust", "middleware", "iron"], "comments": [{"owner": {"reputation": 53, "user_id": 870378, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3664c6634eb845e87c037325df9eb40e?s=128&d=identicon&r=PG", "display_name": "Cottonwoods", "link": "https://stackoverflow.com/users/870378/cottonwoods"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459885822, "post_id": 36435372, "comment_id": 60486096, "body": "Thanks, that helps a lot"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1459903914, "creation_date": 1459903914, "answer_id": 36439582, "question_id": 36435372, "link": "https://stackoverflow.com/questions/36435372/how-do-i-read-an-iron-request-in-both-middleware-and-the-handler/36439582#36439582", "title": "How do I read an Iron Request in both middleware and the handler?", "body": "<p>Without knowing for sure, I don't think you can do anything to re-read the body (and you probably wouldn't want to for performance reasons). Instead, you could make your middleware parse the data and then store it in <a href=\"http://ironframework.io/doc/iron/request/struct.Request.html#structfield.extensions\" rel=\"noreferrer\"><code>Request.extensions</code></a>. Then your route would read it back out:</p>\n\n<pre><code>struct AuthenticatedBody;\n\nimpl iron::typemap::Key for AuthenticatedBody {\n    type Value = Json;\n}\n\nstruct Authentication;\n\nimpl BeforeMiddleware for Authentication {\n    fn before(&amp;self, request: &amp;mut Request) -&gt; IronResult&lt;()&gt; {\n        let mut payload = String::new();\n        request.body.read_to_string(&amp;mut payload).unwrap();\n        let json = Json::from_str(&amp;payload).unwrap();\n\n        {\n            let token = json.as_object()\n                .and_then(|obj| obj.get(\"token\"))\n                .and_then(|token| token.as_string())\n                .unwrap_or_else(|| panic!(\"Unable to get token\"));\n        } // Scoped to end the borrow of `json`\n\n        request.extensions.insert::&lt;AuthenticatedBody&gt;(json);\n\n        Ok(())\n    }\n}\n\n// ...\n\nfn set_greeting(request: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let json = request.extensions.get::&lt;AuthenticatedBody&gt;().unwrap();\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 53, "user_id": 870378, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3664c6634eb845e87c037325df9eb40e?s=128&d=identicon&r=PG", "display_name": "Cottonwoods", "link": "https://stackoverflow.com/users/870378/cottonwoods"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1292, "favorite_count": 0, "accepted_answer_id": 36439582, "answer_count": 1, "score": 5, "last_activity_date": 1459903914, "creation_date": 1459884484, "last_edit_date": 1459885057, "question_id": 36435372, "link": "https://stackoverflow.com/questions/36435372/how-do-i-read-an-iron-request-in-both-middleware-and-the-handler", "title": "How do I read an Iron Request in both middleware and the handler?", "body": "<p>I'm working on a small API in Rust and am not sure how to access a <code>Request</code> from Iron in two places.</p>\n\n<p>The <code>Authentication</code> middleware reads the <code>Request</code> once for a token and the actual route tries to read it again if the path is allowed (currently there is no check). This gives me an EOF error as the request has already been read.</p>\n\n<p>I can't seem to easily clone the request and I believe it must be mutable in order to read the body.</p>\n\n<pre><code>extern crate iron;\nextern crate router;\nextern crate rustc_serialize;\n\nuse iron::prelude::*;\nuse iron::{BeforeMiddleware, status};\nuse router::Router;\nuse rustc_serialize::json;\nuse rustc_serialize::json::Json;\nuse std::io::Read;\n\n#[derive(RustcEncodable, RustcDecodable)]\nstruct Greeting {\n    msg: String\n}\n\nstruct Authentication;\n\nfn main() {\n    let mut request_body = String::new();\n\n    impl BeforeMiddleware for Authentication {\n        fn before(&amp;self, request: &amp;mut Request) -&gt; IronResult&lt;()&gt; {\n            let mut payload = String::new();\n            request.body.read_to_string(&amp;mut payload).unwrap();\n            let json = Json::from_str(&amp;payload).unwrap();\n\n            println!(\"json: {}\", json);\n\n            let token = json.as_object()\n                .and_then(|obj| obj.get(\"token\"))\n                .and_then(|token| token.as_string())\n                .unwrap_or_else(|| {\n                    panic!(\"Unable to get token\");\n                });\n\n            println!(\"token: {}\", token);\n\n            Ok(())\n        }\n    }\n\n    fn attr(input: String, attribute: &amp;str) -&gt; String {\n        let json = Json::from_str(&amp;input).unwrap();\n        let output = json.as_object()\n            .and_then(|obj| obj.get(attribute))\n            .and_then(|a| a.as_string())\n            .unwrap_or_else(|| {\n                panic!(\"Unable to get attribute {}\", attribute);\n            });\n\n        String::from(output)\n    }\n\n    fn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let greeting = Greeting { msg: \"Hello, world!\".to_string() };\n        let payload = json::encode(&amp;greeting).unwrap();\n        Ok(Response::with((status::Ok, payload)))\n    }\n\n    // Receive a message by POST and play it back if auth-key is correct.\n    fn set_greeting(request: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let mut payload = String::new();\n        request.body.read_to_string(&amp;mut payload).unwrap();\n        let json = Json::from_str(&amp;payload).unwrap();\n\n        println!(\"json: {}\", json);\n\n        let msg = attr(payload, \"msg\");\n\n        println!(\"msg: {}\", msg);\n\n        let greeting = Greeting { msg: String::from(msg) };\n        let payload = json::encode(&amp;greeting).unwrap();\n\n        Ok(Response::with((status::Ok, payload)))\n    }\n\n    let mut router = Router::new();\n\n    router.get(\"/\", hello_world);\n    router.post(\"/set\", set_greeting);\n\n    let mut chain = Chain::new(router);\n    chain.link_before(Authentication);\n\n    Iron::new(chain).http(\"localhost:3000\").unwrap();\n}\n</code></pre>\n"}, {"tags": ["multithreading", "asynchronous", "rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1459863834, "creation_date": 1459863834, "answer_id": 36428164, "question_id": 36427347, "link": "https://stackoverflow.com/questions/36427347/grabbing-data-from-mpscchannel-without-having-it-lock-if-there-is-no-data-wait/36428164#36428164", "title": "Grabbing data from mpsc::channel without having it lock if there is no data waiting", "body": "<p>I think you need <a href=\"http://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_recv\" rel=\"nofollow\"><code>try_recv()</code></a>:</p>\n\n<pre><code>let events = match t1_event_out.try_recv() {\n    Ok(events) =&gt; events,\n    Err(TryRecvError::Empty) =&gt; continue,\n    Err(TryRecvError::Disconnected) =&gt; break,\n};\n</code></pre>\n"}], "owner": {"reputation": 317, "user_id": 4524649, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/70136933c6a9592e4499a93018315698?s=128&d=identicon&r=PG&f=1", "display_name": "ca1ek", "link": "https://stackoverflow.com/users/4524649/ca1ek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 43, "favorite_count": 0, "accepted_answer_id": 36428164, "answer_count": 1, "score": 0, "last_activity_date": 1459863834, "creation_date": 1459861796, "question_id": 36427347, "link": "https://stackoverflow.com/questions/36427347/grabbing-data-from-mpscchannel-without-having-it-lock-if-there-is-no-data-wait", "title": "Grabbing data from mpsc::channel without having it lock if there is no data waiting", "body": "<p>I'm writing a small game in Rust to learn about multithreading. I got code that contains two loops, one with the logic, one with the rendering, like this:</p>\n\n<pre><code>let (t1_entity_in, t1_entity_out) = mpsc::channel(); // ommited type definitions\n\nlet (t1_event_in, t1_event_out) = mpsc::channel();\n\nlet entity = Entity::new(20,20);\n\nstd::thread::spawn(move || {\n     let window = Window::new(1280,720);\n     loop {\n         // waits until parent send data\n         let entity = t1_entity_out.recv().unwrap();\n         window.draw(entity);\n         window.flip();\n         let events = window.get_events();\n         // parent starts working\n     }\n});\n\n'event_loop: loop {\n    // do stuff to the entity\n    t1_entity_in.send(entity.clone());\n    // thread 1 starts workinng\n\n    // waits until thread 1 sends data\n    let events = t1_event_out.recv().unwrap(); // [1]\n    // thread 1 sent data, continues.\n    for event in events {\n        if event.type == event::QUIT { \n            break 'event_loop;\n        }\n    }\n}\n</code></pre>\n\n<p>This code works, but it is pretty much behaving the same way as single thread would. Behavior I want is that at line marked [1], if there is a event iterator waiting, get it, but if there isn't just give me a None and keep going. How do I do that?</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1459865319, "post_id": 36426207, "comment_id": 60471844, "body": "Also works: <code>keywords.contains(&amp;&amp;*s)</code> (<code>&amp;*s</code> is the same as <code>s.as_str()</code>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1459866386, "post_id": 36426207, "comment_id": 60472747, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/28519997/155423\">What are Rust&#39;s exact auto-dereferencing rules?</a>. In short: It will deref as many times as possible (<code>&amp;&amp;String</code> -&gt; <code>&amp;String</code> -&gt; <code>String</code> -&gt; <code>str</code>) and then reference <b>at max once</b> (<code>str</code> -&gt; <code>&amp;str</code>)."}, {"owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1460448144, "post_id": 36426207, "comment_id": 60733610, "body": "@shepmaster, after some reading in forums  and RFC in details. I think this is not duplicate question of <a href=\"http://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules\" title=\"what are rusts exact auto dereferencing rules\">stackoverflow.com/questions/28519997/&hellip;</a>. It is about <code>deref coercions</code>. So the type <code>&amp;&amp;String</code> -&gt; <code>&amp;String</code> in that code because of coecions rules."}], "owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 741, "favorite_count": 1, "closed_date": 1459875966, "answer_count": 0, "score": 6, "last_activity_date": 1459865445, "creation_date": 1459858727, "last_edit_date": 1459865445, "question_id": 36426207, "link": "https://stackoverflow.com/questions/36426207/why-does-rust-not-deref-string-to-str", "closed_reason": "Duplicate", "title": "Why does Rust not deref &amp;&amp;String to &amp;&amp;str?", "body": "<p>This snippet of code:</p>\n\n<pre><code>fn main() {\n    let s = \"hello\".to_string();\n    let keywords = vec![\"hello\", \"bye\"];\n\n    // if keywords.contains(&amp;s.as_str())\n    if keywords.contains(&amp;&amp;s)\n    // ~&gt; expected &amp;&amp;str, found &amp;collections::string::String\n    {\n        println!(\"exists\");\n    }\n}\n</code></pre>\n\n<p>normally, when function expect <code>&amp;str</code> type, you can give a <code>String</code></p>\n\n<pre><code>let s = \"abc\".to_string();\nfoo(&amp;s); // ok,\n</code></pre>\n\n<p>however <code>&amp;&amp;s</code> doesn't deref to <code>&amp;&amp;str</code>, which I think is inconsistent.</p>\n"}, {"tags": ["rust", "docopt"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 1, "creation_date": 1459847396, "post_id": 36421813, "comment_id": 60458236, "body": "From the <a href=\"https://github.com/docopt/docopt.rs\" rel=\"nofollow noreferrer\">README</a> it looks like Docopt would set <code>cmd_start</code>, <code>cmd_stop</code>, etc to <code>true</code> in your struct depending on which command was called. Do you have those fields defined in your struct?"}, {"owner": {"reputation": 1839, "user_id": 637596, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7315e751540cc141ff8c139e524e2e2f?s=128&d=identicon&r=PG", "display_name": "Daniel Wehner", "link": "https://stackoverflow.com/users/637596/daniel-wehner"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1459850424, "post_id": 36421813, "comment_id": 60460485, "body": "Thanks a lot, I think I was just blind!"}], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 3, "last_activity_date": 1459867871, "creation_date": 1459867871, "answer_id": 36429829, "question_id": 36421813, "link": "https://stackoverflow.com/questions/36421813/how-do-i-retrieve-the-subcommand-used-when-using-docopt-in-rust/36429829#36429829", "title": "How do I retrieve the subcommand used when using docopt in Rust?", "body": "<p>If you have <code>cmd_start: bool</code>, <code>cmd_stop: bool</code>, etc in your struct, Docopt will set the used one to <code>true</code>.</p>\n\n<p>More info here: <a href=\"https://github.com/docopt/docopt.rs#struct-field-name-mapping\" rel=\"nofollow\">https://github.com/docopt/docopt.rs#struct-field-name-mapping</a>, copied below for posterity:</p>\n\n<blockquote>\n  <h2>Struct field name mapping</h2>\n  \n  <p>The field names of the struct map like this:</p>\n\n<pre><code>-g            =&gt; flag_g\n--group       =&gt; flag_group\n--group &lt;arg&gt; =&gt; flag_group\nFILE          =&gt; arg_FILE\n&lt;file&gt;        =&gt; arg_file\nbuild         =&gt; cmd_build\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 1839, "user_id": 637596, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7315e751540cc141ff8c139e524e2e2f?s=128&d=identicon&r=PG", "display_name": "Daniel Wehner", "link": "https://stackoverflow.com/users/637596/daniel-wehner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 252, "favorite_count": 0, "accepted_answer_id": 36429829, "answer_count": 1, "score": 1, "last_activity_date": 1459867871, "creation_date": 1459847212, "last_edit_date": 1459866191, "question_id": 36421813, "link": "https://stackoverflow.com/questions/36421813/how-do-i-retrieve-the-subcommand-used-when-using-docopt-in-rust", "title": "How do I retrieve the subcommand used when using docopt in Rust?", "body": "<p>I am writing a command line utility which has a couple of subcommands:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Usage: \n    example start [-w | --write] [-F | --force] &lt;name&gt;\n    example stop [-F | --force] &lt;name&gt;\n    example restart [-F | --force] &lt;name&gt;\n    example status [-F | --force] &lt;name&gt;\n    example ls\n    example install &lt;name&gt;\n    example uninstall &lt;name&gt;\n    example show\n    example edit &lt;name&gt;\n    example (-h | --help)\n\nOptions:\n    -h --help     Show help message\n    -F --force    Force start/stop/restart\n    -w --write    TODO\n</code></pre>\n\n<p>This parses out the arguments perfectly, but it doesn't allow me to retrieve the subcommand which was used.</p>\n\n<p>An alternative would be to use <code>example &lt;command&gt; &lt;name&gt; [&lt;args&gt;...]</code> but this no longer gives you the features of docopt and you could parse it using different methods again ...</p>\n\n<p>Any idea how to setup the docopt inside Rust to deal with that?</p>\n"}, {"tags": ["reflection", "rust"], "answers": [{"comments": [{"owner": {"reputation": 936, "user_id": 2727470, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/a76EI.jpg?s=128&g=1", "display_name": "Ixrec", "link": "https://stackoverflow.com/users/2727470/ixrec"}, "edited": false, "score": 9, "creation_date": 1459844413, "post_id": 36416972, "comment_id": 60456140, "body": "Interestingly, <a href=\"https://doc.rust-lang.org/std/any/\" rel=\"nofollow noreferrer\">the documentation for std::any</a> uses the phrase &quot;runtime reflection&quot;, though it seems likely that what they&#39;re referring to is not what most of us mean by &quot;runtime reflection&quot; since this only enables type checking and type casting rather than inspecting the contents of an arbitrary struct."}, {"owner": {"reputation": 837, "user_id": 5784051, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/smjWQ.jpg?s=128&g=1", "display_name": "Xwtek", "link": "https://stackoverflow.com/users/5784051/xwtek"}, "edited": false, "score": 2, "creation_date": 1459851481, "post_id": 36416972, "comment_id": 60461269, "body": "OK.  By reflection,  I mean RTTI."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1459859849, "post_id": 36416972, "comment_id": 60467393, "body": "You can use <code>TypeId</code> without <code>Any</code> for limited forms of ad-hoc per type special casing, without runtime cost."}, {"owner": {"user_type": "does_not_exist", "display_name": "user90843"}, "edited": false, "score": 0, "creation_date": 1513844132, "post_id": 36416972, "comment_id": 82808744, "body": "I would argue that the &quot;runtime&quot; part is bogus"}, {"owner": {"reputation": 4124, "user_id": 2828480, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/30ce285bfd170cf3834d9591fab207e0?s=128&d=identicon&r=PG&f=1", "display_name": "Konrad", "link": "https://stackoverflow.com/users/2828480/konrad"}, "edited": false, "score": 0, "creation_date": 1536141947, "post_id": 36416972, "comment_id": 91314715, "body": "So Rust is pretty much like C++ in this case... like <code>dynamic_cast</code> just RTTI"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 4124, "user_id": 2828480, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/30ce285bfd170cf3834d9591fab207e0?s=128&d=identicon&r=PG&f=1", "display_name": "Konrad", "link": "https://stackoverflow.com/users/2828480/konrad"}, "edited": false, "score": 2, "creation_date": 1536142116, "post_id": 36416972, "comment_id": 91314825, "body": "@Konrad: No.  Rust doesn&#39;t have any RTTI, C++ does (assuming you don&#39;t disable it).  Rust has no equivalent to <code>dynamic_cast</code>, because it doesn&#39;t have the necessary RTTI."}, {"owner": {"reputation": 4124, "user_id": 2828480, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/30ce285bfd170cf3834d9591fab207e0?s=128&d=identicon&r=PG&f=1", "display_name": "Konrad", "link": "https://stackoverflow.com/users/2828480/konrad"}, "edited": false, "score": 0, "creation_date": 1536142443, "post_id": 36416972, "comment_id": 91315015, "body": "@DK oh right. I just read that it has typeid assigned at compile time.So it&#39;s pretty much like <code>typeid</code> in C++ but wait C++ has any too <a href=\"https://en.cppreference.com/w/cpp/utility/any\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/utility/any</a>"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 72, "last_activity_date": 1533509017, "last_edit_date": 1533509017, "creation_date": 1459829378, "answer_id": 36416972, "question_id": 36416773, "link": "https://stackoverflow.com/questions/36416773/how-does-rust-implement-reflection/36416972#36416972", "title": "How does Rust implement reflection?", "body": "<p>First of all, Rust doesn't have reflection; reflection implies you can get details about a type at runtime, like the fields, methods, interfaces it implements, <em>etc.</em>  You <em>can not</em> do this with Rust.  The closest you can get is explicitly implementing (or deriving) a trait that provides this information.</p>\n\n<p>Each type gets a <code>TypeId</code> assigned to it at compile time.  Because having globally ordered IDs is <em>hard</em>, the ID is an integer derived from a combination of the type's definition, and assorted metadata about the crate in which it's contained.  To put it another way: they're not assigned in any sort of order, they're just <em>hashes</em> of the various bits of information that go into defining the type. [1]</p>\n\n<p>If you look at the <a href=\"http://doc.rust-lang.org/src/core/any.rs.html\" rel=\"noreferrer\">source for the <code>Any</code> trait</a>, you'll see the single implementation for <code>Any</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T: 'static + ?Sized &gt; Any for T {\n    fn get_type_id(&amp;self) -&gt; TypeId { TypeId::of::&lt;T&gt;() }\n}\n</code></pre>\n\n<p>(The bounds can be <em>informally</em> reduced to \"all types that aren't borrowed from something else\".)</p>\n\n<p>You can also find the definition of <code>TypeId</code>:</p>\n\n<pre><code>pub struct TypeId {\n    t: u64,\n}\n\nimpl TypeId {\n    pub const fn of&lt;T: ?Sized + 'static&gt;() -&gt; TypeId {\n        TypeId {\n            t: unsafe { intrinsics::type_id::&lt;T&gt;() },\n        }\n    }\n}\n</code></pre>\n\n<p><code>intrinsics::type_id</code> is an internal function recognised by the compiler that, given a type, returns its internal type ID.  This call just gets replaced at compile time with the literal integer type ID; there's no <em>actual</em> call here. [2]  That's how <code>TypeId</code> knows what a type's ID is.  <code>TypeId</code>, then, is just a wrapper around this <code>u64</code> to hide the implementation details from users.  If you find it conceptually simpler, you can just think of a type's <code>TypeId</code> as being a constant 64-bit integer that the compiler just <em>knows</em> at compile time.</p>\n\n<p><code>Any</code> forwards to this from <code>get_type_id</code>, meaning that <code>get_type_id</code> is <em>really</em> just binding the trait method to the appropriate <code>TypeId::of</code> method.  It's just there to ensure that if you have an <code>Any</code>, you can find out the original type's <code>TypeId</code>.</p>\n\n<p>Now, <code>Any</code> is implemented for <em>most</em> types, but this doesn't mean that all those types <em>actually have</em> an <code>Any</code> implementation floating around in memory.  What actually happens is that the compiler only generates the actual code for a type's <code>Any</code> implementation if <em>someone</em> writes code that requires it. [3]  In other words, if you never use the <code>Any</code> implementation for a given type, the compiler will never generate it.</p>\n\n<p>This is how Rust fulfills \"do not pay for what do you not use\": if you never pass a given type as <code>&amp;Any</code> or <code>Box&lt;Any&gt;</code>, then the associated code is never generated and never takes up any space in your compiled binary.</p>\n\n<hr>\n\n<p>[1]: Frustratingly, this means that a type's <code>TypeId</code> can <em>change value</em> depending on precisely <em>how</em> the library gets compiled, to the point that compiling it as a dependency (as opposed to as a standalone build) causes <code>TypeId</code>s to change.</p>\n\n<p>[2]: Insofar as I am aware.  I <em>could</em> be wrong about this, but I'd be <em>really</em> surprised if that's the case.</p>\n\n<p>[3]: This is <em>generally</em> true of generics in Rust.</p>\n"}], "owner": {"reputation": 837, "user_id": 5784051, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/smjWQ.jpg?s=128&g=1", "display_name": "Xwtek", "link": "https://stackoverflow.com/users/5784051/xwtek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15782, "favorite_count": 11, "accepted_answer_id": 36416972, "answer_count": 1, "score": 61, "last_activity_date": 1533509017, "creation_date": 1459828003, "last_edit_date": 1459868235, "question_id": 36416773, "link": "https://stackoverflow.com/questions/36416773/how-does-rust-implement-reflection", "title": "How does Rust implement reflection?", "body": "<p>Rust has the <code>Any</code> trait, but it also has a \"do not pay for what you do not use\" policy. How does Rust implement reflection?</p>\n\n<p>My guess is that Rust uses lazy tagging. Every type is initially unassigned, but later if an instance of the type is passed to a function expecting an <code>Any</code> trait, the type is assigned a <code>TypeId</code>.</p>\n\n<p>Or maybe Rust puts a <code>TypeId</code> on every type that its instance is possibly passed to that function? I guess the former would be expensive. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 35010, "user_id": 703016, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/6daa32d7171f74efb1b663c6edc32e3b?s=128&d=identicon&r=PG&f=1", "display_name": "user703016", "link": "https://stackoverflow.com/users/703016/user703016"}, "edited": false, "score": 0, "creation_date": 1459829172, "post_id": 36416524, "comment_id": 60448912, "body": "@VeronikaPr&#252;ssels you have absolutely right, it is a stupid question sorry for it but did not see him  I would have to be tested more, the first thing I did was search the documentation and and I do not analyze well perhaps influenced by other things <a href=\"http://ideone.com/LHtu8p\" rel=\"nofollow noreferrer\">ideone.com/LHtu8p</a>"}], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459827715, "post_id": 36416671, "comment_id": 60448494, "body": "I was more aware of the new language, which did not see this error sorry for it, and thanks for your time"}], "tags": [], "owner": {"reputation": 8771, "user_id": 2050, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/2d1e9a607c47a89730352dd7b9dacaab?s=128&d=identicon&r=PG", "display_name": "Eric Platon", "link": "https://stackoverflow.com/users/2050/eric-platon"}, "is_accepted": true, "score": 4, "last_activity_date": 1459827329, "creation_date": 1459827329, "answer_id": 36416671, "question_id": 36416524, "link": "https://stackoverflow.com/questions/36416524/expected-bool-found-i32-when-using-the-operator/36416671#36416671", "title": "Expected bool, found i32 when using the operator %", "body": "<p>The type of <code>x % 2</code> matters. It is an integer, but <code>if</code> expects a boolean value. In this respect, Rust is a bit more like Java, and less as C.</p>\n\n<p>This works, probably as expected:</p>\n\n<pre><code>fn b(value: i32) {\n    if (value % 2) == 0 {\n        println!(\"1\");        \n    } else{\n        println!(\"2\");\n    }\n}\n\nfn main() {\n    b(2);\n}\n</code></pre>\n\n<p>Exactly as @Veronika Pr\u00fcssels has commented at the same time.</p>\n"}, {"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459828732, "post_id": 36416754, "comment_id": 60448791, "body": "you are right <a href=\"https://ideone.com/LHtu8p\" rel=\"nofollow noreferrer\">ideone.com/LHtu8p</a> but I would have to be tested more, the first thing I did was search the documentation and not I stop thinking about what you said thanks for the declaration of implicit conversions, I was more aware of the error messaging, I will not try == 0 or otherwise"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 5, "last_activity_date": 1459827844, "creation_date": 1459827844, "answer_id": 36416754, "question_id": 36416524, "link": "https://stackoverflow.com/questions/36416524/expected-bool-found-i32-when-using-the-operator/36416754#36416754", "title": "Expected bool, found i32 when using the operator %", "body": "<p>In C, C++ and probably other languages, integers can be implicitly converted to booleans. That's not the case in Rust: Rust will never perform implicit conversions between primitive types (whether it's integer to integer, integer to float, integer to boolean, etc.), in order to avoid surprises.</p>\n\n<p>All you need to do is add <code>!= 0</code> to the expression that evaluates to an integer (you may need to add parentheses to get the correct operator precedence) to turn it into a boolean expression that behaves like in C or C++.</p>\n\n<pre><code>test.filter(|x| -&gt; bool { \n    if x % 2 != 0 {\n      return true;\n    } else {\n      return false;\n    }\n});\n</code></pre>\n\n<p>or just:</p>\n\n<pre><code>test.filter(|x| x % 2 != 0);\n</code></pre>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1641, "favorite_count": 1, "accepted_answer_id": 36416671, "answer_count": 2, "score": 1, "last_activity_date": 1459865779, "creation_date": 1459826267, "last_edit_date": 1459865779, "question_id": 36416524, "link": "https://stackoverflow.com/questions/36416524/expected-bool-found-i32-when-using-the-operator", "title": "Expected bool, found i32 when using the operator %", "body": "<p>Maybe this is normal behavior, but someone can help me with this:</p>\n\n<pre><code>trait Flujo&lt;T: std::clone::Clone&gt; {\n    fn filter&lt;F: Fn(T)-&gt;bool&gt;(&amp;self, prot: F);\n}   \n\nimpl&lt;T: std::clone::Clone&gt; Flujo&lt;T&gt; for Test&lt;T&gt; {\n     fn filter&lt;F: Fn(T)-&gt;bool&gt;(&amp;self, prot: F ){ \n     ..//\n     }\n}\n</code></pre>\n\n<p>in this simple test works </p>\n\n<pre><code>test.filter(|x| -&gt; bool{ \n\n    true\n});\n</code></pre>\n\n<p>but when I try this</p>\n\n<pre><code>test.filter(|x| -&gt; bool{ \n    //return x % 2 ? true : false;\n\n    if x % 2 {   &lt;-- Error\n      return true;            \n    } else{\n      return false;\n    }\n});\n</code></pre>\n\n<hr>\n\n<p>Error:</p>\n\n<pre><code>mismatched types:\n expected `bool`,\n    found `i32` [E0308]\nif value % 2 {\n   ^~~~~~~~~\n</code></pre>\n\n<hr>\n\n<p>I searched and read, but the second link not quite understand, can someone explain me why this fails.</p>\n\n<p><a href=\"https://doc.rust-lang.org/reference.html#arithmetic-operators\" rel=\"nofollow\">https://doc.rust-lang.org/reference.html#arithmetic-operators</a></p>\n\n<p><a href=\"https://doc.rust-lang.org/std/ops/trait.Rem.html\" rel=\"nofollow\">https://doc.rust-lang.org/std/ops/trait.Rem.html</a></p>\n\n<hr>\n\n<p>Update:</p>\n\n<p>You can see with this test, it is not the same code, but the same error is obtained:</p>\n\n<p><kbd><a href=\"https://play.rust-lang.org/?gist=c4d931838894b202e52c111c31d0b9f1&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">play.rust</a></kbd></p>\n"}, {"tags": ["loops", "parsing", "vector", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1459841513, "post_id": 36416680, "comment_id": 60454322, "body": "Note that this would only allow your function to be used with iterators returned by the <code>iter()</code> method on slices, but not with, say, <code>iter().map(|x| ...))</code> because it has another type. You need to use generics here, as @FrancisGagn&#233; suggests."}], "tags": [], "owner": {"reputation": 3023, "user_id": 1691145, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/4b6744a17b41f3b0e5c7554a43a04094?s=128&d=identicon&r=PG", "display_name": "Justin Raymond", "link": "https://stackoverflow.com/users/1691145/justin-raymond"}, "is_accepted": false, "score": 0, "last_activity_date": 1459827374, "creation_date": 1459827374, "answer_id": 36416680, "question_id": 36416208, "link": "https://stackoverflow.com/questions/36416208/how-do-i-write-the-type-of-an-iterator-passed-to-a-function/36416680#36416680", "title": "How do I write the type of an iterator passed to a function?", "body": "<p>The solution was to add</p>\n\n<pre><code>use std::slice::Iter;\n</code></pre>\n\n<p>and the type was</p>\n\n<pre><code>fun foo&lt;'a&gt;(itr : &amp;mut Iter&lt;'a, i32&gt;) {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3023, "user_id": 1691145, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/4b6744a17b41f3b0e5c7554a43a04094?s=128&d=identicon&r=PG", "display_name": "Justin Raymond", "link": "https://stackoverflow.com/users/1691145/justin-raymond"}, "edited": false, "score": 0, "creation_date": 1459871651, "post_id": 36416695, "comment_id": 60476853, "body": "Awesome! FYI if you have mutually recursive functions like in a recursive descent parser, rust will not be compile if you use generics, but if you use a trait object it will work."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1459827455, "creation_date": 1459827455, "answer_id": 36416695, "question_id": 36416208, "link": "https://stackoverflow.com/questions/36416208/how-do-i-write-the-type-of-an-iterator-passed-to-a-function/36416695#36416695", "title": "How do I write the type of an iterator passed to a function?", "body": "<p>There are many types of iterators; most of the time, what you really want is a function that is able to consume any of them. To do this, the idiomatic solution is to use generics.</p>\n\n<pre><code>fn foo&lt;'a, T: Iterator&lt;Item=&amp;'a i32&gt;&gt;(mut itr: T) {\n    while let Some(c) = itr.next() {\n        if *c != 0 {\n            break;\n        }\n        println!(\"{}\", *c);\n    }\n}\n\nfn main() {\n    let v = vec![0; 10];\n    let mut itr = v.iter();\n    while let Some(c) = itr.next() {\n        foo(itr);\n    }\n}\n</code></pre>\n\n<p>The code above doesn't compile though, since it moves <code>itr</code> into <code>foo</code>, then tries to use it again on the <code>while let</code>. To solve this, we need to pass the iterator by reference instead.</p>\n\n<pre><code>fn foo&lt;'a, T: Iterator&lt;Item=&amp;'a i32&gt;&gt;(itr: &amp;mut T) {\n    while let Some(c) = itr.next() {\n        if *c != 0 {\n            break;\n        }\n        println!(\"{}\", *c);\n    }\n}\n\nfn main() {\n    let v = vec![0; 10];\n    let mut itr = v.iter();\n    while let Some(c) = itr.next() {\n        foo(&amp;mut itr);\n    }\n}\n</code></pre>\n\n<p>Instead of generics, we can also use a trait object:</p>\n\n<pre><code>fn foo&lt;'a&gt;(itr: &amp;mut Iterator&lt;Item=&amp;'a i32&gt;) {\n    while let Some(c) = itr.next() {\n        if *c != 0 {\n            break;\n        }\n        println!(\"{}\", *c);\n    }\n}\n\nfn main() {\n    let v = vec![0; 10];\n    let mut itr = v.iter();\n    while let Some(c) = itr.next() {\n        foo(&amp;mut itr);\n    }\n}\n</code></pre>\n\n<p>The chapter on <a href=\"http://doc.rust-lang.org/stable/book/trait-objects.html\" rel=\"nofollow\">trait objects</a> from the Rust book explains the difference between these solutions.</p>\n"}], "owner": {"reputation": 3023, "user_id": 1691145, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/4b6744a17b41f3b0e5c7554a43a04094?s=128&d=identicon&r=PG", "display_name": "Justin Raymond", "link": "https://stackoverflow.com/users/1691145/justin-raymond"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 36416695, "answer_count": 2, "score": 0, "last_activity_date": 1459865874, "creation_date": 1459824085, "last_edit_date": 1459865874, "question_id": 36416208, "link": "https://stackoverflow.com/questions/36416208/how-do-i-write-the-type-of-an-iterator-passed-to-a-function", "title": "How do I write the type of an iterator passed to a function?", "body": "<p>I am trying to write a parser that passes an iterator over a vector to a function. The code is similar to this:</p>\n\n<pre><code>fn foo(itr : ???) {\n    while let Some(c) = itr.next() {\n        if *c != 0 {\n            break;\n        }\n        println!(\"{}\", *c);\n    }\n}\n\nfn main() {\n    let v = vec![0; 10];\n    let itr = v.iter();\n    while let Some(c) = itr.next() {\n        foo(itr);\n    }\n}\n</code></pre>\n\n<p>I am not sure how to write the type of the iterator over the vector. I tried putting the wrong type <code>u32</code> to see what type <code>rustc</code> expected: <code>core::slice::Iter&lt;'_, _&gt;</code>. When I try to use <code>core::slice</code> rustc complains <code>Use of undeclared type or module 'core::slice'</code></p>\n"}, {"tags": ["rust", "lifetime", "ownership"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459820089, "post_id": 36415348, "comment_id": 60446725, "body": "Two notes: use <code>&amp;[T]</code> instead of <code>&amp;Vec&lt;T&gt;</code> 99.99% of the time. Also, what happens to your <code>test</code> function when an empty vector is passed to it? Where would that reference live?"}, {"owner": {"reputation": 128, "user_id": 609117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57e12e58d8e37971beec747ef6a0558e?s=128&d=identicon&r=PG", "display_name": "Trevor", "link": "https://stackoverflow.com/users/609117/trevor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459820643, "post_id": 36415348, "comment_id": 60446881, "body": "@Shepmaster So I&#39;m actually using <code>Vec&lt;T&gt;</code> to stand in for a custom functional-style list type that I&#39;m working on, just to keep the question simple and focus on the errors I&#39;m getting.  Also, in the non pared-down version of my code, an empty list <code>panic!</code>s and says there&#39;s nothing to do.  Basically, I tried to cut down on the code to the point where I&#39;d still get my error messages while leaving out anything extraneous."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459820828, "post_id": 36415348, "comment_id": 60446929, "body": "That&#39;s fine, and it&#39;s great to reduce problems! However, the current MCVE attempts to return a reference to a local variable which will cause lifetime errors, <i>possibly</i> preventing me from giving you an answer because I can&#39;t get it to compile. And you should never let your fingers type <code>&amp;Vec&lt;T&gt;</code>, so it shouldn&#39;t even occur in an example ^_^."}, {"owner": {"reputation": 128, "user_id": 609117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57e12e58d8e37971beec747ef6a0558e?s=128&d=identicon&r=PG", "display_name": "Trevor", "link": "https://stackoverflow.com/users/609117/trevor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459822450, "post_id": 36415348, "comment_id": 60447283, "body": "Out of curiosity, why is &amp;[T] preferred over &amp;Vec&lt;T&gt;?"}], "answers": [{"comments": [{"owner": {"reputation": 128, "user_id": 609117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57e12e58d8e37971beec747ef6a0558e?s=128&d=identicon&r=PG", "display_name": "Trevor", "link": "https://stackoverflow.com/users/609117/trevor"}, "edited": false, "score": 0, "creation_date": 1459823415, "post_id": 36415828, "comment_id": 60447530, "body": "So closures that are passed inline have their types and lifetimes inferred from the function they&#39;re being passed to, but closures stored as variables try to determine types and lifetimes without that context?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 128, "user_id": 609117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57e12e58d8e37971beec747ef6a0558e?s=128&d=identicon&r=PG", "display_name": "Trevor", "link": "https://stackoverflow.com/users/609117/trevor"}, "edited": false, "score": 2, "creation_date": 1459823731, "post_id": 36415828, "comment_id": 60447615, "body": "@Trevor I left it a bit vague in the answer because I&#39;m not sure. With a bit of hand waving, I might say things like &quot;early&quot; or &quot;late&quot; bounds, but I&#39;m not sure how accurate that terminology would be, much less the relation to the real reason. The good news is that inlining the closure like that is considered idiomatic."}, {"owner": {"reputation": 128, "user_id": 609117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57e12e58d8e37971beec747ef6a0558e?s=128&d=identicon&r=PG", "display_name": "Trevor", "link": "https://stackoverflow.com/users/609117/trevor"}, "edited": false, "score": 0, "creation_date": 1459825059, "post_id": 36415828, "comment_id": 60447915, "body": "Fair enough!  Thanks for all your help; pointing out my local variable (and it&#39;s associated short lifetime) helped me solve my next issue, which I couldn&#39;t even see because of the errors I originally asked about."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1573248890, "last_edit_date": 1573248890, "creation_date": 1459821380, "answer_id": 36415828, "question_id": 36415348, "link": "https://stackoverflow.com/questions/36415348/type-mismatches-resolving-a-closure-that-takes-arguments-by-reference/36415828#36415828", "title": "Type mismatches resolving a closure that takes arguments by reference", "body": "<p>The short version is that there's a difference between the lifetimes that are inferred if the closure is written inline or stored as a variable. Write the closure inline and remove all the extraneous types:</p>\n\n<pre><code>fn test(points: &amp;[Point]) -&gt; (&amp;Point, f32) {\n    let init = points.first().expect(\"No initial\");\n    fold(&amp;points, (init, 0.), |(q, max_d), p| {\n        let d = 12.;\n        if d &gt; max_d {\n            (p, d)\n        } else {\n            (q, max_d)\n        }\n    })\n}\n</code></pre>\n\n<p>If you truly must have the closure out-of-band, review <a href=\"https://stackoverflow.com/a/46198877/155423\">How to declare a lifetime for a closure argument?</a>.</p>\n\n<p>Additionally, I had to pull the <code>first</code> value from the input array \u2014 you can't return a reference to a local variable. There's no need for lifetime parameters on the method; they will be inferred.</p>\n\n<p>To actually get the code to compile, you need to provide more information about the <code>fold</code> method. Specifically, you have to indicate that the reference passed to the closure has the same lifetime as the argument passed in. Otherwise, it could just be a reference to a local variable:</p>\n\n<pre><code>fn fold&lt;'a, S, T, F&gt;(item: &amp;'a [S], accum: T, f: F) -&gt; T\nwhere\n    F: Fn(T, &amp;'a S) -&gt; T,\n{\n    f(accum, &amp;item[0])\n}\n</code></pre>\n\n<p>The related Rust issue is <a href=\"https://github.com/rust-lang/rust/issues/41078\" rel=\"nofollow noreferrer\">#41078</a>.</p>\n"}], "owner": {"reputation": 128, "user_id": 609117, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57e12e58d8e37971beec747ef6a0558e?s=128&d=identicon&r=PG", "display_name": "Trevor", "link": "https://stackoverflow.com/users/609117/trevor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1096, "favorite_count": 0, "accepted_answer_id": 36415828, "answer_count": 1, "score": 3, "last_activity_date": 1573248890, "creation_date": 1459817727, "last_edit_date": 1520346117, "question_id": 36415348, "link": "https://stackoverflow.com/questions/36415348/type-mismatches-resolving-a-closure-that-takes-arguments-by-reference", "title": "Type mismatches resolving a closure that takes arguments by reference", "body": "<p>I'm encountering a strange pair of errors while trying to compile my Rust code below.  In searching for others with similar problems, I came across <a href=\"https://stackoverflow.com/questions/33807396/type-mismatch-bound-lifetime-parameter-vs-concrete-lifetime-when-filling-a-c\">another question with the same combination of (seemingly opposing) errors</a>, but couldn't generalize the solution from there to my problem.</p>\n\n<p>Basically, I seem to be missing a subtlety in Rust's ownership system.  In trying to compile the (very pared down) code here:</p>\n\n<pre><code>struct Point {\n    x: f32,\n    y: f32,\n}\n\nfn fold&lt;S, T, F&gt;(item: &amp;[S], accum: T, f: F) -&gt; T\nwhere\n    F: Fn(T, &amp;S) -&gt; T,\n{\n    f(accum, &amp;item[0])\n}\n\nfn test&lt;'a&gt;(points: &amp;'a [Point]) -&gt; (&amp;'a Point, f32) {\n    let md = |(q, max_d): (&amp;Point, f32), p: &amp;'a Point| -&gt; (&amp;Point, f32) {\n        let d = p.x + p.y; // Standing in for a function call\n        if d &gt; max_d {\n            (p, d)\n        } else {\n            (q, max_d)\n        }\n    };\n\n    fold(&amp;points, (&amp;Point { x: 0., y: 0. }, 0.), md)\n}\n</code></pre>\n\n<p>I get the following error messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0631]: type mismatch in closure arguments\n  --&gt; src/main.rs:23:5\n   |\n14 |     let md = |(q, max_d): (&amp;Point, f32), p: &amp;'a Point| -&gt; (&amp;Point, f32) {\n   |              ---------------------------------------------------------- found signature of `for&lt;'r&gt; fn((&amp;'r Point, f32), &amp;'a Point) -&gt; _`\n...\n23 |     fold(&amp;points, (&amp;Point { x: 0., y: 0. }, 0.), md)\n   |     ^^^^ expected signature of `for&lt;'r&gt; fn((&amp;Point, f32), &amp;'r Point) -&gt; _`\n   |\n   = note: required by `fold`\n\nerror[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;[closure@src/main.rs:14:14: 21:6] as std::ops::FnOnce&lt;((&amp;Point, f32), &amp;'r Point)&gt;&gt;::Output == (&amp;Point, f32)`\n  --&gt; src/main.rs:23:5\n   |\n23 |     fold(&amp;points, (&amp;Point { x: 0., y: 0. }, 0.), md)\n   |     ^^^^ expected bound lifetime parameter, found concrete lifetime\n   |\n   = note: required by `fold`\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6ab65e62db19fa408c0bb23181768ae4&amp;version=stable\" rel=\"nofollow noreferrer\">(A Rust Playground link for this code, for convenience.)</a></p>\n\n<p>It seems to me that the function I'm supplying to <code>fold</code> should type-check properly... what am I missing here and how can I go about fixing it?</p>\n"}, {"tags": ["lambda", "functional-programming", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1589215871, "last_edit_date": 1589215871, "creation_date": 1459816853, "answer_id": 36415227, "question_id": 36414576, "link": "https://stackoverflow.com/questions/36414576/returning-a-closure-from-a-trait-method-involving-generics-in-rust/36415227#36415227", "title": "Returning a closure from a trait method involving generics in Rust", "body": "<p>The compiler is stopping you because you are trying to lie to it. It's pretty good at seeing through us programmers when we lie.</p>\n\n<p>How did you lie? You said \"I'm going to write a method that takes some arbitrary type (with some restrictions) and then I'm going return a box containing only that type\". You then proceeded to <strong>not</strong> return a box of the passed in value; you inserted wrapper junk, as far as the compiler cares.</p>\n\n<p>Here's a small example:</p>\n\n<pre><code>fn wrapper&lt;F&gt;(f: F) -&gt; Box&lt;F&gt;\nwhere\n    F: Fn(u8) -&gt; u8,\n{\n    Box::new(|x| f(x) + 1)\n}\n</code></pre>\n\n<p>What you really want to say is that you will return something that implements the trait, but without describing how (because you can't specify a closure). You do this with indirection, a boxed trait object: </p>\n\n<pre><code>fn wrapper&lt;F&gt;(f: F) -&gt; Box&lt;Fn(u8) -&gt; u8&gt;\nwhere\n    F: Fn(u8) -&gt; u8 + 'static,\n{\n    Box::new(move |x| f(x) + 1)\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ol>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/21130272/155423\">Return a closure from a function</a></li>\n<li><a href=\"https://stackoverflow.com/q/25445761/155423\">Returning a closure from a function</a></li>\n<li><a href=\"https://stackoverflow.com/q/30641167/155423\">Figuring out return type of closure</a></li>\n</ol>\n"}], "owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 472, "favorite_count": 1, "closed_date": 1589215767, "answer_count": 1, "score": 1, "last_activity_date": 1589215871, "creation_date": 1459812188, "last_edit_date": 1459816406, "question_id": 36414576, "link": "https://stackoverflow.com/questions/36414576/returning-a-closure-from-a-trait-method-involving-generics-in-rust", "closed_reason": "Duplicate", "title": "Returning a closure from a trait method involving generics in Rust", "body": "<p>I'm learning Rust and have encountered a vexing issue involving closures. I've gotten a lot of the basic closure examples to work, but now that I've stepped out of the basic \"make adder\" and \"call on\" examples, things are getting messy. This is the first part of my code, which works:</p>\n\n<pre><code>trait TransformationElt&lt;T, F&gt; where F: Fn(T) -&gt; T {\n    fn get_transform(&amp;self) -&gt; Box&lt;F&gt;;\n}\n\npub struct AddSome { pub x: i64 }\n\nimpl AddSome  {\n    fn the_transform(&amp;self) -&gt; Box&lt;Fn(i64) -&gt; i64&gt; {\n        Box::new(|x: i64| x + 1 as i64)\n    }\n}\n</code></pre>\n\n<p>This successfully returns a heap-allocated closure that adds 1, implementing our <code>AddSome</code> type. I want <code>AddSome</code> to implement <code>TransformationElt</code>, specifically for the type <code>i64</code>:</p>\n\n<pre><code>impl&lt;F: Fn(i64) -&gt; i64&gt; TransformationElt&lt;i64, F&gt; for AddSome  {\n    fn get_transform(&amp;self) -&gt; Box&lt;F&gt; {\n        Box::new(move |x: i64| x + self.x as i64)\n    }\n}\n</code></pre>\n\n<p>After much hackery and trying different things, I still can't get it to compile. The error I typically get is:</p>\n\n<blockquote>\n  <p>src/lex/math/algebra/groups.rs:31:16: 31:46 error: mismatched types:\n   expected <code>F</code>,\n     found <code>[closure@src/lex/math/algebra/groups.rs:31:16: 31:46 self:_]</code>\n  (expected type parameter,\n      found closure) [E0308]</p>\n</blockquote>\n\n<p>How do I get around this seemingly basic issue and implement my \"transform\" type? </p>\n\n<p>One final thing -- I have reasons I want to keep things as closures. I intend to compose them, etc. etc., things where I really do need higher-order functions.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459806590, "post_id": 36413364, "comment_id": 60442606, "body": "Likely duplicate of <a href=\"http://stackoverflow.com/q/32682876/155423\">stackoverflow.com/q/32682876/155423</a>."}], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1461076132, "post_id": 36720608, "comment_id": 61027527, "body": "thanks for your time, and the recommendation of the link for this case"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 7, "last_activity_date": 1461076384, "last_edit_date": 1461076384, "creation_date": 1461074297, "answer_id": 36720608, "question_id": 36413364, "link": "https://stackoverflow.com/questions/36413364/as-i-can-make-the-vector-is-mutable-inside-struct/36720608#36720608", "title": "As I can make the vector is mutable inside struct", "body": "<p>Maybe you are looking for <a href=\"https://doc.rust-lang.org/book/mutability.html#interior-vs-exterior-mutability\" rel=\"noreferrer\">interior mutability</a>. Please, do not use interior mutability loosely, read <a href=\"https://doc.rust-lang.org/std/cell/index.html\" rel=\"noreferrer\">this</a> first.</p>\n\n<pre><code>use std::cell::RefCell;\n\npub struct Test{\n    vec: RefCell&lt;Vec&lt;i32&gt;&gt;,\n}\n\nimpl Test {\n    pub fn created()-&gt;Test {\n        Test {vec: RefCell::new(Vec::new()) }\n    }\n    pub fn add(&amp;self, value: i32){  \n        self.vec.borrow_mut().push(value);\n    }\n}\n\nfn main() {\n    let test = Test::created();\n    test.add(1i32);\n\n    let test1 = Test::created();\n    // test1 = test; // does not work anymore\n}\n</code></pre>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6399, "favorite_count": 1, "accepted_answer_id": 36720608, "answer_count": 1, "score": 4, "last_activity_date": 1461076384, "creation_date": 1459805871, "last_edit_date": 1495540937, "question_id": 36413364, "link": "https://stackoverflow.com/questions/36413364/as-i-can-make-the-vector-is-mutable-inside-struct", "title": "As I can make the vector is mutable inside struct", "body": "<p>As I can make the vector is mutable </p>\n\n<pre><code>pub struct Test&lt;'a&gt;{\n    vec: &amp;'a mut Vec&lt;i32&gt;,\n}\nimpl&lt;'a&gt; Test&lt;'a&gt; {\n    pub fn created()-&gt;Test&lt;'a&gt;{\n        Test {vec: &amp;'a mut Vec::new() }\n    }\n    pub fn add(&amp;self, value: i32){  \n        self.vec.push(value);\n    }\n}\n</code></pre>\n\n<hr>\n\n<pre><code>expected `:`, found `mut`\nTest {vec: &amp;'a mut Vec::new() }\n               ^~~\n</code></pre>\n\n<p>This is a <a href=\"https://stackoverflow.com/questions/29415521/how-to-use-mutable-member-vec\">similar question</a> but </p>\n\n<p>and the answer works, but what if I do not want, you can do this, \"applying the response link\"</p>\n\n<pre><code>pub struct Test{\n    vec: Vec&lt;i32&gt;,\n}\nimpl Test {\n    pub fn created()-&gt;Test {\n        Test {vec: Vec::new() }\n    }\n    pub fn add(&amp;mut self, value: i32){  \n        self.vec.push(value);\n    }\n}\n..//\nlet mut test: my::Test = my::Test::created();\ntest.add(1i32);\n\nlet mut test1: my::Test = my::Test::created();\n\ntest1 = test; &lt;-- I do not want, you can do this\n..//\n</code></pre>\n\n<p>as I can make the vector is mutable, without making it be all the struct</p>\n"}, {"tags": ["rust", "nickel"], "comments": [{"owner": {"reputation": 437, "user_id": 3768769, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b3d7c242ed239afede83d0ac3bc5683f?s=128&d=identicon&r=PG&f=1", "display_name": "Fylux", "link": "https://stackoverflow.com/users/3768769/fylux"}, "edited": false, "score": 1, "creation_date": 1459805938, "post_id": 36408373, "comment_id": 60442324, "body": "Maybe the problem is in  <b>action=&quot;login&quot;</b> which is relative, maybe you have to pass the absolute route."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 437, "user_id": 3768769, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b3d7c242ed239afede83d0ac3bc5683f?s=128&d=identicon&r=PG&f=1", "display_name": "Fylux", "link": "https://stackoverflow.com/users/3768769/fylux"}, "edited": false, "score": 0, "creation_date": 1459817216, "post_id": 36408373, "comment_id": 60445973, "body": "@Fylux I thought the same thing, but changing it to <code>&#47;login</code> didn&#39;t seem to help."}], "answers": [{"comments": [{"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1459963794, "post_id": 36431547, "comment_id": 60528707, "body": "I&#39;m trying to do what you suggested by adding <code>response.set(Connection::close())</code> but when Cargo tries to compile hyper, it crashes because it can&#39;t find openssl.h."}, {"owner": {"reputation": 650, "user_id": 1092644, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a446220154cd626be17c000557b791aa?s=128&d=identicon&r=PG", "display_name": "Rym", "link": "https://stackoverflow.com/users/1092644/rym"}, "reply_to_user": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1459975639, "post_id": 36431547, "comment_id": 60535846, "body": "What platform are you on? If you don&#39;t want ssl support, you might want to change your hyper dependency in your Cargo.toml file to something like        <code>[dependencies.hyper]  default-features = false version = &quot;0.6&quot; # or 0.8 if you&#39;re on that </code>"}, {"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1460054140, "post_id": 36431547, "comment_id": 60578422, "body": "Closing the connection solved my problem. Is there a cleaner way of writing this:  <code>response.headers_mut().set_raw(&quot;Connection&quot;,vec![b&quot;close&quot;.to&zwnj;&#8203;_vec()]);</code>"}, {"owner": {"reputation": 650, "user_id": 1092644, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a446220154cd626be17c000557b791aa?s=128&d=identicon&r=PG", "display_name": "Rym", "link": "https://stackoverflow.com/users/1092644/rym"}, "reply_to_user": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1460066105, "post_id": 36431547, "comment_id": 60584813, "body": "You can use <a href=\"http://docs.nickel.rs/nickel/struct.Response.html#method.set\" rel=\"nofollow noreferrer\"><code>set</code></a>, e.g. <code>response.set(Connection::close())</code> where <code>Connection</code> is imported form <code>hyper::header</code>"}, {"owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1460097930, "post_id": 36431547, "comment_id": 60594313, "body": "I tried that, it complained that <code>Connection</code> didn&#39;t implement the trait <code>Modifier</code> even though I had nickel imported."}, {"owner": {"reputation": 650, "user_id": 1092644, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a446220154cd626be17c000557b791aa?s=128&d=identicon&r=PG", "display_name": "Rym", "link": "https://stackoverflow.com/users/1092644/rym"}, "reply_to_user": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "edited": false, "score": 0, "creation_date": 1460245610, "post_id": 36431547, "comment_id": 60652895, "body": "That sounds like an issue of the hyper version being different from that of the hyper version used by nickel.   You will need to lock the versions in your Cargo.toml to compatible versions. If you&#39;re using nickel 0.7 then you should use hyper 0.6, if you&#39;re on nickel 0.8 then you can use hyper 0.8."}], "tags": [], "owner": {"reputation": 650, "user_id": 1092644, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a446220154cd626be17c000557b791aa?s=128&d=identicon&r=PG", "display_name": "Rym", "link": "https://stackoverflow.com/users/1092644/rym"}, "is_accepted": true, "score": 4, "last_activity_date": 1459872255, "creation_date": 1459872255, "answer_id": 36431547, "question_id": 36408373, "link": "https://stackoverflow.com/questions/36408373/posting-form-data-with-nickel-rs-works-the-first-time-returns-404-subsequent-ti/36431547#36431547", "title": "Posting form data with nickel.rs works the first time, returns 404 subsequent times", "body": "<p>The issue is that you're sending POST data and it's not getting read, which bleeds into the next request (due to keepalive). </p>\n\n<p>To fix, you can either ensure the body of the POST gets read, or add <code>Connection: Close</code> to the response headers to prevent keepalive.</p>\n\n<p>FWIW: This is a <a href=\"https://github.com/hyperium/hyper/issues/309\" rel=\"nofollow\">known issue in hyper</a>, but nickel should add it's own solution to prevent confusion here. If you want to follow updates on this, please subscribe to the <a href=\"https://github.com/nickel-org/nickel.rs/issues/326\" rel=\"nofollow\">issue Shepmaster logged</a> on Github.</p>\n"}], "owner": {"reputation": 369, "user_id": 5173659, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/624d5aeb91c736829677f5ecd9f7bde6?s=128&d=identicon&r=PG&f=1", "display_name": "menawi", "link": "https://stackoverflow.com/users/5173659/menawi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 287, "favorite_count": 0, "accepted_answer_id": 36431547, "answer_count": 1, "score": 3, "last_activity_date": 1475211392, "creation_date": 1459788415, "last_edit_date": 1475211392, "question_id": 36408373, "link": "https://stackoverflow.com/questions/36408373/posting-form-data-with-nickel-rs-works-the-first-time-returns-404-subsequent-ti", "title": "Posting form data with nickel.rs works the first time, returns 404 subsequent times", "body": "<p>I've created the following login form and accompanying template:</p>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>#[macro_use]\nextern crate nickel;\nextern crate mustache;\nextern crate rustc_serialize;\n\nuse std::collections::HashMap;\nuse nickel::{Nickel, MediaType, HttpRouter};\nuse nickel::status::StatusCode;\n\nfn main() {\n    let mut server = Nickel::new();\n    let mut router = Nickel::router();\n\n    router.get(\"/\", middleware!(|request, mut response| {\n        response.set(StatusCode::Ok);\n        response.set(MediaType::Html);\n        return response.send_file(\"assets/login.tpl\");\n    }));\n\n    router.post(\"/login\", middleware!(|request, mut response| {\n        response.set(StatusCode::Ok);\n        response.set(MediaType::Html);\n\n        let mut data: HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\n        data.insert(\"error\", \"hello\");\n        return response.render(\"assets/login.tpl\", &amp;data);\n    }));\n\n    server.utilize(router);\n    server.listen(\"127.0.0.1:6767\");\n}\n</code></pre>\n\n<p><strong>assets/login.tpl</strong></p>\n\n<pre><code>&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf8\"/&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Login&lt;/h1&gt;\n        &lt;form method=\"post\" action=\"login\"&gt;\n            &lt;label for=\"email\"&gt;Email&lt;/label&gt;\n            &lt;input type=\"email\" name=\"email\"/&gt;\n            &lt;br/&gt;\n            &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n            &lt;input type=\"password\" name=\"password\"/&gt;\n            &lt;br/&gt;\n            &lt;button type=\"submit\"&gt;Login&lt;/button&gt;&lt;br/&gt;\n            &lt;a href=\"/register\"&gt;Register&lt;/a&gt;\n        &lt;/form&gt;\n        {{error}}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>When I submit the form the first time, I see the \"hello\" message. \nIf I submit the form again, I see \"Not Found\".</p>\n\n<p>I can't figure out where the problem is.</p>\n"}, {"tags": ["rust", "sdl-2", "rust-crates"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1459780686, "post_id": 36405440, "comment_id": 60427380, "body": "please copy the error as text and not as an image."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1459780975, "creation_date": 1459780975, "answer_id": 36405798, "question_id": 36405440, "link": "https://stackoverflow.com/questions/36405440/unable-to-trace-type-expectation-error-in-rust/36405798#36405798", "title": "Unable to trace type-expectation error in Rust", "body": "<p>The error means that the expression <code>self.player.rect.to_sdl()</code> yields a <code>SdlRect</code>, but that whatever uses that value, expects to be given an <code>Option&lt;SdlRect&gt;</code>. You are calling the <a href=\"http://angrylawyer.github.io/rust-sdl2/sdl2/render/struct.Renderer.html#method.copy\"><code>copy</code></a> of <code>sdl2::render::Renderer</code>, which has the following arguments:</p>\n\n<pre><code>&amp;mut self, texture: &amp;Texture, src: Option&lt;Rect&gt;, dst: Option&lt;Rect&gt;\n</code></pre>\n\n<p>As you can see, you need to pass two <code>Option&lt;Rect&gt;</code>s. The sdl-crate's documentation even says why:</p>\n\n<blockquote>\n  <p>Copies a portion of the texture to the current rendering target.</p>\n  \n  <ul>\n  <li>If <code>src</code> is <code>None</code>, the entire texture is copied.</li>\n  <li>If <code>dst</code> is <code>None</code>, the texture will be stretched to fill the given rectangle.</li>\n  </ul>\n</blockquote>\n"}], "owner": {"reputation": 2912, "user_id": 5666325, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/adqCR.jpg?s=128&g=1", "display_name": "Hunter Lester", "link": "https://stackoverflow.com/users/5666325/hunter-lester"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "accepted_answer_id": 36405798, "answer_count": 1, "score": 2, "last_activity_date": 1459781505, "creation_date": 1459780079, "last_edit_date": 1459781505, "question_id": 36405440, "link": "https://stackoverflow.com/questions/36405440/unable-to-trace-type-expectation-error-in-rust", "title": "Unable to trace type-expectation error in Rust", "body": "<p><strong>Repository</strong><br>\n<a href=\"https://github.com/hunterlester/rusty_arcade\" rel=\"nofollow\">https://github.com/hunterlester/rusty_arcade</a></p>\n\n<p><strong>Versions</strong><br>\nRust: 1.7.0<br>\nsdl2: 0.16.1<br>\nsdl2_image: 0.16.0  </p>\n\n<p><strong>Error</strong>  </p>\n\n<pre><code>src/views/mod.rs:88:13: 93:23 error: mismatched types:\n expected `core::option::Option&lt;sdl2::rect::Rect&gt;`,\n    found `sdl2::rect::Rect`\n(expected enum `core::option::Option`,\n    found struct `sdl2::rect::Rect`) [E0308]\nsrc/views/mod.rs:88             Rectangle {\nsrc/views/mod.rs:89                 x: 0.0,\nsrc/views/mod.rs:90                 y: 0.0,\nsrc/views/mod.rs:91                 w: self.player.rect.w,\nsrc/views/mod.rs:92                 h: self.player.rect.h,\nsrc/views/mod.rs:93             }.to_sdl(),\nsrc/views/mod.rs:88:13: 93:23 help: run `rustc --explain E0308` to see  a detailed explanation\nsrc/views/mod.rs:94:13: 94:38 error: mismatched types:\n expected `core::option::Option&lt;sdl2::rect::Rect&gt;`,\n    found `sdl2::rect::Rect`\n(expected enum `core::option::Option`,\n    found struct `sdl2::rect::Rect`) [E0308]\nsrc/views/mod.rs:94             self.player.rect.to_sdl()\n</code></pre>\n\n<p><strong>Tracking it down</strong><br>\nLines 93 and 94 of the specified file.</p>\n\n<pre><code>phi.renderer.copy(&amp;mut self.player.tex,\n            Rectangle {\n                x: 0.0,\n                y: 0.0,\n                w: self.player.rect.w,\n                h: self.player.rect.h,\n            }.to_sdl(), // Line 93\n            self.player.rect.to_sdl() // Line 94\n        );\n</code></pre>\n\n<p>I'm assuming this has something to do with what the <code>.to_sdl()</code> method is returning.</p>\n\n<p><strong>to_sdl method</strong>  </p>\n\n<pre><code>impl Rectangle {\n    pub fn to_sdl(self) -&gt; SdlRect {\n        assert!(self.w &gt;= 0.0 &amp;&amp; self.h &gt;= 0.0);\n\n        SdlRect::new(self.x as i32, self.y as i32, self.w as u32,  self.h as u32)\n    }\n</code></pre>\n\n<p>to_sdl returns an SdlRect which is in use at top of file:</p>\n\n<pre><code>use sdl2::rect::Rect as SdlRect;\n</code></pre>\n\n<p><strong>sdl2 source</strong><br>\n<a href=\"https://github.com/AngryLawyer/rust-sdl2/blob/master/src/sdl2/rect.rs\" rel=\"nofollow\">https://github.com/AngryLawyer/rust-sdl2/blob/master/src/sdl2/rect.rs</a></p>\n\n<pre><code>#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\npub struct Rect {\n    raw: ll::SDL_Rect,\n}\n\nimpl Rect {\n\npub fn new(x: i32, y: i32, width: u32, height: u32) -&gt; Rect {\n    let raw = ll::SDL_Rect {\n        x: clamp_position(x),\n        y: clamp_position(y),\n        w: clamp_size(width) as i32,\n        h: clamp_size(height) as i32,\n    };\n    Rect { raw: raw }\n}\n</code></pre>\n\n<p>I don't see where <code>sdl2::rect::Rect</code> is expected to be wrapped in a <code>core::option::Option</code> enum type.  </p>\n\n<p>If you happen to be familiar with the tutorial that I'm following, you'll notice that I'm using a different version of <code>sdl2_image</code> than specified in the tutorial because the specified has been yanked from Crates.</p>\n\n<p><code>sdl2_image</code> depends on a different version of <code>sdl2</code> which I had to match in order to take care of other errors.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1343, "user_id": 144432, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/sNtFB.jpg?s=128&g=1", "display_name": "Cengiz Can", "link": "https://stackoverflow.com/users/144432/cengiz-can"}, "edited": false, "score": 0, "creation_date": 1459724614, "post_id": 36392323, "comment_id": 60401470, "body": "Can you share the whole file, in <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">play.rust-lang.org</a> ?"}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 1343, "user_id": 144432, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/sNtFB.jpg?s=128&g=1", "display_name": "Cengiz Can", "link": "https://stackoverflow.com/users/144432/cengiz-can"}, "edited": false, "score": 0, "creation_date": 1459724791, "post_id": 36392323, "comment_id": 60401521, "body": "@CengizCan sure looks update"}], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459728055, "post_id": 36392488, "comment_id": 60402223, "body": "thanks really is useful, but I have a question, I have to create as many, let extended = &amp;ops_codeX; as functions I have? , there is no other way to do this without creating let. edit: I&#39;m new to Rust but I think your update is what I use, thanks for your time"}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 1, "creation_date": 1459728175, "post_id": 36392488, "comment_id": 60402256, "body": "The let is to essentially use a static function as a closure. So it is needed once per static function(for the first alternative). Did some more reading on the topic, I&#39;ll extend my answer to explain further."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459729264, "post_id": 36392488, "comment_id": 60402504, "body": "thanks for the details but I can not give more votes sorry"}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459729601, "post_id": 36392488, "comment_id": 60402568, "body": "Of course, no problem. Just wanted to improve my answer as I further understood the issue. :)"}], "tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": true, "score": 3, "last_activity_date": 1459729361, "last_edit_date": 1459729361, "creation_date": 1459725776, "answer_id": 36392488, "question_id": 36392323, "link": "https://stackoverflow.com/questions/36392323/borrowed-value-does-not-live-long-enough-in-this-case-vecfni32-i32/36392488#36392488", "title": "borrowed value does not live long enough in this case ( Vec&lt;&amp;Fn(i32) -&gt; i32&gt; )", "body": "<p>What you are doing here is creating a Vec of closures. In Rust static functions are treated slightly differently from closures, so when we create the reference a closure is actually created. If we do that after creating the Vec the resulting closure gets a shorter lifetime than the Vec, which is an error. We can instead use a let to create the closure <em>before</em> the Vec, giving a long enough lifetime, outliving the Vec:</p>\n\n<pre><code>fn main() {\n    let extended = &amp;ops_code1;\n\n    let mut v: Vec&lt;&amp;Fn(i32) -&gt; i32&gt; = Vec::new();\n\n    // Note that placing it here does not work:\n    // let extended = &amp;ops_code1;\n\n    v.push(extended);\n    //v.push(&amp;ops_code2);\n    //v.push(&amp;ops_code3);\n\n}\n\nfn ops_code1(value: i32) -&gt; i32 {\n    println!(\"ops_code1 {}\", value);\n    value\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2027663caa7bce8d9bb779cf06bd711e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a></p>\n\n<p>However, if you only use static functions - and not closures - the following also works fine, and lets you avoid the extra let:</p>\n\n<pre><code>fn main() {\n    let mut v: Vec&lt;fn(i32) -&gt; i32&gt; = Vec::new();\n\n    v.push(ops_code1);\n    v.push(ops_code2);\n}\n\nfn ops_code1(value: i32) -&gt; i32 {\n    println!(\"ops_code1 {}\", value);\n    value\n}\n\nfn ops_code2(value: i32) -&gt; i32 {\n    println!(\"ops_code2 {}\", value);\n    value\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=db55f6ae6ba1c4eeab5ad9b4b9bb02bc&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a></p>\n\n<p>A third option is to use boxed closures, which let's you use both closures and static functions without the extra lets, but with its own trade-offs:</p>\n\n<pre><code>fn main() {\n    let mut v: Vec&lt;Box&lt;Fn(i32) -&gt; i32&gt;&gt; = Vec::new();\n\n    v.push(Box::new(ops_code1));\n    v.push(Box::new(ops_code2));\n\n    for f in v {\n      f(1);\n    }\n}\n\nfn ops_code1(value: i32) -&gt; i32 {\n    println!(\"ops_code1 {}\", value);\n    value\n}\n\nfn ops_code2(value: i32) -&gt; i32 {\n    println!(\"ops_code2 {}\", value);\n    value\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4f2799809d9c1d5bc2dcd6233852b83b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a></p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 652, "favorite_count": 0, "accepted_answer_id": 36392488, "answer_count": 1, "score": 3, "last_activity_date": 1459729361, "creation_date": 1459724524, "last_edit_date": 1459724757, "question_id": 36392323, "link": "https://stackoverflow.com/questions/36392323/borrowed-value-does-not-live-long-enough-in-this-case-vecfni32-i32", "title": "borrowed value does not live long enough in this case ( Vec&lt;&amp;Fn(i32) -&gt; i32&gt; )", "body": "<p>I am having this error, other times I had something similar and I have been able to solve, in different ways but now is not how to solve in this case:</p>\n\n<blockquote>\n  <p>borrowed value does not live long enough in</p>\n</blockquote>\n\n<p>I moved the code that fails one more simple, but I can not find the error:</p>\n\n<pre><code>fn main(){\n\n    let mut v: Vec&lt;&amp;Fn(i32) -&gt; i32&gt; = Vec::new();\n\n    v.push(&amp;ops_code1);\n    //v.push(&amp;ops_code2);\n    //v.push(&amp;ops_code3);\n}\n\nfn ops_code1(value: i32) -&gt; i32 {\n..//\n</code></pre>\n\n<blockquote>\n  <p>error: borrowed value does not live long enough </p>\n  \n  <p>v.push(&amp;ops_code1);</p>\n</blockquote>\n\n<p><kbd><a href=\"https://play.rust-lang.org/?gist=974426b4f90adb0775e1d58d74e8d6c2&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">play.rust</a></kbd></p>\n"}, {"tags": ["rust", "quickcheck"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1459716741, "post_id": 36390808, "comment_id": 60398868, "body": "You can&#39;t. The <code>&#39;static</code> bound means implementations of <code>Arbitrary</code> cannot contain borrowed data. This restriction may be lifted once <code>panic::recover</code> (or whatever name it ends up being) is stabilized, but I&#39;m not sure."}, {"owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1459718632, "post_id": 36390808, "comment_id": 60399611, "body": "Ah, okay, well that&#39;s pretty definite answer. The stabilization discussion is <a href=\"https://github.com/rust-lang/rust/issues/27719\" rel=\"nofollow noreferrer\">here</a>? Is the only reason this limitation exists as the documentation states, owing to running each test in its own thread? If tests were run serially, would the limitation be lifted or would there be a follow-on complication?"}, {"owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1459718876, "post_id": 36390808, "comment_id": 60399708, "body": "Also, thank you for the super useful testing library! :)"}, {"owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "edited": false, "score": 0, "creation_date": 1459719190, "post_id": 36390808, "comment_id": 60399831, "body": "@troutwine Won&#39;t <code>impl Arbitrary for C&lt;&#39;statc&gt;</code> work? In any case an <code>Arbitrary</code> instance for non static data doesn&#39;t make much sense either way. Consider the call to <code>g.gen::&lt;&amp;str&gt;()</code> which won&#39;t compile as there is no implementation of <code>Rand</code> for <code>&amp;str</code> (what could that &amp;str be except a static string?)."}, {"owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "reply_to_user": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "edited": false, "score": 0, "creation_date": 1459719966, "post_id": 36390808, "comment_id": 60400109, "body": "@Mar very likely I need to hit the docs again. This is motivated by my first non-toy Rust project. What I&#39;m doing is writing QC test to validate a parser, property being that <code>parse . format</code> ought to be identity, cribbing Haskell syntax a bit. Have need to generate arbitrary struct instances which contain &amp;str. Suppose that this is fundamentally flawed, though, as they won&#39;t be the <i>same</i> references anyhow."}], "answers": [{"comments": [{"owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "edited": false, "score": 0, "creation_date": 1459733927, "post_id": 36392226, "comment_id": 60403536, "body": "Tremendously helpful! Thank you very much!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1459723911, "creation_date": 1459723911, "answer_id": 36392226, "question_id": 36390808, "link": "https://stackoverflow.com/questions/36390808/how-to-create-a-quickcheck-arbitrary-of-a-struct-containing-a-reference/36392226#36392226", "title": "How to create a Quickcheck Arbitrary of a struct containing a reference?", "body": "<p>You can't do this for two reasons. First, <code>Arbitrary</code> has a <code>'static</code> bound, which means that the types that implement <code>Arbitrary</code> may not have references, unless their lifetime is <code>'static</code>. This ensures that instances don't refer to objects that they don't \"own\".</p>\n\n<p>Second, in order to return a <code>C&lt;'a&gt;</code> where <code>'a</code> is anything other than <code>'static</code>, most of the time you'll also need a parameter that contains a reference with the same lifetime parameter (it's not always necessary, e.g. when the field using the lifetime parameter can be initialized later, but that doesn't apply here). Therefore, you'd need a function defined a bit like this:</p>\n\n<pre><code>fn arbitrary&lt;'a, G: Gen&gt;(g: &amp;'a mut G) -&gt; C&lt;'a&gt; {\n    let s = g.gen::&lt;&amp;str&gt;();\n    C { s: s, b: (s.len() &gt; 0) }\n}\n</code></pre>\n\n<p>(Note that <code>'a</code> is defined on the function, not on the <code>impl</code>.)</p>\n\n<p>There are two big problems with this:</p>\n\n<ul>\n<li><code>Arbitrary::arbitrary()</code> returns <code>Self</code>. This means that the function must return the type on which <code>Arbitrary</code> is implemented. Here, however, <code>C&lt;'a&gt;</code> depends on a lifetime parameter defined <em>on the function</em>; <code>C&lt;'a&gt;</code> cannot possibly be the same as the <code>impl</code> target, since that type cannot use that lifetime parameter.</li>\n<li><code>Rng::gen()</code> simply calls <a href=\"http://burntsushi.net/rustdoc/rand/trait.Rand.html#tymethod.rand\" rel=\"noreferrer\"><code>Rand::rand()</code></a>, which also returns <code>Self</code>, and thus suffers from the same problem as <code>Arbitrary::arbitrary()</code>. Also, <code>Rand</code> is not implemented for <code>&amp;str</code> (or even for <code>String</code>).</li>\n</ul>\n\n<p>What can you do instead? Instead of storing a <code>&amp;str</code> in your struct, you should store a <code>String</code> instead. This makes your struct <code>'static</code>, and you can use the implementation of <code>Arbitrary</code> for <code>String</code> to generate test values.</p>\n\n<p>But what if you don't want to use <code>String</code> in your actual application code? You can make your struct generic by accepting either <code>&amp;str</code> or <code>String</code>. There are two traits in the standard library that help you do this: <a href=\"http://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"noreferrer\"><code>AsRef</code></a> and <a href=\"http://doc.rust-lang.org/stable/std/borrow/trait.Borrow.html\" rel=\"noreferrer\"><code>Borrow</code></a>. Here's an example using <code>Borrow</code>:</p>\n\n<pre><code>use std::borrow::Borrow;\n\n#[derive(Debug, Clone)]\npub struct C&lt;S: Borrow&lt;str&gt;&gt; {\n    s: S,\n    b: bool\n}\n</code></pre>\n\n<p>Now, you can use either <code>C&lt;&amp;str&gt;</code> or <code>C&lt;String&gt;</code>, depending on what's needed. Obviously, you can't implement <code>Arbitrary</code> for <code>C&lt;&amp;str&gt;</code>, but you can implement it for <code>C&lt;String&gt;</code>. Actually, why not implement it for all types that implement <code>Arbitrary</code>?</p>\n\n<pre><code>impl&lt;S: Borrow&lt;str&gt; + Arbitrary&gt; Arbitrary for C&lt;S&gt; {\n    fn arbitrary&lt;G: Gen&gt;(g: &amp;mut G) -&gt; C&lt;S&gt; {\n        let s: S = Arbitrary::arbitrary(g);\n        let b = s.borrow().len() &gt; 0;\n        C { s: s, b: b }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 724, "favorite_count": 0, "accepted_answer_id": 36392226, "answer_count": 1, "score": 2, "last_activity_date": 1459723911, "creation_date": 1459715575, "question_id": 36390808, "link": "https://stackoverflow.com/questions/36390808/how-to-create-a-quickcheck-arbitrary-of-a-struct-containing-a-reference", "title": "How to create a Quickcheck Arbitrary of a struct containing a reference?", "body": "<p>The Rust <a href=\"http://burntsushi.net/rustdoc/quickcheck/trait.Arbitrary.html\" rel=\"nofollow\">quickcheck documentation</a> notes that for any type implementing <code>Arbitrary</code></p>\n\n<blockquote>\n  <p>They must also be sendable and static since every test is run in its own thread using thread::Builder::spawn, which requires the Send + 'static bounds.</p>\n</blockquote>\n\n<p>If I need to generate data for a struct that contains a reference how do I go about doing that? For instance:</p>\n\n<pre><code>#![cfg_attr(test, feature(plugin))]\n#![cfg_attr(test, plugin(quickcheck_macros))]\n\n#[cfg(test)]\nextern crate quickcheck;\n\n#[cfg(test)]\nuse quickcheck::{Arbitrary,Gen};\n\n#[allow(dead_code)]\n#[derive(Debug,Clone)]\npub struct C&lt;'a&gt; {\n    s: &amp;'a str,\n    b: bool\n}\n\n#[cfg(test)]\nimpl&lt;'a&gt; Arbitrary for C&lt;'a&gt; {\n    fn arbitrary&lt;G: Gen&gt;(g: &amp;mut G) -&gt; C&lt;'a&gt; {\n        let s = g.gen::&lt;&amp;str&gt;();\n        C{s: s, b: (s.len() &gt; 0)}\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[quickcheck]\n    fn len_checks_out(c: C) -&gt; bool {\n        (c.s.len() &gt; 0) == c.b\n    }\n}\n</code></pre>\n\n<p>fails with </p>\n\n<pre><code>cargo test\n   Compiling qcq v0.1.0 (file:///Users/blt/projects/us/troutwine/qcquestion)\nsrc/lib.rs:18:10: 18:19 error: the type `C&lt;'a&gt;` does not fulfill the required lifetime [E0477]\nsrc/lib.rs:18 impl&lt;'a&gt; Arbitrary for C&lt;'a&gt; {\n                       ^~~~~~~~~\nnote: type must outlive the static lifetime\nerror: aborting due to previous error\nBuild failed, waiting for other jobs to finish...\nerror: Could not compile `qcq`.\n</code></pre>\n\n<p>This is a somewhat contrived example but it's in the same spirit as the originating problem. The lifetime annotations work out except but under test. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 1, "creation_date": 1459719647, "post_id": 36390748, "comment_id": 60399997, "body": "there is a difference in using &lt;F: Fn... &gt; or not (.., f: &amp;Fn...) the two works, some detail that I need to know?"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459720528, "post_id": 36390748, "comment_id": 60400282, "body": "@AngelAngel: Well, <code>Fn*</code> are traits, so the usual <code>&lt;T: Trait&gt;</code> vs <code>(t: &amp;T)</code> applies. The main limitation of the non-generic solution is that it must be used with references. So if you want <code>FnOnce</code>, which should be passed as a copy, you must use the generic style."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 5, "creation_date": 1459721566, "post_id": 36390748, "comment_id": 60400607, "body": "Note that it is more idiomatic to use generics instead of trait objects (i.e. <code>&lt;F: Fn..&gt;</code> instead of <code>(f: &amp;Fn...)</code>. And this is for a reason - generics will result in static dispatch, while trait objects require dynamic dispatch."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 3, "creation_date": 1506409931, "post_id": 36390748, "comment_id": 79797137, "body": "Interestingly, from an <i>interface</i> (caller&#39;s) perspective, <code>FnOnce</code> is actually the most generic trait- it accepts all closures regardless of whether they read, modify, or take ownership of the captured state. <code>FnMut</code> is more restrictive, it doesn&#39;t accept closures that take ownership of a captured object (but it still allows modifications of state). <code>Fn</code> is the most restrictive because it doesn&#39;t accept closures that modify their captured state. So requiring <code>&amp;Fn</code> places the greatest restriction on the <code>funTest</code> caller,while providing the least restriction on how <code>f</code> can be invoked inside it."}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 134, "last_activity_date": 1573155454, "last_edit_date": 1573155454, "creation_date": 1459715200, "answer_id": 36390748, "question_id": 36390665, "link": "https://stackoverflow.com/questions/36390665/how-do-you-pass-a-rust-function-as-a-parameter/36390748#36390748", "title": "How do you pass a Rust function as a parameter?", "body": "<p>Sure you can:</p>\n\n<pre><code>fn fun_test(value: i32, f: &amp;dyn Fn(i32) -&gt; i32) -&gt; i32 {\n    println!(\"{}\", f(value));\n    value\n}\n\nfn times2(value: i32) -&gt; i32 {\n    2 * value\n}\n\nfn main() {\n    fun_test(5, &amp;times2);\n}\n</code></pre>\n\n<p>As this is Rust, you have to take into account the <a href=\"https://doc.rust-lang.org/book/closures.html\" rel=\"noreferrer\">ownership and lifetime of the closure</a>.</p>\n\n<p>TL;DR; Basically there are 3 types of closures (callable objects):</p>\n\n<ol>\n<li><code>Fn</code>: It cannot modify the objects it captures.</li>\n<li><code>FnMut</code>: It can modify the objects it captures.</li>\n<li><code>FnOnce</code>: The most restricted. Can only be called once because when it is called it consumes itself and its captures.</li>\n</ol>\n\n<p>See <a href=\"https://stackoverflow.com/q/30177395/155423\">When does a closure implement Fn, FnMut and FnOnce?</a> for more details</p>\n\n<p>If you are using a simple pointer-to-function like closure, then the capture set is empty and you have the <code>Fn</code> flavor.</p>\n\n<p>If you want to do more fancy stuff, then you will have to use lambda functions.</p>\n\n<p>In Rust there are proper pointers to functions, that work just like those in C. Their type is for example <code>fn(i32) -&gt; i32</code>. The <code>Fn(i32) -&gt; i32</code>, <code>FnMut(i32) -&gt; i32</code> and <code>FnOnce(i32) -&gt; i32</code> are actually traits. A pointer to a function always implements all three of these, but Rust also has closures, that may or may not be converted to pointers (depending on whether the capture set is empty) to functions but they do implement some of these traits.</p>\n\n<p>So for example, the example from above can be expanded:</p>\n\n<pre><code>fn fun_test_impl(value: i32, f: impl Fn(i32) -&gt; i32) -&gt; i32 {\n    println!(\"{}\", f(value));\n    value\n}\nfn fun_test_dyn(value: i32, f: &amp;dyn Fn(i32) -&gt; i32) -&gt; i32 {\n    println!(\"{}\", f(value));\n    value\n}\nfn fun_test_ptr(value: i32, f: fn(i32) -&gt; i32) -&gt; i32 {\n    println!(\"{}\", f(value));\n    value\n}\n\nfn times2(value: i32) -&gt; i32 {\n    2 * value\n}\n\nfn main() {\n    let y = 2;\n    //static dispatch\n    fun_test_impl(5, times2);\n    fun_test_impl(5, |x| 2*x);\n    fun_test_impl(5, |x| y*x);\n    //dynamic dispatch\n    fun_test_dyn(5, &amp;times2);\n    fun_test_dyn(5, &amp;|x| 2*x);\n    fun_test_dyn(5, &amp;|x| y*x);\n    //C-like pointer to function\n    fun_test_ptr(5, times2);\n    fun_test_ptr(5, |x| 2*x); //ok: empty capture set\n    fun_test_ptr(5, |x| y*x); //error: expected fn pointer, found closure\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 644, "user_id": 5326062, "user_type": "registered", "accept_rate": 67, "profile_image": "https://lh3.googleusercontent.com/-wyQqFvVdnKo/AAAAAAAAAAI/AAAAAAAAAwY/atuvPb80mWU/photo.jpg?sz=128", "display_name": "Ivan Temchenko", "link": "https://stackoverflow.com/users/5326062/ivan-temchenko"}, "edited": false, "score": 0, "creation_date": 1608207433, "post_id": 36401910, "comment_id": 115515611, "body": "will this work with struct&#39;s methods?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 644, "user_id": 5326062, "user_type": "registered", "accept_rate": 67, "profile_image": "https://lh3.googleusercontent.com/-wyQqFvVdnKo/AAAAAAAAAAI/AAAAAAAAAwY/atuvPb80mWU/photo.jpg?sz=128", "display_name": "Ivan Temchenko", "link": "https://stackoverflow.com/users/5326062/ivan-temchenko"}, "edited": false, "score": 0, "creation_date": 1608272747, "post_id": 36401910, "comment_id": 115537806, "body": "@IvanTemchenko Maybe? Here is some code for you to play with: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=41d2aa2c947dbebe539e5effc7310ccd\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 644, "user_id": 5326062, "user_type": "registered", "accept_rate": 67, "profile_image": "https://lh3.googleusercontent.com/-wyQqFvVdnKo/AAAAAAAAAAI/AAAAAAAAAwY/atuvPb80mWU/photo.jpg?sz=128", "display_name": "Ivan Temchenko", "link": "https://stackoverflow.com/users/5326062/ivan-temchenko"}, "edited": false, "score": 0, "creation_date": 1608280572, "post_id": 36401910, "comment_id": 115540208, "body": "that&#39;s not exactly what I meant =) Found workaround to return dyn closure which captures self&#39;s state so I dont need to pass instance ref around..."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 33, "last_activity_date": 1506407106, "last_edit_date": 1506407106, "creation_date": 1459770867, "answer_id": 36401910, "question_id": 36390665, "link": "https://stackoverflow.com/questions/36390665/how-do-you-pass-a-rust-function-as-a-parameter/36401910#36401910", "title": "How do you pass a Rust function as a parameter?", "body": "<p><code>Fn</code>, <code>FnMut</code> and <code>FnOnce</code>, outlined in the other answer, are <em>closure</em> types. The types of functions that close over their scope.</p>\n\n<p>Apart from passing closures Rust also supports passing simple (non-closure) functions, like this:</p>\n\n<pre><code>fn times2(value: i32) -&gt; i32 {\n    2 * value\n}\n\nfn fun_test(value: i32, f: fn(i32) -&gt; i32) -&gt; i32 {\n    println!(\"{}\", f (value));\n    value\n}\n\nfn main() {\n    fun_test (2, times2);\n}\n</code></pre>\n\n<p><code>fn(i32) -&gt; i32</code> here is a <a href=\"https://doc.rust-lang.org/beta/reference/types.html#function-pointer-types\" rel=\"noreferrer\">function pointer type</a>.</p>\n\n<p>If you don't need a full-fledged closure than working with function types is often simpler as it doesn't have to deal with those closure lifetime nicities.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 51608, "favorite_count": 21, "accepted_answer_id": 36390748, "answer_count": 2, "score": 95, "last_activity_date": 1573155454, "creation_date": 1459714696, "last_edit_date": 1573155271, "question_id": 36390665, "link": "https://stackoverflow.com/questions/36390665/how-do-you-pass-a-rust-function-as-a-parameter", "title": "How do you pass a Rust function as a parameter?", "body": "<p>Can I pass a function as a parameter? If not, what is a good alternative?</p>\n\n<p>I tried some different syntaxes but I have not found the right one. I know I can do this:</p>\n\n<pre><code>fn example() {\n    let fun: fn(value: i32) -&gt; i32;\n    fun = fun_test;\n    fun(5i32);\n}\n\nfn fun_test(value: i32) -&gt; i32 {\n    println!(\"{}\", value);\n    value\n}\n</code></pre>\n\n<p>but that's not passing the function as a parameter to another function:</p>\n\n<pre><code>fn fun_test(value: i32, (some_function_prototype)) -&gt; i32 {\n    println!(\"{}\", value);\n    value\n}\n</code></pre>\n"}, {"tags": ["syntax", "rust", "ascription"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1459733718, "post_id": 36390114, "comment_id": 60403474, "body": "An even <i>better</i> example is <code>Into</code>; because the type parameter there is a parameter of the <i>trait</i>, it&#39;s <i>impossible</i> to annotate an <code>.into()</code> method call to specify the type.  You have to rewrite the expression to use an annotated function call instead."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1462194954, "post_id": 36390114, "comment_id": 61521644, "body": "<code>That&#39;s because the collect method can return any type that implements the FromIterator</code> -- but why would it return anything other than the type of &quot;chars()&quot;?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 3, "creation_date": 1462229332, "post_id": 36390114, "comment_id": 61539748, "body": "You can collect the remaining items of an iterator into a <code>Vec</code>, a <code>BTreeSet</code>, a <code>BinaryHeap</code>, etc. using <code>FromIterator</code>. If the resulting collection is generic, its item type will generally follow the iterator&#39;s output type. Some implementations of <code>FromIterator</code> are only available for some types of iterators, e.g. <code>String</code> implements <code>FromIterator</code> for <code>char</code> iterators and <code>&amp;str</code> iterators only."}, {"owner": {"reputation": 93, "user_id": 3342134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8c042e019a4452186c5668c5d55138a?s=128&d=identicon&r=PG&f=1", "display_name": "felix", "link": "https://stackoverflow.com/users/3342134/felix"}, "edited": false, "score": 0, "creation_date": 1571657707, "post_id": 36390114, "comment_id": 103301697, "body": "Another example (how I encountered the compile-error message) is <code>for x in ([-1,0,1]:[i32; 3]).iter().cloned() {</code>, where you need i32 for the signed integer &quot;-1&quot; (otherwise it complains that u32 doesnt have &quot;-&quot; defined). Probably exists a proper way to do this which doesn&#39;t require manually specifying i32. For now I will instead define a variable <code>let a:[i32;3] = [-1, 0, 1];</code> on the line above and use it instead. Far more ugly, but it works."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 93, "user_id": 3342134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8c042e019a4452186c5668c5d55138a?s=128&d=identicon&r=PG&f=1", "display_name": "felix", "link": "https://stackoverflow.com/users/3342134/felix"}, "edited": false, "score": 1, "creation_date": 1571703278, "post_id": 36390114, "comment_id": 103320917, "body": "@felix <code>[-1i32, 0, 1]</code>"}, {"owner": {"reputation": 93, "user_id": 3342134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8c042e019a4452186c5668c5d55138a?s=128&d=identicon&r=PG&f=1", "display_name": "felix", "link": "https://stackoverflow.com/users/3342134/felix"}, "edited": false, "score": 0, "creation_date": 1571723084, "post_id": 36390114, "comment_id": 103324501, "body": "@Francis Gagn&#233; thanks, that works. Any reason why it is valid to do that to any item in the array to affect all others (aside from the fact that it is an array (all items have same type) so the compiler can/must infer the type of the rest as the same. Since it would have been able to infer the same from the &quot;-&quot; if that was the issue, as <code>let a = -1</code> works)? Also that answer made me realize <code>([-1, 0, 1]as[i32;3])</code> works too! :) ...Which made me wonder, why do numeric literals allow to skip the &quot;as&quot;, but other types doesn&#39;t (for that matter, why isn&#39;t interchanging &quot;as&quot; with &quot;:&quot; valid)?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 93, "user_id": 3342134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8c042e019a4452186c5668c5d55138a?s=128&d=identicon&r=PG&f=1", "display_name": "felix", "link": "https://stackoverflow.com/users/3342134/felix"}, "edited": false, "score": 1, "creation_date": 1571793298, "post_id": 36390114, "comment_id": 103355435, "body": "@felix Please <a href=\"https://stackoverflow.com/questions/ask\">ask new questions</a> (you have two independent questions in your comment), comments aren&#39;t made for asking and answering questions. Also, there is a piece of the puzzle missing because integers default to <code>i32</code>, so the fact that the compiler inferred <code>u32</code> means that it&#39;s getting a hint from elsewhere that they should be <code>u32</code> instead."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 44, "last_activity_date": 1553564469, "last_edit_date": 1553564469, "creation_date": 1459711839, "answer_id": 36390114, "question_id": 36389974, "link": "https://stackoverflow.com/questions/36389974/what-is-type-ascription/36390114#36390114", "title": "What is type ascription?", "body": "<p>Type ascription is the ability to annotate an expression with the type we want it to have. Type ascription in Rust is described in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md\" rel=\"noreferrer\">RFC 803</a>.</p>\n\n<p>In some situations, the type of an expression can be ambiguous. For example, this code:</p>\n\n<pre><code>fn main() {\n    println!(\"{:?}\", \"hello\".chars().collect());\n}\n</code></pre>\n\n<p>gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0283]: type annotations required: cannot resolve `_: std::iter::FromIterator&lt;char&gt;`\n --&gt; src/main.rs:2:38\n  |\n2 |     println!(\"{:?}\", \"hello\".chars().collect());\n  |                                      ^^^^^^^\n</code></pre>\n\n<p>That's because the <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.collect\" rel=\"noreferrer\"><code>collect</code></a> method can return any type that implements the <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html\" rel=\"noreferrer\"><code>FromIterator</code></a> trait for the iterator's <code>Item</code> type. With type ascription, one could write:</p>\n\n<pre><code>#![feature(type_ascription)]\n\nfn main() {\n    println!(\"{:?}\", \"hello\".chars().collect(): Vec&lt;char&gt;);\n}\n</code></pre>\n\n<p>Instead of the current (as of Rust 1.33) ways of disambiguating this expression:</p>\n\n<pre><code>fn main() {\n    println!(\"{:?}\", \"hello\".chars().collect::&lt;Vec&lt;char&gt;&gt;());\n}\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>fn main() {\n    let vec: Vec&lt;char&gt; = \"hello\".chars().collect();\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10284, "favorite_count": 4, "accepted_answer_id": 36390114, "answer_count": 1, "score": 30, "last_activity_date": 1553564469, "creation_date": 1459711044, "last_edit_date": 1553564217, "question_id": 36389974, "link": "https://stackoverflow.com/questions/36389974/what-is-type-ascription", "title": "What is type ascription?", "body": "<p>Several times I've used the wrong syntax, such as forgetting to use <code>let</code> in this example:</p>\n\n<pre><code>let closure_annotated = |value: i32| -&gt; i32 {\n    temp: i32 = fun(5i32);\n    temp + value + 1\n};\n</code></pre>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>error[E0658]: type ascription is experimental (see issue #23416)\n --&gt; src/main.rs:3:9\n  |\n3 |         temp: i32 = fun(5i32);\n  |         ^^^^^^^^^\n</code></pre>\n</blockquote>\n\n<p>I know that this problem is solved by using <code>let</code>, but what is \"type ascription\" and what is its use?</p>\n\n<p>I found <a href=\"https://github.com/rust-lang/rust/issues/23416\" rel=\"noreferrer\">issue #23416</a> and <a href=\"https://github.com/rust-lang/rust/blob/1.33.0/src/libsyntax/feature_gate.rs#L250-L251\" rel=\"noreferrer\">the feature gate for type ascription</a>, but I could not understand what \"type ascription\" is or what is its purpose.</p>\n"}, {"tags": ["iterator", "closures", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459688555, "post_id": 36385557, "comment_id": 60388326, "body": "Note: have you tried returning <code>-&gt; ()</code> from the function and let the compiler tell you what was the exact type of the iterator you created, then use this concrete type instead of the trait?"}, {"owner": {"reputation": 15140, "user_id": 1126971, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/738f6908cdcc3651abf6293370c59f97?s=128&d=identicon&r=PG", "display_name": "John Smith Optional", "link": "https://stackoverflow.com/users/1126971/john-smith-optional"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459698141, "post_id": 36385557, "comment_id": 60391691, "body": "The type I get is:<code>core::iter::TakeWhile&lt;core::iter::Map&lt;core::ops::RangeFro&zwnj;&#8203;m&lt;i64&gt;, [closure@src&#47;main.rs:64:15: 64:53 fpm:_]&gt;, [closure@src&#47;main.rs:64:66: 64:113 tm:_]&gt;</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459706548, "post_id": 36385557, "comment_id": 60394788, "body": "The closure will put you in a pickle there, their type cannot be named, and I see no obvious way to lift the functionality into a bare function for this particular case unfortunately :("}], "answers": [{"comments": [{"owner": {"reputation": 15140, "user_id": 1126971, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/738f6908cdcc3651abf6293370c59f97?s=128&d=identicon&r=PG", "display_name": "John Smith Optional", "link": "https://stackoverflow.com/users/1126971/john-smith-optional"}, "edited": false, "score": 0, "creation_date": 1459699678, "post_id": 36385745, "comment_id": 60392278, "body": "Thanks! This is working. I don&#39;t fully understand the reason why you can&#39;t dereference a box and why all the Iterator associated methods have been implemented on Box&lt;Iterator&gt;. I guess I have to read more about boxes but the documenation seems sparse about them."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 15140, "user_id": 1126971, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/738f6908cdcc3651abf6293370c59f97?s=128&d=identicon&r=PG", "display_name": "John Smith Optional", "link": "https://stackoverflow.com/users/1126971/john-smith-optional"}, "edited": false, "score": 1, "creation_date": 1459701830, "post_id": 36385745, "comment_id": 60393025, "body": "<code>Box</code> is special in general. And it has <a href=\"https://doc.rust-lang.org/book/deref-coercions.html\" rel=\"nofollow noreferrer\">deref coercions</a>"}, {"owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "edited": false, "score": 0, "creation_date": 1459718489, "post_id": 36385745, "comment_id": 60399573, "body": "@ker While <code>Box</code> is a special type in a few different ways I that isn&#39;t a factor in this case. The reason <code>Box</code> has the iterator methods is simply because it implements <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\">Iterator</a> (Ctrl-F &#39;Box&#39; to find it). If it hadn&#39;t implemented <code>Iterator</code> it would probably still have worked in this case thanks to deref coercions (which would make it use the iterator implementation <code>&amp;mut T where T: Iterator</code>)."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1459696581, "last_edit_date": 1459696581, "creation_date": 1459688560, "answer_id": 36385745, "question_id": 36385557, "link": "https://stackoverflow.com/questions/36385557/rust-how-to-return-an-iterator-from-a-function-and-use-it/36385745#36385745", "title": "Rust: how to return an iterator from a function and use it?", "body": "<p>The problem is that you are trying to take the <code>Iterator</code> out of the <code>Box</code> (which you can't because it's a trait-object and thus not <code>Sized</code>). But a <code>Box</code> is transparent, you can use <code>map</code> directly on it:</p>\n\n<pre><code>let days_vec: Vec&lt;u64&gt; = \n    three_months_range(time::now_utc())\n    .map( |&amp;t: &amp;time::Tm| t.tm_mday )\n    .collect();\n</code></pre>\n\n<p>Note that the <code>map</code> function expects you to take the argument by value and not by reference. So the call can look like this:</p>\n\n<pre><code>.map(|t| t.tm_mday)\n</code></pre>\n"}], "owner": {"reputation": 15140, "user_id": 1126971, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/738f6908cdcc3651abf6293370c59f97?s=128&d=identicon&r=PG", "display_name": "John Smith Optional", "link": "https://stackoverflow.com/users/1126971/john-smith-optional"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2255, "favorite_count": 0, "accepted_answer_id": 36385745, "answer_count": 1, "score": 1, "last_activity_date": 1459696581, "creation_date": 1459687481, "question_id": 36385557, "link": "https://stackoverflow.com/questions/36385557/rust-how-to-return-an-iterator-from-a-function-and-use-it", "title": "Rust: how to return an iterator from a function and use it?", "body": "<p>I'm trying to teach myself Rust by working on a little calendar project.</p>\n\n<p>Here I'm trying to generate a list of dates spanning three whole months around a given date.\nI'd like to return an iterator that can iterate over these dates.\nHere's my first attempt:</p>\n\n<pre><code>fn three_months_range(tm: time::Tm) -&gt; std::iter::Iterator&lt;Item=time::Tm&gt; {\n    let fpm: time::Tm = first_of_previous_month(&amp;tm);\n    (0..)\n        .map(|i| fpm + time::Duration::days(i))\n        .take_while(|&amp;t| t.tm_mon != (tm.tm_mon + 2) % 12)\n}\n</code></pre>\n\n<p>Unfortunately, this doesn't compile and I get an error.</p>\n\n<pre><code>src/main.rs:49:40: 49:75 error: the trait `core::marker::Sized` is not implemented for the type `core::iter::Iterator&lt;Item=time::Tm&gt; + 'static` [E0277]\nsrc/main.rs:49 fn three_months_range(tm: time::Tm) -&gt; std::iter::Iterator &lt;Item=time::Tm&gt; {\n                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:49:40: 49:75 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:49:40: 49:75 note: `core::iter::Iterator&lt;Item=time::Tm&gt; + 'static` does not have a constant size known at compile-time\nsrc/main.rs:49:40: 49:75 note: the return type of a function must have a statically known size\n</code></pre>\n\n<p>\"the return type of a function must have a statically known size\". Ok, after some research, it seems that the solution is to return the iterator through a Box.\n(still, I'm left wondering how the standard library <code>map</code>, <code>filter</code>, <code>take_while</code>... methods manage to return Iterators and not boxes).</p>\n\n<p>Well, here's the second attempt, which compiles successfully:</p>\n\n<pre><code>fn three_months_range(tm: time::Tm) -&gt; Box&lt;iter::Iterator&lt;Item=time::Tm&gt;&gt; {\n    let fpm: time::Tm = first_of_previous_month(&amp;tm);\n    Box::new(\n        (0..)\n        .map(move |i| fpm + time::Duration::days(i))\n        .take_while(move |&amp;t| t.tm_mon != (tm.tm_mon + 2) % 12)\n    )\n}\n</code></pre>\n\n<p>Unfortunately, I don't manage to use this iterator.\nFor example, let's say I want to build a vector containing the days of the months of each date (1, 2, 3, ..., 31, 1, 2, ..., 30, 1, 2, ... 31):</p>\n\n<pre><code>let days_vec: Vec&lt;u64&gt; = \n    ( *three_months_range(time::now_utc()) )\n    .map( |&amp;t: &amp;time::Tm| t.tm_mday )\n    .collect();\n</code></pre>\n\n<p>\u2192</p>\n\n<pre><code>src/main.rs:14:10: 14:42 error: the trait `core::marker::Sized` is not implemented for the type `core::iter::Iterator&lt;Item=time::Tm&gt; + 'static` [E0277]\nsrc/main.rs:14         .map( |&amp;t: &amp;time::Tm| t.tm_mday )\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:14:10: 14:42 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:14:10: 14:42 note: `core::iter::Iterator&lt;Item=time::Tm&gt; + 'static` does not have a constant size known at compile-time\nsrc/main.rs:15:10: 15:19 error: no method named `collect` found for type `core::iter::Map&lt;core::iter::Iterator&lt;Item=time::Tm&gt; + 'static, [closure@src/main.rs:14:15: 14:40]&gt;` in the current scope\nsrc/main.rs:15         .collect();\n                        ^~~~~~~~~\nsrc/main.rs:15:10: 15:19 note: the method `collect` exists but the following trait bounds were not satisfied: `core::iter::Iterator&lt;Item=time::Tm&gt; : core::marker::Sized`, `[closure@src/main.rs:14:15: 14:40] : core::ops::FnMut&lt;(time::Tm,)&gt;`, `core::iter::Map&lt;core::iter::Iterator&lt;Item=time::Tm&gt; + 'static, [closure@src/main.rs:14:15: 14:40]&gt; : core::iter::Iterator`\nsrc/main.rs:14:10: 14:42 error: type mismatch: the type `[closure@src/main.rs:14:15: 14:40]` implements the trait `for&lt;'r&gt; core::ops::FnMut&lt;(&amp;'r time::Tm,)&gt;`, but the trait `core::ops::FnMut&lt;(time::Tm,)&gt;` is required (expected struct `time::Tm`, found &amp;-ptr) [E0281]\nsrc/main.rs:14         .map( |&amp;t: &amp;time::Tm| t.tm_mday )\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:14:10: 14:42 help: run `rustc --explain E0281` to see a detailed explanation\nsrc/main.rs:14:10: 14:42 error: type mismatch: the type `[closure@src/main.rs:14:15: 14:40]` implements the trait `for&lt;'r&gt; core::ops::FnOnce&lt;(&amp;'r time::Tm,)&gt;`, but the trait `core::ops::FnOnce&lt;(time::Tm,)&gt;` is required (expected struct `time::Tm`, found &amp;-ptr) [E0281]\nsrc/main.rs:14         .map( |&amp;t: &amp;time::Tm| t.tm_mday )\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:14:10: 14:42 help: run `rustc --explain E0281` to see a detailed explanation\nerror: aborting due to 4 previous errors\n</code></pre>\n\n<p>That's a lot of errors.</p>\n\n<p>So what am I doing wrong here?</p>\n\n<p>Is there a relatively simple way to transform iterators in Rust and/or return them from functions?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1459688415, "post_id": 36385519, "comment_id": 60388291, "body": "Rather than adding a useless filler, why not tell us what you do not understand? Do you understand what ownership and borrowing are? Have you read the Rust Book? Have you read the documentation about <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.into_inner\" rel=\"nofollow noreferrer\"><code>RefCell::into_inner</code></a>?"}, {"owner": {"reputation": 3281, "user_id": 3574379, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/B85yX.png?s=128&g=1", "display_name": "srghma", "link": "https://stackoverflow.com/users/3574379/srghma"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459695191, "post_id": 36385519, "comment_id": 60390586, "body": "@MatthieuM. yes, now I  see , I must borrow it at first, because into_inner() destroy RefCell"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459698080, "post_id": 36385519, "comment_id": 60391672, "body": "Exactly, and you will not be permitted to destroy the <code>RefCell</code> because you are only borrowing it. By the way, if you solved your issue, you might want to answer yourself :)"}, {"owner": {"reputation": 3281, "user_id": 3574379, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/B85yX.png?s=128&g=1", "display_name": "srghma", "link": "https://stackoverflow.com/users/3574379/srghma"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1459700598, "post_id": 36385519, "comment_id": 60392581, "body": "Thank you, I just little improve and publish it :)"}], "answers": [{"tags": [], "owner": {"reputation": 3281, "user_id": 3574379, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/B85yX.png?s=128&g=1", "display_name": "srghma", "link": "https://stackoverflow.com/users/3574379/srghma"}, "is_accepted": true, "score": 1, "last_activity_date": 1460286251, "last_edit_date": 1460286251, "creation_date": 1460285583, "answer_id": 36528796, "question_id": 36385519, "link": "https://stackoverflow.com/questions/36385519/how-to-implement-debug-to-struct-with-refcellvecweakgadget-field-type/36528796#36528796", "title": "How to implement Debug to struct with `RefCell&lt;Vec&lt;Weak&lt;Gadget&gt;&gt;&gt;` field type?", "body": "<p>Add retreiving gadget ids</p>\n\n<pre><code>impl fmt::Debug for Owner {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let gadgets = self.gadgets.borrow();\n        let ids: Vec&lt;i32&gt; = gadgets.iter()\n                                   .map(|ref x| {\n                                       x.upgrade()\n                                        .unwrap()\n                                        .id\n                                   })\n                                   .collect();\n        write!(f, \"Owner {{ name: {}, gadgets: {:?} }}\", self.name, ids)\n    }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>gadget1 is: Gadget { id: 1, owner: Owner { name: Gadget Man, gadgets: [1, 2] } }\ngadget2 is: Gadget { id: 2, owner: Owner { name: Gadget Man, gadgets: [1, 2] } }\n</code></pre>\n\n<p><a href=\"https://gist.github.com/BjornMelgaard/bcc1f27d6cbaa3bab111acce16e564c4\" rel=\"nofollow\">Full code there</a></p>\n"}], "owner": {"reputation": 3281, "user_id": 3574379, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/B85yX.png?s=128&g=1", "display_name": "srghma", "link": "https://stackoverflow.com/users/3574379/srghma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 221, "favorite_count": 0, "accepted_answer_id": 36528796, "answer_count": 1, "score": 1, "last_activity_date": 1460286251, "creation_date": 1459687264, "last_edit_date": 1459688276, "question_id": 36385519, "link": "https://stackoverflow.com/questions/36385519/how-to-implement-debug-to-struct-with-refcellvecweakgadget-field-type", "title": "How to implement Debug to struct with `RefCell&lt;Vec&lt;Weak&lt;Gadget&gt;&gt;&gt;` field type?", "body": "<p>code:</p>\n\n<pre><code>struct Owner {\n    name: String,\n    gadgets: RefCell&lt;Vec&lt;Weak&lt;Gadget&gt;&gt;&gt;,\n}\n\n//code omitted\n\nimpl fmt::Debug for Owner {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Owner {{ name: {}, gadgets: {:?} }}\", self.name, self.gadgets.into_inner())\n    }\n}\n\nfn main() {\n    let gadget_owner : Rc&lt;Owner&gt; = Rc::new( Owner { /**/ });\n    let gadget1 = gadget_owner.make_gadget(1);\n    println!(\"gadget1 is: {:?}\", gadget1);\n}\n</code></pre>\n\n<p>bring error:</p>\n\n<pre><code>error: cannot move out of borrowed content [E0507]\nsrc/main.rs:25         write!(f, \"Owner {{ name: {}, gadgets: {:?} }}\", self.name, self.gadgets.into_inner())\n                                                                                   ^~~~\n</code></pre>\n\n<p><a href=\"http://pastebin.com/jUYayJ3P\" rel=\"nofollow\">full code there</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1459690013, "post_id": 36384841, "comment_id": 60388793, "body": "@LukasKalbertodt: Ah good point, I had started writing the answer with <code>vec!</code>, <code>panic!</code>, ... but could not find where those came from. I&#39;ll remove it."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1459690760, "post_id": 36384841, "comment_id": 60389014, "body": "<a href=\"https://github.com/rust-lang/rfcs/pull/890\" rel=\"nofollow noreferrer\">This RFC</a> proposes to add prelude functionality to user crates. It has been closed some time ago, but might be revived in the future."}, {"owner": {"reputation": 697, "user_id": 1691598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca5d67276ca1ff3e5391438d7865ddf2?s=128&d=identicon&r=PG", "display_name": "Jeremy Kao", "link": "https://stackoverflow.com/users/1691598/jeremy-kao"}, "edited": false, "score": 0, "creation_date": 1462676119, "post_id": 36384841, "comment_id": 61734962, "body": "@MatthieuM. Thanks for the clear explanation. It seems like that <code>println!</code> macro does not come from <code>std::prelude</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 697, "user_id": 1691598, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca5d67276ca1ff3e5391438d7865ddf2?s=128&d=identicon&r=PG", "display_name": "Jeremy Kao", "link": "https://stackoverflow.com/users/1691598/jeremy-kao"}, "edited": false, "score": 0, "creation_date": 1462708117, "post_id": 36384841, "comment_id": 61741387, "body": "@JeremyKao: It does, if you go to the <a href=\"https://doc.rust-lang.org/std/prelude/\" rel=\"nofollow noreferrer\">prelude page</a> it&#39;s listed in the macros section. (Just CTRL+F <code>println</code>)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 42, "last_activity_date": 1459690021, "last_edit_date": 1459690021, "creation_date": 1459682873, "answer_id": 36384841, "question_id": 36384840, "link": "https://stackoverflow.com/questions/36384840/what-is-the-prelude/36384841#36384841", "title": "What is the prelude?", "body": "<p>In Rust, in order to use a symbol, you must either:</p>\n\n<ul>\n<li>have defined the symbol in the current scope</li>\n<li>have imported the symbol in the current scope via a <code>use</code> directive: <code>use std::mem;</code></li>\n<li>be referring to the symbol using its absolute path: <code>std::mem::replace</code></li>\n</ul>\n\n<p>however, some very few symbols can be used without such actions: <code>Option</code> or <code>Copy</code> for example!</p>\n\n<p>This is due to the <a href=\"https://doc.rust-lang.org/std/prelude/\">Rust prelude</a>.</p>\n\n<p>A number of traits, types and functions were judged to be so frequently used that it made sense not to require that their use required explicitly importing the necessary symbols each and every time. This is achieved thanks to two implicit actions taken by the compiler:</p>\n\n<ul>\n<li>at the root of every crate, the compiler injects an implicit <code>extern crate std;</code> </li>\n<li>in every module, the compiler injects an implicit <code>use std::prelude::v1::*;</code> (for now)</li>\n</ul>\n\n<p><code>std::prelude::v1</code> is just a regular module which re-exports those frequently used symbols using the <code>pub use ...</code> syntax. Its exact content can be found <a href=\"https://doc.rust-lang.org/std/prelude/v1/\">here</a>.</p>\n\n<hr>\n\n<p>A number of other libraries, or even sub-components of the standard library also define a <code>prelude</code> module that you may import with the same glob import syntax: <code>use xxx::prelude::*;</code>. Unlike the <code>std::prelude</code> however those are not special-cased by the compiler and therefore require explicit importing.</p>\n\n<hr>\n\n<p>The compiler is agnostic to the exact content of the prelude, therefore if one was to replace the <code>std</code> crate with their own (for example, in embedded development) then one would decide what goes into their <code>std::prelude::v1</code> module.</p>\n"}], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6175, "favorite_count": 6, "accepted_answer_id": 36384841, "answer_count": 1, "score": 49, "last_activity_date": 1459775283, "creation_date": 1459682873, "last_edit_date": 1459775283, "question_id": 36384840, "link": "https://stackoverflow.com/questions/36384840/what-is-the-prelude", "title": "What is the prelude?", "body": "<p>When talking about imports, the word <em>prelude</em> is used every so often by the rustaceans.</p>\n\n<p>What is this <em>prelude</em> they talk about?</p>\n\n<p>How does it affect my Rust programs?</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "edited": false, "score": 0, "creation_date": 1459685176, "post_id": 36383938, "comment_id": 60387212, "body": "Is it idiomatically correct to do the rest of the code part inside the error handling? Considering I need to handle the result of <code>read_to_string</code>, won&#39;t it create a nested mess of error handling?"}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "edited": false, "score": 0, "creation_date": 1459771495, "post_id": 36383938, "comment_id": 60420583, "body": "What would be idiomatic, I guess, is to first see if the <code>try!</code> macro is applicable (I don&#39;t know if it is with Iron&#39;s Error types and/or your function&#39;s signature.) If it&#39;s not, a good workaround would be to structure as follows: <code>let what_you_want = match ... { ... }</code> and 1. make the Ok branch end with what_you_want 2. early-return from the Err branch. This way you can continue below without nesting. Actually, this is the philosophy behind <code>try!</code>."}, {"owner": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "edited": false, "score": 0, "creation_date": 1459855583, "post_id": 36383938, "comment_id": 60464271, "body": "Yeah, I tried to use <code>try!</code> at first but there was some sort of collision with the Iron package. Is the solution simply to abandon <code>try!</code> or can you work around this? I also tried the <code>let what_you_want = match</code> approach but ended up in a mess of arms not having matching types. What is an early return? Is it simply adding return? <code>return Err(HttpError::Io(err))</code>? Because the problem I get then is that I&#39;m returning an <code>hyper::error:Error</code> but it&#39;s expeting a <code>iron::error::IronError</code>..."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "edited": false, "score": 0, "creation_date": 1459936812, "post_id": 36383938, "comment_id": 60508308, "body": "By &quot;early return&quot;, yes I mean simply adding return, as you describe. As for your latter problem, I took a look at Iron examples; I&#39;m not sure and I don&#39;t have a setup to test it right now, but maybe try <code>return IronError::new(HttpError::Io(err), status::InternalServerError)</code>?"}, {"owner": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "edited": false, "score": 1, "creation_date": 1460112549, "post_id": 36383938, "comment_id": 60602880, "body": "Thank you! I got it working! I had to add <code>Err(...)</code> around your suggestion but now it works!"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 2, "last_activity_date": 1459771117, "last_edit_date": 1459771117, "creation_date": 1459677263, "answer_id": 36383938, "question_id": 36383864, "link": "https://stackoverflow.com/questions/36383864/if-a-result-returns-err-i-want-the-whole-function-to-return-a-http-request-e/36383938#36383938", "title": "If a Result returns Err(_), I want the whole function to return a HTTP request error", "body": "<p>An <code>Ok()</code> takes an <code>Response</code>, but an <code>Err()</code> takes an <code>IronError</code>.</p>\n\n<p>Hence your call <code>Err(...)</code> is not valid when <code>...</code> is a <code>Response</code>!</p>\n\n<p>How to correct it? Well the first step is, you must create an <code>IronError</code> to send back. I believe (not familiar with Iron) that Iron will automatically an appropriate error code and that it's not your job to do that. In the documentation we find one key type implementing <code>IronError</code>:</p>\n\n<pre><code>pub enum HttpError {\n    Method,\n    Uri(ParseError),\n    Version,\n    Header,\n    TooLarge,\n    Status,\n    Io(Error),\n    Ssl(Box&lt;Error + 'static + Send + Sync&gt;),\n    Http2(HttpError),\n    Utf8(Utf8Error),\n    // some variants omitted\n}\n</code></pre>\n\n<p>I can't see one which allows for an arbitrary string like \"file not found\". However, your use case is one of an IO failure, right? So it would make sense to use <code>HttpError::Io</code> with the <code>std::IoError</code> that you got back from <code>File::open()</code>:</p>\n\n<pre><code>match File::open(file_path_string) {\n    Ok(f) =&gt; {\n        let mut s = String::new();\n        f.read_to_string(&amp;mut s);\n        Ok(Response::with(((status::Ok), s)))\n    }\n    Err(err) =&gt; Err(HttpError::Io(err))\n};\n</code></pre>\n\n<p>By the way, it also fixes your \"TODO: error handling\"! How beautiful!</p>\n\n<p>(Code untested, please feel free to edit if compilation fails)</p>\n"}], "owner": {"reputation": 883, "user_id": 2296440, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/f5ebf3fc6ae512402b176a2fa4392048?s=128&d=identicon&r=PG", "display_name": "mnordber", "link": "https://stackoverflow.com/users/2296440/mnordber"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 914, "favorite_count": 0, "accepted_answer_id": 36383938, "answer_count": 1, "score": 1, "last_activity_date": 1459771117, "creation_date": 1459676791, "last_edit_date": 1459685513, "question_id": 36383864, "link": "https://stackoverflow.com/questions/36383864/if-a-result-returns-err-i-want-the-whole-function-to-return-a-http-request-e", "title": "If a Result returns Err(_), I want the whole function to return a HTTP request error", "body": "<p>I'm trying to use the Iron framework to build a simple backend in Rust. This handler is just supposed to return the content of a certain file and I can get it to work properly with <code>unwrap()</code> but I want to try to do proper error handling. This is how I would imagine it would look like:</p>\n\n<pre><code>fn get_content(res: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let mut id = String::new();\n    res.body.read_to_string(&amp;mut id).unwrap();\n\n    let file_path_string = &amp;(\"../content/\".to_string() + &amp;id + \".rdt\");\n\n    // TODO: Error handling\n    match File::open(file_path_string) {\n        Ok(f) =&gt; {\n            let mut s = String::new();\n            f.read_to_string(&amp;mut s);\n            Ok(Response::with(((status::Ok), s)))\n        }\n        Err(err) =&gt; Err(Response::with(((status::InternalServerError), \"File not found\")))\n    };\n}\n</code></pre>\n\n<p>This throws the error <code>not all control paths return a value [E0269]</code>, which is fine. But if I add a response after the match part:</p>\n\n<pre><code>match File::open(file_path_string) {\n    Ok(f) =&gt; {\n        let mut s = String::new();\n        f.read_to_string(&amp;mut s);\n        Ok(Response::with(((status::Ok), s)))\n    }\n    Err(err) =&gt; Err(Response::with(((status::InternalServerError), \"File not found\")))\n};\n\nErr(Response::with(((status::InternalServerError), \"File not found\")))\n</code></pre>\n\n<p>I instead get the error message:</p>\n\n<pre><code>expected `iron::error::IronError`,\n    found `iron::response::Response`\n(expected struct `iron::error::IronError`,\n    found struct `iron::response::Response`) [E0308]\nsrc/main.rs:95        \nErr(Response::with(((status::InternalServerError), \"File not found\")))\n</code></pre>\n\n<p>I think the problem is the collision between Rust Err and Iron Err? I'm not sure though. And I have not done much web development (or Rust for that matter) in the past so any feedback on the code is also appreciated!</p>\n\n<p>UPDATE: I think this is more \"The Rust Way\" to do it? But I'm not sure</p>\n\n<pre><code>fn get_content(res: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let mut id = String::new();\n    res.body.read_to_string(&amp;mut id).unwrap();\n\n    let file_path_string = &amp;(\"../content/\".to_string() + &amp;id + \".rdt\");\n\n    // TODO: Error handling\n    let f;\n    match File::open(file_path_string) {\n        Ok(file) =&gt; f = file,\n        Err(err) =&gt; Err(HttpError::Io(err))\n    };\n    let mut s = String::new();\n    f.read_to_string(&amp;mut s);\n    Ok(Response::with(((status::Ok), s)))\n}\n</code></pre>\n\n<p>Having the code inside the error handling seems weird as <code>read_to_string</code> also needs to be taken care of and that would create a nested mess of error handling? However, these matching arms are obviously of incompatible types so it won't work... any suggestions?</p>\n"}, {"tags": ["rust", "arrayfire"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459775231, "post_id": 36383188, "comment_id": 60423330, "body": "Welcome to Stack Overflow! Please follow the Stack Overflow guidelines; it&#39;s not a forum and should be treated differently! For example, please ask only <a href=\"http://meta.stackexchange.com/q/39223/281829\">one question per question</a>."}], "owner": {"reputation": 21, "user_id": 6151341, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/055d03f1b41f3507816d09642614abf1?s=128&d=identicon&r=PG&f=1", "display_name": "fuying", "link": "https://stackoverflow.com/users/6151341/fuying"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 319, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1459775085, "creation_date": 1459671939, "last_edit_date": 1459775085, "question_id": 36383188, "link": "https://stackoverflow.com/questions/36383188/how-to-configure-arrayfire-rust-to-use-cuda", "title": "How to configure arrayfire-rust to use CUDA?", "body": "<p>I've installed the latest official CUDA (7.5) and  ArrayFire (Linux v3.3.1 64-bit) on Ubuntu 15.10.  I am using the default configuration following the official documentation.</p>\n\n<p>When I build the <a href=\"https://github.com/arrayfire/arrayfire-rust\" rel=\"nofollow\">arrayfire-rust library</a> and run the \"unified\" example in the ./examples folder, it shows me I only have CPU and OpenCL backends. The CUDA backend can not be found. </p>\n\n<p>How do I configure the wrapper to support CUDA?</p>\n\n<p>The official C++ examples can be built successfully using CUDA.</p>\n\n<hr>\n\n<p><strong>Another question</strong></p>\n\n<p>How to modify the <code>build.conf</code> file to build the <code>arrayfire</code> submodule available in the Rust wrapper? When I git clone the source from GitHub. </p>\n\n<p>How can I config these options:</p>\n\n<pre><code>\"glew_static\": \"OFF\",\n\"freeimage_type\": \"DYNAMIC\",\n\"cpu_fft_type\": \"FFTW\",\n\"cpu_blas_type\": \"LAPACKE\",\n\"cpu_lapack_type\": \"LAPACKE\",\n\n\"freeimage_dir\": \"E:\\\\Libraries\\\\FreeImage\\\\Dist\",\n\"fftw_dir\": \"E:\\\\Libraries\\\\fftw-3.3.4\",\n\"acml_dir\": \"\",\n\"mkl_dir\": \"\",\n\"lapacke_dir\": \"E:\\\\Libraries\\\\lapack\",\n\"glew_dir\": \"E:\\\\Libraries\\\\GLEW\",\n\"glfw_dir\": \"E:\\\\Libraries\\\\glfw3\",\n\"boost_dir\": \"E:\\\\Libraries\\\\boost_1_56_0\",\n\n\"cuda_sdk\": \"/usr/local/cuda\",\n\"opencl_sdk\": \"/usr\"\n</code></pre>\n\n<p>I checked the path of CUDA libs and the <code>cuda_sdk</code> option seems correct. In addition, <code>$AF_PATH</code> and <code>$LD_LIBRARY_PATH</code> have been set. What's the problem with my config?</p>\n"}, {"tags": ["split", "rust", "slice"], "comments": [{"owner": {"reputation": 163028, "user_id": 477878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qounX.jpg?s=128&g=1", "display_name": "Joachim Isaksson", "link": "https://stackoverflow.com/users/477878/joachim-isaksson"}, "edited": false, "score": 3, "creation_date": 1459664460, "post_id": 36382190, "comment_id": 60381615, "body": "I&#39;m not sure I understand. Since <code>first</code> and <code>second</code> are just slices of <code>item</code>, why not use <code>item</code> itself instead of trying to join them back? Replacing <code>x</code> with <code>item</code> as in <code>assert_eq!(item[16], 8);</code> would pass the test (assuming you returned the borrowed slices) Or was this just a simplification of what you&#39;re actually trying to do?"}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "reply_to_user": {"reputation": 163028, "user_id": 477878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qounX.jpg?s=128&g=1", "display_name": "Joachim Isaksson", "link": "https://stackoverflow.com/users/477878/joachim-isaksson"}, "edited": false, "score": 1, "creation_date": 1459665470, "post_id": 36382190, "comment_id": 60381816, "body": "that&#39;s a reasonable thing in this simplified example. But lets assume you&#39;re making an allocator of some sort and you returned 2 unjoined slices to clients and they both got freed, so you&#39;d like to be able to join them into a bigger slice. In that case you&#39;re bound to have lost track of where each slice came from nor have the original item since it has dozens of other slices borrowed against it through split_at_mut"}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "reply_to_user": {"reputation": 163028, "user_id": 477878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qounX.jpg?s=128&g=1", "display_name": "Joachim Isaksson", "link": "https://stackoverflow.com/users/477878/joachim-isaksson"}, "edited": false, "score": 0, "creation_date": 1459665552, "post_id": 36382190, "comment_id": 60381827, "body": "The exact situation in question is here: <a href=\"https://github.com/dropbox/rust-alloc-no-stdlib/blob/master/src/stack_allocator.rs\" rel=\"nofollow noreferrer\">github.com/dropbox/rust-alloc-no-stdlib/blob/master/src/&hellip;</a> in free_cell where &amp;&#39;a mut slices are being returned to the system and it would be nice to see if they could be recombined with other free&#39;d slices to unify them"}], "answers": [{"comments": [{"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1459710662, "post_id": 36383469, "comment_id": 60396470, "body": "For the case that these were actually from the same slice this code makes perfect sense to me. However, in C++ comparing equality of pointers from different arrays is undefined behavior (I think to compensate for segmented architectures). Is this defined behavior in Rust?"}, {"owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "reply_to_user": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1459715118, "post_id": 36383469, "comment_id": 60398282, "body": "I had no idea that it can be undefined behavior to compare pointers in C++ in some cases. Not sure how Rust defines it so I am afraid someone more knowledgeable will need to answer that question. It seems really counter intuitive to me but might be that my code actually contains undefined behaviour in that case."}, {"owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "reply_to_user": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 2, "creation_date": 1459716242, "post_id": 36383469, "comment_id": 60398662, "body": "@hellcatv I found this question <a href=\"http://stackoverflow.com/questions/4909766/is-it-unspecified-behavior-to-compare-pointers-to-different-arrays-for-equality\" title=\"is it unspecified behavior to compare pointers to different arrays for equality\">stackoverflow.com/questions/4909766/&hellip;</a> which says that it is unspecified for &lt;, &gt;, etc but == and != returns a defined result so I believe that at least for C++ there is no undefined behavior when checking the equality of two pointers. Probably Rust does not make this unspecified either."}], "tags": [], "owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "is_accepted": true, "score": 5, "last_activity_date": 1459673954, "creation_date": 1459673954, "answer_id": 36383469, "question_id": 36382190, "link": "https://stackoverflow.com/questions/36382190/rust-is-there-an-opposite-for-split-at-mut-i-e-join-mut/36383469#36383469", "title": "Rust: Is there an opposite for split_at_mut (i.e. join_mut)?", "body": "<p>There is no such function in the standard library, probably since it is a rather niche case which can usually be resolved by using the slice that was split in the first case.</p>\n\n<p>That being said, with a bit of unsafe it is possible to implement the function.</p>\n\n<pre><code>fn join_mut&lt;'a, T&gt;(first: &amp;'a mut [T], second: &amp;'a mut [T]) -&gt; Option&lt;&amp;'a mut [T]&gt; {\n    let fl = first.len();\n    if first[fl..].as_mut_ptr() == second.as_mut_ptr() {\n        unsafe {\n            Some(::std::slice::from_raw_parts_mut(first.as_mut_ptr(), fl + second.len()))\n        }\n    }\n    else {\n        None\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=94dac25331150b250fdeb3f93d32798b&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 927, "favorite_count": 0, "accepted_answer_id": 36383469, "answer_count": 1, "score": 1, "last_activity_date": 1459673954, "creation_date": 1459663841, "question_id": 36382190, "link": "https://stackoverflow.com/questions/36382190/rust-is-there-an-opposite-for-split-at-mut-i-e-join-mut", "title": "Rust: Is there an opposite for split_at_mut (i.e. join_mut)?", "body": "<p>There's a very nice split_at_mut function which can take 1 slice and make it into 2...\nis there a way to undo that operation so I can get back to my original array again--lets assume I know that they are contiguous in memory (because I just split them)</p>\n\n<p>The question is: is there something similar to join_mut like so:</p>\n\n<pre><code>fn main() {\n    let mut item : [u8;32] = [0u8;32];\n    let (mut first, mut second) = item[..].split_at_mut(16);\n    first[0] = 4;\n    second[0] = 8;\n    let mut x = first.join_mut(first, second); // &lt;-- compile error\n    assert_eq(x[16], 8);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1459651580, "creation_date": 1459651580, "answer_id": 36381085, "question_id": 36381001, "link": "https://stackoverflow.com/questions/36381001/why-is-the-size-of-char-4-bytes-in-rust/36381085#36381085", "title": "Why is the size of `char` 4 bytes in Rust?", "body": "<p><code>char</code> is four bytes.  It is <em>always</em> four bytes, it will always <em>be</em> four bytes.  Four bytes it be, and four bytes shall it remain.</p>\n\n<p>It's not for anything special; four bytes is simply the smallest power of two in which you can store any Unicode scalar value.  Various other languages do the same thing.</p>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 7, "creation_date": 1459669316, "post_id": 36382388, "comment_id": 60382690, "body": "Note that <code>char</code> does not store a UTF-8 code point. <code>char</code> is actually an UTF-32 code point, that is, just a Unicode scalar value."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459697730, "post_id": 36382388, "comment_id": 60391552, "body": "I actually saw this behavior when looking at the alignment of struct, I thought, char stores, ASCII only but I see no"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1465674432, "post_id": 36382388, "comment_id": 63004202, "body": "all the more amazing, in this light is the theories offered here: <a href=\"https://doc.rust-lang.org/std/primitive.char.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.char.html</a> , namely: &quot;As always, remember that a human intuition for &#39;character&#39; may not map to Unicode&#39;s definitions. For example, emoji symbols such as &#39;\u2764\ufe0f&#39; can be more than one Unicode code point; this \u2764\ufe0f in particular is two:&quot; &lt;-- In UTF-32 you have only 1 code point for everything..."}], "tags": [], "owner": {"reputation": 437, "user_id": 3768769, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b3d7c242ed239afede83d0ac3bc5683f?s=128&d=identicon&r=PG&f=1", "display_name": "Fylux", "link": "https://stackoverflow.com/users/3768769/fylux"}, "is_accepted": false, "score": 5, "last_activity_date": 1459665806, "creation_date": 1459665806, "answer_id": 36382388, "question_id": 36381001, "link": "https://stackoverflow.com/questions/36381001/why-is-the-size-of-char-4-bytes-in-rust/36382388#36382388", "title": "Why is the size of `char` 4 bytes in Rust?", "body": "<p><strong>Char</strong> is four bytes, it doesn't depend on the architecture.</p>\n\n<p>Why? According to UTF-8 Wikipedia's article. </p>\n\n<blockquote>\n  <p>The first 128 characters (US-ASCII) need one byte. The next 1,920\n  characters need two bytes to encode. Three bytes are needed for\n  characters in the rest of the Basic Multilingual Plane, which contains\n  virtually all characters in common use. Four bytes are needed for\n  characters in the other planes of Unicode.</p>\n</blockquote>\n\n<p>So if you want to represent <strong>any possible</strong> Unicode character the compiler must save 4 bytes.</p>\n\n<p>You should also consider Byte Alignment: <a href=\"http://www.eventhelix.com/realtimemantra/ByteAlignmentAndOrdering.htm\" rel=\"noreferrer\">http://www.eventhelix.com/realtimemantra/ByteAlignmentAndOrdering.htm</a></p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 19, "last_activity_date": 1485762115, "last_edit_date": 1485762115, "creation_date": 1459692072, "answer_id": 36386347, "question_id": 36381001, "link": "https://stackoverflow.com/questions/36381001/why-is-the-size-of-char-4-bytes-in-rust/36386347#36386347", "title": "Why is the size of `char` 4 bytes in Rust?", "body": "<p>First of all: a <code>char</code> in Rust is a unique integral value representing a Unicode Scalar value. For example, consider <a href=\"http://www.fileformat.info/info/unicode/char/1f4a9/index.htm\" rel=\"noreferrer\">\ud83d\udca9</a> (aka Pile of Poo, aka U+1F4A9), in Rust it will be represented by a <code>char</code> with a value of <code>128169</code> in decimal (that is <code>0x1F4A9</code> in hexadecimal):</p>\n\n<pre><code>fn main() {\n    let c: char = \"\ud83d\udca9\".chars().next().unwrap();\n    println!(\"\ud83d\udca9 is {} ({})\", c, c as u32);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=bb945d140091e925865368e282eb9d93&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">On the playpen</a>.</p>\n\n<p>With that said, the Rust <code>char</code> is 4 bytes because 4 bytes is the smallest power of 2 number of bytes which can hold the integral value of any Unicode Scalar value. The decision was driven by the domain, not by architectural constraints.</p>\n\n<hr>\n\n<p><em>Note: the emphasis on Scalar value is that a number of \"characters\" as we see them are actually graphemes composed by multiple combining characters in Unicode, in this case multiple <code>char</code> are required.</em></p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3439, "favorite_count": 1, "accepted_answer_id": 36386347, "answer_count": 3, "score": 14, "last_activity_date": 1485762115, "creation_date": 1459650696, "last_edit_date": 1459775527, "question_id": 36381001, "link": "https://stackoverflow.com/questions/36381001/why-is-the-size-of-char-4-bytes-in-rust", "title": "Why is the size of `char` 4 bytes in Rust?", "body": "<p>This code shows that <code>char</code> takes 4 bytes:</p>\n\n<pre><code>println!(\"char : {}\", std::mem::size_of::&lt;char&gt;());\n</code></pre>\n\n<ol>\n<li>Why does it take 4 bytes?. </li>\n<li>Does the size depend on the platform, or is it always 4 bytes?</li>\n<li>If it's always 4 bytes, it is for something special?</li>\n<li>Does the compiler guarantee some minimum size for the size of <code>char</code>?</li>\n</ol>\n\n<p><em>In <a href=\"https://play.rust-lang.org/\" rel=\"noreferrer\">https://play.rust-lang.org/</a> I also get 4 bytes</em></p>\n"}, {"tags": ["string", "reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 211, "user_id": 3429608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17fb0f77c04c2ad6956abe0a2f585fda?s=128&d=identicon&r=PG&f=1", "display_name": "MrSpock", "link": "https://stackoverflow.com/users/3429608/mrspock"}, "edited": false, "score": 0, "creation_date": 1459643136, "post_id": 36380219, "comment_id": 60377920, "body": "Thanks this worked but what if I wanted to make group of assignments based on args count like inside code block {} ?: <code>match args.len() {     2 =&gt; { something;another action; },</code> Is there any way to get working code with basic match without <code>let var = match {</code> assign ?"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 6, "last_activity_date": 1459644516, "last_edit_date": 1459644516, "creation_date": 1459642842, "answer_id": 36380219, "question_id": 36380094, "link": "https://stackoverflow.com/questions/36380094/mismatched-types-expected-str-found-string-when-assigning-string/36380219#36380219", "title": "Mismatched types: expected &amp;str found String when assigning string", "body": "<p>You initialized <code>out_filename</code> with a string literal. The type of a string literal is <code>&amp;str</code> (or, more specifically, <code>&amp;'static str</code>), which is different from <code>String</code>.</p>\n\n<p>The simplest solution is to assign <code>out_filename</code> to the result of the <code>match</code> expression directly:</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    let out_filename = match args.len() {\n        2 =&gt; &amp;args[1],\n        3 =&gt; &amp;args[2],\n        _ =&gt; panic!(\"Too many params !\"),\n    };\n}\n</code></pre>\n\n<blockquote>\n  <p>[...]\u00a0what if I wanted to make group of assignments based on args count like inside code block {} ? [...] Is there any way to get working code with basic match without <code>let var = match {</code> assign ?</p>\n</blockquote>\n\n<p>You can simply put some <code>let</code> statements with no initializers before the <code>match</code> expression and initialize the variables as appropriate in each arm. You'll get a compiler error if you try to use a variable that might be left undefined and, unless you define the variables with <code>let mut</code>, you'll also get an error if you try to assign a variable more than once on a particular code path.</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    let out_filename;\n    match args.len() {\n        2 =&gt; out_filename = &amp;args[1],\n        3 =&gt; out_filename = &amp;args[2],\n        _ =&gt; panic!(\"Too many params !\"),\n    };\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1459644400, "last_edit_date": 1459644400, "creation_date": 1459643771, "answer_id": 36380319, "question_id": 36380094, "link": "https://stackoverflow.com/questions/36380094/mismatched-types-expected-str-found-string-when-assigning-string/36380319#36380319", "title": "Mismatched types: expected &amp;str found String when assigning string", "body": "<p>As Francis Gagn\u00e9 mentioned, <code>String</code> and <code>&amp;str</code> are not the same. The easiest way to convert them is to just use <code>to_string()</code>. It isn't <em>always</em> the best thing to do, but it will do while you are just learning because it will mostly work. <a href=\"https://doc.rust-lang.org/book/strings.html\" rel=\"nofollow\">You can read more about strings here</a>.</p>\n\n<pre><code>let mut out_filename = \"\".to_string();\nlet args: Vec&lt;_&gt; = env::args().collect();\nmatch args.len() {\n    2 =&gt; out_filename = args[1].clone(),\n    3 =&gt; out_filename = args[2].clone(),\n    _ =&gt; panic!(\"To many params !\"),\n};\n</code></pre>\n\n<p>Note, I also fixed another error you would have come across, because of moving a value out of <code>args</code>. Explicitly cloning them, as I have done above, is one way of fixing that, and probably the easiest because you won't have to worry about lifetimes either.</p>\n"}], "owner": {"reputation": 211, "user_id": 3429608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17fb0f77c04c2ad6956abe0a2f585fda?s=128&d=identicon&r=PG&f=1", "display_name": "MrSpock", "link": "https://stackoverflow.com/users/3429608/mrspock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12573, "favorite_count": 0, "answer_count": 2, "score": 12, "last_activity_date": 1551012693, "creation_date": 1459641682, "last_edit_date": 1551012693, "question_id": 36380094, "link": "https://stackoverflow.com/questions/36380094/mismatched-types-expected-str-found-string-when-assigning-string", "title": "Mismatched types: expected &amp;str found String when assigning string", "body": "<p>I'm trying to assign variable value (type <code>String</code>) based on the number of args:</p>\n\n<pre><code>let mut out_filename = \"\";\nlet args: Vec&lt;_&gt; = env::args().collect();\nmatch args.len() {\n    2 =&gt; out_filename = args[1],\n    3 =&gt; out_filename = args[2],\n    _ =&gt; panic!(\"To many params !\"),\n};\n</code></pre>\n\n<p>And I'm getting </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:39:29: 39:36 error: mismatched types:\n expected `&amp;str`,\n    found `collections::string::String`\n(expected &amp;-ptr,\n    found struct `collections::string::String`) [E0308]\nsrc/main.rs:39         2 =&gt; out_filename = args[1],\n</code></pre>\n\n<p>How to make a match statement where the match value (1,2,3) is just a selector and the returned type is different?  There is no <code>let var = match</code> ..</p>\n"}, {"tags": ["rust", "closures", "borrow-checker", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528650584, "post_id": 36379279, "comment_id": 88578679, "body": "<a href=\"https://github.com/rust-lang/rfcs/pull/2229\" rel=\"nofollow noreferrer\">Proposed RFC 2229</a> (&quot;Closures Capture Disjoint Fields&quot;) would make the capturing semantics of closures smarter, but it requires a non-trivial amount of work and thinking."}], "tags": [], "owner": {"reputation": 14813, "user_id": 141502, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/zgvfq.png?s=128&g=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/141502/daniel"}, "is_accepted": true, "score": 22, "last_activity_date": 1505738105, "last_edit_date": 1505738105, "creation_date": 1459634813, "answer_id": 36379279, "question_id": 36379242, "link": "https://stackoverflow.com/questions/36379242/mutably-borrow-one-struct-field-while-borrowing-another-in-a-closure/36379279#36379279", "title": "Mutably borrow one struct field while borrowing another in a closure", "body": "<p>Usually the borrow checker can distinguish between the different fields of a structure, but this doesn't work within closures (lambdas).</p>\n\n<p>Instead, borrow the second field outside the closure:</p>\n\n<pre><code>let field2 = &amp;strct.field2;\nstrct.field1.retain(|v| !field2.contains(v));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1583683946, "post_id": 50149929, "comment_id": 107191844, "body": "Not now that we have non-lexical lifetimes."}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": false, "score": 3, "last_activity_date": 1525334686, "creation_date": 1525334686, "answer_id": 50149929, "question_id": 36379242, "link": "https://stackoverflow.com/questions/36379242/mutably-borrow-one-struct-field-while-borrowing-another-in-a-closure/50149929#50149929", "title": "Mutably borrow one struct field while borrowing another in a closure", "body": "<p>This <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/04/24/rust-pattern-precise-closure-capture-clauses/\" rel=\"nofollow noreferrer\">recent blog post</a> shows a very useful pattern for this kind of problem:</p>\n\n<blockquote>\n  <p>Sometimes, when I want to be very precise, I will write closures in a stylized way that makes it crystal clear what they are capturing. Instead of writing <code>|v| ...</code>, I first introduce a block that creates a lot of local variables, with the final thing in the block being a <code>move</code> closure (<code>move</code> closures take ownership of the things they use, instead of borrowing them from the creator). This gives complete control over what is borrowed and how. In this case, the closure might look like:</p>\n</blockquote>\n\n<p>In other words, the borrows are defined right with the closure and moved into the closure. This makes it totally clear that their purpose is to provide the closure with borrowed values. In context of the original question the pattern would look like this:</p>\n\n<pre><code>strct.field1.retain({\n    let field2 = &amp;strct.field2;\n    move |v| !field2.contains(v)\n});\n</code></pre>\n\n<p>A nice property of this code is that the borrow of <code>field2</code> does not stick around after it is no longer used.</p>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2398, "favorite_count": 2, "accepted_answer_id": 36379279, "answer_count": 2, "score": 16, "last_activity_date": 1555855863, "creation_date": 1459634539, "last_edit_date": 1555855863, "question_id": 36379242, "link": "https://stackoverflow.com/questions/36379242/mutably-borrow-one-struct-field-while-borrowing-another-in-a-closure", "title": "Mutably borrow one struct field while borrowing another in a closure", "body": "<p>I have a struct containing two fields and I want to modify one field (mutable borrow) using another field (immutable borrow), but I get an error from the borrow checker.</p>\n\n<p>For instance, the following code:</p>\n\n<pre><code>struct Struct {\n    field1: Vec&lt;i32&gt;,\n    field2: Vec&lt;i32&gt;,\n}\n\nfn main() {\n    let mut strct = Struct {\n        field1: vec![1, 2, 3],\n        field2: vec![2, 3, 4],\n    };\n\n    strct.field1.retain(|v| !strct.field2.contains(v));\n\n    println!(\"{:?}\", strct.field1);\n}\n</code></pre>\n\n<p>gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `strct.field1` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:12:5\n   |\n12 |     strct.field1.retain(|v| !strct.field2.contains(v));\n   |     ^^^^^^^^^^^^^------^---^^-----^^^^^^^^^^^^^^^^^^^^\n   |     |            |      |    |\n   |     |            |      |    first borrow occurs due to use of `strct` in closure\n   |     |            |      immutable borrow occurs here\n   |     |            immutable borrow later used by call\n   |     mutable borrow occurs here\n</code></pre>\n\n<p>What are the Rust ways of updating one field using another from within a closure?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1459634856, "creation_date": 1459634856, "answer_id": 36379284, "question_id": 36378897, "link": "https://stackoverflow.com/questions/36378897/error-borrowed-value-is-only-reference-must-be-valid-for/36379284#36379284", "title": "Error: borrowed value is only... reference must be valid for", "body": "<p>Yes, this behavior is absolutely normal and natural.</p>\n\n<p>Here's a simpler example:</p>\n\n<pre><code>{\n    let x = 1;\n    let mut v = Vec::new();\n\n    v.push(&amp;x);\n}\n</code></pre>\n\n<p>This code compiles, but this doesn't:</p>\n\n<pre><code>{\n    let mut v = Vec::new();\n    let x = 1;\n\n    v.push(&amp;x);\n}\n</code></pre>\n\n<p>This happens because the order of variables destruction is the opposite of their construction order. In the top example it goes like this:</p>\n\n<pre><code>x created\nv created\nv[0] = &amp;x\nv destroyed\nx destroyed\n</code></pre>\n\n<p>But in the bottom one we have this:</p>\n\n<pre><code>v created\nx created\nv[0] = &amp;x\nx destroyed  // x is destroyed, but v still holds a reference to x!\nv destroyed\n</code></pre>\n\n<p>That is, in the bottom example there is a moment (albeit close to invisible) when there is an outstanding reference to <code>x</code> which is already destroyed.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 122, "favorite_count": 0, "accepted_answer_id": 36379284, "answer_count": 1, "score": 0, "last_activity_date": 1459634856, "creation_date": 1459632329, "last_edit_date": 1459633141, "question_id": 36378897, "link": "https://stackoverflow.com/questions/36378897/error-borrowed-value-is-only-reference-must-be-valid-for", "title": "Error: borrowed value is only... reference must be valid for", "body": "<p>I'm getting these errors when compiling the code below (code 1)</p>\n\n<blockquote>\n  <p>error: <code>v</code> does not live long enough vec.push(&amp;v);</p>\n  \n  <p>note: reference must be valid for the block suffix following statement\n  0 at 15:64...</p>\n  \n  <p>note: ...but borrowed value is only valid for the block suffix\n  following statement 2 at 19:35</p>\n</blockquote>\n\n<p>(code 1)</p>\n\n<pre><code>fn main() {\n\n    let mut vec: Vec&lt;&amp;Inf&gt; = Vec::&lt;&amp;Inf&gt;::new();//&lt;-- It appears the error\n\n    let p: Foo1  = Foo1::created(); \n    let v: Foo2  = Foo2::created();\n\n    vec.push(&amp;v);\n    vec.push(&amp;p);\n</code></pre>\n\n<p>but not when I move <code>vec</code>, below <code>p</code> and <code>v</code>.</p>\n\n<p>(code 2)</p>\n\n<pre><code>fn main() {\n\n    let p: Foo1  = Foo1::created(); \n    let v: Foo2  = Foo2::created();\n\n    //It does not appear the error described above\n    let mut vec: Vec&lt;&amp;Inf&gt; = Vec::&lt;&amp;Inf&gt;::new(); //&lt;-- It does not appear the error\n    vec.push(&amp;v);\n    vec.push(&amp;p);\n\n..//\n</code></pre>\n\n<p>(This behavior may be normal, if it is someone can I explain me.)</p>\n\n<p>This is a similar case that I created so you can see the error</p>\n\n<hr>\n\n<p>Error <kbd><a href=\"https://play.rust-lang.org/?gist=17803e7ca1e65b43fbaa65e3916b20fe&amp;version=stable\" rel=\"nofollow\">play.rust</a></kbd></p>\n\n<p>No error <kbd><a href=\"https://play.rust-lang.org/?gist=ad6e8934a3134e9899b6d7f7dcf3d840&amp;version=stable\" rel=\"nofollow\">play.rust</a></kbd></p>\n\n<hr>\n\n<p>I read about this <a href=\"https://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow\">ownership</a> and this <a href=\"https://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow\">borrowing</a></p>\n"}, {"tags": ["rust", "mutability"], "answers": [{"comments": [{"owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "edited": false, "score": 0, "creation_date": 1459692013, "post_id": 36378737, "comment_id": 60389432, "body": "Thanks, that did the trick. I had tried previously without using refs and I was getting other errors but of a similar kind. I&#39;ll keep the shuffle algorithm in mind since I may as well make it as efficient as possible."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 2, "last_activity_date": 1459631446, "creation_date": 1459631446, "answer_id": 36378737, "question_id": 36378655, "link": "https://stackoverflow.com/questions/36378655/mutability-issue-with-self-and-collections-in-rust/36378737#36378737", "title": "Mutability issue with self and collections in Rust", "body": "<p><code>shuffler</code> is of type <code>Vec&lt;(&amp;Card, u32)&gt;</code>, i.e. the <code>card</code> is a <em>reference</em>. That is, it's a pointer at the <code>Card</code> object stored in the buffer underlying the <code>self.cards</code> vector. So <code>self.cards.clear()</code> would delete the memory under <code>shuffler</code>'s feet!</p>\n\n<p>Luckily there is an easy fix: Don't take references and clear the vector, <em>move the cards out of</em> <code>self.cards</code> with <code>drain</code>:</p>\n\n<pre><code>let mut shuffler: Vec&lt;(Card, u32)&gt; = Vec::with_capacity(self.cards.len());\nfor card in self.cards.drain(..) {\n    let card_pos = (card, rand::thread_rng().gen::&lt;u32&gt;());\n    shuffler.push(card_pos);\n}\nshuffler.sort_by_key(|k| k.1);\nfor card_pos in shuffler {\n    let (card, _) = card_pos;\n    self.cards.push(card);\n}\n</code></pre>\n\n<p>Aside: There is an in-place shuffling algorithm that is also more efficient than sorting&mdash;linear time instead of O(n log n), and better constant factors&mdash;the <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\" rel=\"nofollow\">Fisher-Yates shuffle</a>. </p>\n"}], "owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 131, "favorite_count": 0, "accepted_answer_id": 36378737, "answer_count": 1, "score": 0, "last_activity_date": 1459631446, "creation_date": 1459630826, "question_id": 36378655, "link": "https://stackoverflow.com/questions/36378655/mutability-issue-with-self-and-collections-in-rust", "title": "Mutability issue with self and collections in Rust", "body": "<p>I am writing a <a href=\"https://github.com/locka99/deckofcards-rs/blob/master/src/deck.rs\" rel=\"nofollow\">simple library</a> in Rust that manages a deck of cards. It has functions to shuffle, deal cards etc. </p>\n\n<p>The shuffle() function takes a mutable reference to self that allows the existing deck to be reshuffled. It should be pretty straightforward:</p>\n\n<ol>\n<li>Create a temporary collection from the deck containing a tuple with a card and a random number.</li>\n<li>Sort the collection by the random number.</li>\n<li>Rebuild the existing deck using the order of the temporary collection.</li>\n</ol>\n\n<p>The code for this would be as follows.</p>\n\n<pre><code>pub struct Deck {\n    // A deck contains zero or more cards\n    cards: Vec&lt;Card&gt;\n}\n\nimpl Deck {\n\n// shuffle\npub fn shuffle(&amp;mut self) {\n    if self.cards.is_empty() {\n        return;\n    }\n\n    let mut shuffler : Vec&lt;(&amp;Card, u32)&gt; = Vec::with_capacity(self.cards.len());\n\n    for card in self.cards.iter() {\n        // make a tuple consisting of each card in the input and a random number\n        let card_pos = (card, rand::thread_rng().gen::&lt;u32&gt;());\n        shuffler.push(card_pos);\n    }\n\n    // Sort the vector\n    shuffler.sort_by_key(|k| k.1);\n\n    // Clear the cards\n    self.cards.clear();\n\n    // Put the cards into the new randomized order\n    for card_pos in shuffler {\n        let (card, _) = card_pos;\n        self.cards.push(*card)\n    }\n}\n\n}\n</code></pre>\n\n<p>The issue I have is this won't compile because I get errors.</p>\n\n<pre><code>src\\deck.rs:85:9: 85:19 error: cannot borrow `self.cards` as mutable because it is also borrowed as immutable [E0502]                                                                                           \nsrc\\deck.rs:85         self.cards.clear();                                                              \n                       ^~~~~~~~~~                                                                       \nsrc\\deck.rs:75:15: 75:25 note: previous borrow of `self.cards` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `self.cards` until the borrow ends                             \nsrc\\deck.rs:75          for card in self.cards.iter() {                                                 \n                                    ^~~~~~~~~~                                                          \nsrc\\deck.rs:92:6: 92:6 note: previous borrow ends here                                                  \nsrc\\deck.rs:68     pub fn shuffle(&amp;mut self) {                                                          \n...                                                                                                     \nsrc\\deck.rs:92     }                                                                                    \n                   ^                                                                                    \nsrc\\deck.rs:90:13: 90:23 error: cannot borrow `self.cards` as mutable because it is also borrowed as immutable [E0502]                                                                                          \nsrc\\deck.rs:90             self.cards.push(*card)                                                       \n                           ^~~~~~~~~~                                                                   \nsrc\\deck.rs:75:15: 75:25 note: previous borrow of `self.cards` occurs here; the immutable borrow prevent\ns subsequent moves or mutable borrows of `self.cards` until the borrow ends                             \nsrc\\deck.rs:75          for card in self.cards.iter() {                                                 \n                                    ^~~~~~~~~~                                                          \nsrc\\deck.rs:92:6: 92:6 note: previous borrow ends here                                                  \nsrc\\deck.rs:68     pub fn shuffle(&amp;mut self) {                                                          \n...                                                                                                     \nsrc\\deck.rs:92     }                                                                            \n</code></pre>\n\n<p>The errors complain of mutability which I assume to mean that it doesn't like that I've more than one mutable reference in scope or something but I don't know how to fix it. I've tried using brace delimiters to make blocks for each action but to no avail. I could probably break this up into more than one function but I'd rather it was a single function. How do I make this work with the least amount of effort?</p>\n\n<p>NB I haven't tested the sort functionality yet so I hope sort_by_key does what I think but that's only going to matter after I resolve this first issue.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1459649750, "post_id": 36378378, "comment_id": 60379191, "body": "Actually, they&#39;re different problems.  A <code>fn</code> pointer can be pretty trivially cloned, it just doesn&#39;t have the implementation.  A closure is harder, because whether or not it can be cloned depends on whether the values it captures can be cloned, and <i>how</i> they&#39;re captured can affect that.  Plus, that starts to get into &quot;how do you specify which traits a closure should impl&quot; and it all gets messy very fast."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1459651831, "post_id": 36378378, "comment_id": 60379604, "body": "Right. I just searched for and found a separate issue for closures, so I&#39;ve edited my answer accordingly."}, {"owner": {"reputation": 13, "user_id": 1213493, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bc11022f38abc448d8de8d775ce50ef3?s=128&d=identicon&r=PG", "display_name": "\u041f\u0451\u0442\u0440 \u0418\u0432\u0430\u043d\u043e\u0432", "link": "https://stackoverflow.com/users/1213493/%d0%9f%d1%91%d1%82%d1%80-%d0%98%d0%b2%d0%b0%d0%bd%d0%be%d0%b2"}, "edited": false, "score": 0, "creation_date": 1459682316, "post_id": 36378378, "comment_id": 60386431, "body": "Thank you for the explanation!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1459651748, "last_edit_date": 1459651748, "creation_date": 1459629128, "answer_id": 36378378, "question_id": 36378166, "link": "https://stackoverflow.com/questions/36378166/is-it-possible-to-clone-skip-while/36378378#36378378", "title": "Is it possible to clone `skip_while`?", "body": "<p>The problem is that the closure doesn't implement <code>Clone</code>. This is a known issue in Rust: <a href=\"https://github.com/rust-lang/rust/issues/23501\" rel=\"nofollow\">#23501</a>.</p>\n\n<p>What if we use a normal function instead of a closure? Your closure doesn't capture anything, after all.</p>\n\n<pre><code>fn main() {\n    fn is_negative(x: &amp;&amp;i32) -&gt; bool {\n        x.is_negative()\n    }\n\n    let a = [-1i32, 0, 1];\n\n    let mut iter = a.into_iter().skip_while(is_negative).clone();\n\n    assert_eq!(iter.next(), Some(&amp;0));\n    assert_eq!(iter.next(), Some(&amp;1));\n    assert_eq!(iter.next(), None);\n}\n</code></pre>\n\n<p>Unfortunately, this doesn't work, since functions don't implement <code>Clone</code> either (although they implement <code>Copy</code>!). This is also a known issue: <a href=\"https://github.com/rust-lang/rust/issues/24000\" rel=\"nofollow\">#24000</a>, <a href=\"https://github.com/rust-lang/rust/issues/28229\" rel=\"nofollow\">#28229</a>.</p>\n"}], "owner": {"reputation": 13, "user_id": 1213493, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bc11022f38abc448d8de8d775ce50ef3?s=128&d=identicon&r=PG", "display_name": "\u041f\u0451\u0442\u0440 \u0418\u0432\u0430\u043d\u043e\u0432", "link": "https://stackoverflow.com/users/1213493/%d0%9f%d1%91%d1%82%d1%80-%d0%98%d0%b2%d0%b0%d0%bd%d0%be%d0%b2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 0, "accepted_answer_id": 36378378, "answer_count": 1, "score": 1, "last_activity_date": 1459774763, "creation_date": 1459627642, "last_edit_date": 1459774763, "question_id": 36378166, "link": "https://stackoverflow.com/questions/36378166/is-it-possible-to-clone-skip-while", "title": "Is it possible to clone `skip_while`?", "body": "<p><code>std::iter::SkipWhile</code> has a <code>Clone</code> implementation, but when I try to call <code>clone()</code> on it, I get:</p>\n\n<pre><code>let a = [-1i32, 0, 1];\nlet mut iter = a.into_iter().skip_while(|x| x.is_negative()).clone();\n</code></pre>\n\n<blockquote>\n  <p>the method <code>clone</code> exists but the following trait bounds were not satisfied: <code>[closure@&lt;anon&gt;:3:45: 3:64] : core::clone::Clone</code></p>\n</blockquote>\n\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main%28%29%20%7B%0A%20%20%20%20let%20a%20%3D%20[-1i32%2C%200%2C%201]%3B%0A%20%20%20%20%0A%20%20%20%20let%20mut%20iter%20%3D%20a.into_iter%28%29.skip_while%28|x|%20x.is_negative%28%29%29%3B%0A%20%20%20%20%0A%20%20%20%20assert_eq!%28iter.next%28%29%2C%20Some%28%260%29%29%3B%0A%20%20%20%20assert_eq!%28iter.next%28%29%2C%20Some%28%261%29%29%3B%0A%20%20%20%20assert_eq!%28iter.next%28%29%2C%20None%29%3B%0A%7D\" rel=\"nofollow\">Playground</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1459624989, "post_id": 36374938, "comment_id": 60372891, "body": "Could you explain the <code>prelude</code> a little more? I think it&#39;s useful in this context and I really like the question :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1459681037, "post_id": 36374938, "comment_id": 60386072, "body": "@LukasKalbertodt: Well, just as I was looking for an existing question explaining the prelude that I could link to I found a clear duplicate <a href=\"http://stackoverflow.com/questions/30546644/why-dont-options-some-and-none-variants-need-to-be-qualified/30546727#30546727\" title=\"why dont options some and none variants need to be qualified\">stackoverflow.com/questions/30546644/&hellip;</a> ..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1459682942, "post_id": 36374938, "comment_id": 60386591, "body": "@LukasKalbertodt: Actually, I could not find a single explanation of what the prelude was and what its role was on SO, so I gave it a shot in a dedicated question <a href=\"http://stackoverflow.com/q/36384840/147192\">here</a>. I would appreciate your review, if you have the time."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1459689597, "post_id": 36374938, "comment_id": 60388663, "body": "Oops, perfect duplicate, indeed :P Thanks for opening a new question, I upvoted an commented."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1459609799, "creation_date": 1459609799, "answer_id": 36374938, "question_id": 36374850, "link": "https://stackoverflow.com/questions/36374850/why-can-we-use-somevalue-instead-of-optionsomevalue-in-rust/36374938#36374938", "title": "Why can we use `Some(value)` instead of `Option::Some(value)` in Rust?", "body": "<p>The variant of an <code>enum</code> can be imported into the current namespace too.</p>\n\n<pre><code>enum Test {\n    A,\n    B,\n}\n\nuse Test::{A,B};\n\nfn main() {\n    let t = A;\n    match t {\n        A =&gt; println!(\"A\"),\n        B =&gt; println!(\"B\"),\n    };\n}\n</code></pre>\n\n<p>And it turns out that the prelude of Rust, on top of importing <code>Option</code>, also imports <code>Some</code> and <code>None</code>.</p>\n"}], "owner": {"reputation": 2759, "user_id": 1407018, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/5d9f9fc36e252c57424e5d176c6530dc?s=128&d=identicon&r=PG", "display_name": "Zhe Chen", "link": "https://stackoverflow.com/users/1407018/zhe-chen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 125, "favorite_count": 0, "closed_date": 1459774353, "accepted_answer_id": 36374938, "answer_count": 1, "score": 2, "last_activity_date": 1459774364, "creation_date": 1459609339, "last_edit_date": 1459774364, "question_id": 36374850, "link": "https://stackoverflow.com/questions/36374850/why-can-we-use-somevalue-instead-of-optionsomevalue-in-rust", "closed_reason": "Duplicate", "title": "Why can we use `Some(value)` instead of `Option::Some(value)` in Rust?", "body": "<p>Shouldn't the variant of an enum be fully qualified?</p>\n"}, {"tags": ["rust", "iterator", "map-function", "filterfunction", "rust-result"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1459588627, "post_id": 36368843, "comment_id": 60361223, "body": "<a href=\"http://stackoverflow.com/questions/26368288/dealing-with-result-within-iter\" title=\"dealing with result within iter\">stackoverflow.com/questions/26368288/&hellip;</a> ?"}], "answers": [{"tags": [], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "is_accepted": false, "score": 3, "last_activity_date": 1525195078, "last_edit_date": 1525195078, "creation_date": 1459573846, "answer_id": 36369452, "question_id": 36368843, "link": "https://stackoverflow.com/questions/36368843/whats-the-most-idiomatic-way-of-working-with-an-iterator-of-results/36369452#36369452", "title": "What&#39;s the most idiomatic way of working with an Iterator of Results?", "body": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow noreferrer\"><code>filter_map</code></a> can be used to reduce simple cases of mapping then filtering. In your example there is some logic to the filter so I don't think it simplifies things. I don't see any useful functions in the documentation for <code>Result</code> either unfortunately. I think your example is as idiomatic as it could get, but here are some small improvements:</p>\n\n<pre><code>let things = vec![...]; // e.g. Vec&lt;String&gt;\nthings.iter().map(|thing| {\n     // The ? operator can be used in place of try! in the nightly version of Rust\n    let a = do_stuff(thing)?;\n    Ok(other_stuff(a))\n// The closure braces can be removed if the code is a single expression\n}).filter(|thing_result| match *thing_result {\n        Err(e) =&gt; true,\n        Ok(a) =&gt; check(a),\n    }\n).map(|thing_result| {\n    let a = thing_result?;\n    // do stuff\n    b\n})\n</code></pre>\n\n<p>The <code>?</code> operator can be less readable in some cases, so you might not want to use it.</p>\n\n<p>If you are able to change the <code>check</code> function to return <code>Some(x)</code> instead of true, and <code>None</code> instead of false, you can use <code>filter_map</code>:</p>\n\n<pre><code>let bar = things.iter().filter_map(|thing| {\n    match do_stuff(thing) {\n        Err(e) =&gt; Some(Err(e)),\n        Ok(a) =&gt; {\n            let x = other_stuff(a);\n            if check_2(x) {\n                Some(Ok(x))\n            } else {\n                None\n            }\n        }\n    }\n}).map(|thing_result| {\n    let a = try!(thing_result);\n    // do stuff\n    b\n}).collect::&lt;Result&lt;Vec&lt;_&gt;, _&gt;&gt;();\n</code></pre>\n\n<p>You can get rid of the <code>let a = try!(thing);</code> by using a match in some cases as well. However, using <code>filter_map</code> here doesn't seem to help.</p>\n"}, {"comments": [{"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1459679078, "post_id": 36370251, "comment_id": 60385502, "body": "<code>vec![Ok(1),Ok(2),Err(3),Ok(4)].into_iter()....</code> looks better but creating a vector from the array is more expencive"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 10, "last_activity_date": 1525194938, "last_edit_date": 1525194938, "creation_date": 1459580468, "answer_id": 36370251, "question_id": 36368843, "link": "https://stackoverflow.com/questions/36368843/whats-the-most-idiomatic-way-of-working-with-an-iterator-of-results/36370251#36370251", "title": "What&#39;s the most idiomatic way of working with an Iterator of Results?", "body": "<p>You can implement these iterators yourself. See how <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/libcore/iter/mod.rs#L1552-L1560\" rel=\"noreferrer\"><code>filter</code></a> and <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/libcore/iter/mod.rs#L1307-L1310\" rel=\"noreferrer\"><code>map</code></a> are implemented in the standard library.</p>\n\n<p><code>map_ok</code> implementation:</p>\n\n<pre><code>#[derive(Clone)]\npub struct MapOkIterator&lt;I, F&gt; {\n    iter: I,\n    f: F,\n}\n\nimpl&lt;A, B, E, I, F&gt; Iterator for MapOkIterator&lt;I, F&gt;\nwhere\n    F: FnMut(A) -&gt; B,\n    I: Iterator&lt;Item = Result&lt;A, E&gt;&gt;,\n{\n    type Item = Result&lt;B, E&gt;;\n\n    #[inline]\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.iter.next().map(|x| x.map(&amp;mut self.f))\n    }\n}\n\npub trait MapOkTrait {\n    fn map_ok&lt;F, A, B, E&gt;(self, func: F) -&gt; MapOkIterator&lt;Self, F&gt;\n    where\n        Self: Sized + Iterator&lt;Item = Result&lt;A, E&gt;&gt;,\n        F: FnMut(A) -&gt; B,\n    {\n        MapOkIterator {\n            iter: self,\n            f: func,\n        }\n    }\n}\n\nimpl&lt;I, T, E&gt; MapOkTrait for I\nwhere\n    I: Sized + Iterator&lt;Item = Result&lt;T, E&gt;&gt;,\n{\n}\n</code></pre>\n\n<p><code>filter_ok</code> is almost the same:</p>\n\n<pre><code>#[derive(Clone)]\npub struct FilterOkIterator&lt;I, P&gt; {\n    iter: I,\n    predicate: P,\n}\n\nimpl&lt;I, P, A, E&gt; Iterator for FilterOkIterator&lt;I, P&gt;\nwhere\n    P: FnMut(&amp;A) -&gt; bool,\n    I: Iterator&lt;Item = Result&lt;A, E&gt;&gt;,\n{\n    type Item = Result&lt;A, E&gt;;\n\n    #[inline]\n    fn next(&amp;mut self) -&gt; Option&lt;Result&lt;A, E&gt;&gt; {\n        for x in self.iter.by_ref() {\n            match x {\n                Ok(xx) =&gt; if (self.predicate)(&amp;xx) {\n                    return Some(Ok(xx));\n                },\n                Err(_) =&gt; return Some(x),\n            }\n        }\n        None\n    }\n}\n\npub trait FilterOkTrait {\n    fn filter_ok&lt;P, A, E&gt;(self, predicate: P) -&gt; FilterOkIterator&lt;Self, P&gt;\n    where\n        Self: Sized + Iterator&lt;Item = Result&lt;A, E&gt;&gt;,\n        P: FnMut(&amp;A) -&gt; bool,\n    {\n        FilterOkIterator {\n            iter: self,\n            predicate: predicate,\n        }\n    }\n}\n\nimpl&lt;I, T, E&gt; FilterOkTrait for I\nwhere\n    I: Sized + Iterator&lt;Item = Result&lt;T, E&gt;&gt;,\n{\n}\n</code></pre>\n\n<p>Your code may look like this:</p>\n\n<pre><code>[\"1\", \"2\", \"3\", \"4\"]\n    .iter()\n    .map(|x| x.parse::&lt;u16&gt;().map(|a| a + 10))\n    .filter_ok(|x| x % 2 == 0)\n    .map_ok(|x| x + 100)\n    .collect::&lt;Result&lt;Vec&lt;_&gt;, std::num::ParseIntError&gt;&gt;()\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=316d31fca6bdbff00293f6a8c7919042&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 2901, "user_id": 227779, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/04b9cea001c22cc62e650a3180a1123a?s=128&d=identicon&r=PG", "display_name": "Per Lundberg", "link": "https://stackoverflow.com/users/227779/per-lundberg"}, "edited": false, "score": 2, "creation_date": 1494620828, "post_id": 36371890, "comment_id": 74924742, "body": "Upvoted for recommending the <code>filter_map</code> method. Wasn&#39;t aware of it, it&#39;s <i>great</i>!"}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 2, "creation_date": 1526401240, "post_id": 36371890, "comment_id": 87726160, "body": "An alternative to <code>scan</code> as used above would be <code>take_while(Result::is_ok).map(Result::unwrap)</code>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 2, "creation_date": 1526403364, "post_id": 36371890, "comment_id": 87727373, "body": "@goertzenator Best avoid panic-y code if there&#39;s an alternative, though."}, {"owner": {"reputation": 374, "user_id": 399058, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/a5402f4bcca02fbeab1ad3e8d514665d?s=128&d=identicon&r=PG", "display_name": "Tails", "link": "https://stackoverflow.com/users/399058/tails"}, "edited": false, "score": 1, "creation_date": 1594580068, "post_id": 36371890, "comment_id": 111168802, "body": "I was buckling up to write a reducer that would return the first error result or the complete vector... but <code>.collect()</code> is amazing!"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 48, "last_activity_date": 1459591730, "creation_date": 1459591730, "answer_id": 36371890, "question_id": 36368843, "link": "https://stackoverflow.com/questions/36368843/whats-the-most-idiomatic-way-of-working-with-an-iterator-of-results/36371890#36371890", "title": "What&#39;s the most idiomatic way of working with an Iterator of Results?", "body": "<p>There are lots of ways you could mean this.</p>\n\n<p>If you just want to panic, use <code>.map(|x| x.unwrap())</code>.</p>\n\n<p>If you want all results <em>or</em> a single error, <code>collect</code> into a <code>Result&lt;X&lt;T&gt;&gt;</code>:</p>\n\n<pre><code>let results: Result&lt;Vec&lt;i32&gt;, _&gt; = result_i32_iter.collect();\n</code></pre>\n\n<p>If you want everything except the errors, use <code>.filter_map(|x| x.ok())</code> or <code>.flat_map(|x| x)</code>.</p>\n\n<p>If you want everything <em>up to</em> the first error, use <code>.scan((), |_, x| x.ok())</code>.</p>\n\n<pre><code>let results: Vec&lt;i32&gt; = result_i32_iter.scan((), |_, x| x.ok());\n</code></pre>\n\n<p>Note that these operations can be combined with earlier operations in many cases.</p>\n"}, {"tags": [], "owner": {"reputation": 1455, "user_id": 1506301, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ba34ad56376b81321544fc4e81ece91?s=128&d=identicon&r=PG&f=1", "display_name": "arkod", "link": "https://stackoverflow.com/users/1506301/arkod"}, "is_accepted": false, "score": 15, "last_activity_date": 1532091961, "last_edit_date": 1532091961, "creation_date": 1532079719, "answer_id": 51439684, "question_id": 36368843, "link": "https://stackoverflow.com/questions/36368843/whats-the-most-idiomatic-way-of-working-with-an-iterator-of-results/51439684#51439684", "title": "What&#39;s the most idiomatic way of working with an Iterator of Results?", "body": "<p>Since Rust 1.27, <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_for_each\" rel=\"noreferrer\"><code>Iterator::try_for_each</code></a> could be of interest:</p>\n\n<blockquote>\n  <p>An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.</p>\n  \n  <p>This can also be thought of as the fallible form of <code>for_each()</code> or as the stateless version of <code>try_fold()</code>.</p>\n</blockquote>\n"}], "owner": {"reputation": 1137, "user_id": 595228, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/c10759c95ccd09685b5e4cc9fdfee1d8?s=128&d=identicon&r=PG", "display_name": "Tim McLean", "link": "https://stackoverflow.com/users/595228/tim-mclean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 20261, "favorite_count": 4, "closed_date": 1556792128, "accepted_answer_id": 36370251, "answer_count": 4, "score": 24, "last_activity_date": 1556949902, "creation_date": 1459567803, "last_edit_date": 1556949902, "question_id": 36368843, "link": "https://stackoverflow.com/questions/36368843/whats-the-most-idiomatic-way-of-working-with-an-iterator-of-results", "closed_reason": "Duplicate", "title": "What&#39;s the most idiomatic way of working with an Iterator of Results?", "body": "<p>I have code like this:</p>\n\n<pre><code>let things = vec![/* ...*/]; // e.g. Vec&lt;String&gt;\nthings\n    .map(|thing| {\n        let a = try!(do_stuff(thing));\n        Ok(other_stuff(a))\n    })\n    .filter(|thing_result| match *thing_result {\n        Err(e) =&gt; true,\n        Ok(a) =&gt; check(a),\n    })\n    .map(|thing_result| {\n        let a = try!(thing_result);\n        // do stuff\n        b\n    })\n    .collect::&lt;Result&lt;Vec&lt;_&gt;, _&gt;&gt;()\n</code></pre>\n\n<p>In terms of semantics, I want to stop processing after the first error.</p>\n\n<p>The above code works, but it feels quite cumbersome. Is there a better way? I've looked through the docs for something like <code>filter_if_ok</code>, but I haven't found anything.</p>\n\n<p>I am aware of <code>collect::&lt;Result&lt;Vec&lt;_&gt;, _&gt;&gt;</code>, and it works great. I'm specifically trying to eliminate the following boilerplate:</p>\n\n<ul>\n<li>In the filter's closure, I have to use <code>match</code> on <code>thing_result</code>. I feel like this should just be a one-liner, e.g. <code>.filter_if_ok(|thing| check(a))</code>.</li>\n<li>Every time I use <code>map</code>, I have to include an extra statement <code>let a = try!(thing_result);</code> in order to deal with the possibility of an <code>Err</code>. Again, I feel like this could be abstracted away into <code>.map_if_ok(|thing| ...)</code>.</li>\n</ul>\n\n<p>Is there another approach I can use to get this level of conciseness, or do I just need to tough it out?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459538946, "post_id": 36364415, "comment_id": 60348085, "body": "I ask this question because in the previous did not explain well, and already has an answer, so I do this and delete the update of the other, to accept the answer without update"}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1459539279, "post_id": 36364415, "comment_id": 60348257, "body": "Simple answer would be: you don&#39;t. It is almost never good idea to use singletons."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459539315, "post_id": 36364415, "comment_id": 60348277, "body": "Please describe <i>what you want to do</i> with the singleton. If you aren&#39;t mutating something, then there are other options."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459539585, "post_id": 36364415, "comment_id": 60348413, "body": "@Shepmaster is not anything in particular, I&#39;m creating things I use in other language, to learn something of Rust. Not mutate, just that it always returns the same instance of the object"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1459547573, "post_id": 36364415, "comment_id": 60352299, "body": "I&#39;d warn against blindly copying concepts from other languages as you are less likely to discover the things that make a language unique and useful. Anyway, it sounds like you want a <a href=\"http://doc.rust-lang.org/stable/book/const-and-static.html\" rel=\"nofollow noreferrer\">constant of some kind</a>. Follow the instructions to use lazy-static in <a href=\"http://stackoverflow.com/a/27826181/155423\">this answer</a> and just skip the wrapping <code>Mutex</code>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1459592380, "post_id": 36364415, "comment_id": 60362166, "body": "Meta commentary should normally be left in the comments, not the question, and you shouldn&#39;t delete your question if it&#39;s a duplicate anyway - Stack Overflow uses duplicates to help Googlers find information."}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 4, "last_activity_date": 1459592941, "creation_date": 1459592941, "answer_id": 36372098, "question_id": 36364415, "link": "https://stackoverflow.com/questions/36364415/how-i-can-create-a-simple-basic-singleton/36372098#36372098", "title": "How I can create a simple basic singleton?", "body": "<p>A singleton is just a lazily initialized piece of static data. That means you really do want <a href=\"https://github.com/Kimundi/lazy-static.rs\" rel=\"nofollow\"><code>lazy-static</code></a>.</p>\n\n<p>Note that</p>\n\n<blockquote>\n  <p>For a given <code>static ref NAME: TYPE = EXPR;</code>, the macro generates a unique type that implements <code>Deref&lt;TYPE&gt;</code> and stores it in a static with name <code>NAME</code>.</p>\n</blockquote>\n\n<p>which means <code>NAME</code> is actually akin to the <em>constructor</em> of the \"singleton\", and <code>&amp;*NAME</code> is the \"singleton\" itself.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 765, "favorite_count": 0, "accepted_answer_id": 36372098, "answer_count": 1, "score": 0, "last_activity_date": 1459592941, "creation_date": 1459538935, "last_edit_date": 1495541893, "question_id": 36364415, "link": "https://stackoverflow.com/questions/36364415/how-i-can-create-a-simple-basic-singleton", "title": "How I can create a simple basic singleton?", "body": "<p>My intention was to create a singleton, but do not know how to handle this in Rust, I have read <a href=\"https://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">this</a> and <a href=\"https://stackoverflow.com/questions/27221504/how-can-you-make-a-safe-static-singleton-in-rust\">this</a>, but not sure if that's the way to create a simple singleton because one speaks of a \"mutable singleton\" and the other of a \"safe-static-singleton\".</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 2, "creation_date": 1459536594, "post_id": 36363693, "comment_id": 60346844, "body": "Try creating and using an uninitialized value :)"}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1459539667, "post_id": 36363693, "comment_id": 60348449, "body": "@A.B. You&#39;re right, I think rephrase the question with what I get, I now feel more stupid my intention is created a singleton"}, {"owner": {"reputation": 7690, "user_id": 420452, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9b20348f76e7cd33e6332741a746b36a?s=128&d=identicon&r=PG", "display_name": "quornian", "link": "https://stackoverflow.com/users/420452/quornian"}, "edited": false, "score": 0, "creation_date": 1459549124, "post_id": 36363693, "comment_id": 60352873, "body": "Your <code>Test</code> struct has a field <code>test</code> that is the same type as the struct. Did you mean for this to be the case?"}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 7690, "user_id": 420452, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9b20348f76e7cd33e6332741a746b36a?s=128&d=identicon&r=PG", "display_name": "quornian", "link": "https://stackoverflow.com/users/420452/quornian"}, "edited": false, "score": 0, "creation_date": 1459550492, "post_id": 36363693, "comment_id": 60353291, "body": "@quornian My intention was to create a singleton, <a href=\"http://stackoverflow.com/questions/36364415/how-i-can-create-a-simple-basic-singleton\" title=\"how i can create a simple basic singleton\">stackoverflow.com/questions/36364415/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 0, "creation_date": 1459538273, "post_id": 36363943, "comment_id": 60347729, "body": "thanks for your answer to my original question a bit strange, I just did an update, perhaps, you can orient me?"}], "tags": [], "owner": {"reputation": 7690, "user_id": 420452, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9b20348f76e7cd33e6332741a746b36a?s=128&d=identicon&r=PG", "display_name": "quornian", "link": "https://stackoverflow.com/users/420452/quornian"}, "is_accepted": true, "score": 21, "last_activity_date": 1459537343, "creation_date": 1459537343, "answer_id": 36363943, "question_id": 36363693, "link": "https://stackoverflow.com/questions/36363693/how-i-can-know-if-something-is-initialised-in-rust/36363943#36363943", "title": "How I can know if something is initialised in Rust?", "body": "<p>Uninitialized variables cannot be detected at runtime since the compiler won't let you get that far.</p>\n\n<p>If you wish to store an optional value, however, the <a href=\"https://doc.rust-lang.org/std/option/\"><code>Option&lt;...&gt;</code></a> type is handy for that. You can then use <code>match</code> or <code>if let</code> statements to check:</p>\n\n<pre><code>let mut x: Option&lt;f32&gt; = None;\n// ...\n\nx = Some(3.5);\n// ...\n\nif let Some(value) = x {\n    println!(\"x has value: {}\", value);\n}\nelse {\n    println!(\"x is not set\");\n}\n</code></pre>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8951, "favorite_count": 0, "accepted_answer_id": 36363943, "answer_count": 1, "score": 10, "last_activity_date": 1459539508, "creation_date": 1459536409, "last_edit_date": 1459539508, "question_id": 36363693, "link": "https://stackoverflow.com/questions/36363693/how-i-can-know-if-something-is-initialised-in-rust", "title": "How I can know if something is initialised in Rust?", "body": "<p>I have some pseudocode that checks if a variable is <code>null</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Test test;\n\nif (test == null) {\n    test = new Test();\n}\n\nreturn test;\n</code></pre>\n\n<p>How would I do something like this in Rust? This is my attempt so far:</p>\n\n<pre><code>struct Test {\n    time: f64,\n    test: Test,\n}\n\nimpl Test {\n    fn get(&amp;self) -&gt; Test {\n\n        if self.test == null {\n            // &lt;--\n\n            self.test = Test { time: 1f64 };\n        } else {\n            self.test\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1459531486, "post_id": 36362020, "comment_id": 60344057, "body": "See also <a href=\"http://stackoverflow.com/q/21257686/155423\">What is this unwrap thing</a> and maybe <a href=\"http://stackoverflow.com/q/22187926/155423\">What&#39;s the benefit of using a Result?</a>."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459532018, "post_id": 36362020, "comment_id": 60344367, "body": "@Shepmaster thanks for the very useful link and sorry for my English"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1459532181, "post_id": 36362020, "comment_id": 60344464, "body": "There&#39;s no need to apologize for poor English; so long as someone is able to understand the question, we can clean it up. Just be sure to search for previous questions and explain why your question isn&#39;t a duplicate of them."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459533718, "post_id": 36362020, "comment_id": 60345294, "body": "@Shepmaster the first link if I had seen him, but I found it rather the difference between one thing and another, and there was talk of &quot;Option&quot;, I was not sure if we talk about the same &quot;Result&quot; now I understand better, thanks to the response, now could be understood in any way as a duplicate, on the second link I had not seen before, thanks for everything"}], "answers": [{"comments": [{"owner": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 0, "creation_date": 1527134036, "post_id": 36362163, "comment_id": 88013912, "body": "Thanks for the greaty explanation @rodrigo. What excatly do you mean by <code>interesting error</code> - one that is known or catchable(as in other languages)?"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 13, "creation_date": 1527170781, "post_id": 36362163, "comment_id": 88035077, "body": "@RajeevRanjan: Think for example of opening a file: it can fail because you lack permissions, or because the file does not exist, or because you requested write permission and it is read-only, or because the filesystem is corrupted, or it is a remote filesystem and the network is down... that&#39;s interesting! and you may want to know why it is failing. OTOH, looking up a value in a hash table or a dictionary, if it is not there, that&#39;s it, it is not an interesting error and there is no extra error code or data to get. The first case will be a <code>Result&lt;T, E&gt;</code>, the second one a <code>Option&lt;T&gt;</code>."}, {"owner": {"reputation": 933, "user_id": 1250098, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/WUqMX.jpg?s=128&g=1", "display_name": "Serak Shiferaw", "link": "https://stackoverflow.com/users/1250098/serak-shiferaw"}, "edited": false, "score": 2, "creation_date": 1569239035, "post_id": 36362163, "comment_id": 102519852, "body": "Rust should look for an alternative to this junk.. somethimes i see some code like a.unwrap().b.unwrap().c its a mess."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 933, "user_id": 1250098, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/WUqMX.jpg?s=128&g=1", "display_name": "Serak Shiferaw", "link": "https://stackoverflow.com/users/1250098/serak-shiferaw"}, "edited": false, "score": 4, "creation_date": 1569259647, "post_id": 36362163, "comment_id": 102530745, "body": "@SerakShiferaw: Well, the alternative to <code>unwrap()</code> is to use the <code>?</code> operator. Errors and failures are just a fact of the programming life. Other languages either use exceptions, error codes, or directly dismiss any errors... they all have pros and cons."}, {"owner": {"reputation": 933, "user_id": 1250098, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/WUqMX.jpg?s=128&g=1", "display_name": "Serak Shiferaw", "link": "https://stackoverflow.com/users/1250098/serak-shiferaw"}, "edited": false, "score": 0, "creation_date": 1569312948, "post_id": 36362163, "comment_id": 102546510, "body": "@rodrigo &quot;?&quot; is awesome, but it does not work everywhere and failure create is also a good option but there are some places where you cant avoid unwrap() i am not sure if they are still migration to the question mark or this is how its doing to be in the future"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 933, "user_id": 1250098, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/WUqMX.jpg?s=128&g=1", "display_name": "Serak Shiferaw", "link": "https://stackoverflow.com/users/1250098/serak-shiferaw"}, "edited": false, "score": 0, "creation_date": 1569319286, "post_id": 36362163, "comment_id": 102550077, "body": "@SerakShiferaw: There is the <a href=\"https://doc.rust-lang.org/unstable-book/library-features/try-trait.html\" rel=\"nofollow noreferrer\">try_trait</a> and the <a href=\"https://doc.rust-lang.org/unstable-book/language-features/try-blocks.html\" rel=\"nofollow noreferrer\">try_blocks</a> unstable features that will make this somewhat easier."}, {"owner": {"reputation": 933, "user_id": 1250098, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/WUqMX.jpg?s=128&g=1", "display_name": "Serak Shiferaw", "link": "https://stackoverflow.com/users/1250098/serak-shiferaw"}, "edited": false, "score": 0, "creation_date": 1570184359, "post_id": 36362163, "comment_id": 102842105, "body": "@rodrigo chain function is ergonomic a.foo().baz().bar()? without the unwrap look how success a.onsuccess(){//do this}.onerror(e){console.log(e)}"}, {"owner": {"reputation": 4429, "user_id": 102133, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/561a3a55352fe6a5343e541a6894b541?s=128&d=identicon&r=PG", "display_name": "Ben", "link": "https://stackoverflow.com/users/102133/ben"}, "edited": false, "score": 0, "creation_date": 1619173021, "post_id": 36362163, "comment_id": 118830521, "body": "not an very experienced rust user, but so far it looks like unwrap() is the poor guy&#39; solution; more of a workaround when you&#39;re not skilled enough to write necessaries (time consuming) verifications.. am i right to think that ? Rust is super strict, then you get unwrap which make it completely unstrict; so then am wondering why it&#39;s there as it would just lead to poor patterns"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "reply_to_user": {"reputation": 4429, "user_id": 102133, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/561a3a55352fe6a5343e541a6894b541?s=128&d=identicon&r=PG", "display_name": "Ben", "link": "https://stackoverflow.com/users/102133/ben"}, "edited": false, "score": 1, "creation_date": 1619199904, "post_id": 36362163, "comment_id": 118842454, "body": "@Ben: Too many <code>unwrap()</code> are a sign of sloppy programming, which is ok if it is a prototype or a run-and-throw-away program. Some <code>unwrap()</code> that cannot (or should not) fail are ok, such as <code>NonZeroU32::new(1).unwrap()</code>: if your assumption is wrong and it fails, the program panics, a kind of bug-check abort, that is the correct result."}, {"owner": {"reputation": 4429, "user_id": 102133, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/561a3a55352fe6a5343e541a6894b541?s=128&d=identicon&r=PG", "display_name": "Ben", "link": "https://stackoverflow.com/users/102133/ben"}, "edited": false, "score": 0, "creation_date": 1619200167, "post_id": 36362163, "comment_id": 118842570, "body": "@rodrigo ok thx that&#39;s what i needed to make sure of"}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": true, "score": 91, "last_activity_date": 1589389358, "last_edit_date": 1589389358, "creation_date": 1459530942, "answer_id": 36362163, "question_id": 36362020, "link": "https://stackoverflow.com/questions/36362020/what-is-unwrap-in-rust-and-what-is-it-used-for/36362163#36362163", "title": "What is unwrap in Rust, and what is it used for?", "body": "<p>In Rust, when you have an operation that may either return a <code>T</code> or fail, you will have a value of type <code>Result&lt;T,E&gt;</code> or <code>Option&lt;T&gt;</code> (<code>E</code> will be the error condition in case of an interesting error).</p>\n\n<p>The function <code>unwrap(self) -&gt; T</code> will give you the embedded <code>T</code> if there is one. If instead there is not a <code>T</code> but an <code>E</code> or <code>None</code> then it will panic.</p>\n\n<p>It is best used when you are positively sure that you don't have an error. If that is not the case usually it is better either pattern-match the error or use the <s><code>try!</code> macro</s> <code>?</code> operator to forward the error.</p>\n\n<p>In your example, the call to <code>read_dir()</code> returns a <code>io::Result&lt;ReadDir&gt;</code> because opening the directory might fail. And iterating the opened directory returns multiple values of type <code>io::Result&lt;DirEntry&gt;</code> because reading the directory might also fail.</p>\n\n<p>With <s><code>try!</code></s> <code>?</code> it would be something like this:</p>\n\n<pre><code>fn try_main() -&gt; std::io::Result&lt;()&gt; {\n    let entries = std::fs::read_dir(\"/home/user\")?;\n\n    for entry in entries {\n        println!(\"Name: {}\", entry?.path().display());\n\n    }\n    Ok(())\n}\n\nfn main() {\n    let res = try_main();\n\n    if let Err(e) = res {\n        println!(\"Error: {}\", e);\n    }\n}\n</code></pre>\n\n<p>Look how every error case is checked.</p>\n\n<p>(Updated to use <code>?</code> instead of <code>try!()</code>. The macro still works, but the <code>?</code> is preferred for new code).</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 31472, "favorite_count": 19, "accepted_answer_id": 36362163, "answer_count": 1, "score": 74, "last_activity_date": 1589389358, "creation_date": 1459530446, "last_edit_date": 1459531394, "question_id": 36362020, "link": "https://stackoverflow.com/questions/36362020/what-is-unwrap-in-rust-and-what-is-it-used-for", "title": "What is unwrap in Rust, and what is it used for?", "body": "<p>I have this code that uses <code>.unwrap()</code>:</p>\n\n<pre><code>fn main() {\n    let paths = std::fs::read_dir(\"/home/user\").unwrap();\n\n    for path in paths {\n        println!(\"Name: {}\", path.unwrap().path().display());\n\n    }\n}\n</code></pre>\n\n<p>After looking at the <a href=\"https://github.com/rust-lang/rust/blob/53498eca50e25d8a11f9dc5859770715fa906fa7/src/libcore/result.rs#L684-L689\" rel=\"noreferrer\">definition of <code>unwrap</code></a>,</p>\n\n<pre><code>pub fn unwrap(self) -&gt; T {\n  match self {\n        Ok(t) =&gt; t,\n        Err(e) =&gt; unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", e),\n    }\n}\n</code></pre>\n\n<p>And the <a href=\"https://github.com/rust-lang/rust/blob/53498eca50e25d8a11f9dc5859770715fa906fa7/src/libstd/fs.rs#L1351-L1353\" rel=\"noreferrer\">signature of <code>read_dir</code></a></p>\n\n<pre><code>pub fn read_dir&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;ReadDir&gt;\n</code></pre>\n\n<p>Am I correct in understanding that <code>unwrap</code> returns the <code>T</code> type that is passed in <code>Result</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1459523732, "post_id": 36359332, "comment_id": 60339350, "body": "Side-Note: Depending on how safe you want your wrapper to be, you should make the <code>init</code> function unsafe (because noone may call it multiple times), and implement all functions that require the clib to be initialized as methods on the <code>App</code> object. This way noone can call the functions without having it initialized. You can also implement it as some sort of reference counted singleton to make it safe to initialize. This is a big win over Java and Ruby, because there you can call the functions without having initialized the lib"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459531995, "post_id": 36359332, "comment_id": 60344353, "body": "<i>in the main thread</i> \u2014 are you <b>sure</b> it has to be the main thread? Could it be any thread, so long as it&#39;s initialized before use?"}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1459532498, "post_id": 36359332, "comment_id": 60344632, "body": "@ker, thanks for the comment. I hadn&#39;t thought about it like that (having all access through the <code>App</code> struct, but that makes sense. I&#39;ll have to think about whether this would work for my case."}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459532734, "post_id": 36359332, "comment_id": 60344759, "body": "@Shepmaster, thanks for the comment. The C library is GraphicsMagick and I am just going by the documentation: <code>This function should be invoked in the primary (original) thread of the application&#39;s process</code>. I&#39;m a Rust beginner coming mostly from Ruby, so I don&#39;t really know about &quot;musts&quot; in terms of thread usage."}], "answers": [{"comments": [{"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "edited": false, "score": 0, "creation_date": 1459535401, "post_id": 36362836, "comment_id": 60346173, "body": "thanks for the answer! Your use of <code>Once</code> reminded me of the <code>lazy_static</code> crate. I&#39;ve updated my question with another possible way of handling this, but I don&#39;t know if it is sound."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1581347110, "last_edit_date": 1581347110, "creation_date": 1459533378, "answer_id": 36362836, "question_id": 36359332, "link": "https://stackoverflow.com/questions/36359332/recommended-way-to-wrap-c-lib-initialization-destruction-routine/36362836#36362836", "title": "Recommended way to wrap C lib initialization/destruction routine", "body": "<p>I know of no way of enforcing that a method be called in the main thread beyond strongly-worded documentation. So, ignoring that requirement... :-)</p>\n\n<p>Generally, I'd use <a href=\"http://doc.rust-lang.org/std/sync/struct.Once.html\" rel=\"nofollow noreferrer\"><code>std::sync::Once</code></a>, which seems basically designed for this case:</p>\n\n<blockquote>\n  <p>A synchronization primitive which can be used to run a one-time global\n  initialization. Useful for one-time initialization for FFI or related\n  functionality. This type can only be constructed with the <code>ONCE_INIT</code>\n  value.</p>\n</blockquote>\n\n<p>Note that there's no provision for any cleanup; many times you just have to leak whatever the library has done. Usually if a library has a dedicated cleanup path, it has also been structured to store all that initialized data in a type that is then passed into subsequent functions as some kind of context or environment. This would map nicely to Rust types.</p>\n\n<p><strong>Warning</strong></p>\n\n<p>Your current code is <em>not</em> as protective as you hope it is. Since your <code>App</code> is an empty struct, an end-user can construct it <em>without calling your method</em>:</p>\n\n<pre><code>let _init_ = App;\n</code></pre>\n\n<p>We will use a zero-sized argument to prevent this. See also <a href=\"https://stackoverflow.com/q/38315383/155423\">What&#39;s the Rust idiom to define a field pointing to a C opaque pointer?</a> for the proper way to construct opaque types for FFI.</p>\n\n<p>Altogether, I'd use something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::sync::Once;\n\nmod ffi {\n    extern \"C\" {\n        pub fn InitializeMyCLib();\n        pub fn CoolMethod(arg: u8);\n    }\n}\n\nstatic C_LIB_INITIALIZED: Once = Once::new();\n\n#[derive(Copy, Clone)]\nstruct TheLibrary(());\n\nimpl TheLibrary {\n    fn new() -&gt; Self {\n        C_LIB_INITIALIZED.call_once(|| unsafe {\n            ffi::InitializeMyCLib();\n        });\n        TheLibrary(())\n    }\n\n    fn cool_method(&amp;self, arg: u8) {\n        unsafe { ffi::CoolMethod(arg) }\n    }\n}\n\nfn main() {\n    let lib = TheLibrary::new();\n    lib.cool_method(42);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "is_accepted": false, "score": 1, "last_activity_date": 1459875441, "creation_date": 1459875441, "answer_id": 36432608, "question_id": 36359332, "link": "https://stackoverflow.com/questions/36359332/recommended-way-to-wrap-c-lib-initialization-destruction-routine/36432608#36432608", "title": "Recommended way to wrap C lib initialization/destruction routine", "body": "<p>I did some digging around to see how other FFI libs handle this situation. Here is what I am currently using (similar to @Shepmaster's answer and based loosely on the initialization routine of <a href=\"https://github.com/carllerche/curl-rust\" rel=\"nofollow\">curl-rust</a>):</p>\n\n<pre><code>fn initialize() {\n    static INIT: Once = ONCE_INIT;\n    INIT.call_once(|| unsafe {\n        ffi::InitializeMyCLib();\n        assert_eq!(libc::atexit(cleanup), 0);\n    });\n\n    extern fn cleanup() {\n        unsafe { ffi::DestroyMyCLib(); }\n    }\n}\n</code></pre>\n\n<p>I then call this function inside the public constructors for my public structs.</p>\n"}], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1053, "favorite_count": 0, "accepted_answer_id": 36362836, "answer_count": 2, "score": 6, "last_activity_date": 1581347110, "creation_date": 1459522060, "last_edit_date": 1459535246, "question_id": 36359332, "link": "https://stackoverflow.com/questions/36359332/recommended-way-to-wrap-c-lib-initialization-destruction-routine", "title": "Recommended way to wrap C lib initialization/destruction routine", "body": "<p>I am writing a wrapper/FFI for a C library that requires a global initialization call in the main thread as well as one for destruction.</p>\n\n<p>Here is how I am currently handling it:</p>\n\n<pre><code>struct App;\n\nimpl App {\n    fn init() -&gt; Self {\n        unsafe { ffi::InitializeMyCLib(); }\n        App\n    }\n}\n\nimpl Drop for App {\n    fn drop(&amp;mut self) {\n        unsafe { ffi::DestroyMyCLib(); }\n    }\n}\n</code></pre>\n\n<p>which can be used like:</p>\n\n<pre><code>fn main() {\n    let _init_ = App::init();\n    // ...\n}\n</code></pre>\n\n<p>This works fine, but it feels like a hack, tying these calls to the lifetime of an unnecessary struct. Having the destructor in a <code>finally</code> (Java) or <code>at_exit</code> (Ruby) block seems theoretically more appropriate.</p>\n\n<p>Is there some more graceful way to do this in Rust?</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>Would it be possible/safe to use this setup like so (using the <code>lazy_static</code> crate), instead of my second block above:</p>\n\n<pre><code>lazy_static! {\n    static ref APP: App = App::new();\n}\n</code></pre>\n\n<p>Would this reference be guaranteed to be initialized before any other code and destroyed on exit? Is it bad practice to use <code>lazy_static</code> in a library?</p>\n\n<p>This would also make it easier to facilitate access to the FFI through this one struct, since I wouldn't have to bother passing around the reference to the instantiated struct (called <code>_init_</code> in my original example).</p>\n\n<p>This would also make it safer in some ways, since I could make the <code>App</code> struct default constructor private.</p>\n"}, {"tags": ["polymorphism", "rust", "traits"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1459518866, "post_id": 36357995, "comment_id": 60335988, "body": "I don&#39;t think this really warrants a full answer, but: trait objects are <i>exactly</i> what you want here (assuming you want open polymorphism).  If closed is acceptable, you want an <code>enum</code>.  If there&#39;s some aspect of that chapter that you don&#39;t understand, or you can explain <i>why</i> you think that&#39;s not a good solution, it might improve the question to add that in."}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1459519588, "post_id": 36357995, "comment_id": 60336480, "body": "@DK. sorry for my English, I did not say never -&gt; why you think that&#39;s not a good solution ... just saying I was reading this page and I could not find what I was looking for. it turns out that if it was on the page, but I could not understand well the examples to apply what I was looking for. Thanks for your time"}], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 5, "last_activity_date": 1459518894, "creation_date": 1459518894, "answer_id": 36358200, "question_id": 36357995, "link": "https://stackoverflow.com/questions/36357995/how-do-i-store-different-types-that-implement-the-same-trait-in-a-vector-and-cal/36358200#36358200", "title": "How do I store different types that implement the same trait in a vector and call common functions on them?", "body": "<p>As mentioned in the <a href=\"https://doc.rust-lang.org/book/trait-objects.html#dynamic-dispatch\">page you linked to</a>, you'll need to either store the <code>Poli</code> implementing structs as <code>Vec&lt;&amp;Poli&gt;</code> or <code>Vec&lt;Box&lt;Poli&gt;&gt;</code> depending on whether you want to own the values or just store a reference:</p>\n\n<pre><code>// Owned\nlet circle = Circle::new(10f64, 10f64, 10f64);\nlet test = Test::new(10f64, 10f64, 10f64, 10f64);\n\nlet polis = vec![Box::new(circle) as Box&lt;Poli&gt;, Box::new(test) as Box&lt;Poli&gt;];\n\nfor poli in polis {\n    println!(\"{}\", poli.area());\n}\n\n// Reference\nlet circle = Circle::new(10f64, 10f64, 10f64);\nlet test = Test::new(10f64, 10f64, 10f64, 10f64);\n\nlet polis = vec![&amp;circle as &amp;Poli, &amp;test as &amp;Poli];\n\nfor poli in polis {\n    println!(\"{}\", poli.area());\n}\n</code></pre>\n\n<p>Output</p>\n\n<pre><code>314.1592653589793\n314.1592653589793\n314.1592653589793\n314.1592653589793\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=17cf00c3af1ba3c2a444c54c20444f8f&amp;version=stable&amp;backtrace=0\">Demo</a></p>\n"}, {"comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1459584641, "post_id": 36359611, "comment_id": 60360279, "body": "Note that you don&#39;t need to specify the exact type twice: you can either remove <code>: Vec&lt;&amp;Poli&gt;</code> or <code>::&lt;&amp;Poli&gt;</code>."}], "tags": [], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "is_accepted": false, "score": 0, "last_activity_date": 1459531585, "last_edit_date": 1495542692, "creation_date": 1459522811, "answer_id": 36359611, "question_id": 36357995, "link": "https://stackoverflow.com/questions/36357995/how-do-i-store-different-types-that-implement-the-same-trait-in-a-vector-and-cal/36359611#36359611", "title": "How do I store different types that implement the same trait in a vector and call common functions on them?", "body": "<p>After <a href=\"https://stackoverflow.com/questions/36357995/polymorphism-trait-vector-common-functions#36358200\">Dogbert's response</a>, I played a bit and found this way works for me. I am new to Rust and I do not know if this is obvious, but I'll leave it here to help others.</p>\n\n<pre><code>let circle = Circle::new(10f64, 10f64, 10f64);\nlet test   = Test::new(10f64, 10f64, 10f64, 10f64);\n\nlet mut vec: Vec&lt;&amp;Poli&gt; = Vec::&lt;&amp;Poli&gt;::new();\n    vec.push(&amp;circle);\n    vec.push(&amp;test);\n\nfor v in vec {\n    println!(\"new {}\", v.area());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ad6e8934a3134e9899b6d7f7dcf3d840&amp;version=stable\" rel=\"nofollow noreferrer\">Demo</a></p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 36358200, "answer_count": 2, "score": 0, "last_activity_date": 1459531904, "creation_date": 1459518396, "last_edit_date": 1459531904, "question_id": 36357995, "link": "https://stackoverflow.com/questions/36357995/how-do-i-store-different-types-that-implement-the-same-trait-in-a-vector-and-cal", "title": "How do I store different types that implement the same trait in a vector and call common functions on them?", "body": "<p>I'm learning Rust and I'm having difficulties in implementing polymorphism. I want to use an array to store either <code>Circle</code> or <code>Test</code>.</p>\n\n<pre><code>trait Poli {\n    fn area(&amp;self) -&gt; f64;\n}\n\nstruct Circle {\n    x:      f64,\n    y:      f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn new (xx: f64, yy: f64, r: f64) -&gt; Circle{\n        Circle{ x: xx, y: yy, radius: r }\n    }\n}\n\nimpl Poli for Circle {\n   fn area(&amp;self) -&gt; f64 {\n       std::f64::consts::PI * (self.radius * self.radius)\n   }\n}\n\nstruct Test {\n    x:      f64,\n    y:      f64,\n    radius: f64,\n    test:   f64,\n}\n\nimpl Test {\n    fn new (xx: f64, yy: f64, r: f64, t: f64) -&gt; Circle{\n        Test{ x: xx, y: yy, radius: r, test: t, }\n    }\n}\n\nimpl Poli for Test {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n</code></pre>\n\n<p>I do not know how to make a vector to store types with the same <code>trait</code>:</p>\n\n<pre><code>let cir  = Circle::new(10f64, 10f64, 10f64);\nlet test = Test::new(10f64, 10f64, 10f64, 10f64);\n\n//let mut vec: Vec&lt;Poli&gt; = Vec::new();   &lt;---\n</code></pre>\n\n<p>I'd like to iterate the vector and call functions from the trait. Is there any way to do this, or some alternative?</p>\n\n<p>I read <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\">the trait object documentation</a> but I think it's not what I want.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1459482917, "post_id": 36347576, "comment_id": 60316706, "body": "Is this 1 thread per byte? I can imagine the overhead of the threads spinning up is whats causing the slowdown based on the input."}, {"owner": {"reputation": 181215, "user_id": 82294, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/5c5f910416e2b92bb73fa59c56fe695d?s=128&d=identicon&r=PG", "display_name": "Dietrich Epp", "link": "https://stackoverflow.com/users/82294/dietrich-epp"}, "edited": false, "score": 0, "creation_date": 1459484158, "post_id": 36347576, "comment_id": 60317002, "body": "Seems like it would be simpler to use <code>&amp;[u8]</code> and <code>&amp;[u64]</code> everywhere rather than <code>Vec</code>."}], "answers": [{"comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1459513473, "post_id": 36347809, "comment_id": 60332092, "body": "Thanks for your answer. You were right: I had to split the message. I tried <code>valgrind</code> to profile the application but it only tells that most of the time is spent in the closure of the thread: how can I guess your solution from such a profiling result?"}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1459563892, "post_id": 36347809, "comment_id": 60356152, "body": "Interesting... I haven&#39;t tried profiling threaded rust yet. If you get only the closure listed, not collects, etc. this may be a good question on its own. Ideally per-line profile would be useful here."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1459610647, "post_id": 36347809, "comment_id": 60367849, "body": "viraptor: I had not compiled with debug symbols. With them, I see more function calls but I am still not sure how to guess this issue. One noticeable difference I saw between the two <code>valgrind</code> outputs is that the closure is called a lot of time with my initial version. I think this is the way to tell that too many threads were used, right? Thanks."}], "tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": true, "score": 4, "last_activity_date": 1459483276, "creation_date": 1459483276, "answer_id": 36347809, "question_id": 36347576, "link": "https://stackoverflow.com/questions/36347576/threaded-des-slower-than-not-threaded/36347809#36347809", "title": "Threaded DES slower than not threaded", "body": "<p>Use a profiler. You could try guessing where the slowdown is, but in you may not find the right place anyway.</p>\n\n<p>But for an educated guess... I'd try splitting the message into <code>THREAD_COUNT</code> parts and feeding those parts to the thread pool instead. If you're sending 8-byte fragments separately, you'll spend more time on managing that than on the DES itself.</p>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 36347809, "answer_count": 1, "score": 0, "last_activity_date": 1459483276, "creation_date": 1459481721, "question_id": 36347576, "link": "https://stackoverflow.com/questions/36347576/threaded-des-slower-than-not-threaded", "title": "Threaded DES slower than not threaded", "body": "<p>I am having trouble to get performance improvement by parallelizing a DES encryption algorithm.</p>\n\n<p>Here is my attempt:</p>\n\n<pre><code>fn des(message: &amp;[u8], subkeys: Vec&lt;u64&gt;) -&gt; Vec&lt;u8&gt; {\n    let mut pool = Pool::new(THREAD_COUNT);\n    let message = message_to_u64s(message);\n\n    crossbeam::scope(|scope| {\n        pool.map(scope, message.iter().enumerate(), |(i, &amp;block)| {\n            let permuted = ip(block);\n            let mut li = permuted &amp; 0xFFFFFFFF00000000;\n            let mut ri = permuted &lt;&lt; 32;\n\n            for subkey in &amp;subkeys {\n                let last_li = li;\n                li = ri;\n                ri = last_li ^ feistel(ri, *subkey);\n            }\n\n            let r16l16 = ri | (li &gt;&gt; 32);\n            to_u8_vec(fp(r16l16))\n        }).collect::&lt;Vec&lt;_&gt;&gt;()\n    }).concat()\n}\n</code></pre>\n\n<p>(this uses the crates <code>crossbeam</code> and <code>simple_parallel</code> but I will accept solutions not using these)</p>\n\n<p>Unfortunately, this implementation is slower than the version without thread:</p>\n\n<pre><code>fn des(message: &amp;[u8], subkeys: Vec&lt;u64&gt;) -&gt; Vec&lt;u8&gt; {\n    let message = message_to_u64s(message);\n\n    let mut cipher = vec![];\n\n    for block in message {\n        let permuted = ip(block);\n        let mut li = permuted &amp; 0xFFFFFFFF00000000;\n        let mut ri = permuted &lt;&lt; 32;\n\n        for subkey in &amp;subkeys {\n            let last_li = li;\n            li = ri;\n            ri = last_li ^ feistel(ri, *subkey);\n        }\n\n        let r16l16 = ri | (li &gt;&gt; 32);\n        let mut bytes = to_u8_vec(fp(r16l16));\n        cipher.append(&amp;mut bytes);\n    }\n\n    cipher\n}\n</code></pre>\n\n<p>I believe the <code>collect</code> and <code>concat</code> are the issues but I don't know how to avoid them without using unsafe code.</p>\n\n<p>So how can I improve the performance of this algorithm (by using threads) using safe code?\n(solutions with unsafe code would also be interesting, but I believe there must be a solution without unsafe code)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 621, "user_id": 2158599, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/SqPLe.jpg?s=128&g=1", "display_name": "Paul McCarthy", "link": "https://stackoverflow.com/users/2158599/paul-mccarthy"}, "edited": false, "score": 0, "creation_date": 1613271847, "post_id": 36344415, "comment_id": 117023533, "body": "I&#39;m not a fan of using underscores. Think it comes from having trouble printing them on a old dot-matrix printer many years ago."}], "answers": [{"comments": [{"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "edited": false, "score": 3, "creation_date": 1459461624, "post_id": 36344484, "comment_id": 60310929, "body": "I found this way thanks to its response &quot;rustc -A non_snake_case main.rs&quot;"}, {"owner": {"reputation": 3648, "user_id": 1118660, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/aaef8abaea3dc9d8ad119ceba8900aac?s=128&d=identicon&r=PG", "display_name": "Jason Watkins", "link": "https://stackoverflow.com/users/1118660/jason-watkins"}, "edited": false, "score": 12, "creation_date": 1459463929, "post_id": 36344484, "comment_id": 60311772, "body": "You should also be able to use <code>#![allow(non_snake_case)]</code> to apply the attribute to the entire file"}], "tags": [], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "is_accepted": true, "score": 36, "last_activity_date": 1459461019, "creation_date": 1459461019, "answer_id": 36344484, "question_id": 36344415, "link": "https://stackoverflow.com/questions/36344415/is-there-some-way-to-not-show-a-warning-for-non-snake-case-identifiers/36344484#36344484", "title": "Is there some way to not show a warning for non snake case identifiers?", "body": "<p>You can use the <code>allow</code> attribute as such:</p>\n\n<pre><code>#[allow(non_snake_case)]\nfn nonSnakeCase() {}\n</code></pre>\n\n<p>More on attributes <a href=\"https://doc.rust-lang.org/book/attributes.html\" rel=\"noreferrer\">here</a>.</p>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5980, "favorite_count": 1, "accepted_answer_id": 36344484, "answer_count": 1, "score": 18, "last_activity_date": 1459461458, "creation_date": 1459460761, "last_edit_date": 1459461458, "question_id": 36344415, "link": "https://stackoverflow.com/questions/36344415/is-there-some-way-to-not-show-a-warning-for-non-snake-case-identifiers", "title": "Is there some way to not show a warning for non snake case identifiers?", "body": "<p>I'm writing my first tests in Rust and I find this:</p>\n\n<blockquote>\n  <p>warning: function <code>testCall</code> should have a snake case name such as\n  <code>test_call</code>, #[warn(non_snake_case)] on by default</p>\n</blockquote>\n\n<p>after searching, I found <a href=\"https://aturon.github.io/style/naming.html\" rel=\"noreferrer\">this style guide</a>.</p>\n\n<p>I understand it is a convention, but is there some way to not show this warning?</p>\n"}, {"tags": ["rust", "visual-studio-code"], "comments": [{"owner": {"reputation": 8010, "user_id": 11780, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/def9f21fe6dc3f2ec0368991dd3d23ed?s=128&d=identicon&r=PG", "display_name": "Jeremiah Peschka", "link": "https://stackoverflow.com/users/11780/jeremiah-peschka"}, "edited": false, "score": 0, "creation_date": 1459546904, "post_id": 36343869, "comment_id": 60352024, "body": "This is VS Code trying to spawn a new process. Have you installed any Rust plugins? If so, which ones?"}, {"owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "reply_to_user": {"reputation": 8010, "user_id": 11780, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/def9f21fe6dc3f2ec0368991dd3d23ed?s=128&d=identicon&r=PG", "display_name": "Jeremiah Peschka", "link": "https://stackoverflow.com/users/11780/jeremiah-peschka"}, "edited": false, "score": 0, "creation_date": 1459548805, "post_id": 36343869, "comment_id": 60352766, "body": "@JeremiahPeschka ...spawn a new process ? It happens when I save the file. ....Rust plugins? yes Rust-Code and vsc-rustfmt"}, {"owner": {"reputation": 5449, "user_id": 521662, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/Gz7r8.jpg?s=128&g=1", "display_name": "Seth", "link": "https://stackoverflow.com/users/521662/seth"}, "reply_to_user": {"reputation": 8010, "user_id": 11780, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/def9f21fe6dc3f2ec0368991dd3d23ed?s=128&d=identicon&r=PG", "display_name": "Jeremiah Peschka", "link": "https://stackoverflow.com/users/11780/jeremiah-peschka"}, "edited": false, "score": 0, "creation_date": 1480193201, "post_id": 36343869, "comment_id": 68864827, "body": "@JeremiahPeschka please promote your comment to an answer."}], "answers": [{"tags": [], "owner": {"reputation": 497, "user_id": 4417705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6Hyhp.jpg?s=128&g=1", "display_name": "Karthik Cherukuri", "link": "https://stackoverflow.com/users/4417705/karthik-cherukuri"}, "is_accepted": false, "score": 8, "last_activity_date": 1488159714, "creation_date": 1488159714, "answer_id": 42476535, "question_id": 36343869, "link": "https://stackoverflow.com/questions/36343869/rust-vscode-error-spawnsync-undefined-enoent/42476535#42476535", "title": "Rust (VSCode) Error: spawnSync undefined ENOENT", "body": "<p>I solved this by uninstalling the extra plugin <strong>rust_fmt</strong> besides <strong>rusty_code</strong> because of which vscode spawning new process every time on save. Also enabled fmt from vscode settings as below.</p>\n\n<pre><code> \"rust.formatOnSave\": true,\n \"rust.checkOnSave\": true\n</code></pre>\n"}], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3162, "favorite_count": 1, "answer_count": 1, "score": 11, "last_activity_date": 1488159714, "creation_date": 1459458693, "last_edit_date": 1495542890, "question_id": 36343869, "link": "https://stackoverflow.com/questions/36343869/rust-vscode-error-spawnsync-undefined-enoent", "title": "Rust (VSCode) Error: spawnSync undefined ENOENT", "body": "<p>I'm getting this error:</p>\n\n<blockquote>\n  <p>Error: spawnSync undefined ENOENT</p>\n</blockquote>\n\n<p>Always, when I save the file in VSCode, but it turns out that compiles fine.</p>\n\n<p>How I can fix this behavior?</p>\n\n<p>I read this:\n<a href=\"https://stackoverflow.com/questions/27688804/how-do-i-debug-error-spawn-enoent-on-node-js\">How do I debug &quot;Error: spawn ENOENT&quot; on node.js?</a>\nbut I do not know if this related.</p>\n"}, {"tags": ["reference", "rust", "dereference", "ampersand"], "answers": [{"comments": [{"owner": {"reputation": 15140, "user_id": 1126971, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/738f6908cdcc3651abf6293370c59f97?s=128&d=identicon&r=PG", "display_name": "John Smith Optional", "link": "https://stackoverflow.com/users/1126971/john-smith-optional"}, "edited": false, "score": 2, "creation_date": 1459437093, "post_id": 36335679, "comment_id": 60296431, "body": "Thanks, I understand now. Actually, I had thought it could be something like that but I had dismissed the thought, thinking it would be very strange to define the sum of an integer with an integer&#39;s address like that. Maybe it should be emphasized in the doc that Rust references are to be thought of as addresses, and not to be confused with C++ references. Thanks again for the detailed explanation."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 39, "last_activity_date": 1499109285, "last_edit_date": 1499109285, "creation_date": 1459432948, "answer_id": 36335679, "question_id": 36335342, "link": "https://stackoverflow.com/questions/36335342/meaning-of-the-ampersand-and-star-symbols-in-rust/36335679#36335679", "title": "Meaning of the ampersand &#39;&amp;&#39; and star &#39;*&#39; symbols in Rust", "body": "<blockquote>\n  <p>Using * to dereference a reference wouldn't be correct in C++. So I'd like to understand why this is correct in Rust.</p>\n</blockquote>\n\n<p>A reference in C++ is not the same as a reference in Rust. Rust's references are much closer (in usage, not in semantics) to C++'s pointers. With respect to memory representation, Rust's references often are just a single pointer, while C++'s references are supposed to be alternative names of the same object (and thus have no memory representation).</p>\n\n<p>The difference between C++ pointers and Rust references is that Rust's references are never <code>NULL</code>, never uninitialized and never dangling.</p>\n\n<hr>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"noreferrer\"><code>Add</code></a> trait is implemented (see the bottom of the doc page) for the following pairs and all other numeric primitives:</p>\n\n<ul>\n<li><code>&amp;i32</code> + <code>i32</code></li>\n<li><code>i32</code> + <code>&amp;i32</code></li>\n<li><code>&amp;i32</code> + <code>&amp;i32</code></li>\n</ul>\n\n<p>This is just a convenience thing the std-lib developers implemented. The compiler can figure out that a <code>&amp;mut i32</code> can be used wherever a <code>&amp;i32</code> can be used, but that doesn't work (yet?) for generics, so the std-lib developers would need to also implement the <code>Add</code> traits for the following combinations (and those for all primitives):</p>\n\n<ul>\n<li><code>&amp;mut i32</code> + <code>i32</code></li>\n<li><code>i32</code> + <code>&amp;mut i32</code></li>\n<li><code>&amp;mut i32</code> + <code>&amp;mut i32</code></li>\n<li><code>&amp;mut i32</code> + <code>&amp;i32</code></li>\n<li><code>&amp;i32</code> + <code>&amp;mut i32</code></li>\n</ul>\n\n<p>As you can see that can get quite out of hand. I'm sure that will go away in the future. Until then, note that it's rather rare to end up with a <code>&amp;mut i32</code> and trying to use it in a mathematical expression.</p>\n"}, {"tags": [], "owner": {"reputation": 106, "user_id": 5554486, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/82ac6d32c6695d300aa7cb476f2d75ea?s=128&d=identicon&r=PG&f=1", "display_name": "Jascha", "link": "https://stackoverflow.com/users/5554486/jascha"}, "is_accepted": false, "score": 4, "last_activity_date": 1459435259, "last_edit_date": 1459435259, "creation_date": 1459433123, "answer_id": 36335748, "question_id": 36335342, "link": "https://stackoverflow.com/questions/36335342/meaning-of-the-ampersand-and-star-symbols-in-rust/36335748#36335748", "title": "Meaning of the ampersand &#39;&amp;&#39; and star &#39;*&#39; symbols in Rust", "body": "<p>From the docs for <code>std::ops::Add</code>:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; Add&lt;&amp;'a i32&gt; for &amp;'b i32\nimpl&lt;'a&gt; Add&lt;&amp;'a i32&gt; for i32\nimpl&lt;'a&gt; Add&lt;i32&gt; for &amp;'a i32\nimpl Add&lt;i32&gt; for i32\n</code></pre>\n\n<p>It seems the binary + operator for numbers is implemented for combinations of shared (but not mutable) references of the operands and owned versions of the operands. It has nothing to do with automatic dereferencing.</p>\n"}, {"tags": [], "owner": {"reputation": 27561, "user_id": 214446, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/5deb6b87326686b1f2e9fdb37ceac210?s=128&d=identicon&r=PG", "display_name": "mb21", "link": "https://stackoverflow.com/users/214446/mb21"}, "is_accepted": false, "score": 23, "last_activity_date": 1527069593, "last_edit_date": 1527069593, "creation_date": 1527068775, "answer_id": 50485043, "question_id": 36335342, "link": "https://stackoverflow.com/questions/36335342/meaning-of-the-ampersand-and-star-symbols-in-rust/50485043#50485043", "title": "Meaning of the ampersand &#39;&amp;&#39; and star &#39;*&#39; symbols in Rust", "body": "<p>This answer is for those looking for the basics (e.g. coming from Google).</p>\n\n<p>From the Rust book's <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html\" rel=\"noreferrer\">References and Borrowing</a>:</p>\n\n<blockquote>\n<pre><code>fn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&amp;s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &amp;String) -&gt; usize {\n    s.len()\n}\n</code></pre>\n  \n  <p>These ampersands are references, and they allow you to refer to some value without taking ownership of it [i.e. borrowing].</p>\n  \n  <p>The opposite of referencing by using <code>&amp;</code> is <em>dereferencing</em>, which is accomplished with the dereference operator, <code>*</code>.</p>\n</blockquote>\n\n<p>And a basic example:</p>\n\n<pre><code>let x = 5;\nlet y = &amp;x; //set y to a reference to x\n\nassert_eq!(5, x);\nassert_eq!(5, *y); // dereference y\n</code></pre>\n\n<p>If we tried to write <code>assert_eq!(5, y);</code> instead, we would get a compilation error <code>can't compare `{integer}` with `&amp;{integer}`</code>.</p>\n\n<p>(You can read more in the <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-00-smart-pointers.html\" rel=\"noreferrer\">Smart Pointers chapter</a>.)</p>\n\n<p>And from <a href=\"https://doc.rust-lang.org/book/second-edition/ch05-03-method-syntax.html\" rel=\"noreferrer\">Method Syntax</a>:</p>\n\n<blockquote>\n  <p>Rust has a feature called <em>automatic referencing and dereferencing</em>. Calling methods is one of the few places in Rust that has this behavior.</p>\n  \n  <p>Here\u2019s how it works: when you call a method with <code>object.something()</code>, Rust automatically adds in <code>&amp;</code>, <code>&amp;mut</code>, or <code>*</code> so object matches the signature of the method. In other words, the following are the same:</p>\n\n<pre><code>p1.distance(&amp;p2);\n(&amp;p1).distance(&amp;p2);\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 15140, "user_id": 1126971, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/738f6908cdcc3651abf6293370c59f97?s=128&d=identicon&r=PG", "display_name": "John Smith Optional", "link": "https://stackoverflow.com/users/1126971/john-smith-optional"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10572, "favorite_count": 6, "accepted_answer_id": 36335679, "answer_count": 3, "score": 49, "last_activity_date": 1527081582, "creation_date": 1459432119, "last_edit_date": 1527081582, "question_id": 36335342, "link": "https://stackoverflow.com/questions/36335342/meaning-of-the-ampersand-and-star-symbols-in-rust", "title": "Meaning of the ampersand &#39;&amp;&#39; and star &#39;*&#39; symbols in Rust", "body": "<p>Despite thoroughly reading the documentation, I'm rather confused about the meaning of the <code>&amp;</code> and <code>*</code> symbol in Rust, and more generally about what is a Rust reference exactly.</p>\n\n<p>In this example, it seems to be similar to a C++ reference (that is, an address that is automatically dereferenced when used):</p>\n\n<pre><code>fn main() {\n    let c: i32 = 5;\n    let rc = &amp;c;\n    let next = rc + 1;\n    println!(\"{}\", next); // 6\n}\n</code></pre>\n\n<p>However, the following code works exactly the same:</p>\n\n<pre><code>fn main() {\n    let c: i32 = 5;\n    let rc = &amp;c;\n    let next = *rc + 1;\n    println!(\"{}\", next); // 6\n}\n</code></pre>\n\n<p>Using <code>*</code> to dereference a reference wouldn't be correct in C++. So I'd like to understand why this is correct in Rust.</p>\n\n<p>My understanding so far, is that, inserting <code>*</code> in front of a Rust reference dereferences it, but the <code>*</code> is implicitly inserted anyway so you don't need to add it (while in C++, it's implicitly inserted and if you insert it you get a compilation error).</p>\n\n<p>However, something like this doesn't compile:</p>\n\n<pre><code>fn main() {\n    let mut c: i32 = 5;\n    let mut next: i32 = 0;\n    {\n        let rc = &amp;mut c;\n        next = rc + 1;\n    }\n    println!(\"{}\", next);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `+` cannot be applied to type `&amp;mut i32`\n --&gt; src/main.rs:6:16\n  |\n6 |         next = rc + 1;\n  |                ^^^^^^\n  |\n  = note: this is a reference to a type that `+` can be applied to; you need to dereference this variable once for this operation to work\n  = note: an implementation of `std::ops::Add` might be missing for `&amp;mut i32`\n</code></pre>\n\n<p>But this works:</p>\n\n<pre><code>fn main() {\n    let mut c: i32 = 5;\n    let mut next: i32 = 0;\n    {\n        let rc = &amp;mut c;\n        next = *rc + 1;\n    }\n    println!(\"{}\", next);  // 6\n}\n</code></pre>\n\n<p>It seems that implicit dereferencing (a la C++) is correct for immutable references, but not for mutable references. Why is this?</p>\n"}, {"tags": ["sockets", "udp", "size", "rust", "buffer"], "answers": [{"comments": [{"owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1459444940, "post_id": 36334335, "comment_id": 60301610, "body": "Yes, it&#39;s obvious that size of buffer should correlate with protocols structures. However multiple incoming messages can accumulate in system UDP buffer before my function (that handles read event) will be called. So it&#39;s impossible to predict what size is enough."}, {"owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "edited": false, "score": 0, "creation_date": 1459445683, "post_id": 36334335, "comment_id": 60302047, "body": "How can I get SO_SNDBUF and SO_RCVBUF in Rust? In case of using dynamically allocated buffers it will be necessary to use heap that makes performance worse."}, {"owner": {"reputation": 3648, "user_id": 1118660, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/aaef8abaea3dc9d8ad119ceba8900aac?s=128&d=identicon&r=PG", "display_name": "Jason Watkins", "link": "https://stackoverflow.com/users/1118660/jason-watkins"}, "edited": false, "score": 1, "creation_date": 1459455311, "post_id": 36334335, "comment_id": 60307611, "body": "With UDP, you will only receive one datagram per read operation, so unless you have messages split over multiple datagrams you should be able to size your buffer based on message size."}], "tags": [], "owner": {"reputation": 13, "user_id": 881663, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/441a2586f3c87550213254576e45c8e7?s=128&d=identicon&r=PG", "display_name": "okosenkov", "link": "https://stackoverflow.com/users/881663/okosenkov"}, "is_accepted": false, "score": 0, "last_activity_date": 1459459291, "last_edit_date": 1495540787, "creation_date": 1459429424, "answer_id": 36334335, "question_id": 36333976, "link": "https://stackoverflow.com/questions/36333976/what-size-buffer-should-be-used-for-reading-from-a-udp-socket/36334335#36334335", "title": "What size buffer should be used for reading from a UDP socket?", "body": "<p>You may try to use the receive/transmit buffer sizes that match the socket receive/transmit options, see <a href=\"https://stackoverflow.com/questions/16156326/so-sndbuf-and-so-rcvbuf-in-c-sockets-under-linux\">SO_SNDBUF and SO_RCVBUF on Linux sockets</a>, <code>getsockopt(3)</code>, <code>SO_RCVBUF</code>, and <code>SO_SNDBUF</code>.</p>\n\n<p>Alternatively, you may use buffer sizes that match and align well with your protocol structures.</p>\n\n<p>The larger the buffer size in your program is, the less IO calls you perform. In the case where you assemble payload from multiple disjoint memory locations, you may use scatter / gather IO vectors to minimize IO syscalls.</p>\n"}, {"tags": [], "owner": {"reputation": 288867, "user_id": 207421, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=128&d=identicon&r=PG", "display_name": "user207421", "link": "https://stackoverflow.com/users/207421/user207421"}, "is_accepted": false, "score": 1, "last_activity_date": 1459459975, "creation_date": 1459459975, "answer_id": 36344229, "question_id": 36333976, "link": "https://stackoverflow.com/questions/36333976/what-size-buffer-should-be-used-for-reading-from-a-udp-socket/36344229#36344229", "title": "What size buffer should be used for reading from a UDP socket?", "body": "<p>You should use a size one larger than the largest expected datagram. That way, if you receive one that size, you know there was a protocol error and that data may have been truncated.</p>\n\n<p>You will receive one datagram at a time. It's not a stream.</p>\n"}], "owner": {"reputation": 514, "user_id": 5327043, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a8f5b77fe7e7cccd4e630d0a73cd05f?s=128&d=identicon&r=PG&f=1", "display_name": "Walking.In.The.Air", "link": "https://stackoverflow.com/users/5327043/walking-in-the-air"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 562, "favorite_count": 1, "answer_count": 2, "score": -1, "last_activity_date": 1459459975, "creation_date": 1459428500, "last_edit_date": 1459459202, "question_id": 36333976, "link": "https://stackoverflow.com/questions/36333976/what-size-buffer-should-be-used-for-reading-from-a-udp-socket", "title": "What size buffer should be used for reading from a UDP socket?", "body": "<p>When reading data from a <a href=\"https://doc.rust-lang.org/std/net/struct.UdpSocket.html\" rel=\"nofollow\"><code>std::net::UdpSocket</code></a> in Rust we use a buffer:</p>\n\n<pre><code>fn recv_from(&amp;self, buf: &amp;mut [u8]) -&gt; Result&lt;(usize, SocketAddr)&gt;\n</code></pre>\n\n<p>How big should this buffer be? Is the socket a stream or a datagram?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1459432517, "post_id": 36333789, "comment_id": 60292862, "body": "You also didn&#39;t provide the definition of <code>MyError</code> and how exactly <code>State::work()</code> creates <code>MyError</code>. If it indeed contains string slices which are bound to the lifetime of <code>state</code>, it would be impossible to return <code>MyError</code> because <code>state</code> gets destroyed right there in <code>MyImpl::work()</code>."}, {"owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1459432748, "post_id": 36333789, "comment_id": 60293049, "body": "@VladimirMatveev That is obviously the issue, but how can I bind them to <code>MyError</code> instead?"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1459436756, "creation_date": 1459436756, "answer_id": 36337189, "question_id": 36333789, "link": "https://stackoverflow.com/questions/36333789/how-to-return-an-error-when-it-contains-a-reference/36337189#36337189", "title": "How to return an Error when it contains a reference?", "body": "<p>The problem is that according to the signature of <code>State::work()</code> the lifetime parameter of <code>MyError</code> becomes tied to that of <code>&amp;self</code> reference:</p>\n\n<pre><code>// without lifetime elision\npub fn work&lt;'a&gt;(&amp;'a self) -&gt; Result&lt;(), MyError&lt;'a&gt;&gt;\n</code></pre>\n\n<p>And afterwards this value is returned in <code>MyImpl::work()</code>:</p>\n\n<pre><code>fn work(&amp;self) -&gt; Result&lt;(), MyError&lt;'a&gt;&gt; {\n    let state = State::new();\n\n    state.work()\n}\n</code></pre>\n\n<p>The problem is, lifetime parameter <code>'a</code> in <code>impl&lt;'a&gt; MyTrait for MyImpl&lt;'a&gt;</code> denotes a lifetime which is <em>strictly larger</em> than that of <code>MyError</code> returned by <code>State::work()</code>. Why it is so? Well, let's look at <code>MyImpl::work()</code> again:</p>\n\n<pre><code>fn work(&amp;self) -&gt; Result&lt;(), MyError&lt;'a&gt;&gt; {\n    let state = State::new();\n    state.work()\n}\n</code></pre>\n\n<p>Remember that <code>State::work(&amp;self)</code> returns a <code>MyError</code> with lifetime tied to that of <code>&amp;self</code>, that is, in this particular case it will be the lifetime of <code>state</code>. The latter, being a local variable, is destroyed immediately after <code>work()</code> returns.</p>\n\n<p>However, <code>'a</code> in <code>impl&lt;'a&gt; MyTrait for MyImpl&lt;'a&gt;</code> denotes the lifetime of a string slice stored in <code>MyImpl</code> (that is, in <code>self</code>). Naturally, because <code>MyImpl::work()</code> can be called at all, it means that the value it is called at is in a valid state and holds a slice which is alive. Therefore, its lifetime is larger than anything which can be created inside <code>MyImpl::work()</code>. So it is unsound to return anything which is not derived from this string slice inside <code>MyImpl</code>; for example, this is valid:</p>\n\n<pre><code>impl&lt;'a&gt; MyTrait for MyImpl&lt;'a&gt; {\n    type Error = MyError&lt;'a&gt;;\n\n    fn work(&amp;self) -&gt; Result&lt;(), MyError&lt;'a&gt;&gt; {\n        Err(MyError::Some(self.some_string))\n    }\n}\n</code></pre>\n\n<p>Now the lifetime of <code>MyError</code> value is exactly that of <code>self.some_string</code>, and the borrow checker becomes happy.</p>\n\n<p>Now, what options are there? First, the simplest approach would be to store an owned <code>String</code> inside <code>MyError</code>:</p>\n\n<pre><code>enum MyError {\n    Some(String)\n}\n\nimpl&lt;'a&gt; MyTrait for MyImpl&lt;'a&gt; {\n    type Error = MyError;\n\n    fn work(&amp;self) -&gt; Result&lt;(), MyError&gt; {\n        let state = State::new();\n        state.work()\n    }\n}\n\nstruct State;\n\nimpl State {\n    pub fn new() -&gt; State {\n        State\n    }\n\n    pub fn work(&amp;self) -&gt; Result&lt;(), MyError&gt; {\n        Err(MyError::Some(\"hi\".into()))\n    }\n}\n</code></pre>\n\n<p>This, I believe, is the most idiomatic and the most flexible approach. It is actually very uncommon to have non-self-sufficient error values; I think I've never seen one before. Another alternative would be to use <code>&amp;'static str</code>:</p>\n\n<pre><code>enum MyError {\n    Some(&amp;'static str)\n}\n\nstruct State;\n\nimpl State {\n    pub fn new() -&gt; State {\n        State\n    }\n\n    pub fn work(&amp;self) -&gt; Result&lt;(), MyError&gt; {\n        Err(MyError::Some(\"hi\"))\n    }\n}\n</code></pre>\n\n<p>This approach won't allow you to create error messages dynamically (you can only use string literals for your error messages) but it is more efficient because it does not require allocations for the unhappy path in your program and it may be sufficient for your use cases.</p>\n"}], "owner": {"reputation": 2289, "user_id": 1454653, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/FvI1V.jpg?s=128&g=1", "display_name": "dragostis", "link": "https://stackoverflow.com/users/1454653/dragostis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 201, "favorite_count": 0, "accepted_answer_id": 36337189, "answer_count": 1, "score": 0, "last_activity_date": 1459459459, "creation_date": 1459428021, "last_edit_date": 1459459459, "question_id": 36333789, "link": "https://stackoverflow.com/questions/36333789/how-to-return-an-error-when-it-contains-a-reference", "title": "How to return an Error when it contains a reference?", "body": "<p>I have a Rust method that returns a <code>Result&lt;_, MyError&gt;</code>. This method is run on a <code>State</code> struct and <code>MyError</code> has a lifetime specifier <code>'a</code> because it needs to keep some <code>&amp;str</code>s.</p>\n\n<p>I'm trying to write a trait like this:</p>\n\n<pre><code>trait MyTrait {\n    type Error;\n\n    fn work(&amp;self) -&gt; Result&lt;(), Self::Error&gt;;\n}\n\nimpl&lt;'a&gt; MyTrait for MyImpl&lt;'a&gt; {\n    type Error = MyError&lt;'a&gt;;\n\n    fn work(&amp;self) -&gt; Result&lt;(), MyError&lt;'a&gt;&gt; {\n        let state = State::new();\n\n        state.work() // returns Result&lt;(), MyError&gt; but state doesn't live long enough\n    }\n}\n</code></pre>\n\n<p>How can I get around this error? Should I change <code>MyError</code> to keep <code>String</code> instead of <code>&amp;'a str</code>? Should I keep the <code>state</code> inside of <code>MyImpl</code>? Is this <code>trait</code> well-defined?</p>\n\n<p>I want to create a <code>State</code> for every run of <code>do()</code>.</p>\n\n<p>Here is an MCVE:</p>\n\n<pre><code>enum MyError&lt;'a&gt; {\n    Some(&amp;'a str),\n}\n\ntrait MyTrait {\n    type Error;\n\n    fn work(&amp;self) -&gt; Result&lt;(), Self::Error&gt;;\n}\n\nstruct MyImpl&lt;'a&gt; {\n    pub some_string: &amp;'a str,\n}\n\nimpl&lt;'a&gt; MyTrait for MyImpl&lt;'a&gt; {\n    type Error = MyError&lt;'a&gt;;\n\n    fn work(&amp;self) -&gt; Result&lt;(), MyError&lt;'a&gt;&gt; {\n        let state = State::new();\n\n        state.work() // returns Result&lt;(), MyError&gt; but state doesn't live long enough\n    }\n}\n\nstruct State;\n\nimpl State {\n    pub fn new() -&gt; State {\n        State\n    }\n\n    pub fn work(&amp;self) -&gt; Result&lt;(), MyError&gt; {\n        Err(MyError::Some(\"hi\"))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=1113cf64d37ba6ed7134e322e5e89471&amp;version=stable\" rel=\"nofollow\">Playground</a>)</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "reply_to_user": {"reputation": 1817, "user_id": 2097820, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/8b3895471f66270218073bc6e9c42e53?s=128&d=identicon&r=PG", "display_name": "Victor Aur&#233;lio", "link": "https://stackoverflow.com/users/2097820/victor-aur%c3%a9lio"}, "edited": false, "score": 0, "creation_date": 1459426801, "post_id": 36333123, "comment_id": 60288462, "body": "@VictorAur&#233;lio - You are missing the <code>let</code> before <code>entry</code>."}, {"owner": {"reputation": 1817, "user_id": 2097820, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/8b3895471f66270218073bc6e9c42e53?s=128&d=identicon&r=PG", "display_name": "Victor Aur&#233;lio", "link": "https://stackoverflow.com/users/2097820/victor-aur%c3%a9lio"}, "edited": false, "score": 0, "creation_date": 1459426978, "post_id": 36333123, "comment_id": 60288629, "body": "I added the <code>let</code> but there&#39;s error yet (the second error only)."}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "reply_to_user": {"reputation": 1817, "user_id": 2097820, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/8b3895471f66270218073bc6e9c42e53?s=128&d=identicon&r=PG", "display_name": "Victor Aur&#233;lio", "link": "https://stackoverflow.com/users/2097820/victor-aur%c3%a9lio"}, "edited": false, "score": 0, "creation_date": 1459427044, "post_id": 36333123, "comment_id": 60288687, "body": "@VictorAur&#233;lio - You need to return a value from your function e.g. <code>Ok(())</code>."}], "tags": [], "owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "is_accepted": true, "score": 2, "last_activity_date": 1522747994, "last_edit_date": 1522747994, "creation_date": 1459426335, "answer_id": 36333123, "question_id": 36332802, "link": "https://stackoverflow.com/questions/36332802/try-wont-compile-mismatched-types/36333123#36333123", "title": "try! won&#39;t compile mismatched types", "body": "<p>It looks like you want a new binding for each directory entry in your loop:</p>\n\n<pre><code>for entry in fs::read_dir(path)? {\n    let entry = entry?;\n}\n</code></pre>\n\n<p>this new binding will shadow the one introduced in the <code>for</code> expression.</p>\n\n<p>The type of <code>entry</code> introduced by the loop is <code>Result&lt;DirEntry&gt;</code> which you are trying to unwrap using <code>?</code> (formerly <code>try!</code>). However you are attempting to assign the resulting <code>DirEntry</code> to a binding with type <code>Result&lt;DirEntry&gt;</code>, hence the error.</p>\n\n<p>The second error indicates that the return value from your function does not match the declared type of <code>io::Result&lt;()&gt;</code>. You can simply return <code>Ok(())</code>:</p>\n\n<pre><code>fn do_job(path: &amp;Path) -&gt; io::Result&lt;()&gt; {\n    let mut files: Vec&lt;&amp;Path&gt; = Vec::new();\n\n    for entry in fs::read_dir(path)? {\n        let entry = entry?;\n        //process entry\n    }\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 1817, "user_id": 2097820, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/8b3895471f66270218073bc6e9c42e53?s=128&d=identicon&r=PG", "display_name": "Victor Aur&#233;lio", "link": "https://stackoverflow.com/users/2097820/victor-aur%c3%a9lio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "accepted_answer_id": 36333123, "answer_count": 1, "score": -1, "last_activity_date": 1522747994, "creation_date": 1459425418, "last_edit_date": 1459456045, "question_id": 36332802, "link": "https://stackoverflow.com/questions/36332802/try-wont-compile-mismatched-types", "title": "try! won&#39;t compile mismatched types", "body": "<p>Why doesn't this Rust code compile?</p>\n\n<pre><code>use std::fs;\nuse std::io;\nuse std::path::Path;\n\nfn do_job(path: &amp;Path) -&gt; io::Result&lt;()&gt; {\n    let mut files: Vec&lt;&amp;Path&gt; = Vec::new();\n\n    for entry in try!(fs::read_dir(path)) {\n        entry = try!(entry);\n    }\n}\n</code></pre>\n\n<p>it's very similar to code in the <a href=\"https://doc.rust-lang.org/std/fs/fn.read_dir.html\" rel=\"nofollow\">docs</a>.</p>\n\n<p>compile error:</p>\n\n<pre><code>&lt;std macros&gt;:3:43: 3:46 error: mismatched types:\n expected `core::result::Result&lt;std::fs::DirEntry, std::io::error::Error&gt;`,\n    found `std::fs::DirEntry`\n(expected enum `core::result::Result`,\n    found struct `std::fs::DirEntry`) [E0308]\n&lt;std macros&gt;:3 $ crate:: result:: Result:: Ok ( val ) =&gt; val , $ crate:: result:: Result::\n                                                         ^~~\nsrc/main.rs:13:17: 13:28 note: in this expansion of try! (defined in &lt;std macros&gt;)\n&lt;std macros&gt;:3:43: 3:46 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/main.rs:12:5: 14:6 error: mismatched types:\n expected `core::result::Result&lt;(), std::io::error::Error&gt;`,\n    found `()`\n(expected enum `core::result::Result`,\n    found ()) [E0308]\nsrc/main.rs:12     for entry in try!(fs::read_dir(path)) {\nsrc/main.rs:13         entry = try!(entry);\nsrc/main.rs:14     }\nsrc/main.rs:12:5: 14:6 help: run `rustc --explain E0308` to see a detailed explanation\n</code></pre>\n"}]