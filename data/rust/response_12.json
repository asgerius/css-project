[{"tags": ["rust", "encapsulation", "contravariance", "mutability", "interior-mutability"], "answers": [{"comments": [{"owner": {"reputation": 1186, "user_id": 837964, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/87a9a620de21a352537c68881cdc7625?s=128&d=identicon&r=PG", "display_name": "norcalli", "link": "https://stackoverflow.com/users/837964/norcalli"}, "edited": false, "score": 2, "creation_date": 1427963828, "post_id": 29401865, "comment_id": 46990787, "body": "Is this the only/idiomatic way to do this? Seems like a bit of trouble... Though I suppose instead of a getItems() method, you could borrow the internals in a block directly where it would then go out of scope (or something...)"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 1186, "user_id": 837964, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/87a9a620de21a352537c68881cdc7625?s=128&d=identicon&r=PG", "display_name": "norcalli", "link": "https://stackoverflow.com/users/837964/norcalli"}, "edited": false, "score": 3, "creation_date": 1427964043, "post_id": 29401865, "comment_id": 46990884, "body": "@Norcalli In the specific case of <code>RefCell</code>, the object needs to be notified when the reference goes out of scope (that&#39;s what the destructor of <code>Ref</code> does). Here, we need to preserve this behavior (the error of the OP was due to the <code>Ref</code> instance being dropped too early), and thus encapsulate it."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 26, "last_activity_date": 1531661878, "last_edit_date": 1531661878, "creation_date": 1427926772, "answer_id": 29401865, "question_id": 29401626, "link": "https://stackoverflow.com/questions/29401626/how-do-i-return-a-reference-to-something-inside-a-refcell-without-breaking-encap/29401865#29401865", "title": "How do I return a reference to something inside a RefCell without breaking encapsulation?", "body": "<p>You can create a new struct similar to the <code>Ref&lt;'a,T&gt;</code> guard returned by <code>RefCell::borrow()</code>, in order to wrap this <code>Ref</code> and avoid having it going out of scope, like this:</p>\n\n<pre><code>use std::cell::Ref;\n\nstruct FooGuard&lt;'a&gt; {\n    guard: Ref&lt;'a, MutableInterior&gt;,\n}\n</code></pre>\n\n<p>then, you can implement the <code>Deref</code> trait for it, so that it can be used as if it was a <code>&amp;Vec&lt;i32&gt;</code>:</p>\n\n<pre><code>use std::ops::Deref;\n\nimpl&lt;'b&gt; Deref for FooGuard&lt;'b&gt; {\n    type Target = Vec&lt;i32&gt;;\n\n    fn deref(&amp;self) -&gt; &amp;Vec&lt;i32&gt; {\n        &amp;self.guard.vec\n    }\n}\n</code></pre>\n\n<p>after that, update your <code>get_items()</code> method to return a <code>FooGuard</code> instance:</p>\n\n<pre><code>impl Foo {\n    pub fn get_items(&amp;self) -&gt; FooGuard {\n        FooGuard {\n            guard: self.interior.borrow(),\n        }\n    }\n}\n</code></pre>\n\n<p>and <code>Deref</code> does the magic:</p>\n\n<pre><code>fn main() {\n    let f = Foo {\n        interior: RefCell::new(MutableInterior {\n            vec: Vec::new(),\n            hide_me: 2,\n        }),\n    };\n    let borrowed_f = &amp;f;\n    let items = borrowed_f.get_items();\n    let v: &amp;Vec&lt;i32&gt; = &amp;items;\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 570, "user_id": 2780630, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57f6fdc404f5a270e608f3df85f40dfb?s=128&d=identicon&r=PG&f=1", "display_name": "DanielV", "link": "https://stackoverflow.com/users/2780630/danielv"}, "edited": false, "score": 0, "creation_date": 1570485143, "post_id": 51341957, "comment_id": 102921520, "body": "What about instead of get_item, if you were implementing the std::ops::Index&lt;&gt; trait, which requires you to return &amp;Self::Output .  Returning a std::cell::Ref, as far as I have been able to figure out, won&#39;t satisfy the trait requirement.  Is there a way to do interior mutability with for that trait?"}, {"owner": {"reputation": 570, "user_id": 2780630, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57f6fdc404f5a270e608f3df85f40dfb?s=128&d=identicon&r=PG&f=1", "display_name": "DanielV", "link": "https://stackoverflow.com/users/2780630/danielv"}, "edited": false, "score": 0, "creation_date": 1570485936, "post_id": 51341957, "comment_id": 102921759, "body": "Actually I found a way to do it with UnsafeCell, so I think maybe that will be good enough."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 570, "user_id": 2780630, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57f6fdc404f5a270e608f3df85f40dfb?s=128&d=identicon&r=PG&f=1", "display_name": "DanielV", "link": "https://stackoverflow.com/users/2780630/danielv"}, "edited": false, "score": 0, "creation_date": 1570498702, "post_id": 51341957, "comment_id": 102924219, "body": "@DanielV <a href=\"https://stackoverflow.com/q/39113649/155423\">Implementing Index trait to return a value that is not a reference</a>. I wouldn&#39;t trust the <code>UnsafeCell</code> implementation because it&#39;s quite likely that it introduces memory unsafety."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 23, "last_activity_date": 1531661976, "last_edit_date": 1531661976, "creation_date": 1531590573, "answer_id": 51341957, "question_id": 29401626, "link": "https://stackoverflow.com/questions/29401626/how-do-i-return-a-reference-to-something-inside-a-refcell-without-breaking-encap/51341957#51341957", "title": "How do I return a reference to something inside a RefCell without breaking encapsulation?", "body": "<p>Instead of creating a brand new type, you can use <a href=\"https://doc.rust-lang.org/nightly/std/cell/struct.Ref.html#method.map\" rel=\"noreferrer\"><code>Ref::map</code></a> (since Rust 1.8). This has the same result as <a href=\"https://stackoverflow.com/a/29401865/155423\">Levans' existing answer</a>:</p>\n\n<pre><code>use std::cell::Ref;\n\nimpl Foo {\n    pub fn get_items(&amp;self) -&gt; Ref&lt;'_, Vec&lt;i32&gt;&gt; {\n        Ref::map(self.interior.borrow(), |mi| &amp;mi.vec)\n    }\n}\n</code></pre>\n\n<p>You can also use new features like <code>impl Trait</code> to hide the <code>Ref</code> from the API:</p>\n\n<pre><code>use std::cell::Ref;\nuse std::ops::Deref;\n\nimpl Foo {\n    pub fn get_items(&amp;self) -&gt; impl Deref&lt;Target = Vec&lt;i32&gt;&gt; + '_ {\n        Ref::map(self.interior.borrow(), |mi| &amp;mi.vec)\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 5, "last_activity_date": 1531634900, "creation_date": 1531634900, "answer_id": 51345746, "question_id": 29401626, "link": "https://stackoverflow.com/questions/29401626/how-do-i-return-a-reference-to-something-inside-a-refcell-without-breaking-encap/51345746#51345746", "title": "How do I return a reference to something inside a RefCell without breaking encapsulation?", "body": "<p>You can wrap the <code>Vec</code> in an <code>Rc</code>.</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MutableInterior {\n    hide_me: i32,\n    vec: Rc&lt;Vec&lt;i32&gt;&gt;,\n}\nstruct Foo {\n    interior: RefCell&lt;MutableInterior&gt;,\n}\n\nimpl Foo {\n    pub fn get_items(&amp;self) -&gt; Rc&lt;Vec&lt;i32&gt;&gt; {\n        self.interior.borrow().vec.clone() // clones the Rc, not the Vec\n    }\n}\n\nfn main() {\n    let f = Foo {\n        interior: RefCell::new(MutableInterior {\n            vec: Rc::new(Vec::new()),\n            hide_me: 2,\n        }),\n    };\n    let borrowed_f = &amp;f;\n    let items = borrowed_f.get_items();\n}\n</code></pre>\n\n<p>When you need to mutate the <code>Vec</code>, use <a href=\"https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.make_mut\" rel=\"noreferrer\"><code>Rc::make_mut</code></a> to obtain a mutable reference to the <code>Vec</code>. If there are still other <code>Rc</code>s referring to the <code>Vec</code>, <code>make_mut</code> will dissociate the <code>Rc</code> from the other <code>Rc</code>s, clone the <code>Vec</code> and update itself to refer to that new <code>Vec</code>, then give you a mutable reference to it. This ensures that the value in the other <code>Rc</code>s doesn't suddenly change (because <code>Rc</code> by itself doesn't provide interior mutability).</p>\n"}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5606, "favorite_count": 9, "accepted_answer_id": 29401865, "answer_count": 3, "score": 34, "last_activity_date": 1545155686, "creation_date": 1427925720, "last_edit_date": 1545155686, "question_id": 29401626, "link": "https://stackoverflow.com/questions/29401626/how-do-i-return-a-reference-to-something-inside-a-refcell-without-breaking-encap", "title": "How do I return a reference to something inside a RefCell without breaking encapsulation?", "body": "<p>I have a struct that has inner mutability.</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct MutableInterior {\n    hide_me: i32,\n    vec: Vec&lt;i32&gt;,\n}\nstruct Foo {\n    //although not used in this particular snippet,\n    //the motivating problem uses interior mutability\n    //via RefCell.\n    interior: RefCell&lt;MutableInterior&gt;,\n}\n\nimpl Foo {\n    pub fn get_items(&amp;self) -&gt; &amp;Vec&lt;i32&gt; {\n        &amp;self.interior.borrow().vec\n    }\n}\n\nfn main() {\n    let f = Foo {\n        interior: RefCell::new(MutableInterior {\n            vec: Vec::new(),\n            hide_me: 2,\n        }),\n    };\n    let borrowed_f = &amp;f;\n    let items = borrowed_f.get_items();\n}\n</code></pre>\n\n<p>Produces the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:16:10\n   |\n16 |         &amp;self.interior.borrow().vec\n   |          ^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n17 |     }\n   |     - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 15:5...\n  --&gt; src/main.rs:15:5\n   |\n15 | /     pub fn get_items(&amp;self) -&gt; &amp;Vec&lt;i32&gt; {\n16 | |         &amp;self.interior.borrow().vec\n17 | |     }\n   | |_____^\n</code></pre>\n\n<p>The problem is that I can't have a function on <code>Foo</code> that returns a borrowed <code>vec</code>, because the borrowed <code>vec</code> is only valid for the lifetime of the <code>Ref</code>, but the <code>Ref</code> goes out of scope immediately.</p>\n\n<p>I think the <code>Ref</code> must stick around <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"noreferrer\">because</a>:</p>\n\n<blockquote>\n  <p><code>RefCell&lt;T&gt;</code> uses Rust's lifetimes to implement 'dynamic borrowing', a process whereby one can claim temporary, exclusive, mutable access to the inner value. Borrows for <code>RefCell&lt;T&gt;</code>s are tracked 'at runtime', unlike Rust's native reference types which are entirely tracked statically, at compile time. Because <code>RefCell&lt;T&gt;</code> borrows are dynamic it is possible to attempt to borrow a value that is already mutably borrowed; when this happens it results in task panic.</p>\n</blockquote>\n\n<p>Now I could instead write a function like this that returns the entire interior:</p>\n\n<pre><code>pub fn get_mutable_interior(&amp;self) -&gt; std::cell::Ref&lt;MutableInterior&gt;;\n</code></pre>\n\n<p>However this potentially exposes fields (<code>MutableInterior.hide_me</code> in this example) that are really private implementation details to <code>Foo</code>.</p>\n\n<p>Ideally I just want to expose the <code>vec</code> itself, potentially with a guard to implement the dynamic borrowing behavior. Then callers do not have to find out about <code>hide_me</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1473, "user_id": 204305, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/4fa6165d3bcb50e58e60304807f4090a?s=128&d=identicon&r=PG", "display_name": "Sage Mitchell", "link": "https://stackoverflow.com/users/204305/sage-mitchell"}, "edited": false, "score": 0, "creation_date": 1427923714, "post_id": 29401044, "comment_id": 46978015, "body": "Have you tried making a <code>new</code> function that constructs an instance and then patches it up before returning?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427925134, "post_id": 29401044, "comment_id": 46978578, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28113504/structure-containing-fields-that-know-each-other\">Structure containing fields that know each other</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1427926708, "post_id": 29401044, "comment_id": 46979189, "body": "<code>&amp;mut</code> won&#39;t work anyway for parent references anyway, since it does not allow aliasing. <code>&amp;</code> allows that but still requires some gymnastics (and a <code>Cell</code> if you want to change <code>id</code> after construction). It also puts weird requirements on the collection of all <code>DisjointSet</code>s (can&#39;t have <code>Vec&lt;DisjointSet&lt;&#39;s&gt;&gt;</code> for example). A disjoint set data structure is effectively a DAG, i.e. a graph, and graphs are hairy to encode in Rust. I&#39;m inclined to recommend the traditional implementation via indices (<code>parent: usize</code>, implicitly referring to a <code>Vec&lt;DisjointSet&gt;</code> somewhere else)."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 5, "last_activity_date": 1553952110, "last_edit_date": 1553952110, "creation_date": 1427953689, "answer_id": 29405819, "question_id": 29401044, "link": "https://stackoverflow.com/questions/29401044/use-reference-to-new-struct-in-the-struct-initializer/29405819#29405819", "title": "Use reference to new struct in the struct initializer", "body": "<p>As @delnan says, at their core, these sort of data structures are directed acyclic graphs (DAGs), with all the sharing that entails. Rust is strict about what sharing can happen so it takes a bit of extra effort to convince the compiler to accept your code in this case.</p>\n\n<p>Fortunately though, \"all the sharing that entails\" isn't literally \"all the sharing\": a DAG is <em>acyclic</em> (modulo wanting to have <code>parent: self</code>), so a reference counting type like <code>Rc</code> or <code>Arc</code> is a perfect way to handle the sharing (reference counting is not so good if there are cycles). Specifically:</p>\n\n<pre><code>struct DisjointSet {\n    id: Cell&lt;usize&gt;,\n    parent: Rc&lt;DisjointSet&gt;,\n}\n</code></pre>\n\n<p>The <code>Cell</code> has zero runtime overhead (there is definitely some syntactic overhead) for such a small type.</p>\n\n<p>Unfortunately, this still isn't quite right for the same reason that the compiler suggests using <code>Option&lt;...&gt;</code>. There's no way to create the first <code>DisjointSet</code>. However, the suggested fix still works:</p>\n\n<pre><code>struct DisjointSet {\n    id: Cell&lt;usize&gt;,\n    parent: Option&lt;Rc&lt;DisjointSet&gt;&gt;,\n}\n</code></pre>\n\n<p>(The <code>Option&lt;...&gt;</code> is free: <code>Option&lt;Rc&lt;...&gt;&gt;</code> is a single nullable pointer, just like <code>Rc&lt;...&gt;</code> is a single non-nullable pointer, and presumably one would need a branch on \"do I have a parent or not\" anyway.)</p>\n\n<p>If you are going to take this approach, I would recommend not trying to use the <code>Option</code> for partial initialisation, but instead use it to represent the fact that the given set is a \"root\". It is easy to traverse up a chain with this representation, e.g.</p>\n\n<pre><code>fn find_root(mut x: &amp;DisjointSet) -&gt; &amp;DisjointSet {\n    while let Some(ref parent) = x.parent {\n        x = parent\n    }\n    x\n}\n</code></pre>\n\n<p>The same approach should work fine with references, but the lifetimes can often be hard to juggle.</p>\n"}], "owner": {"reputation": 4335, "user_id": 314784, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c9414b15cfad914b3e8af1bf40f01c13?s=128&d=identicon&r=PG", "display_name": "Ben Ruijl", "link": "https://stackoverflow.com/users/314784/ben-ruijl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 376, "favorite_count": 0, "accepted_answer_id": 29405819, "answer_count": 1, "score": 2, "last_activity_date": 1553952110, "creation_date": 1427923186, "last_edit_date": 1553952034, "question_id": 29401044, "link": "https://stackoverflow.com/questions/29401044/use-reference-to-new-struct-in-the-struct-initializer", "title": "Use reference to new struct in the struct initializer", "body": "<p>I am trying to create a disjoint set structure in Rust. It looks like this</p>\n\n<pre><code>struct DisjointSet&lt;'s&gt; {\n    id: usize,\n    parent: &amp;'s mut DisjointSet&lt;'s&gt;,\n}\n</code></pre>\n\n<p>The default disjoint set is a singleton structure, in which the parent refers to itself. Hence, I would like to have the option to do the following:</p>\n\n<pre><code>let a: DisjointSet = DisjointSet {\n    id: id,\n    parent: self,\n};\n</code></pre>\n\n<p>where the <code>self</code> is a reference to the object that will be created. </p>\n\n<p>I have tried working around this issue by creating a custom constructor. However, my attempts failed because partial initialization is not allowed. The compiler suggests using <code>Option&lt;DisjointSet&lt;'s&gt;&gt;</code>, but this is quite ugly. Do you have any suggestions?</p>\n\n<p>My question differs from <a href=\"https://stackoverflow.com/questions/28113504/structure-containing-fields-that-know-each-other\">Structure containing fields that know each other</a>\n because I am interested in getting the reference to the struct that will be created.</p>\n"}, {"tags": ["casting", "type-conversion", "rust"], "answers": [{"comments": [{"owner": {"reputation": 14931, "user_id": 9825, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/500e9e648f141048942c737fc88f38bd?s=128&d=identicon&r=PG", "display_name": "ilitirit", "link": "https://stackoverflow.com/users/9825/ilitirit"}, "edited": false, "score": 0, "creation_date": 1427916591, "post_id": 29399158, "comment_id": 46974262, "body": "Ugh... I&#39;ve found my problem.  I was trying to cast a &amp;u8 instead of u8 which is why &quot;as&quot; never worked for me.  I was casting an iterator instead of a primitive."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1427916349, "creation_date": 1427916349, "answer_id": 29399158, "question_id": 29398856, "link": "https://stackoverflow.com/questions/29398856/how-do-i-convert-between-numeric-types/29399158#29399158", "title": "How do I convert between numeric types?", "body": "<p>Use <code>as</code> to cast numeric types:</p>\n\n<pre><code>fn main () {\n    let u8_value: u8 = 42;\n    let i32_value: i32 = u8_value as i32;\n}\n</code></pre>\n"}], "owner": {"reputation": 14931, "user_id": 9825, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/500e9e648f141048942c737fc88f38bd?s=128&d=identicon&r=PG", "display_name": "ilitirit", "link": "https://stackoverflow.com/users/9825/ilitirit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52, "favorite_count": 0, "accepted_answer_id": 29399158, "answer_count": 1, "score": 0, "last_activity_date": 1427916414, "creation_date": 1427915345, "last_edit_date": 1427916414, "question_id": 29398856, "link": "https://stackoverflow.com/questions/29398856/how-do-i-convert-between-numeric-types", "title": "How do I convert between numeric types?", "body": "<p>I want to convert a <code>u8</code> to an <code>i32</code>. I used to do:</p>\n\n<pre><code>use std::num::ToPrimitive;\n\nfn main () {\n\n    // ...\n    // Other code\n    // ...\n\n    let int32 : i32 = u8Value.to_i32().unwrap();\n}\n</code></pre>\n\n<p>This code does not compile in the recent nightlies.  It complains that the ToPrimitive trait is unstable and will likely be removed.</p>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1427917158, "post_id": 29398918, "comment_id": 46974567, "body": "Specifically, they must be joined <i>before the lifetime of captured variables expires</i>."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 2, "last_activity_date": 1427915550, "creation_date": 1427915550, "answer_id": 29398918, "question_id": 29398595, "link": "https://stackoverflow.com/questions/29398595/futurespawn-kinda-useless-how-can-i-multi-thread-this/29398918#29398918", "title": "Future::spawn() kinda useless? How can I multi-thread this?", "body": "<p>Here, to properly do a multithreading, you need to used scoped threads, with <a href=\"http://doc.rust-lang.org/std/thread/fn.scoped.html\" rel=\"nofollow\"><code>std::thread::scoped(..)</code></a>.</p>\n\n<p>These threads do not need a <code>'static</code> closure to execute, but they <strong>must</strong> be joined.</p>\n\n<p>For example:</p>\n\n<pre><code>use std::thread::scoped;\n\nfn main() {\n    let coords = [(1f64,2f64,3f64),(1.,2.,3.),(1.,2.,3.),(1.,2.,3.)];\n    let x = scoped(|| coords.iter().fold(0f64, |mut a,b| { a += b.0; a }));\n    let y = scoped(|| coords.iter().fold(0f64, |mut a,b| { a += b.1; a }));\n    let z = scoped(|| coords.iter().fold(0f64, |mut a,b| { a += b.2; a }));\n\n    println!(\"x: {}; y: {}; z: {}\",\n             x.join(),\n             y.join(),\n             z.join());\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 0, "accepted_answer_id": 29398918, "answer_count": 1, "score": 1, "last_activity_date": 1427915550, "creation_date": 1427914475, "question_id": 29398595, "link": "https://stackoverflow.com/questions/29398595/futurespawn-kinda-useless-how-can-i-multi-thread-this", "title": "Future::spawn() kinda useless? How can I multi-thread this?", "body": "<p>Excerpt from <code>main</code> here:</p>\n\n<pre><code>let value: Value = json::from_str(&amp;sbuf).unwrap();\nlet coords = value.find(\"coordinates\").unwrap().as_array().unwrap();\nlet x = Future::spawn(|| coords.iter().fold(0f64, |mut a,b| { a += read_coord_value(&amp;b, \"x\"); a }));\nlet y = Future::spawn(|| coords.iter().fold(0f64, |mut a,b| { a += read_coord_value(&amp;b, \"y\"); a }));\nlet z = Future::spawn(|| coords.iter().fold(0f64, |mut a,b| { a += read_coord_value(&amp;b, \"z\"); a }));\n\nprintln!(\"x: {}; y: {}; z: {}\",\n         x.await().unwrap(),\n         y.await().unwrap(),\n         z.await().unwrap());\n</code></pre>\n\n<p>So, basically, what I'm doing here won't work because this spawn call requires everything that is passed to it to have a static lifetime--which means that there is basically no work I can avoid repeating. At all. Pointless.</p>\n\n<p>What's a <em>good</em> way to do threading here?</p>\n"}, {"tags": ["build", "rust"], "answers": [{"comments": [{"owner": {"reputation": 373, "user_id": 4180673, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/a22c11306f7c2432070b501aefe94645?s=128&d=identicon&r=PG", "display_name": "ruabmbua", "link": "https://stackoverflow.com/users/4180673/ruabmbua"}, "edited": false, "score": 0, "creation_date": 1427970972, "post_id": 29402146, "comment_id": 46994772, "body": "That is aborting due to missing dependencies. I tried to build the libraries in the right order, but no success so far."}, {"owner": {"reputation": 373, "user_id": 4180673, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/a22c11306f7c2432070b501aefe94645?s=128&d=identicon&r=PG", "display_name": "ruabmbua", "link": "https://stackoverflow.com/users/4180673/ruabmbua"}, "edited": false, "score": 0, "creation_date": 1427971110, "post_id": 29402146, "comment_id": 46994848, "body": "When building in the correct order (libcore first), it fails because of general compiler errors? Maybe a ton of missing compiler and linker flags..."}, {"owner": {"reputation": 36, "user_id": 4560110, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/98f3bd9a36ed4a29744beb693298d573?s=128&d=identicon&r=PG&f=1", "display_name": "Akaahn", "link": "https://stackoverflow.com/users/4560110/akaahn"}, "reply_to_user": {"reputation": 373, "user_id": 4180673, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/a22c11306f7c2432070b501aefe94645?s=128&d=identicon&r=PG", "display_name": "ruabmbua", "link": "https://stackoverflow.com/users/4180673/ruabmbua"}, "edited": false, "score": 0, "creation_date": 1428019505, "post_id": 29402146, "comment_id": 47020185, "body": "Are you making sure the compiler and the source you are compiling from are from the same commit? I tried compiling libcore, but got errors, after some searching I found <a href=\"http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/\" rel=\"nofollow noreferrer\">this</a>. After I checked out the commit that matched my compilers commit-hash, it compiled just fine."}, {"owner": {"reputation": 373, "user_id": 4180673, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/a22c11306f7c2432070b501aefe94645?s=128&d=identicon&r=PG", "display_name": "ruabmbua", "link": "https://stackoverflow.com/users/4180673/ruabmbua"}, "edited": false, "score": 0, "creation_date": 1428054768, "post_id": 29402146, "comment_id": 47029486, "body": "Yes my compiler source tree was matching the version of my installed binary. Maybe I should just wait for the beta release today, and give that a go."}], "tags": [], "owner": {"reputation": 36, "user_id": 4560110, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/98f3bd9a36ed4a29744beb693298d573?s=128&d=identicon&r=PG&f=1", "display_name": "Akaahn", "link": "https://stackoverflow.com/users/4560110/akaahn"}, "is_accepted": false, "score": 0, "last_activity_date": 1428021118, "last_edit_date": 1428021118, "creation_date": 1427928350, "answer_id": 29402146, "question_id": 29397360, "link": "https://stackoverflow.com/questions/29397360/how-can-i-build-just-the-core-libraries-libstd-libcore-from-source-with/29402146#29402146", "title": "How can I build just the core libraries (libstd, libcore, ...) from source, without building the whole compiler toolchain?", "body": "<p>Can't say I'm 100% sure, but something like this might work.</p>\n\n<p>Run:</p>\n\n<pre><code>rustc -v --version\n</code></pre>\n\n<p>Make a note of the commit-hash, then navigate to your rust src folder and run:</p>\n\n<pre><code>git checkout *your commit-hash*\n</code></pre>\n\n<p>Finally compile with:</p>\n\n<pre><code>rustc -O --target=arm-unknown-linux-gnueabihf rust/src/libstd/lib.rs\n</code></pre>\n\n<p>This should compile the library to your current working directory.</p>\n\n<p>See <a href=\"http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/\" rel=\"nofollow\">http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/</a> for the original, and a more detailed explanation.</p>\n"}], "owner": {"reputation": 373, "user_id": 4180673, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/a22c11306f7c2432070b501aefe94645?s=128&d=identicon&r=PG", "display_name": "ruabmbua", "link": "https://stackoverflow.com/users/4180673/ruabmbua"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 905, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1428021118, "creation_date": 1427910166, "last_edit_date": 1427910977, "question_id": 29397360, "link": "https://stackoverflow.com/questions/29397360/how-can-i-build-just-the-core-libraries-libstd-libcore-from-source-with", "title": "How can I build just the core libraries (libstd, libcore, ...) from source, without building the whole compiler toolchain?", "body": "<p>My current work flow requires me to rebuild the Rust compiler nearly every day to get the \"standard crates\" like <code>libstd</code> for another target platform (<code>arm-unknown-linux-gnueabihf</code>).</p>\n\n<p>This is not ideal. I already use the nightly compiler, which is able to target the ARM platform, but it does not include the standard libraries for ARM, but only for my host machines platform.</p>\n\n<p>How can I build just the libraries from source, without building the whole compiler toolchain with 3 compiler stages, llvm, jemalloc, etc...?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1427891394, "post_id": 29390493, "comment_id": 46958820, "body": "Both of your <code>get_list</code> examples need to take <code>self</code> by <code>&amp;mut</code>, otherwise you cannot modify the <code>list</code> field"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427894041, "post_id": 29390585, "comment_id": 46960552, "body": "Please provide more than just a link for an answer. Explain why this does what you need."}], "tags": [], "owner": {"reputation": 135, "user_id": 484582, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/08f92cb5ad43d93785f49f1c732245f7?s=128&d=identicon&r=PG", "display_name": "JIoJIaJIu", "link": "https://stackoverflow.com/users/484582/jiojiajiu"}, "is_accepted": false, "score": -1, "last_activity_date": 1427890559, "creation_date": 1427890559, "answer_id": 29390585, "question_id": 29390493, "link": "https://stackoverflow.com/questions/29390493/how-do-i-automatically-clear-an-attribute-in-a-struct-when-it-is-moved/29390585#29390585", "title": "How do I automatically clear an attribute in a struct when it is moved?", "body": "<p>From #rust IRC</p>\n\n<p>&lt; theme> jiojiajiu, <a href=\"http://doc.rust-lang.org/nightly/std/mem/fn.replace.html\" rel=\"nofollow\">http://doc.rust-lang.org/nightly/std/mem/fn.replace.html</a></p>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 2, "last_activity_date": 1427965539, "last_edit_date": 1427965539, "creation_date": 1427894206, "answer_id": 29391881, "question_id": 29390493, "link": "https://stackoverflow.com/questions/29390493/how-do-i-automatically-clear-an-attribute-in-a-struct-when-it-is-moved/29391881#29391881", "title": "How do I automatically clear an attribute in a struct when it is moved?", "body": "<p>Here is the solution, you can test on Rust playground (sadly share button doesn't work for me atm).</p>\n\n<pre><code>use std::mem;\n\n#[derive(Debug)]\nstruct Test {\n   list: Vec&lt;u64&gt;\n}\n\nimpl Test {\n\n    fn get_list(&amp;mut self) -&gt; Vec&lt;u64&gt; {\n       let repl = mem::replace(&amp;mut self.list, Vec::new());\n       repl\n    }\n\n}\n\nfn main() {\n    let mut r = Test {\n       list : vec![1,2,3]\n    };\n    print!(\"r : {:?} \", r);\n    print!(\"replace : {:?} \", r.get_list());\n    print!(\"r : {:?} \", r);\n}\n</code></pre>\n\n<p>You just need to run <code>mem::replace</code>(<a href=\"http://doc.rust-lang.org/nightly/std/mem/fn.replace.html\" rel=\"nofollow\">docs</a>) on a mutable value and replace it with a value that will be moved in its place. In this case our destination is <code>self.list</code> and value we are replacing it is a blank <code>Vec</code>. </p>\n\n<p>Things to note:</p>\n\n<ul>\n<li>Field <code>self.list</code> of Test, needs to be taken as <code>&amp;mut self.list</code>. </li>\n<li>Previous change implies that <code>self</code> should be mutable as well.</li>\n<li><strong>Second parameter of replace is moved</strong>. That means it won't be available for further after this call. What this usually means, you either pass it a Vec constructor (e.g. <code>Vec::new()</code>) or clone of value that's replacing.</li>\n</ul>\n"}], "owner": {"reputation": 135, "user_id": 484582, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/08f92cb5ad43d93785f49f1c732245f7?s=128&d=identicon&r=PG", "display_name": "JIoJIaJIu", "link": "https://stackoverflow.com/users/484582/jiojiajiu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 29391881, "answer_count": 2, "score": 1, "last_activity_date": 1427965539, "creation_date": 1427890330, "last_edit_date": 1427894138, "question_id": 29390493, "link": "https://stackoverflow.com/questions/29390493/how-do-i-automatically-clear-an-attribute-in-a-struct-when-it-is-moved", "title": "How do I automatically clear an attribute in a struct when it is moved?", "body": "<p>I have a struct</p>\n\n<pre><code>struct Test {\n    list: Vec&lt;u64&gt;\n}\n</code></pre>\n\n<p>and method in which I would like to get vector and erase list field to empty Vec</p>\n\n<pre><code>fn get_list(&amp;self) -&gt; Vec&lt;u64&gt; {\n    let list = Vec::new();\n    for item in self.list.drain() {\n        list.push(item);\n    }\n    list\n}\n</code></pre>\n\n<p>It there another approach for doing it? Something like autoreinit field on moving value, for example:</p>\n\n<pre><code>fn get_list(&amp;self) -&gt; ???&lt;Vec&lt;u64&gt;&gt; {\n    self.list\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427836528, "post_id": 29378295, "comment_id": 46937501, "body": "Welcome to Stack Overflow! It&#39;s going to be <i>very</i> difficult to help you as we can&#39;t compile your code to get the same error! Please read about creating a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>. In this case, it needs to produce the same error you are seeing. Ideally, you&#39;d have something that works on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">playpen</a>, but that might be difficult if you are using external crates. Just try to make the problem as <b>small</b> as possible!"}, {"owner": {"reputation": 33, "user_id": 3435332, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RZ9PC.jpg?s=128&g=1", "display_name": "Vitaliy", "link": "https://stackoverflow.com/users/3435332/vitaliy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427837893, "post_id": 29378295, "comment_id": 46938136, "body": "thanks for reply, add link to play.rust-lang.org. I&#39;m thought it&#39;s more theoretical problem"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427849911, "post_id": 29378295, "comment_id": 46941817, "body": "<code>foo.deref()</code> is better written <code>&amp;*foo</code> in general. You also often won\u2019t need the <code>&amp;*</code> at all, e.g. method calls do autoderef and autoref."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 10, "last_activity_date": 1427849648, "creation_date": 1427849648, "answer_id": 29381101, "question_id": 29378295, "link": "https://stackoverflow.com/questions/29378295/how-can-i-force-a-value-to-be-moved-from-an-inner-scope-to-an-outer-instead-of-b/29381101#29381101", "title": "How can I force a value to be moved from an inner scope to an outer instead of borrowing?", "body": "<p>Let\u2019s reduce your code to a truly minimal example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a = {\n        let b = 42;\n        &amp;b\n    };\n}\n</code></pre>\n\n<p>For this is what your case is boiling down to: trying to take a reference to something and storing that reference after the original object has passed out of scope.</p>\n\n<p>There are two main ways of dealing with this:</p>\n\n<ol>\n<li><p>Change the scope of the variable that you are taking a reference to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let b;\n    let a = {\n        b = 42;\n        &amp;b\n    };\n}\n</code></pre>\n\n<p>So long as you are not dealing with crossing function boundaries (that is, returning a reference to something inside the function) or certain combinations with loop boundaries, this is typically the best solution.</p></li>\n<li><p>Don\u2019t take a reference, but rather do what processing you wish to do with it at the time:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a = {\n        let b = 42;\n        b.clone()\n    };\n}\n</code></pre>\n\n<p>In your particular case, that could be turning the <code>&amp;[u8]</code> into a <code>Vec&lt;u8&gt;</code>, which can be written <code>Vec::from(slice)</code>. Of course, in your specific example you would still need to worry about storing the vector somewhere as in the first way, or else using <code>Cow&lt;[u8]&gt;</code> for the whole thing.</p></li>\n</ol>\n\n<p>There is an article that I have written which among other things considers these questions which you might find helpful: <a href=\"http://chrismorgan.info/blog/rust-fizzbuzz.html\" rel=\"noreferrer\">http://chrismorgan.info/blog/rust-fizzbuzz.html</a>. It deals with <code>String</code> and <code>str</code> where you are dealing more with <code>Vec&lt;u8&gt;</code>/<code>Bytes</code> and <code>[u8]</code>, but the concepts are very much the same.</p>\n"}], "owner": {"reputation": 33, "user_id": 3435332, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/RZ9PC.jpg?s=128&g=1", "display_name": "Vitaliy", "link": "https://stackoverflow.com/users/3435332/vitaliy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1722, "favorite_count": 2, "accepted_answer_id": 29381101, "answer_count": 1, "score": 2, "last_activity_date": 1427849648, "creation_date": 1427834995, "last_edit_date": 1427839493, "question_id": 29378295, "link": "https://stackoverflow.com/questions/29378295/how-can-i-force-a-value-to-be-moved-from-an-inner-scope-to-an-outer-instead-of-b", "title": "How can I force a value to be moved from an inner scope to an outer instead of borrowing?", "body": "<p>I'm newbie in Rust. How can I force a value to be moved from an inner scope to an outer instead of borrowing?</p>\n\n<pre><code>let mut r_buf = BufReader::new(file.unwrap());\nlet mut eof = false;\n\nwhile !eof {\n    let piece = r_buf.fill_buf();\n    if piece.is_ok() {\n        let mut piece = piece.unwrap();\n        let piece_len = piece.len();\n\n        if opt.compress {\n            let deflated = deflate_bytes(piece);\n            if deflated.is_none() {\n                panic!(format!(\"Cant deflate file {}\", path.to_str().unwrap_or(\"\")));\n            }\n\n            let deflate_unwrapped = deflated.unwrap();\n            let deflate_deref = deflate_unwrapped.deref();\n            piece = deflate_deref;\n        }\n        /* bf: &amp;mut BufStream&lt;File&gt;*/\n        let w = bf.write(piece);\n\n        if w.is_ok() {\n            written_bytes = w.unwrap();\n        }\n</code></pre>\n\n<p>I can't move <code>&amp;[u8]</code> from <code>deflate_deref</code> to <code>piece</code>. I've tried <code>Vec&lt;u8&gt;</code> and <code>Box&lt;&amp;[u8]&gt;</code>. I have an error \"deflate_unwrapped does not live long enough\"... I can't operate by <code>[u8]</code> type because it doesn't have an exact size in compile type, while references I can only borrow...</p>\n\n<p>In this case must I use something specific or rewrite this code?</p>\n\n<p>Playground link <a href=\"http://is.gd/u8wfm7\" rel=\"nofollow\">http://is.gd/u8wfm7</a></p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1582724301, "post_id": 29378113, "comment_id": 106875472, "body": "The <a href=\"https://stackoverflow.com/a/39374515/155423\">currently accepted answer</a> is not the best solution now. Consider accepting a different answer with a more up-to-date solution."}], "answers": [{"comments": [{"owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "edited": false, "score": 1, "creation_date": 1472702023, "post_id": 29380478, "comment_id": 65860484, "body": "If you don&#39;t want to show re-exports, you will want to add <code>--passes strip-priv-imports</code> too."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1582721825, "last_edit_date": 1582721825, "creation_date": 1427845680, "answer_id": 29380478, "question_id": 29378113, "link": "https://stackoverflow.com/questions/29378113/how-can-i-include-private-modules-when-generating-documentation-via-cargo/29380478#29380478", "title": "How can I include private modules when generating documentation via Cargo?", "body": "<h1><a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1410-2020-01-30\" rel=\"noreferrer\">Rust 1.41</a></h1>\n\n<p>Documentation for binaries includes private items from the binary crate by default.</p>\n\n<h1><a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1290-2018-09-13\" rel=\"noreferrer\">Rust 1.29</a></h1>\n\n<p>You can now use <code>cargo doc --document-private-items</code></p>\n\n<h1>Previous versions</h1>\n\n<p>You may not be able to do it with Cargo today, there is a workaround if you use rustdoc directly.</p>\n\n<p>Run <code>cargo doc -v</code> and make a note of the rustdoc command it runs:</p>\n\n<pre><code>$ cargo doc -v\n   Compiling docz v0.0.1 (file:///private/tmp/docz)\n     Running `rustdoc src/lib.rs -o /private/tmp/docz/target/doc --crate-name docz -L dependency=/private/tmp/docz/target/debug -L dependency=/private/tmp/docz/target/debug/deps`\n</code></pre>\n\n<p>Then, add <code>--no-defaults --passes strip-hidden --passes collapse-docs --passes unindent-comments</code> to the command:</p>\n\n<pre><code>rustdoc src/lib.rs -o /private/tmp/docz/target/doc --crate-name docz \\\n    -L dependency=/private/tmp/docz/target/debug \\\n    -L dependency=/private/tmp/docz/target/debug/deps \\\n    --no-defaults \\\n    --passes strip-hidden --passes collapse-docs --passes unindent-comments\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3719, "user_id": 2550406, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GhBMm.png?s=128&g=1", "display_name": "lucidbrot", "link": "https://stackoverflow.com/users/2550406/lucidbrot"}, "edited": false, "score": 0, "creation_date": 1568577875, "post_id": 39374515, "comment_id": 102308595, "body": "<code>warning: the &#39;no-defaults&#39; flag is considered deprecated</code>. Same for <code>passes</code>. The warnings recommend <code>--document-private-items</code>"}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 8, "last_activity_date": 1473263815, "creation_date": 1473263815, "answer_id": 39374515, "question_id": 29378113, "link": "https://stackoverflow.com/questions/29378113/how-can-i-include-private-modules-when-generating-documentation-via-cargo/39374515#39374515", "title": "How can I include private modules when generating documentation via Cargo?", "body": "<p>This can be done by passing arguments to rustdoc, after <code>--</code>, eg.</p>\n\n<pre><code>cargo rustdoc -- \\\n    --no-defaults \\\n    --passes strip-hidden \\\n    --passes collapse-docs \\\n    --passes unindent-comments \\\n    --passes strip-priv-imports\n</code></pre>\n\n<p>Based on @Shepmaster's answer, no need for manual copy-pasting.</p>\n"}, {"comments": [{"owner": {"reputation": 750, "user_id": 2350060, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7cf94c7218b74a36b40b1241e5c6649f?s=128&d=identicon&r=PG", "display_name": "Alexander Batischev", "link": "https://stackoverflow.com/users/2350060/alexander-batischev"}, "edited": false, "score": 4, "creation_date": 1551120747, "post_id": 49202790, "comment_id": 96515833, "body": "<code>rustdoc</code> requires running against an actual package, so it won&#39;t work with <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-workspace-section\" rel=\"nofollow noreferrer\">a virtual manifest</a>. It&#39;s better to use <code>cargo doc --document-private-items</code>, which works with virtual manifests too."}], "tags": [], "owner": {"reputation": 15897, "user_id": 11722, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/b0124a12d060a036500e83ec44972492?s=128&d=identicon&r=PG", "display_name": "Zitrax", "link": "https://stackoverflow.com/users/11722/zitrax"}, "is_accepted": false, "score": 8, "last_activity_date": 1520632710, "creation_date": 1520632710, "answer_id": 49202790, "question_id": 29378113, "link": "https://stackoverflow.com/questions/29378113/how-can-i-include-private-modules-when-generating-documentation-via-cargo/49202790#49202790", "title": "How can I include private modules when generating documentation via Cargo?", "body": "<p>This is now simpler, just use:</p>\n\n<pre><code>cargo rustdoc -- --document-private-items\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 128, "user_id": 4628160, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-DaFIqocIXWM/AAAAAAAAAAI/AAAAAAAAAC0/ASUK05rgsLw/photo.jpg?sz=128", "display_name": "Thomas Giesel", "link": "https://stackoverflow.com/users/4628160/thomas-giesel"}, "edited": false, "score": 4, "creation_date": 1577895601, "post_id": 57192971, "comment_id": 105276639, "body": "You can also add a <code>.cargo&#47;config</code> file to you project if you want it to be default: <code>[build] rustdocflags = [&quot;--document-private-items&quot;]</code>"}], "tags": [], "owner": {"reputation": 32543, "user_id": 528726, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/6307569a99dd77fff0463032051d7e39?s=128&d=identicon&r=PG", "display_name": "joelparkerhenderson", "link": "https://stackoverflow.com/users/528726/joelparkerhenderson"}, "is_accepted": false, "score": 8, "last_activity_date": 1564016539, "creation_date": 1564016539, "answer_id": 57192971, "question_id": 29378113, "link": "https://stackoverflow.com/questions/29378113/how-can-i-include-private-modules-when-generating-documentation-via-cargo/57192971#57192971", "title": "How can I include private modules when generating documentation via Cargo?", "body": "<p>Use cargo to document private items:</p>\n\n<pre><code>cargo doc --document-private-items\n</code></pre>\n"}], "owner": {"reputation": 449, "user_id": 1422441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffb37250909dac913e7ade723b670002?s=128&d=identicon&r=PG", "display_name": "lthms", "link": "https://stackoverflow.com/users/1422441/lthms"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2207, "favorite_count": 3, "accepted_answer_id": 29380478, "answer_count": 4, "score": 16, "last_activity_date": 1582721825, "creation_date": 1427834321, "last_edit_date": 1427834522, "question_id": 29378113, "link": "https://stackoverflow.com/questions/29378113/how-can-i-include-private-modules-when-generating-documentation-via-cargo", "title": "How can I include private modules when generating documentation via Cargo?", "body": "<p>I'm currently working on a project with Rust and Cargo. It works well, but I encounter a little issue: for code reuse, most of my project is inside a lib crate. In this crate, a lot of things is private. So when I do <code>cargo doc</code>, I just have documentation for public, exported stuff... which is actually great, because it's easy to see what is exported and what is not.</p>\n\n<p>But I have to admit: I miss a complete documentation of the whole project, for development purpose...</p>\n"}, {"tags": ["compiler-errors", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1427863960, "post_id": 29380729, "comment_id": 46945035, "body": "Thanks. Unfortunately <code>&amp;&amp;str</code> won&#39;t help, because the actual string has the necessary lifetime, but the reference to that reference does not. So I&#39;ll have to wrap it in something. It would be nice if I could wrap it in something. It would be nice if it could be done without extra allocation, but I fear it won&#39;t be."}, {"owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1427865227, "post_id": 29380729, "comment_id": 46945357, "body": "... thinking about it more, the inner reference is a temporary and stays around until end of statement, so in the resulting <code>&amp;&#39;a&amp;str</code> the <code>&#39;a</code> should be long enough to be returned. Now I just have to find whether I need to fiddle with lifetime in the <code>impl Trait for &amp;str</code> to make that work."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1427847233, "creation_date": 1427847233, "answer_id": 29380729, "question_id": 29376981, "link": "https://stackoverflow.com/questions/29376981/spurious-requirement-for-stdmarkersized/29380729#29380729", "title": "Spurious requirement for std::marker::Sized", "body": "<p>The error is not spurious.</p>\n\n<p>The raw representation of a trait object is this (<code>std::raw::TraitObject</code>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\npub struct TraitObject {\n    pub data: *mut (),\n    pub vtable: *mut (),\n}\n</code></pre>\n\n<p>The actual data of the object is behind a single pointer.</p>\n\n<p>But how about the dynamically sized types? Taking a slice (<code>&amp;[T]</code>) as an example, they are of this form:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\npub struct Slice&lt;T&gt; {\n    pub data: *const T,\n    pub len: usize,\n}\n</code></pre>\n\n<p>This reference is <em>two</em> words: a pointer to the start of the slice <em>and the number of elements in the slice</em>.</p>\n\n<p>The size of a <code>&amp;T</code> is thus <em>not actually constant</em>. If <code>T</code> is <code>Sized</code>, <code>&amp;T</code> and <code>Box&lt;T&gt;</code> will be one word, but if <code>T</code> is not <code>Sized</code>, <code>&amp;T</code> and <code>Box&lt;T&gt;</code> will be <em>two</em> words.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let word = std::mem::size_of::&lt;usize&gt;();\n\n// References to sized types: one word.\nassert_eq!(std::mem::size_of::&lt;&amp;()&gt;(), 1 * word);\nassert_eq!(std::mem::size_of::&lt;&amp;u8&gt;(), 1 * word);\nassert_eq!(std::mem::size_of::&lt;&amp;String&gt;(), 1 * word);\n\n// References to unsized types: two words.\nassert_eq!(std::mem::size_of::&lt;&amp;[u8]&gt;(), 2 * word);\nassert_eq!(std::mem::size_of::&lt;&amp;str&gt;(), 2 * word);\nassert_eq!(std::mem::size_of::&lt;&amp;std::path::Path&gt;(), 2 * word);\n</code></pre>\n\n<p>What is the impact of this? Well, as mentioned earlier, the definition of trait objects requires that the data pointer be only one word long. To store a dynamically sized type would require <em>two</em> words there; I haven\u2019t given much thought to the practicalities of whether it would be <em>possible</em> to inflate all trait objects to have two words for data (one of which would be redundant in case of sized objects), so it might or it might not be, but the language has made the decision not to support trait objects of dynamically sized types.</p>\n\n<p>Therefore: if you wish to create a trait object, you will need to do it of a sized type, such as <code>&amp;str</code>, rather than a dynamically sized type such as <code>str</code>. That means things like <code>(x: &amp;&amp;str) as &amp;std::fmt::Display;</code>:</p>\n\n<pre><code>arg(\"foo\", &amp;\"bar\");\n</code></pre>\n"}], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1666, "favorite_count": 0, "accepted_answer_id": 29380729, "answer_count": 1, "score": 4, "last_activity_date": 1427847233, "creation_date": 1427830354, "last_edit_date": 1427833399, "question_id": 29376981, "link": "https://stackoverflow.com/questions/29376981/spurious-requirement-for-stdmarkersized", "title": "Spurious requirement for std::marker::Sized", "body": "<p>Update: This simpler code (<a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Afmt%3A%3ADisplay%3B%0A%0Apub%20fn%20arg(a%3A%20%26str%2C%20b%3A%20%26Display)%20%7B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20arg(%22foo%22%2C%20%22bar%22)%3B%0A%7D%0A\" rel=\"nofollow\">play</a>) exhibits the same symptoms:</p>\n\n<pre><code>use std::fmt::Display;\n\npub fn arg(a: &amp;str, b: &amp;Display) {\n}\n\nfn main() {\n    arg(\"foo\", \"bar\");\n}\n</code></pre>\n\n<p>Gives error:</p>\n\n<pre><code>&lt;anon&gt;:7:16: 7:21 error: the trait `core::marker::Sized` is not implemented for the type `str` [E0277]\n&lt;anon&gt;:7     arg(\"foo\", \"bar\");\n                        ^~~~~\n&lt;anon&gt;:7:16: 7:21 note: `str` does not have a constant size known at compile-time\n&lt;anon&gt;:7     arg(\"foo\", \"bar\");\n                        ^~~~~\n</code></pre>\n\n<p>But I don't see any reason to require size here. The <code>a</code> and <code>b</code> are treated the same, they are the same type, and there is no problem with <code>a</code>. So</p>\n\n<ul>\n<li>why does it have problem with <code>b</code>, and</li>\n<li>how do I tell it that Trait is not expected to have size known.</li>\n</ul>\n\n<p>In fact, it's a trait type, it never has type known no matter what the underlying type is. So why does it want size?</p>\n\n<p>Oh, and I should not forget: In the actual use-case I need dynamic polymorphism. The function (method) will be chained with arguments of different actual types and the references stored (see the original exhibit below), so I <em>can't</em> convert it to <code>T: Trait + ?Sized</code>.</p>\n\n<hr>\n\n<p>Original exhibit:</p>\n\n<p>I have some code like the following (<a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Acollections%3A%3AHashMap%3B%0Ause%20std%3A%3Amarker%3A%3AMarkerTrait%3B%0A%0Apub%20trait%20Trait%20%3A%20MarkerTrait%20%7B%7D%0A%0Aimpl%20Trait%20for%20str%20%7B%7D%0A%0Apub%20struct%20Struct%3C&#39;a%3E%20%7B%0A%20%20%20%20args%3A%20HashMap%3C%26&#39;a%20str%2C%20%26&#39;a%20Trait%3E%2C%0A%7D%0A%0Aimpl%3C&#39;a%3E%20Struct%3C&#39;a%3E%20%7B%0A%20%20%20%20pub%20fn%20new()%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20Struct%20%7B%20args%3A%20HashMap%3A%3Anew()%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20pub%20fn%20arg(mut%20self%2C%20key%3A%20%26&#39;a%20str%2C%20value%3A%20%26&#39;a%20Trait)%20-%3E%20Struct%3C&#39;a%3E%20%7B%0A%20%20%20%20%20%20%20%20self.args.insert(key%2C%20value)%3B%0A%20%20%20%20%20%20%20%20return%20self%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20Struct%3A%3Anew().arg(%22foo%22%2C%20%22bar%22)%3B%0A%7D\" rel=\"nofollow\">see also on play.rust-lang.org</a>):</p>\n\n<pre><code>pub trait Trait { /* some methods */ }\n\nimpl Trait for str { /* some implementation */ }\n\npub struct Struct&lt;'a&gt; {\n    args: HashMap&lt;&amp;'a str, &amp;'a Trait&gt;,\n}\n\nimpl&lt;'a&gt; Struct&lt;'a&gt; {\n    pub fn new() -&gt; Self {\n        Struct { args: HashMap::new() }\n    }\n\n    pub fn arg(mut self, key: &amp;'a str, value: &amp;'a Trait) -&gt; Struct&lt;'a&gt; {\n        self.args.insert(key, value);\n        return self;\n    }\n\n    // of course there is something to process the collected arguments too\n}\n\nfn main() {\n    Struct::new().arg(\"foo\", \"bar\");\n}\n</code></pre>\n\n<p>And this gives me error:</p>\n\n<pre><code>test.rs:32:30: 32:35 error: the trait `core::marker::Sized` is not implemented for the type `str` [E0277]\ntest.rs:32     Struct::new().arg(\"foo\", \"bar\");\n                                             ^~~~~\ntest.rs:32:30: 32:35 note: `str` does not have a constant size known at compile-time\ntest.rs:32     Struct::new().arg(\"foo\", \"bar\");\n</code></pre>\n\n<hr>\n"}, {"tags": ["static-libraries", "rust", "rust-cargo", "c-api"], "comments": [{"owner": {"reputation": 3137, "user_id": 993133, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22a7d85888b842112620dfa3f59668f7?s=128&d=identicon&r=PG", "display_name": "pd40", "link": "https://stackoverflow.com/users/993133/pd40"}, "edited": false, "score": 0, "creation_date": 1427844593, "post_id": 29372901, "comment_id": 46940362, "body": "You could take a look at <a href=\"http://doc.rust-lang.org/nightly/book/ffi.html#callbacks-from-c-code-to-rust-functions\" rel=\"nofollow noreferrer\">callbacks-from-c-code-to-rust-functions</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1427880087, "post_id": 29381149, "comment_id": 46952263, "body": "The problem at hand is, the thing guys at html5ever are trying to do is to have it&#39;s C-API created by Rust, so they can get rid of the Makefile whose only unique task is, creating C_API. Basically, move to Cargo, remove Makefile."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1427880131, "post_id": 29381149, "comment_id": 46952289, "body": "I&#39;m surprised that Cargo doesn&#39;t allow some kind of CLI escape hatch."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1427850016, "creation_date": 1427850016, "answer_id": 29381149, "question_id": 29372901, "link": "https://stackoverflow.com/questions/29372901/is-there-a-way-to-create-c-library-with-cargo/29381149#29381149", "title": "Is there a way to create C library with Cargo?", "body": "<blockquote>\n  <p>Is there any way Cargo can create this C library for me? </p>\n</blockquote>\n\n<p>Cargo does not currently have this feature.</p>\n\n<blockquote>\n  <p>I have a crate (e.g. html5ever), and I want Cargo to create a C library based on C-API for that crate.</p>\n</blockquote>\n\n<p>Is there a reason that it is in C? C can call into Rust code directly, you could just use <code>html5ever</code> as it exists.</p>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 0, "last_activity_date": 1429522245, "creation_date": 1429522245, "answer_id": 29744050, "question_id": 29372901, "link": "https://stackoverflow.com/questions/29372901/is-there-a-way-to-create-c-library-with-cargo/29744050#29744050", "title": "Is there a way to create C library with Cargo?", "body": "<p>A way to solve this problem is to create a special crate which stores your  C API. For example if your library is called <code>foo</code>, then have inside your main directory another folder alongside <code>src</code>/<code>tests</code> called <code>capi</code>, which will store a special crate <code>foo_capi</code> for C API.</p>\n\n<pre><code>  foo\n   |\n   +--src\n   | \n   +--test\n   |\n   +--capi\n        | \n        +--include \n        |\n        +--src \n        |\n        Cargo.toml\n</code></pre>\n\n<p><code>include</code> folder contains header files for C.</p>\n\n<p><code>src</code> contains the Rust files which are exported into C.</p>\n\n<p>The Cargo manifest should be statically linked and have a dependency on the project foo. For example check out this <a href=\"https://github.com/servo/html5ever/blob/master/capi/Cargo.toml\" rel=\"nofollow\">Cargo.toml</a> used in html5ever.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1177, "favorite_count": 2, "accepted_answer_id": 29744050, "answer_count": 2, "score": 2, "last_activity_date": 1429522245, "creation_date": 1427817008, "last_edit_date": 1427818096, "question_id": 29372901, "link": "https://stackoverflow.com/questions/29372901/is-there-a-way-to-create-c-library-with-cargo", "title": "Is there a way to create C library with Cargo?", "body": "<p>I need to create a (static) C library that binds to existing crate. Is there any way Cargo can create this C library for me? </p>\n\n<p>I have a crate (e.g. html5ever), and I want Cargo to create a C library based on C-API for that crate.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 71, "user_id": 4734315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9c2d2c35d90daeff2458665cfcac07d?s=128&d=identicon&r=PG&f=1", "display_name": "VRW", "link": "https://stackoverflow.com/users/4734315/vrw"}, "edited": false, "score": 0, "creation_date": 1427815920, "post_id": 29372048, "comment_id": 46925671, "body": "Why can&#39;t it just infer Box&lt;Fn() -&gt; i32&gt; ?"}, {"owner": {"reputation": 71, "user_id": 4734315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9c2d2c35d90daeff2458665cfcac07d?s=128&d=identicon&r=PG&f=1", "display_name": "VRW", "link": "https://stackoverflow.com/users/4734315/vrw"}, "edited": false, "score": 0, "creation_date": 1427819325, "post_id": 29372048, "comment_id": 46927851, "body": "It turns out that each function has its own, distinct type <a href=\"http://stackoverflow.com/a/28151275/4734315\">stackoverflow.com/a/28151275/4734315</a> I am curious what was the reason for that decision."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 71, "user_id": 4734315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9c2d2c35d90daeff2458665cfcac07d?s=128&d=identicon&r=PG&f=1", "display_name": "VRW", "link": "https://stackoverflow.com/users/4734315/vrw"}, "edited": false, "score": 0, "creation_date": 1427822427, "post_id": 29372048, "comment_id": 46929754, "body": "@VRW that&#39;s what I meant by my first sentence: &quot;Each closure has an auto-generated, unique, anonymous type.&quot; Do you have a suggestion on how I could have worded it better?"}, {"owner": {"reputation": 71, "user_id": 4734315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9c2d2c35d90daeff2458665cfcac07d?s=128&d=identicon&r=PG&f=1", "display_name": "VRW", "link": "https://stackoverflow.com/users/4734315/vrw"}, "edited": false, "score": 0, "creation_date": 1427824464, "post_id": 29372048, "comment_id": 46930874, "body": "Did you mean that each function in Rust is a closure? That was not clear."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 71, "user_id": 4734315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9c2d2c35d90daeff2458665cfcac07d?s=128&d=identicon&r=PG&f=1", "display_name": "VRW", "link": "https://stackoverflow.com/users/4734315/vrw"}, "edited": false, "score": 0, "creation_date": 1427824607, "post_id": 29372048, "comment_id": 46930967, "body": "@VRW Ah, I see the distinction now. Functions and closures <b>both</b> have auto-generated, unique, anonymous types. However, since your question was about <i>closures</i>, I only mentioned that it applied to closures. The decision for functions to also have unique types was made at a separate point in time (more recently, IIRC)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1531799168, "last_edit_date": 1531799168, "creation_date": 1427814688, "answer_id": 29372048, "question_id": 29371914, "link": "https://stackoverflow.com/questions/29371914/what-is-the-inferred-type-of-a-vector-of-closures/29372048#29372048", "title": "What is the inferred type of a vector of closures?", "body": "<p>Each closure has an auto-generated, unique, anonymous type. As soon as you add the first closure to the vector, that is the type of all items in the vector. However, when you try to add the second closure, it has a different auto-generated, unique, anonymous type, and so you get the error listed.</p>\n\n<p>Closures are essentially <code>struct</code>s that are created by the compiler that implement one of the <code>Fn*</code> traits. The <code>struct</code> contains fields for all the variables captured by the closure, so it by definition needs to be unique, as each closure will capture different numbers and types of variables.</p>\n\n<blockquote>\n  <p>Why can't it just infer <code>Box&lt;Fn() -&gt; i32&gt;</code>?</p>\n</blockquote>\n\n<p>\"can't\" is a tough question to answer. It's <em>possible</em> that the compiler could iterate through all the traits of every type that is used to see if some intersection caused the code to compile, but that feels a bit magical to me. You could try opening a feature request or discussing it on one of the forums to see if there is general acceptance of such an idea.</p>\n\n<p>However, Rust does try to make things explicit, especially things that might involve performance. When you go from a concrete struct to a trait object, you are introducing indirection, which has the possibility of being slower.</p>\n\n<p>Right now, the <code>Fn*</code> traits work the same as a user-constructed trait:</p>\n\n<pre><code>trait MyTrait {\n    fn hello(&amp;self) {}\n}\n\nstruct MyStruct1;\nimpl MyTrait for MyStruct1 {}\n\nstruct MyStruct2;\nimpl MyTrait for MyStruct2 {}\n\nfn main() {\n    let mut things = vec![];\n    things.push(MyStruct1);\n    things.push(MyStruct2);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:14:17\n   |\n14 |     things.push(MyStruct2);\n   |                 ^^^^^^^^^ expected struct `MyStruct1`, found struct `MyStruct2`\n   |\n   = note: expected type `MyStruct1`\n              found type `MyStruct2`\n</code></pre>\n"}], "owner": {"reputation": 71, "user_id": 4734315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9c2d2c35d90daeff2458665cfcac07d?s=128&d=identicon&r=PG&f=1", "display_name": "VRW", "link": "https://stackoverflow.com/users/4734315/vrw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1865, "favorite_count": 1, "answer_count": 1, "score": 7, "last_activity_date": 1531799168, "creation_date": 1427814261, "last_edit_date": 1531799024, "question_id": 29371914, "link": "https://stackoverflow.com/questions/29371914/what-is-the-inferred-type-of-a-vector-of-closures", "title": "What is the inferred type of a vector of closures?", "body": "<p>I tried to create vector of closures:</p>\n\n<pre><code>fn main() {\n    let mut vec = Vec::new();\n\n    vec.push(Box::new(|| 10));\n    vec.push(Box::new(|| 20));\n\n    println!(\"{}\", vec[0]());\n    println!(\"{}\", vec[1]());\n}\n</code></pre>\n\n<p>That yielded the following error report:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:5:23\n  |\n5 |     vec.push(Box::new(|| 20));\n  |                       ^^^^^ expected closure, found a different closure\n  |\n  = note: expected type `[closure@src/main.rs:4:23: 4:28]`\n             found type `[closure@src/main.rs:5:23: 5:28]`\n  = note: no two closures, even if identical, have the same type\n  = help: consider boxing your closure and/or using it as a trait object\n</code></pre>\n\n<p>I fixed it by specifying the type explicitly:</p>\n\n<pre><code>let mut vec: Vec&lt;Box&lt;Fn() -&gt; i32&gt;&gt; = Vec::new();\n</code></pre>\n\n<p>What is the inferred type of <code>vec</code> and why is it that way?</p>\n"}, {"tags": ["c", "cocoa", "swift", "rust", "dylib"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1427814348, "post_id": 29366441, "comment_id": 46924603, "body": "As a word of caution, <a href=\"http://arewewebyet.com/\" rel=\"nofollow noreferrer\">Rust may not be the <i>best</i> choice for server-side</a> right <b>now</b>. However, it&#39;s certainly possible. Good luck!"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1427802257, "creation_date": 1427802257, "answer_id": 29367857, "question_id": 29366441, "link": "https://stackoverflow.com/questions/29366441/performance-implications-of-a-swift-program-calling-a-rust-library-compiled-as-a/29367857#29367857", "title": "Performance implications of a Swift program calling a Rust library compiled as a dylib?", "body": "<p>When using a Foreign Function Interface, I can see two major cost centers (performance-wise):</p>\n\n<ol>\n<li>Conversion: if you need to convert the data back and forth (either on one side or even worse on both sides)</li>\n<li>Lost optimization opportunity: no inlining, and thus lots of missed opportunities</li>\n</ol>\n\n<p>The latter can be recovered with a \"better\" toolchain, especially since in this case both languages compile down to LLVM IR, and I know it is an ambition for at least some Rust developers/users to manage this for Rust/C interaction, but I have never seen it yet.</p>\n\n<p>The former requires a careful design and even then it can be inevitable that some conversions will occur if you wish to use native compound types on either side (<code>String</code> being a prime candidate).</p>\n"}], "owner": {"reputation": 2377, "user_id": 3829874, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/x6jBb.jpg?s=128&g=1", "display_name": "Sam", "link": "https://stackoverflow.com/users/3829874/sam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 789, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1427802257, "creation_date": 1427797657, "question_id": 29366441, "link": "https://stackoverflow.com/questions/29366441/performance-implications-of-a-swift-program-calling-a-rust-library-compiled-as-a", "title": "Performance implications of a Swift program calling a Rust library compiled as a dylib?", "body": "<p>I am writing a OS X application in Swift and considering implementing a portion of my model code (MVC pov) in Rust in order to gain portability of usage on a web server (since Swift doesn't extend into the web server space).</p>\n\n<p>If I compile my Rust code as a dynamic library (.dylib) and follow certain guidelines, I understand that it will produce an external interface that will look like a typical \"C\" interface that Swift can then consume.</p>\n\n<p><strong>What would the performance implications be of Swift communicating with the dylib in this instance?</strong> Would they be any different to communicating with something written in C? The model component in the dylib can be assumed to be central to the application and hence the communication is anticipated to be \"chatty\".</p>\n\n<p>[If I were to code the whole thing in Swift, the model portion would have been contained in a separate framework/library which is very similar to a dylib in any event.]</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1427720963, "post_id": 29345708, "comment_id": 46879935, "body": "Are you sure you need to subtype Generator?"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 6, "last_activity_date": 1505218304, "last_edit_date": 1505218304, "creation_date": 1427721280, "answer_id": 29347205, "question_id": 29345708, "link": "https://stackoverflow.com/questions/29345708/matching-a-generic-parameter-to-an-associated-type-in-an-impl/29347205#29347205", "title": "Matching a generic parameter to an associated type in an impl", "body": "<p>You could get rid of the generic argument <code>B</code> and instead of constraining <code>B</code>, directly pass <code>A::Foo</code> as the second generic argument to <code>Baz</code>, but I'm not sure if your actual problem matches the simplified example you showed.</p>\n\n<pre><code>impl&lt;A: Generator&gt; Baz&lt;A, A::Foo&gt; {\n    fn addFoo(&amp;mut self)  {\n        self.vec.push(self.generator.generate());\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 15, "last_activity_date": 1505159625, "last_edit_date": 1505159625, "creation_date": 1427723276, "answer_id": 29347902, "question_id": 29345708, "link": "https://stackoverflow.com/questions/29345708/matching-a-generic-parameter-to-an-associated-type-in-an-impl/29347902#29347902", "title": "Matching a generic parameter to an associated type in an impl", "body": "<p>The trick is to only have a single generic parameter:</p>\n\n<pre><code>trait Generator {\n    type Foo;\n    fn generate(&amp;self) -&gt; Self::Foo;\n}\n\nstruct Baz&lt;G&gt;\nwhere\n    G: Generator,\n{\n    generator: G,\n    vec: Vec&lt;G::Foo&gt;,\n}\n\nimpl&lt;G&gt; Baz&lt;G&gt;\nwhere\n    G: Generator,\n{\n    fn add_foo(&amp;mut self) {\n        self.vec.push(self.generator.generate());\n    }\n}\n</code></pre>\n\n<p>Since the vector will contain <code>G::Foo</code>, we can actually just say that.</p>\n\n<p>The Rust style is <code>snake_case</code>, so I updated that as well as made the type parameter <code>G</code> to help the reader.</p>\n"}, {"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427788931, "post_id": 29348383, "comment_id": 46910504, "body": "I think this is the answer to what he asks for, not what he wants. Thanks, I didn&#39;t know about this syntax."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 25, "last_activity_date": 1505159583, "last_edit_date": 1505159583, "creation_date": 1427724485, "answer_id": 29348383, "question_id": 29345708, "link": "https://stackoverflow.com/questions/29345708/matching-a-generic-parameter-to-an-associated-type-in-an-impl/29348383#29348383", "title": "Matching a generic parameter to an associated type in an impl", "body": "<blockquote>\n  <p>I must explain to the compiler that <code>B</code> is the same as <code>A::Foo</code></p>\n</blockquote>\n\n<p>There is a special syntax for it:</p>\n\n<pre><code>impl&lt;A, B&gt; Baz&lt;A, B&gt;\nwhere\n    A: Generator&lt;Foo = B&gt;,\n{\n    fn add_foo(&amp;mut self) {\n        self.vec.push(self.generator.generate());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5875, "favorite_count": 5, "accepted_answer_id": 29348383, "answer_count": 3, "score": 22, "last_activity_date": 1505218304, "creation_date": 1427716839, "last_edit_date": 1505159527, "question_id": 29345708, "link": "https://stackoverflow.com/questions/29345708/matching-a-generic-parameter-to-an-associated-type-in-an-impl", "title": "Matching a generic parameter to an associated type in an impl", "body": "<p>I have a trait with an associated type and a generic struct::</p>\n\n<pre><code>trait Generator {\n    type Foo;\n    fn generate(&amp;self) -&gt; Self::Foo;\n}\n\nstruct Baz&lt;A, B&gt;\nwhere\n    A: Generator,\n{\n    generator: A, // will be some struct implementing Generator, but the exact type will vary\n    vec: Vec&lt;B&gt;,  // Each element will be A::Foo\n}\n</code></pre>\n\n<p>I want to <code>generate</code> and put it into my vector:</p>\n\n<pre><code>impl&lt;A: Generator, B&gt; Baz&lt;A, B&gt; {\n    fn addFoo(&amp;mut self) {\n        self.vec.push(self.generator.generate());\n    }\n}\n</code></pre>\n\n<p>Uh-oh!  Compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:16:27\n   |\n16 |             self.vec.push(self.generator.generate());\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found associated type\n   |\n   = note: expected type `B`\n              found type `&lt;A as Generator&gt;::Foo`\n</code></pre>\n\n<p>Fair enough, I must explain to the compiler that <code>B</code> is the same as <code>A::Foo</code>; let's try with <code>where</code>:</p>\n\n<pre><code>impl&lt;A: Generator, B&gt; Baz&lt;A, B&gt;\nwhere\n    A::Foo = B,\n{\n</code></pre>\n\n<p>which doesn't help:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: equality constraints are not yet supported in where clauses (#20041)\n  --&gt; src/main.rs:16:5\n   |\n16 |     A::Foo = B,\n   |     ^^^^^^^^^^\n</code></pre>\n\n<p>Hmm, no equals.  Maybe I can do this with the colon operator instead?</p>\n\n<pre><code>impl&lt;A: Generator, B&gt; Baz&lt;A, B&gt;\nwhere\n    B: A::Foo,\n{\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0405]: cannot find trait `Foo` in `A`\n  --&gt; src/main.rs:16:11\n   |\n16 |     B: A::Foo,\n   |           ^^^ not found in `A`\n</code></pre>\n\n<p>Nope, now it's complaining about <code>A</code>.  Maybe I should say <code>Generator</code>?</p>\n\n<pre><code>impl&lt;A: Generator, B&gt; Baz&lt;A, B&gt;\nwhere\n    B: Generator::Foo,\n{\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0404]: expected trait, found associated type `Generator::Foo`\n  --&gt; src/main.rs:16:8\n   |\n16 |     B: Generator::Foo,\n   |        ^^^^^^^^^^^^^^ not a trait\n</code></pre>\n\n<p>Well good work, compiler \u2014 it's <em>not</em> a trait; it's an associated type, but that doesn't tell me how to write a where clause that matches it.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 0, "creation_date": 1427710536, "post_id": 29343607, "comment_id": 46873549, "body": "If you see other problems with my code, please let me know it in the comments. I am currently learning rust. Or if you know how to format the time to <code>18.21s for sorting 10000000 integers</code>."}, {"owner": {"reputation": 6590, "user_id": 3945473, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bc7a840257b5609850cabee995c052c3?s=128&d=identicon&r=PG", "display_name": "M.P. Korstanje", "link": "https://stackoverflow.com/users/3945473/m-p-korstanje"}, "edited": false, "score": 0, "creation_date": 1427712059, "post_id": 29343607, "comment_id": 46874408, "body": "Rust is using merge sort. Python is using TimSort which is a highly optimized version of merge sort. Rusts version might just not be as efficient."}, {"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "reply_to_user": {"reputation": 6590, "user_id": 3945473, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bc7a840257b5609850cabee995c052c3?s=128&d=identicon&r=PG", "display_name": "M.P. Korstanje", "link": "https://stackoverflow.com/users/3945473/m-p-korstanje"}, "edited": false, "score": 0, "creation_date": 1427713069, "post_id": 29343607, "comment_id": 46874988, "body": "@mpkorstanje As far as I know TimSort is merge sort + insertion sort if not many elements have to be sorted. I think this should not have such a significant impact in a single (but large) sorting action."}, {"owner": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "edited": false, "score": 1, "creation_date": 1427719049, "post_id": 29343607, "comment_id": 46878648, "body": "I&#39;m voting to close this question as off-topic because it is about benchmarking unoptimized code."}, {"owner": {"reputation": 357695, "user_id": 560648, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/pBDFJ.jpg?s=128&g=1", "display_name": "Lightness Races in Orbit", "link": "https://stackoverflow.com/users/560648/lightness-races-in-orbit"}, "reply_to_user": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "edited": false, "score": 2, "creation_date": 1427719073, "post_id": 29343607, "comment_id": 46878664, "body": "@\u0440\u0430\u0439\u0442\u0444\u043e\u043b\u0434 That does not make it off-topic."}, {"owner": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "reply_to_user": {"reputation": 357695, "user_id": 560648, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/pBDFJ.jpg?s=128&g=1", "display_name": "Lightness Races in Orbit", "link": "https://stackoverflow.com/users/560648/lightness-races-in-orbit"}, "edited": false, "score": 0, "creation_date": 1427719174, "post_id": 29343607, "comment_id": 46878743, "body": "@LightnessRacesinOrbit we disagree once again."}, {"owner": {"reputation": 357695, "user_id": 560648, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/pBDFJ.jpg?s=128&g=1", "display_name": "Lightness Races in Orbit", "link": "https://stackoverflow.com/users/560648/lightness-races-in-orbit"}, "reply_to_user": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "edited": false, "score": 4, "creation_date": 1427719632, "post_id": 29343607, "comment_id": 46879052, "body": "@\u0440\u0430\u0439\u0442\u0444\u043e\u043b\u0434 Then you are incorrect. I refer you to the Stack Overflow Help Centre, where reasons that something is off-topic are enumerated. Technical design failing in a benchmark attempt is not one of them."}, {"owner": {"reputation": 1492, "user_id": 1299804, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb046a5fc70918c5f769865d4266c563?s=128&d=identicon&r=PG", "display_name": "Austin B", "link": "https://stackoverflow.com/users/1299804/austin-b"}, "edited": false, "score": 0, "creation_date": 1427766219, "post_id": 29343607, "comment_id": 46902727, "body": "@moose You can generate the array in one line with an iterator: <code>let mut array: Vec&lt;i32&gt; = rand::thread_rng().gen_iter().take(n).collect();</code>"}, {"owner": {"reputation": 1492, "user_id": 1299804, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb046a5fc70918c5f769865d4266c563?s=128&d=identicon&r=PG", "display_name": "Austin B", "link": "https://stackoverflow.com/users/1299804/austin-b"}, "edited": false, "score": 0, "creation_date": 1427766525, "post_id": 29343607, "comment_id": 46902809, "body": "@moose Additionally, you should use <code>rand::weak_rng()</code> instead of <code>rand::thread_rng()</code> to be more competitive with your other benchmarks."}, {"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "reply_to_user": {"reputation": 1492, "user_id": 1299804, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb046a5fc70918c5f769865d4266c563?s=128&d=identicon&r=PG", "display_name": "Austin B", "link": "https://stackoverflow.com/users/1299804/austin-b"}, "edited": false, "score": 0, "creation_date": 1427785955, "post_id": 29343607, "comment_id": 46909004, "body": "@AustinB The random number generation does not play a role. For this &quot;benchmark&quot; I am only interested in sorting. The random numbers were only created to have something to sort."}], "answers": [{"comments": [{"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 0, "creation_date": 1427714710, "post_id": 29344756, "comment_id": 46875979, "body": "Wow. Do you have any idea why optimizations make such a big difference? Do you know which kind of opimization makes this difference?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 2, "creation_date": 1427715105, "post_id": 29344756, "comment_id": 46876227, "body": "I must admit I do not know precisely, but my guess would be to look at inlining function calls. Mainly the inlining of the comparison operator."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 2, "creation_date": 1427723511, "post_id": 29344756, "comment_id": 46881765, "body": "@moose &quot;why optimizations make such a big difference&quot; - that&#39;s kind of the point of optimizations. ^_^ If they didn&#39;t make a big difference, they wouldn&#39;t be worth it! If you are truly curious, you can compile the code to the LLVM IR and inspect the differences between optimized and unoptimized."}, {"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427724252, "post_id": 29344756, "comment_id": 46882258, "body": "@Shepmaster It is desirable that optimizations improve things. This does not explain why it succeeds and how it does so."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 1, "creation_date": 1427725309, "post_id": 29344756, "comment_id": 46883033, "body": "@moose it wasn&#39;t really intended to explain, that&#39;s why it&#39;s just a comment. :-) It sounds like you have another good top-level question to ask!"}, {"owner": {"reputation": 1492, "user_id": 1299804, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb046a5fc70918c5f769865d4266c563?s=128&d=identicon&r=PG", "display_name": "Austin B", "link": "https://stackoverflow.com/users/1299804/austin-b"}, "reply_to_user": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 1, "creation_date": 1427765219, "post_id": 29344756, "comment_id": 46902503, "body": "@moose Perhaps you should take a look at <a href=\"https://en.wikipedia.org/wiki/Optimizing_compiler#Common_themes\" rel=\"nofollow noreferrer\">this Wikipedia article</a>. Rust lets its LLVM backend handle most of the optimization work, and LLVM may not necessarily perform all the optimizations listed there, but it&#39;d be a good place to start if you want to understand why optimization has such a great effect."}, {"owner": {"reputation": 1492, "user_id": 1299804, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb046a5fc70918c5f769865d4266c563?s=128&d=identicon&r=PG", "display_name": "Austin B", "link": "https://stackoverflow.com/users/1299804/austin-b"}, "reply_to_user": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 2, "creation_date": 1427765319, "post_id": 29344756, "comment_id": 46902522, "body": "@moose Additionally, the <code>--release</code> flag enables other performance improvements that are done in the compiler itself and applied to dependencies as well, like omitting debugging information and source code references from the final assembly, which can otherwise add significant bloat."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 11, "last_activity_date": 1427714098, "creation_date": 1427714098, "answer_id": 29344756, "question_id": 29343607, "link": "https://stackoverflow.com/questions/29343607/why-does-sorting-take-so-long/29344756#29344756", "title": "Why does sorting take so long?", "body": "<p>I Tried your code on my computer, running it with <code>cargo run</code> gives:</p>\n\n<pre><code>PT11.634640178S seconds for sorting 10000000 integers.\n</code></pre>\n\n<p>And with <code>cargo run --release</code> (turning on optimizations) gives:</p>\n\n<pre><code>PT1.004434739S seconds for sorting 10000000 integers.\n</code></pre>\n"}], "owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 376, "favorite_count": 0, "accepted_answer_id": 29344756, "answer_count": 1, "score": 4, "last_activity_date": 1427786082, "creation_date": 1427710488, "last_edit_date": 1427786082, "question_id": 29343607, "link": "https://stackoverflow.com/questions/29343607/why-does-sorting-take-so-long", "title": "Why does sorting take so long?", "body": "<p>I am currently trying to learn the syntax of Rust by solving little tasks. I compare the execution time as sanity-checks if I am using the language the right way.</p>\n\n<p>One task is:</p>\n\n<ol>\n<li>Create an array of 10000000 random integers in the range 0 - 1000000000</li>\n<li>Sort it and measure the time</li>\n<li>Print the time for sorting it</li>\n</ol>\n\n<p>I got the following results:</p>\n\n<pre><code>| #   | Language             | Speed  | LOCs |\n| --- | -------------------- | ------ | ---- |\n| 1   | C++ (with -O3)       | 1.36s  | 1    |\n| 2   | Python (with PyPy)   | 3.14s  | 1    |\n| 3   | Ruby                 | 5.04s  | 1    |\n| 4   | Go                   | 6.17s  | 1    |\n| 5   | C++                  | 7.95s  | 1    |\n| 6   | Python (with Cython) | 11.51s | 1    |\n| 7   | PHP                  | 36.28s | 1    |\n</code></pre>\n\n<p>Now I wrote the following Rust code:</p>\n\n<p><strong>rust.rs</strong></p>\n\n<pre><code>extern crate rand;\nextern crate time;\n\nuse rand::Rng;\nuse time::PreciseTime;\n\nfn main() {\n    let n = 10000000;\n    let mut array = Vec::new();\n\n    let mut rng = rand::thread_rng();\n    for _ in 0..n {\n        //array[i] = rng.gen::&lt;i32&gt;();\n        array.push(rng.gen::&lt;i32&gt;());\n    }\n\n    // Sort\n    let start = PreciseTime::now();\n    array.sort();\n    let end = PreciseTime::now();\n\n    println!(\"{} seconds for sorting {} integers.\", start.to(end), n);\n}\n</code></pre>\n\n<p>with the following <strong>Cargo.toml</strong>:</p>\n\n<pre><code>[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.0.1\"    # the current version, obeying semver\nauthors = [ \"you@example.com\" ]\n[[bin]]\nname = \"rust\"\npath = \"rust.rs\"\n[dependencies]\nrand = \"*\" # Or a specific version\ntime = \"*\"\n</code></pre>\n\n<p>I compiled it with <code>cargo run rust.rs</code> and ran the binary. It outputs</p>\n\n<pre><code>PT18.207168155S seconds for sorting 10000000 integers.\n</code></pre>\n\n<p>Note that this is much slower than Python. I guess I am doing something wrong. (The complete code of rust and of the other languages is <a href=\"https://github.com/MartinThoma/rosetta-code/tree/master/sorting/integer-array\" rel=\"nofollow\">here</a> if you are interested.)</p>\n\n<p>Why does it take so long to sort with Rust? How can I make it faster?</p>\n"}, {"tags": ["types", "iterator", "rust", "type-inference", "return-type"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427723633, "post_id": 29338638, "comment_id": 46881844, "body": "<i>&quot;I&#39;m trying to return an iterator, which has always been pretty hairy&quot;</i> - it&#39;s not returning an iterator that is complicated, it&#39;s usually returning an iterator adapter that contains a closure. Or returning a non-concrete type that implements <code>Iterator</code>, which doesn&#39;t have a known size."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1427727158, "post_id": 29338638, "comment_id": 46884336, "body": "Returning an iterator containing a closure is easy, if you don&#39;t mind boxing: <a href=\"http://is.gd/nBad0O\" rel=\"nofollow noreferrer\">is.gd/nBad0O</a> --- and once we get <a href=\"https://github.com/rust-lang/rfcs/pull/105\" rel=\"nofollow noreferrer\"><code>impl Trait</code> return types</a>, getting rid of the boxing is easy as well."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1427727309, "post_id": 29340565, "comment_id": 46884449, "body": "The code at the end doesn&#39;t work and if I fix the trivial syntax errors, <code>numbers</code> does not live long enough, unsurprisingly. It&#39;s probably better to take a <code>&amp;[i32]</code> instead of a <code>Vec&lt;i32&gt;</code>."}, {"owner": {"reputation": 53, "user_id": 4728171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d4b67f5426f221127e17674914bbddb0?s=128&d=identicon&r=PG&f=1", "display_name": "niconii", "link": "https://stackoverflow.com/users/4728171/niconii"}, "edited": false, "score": 0, "creation_date": 1427732712, "post_id": 29340565, "comment_id": 46888030, "body": "The explanation was helpful, and along with delnan&#39;s code solved my problem, so thanks."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1427700504, "creation_date": 1427700504, "answer_id": 29340565, "question_id": 29338638, "link": "https://stackoverflow.com/questions/29338638/what-is-the-iterator-type-returned-by-this-rust-function/29340565#29340565", "title": "What is the iterator type returned by this Rust function?", "body": "<p>Each closure has its own unique type (closures are sugar for a struct and a <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> implementation, as determined) and there is no way of writing out the type of a closure.</p>\n\n<p>One thing you can do is write it as a function and then cast it to a function pointer, as shown below.</p>\n\n<p>Another thing is using boxed functions (<code>Box&lt;Fn(&amp;&amp;i32) -&gt; bool&gt;</code>), like <code>Box::new(|&amp;&amp;n| n % 10 == 6)</code>. This involves a heap allocation and is in consequence not the most efficient, though in real life you don\u2019t need to worry about the performance differences.</p>\n\n<p>The generic attempt you made doesn\u2019t work because generics are about allowing the <em>caller</em> to specify a type, any type, where in this case you want the <em>callee</em> to specify a single unique type.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::Filter;\nuse std::slice::Iter;\n\nfn main() {\n    let numbers = vec![12i32, 26, 31, 56, 33, 16, 81];\n\n    for number in ends_in_six(numbers) {\n        println!(\"{}\", number);\n    }\n}\n\nfn ends_in_six(numbers: Vec&lt;i32&gt;) Filter&lt;Iter&lt;'a, i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {\n    fn filterer(&amp;&amp;n: &amp;&amp;i32) -&gt; bool { n % 10 == 6 }\n    numbers.iter().filter(filterer as fn(&amp;&amp;i32) -&gt; bool)\n}\n</code></pre>\n"}], "owner": {"reputation": 53, "user_id": 4728171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d4b67f5426f221127e17674914bbddb0?s=128&d=identicon&r=PG&f=1", "display_name": "niconii", "link": "https://stackoverflow.com/users/4728171/niconii"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1047, "favorite_count": 0, "accepted_answer_id": 29340565, "answer_count": 1, "score": 5, "last_activity_date": 1427700504, "creation_date": 1427691353, "last_edit_date": 1495542606, "question_id": 29338638, "link": "https://stackoverflow.com/questions/29338638/what-is-the-iterator-type-returned-by-this-rust-function", "title": "What is the iterator type returned by this Rust function?", "body": "\n\n<p>So I have this example code here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::Filter;\nuse std::slice::Iter;\n\nfn main() {\n    let numbers = vec![12i32, 26, 31, 56, 33, 16, 81];\n\n    for number in ends_in_six(numbers) {\n        println!(\"{}\", number);\n    }\n}\n\nfn ends_in_six(numbers: Vec&lt;i32&gt;) /* -&gt; ??? */ {\n    numbers.iter().filter(|&amp;n| *n % 10 == 6)\n}\n</code></pre>\n\n<p>I'm trying to return an iterator, which has always been pretty hairy in Rust from what I've gathered. Running the code <a href=\"http://is.gd/Cyg9OO\" rel=\"nofollow noreferrer\">here</a> gives me this error:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>&lt;anon&gt;:13:5: 13:45 error: mismatched types:\n expected `()`,\n    found `core::iter::Filter&lt;core::slice::Iter&lt;'_, i32&gt;, [closure &lt;anon&gt;:13:27: 13:44]&gt;`\n(expected (),\n    found struct `core::iter::Filter`) [E0308]\n&lt;anon&gt;:13     numbers.iter().filter(|&amp;n| *n % 10 == 6)\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Now, working off this (and based on my relatively limited knowledge of how this all works), it seems I should do something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn ends_in_six&lt;'a&gt;(numbers: Vec&lt;i32&gt;) -&gt; Filter&lt;Iter&lt;'a, i32&gt;, /* ??? */&gt; {\n</code></pre>\n\n<p>But now I'm stuck again, because I'm given <code>[closure &lt;anon&gt;:13:27: 13:44]</code> instead of an actual type. Even when I tried using the function <a href=\"https://stackoverflow.com/a/29168659/4728171\">here</a> to try and find out the type, I was given:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>core::iter::Filter&lt;core::slice::Iter&lt;i32&gt;, [closure((&amp;&amp;i32,)) -&gt; bool]&gt;\n</code></pre>\n\n<p>So, trying to figure it out on my own, and basing it on the previous line, I attempted:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn ends_in_six&lt;'a&gt;(numbers: Vec&lt;i32&gt;) -&gt; Filter&lt;Iter&lt;'a, i32&gt;, Fn(&amp;&amp;i32) -&gt; bool&gt; {\n</code></pre>\n\n<p>and got even more errors, because Fn is not constant at compile time (i.e. doesn't implement Sized). It makes sense, but I'm at a bit of a loss what else to try.</p>\n\n<p>EDIT: I just <a href=\"http://is.gd/RGuIh0\" rel=\"nofollow noreferrer\">tried</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn ends_in_six&lt;'a, F&gt;(numbers: Vec&lt;i32&gt;) -&gt; Filter&lt;Iter&lt;'a, i32&gt;, F&gt;\n  where F: Fn(&amp;&amp;i32) -&gt; bool {\n</code></pre>\n\n<p>and now I'm getting these errors:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>&lt;anon&gt;:7:19: 7:30 error: unable to infer enough type information about `_`; type annotations required [E0282]\n&lt;anon&gt;:7     for number in ends_in_six(numbers) {\n                           ^~~~~~~~~~~\n&lt;anon&gt;:14:32: 14:34 error: the type of this value must be known in this context\n&lt;anon&gt;:14     numbers.iter().filter(|&amp;n| *n % 10 == 6)\n                                         ^~\n&lt;anon&gt;:14:27: 14:44 error: mismatched types:\n expected `F`,\n    found `[closure &lt;anon&gt;:14:27: 14:44]`\n(expected type parameter,\n    found closure) [E0308]\n&lt;anon&gt;:14     numbers.iter().filter(|&amp;n| *n % 10 == 6)\n                                    ^~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 0, "creation_date": 1427668281, "post_id": 29335666, "comment_id": 46859750, "body": "Looks like <a href=\"https://github.com/rust-lang/rust/commit/5b2e8693e42dee545d336c0364773b3fbded93a5\" rel=\"nofollow noreferrer\">this</a>."}], "answers": [{"tags": [], "owner": {"reputation": 6718, "user_id": 2455707, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/768bc63471394edee20bcd4131186118?s=128&d=identicon&r=PG", "display_name": "reem", "link": "https://stackoverflow.com/users/2455707/reem"}, "is_accepted": true, "score": 5, "last_activity_date": 1427668191, "creation_date": 1427668191, "answer_id": 29335696, "question_id": 29335666, "link": "https://stackoverflow.com/questions/29335666/error-the-requirement-is-only-added/29335696#29335696", "title": "error: The requirement is only added", "body": "<p>You cannot use conditional or multi dispatch for the <code>Drop</code> trait right now. In other words, each implementation of Drop has to apply to all \"forms\" of the <code>Self</code> type, and so can't have bounds on contained type parameters that aren't part of the type itself.</p>\n\n<p>In this example, <code>Session&lt;FS&gt;</code> would only implement <code>Drop</code> if <code>FS: Filesystem</code>, but <code>Session&lt;u8&gt;</code> wouldn't. This is not allowed. To fix this error you can either remove the bound on the <code>Drop</code> impl or add <code>where FS: Filesystem</code> to the \"inherent\" bounds for the <code>Session</code> type by adding it at the type declaration.</p>\n"}], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 125, "favorite_count": 0, "accepted_answer_id": 29335696, "answer_count": 1, "score": 2, "last_activity_date": 1427668191, "creation_date": 1427667904, "question_id": 29335666, "link": "https://stackoverflow.com/questions/29335666/error-the-requirement-is-only-added", "title": "error: The requirement is only added", "body": "<p>I tried to compile the <a href=\"https://crates.io/crates/fuse/0.2.5\" rel=\"nofollow\">fuse</a> crate.</p>\n\n<p>This fails with the following error:</p>\n\n<pre><code>session.rs:110:1: 114:2 error: The requirement `FS : Filesystem` is added only by the Drop impl. [E0367]\n</code></pre>\n\n<p>The corresponding <a href=\"https://github.com/zargony/rust-fuse/blob/master/src/session.rs#L110\" rel=\"nofollow\">line</a> looks like this:</p>\n\n<pre><code>impl&lt;FS: Filesystem&gt; Drop for Session&lt;FS&gt;\n</code></pre>\n\n<p>i.e. the <code>Drop</code> trait is implemented for the <code>Session</code> type, which looks fine to me.</p>\n\n<p>What exactly is the error here?</p>\n"}, {"tags": ["memory-management", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1427666847, "post_id": 29335173, "comment_id": 46859383, "body": "If <code>write_u16(None, _)</code> is a noop, I question the use of an <code>Option</code> at all; <code>write_u16(option, value)</code> can be <code>option.map(|bytes| write_16(bytes, value))</code>. I would imagine you would normally be dealing directly with the vector and not with an option."}, {"owner": {"reputation": 8267, "user_id": 315129, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mSRT4.jpg?s=128&g=1", "display_name": "vbezhenar", "link": "https://stackoverflow.com/users/315129/vbezhenar"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427694723, "post_id": 29335173, "comment_id": 46865942, "body": "It&#39;s not a noop, it&#39;s a simplified example. In my code I use <code>pos: &amp;mut usize</code> which specifies where to write the value (and returns position after last written byte) and <code>&amp;mut [u8]</code> instead of <code>&amp;mut Vec</code>. And I use <code>None</code> to find out how much bytes I will write before actual writing, so no reallocations will needed."}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1427666699, "post_id": 29335280, "comment_id": 46859343, "body": "Taking <code>&amp;mut Option&lt;&amp;mut Vec&lt;u8&gt;&gt;</code> is definitely worse than reconstructing the <code>Option&lt;&amp;mut Vec&lt;u8&gt;&gt;</code> each time, because the API is harmed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427670439, "post_id": 29335280, "comment_id": 46860270, "body": "@ChrisMorgan thanks for the gentle nudge in a better direction."}, {"owner": {"reputation": 8267, "user_id": 315129, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mSRT4.jpg?s=128&g=1", "display_name": "vbezhenar", "link": "https://stackoverflow.com/users/315129/vbezhenar"}, "edited": false, "score": 0, "creation_date": 1427696277, "post_id": 29335280, "comment_id": 46866513, "body": "Your semantics in second case is slightly different, you don&#39;t call <code>write_u16</code> with <code>None</code>. I actually need that all methods called with <code>Some</code> or <code>None</code>, whatever they have. In my real code method <code>write_u16</code> is slightly more complex and doing useful work even with <code>None</code> passed."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1427670423, "last_edit_date": 1427670423, "creation_date": 1427665696, "answer_id": 29335280, "question_id": 29335173, "link": "https://stackoverflow.com/questions/29335173/use-optionmut-2-times/29335280#29335280", "title": "Use Option&lt;&amp;mut&gt; 2 times", "body": "<p>The error message is telling you they key things:</p>\n\n<blockquote>\n  <p><code>bytes_opt</code> moved here because it has type <code>core::option::Option&lt;&amp;mut collections::vec::Vec&lt;u8&gt;&gt;</code>, which is non-copyable</p>\n</blockquote>\n\n<p>Your function signature states that it is going to <em>consume</em> the argument:</p>\n\n<pre><code>fn write_u16(bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u16)\n//                      ^~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>However, by consuming it, it also <em>consumes</em> the mutable reference. If you had another type like <code>Option&lt;u8&gt;</code> or <code>Option&lt;&amp;Vec&lt;u8&gt;&gt;</code>, then the compiler could just insert an implicit copy of the variable for you. However, you aren't allowed to make copies of <strong>mutable references</strong>, because then you would have <em>mutable aliases</em>, which the compiler disallows for memory-safety reasons.</p>\n\n<p>When you pass just the <code>&amp;mut Vec&lt;u8&gt;</code>, the compiler is able to track the reference and see that only one item has the reference at a time, so it allows it. However, it is unable to track that when the mutable reference is embedded in another type.</p>\n\n<p>To actually get it to work, it's a bit ugly, with more <code>mut</code> qualifiers than I would like:</p>\n\n<pre><code>fn write_u16(bytes_opt: &amp;mut Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u16) {\n    if let Some(ref mut bytes) = *bytes_opt {\n        bytes.push((value &gt;&gt; 8) as u8);\n        bytes.push(value as u8);\n    }\n}\n\nfn write_u32(mut bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u32) {\n    write_u16(&amp;mut bytes_opt, (value &gt;&gt; 16) as u16);\n    write_u16(&amp;mut bytes_opt, value as u16);\n}\n</code></pre>\n\n<p>Prompted by @ChrisMorgan, I got something that fits your original API:</p>\n\n<pre><code>fn write_u16(bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u16) {\n    if let Some(bytes) = bytes_opt {\n        bytes.push((value &gt;&gt; 8) as u8);\n        bytes.push(value as u8);\n    }\n}\n\nfn write_u32(bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u32) {\n    if let Some(bytes) = bytes_opt {\n        write_u16(Some(bytes), (value &gt;&gt; 16) as u16);\n        write_u16(Some(bytes), value as u16);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 8267, "user_id": 315129, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mSRT4.jpg?s=128&g=1", "display_name": "vbezhenar", "link": "https://stackoverflow.com/users/315129/vbezhenar"}, "edited": false, "score": 0, "creation_date": 1427696388, "post_id": 29336549, "comment_id": 46866566, "body": "Thanks. That works but it seems too complicated for me, I&#39;ll probably redesign my API. I have too much <code>C</code> thinking I guess :)"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1427674386, "creation_date": 1427674386, "answer_id": 29336549, "question_id": 29335173, "link": "https://stackoverflow.com/questions/29335173/use-optionmut-2-times/29336549#29336549", "title": "Use Option&lt;&amp;mut&gt; 2 times", "body": "<p>Although I suspect in this case you should not be doing this (as commented already), it is possible to reborrow mutable references for this sort of a case where it is safe:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn write_u32(mut bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u32) {\n    write_u16(bytes_opt.as_mut().map(|x| &amp;mut **x), (value &gt;&gt; 16) as u16);\n    write_u16(bytes_opt, value as u16);\n}\n</code></pre>\n\n<p>The <code>bytes_opt.as_mut().map(|x| &amp;mut **x)</code> could also be written <code>match bytes_opt { Some(&amp;mut ref mut x) =&gt; Some(x), None =&gt; None, }</code>. A pretty mind-bending pattern (read it from left to right: <code>&amp;mut</code>\u2014dereference the contained value, <code>ref mut</code>\u2014and then take a new mutable reference to it), but it works and avoids the ownership issue.</p>\n"}], "owner": {"reputation": 8267, "user_id": 315129, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mSRT4.jpg?s=128&g=1", "display_name": "vbezhenar", "link": "https://stackoverflow.com/users/315129/vbezhenar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 29336549, "answer_count": 2, "score": 0, "last_activity_date": 1427674386, "creation_date": 1427665113, "last_edit_date": 1427665228, "question_id": 29335173, "link": "https://stackoverflow.com/questions/29335173/use-optionmut-2-times", "title": "Use Option&lt;&amp;mut&gt; 2 times", "body": "<p>The following program compiles fine:</p>\n\n<pre><code>fn write_u16(bytes: &amp;mut Vec&lt;u8&gt;, value: u16) {\n    bytes.push((value &gt;&gt; 8) as u8);\n    bytes.push(value as u8);\n}\n\nfn write_u32(bytes: &amp;mut Vec&lt;u8&gt;, value: u32) {\n    write_u16(bytes, (value &gt;&gt; 16) as u16);\n    write_u16(bytes, value as u16);\n}\n</code></pre>\n\n<p>now I'll change bytes type to Option&lt;&amp;mut Vec>:</p>\n\n<pre><code>fn write_u16(bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u16) {\n    if let Some(bytes) = bytes_opt {\n        bytes.push((value &gt;&gt; 8) as u8);\n        bytes.push(value as u8);\n    }\n}\n\nfn write_u32(bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u32) {\n    write_u16(bytes_opt, (value &gt;&gt; 16) as u16);\n    write_u16(bytes_opt, value as u16);\n}\n</code></pre>\n\n<p>The program doesn't compile now:</p>\n\n<pre><code>main.rs:10:15: 10:24 error: use of moved value: `bytes_opt`\nmain.rs:10     write_u16(bytes_opt, value as u16);\n                         ^~~~~~~~~\nmain.rs:9:15: 9:24 note: `bytes_opt` moved here because it has type `core::option::Option&lt;&amp;mut collections::vec::Vec&lt;u8&gt;&gt;`, which is non-copyable\nmain.rs:9     write_u16(bytes_opt, (value &gt;&gt; 16) as u16);\n                        ^~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>I don't really understand, why I can't use Option twice and how do I solve this problem?</p>\n\n<p>The only way I can imagine to solve this problem is:</p>\n\n<pre><code>fn write_u32(bytes_opt: Option&lt;&amp;mut Vec&lt;u8&gt;&gt;, value: u32) {\n    if let Some(bytes) = bytes_opt {\n        write_u16(Some(bytes), (value &gt;&gt; 16) as u16);\n        write_u16(Some(bytes), value as u16);\n    } else {\n        write_u16(None, (value &gt;&gt; 16) as u16);\n        write_u16(None, value as u16);\n    }\n}\n</code></pre>\n\n<p>but that's not very nice code.</p>\n"}, {"tags": ["random", "rust"], "comments": [{"owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "edited": false, "score": 0, "creation_date": 1427660979, "post_id": 29334461, "comment_id": 46857579, "body": "Note that this is a beginners question. This is (after a &quot;Hello World&quot;) the second thing I&#39;ve tried."}], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 5, "creation_date": 1466247210, "post_id": 29334943, "comment_id": 63245623, "body": "Can you please explain why these useful functions are removed from stdlib ?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 26, "last_activity_date": 1573238500, "last_edit_date": 1573238500, "creation_date": 1427663884, "answer_id": 29334943, "question_id": 29334461, "link": "https://stackoverflow.com/questions/29334461/how-can-i-get-a-random-number-in-rust-1-0/29334943#29334943", "title": "How can I get a random number in Rust 1.0?", "body": "<p>In the far past, the <code>rand</code> crate  was part of the standard library but has long since been <a href=\"https://crates.io/crates/rand\" rel=\"nofollow noreferrer\">extracted to a crate</a>. This crate should be the one you use:</p>\n\n<p>Specify a <strong>Cargo.toml</strong>:</p>\n\n<pre><code>[package]\nname = \"stackoverflow\"\nversion = \"0.0.1\"\nauthors = [\"A. Developer &lt;developer@example.com&gt;\"]\n\n[dependencies]\nrand = \"0.7.0\" # Or a newer version\n</code></pre>\n\n<p>Then your example code works:</p>\n\n<pre><code>use rand::Rng; // 0.7.2\n\nfn main() {\n    let mut rng = rand::thread_rng();\n    if rng.gen() { // random bool\n        println!(\"i32: {}, u32: {}\", rng.gen::&lt;i32&gt;(), rng.gen::&lt;u32&gt;())\n    }\n    let tuple = rand::random::&lt;(f64, char)&gt;();\n    println!(\"{:?}\", tuple)\n}\n</code></pre>\n\n<p>With the output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run\n     Running `target/debug/so`\ni32: 1819776837, u32: 3293137459\n(0.6052759716514547, '\\u{69a69}')\n\n$ cargo run\n     Running `target/debug/so`\n(0.23882541338214436, '\\u{10deee}')\n</code></pre>\n\n<blockquote>\n  <p>Why were these useful functions removed from stdlib?</p>\n</blockquote>\n\n<p>Rust has a philosophy of placing as much as possible into crates instead of the standard library. This allows each piece of code to grow and evolve at a different rate than the standard library and also allows the code to <em>stop being used</em> without forcing it to be maintained forever.</p>\n\n<p>A common example is the <a href=\"https://stackoverflow.com/questions/2018026/what-are-the-differences-between-the-urllib-urllib2-and-requests-module\">sequence of HTTP libraries in Python</a>. There are multiple packages that all do the same thing in different ways and the Python maintainers have to keep <strong>all</strong> of them to provide backwards compatibility.</p>\n\n<p>Crates allow this particular outcome to be avoided. If a crate truly stabilizes for a long time, I'm sure it could be re-added to the standard library.</p>\n"}], "owner": {"reputation": 90304, "user_id": 562769, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e86681e49622d52817b36fd2a4c936b7?s=128&d=identicon&r=PG", "display_name": "Martin Thoma", "link": "https://stackoverflow.com/users/562769/martin-thoma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10427, "favorite_count": 3, "accepted_answer_id": 29334943, "answer_count": 1, "score": 22, "last_activity_date": 1573238500, "creation_date": 1427660951, "last_edit_date": 1500820243, "question_id": 29334461, "link": "https://stackoverflow.com/questions/29334461/how-can-i-get-a-random-number-in-rust-1-0", "title": "How can I get a random number in Rust 1.0?", "body": "<p>I tried</p>\n\n<pre><code>use std::rand::{task_rng, Rng};\n\nfn main() {\n    // a number from [-40.0, 13000.0)\n    let num: f64 = task_rng().gen_range(-40.0, 1.3e4);\n    println!(\"{}\", num);\n}\n</code></pre>\n\n<p>but this gives</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0432]: unresolved import `std::rand::task_rng`\n --&gt; rand.rs:1:17\n  |\n1 | use std::rand::{task_rng, Rng};\n  |                 ^^^^^^^^ no `task_rng` in `rand`\n\nerror[E0432]: unresolved import `std::rand::Rng`\n --&gt; rand.rs:1:27\n  |\n1 | use std::rand::{task_rng, Rng};\n  |                           ^^^ no `Rng` in `rand`\n\nerror[E0603]: module `rand` is private\n --&gt; rand.rs:1:17\n  |\n1 | use std::rand::{task_rng, Rng};\n  |                 ^^^^^^^^\n\nerror[E0603]: module `rand` is private\n --&gt; rand.rs:1:27\n  |\n1 | use std::rand::{task_rng, Rng};\n  |                           ^^^\n</code></pre>\n\n<p>and I tried</p>\n\n<pre><code>extern crate rand;\nuse rand::Rng;\n\nfn main() {\n    let mut rng = rand::thread_rng();\n    if rng.gen() {\n        // random bool\n        println!(\"i32: {}, u32: {}\", rng.gen::&lt;i32&gt;(), rng.gen::&lt;u32&gt;())\n    }\n    let tuple = rand::random::&lt;(f64, char)&gt;();\n    println!(\"{:?}\", tuple)\n}\n</code></pre>\n\n<p>and got</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0425]: cannot find function `thread_rng` in module `rand`\n --&gt; rand.rs:5:29\n  |\n5 |         let mut rng = rand::thread_rng();\n  |                             ^^^^^^^^^^ not found in `rand`\n  |\nhelp: possible candidate is found in another module, you can import it into scope\n  |     use std::__rand::thread_rng;\n\nerror[E0425]: cannot find function `random` in module `rand`\n  --&gt; rand.rs:10:27\n   |\n10 |         let tuple = rand::random::&lt;(f64, char)&gt;();\n   |                           ^^^^^^ not found in `rand`\n\nerror: use of unstable library feature 'rand': use `rand` from crates.io (see issue #27703)\n --&gt; rand.rs:1:5\n  |\n1 |     extern crate rand;\n  |     ^^^^^^^^^^^^^^^^^^\n\nerror: use of unstable library feature 'rand': use `rand` from crates.io (see issue #27703)\n --&gt; rand.rs:2:9\n  |\n2 |     use rand::Rng;\n  |         ^^^^^^^^^\n</code></pre>\n"}, {"tags": ["compilation", "compiler-errors", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 3, "last_activity_date": 1427653543, "last_edit_date": 1427653543, "creation_date": 1427653162, "answer_id": 29332978, "question_id": 29332774, "link": "https://stackoverflow.com/questions/29332774/trait-coreopsindexi32-is-not-implemented/29332978#29332978", "title": "Trait `core::ops::Index&lt;i32&gt;` is not implemented", "body": "<p>You can use type annotations to make sure the numbers in your array have the right type:</p>\n\n<pre><code>fn main() {\n\n    let nums = [1us, 2]; // note the us suffix\n    let noms = [ \"Sergey\", \"Dmitriy\", \"Ivan\" ];\n\n    for num in nums.iter() {\n        println!(\"{} says hello\", noms[num-1]);\n    }\n}\n</code></pre>\n\n<p>This way, your array contains numbers of type <code>usize</code> instead of <code>i32</code>s</p>\n\n<p>In general, if you're not explicit about which type a numeric literal has, and if the type inference can't figure out what the type should be, it will default to <code>i32</code>, which might not be what you want.</p>\n"}], "owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1354, "favorite_count": 0, "accepted_answer_id": 29332978, "answer_count": 1, "score": 4, "last_activity_date": 1427655607, "creation_date": 1427652110, "last_edit_date": 1427655607, "question_id": 29332774, "link": "https://stackoverflow.com/questions/29332774/trait-coreopsindexi32-is-not-implemented", "title": "Trait `core::ops::Index&lt;i32&gt;` is not implemented", "body": "<p>I can't compile my elementary Rust program:</p>\n\n<pre><code>fn main() {\n\n    let nums = [1, 2];\n    let noms = [ \"Sergey\", \"Dmitriy\", \"Ivan\" ];\n\n    for num in nums.iter() {\n        println!(\"{} says hello\", noms[num-1]);\n    }\n}\n</code></pre>\n\n<p>I get this error while compiling:</p>\n\n<pre><code>   Compiling hello_world v0.0.1 (file:///home/igor/rust/projects/hello_world)\nsrc/main.rs:23:61: 23:72 error: the trait `core::ops::Index&lt;i32&gt;` is not implemented for the type `[&amp;str]` [E0277]\nsrc/main.rs:23         println!(\"{} says hello\", noms[num-1]);\n</code></pre>\n\n<p>If I do an explicit type conversion, it works, but I'm not sure\nthat it's the right way:</p>\n\n<pre><code>println!(\"{} says hello\", noms[num-1 as usize]);\n</code></pre>\n\n<p>What is the correct way to access array elements in this case?</p>\n\n<p>Related discussions on GitHub, Reddit:</p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/r/rust/comments/2tpefm/unable_to_access_array_elements/\" rel=\"nofollow\">https://www.reddit.com/r/rust/comments/2tpefm/unable_to_access_array_elements/</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/21659\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/21659</a></li>\n</ul>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1427584148, "post_id": 29323632, "comment_id": 46838143, "body": "These days you can write <code>for i in &amp;mut points</code> since it uses the <code>IntoIterator</code> trait."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427584719, "post_id": 29323632, "comment_id": 46838251, "body": "@ChrisMorgan Right, I keep forgetting that one. Thanks."}, {"owner": {"reputation": 222, "user_id": 4437212, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/aa3211a9ea6f971f486ae13b70d4623d?s=128&d=identicon&r=PG&f=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/4437212/chris"}, "edited": false, "score": 0, "creation_date": 1427743371, "post_id": 29323632, "comment_id": 46893996, "body": "Works for one loop but not for nested: <code>for i in &amp;mut points.iter() {         for j in points.iter() {                 &#47;&#47; some stuff and calculate a         }         i.x = i.x + a; &#47;&#47; error: cannot assign to immutable field &#39;i.x&#39;</code>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 222, "user_id": 4437212, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/aa3211a9ea6f971f486ae13b70d4623d?s=128&d=identicon&r=PG&f=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/4437212/chris"}, "edited": false, "score": 0, "creation_date": 1427746926, "post_id": 29323632, "comment_id": 46896095, "body": "@Chris That should give a lifetime error related to <code>points</code>, not anything related to <code>i</code>. And indeed it does when I type it up in the play pen: <a href=\"http://is.gd/uIMLKs\" rel=\"nofollow noreferrer\">is.gd/uIMLKs</a> There is no easy workaround this time (<code>&amp;mut</code> pointers must never alias), so you should write a separate question with full explanation of that you&#39;re trying to do and why it requires both mutability and nested loops."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 20, "last_activity_date": 1427584698, "last_edit_date": 1427584698, "creation_date": 1427583649, "answer_id": 29323632, "question_id": 29322932, "link": "https://stackoverflow.com/questions/29322932/is-there-an-elegant-solution-to-modifying-a-structure-while-iterating/29323632#29323632", "title": "Is there an elegant solution to modifying a structure while iterating?", "body": "<p>You cannot modify the structure you are iterating over, that is, the vector <code>points</code>. However, modifying the elements that you get from the iterator is completely unproblematic, you just have to opt into mutability:</p>\n\n<pre><code>for i in points.iter_mut() {\n</code></pre>\n\n<p>Or, with more modern syntax:</p>\n\n<pre><code>for i in &amp;mut points {\n</code></pre>\n\n<p>Mutability is opt-in because iterating mutably further restricts what you can do with <code>points</code> while iterating. Since mutable aliasing (i.e. two or more pointers to the same memory, at least one of which is <code>&amp;mut</code>) is prohibited, you can't even <em>read</em> from <code>points</code> while the <code>iter_mut()</code> iterator is around.</p>\n"}], "owner": {"reputation": 222, "user_id": 4437212, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/aa3211a9ea6f971f486ae13b70d4623d?s=128&d=identicon&r=PG&f=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/4437212/chris"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6046, "favorite_count": 2, "accepted_answer_id": 29323632, "answer_count": 1, "score": 8, "last_activity_date": 1517763529, "creation_date": 1427578739, "last_edit_date": 1517763529, "question_id": 29322932, "link": "https://stackoverflow.com/questions/29322932/is-there-an-elegant-solution-to-modifying-a-structure-while-iterating", "title": "Is there an elegant solution to modifying a structure while iterating?", "body": "<p>I'm trying to build a vector of points that are changed while iterating over them:</p>\n\n<pre><code>struct Point {\n    x: i16,\n    y: i16,\n}\n\nfn main() {\n    let mut points: Vec&lt;Point&gt; = vec![];\n    // unsure if point is mutable\n    points.push(Point { x: 10, y: 10 });\n    // thus trying it explicitly\n    let mut p1 = Point { x: 20, y: 20 };\n    points.push(p1);\n\n    for i in points.iter() {\n        println!(\"{}\", i.x);\n        i.x = i.x + 10;\n    }\n}\n</code></pre>\n\n<p>When compiling, I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0594]: cannot assign to immutable field `i.x`\n  --&gt; src/main.rs:16:9\n   |\n16 |         i.x = i.x + 10;\n   |         ^^^^^^^^^^^^^^ cannot mutably borrow immutable field\n</code></pre>\n\n<p>As I learned <a href=\"https://stackoverflow.com/questions/25960318/idiomatic-iterator-mutation-on-a-struct-in-rust?rq=1\">here</a>, Rust doesn't allow modifying the structure while iterating over it, thus the error.</p>\n\n<p>How do I modify it in an elegant way? If I read <a href=\"https://stackoverflow.com/questions/25960318/idiomatic-iterator-mutation-on-a-struct-in-rust?rq=1\">this answer</a> and get it right then the following comes to my mind:</p>\n\n<ol>\n<li>pop the item from the vector, modify it and push it back.</li>\n<li>create a temporary structure where I push the changed items to and replace original structure with the temporary one outside the loop (how?).</li>\n</ol>\n\n<p>While I think I can get (1) working, I'm not really happy about all this pop's and push's (is this high-performance anyhow?). Concerning (2), I have no idea how to get it working  - if this would work at all.</p>\n\n<p><strong>Questions:</strong></p>\n\n<ol>\n<li>Is (2) an solution and if yes, how would it look like?</li>\n<li>Are there any other solutions?</li>\n<li>What's the advantage or disadvantage of the different solutions, especially with respect to performance?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1427548250, "post_id": 29317501, "comment_id": 46826953, "body": "Which version of rustc are you using?"}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1427548477, "post_id": 29317501, "comment_id": 46827017, "body": "@Dogbert: 1.0.0-nightly (2015-01-14)"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1427548840, "post_id": 29317501, "comment_id": 46827145, "body": "@IgorChubin, that is now more than 2 months old, and the APIs have changed in the mean time (the docs on doc.rust-lang.org are for the lastest nightly)."}, {"owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1427562459, "post_id": 29317501, "comment_id": 46831533, "body": "@huon-dbaupp: That&#39;s right! After update all works like a charm!! Thank you huon-dbaupp and Dogbert"}], "answers": [{"tags": [], "owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "is_accepted": false, "score": 2, "last_activity_date": 1427562734, "creation_date": 1427562734, "answer_id": 29320080, "question_id": 29317501, "link": "https://stackoverflow.com/questions/29317501/unresolved-name-threadscoped-in-an-elementary-program/29320080#29320080", "title": "Unresolved name `thread::scoped` in an elementary program", "body": "<p>The problem indeed was with the version of the rustc.\nAfter upgrade the program was successfully compiled:</p>\n\n<pre><code>   Compiling examples v0.0.1 (file:///home/igor/rust/projects/examples)\nsrc/main.rs:1:5: 1:16 warning: unused import, #[warn(unused_imports)] on by default\nsrc/main.rs:1 use std::thread;\n                  ^~~~~~~~~~~\n</code></pre>\n\n<p>The warning disappeared after I removed <em>use</em>:</p>\n\n<pre><code>fn main() {\n    for i in 1..10 {\n        let _ = thread::scoped( move || {\n            println!(\"hello from thread {}\", i);\n        });\n    }\n}\n</code></pre>\n\n<p>(Thank you, <em>huon-dbaupp</em> and <em>Dogbert</em>, for your help).</p>\n"}], "owner": {"reputation": 51550, "user_id": 1458569, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/mPKhD.png?s=128&g=1", "display_name": "Igor Chubin", "link": "https://stackoverflow.com/users/1458569/igor-chubin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 230, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1427562734, "creation_date": 1427547864, "last_edit_date": 1427554567, "question_id": 29317501, "link": "https://stackoverflow.com/questions/29317501/unresolved-name-threadscoped-in-an-elementary-program", "title": "Unresolved name `thread::scoped` in an elementary program", "body": "<p>Why do I get a compilation failure in this elementary program?</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    for i in 1..10 {\n        let _ = thread::scoped( move || {\n            println!(\"hello from thread {}\", i);\n        });\n    }\n}\n</code></pre>\n\n<p>I try to build the program and I get:</p>\n\n<pre><code>src/main.rs:5:17: 5:36 error: unresolved name `thread::scoped`\nsrc/main.rs:5         let _ = thread::scoped( move || {\n                              ^~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Why?</p>\n\n<p>The version of Rust I use:</p>\n\n<pre><code>$ rustc --version\nrustc 1.0.0-nightly (170c4399e 2015-01-14 00:41:55 +0000)\n</code></pre>\n"}, {"tags": ["vector", "rust", "pattern-matching", "slice", "destructuring"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427542693, "post_id": 29316582, "comment_id": 46825439, "body": "related question: <a href=\"http://stackoverflow.com/questions/28851989/how-can-i-pattern-match-a-vect-inside-an-enum-field-without-nesting-matches\" title=\"how can i pattern match a vect inside an enum field without nesting matches\">stackoverflow.com/questions/28851989/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1427543138, "post_id": 29316696, "comment_id": 46825562, "body": "And even if you could, you probably shouldn&#39;t and wouldn&#39;t want to mess with the pointer directly."}, {"owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "edited": false, "score": 0, "creation_date": 1427543251, "post_id": 29316696, "comment_id": 46825605, "body": "sure, just demonstrate how to match a Vec"}], "tags": [], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "is_accepted": false, "score": 1, "last_activity_date": 1427554247, "last_edit_date": 1427554247, "creation_date": 1427542743, "answer_id": 29316696, "question_id": 29316582, "link": "https://stackoverflow.com/questions/29316582/how-do-i-destructure-a-vector-without-taking-a-slice/29316696#29316696", "title": "How do I destructure a vector without taking a slice?", "body": "<p>You can't do this, <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcollections/vec.rs#L143\" rel=\"nofollow\">the definition of Vec in std</a> is</p>\n\n<pre><code>pub struct Vec&lt;T&gt; {\n    ptr: Unique&lt;T&gt;,\n    len: usize,\n    cap: usize,\n}\n</code></pre>\n\n<p>so you can't match it directly, only:</p>\n\n<pre><code>match xs {\n    Vec { ptr: x, .. } =&gt; {...}\n} \n</code></pre>\n\n<p>but</p>\n\n<pre><code>error: field `ptr` of struct `collections::vec::Vec` is private\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "edited": false, "score": 0, "creation_date": 1427558887, "post_id": 29318529, "comment_id": 46830258, "body": "Thanks! It&#39;s a shame that moving items out of a vector can&#39;t be supported by the compiler transferring ownership in the same way as it does when destructuring the <code>item</code> tuple."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "edited": false, "score": 1, "creation_date": 1427559686, "post_id": 29318529, "comment_id": 46830535, "body": "@PeterHorne I&#39;m not sure what you mean. If <code>foo = vec[0]</code> transferred ownership out of the vector and into the variable <code>foo</code>, what would you want <code>vec[0]</code> to mean <i>after</i> the ownership was transferred?"}, {"owner": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "edited": false, "score": 0, "creation_date": 1427561926, "post_id": 29318529, "comment_id": 46831310, "body": "Same as if you try to access <code>items</code> after <code>(a, b) = items</code> \u2013 an error (use of partially moved value)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "edited": false, "score": 1, "creation_date": 1427632975, "post_id": 29318529, "comment_id": 46848087, "body": "@PeterHorne: You are vastly over-estimating the Rust type system of the moment though. Partial Moves are only available for structures for which the <code>Drop</code> trait is not implemented (see <a href=\"http://is.gd/tRTWDR\" rel=\"nofollow noreferrer\">is.gd/tRTWDR</a> =&gt; <i>cannot move out of type <code>Person</code>, which defines the <code>Drop</code> trait</i>), because then the compiler cannot know what the <code>Drop</code> trait will rely on."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1580756452, "last_edit_date": 1580756452, "creation_date": 1427554226, "answer_id": 29318529, "question_id": 29316582, "link": "https://stackoverflow.com/questions/29316582/how-do-i-destructure-a-vector-without-taking-a-slice/29318529#29318529", "title": "How do I destructure a vector without taking a slice?", "body": "<p>You are asking two disjoint questions at once:</p>\n\n<ol>\n<li>How can I move out of a vector?</li>\n<li>How can I destructure an item?</li>\n</ol>\n\n<p>The second is easy:</p>\n\n<pre><code>let item = (\"Peter\".to_string(), 180);\nlet (name, score) = item;\n</code></pre>\n\n<p>You don't need the <code>if let</code> syntax because there no way for this pattern-matching to fail. Of course, you can't use <code>item</code> after destructuring it because you've <em>transferred ownership</em> from <code>item</code> to <code>name</code> and <code>score</code>.</p>\n\n<p>The first question is harder, and gets to a core part of Rust. If you transfer ownership out of a vector, then <em>what state is the vector in</em>? In C, you would have some undefined chunk of memory sitting in the vector, waiting to blow apart your program. Say you called <code>free</code> on that string, then what happens when you use the thing in the vector that pointed to the same string?</p>\n\n<p>There are a few ways to solve it...</p>\n\n<h3>The vector continues to own the items</h3>\n\n<pre><code>let items = vec![(\"Peter\".to_string(), 180)];\n\nif let Some((name, score)) = items.first() {\n    println!(\"{} scored {}\", name, score);\n}\n</code></pre>\n\n<p>Here, we grab <em>a reference to</em> the first item and then references to the name and score. Since the vector may not have any items, it returns an <code>Option</code>, so we do use <code>if let</code>. The compiler will not let us use these items any longer than the vector lives.</p>\n\n<h3>Transfer one element's ownership from the vector</h3>\n\n<pre><code>let mut items = vec![(\"Peter\".to_string(), 180)];\n\nlet (name, score) = items.remove(0); // Potential panic!\nprintln!(\"{} scored {}\", name, score);\n</code></pre>\n\n<p>Here, we <code>remove</code> the first item from the array. The vector no longer owns it, and we can do whatever we want with it. We destructure it immediately. <code>items</code>, <code>name</code> and <code>score</code> will all have independent lifetimes.</p>\n\n<h3>Transfer all element ownership from the vector</h3>\n\n<pre><code>let items = vec![(\"Peter\".to_string(), 180)];\n\nfor (name, score) in items {\n    println!(\"{} scored {}\", name, score);\n}\n</code></pre>\n\n<p>Here, we <em>consume</em> the vector, so it is no longer available to use after the <code>for</code> loop. Ownership of <code>name</code> and <code>score</code> is transferred to the variables in the loop binding. </p>\n\n<h3>Clone the item</h3>\n\n<pre><code>let items = vec![(\"Peter\".to_string(), 180)];\n\nlet (name, score) = items[0].clone(); // Potential panic!\nprintln!(\"{} scored {}\", name, score);\n</code></pre>\n\n<p>Here, we make <em>new</em> versions of the items in the vector. We own the new items, and the vector owns the original ones.</p>\n"}], "owner": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8939, "favorite_count": 0, "accepted_answer_id": 29318529, "answer_count": 2, "score": 6, "last_activity_date": 1586846832, "creation_date": 1427542100, "last_edit_date": 1580756313, "question_id": 29316582, "link": "https://stackoverflow.com/questions/29316582/how-do-i-destructure-a-vector-without-taking-a-slice", "title": "How do I destructure a vector without taking a slice?", "body": "<p>I can destructure a vector of tuples by taking a slice of a vector and references to the items within the tuple:</p>\n\n<pre><code>let items = vec![(\"Peter\".to_string(), 180)];\n\nif let [(ref name, ref age)] = items.as_slice() {\n    println!(\"{} scored {}\", name, age);\n};\n</code></pre>\n\n<p>How can I destructure the vector directly, moving the items out of the tuple. Something like this:</p>\n\n<pre><code>let items = vec![(\"Peter\".to_string(), 180)];\n\nif let [(name, age)] = items {\n    println!(\"{} scored {}\", name, age);\n};\n</code></pre>\n\n<p>Compiling the above results in the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0529]: expected an array or slice, found `std::vec::Vec&lt;(std::string::String, {integer})&gt;`\n --&gt; src/main.rs:4:12\n  |\n4 |     if let [(name, age)] = items {\n  |            ^^^^^^^^^^^^^ pattern cannot match with input type `std::vec::Vec&lt;(std::string::String, {integer})&gt;`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "edited": false, "score": 0, "creation_date": 1427529388, "post_id": 29314746, "comment_id": 46822401, "body": "What is so bad about my question? Care to elaborate?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1427531463, "post_id": 29314746, "comment_id": 46822712, "body": "I didn&#39;t downvote, but the person may be unhappy that <a href=\"http://users.rust-lang.org/t/iterator-find-referencing-the-needle-instead-of-dereferencing-the-iterating-item/764\" rel=\"nofollow noreferrer\">it was crossposted</a> without any links between them. (Meaning, e.g., someone may waste effort if they don&#39;t realise that the question is already answered on the other site.)"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427550505, "post_id": 29314746, "comment_id": 46827612, "body": "One of the canonical causes for a -1 is \u201cthis question does not show any research effort\u201d. I considered this to be a question for which \u201cjust try it and observe the results!\u201d is sufficient, though upon reviewing it later I suppose that an incomplete understanding of pointers would make the certainty of the logical conclusion of experimentation (viz. that <code>&amp;T</code> comparison is not pointer comparison) not so sure."}, {"owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "edited": false, "score": 0, "creation_date": 1427636713, "post_id": 29314746, "comment_id": 46849159, "body": "I did test my code, the problem was I couldn&#39;t be certain because I could just have been lucky i.e. pointers were arranged in such a manner that the observable effect was the same, but not the semantics. Yet my question is about the underlying semantics, not about blind observations."}], "answers": [{"comments": [{"owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "edited": false, "score": 0, "creation_date": 1427529338, "post_id": 29314869, "comment_id": 46822390, "body": "Thanks. Of course I&#39;ve tried it, but it could have been the case that it worked just because I was lucky."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1427528662, "creation_date": 1427528662, "answer_id": 29314869, "question_id": 29314746, "link": "https://stackoverflow.com/questions/29314746/iterator-find-referencing-the-needle-instead-of-dereferencing-the-iterating-it/29314869#29314869", "title": "iterator find - referencing the needle instead of dereferencing the iterating item", "body": "<p>Simply trying it will demonstrate clearly that this is not the case.</p>\n\n<p>In Rust, raw pointers (<code>*const T</code> and <code>*mut T</code>) are the only places where memory addresses are significant.</p>\n\n<p>References (<code>&amp;T</code> and <code>&amp;mut T</code>) are transparent in that manner; if you want to compare the memory addresses (e.g. to see if two immutable references are to the same location, though this is of very limited practical application with Rust\u2019s ownership model) you will need to cast them to raw pointers first.</p>\n"}], "owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 64, "favorite_count": 0, "accepted_answer_id": 29314869, "answer_count": 1, "score": 0, "last_activity_date": 1427528662, "creation_date": 1427527401, "question_id": 29314746, "link": "https://stackoverflow.com/questions/29314746/iterator-find-referencing-the-needle-instead-of-dereferencing-the-iterating-it", "title": "iterator find - referencing the needle instead of dereferencing the iterating item", "body": "<p>Consider the following code:</p>\n\n<pre><code>fn main() {\n    let greater_than_42 = (0..100).find(|x| *x &gt; 42);\n    match greater_than_42 {\n        Some(x) =&gt; println!(\"{}\", x),\n        None =&gt; println!(\"no numbers found\"),\n    }\n}\n</code></pre>\n\n<p>If I do this instead:</p>\n\n<pre><code>    let greater_than_42 = (0..100).find(|x| x &gt; &amp;42);\n</code></pre>\n\n<p>would it compare memory addresses, instead of values?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427493117, "post_id": 29310060, "comment_id": 46815305, "body": "Note also that the <code>.iter_mut()</code> is superfluous."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427528044, "post_id": 29310060, "comment_id": 46822143, "body": "@ChrisMorgan It depends: if you allow <code>window</code> to be consumed by the loop, then yes it is superfluous."}, {"owner": {"reputation": 477, "user_id": 437260, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/rUgjK.jpg?s=128&g=1", "display_name": "Antonin", "link": "https://stackoverflow.com/users/437260/antonin"}, "edited": false, "score": 0, "creation_date": 1507238760, "post_id": 29310060, "comment_id": 80143069, "body": "Tried this method to mutate a <code>[[i32; 128]; 512]</code>, with no success yet"}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 4, "last_activity_date": 1427489779, "creation_date": 1427489779, "answer_id": 29310060, "question_id": 29308666, "link": "https://stackoverflow.com/questions/29308666/mutate-an-array-through-a-slice-of-the-array/29310060#29310060", "title": "Mutate an array through a slice of the array", "body": "<p>In your precise case, if you don't try to make overlapping slices, you can simply create a <code>&amp;mut</code> slice: </p>\n\n<pre><code>let mut a = [1, 2, 3, 4, 5];\nlet window = &amp;mut a[1..4];\nfor element in window.iter_mut() {\n    println!(\"{}\", element);\n    *element = 0;\n}\n</code></pre>\n"}], "owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 652, "favorite_count": 0, "accepted_answer_id": 29310060, "answer_count": 1, "score": 1, "last_activity_date": 1517185891, "creation_date": 1427484256, "last_edit_date": 1517185891, "question_id": 29308666, "link": "https://stackoverflow.com/questions/29308666/mutate-an-array-through-a-slice-of-the-array", "title": "Mutate an array through a slice of the array", "body": "<pre><code>let mut a = [1, 2, 3, 4, 5];\nlet mut window = &amp;a[1..4];\nfor element in window.iter() {\n    println!(\"{}\", element);\n    *element = 0;\n}\n</code></pre>\n\n<p>How to set the middle values in the original array <code>a</code> to <code>0</code> through the slice <code>window</code>?</p>\n"}, {"tags": ["arrays", "casting", "rust", "slice"], "answers": [{"comments": [{"owner": {"reputation": 888, "user_id": 1122242, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c94e800354854bafd803f7ff56239e0?s=128&d=identicon&r=PG", "display_name": "moveaway00", "link": "https://stackoverflow.com/users/1122242/moveaway00"}, "edited": false, "score": 8, "creation_date": 1458946264, "post_id": 29307778, "comment_id": 60089757, "body": "You can also use BigEndian::read_i32(&amp;bytes[..]), if you&#39;re only reading a single item."}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609068079, "post_id": 29307778, "comment_id": 115739714, "body": "What if buf is a vec&lt;8&gt;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609081290, "post_id": 29307778, "comment_id": 115743022, "body": "@user2284570 you don&#39;t have to do anything special for a <code>Vec&lt;u8&gt;</code>. See also <a href=\"https://stackoverflow.com/q/39785597/155423\">How do I get a slice of a Vec&lt;T&gt; in Rust?</a>. You <i>have</i> to care about the endianness of the data. It&#39;s the difference between <code>12345</code> and <code>54321</code>. So long as both the writer and the reader agree on the endianness of the data, you are fine. If you are writing it, then pick one and use it consistently. Most people would pick little endian, probably."}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609081727, "post_id": 29307778, "comment_id": 115743143, "body": "@Shepmaster it s rather that I need to preserve the existing byte ordering and that the code will run on cpu supportting unaligned memory access. So how to do the same without <code>from_be_bytes</code> since it seems there s no <code>from_ptr()</code> function? It also seems <code>Vec</code> has no <code>read_u32</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609083335, "post_id": 29307778, "comment_id": 115743624, "body": "@user2284570 <a href=\"https://docs.rs/byteorder/1.3.4/byteorder/type.NativeEndian.html\" rel=\"nofollow noreferrer\"><code>NativeEndian</code></a>; <a href=\"https://stackoverflow.com/q/27150652/155423\">How can I get an array or a slice from a raw pointer?</a>; <a href=\"https://stackoverflow.com/q/25273816/155423\">Why do I need to import a trait to use the methods it defines for a type?</a>"}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609083553, "post_id": 29307778, "comment_id": 115743675, "body": "@Shepmaster and for doing it on array while still using NativeEndian?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609083597, "post_id": 29307778, "comment_id": 115743690, "body": "@user2284570 It&#39;s not clear what part you are missing. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e54cc67ec8970f66bd941615c91620f3\" rel=\"nofollow noreferrer\">example</a>"}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609083697, "post_id": 29307778, "comment_id": 115743736, "body": "@Shepmaster sorry I was meaning without using the byteorder crate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609083726, "post_id": 29307778, "comment_id": 115743745, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/226488/discussion-between-shepmaster-and-user2284570\">continue this discussion in chat</a>."}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609160307, "post_id": 29307778, "comment_id": 115762135, "body": "@Shepmaster what if <code>buf</code> is larger than 4 bytes <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a6358a4d6becf4b5dbd00d2894f0db85\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 35, "last_activity_date": 1589376560, "last_edit_date": 1589376560, "creation_date": 1427481073, "answer_id": 29307778, "question_id": 29307474, "link": "https://stackoverflow.com/questions/29307474/how-can-i-convert-a-buffer-of-a-slice-of-bytes-u8-to-an-integer/29307778#29307778", "title": "How can I convert a buffer of a slice of bytes (&amp;[u8]) to an integer?", "body": "<p>I'd suggest using the <a href=\"https://crates.io/crates/byteorder\" rel=\"noreferrer\">byteorder crate</a> (which also works in a no-std environment):</p>\n\n<pre><code>use byteorder::{BigEndian, ReadBytesExt}; // 1.2.7\n\nfn main() {\n    let mut buf: &amp;[u8] = &amp;[0, 0, 0, 1];\n    let num = buf.read_u32::&lt;BigEndian&gt;().unwrap();\n\n    assert_eq!(1, num);\n}\n</code></pre>\n\n<p>This handles oddly-sized slices and automatically advances the buffer so you can read multiple values.</p>\n\n<p>As of Rust 1.32, you can also use the <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_le_bytes\" rel=\"noreferrer\"><code>from_le_bytes</code></a> / <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_be_bytes\" rel=\"noreferrer\"><code>from_be_bytes</code></a> / <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.from_ne_bytes\" rel=\"noreferrer\"><code>from_ne_bytes</code></a> inherent methods on integers:</p>\n\n<pre><code>fn main() {\n    let buf = [0, 0, 0, 1];\n    let num = u32::from_be_bytes(buf);\n\n    assert_eq!(1, num);\n}\n</code></pre>\n\n<p>These methods only handle fixed-length arrays to avoid dealing with the error when not enough data is present. If you have a slice, you will need to <a href=\"https://stackoverflow.com/q/25428920/155423\">convert it into an array</a>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25428920/155423\">How to get a slice as an array in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/48129565/155423\">How to convert a slice into an array reference?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1589373165, "post_id": 61772393, "comment_id": 109266838, "body": "This doesn&#39;t really add anything to the existing answer, which already discusses <code>from_le_bytes</code> / <code>from_be_bytes</code> / <code>from_ne_bytes</code> and links to a question showing how to get fixed-size arrays from slices."}, {"owner": {"reputation": 760, "user_id": 10795361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zisK3.png?s=128&g=1", "display_name": "Alexander Fadeev", "link": "https://stackoverflow.com/users/10795361/alexander-fadeev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1589374942, "post_id": 61772393, "comment_id": 109268033, "body": "@Shepmaster Sad you think so. I don&#39;t really agree because  I collected all this info across all stackoverflow answers and decided to put it here for convenience. In this answer I add a couple of points: 1. What to do in <code>no_std</code> environment. 2. What to do with slices as original question stated (without jumping to links). 3. What to do without <code>byteorder</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1589375739, "post_id": 61772393, "comment_id": 109268564, "body": "byteorder works in a no-std environment, clicking links isn&#39;t a burden on the internet, the existing answer talks about avoiding byteorder."}, {"owner": {"reputation": 760, "user_id": 10795361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zisK3.png?s=128&g=1", "display_name": "Alexander Fadeev", "link": "https://stackoverflow.com/users/10795361/alexander-fadeev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1589375935, "post_id": 61772393, "comment_id": 109268669, "body": "@Shepmaster By the way, I didn&#39;t notice that this is your answer/question party. ;) But you should know that &quot;See also&quot; note is not really noticeable in your answer, also it is pretty confusing to see a code snippet about how to convert array to integer in your answer instead of converting a slice to integer. You may think differently, I just tell how it looks like. Anyways you just can improve your own answer, right? (P.S.: &quot;clicking links isn&#39;t a burden on the internet&quot; - this is your subjective point of view which differs from mine)"}, {"owner": {"reputation": 760, "user_id": 10795361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zisK3.png?s=128&g=1", "display_name": "Alexander Fadeev", "link": "https://stackoverflow.com/users/10795361/alexander-fadeev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1589401916, "post_id": 61772393, "comment_id": 109284028, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/213807/discussion-between-alexander-fadeev-and-shepmaster\">continue this discussion in chat</a>."}, {"owner": {"reputation": 219, "user_id": 1265504, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72d20529a2f000f4aabd102bc2e0e92e?s=128&d=identicon&r=PG", "display_name": "Kofthefens", "link": "https://stackoverflow.com/users/1265504/kofthefens"}, "edited": false, "score": 3, "creation_date": 1602295373, "post_id": 61772393, "comment_id": 113683816, "body": "As a novice, I really appreciated this answer because it showed how to read from the middle of a slice"}, {"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609170224, "post_id": 61772393, "comment_id": 115766126, "body": "I m currently getting the following error with Rust nightly <code>src[2..6].try_into()</code> method not found."}], "tags": [], "owner": {"reputation": 760, "user_id": 10795361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zisK3.png?s=128&g=1", "display_name": "Alexander Fadeev", "link": "https://stackoverflow.com/users/10795361/alexander-fadeev"}, "is_accepted": false, "score": 6, "last_activity_date": 1602341151, "last_edit_date": 1602341151, "creation_date": 1589366148, "answer_id": 61772393, "question_id": 29307474, "link": "https://stackoverflow.com/questions/29307474/how-can-i-convert-a-buffer-of-a-slice-of-bytes-u8-to-an-integer/61772393#61772393", "title": "How can I convert a buffer of a slice of bytes (&amp;[u8]) to an integer?", "body": "<p>I'd like to give this answer here to commit the following additional details:</p>\n<ol>\n<li>A working code snippet which converts <em>slice</em> to integer (two ways to do it).</li>\n<li>A working solution in <code>no_std</code> environment.</li>\n<li>To keep everything in one place for the people getting here from the search engine.</li>\n</ol>\n<p>Without external crates, the following methods are suitable to convert from <em><strong>slices</strong></em> to integer even for <code>no_std</code> build starting from Rust 1.32:</p>\n<h2>Method 1 (<code>try_into</code> + <code>from_be_bytes</code>)</h2>\n<pre><code>use core::convert::TryInto;\n\nlet src = [1, 2, 3, 4, 5, 6, 7];\n\n// 0x03040506\nu32::from_be_bytes(src[2..6].try_into().unwrap());\n</code></pre>\n<p><code>use core::conver::TryInto</code> is for <code>no_std</code> build. And the way to use the standard crate is the following: <code>use std::convert::TryInto;</code>.</p>\n<p>(And about endians it has been already answered, but let me keep it here in one place: <a href=\"https://doc.rust-lang.org/beta/std/primitive.u32.html#method.from_le_bytes\" rel=\"noreferrer\">from_le_bytes</a>, <a href=\"https://doc.rust-lang.org/beta/std/primitive.u32.html#method.from_be_bytes\" rel=\"noreferrer\">from_be_bytes</a>, and <a href=\"https://doc.rust-lang.org/beta/std/primitive.u32.html#method.from_ne_bytes\" rel=\"noreferrer\">from_ne_bytes</a> - use them depending on how integer is represented in memory).</p>\n<h2>Method 2 (<code>clone_from_slice</code> + <code>from_be_bytes</code>)</h2>\n<pre><code>let src = [1, 2, 3, 4, 5, 6, 7];\nlet mut dst = [0u8; 4];\n\ndst.clone_from_slice(&amp;src[2..6]);\n\n// 0x03040506\nu32::from_be_bytes(dst);\n</code></pre>\n<h2>Result</h2>\n<p>In both cases integer will be equal to <code>0x03040506</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 5500769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f1cf62db02118798500efedb1f756f16?s=128&d=identicon&r=PG&f=1", "display_name": "tpmccallum", "link": "https://stackoverflow.com/users/5500769/tpmccallum"}, "is_accepted": false, "score": 0, "last_activity_date": 1594799665, "creation_date": 1594799665, "answer_id": 62910088, "question_id": 29307474, "link": "https://stackoverflow.com/questions/29307474/how-can-i-convert-a-buffer-of-a-slice-of-bytes-u8-to-an-integer/62910088#62910088", "title": "How can I convert a buffer of a slice of bytes (&amp;[u8]) to an integer?", "body": "<p>This custom serialize_deserialize_u8_i32 library will safely convert back and forth between u8 array and i32 array i.e. the serialise function will take all of your u8 values and pack them into i32 values and the deserialise function will take this library\u2019s custom i32 values and convert them back to the original u8 values that you started with.</p>\n<p>This was built for a specific purpose, however it may come in handy for other uses; depending on whether you want/need a fast/custom converter like this.</p>\n<p><a href=\"https://github.com/second-state/serialize_deserialize_u8_i32\" rel=\"nofollow noreferrer\">https://github.com/second-state/serialize_deserialize_u8_i32</a></p>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 23164, "favorite_count": 4, "accepted_answer_id": 29307778, "answer_count": 3, "score": 23, "last_activity_date": 1602341151, "creation_date": 1427479891, "last_edit_date": 1589379673, "question_id": 29307474, "link": "https://stackoverflow.com/questions/29307474/how-can-i-convert-a-buffer-of-a-slice-of-bytes-u8-to-an-integer", "title": "How can I convert a buffer of a slice of bytes (&amp;[u8]) to an integer?", "body": "<p>I am reading raw data from a file and I want to convert it to an integer:</p>\n\n<pre><code>fn main() {\n    let buf: &amp;[u8] = &amp;[0, 0, 0, 1];\n    let num = slice_to_i8(buf);\n    println!(\"1 == {}\", num);\n}\n\npub fn slice_to_i8(buf: &amp;[u8]) -&gt; i32 {\n    unimplemented!(\"what should I do here?\")\n}\n</code></pre>\n\n<p>I would do a cast in C, but what do I do in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1427474468, "post_id": 29305355, "comment_id": 46805905, "body": "I would have expected Bar::print to error out due to ambiguity... Maybe you found a bug?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427493427, "post_id": 29305355, "comment_id": 46815399, "body": "@ker: why? <code>Bar::print</code> is not ambiguous at all."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427493701, "post_id": 29305355, "comment_id": 46815499, "body": "The associated types part of this question is completely a red herring."}, {"owner": {"reputation": 21, "user_id": 1757781, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eef21b2249cd360954b53a5147c0cfcc?s=128&d=identicon&r=PG", "display_name": "sondrele", "link": "https://stackoverflow.com/users/1757781/sondrele"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427540626, "post_id": 29305355, "comment_id": 46824784, "body": "@ChrisMorgan: Removed associated types from question now. Thanks"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427541609, "post_id": 29305355, "comment_id": 46825113, "body": "because the print function is available through Print on Bar and Print on Foo on Bar"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1427550320, "post_id": 29305355, "comment_id": 46827552, "body": "@ker: \u201cPrint on Foo on Bar\u201d is not a thing. <code>impl Print for Foo</code> is an implementation on the unsized type <code>Foo</code>\u2014that is, <code>&amp;self</code> is of type <code>&amp;Foo</code>, a trait object. If one was to instead want to implement <code>Print</code> for all types that implement <code>Foo</code>, that would be <code>impl&lt;T: Foo&gt; Print for T</code>, and that would fail to compile due to trait coherence rules."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427555486, "post_id": 29305355, "comment_id": 46829126, "body": "oooh... thanks, I was not aware of this distinction at all!"}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1560280333, "last_edit_date": 1560280333, "creation_date": 1427493645, "answer_id": 29310865, "question_id": 29305355, "link": "https://stackoverflow.com/questions/29305355/unresolved-name-for-trait-when-specifying-the-type-type-as-trait/29310865#29310865", "title": "Unresolved name for Trait when specifying the Type (&lt;Type as Trait&gt;)", "body": "<p><code>&lt;A as B&gt;</code> is <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\" rel=\"nofollow noreferrer\">Fully Qualified Syntax (FQS)</a> meaning \u201cfind the implementation of the trait <code>B</code> for the type <code>A</code>\u201d. Your <code>&lt;Bar as Foo&gt;::print</code>, then, is trying to call the <code>print</code> method from the <code>Foo</code> trait with <code>Bar</code> as <code>Self</code>. The <code>Foo</code> trait does not have any such method, and so it quite naturally fails. What you need there for that to work is <code>&lt;Foo as Print&gt;::print</code>.</p>\n\n<p><code>Bar::print</code> looks first for an intrinsic method on the type <code>Bar</code> and then for any method named <code>print</code> on any trait that <code>Bar</code> implements, and so is resolved as <code>&lt;Bar as Print&gt;::print</code>. The deal is the same for <code>Foo::Print</code>.</p>\n"}], "owner": {"reputation": 21, "user_id": 1757781, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eef21b2249cd360954b53a5147c0cfcc?s=128&d=identicon&r=PG", "display_name": "sondrele", "link": "https://stackoverflow.com/users/1757781/sondrele"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 211, "favorite_count": 0, "accepted_answer_id": 29310865, "answer_count": 1, "score": 1, "last_activity_date": 1560280333, "creation_date": 1427473016, "last_edit_date": 1560280288, "question_id": 29305355, "link": "https://stackoverflow.com/questions/29305355/unresolved-name-for-trait-when-specifying-the-type-type-as-trait", "title": "Unresolved name for Trait when specifying the Type (&lt;Type as Trait&gt;)", "body": "<p>I have a struct <code>Bar</code> that implements the <code>Foo</code> trait.</p>\n\n<pre><code>struct Bar;\n\ntrait Foo {\n    fn foo(&amp;self) {\n        print!(\"Foo\");\n    }\n}\n\nimpl Foo for Bar {}\n</code></pre>\n\n<p>I also have <code>Print</code> trait that takes a <code>Kind</code> parameter. Both <code>Foo</code> and <code>Bar</code> implement <code>Print</code> with <code>Bar</code> as its <code>Kind</code>.</p>\n\n<pre><code>trait Print {\n    type Kind;\n    fn print(_: &amp;Self::Kind);\n}\n\nimpl Print for Bar {\n    type Kind = Bar;\n    fn print(_: &amp;Bar) {\n        println!(\"Bar\");\n    }\n}\n\nimpl Print for Foo {\n    type Kind = Bar;\n    fn print(bar: &amp;Bar) {\n        bar.foo();\n        Bar::print(bar);\n    }\n}\n</code></pre>\n\n<p>Finally, I want to print <code>Bar</code> using the different implementations.</p>\n\n<pre><code>fn main() {\n    let b = Bar;\n    Bar::print(&amp;b);          // prints: Bar\n    Foo::print(&amp;b);          // prints: FooBar\n    &lt;Bar as Foo&gt;::print(&amp;b); // error\n}\n</code></pre>\n\n<p>The code is also available in the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d604e6966a0f9cadc4bce60b748d4dd0\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>The two first calls to <code>print</code> works fine but the line <code>&lt;Bar as Foo&gt;::print(&amp;b);</code> gives the following compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0576]: cannot find method or associated constant `print` in trait `Foo`\n  --&gt; src/main.rs:35:19\n   |\n35 |     &lt;Bar as Foo&gt;::print(&amp;b); // error\n   |                   ^^^^^ not found in `Foo`\n</code></pre>\n\n<p>I would have expected the last two lines to print the same thing. Why do I get an error saying that <code>Foo::print</code> is an unresolved name, when the line above works fine? What's the difference between the two lines?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user2030052"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427467384, "post_id": 29303347, "comment_id": 46801204, "body": "Hey @Shepmaster, the book starts talking about IO here: <a href=\"http://doc.rust-lang.org/1.0.0-alpha.2/book/standard-input.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.0.0-alpha.2/book/standard-input.html</a> . The author doesn&#39;t seem to have problems compiling (or if he/she does, they do not indicate any way to remedy it)."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user2030052"}, "edited": false, "score": 0, "creation_date": 1427467672, "post_id": 29303407, "comment_id": 46801396, "body": "This compiles, but when I run it I get a strange result:      <code>Type something:     Good Morning     Here&#39;s what you said : 15</code>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user2030052"}, "edited": false, "score": 0, "creation_date": 1427467815, "post_id": 29303407, "comment_id": 46801490, "body": "Ah, its simply the last line: instead of <code>println!(&quot;Here&#39;s what you said : {}&quot;, input)</code> it should be <code>println!(&quot;Here&#39;s what you said: {}&quot;, s);</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427467915, "post_id": 29303407, "comment_id": 46801561, "body": "@noobProgrammer yup, fixed now. The string is read into <code>s</code> and the count of bytes read is the result value. Silly me!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1427467882, "last_edit_date": 1427467882, "creation_date": 1427467448, "answer_id": 29303407, "question_id": 29303347, "link": "https://stackoverflow.com/questions/29303347/stdio-example-in-rust-book-uses-unstable-library-feature-old-io-what-alterna/29303407#29303407", "title": "stdio example in Rust book uses unstable library feature &#39;old_io&#39; - what alternatives exist?", "body": "<p>This seems to be <a href=\"https://github.com/rust-lang/rust/issues/23760\" rel=\"nofollow\">bug 23760</a>. As a work around, do</p>\n\n<pre><code>fn main() {\n    println!(\"Type something: \");\n\n    let mut s = String::new();\n    let count = std::io::stdin().read_line(&amp;mut s).ok().expect(\"Failed to read line!\");\n\n    println!(\"Here's what you said: {} ({} bytes)\", s, count);\n}\n</code></pre>\n\n<p>Unfortunately, as <a href=\"https://github.com/rust-lang/rust/issues/23760#issuecomment-86746458\" rel=\"nofollow\">Steve points out</a>:</p>\n\n<blockquote>\n  <p>These are the [examples] we can't run automated tests for :(</p>\n</blockquote>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user2030052"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 420, "favorite_count": 0, "accepted_answer_id": 29303407, "answer_count": 1, "score": 1, "last_activity_date": 1427554668, "creation_date": 1427467209, "last_edit_date": 1427554668, "question_id": 29303347, "link": "https://stackoverflow.com/questions/29303347/stdio-example-in-rust-book-uses-unstable-library-feature-old-io-what-alterna", "title": "stdio example in Rust book uses unstable library feature &#39;old_io&#39; - what alternatives exist?", "body": "<p>I have the following Rust code taken from the <a href=\"http://doc.rust-lang.org/1.0.0-alpha.2/book/standard-input.html\" rel=\"nofollow\">Rust book</a>:</p>\n\n<pre><code>fn main() {\nprintln!(\"Type something: \");\n\nlet input = std::old_io::stdin().read_line().ok().expect(\"Failed to read line!\");\n\nprintln!(\"Here's what you said: {}\", input);\n}\n</code></pre>\n\n<p>When I compile this example using <code>rustc hello.rs</code> I get the following output:</p>\n\n<pre><code>hello.rs:4:38: 4:49 error: use of unstable library feature 'old_io'\nhello.rs:4     let input = std::old_io::stdin().read_line().ok().expect(\"Failed\nto read line!\");\n                                                ^~~~~~~~~~~\nhello.rs:4:49: 4:49 help: add #![feature(old_io)] to the crate attributes to ena\nble\nhello.rs:4:17: 4:35 error: use of unstable library feature 'old_io'\nhello.rs:4     let input = std::old_io::stdin().read_line().ok().expect(\"Failed\nto read line!\");\n                           ^~~~~~~~~~~~~~~~~~\nhello.rs:4:35: 4:35 help: add #![feature(old_io)] to the crate attributes to ena\nble\nhello.rs:4:38: 4:49 warning: use of deprecated item, #[warn(deprecated)] on by d\nefault\nhello.rs:4     let input = std::old_io::stdin().read_line().ok().expect(\"Failed\nto read line!\");\n                                                ^~~~~~~~~~~\nhello.rs:4:17: 4:35 warning: use of deprecated item, #[warn(deprecated)] on by d\nefault\nhello.rs:4     let input = std::old_io::stdin().read_line().ok().expect(\"Failed\nto read line!\");\n                           ^~~~~~~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>The documentation author doesn't seem to have problems compiling (or if he/she does, they do not indicate any way to remedy it). Using <code>std::io</code> will give a similar error. What are my options here?</p>\n"}, {"tags": ["tree", "rust", "mutable"], "answers": [{"comments": [{"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "edited": false, "score": 0, "creation_date": 1427447502, "post_id": 29296601, "comment_id": 46789200, "body": "That was a pretty neat trick in the previous version, where you introduced a new scope during the assignment of <code>path</code>."}, {"owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "edited": false, "score": 0, "creation_date": 1427447555, "post_id": 29296601, "comment_id": 46789227, "body": "And I knew it! I was thinking too imperative. I still need to come to terms with the somewhat functional nature of Rust."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1504631783, "last_edit_date": 1504631783, "creation_date": 1427446348, "answer_id": 29296601, "question_id": 29296038, "link": "https://stackoverflow.com/questions/29296038/implementing-a-mutable-tree-structure/29296601#29296601", "title": "Implementing a mutable tree structure", "body": "<p>There are a few things going on here at the same time. The simple answer is: you are trying to create multiple mutable borrows to the same item. Rust forbids you from creating multiple borrows, even if you are not trying to modify them (because that's easier than trying to formally prove that your program is correct).</p>\n\n<p>Since you basically tried to implement a recursive function in an imperative way, I suggest you move to a more functional approach to your problem. I moved out the logic from your loop into a recursive function that is directly implemented on <code>Node</code>.</p>\n\n<pre><code>struct Node {\n    children: Vec&lt;Node&gt;,\n    data: usize,\n}\n\nimpl Node {\n\n    pub fn new() -&gt; Node {\n        Node {\n            children: vec!(),\n            data: 0\n        }\n    }\n\n    pub fn expand(&amp;mut self) {\n        self.children = vec!(Node::new(), Node::new());\n    }\n\n    pub fn is_leaf(&amp;self) -&gt; bool {\n        self.children.len() == 0\n    }\n\n    fn expand_leaf_and_inc(&amp;mut self) {\n        if self.is_leaf() {\n            self.expand();\n        } else {\n            let index = 0;\n            self.children[index].expand_leaf_and_inc();\n        }\n        self.data += 1\n    }\n}\n\npub fn main() {\n    let mut root = Node::new();\n    for _ in 0..10 {\n        root.expand_leaf_and_inc();\n    }\n}\n</code></pre>\n\n<p>If you want to stay imperative, you can use the <code>{node}.children</code> trick to move out of <code>&amp;mut</code> borrows instead of reborrowing them:</p>\n\n<pre><code>let mut root = Node::new();\nfor _ in 0..10 {\n    let mut path = vec![];\n    {\n        let mut node = &amp;mut root;\n        // Descend and potential modify the node in the process\n        while !node.is_leaf() {\n            let index = 0;\n            path.push(index);\n            node = &amp;mut {node}.children[index];\n        }\n        // Do something to the leaf node\n        node.expand();\n    }\n    // Do something during \"backup\" (in my case it doesn't matter\n    // in which order the modification is happening).\n    let mut node = &amp;mut root;\n    for &amp;i in path.iter() {\n        node.data += 1;\n        node = &amp;mut {node}.children[i];\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3753, "user_id": 4936, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/a4852818d512c2ed472bdb0ec3e21102?s=128&d=identicon&r=PG", "display_name": "ujh", "link": "https://stackoverflow.com/users/4936/ujh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4890, "favorite_count": 1, "accepted_answer_id": 29296601, "answer_count": 1, "score": 3, "last_activity_date": 1504631783, "creation_date": 1427444168, "last_edit_date": 1500056789, "question_id": 29296038, "link": "https://stackoverflow.com/questions/29296038/implementing-a-mutable-tree-structure", "title": "Implementing a mutable tree structure", "body": "<p>I'm trying to dynamically build a tree and modify parts of the tree during descent, at the leaves, and during backup. I believe I have a fundamental misunderstanding on how to do something like this in Rust. Here's my code:</p>\n\n<pre><code>struct Node {\n    children: Vec&lt;Node&gt;,\n    data: usize,\n}\n\nimpl Node {\n    pub fn new() -&gt; Node {\n        Node {\n            children: vec![],\n            data: 0,\n        }\n    }\n\n    pub fn expand(&amp;mut self) {\n        self.children = vec![Node::new(), Node::new()];\n    }\n\n    pub fn is_leaf(&amp;self) -&gt; bool {\n        self.children.len() == 0\n    }\n}\n\npub fn main() {\n    let mut root = Node::new();\n    for _ in 0..10 {\n        let mut node = &amp;mut root;\n        let mut path = vec![];\n        // Descend and potential modify the node in the process\n        while !node.is_leaf() {\n            let index = 0;\n            path.push(index);\n            node = &amp;mut node.children[index];\n        }\n        // Do something to the leaf node\n        node.expand();\n        // Do something during \"backup\" (in my case it doesn't matter\n        // in which order the modification is happening).\n        node = &amp;mut root;\n        for &amp;i in path.iter() {\n            node.data += 1;\n            node = &amp;mut node.children[i];\n        }\n    }\n}\n</code></pre>\n\n<p>And this the error message from the compiler:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*node` as immutable because `node.children` is also borrowed as mutable\n  --&gt; src/main.rs:29:16\n   |\n29 |         while !node.is_leaf() {\n   |                ^^^^ immutable borrow occurs here\n...\n32 |             node = &amp;mut node.children[index];\n   |                         ------------- mutable borrow occurs here\n...\n43 |     }\n   |     - mutable borrow ends here\n\nerror[E0506]: cannot assign to `node` because it is borrowed\n  --&gt; src/main.rs:32:13\n   |\n32 |             node = &amp;mut node.children[index];\n   |             ^^^^^^^^^^^^-------------^^^^^^^\n   |             |           |\n   |             |           borrow of `node` occurs here\n   |             assignment to borrowed `node` occurs here\n\nerror[E0499]: cannot borrow `node.children` as mutable more than once at a time\n  --&gt; src/main.rs:32:25\n   |\n32 |             node = &amp;mut node.children[index];\n   |                         ^^^^^^^^^^^^^\n   |                         |\n   |                         second mutable borrow occurs here\n   |                         first mutable borrow occurs here\n...\n43 |     }\n   |     - first borrow ends here\n\nerror[E0499]: cannot borrow `*node` as mutable more than once at a time\n  --&gt; src/main.rs:35:9\n   |\n32 |             node = &amp;mut node.children[index];\n   |                         ------------- first mutable borrow occurs here\n...\n35 |         node.expand();\n   |         ^^^^ second mutable borrow occurs here\n...\n43 |     }\n   |     - first borrow ends here\n\nerror[E0506]: cannot assign to `node` because it is borrowed\n  --&gt; src/main.rs:38:9\n   |\n32 |             node = &amp;mut node.children[index];\n   |                         ------------- borrow of `node` occurs here\n...\n38 |         node = &amp;mut root;\n   |         ^^^^^^^^^^^^^^^^ assignment to borrowed `node` occurs here\n\nerror[E0499]: cannot borrow `root` as mutable more than once at a time\n  --&gt; src/main.rs:38:21\n   |\n26 |         let mut node = &amp;mut root;\n   |                             ---- first mutable borrow occurs here\n...\n38 |         node = &amp;mut root;\n   |                     ^^^^ second mutable borrow occurs here\n...\n43 |     }\n   |     - first borrow ends here\n\nerror[E0506]: cannot assign to `node` because it is borrowed\n  --&gt; src/main.rs:41:13\n   |\n32 |             node = &amp;mut node.children[index];\n   |                         ------------- borrow of `node` occurs here\n...\n41 |             node = &amp;mut node.children[i];\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `node` occurs here\n\nerror[E0499]: cannot borrow `node.children` as mutable more than once at a time\n  --&gt; src/main.rs:41:25\n   |\n32 |             node = &amp;mut node.children[index];\n   |                         ------------- first mutable borrow occurs here\n...\n41 |             node = &amp;mut node.children[i];\n   |                         ^^^^^^^^^^^^^ second mutable borrow occurs here\n42 |         }\n43 |     }\n   |     - first borrow ends here\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427437248, "post_id": 29294311, "comment_id": 46785004, "body": "For this specific case, I hope you know that <code>&lt;i32 as Ord&gt;::cmp</code> is equivalent to your <code>cmp</code> function? (You could also thus write <code>x.cmp(y)</code>.)"}, {"owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1427439771, "post_id": 29294311, "comment_id": 46785918, "body": "@ChrisMorgan yes, I do. The sole purpose is learning and understanding rust idioms."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1427441803, "post_id": 29294311, "comment_id": 46786693, "body": "what&#39;s wrong with <code>if a &lt; b { Ordedering::Less } else if a &gt; b { Ordering::Greater } else { Ordering::Equal }</code>? Conditions are also expressions."}, {"owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427445030, "post_id": 29294311, "comment_id": 46787997, "body": "@ker Nothing is wrong with it, I just know how to program that way, and I am seeking a deeper knowledge of what might be more idiomatic in rust. Is it hard to understand what I&#39;m saying, or is it hard to accept it?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1427445746, "post_id": 29294311, "comment_id": 46788282, "body": "I&#39;m assuming it&#39;s more idiomatic to use conditions as an expression than a match on nothing. But i might be wrong"}], "answers": [{"comments": [{"owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "edited": false, "score": 0, "creation_date": 1427437420, "post_id": 29294443, "comment_id": 46785065, "body": "So what would the syntax look like?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "edited": false, "score": 0, "creation_date": 1427456115, "post_id": 29294443, "comment_id": 46794282, "body": "@Flavius: I give the syntax in my answer: <code>match () {</code>. :)"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 5, "last_activity_date": 1427456261, "last_edit_date": 1427456261, "creation_date": 1427436993, "answer_id": 29294443, "question_id": 29294311, "link": "https://stackoverflow.com/questions/29294311/conditions-in-a-match-arm-without-destructuring/29294443#29294443", "title": "Conditions in a match arm without destructuring", "body": "<p>You need to match on something, i.e. <code>match { ... }</code> isn't valid because there needs to be something between the <code>match</code> and the <code>{</code>. Since you don't care about the value itself, matching on unit, <code>()</code>, should be fine: <code>match () { ... }</code>, e.g.:</p>\n\n<pre><code>match () {\n    _ if a &lt; b =&gt; Ordering::Less,\n    _ if a &gt; b =&gt; Ordering::Greater,\n    _ =&gt; Ordering::Equal\n}\n</code></pre>\n\n<p>(To be strict: <code>match { _ =&gt; ... }</code> is actually trying to parse the <code>{ ... }</code> as the match head (i.e. the expression being matched on), and <code>_</code> isn't valid at the start of an expression, hence the error.)</p>\n\n<p>On idiomacity: I personally think expressing a series of conditions with short results (like this) is fine with <code>match</code> and a series of <code>_ if ...</code>s as you have done.</p>\n"}], "owner": {"reputation": 12451, "user_id": 88054, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/j87ad.jpg?s=128&g=1", "display_name": "Flavius", "link": "https://stackoverflow.com/users/88054/flavius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 709, "favorite_count": 0, "accepted_answer_id": 29294443, "answer_count": 1, "score": 1, "last_activity_date": 1427456261, "creation_date": 1427436366, "last_edit_date": 1427437661, "question_id": 29294311, "link": "https://stackoverflow.com/questions/29294311/conditions-in-a-match-arm-without-destructuring", "title": "Conditions in a match arm without destructuring", "body": "<pre><code>use std::cmp::Ordering;\n\nfn cmp(a: i32, b: i32) -&gt; Ordering {\n    match {\n        _ if a &lt; b =&gt; Ordering::Less,\n        _ if a &gt; b =&gt; Ordering::Greater,\n        _ =&gt; Ordering::Equal,\n    }\n}\n\nfn main() {\n    let x = 5;\n    let y = 10;\n\n    println!(\"{}\", match cmp(x, y) {\n        Ordering::Less =&gt; \"less\",\n        Ordering::Greater =&gt; \"greater\",\n        Ordering::Equal =&gt; \"equal\",\n    });\n}\n</code></pre>\n\n<p>How to use <code>match</code> with conditions, without destructuring (because there's nothing to destructure), in the function <code>cmp</code> above?</p>\n\n<p>The code has been adapted from the well-known example in the book which uses only if/else, however, it does not work:</p>\n\n<pre><code>src/main.rs:5:9: 5:10 error: unexpected token: `_`\nsrc/main.rs:5         _ if a &lt; b =&gt; Ordering::Less,\n                      ^\nCould not compile `match_ordering`.\n</code></pre>\n\n<p>I am using <code>rustc 1.0.0-nightly (3ef8ff1f8 2015-02-12 00:38:24 +0000)</code>.</p>\n\n<p>This would work:</p>\n\n<pre><code>fn cmp(a: i32, b: i32) -&gt; Ordering {\n    match (a, b) {\n        (a,b) if a &lt; b =&gt; Ordering::Less,\n        (a,b) if a &gt; b =&gt; Ordering::Greater,\n        _ =&gt; Ordering::Equal,\n    }\n}\n</code></pre>\n\n<p>but it would use destructuring. Is there any other way, or is this just the most idiomatic, clean way of writing it?</p>\n"}, {"tags": ["floating-point", "rust", "precision", "floating-accuracy", "floating-point-conversion"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 4, "creation_date": 1427418000, "post_id": 29291500, "comment_id": 46780031, "body": "Print at higher precision (e.g. <code>{:.20}</code>) and it becomes apparent they are different; transmute to <code>u32</code> to inspect the bytes, and yes, the first is 0x38da1a92 and the second 0x38da1a93. The mantissa is, as expected by the results, varying by one."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1427465335, "post_id": 29291500, "comment_id": 46799778, "body": "@MatthieuM. good point. moved and updated with a bit more info."}], "answers": [{"comments": [{"owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 0, "creation_date": 1427468633, "post_id": 29302652, "comment_id": 46802101, "body": "This is quite interesting. I wonder if they can&#39;t somehow mimic LLVM&#39;s behavior so as to make this consistent. It&#39;s probably not that easy, but I hope in the long run this gets fixed. Thanks for your answer!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 1, "creation_date": 1427471080, "post_id": 29302652, "comment_id": 46803746, "body": "I think that the desire is that the two implementations act the same eventually. There&#39;s also a certain lack of performance in the current case, so that is probably on the table as well. Having one ULP of difference is probably not at the top of the pile, unfortunately. Maybe you can learn all about it and submit a patch! ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1545015403, "last_edit_date": 1545015403, "creation_date": 1427465312, "answer_id": 29302652, "question_id": 29291500, "link": "https://stackoverflow.com/questions/29291500/why-does-the-compiler-parse-a-floating-point-number-in-a-source-file-differently/29302652#29302652", "title": "Why does the compiler parse a floating point number in a source file differently than at runtime?", "body": "<p>Note that the OP's specific example no longer fails (tested in Rust 1.31.0)</p>\n\n<hr>\n\n<p>It's a <a href=\"https://github.com/rust-lang/rust/issues/7648\" rel=\"nofollow noreferrer\">known issue</a> that the standard library and the rustc lexer parse floating point values differently.</p>\n\n<p>The standard library ultimately calls down to <a href=\"https://github.com/rust-lang/rust/blob/53a183f0274316596bf9405944d4f0468d8c93e4/src/libcore/num/mod.rs#L2599\" rel=\"nofollow noreferrer\">from_str_radix</a>, and you can see the implementation there. I'm not sure exactly <em>where</em> the compilers version of parsing floating-pint literals takes place, but <a href=\"https://github.com/rust-lang/rust/issues/22349#issuecomment-74419926\" rel=\"nofollow noreferrer\">this comment</a> indicates it leverages LLVM:</p>\n\n<blockquote>\n  <p>The compiler uses LLVM to parse literals and we can\u2019t quite depend on LLVM for our standard library.</p>\n</blockquote>\n"}], "owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 29302652, "answer_count": 1, "score": 2, "last_activity_date": 1545015403, "creation_date": 1427417462, "last_edit_date": 1545015359, "question_id": 29291500, "link": "https://stackoverflow.com/questions/29291500/why-does-the-compiler-parse-a-floating-point-number-in-a-source-file-differently", "title": "Why does the compiler parse a floating point number in a source file differently than at runtime?", "body": "<p>I've been working on some Rust projects lately to learn the language and have some fun. I am writing something similar to <a href=\"http://www.hyperrealm.com/libconfig/\" rel=\"nofollow noreferrer\">libconfig</a> in Rust, using the <a href=\"https://crates.io/crates/peg\" rel=\"nofollow noreferrer\">peg</a> crate to generate my parser.</p>\n\n<p>For the last hour, I've been fighting with a weird bug where some values that were parsed from a sample config file didn't compare equal to the expected values.</p>\n\n<p>Ultimately, I narrowed down the bug to this:</p>\n\n<pre><code>fn main() {\n    let my_flt = \"10.4e-5\".parse::&lt;f32&gt;().unwrap();\n    let other_flt = 10.4e-5;\n    println!(\"{} == {} -&gt; {}\", my_flt, other_flt, my_flt == other_flt);\n}\n</code></pre>\n\n<p>Surprisingly, this prints:</p>\n\n<blockquote>\n  <p>0.000104 == 0.000104 -> false</p>\n</blockquote>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9c31e17680ad4de22a037e612c605692\" rel=\"nofollow noreferrer\">See it in the playground</a></p>\n\n<p>Now, I know this <em>has</em> to be something related to the old infamous floating point precision issues. I know that even though two floats might look the same when printed, they can compare differently for various reasons, but I would have guessed that getting a float from <code>parse::&lt;f32&gt;(\"X\")</code> would be equivalent to explicitly declaring and initializing a float to <code>X</code>. Clearly, I'm mistaken, but why?</p>\n\n<p>After all, if I declare and initialize a float to <code>X</code>, internally, the compiler will have to do the same job as <code>parse()</code> when generating the final executable.</p>\n\n<p>Why does the compiler parse the float <code>X</code> in the source file in a different way from the runtime <code>parse::&lt;f32&gt;()</code> function? Shouldn't this be consistent? I'm having such a hard time getting this over with!</p>\n"}, {"tags": ["rust", "type-inference", "traits"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427406660, "post_id": 29289237, "comment_id": 46776210, "body": "Why doesn&#39;t the comparison to a known <code>&amp;str</code> help guide type inference? Playing with some custom implementations of <code>AsRef</code> with multiple destination types, type inference seems to understand the &quot;other type&quot; and use it to remove ambiguity."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427409401, "post_id": 29289237, "comment_id": 46777344, "body": "@Shepmaster: <code>assert_eq</code> does some slightly funky things that have a history of messing with inference a little, and changes in the past few days in particular have caused a little trouble. Hopefully this sort of case will be resolved in the near future, though I certainly can\u2019t guarantee it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1427410288, "post_id": 29289237, "comment_id": 46777662, "body": "But <a href=\"http://is.gd/O5WgsJ\" rel=\"nofollow noreferrer\">it still fails with just a direct equality comparison</a>, which makes me think there is a second implementation that conflicts more directly somewhere. However, I also see that sometimes the <a href=\"http://is.gd/UwBrBU\" rel=\"nofollow noreferrer\"><i>order</i> of items</a> influences type inference, which seems like a bug, so I&#39;ll file that."}, {"owner": {"reputation": 53, "user_id": 4716232, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c9ade7de4b79b65f5551022cb275bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Thomas", "link": "https://stackoverflow.com/users/4716232/thomas"}, "edited": false, "score": 0, "creation_date": 1437121651, "post_id": 29289237, "comment_id": 50908369, "body": "The issue is: <a href=\"https://github.com/rust-lang/rust/issues/23762\" rel=\"nofollow noreferrer\">Order of operands to equality expression matters when inferring a AsRef implementation #23762</a>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 1, "last_activity_date": 1427405378, "creation_date": 1427405378, "answer_id": 29289237, "question_id": 29278940, "link": "https://stackoverflow.com/questions/29278940/type-annotation-required-when-using-as-ref-in-assert-eq/29289237#29289237", "title": "Type annotation required when using `as_ref()` in `assert_eq!()`", "body": "<p>Look at the <a href=\"http://doc.rust-lang.org/std/convert/trait.AsRef.html#implementors\" rel=\"nofollow\">listed implementors of <code>AsRef</code></a> in the documentation in more detail and you find that there is another implementation that collides there: <code>impl&lt;T&gt; AsRef&lt;[T]&gt; for [T]</code>. So it can\u2019t decide whether <code>v.as_ref()</code> should be of type <code>&amp;str</code> or <code>&amp;[Ascii]</code>.</p>\n"}], "owner": {"reputation": 53, "user_id": 4716232, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c9ade7de4b79b65f5551022cb275bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Thomas", "link": "https://stackoverflow.com/users/4716232/thomas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1610, "favorite_count": 0, "accepted_answer_id": 29289237, "answer_count": 1, "score": 5, "last_activity_date": 1427405378, "creation_date": 1427374344, "question_id": 29278940, "link": "https://stackoverflow.com/questions/29278940/type-annotation-required-when-using-as-ref-in-assert-eq", "title": "Type annotation required when using `as_ref()` in `assert_eq!()`", "body": "<p>I'm using the new generic conversion traits in my code and experience reduced ergonomics. The code in question implements <code>AsRef&lt;str&gt; for [Ascii]</code> as you can see in the example.</p>\n\n<p>Now I want to use <code>v.as_ref()</code> in <code>assert_eq!()</code> and expect that <code>v.as_ref()</code> returns a <code>&amp;str</code> using the provided implementation because the second argument to <code>assert_eq!()</code> is of type <code>&amp;str</code>.</p>\n\n<p>There is no implementation of <code>AsRef&lt;String&gt; for [Ascii]</code> so in my opinion only one implementation of <code>PartialEq</code> comes into play: <code>PartialEq&lt;str&gt; for &amp;str</code>.</p>\n\n<p>The compiler doesn't follow my explanation and complains about required type annotations. How can I avoid the explicit annotation and why can't the compiler figure out the correct implementation of <code>AsRef&lt;_&gt;</code>?</p>\n\n<p>Thanks</p>\n\n<pre><code>#![feature(convert)]\n\nstruct Ascii { chr: u8 }\n\nimpl AsRef&lt;str&gt; for [Ascii] {\n    fn as_ref(&amp;self) -&gt; &amp;str {\n        unsafe { ::std::mem::transmute(self) }\n    }\n}\n\nfn main() {\n    let v = [Ascii { chr: 65 }, Ascii { chr: 66 }];\n    assert_eq!(v.as_ref(), \"AB\");\n    // Workaround: explicit type annotation.\n    //assert_eq!(AsRef::&lt;str&gt;::as_ref(&amp;v[..]), \"AB\");\n}\n</code></pre>\n\n<p>Playpen link: <a href=\"http://is.gd/ZcdqXZ\" rel=\"noreferrer\">http://is.gd/ZcdqXZ</a></p>\n\n<pre><code>&lt;anon&gt;:15:18: 15:26 error: type annotations required:\n    cannot resolve `[Ascii] : core::convert::AsRef&lt;_&gt;` [E0283]\n&lt;anon&gt;:15     assert_eq!(v.as_ref(), \"AB\");\n                       ^~~~~~~~\n</code></pre>\n"}, {"tags": ["encoding", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427750728, "post_id": 29278089, "comment_id": 46898048, "body": "<i>&quot;After read the replys, I want to add some info and more question.&quot;</i> - adding more info is OK, but it&#39;s Stack Overflow etiquette to ask different questions separately. Besides, people may not even see your second question."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1427375050, "post_id": 29278859, "comment_id": 46756179, "body": "<i>&quot;you probably don&#39;t want to pass [non-ASCII] on to C&quot;</i> \u2014 why not? I&#39;ve written and used C code that handles UTF-8 just fine."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427383148, "post_id": 29278859, "comment_id": 46762290, "body": "then you should not be working with <code>c_char</code> but with <code>uint8_t</code> or similar"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1427384059, "post_id": 29278859, "comment_id": 46762972, "body": "Even if the C method in question takes in a <code>char *</code>?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427388752, "post_id": 29278859, "comment_id": 46766385, "body": "then it is not supporting utf8 or the interface specification is wrong"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1427393333, "post_id": 29278859, "comment_id": 46769052, "body": "Could you provide some resources that corroborate the claim that C methods that use <code>char *</code> only accept ASCII and that if you intend to use UTF-8 you should use an 8-bit integral type?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1427447777, "post_id": 29278859, "comment_id": 46789355, "body": "i&#39;ll just quietly go hide in a corner now and am sorry for spreading around false information"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1427455120, "last_edit_date": 1427455120, "creation_date": 1427374125, "answer_id": 29278859, "question_id": 29278089, "link": "https://stackoverflow.com/questions/29278089/how-to-update-libcc-char-array-with-string/29278859#29278859", "title": "How to update libc::c_char array with String?", "body": "<p>I suggest updating every character on its own by iterating over the array and the string simultaneously, and assigning the string characters to the array characters. I added the final <code>\\0</code> to the Rust-string.</p>\n\n<pre><code>#![feature(libc)]\nextern crate libc;\n\nfn main() {\n    use libc::c_char;\n\n    type ArrType = [c_char; 20]; // arr_type is the type in C\n    let mut arr : ArrType = [0; 20]; \n\n    let s = \"happy123\\0\";\n    assert!(s.len() &lt;= arr.len());\n    for (a, c) in arr.iter_mut().zip(s.bytes()) {\n        *a = c as i8;\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/VZGQxz\" rel=\"nofollow\">Try it out in the PlayPen</a></p>\n\n<hr>\n\n<p>in most cases llvm will optimize that loop to a memcopy.</p>\n\n<pre><code>define internal void @_ZN4main20hf4c098c7157f3263faaE() unnamed_addr #0 {\nentry-block:\n  %0 = alloca %\"2.core::str::Bytes\", align 8\n  %arg4 = alloca %str_slice, align 8\n  %1 = bitcast %\"2.core::str::Bytes\"* %0 to i8*\n  call void @llvm.lifetime.start(i64 16, i8* %1)\n  %2 = bitcast %str_slice* %arg4 to i8*\n  call void @llvm.lifetime.start(i64 16, i8* %2)\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast (%str_slice* @const26 to i8*), i64 16, i32 8, i1 false)\n  call void @_ZN3str3str5bytes20h68b1cf722a654e56XOgE(%\"2.core::str::Bytes\"* noalias nocapture sret dereferenceable(16) %0, %str_slice* noalias nocapture dereferenceable(16) %arg4)\n  call void @llvm.lifetime.end(i64 16, i8* %2)\n  call void @llvm.lifetime.end(i64 16, i8* %1) #3, !alias.scope !0, !noalias !3\n  call void @llvm.lifetime.end(i64 16, i8* %1)\n  ret void\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1427375937, "creation_date": 1427375937, "answer_id": 29279510, "question_id": 29278089, "link": "https://stackoverflow.com/questions/29278089/how-to-update-libcc-char-array-with-string/29279510#29279510", "title": "How to update libc::c_char array with String?", "body": "<blockquote>\n  <p>In C/C++ I can use memcpy, strcpy etc...</p>\n</blockquote>\n\n<p>There is no problem to use them in Rust also:</p>\n\n<pre><code>extern { fn memcpy(dst: *mut libc::c_void, src: *const libc::c_void, len: libc::size_t); }\n\nlet t_slice: &amp;mut [c_char] = &amp;mut arr;\nunsafe {\n    memcpy(t_slice.as_mut_ptr() as *mut libc::c_void, \n        s_ptr as *const libc::c_void, \n        c_s.as_bytes_with_nul().len() as libc::size_t);\n}\n</code></pre>\n\n<p>But it's better to use rust equivalent <a href=\"http://doc.rust-lang.org/std/ptr/fn.copy_nonoverlapping.html\" rel=\"nofollow\">std::ptr::copy_nonoverlapping</a> from ptr module:</p>\n\n<pre><code>let t_slice: &amp;mut [c_char] = &amp;mut arr;\nunsafe {\n    ptr::copy_nonoverlapping(t_slice.as_mut_ptr(), s_ptr, c_s.as_bytes_with_nul().len());\n}\n</code></pre>\n\n<p>You should note <code>unsafe</code> blocks however, so it's your responsibility to check if there is enough space in <code>arr</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1427752533, "creation_date": 1427752533, "answer_id": 29357052, "question_id": 29278089, "link": "https://stackoverflow.com/questions/29278089/how-to-update-libcc-char-array-with-string/29357052#29357052", "title": "How to update libc::c_char array with String?", "body": "<p>Here's one solution that doesn't require unsafe code, but unfortunately most of the methods are marked unstable.</p>\n\n<pre><code>#![feature(libc)]\n#![feature(core)]\n#![feature(collections)]\n\nextern crate libc;\n\nuse libc::c_char;\nuse std::ffi::CString;\nuse std::slice::IntSliceExt;\n\ntype arr_type = [c_char; 20];\n\nfn main() {\n    let mut c_string: arr_type = [0; 20]; \n    let value = CString::new(\"happy123\").unwrap();\n\n    c_string.clone_from_slice(value.as_bytes_with_nul().as_signed());\n}\n</code></pre>\n"}], "owner": {"reputation": 237, "user_id": 4716298, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c11dd6bca3d9fa2122bc6b3a513b28d0?s=128&d=identicon&r=PG&f=1", "display_name": "sbant", "link": "https://stackoverflow.com/users/4716298/sbant"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1974, "favorite_count": 0, "accepted_answer_id": 29357052, "answer_count": 3, "score": 3, "last_activity_date": 1427752533, "creation_date": 1427371804, "last_edit_date": 1427426765, "question_id": 29278089, "link": "https://stackoverflow.com/questions/29278089/how-to-update-libcc-char-array-with-string", "title": "How to update libc::c_char array with String?", "body": "<p>I have write some FFI code to C/C++,</p>\n\n<pre><code>use libc::c_char;\nuse std::ffi::CString;\n\ntype arr_type = [c_char; 20]; // arr_type is the type in C\nlet mut arr : arr_type = [0; 20]; \n\nlet s = \"happy123\";\nlet c_s = CString::new(s).unwrap();\nlet s_ptr = c_s.as_ptr();\n</code></pre>\n\n<p>How can I update <code>arr</code> with the String <code>s</code>? In C/C++ I can use <code>memcpy</code>, <code>strcpy</code> etc...</p>\n\n<p>I have tried many, like use rlibc::memcpy and found it can't be used with libc.. , but the compiler don't let me pass, there is very few info about array in Rust.</p>\n\n<hr>\n\n<p>Add:\nAfter read the replys, I want to add some info and more question.</p>\n\n<p>1.</p>\n\n<p>In C++, I use <code>strcpy_s</code> to copy string to char array, cause the length of string and the size of array are all known.</p>\n\n<p>I have tried both methods below.</p>\n\n<p>the <code>std::iter::Zip</code> method, seems very like <code>strcpy_s</code>, but I don't know if there is some performance affect.</p>\n\n<p>the <code>copy_nonoverlapping</code> method, it use <code>as_mut_ptr()</code> cast the array to pointer then there is no length info, since it is in <code>unsafe { }</code> block, and I have tried copy a string longer then the array and there is no error displays... I wonder if that's ok?</p>\n\n<p>And is there a function in Rust like strcpy_s in C++?</p>\n\n<p>2.</p>\n\n<p>I'm using windows and msvc, for the char array, I mean <code>not deal with encoding</code> or use <code>default codepage encoding</code>.</p>\n\n<p>below are all ok in source file:</p>\n\n<p>C++:</p>\n\n<pre><code>std::string s = \"world is \u4e16\u754c\";\nstd::wstring ws = L\"world is \u4e16\u754c\";\n</code></pre>\n\n<p>Qt:</p>\n\n<pre><code>QString qs = QStringLiteral(\"world is \u4e16\u754c\");\n</code></pre>\n\n<p>Python 3:</p>\n\n<pre><code>s = 'world is \u4e16\u754c'\n</code></pre>\n\n<p>But in Rust, below may be wrong? as I see in Eclipse Debug window.</p>\n\n<pre><code>let s = \"world is \u4e16\u754c\";\n</code></pre>\n\n<p>I found rust-encoding and tried these:</p>\n\n<pre><code>use encoding::{Encoding, EncoderTrap};\nuse encoding::all::GB18030;\n\nlet s = \"world is \u4e16\u754c\";  \nlet enc = GB18030.encode(&amp;s , EncoderTrap::Strict);\n</code></pre>\n\n<p>Is there any better way to do in Rust?</p>\n"}]