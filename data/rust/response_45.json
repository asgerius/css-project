[{"tags": ["string", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 1, "last_activity_date": 1447855308, "creation_date": 1447855308, "answer_id": 33782067, "question_id": 33781625, "link": "https://stackoverflow.com/questions/33781625/how-to-allocate-a-string-before-you-know-how-big-it-needs-to-be/33782067#33782067", "title": "How to allocate a string before you know how big it needs to be", "body": "<p>The problem is that you are <em>already</em> allocating a new string for every iteration (there's nowhere for the <code>Lines</code> iterator to store a buffer, so it has to allocate a fresh <code>String</code> for each line), but you're trying to store a slice into it outside the loop.</p>\n\n<p>You also can't really know how big an externally allocated <code>String</code> would need to be in this case... so typically you wouldn't worry about it and just resize as necessary.</p>\n\n<p>The <em>simplest</em> way is probably to make <code>latest_activity</code> an <code>Option&lt;String&gt;</code>.  When you want to <em>change</em> it, you can use <code>.clear()</code> followed by <code>.push_str(s)</code> (see the <a href=\"http://doc.rust-lang.org/std/string/struct.String.html\" rel=\"nofollow\"><code>String</code> documentation</a>).  This should re-use the existing allocation if it's large enough, resizing if it isn't.  It might require some re-allocating, but nothing major (provided you don't, for example, try to store increasingly longer and longer strings).</p>\n\n<p>Another possibility would be to just store <code>wrapped_line</code> itself, moving it out of the loop.  You could store that alongside the slice indices, and then do the <em>actual</em> slicing outside the loop (no, you can't just store the <code>String</code> and the <code>&amp;str</code> slice separately <em>or</em> together with just standard library types).</p>\n"}], "owner": {"reputation": 37702, "user_id": 129805, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/F1gxS.png?s=128&g=1", "display_name": "fadedbee", "link": "https://stackoverflow.com/users/129805/fadedbee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 62, "favorite_count": 1, "accepted_answer_id": 33782067, "answer_count": 1, "score": -1, "last_activity_date": 1447855308, "creation_date": 1447854106, "last_edit_date": 1447854533, "question_id": 33781625, "link": "https://stackoverflow.com/questions/33781625/how-to-allocate-a-string-before-you-know-how-big-it-needs-to-be", "title": "How to allocate a string before you know how big it needs to be", "body": "<p>I'm sure this is a beginners mistake.  My code is:</p>\n\n<pre><code>...\nlet mut latest_date : Option&lt;Date&lt;Local&gt;&gt; = None;\nlet mut latest_datetime : Option&lt;DateTime&lt;Local&gt;&gt; = None;\nlet mut latest_activity : Option&lt;&amp;str&gt; = None;\n\nfor wrapped_line in reader.lines() {\n    let line = wrapped_line.unwrap();\n    println!(\"line: {}\", line);\n\n    if date_re.is_match(&amp;line) {\n        let captures = date_re.captures(&amp;line).unwrap();\n        let year = captures.at(1).unwrap().parse::&lt;i32&gt;().unwrap();\n        let month = captures.at(2).unwrap().parse::&lt;u32&gt;().unwrap();\n        let day = captures.at(3).unwrap().parse::&lt;u32&gt;().unwrap();\n        latest_date = Some(Local.ymd(year, month, day));\n        println!(\"date: {}\", latest_date.unwrap());\n    }\n\n    if time_activity_re.is_match(&amp;line) &amp;&amp; latest_date != None {\n        let captures = time_activity_re.captures(&amp;line).unwrap();\n        let hour = captures.at(1).unwrap().parse::&lt;u32&gt;().unwrap();\n        let minute = captures.at(2).unwrap().parse::&lt;u32&gt;().unwrap();\n        let activity = captures.at(3).unwrap();\n\n        latest_datetime = Some(latest_date.unwrap().and_hms(hour, minute, 0));\n\n        latest_activity = if activity.len() &gt; 0 {\n            Some(activity)\n        } else {\n            None\n        };\n\n        println!(\"time activity: {} |{}|\", latest_datetime.unwrap(), activity);\n    }\n}\n...\n</code></pre>\n\n<p>My error is:</p>\n\n<pre><code>   Compiling tt v0.1.0 (file:///home/chris/cloud/tt)\nsrc/main.rs:69:55: 69:59 error: `line` does not live long enough\nsrc/main.rs:69             let captures = time_activity_re.captures(&amp;line).unwrap();\n                                                                     ^~~~\nsrc/main.rs:55:5: 84:6 note: in this expansion of for loop expansion\nsrc/main.rs:53:51: 86:2 note: reference must be valid for the block suffix following statement 7 at 53:50...\nsrc/main.rs:53     let mut latest_activity : Option&lt;&amp;str&gt; = None;\nsrc/main.rs:54 \nsrc/main.rs:55     for wrapped_line in reader.lines() {\nsrc/main.rs:56         let line = wrapped_line.unwrap();\nsrc/main.rs:57         println!(\"line: {}\", line);\nsrc/main.rs:58 \n               ...\nsrc/main.rs:56:42: 84:6 note: ...but borrowed value is only valid for the block suffix following statement 0 at 56:41\nsrc/main.rs:56         let line = wrapped_line.unwrap();\nsrc/main.rs:57         println!(\"line: {}\", line);\nsrc/main.rs:58 \nsrc/main.rs:59         if date_re.is_match(&amp;line) {\nsrc/main.rs:60             let captures = date_re.captures(&amp;line).unwrap();\nsrc/main.rs:61             let year = captures.at(1).unwrap().parse::&lt;i32&gt;().unwrap();\n               ...\nerror: aborting due to previous error\nCould not compile `tt`.\n</code></pre>\n\n<p>I think the problem is that the <code>latest_activity : Option&lt;&amp;str&gt;</code> lives longer than <code>line</code> inside the loop iteration where <code>latest_activity</code> is reassigned.</p>\n\n<p>Is the correct?</p>\n\n<p>If so, what's the best way of fixing it.  The cost of allocating a new string does not bother me, though I would prefer not to do that for each iteration.</p>\n\n<p>I feel I may need a reference-counted box to put the <code>activity</code> in - is this the right approach?</p>\n\n<p>I could allocate a <code>String</code> outside of the loop - but how can I do so before I know how big it will need to be?</p>\n"}, {"tags": ["rust", "optional"], "answers": [{"comments": [{"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1447869631, "post_id": 33779802, "comment_id": 55341058, "body": "Thanks, that&#39;s actually a pretty good solution for when you only need to do this once or twice. Probably still worth it to define the function in some cases, though."}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 0, "creation_date": 1530553269, "post_id": 33779802, "comment_id": 89266541, "body": "Another option that&#39;s a little longer but maybe easier to follow: <code>a.and_then(|a| b.and_then(|b| Some(f(a, b))))</code>"}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 23, "last_activity_date": 1447848899, "creation_date": 1447848899, "answer_id": 33779802, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options/33779802#33779802", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<p>I don't believe there's a direct function equivalent to <code>liftM2</code>, but you can combine <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then\"><code>Option::and_then</code></a> and <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.map\"><code>Option::map</code></a> like this:</p>\n\n<pre><code>fn main() {\n    let a = Some(5);\n    let b = Some(10);\n    let f = |a, b| {\n        a + b\n    };\n\n    println!(\"{:?}\", a.and_then(|a| b.map(|b| f(a, b))));\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Some(15)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1447851921, "post_id": 33780522, "comment_id": 55327964, "body": "alternative: <code>map(|(a,b)| f(a,b))</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1447863461, "post_id": 33780522, "comment_id": 55336967, "body": "yes, I was trying to avoid repeating the function call. If you are repeating it, then @Dogbert&#39;s solution is the better one."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1447850903, "creation_date": 1447850903, "answer_id": 33780522, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options/33780522#33780522", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<p>You can use the fact that <code>Option</code>s can be iterated over. Iterate over both options, zip them together, and map the resulting iterator over your function.</p>\n\n<pre><code>fn main() {\n    let a = Some(5);\n    let b = Some(10);\n    let f = |(a, b)| {\n        a + b\n    };\n    let res = a.iter().zip(b.iter()).map(f).next();\n    println!(\"{:?}\", res);\n    // prints Some(15)\n}\n</code></pre>\n\n<p>This required a modification of <code>f</code>, so the arguments are merged into a single tuple-argument. It would be possible without modifying <code>f</code>, by directly mapping over <code>|args| f.call(args)</code>, but then you would have to <a href=\"http://is.gd/iNOpPY\" rel=\"noreferrer\">specify the closure kind of <code>f</code></a>.</p>\n"}, {"comments": [{"owner": {"reputation": 10086, "user_id": 3198973, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/cPPKQ.png?s=128&g=1", "display_name": "RubberDuck", "link": "https://stackoverflow.com/users/3198973/rubberduck"}, "edited": false, "score": 0, "creation_date": 1530457025, "post_id": 46535782, "comment_id": 89233839, "body": "I find this to be incomplete. If a or b is <code>None</code> this returns <code>None</code> where it should return either <code>Some(5)</code> or <code>Some(10)</code> respectively."}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "reply_to_user": {"reputation": 10086, "user_id": 3198973, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/cPPKQ.png?s=128&g=1", "display_name": "RubberDuck", "link": "https://stackoverflow.com/users/3198973/rubberduck"}, "edited": false, "score": 3, "creation_date": 1530553093, "post_id": 46535782, "comment_id": 89266456, "body": "I&#39;m not sure it should. Note that both the example in the original question, and the <code>and_then</code>+<code>map</code> example above, return <code>None</code> if <i>either</i> argument is <code>None</code>. In general, if the return type of <code>f</code> is different from the type of its arguments, it might not be possible to return anything other than <code>None</code>. That said, if you want the fallback in this case, you can replace the <code>_ =&gt; None</code> clause with <code>_ =&gt; a.or(b)</code>."}], "tags": [], "owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "is_accepted": false, "score": 10, "last_activity_date": 1530553313, "last_edit_date": 1530553313, "creation_date": 1506992601, "answer_id": 46535782, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options/46535782#46535782", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<p>I don't know if you can get down to one line (Edit: oh the accepted answer gets it down to one line nicely), but you can avoid the nested <code>match</code> by matching on a tuple:</p>\n\n<pre><code>let a = Some(5);\nlet b = Some(10);\nlet f = |a, b| {\n    a + b\n};\nlet res = match (a, b) {\n    (Some(a), Some(b)) =&gt; Some(f(a, b)),\n    _ =&gt; None,\n};\nprintln!(\"{:?}\", res);\n// prints Some(15)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1561128460, "post_id": 56696990, "comment_id": 99974777, "body": "Your &quot;option 2&quot; is already present in <a href=\"https://stackoverflow.com/a/33779802/155423\">the highest-voted answer</a>"}], "tags": [], "owner": {"reputation": 19712, "user_id": 418400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/eca5ce283c385cc58d40708f6a97194b?s=128&d=identicon&r=PG&f=1", "display_name": "Ben", "link": "https://stackoverflow.com/users/418400/ben"}, "is_accepted": false, "score": 3, "last_activity_date": 1561439537, "last_edit_date": 1561439537, "creation_date": 1561092429, "answer_id": 56696990, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options/56696990#56696990", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<pre><code>let num_maybe = Some(5);\nlet num_maybe2 = Some(10);\nlet f = |a, b| {\n    a + b\n};\n</code></pre>\n\n<h3>Option 1</h3>\n\n<pre><code>if let (Some(a), Some(b)) = (num_maybe, num_maybe2) {\n    f(a, b)\n}\n</code></pre>\n\n<h3>Option 2</h3>\n\n<pre><code>num_maybe.and_then(|a| num_maybe2.map(|b| f(a, b))\n</code></pre>\n\n<h3>Option 3</h3>\n\n<pre><code>[num_maybe, num_maybe2].into_iter().flatten().fold(0, f)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1589968692, "post_id": 61898301, "comment_id": 109500839, "body": "Well that&#39;s pretty neat. Even when it is worth it to define <code>map2</code>, <code>Some(f(a?, b?))</code> is a much nicer implementation than the one I wrote back in 2015."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1589913338, "creation_date": 1589913338, "answer_id": 61898301, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options/61898301#61898301", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<p>You can use an <a href=\"https://en.wikipedia.org/wiki/Immediately_invoked_function_expression\" rel=\"noreferrer\">immediately invoked function expression (IIFE)</a> combined with the <code>?</code> (try) operator:</p>\n\n<pre><code>fn main() {\n    let a = Some(5);\n    let b = Some(10);\n    let f = |a, b| a + b;\n\n    let res = (|| Some(f(a?, b?)))();\n\n    println!(\"{:?}\", res);\n}\n</code></pre>\n\n<p>In the future, you can use <em>try blocks</em>:</p>\n\n<pre><code>#![feature(try_blocks)]\n\nfn main() {\n    let a = Some(5);\n    let b = Some(10);\n    let f = |a, b| a + b;\n\n    let res: Option&lt;_&gt; = try { f(a?, b?) };\n\n    println!(\"{:?}\", res);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/55155493/155423\">Is there a more ergonomic syntax for Either when using futures?</a></li>\n<li><a href=\"https://stackoverflow.com/q/49785136/155423\">Is there a shortcut to unwrap or continue in a loop?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1600278454, "creation_date": 1600278454, "answer_id": 63925411, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options/63925411#63925411", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<p>As of Rust 1.46.0, you can use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.zip\" rel=\"noreferrer\"><code>Option::zip</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn map2&lt;T, U, V, F: Fn(T, U) -&gt; V&gt;(f: F, a: Option&lt;T&gt;, b: Option&lt;U&gt;) -&gt; Option&lt;V&gt; {\n    match a.zip(b) {\n        Some((x, y)) =&gt; Some(f(x, y)),\n        None =&gt; None,\n    }\n}\n</code></pre>\n<p>This can be combined with <code>Option::map</code>, as shown in other answers:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn map2&lt;T, U, V, F: Fn(T, U) -&gt; V&gt;(f: F, a: Option&lt;T&gt;, b: Option&lt;U&gt;) -&gt; Option&lt;V&gt; {\n    a.zip(b).map(|(x, y)| f(x, y))\n}\n</code></pre>\n"}], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4927, "favorite_count": 3, "accepted_answer_id": 33779802, "answer_count": 6, "score": 23, "last_activity_date": 1600278454, "creation_date": 1447848169, "last_edit_date": 1447855655, "question_id": 33779562, "link": "https://stackoverflow.com/questions/33779562/is-there-any-built-in-way-to-combine-two-options", "title": "Is there any built in way to &quot;combine&quot; two Options?", "body": "<p>In the following sample program, is there any way I could avoid having to define <code>map2</code>?</p>\n\n<pre><code>fn map2&lt;T, U, V, F: Fn(T, U) -&gt; V&gt;(f: F, a: Option&lt;T&gt;, b: Option&lt;U&gt;) -&gt; Option&lt;V&gt; {\n    match a {\n        Some(x) =&gt; match b {\n            Some(y) =&gt; Some(f(x, y)),\n            None =&gt; None,\n        },\n        None =&gt; None,\n    }\n}\n\nfn main() {\n    let a = Some(5);\n    let b = Some(10);\n    let f = |a, b| {\n        a + b\n    };\n    let res = map2(f, a, b);\n    println!(\"{:?}\", res);\n    // prints Some(15)\n}\n</code></pre>\n\n<p>For people who also speak Haskell, I guess this question could also be phrased as \"Is there any tool we can use instead of <a href=\"https://www.haskell.org/hoogle/?hoogle=liftM2\" rel=\"noreferrer\">liftM2</a> in Rust?\"</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1447855963, "post_id": 33775261, "comment_id": 55331108, "body": "Or <code>Ok(..)</code>, just in case the standard library decides to change and break every Rust program in existence. Seriously, I tend to use the <code>..</code> as it&#39;s more universally applicable when I don&#39;t want <i>any</i> of the values."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 6, "last_activity_date": 1447836069, "creation_date": 1447836069, "answer_id": 33775261, "question_id": 33774985, "link": "https://stackoverflow.com/questions/33774985/error-while-pattern-matching-ioresult/33775261#33775261", "title": "Error while pattern matching io::Result", "body": "<pre><code>Ok =&gt; println!(\"File was written\"),\n</code></pre>\n\n<p>should be</p>\n\n<pre><code>Ok(()) =&gt; println!(\"File was written\"),\n</code></pre>\n\n<p>because the <code>Ok</code> constructor always takes an argument, even if that argument is <code>()</code>. You could also use <code>Ok(_)</code> if you prefer.</p>\n"}], "owner": {"reputation": 40088, "user_id": 205270, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/Q5hW8.jpg?s=128&g=1", "display_name": "demas", "link": "https://stackoverflow.com/users/205270/demas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 310, "favorite_count": 0, "accepted_answer_id": 33775261, "answer_count": 1, "score": 3, "last_activity_date": 1447850784, "creation_date": 1447835218, "last_edit_date": 1447850784, "question_id": 33774985, "link": "https://stackoverflow.com/questions/33774985/error-while-pattern-matching-ioresult", "title": "Error while pattern matching io::Result", "body": "<p>Here is my code:</p>\n\n<pre><code>fn main() {\n    use std::io::prelude::*;\n    use std::fs::File;\n\n    fn write_file() -&gt; std::io::Result&lt;()&gt; {\n        let mut f = try!(File::create(\"foo.txt\"));\n        try!(f.write_all(b\"Hello, world!\"));\n    }\n\n    match write_file() {\n        Ok =&gt; println!(\"File was written\"),\n        Err(ex) =&gt; println!(\"{}\", ex)\n    };\n}\n</code></pre>\n\n<p>I have an error:</p>\n\n<pre><code>src/main.rs:11:9: 11:11 error: this pattern has 0 fields, but the corresponding variant has 1 field [E0023]\nsrc/main.rs:11         Ok =&gt; println!(\"File was written\"),\n                       ^~\n</code></pre>\n\n<p>Why and how can I fix it ?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2377, "user_id": 3829874, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/x6jBb.jpg?s=128&g=1", "display_name": "Sam", "link": "https://stackoverflow.com/users/3829874/sam"}, "edited": false, "score": 0, "creation_date": 1447840967, "post_id": 33775486, "comment_id": 55320434, "body": "Thanks. How does one map the expression tree into a syntax tree that the rust compiler understands OR can the compiler only handle rust source code in some text representation?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 2377, "user_id": 3829874, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/x6jBb.jpg?s=128&g=1", "display_name": "Sam", "link": "https://stackoverflow.com/users/3829874/sam"}, "edited": false, "score": 0, "creation_date": 1447847697, "post_id": 33775486, "comment_id": 55325147, "body": "phew, that requires a lower level interface than the one I showed. It&#39;s certainly possible, but you need to create the AST (the HIR) yourself. I suggest you look at the <code>librustc*</code> and see how the rustc binary is created."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1447847529, "last_edit_date": 1447847529, "creation_date": 1447836895, "answer_id": 33775486, "question_id": 33772512, "link": "https://stackoverflow.com/questions/33772512/how-to-programmatically-compile-rust-programs/33775486#33775486", "title": "How to programmatically compile Rust programs?", "body": "<p>Yes there is. The Rust compiler itself. The entire compiler is a library and <code>rustc</code> is just a small crate that calls into the compiler. As an example there's the <a href=\"https://github.com/nrc/stupid-stats\" rel=\"nofollow\"><code>stupid-stats</code></a> crate. It runs the rust compiler to generate some statistics about the code.</p>\n\n<p>All you need is to import the <code>rustc</code> and <code>rustc_driver</code> crates (with <code>extern crate</code>) and implement the <code>rustc_driver::CompilerCalls</code> trait for a type (lets call it <code>MyDriver</code>). Then you can run rustc like this:</p>\n\n<pre><code>let args: Vec&lt;_&gt; = std::env::args().collect();\nlet mut my_driver = MyDriver::new();\nrustc_driver::run_compiler(&amp;args, &amp;mut my_driver);\n</code></pre>\n\n<p>You need to make sure that the path to the standard library and core library is passed. In my case I added</p>\n\n<pre><code>\"-L $HOME/.multirust/toolchains/nightly/lib/rustlib/x86_64-unknown-linux-gnu/lib\"\n</code></pre>\n\n<p>to the command line. You cannot simply add this to the <code>args</code> vector, because <code>$HOME</code> isn't parsed here. So you need some more code that extracts the <code>$HOME</code> env var and builds your command.</p>\n"}], "owner": {"reputation": 2377, "user_id": 3829874, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/x6jBb.jpg?s=128&g=1", "display_name": "Sam", "link": "https://stackoverflow.com/users/3829874/sam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 474, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1447855418, "creation_date": 1447824825, "last_edit_date": 1495540745, "question_id": 33772512, "link": "https://stackoverflow.com/questions/33772512/how-to-programmatically-compile-rust-programs", "title": "How to programmatically compile Rust programs?", "body": "<p>Given metadata about the library I am trying to create in the form of an expression tree, I would like to be able to convert this into some sort of Rust-specific syntax tree that can be given to the Rust compiler.</p>\n\n<p>I found a <a href=\"https://stackoverflow.com/questions/14459647/is-it-possible-to-generate-and-execute-rust-code-at-runtime\">related question</a> but it is outdated. </p>\n"}, {"tags": ["struct", "rust"], "comments": [{"owner": {"reputation": 1366, "user_id": 4807889, "user_type": "registered", "accept_rate": 45, "profile_image": "https://graph.facebook.com/10153645629657370/picture?type=large", "display_name": "mjwrazor", "link": "https://stackoverflow.com/users/4807889/mjwrazor"}, "edited": false, "score": 0, "creation_date": 1489628848, "post_id": 33770989, "comment_id": 72759038, "body": "How is this a matrix? A matrix would have a Vec&lt;Vec&lt;f32&gt;&gt; not just one vector."}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1447816237, "post_id": 33771089, "comment_id": 55309751, "body": "Using arrays instead of tuples is a nice trick I saw from <a href=\"https://github.com/sellibitze/multiarray\" rel=\"nofollow noreferrer\">multiarray</a>. <code>matrix[[0, 1]]</code> looks good and is easier to type."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1447816287, "post_id": 33771089, "comment_id": 55309762, "body": "@bluss mmm, neat indeed! You want I should add it in here, or do you want to have a separate answer?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1447816356, "post_id": 33771089, "comment_id": 55309777, "body": "Here is fine, I thought it&#39;s just a minor detail."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1447816644, "post_id": 33771089, "comment_id": 55309854, "body": "@bluss: I\u2019d do tuples rather than arrays there. Probably my Python background speaking there, where <code>foo[bar, baz]</code> is <code>foo.__getitem__((bar, baz))</code>. (Python does a lot of permitting parenthesis omission with tuples, e.g. <code>foo, bar = baz</code>, <code>foo = bar, baz</code>. Rust doesn\u2019t do any, for now at least.)"}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447818273, "post_id": 33771089, "comment_id": 55310228, "body": "Thanks for the solution! It&#39;s a shame this can&#39;t be done as in most other languages but the array solution works nicely."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1447849328, "post_id": 33771089, "comment_id": 55326163, "body": "Sorry for off topic: Could you list some of these &quot;most other&quot; languages? AFAIK it&#39;s not possible in Java, C and C++ to name three big ones..."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1447853598, "post_id": 33771089, "comment_id": 55329246, "body": "@ChrisMorgan: The nice thing about arrays as index is that you can rely on <code>[usize; N]</code> implementing <code>AsRef&lt;[usize]&gt;</code> in generic code to support multiple dimensions more easily. I think if you want to go with tuples you would have to do more special casing for the dimensions. Of course, if you are restricted to 2D, this does not make a difference. But it would be nice to be consistent between different numbers of dimensions. (I&#39;m the author of the multiarray crate, btw)"}, {"owner": {"reputation": 1366, "user_id": 4807889, "user_type": "registered", "accept_rate": 45, "profile_image": "https://graph.facebook.com/10153645629657370/picture?type=large", "display_name": "mjwrazor", "link": "https://stackoverflow.com/users/4807889/mjwrazor"}, "edited": false, "score": 0, "creation_date": 1489628957, "post_id": 33771089, "comment_id": 72759068, "body": "@Shepmaster , Could you possibly have an answer to add Indexing to an actual matrix?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1447816566, "last_edit_date": 1495540825, "creation_date": 1447815732, "answer_id": 33771089, "question_id": 33770989, "link": "https://stackoverflow.com/questions/33770989/implementing-the-index-operator-for-matrices-with-multiple-parameters/33771089#33771089", "title": "Implementing the Index operator for matrices with multiple parameters", "body": "<p>In short, you cannot do this. The <a href=\"http://doc.rust-lang.org/core/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>Index</code> trait</a> is defined as:</p>\n\n<pre><code>pub trait Index&lt;Idx: ?Sized&gt; {\n    type Output: ?Sized;\n    fn index(&amp;self, index: Idx) -&gt; &amp;Self::Output;\n}\n</code></pre>\n\n<p>That is, it takes a <em>single</em> argument of type <code>Idx</code>. The closest you can do is to use a tuple, which is a single type with multiple values packed into it:</p>\n\n<pre><code>impl std::ops::Index&lt;(usize, usize)&gt; for Matrix {\n    type Output = f32;\n\n    fn index(&amp;self, idx: (usize, usize)) -&gt; &amp;f32 {\n        // or as appropriate for row- or column-major data       \n        &amp;self.data[idx.0 * self.cols + idx.1]\n    }\n}\n</code></pre>\n\n<p>And it would be called like</p>\n\n<pre><code>matrix[(0, 1)]\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/33770989/implementing-the-index-operator-for-matrices-with-multiple-parameters/33771089?noredirect=1#comment55309751_33771089\">bluss points out</a> that the <a href=\"https://github.com/sellibitze/multiarray\" rel=\"nofollow noreferrer\">multiarray crate</a> uses two-element arrays instead of a tuple. This is probably easier to type as you can just hit the square brackets twice:</p>\n\n<pre><code>impl std::ops::Index&lt;[usize; 2]&gt; for Matrix {\n    type Output = f32;\n\n    fn index(&amp;self, idx: [usize; 2]) -&gt; &amp;f32 {\n        // or as appropriate for row- or column-major data       \n        &amp;self.data[idx[0] * self.cols + idx[1]]\n    }\n}\n</code></pre>\n\n<p>And it's called like <code>matrix[[0, 1]]</code>. The important thing is that there's still just a single value provided as the argument to <code>index</code>.</p>\n\n<p>Repeat the implementation as desired for <a href=\"http://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"nofollow noreferrer\"><code>Range</code></a>, <a href=\"http://doc.rust-lang.org/std/ops/struct.RangeTo.html\" rel=\"nofollow noreferrer\"><code>RangeTo</code></a>, <a href=\"http://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"nofollow noreferrer\"><code>RangeFrom</code></a>, and <a href=\"http://doc.rust-lang.org/std/ops/struct.RangeFull.html\" rel=\"nofollow noreferrer\"><code>RangeFull</code></a>. These are all single types, so you can call it like <code>matrix[5..]</code>, for whatever that might mean.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 8, "last_activity_date": 1447829858, "creation_date": 1447829858, "answer_id": 33773646, "question_id": 33770989, "link": "https://stackoverflow.com/questions/33770989/implementing-the-index-operator-for-matrices-with-multiple-parameters/33773646#33773646", "title": "Implementing the Index operator for matrices with multiple parameters", "body": "<p>Another possibility would be to use 2D-array style indexing like <code>m[0][1]</code>. This is definitely possible -- even quite easy in your case. Your <code>Index</code> implementation just has to return something that is indexable again. Code:</p>\n\n<pre><code>use std::ops::Index;\n\nstruct Matrix {\n    cols: usize,\n    rows: usize,\n    data: Vec&lt;f32&gt;\n}\n\nimpl Index&lt;usize&gt; for Matrix {\n    type Output = [f32];\n    fn index(&amp;self, index: usize) -&gt; &amp;Self::Output {\n        &amp;self.data[index * self.cols .. (index+1) * self.cols]\n    }\n}\n\nfn main() {\n    let m = Matrix {\n        cols: 2,\n        rows: 2,\n        data: vec![1., 2., 3., 4.],\n    };\n\n    println!(\"{} {}\", m[0][0], m[0][1]);\n    println!(\"{} {}\", m[1][0], m[1][1]);\n}\n</code></pre>\n\n<p>This style is more common among languages like Java and C. </p>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1033, "favorite_count": 0, "accepted_answer_id": 33771089, "answer_count": 2, "score": 5, "last_activity_date": 1447829858, "creation_date": 1447814939, "last_edit_date": 1447815444, "question_id": 33770989, "link": "https://stackoverflow.com/questions/33770989/implementing-the-index-operator-for-matrices-with-multiple-parameters", "title": "Implementing the Index operator for matrices with multiple parameters", "body": "<p>I'm trying to make a <code>Matrix</code> struct and I want to override the <code>Index</code> operator to let me have matrix-style indexing.</p>\n\n<p>For example:</p>\n\n<pre><code>let m = Matrix { ... DATA ... }\nlet entry = m[0,0]\n</code></pre>\n\n<p>My structure looks like this:</p>\n\n<pre><code>struct Matrix {\n    cols: usize,\n    rows: usize,\n    data: Vec&lt;f32&gt;\n}\n</code></pre>\n\n<p>I've been looking at the <a href=\"http://doc.rust-lang.org/core/ops/trait.Index.html\" rel=\"noreferrer\">Index trait</a> and I don't see how I can make this work? Additionally I'd like to be able to take ranges in each dimension etc. </p>\n"}, {"tags": ["unicode", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1447792053, "post_id": 33766228, "comment_id": 55300425, "body": "<i>because <code>usize</code> [...] refers to the number of bytes in a string</i> \u2014 that&#39;s true in this case, but isn&#39;t true universally. A <code>usize</code> is a machine-sized unsigned integer, good for when counting amounts of things bounded by the machine&#39;s memory."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1447793021, "post_id": 33766228, "comment_id": 55300946, "body": "Stylistically, there&#39;s no reason to have any of the type declarations that you have in your <code>main</code>. All of them can be inferred."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1447835784, "post_id": 33766228, "comment_id": 55316902, "body": "I suspect an X/Y problem: the index is probably used by something else afterward, so the unit (and thus value) of the index itself does not matter (whether in graphemes, codepoints or bytes) as long as the unit is shared by the consumer =&gt; Do you really want to have an index in codepoints? Or graphemes? Or would bytes work, as long as the consumer can be adapted to work with bytes too?"}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1447852971, "post_id": 33766228, "comment_id": 55328711, "body": "@MatthieuM. I&#39;m using this in a tokenizer - I want the index in graphemes. i.e., I shouldn&#39;t need to worry about the number of <b>bytes</b> in the string. Rather the position of the character irrespective of the encoding scheme."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1447855812, "post_id": 33766228, "comment_id": 55330970, "body": "Yeah, I think @MatthieuM. nailed it on the head. Especially for tokenizers - if they produce consistent slices around UTF-8 bytes, then that&#39;s all you need. That&#39;s how every other Rust lexer / tokenizer / parser that I&#39;ve looked at works."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1447860791, "post_id": 33766228, "comment_id": 55334885, "body": "@Shepmaster: Depends, sometimes you might want the index in graphemes; for example, when underlining a portion of the text with &quot;~~~&quot; on the next line, you need to reason not in terms of bytes or code points in the terminal, but in terms of graphemes (supposing a monospace font, common in terminals). For the tokenizer I would not be surprised that both byte and grapheme indexing be needed at once."}], "answers": [{"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1447795592, "post_id": 33766592, "comment_id": 55302375, "body": "I actually wanted the result to be <code>27</code>. My result was already printing <code>28</code>."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1447796049, "post_id": 33766592, "comment_id": 55302627, "body": "I want to find the index of the first instance of <code>sep</code> found in string <code>s</code> that is after index <code>left</code>. I want to find the index character-wise, not byte-wise. I think <code>char_indices</code> is still what I want."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1447796495, "post_id": 33766592, "comment_id": 55302858, "body": "@erip updated. I don&#39;t really understand the purpose of this, as it will break as soon as you start including combining characters..."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1447796624, "post_id": 33766592, "comment_id": 55302921, "body": "That&#39;s kind of the point of the question. I want a way that is efficient and not a kludge."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1447796795, "post_id": 33766592, "comment_id": 55303026, "body": "@erip you never once mentioned &quot;performance&quot; or &quot;efficiency&quot; in your question; you simply asked for an equivalent functionality. Perhaps you should ask another question, as <a href=\"http://meta.stackexchange.com/questions/179215/edited-question-makes-answers-incorrect\">modifying a question dramatically is frowned upon</a>. Or you can downvote this and wait for someone else to provide a more desired answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1447796411, "last_edit_date": 1447796411, "creation_date": 1447792973, "answer_id": 33766592, "question_id": 33766228, "link": "https://stackoverflow.com/questions/33766228/emulating-pythons-indexseparator-start-index-in-rust/33766592#33766592", "title": "Emulating Python&#39;s `index(separator, start_index)` in Rust", "body": "<p>Let's restate the problem a bit as it's unclear what the unit of <code>index</code> should be. Humans believe that strings are easy because we've been using them for most of our lives. However, things aren't nearly as easy as we'd like.</p>\n\n<p>Rust takes the point-of-view that strings (<code>&amp;str</code> or <code>String</code>) are UTF-8 encoded sequences of bytes. Jumping into a string using a byte offset is O(1), and you really want that level of performance guarantee to build more complicated things upon.</p>\n\n<p>I don't know what Python considers that index to be. It gets <em>hard</em> once you get beyond simple encoding schemes like ASCII where one character is one byte. There are multiple ways to chunk a Unicode string depending on what you want. Two obvious ones are by Unicode codepoint and by grapheme.</p>\n\n<p>Since codepoints can be represented in Rust using a <code>char</code>, that's what I assume you want. However, you are the only one that can figure that out.</p>\n\n<p>Additionally, since you requested that the result be <code>28</code>, that must be the number of bytes into the string. It's a little odd to skip N codepoints but return bytes, but it is what it is.</p>\n\n<hr>\n\n<p><s>Now that we know what we are doing</s>... let's try and do it. (See next solution where I read the desired outcome better).</p>\n\n<p>The key thing you need to use is <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.char_indices\" rel=\"nofollow\"><code>char_indices</code></a>. This is an O(n) operation that walks through the string and and gives you each codepoint and its corresponding byte offset.</p>\n\n<p>Then, it's just a matter of putting that together and correctly handling cases of walking off the end of the string. This is made obvious by Rust's strong types, hooray!</p>\n\n<pre><code>// `index` is the number of Unicode codepoints to skip\n// The result is the number of **bytes** inside the haystack\n// that the needle can be found.\nfn python_index(haystack: &amp;str, needle: &amp;str, index: usize) -&gt; Option&lt;usize&gt; {\n    haystack.char_indices().nth(index).and_then(|(byte_idx, _)| {\n        let leftover = &amp;haystack[byte_idx..];\n        leftover.find(needle).map(|inner_idx| inner_idx + byte_idx)\n    })\n}\n\nfn main() {\n    let right = python_index(\"Hello, m\u00ff name is erip and m\u00ff favorite color is green.\", \"m\u00ff\", 10);\n    println!(\"{:?}\", right); // prints Some(28)\n}\n</code></pre>\n\n<hr>\n\n<p>We do the same high-level concept as above, but once we have found the <code>needle</code>, we then reset back and iterate through the codepoints again. When we find the same byte offset of the substring, we terminate.</p>\n\n<p>Then it's just a matter of counting the characters we saw and adding the number that we already skipped.</p>\n\n<pre><code>// `index` is the number of Unicode codepoints to skip\n// The result is the number of codepoints inside the haystack\n// that the needle can be found.\nfn python_index(haystack: &amp;str, needle: &amp;str, index: usize) -&gt; Option&lt;usize&gt; {\n    haystack.char_indices().nth(index).and_then(|(byte_idx, _)| {\n        let leftover = &amp;haystack[byte_idx..];\n\n        leftover.find(needle).map(|inner_offset| {\n            leftover.char_indices().take_while(|&amp;(inner_inner_offset, _)| {\n                inner_inner_offset != inner_offset\n            }).count() + index\n        })\n    })\n}\n\nfn main() {\n    let right = python_index(\"Hello, m\u00ff name is erip and m\u00ff favorite color is green.\", \"m\u00ff\", 10);\n    println!(\"{:?}\", right); // prints Some(27)\n}\n</code></pre>\n\n<p>This certainly feels not super-efficient; you'd want to benchmark to see how it fares. However, the <code>find</code> implementation is pretty optimized, so I'd rather use it and then do a straight-shot through the characters and trust in the cache and prefetching to help me out ^_^.</p>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1447855280, "creation_date": 1447791628, "last_edit_date": 1447855280, "question_id": 33766228, "link": "https://stackoverflow.com/questions/33766228/emulating-pythons-indexseparator-start-index-in-rust", "title": "Emulating Python&#39;s `index(separator, start_index)` in Rust", "body": "<p>I'm currently porting a library from Python from Rust and found a line for which I'm having trouble finding the right \"translation\":</p>\n\n<pre><code>right = s.index(sep, left)\n</code></pre>\n\n<p>where <code>right</code> is the index of the first instance of <code>sep</code> found in string <code>s</code> that is after index <code>left</code>.</p>\n\n<p>A simple example of this can be seen here:</p>\n\n<blockquote>\n  <p>Python 3</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; s = \"Hello, my name is erip and my favorite color is green.\"\n&gt;&gt;&gt; right = s.index(\"my\", 10) # Find index of first instance of 'my' after index 10\n&gt;&gt;&gt; print right\n27\n&gt;&gt;&gt; print s[27:]\nmy favorite color is green.\n</code></pre>\n\n<p>My attempt in Rust is:</p>\n\n<pre><code>// s: &amp;str, sep: &amp;str, left: usize\nlet right = s[left..].find(sep).unwrap() + left;\n</code></pre>\n\n<p>This will search the bytes after <code>left</code> for <code>sep</code>. This <a href=\"http://is.gd/RPEmu1\" rel=\"nofollow\">seems to work</a> when using ASCII characters. There seems to be a problem when using Unicode, though:</p>\n\n<blockquote>\n  <p>Python 3</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; s = \"Hello, m\u00ff name is erip and m\u00ff favorite color is green.\"\n&gt;&gt;&gt; right = s.index(\"m\u00ff\", 10)\n&gt;&gt;&gt; print(right)\n27\n</code></pre>\n\n<blockquote>\n  <p><a href=\"http://is.gd/s66Tq4\" rel=\"nofollow\">Rust</a></p>\n</blockquote>\n\n<pre><code>fn main() {\n    let sep: &amp;str = \"m\u00ff\";\n    let left: usize = 10;\n    let s: &amp;str = \"Hello, m\u00ff name is erip and m\u00ff favorite color is green.\";\n    let right = s[left..].find(sep).unwrap() + left;\n    println!(\"{}\", right); //prints 28\n}\n</code></pre>\n\n<p>I realize that Python 2 would also give 28 because it doesn't support Unicode natively, but I'd like to mimic Python 3's results.</p>\n\n<p>The problem is because <code>usize</code> in Rust refers to the number of <em>bytes</em> in a string because \"m\u00ff\" actually requires 3 bytes to encode. How can I acquire this desired behavior in Rust?</p>\n\n<p>I'm using <code>rustc 1.4.0</code>.</p>\n"}, {"tags": ["struct", "rust"], "answers": [{"comments": [{"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447789369, "post_id": 33765582, "comment_id": 55298908, "body": "Thank you! That fixed my error (and introduced a few others which I can fix by using usize instead of i32).  If I pass self rather than &amp;self into the function does this mean that after I call the operator I will deallocate self?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447789573, "post_id": 33765582, "comment_id": 55299028, "body": "@user124784 note that I gave a full implementation that doesn&#39;t require any specific integer sizing and is more efficient as well. And yes, by giving up ownership, the values are likely to be deallocated. See <a href=\"http://stackoverflow.com/q/33709495/155423\">why operators take by value</a> if that&#39;s not acceptable."}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447789942, "post_id": 33765582, "comment_id": 55299242, "body": "Thank you for your implementation. I don&#39;t fully understand how to implement this without giving up ownership - but perhaps that is another question in itself. Thanks for your patience and the reference!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1525026053, "last_edit_date": 1525026053, "creation_date": 1447789130, "answer_id": 33765582, "question_id": 33765397, "link": "https://stackoverflow.com/questions/33765397/method-mul-has-an-incompatible-type-for-trait/33765582#33765582", "title": "Method `mul` has an incompatible type for trait", "body": "<p>The error message is spot-on here:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0053]: method `mul` has an incompatible type for trait\n  --&gt; src/main.rs:22:5\n   |\n22 |     fn mul(&amp;self, m: f32) -&gt; Matrix {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Matrix`, found &amp;Matrix\n   |\n   = note: expected type `fn(Matrix, f32) -&gt; Matrix`\n              found type `fn(&amp;Matrix, f32) -&gt; Matrix`\n</code></pre>\n\n<p>Let's look at the <a href=\"http://doc.rust-lang.org/std/ops/trait.Mul.html\" rel=\"nofollow noreferrer\"><code>Mul</code></a> trait to see why your implementation doesn't match:</p>\n\n<pre><code>pub trait Mul&lt;RHS = Self&gt; {\n    type Output;\n    fn mul(self, rhs: RHS) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>This says that unless you specify anything further, <code>RHS</code> will be the same type as <code>Self</code>. <code>Self</code> is the type that the trait will be implemented on. Let's look at your definition:</p>\n\n<pre><code>impl Mul&lt;f32&gt; for Matrix {\n    type Output = Matrix;\n\n    fn mul(&amp;self, m: f32) -&gt; Matrix {}\n}\n</code></pre>\n\n<p>In your case, you have substituted <code>f32</code> for <code>RHS</code>, and <code>Matrix</code> for <code>Output</code>. Also, <code>Matrix</code> is the implementing type. Let's take the trait definition and substitute in, producing some pseudo-Rust:</p>\n\n<pre><code>pub trait Mul {\n    fn mul(self, rhs: f32) -&gt; Matrix;\n}\n</code></pre>\n\n<p>Now do you see what is different?</p>\n\n<pre><code>// Trait\nfn mul(self,  m: f32) -&gt; Matrix;\n// Your implementation\nfn mul(&amp;self, m: f32) -&gt; Matrix;\n</code></pre>\n\n<p>You have incorrectly specified that you take <code>&amp;self</code> instead of <code>self</code>.</p>\n\n<p>For completeness, here's the implementation. I threw in style fixes at no charge!</p>\n\n<pre><code>impl Mul&lt;f32&gt; for Matrix {\n    type Output = Matrix;\n\n    fn mul(self, m: f32) -&gt; Matrix {\n        let new_data = self.data.into_iter().map(|v| v * m).collect();\n\n        Matrix {\n            cols: self.cols,\n            rows: self.rows,\n            data: new_data,\n        }\n    }\n}\n</code></pre>\n\n<p>This is a bit inefficient as it deallocates and reallocates the <code>data</code> vector. Since you are taking the <code>Matrix</code> by value, we can just edit it in place:</p>\n\n<pre><code>impl Mul&lt;f32&gt; for Matrix {\n    type Output = Matrix;\n\n    fn mul(mut self, m: f32) -&gt; Matrix {\n        for v in &amp;mut self.data {\n            *v *= m\n        }\n\n        self\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 974, "favorite_count": 0, "accepted_answer_id": 33765582, "answer_count": 1, "score": 1, "last_activity_date": 1525026053, "creation_date": 1447788452, "last_edit_date": 1525025924, "question_id": 33765397, "link": "https://stackoverflow.com/questions/33765397/method-mul-has-an-incompatible-type-for-trait", "title": "Method `mul` has an incompatible type for trait", "body": "<p>I'm creating a simple matrix struct in Rust and I'm trying to implement some basic operator methods:</p>\n\n<pre><code>use std::ops::Mul;\n\nstruct Matrix {\n    cols: i32,\n    rows: i32,\n    data: Vec&lt;f32&gt;,\n}\n\nimpl Matrix {\n    fn new(cols: i32, rows: i32, data: Vec&lt;f32&gt;) -&gt; Matrix {\n        Matrix {\n            cols: cols,\n            rows: rows,\n            data: data,\n        }\n    }\n}\n\nimpl Mul&lt;f32&gt; for Matrix {\n    type Output = Matrix;\n\n    fn mul(&amp;self, m: f32) -&gt; Matrix {\n        let mut new_data = Vec::with_capacity(self.cols * self.rows);\n\n        for i in 0..self.cols * self.rows {\n            new_data[i] = self.data[i] * m;\n        }\n\n        return Matrix {\n            cols: *self.cols,\n            rows: *self.rows,\n            data: new_data,\n        };\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I'm still familiarizing myself with Rust and systems programming and I'm sure the error is pretty obvious. The compiler tells me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0053]: method `mul` has an incompatible type for trait\n  --&gt; src/main.rs:22:5\n   |\n22 |     fn mul(&amp;self, m: f32) -&gt; Matrix {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Matrix`, found &amp;Matrix\n   |\n   = note: expected type `fn(Matrix, f32) -&gt; Matrix`\n              found type `fn(&amp;Matrix, f32) -&gt; Matrix`\n</code></pre>\n\n<p>It's referring to the contents of the for loop (I believe). I've tried playing around with a few other things but I can't get my head around it.</p>\n"}, {"tags": ["c", "lua", "rust", "lua-table", "lua-api"], "comments": [{"owner": {"reputation": 61303, "user_id": 4117728, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/66831ed13ffd9c497541220ec45c15c3?s=128&d=identicon&r=PG&f=1", "display_name": "largest_prime_is_463035818", "link": "https://stackoverflow.com/users/4117728/largest-prime-is-463035818"}, "edited": false, "score": 5, "creation_date": 1447777070, "post_id": 33761811, "comment_id": 55291171, "body": "c/c++/rust/doesn&#39;t matter.... how can it not matter if you want a concrete answer?"}, {"owner": {"reputation": 68627, "user_id": 258523, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/102329bab02333104708ac179f35fd8d?s=128&d=identicon&r=PG&f=1", "display_name": "Etan Reisner", "link": "https://stackoverflow.com/users/258523/etan-reisner"}, "edited": false, "score": 1, "creation_date": 1447777205, "post_id": 33761811, "comment_id": 55291272, "body": "Did you try that code? Did it work? If it didn&#39;t work <i>how</i> didn&#39;t it work? Did it explode?"}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 61303, "user_id": 4117728, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/66831ed13ffd9c497541220ec45c15c3?s=128&d=identicon&r=PG&f=1", "display_name": "largest_prime_is_463035818", "link": "https://stackoverflow.com/users/4117728/largest-prime-is-463035818"}, "edited": false, "score": 0, "creation_date": 1447778430, "post_id": 33761811, "comment_id": 55292186, "body": "@tobi303 Presumably this is a question about the Lua API, which is more or less the same regardless of what programming language you&#39;re using it from."}, {"owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "edited": false, "score": 0, "creation_date": 1447788140, "post_id": 33761811, "comment_id": 55298195, "body": "Edited the question, added more code and explanation. I hope I did it right."}], "answers": [{"tags": [], "owner": {"reputation": 984, "user_id": 3586583, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/50ff364c78d225c26158cda484102447?s=128&d=identicon&r=PG", "display_name": "Rochet2", "link": "https://stackoverflow.com/users/3586583/rochet2"}, "is_accepted": true, "score": 2, "last_activity_date": 1447805691, "last_edit_date": 1447805691, "creation_date": 1447804047, "answer_id": 33769287, "question_id": 33761811, "link": "https://stackoverflow.com/questions/33761811/set-methods-to-lua-tables-from-c-c-rust/33769287#33769287", "title": "Set methods to lua tables from C/C++/Rust", "body": "<p>If you have a table <code>T</code> and you call <code>T:Func()</code> and <code>T.Func</code> is any function, then <code>T</code> will be the first parameter in the method call.\nSo if in your code you call <code>obj:method2()</code> then <code>obj</code> will be the first parameter.</p>\n\n<p>Note that you should call the function with the <code>:</code> operator like so <code>obj:method2()</code>. If you call it with <code>.</code> operator then you need to pass the obj table to the method or you run into the same nil error you have mentioned since there are no arguments passed in that case. The <code>:</code> operator is just a syntactic sugar for <code>obj.method2(obj)</code>.</p>\n\n<p>I would also try use <code>lua_istable(L, 1)</code> since the arguments are at the bottom of the stack. If someone calls <code>obj:method2(2)</code> then the method would fail because top of the stack has a number value and not a table.\nThe stack is cleared for a function call so the arguments passed are always at the very bottom of the stack.</p>\n\n<p>Btw. in the C code of yours you are missing the push for the function name.</p>\n"}], "owner": {"reputation": 853, "user_id": 2605687, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/brvnp.png?s=128&g=1", "display_name": "Revertron", "link": "https://stackoverflow.com/users/2605687/revertron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 150, "favorite_count": 0, "accepted_answer_id": 33769287, "answer_count": 1, "score": 2, "last_activity_date": 1447925012, "creation_date": 1447776885, "last_edit_date": 1447925012, "question_id": 33761811, "link": "https://stackoverflow.com/questions/33761811/set-methods-to-lua-tables-from-c-c-rust", "title": "Set methods to lua tables from C/C++/Rust", "body": "<p>I want to set extra \"methods\" to some tables that are in some lua_State.</p>\n\n<p>The state has the code like this:</p>\n\n<pre><code>obj = {}\n\nfunction obj:method1()\n    print(\"value from second method = \" .. self.method2())\nend\n</code></pre>\n\n<p>I load it by <em>do_file()</em> method. After this I want to add method2() to the table <em>obj</em>. This <em>method2()</em> must get on the stack the table <em>obj</em> (as <em>self</em>) to work properly.</p>\n\n<p>I'm trying to do it like this:</p>\n\n<pre><code>state.get_global(\"obj\");\nif state.is_table(-1) {\n   state.push_string(\"method2\");\n   state.push_fn(Some(method2));\n   state.set_table(-3);\n}\n</code></pre>\n\n<p>or in C:</p>\n\n<pre><code>lua_getglobal(L, \"obj\");\nif (lua_istable(L, -1)) {\n    lua_pushstring(L, \"method2\");\n    lua_pushcfunction(L, &amp;lua_method2);\n    lua_settable(L, -3);\n}\n</code></pre>\n\n<p>The <em>method2()</em> function is written okay, same functions I use for \"new_lib\" and they work good.</p>\n\n<p>When I do all that, in method2() I check:</p>\n\n<pre><code>if (lua_istable(L, -1)) {\n    // Do some work\n} else {\n    print(\"not a table!\");\n}\n</code></pre>\n\n<p>And I get \"not a table\" instead of actual work.</p>\n\n<p>How can I do such a thing? And will the method2() in Rust(C/C++, whatever) get <em>obj</em> table (<em>self</em>) as first parameter on a stack?</p>\n"}, {"tags": ["types", "rust", "type-systems"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1447770037, "post_id": 33759072, "comment_id": 55285942, "body": "Have you seen <a href=\"http://stackoverflow.com/questions/30633177/implement-fmtdisplay-for-vect\" title=\"implement fmtdisplay for vect\">stackoverflow.com/questions/30633177/&hellip;</a> ? That question also asks why you can&#39;t implement <code>Display</code> for <code>Vec&lt;T&gt;</code>"}, {"owner": {"reputation": 13360, "user_id": 90859, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2123a66ff1a7b382e9007d36a5823153?s=128&d=identicon&r=PG", "display_name": "UserControl", "link": "https://stackoverflow.com/users/90859/usercontrol"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1447770745, "post_id": 33759072, "comment_id": 55286478, "body": "Thanks! Still, I don&#39;t get it. Why do I need an extra thing like <code>struct</code> to implement a trait?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1447770878, "post_id": 33759072, "comment_id": 55286569, "body": "Because if you could, someone else also could, and then you&#39;d have two implementations and the compiler can never know which one to call"}, {"owner": {"reputation": 13360, "user_id": 90859, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2123a66ff1a7b382e9007d36a5823153?s=128&d=identicon&r=PG", "display_name": "UserControl", "link": "https://stackoverflow.com/users/90859/usercontrol"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1447775831, "post_id": 33759072, "comment_id": 55290322, "body": "@ker, why would that be a problem if there is no conflicting trait implementation in the current crait?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1447778720, "post_id": 33759072, "comment_id": 55292447, "body": "because your crate might be a library. And then someone might use your crate and another crate that also has an impl and end up with two impls."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 12, "last_activity_date": 1554236451, "last_edit_date": 1554236451, "creation_date": 1447770873, "answer_id": 33759549, "question_id": 33759072, "link": "https://stackoverflow.com/questions/33759072/why-doesnt-vect-implement-the-display-trait/33759549#33759549", "title": "Why doesn&#39;t Vec&lt;T&gt; implement the Display trait?", "body": "<p>First, you can't implement a foreign trait for a foreign type, that's what the question and answer the <a href=\"https://stackoverflow.com/questions/30633177/implement-fmtdisplay-for-vect\">link</a> to which ker has provided are about.</p>\n\n<p>In principle, nothing prevents implementing <code>Display</code> for <code>Vec</code> in a module where either of them is defined (most likely in <code>collections::vec</code>). However, this is intentionally not done. As is explained in <a href=\"https://github.com/rust-lang/rfcs/pull/565\" rel=\"nofollow noreferrer\">this</a> and <a href=\"https://github.com/rust-lang/rfcs/pull/504\" rel=\"nofollow noreferrer\">this</a> RFCs, the <code>Display</code> trait is intended to produce strings which should be displayed to the user. However, there is no natural way to produce such a string from a vector. Do you want comma-separated items or tab-separated ones? Should they be wrapped in brackets or curly braces or nothing? Maybe you want to print each element on its separate line? There is no one single way.</p>\n\n<p>The simplest way to work around this would be to use a newtype wrapper. For example:</p>\n\n<pre><code>use std::fmt;\n\nstruct SliceDisplay&lt;'a, T: 'a&gt;(&amp;'a [T]);\n\nimpl&lt;'a, T: fmt::Display + 'a&gt; fmt::Display for SliceDisplay&lt;'a, T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let mut first = true;\n        for item in self.0 {\n            if !first {\n                write!(f, \", {}\", item)?;\n            } else {\n                write!(f, \"{}\", item)?;\n            }\n            first = false;\n        }\n        Ok(())\n    }\n}\n\nfn main() {\n    let items = vec![1, 2, 3, 4];\n    println!(\"{}\", SliceDisplay(&amp;items));\n}\n</code></pre>\n"}], "owner": {"reputation": 13360, "user_id": 90859, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/2123a66ff1a7b382e9007d36a5823153?s=128&d=identicon&r=PG", "display_name": "UserControl", "link": "https://stackoverflow.com/users/90859/usercontrol"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1435, "favorite_count": 0, "accepted_answer_id": 33759549, "answer_count": 1, "score": 2, "last_activity_date": 1554236451, "creation_date": 1447769495, "last_edit_date": 1554236326, "question_id": 33759072, "link": "https://stackoverflow.com/questions/33759072/why-doesnt-vect-implement-the-display-trait", "title": "Why doesn&#39;t Vec&lt;T&gt; implement the Display trait?", "body": "<p>Learning the language it's been surprising to me I cannot print an instance of <code>Vec</code>:</p>\n\n<pre><code>fn main() {\n    let v1 = vec![1, 2, 3];\n    println!(\"{}\", v1);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `std::vec::Vec&lt;{integer}&gt;` doesn't implement `std::fmt::Display`\n --&gt; src/main.rs:3:20\n  |\n3 |     println!(\"{}\", v1);\n  |                    ^^ `std::vec::Vec&lt;{integer}&gt;` cannot be formatted with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for `std::vec::Vec&lt;{integer}&gt;`\n  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>I can understand that and I'm aware of using <code>{:?}</code> debug placeholder as described <a href=\"https://stackoverflow.com/questions/30320083/how-to-print-a-vec\">here</a>. Unfortunately, I don't yet understand the answer that tells why I cannot do that. It would be pretty trivial task for either C# or Haskell, wouldn't it? I'd implement the <code>Display</code> trait for <code>Vec&lt;T&gt;</code> for any <code>T</code> that is serializable (or convertible to <code>String</code>). Can I have a different explanation on why I can't do that? Is it a limitation of the type system?</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1447761696, "post_id": 33755963, "comment_id": 55280391, "body": "have you read <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html#the-result-type\" rel=\"nofollow noreferrer\">the book&#39;s paragraph</a> on <code>Result</code>? And on <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html#defining-your-own-error-type\" rel=\"nofollow noreferrer\">returning your own error type</a> ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1447768425, "post_id": 33755963, "comment_id": 55284810, "body": "Please <a href=\"http://meta.stackexchange.com/q/39223/281829\">ask <i>one</i> question per question</a>. Pick either &quot;Is there a standard way to wrap a string in an error?&quot; or &quot;Also how do I make, box and return a custom error type?&quot;. Feel free to ask multiple top-level questions."}], "answers": [{"tags": [], "owner": {"reputation": 554, "user_id": 947511, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2807bd8d15e1fb68df294a86b4884f4a?s=128&d=identicon&r=PG", "display_name": "Jan Segre", "link": "https://stackoverflow.com/users/947511/jan-segre"}, "is_accepted": false, "score": 1, "last_activity_date": 1447909287, "creation_date": 1447909287, "answer_id": 33795598, "question_id": 33755963, "link": "https://stackoverflow.com/questions/33755963/is-there-a-standard-way-to-wrap-a-string-in-an-error-also-how-do-i-make-box-an/33795598#33795598", "title": "Is there a standard way to wrap a string in an error? Also how do I make, box and return a custom error type?", "body": "<p><code>Result&lt;T, E&gt;</code> is an <code>enum</code> with two variants <code>Ok(T)</code> and <code>Err(E)</code>.</p>\n\n<p>When you instantiate a <code>Result&lt;T, E&gt;</code> you will have to explicitly state which variant you want.</p>\n\n<p>In your particular case you have to return <code>Err(s)</code> (given that <code>s</code> is of type <code>E</code>, you may have to use <code>Box::new</code> in your code, I haven't checked if <code>s</code> is correct, only that <code>Err</code> is missing).</p>\n\n<p>One way to start using a custom error type is the following:</p>\n\n<pre><code>enum MyError {\n    IoError,\n    OtherError,\n}\n\nfn try_main() -&gt; Result&lt;(), MyError&gt; {\n    // do stuff\n    return Err(MyError::IoError);\n}\n</code></pre>\n\n<p>This is a simplistic approach, more on you'll probably want <code>impl std::error::Error for MyError</code> and <code>impl From&lt;std::io::Error&gt; for MyError</code>, possibly keeping the original error inside <code>MyError</code>. <strong>Though this is optional.</strong></p>\n\n<p>There's a <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\" rel=\"nofollow\">chapter on the book</a> about error handling with much more details.</p>\n"}], "owner": {"reputation": 16291, "user_id": 259130, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/b7bc48d6e53251f642f5a4894eb89b82?s=128&d=identicon&r=PG", "display_name": "Roman A. Taycher", "link": "https://stackoverflow.com/users/259130/roman-a-taycher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 246, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1447992795, "creation_date": 1447760262, "last_edit_date": 1447992795, "question_id": 33755963, "link": "https://stackoverflow.com/questions/33755963/is-there-a-standard-way-to-wrap-a-string-in-an-error-also-how-do-i-make-box-an", "title": "Is there a standard way to wrap a string in an error? Also how do I make, box and return a custom error type?", "body": "<p>I'm writing a basic program and putting the work in a \n<code>try_main</code> and then exiting with nonzero if <code>try_main</code> returns an <code>Error</code>.</p>\n\n<p>The basic <code>try!</code> statements work, but I can't figure out how to return a custom error. First I tried to return a string wrapped in a standard error, then I tried to implement my own error type but it complained I was trying to return an error instead of a result.</p>\n\n<p>Is there a standard way to wrap a string in an error? Also how do I make, box and return a custom error type?</p>\n\n<pre><code>fn main() {\n    match try_main() {\n        Ok(()) =&gt; {},\n        Err(e) =&gt; {\n            println!(\"thumbnail extractor failed with {:?}\", e.description());\n            std::process::exit(1);\n            }\n    }\n\n}\n\nfn try_main() -&gt; Result&lt;(), Box&lt;std::error::Error&gt;&gt; { \n    let args : Vec&lt;_&gt; = std::env::args_os().collect();\n    let filename = args.get(1).expect(\"needs one argument\") ;\n    println!(\"filename: {:?}\", filename);\n\n\n//  if !(filename.to_string_lossy().ends_with(\".odf\") || filename.to_string_lossy().ends_with(\".ora\"))\n//  {\n//      let s =  std::io::Error::new(Error::new(ErrorKind::Other, \"This program only supports creating thumbnails from odf or ora files.\".to_string()));\n//      return s;\n//  }   \n    let f = try!(File::open(filename));\n\n    let mut odf = try!(zip::ZipArchive::new(f));\n    let thumb_name = r\"Thumbnails/thumbnail.png\";\n    let mut thumb_file_in_zip = try!(odf.by_name(thumb_name).or(Err(\"could not find thumbnail zip file\")));\n\n    let mut fw = try!(File::create(r\"thumbnail.png\"));\n    let mut buffer : Vec&lt;u8&gt; = Vec::new();\n    try!(thumb_file_in_zip.read_to_end(&amp; mut buffer));\n    try!(fw.write_all(buffer.as_slice()));\n    Ok(())\n}\n</code></pre>\n"}, {"tags": ["macros", "rust", "rust-macros"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1447768402, "post_id": 33751796, "comment_id": 55284796, "body": "The closest you can get is with recursion, taking advantage of the fact matches are reevaluated: <a href=\"http://is.gd/3QfTr9\" rel=\"nofollow noreferrer\">is.gd/3QfTr9</a> It is very ugly, though."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486716394, "post_id": 33751796, "comment_id": 71475668, "body": "Would be good if you could state why using a <code>for</code> loop in the macro isn&#39;t a good solution (since it seems like an obvious answer)."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1486730362, "post_id": 33751796, "comment_id": 71484217, "body": "@ideasman42 This is an artificial example. I am not really interested in this specific use case; the question is about the general case of &quot;counting with macros&quot;."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486731052, "post_id": 33751796, "comment_id": 71484649, "body": "OK, in that case it makes it hard to know what is a good answer, since in the example you give its quite obvious you would use iteration. Note that this questions title is quite similar to another question: <a href=\"http://stackoverflow.com/questions/30152800\">stackoverflow.com/questions/30152800</a> <i>(what I was searching for and why I stumbled on this page).</i> AFAICS it&#39;s about macro expansion, not counting."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1515266425, "post_id": 33751796, "comment_id": 83238844, "body": "@ideasman42 building an array initializer of non-<code>Copy</code> elements (for example, <code>String</code>) or for n &gt; 32 elements of any type is a use case for this for which <code>for</code> is unsuitable.  For example: <code>static FOO: [AtomicUsize; 100] = arr_init![AtomicUsize::new(0); 100];</code>.  The <code>arr_init!</code> macro should emit <code>[AtomicUsize::new(0), AtomicUsize::new(0), ... , AtomicUsize::new(0) ]</code> (n = 100 elements) at compile-time."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1447748559, "creation_date": 1447748559, "answer_id": 33752142, "question_id": 33751796, "link": "https://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros/33752142#33752142", "title": "Is there a way to count with macros?", "body": "<p>As far as I know, no. The macro language is based on pattern matching and variable substitution, and only evaluates macros.</p>\n\n<p>Now, you can implement counting with evaluation: it just is boring... see <a href=\"https://play.rust-lang.org/?gist=45e449af6385c33c67ce&amp;version=stable\" rel=\"nofollow\">the playpen</a></p>\n\n<pre><code>macro_rules! many_greetings {\n    (3) =&gt; {{\n        println!(\"Hello\");\n        many_greetings!(2);\n    }};\n    (2) =&gt; {{\n        println!(\"Hello\");\n        many_greetings!(1);\n    }};\n    (1) =&gt; {{\n        println!(\"Hello\");\n        many_greetings!(0);\n    }};\n    (0) =&gt; ();\n}\n</code></pre>\n\n<p>Based on this, I am pretty sure one could invent a set of macro to \"count\" and invoke various operations at each step (with the count).</p>\n"}, {"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1447785349, "post_id": 33764418, "comment_id": 55296615, "body": "Sure, a loop always works, but then it doesn&#39;t need to be a macro. My example was stupid anyway. Could you post some code, how one would do it with compiler plugins? If you have time for that... that would be awesome :)"}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1447839972, "post_id": 33764418, "comment_id": 55319716, "body": "I&#39;ve added an example of a procedural macro which can repeat arbitrary code a number of times. I can&#39;t think of any good reason to use this exact macro, but as you can see, it is possible."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1473165188, "post_id": 33764418, "comment_id": 66027927, "body": "Is this answer still valid? Might Rust&#39;s recursive macro be able to handle this?"}], "tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": true, "score": 8, "last_activity_date": 1447840282, "last_edit_date": 1447840282, "creation_date": 1447785043, "answer_id": 33764418, "question_id": 33751796, "link": "https://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros/33764418#33764418", "title": "Is there a way to count with macros?", "body": "<p>While the ordinary macro system does not enable you to repeat the macro expansion many times, there is no problem with using a for loop in the macro:</p>\n\n<pre><code>macro_rules! many_greetings {\n    ($times:expr) =&gt; {{\n        for _ in 0..$times {\n            println!(\"Hello\");\n        }\n    }};\n}\n</code></pre>\n\n<p>If you really need to repeat the macro, you have to look into procedural macros/<a href=\"https://doc.rust-lang.org/book/compiler-plugins.html\" rel=\"noreferrer\">compiler plugins</a> (which as of 1.4 are unstable, and a bit harder to write).</p>\n\n<p>Edit: There are probably better ways of implementing this, but I've spent long enough on this for today, so here goes. <code>repeat!</code>, a macro that actually duplicates a block of code a number of times:</p>\n\n<h3>main.rs</h3>\n\n<pre><code>#![feature(plugin)]\n#![plugin(repeat)]\n\nfn main() {\n    let mut n = 0;\n    repeat!{ 4 {\n        println!(\"hello {}\", n);\n        n += 1;\n    }};\n}\n</code></pre>\n\n<h3>lib.rs</h3>\n\n<pre><code>#![feature(plugin_registrar, rustc_private)]\n\nextern crate syntax;\nextern crate rustc;\n\nuse syntax::codemap::Span;\nuse syntax::ast::TokenTree;\nuse syntax::ext::base::{ExtCtxt, MacResult, MacEager, DummyResult};\nuse rustc::plugin::Registry;\nuse syntax::util::small_vector::SmallVector;\nuse syntax::ast::Lit_;\nuse std::error::Error;\n\nfn expand_repeat(cx: &amp;mut ExtCtxt, sp: Span, tts: &amp;[TokenTree]) -&gt; Box&lt;MacResult + 'static&gt; {\n    let mut parser = cx.new_parser_from_tts(tts);\n    let times = match parser.parse_lit() {\n        Ok(lit) =&gt; match lit.node {\n            Lit_::LitInt(n, _) =&gt; n,\n            _ =&gt; {\n                cx.span_err(lit.span, \"Expected literal integer\");\n                return DummyResult::any(sp);\n            }\n        },\n        Err(e) =&gt; {\n            cx.span_err(sp, e.description());\n            return DummyResult::any(sp);\n        }\n    };\n    let res = parser.parse_block();\n\n    match res {\n        Ok(block) =&gt; {\n            let mut stmts = SmallVector::many(block.stmts.clone());\n            for _ in 1..times {\n                let rep_stmts = SmallVector::many(block.stmts.clone());\n                stmts.push_all(rep_stmts);\n            }\n            MacEager::stmts(stmts)\n        }\n        Err(e) =&gt; {\n            cx.span_err(sp, e.description());\n            DummyResult::any(sp)\n        }\n    }\n}\n\n#[plugin_registrar]\npub fn plugin_registrar(reg: &amp;mut Registry) {\n    reg.register_macro(\"repeat\", expand_repeat);\n}\n</code></pre>\n\n<h3>added to Cargo.toml</h3>\n\n<pre><code>[lib]\nname = \"repeat\"\nplugin = true\n</code></pre>\n\n<p>Note that if we really don't want to do looping, but expanding at compile-time, we have to do things like requiring literal numbers. After all, we are not able to evaluate variables and function calls that reference other parts of the program at compile time.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 5, "last_activity_date": 1548346776, "creation_date": 1548346776, "answer_id": 54351072, "question_id": 33751796, "link": "https://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros/54351072#54351072", "title": "Is there a way to count with macros?", "body": "<p>As the other answers already said: <strong>no, you can't count like this with declarative macros (<code>macro_rules!</code>)</strong>. </p>\n\n<hr>\n\n<p>But you can implement the <code>many_greetings!</code> example <strong>as a procedural macro</strong>. procedural macros were stabilized a while ago, so the definition works on stable. However, we can't yet expand macros into statements on stable -- that's what the <code>#![feature(proc_macro_hygiene)]</code> is for.</p>\n\n<p>This looks like a lot of code, but most code is just error handling, so it's not that complicated!</p>\n\n<p><strong><code>examples/main.rs</code></strong></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(proc_macro_hygiene)]\n\nuse count_proc_macro::many_greetings;\n\nfn main() {\n    many_greetings!(3);\n}\n</code></pre>\n\n<p><strong><code>Cargo.toml</code></strong></p>\n\n<pre><code>[package]\nname = \"count-proc-macro\"\nversion = \"0.1.0\"\nauthors = [\"me\"]\nedition = \"2018\"\n\n[lib]\nproc-macro = true\n\n[dependencies]\nquote = \"0.6\"\n</code></pre>\n\n<p><strong><code>src/lib.rs</code></strong></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate proc_macro;\n\nuse std::iter;\nuse proc_macro::{Span, TokenStream, TokenTree};\nuse quote::{quote, quote_spanned};\n\n\n/// Expands into multiple `println!(\"Hello\");` statements. E.g.\n/// `many_greetings!(3);` will expand into three `println`s.\n#[proc_macro]\npub fn many_greetings(input: TokenStream) -&gt; TokenStream {\n    let tokens = input.into_iter().collect::&lt;Vec&lt;_&gt;&gt;();\n\n    // Make sure at least one token is provided.\n    if tokens.is_empty() {\n        return err(Span::call_site(), \"expected integer, found no input\");\n    }\n\n    // Make sure we don't have too many tokens.\n    if tokens.len() &gt; 1 {\n        return err(tokens[1].span(), \"unexpected second token\");\n    }\n\n    // Get the number from our token.\n    let count = match &amp;tokens[0] {\n        TokenTree::Literal(lit) =&gt; {\n            // Unfortunately, `Literal` doesn't have nice methods right now, so\n            // the easiest way for us to get an integer out of it is to convert\n            // it into string and parse it again.\n            if let Ok(count) = lit.to_string().parse::&lt;usize&gt;() {\n                count\n            } else {\n                let msg = format!(\"expected unsigned integer, found `{}`\", lit);\n                return err(lit.span(), msg);\n            }\n        }\n        other =&gt; {\n            let msg = format!(\"expected integer literal, found `{}`\", other);\n            return err(other.span(), msg);\n        }\n    };\n\n    // Return multiple `println` statements.\n    iter::repeat(quote! { println!(\"Hello\"); })\n        .map(TokenStream::from)\n        .take(count)\n        .collect()\n}\n\n/// Report an error with the given `span` and message.\nfn err(span: Span, msg: impl Into&lt;String&gt;) -&gt; TokenStream {\n    let msg = msg.into();\n    quote_spanned!(span.into()=&gt; {\n        compile_error!(#msg);\n    }).into()\n}\n</code></pre>\n\n<p>Running <code>cargo run --example main</code> prints three \"Hello\"s. </p>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4300, "favorite_count": 2, "accepted_answer_id": 33764418, "answer_count": 3, "score": 15, "last_activity_date": 1549409458, "creation_date": 1447747122, "last_edit_date": 1549409458, "question_id": 33751796, "link": "https://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros", "title": "Is there a way to count with macros?", "body": "<p>I want to create a macro that prints \"Hello\" a specified number of times. It's used like:</p>\n\n<pre><code>many_greetings!(3);  // expands to three `println!(\"Hello\");` statements\n</code></pre>\n\n<p>The naive way to create that macro is:</p>\n\n<pre><code>macro_rules! many_greetings {\n    ($times:expr) =&gt; {{\n        println!(\"Hello\");\n        many_greetings!($times - 1);\n    }};\n    (0) =&gt; ();\n}\n</code></pre>\n\n<p>However, this doesn't work because the compiler does not evaluate expressions; <code>$times - 1</code> isn't calculated, but fed as a new expression into the macro.</p>\n"}, {"tags": ["arrays", "rust"], "answers": [{"comments": [{"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447735693, "post_id": 33749286, "comment_id": 55266666, "body": "Thanks for the response - it&#39;s helped me understand what&#39;s going on a bit more.  Dynamic sizing looks plausible but I agree it&#39;s a hassle and I&#39;m not sure it would let me do things like make the default matrix all zeros (without feeding in an array to the constructor).  I would like to have the data on the stack but for now I&#39;ll try an implementation using boxed slices. Thanks!"}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447736034, "post_id": 33749286, "comment_id": 55266777, "body": "I checked out the code for nalgebra. The problem is I&#39;m planning on using this in a machine learning setting - so matrices of huge sizes will be common D:"}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 0, "creation_date": 1447736089, "post_id": 33749286, "comment_id": 55266799, "body": "@user124784 Probably best to use the heap then, since storing huge things on the stack is generally a bad idea."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1447743637, "post_id": 33749286, "comment_id": 55269560, "body": "Small advice: If you want to do serious work with huge matrices, you should consider using a library. Making matrix operations (very) fast is difficult and popular libraries are usually at least ten times faster than something a normal intelligent programmer could write."}, {"owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "edited": false, "score": 1, "creation_date": 1447788652, "post_id": 33749286, "comment_id": 55298497, "body": "Lukas - I&#39;m using this project as a way to get familiar with Rust (and systems programming). I&#39;m not expecting to make anything that can be used for serious applications :). Thank you for taking the time to comment though."}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": true, "score": 3, "last_activity_date": 1447768531, "last_edit_date": 1447768531, "creation_date": 1447735137, "answer_id": 33749286, "question_id": 33749114, "link": "https://stackoverflow.com/questions/33749114/creating-a-struct-with-an-array-matrices/33749286#33749286", "title": "Creating a struct with an array (Matrices)", "body": "<p>The easiest way to do this would be with  a <code>Vec</code>.</p>\n\n<pre><code>struct Matrix {\n    cols: i32,\n    rows: i32,\n    data: Vec&lt;f32&gt;\n}\n\nimpl Matrix {\n    fn new(cols: i32, rows: i32) -&gt; Matrix {\n        Matrix {\n            cols: cols,\n            rows: rows,\n            data: vec![0.0; cols * rows]\n        }\n    }\n}\n</code></pre>\n\n<p>If you don't want to store the data on the heap, you could make <code>Matrix</code> into a dynamically sized type, but this is hard to do and isn't really supported. See <a href=\"https://www.reddit.com/r/rust/comments/2nkdxn/structs_with_a_variable_size/\" rel=\"nofollow\">a Reddit thread on that topic</a>.</p>\n\n<p>If you don't want to use a <code>Vec</code> but are okay with storing the data on the heap, you could use a boxed slice instead (<code>Box&lt;[f32]&gt;</code>). See <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_boxed_slice\" rel=\"nofollow\"><code>Vec::into_boxed_slice</code></a> for one way to create one.</p>\n\n<p>And of course, if you really don't want to use the heap, you could make different <code>Matrix</code> types for different sizes of matrices. This is what the crate <a href=\"http://nalgebra.org/doc/nalgebra/struct.Mat2.html\" rel=\"nofollow\">nalgebra</a> does.</p>\n"}, {"tags": [], "owner": {"reputation": 392, "user_id": 12425329, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SBtVX.jpg?s=128&g=1", "display_name": "Tianyi Shi", "link": "https://stackoverflow.com/users/12425329/tianyi-shi"}, "is_accepted": false, "score": 0, "last_activity_date": 1600480558, "creation_date": 1600480558, "answer_id": 63964559, "question_id": 33749114, "link": "https://stackoverflow.com/questions/33749114/creating-a-struct-with-an-array-matrices/63964559#63964559", "title": "Creating a struct with an array (Matrices)", "body": "<p>You may also use a vector of vector (<code>Vec&lt;Vec&lt;T&gt;&gt;</code>), without implementing your own <code>Matrix</code> or using a library. But this is slighly slower than Adrian's approach in terms of indexing. <code>nalgebra</code> is good at vectorized computation, but it performs worse than simple matrices made of <code>Vec&lt;T&gt;</code> or <code>Vec&lt;Vec&lt;T&gt;&gt;</code> when it comes to elementwise operation. Here are some benchmarks:</p>\n<pre><code>test bench_vec               ... bench:  84,694,933 ns/iter (+/- 7,412,836)\ntest bench_vec_of_vec        ... bench:  87,083,636 ns/iter (+/- 1,171,842)\ntest bench_vec_unsafe        ... bench:  41,440,947 ns/iter (+/- 752,463)\ntest bench_vec_of_vec_unsafe ... bench:  44,532,595 ns/iter (+/- 629,209)\ntest bench_nalgebra          ... bench: 452,872,630 ns/iter (+/- 40,284,295)\n</code></pre>\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(test)]\n\nextern crate test;\nuse na::Matrix;\nuse na::{Dynamic, VecStorage};\nuse nalgebra as na;\n\ntype DMatrixi32 = Matrix&lt;u8, Dynamic, Dynamic, VecStorage&lt;u8, Dynamic, Dynamic&gt;&gt;;\n\nuse test::Bencher;\n\n#[bench]\nfn bench_vec_of_vec(b: &amp;mut Bencher) {\n    let (m, n) = (10000, 10000);\n    let mut matrix = vec![vec![0u8; n]; m];\n    b.iter(|| {\n        for i in 0..m {\n            for j in 0..n {\n                matrix[i][j] = 1u8;\n            }\n        }\n    });\n}\n\n#[bench]\nfn bench_vec(b: &amp;mut Bencher) {\n    let (m, n) = (10000, 10000);\n    let mut matrix = vec![0u8; n * m];\n    b.iter(|| {\n        for i in 0..m {\n            for j in 0..n {\n                matrix[i * n + j] = 1u8;\n            }\n        }\n    });\n}\n\n#[bench]\nfn bench_vec_of_vec_unsafe(b: &amp;mut Bencher) {\n    let (m, n) = (10000, 10000);\n    let mut matrix = vec![vec![0u8; n]; m];\n    b.iter(|| {\n        for i in 0..m {\n            for j in 0..n {\n                unsafe {\n                    *matrix.get_unchecked_mut(i).get_unchecked_mut(j) = 1u8;\n                }\n            }\n        }\n    });\n}\n\n#[bench]\nfn bench_vec_unsafe(b: &amp;mut Bencher) {\n    let (m, n) = (10000, 10000);\n    let mut matrix = vec![0u8; n * m];\n    b.iter(|| {\n        for i in 0..m {\n            for j in 0..n {\n                unsafe { *matrix.get_unchecked_mut(i * n + j) = 1u8 };\n            }\n        }\n    });\n}\n\n#[bench]\nfn bench_nalgebra(b: &amp;mut Bencher) {\n    let (m, n) = (10000, 10000);\n    let mut matrix = DMatrixi32::from_vec(m, n, vec![0u8; n * m]);\n    b.iter(|| {\n        for i in 0..m {\n            for j in 0..n {\n                matrix[(i, j)] = 1u8;\n            }\n        }\n    });\n}\n</code></pre>\n"}], "owner": {"reputation": 756, "user_id": 3466751, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/ed487cce2c6293f15343927fd615119e?s=128&d=identicon&r=PG&f=1", "display_name": "user124784", "link": "https://stackoverflow.com/users/3466751/user124784"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2374, "favorite_count": 1, "accepted_answer_id": 33749286, "answer_count": 2, "score": 4, "last_activity_date": 1600480558, "creation_date": 1447734146, "last_edit_date": 1447736037, "question_id": 33749114, "link": "https://stackoverflow.com/questions/33749114/creating-a-struct-with-an-array-matrices", "title": "Creating a struct with an array (Matrices)", "body": "<p>I'm currently working on a simple project to get myself familiar with Rust. I don't have much systems programming experience but I'm hoping to learn!</p>\n\n<p>I'm trying to create a Matrix struct but I'm finding it hard to figure out how I should store the data. I feel like I should be able to use an array. The size of the matrix must be defined on construction and so I would hope I can store the array on the stack.</p>\n\n<p>Right now my code looks like this:</p>\n\n<pre><code>use std::ops::Mul;\nuse std::ops::Add;\nuse std::ops::Div;\n\nstruct Matrix {\n    cols: i32,\n    rows: i32,\n    // Of course this doesn't work!\n    data: [f32; ..cols*rows]\n}\n\n// Below here are a bunch of stub methods.\nimpl Mul&lt;f32&gt; for Matrix {\n    type Output = Matrix;\n\n    fn mul(self, m: f32) -&gt; Matrix {\n        return self;\n    }\n}\n\nimpl Mul&lt;Matrix&gt; for Matrix {\n    type Output = Matrix;\n\n    fn mul(self, m: Matrix) -&gt; Matrix {\n        // Will use Strassen algorithm if large, traditional otherwise\n        return self;\n    }\n}\n\nimpl Add&lt;Matrix&gt; for Matrix {\n    type Output = Matrix;\n\n    fn add(self, m: Matrix) -&gt; Matrix {\n        return self;\n    }\n}\n\nimpl Div&lt;f32&gt; for Matrix {\n    type Output = Matrix;\n\n    fn div(self, f: f32) -&gt; Matrix {\n        return self;\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1447929620, "post_id": 33756123, "comment_id": 55368720, "body": "I&#39;ve chosen to use the first solution, since it seems to impose less burden from the point of view of <code>fooget</code> like functions. The trait is also more explicit w.r.t the second solution."}, {"owner": {"reputation": 271, "user_id": 2217151, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9UhE.jpg?s=128&g=1", "display_name": "mzabaluev", "link": "https://stackoverflow.com/users/2217151/mzabaluev"}, "edited": false, "score": 0, "creation_date": 1547337239, "post_id": 33756123, "comment_id": 95159540, "body": "There are more than two solutions. See my answer for another one that does not have the disadvantages of these two, albeit kludgy in its own way."}, {"owner": {"reputation": 2568, "user_id": 4411558, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90e851e46386fc187059016dd06bbd36?s=128&d=identicon&r=PG", "display_name": "\u5f20\u5b9e\u552f", "link": "https://stackoverflow.com/users/4411558/%e5%bc%a0%e5%ae%9e%e5%94%af"}, "edited": false, "score": 1, "creation_date": 1578730432, "post_id": 33756123, "comment_id": 105541105, "body": "Hello, do you know how to refer to the associated type <code>T::Item</code> in the second method where <code>T</code> does not implement <code>Foo</code>, only <code>&amp;&#39;a T: Foo</code>? Edit: I fount it! It&#39;s <code>&lt;&amp;T as Foo&gt;::Item</code>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 50, "last_activity_date": 1601919408, "last_edit_date": 1601919408, "creation_date": 1447760811, "answer_id": 33756123, "question_id": 33734640, "link": "https://stackoverflow.com/questions/33734640/how-do-i-specify-lifetime-parameters-in-an-associated-type/33756123#33756123", "title": "How do I specify lifetime parameters in an associated type?", "body": "<p>There are a two solutions to your problem. Let's start with the simplest one:</p>\n<h1>Add a lifetime to your trait</h1>\n<pre><code>trait Foo&lt;'a&gt; {\n    type Item: AsRef&lt;Path&gt;;\n    type Iter: Iterator&lt;Item = Self::Item&gt;;\n    \n    fn get(&amp;'a self) -&gt; Self::Iter;\n}\n</code></pre>\n<p>This requires you to annotate the lifetime everywhere you use the trait. When you implement the trait, you need to do a generic implementation:</p>\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; for Bar {\n    type Item = &amp;'a PathBuf;\n    type Iter = std::slice::Iter&lt;'a, PathBuf&gt;;\n    \n    fn get(&amp;'a self) -&gt; Self::Iter {\n        self.v.iter()\n    }\n}\n</code></pre>\n<p>When you require the trait for a generic argument, you also need to make sure that any references to your trait object have the same lifetime:</p>\n<pre><code>fn fooget&lt;'a, T: Foo&lt;'a&gt;&gt;(foo: &amp;'a T) {}\n</code></pre>\n<h1>Implement the trait for a reference to your type</h1>\n<p>Instead of implementing the trait for your type, implement it for a reference to your type. The trait never needs to know anything about lifetimes this way.</p>\n<p>The trait function then must take its argument by value. In your case you  will implement the trait for a reference:</p>\n<pre><code>trait Foo {\n    type Item: AsRef&lt;Path&gt;;\n    type Iter: Iterator&lt;Item = Self::Item&gt;;\n    \n    fn get(self) -&gt; Self::Iter;\n}\n\nimpl&lt;'a&gt; Foo for &amp;'a Bar {\n    type Item = &amp;'a PathBuf;\n    type Iter = std::slice::Iter&lt;'a, PathBuf&gt;;\n    \n    fn get(self) -&gt; Self::Iter {\n        self.v.iter()\n    }\n}\n</code></pre>\n<p>Your <code>fooget</code> function now simply becomes</p>\n<pre><code>fn fooget&lt;T: Foo&gt;(foo: T) {}\n</code></pre>\n<p>The problem with this is that the <code>fooget</code> function doesn't know <code>T</code> is in reality a <code>&amp;Bar</code>. When you call the <code>get</code> function, you are actually moving out of the <code>foo</code> variable. You don't move out of the object, you just move the reference. If your <code>fooget</code> function tries to call <code>get</code> twice, the function won't compile.</p>\n<p>If you want your <code>fooget</code> function to only accept arguments where the <code>Foo</code> trait is implemented for references, you need to explicitly state this bound:</p>\n<pre><code>fn fooget_twice&lt;'a, T&gt;(foo: &amp;'a T)\nwhere\n    &amp;'a T: Foo,\n{}\n</code></pre>\n<p>The <code>where</code> clause makes sure that you only call this function for references where <code>Foo</code> was implemented for the reference instead of the type. It may also be implemented for both.</p>\n<p>Technically, the compiler could automatically infer the lifetime in <code>fooget_twice</code> so you could write it as</p>\n<pre><code>fn fooget_twice&lt;T&gt;(foo: &amp;T)\nwhere\n    &amp;T: Foo,\n{}\n</code></pre>\n<p>but it's not smart enough <a href=\"https://github.com/rust-lang/rfcs/issues/762\" rel=\"noreferrer\">yet</a>.</p>\n<hr />\n<p>For more complicated cases, you can use a Rust feature which is not yet implemented: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"noreferrer\">Generic Associated Types</a> (GATs). Work for that is being tracked in <a href=\"https://github.com/rust-lang/rust/issues/44265\" rel=\"noreferrer\">issue 44265</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 1, "last_activity_date": 1492942908, "creation_date": 1492942908, "answer_id": 43569883, "question_id": 33734640, "link": "https://stackoverflow.com/questions/33734640/how-do-i-specify-lifetime-parameters-in-an-associated-type/43569883#43569883", "title": "How do I specify lifetime parameters in an associated type?", "body": "<p>In future, you'll <a href=\"https://github.com/rust-lang/rfcs/issues/1965\" rel=\"nofollow noreferrer\">want</a> an <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/\" rel=\"nofollow noreferrer\">associated type constructor</a> for your lifetime <code>'a</code> but Rust does not support that yet.  See <a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"nofollow noreferrer\">RFC 1598</a></p>\n"}, {"comments": [{"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1548155808, "post_id": 54164903, "comment_id": 95433914, "body": "That&#39;s an interesting solution, but it seems to me that it can only work if IterableFoo and Bar are defined in the same crate, right? So you can&#39;t use it in a generic trait, defined by your crate, that users of your crate would implement in their own... Or am I missing something?"}, {"owner": {"reputation": 271, "user_id": 2217151, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9UhE.jpg?s=128&g=1", "display_name": "mzabaluev", "link": "https://stackoverflow.com/users/2217151/mzabaluev"}, "reply_to_user": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1548621321, "post_id": 54164903, "comment_id": 95596954, "body": "@Pierre-Antoine I have added another solution that permits off-crate implementations."}], "tags": [], "owner": {"reputation": 271, "user_id": 2217151, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Y9UhE.jpg?s=128&g=1", "display_name": "mzabaluev", "link": "https://stackoverflow.com/users/2217151/mzabaluev"}, "is_accepted": false, "score": 4, "last_activity_date": 1550236648, "last_edit_date": 1550236648, "creation_date": 1547336624, "answer_id": 54164903, "question_id": 33734640, "link": "https://stackoverflow.com/questions/33734640/how-do-i-specify-lifetime-parameters-in-an-associated-type/54164903#54164903", "title": "How do I specify lifetime parameters in an associated type?", "body": "<h1>Use a wrapper type</h1>\n\n<p>If the trait and all its implementations are defined in one crate, a helper type can be useful:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Foo {\n    fn get&lt;'a&gt;(&amp;'a self) -&gt; IterableFoo&lt;'a, Self&gt; {\n        IterableFoo(self)\n    }\n}\n\nstruct IterableFoo&lt;'a, T: ?Sized + Foo&gt;(pub &amp;'a T);\n</code></pre>\n\n<p>For a concrete type that implements <code>Foo</code>, implement the iterator conversion on the <code>IterableFoo</code> wrapping it:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Foo for Bar {}\n\nimpl&lt;'a&gt; IntoIterator for IterableFoo&lt;'a, Bar&gt; {\n    type Item = &amp;'a PathBuf;\n    type IntoIter = std::slice::Iter&lt;'a, PathBuf&gt;;\n    fn into_iter(self) -&gt; Self::IntoIter {\n        self.0.v.iter()\n    }\n}\n</code></pre>\n\n<p>This solution does not allow implementations in a different crate. Another disadvantage is that an <code>IntoIterator</code> bound cannot be encoded into the definition of the trait, so it will need to be specified as an additional (and higher-rank) bound for generic code that wants to iterate over the result of <code>Foo::get</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn use_foo_get&lt;T&gt;(foo: &amp;T)\nwhere\n    T: Foo,\n    for&lt;'a&gt; IterableFoo&lt;'a, T&gt;: IntoIterator,\n    for&lt;'a&gt; &lt;IterableFoo&lt;'a, T&gt; as IntoIterator&gt;::Item: AsRef&lt;Path&gt;\n{\n    for p in foo.get() {\n        println!(\"{}\", p.as_ref().to_string_lossy());\n    }\n}\n\n</code></pre>\n\n<h1>Associated type for an internal object providing desired functionality</h1>\n\n<p>The trait can define an associated type that gives access to a part of the object that, bound in a reference, provides the necessary access traits.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Foo {\n    type Iterable: ?Sized;\n\n    fn get(&amp;self) -&gt; &amp;Self::Iterable;\n}\n</code></pre>\n\n<p>This requires that any implementation type contains a part that can be so exposed:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Foo for Bar {\n    type Iterable = [PathBuf];\n\n    fn get(&amp;self) -&gt; &amp;Self::Iterable {\n        &amp;self.v\n    }\n}\n</code></pre>\n\n<p>Put bounds on the reference to the associated type in generic code that uses the the result of <code>get</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn use_foo_get&lt;'a, T&gt;(foo: &amp;'a T)\nwhere\n    T: Foo,\n    &amp;'a T::Iterable: IntoIterator,\n    &lt;&amp;'a T::Iterable as IntoIterator&gt;::Item: AsRef&lt;Path&gt;\n{\n    for p in foo.get() {\n        println!(\"{}\", p.as_ref().to_string_lossy());\n    }\n}\n</code></pre>\n\n<p>This solution permits implementations outside of the trait definition crate.\nThe bound work at generic use sites is as annoying as with the previous solution.\nAn implementing type may need an internal shell struct with the only purpose of providing the associated type, in case when the use-site bounds are not as readily satisfied as with <code>Vec</code> and <code>IntoIterator</code> in the example discussed.</p>\n"}], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9923, "favorite_count": 9, "accepted_answer_id": 33756123, "answer_count": 3, "score": 44, "last_activity_date": 1601919408, "creation_date": 1447674450, "last_edit_date": 1516982408, "question_id": 33734640, "link": "https://stackoverflow.com/questions/33734640/how-do-i-specify-lifetime-parameters-in-an-associated-type", "title": "How do I specify lifetime parameters in an associated type?", "body": "<p>I have this trait and simple structure:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\ntrait Foo {\n    type Item: AsRef&lt;Path&gt;;\n    type Iter: Iterator&lt;Item = Self::Item&gt;;\n\n    fn get(&amp;self) -&gt; Self::Iter;\n}\n\nstruct Bar {\n    v: Vec&lt;PathBuf&gt;,\n}\n</code></pre>\n\n<p>I would like to implement the <code>Foo</code> trait for <code>Bar</code>:</p>\n\n<pre><code>impl Foo for Bar {\n    type Item = PathBuf;\n    type Iter = std::slice::Iter&lt;PathBuf&gt;;\n\n    fn get(&amp;self) -&gt; Self::Iter {\n        self.v.iter()\n    }\n}\n</code></pre>\n\n<p>However I'm getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n  --&gt; src/main.rs:16:17\n   |\n16 |     type Iter = std::slice::Iter&lt;PathBuf&gt;;\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ expected lifetime parameter\n</code></pre>\n\n<p>I found no way to specify lifetimes inside that associated type. In particular I want to express that the iterator cannot outlive the <code>self</code> lifetime.</p>\n\n<p>How do I have to modify the <code>Foo</code> trait, or the <code>Bar</code> trait implementation, to make this work?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b67ee336bf04f71d175a2bab2370d7cf&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Rust playground</a></p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 356, "user_id": 5280790, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eac429a5a60ea7f567cc51ad67a95034?s=128&d=identicon&r=PG&f=1", "display_name": "Iceberg", "link": "https://stackoverflow.com/users/5280790/iceberg"}, "edited": false, "score": 0, "creation_date": 1447645630, "post_id": 33728118, "comment_id": 55225625, "body": "I don&#39;t see the aliasing effect.  We are producing mutable references with get_mut, but the lifetimes of these references should not overlap as far as I can tell.  Unless I&#39;m missing something, it follows the same logic as your code."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1447646040, "last_edit_date": 1447646040, "creation_date": 1447644899, "answer_id": 33728118, "question_id": 33727808, "link": "https://stackoverflow.com/questions/33727808/lifetime-errors-using-filter-map/33728118#33728118", "title": "Lifetime Errors using filter_map", "body": "<p>I don't know why you'd bring <code>filter_map</code> into the picture here. Simply iterating over the keys and setting the value is much more obvious to me:</p>\n\n<pre><code>fn increment(map: &amp;mut HashMap&lt;i32, i32&gt;, keys: &amp;[i32]) {\n    for index in keys {\n        if let Some(value) = map.get_mut(index) {\n            *value += 1; \n        }\n    }\n}\n</code></pre>\n\n<p>Your first solution has a massive problem \u2014 what happens if you have <em>the same key twice</em>? Since you are producing mutable references, you would then have an iterator that would have handed out the same mutable reference twice, introducing <em>aliasing</em>. This is forbidden in safe Rust.</p>\n\n<p>I believe this to be the cause of your error message, but I'll admit to not fully pinning it to that issue. I do know that it would cause problems eventually though.</p>\n\n<hr>\n\n<blockquote>\n  <p>I don't see the aliasing effect. We are producing mutable references with <code>get_mut</code>, but the lifetimes of these references should not overlap as far as I can tell. Unless I'm missing something, it follows the same logic as your code. </p>\n</blockquote>\n\n<p>To make it more obvious, here's your same code, with a <code>collect</code> tacked on:</p>\n\n<pre><code>let xs: Vec&lt;_&gt; = keys.iter().filter_map(|index| map.get_mut(index)).collect();\n</code></pre>\n\n<p>The important inner part is the same - you are producing an iterator that <em>might</em> contain multiple mutable references to the same item. </p>\n\n<p>Note that the Rust compiler cannot (or at least does not) completely analyze your program to see that <em>in this case</em> you consume one value and throw it away, never holding on to multiple. All it can do is see that part of what you did <em>could</em> lead to this case and prevent you from doing it.</p>\n\n<p>Conversely, the version above can <em>never</em> lead to aliasing because the mutable reference does not last beyond in <code>for</code> block.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1447647950, "last_edit_date": 1447647950, "creation_date": 1447646823, "answer_id": 33728353, "question_id": 33727808, "link": "https://stackoverflow.com/questions/33727808/lifetime-errors-using-filter-map/33728353#33728353", "title": "Lifetime Errors using filter_map", "body": "<p><a href=\"http://is.gd/A1IV9l\" rel=\"nofollow\">I've desugared your original code</a><sup>\u2020</sup> in order to get a more precise error. I ended up with an error on the following method:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; FnMut&lt;(&amp;'b i32,)&gt; for MyClosure&lt;'a&gt; {\n    extern \"rust-call\"\n    fn call_mut(&amp;mut self, (index,): (&amp;'b i32,)) -&gt; Option&lt;&amp;'a mut i32&gt; {\n        self.map.get_mut(index)\n    }\n}\n</code></pre>\n\n<p>The error is:</p>\n\n<pre><code>&lt;anon&gt;:21:18: 21:32 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements [E0495]\n&lt;anon&gt;:21         self.map.get_mut(index)\n                           ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>Usually, when you return a mutable reference from a function, it's bound to the lifetime of a parameter. The returned reference causes the value passed as a parameter to the function to still be considered borrowed, and by Rust's rules, you can't have take another borrow on that value until the first borrow goes out of scope. Hence, this program doesn't compile:</p>\n\n<pre><code>struct Foo {\n    x: i32\n}\n\nimpl Foo {\n    fn x_mut(&amp;mut self) -&gt; &amp;mut i32 { &amp;mut self.x }\n}\n\nfn main() {\n    let mut foo = Foo { x: 0 };\n    let a = foo.x_mut();\n    foo.x_mut(); // error: cannot borrow `foo` as mutable more than once at a time\n}\n</code></pre>\n\n<p>The problem is that you're trying to return a mutable reference with lifetime <code>'a</code>, but that lifetime does not properly express the fact that you're actually borrowing from <code>MyClosure</code>. Therefore, the compiler would not consider the <code>MyClosure</code> borrowed after the call and would allow you to call the closure again, which could potentially return a mutable reference identical to one returned previously, leading to aliasing of mutable references, which is forbidden in safe Rust.</p>\n\n<p>For this to work, the <code>FnMut</code> implementation would have to be written this way:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; FnMut&lt;(&amp;'b i32,)&gt; for MyClosure&lt;'a&gt; {\n    extern \"rust-call\"\n    fn call_mut&lt;'c&gt;(&amp;'c mut self, (index,): (&amp;'b i32,)) -&gt; Option&lt;&amp;'c mut i32&gt; {\n        self.map.get_mut(index)\n    }\n}\n</code></pre>\n\n<p>But this is not valid:</p>\n\n<pre><code>&lt;anon&gt;:19:5: 22:6 error: method `call_mut` has an incompatible type for trait:\n expected bound lifetime parameter ,\n    found concrete lifetime [E0053]\n&lt;anon&gt;:19     extern \"rust-call\"\n&lt;anon&gt;:20     fn call_mut&lt;'c&gt;(&amp;'c mut self, (index,): (&amp;'b i32,)) -&gt; Option&lt;&amp;'c mut i32&gt; {\n&lt;anon&gt;:21         self.map.get_mut(index)\n&lt;anon&gt;:22     }\n</code></pre>\n\n<p>This is the same error that is generated when one tries to write a streaming iterator.</p>\n\n<hr>\n\n<p>\u2020 Actually, this desugared code corresponds to the closure <code>move |index| map.get_mut(index)</code>. Your original closure would contain a <code>&amp;mut &amp;mut HashMap&lt;i32, i32&gt;</code> field, rather than a <code>&amp;mut HashMap&lt;i32, i32&gt;</code> field.</p>\n"}], "owner": {"reputation": 356, "user_id": 5280790, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eac429a5a60ea7f567cc51ad67a95034?s=128&d=identicon&r=PG&f=1", "display_name": "Iceberg", "link": "https://stackoverflow.com/users/5280790/iceberg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 382, "favorite_count": 0, "accepted_answer_id": 33728353, "answer_count": 2, "score": 1, "last_activity_date": 1447647950, "creation_date": 1447642377, "question_id": 33727808, "link": "https://stackoverflow.com/questions/33727808/lifetime-errors-using-filter-map", "title": "Lifetime Errors using filter_map", "body": "<p>I'm trying to use Iterator's <code>filter_map</code> function with a <code>HashMap</code> in Rust, but I can't get it to compile.  Suppose I have a <code>HashMap</code> and a list of keys.  For each key, if the map contains the key, I mutate the corresponding value in the map.  For example, suppose the values were of type <code>i32</code> and I wanted to increment the appropriate values.</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn increment(map: &amp;mut HashMap&lt;i32, i32&gt;, keys: &amp;[i32]) {\n    for value in keys.iter().filter_map(|index| map.get_mut(index)) {\n        *value += 1;\n    }\n}\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(1,2);\n    map.insert(4,5);\n    increment(&amp;mut map, &amp;[0, 1, 2]);\n    assert!(*map.get(&amp;1).unwrap() == 3);\n    assert!(*map.get(&amp;4).unwrap() == 5);\n}\n</code></pre>\n\n<p>This code gives me an error related to lifetimes:</p>\n\n<pre><code>&lt;anon&gt;:4:57: 4:71 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n&lt;anon&gt;:4         for value in keys.iter().filter_map(|index| map.get_mut(index)) {\n                                                                 ^~~~~~~~~~~~~~\n&lt;anon&gt;:4:9: 6:10 note: in this expansion of for loop expansion\n&lt;anon&gt;:4:9: 6:10 note: first, the lifetime cannot outlive the call at 4:8...\n&lt;anon&gt;:4         for value in keys.iter().filter_map(|index| map.get_mut(index)) {\n&lt;anon&gt;:5             *value += 1;\n&lt;anon&gt;:6         }\n&lt;anon&gt;:4:9: 6:10 note: in this expansion of for loop expansion\n&lt;anon&gt;:4:9: 6:10 note: ...so that argument is valid for the call\n&lt;anon&gt;:4         for value in keys.iter().filter_map(|index| map.get_mut(index)) {\n&lt;anon&gt;:5             *value += 1;\n&lt;anon&gt;:6         }\n&lt;anon&gt;:4:9: 6:10 note: in this expansion of for loop expansion\n&lt;anon&gt;:4:53: 4:71 note: but, the lifetime must be valid for the method call at 4:52...\n&lt;anon&gt;:4         for value in keys.iter().filter_map(|index| map.get_mut(index)) {\n                                                             ^~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:4:9: 6:10 note: in this expansion of for loop expansion\n&lt;anon&gt;:4:53: 4:56 note: ...so that method receiver is valid for the method call\n&lt;anon&gt;:4         for value in keys.iter().filter_map(|index| map.get_mut(index)) {\n                                                             ^~~\n&lt;anon&gt;:4:9: 6:10 note: in this expansion of for loop expansion\nerror: aborting due to previous error\n</code></pre>\n\n<p>Why am I getting this error, and what would be the best way to handle this situation using idiomatic Rust?</p>\n"}, {"tags": ["regex", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 6, "last_activity_date": 1447632073, "creation_date": 1447632073, "answer_id": 33726630, "question_id": 33726572, "link": "https://stackoverflow.com/questions/33726572/no-method-named-unwrap-found-for-type-regexreregex-in-the-current-scope/33726630#33726630", "title": "No method named `unwrap` found for type `regex::re::Regex` in the current scope", "body": "<p>You're getting this error because, well, <code>regex::re::Regex</code> doesn't implement a method called <code>unwrap</code> ;-)</p>\n\n<p>In the line from the example</p>\n\n<p><code>for pos in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {</code></p>\n\n<p><code>unwrap</code> is called on a value of type <code>Result&lt;Regex, Error&gt;</code> , which is what <code>Regex::new</code> <a href=\"https://doc.rust-lang.org/regex/regex/enum.Regex.html#method.new\" rel=\"noreferrer\">returns</a>. But in your code, you're calling <code>unwrap</code> on a value of type <code>Regex</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 4, "last_activity_date": 1447632081, "creation_date": 1447632081, "answer_id": 33726633, "question_id": 33726572, "link": "https://stackoverflow.com/questions/33726572/no-method-named-unwrap-found-for-type-regexreregex-in-the-current-scope/33726633#33726633", "title": "No method named `unwrap` found for type `regex::re::Regex` in the current scope", "body": "<p>All matching operations are on the <code>Regex</code> type itself, e.g. <a href=\"http://doc.rust-lang.org/regex/regex/enum.Regex.html#method.find_iter\" rel=\"nofollow\"><code>find_iter</code></a>, so you can just call them directly: <code>regexp.find_iter(s);</code>.</p>\n\n<p>The <code>unwrap</code> is needed in the first case because <a href=\"http://doc.rust-lang.org/regex/regex/enum.Regex.html#method.new\" rel=\"nofollow\"><code>Regex::new(...)</code> returns a <code>Result</code></a>, that is, it could fail (if the <code>Regex</code> is invalid). If you already have a plain <code>Regex</code>, no <code>unwrap</code> is needed.</p>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 797, "favorite_count": 0, "accepted_answer_id": 33726630, "answer_count": 2, "score": 0, "last_activity_date": 1447644987, "creation_date": 1447631624, "last_edit_date": 1447644987, "question_id": 33726572, "link": "https://stackoverflow.com/questions/33726572/no-method-named-unwrap-found-for-type-regexreregex-in-the-current-scope", "title": "No method named `unwrap` found for type `regex::re::Regex` in the current scope", "body": "<p>I'm trying to find all the spans of matches of a regular expression in Rust and found a really promising method <a href=\"https://doc.rust-lang.org/regex/regex/enum.Regex.html\" rel=\"nofollow\">in the docs</a>. Here's the example usage that I found </p>\n\n<pre><code>let text = \"Retroactively relinquishing remunerations is reprehensible.\";\nfor pos in Regex::new(r\"\\b\\w{13}\\b\").unwrap().find_iter(text) {\n    println!(\"{:?}\", pos);\n}\n\n// Output:\n// (0, 13)\n// (14, 27)\n// (28, 41)\n// (45, 58)\n</code></pre>\n\n<p>I'm trying to emulate this behavior on an arbitrary regex within a library. Here's my code.</p>\n\n<blockquote>\n  <p>Cargo.toml (relevant part)</p>\n</blockquote>\n\n<pre><code>[dependencies]\nregex = \"0.1\"\n</code></pre>\n\n<blockquote>\n  <p>lib.rs</p>\n</blockquote>\n\n<pre><code>extern crate regex;\npub mod tokenize;\n</code></pre>\n\n<blockquote>\n  <p>tokenize/mod.rs</p>\n</blockquote>\n\n<pre><code>extern crate regex;\npub mod util;\n</code></pre>\n\n<blockquote>\n  <p>tokenize/util.rs</p>\n</blockquote>\n\n<pre><code>extern crate regex;\nuse regex::Regex;\n\npub fn regexp_span_tokenize(s: &amp;str, regexp: regex::Regex) -&gt; Vec&lt;(i32, i32)&gt; {\n    return regexp.unwrap().find_iter(s);\n}\n</code></pre>\n\n<p>When I issue <code>cargo build</code>, I get the following error:</p>\n\n<pre><code>tokenize/util.rs:38:19: 38:27 error: no method named `unwrap` found for type `regex::re::Regex` in the current scope\ntokenize/util.rs:38     return regexp.unwrap().find_iter(s);\n                                      ^~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Why am I getting this compilation error?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1447621160, "post_id": 33724863, "comment_id": 55219301, "body": "Stack Overflow is not a code-writing (or fixing) service. Since you state you understand the error message and have found similar questions, can you give us any guidance on how we can help you understand the problem <i>without just writing the solution for you</i>? What is insufficient about the previous question and answer(s)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1447622166, "post_id": 33724863, "comment_id": 55219644, "body": "There&#39;s also numerous questions asking the same thing. Basically all the &quot;Related&quot; Q&amp;A in the sidebar should be checked out."}], "answers": [{"comments": [{"owner": {"reputation": 11, "user_id": 5565320, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/1HoB8.png?s=128&g=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5565320/olivier"}, "edited": false, "score": 0, "creation_date": 1447648204, "post_id": 33727054, "comment_id": 55226258, "body": "Thanks for your answer. I need to use <code>page_c</code> after the loop,something like that:          <code>} &#47;&#47; end of loop          println!(&quot;page_c {}&quot;, page_c);     }</code>"}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 1, "last_activity_date": 1447635676, "creation_date": 1447635676, "answer_id": 33727054, "question_id": 33724863, "link": "https://stackoverflow.com/questions/33724863/cannot-borrow-as-immutable-because-self-is-also-borrowed-as-mutable-e050/33727054#33727054", "title": "cannot borrow `*` as immutable because `*self` is also borrowed as mutable [E0502]", "body": "<p>The simplest way to fix your code is to not introduce an extra variable for page_c, but use the result from <code>get_page</code> directly:</p>\n\n<pre><code>pub fn process(&amp;mut self, line: &amp;str, book_id: &amp;'a str) {\n    println!(\"page_c {}\", self.get_page(book_id));\n\n    for history in self.histories.iter() {\n        println!(\"histories...\");\n    }\n}\n</code></pre>\n\n<p>This way, <code>self</code> isn't borrowed when you get to the <code>for</code> loop, because it is only borrowed for the call to <code>println</code>. If you did want to have a variable for page_c, you could introduce it in an extra scope, so the borrow will at the end of the scope (and therefore before the loop):</p>\n\n<pre><code>pub fn process(&amp;mut self, line: &amp;str, book_id: &amp;'a str) {\n    {\n        let page_c = self.get_page(book_id);\n        println!(\"page_c {}\", page_c);\n    } // page_c ceases to exist here, so the borrow of self ends\n    for history in self.histories.iter() {\n        println!(\"histories...\");\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 11, "user_id": 5565320, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/1HoB8.png?s=128&g=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5565320/olivier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 849, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1447635676, "creation_date": 1447620536, "last_edit_date": 1495539895, "question_id": 33724863, "link": "https://stackoverflow.com/questions/33724863/cannot-borrow-as-immutable-because-self-is-also-borrowed-as-mutable-e050", "title": "cannot borrow `*` as immutable because `*self` is also borrowed as mutable [E0502]", "body": "<p>Here is all of my code:</p>\n\n<pre><code>use std::collections::HashMap;\n\npub struct Book&lt;'a&gt; {\n    page: Vec&lt;&amp;'a str&gt;,\n    histories: HashMap&lt;&amp;'a str, &amp;'a str&gt;,\n}\n\nimpl&lt;'a&gt; Book&lt;'a&gt; {\n    pub fn new(page: Vec&lt;&amp;'a str&gt;) -&gt; Book&lt;'a&gt; {\n        let histories = HashMap::new();\n        Book {\n            page: page,\n            histories: histories\n        }\n    }\n\n    pub fn process(&amp;mut self, line: &amp;str, book_id: &amp;'a str) {\n\n        let page_c = self.get_page(book_id);\n        println!(\"page_c {}\", page_c);\n\n        for history in self.histories.iter() {\n            println!(\"histories...\");\n        }\n    }\n\n    fn get_page(&amp;mut self, book_id: &amp;'a str) -&gt; &amp;str {\n        if !self.histories.contains_key(book_id) {\n            println!(\"not history found for book {}\", book_id);\n            self.histories.insert(book_id, \"history A\");\n        }\n        self.histories.get(book_id).unwrap()\n    }\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n    let mut pages = Vec::new();\n    let st = \"page1\";\n    pages.push(st);\n\n    let mut biblio = Book::new(pages);\n\n    let sentence = \"this is a line of page\";\n    let book_id = \"onebook\";\n    biblio.process(sentence, book_id);\n}\n</code></pre>\n\n<p>This doesn't compile:</p>\n\n<pre><code>src/main.rs:22:24: 22:38 error: cannot borrow `self.histories` as immutable because `*self` is also borrowed as mutable [E0502]\nsrc/main.rs:22         for history in self.histories.iter() {\n                                      ^~~~~~~~~~~~~~\nsrc/main.rs:19:22: 19:26 note: previous borrow of `*self` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `*self` until the borrow ends\nsrc/main.rs:19         let page_c = self.get_page(book_id);\n                                    ^~~~\nsrc/main.rs:25:6: 25:6 note: previous borrow ends here\nsrc/main.rs:17     pub fn process(&amp;mut self, line: &amp;str, book_id: &amp;'a str) {\n...\nsrc/main.rs:25     }\n                   ^\nerror: aborting due to previous error\nCould not compile `tempo`.\n</code></pre>\n\n<p>I understand the error message, but after research and reading <a href=\"https://stackoverflow.com/questions/23032464/rust-cannot-borrow-self-as-mutable-because-self-history-is-also-borrow\">similar questions</a>, I do not understand how I can fix my code.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1447611919, "post_id": 33723106, "comment_id": 55216096, "body": "<i>obligated us to insert tedious conversions</i>  \u2014 this is just thinly veiled complaining and doesn&#39;t really suit asking an objective question. <i>in C it&#39;s pretty common to use <code>int</code></i> \u2014 this is because C and C++ <a href=\"https://google.github.io/styleguide/cppguide.html\" rel=\"nofollow noreferrer\">doesn&#39;t handle unsigned numbers well</a> (see the section &quot;On Unsigned Integers&quot;). This also helps explain the &quot;tedious conversions&quot; in Rust. Answers to this question are highly opinionated and boil down to &quot;use the right type for your domain&quot;. We cannot tell you what your domain is."}, {"owner": {"reputation": 51826, "user_id": 1223693, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/viu9Y.jpg?s=128&g=1", "display_name": "tckmn", "link": "https://stackoverflow.com/users/1223693/tckmn"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1447612618, "post_id": 33723106, "comment_id": 55216303, "body": "What @Shepmaster said. Use whatever integer type fits. There&#39;s no &quot;one rule&quot; to determine what type you should use."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1447625615, "post_id": 33723106, "comment_id": 55220731, "body": "<i>tedious conversions</i> =&gt; Don&#39;t forget that you need to think over the edge cases that might break your code for each of these conversions. <i>That&#39;s</i> the tedious part, and Rust forces you to be careful about it."}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 1, "creation_date": 1447664868, "post_id": 33723106, "comment_id": 55232059, "body": "The guidelines for the standard library are outlined in <a href=\"https://github.com/rust-lang/rust/issues/22240\" rel=\"nofollow noreferrer\">#22240</a>. That can form the basis of an answer for this question."}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 259, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1447696702, "creation_date": 1447610876, "last_edit_date": 1447696702, "question_id": 33723106, "link": "https://stackoverflow.com/questions/33723106/how-to-choose-integer-types-for-a-new-api-written-in-rust", "title": "How to choose integer types for a new API written in Rust?", "body": "<p>What is the idiomatic way of choosing integer types in API written in Rust?</p>\n\n<p>For example in C it's pretty common to use <code>int</code> even for function arguments which are expected to be positive. For sake of simplicity we use <code>int</code> type specifier even for arguments which can be fitted into a single byte.</p>\n\n<p>Rust has a very strict type system, so all type conversions should be explicit. For example by making <code>Vec&lt;T&gt;::len()</code> return <code>usize</code>, the designers of the Rust standard library obligated us to insert tedious conversions to <code>isize</code> while performing non-trivial calculations (where negative values can appear).</p>\n\n<p>So should I use specialized integer types when writing an API or is it worth just to stick with <code>isize</code>?</p>\n\n<p>Update:</p>\n\n<p>Will ask more specifically. I design a type called <code>NeuralNet</code> with the following instance constructor:</p>\n\n<pre><code>pub struct NeuralNet&lt;F: traits::Float, A: Activator&lt;F&gt;&gt; {\n    phantom: marker::PhantomData&lt;A&gt;,\n    inputs: isize,\n    input_neurons: isize,\n    folding_step: isize,\n    layers: isize,\n    coefs: vec::Vec&lt;F&gt;\n}\n\nimpl&lt;F: traits::Float, A: Activator&lt;F&gt;&gt; NeuralNet&lt;F, A&gt; {\n    pub fn new(inputs: isize, input_neurons: isize,\n               folding_step: isize, layers: isize,\n               coefs: &amp;[F]) -&gt; NeuralNet&lt;F, A&gt; {\n    ...\n}\n</code></pre>\n\n<p>Here <code>inputs</code> and <code>input_neurons</code> can be fitted into <code>u16</code>, <code>layers</code> can be fitted into <code>u8</code> and <code>folding_step</code>into <code>i8</code>. Should I use those type or just to stick with <code>isize</code> not to overcomplicate the constructor?</p>\n"}, {"tags": ["linux", "rust"], "answers": [{"tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": true, "score": 1, "last_activity_date": 1447562614, "creation_date": 1447562614, "answer_id": 33716504, "question_id": 33715597, "link": "https://stackoverflow.com/questions/33715597/can-i-read-from-stdin-in-a-non-canonical-way/33716504#33716504", "title": "Can I read from stdin in a non-canonical way?", "body": "<p>No, not without external crates or unsafe FFI code. You will probably want to use the <a href=\"http://linux.die.net/man/3/termios\" rel=\"nofollow\">termios</a> functions. Specifically, see <code>ICANON</code> and <code>tcsetattr</code>. The crate <a href=\"https://github.com/carllerche/nix-rust\" rel=\"nofollow\">nix</a> has bindings for these functions. See <a href=\"https://github.com/cpjreynolds/rustty/blob/master/src/core/termctl.rs\" rel=\"nofollow\">here</a> for an example of how to use them in Rust.</p>\n"}], "owner": {"reputation": 221, "user_id": 5563279, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d3aec877539c0c0b926655073c2a7f6e?s=128&d=identicon&r=PG", "display_name": "Felipe Tavares", "link": "https://stackoverflow.com/users/5563279/felipe-tavares"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 332, "favorite_count": 0, "accepted_answer_id": 33716504, "answer_count": 1, "score": 5, "last_activity_date": 1447599141, "creation_date": 1447552861, "last_edit_date": 1447599141, "question_id": 33715597, "link": "https://stackoverflow.com/questions/33715597/can-i-read-from-stdin-in-a-non-canonical-way", "title": "Can I read from stdin in a non-canonical way?", "body": "<p>Is there any way one could read from <em>stdin</em> in <a href=\"http://www.gnu.org/software/libc/manual/html_node/Noncanonical-Input.html\" rel=\"nofollow\">non-canonical mode</a> under Linux? Non-canonical input means that calls to <code>read()</code> on <em>stdin</em> shall return as soon as the user types, which is not the default behaviour, as one can see by trying:</p>\n\n<pre><code>// Create a buffer\nlet mut buffer :[u8; 1] = [0];\n// Loops over the input from stdin, one character a time\nwhile io::stdin().read(&amp;mut buffer).unwrap() &gt; 0 {\n    println!(\"{:?}\", buffer);\n}\n</code></pre>\n\n<p>This code waits for the user to press <kbd>return</kbd> to print the contents of <code>buffer</code>. The desired behaviour would be for it to print as the user typed. In the documentation for <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html\" rel=\"nofollow\"><code>Stdin</code></a> (the struct returned by the <code>stdin()</code> call in the code above), there is no reference to how one could change this default behaviour.</p>\n"}, {"tags": ["linux", "sockets", "network-programming", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2102, "user_id": 1215031, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6ae3697b2cf910eb587338b46daf7856?s=128&d=identicon&r=PG", "display_name": "Moonwalker", "link": "https://stackoverflow.com/users/1215031/moonwalker"}, "edited": false, "score": 0, "creation_date": 1448615959, "post_id": 33714606, "comment_id": 55665847, "body": "One more question. The code above is old, so I&#39;m converting it to be compatible with recent Rust version. Now, I don&#39;t know what to do with &#39;src/main.rs:3:5: 3:31 error: unresolved import <code>std::net::sockaddr_to_addr</code>. There is no <code>sockaddr_to_addr</code> in <code>std::net</code> [E0432]&#39; I&#39;ve searched <a href=\"http://doc.rust-lang.org/std/?search=sockaddr_to_addr\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/?search=sockaddr_to_addr</a> and could not find it. Is is being completely removed? If so, what do I have to use instead of?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1447543846, "creation_date": 1447543846, "answer_id": 33714606, "question_id": 33714116, "link": "https://stackoverflow.com/questions/33714116/is-there-a-safe-interface-to-raw-sockets/33714606#33714606", "title": "Is there a safe interface to raw sockets?", "body": "<p>In general, there cannot be a safe interface to arbitrary C code as C code cannot be guaranteed to not do things that safe Rust disallows. Although simply convention, many things in Rust land that say \"raw\" in the name have unsafe semantics.</p>\n\n<p>What you can do is wrap the raw C code with Rust code that ensures that the C code never gets into a state that violates the safety of the program. That's how items like <a href=\"http://doc.rust-lang.org/std/net/struct.TcpStream.html\" rel=\"nofollow\"><code>TcpStream</code></a> or <a href=\"http://doc.rust-lang.org/std/net/struct.UdpSocket.html\" rel=\"nofollow\"><code>UdpSocket</code></a> are constructed. There is no wrapper for ICMP sockets as far as I know.</p>\n"}], "owner": {"reputation": 2102, "user_id": 1215031, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6ae3697b2cf910eb587338b46daf7856?s=128&d=identicon&r=PG", "display_name": "Moonwalker", "link": "https://stackoverflow.com/users/1215031/moonwalker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 297, "favorite_count": 0, "accepted_answer_id": 33714606, "answer_count": 1, "score": 1, "last_activity_date": 1447543846, "creation_date": 1447539832, "last_edit_date": 1447543346, "question_id": 33714116, "link": "https://stackoverflow.com/questions/33714116/is-there-a-safe-interface-to-raw-sockets", "title": "Is there a safe interface to raw sockets?", "body": "<p><a href=\"https://github.com/mcpherrinm/rust-traceroute\" rel=\"nofollow\">Here</a> it is said that the only way is to use libc:</p>\n\n<pre><code>extern crate libc;\nextern crate native;\nuse libc::{c_int, c_void, socket, AF_INET, sockaddr_storage};\nuse native::io::net::sockaddr_to_addr;\nuse std::io::net::ip::SocketAddr;\nstatic SOCK_RAW: c_int = 3;\nstatic IPPROTO_ICMP: c_int = 1;\n\nfn recvfrom&lt;'buf&gt;(sock: c_int, buf: &amp;'buf mut [u8]) -&gt; (&amp;'buf mut [u8], SocketAddr) {\n  let mut storage: sockaddr_storage = unsafe { std::mem::init() };\n  let storagep = &amp;mut storage as *mut _ as *mut libc::sockaddr;\n  let mut addrlen = std::mem::size_of::&lt;libc::sockaddr_storage&gt;() as libc::socklen_t;\n\n  let bytes = unsafe { libc::recvfrom(sock,\n                 buf.as_mut_ptr() as *mut c_void,\n                 buf.len() as u64, \n                 0, storagep, &amp;mut addrlen) };\n\n  (buf.mut_slice_to(bytes as uint),\n   sockaddr_to_addr(&amp;storage, addrlen as uint).unwrap())\n}\n\nfn main() {\n  let handle = unsafe { socket(AF_INET, SOCK_RAW, IPPROTO_ICMP) };\n  println!(\"{}\", handle);\n  let mut bufferator = [0, ..2048];\n  loop {\n    let (buf, from) = recvfrom(handle, bufferator.as_mut_slice());\n    println!(\"from {}, data:\\n{}\", from, buf);\n  }\n}\n</code></pre>\n\n<p>but this was written a year ago, so things may be have changed? </p>\n"}, {"tags": ["iterator", "rust", "lifetime", "ownership", "associated-types"], "comments": [{"owner": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1447570613, "post_id": 33710691, "comment_id": 55204901, "body": "std::slice::IterMut is an example of an iterator that iterates over &quot;mutable references to the values&quot;. Perhaps it can serve as an inspiration. <a href=\"https://doc.rust-lang.org/std/slice/struct.IterMut.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/slice/struct.IterMut.html</a>"}, {"owner": {"reputation": 25156, "user_id": 230461, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/202ecb437d8bbd442d093a3a35c67a04?s=128&d=identicon&r=PG", "display_name": "dflemstr", "link": "https://stackoverflow.com/users/230461/dflemstr"}, "reply_to_user": {"reputation": 373, "user_id": 361640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a26c2ab786845a33302f62df06125e9e?s=128&d=identicon&r=PG", "display_name": "nielsle", "link": "https://stackoverflow.com/users/361640/nielsle"}, "edited": false, "score": 0, "creation_date": 1447586516, "post_id": 33710691, "comment_id": 55208283, "body": "@nielsle That looks interesting! Sadly, the <code>IterMut</code> holds a <code>&amp;mut</code> for the <i>iterator</i>, while I want to hold a <code>&amp;mut</code> for every <i>element</i> in the iterator."}], "owner": {"reputation": 25156, "user_id": 230461, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/202ecb437d8bbd442d093a3a35c67a04?s=128&d=identicon&r=PG", "display_name": "dflemstr", "link": "https://stackoverflow.com/users/230461/dflemstr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 45, "favorite_count": 0, "closed_date": 1447519599, "answer_count": 0, "score": 1, "last_activity_date": 1447518899, "creation_date": 1447518899, "question_id": 33710691, "link": "https://stackoverflow.com/questions/33710691/iterator-with-mut-items", "closed_reason": "Duplicate", "title": "Iterator with `&amp;mut` items", "body": "<p>I want to create an iterator for iterating through records in a huge file.</p>\n\n<pre><code>for record in huge_file.iter() {\n  println!(\"{}\", record.read_field(\"name\"));\n}\n</code></pre>\n\n<p>Each record individually is too big to fit in memory, so the iterator can't return owned <code>Record</code> objects with everything loaded into memory.  The underlying storage does not support random access, so returning \"slices\"/\"views\" of the storage is also not an option.</p>\n\n<p>Instead, I want the iterator to return elements that allow the consumer to read from the current \"cursor position\" in the file.  Superficially, the API would look like this:</p>\n\n<pre><code>impl Iterator for HugeFileIterator {\n  fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;&amp;'a mut Record&gt; {\n    ...\n  }\n}\n\nimpl Record {\n  fn read_field(name: &amp;str) -&gt; &amp;str {\n    ...\n  }\n}\n</code></pre>\n\n<p>With that signature of <code>next</code>, the <code>mut</code> borrow ensures that the consumer can't keep a reference to the \"previous <code>Record</code>\" when calling <code>next()</code> to get the \"next <code>Record</code>.\"</p>\n\n<p>However, I can't get that type signature for <code>next</code> to work the way I want it to.  The <code>Iterator</code> trait requires me to define an associated <code>Item</code> type, and I don't know how it should look:</p>\n\n<pre><code>impl Iterator for HugeFileIterator {\n  type Item&lt;'a&gt; = &amp;'a mut Record; // \u2190 Obviously doesn't work\n\n  fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;Self::Item&lt;'a&gt;&gt; {\n    ...\n  }\n}\n</code></pre>\n\n<p>Is it possible to express this constraint in the Rust type system?  Or is there perhaps another completely different approach that I haven't thought about?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 688, "user_id": 1395204, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/WTDtm.png?s=128&g=1", "display_name": "jobo3208", "link": "https://stackoverflow.com/users/1395204/jobo3208"}, "edited": false, "score": 0, "creation_date": 1447512760, "post_id": 33709613, "comment_id": 55190774, "body": "D&#39;oh, that makes sense. Thanks for clearing that up."}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1447512885, "post_id": 33709613, "comment_id": 55190804, "body": "If I&#39;m not mistaken, that is precisely what the restriction <code>Idx: ?Sized</code> means, is&#39;nt it?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1447525124, "post_id": 33709613, "comment_id": 55194730, "body": "There are plans for Rust to allow passing dynamically sized types <i>by value</i> to functions, but that&#39;s not doable yet (as of Rust 1.4.0), hence why <a href=\"https://doc.rust-lang.org/stable/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\"><code>FnBox</code></a> exists. When this is implemented, <code>Idx: ?Sized</code> will allow DSTs to be used for <code>Idx</code>."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 4, "last_activity_date": 1447512705, "last_edit_date": 1447512705, "creation_date": 1447512378, "answer_id": 33709613, "question_id": 33709495, "link": "https://stackoverflow.com/questions/33709495/why-does-the-index-method-require-ownership/33709613#33709613", "title": "Why does the index method require ownership?", "body": "<p>A borrowed value can be a perfectly good index, and the definition of the <code>Index</code> trait allows for that. Just use a reference as the index type. Nonsense example:</p>\n\n<pre><code>impl &lt;'a&gt; Index&lt;&amp;'a IndexType&gt; for Foo {\n    type Output = u8;\n    fn index(&amp;self, index: &amp;IndexType) -&gt; &amp;u8 {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>So the \"restriction\" of passing the index by value isn't really a restriction at all, because it allows the person implementing <code>Index</code> to choose if the index should be passed by value or by reference.</p>\n"}], "owner": {"reputation": 688, "user_id": 1395204, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/WTDtm.png?s=128&g=1", "display_name": "jobo3208", "link": "https://stackoverflow.com/users/1395204/jobo3208"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 33709613, "answer_count": 1, "score": 5, "last_activity_date": 1447512705, "creation_date": 1447511537, "question_id": 33709495, "link": "https://stackoverflow.com/questions/33709495/why-does-the-index-method-require-ownership", "title": "Why does the index method require ownership?", "body": "<p>From the docs, the <code>Index</code> trait is defined:</p>\n\n<pre><code>pub trait Index&lt;Idx&gt; where Idx: ?Sized {\n    type Output: ?Sized;\n    fn index(&amp;self, index: Idx) -&gt; &amp;Self::Output;\n}\n</code></pre>\n\n<p>Since the type of the <code>index</code> parameter is <code>Idx</code> and not <code>&amp;Idx</code>, the <code>index</code> method needs to take ownership of the value it is passed.</p>\n\n<p>Is there a reason for this restriction? I know 9 times out of 10 one will be using something like an integer type that derives <code>Copy</code>, but I'm just curious why a borrowed value would be any less capable of acting as an index.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1447485914, "post_id": 33705664, "comment_id": 55184325, "body": "I&#39;ve found this to be typically best handled by having <code>fn do_something(&amp;mut self)</code> instead of <code>fn do_something(self) -&gt; Self</code> (or both if it is helpful for API ergonomics, the latter can be implement as <code>fn by_value(mut self) -&gt; Self { self.mutating(); self }</code>)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1447514545, "post_id": 33705664, "comment_id": 55191270, "body": "a safe interface to owned mutation of a <code>&amp;mut</code> would be a function taking a <code>&amp;mut T</code> and an <code>Fn(T) -&gt; T</code>. Then the safe interface internally can use <code>ptr::read</code> on the reference giving you an owned object that will then be passed to the <code>Fn</code>. The problem is when the passed <code>Fn</code> panics, then you don&#39;t have a valid object to write back, and the object you passed to the <code>Fn</code> will already have called its destructor. In that situation you are left with no choice but to abort, because the actual object will now also call its destructor if you don&#39;t."}, {"owner": {"reputation": 663, "user_id": 3090404, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0834a4a38b102493a11cbe1742d08dc1?s=128&d=identicon&r=PG&f=1", "display_name": "njam", "link": "https://stackoverflow.com/users/3090404/njam"}, "edited": false, "score": 0, "creation_date": 1584620850, "post_id": 33705664, "comment_id": 107495757, "body": "I think this question was incorrectly flagged as a duplicate of <a href=\"https://stackoverflow.com/q/27098694/3090404\">stackoverflow.com/q/27098694/3090404</a>. Here it&#39;s about consuming&amp;replacing a value, the other question is about just replacing a value with another value."}, {"owner": {"reputation": 663, "user_id": 3090404, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0834a4a38b102493a11cbe1742d08dc1?s=128&d=identicon&r=PG&f=1", "display_name": "njam", "link": "https://stackoverflow.com/users/3090404/njam"}, "edited": false, "score": 0, "creation_date": 1584620935, "post_id": 33705664, "comment_id": 107495802, "body": "A solution to <i>this</i> question could be to use the &quot;replace_with&quot; crate: <a href=\"https://github.com/alecmocatta/replace_with\" rel=\"nofollow noreferrer\">github.com/alecmocatta/replace_with</a>"}], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1447533458, "creation_date": 1447533458, "answer_id": 33713073, "question_id": 33705664, "link": "https://stackoverflow.com/questions/33705664/how-to-consume-and-replace-a-value-in-an-mut-ref/33713073#33713073", "title": "How to consume and replace a value in an &amp;mut ref", "body": "<p>In any case we'll need assignment, <code>mem::replace</code>, <code>mem::swap</code>, or something like that. Because given a <code>&amp;mut</code> reference to an object there is no way to move this object (or any of it's fields) out without replacing it's memory area with something valid, as long as Rust forbids references to uninitialized memory.</p>\n\n<p>As for dummy values for replacement, you can always make them yourself for any type by using some wrapper type. For example, I often use <code>Option</code> for this purpose, where <code>Some(T)</code> is the value of type <code>T</code>, and <code>None</code> acts as dummy. This is what I mean:</p>\n\n<pre><code>struct Tree&lt;T&gt;(Option&lt;Node&lt;T&gt;&gt;);\nenum Node&lt;T&gt; {\n    Leaf(T),\n    Children(Vec&lt;Tree&lt;T&gt;&gt;),\n}\n\nimpl&lt;T&gt; Tree&lt;T&gt; where T: PartialEq {\n    fn remove(&amp;mut self, value: &amp;T) {\n        match self.0.take() {\n            Some(Node::Leaf(ref leaf_value)) if leaf_value == value =&gt;\n                (),\n            node @ Some(Node::Leaf(..)) =&gt;\n                *self = Tree(node),\n            Some(Node::Children(node_children)) =&gt; {\n                let children: Vec&lt;_&gt; =\n                    node_children\n                        .into_iter()\n                        .filter_map(|mut tree| { tree.remove(value); tree.0 })\n                        .map(|node| Tree(Some(node)))\n                        .collect();\n                if !children.is_empty() {\n                    *self = Tree(Some(Node::Children(children)));\n                }\n            },\n            None =&gt;\n                panic!(\"something went wrong\"),\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=da97ec6c318465b2f57e&amp;version=stable\" rel=\"nofollow\">playground link</a></p>\n"}], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1089, "favorite_count": 0, "closed_date": 1497898225, "answer_count": 1, "score": 7, "last_activity_date": 1447533458, "creation_date": 1447481349, "last_edit_date": 1447481679, "question_id": 33705664, "link": "https://stackoverflow.com/questions/33705664/how-to-consume-and-replace-a-value-in-an-mut-ref", "closed_reason": "Duplicate", "title": "How to consume and replace a value in an &amp;mut ref", "body": "<p>Sometimes I run into a problem where, due to implementation details that should be invisible to the user, I need to \"destroy\" a <code>&amp;mut</code> and replace it in-memory. This typically ends up happening in recursive methods or IntoIterator implementations on recursive structures. It typically follows the form of:</p>\n\n<pre><code>fn create_something(self);\n\npub fn do_something(&amp;mut self) {\n    // What you want to do\n    *self = self.create_something();\n}\n</code></pre>\n\n<p>One example that I happened to have in my current project is in a KD Tree I've written, when I \"remove\" a node, instead of doing logic to rearrange the children, I just destructure the node I need to remove and rebuild it from the values in its subtrees:</p>\n\n<pre><code>// Some recursive checks to identify is this is our node above this\n\nif let Node{point, left, right} = mem::replace(self, Sentinel) {\n    let points = left.into_iter().chain(right.into_iter()).collect();\n    (*self) = KDNode::new(points);\n\n    Some(point)\n} else {\n    None\n}\n</code></pre>\n\n<p>Another more in-depth example is the IntoIterator for this KDTree, which has to move a <code>curr</code> value out of the iterator, test it, and then replace it:</p>\n\n<pre><code>// temporarily swap self.curr with a dummy value so we can\n// move out of it\nlet tmp = mem::replace(&amp;mut self.curr, (Sentinel,Left));\n\nmatch tmp {\n    // If the next node is a Sentinel, that means the\n    // \"real\" next node was either the parent, or we're done\n    (Sentinel,_) =&gt; {\n        if self.stack.is_empty() {\n            None\n        } else {\n            self.curr = self.stack.pop().expect(\"Could not pop iterator parent stack\");\n            self.next()\n        }\n    }\n    // If the next node is to yield the current node,\n    // then the next node is it's right child's leftmost\n    // descendent. We only \"load\" the right child, and lazily\n    // evaluate to its left child next iteration.\n    (Node{box right,point,..},Me) =&gt; {\n        self.curr = (right,Left);\n\n        Some(point)\n    },\n    // Left is an instruction to lazily find this node's left-most\n    // non-sentinel child, so we recurse down, pushing the parents on the\n    // stack as we go, and then say that our next node is our right child.\n    // If this child doesn't exist, then it will be taken care of by the Sentinel\n    // case next call.\n    (curr @ Node{..},Left) =&gt; {\n        let mut curr = curr;\n        let mut left = get_left(&amp;mut curr);\n\n        while !left.is_sentinel() {\n            self.stack.push((curr,Me));\n            curr = left;\n            left = get_left(&amp;mut curr);\n        }\n\n        let (right,point) = get_right_point(curr);\n        self.curr = (right, Left);\n        Some(point)\n    }\n</code></pre>\n\n<p>As you can see, my current method is to just use <code>mem::replace</code> with a dummy value, and then just overwrite the dummy value later. However, I don't like this for several reasons:</p>\n\n<ul>\n<li>In some cases, there's no suitable dummy value. This is especially true if there's no public/easy way to construct a \"zero value\" for one or more of your struct members (e.g. what if the struct held a MutexGuard?). If the member you need to dummy-replace is in another module (or crate), you may be bound by difficult constraints of its construction that are undesireable when trying to build a dummy type.</li>\n<li>The struct may be rather large, in which case doing more moves than is necessary may be undesirable (in practice, this is unlikely to be a big problem, admittedly).</li>\n<li>It just \"feels\" unclean, since the \"move\" is technically more of an \"update\". In fact, the simplest example might be something like <code>*self = self.next.do_something()</code> which will still have problems.</li>\n</ul>\n\n<p>In some cases, such as that first <code>remove</code> snippet I showed, you could perhaps more cleanly represent it as a <code>fn do_something(self) -&gt; Self</code>, but in other cases such as the IntoIterator example this can't be done because you're constrained by the trait definition.</p>\n\n<p>Is there any better, cleaner way to do this sort of in-place update?</p>\n"}, {"tags": ["performance", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1447471118, "post_id": 33704592, "comment_id": 55181710, "body": "If I understand the function, don&#39;t think you need to drop to that level to go fast. Iterators are pretty awesome: <a href=\"http://is.gd/ePFynw\" rel=\"nofollow noreferrer\">bench:   2,755,606 ns/iter (+/- 408,352)</a>."}], "answers": [{"comments": [{"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 2, "creation_date": 1447470866, "post_id": 33704684, "comment_id": 55181677, "body": "Wow, you guys are quick in replying:) Thanks!"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1447477564, "post_id": 33704684, "comment_id": 55182793, "body": "There is another way to create <code>Box&lt;[T]&gt;</code>, from a boxed fixed size array (<code>Box&lt;[T; N]&gt;</code>), it can be cast or it will simply coerce."}, {"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1447478965, "post_id": 33704684, "comment_id": 55183036, "body": "@bluss: but can I make a [T;N] with VARIABLE N (before I box it)?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 3, "creation_date": 1447524823, "post_id": 33704684, "comment_id": 55194643, "body": "There doesn&#39;t appear to be a way to allocate a variable-length array directly in the language or in the standard library as of Rust 1.4.0, besides using <code>Vec</code>. If you want to avoid creating a <code>Vec</code>, look up how it allocates a variable-length array and how it transforms it into a <code>Box&lt;[T]&gt;</code> in <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow noreferrer\">the source code</a>, then replicate the code in your program/library, keeping only the parts that are necessary."}, {"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 0, "creation_date": 1447534215, "post_id": 33704684, "comment_id": 55197429, "body": "Excellent, I&#39;ll do that. I already had a quick look at boxed.rs, especially IntermediateBox. But yeah, maybe I&#39;ll start at the other end (i.e. Vec). I also saw that in Rustonomicon, the Vec is fully explained. Plenty to do on the coming Saturdays :)"}, {"owner": {"reputation": 779, "user_id": 1524693, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VvPLH.jpg?s=128&g=1", "display_name": "Chinoto Vokro", "link": "https://stackoverflow.com/users/1524693/chinoto-vokro"}, "edited": false, "score": 1, "creation_date": 1575953376, "post_id": 33704684, "comment_id": 104729528, "body": "For a variable length box slice, there is now a nightly only experimental API <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.new_uninit_slice\" rel=\"nofollow noreferrer\">Box::&lt;T&gt;::new_uninit_slice(len: usize)</a>. I tried using it to cut down on WASM binary size for a pathetic result: 8624B to 8317B..."}, {"owner": {"reputation": 6100, "user_id": 464309, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/218a5a4c4df417cf0f2ad0d75b773d66?s=128&d=identicon&r=PG", "display_name": "AmigoNico", "link": "https://stackoverflow.com/users/464309/amigonico"}, "edited": false, "score": 0, "creation_date": 1617917302, "post_id": 33704684, "comment_id": 118451908, "body": "You might say that another benefit to converting to a boxed slice is that you eliminate the possibility of entries being added/removed (when that would be undesirable) while still retaining mutability for the existing entries."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 30, "last_activity_date": 1546268445, "last_edit_date": 1546268445, "creation_date": 1447470143, "answer_id": 33704684, "question_id": 33704592, "link": "https://stackoverflow.com/questions/33704592/performance-comparison-of-a-vec-and-a-boxed-slice/33704684#33704684", "title": "Performance comparison of a Vec and a boxed slice", "body": "<p>In your second version, you use the type <code>Box&lt;&amp;'a mut [T]&gt;</code>, which means there are two levels of indirection to reach a <code>T</code>, because both <code>Box</code> and <code>&amp;</code> are pointers.</p>\n\n<p>What you want instead is a <code>Box&lt;[T]&gt;</code>. I think the only sane way to construct such a value is from a <code>Vec&lt;T&gt;</code>, using the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_boxed_slice\" rel=\"noreferrer\"><code>into_boxed_slice</code></a> method. Note that the only benefit is that you lose the <code>capacity</code> field that a <code>Vec</code> would have. Unless you need to have a lot of these arrays in memory at the same time, the overhead is likely to be insignificant.</p>\n\n<pre><code>pub fn linspace_vec&lt;'a, T: 'a&gt;(start: T, stop: T, len: usize) -&gt; Box&lt;[T]&gt;\nwhere\n    T: Float,\n{\n    // get 0, 1 and the increment dx as T\n    let (one, zero, dx) = get_values_as_type_t::&lt;T&gt;(start, stop, len);\n    let mut v = vec![zero; len].into_boxed_slice();\n    let mut c = zero;\n    let ptr: *mut T = v.as_mut_ptr();\n    unsafe {\n        for ii in 0..len {\n            let x = ptr.offset((ii as isize));\n            *x = start + c * dx;\n            c = c + one;\n        }\n    }\n\n    v\n}\n</code></pre>\n"}], "owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11446, "favorite_count": 2, "accepted_answer_id": 33704684, "answer_count": 1, "score": 20, "last_activity_date": 1589995596, "creation_date": 1447468967, "last_edit_date": 1546268389, "question_id": 33704592, "link": "https://stackoverflow.com/questions/33704592/performance-comparison-of-a-vec-and-a-boxed-slice", "title": "Performance comparison of a Vec and a boxed slice", "body": "<p>I want a function to </p>\n\n<ul>\n<li>allocate a basic variable-length \"array\" (in the generic sense of the word, not necessarily the Rust type) of floats on the heap</li>\n<li>initialize it with values</li>\n<li>implement <code>Drop</code>, so I don't have to worry about freeing memory</li>\n<li>implement something for indexing or iterating</li>\n</ul>\n\n<p>The obvious choice is <code>Vec</code>, but how does it compare to a boxed slice on the heap? <code>Vec</code> is more powerful, but I need the array for numerical math and, in my case, don't need stuff like push/pop. The idea is to have something with less features, but faster.</p>\n\n<p>Below I have two versions of a \"linspace\" function (a la Matlab and numpy), </p>\n\n<ol>\n<li>\"linspace_vec\" (see listing below) uses <code>Vec</code></li>\n<li>\"linspace_boxed_slice\" (see listing below) uses a boxed slice</li>\n</ol>\n\n<p>Both are used like</p>\n\n<pre><code>let y = linspace_*(start, stop, len);\n</code></pre>\n\n<p>where <code>y</code> is a linearly spaced \"array\" (i.e. a <code>Vec</code> in (1) and a boxed slice in (2)) of length <code>len</code>.</p>\n\n<p>For small \"arrays\" of length 1000, (1) is FASTER. For large arrays of length 4*10^6, (1) is SLOWER. Why is that? Am I doing something wrong in (2)?</p>\n\n<p>When the argument <code>len</code> = 1000, benchmarking by just calling the function results in</p>\n\n<ul>\n<li><code>(1) ... bench:         879 ns/iter (+/- 12)</code></li>\n<li><code>(2) ... bench:       1,295 ns/iter (+/- 38)</code></li>\n</ul>\n\n<p>When the argument <code>len</code> = 4000000, benchmarking results in</p>\n\n<ul>\n<li><code>(1) ... bench:   5,802,836 ns/iter (+/- 90,209)</code></li>\n<li><code>(2) ... bench:   4,767,234 ns/iter (+/- 121,596)</code></li>\n</ul>\n\n<p><strong>Listing of (1):</strong></p>\n\n<pre><code>pub fn linspace_vec&lt;'a, T: 'a&gt;(start: T, stop: T, len: usize) -&gt; Vec&lt;T&gt;\nwhere\n    T: Float,\n{\n    // get 0, 1 and the increment dx as T\n    let (one, zero, dx) = get_values_as_type_t::&lt;T&gt;(start, stop, len);\n    let mut v = vec![zero; len];\n    let mut c = zero;\n    let ptr: *mut T = v.as_mut_ptr();\n    unsafe {\n        for ii in 0..len {\n            let x = ptr.offset((ii as isize));\n            *x = start + c * dx;\n            c = c + one;\n        }\n    }\n\n    return v;\n}\n</code></pre>\n\n<p><strong>Listing of (2):</strong></p>\n\n<pre><code>pub fn linspace_boxed_slice&lt;'a, T: 'a&gt;(start: T, stop: T, len: usize) -&gt; Box&lt;&amp;'a mut [T]&gt;\nwhere\n    T: Float,\n{\n    let (one, zero, dx) = get_values_as_type_t::&lt;T&gt;(start, stop, len);\n    let size = len * mem::size_of::&lt;T&gt;();\n    unsafe {\n        let ptr = heap::allocate(size, align_of::&lt;T&gt;()) as *mut T;\n        let mut c = zero;\n        for ii in 0..len {\n            let x = ptr.offset((ii as isize));\n            *x = start + c * dx;\n            c = c + one;\n        }\n        // IS THIS WHAT MAKES IT SLOW?:\n        let sl = slice::from_raw_parts_mut(ptr, len);\n        return Box::new(sl);\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "b-tree"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1447512050, "post_id": 33699076, "comment_id": 55190556, "body": "Why the unwrap? Can you structure the code so that you use the presence (or non-) of the back value in a conditional?"}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1447539228, "post_id": 33699076, "comment_id": 55198932, "body": "Good point; I ended up using <code>.unwrap_or(0)</code> for this use-case. For another I needed to know first that there was exactly one element, hence <code>map.iter().next().unwrap()</code> \u2014 a bit unwieldy way of getting the only element!"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 13, "last_activity_date": 1559745259, "last_edit_date": 1559745259, "creation_date": 1447438698, "answer_id": 33699340, "question_id": 33699076, "link": "https://stackoverflow.com/questions/33699076/how-can-i-get-the-last-item-in-a-btreemap/33699340#33699340", "title": "How can I get the last item in a BTreeMap?", "body": "<p><a href=\"https://doc.rust-lang.org/std/collections/btree_map/struct.Iter.html\" rel=\"noreferrer\"><code>btree_map::Iter</code></a>, which is returned by <code>BTreeMap::iter()</code>, implements <a href=\"https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html\" rel=\"noreferrer\"><code>DoubleEndedIterator</code></a>, so indeed, either the approach with <code>rev()</code> would work or <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3f47322175556101ba43caab82db27ad\" rel=\"noreferrer\">you can use the <code>next_back()</code> method directly</a>:</p>\n\n<pre><code>let (key, value) = map.iter().next_back().unwrap();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 0, "last_activity_date": 1559745288, "last_edit_date": 1559745288, "creation_date": 1559722639, "answer_id": 56456622, "question_id": 33699076, "link": "https://stackoverflow.com/questions/33699076/how-can-i-get-the-last-item-in-a-btreemap/56456622#56456622", "title": "How can I get the last item in a BTreeMap?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev\" rel=\"nofollow noreferrer\"><code>Iterator::rev</code></a> method requires that <code>Self</code> implements <a href=\"https://ebarnard.github.io/2019-06-03-rust-smaller-trait-implementers-docs/std/iter/trait.DoubleEndedIterator.html\" rel=\"nofollow noreferrer\"><code>DoubleEndedIterator</code></a>, so it should always be an optimized and correct choice for your use case.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn rev(self) -&gt; Rev&lt;Self&gt;\nwhere\n    Self: DoubleEndedIterator,\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 250, "user_id": 530473, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ba486761a69a850cdca09e2051e53711?s=128&d=identicon&r=PG", "display_name": "rubyu2", "link": "https://stackoverflow.com/users/530473/rubyu2"}, "is_accepted": false, "score": 0, "last_activity_date": 1563503013, "creation_date": 1563503013, "answer_id": 57104744, "question_id": 33699076, "link": "https://stackoverflow.com/questions/33699076/how-can-i-get-the-last-item-in-a-btreemap/57104744#57104744", "title": "How can I get the last item in a BTreeMap?", "body": "<p><a href=\"https://github.com/rust-lang/rust/issues/31690#issuecomment-184445033\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/31690#issuecomment-184445033</a></p>\n\n<p>A dedicated method would improve discoverability, but you can do:</p>\n\n<pre><code>let map: BTreeMap&lt;K, V&gt; = ...;\nlet min = map.iter().next();\nlet max = map.iter().next_back();\nand the same for BTreeSet.\n</code></pre>\n"}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1796, "favorite_count": 0, "answer_count": 3, "score": 8, "last_activity_date": 1563503013, "creation_date": 1447437705, "last_edit_date": 1559745170, "question_id": 33699076, "link": "https://stackoverflow.com/questions/33699076/how-can-i-get-the-last-item-in-a-btreemap", "title": "How can I get the last item in a BTreeMap?", "body": "<p>If you have a sorted map of key/value pairs (or just keys), one of the obvious operations is to get the first or last pair (or key).</p>\n\n<p>C++'s <a href=\"http://www.cplusplus.com/reference/vector/vector/\" rel=\"noreferrer\"><code>std::vector</code></a>  has <code>front()</code> and <code>back()</code> for this purpose. <a href=\"http://www.cplusplus.com/reference/map/map/\" rel=\"noreferrer\"><code>std::map</code></a> doesn't, but <code>*map.begin()</code> and <code>*map.rbegin()</code> (reverse iterator) work for this (assuming one knows the map is not empty).</p>\n\n<p>In Rust, getting the first element of a map seems to require <code>map.iter().next().unwrap()</code> \u2014 ugly, but perhaps justified considering some error checking is needed.</p>\n\n<p>How can we get the last element? By stepping over all elements: <code>map.iter().last().unwrap()</code>?</p>\n\n<p>I see that there is <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.rev\" rel=\"noreferrer\"><code>Iterator::rev()</code></a>, so is <code>map.iter().rev().next().unwrap()</code> a reasonable alternative?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1447410611, "post_id": 33690468, "comment_id": 55153099, "body": "At the very least, avoid <code>format!</code>, because the formatting machinery is heavy weight for such a straightforward translation."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1447410724, "post_id": 33690468, "comment_id": 55153165, "body": "<b>Reminder to all would be answerers</b>: StackOverflow is not a forum and thus is not about <i>debating</i>; answers should strive for <b>objectivity</b> and be backing by authoritative references (such as the official style guide or a core developer&#39;s opinion)."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1447411103, "post_id": 33690468, "comment_id": 55153385, "body": "@MatthieuM. to_string() also uses the formatting machinery."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1447411791, "post_id": 33690468, "comment_id": 55153763, "body": "@fjh: Ah yes, in the absence of specialization it&#39;s probably unavoidable."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1447411744, "post_id": 33690838, "comment_id": 55153732, "body": "Exact link to clippy&#39;s warning (with rationale): <a href=\"https://github.com/Manishearth/rust-clippy/wiki#str_to_string\" rel=\"nofollow noreferrer\">github.com/Manishearth/rust-clippy/wiki#str_to_string</a>"}, {"owner": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 0, "creation_date": 1447412804, "post_id": 33690838, "comment_id": 55154331, "body": "Interesting. The <a href=\"https://doc.rust-lang.org/stable/std/string/struct.String.html\" rel=\"nofollow noreferrer\">String documentation</a> uses <code>String::from</code> in most of the examples. I wonder if that should be changed if <code>to_string</code> is the preferred approach."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 0, "creation_date": 1447413795, "post_id": 33690838, "comment_id": 55154863, "body": "@JimmyCuadra I don&#39;t think it should. <code>to_string</code> is one core developer&#39;s preferred method, not <i>the</i> preferred approach. There are performance arguments against it (see e.g. <a href=\"https://github.com/shepmaster/sxd-document/commit/4f29dee8ee4e98653b10778fb660ddc76f5debc6\" rel=\"nofollow noreferrer\">this</a>), and I don&#39;t really by the argument that <code>to_string</code> is clearer than <code>String::from</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "edited": false, "score": 0, "creation_date": 1447420208, "post_id": 33690838, "comment_id": 55158346, "body": "@JimmyCuadra: I actually do not find it strange; in documentation you want to focus on the API at hand and therefore using extraneous functions/types may be distracting (users will wonder where they come from). That being said, if you follow the link (1) from ker you will see that others seem to have switched to using <code>String::from</code> too, finding it conveniently explicit and performing well. Of course, it can be argued that it is better to focus on more general purpose methods, especially as specialization should take care of the performance aspect."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1447444016, "post_id": 33690838, "comment_id": 55173145, "body": "I prefer <code>String::from</code> for literals, and <code>to_string()</code> for non-literals, so that&#39;s probably why newer docs have String::from()."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1447497360, "post_id": 33690838, "comment_id": 55186790, "body": "that&#39;s a sensible middle way. maybe the clippy lint could be adjusted to detect literal vs <code>&amp;str</code>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1447424089, "last_edit_date": 1447424089, "creation_date": 1447411151, "answer_id": 33690838, "question_id": 33690468, "link": "https://stackoverflow.com/questions/33690468/whats-the-preferred-way-to-create-a-string-from-a-literal/33690838#33690838", "title": "What&#39;s the preferred way to create a String from a literal?", "body": "<p>The idiomatic way in the Rust compiler internals and thus Rust in general is to use <a href=\"http://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\" rel=\"nofollow\"><code>to_string</code></a>. It is done this way in the compiler and backed by Alex Crichton in three pull requests (<a href=\"https://github.com/rust-lang/rust/pull/29618#issuecomment-154122416\" rel=\"nofollow\">1</a>, <a href=\"https://github.com/rust-lang/rust/pull/26176#issuecomment-110813608\" rel=\"nofollow\">2</a>, <a href=\"https://github.com/rust-lang/rust/pull/19708#issuecomment-66509110\" rel=\"nofollow\">3</a>) that tried to change this.</p>\n\n<p>The argument is that <code>to_string</code> most clearly defines what you want. Performance-wise both <code>to_string</code> and <code>format!</code> are slower than <code>String::from</code>. But once we get impl specialization there's a good chance that they will perform exactly the same.</p>\n\n<hr>\n\n<p>That said, <a href=\"https://github.com/Manishearth/rust-clippy\" rel=\"nofollow\">clippy</a> lints against <code>\"abc\".to_string()</code> and suggests <code>\"abc\".to_owned()</code>.</p>\n"}], "owner": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 301, "favorite_count": 0, "accepted_answer_id": 33690838, "answer_count": 1, "score": 2, "last_activity_date": 1447424334, "creation_date": 1447410066, "last_edit_date": 1447424334, "question_id": 33690468, "link": "https://stackoverflow.com/questions/33690468/whats-the-preferred-way-to-create-a-string-from-a-literal", "title": "What&#39;s the preferred way to create a String from a literal?", "body": "<p>Is there a performance or stylistic reason to prefer one of the following forms for creating a String from a literal in Rust?</p>\n\n<pre><code>\"hello world\".to_string()\nformat!(\"hello world\")\nString::from(\"hello world\")\n</code></pre>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 1, "creation_date": 1449866489, "post_id": 33687996, "comment_id": 56208175, "body": "It&#39;s worth pointing out why the <code>as_any</code> function is needed. This is implemented for <code>B</code> and takes a parameter <code>self</code> of type <code>&amp;B</code>, which is converted to a <code>&amp;Any</code> and can later be cast back to a <code>&amp;B</code>. Were <code>a.as_any()</code> to be replaced with <code>(&amp;*a as &amp;Any)</code> it could only be cast back to the type converted to <code>&amp;Any</code>, that is <code>&amp;A</code>. <code>&amp;A</code> and <code>&amp;B</code> are not the same thing since they have differing v-tables."}, {"owner": {"reputation": 1565, "user_id": 46024, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/0f758f9bf25dab06eff0e0ef486737b5?s=128&d=identicon&r=PG", "display_name": "fasih.rana", "link": "https://stackoverflow.com/users/46024/fasih-rana"}, "edited": false, "score": 4, "creation_date": 1507164407, "post_id": 33687996, "comment_id": 80105810, "body": "I have been looking for this answer for a full day now. Sometimes Rust feels very counter-intuitive."}, {"owner": {"reputation": 5906, "user_id": 474819, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/90031dd96e51d2025f48ce6805b550ec?s=128&d=identicon&r=PG", "display_name": "Nate Glenn", "link": "https://stackoverflow.com/users/474819/nate-glenn"}, "edited": false, "score": 2, "creation_date": 1583073506, "post_id": 33687996, "comment_id": 106986246, "body": "For the next googler: it may be easier for you to just use the <a href=\"https://crates.io/crates/downcast-rs\" rel=\"nofollow noreferrer\">downcast-rs</a> crate."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 91, "last_activity_date": 1536627055, "last_edit_date": 1536627055, "creation_date": 1447401237, "answer_id": 33687996, "question_id": 33687447, "link": "https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object/33687996#33687996", "title": "How to get a reference to a concrete type from a trait object?", "body": "<p>There are two ways to do downcasting in Rust.  The first is to use <a href=\"http://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"noreferrer\"><code>Any</code></a>.  Note that this <em>only</em> allows you to downcast to the exact, original concrete type.  Like so:</p>\n\n<pre><code>use std::any::Any;\n\ntrait A {\n    fn as_any(&amp;self) -&gt; &amp;dyn Any;\n}\n\nstruct B;\n\nimpl A for B {\n    fn as_any(&amp;self) -&gt; &amp;dyn Any {\n        self\n    }\n}\n\nfn main() {\n    let a: Box&lt;dyn A&gt; = Box::new(B);\n    // The indirection through `as_any` is because using `downcast_ref`\n    // on `Box&lt;A&gt;` *directly* only lets us downcast back to `&amp;A` again.\n    // The method ensures we get an `Any` vtable that lets us downcast\n    // back to the original, concrete type.\n    let b: &amp;B = match a.as_any().downcast_ref::&lt;B&gt;() {\n        Some(b) =&gt; b,\n        None =&gt; panic!(\"&amp;a isn't a B!\"),\n    };\n}\n</code></pre>\n\n<p>The other way is to implement a method for each \"target\" on the base trait (in this case, <code>A</code>), and implement the casts for each desired target type.</p>\n\n<hr>\n\n<p><strong>Wait, why do we need <code>as_any</code>?</strong></p>\n\n<p>Even if you add <code>Any</code> as a requirement for <code>A</code>, it's still not going to work correctly.  The first problem is that the <code>A</code> in <code>Box&lt;dyn A&gt;</code> will <em>also</em> implement <code>Any</code>... meaning that when you call <code>downcast_ref</code>, you'll actually be calling it on the object type <code>A</code>.  <code>Any</code> can <em>only</em> downcast to the type it was invoked on, which in this case is <code>A</code>, so you'll only be able to cast back down to <code>&amp;dyn A</code> which you already had.</p>\n\n<p>But there's an implementation of <code>Any</code> for the underlying type in there <em>somewhere</em>, right?  Well, yes, but you can't get at it.  Rust doesn't allow you to \"cross cast\" from <code>&amp;dyn A</code> to <code>&amp;dyn Any</code>.</p>\n\n<p><em>That</em> is what <code>as_any</code> is for; because it's something only implemented on our \"concrete\" types, the compiler doesn't get confused as to which one it's supposed to invoke.  Calling it on an <code>&amp;dyn A</code> causes it to dynamically dispatch to the concrete implementation (again, in this case, <code>B::as_any</code>), which returns an <code>&amp;dyn Any</code> using the implementation of <code>Any</code> for <code>B</code>, which is what we want.</p>\n\n<p>Note that you <em>can</em> side-step this whole problem by just not using <code>A</code> <em>at all</em>.  Specifically, the following will <em>also</em> work:</p>\n\n<pre><code>fn main() {\n    let a: Box&lt;dyn Any&gt; = Box::new(B);\n    let _: &amp;B = match a.downcast_ref::&lt;B&gt;() {\n        Some(b) =&gt; b,\n        None =&gt; panic!(\"&amp;a isn't a B!\")\n    };    \n}\n</code></pre>\n\n<p>However, this precludes you from having any <em>other</em> methods; <em>all</em> you can do here is downcast to a concrete type.</p>\n\n<p>As a final note of potential interest, the <a href=\"https://crates.io/crates/mopa\" rel=\"noreferrer\">mopa</a> crate allows you to combine the functionality of <code>Any</code> with a trait of your own.</p>\n"}, {"comments": [{"owner": {"reputation": 1065, "user_id": 4981490, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53bf3109ef8efa03d82559b91a54b2b6?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/4981490/aleksandr"}, "edited": false, "score": 1, "creation_date": 1447402246, "post_id": 33688010, "comment_id": 55148640, "body": "Thanks for answers. I&#39;m trying to understand how to cope with this situation.So glad to learn about possible solutions."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 6, "last_activity_date": 1447401301, "last_edit_date": 1495540493, "creation_date": 1447401301, "answer_id": 33688010, "question_id": 33687447, "link": "https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object/33688010#33688010", "title": "How to get a reference to a concrete type from a trait object?", "body": "<p>It should be clear that the cast can fail if there is another type <code>C</code> implementing <code>A</code> and you try to cast <code>Box&lt;C&gt;</code> into a <code>Box&lt;B&gt;</code>. I don't know your situation, but to me it looks a lot like you are bringing techniques from other languages, like Java, into Rust. I've never encountered this kind of Problem in Rust -- maybe your code design could be improved to avoid this kind of cast.</p>\n\n<p>If you want, you can \"cast\" pretty much anything with <a href=\"http://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\"><code>mem::transmute</code></a>. Sadly, we will have a problem if we just want to cast <code>Box&lt;A&gt;</code> to <code>Box&lt;B&gt;</code> or <code>&amp;A</code> to <code>&amp;B</code> because a pointer to a <code>trait</code> is a fat-pointer that actually consists of two pointers: One to the actual object, one to the vptr. If we're casting it to a <code>struct</code> type, we can just ignore the vptr. Please remember that this solution is highly unsafe and pretty hacky -- I wouldn't use it in \"real\" code.\n<s></p>\n\n<pre><code>let (b, vptr): (Box&lt;B&gt;, *const ()) = unsafe { std::mem::transmute(a) };\n</code></pre>\n\n<p></s></p>\n\n<p>EDIT: Screw that, it's even more unsafe than I thought. If you want to do it correctly this way you'd have to use <a href=\"http://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow noreferrer\"><code>std::raw::TraitObject</code></a>. This is still unstable though. I don't think that this is of any use to OP; don't use it!</p>\n\n<p>There are better alternatives in this very similar question: <a href=\"https://stackoverflow.com/questions/26126683/how-to-match-trait-implementors\">How to match trait implementors</a></p>\n"}], "owner": {"reputation": 1065, "user_id": 4981490, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53bf3109ef8efa03d82559b91a54b2b6?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/4981490/aleksandr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 17492, "favorite_count": 24, "accepted_answer_id": 33687996, "answer_count": 2, "score": 71, "last_activity_date": 1538940763, "creation_date": 1447398215, "last_edit_date": 1538940763, "question_id": 33687447, "link": "https://stackoverflow.com/questions/33687447/how-to-get-a-reference-to-a-concrete-type-from-a-trait-object", "title": "How to get a reference to a concrete type from a trait object?", "body": "<p>How do I get <code>Box&lt;B&gt;</code> or <code>&amp;B</code> or <code>&amp;Box&lt;B&gt;</code> from the <code>a</code> variable in this code:</p>\n\n<pre><code>trait A {}\n\nstruct B;\nimpl A for B {}\n\nfn main() {\n    let mut a: Box&lt;dyn A&gt; = Box::new(B);\n    let b = a as Box&lt;B&gt;;\n}\n</code></pre>\n\n<p>This code returns an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0605]: non-primitive cast: `std::boxed::Box&lt;dyn A&gt;` as `std::boxed::Box&lt;B&gt;`\n --&gt; src/main.rs:8:13\n  |\n8 |     let b = a as Box&lt;B&gt;;\n  |             ^^^^^^^^^^^\n  |\n  = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1447397793, "creation_date": 1447397793, "answer_id": 33687371, "question_id": 33686672, "link": "https://stackoverflow.com/questions/33686672/is-it-possible-to-reverse-a-linked-list-in-place-without-allocating-any-nodes/33687371#33687371", "title": "Is it possible to reverse a linked list in-place without allocating any nodes?", "body": "<p>Absolutely.  Ownership in this case is pretty simple: the <code>main</code> function owns <code>y</code>, which owns <code>x</code>, and owners can mutate the things they own.</p>\n\n<p>To swap two nodes <code>a</code> and <code>b</code> where <code>a</code> \u2192 <code>b</code> \u2192 \u2026, you just need to do the following:</p>\n\n<ul>\n<li>Disconnect <code>b</code> from <code>a</code>, so that you have <code>a</code> \u2192 \u22a5 and <code>b</code> \u2192 \u2026.</li>\n<li>Remove everything following <code>b</code>; call this <code>c\u2026</code>.  You now have <code>b</code> \u2192 \u22a5, and <code>c</code> \u2192 \u2026.  Note that <code>c</code> might be empty, or it might be a long list; we don't care.</li>\n<li><code>a</code> and <code>b</code> are now alone, and don't connect to anything else, so you can just exchange their contents, swapping them in place.</li>\n<li>Attach <code>c</code> to the end of <code>a</code>, giving you <code>a</code> \u2192 <code>c</code> \u2192 \u2026.</li>\n<li>Attach <code>a</code> to the end of <code>b</code>, giving you <code>b</code> \u2192 <code>a</code> \u2192 \u2026.</li>\n</ul>\n\n<p>No new nodes need allocating, and this can be transcribed pretty much directly into Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Node {\n    value: i32,\n    next: Option&lt;Box&lt;Node&gt;&gt;\n}\n\nimpl Node {\n    pub fn swap_with_next(&amp;mut self) {\n        use std::mem::swap;\n\n        match self.next.take() {\n            Some(mut next_node) =&gt; {\n                let next_next = next_node.next.take();\n                swap(self, &amp;mut next_node);\n                next_node.next = next_next;\n                self.next = Some(next_node);\n            },\n            None =&gt; {\n                // Uh-oh, there's nothing to swap *with*!\n                panic!(\"cannot swap with nothing\");\n            }\n        }\n    }\n\n    pub fn show(&amp;self) {\n        print!(\"{:?}\", self.value);\n        if let Some(next) = self.next.as_ref() {\n            print!(\" -&gt; \");\n            next.show();\n        }\n    }\n}\n\nfn main() {\n    let mut w = Box::new(Node { value: 0, next: None });\n    let mut x = Box::new(Node { value: 1, next: Some(w) });\n    let mut y = Box::new(Node { value: 2, next: Some(x) });\n\n    y.show();\n    println!(\"\");\n\n    y.swap_with_next();\n    y.show();\n    println!(\"\");\n}\n</code></pre>\n\n<p>Finally, I'd be remiss if I didn't point you toward <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/\" rel=\"noreferrer\">Learning Rust With Entirely Too Many Linked Lists</a>.</p>\n"}], "owner": {"reputation": 169, "user_id": 541020, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d300febfd5b38302f029a1e1735c09ce?s=128&d=identicon&r=PG", "display_name": "user541020", "link": "https://stackoverflow.com/users/541020/user541020"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 410, "favorite_count": 0, "accepted_answer_id": 33687371, "answer_count": 1, "score": 2, "last_activity_date": 1447424163, "creation_date": 1447393637, "last_edit_date": 1447424163, "question_id": 33686672, "link": "https://stackoverflow.com/questions/33686672/is-it-possible-to-reverse-a-linked-list-in-place-without-allocating-any-nodes", "title": "Is it possible to reverse a linked list in-place without allocating any nodes?", "body": "<p>I'm trying to understand how ownership in Rust works with regard to linked lists. I have this code:</p>\n\n<pre><code>struct Node {\n    value: i32,\n    next: Option&lt;Box&lt;Node&gt;&gt;\n}\n\nfn main() {\n    let mut x = Box::new(Node {value: 1, next: None});\n    let mut y = Box::new(Node {value: 2, next: Some(x)});\n}\n</code></pre>\n\n<p>which creates a linked list y -> x -> null. Is it possible to switch this around in-place, so that we end up with x -> y -> null without allocating any new nodes?</p>\n"}, {"tags": ["methods", "callback", "closures", "rust", "builder"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1447347464, "post_id": 33676804, "comment_id": 55127012, "body": "Please add the exact error message to your question. And you should further minimize your example as long as it doesn&#39;t change the error message (drop <code>with_{a,b}</code> for example)."}], "answers": [{"comments": [{"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1447359011, "post_id": 33679121, "comment_id": 55133844, "body": "If we consider the registration of callbacks as an external API, it is possible to make it more beautiful?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1447359686, "last_edit_date": 1447359686, "creation_date": 1447354495, "answer_id": 33679121, "question_id": 33676804, "link": "https://stackoverflow.com/questions/33676804/is-there-any-way-a-builder-can-register-a-callback-using-a-method-of-the-created/33679121#33679121", "title": "Is there any way a builder can register a callback using a method of the created object?", "body": "<p>Not for your case.</p>\n\n<p>Consider this part of your code:</p>\n\n<pre><code>fn set_callback&lt;F&gt;(&amp;self, f: F)\n    where F: Fn(i32) + 'static + Send + Sync\n</code></pre>\n\n<p>This says that any closure provided to the method can only contain references that match the <code>'static</code> lifetime. The address of your <code>foo</code> instance is only guaranteed to be valid inside the body of the <code>build</code> method, so by definition the lifetime cannot be <code>'static</code>.</p>\n\n<p>If that was preventable, you are restricting your closure to <code>Fn</code> types, but you want to call a method that requires a mutable receiver.</p>\n\n<hr>\n\n<p>What you <em>can</em> do is provide <code>self</code> to the closure and then use it there:</p>\n\n<pre><code>fn set_callback&lt;F&gt;(&amp;self, f: F)\n    where F: Fn(&amp;mut Self, i32) + 'static + Send + Sync\n{}\n\n// Elsewhere\nfoo.set_callback(|foo, x| foo.edit());\n</code></pre>\n\n<hr>\n\n<p>From your edited comment:</p>\n\n<blockquote>\n  <p>then this approach is not very suitable</p>\n</blockquote>\n\n<p>The problem is that the way you are modeling the problem is fraught with peril and Rust is preventing you from shooting yourself in the foot. You can only have a single mutable reference to an item. Beyond that, you are trying to share a reference to a stack-allocated item across function calls.</p>\n\n<p>Perhaps you'd be happier with a solution that is closer to what a language with garbage collection might create?</p>\n\n<p>Here, we use a <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow\"><code>Mutex</code></a> to allow multiple threads to share a single mutable item. We use an <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow\"><code>Arc</code></a> so that multiple threads can share in the ownership of the item.</p>\n\n<p>I also moved <code>set_callback</code> to a free function as it has no relation to the struct that you previously had it on.</p>\n\n<p>When calling <code>set_callback</code>, we clone the <code>Arc</code> which increases the reference count and give that clone to the global queue. Since the <code>Mutex</code> has <em>internal mutability</em>, the function can remain <code>Fn</code>.</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nuse std::sync::{Mutex,Arc};\n\nstruct Global {\n    callbacks: Vec&lt;Box&lt;Fn(i32) + 'static + Send + Sync&gt;&gt;\n}\n\nfn set_callback&lt;F&gt;(f: F)\n    where F: Fn(i32) + 'static + Send + Sync\n{\n    GLOBAL.lock().unwrap().callbacks.push(Box::new(f));\n}\n\nlazy_static! {\n    static ref GLOBAL: Mutex&lt;Global&gt; = {\n        Mutex::new(Global {\n            callbacks: Vec::new()\n        })\n    };\n}\n\nstruct FooBuilder;\n\nimpl FooBuilder {\n    fn build(&amp;self) -&gt; Arc&lt;Mutex&lt;Foo&gt;&gt; {\n        let foo = Arc::new(Mutex::new(Foo));\n        let inner_foo = foo.clone();\n        set_callback(move |_| inner_foo.lock().unwrap().edit());\n        foo\n    }\n}\n\nstruct Foo;\n\nimpl Foo {\n    fn edit(&amp;mut self) {}\n}\n\nfn main() {\n    let _foo = FooBuilder.build();\n}\n</code></pre>\n"}], "owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 33679121, "answer_count": 1, "score": 1, "last_activity_date": 1447359686, "creation_date": 1447346762, "last_edit_date": 1447347792, "question_id": 33676804, "link": "https://stackoverflow.com/questions/33676804/is-there-any-way-a-builder-can-register-a-callback-using-a-method-of-the-created", "title": "Is there any way a builder can register a callback using a method of the created object?", "body": "<p>Given: the object <code>Foo</code> and <code>FooBuilder</code>. It is necessary that <code>FooBuilder</code> creates the object and registers a callback using a method of the object being created. The builder in this case acts as an advanced customization of the object <code>Foo</code> that needs to change based on the receipt of the event. A static method is not mandatory, but desirable all the same. At the end of main() is the event loop</p>\n\n<pre><code> #[macro_use]\nextern crate lazy_static;\n\nuse std::sync::Mutex;\n\nstruct Global {\n    callbacks: Vec&lt;Box&lt;Fn(i32) + 'static + Send + Sync&gt;&gt;\n}\n\nlazy_static! {\n    static ref GLOBAL: Mutex&lt;Global&gt; = {\n        Mutex::new(Global {\n            callbacks: Vec::new()\n        })\n    };\n}\n\nstruct FooBuilder {\n    c: i32\n}\nimpl FooBuilder {\n    fn new() -&gt; FooBuilder {\n        FooBuilder {\n            c: 0\n        }\n    }\n    fn build(&amp;self) -&gt; Foo {\n        let foo = Foo {\n            f: self.c\n        };\n        // foo.set_callback(|x| foo.edit());\n        // ^ ERROR\n        foo\n    }\n}\nstruct Foo {\n    f: i32\n}\nimpl Foo {\n    fn edit(&amp;mut self) {\n        self.f += 1;\n        println!(\"{:?}\", self.f);\n    }\n    fn set_callback&lt;F&gt;(&amp;self, f: F)\n        where F: Fn(i32)  + 'static + Send + Sync {\n        GLOBAL.lock().unwrap().callbacks.push(Box::new(f));\n    }\n}\n\nfn main() {\n    let foo = FooBuilder::new().build();\n    /* event loop */\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1447316430, "post_id": 33663372, "comment_id": 55107010, "body": "On side note: You usually shouldn&#39;t insert <code>Struct</code> into your type names... Just call it <code>Person</code> or <code>Photo</code>. Just a small hint on better style..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1447335183, "post_id": 33663372, "comment_id": 55117947, "body": "If we are commenting on style, I&#39;d recommend dropping the <code>get_</code> prefixes and the redundant <code>let</code> statements."}], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 2, "last_activity_date": 1447295878, "creation_date": 1447295878, "answer_id": 33663471, "question_id": 33663372, "link": "https://stackoverflow.com/questions/33663372/returning-reference-to-trait-rather-than-struct/33663471#33663471", "title": "Returning reference to trait rather than struct", "body": "<p>You can cast it to a <code>&amp;Photo</code>:</p>\n\n<pre><code>fn get_photo_trait(&amp;'a self) -&gt; Option&lt;&amp;'a Photo&lt;'a&gt;&gt; {\n    let photo_ref = self.photo.as_ref();\n    photo_ref.map(|photo| photo as &amp;Photo)\n}\n</code></pre>\n"}], "owner": {"reputation": 146, "user_id": 3381325, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/sNxN7.jpg?s=128&g=1", "display_name": "andygrove", "link": "https://stackoverflow.com/users/3381325/andygrove"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 143, "favorite_count": 0, "accepted_answer_id": 33663471, "answer_count": 1, "score": 2, "last_activity_date": 1447295878, "creation_date": 1447294998, "last_edit_date": 1447295478, "question_id": 33663372, "link": "https://stackoverflow.com/questions/33663372/returning-reference-to-trait-rather-than-struct", "title": "Returning reference to trait rather than struct", "body": "<p>I'm running into an issue trying to return a reference to a trait in Rust. I can return a reference to a struct OK.</p>\n\n<p>This is a contrived example to reproduce the problem, but I have a <code>Person</code> struct defined as:</p>\n\n<pre><code>struct PersonStruct&lt;'a&gt; {\n    age: u32,\n    photo: Option&lt;PhotoStruct&lt;'a&gt;&gt;\n}\n</code></pre>\n\n<p>I have a <code>Person</code> trait too, and I am trying to write a method on this trait to return a <code>Photo</code> trait, rather than a <code>PhotoStruct</code>.</p>\n\n<p>The full source is below, but the issue is that this method works fine:</p>\n\n<pre><code>    fn get_photo_struct(&amp;'a self) -&gt; Option&lt;&amp;'a PhotoStruct&lt;'a&gt;&gt; {\n        let photo_ref = self.photo.as_ref();\n        photo_ref\n    }\n</code></pre>\n\n<p>... and this one won't compile ...</p>\n\n<pre><code>    fn get_photo_trait(&amp;'a self) -&gt; Option&lt;&amp;'a Photo&lt;'a&gt;&gt; {\n        let photo_ref = self.photo.as_ref();\n        photo_ref\n    }\n</code></pre>\n\n<p>The difference is, the first returns the struct and the second returns the trait. There is an implementation of the trait for the struct.</p>\n\n<p>The compilation error is:</p>\n\n<pre><code>src/lib.rs:40:9: 40:18 error: mismatched types:\n expected `core::option::Option&lt;&amp;'a Photo&lt;'a&gt; + 'a&gt;`,\n    found `core::option::Option&lt;&amp;PhotoStruct&lt;'_&gt;&gt;`\n(expected trait Photo,\n    found struct `PhotoStruct`) [E0308]\n</code></pre>\n\n<p>I'd appreciate any pointers on what I'm doing wrong or what approach I should be taking instead.</p>\n\n<p>Full source:</p>\n\n<pre><code>use std::any::Any;\nuse std::vec::Vec;\n\nstruct PhotoStruct&lt;'a&gt; {\n    photo_bytes: &amp;'a [u8]\n}\n\nstruct PersonStruct&lt;'a&gt; {\n    age: u32,\n    photo: Option&lt;PhotoStruct&lt;'a&gt;&gt;\n}\n\ntrait Photo&lt;'a&gt; {\n    fn get_bytes(&amp;self) -&gt; &amp;'a[u8];\n}\n\nimpl&lt;'a&gt; Photo&lt;'a&gt; for PhotoStruct&lt;'a&gt; {\n    fn get_bytes(&amp;self) -&gt; &amp;'a[u8] {\n        return self.photo_bytes;\n    }\n}\n\ntrait Person&lt;'a&gt; {\n    fn get_age(&amp;self) -&gt; u32;\n    fn get_photo_struct(&amp;'a self) -&gt; Option&lt;&amp;'a PhotoStruct&lt;'a&gt;&gt;;\n    fn get_photo_trait(&amp;'a self) -&gt; Option&lt;&amp;'a Photo&lt;'a&gt;&gt;;\n}\n\nimpl&lt;'a&gt; Person&lt;'a&gt; for PersonStruct&lt;'a&gt; {\n    fn get_age(&amp;self) -&gt; u32 {\n        self.age\n    }\n    fn get_photo_struct(&amp;'a self) -&gt; Option&lt;&amp;'a PhotoStruct&lt;'a&gt;&gt; {\n        let photo_ref = self.photo.as_ref();\n        photo_ref\n    }\n    fn get_photo_trait(&amp;'a self) -&gt; Option&lt;&amp;'a Photo&lt;'a&gt;&gt; {\n        let photo_ref = self.photo.as_ref();\n        photo_ref\n    }\n}\n</code></pre>\n"}, {"tags": ["json", "serialization", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1447299202, "last_edit_date": 1447299202, "creation_date": 1447298137, "answer_id": 33663803, "question_id": 33663371, "link": "https://stackoverflow.com/questions/33663371/serialize-vector-of-boxed-traits-to-json/33663803#33663803", "title": "Serialize vector of boxed traits to JSON", "body": "<p>The automatically-generated implementations of the <code>Encodable</code> and <code>Decodable</code> traits wouldn't do the right thing; I'm not sure I've ever seen someone try to serialize a trait object before. There's no <code>struct</code> to reflect on to know what names and types to output for a trait.</p>\n\n<p>To fix your problem, you can implement the traits yourself. Here's an example that just creates an array of the names:</p>\n\n<pre><code>impl Encodable for Accounts {\n    fn encode&lt;S: Encoder&gt;(&amp;self, s: &amp;mut S) -&gt; Result&lt;(), S::Error&gt; {\n        s.emit_seq(self.accounts.len(), |s| {\n            for (idx, a) in self.accounts.iter().enumerate() {\n                try!(s.emit_seq_elt(idx, |s| {\n                    s.emit_str(a.get_name())\n                }))\n            }\n\n            Ok(())\n        })\n    }\n}\n</code></pre>\n\n<p>However, I don't know how you would write a decoder \u2014 which concrete type will you choose to implement the trait?</p>\n\n<hr>\n\n<p>For reference, here is the auto-generated implementation, found through the <code>--pretty expanded</code> option to <code>rustc</code>. I cleaned it up a bit for readability: </p>\n\n<pre><code>impl Decodable for Accounts {\n    fn decode&lt;D: Decoder&gt;(arg: &amp;mut D) -&gt; Result&lt;Accounts, D::Error&gt; {\n        arg.read_struct(\"Accounts\", 1, |d| {\n            let a = try!(d.read_struct_field(\"accounts\", 0usize, Decodable::decode));\n            Ok(Accounts { accounts: a })\n        })\n    }\n}\n</code></pre>\n\n<p>The compiler error:</p>\n\n<pre><code>src/main.rs:118:66: 118:83 error: the trait `core::marker::Sized` is not implemented for the type `Account` [E0277]\nsrc/main.rs:118             let a = try!(d.read_struct_field(\"accounts\", 0usize, Decodable::decode));\n                                                                                 ^~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1447320395, "creation_date": 1447320395, "answer_id": 33668111, "question_id": 33663371, "link": "https://stackoverflow.com/questions/33663371/serialize-vector-of-boxed-traits-to-json/33668111#33668111", "title": "Serialize vector of boxed traits to JSON", "body": "<p>I suggest you move away from the <code>struct</code>s + common <code>trait</code> setup and use an <code>enum</code>. This obviously doesn't allow users of your crate to add new account types, but even if it were allowed somehow, your deserialization code would never know about the new types and not be able to deserialize them. There certainly would be ways to \"register\" some kind of deserializers depending on certain tags, but as long as you have a fixed set of account types, an enum allows you to use the existing (de-)serialization framework.</p>\n\n<p>First you create a general <code>Account</code> type that holds all fields that are common to accounts</p>\n\n<pre><code>#[derive(RustcEncodable, RustcDecodable)]\nstruct Account {\n    name: String,\n    kind: AccountType,\n}\n</code></pre>\n\n<p>Then you create an enum that has variants of all accound types there are. If an account type needs extra fields, just add them to the appropriate enum variant.</p>\n\n<pre><code>#[derive(RustcEncodable, RustcDecodable)]\nenum AccountType {\n    Account1,\n    Account2,\n}\n</code></pre>\n\n<p>Your <code>Accounts</code> manager doesn't even require <code>Box</code>es anymore:</p>\n\n<pre><code>#[derive(RustcEncodable, RustcDecodable)]\nstruct Accounts {\n    accounts: Vec&lt;Account&gt;\n}\n</code></pre>\n\n<p>You can try out the entire thing in the <a href=\"http://is.gd/C2ejtY\" rel=\"nofollow\">Playground</a> but make sure to use the <code>rustc_serialize</code> and not the hack I used in the Playground to make it run in the playground. All but the first two lines are 100% compatible.</p>\n"}], "owner": {"reputation": 4408, "user_id": 154680, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/1fe5646f7071126187fbda8c68c526f6?s=128&d=identicon&r=PG", "display_name": "russoue", "link": "https://stackoverflow.com/users/154680/russoue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 0, "accepted_answer_id": 33668111, "answer_count": 2, "score": 1, "last_activity_date": 1447320395, "creation_date": 1447294995, "last_edit_date": 1447295423, "question_id": 33663371, "link": "https://stackoverflow.com/questions/33663371/serialize-vector-of-boxed-traits-to-json", "title": "Serialize vector of boxed traits to JSON", "body": "<p>I am trying to serialize a collection of <code>struct</code>'s which may be of different types but implement a trait. The following does not compile in the playpen but shows what I am trying to do:</p>\n\n<pre><code>extern crate rustc_serialize;\n\ntrait Account {\n    fn get_name(&amp;self) -&gt; &amp;String;\n}\n\n#[derive(RustcEncodable, RustcDecodable)]\nstruct Account1 {\n    name: String,\n}\n\nimpl Account1 {\n    fn new() -&gt; Account1 {\n        Account1 { name: String::from(\"Account1\") }\n    }\n}\n\nimpl Account for Account1 {\n    fn get_name(&amp;self) -&gt; &amp;String {\n        &amp;self.name\n    }\n}\n\n#[derive(RustcEncodable, RustcDecodable)]\nstruct Account2 {\n    name: String,\n}\n\nimpl Account2 {\n    fn new() -&gt; Account2 {\n        Account2 { name: String::from(\"Account2\") }\n    }\n}\n\nimpl Account for Account2 {\n    fn get_name(&amp;self) -&gt; &amp;String {\n        &amp;self.name\n    }\n}\n\n#[derive(RustcEncodable, RustcDecodable)]\nstruct Accounts {\n    accounts: Vec&lt;Box&lt;Account&gt;&gt;\n}\n\nimpl Accounts {\n    fn new() -&gt; Accounts {\n        let accs: Vec&lt;Box&lt;Account&gt;&gt; = Vec::new();\n        Accounts { accounts: accs }\n    }\n\n    fn add_account(&amp;mut self, account: Box&lt;Account&gt;) {\n        self.accounts.push(account);\n    }\n}\n\nfn main() {\n    let mut accounts = Accounts::new();\n    let acc1 = Box::new(Account1::new());\n    accounts.add_account(acc1);\n    let acc2 = Box::new(Account2::new());\n    accounts.add_account(acc2);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=31fb1abfa9fab8311f3f&amp;version=stable\" rel=\"nofollow\">Playpen</a></p>\n\n<p>On my machine I am getting the following error:</p>\n\n<pre><code>error: the trait `core::marker::Sized` is not implemented for the type `account::Account` [E0277]\n</code></pre>\n\n<p>I think the error is saying that for this to work the compiler needs to know the size of each <code>Box</code>-ed element at compile time. How can I solve this problem?</p>\n\n<p>I think I am doing this how I would do it in Java/C++ but I should probably think in a different way in Rust. Please suggest if there is any better alternative to achieve this.</p>\n"}]