[{"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462401116, "post_id": 37038780, "comment_id": 61628309, "body": "<i>which doesn&#39;t answer the actual question</i> \u2014 there are <b>4</b> possible solutions outlined in the answer and none of them are acceptable? <i>I can not separate those two fields, because they are just parts of implementation</i> \u2014 I&#39;m unclear why that prevents you from making a smaller structure and embedding it. You don&#39;t have to move both fields to different structures, but if you move both of them to another, then you can add the method there."}, {"owner": {"reputation": 1, "user_id": 6292740, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-F9VqCZ7TzBw/AAAAAAAAAAI/AAAAAAAAAKU/w4Pd-nf_WGE/photo.jpg?sz=128", "display_name": " DRDivider ", "link": "https://stackoverflow.com/users/6292740/drdivider"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462403516, "post_id": 37038780, "comment_id": 61629048, "body": "@Shepmaster two last solutions just doesn&#39;t apply. Embedding scanline_buffer into a different structure with immutable_scanline_buffer method actually did worked out. I wasn&#39;t thinking about it first for some reason. So, It solves the problem."}], "owner": {"reputation": 1, "user_id": 6292740, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-F9VqCZ7TzBw/AAAAAAAAAAI/AAAAAAAAAKU/w4Pd-nf_WGE/photo.jpg?sz=128", "display_name": " DRDivider ", "link": "https://stackoverflow.com/users/6292740/drdivider"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 56, "favorite_count": 0, "closed_date": 1462447778, "answer_count": 0, "score": 0, "last_activity_date": 1462401216, "creation_date": 1462398998, "last_edit_date": 1495542705, "question_id": 37038780, "link": "https://stackoverflow.com/questions/37038780/calling-two-member-functions-that-work-with-different-fields-at-the-same-time", "closed_reason": "Duplicate", "title": "Calling two member functions that work with different fields at the same time", "body": "<p>I'm porting an old project to Rust, and faced a problem I couldn't find a solution for. The only similar thing I found is <a href=\"https://stackoverflow.com/questions/25513755/rust-borrowing-references-to-attribute-in-struct\">this</a>, which doesn't answer the actual question. The underlying problem is this:</p>\n\n<pre><code>struct A {\n    a: Box&lt;i32&gt;,\n    b: Box&lt;i32&gt;\n}\n\nimpl A {\n    fn get_a(&amp;mut self) -&gt; &amp;mut Box&lt;i32&gt; { &amp;mut self.a }\n    fn get_b(&amp;mut self) -&gt; &amp;mut Box&lt;i32&gt; { &amp;mut self.b }\n}\n\nfn main() {\n    let mut a = A{ a: Box::new(42), b: Box::new(28) };\n\n    // This compiles:\n    //let af = &amp;mut a.a;\n    //let bf = &amp;mut a.b;\n\n    // This doesn't!\n    let af = a.get_a();\n    let bf = a.get_b();\n\n    println!(\"{}\", af);\n    println!(\"{}\", bf);\n}\n</code></pre>\n\n<p>In my real world code I have this:</p>\n\n<pre><code>struct GlyphPlacer {\n    bitmap: Bitmap,\n    bitmaps: Vec&lt;(char, GlyphBitmap)&gt;,\n\n    current_scanline_buffer: usize,\n    scanline_buffers: [Vec&lt;Scanline&gt;; 2]\n}\n\nimpl GlyphPlacer {\n    // ...\n\n    fn immutable_scanline_buffer(&amp;self) -&gt; &amp;Vec&lt;Scanline&gt; {\n        &amp;self.scanline_buffers[self.current_scanline_buffer]\n    }\n\n    fn draw_scanlines(&amp;mut self) {\n        for scanline in self.immutable_scanline_buffer() {\n            // error: cannot borrow `self.bitmap` as mutable because `*self` is also borrowed as immutable [E0502]\n            self.bitmap.draw_scanline(*scanline);\n        }\n    }\n}\n</code></pre>\n\n<p>Which compiles only if I inline the implementation of the<code>immutable_scanline_buffer()</code> method, and only because the <code>draw_scanline()</code> method is a method of the <code>self.bitmap</code> field, not the actual <code>GlyphPlacer</code> struct:</p>\n\n<pre><code>fn draw_scanlines(&amp;mut self) {\n    for scanline in &amp;self.scanline_buffers[self.current_scanline_buffer] {\n        self.bitmap.draw_scanline(*scanline);\n    }\n}\n</code></pre>\n\n<p>I understand why is this happening, but how to handle cases like this? I can not separate those two fields, because they are just parts of implementation of <code>GlyphPlacer</code>, and I can't always copy-paste code like that, because the implementation of functions like <code>immutable_scanline_buffer()</code> can't always be so short.</p>\n"}, {"tags": ["vector", "rust", "slice"], "answers": [{"comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 1, "creation_date": 1462381445, "post_id": 37033906, "comment_id": 61617844, "body": "Ranges don&#39;t have chunks, at least not in stable: <code>error: no method named &#39;chunks&#39; found for type &#39;core::ops::Range&lt;usize&gt;&#39; in the current scope</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 1, "creation_date": 1462382505, "post_id": 37033906, "comment_id": 61618419, "body": "@TrevorAlexander I apologize; I read a bit too fast! I added some alternates. You may want to add to your question what your goal is. In my experience, I&#39;ve rarely needed just a bunch of numbers. It&#39;s possible that there&#39;s a better overall approach."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1462451376, "last_edit_date": 1462451376, "creation_date": 1462381328, "answer_id": 37033906, "question_id": 37033700, "link": "https://stackoverflow.com/questions/37033700/how-do-i-process-a-range-in-slices-in-rust/37033906#37033906", "title": "How do I process a range in slices in Rust?", "body": "<p>Use <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.chunks\" rel=\"noreferrer\"><code>chunks</code></a> (or <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut\" rel=\"noreferrer\"><code>chunks_mut</code></a> if you need mutability):</p>\n\n<pre><code>fn main() {\n    let things = [5, 4, 3, 2, 1];\n\n    for slice in things.chunks(2) {\n        println!(\"{:?}\", slice);\n    }\n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[5, 4]\n[3, 2]\n[1]\n</code></pre>\n\n<p>The <em>easiest</em> way to combine this with a <code>Range</code> would be to collect the range to a <code>Vec</code> first (which dereferences to a slice):</p>\n\n<pre><code>fn main() {\n    let things: Vec&lt;_&gt; = (1..100).collect();\n\n    for slice in things.chunks(5) {\n        println!(\"{:?}\", slice);\n    }\n}\n</code></pre>\n\n<p>Another solution that is pure-iterator would be to use <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.chunks_lazy\" rel=\"noreferrer\"><code>Itertools::chunks_lazy</code></a>:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\n\nfn main() {\n    for chunk in &amp;(1..100).chunks_lazy(5) {\n        for val in chunk {\n            print!(\"{}, \", val);\n        }\n        println!(\"\");\n    }\n}\n</code></pre>\n\n<p>Which suggests a similar solution that only requires the standard library:</p>\n\n<pre><code>fn main() {\n    let mut range = (1..100).peekable();\n\n    while range.peek().is_some() {\n        for value in range.by_ref().take(5) {\n            print!(\"{}, \", value);\n        }\n        println!(\"\");\n    }\n}\n</code></pre>\n\n<p>One trick is that Ruby and Rust have different handling here, mostly centered around efficiency.</p>\n\n<p>In Ruby <code>Enumerable</code> can create new arrays to stuff values in without worrying about ownership and return a new array each time (check with <code>this_slice.object_id</code>).</p>\n\n<p>In Rust, allocating a new vector each time would be pretty unusual. Additionally, you can't easily return a reference to a vector that the iterator holds due to complicated lifetime concerns.</p>\n\n<p>A solution that's very similar to Ruby's is:</p>\n\n<pre><code>fn main() {\n    let mut range = (1..100).peekable();\n\n    while range.peek().is_some() {\n        let chunk: Vec&lt;_&gt; = range.by_ref().take(5).collect();\n\n        println!(\"{:?}\", chunk);\n    }\n}\n</code></pre>\n\n<p>Which <em>could</em> be wrapped up in a new iterator that hides the details:</p>\n\n<pre><code>use std::iter::Peekable;\n\nstruct InefficientChunks&lt;I&gt;\n    where I: Iterator\n{\n    iter: Peekable&lt;I&gt;,\n    size: usize,\n}\n\nimpl&lt;I&gt; Iterator for InefficientChunks&lt;I&gt;\n    where I: Iterator\n{\n    type Item = Vec&lt;I::Item&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.iter.peek().is_some() {\n            Some(self.iter.by_ref().take(self.size).collect())\n        } else {\n            None\n        }\n    }\n}\n\ntrait Awesome: Iterator + Sized {\n    fn inefficient_chunks(self, size: usize) -&gt; InefficientChunks&lt;Self&gt; {\n        InefficientChunks {\n            iter: self.peekable(),\n            size: size,\n        }\n    }\n}\n\nimpl&lt;I&gt; Awesome for I where I: Iterator {}\n\nfn main() {\n    for chunk in (1..100).inefficient_chunks(5) {\n        println!(\"{:?}\", chunk);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4986, "favorite_count": 2, "accepted_answer_id": 37033906, "answer_count": 1, "score": 6, "last_activity_date": 1462451376, "creation_date": 1462380636, "question_id": 37033700, "link": "https://stackoverflow.com/questions/37033700/how-do-i-process-a-range-in-slices-in-rust", "title": "How do I process a range in slices in Rust?", "body": "<p>I understand that the preferred way to iterate in Rust is through the <code>for var in (range)</code> syntax, but sometimes I'd like to work on more than one of the elements in that range at a time.</p>\n\n<p>From a Ruby perspective, I'm trying to find a way of doing <code>(1..100).each_slice(5) do |this_slice|</code> in Rust.</p>\n\n<p>I'm trying things like</p>\n\n<pre><code>for mut segment_start in (segment_size..max_val).step_by(segment_size) {\n    let this_segment = segment_start..(segment_start + segment_size).iter().take(segment_size);\n}\n</code></pre>\n\n<p>but I keep getting errors that suggest I'm barking up the wrong <del>type</del> tree. The docs aren't helpful either--they just don't contain this use case.</p>\n\n<p>What's the Rust way to do this?</p>\n"}, {"tags": ["database", "postgresql", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462379702, "post_id": 37033015, "comment_id": 61616811, "body": "Are you sure you can parameterize the table name at all? Many Stack Overflow questions and answers indicate that you cannot <a href=\"http://stackoverflow.com/q/1208442/155423\">1</a> <a href=\"http://stackoverflow.com/q/11312737/155423\">2</a> <a href=\"http://stackoverflow.com/q/25631006/155423\">3</a>. I don&#39;t think this is a Rust-specific issue."}, {"owner": {"reputation": 1, "user_id": 6262963, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fe5aa91e5989044d5d90c3f3eee9f819?s=128&d=identicon&r=PG&f=1", "display_name": "ccptf", "link": "https://stackoverflow.com/users/6262963/ccptf"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462387006, "post_id": 37033015, "comment_id": 61621207, "body": "I&#39;m not sure actually, thank you for that hint!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462390409, "post_id": 37033015, "comment_id": 61623144, "body": "I&#39;m going to mark this as a duplicate; if you find resources that suggest that Postgres can support this, feel free to ping me to reopen (or go through the reopen queue)."}], "owner": {"reputation": 1, "user_id": 6262963, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fe5aa91e5989044d5d90c3f3eee9f819?s=128&d=identicon&r=PG&f=1", "display_name": "ccptf", "link": "https://stackoverflow.com/users/6262963/ccptf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 164, "favorite_count": 0, "closed_date": 1462390479, "answer_count": 0, "score": 0, "last_activity_date": 1462379482, "creation_date": 1462378457, "last_edit_date": 1462379482, "question_id": 37033015, "link": "https://stackoverflow.com/questions/37033015/how-can-i-have-dynamic-table-selection-in-a-prepared-statement-with-rust-postgre", "closed_reason": "Duplicate", "title": "How can I have dynamic table selection in a prepared statement with rust-postgres?", "body": "<p>I'm creating a piece of software in Rust to collect data from an API and store it in a PostgreSQL database.</p>\n\n<p>I have one thread that is solely responsible for executing the SQL queries and storing the data. For this, I use the rust-postgres crate.</p>\n\n<p>My database is set up to have different tables for different instruments. I'm attempting to prepare one single statement with a dynamic table name and dynamic values. This is my code for the prepared statement:</p>\n\n<pre><code>let dburl = \"postgres://user:pw@localhost/dbname\";\nlet dbconn = Connection::connect(dburl, SslMode::None);\nif dbconn.is_err() {\n    println!(\"ERROR || Generic: Could not connect to postgres DB: {}\",\n             dbconn.unwrap_err());\n    drop(receiver);\n    return;\n}\nlet dbconn = dbconn.unwrap();\nlet stmt = dbconn.prepare(\"INSERT INTO $1 (timestmp, hours, minutes, seconds, nanoseconds, \\\n                           ask, bid, weekday, status) VALUES ($2::varchar, $3::int, $4::int, \\\n                           $5::int, $6::int, $7, $8, $9, $10::bool)\");\nif stmt.is_err() {\n    println!(\"ERROR || Generic: Failed to prepare SQL statement: {}\",\n             stmt.unwrap_err());\n    drop(receiver);\n    return;\n}\nlet stmt = stmt.unwrap();\nlet mut instr: String = \"scheme.\".to_owned();\n\nloop {\n    let msg = receiver.recv();\n    if msg.is_err() {\n        break; // no more sender attached to channel\n    }\n    let msg = msg.unwrap();\n    instr.push_str(&amp;msg.instrument);\n    let stmt_res = stmt.execute(&amp;[&amp;msg.timestmp,\n                                  &amp;msg.hours,\n                                  &amp;msg.minutes,\n                                  &amp;msg.seconds,\n                                  &amp;msg.nanoseconds,\n                                  &amp;msg.ask,\n                                  &amp;msg.bid,\n                                  &amp;msg.weekday,\n                                  &amp;msg.status]);\n    if stmt_res.is_err() {\n        println!(\"ERROR || Generic: Failed to execute prepared SQL statement: {}\",\n                 stmt_res.unwrap_err());\n        drop(receiver);\n        return;\n    }\n    let stmt_res = stmt_res.unwrap();\n    println!(\"&gt;&gt; {} line affected by SQL query.\", stmt_res);\n    let instr: String = \"scheme.\".to_owned();\n}\n</code></pre>\n\n<p>This results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Error reported by Postgres: ERROR: syntax error at or near \"$1\"\n</code></pre>\n\n<p>I tried to use <code>$1::regclass</code> as I thought <a href=\"http://www.postgresql.org/docs/current/static/datatype-oid.html\" rel=\"nofollow\">my syntax is correct</a>.</p>\n\n<p>If this isn't feasible or easy to achieve, I thought about these options as well:</p>\n\n<ol>\n<li>Prepare statements for all different instruments</li>\n<li>Merge all instruments in one table with an additional field 'instrument' (not preferred)</li>\n</ol>\n\n<p>But that dynamic solution would be highly preferred. </p>\n"}, {"tags": ["generics", "iterator", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1462368601, "post_id": 37028807, "comment_id": 61608470, "body": "It&#39;s surprising that you don&#39;t need to implement any new trait for such kind of problem."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1524599690, "last_edit_date": 1524599690, "creation_date": 1462367424, "answer_id": 37028807, "question_id": 37028476, "link": "https://stackoverflow.com/questions/37028476/how-to-combine-stdstrlines-and-stdiolines/37028807#37028807", "title": "How to combine std::str::lines and std::io::lines?", "body": "<p>The two iterators don't produce the same values:</p>\n\n<pre><code>impl&lt;B: BufRead&gt; Iterator for io::Lines&lt;B&gt; {\n    type Item = Result&lt;String&gt;;\n}\n</code></pre>\n\n\n\n<pre><code>impl&lt;'a&gt; Iterator for str::Lines&lt;'a&gt; {\n    type Item = &amp;'a str;\n}\n</code></pre>\n\n<p>You have to handle that difference somehow. The most important difference is that <code>io::Lines</code> can <em>fail</em>. Your program has to decide how to deal with that; I've chosen to just abort the program.</p>\n\n<p>The next thing you need to do is to accept any type that can be converted into an iterator, and the value yielded from the iterator has to be converted to a type that you can deal with. It appears that <code>&amp;str</code> is the common denominator.</p>\n\n<p>This is solved by using <a href=\"http://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> and <a href=\"http://doc.rust-lang.org/std/borrow/trait.Borrow.html\" rel=\"nofollow noreferrer\"><code>Borrow</code></a>:</p>\n\n<pre><code>use std::borrow::Borrow;\nuse std::fs::File;\nuse std::io::prelude::*;\nuse std::io::BufReader;\n\nfn parse&lt;I&gt;(lines: I)\nwhere\n    I: IntoIterator,\n    I::Item: Borrow&lt;str&gt;,\n{\n    for line in lines {\n        println!(\"line: {}\", line.borrow());\n    }\n}\n\nfn main() {\n    parse(\"alpha\\nbeta\\ngamma\".lines());\n\n    println!(\"----\");\n\n    let f = File::open(\"/etc/hosts\").expect(\"Couldn't open\");\n    let b = BufReader::new(f);\n    parse(b.lines().map(|l| l.expect(\"Bad line!\")));\n}\n</code></pre>\n\n<p>Check <a href=\"http://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> section on <a href=\"http://doc.rust-lang.org/stable/book/traits.html#where-clause\" rel=\"nofollow noreferrer\"><code>where</code> clauses</a> for more information about <em>trait bounds</em>.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1462370534, "last_edit_date": 1462370534, "creation_date": 1462369365, "answer_id": 37029631, "question_id": 37028476, "link": "https://stackoverflow.com/questions/37028476/how-to-combine-stdstrlines-and-stdiolines/37029631#37029631", "title": "How to combine std::str::lines and std::io::lines?", "body": "<p>Using the <code>Borrow</code> bound in the <code>parse</code> function will allow you to borrow <code>&amp;str</code>, but if you need <code>String</code> values, a better approach is to use <code>Cow</code>.</p>\n\n<p>Using <code>line.borrow().to_string()</code> to obtain a <code>String</code> value will always allocate, even when <code>parse</code> is called with lines from file (in this case, <code>lines.map</code> produces <code>String</code>).</p>\n\n<p>Using <code>line.into_owned()</code> will allocate when called with lines from an <code>&amp;str</code>, but will not allocate when called with lines from file (will just unwrap the <code>String</code> value passed to <code>Cow::Owned</code>).</p>\n\n<pre><code>use std::borrow::Cow;\nuse std::io::{BufReader, BufRead};\nuse std::iter::IntoIterator;\nuse std::fs::File;\n\nfn parse&lt;'a, I&gt;(lines: I)\n    where I: IntoIterator,\n          I::Item: Into&lt;Cow&lt;'a, str&gt;&gt;\n{\n    for line in lines {\n        let line: Cow&lt;'a, str&gt; = line.into();\n        let line: String = line.into_owned();\n        // or\n        let line = line.into().into_owned()\n        println!(\"{}\", line);\n    }\n}\n\nfn main() {\n    let fin = BufReader::new(File::open(\"/etc/hosts\").expect(\"cannot open file\"));\n    parse(fin.lines().map(|r| r.expect(\"file read failed\")));\n\n    let content: &amp;'static str = \"some\\nlong\\ntext\";\n    parse(content.lines());\n}\n</code></pre>\n"}], "owner": {"reputation": 840, "user_id": 4725840, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/mpeTv.jpg?s=128&g=1", "display_name": "knight42", "link": "https://stackoverflow.com/users/4725840/knight42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 270, "favorite_count": 1, "accepted_answer_id": 37028807, "answer_count": 2, "score": 7, "last_activity_date": 1524599690, "creation_date": 1462366527, "last_edit_date": 1462370247, "question_id": 37028476, "link": "https://stackoverflow.com/questions/37028476/how-to-combine-stdstrlines-and-stdiolines", "title": "How to combine std::str::lines and std::io::lines?", "body": "<p>I want to write a function to parse text, but the text may come from external file or an internal <code>&amp;str</code>. The <code>parse</code> function may go like this:</p>\n\n<pre><code>fn parse(lines: GenericLinesGenerator) {\n   for line in lines {\n       // parse content\n   }\n}\n</code></pre>\n\n<p>... and it can be invoked like this:</p>\n\n<pre><code>use std::io::BufReader;\nuse std::fs::File;\nlet fin = BufReader::new(File::open(\"info.txt\").expect(\"not found\"));\nparse(TransformFromIO(fin.lines()))\n</code></pre>\n\n<p>or</p>\n\n<pre><code>let content: &amp;'static str = \"some\\nlong\\ntext\";\nparse(TransformFromStr(content.lines()))\n</code></pre>\n\n<p>Is it possible to implement such a <code>parse</code> function?</p>\n"}, {"tags": ["macos", "rust", "rust-cargo", "rpath"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462366693, "post_id": 37017915, "comment_id": 61606887, "body": "Please <a href=\"https://stackoverflow.com/posts/37017915/edit\">edit</a> your question to include where <code>libcpp2rs.dylib</code> is located, how you are informing Rust of where it is, and how you are building the code."}], "answers": [{"tags": [], "owner": {"reputation": 630, "user_id": 225329, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/mTyGz.jpg?s=128&g=1", "display_name": "Alexander Stavonin", "link": "https://stackoverflow.com/users/225329/alexander-stavonin"}, "is_accepted": true, "score": 5, "last_activity_date": 1462417519, "creation_date": 1462417519, "answer_id": 37041640, "question_id": 37017915, "link": "https://stackoverflow.com/questions/37017915/rust-and-loader-paths-rpath-loader-path-on-os-x/37041640#37041640", "title": "Rust and loader paths (@rpath, @loader_path) on OS X", "body": "<p>After some researches around I've found that the actual problem is <code>libcpp2rs.dylib</code> ID:</p>\n\n<pre><code>&gt; otool -L cpplib/bin/libcpp2rs.dylib \ncpplib/bin/libcpp2rs.dylib:\n    @rpath/libcpp2rs.dylib (compatibility version 0.0.0, current version 0.0.0)\n    /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n</code></pre>\n\n<p><code>rustc</code> uses a dylib ID as a reference for linkage type and if you'd like to change linkage type for a library to <code>@loader_path</code> for example, you have to fix dylib ID. It should looks like:</p>\n\n<pre><code>@loader_path/libcpp2rs.dylib (compatibility version 0.0.0, current version 0.0.0)\n</code></pre>\n"}], "owner": {"reputation": 630, "user_id": 225329, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/mTyGz.jpg?s=128&g=1", "display_name": "Alexander Stavonin", "link": "https://stackoverflow.com/users/225329/alexander-stavonin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1304, "favorite_count": 1, "accepted_answer_id": 37041640, "answer_count": 1, "score": 3, "last_activity_date": 1462417519, "creation_date": 1462332757, "last_edit_date": 1462415061, "question_id": 37017915, "link": "https://stackoverflow.com/questions/37017915/rust-and-loader-paths-rpath-loader-path-on-os-x", "title": "Rust and loader paths (@rpath, @loader_path) on OS X", "body": "<p>I'm trying to solve a problem with foreign library loading with Rust. </p>\n\n<p><strong>Inputs:</strong></p>\n\n<p>I have an executable <code>rtest</code> and a dylib <code>libcpp2rs.dylib</code>. The library is linked to the executable through FFI:</p>\n\n<pre><code>#[link(name=\"cpp2rs\")]\nextern { ... }\n</code></pre>\n\n<p>My <code>build.rs</code> file (I'm passing an extra argument with <code>libcpp2rs.dylib</code> location):</p>\n\n<pre><code>pub fn main() {\n    println!(\"cargo:rustc-link-search=native=./cpplib/bin\");\n}\n</code></pre>\n\n<p>And my <code>Cargo.toml</code> file:</p>\n\n<pre><code>[package]\nname = \"rtest\"\nversion = \"0.1.0\"\nauthors = [\"astavonin\"]\nbuild = \"build.rs\"\nrpath = true\n[dependencies]\nlibc = \"0.2.10\"\n</code></pre>\n\n<p>And I use <code>cargo build</code> command for compilation.</p>\n\n<p><strong>Outputs:</strong></p>\n\n<p><code>otool</code> shows me that library will be loaded by <code>RPATH</code>:</p>\n\n<pre><code>&gt; otool -L rtest\nrtest:\n@rpath/libcpp2rs.dylib (compatibility version 0.0.0, current version 0.0.0)\n/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n</code></pre>\n\n<p>But at the same time there is no <code>LC_LPATH</code> section in executable:</p>\n\n<pre><code>&gt; otool -l rtest | grep LC_RPATH\n&gt;\n</code></pre>\n\n<p>And it leads my application to a loading error:</p>\n\n<pre><code>&gt; ./rtest \ndyld: Library not loaded: @rpath/libcpp2rs.dylib\n  Referenced from: /Users/astavonin/projects/Tests/rtest/target/debug/./rtest\n  Reason: image not found\nzsh: trace trap  ./rtest\n</code></pre>\n\n<p>This issue can be fixed by <code>install_name_tool</code> usage, but I prefer do not introduce additional steps into compilation process.</p>\n\n<ol>\n<li>Is it possible (and how) to change loading type from @rpath to @loader_path with <code>cargo</code> configurations/build script?</li>\n<li>Is it possible to pass @rpath value to <code>cargo</code>?</li>\n</ol>\n"}, {"tags": ["timer", "rust"], "answers": [{"comments": [{"owner": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "edited": false, "score": 0, "creation_date": 1474821105, "post_id": 37011276, "comment_id": 66677551, "body": "Could you use this to update a field in a mutable struct?"}, {"owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "reply_to_user": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "edited": false, "score": 0, "creation_date": 1491080759, "post_id": 37011276, "comment_id": 73398847, "body": "@lsund If you mean whether or not it&#39;s possible to leave a mutable reference in the closure accessible from elsewhere, from the crate&#39;s source it looks like the answer is &#39;no&#39; barring a <code>Mutex</code>&#39;d or <code>Arc</code>&#39;d etc. ref to a <code>Cell</code>-and-friends global (or <code>unsafe</code> code)."}, {"owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "edited": false, "score": 0, "creation_date": 1491081548, "post_id": 37011276, "comment_id": 73399058, "body": "(and then there are <a href=\"https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html\" rel=\"nofollow noreferrer\">channels</a> and <a href=\"https://github.com/alexcrichton/scoped-tls/blob/master/src/lib.rs\" rel=\"nofollow noreferrer\">scoped_tls</a> and stuff, but in the end you still need to wrap up the object in a <code>Send</code>-ly way)"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 7, "last_activity_date": 1462298615, "creation_date": 1462298615, "answer_id": 37011276, "question_id": 37009480, "link": "https://stackoverflow.com/questions/37009480/does-rust-have-an-equivalent-of-pythons-threading-timer/37011276#37011276", "title": "Does Rust have an equivalent of Python&#39;s threading.Timer?", "body": "<p>You can use the <a href=\"https://crates.io/crates/timer\">timer</a> crate</p>\n\n<pre><code>extern crate timer;\nextern crate chrono;\n\nuse timer::Timer;\nuse chrono::Duration;\nuse std::thread;\n\nfn x() {\n    println!(\"hello\");\n}\n\nfn main() {\n    let timer = Timer::new();\n    let guard = timer.schedule_repeating(Duration::seconds(2), x);\n    // give some time so we can see hello printed\n    // you can execute any code here\n    thread::sleep(::std::time::Duration::new(10, 0));\n    // stop repeating\n    drop(guard);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1462305031, "post_id": 37011364, "comment_id": 61578420, "body": "Note that it can be inefficient to allocate a new thread in each <code>start</code> invocation."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462305760, "post_id": 37011364, "comment_id": 61578833, "body": "@malbarbo great point! If you want a recurring task, it&#39;s <b>much</b> better to use the same thread over and over again, which I assume the timer crate from your answer does. I was just trying to match the Python semantics."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1516023974, "last_edit_date": 1516023974, "creation_date": 1462298947, "answer_id": 37011364, "question_id": 37009480, "link": "https://stackoverflow.com/questions/37009480/does-rust-have-an-equivalent-of-pythons-threading-timer/37011364#37011364", "title": "Does Rust have an equivalent of Python&#39;s threading.Timer?", "body": "<p>It's easy enough to write a similar version yourself, using only tools from the standard library:</p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\n\nstruct Timer&lt;F&gt; {\n    delay: Duration,\n    action: F,\n}\n\nimpl&lt;F&gt; Timer&lt;F&gt;\nwhere\n    F: FnOnce() + Send + Sync + 'static,\n{\n    fn new(delay: Duration, action: F) -&gt; Self {\n        Timer { delay, action }\n    }\n\n    fn start(self) {\n        thread::spawn(move || {\n            thread::sleep(self.delay);\n            (self.action)();\n        });\n    }\n}\n\nfn main() {\n    fn x() {\n        println!(\"hello\");\n        let t = Timer::new(Duration::from_secs(2), x);\n        t.start();\n    }\n\n    let t = Timer::new(Duration::from_secs(2), x);\n    t.start();\n\n    // Wait for output\n    thread::sleep(Duration::from_secs(10));\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/37009480/does-rust-have-an-equivalent-of-pythons-threading-timer#comment61578420_37011364\">pointed out by malbarbo</a>, this does create a new thread for each timer. This can be more expensive than a solution which reuses threads but it's a very simple example.</p>\n"}], "owner": {"reputation": 73, "user_id": 6062543, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46f30ac7abc1d8b6710047cda1fcd299?s=128&d=identicon&r=PG&f=1", "display_name": "Tkinter2", "link": "https://stackoverflow.com/users/6062543/tkinter2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1859, "favorite_count": 1, "answer_count": 2, "score": 6, "last_activity_date": 1516023974, "creation_date": 1462292929, "last_edit_date": 1462346780, "question_id": 37009480, "link": "https://stackoverflow.com/questions/37009480/does-rust-have-an-equivalent-of-pythons-threading-timer", "title": "Does Rust have an equivalent of Python&#39;s threading.Timer?", "body": "<p>I'm looking for a timer which uses threads, not plain <code>time.sleep</code>:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from threading import Timer\n\ndef x():\n    print \"hello\"\n    t = Timer(2.0, x)\n    t.start()\n\nt = Timer(2.0, x)\nt.start()\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462288654, "post_id": 37007996, "comment_id": 61568487, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/26983355/155423\">stackoverflow.com/q/26983355/155423</a> or <a href=\"http://stackoverflow.com/q/26070559/155423\">stackoverflow.com/q/26070559/155423</a>. Use <code>trait Buffer: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt; {} impl&lt;T&gt; Buffer for T where T: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt; {}</code>."}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462289064, "post_id": 37007996, "comment_id": 61568761, "body": "The answer to that question definitely applies to my question (thanks!), but I feel there may be additional answers to my question.  For example, traits have a means to tuck away additional types and bounds (associated types); is there some similar mechanism for generic structs?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1462297288, "post_id": 37007996, "comment_id": 61573770, "body": "I&#39;m also stuck with this. I wrote about an idea here <a href=\"https://internals.rust-lang.org/t/rfc-idea-associated-type-parameters/3361\" rel=\"nofollow noreferrer\">internals.rust-lang.org/t/rfc-idea-associated-type-parameter&zwnj;&#8203;s/&hellip;</a>"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 158, "favorite_count": 1, "closed_date": 1471868276, "answer_count": 0, "score": 1, "last_activity_date": 1462289038, "creation_date": 1462288535, "last_edit_date": 1462289038, "question_id": 37007996, "link": "https://stackoverflow.com/questions/37007996/repetitive-trait-bounds-on-generic-structs", "closed_reason": "Duplicate", "title": "Repetitive trait bounds on generic structs", "body": "<p>I am doing some USB work and my design has a generic buffer type with trait bounds <code>AsRef&lt;[u8]&gt;</code> and <code>AsMut&lt;[u8]&gt;</code>.  I am finding that these trait bounds \"infect\" all higher layers and I have to repeatedly specify them.  Is there a way to tidy this up?  Example:</p>\n\n<pre><code>pub struct Transfer&lt;B: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt;&gt; {\n    pub buf: B,\n    // ...\n}\n\nimpl&lt;B: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt;&gt; Transfer&lt;B&gt; {\n    // ...\n}\n\npub struct Device&lt;B: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt;&gt; {\n    transfers: Vec&lt;Option&lt;Transfer&lt;B&gt;&gt;&gt;,\n    // ...\n}\n\nimpl&lt;B: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt;&gt; Device&lt;B&gt; {\n    // ...\n}\n\nimpl&lt;B: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt;&gt; Evented for Device&lt;B&gt; {\n    // ...\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1462286809, "post_id": 37007315, "comment_id": 61567080, "body": "We really need to promote <i>The Little Book of Rust Macros</i> to the level of official documentation to make your hard work easier to find!"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 1, "creation_date": 1462342926, "post_id": 37007315, "comment_id": 61590887, "body": "Thanks, I already made extensive use of tlborm, but in this case, I was looking at things I could add <i>inside</i> the <code>enum { }</code> (i.e. <code>enum { as_something!($($body)*)}</code> not realising that what was needed was to wrap the whole enum into <code>as_item</code>.  And a <i>huge</i> thanks for tlborm, I wouldn&#39;t be where I am with rust macros if not for it."}, {"owner": {"reputation": 1172, "user_id": 2583044, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e389ae8a908e2c80cca150bcbbf827ed?s=128&d=identicon&r=PG", "display_name": "62mkv", "link": "https://stackoverflow.com/users/2583044/62mkv"}, "edited": false, "score": 0, "creation_date": 1565175051, "post_id": 37007315, "comment_id": 101267196, "body": "why does this example uses <code>{}</code> after <code>=&gt;</code> when all the TRPL book examples use <code>()</code> ?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1557660239, "last_edit_date": 1557660239, "creation_date": 1462286704, "answer_id": 37007315, "question_id": 37006835, "link": "https://stackoverflow.com/questions/37006835/building-an-enum-inside-a-macro/37007315#37007315", "title": "Building an enum inside a macro", "body": "<p>It's absolutely possible, but you're conflating totally unrelated concepts.</p>\n\n<p>Something like <code>$case:ty</code> does not mean <code>$case</code> is something which <em>looks</em> like a type, it means <code>$case</code> is <em>literally</em> a type.  Enums are not made up of a sequence of types; they're made up of a sequence of <em>variants</em> which are an identifier followed (optionally) by a tuple structure body, a record structure body, or a tag value.</p>\n\n<p>The parser doesn't care if the type you give it happens to coincidentally <em>look</em> like a valid variant, it's simply not expecting a type, and will refuse to parse one in that position.</p>\n\n<p>What you need is to use something like <code>$case:variant</code>.  Unfortunately for you, <em>no such matcher exists</em>.  The only way to do something like this is to manually parse it using a recursive incremental parser and that is <em>so</em> out of scope of an SO question it's not funny.  If you want to learn more, try the <a href=\"https://danielkeep.github.io/tlborm/book/pat-incremental-tt-munchers.html\" rel=\"nofollow noreferrer\">chapter on incremental TT munchers in the Little Book of Rust Macros</a> as a starting point.</p>\n\n<p>However, you don't appear to <em>actually</em> do anything with the cases.  You're just blindly substituting them.  In that case, you can just cheat and not bother with trying to match anything coherent:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! build {\n    ($($body:tt)*) =&gt; {\n        as_item! {\n            enum Test { $($body)* }\n        }\n    };\n}\n\nmacro_rules! as_item {\n    ($i:item) =&gt; { $i };\n}\n\nfn main() {\n    build!{ Foo, Bar };\n}\n</code></pre>\n\n<p>(Incidentally, that <code>as_item!</code> thing is explained in the section on <a href=\"https://danielkeep.github.io/tlborm/book/blk-ast-coercion.html\" rel=\"nofollow noreferrer\">AST coercion</a> (<em>a.k.a.</em> \"the reparse trick\").)</p>\n\n<p>This just grabs everything provided as input to <code>build!</code>, and shoves it into the body of an <code>enum</code> without caring what it looks like.</p>\n\n<p>If you were trying to do something <em>meaningful</em> with the variants, well, you're going to have to <a href=\"http://xyproblem.info/\" rel=\"nofollow noreferrer\">be more specific about what you're actually trying to accomplish</a>, as the best advice of how to proceed varies <em>wildly</em> depending on the answer.</p>\n"}], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3549, "favorite_count": 1, "accepted_answer_id": 37007315, "answer_count": 1, "score": 4, "last_activity_date": 1557660239, "creation_date": 1462285365, "last_edit_date": 1462285610, "question_id": 37006835, "link": "https://stackoverflow.com/questions/37006835/building-an-enum-inside-a-macro", "title": "Building an enum inside a macro", "body": "<p>Is it possible to build an enum inside a Rust macro using fields that are defined as macro parameters? I've tried this:</p>\n\n<pre><code>macro_rules! build {\n    ($($case:ty),*) =&gt; { enum Test { $($case),* } };\n}\n\nfn main() {\n    build!{ Foo(i32), Bar(i32, i32) };\n}\n</code></pre>\n\n<p>But it fails with <code>error: expected ident, found 'Foo(i32)'</code></p>\n\n<p>Note that if the fields are defined inside the enum, there is no problem:</p>\n\n<pre><code>macro_rules! build {\n    ($($case:ty),*) =&gt; { enum Test { Foo(i32), Bar(i32, i32) } };\n}\n\nfn main() {\n    build!{ Foo(i32), Bar(i32, i32) };\n}\n</code></pre>\n\n<p>It also works if my macro only accepts simple fields:</p>\n\n<pre><code>macro_rules! build {\n    ($($case:ident),*) =&gt; { enum Test { $($case),* } };\n}\n\nfn main() {\n    build!{ Foo, Bar };\n}\n</code></pre>\n\n<p>But I've been unable to get it to work in the general case.</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "edited": false, "score": 0, "creation_date": 1462268177, "post_id": 36993795, "comment_id": 61554001, "body": "Thanks. I&#39;ve had a scout around (mainly out of interest) and have found I can only cast the literal to type T using let x: T = num::NumCast::from(2i32); but most of the num casts have been removed from std - any pointers on converting the literal to T?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "edited": false, "score": 0, "creation_date": 1462276578, "post_id": 36993795, "comment_id": 61559419, "body": "@Nodoid is something wrong with using <code>FromPrimitive</code> as the last example shows?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1462237057, "last_edit_date": 1495535431, "creation_date": 1462235927, "answer_id": 36993795, "question_id": 36993605, "link": "https://stackoverflow.com/questions/36993605/using-a-generic-in-a-struct-and-implementing-via-a-trait/36993795#36993795", "title": "Using a generic in a struct and implementing via a trait", "body": "<p>This syntax is incorrect:</p>\n\n<pre><code>impl&lt;T&gt; Calculate&lt;T: Mul&lt;Output = T&gt;&gt; for Shape&lt;T&gt;\n</code></pre>\n\n<p>you want</p>\n\n<pre><code>impl&lt;T: Mul&lt;Output = T&gt;&gt; Calculate&lt;T&gt; for Shape&lt;T&gt;\n</code></pre>\n\n<p>I'd almost always recommend using <code>where</code> clause instead; I think it reads better and might have helped prevent this case:</p>\n\n<pre><code>impl&lt;T&gt; Calculate&lt;T&gt; for Shape&lt;T&gt;\n    where T: Mul&lt;Output = T&gt;,\n</code></pre>\n\n<p>This just unlocks more errors. You are trying to multiply by <code>2</code>, an integral variable that hasn't been fully nailed down yet \u2014 is it a <code>u8</code>? is it an <code>i32</code>? The restrictions don't say that <code>T</code> can be multiplied by a <code>2</code>. Additionally, you try to add values together, but there's no guarantee that you can add the type <code>T</code>.</p>\n\n<p>The <code>impl Calculate&lt;i32&gt;</code> and <code>calc_fn</code> blocks don't really make sense; it's unlikely you want to <a href=\"https://stackoverflow.com/q/34438755/155423\">implement functions for the trait</a> and you don't supply a <code>Shape</code> in the latter. The trait also doesn't use the <code>Shape: T</code> parameter (and Rust uses <code>snake_case</code> variable names anyway).</p>\n\n<blockquote>\n  <p>What I'm trying to achieve is code that I can send either a <code>f32</code> or <code>i32</code> in without needing to create two different impl definitions so can just pass in <code>T</code>.</p>\n</blockquote>\n\n<p>In this case, it'd probably be way easier:</p>\n\n<pre><code>trait Calculate&lt;T&gt; {\n    fn calc(&amp;self) -&gt; T;\n}\n\nimpl Calculate&lt;i32&gt; for Shape&lt;i32&gt; {\n    fn calc(&amp;self) -&gt; i32 {\n        self.line_one * 2 + self.line_two * 2\n    }\n}\n\nimpl Calculate&lt;f32&gt; for Shape&lt;f32&gt; {\n    fn calc(&amp;self) -&gt; f32 {\n        self.line_one * 2.0 + self.line_two * 2.0\n    }\n}\n</code></pre>\n\n<p>Note that these are <strong>not</strong> equivalent! The <code>f64</code> has floating point literals (<code>2.0</code>) not integral (<code>2</code>).</p>\n\n<p>If you <em>must</em> have a generic, you are going to need to convert the literal <code>2</code> to the type <code>T</code> or add a restriction that T can be multiplied by some known size. Unfortunately, <code>f64</code> cannot by multiplied by any integral value without casting.</p>\n\n<p>The <a href=\"http://rust-num.github.io/num/num/trait.FromPrimitive.html\" rel=\"nofollow noreferrer\"><code>FromPrimitive</code></a> trait from the num crate is key here. Making the types <code>Copy</code> also makes the implementation easier.</p>\n\n<pre><code>extern crate num;\n\nuse std::ops::{Add, Mul};\nuse num::FromPrimitive;\n\nstruct Shape&lt;T&gt; {\n    line_one: T,\n    line_two: T,\n}\n\ntrait Calculate&lt;T&gt; {\n    fn calc(&amp;self) -&gt; T;\n}\n\nimpl&lt;T&gt; Calculate&lt;T&gt; for Shape&lt;T&gt;\n    where T: Copy + FromPrimitive + Add&lt;Output = T&gt; + Mul&lt;Output = T&gt;,\n{\n    fn calc(&amp;self) -&gt; T {\n        let two = T::from_u8(2).expect(\"Unable to create a value of two\");\n        self.line_one * two + self.line_two * two\n    }\n}\n\nfn main() {\n    let s1 = Shape { line_one: 2, line_two: 3 };\n    let s2 = Shape { line_one: 2.0, line_two: 3.0 };\n\n    println!(\"{}\", s1.calc());\n    println!(\"{}\", s2.calc());\n}\n</code></pre>\n"}], "owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 865, "favorite_count": 0, "accepted_answer_id": 36993795, "answer_count": 1, "score": 1, "last_activity_date": 1462237057, "creation_date": 1462234533, "last_edit_date": 1462235130, "question_id": 36993605, "link": "https://stackoverflow.com/questions/36993605/using-a-generic-in-a-struct-and-implementing-via-a-trait", "title": "Using a generic in a struct and implementing via a trait", "body": "<p>I have struct defined like this</p>\n\n<pre><code>struct Shape&lt;T&gt; {\n    line_one: T,\n    line_two: T,\n}\n</code></pre>\n\n<p>I am trying to create a simple trait and implementation that takes this struct to calculate some simple math.</p>\n\n<p>My trait and impls look like this</p>\n\n<pre><code>trait Calculate&lt;T: Mul&lt;Output = T&gt;&gt; {\n    fn calc(&amp;self, Shape: T) -&gt; T;\n}\n\nimpl&lt;T&gt; Calculate&lt;T&gt; for Shape&lt;T&gt; {\n    fn calc(&amp;self, Shape: T) -&gt; T {\n        self.line_one * 2 + self.line_two * 2\n    }\n}\n\nimpl Calculate&lt;i32&gt; {\n    fn calc(&amp;self) -&gt; i32 {\n        self.line_one * 2 + self.line_two * 2\n    }\n}\n\nfn calc_fn&lt;T: Calculate&lt;i32&gt;&gt;(calculate: T) {\n    calculate.calc();\n}\n</code></pre>\n\n<p>When I put this into the Rust playground, the compile fails as <code>Mul</code> is not implemented in the <code>impl Calculate&lt;T&gt;</code>. However, if I change <code>&lt;T&gt;</code> to <code>&lt;T: Mul&lt;Output = T&gt;&gt;</code>, I get the error that </p>\n\n<pre><code>&lt;anon&gt;:14:21: 14:22 error: expected one of `!`, `(`, `+`, `,`, `::`, `&lt;`, or `&gt;`, found `:`\n&lt;anon&gt;:14 impl &lt;T&gt; Calculate&lt;T: Mul&lt;Output = T&gt;&gt; for Shape&lt;T&gt; \n</code></pre>\n\n<p>I'm at a loss as how to implement <code>Mul</code> for <code>T</code> in <code>impl Calculate&lt;T&gt;</code>.</p>\n\n<p>What I'm trying to achieve is code that I can send either a <code>f32</code> or <code>i32</code> in without needing to create two different impl definitions so can just pass in <code>T</code>.</p>\n"}, {"tags": ["struct", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462235025, "post_id": 36993255, "comment_id": 61541355, "body": "In addition to DK&#39;s very insightful points, note that your code would have intrinsic problems with multithreaded programs."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1462253175, "post_id": 36993255, "comment_id": 61545982, "body": "You&#39;re asking for global, mutable variables, to which Rust takes the principled approach of blowing raspberries and hitting you with a wet sock. A local approach like a builder object (eg. <code>EntityCache</code>) with a <code>new_entity</code> method would fit Rust a <i>lot</i> better."}], "answers": [{"comments": [{"owner": {"reputation": 371, "user_id": 5054909, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/edVGR.png?s=128&g=1", "display_name": "Moln&#225;r M&#225;rk", "link": "https://stackoverflow.com/users/5054909/moln%c3%a1r-m%c3%a1rk"}, "edited": false, "score": 0, "creation_date": 1462264260, "post_id": 36993579, "comment_id": 61551596, "body": "Im not particularly using anything, i was testing out stuff, these are hard after doing python, php and javaj, thats why i asked how hard it would be to implement something like this in Rust. (because in java i could just use a global  ArrayList and place every entity there). Thanks."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1462234342, "creation_date": 1462234342, "answer_id": 36993579, "question_id": 36993255, "link": "https://stackoverflow.com/questions/36993255/detecting-new-struct-initialization/36993579#36993579", "title": "Detecting new struct initialization", "body": "<p>Your problems appear to be somewhat more fundamental than what you describe.  You're kind of throwing code at the wall to see what sticks, and that's simply not going to get you anywhere.  I'd recommend reading <a href=\"http://doc.rust-lang.org/book/\" rel=\"nofollow\">the Rust Book</a> completely before continuing.  If you don't understand something in it, ask about it.  As it stands, you're demonstrating you don't understand variable scoping, return types, how instance construction works, how statics work, and how parameters are passed.  That's a <em>really</em> shaky base to try and build any understanding on.</p>\n\n<p>In this particular case, you're asking for something that's <em>deliberately</em> not straightforward.  You say you want a counter <em>and</em> a vector of instances.  The counter is simple enough, but a vector of instances?  Rust doesn't allow easy sharing like other languages, so how you go about doing that depends <em>heavily</em> on what it is you're <em>actually</em> intending to use this for.</p>\n\n<p>What follows is a <em>very</em> rough guess at something that's <em>maybe</em> vaguely similar to what you want.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/*!\nBecause we need the `lazy_static` crate, you need to add the following to your\n`Cargo.toml` file:\n\n```cargo\n[dependencies]\nlazy_static = \"0.2.1\"\n```\n*/\n\n#[macro_use] extern crate lazy_static;\n\nmod entity {\n    use std::sync::{Arc, Weak, Mutex};\n    use std::sync::atomic;\n\n    pub struct Entity {\n        pub name: String,\n    }\n\n    impl Entity {\n        pub fn new(name: String) -&gt; Arc&lt;Self&gt; {\n            println!(\"Entity named {} was made.\", name);\n            let ent = Arc::new(Entity {\n                name: name,\n            });\n            bump_counter();\n            remember_instance(ent.clone());\n            ent\n        }\n    }\n\n    /*\n    The counter is simple enough, though I'm not clear on *why* you even want\n    it in the first place.  You don't appear to be using it for anything...\n    */\n    static COUNTER: atomic::AtomicUsize = atomic::ATOMIC_USIZE_INIT;\n\n    fn bump_counter() {\n        // Add one using the most conservative ordering.\n        COUNTER.fetch_add(1, atomic::Ordering::SeqCst);\n    }\n\n    pub fn get_counter() -&gt; usize {\n        COUNTER.load(atomic::Ordering::SeqCst)\n    }\n\n    /*\n    There are *multiple* ways of doing this part, and you simply haven't given\n    enough information on what it is you're trying to do.  This is, at best,\n    a *very* rough guess.\n\n    `Mutex` lets us safely mutate the vector from any thread, and `Weak`\n    prevents `INSTANCES` from keeping every instance alive *forever*.  I mean,\n    maybe you *want* that, but you didn't specify.\n\n    Note that I haven't written a \"cleanup\" function here to remove dead weak\n    references.\n    */\n    lazy_static! {\n        static ref INSTANCES: Mutex&lt;Vec&lt;Weak&lt;Entity&gt;&gt;&gt; = Mutex::new(vec![]);\n    }\n\n    fn remember_instance(entity: Arc&lt;Entity&gt;) {\n        // Downgrade to a weak reference.  Type constraint is just for clarity.\n        let entity: Weak&lt;Entity&gt; = Arc::downgrade(&amp;entity);\n        INSTANCES\n            // Lock mutex\n            .lock().expect(\"INSTANCES mutex was poisoned\")\n            // Push entity\n            .push(entity);\n    }\n\n    pub fn get_instances() -&gt; Vec&lt;Arc&lt;Entity&gt;&gt; {\n        /*\n        This is about as inefficient as I could write this, but again, without\n        knowing your access patterns, I can't really do any better.\n        */\n        INSTANCES\n            // Lock mutex\n            .lock().expect(\"INSTANCES mutex was poisoned\")\n            // Get a borrowing iterator from the Vec.\n            .iter()\n            /*\n            Convert each `&amp;Weak&lt;Entity&gt;` into a fresh `Arc&lt;Entity&gt;`.  If we\n            couldn't (because the weak ref is dead), just drop that element.\n            */\n            .filter_map(|weak_entity| weak_entity.upgrade())\n            // Collect into a new `Vec`.\n            .collect()\n    }\n}\n\nfn main() {\n    use entity::Entity;\n\n    let e0 = Entity::new(\"Entity 0\".to_string());\n    println!(\"e0: {}\", e0.name);\n    {\n        let e1 = Entity::new(\"Entity 1\".to_string());\n        println!(\"e1: {}\", e1.name);\n\n        /*\n        `e1` is dropped here, which should cause the underlying `Entity` to\n        stop existing, since there are no other \"strong\" references to it.\n        */\n    }\n    let e2 = Entity::new(\"Entity 2\".to_string());\n    println!(\"e2: {}\", e2.name);\n\n    println!(\"Counter: {}\", entity::get_counter());\n\n    println!(\"Instances:\");\n    for ent in entity::get_instances() {\n        println!(\"- {}\", ent.name);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 371, "user_id": 5054909, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/edVGR.png?s=128&g=1", "display_name": "Moln&#225;r M&#225;rk", "link": "https://stackoverflow.com/users/5054909/moln%c3%a1r-m%c3%a1rk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 291, "favorite_count": 0, "accepted_answer_id": 36993579, "answer_count": 1, "score": 0, "last_activity_date": 1462234904, "creation_date": 1462231965, "last_edit_date": 1462234904, "question_id": 36993255, "link": "https://stackoverflow.com/questions/36993255/detecting-new-struct-initialization", "title": "Detecting new struct initialization", "body": "<p>I'm coming from mostly OOP languages, so getting this concept to work in Rust kinda seems hard. I want to implement a basic counter that keeps count of how many \"instances\" I've made of that type, and keep them in a vector for later use.</p>\n\n<p>I've tried many different things, first was making a static vector variable, but that cant be done due to it not allowing static stuff that have destructors.</p>\n\n<p>This was my first try:</p>\n\n<pre><code>struct Entity {\n    name: String,\n}\n\nstruct EntityCounter {\n    count: i64,\n}\n\nimpl Entity {\n    pub fn init() {\n        let counter = EntityCounter { count: 0 };\n    }\n\n    pub fn new(name: String) {\n        println!(\"Entity named {} was made.\", name);\n        counter += 1; // counter variable unaccessable (is there a way to make it global to the struct (?..idek))\n    }\n}\n\nfn main() {\n    Entity::init();\n    Entity::new(\"Hello\".to_string());\n}\n</code></pre>\n\n<p>Second:</p>\n\n<pre><code>struct Entity {\n    name: String,\n    counter: i32,\n}\n\nimpl Entity {\n    pub fn new(self) {\n        println!(\"Entity named {} was made.\", self.name);\n        self.counter = self.counter + 1;\n    }\n}\n\nfn main() {\n    Entity::new(Entity { name: \"Test\".to_string() });\n}\n</code></pre>\n\n<p>None of those work, I was just trying out some concepts on how I could be able to implement such a feature.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1533656051, "last_edit_date": 1533656051, "creation_date": 1462223058, "answer_id": 36991685, "question_id": 36991399, "link": "https://stackoverflow.com/questions/36991399/iterating-over-a-vector-of-mutable-references-to-trait-objects/36991685#36991685", "title": "Iterating over a vector of mutable references to trait objects", "body": "<p>You need to have a mutable reference to each item. <code>iter</code> returns immutable references. And a immutable reference to a mutable variable is not itself mutable. Use <code>iter_mut</code> or <code>for task in &amp;mut self.tasks</code> instead.</p>\n\n<p>Then, the <em>easiest</em> thing to do is to inline <code>work_one</code> into <code>work</code>:</p>\n\n<pre><code>pub fn work(&amp;mut self) {\n    for task in self.tasks.iter_mut() {\n        task.do_it()\n    }\n}\n</code></pre>\n\n<p>Unfortunately, splitting this into two functions is quite painful. You have to guarantee that calling <code>self.work_one</code> will not modify <code>self.tasks</code>. Rust doesn't track these things across function boundaries, so you need to split out all the other member variables and pass them separately to a function.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31093841/155423\">cannot borrow `self.x` as immutable because `*self` is also borrowed as mutable</a></li>\n<li><a href=\"https://stackoverflow.com/q/42879098/155423\">Why are borrows of struct members allowed in &amp;mut self, but not of self to immutable methods?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 3192, "user_id": 9622, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/1b0616783225972991e011625600e818?s=128&d=identicon&r=PG", "display_name": "Tomo", "link": "https://stackoverflow.com/users/9622/tomo"}, "edited": false, "score": 0, "creation_date": 1462223708, "post_id": 36991699, "comment_id": 61537776, "body": "&quot;immutable reference to a mutable one&quot; Aaah, this is a piece I was missing. And regarding references to self: this means that if I would need to do any change of state of self, I need to do it withing the body of the <code>for</code> loop. Do I get it right?"}, {"owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "reply_to_user": {"reputation": 3192, "user_id": 9622, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/1b0616783225972991e011625600e818?s=128&d=identicon&r=PG", "display_name": "Tomo", "link": "https://stackoverflow.com/users/9622/tomo"}, "edited": false, "score": 0, "creation_date": 1462225465, "post_id": 36991699, "comment_id": 61538545, "body": "@Tomo Updated the answer, not really an ideal solution. Hope someone else can suggest something better."}, {"owner": {"reputation": 3192, "user_id": 9622, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/1b0616783225972991e011625600e818?s=128&d=identicon&r=PG", "display_name": "Tomo", "link": "https://stackoverflow.com/users/9622/tomo"}, "edited": false, "score": 1, "creation_date": 1462225592, "post_id": 36991699, "comment_id": 61538600, "body": "Yes, this looks ugly. :)"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 3192, "user_id": 9622, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/1b0616783225972991e011625600e818?s=128&d=identicon&r=PG", "display_name": "Tomo", "link": "https://stackoverflow.com/users/9622/tomo"}, "edited": false, "score": 0, "creation_date": 1462253624, "post_id": 36991699, "comment_id": 61546178, "body": "@Tomo Unless you&#39;re more specific about the problem, you probably can&#39;t do much better. If you lend out <code>self</code> mutably, you&#39;re giving permission for unrestricted modifications. That said, <a href=\"https://play.rust-lang.org/?gist=987c95c143faf9115e40b8dca3eea034&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">it can be made prettier than two <code>swap</code>s</a>."}, {"owner": {"reputation": 3192, "user_id": 9622, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/1b0616783225972991e011625600e818?s=128&d=identicon&r=PG", "display_name": "Tomo", "link": "https://stackoverflow.com/users/9622/tomo"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1462257876, "post_id": 36991699, "comment_id": 61548178, "body": "@Veedrac I don&#39;t know if I need to modify <code>Worker</code>&#39;s state. I asked out of curiosity. Thank you for the <code>mem::replace</code> trick, it&#39;s good to have it in my toolbox."}, {"owner": {"reputation": 186, "user_id": 5282490, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfe37313efc1a8dbb9bbee24399195b1?s=128&d=identicon&r=PG", "display_name": "mcferden", "link": "https://stackoverflow.com/users/5282490/mcferden"}, "edited": false, "score": 0, "creation_date": 1602602177, "post_id": 36991699, "comment_id": 113769061, "body": "It&#39;s been 4 years, but never the less... I was struggling with the same problem recently and my solution ended up being the <code>RefCell</code>. So, for this example it would be like this: make <code>Worker.tasks</code> a <code>RefCell&lt;Vec&lt;Task&gt;&gt;</code> and change loop to <code>for task in self.tasks.borrow_mut().iter_mut() { ... }</code>. I wonder is it a good and ideomatic solution or just an ugly hack?"}], "tags": [], "owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "is_accepted": true, "score": 20, "last_activity_date": 1515367908, "last_edit_date": 1515367908, "creation_date": 1462223115, "answer_id": 36991699, "question_id": 36991399, "link": "https://stackoverflow.com/questions/36991399/iterating-over-a-vector-of-mutable-references-to-trait-objects/36991699#36991699", "title": "Iterating over a vector of mutable references to trait objects", "body": "<p>You are calling <code>tasks.iter()</code> which produces immutable references to the elements of <code>Vec</code>. You actually get back <code>&amp;&amp;mut Task</code>, an immutable reference to a mutable one (that is why the Rust compiler is complaining).</p>\n\n<p>To solve this, call <code>tasks.iter_mut()</code> to get an iterator of mutable references.</p>\n\n<p>The second problem is calling defining <code>work_one</code> as a method. You already borrow a mutable reference from <code>self</code> when iterating, so you cannot get another borrow.</p>\n\n<p>Working example (<a href=\"https://play.rust-lang.org/?gist=1568fc5c1e31e9fc85266874fae60260&amp;version=undefined\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>trait Task {\n    fn do_it(&amp;mut self);\n}\n\nstruct Worker&lt;'a&gt; {\n    tasks: Vec&lt;&amp;'a mut Task&gt;,\n}\n\nimpl&lt;'a&gt; Worker&lt;'a&gt; {\n    pub fn work(&amp;mut self) {\n        for task in self.tasks.iter_mut() {\n            Worker::work_one(*task);\n        }\n    }\n\n    fn work_one(task: &amp;mut Task) {\n        task.do_it();\n    }\n}\n</code></pre>\n\n<p>To still have access to <code>self</code> in <code>work_one</code> this workaround can be used. This basically just swaps the two vectors so you do not actually borrow <code>self</code> when iterating and then swapping it back. This is ugly, there may be a better pattern here, maybe someone else will suggest something better.</p>\n\n<pre><code>pub fn work(&amp;mut self) {\n    let mut tasks = vec![];\n    mem::swap(&amp;mut tasks, &amp;mut self.tasks);\n    for task in tasks.iter_mut() {\n        self.work_one(*task);\n    }\n    mem::swap(&amp;mut tasks, &amp;mut self.tasks);\n}\n</code></pre>\n\n<p>A nicer alternative suggested by @Veedrac:</p>\n\n<pre><code>fn work(&amp;mut self) {\n    let mut tasks = mem::replace(&amp;mut self.tasks, Vec::new());\n    for task in &amp;mut tasks {\n        self.work_one(*task);\n    }\n    self.tasks = tasks;\n}\n</code></pre>\n"}], "owner": {"reputation": 3192, "user_id": 9622, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/1b0616783225972991e011625600e818?s=128&d=identicon&r=PG", "display_name": "Tomo", "link": "https://stackoverflow.com/users/9622/tomo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10153, "favorite_count": 3, "accepted_answer_id": 36991699, "answer_count": 2, "score": 11, "last_activity_date": 1533656051, "creation_date": 1462222047, "last_edit_date": 1515367739, "question_id": 36991399, "link": "https://stackoverflow.com/questions/36991399/iterating-over-a-vector-of-mutable-references-to-trait-objects", "title": "Iterating over a vector of mutable references to trait objects", "body": "<p>I have a <code>struct</code> that holds mutable references to trait objects:</p>\n\n<pre><code>trait Task {\n    fn do_it(&amp;mut self);\n}\n\nstruct Worker&lt;'a&gt; {\n    tasks: Vec&lt;&amp;'a mut Task&gt;,\n}\n</code></pre>\n\n<p>In a method of <code>Worker</code>, I want to iterate over the tasks and call their <code>do_it</code>:</p>\n\n<pre><code>impl&lt;'a&gt; Worker&lt;'a&gt; {\n    pub fn work(&amp;mut self) {\n        for task in self.tasks.iter() {\n            self.work_one(*task);\n        }\n    }\n\n    fn work_one(&amp;self, task: &amp;mut Task) {\n        task.do_it();\n    }\n}\n</code></pre>\n\n<p>Sadly, the borrow checker does not let me do it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0389]: cannot borrow data mutably in a `&amp;` reference\n  --&gt; src/main.rs:12:27\n   |\n12 |             self.work_one(*task);\n   |                           ^^^^^ assignment into an immutable reference\n</code></pre>\n\n<p>I cannot make <code>Worker</code> generic because I want it to hold tasks of many types. I also need tasks to be mutable. How do I do it in Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1850, "user_id": 1739271, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f17ca369fdfffba1f53e461fff5400c5?s=128&d=identicon&r=PG", "display_name": "Calder", "link": "https://stackoverflow.com/users/1739271/calder"}, "is_accepted": false, "score": 14, "last_activity_date": 1462685767, "last_edit_date": 1462685767, "creation_date": 1462211947, "answer_id": 36988666, "question_id": 36988622, "link": "https://stackoverflow.com/questions/36988622/what-does-rusts-unary-parallel-pipe-mean/36988666#36988666", "title": "What does Rust&#39;s unary || (parallel pipe) mean?", "body": "<p>It's a zero-argument lambda function.</p>\n"}, {"tags": [], "owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "is_accepted": true, "score": 31, "last_activity_date": 1462212812, "last_edit_date": 1462212812, "creation_date": 1462212036, "answer_id": 36988692, "question_id": 36988622, "link": "https://stackoverflow.com/questions/36988622/what-does-rusts-unary-parallel-pipe-mean/36988692#36988692", "title": "What does Rust&#39;s unary || (parallel pipe) mean?", "body": "<p>It is a closure with zero arguments. This is a simplified example to show the basic syntax and usage (<a href=\"https://play.rust-lang.org/?gist=11e98bb5c3bc581816469f8fbc9b215c&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">play</a>):</p>\n\n<pre><code>fn main() {\n    let c = || println!(\"c called\");\n    c();\n    c();\n}\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>c called\nc called\n</code></pre>\n\n<p>Another <a href=\"https://doc.rust-lang.org/book/closures.html\" rel=\"noreferrer\">example from the documentation</a>:</p>\n\n<pre><code>let plus_one = |x: i32| x + 1;\n\nassert_eq!(2, plus_one(1));\n</code></pre>\n"}], "owner": {"reputation": 1850, "user_id": 1739271, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f17ca369fdfffba1f53e461fff5400c5?s=128&d=identicon&r=PG", "display_name": "Calder", "link": "https://stackoverflow.com/users/1739271/calder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1914, "favorite_count": 2, "accepted_answer_id": 36988692, "answer_count": 2, "score": 19, "last_activity_date": 1499525974, "creation_date": 1462211787, "last_edit_date": 1499525974, "question_id": 36988622, "link": "https://stackoverflow.com/questions/36988622/what-does-rusts-unary-parallel-pipe-mean", "title": "What does Rust&#39;s unary || (parallel pipe) mean?", "body": "<p>In <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction/\" rel=\"noreferrer\">Non-Lexical Lifetimes: Introduction</a>, Niko includes the following snippet:</p>\n\n<pre><code>fn get_default3&lt;'m,K,V:Default&gt;(map: &amp;'m mut HashMap&lt;K,V&gt;,\n                                key: K)\n                                -&gt; &amp;'m mut V {\n    map.entry(key)\n       .or_insert_with(|| V::default())\n}\n</code></pre>\n\n<p>What does the <code>|| V::default()</code> mean here?</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1463068376, "post_id": 36988470, "comment_id": 61916306, "body": "Instead of <code>Index</code> trait, you should implement <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.nth\" rel=\"nofollow noreferrer\"><code>Iterator::nth</code></a> method."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1571684906, "last_edit_date": 1571684906, "creation_date": 1462212779, "answer_id": 36988901, "question_id": 36988470, "link": "https://stackoverflow.com/questions/36988470/how-do-you-implement-an-iterator-whose-successor-depends-on-the-index-of-the-ter/36988901#36988901", "title": "How do you implement an Iterator whose successor depends on the index of the term?", "body": "<h1>Rust 1.34</h1>\n\n<p>With <a href=\"https://doc.rust-lang.org/std/iter/fn.successors.html\" rel=\"nofollow noreferrer\"><code>iter::successors</code></a> and <a href=\"https://stackoverflow.com/q/27535289/155423\">impl trait</a>, this can be greatly simplified:</p>\n\n<pre><code>fn square_multiple(x: i64) -&gt; impl Iterator&lt;Item = i64&gt; {\n    std::iter::successors(Some(x * x), move |v| Some(v + x))\n}\n</code></pre>\n\n<h1>Previously</h1>\n\n<p>You can store whatever you want in a struct that implements <code>Iterator</code>. It seems the simplest to me to store the current value and the value to increment by.</p>\n\n<pre><code>struct SquareMultiple {\n    curr: i64,\n    inc: i64,\n}\n\nimpl Iterator for SquareMultiple {\n    type Item = i64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;i64&gt; {\n        let val = self.curr;\n        self.curr += self.inc;\n        Some(val)\n    }\n}\n\nimpl SquareMultiple {\n    fn new(x: i64) -&gt; Self {\n        SquareMultiple { curr: x * x, inc: x }\n    }\n}\n\nfn main() {\n    for i in SquareMultiple::new(5).take(10) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>It's probably worth documenting that the iterator goes forever and thus will either panic or wraparound when it exceeds 2^63.</p>\n\n<p>I like this solution because it doesn't multiply at all. For some reason, my brain thinks that adding is \"easier\" than multiplying.</p>\n\n<hr>\n\n<p>If you really need to use the index, use a <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"nofollow noreferrer\"><code>RangeFrom</code></a> and <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\"><code>map</code></a> it:</p>\n\n<pre><code>fn main() {\n    let x = 5;\n    let clever = (0..).map(|i| x * (x + i));\n    for i in clever.take(10) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>If you need a separate function and <em>maximum performance</em> (add appropriate sound effect), you can create a new type:</p>\n\n<pre><code>use std::ops::RangeFrom;\n\nstruct SquareMultiple {\n    iter: RangeFrom&lt;i64&gt;,\n    x: i64,\n}\n\nimpl SquareMultiple {\n    fn new(x: i64) -&gt; Self {\n        SquareMultiple {\n            iter: (0..),\n            x: x,\n        }\n    }\n}\n\nimpl Iterator for SquareMultiple {\n    type Item = i64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;i64&gt; {\n        self.iter.next().map(|i| self.x * (self.x + i))\n    }\n}\n\nfn main() {\n    for i in SquareMultiple::new(5).take(10) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 161, "favorite_count": 0, "accepted_answer_id": 36988901, "answer_count": 1, "score": 0, "last_activity_date": 1571684906, "creation_date": 1462211260, "last_edit_date": 1462212401, "question_id": 36988470, "link": "https://stackoverflow.com/questions/36988470/how-do-you-implement-an-iterator-whose-successor-depends-on-the-index-of-the-ter", "title": "How do you implement an Iterator whose successor depends on the index of the term?", "body": "<p>I'm trying to implement an Iterator that yields the sequence x^2, x^2+x, x^2+2x, x^2+3x... for a constant (at call time) argument x, in Rust.</p>\n\n<p>As I understand it, all I have to work with at any point in the implementation is <code>self.curr</code> and <code>self.next</code>. It seems to me that the sequence depends on the index of the item in the sequence.</p>\n\n<pre><code>struct SquareMultiple {\n    // generates the sequence j = i^2, i^2+i, i^2+2i, i^2+3i, ...,\n    curr: i64,\n    next: i64,\n}\n\n// Implement `Iterator` for `SquareMultiple`.\n// The `Iterator` trait only requires a method to be defined for the `next`\n// element.\nimpl Iterator for SquareMultiple {\n    type Item = i64;\n\n    // Here, we define the sequence using `.curr` and `.next`.\n    // The return type is `Option&lt;T&gt;`:\n    //     * When the `Iterator` is finished, `None` is returned.\n    //     * Otherwise, the next value is wrapped in `Some` and returned.\n    fn next(&amp;mut self) -&gt; Option&lt;I64&gt; {\n\n        // FIXME: What to do here?\n        let new_next = self.curr + self.next;\n\n        self.curr = self.next;\n        self.next = new_next;\n\n        // Since there's no endpoint to a SquareMultiple sequence, the\n        // `Iterator` will never return `None`, and `Some` is always returned.\n        Some(self.curr)\n    }\n}\n\n// Returns a SquareMultiple sequence generator\nfn squareseq() -&gt; SquareMultiple {\n    SquareMultiple { curr: 1, next: 2 }\n}\n</code></pre>\n\n<p>I also considered overloading the struct with a <code>index</code> attribute, but that seems somehow like an abuse of this pattern.</p>\n\n<p>What's the Rustic way to go about this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462198883, "post_id": 36984644, "comment_id": 61524088, "body": "<i>match optionMyEnum</i> \u2014 note that Rust uses <code>snake_case</code> for variable names, not <code>camelCase</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1500570650, "last_edit_date": 1500570650, "creation_date": 1462198747, "answer_id": 36984718, "question_id": 36984644, "link": "https://stackoverflow.com/questions/36984644/a-pattern-matching-against-a-constructor-of-an-enum/36984718#36984718", "title": "A pattern matching against a constructor of an enum", "body": "<p><a href=\"https://doc.rust-lang.org/stable/book/first-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a> has an entire <a href=\"https://doc.rust-lang.org/stable/book/first-edition/match.html\" rel=\"nofollow noreferrer\">section on matching</a>. I'd <strong>highly</strong> encourage you to read that section (and the entire book). A lot of time and effort has gone into that documentation.</p>\n\n<p>You simply specify a name to bind against. There's no need to write out types:</p>\n\n<pre><code>pub enum Enum {\n    A(String),\n    B(i64),\n    C(f64),\n}\n\nfn main() {\n    let val = Enum::A(\"hello\".to_string());\n\n    match val {\n        Enum::A(x) =&gt; println!(\"{}\", x),\n        _ =&gt; println!(\"other\"),\n    }\n}\n</code></pre>\n\n<p>In many cases, you will want to bind to a <em>reference</em> to the values:</p>\n\n<pre><code>Enum::A(ref x) =&gt; println!(\"{}\", x),\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 292, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1500570650, "creation_date": 1462198546, "question_id": 36984644, "link": "https://stackoverflow.com/questions/36984644/a-pattern-matching-against-a-constructor-of-an-enum", "title": "A pattern matching against a constructor of an enum", "body": "<p>I have an enum:</p>\n\n<pre><code>pub enum Enum1 {\n    A(String),\n    B(i64),\n    C(f64)\n}\n</code></pre>\n\n<p>How can I do pattern matching against A? That is, I want to get its String value. I've tried this:</p>\n\n<pre><code>match optionMyEnum {\n  Some(A(x: String)) =&gt; ...\n</code></pre>\n\n<p>and got plenty of the compile errors.</p>\n"}, {"tags": ["linux", "security", "rust", "sandbox"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 5, "creation_date": 1462195091, "post_id": 36981668, "comment_id": 61521738, "body": "If no user input is required, what stops another application just running the password manager itself and/or deriving any encryption keys in the same way as the password manager? It seems to me that the only truly reliable way to handle this is to encrypt the files using some secret that isn&#39;t (entirely) stored on the computer e.g. a password the user enters (at some point)."}], "answers": [{"tags": [], "owner": {"reputation": 51, "user_id": 4228623, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/033eea901a2eca055ba0497ee0564373?s=128&d=identicon&r=PG&f=1", "display_name": "Maciej Dziardziel", "link": "https://stackoverflow.com/users/4228623/maciej-dziardziel"}, "is_accepted": false, "score": 1, "last_activity_date": 1462363892, "last_edit_date": 1462363892, "creation_date": 1462363259, "answer_id": 37027201, "question_id": 36981668, "link": "https://stackoverflow.com/questions/36981668/what-can-i-do-to-protect-my-applications-data-from-other-applications-running-o/37027201#37027201", "title": "What can I do to protect my application&#39;s data from other applications running on the same user?", "body": "<p>The answer depends on how much control you have over the user's system. Can you configure the kernel, security policies and all software used there?</p>\n\n<p>If yes, then there are things you can do - you could use separate user account, SELinux policies and possibly other OS features to define precisely who and when can access the data.</p>\n\n<p>If no, its game over. You may do some obfuscation and use some tricks to pretend you've put some effort, but you can not solve this problem.</p>\n"}], "owner": {"reputation": 320, "user_id": 631842, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91b86dcbadd01c6eead5271c917a72fe?s=128&d=identicon&r=PG", "display_name": "vegai", "link": "https://stackoverflow.com/users/631842/vegai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1462363892, "creation_date": 1462189576, "last_edit_date": 1462192794, "question_id": 36981668, "link": "https://stackoverflow.com/questions/36981668/what-can-i-do-to-protect-my-applications-data-from-other-applications-running-o", "title": "What can I do to protect my application&#39;s data from other applications running on the same user?", "body": "<p>In a typical Linux application, every software gets the same privileges to my files as my user. This is often way more than what they need in order to do their job.</p>\n\n<p>What facilities are there for limiting this in Linux (and other Unixes and Windows)? </p>\n\n<p>Case in point, I'm writing <a href=\"https://github.com/vegai/chaos\" rel=\"nofollow\">a lightweight password hasher/manager</a> and wonder what could I do to secure the master key and database without requiring user input.</p>\n"}, {"tags": ["iterator", "rust", "mutable", "ownership", "borrowing"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462188675, "post_id": 36980829, "comment_id": 61517660, "body": "Will <code>data.objects</code> be used in <code>update</code>? Or only other fields of <code>data</code>?"}, {"owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462211550, "post_id": 36980829, "comment_id": 61531457, "body": "Yes, data.objects will be used inside update."}, {"owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "edited": false, "score": 0, "creation_date": 1462271223, "post_id": 36980829, "comment_id": 61556088, "body": "You&#39;re right, that&#39;s not good practice. Thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1462188940, "creation_date": 1462188940, "answer_id": 36981486, "question_id": 36980829, "link": "https://stackoverflow.com/questions/36980829/vec-with-interior-mutability/36981486#36981486", "title": "Vec with interior mutability", "body": "<p>You can use <code>iter_mut()</code> instead of <code>iter()</code> to get the same result as your indexer-based solution:</p>\n\n<pre><code>pub fn update(&amp;mut self) {\n    for d in self.data.objects.iter_mut() {\n        d.update(&amp;mut self.data);\n    }\n}\n</code></pre>\n\n<p>(Yes, \"same result\" means we still get \"cannot borrow <code>self.data</code> as mutable more than once at a time\".)</p>\n\n<p>There are a couple of soundness issues in your program. First, by passing a <code>&amp;mut AppData</code> to <code>Updatable::update()</code>, the implementation of <code>update()</code> could destroy <code>self</code> by removing the corresponding item from <code>objects</code>! (It doesn't matter if <code>AppData</code> doesn't actually provide a method to do that.)</p>\n\n<p>Additionally, <code>Updatable::update()</code> could invalidate the iterator in <code>App::update()</code> by adding any item to or removing any item from <code>objects</code>. Switching to an indexer-based loop only makes the problem worse, because your program might compile, but it will be buggy!</p>\n\n<p>In order to ensure that your <code>Updatable</code> remains alive for the duration of the <code>update()</code> call, you need to wrap it in some other smart pointer. For example, you could wrap it in an <a href=\"http://doc.rust-lang.org/stable/std/rc/struct.Rc.html\" rel=\"nofollow\"><code>Rc</code></a> instead of a <code>Box</code>. As <code>Rc</code> doesn't let you take a mutable borrow to its contents, you may want to combine this with <a href=\"http://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a>, like so:</p>\n\n<pre><code>struct AppData {\n    objects: Vec&lt;Rc&lt;RefCell&lt;Updatable&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>We can do the same for the whole <code>Vec</code>:</p>\n\n<pre><code>struct AppData {\n    objects: Rc&lt;RefCell&lt;Vec&lt;Rc&lt;RefCell&lt;Updatable&gt;&gt;&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>However, that comes with a restriction: while you're iterating on <code>objects</code> in <code>App::update()</code>, you will not be able to mutate <code>objects</code> from implementations of <code>Updatable::update()</code>. If you try to do so, your program will panic, because you can't have more than one active mutable borrow on the same <code>RefCell</code>.</p>\n\n<p>If you need to be able to mutate <code>objects</code> from implementations of <code>Updatable::update()</code>, then you probably want <code>App::update()</code> to iterate on whatever <code>objects</code> contained when you start the loop. The simple solution to this is to <a href=\"http://doc.rust-lang.org/stable/std/clone/trait.Clone.html#tymethod.clone\" rel=\"nofollow\"><code>clone</code></a> the <code>Vec</code> just before the loop (we don't need <code>Rc&lt;RefCell&lt;Vec&lt;...&gt;&gt;&gt;</code> for this).</p>\n\n<p>However, cloning a <code>Vec</code> every time (even when not necessary) might be expensive, so you may want to avoid doing so when it's not needed. Instead of cloning the <code>Vec</code> systematically, we can wrap the <code>Vec</code> in an <code>Rc</code> (but no <code>RefCell</code> this time!), then clone the <code>Rc</code> before borrowing the vector in <code>App::update()</code>. In <code>AppData</code>, methods that want to mutate <code>objects</code> would use <a href=\"http://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.make_mut\" rel=\"nofollow\"><code>Rc::make_mut</code></a> to clone the <code>Vec</code> (if necessary!) and obtain a mutable reference. If the mutation occurs while <code>App::update()</code> is active, this will clone the <code>Vec</code>, which leaves the original <code>Vec</code> alone so the iteration can continue. However, if there are no actives clones of the <code>Rc</code>, then this will not do a clone, it'll just give you a mutable reference to the <code>Vec</code>, because it's safe to do so.</p>\n"}, {"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 2, "last_activity_date": 1462188953, "creation_date": 1462188953, "answer_id": 36981490, "question_id": 36980829, "link": "https://stackoverflow.com/questions/36980829/vec-with-interior-mutability/36981490#36981490", "title": "Vec with interior mutability", "body": "<p><code>Box&lt;T&gt;</code> is <em>not</em> intrinsically immutable. It plays by the same rules of inherited mutability as most other types. Your problem is a combination of different issues. First, <code>.iter()</code> gives an iterator over (immutable) references. So even if you didn't need to borrow <code>self.data</code> mutably while iterating over it, you'll get an error for that. If you want to iterate over mutable references, just do <code>for d in &amp;mut self.data.objects { ... }</code> instead of the indexing dance.</p>\n\n<p>Second, as you noticed, there is an issue with borrowing <code>self.data</code> while iterating over it. <strong>This is a potential issue in your design.</strong> For example, what should happen if <code>update</code> removes an object from the <code>objects</code> vector?</p>\n\n<p>There is no easy one-size-fits-all solution to this. Maybe <code>RefCell&lt;Box&lt;Trait&gt;&gt;</code> will help, maybe it would be terrible design. Maybe <code>update</code> doesn't need the <code>objects</code> part of <code>self.data</code> and you can swap it out while iterating, which would prevent mutable aliasing. Maybe it's best to scrap the trait and pursue a wholly different design (it looks like you're trying to apply textbook OOP design which in my experience rarely works well in Rust).</p>\n"}], "owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 672, "favorite_count": 0, "accepted_answer_id": 36981486, "answer_count": 2, "score": 0, "last_activity_date": 1462271199, "creation_date": 1462186787, "last_edit_date": 1462271199, "question_id": 36980829, "link": "https://stackoverflow.com/questions/36980829/vec-with-interior-mutability", "title": "Vec with interior mutability", "body": "<p>I have a struct <code>AppData</code> with contains a <code>Vec&lt;Box&lt;Updatable&gt;&gt;</code> called <code>objects</code>, which contains structs that implement a trait <code>Updatable</code> with the following function:</p>\n\n<pre><code>fn update(&amp;mut self, data: &amp;mut AppData) {  \n    //default implementation accesses and mutates AppData, including the internal `objects` Vec and possibly also objects inside it\n}\n</code></pre>\n\n<p>The <code>AppData</code> struct is stored in a field <code>data</code> in a struct <code>App</code> with the following function:</p>\n\n<pre><code>pub fn update(&amp;mut self) {\n\n    for d in self.data.objects.iter(){\n        d.update(&amp;mut self.data);\n    }\n\n}\n</code></pre>\n\n<p>I cannot do this beacuse <code>Box&lt;T&gt;</code> is immutable. So I tried using indexers instead:</p>\n\n<pre><code>for i in 0..self.data.objects.len() {\n    let ref mut d = self.data.objects[i];\n    d.update(&amp;mut self.data);\n}\n</code></pre>\n\n<p>But then I get </p>\n\n<blockquote>\n  <p>cannot borrow <code>self.data</code> as mutable more than once at a time</p>\n</blockquote>\n\n<p>So what do I do? I could probably get it to compile using combinations of <code>RefCell</code> etc but I'm not sure it would be idiomatic Rust. A few alternatives:</p>\n\n<ul>\n<li>Cloning the <code>Vec</code> and iterating over the clone instead. But I ran into trouble because <code>Updateable</code> does not implement <code>Sized</code>.</li>\n<li>Using <code>RefCell</code> instead of <code>Box</code>. I'm not sure I should need it since I'm not storing the references to the <code>Vec</code> inside the <code>Updatables</code> but that might not make a difference? I suppose <code>RefCell</code> is supposed to be used over <code>Rc</code> in this scenario because I want mutable references? Also this does not solve my problem because I still need to take ownership of <code>self.data</code> somehow, right?</li>\n<li>Taking ownership of <code>self.data</code> after deconstructing <code>self</code> and then placing it back into self after we are done with it. How do I do that?</li>\n</ul>\n\n<p>Thanks in advance!</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1462134733, "last_edit_date": 1495542236, "creation_date": 1462134733, "answer_id": 36971610, "question_id": 36971516, "link": "https://stackoverflow.com/questions/36971516/how-can-i-convert-a-collection-of-values-into-a-hashmap-that-counts-them/36971610#36971610", "title": "How can I convert a collection of values into a HashMap that counts them?", "body": "<p>It's dubious if it's more <em>elegant</em>, but <a href=\"https://stackoverflow.com/q/31884309/155423\"><code>fold</code>ing using a <code>HashMap</code></a> requires fewer lines: </p>\n\n<pre><code>fn into_character_map(word: &amp;str) -&gt; HashMap&lt;char, i32&gt; {\n    word.chars().fold(HashMap::new(), |mut acc, c| {\n        *acc.entry(c).or_insert(0) += 1;\n        acc\n    })\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 1, "last_activity_date": 1462189558, "creation_date": 1462189558, "answer_id": 36981665, "question_id": 36971516, "link": "https://stackoverflow.com/questions/36971516/how-can-i-convert-a-collection-of-values-into-a-hashmap-that-counts-them/36981665#36981665", "title": "How can I convert a collection of values into a HashMap that counts them?", "body": "<p>If you need to count others type of items, you can create a <code>Counter</code> struct</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::hash::Hash;\nuse std::iter::FromIterator;\n\n#[derive(Debug)]\npub struct Counter&lt;K: Hash + Eq&gt; {\n    map: HashMap&lt;K, usize&gt;\n}\n\nimpl&lt;K: Hash + Eq&gt; Counter&lt;K&gt; {\n    pub fn new() -&gt; Self {\n        Counter { map: HashMap::new() }\n    }\n\n    pub fn get(&amp;self, key: &amp;K) -&gt; usize {\n        if let Some(v) = self.map.get(key) {\n            *v\n        } else {\n            0\n        }\n    }\n\n    pub fn get_mut(&amp;mut self, key: K) -&gt; &amp;mut usize {\n        &amp;mut *self.map.entry(key).or_insert(0)\n    }\n\n    pub fn inc(mut self, key: K) -&gt; Self {\n        *self.get_mut(key) += 1;\n        self\n    }\n}\n\nimpl&lt;K: Hash + Eq&gt; FromIterator&lt;K&gt; for Counter&lt;K&gt; {\n    fn from_iter&lt;T&gt;(iterator: T) -&gt; Self where T: IntoIterator&lt;Item=K&gt; {\n        iterator.into_iter().fold(Counter::new(), Counter::inc)\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", Counter::from_iter(\"test\".chars()));\n    println!(\"{:?}\", Counter::from_iter(vec![3, 3, 2, 3].into_iter()));\n}\n</code></pre>\n\n<p>Output</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Counter { map: {'e': 1, 't': 2, 's': 1} }\nCounter { map: {2: 1, 3: 3} }\n</code></pre>\n"}], "owner": {"reputation": 1950, "user_id": 1596, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/de3d061e75418152dc92e1f1c030d3d9?s=128&d=identicon&r=PG", "display_name": "Hershi", "link": "https://stackoverflow.com/users/1596/hershi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1999, "favorite_count": 0, "accepted_answer_id": 36971610, "answer_count": 2, "score": 5, "last_activity_date": 1462189558, "creation_date": 1462134159, "last_edit_date": 1462134254, "question_id": 36971516, "link": "https://stackoverflow.com/questions/36971516/how-can-i-convert-a-collection-of-values-into-a-hashmap-that-counts-them", "title": "How can I convert a collection of values into a HashMap that counts them?", "body": "<p>I have a collection of items, with repetitions, and I want to create a <code>HashMap</code> that has the items as keys, and the count of how many times they appear in the original collection.</p>\n\n<p>The specific example I'm working on is a string where I want to count how many times each character appears.</p>\n\n<p>I can do something like this:</p>\n\n<pre><code>fn into_character_map(word: &amp;str) -&gt; HashMap&lt;char, i32&gt; {\n    let mut characters = HashMap::new();\n\n    for c in word.chars() {\n        let entry = characters.entry(c).or_insert(0);\n        *entry += 1;\n    }\n\n    characters\n}\n</code></pre>\n\n<p>But I was wondering if there's a more elegant solution. I was thinking of using <code>collect()</code>, but it doesn't maintain state between items, so doesn't seem to support what I need.</p>\n\n<p>This came up as I was writing my solution to the <a href=\"http://exercism.io/languages/rust\" rel=\"noreferrer\">'Anagram' problem on Exercism</a>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1793, "user_id": 2060563, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/RRUKt.jpg?s=128&g=1", "display_name": "almendar", "link": "https://stackoverflow.com/users/2060563/almendar"}, "edited": false, "score": 0, "creation_date": 1462116461, "post_id": 36968062, "comment_id": 61492320, "body": "I didn&#39;t know about <code>str::to_lowercase</code>, it looks similar to how it is done in Java. Thx for that! I was thinking that it would be nice to have it work that way!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1462115121, "last_edit_date": 1462115121, "creation_date": 1462114703, "answer_id": 36968062, "question_id": 36967681, "link": "https://stackoverflow.com/questions/36967681/lifetime-of-variable-in-map-flat-map-in-rust/36968062#36968062", "title": "Lifetime of variable in map/flat_map in Rust", "body": "<p>It's helpful to review the entire error message:</p>\n\n<pre><code>error: `x` does not live long enough\nnote: reference must be valid for the method call at ...\nnote: ...but borrowed value is only valid for the scope\n      of parameters for function at ...\n</code></pre>\n\n<p>When <code>flat_map</code> is called, you <strong>pass ownership</strong> of the <code>String</code> to the closure. However, the closure tries to return an iterator that contains references to the <code>String</code>. Since each <code>String</code> will be deallocated after the closure call ends, the reference into it would be invalid, so the compiler prevents you from doing this.</p>\n\n<p>I'd probably use the <code>for</code>-loop variant or a similar version:</p>\n\n<pre><code>fn split_to_words(content: &amp;str) -&gt; Vec&lt;String&gt; {\n    let lines = content.lines()\n           .filter(|x| !x.is_empty())\n           .map(|x| x.to_lowercase());\n\n    let mut result = Vec::new();\n\n    for line in lines {\n        for word in line.split_whitespace() {\n            result.push(word.to_string());\n        }\n    }\n\n    result\n}\n\nfn main() -&gt; () {\n    println!(\"{:?}\", split_to_words(\"hello world\"));\n}\n</code></pre>\n\n<p>In <em>this</em> particular case though, I think you could write it as:</p>\n\n<pre><code>fn split_to_words(content: &amp;str) -&gt; Vec&lt;String&gt; {\n    content.split_whitespace().map(str::to_lowercase).collect()\n}\n</code></pre>\n\n<p>Newlines <strong>are</strong> whitespace, so there's no need to use <code>lines</code>. This also removes the possibility of blank values.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1462114752, "creation_date": 1462114752, "answer_id": 36968076, "question_id": 36967681, "link": "https://stackoverflow.com/questions/36967681/lifetime-of-variable-in-map-flat-map-in-rust/36968076#36968076", "title": "Lifetime of variable in map/flat_map in Rust", "body": "<p>Your iterator-style code isn't exactly the same as your imperative-style code: in the imperative code, you do <code>split_whitespace</code> before <code>to_lowercase</code>, whereas in the iterator code, you do the opposite. It turns out that doing <code>split_whitespace</code> before is more efficient, since <code>split_whitespace</code> doesn't need to allocate <code>Strings</code>; it only returns slices into the given string slice. On the other hand, <code>to_lowercase</code> needs to allocate a new string, so by doing it last, we can save an allocation.</p>\n\n<pre><code>let acc: Vec&lt;String&gt; = content.lines()\n      .filter(|x| !x.is_empty())\n      .flat_map(|x| x.split_whitespace())\n      .map(|x| x.to_lowercase())\n      .collect();\n</code></pre>\n"}], "owner": {"reputation": 1793, "user_id": 2060563, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/RRUKt.jpg?s=128&g=1", "display_name": "almendar", "link": "https://stackoverflow.com/users/2060563/almendar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1149, "favorite_count": 0, "accepted_answer_id": 36968076, "answer_count": 2, "score": 1, "last_activity_date": 1462115440, "creation_date": 1462112528, "last_edit_date": 1462115440, "question_id": 36967681, "link": "https://stackoverflow.com/questions/36967681/lifetime-of-variable-in-map-flat-map-in-rust", "title": "Lifetime of variable in map/flat_map in Rust", "body": "<p>I think I have a good understanding of lifetimes, but what I've read doesn't tick with what the compiler says when it comes to closures ;)</p>\n\n<p>I have a function with the signature:</p>\n\n<pre><code>fn split_to_words(content: &amp;str) -&gt; Vec&lt;String&gt;\n</code></pre>\n\n<p>With <code>for</code> loops it looks like this:</p>\n\n<pre><code>let mut acc: Vec&lt;String&gt; = Vec::new();\nfor line in content.lines() {\n    if line.is_empty() { continue };\n    for word in line.split_whitespace() {\n        acc.push(word.to_lowercase());\n    }\n}\n</code></pre>\n\n<p>and using iterators:</p>\n\n<pre><code>let acc: Vec&lt;String&gt; = content.lines()\n      .filter(|x| !x.is_empty())\n      .map(|x| x.to_lowercase())\n      .flat_map(|x: String| x.split_whitespace())\n      .map(|x| x.to_string())\n      .collect();\n</code></pre>\n\n<p>but I end up with an error:</p>\n\n<pre><code>error: `x` does not live long enough\n\n.flat_map(|x: String| x.split_whitespace())\n                      ^\n</code></pre>\n"}, {"tags": ["gtk", "rust"], "comments": [{"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 2, "creation_date": 1462082043, "post_id": 36963495, "comment_id": 61483443, "body": "You can embed it using <a href=\"https://developer.gnome.org/gio/unstable/GResource.html\" rel=\"nofollow noreferrer\">GResource</a> and <code>new_from_resource()</code>, assuming Rust can compile C files with compiler constructor directives side-by-side (or if there is a Rust version of the resource compiler). Or you can find another way to embed the binary in and use <code>new_from_string()</code>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1462082079, "post_id": 36963495, "comment_id": 61483448, "body": "@andlabs, but can I load it statically? maybe as a string?"}, {"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1462082129, "post_id": 36963495, "comment_id": 61483460, "body": "That&#39;s what I&#39;m referring to; yes. GResources would be compiled directly into your program just like all the other object files, and <code>new_from_string()</code> loads it from... a string =P"}, {"owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1462082156, "post_id": 36963495, "comment_id": 61483462, "body": "@andlabs, thx, I&#39;ll check that out."}], "answers": [{"comments": [{"owner": {"reputation": 1870, "user_id": 1062441, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ca04455902d1b207348b6d406432718f?s=128&d=identicon&r=PG", "display_name": "Russel Winder", "link": "https://stackoverflow.com/users/1062441/russel-winder"}, "edited": false, "score": 0, "creation_date": 1504348697, "post_id": 36963578, "comment_id": 78985813, "body": "Has anyone got a &quot;how to&quot; for doing this with Rust?"}], "tags": [], "owner": {"reputation": 308, "user_id": 1191059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a5a797e2a8ad5c984735cd789a9ee8bd?s=128&d=identicon&r=PG", "display_name": "Blake", "link": "https://stackoverflow.com/users/1191059/blake"}, "is_accepted": false, "score": 3, "last_activity_date": 1462082382, "creation_date": 1462082382, "answer_id": 36963578, "question_id": 36963495, "link": "https://stackoverflow.com/questions/36963495/new-from-file-in-gtk-do-i-always-need-that-glade-file-can-i-embed-it-or/36963578#36963578", "title": "new_from_file() in GTK -- do I always need that &quot;glade&quot; file? Can I embed it or something?", "body": "<p>I'm pretty sure what you're looking for is <a href=\"https://developer.gnome.org/gio/stable/GResource.html\" rel=\"nofollow\">GResource</a> which is part of GIO. You have to construct an XML file as explained in the description of the object, and then compile it using <a href=\"https://developer.gnome.org/gio/stable/glib-compile-resources.html\" rel=\"nofollow\">glib-compile-resources</a>. <a href=\"https://developer.gnome.org/gtk3/stable/ch01s04.html\" rel=\"nofollow\">Here</a> is another page which calls out something like a typical workflow for GResource use. A similar stack overflow question was also asked and answered <a href=\"https://stackoverflow.com/questions/28855850/gtk-c-and-gtkbuilder-to-make-a-single-executable\">here</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 308, "user_id": 1191059, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a5a797e2a8ad5c984735cd789a9ee8bd?s=128&d=identicon&r=PG", "display_name": "Blake", "link": "https://stackoverflow.com/users/1191059/blake"}, "edited": false, "score": 0, "creation_date": 1462114526, "post_id": 36963736, "comment_id": 61491647, "body": "I like this approach better than mine, because there are fewer steps of indirection. The one feature GResource has that I don&#39;t see in include_str is built in compression and minification. So if executable size is an important factor it might be worth considering."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1462084482, "last_edit_date": 1462084482, "creation_date": 1462083812, "answer_id": 36963736, "question_id": 36963495, "link": "https://stackoverflow.com/questions/36963495/new-from-file-in-gtk-do-i-always-need-that-glade-file-can-i-embed-it-or/36963736#36963736", "title": "new_from_file() in GTK -- do I always need that &quot;glade&quot; file? Can I embed it or something?", "body": "<p>The Rust standard library provides the <a href=\"http://doc.rust-lang.org/stable/std/macro.include_str!.html\" rel=\"noreferrer\"><code>include_str!</code></a> macro, which lets you include the contents of a file into your program as a static string (<code>&amp;'static str</code>), which you can then assign to a global constant.</p>\n\n<pre><code>const MAIN_WINDOW: &amp;'static str = include_str!(\"main_window.glade\");\n</code></pre>\n\n<p>Then, you can use <a href=\"http://gtk-rs.org/docs/gtk/struct.Builder.html#method.new_from_string\" rel=\"noreferrer\"><code>Builder::new_from_string</code></a> to build the UI with that string:</p>\n\n<pre><code>let builder = Builder::new_from_string(MAIN_WINDOW);\n</code></pre>\n\n<p>If you would only use the constant once, then you can just use <code>include_str!</code> directly:</p>\n\n<pre><code>let builder = Builder::new_from_string(include_str!(\"main_window.glade\"));\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 529, "favorite_count": 0, "accepted_answer_id": 36963736, "answer_count": 2, "score": 3, "last_activity_date": 1462113966, "creation_date": 1462081665, "last_edit_date": 1462113966, "question_id": 36963495, "link": "https://stackoverflow.com/questions/36963495/new-from-file-in-gtk-do-i-always-need-that-glade-file-can-i-embed-it-or", "title": "new_from_file() in GTK -- do I always need that &quot;glade&quot; file? Can I embed it or something?", "body": "<p>In my Rust GTK app I have this, however, I think it goes for C++ as well:</p>\n\n<pre><code>let builder = Builder::new_from_file(\"main_window.glade\");\n</code></pre>\n\n<p>When I compile my app in the release mode or maybe even in debug, I want to get rid of the necessity to distribute the executable file with the file \"main_window.glade\". </p>\n\n<p>How I do link or embed the glade file into the executable statically?</p>\n"}, {"tags": ["gtk", "rust"], "comments": [{"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 2, "creation_date": 1462080115, "post_id": 36962209, "comment_id": 61483133, "body": "When in doubt, refer to <a href=\"https://developer.gnome.org/gtk3/stable/\" rel=\"nofollow noreferrer\">the original GTK+ documentation</a>. You set your window&#39;s child to a GtkBox or GtkGrid and put a GtkMenuBar at the top. You can build this in glade too, and GtkAction/GtkUIManager for shortcuts. There&#39;s also the new GMenu/GAction system which allows you to define your menu layout in a .ui file and provide the menu options to other facilities like keyboard shortcuts and dbus just as seamlessly. The choice is yours."}, {"owner": {"reputation": 1444, "user_id": 6062567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6e87060f0ce67ed68a097ac5186027c5?s=128&d=identicon&r=PG&f=1", "display_name": "oldtechaa", "link": "https://stackoverflow.com/users/6062567/oldtechaa"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1462106080, "post_id": 36962209, "comment_id": 61488997, "body": "@andlabs is definitely correct that the original documentation is the best place to go. The binding, if it exposes the original API clearly enough, should just make you able to follow the C API, seeing as bindings are going to tend to have lower-quality docs. The only time you should have to look at the binding docs are when it exposes something slightly differently or when you&#39;re still learning the basics of the binding."}], "owner": {"user_type": "does_not_exist", "display_name": "user266003"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 321, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1525335198, "creation_date": 1462067583, "question_id": 36962209, "link": "https://stackoverflow.com/questions/36962209/adding-menu-to-a-window-in-gtk", "title": "Adding Menu to a Window in GTK", "body": "<p>I want to add menu to the top of a window in gtk, a normal menu with File, View, Help, etc. In the gtk documentation at <a href=\"http://gtk-rs.org/docs/gtk/\" rel=\"nofollow\">http://gtk-rs.org/docs/gtk/</a> there's no example of how to use Menu or MenuShell. How can I do that? </p>\n"}, {"tags": ["c", "linux", "rust", "mmap", "drm"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1462061243, "post_id": 36960747, "comment_id": 61480177, "body": "Can you add the values that are actually passed to <code>mmap</code> in each case? Potentially also add the <code>strace</code> output of each <code>mmap</code> call, just to see how different they are?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462062491, "post_id": 36960747, "comment_id": 61480368, "body": "I&#39;m also surprised that you aren&#39;t getting errors when opening the file. Rust strings aren&#39;t NUL-terminated, so <code>libc::open(pathname.as_ptr()</code> is a footgun waiting to happen. I&#39;d recommend using something like <a href=\"http://doc.rust-lang.org/std/os/unix/io/trait.AsRawFd.html\" rel=\"nofollow noreferrer\"><code>AsRawFd</code></a> on a <code>File</code>. You are also probably interested in <a href=\"http://doc.rust-lang.org/std/ffi/struct.CStr.html\" rel=\"nofollow noreferrer\"><code>CStr</code></a> (and <code>CString</code>)."}, {"owner": {"reputation": 93, "user_id": 6276211, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2a403a2376310a21adb23fc76b29e902?s=128&d=identicon&r=PG&f=1", "display_name": "Karamazov", "link": "https://stackoverflow.com/users/6276211/karamazov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462097346, "post_id": 36960747, "comment_id": 61486623, "body": "Using <code>fs::File</code> is certainly better for the actual lib, but in my example here, I wanted to stay as close as possible to the C counterpart, to narrow the possible differences. As for <code>strace</code>, it did the trick. More info in my answer below."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462114948, "post_id": 36965472, "comment_id": 61491807, "body": "That&#39;s great! When you get a working solution but one that&#39;s still small, you may want to post over on <a href=\"http://codereview.stackexchange.com/questions/tagged/rust\">Code Review</a> as there&#39;s some less-idiomatic Rust code that could be cleaned up ;-)."}, {"owner": {"reputation": 93, "user_id": 6276211, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2a403a2376310a21adb23fc76b29e902?s=128&d=identicon&r=PG&f=1", "display_name": "Karamazov", "link": "https://stackoverflow.com/users/6276211/karamazov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462137809, "post_id": 36965472, "comment_id": 61499837, "body": "Thanks for your suggestion. I\u2019ll keep it in mind, but the complete code is already 1400 lines long, so I guess it doesn\u2019t qualify as \u201cstill small\u201d anymore\u2026"}], "tags": [], "owner": {"reputation": 93, "user_id": 6276211, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2a403a2376310a21adb23fc76b29e902?s=128&d=identicon&r=PG&f=1", "display_name": "Karamazov", "link": "https://stackoverflow.com/users/6276211/karamazov"}, "is_accepted": true, "score": 2, "last_activity_date": 1462097621, "creation_date": 1462097621, "answer_id": 36965472, "question_id": 36960747, "link": "https://stackoverflow.com/questions/36960747/calling-mmap-on-dumbbuffer-with-linux-direct-rendering-manager-in-rust-fails-wh/36965472#36965472", "title": "Calling mmap on dumbbuffer with Linux\u2019 Direct Rendering Manager in Rust fails while working in C", "body": "<p>So I used <code>strace</code> as recommended by Shepmaster, and found the problem: the <code>offset</code> field of the <code>CMapDumb</code> structure should have been a <code>u64</code> instead of an <code>u32</code> (I have been too quick copying from the C original). The actual offset returned by the <code>DRM_IOCTL_MODE_MAP_DUMB</code> IOCTL is 33 bits long, and I was losing the most significant one. It now works fine.</p>\n"}], "owner": {"reputation": 93, "user_id": 6276211, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2a403a2376310a21adb23fc76b29e902?s=128&d=identicon&r=PG&f=1", "display_name": "Karamazov", "link": "https://stackoverflow.com/users/6276211/karamazov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 971, "favorite_count": 1, "accepted_answer_id": 36965472, "answer_count": 1, "score": 6, "last_activity_date": 1462097621, "creation_date": 1462053759, "last_edit_date": 1495542704, "question_id": 36960747, "link": "https://stackoverflow.com/questions/36960747/calling-mmap-on-dumbbuffer-with-linux-direct-rendering-manager-in-rust-fails-wh", "title": "Calling mmap on dumbbuffer with Linux\u2019 Direct Rendering Manager in Rust fails while working in C", "body": "<p>For some time, I have been playing with Linux' <a href=\"https://en.wikipedia.org/wiki/Direct_Rendering_Manager\" rel=\"nofollow noreferrer\">Direct Rendering Manager</a>, which allows one to do some very very low level graphics management. This is usually done in C, with help of <a href=\"https://github.com/freedreno/libdrm\" rel=\"nofollow noreferrer\">libdrm</a>, or directly using the <a href=\"https://github.com/freedreno/libdrm/tree/master/include/drm\" rel=\"nofollow noreferrer\">DRM headers</a>.</p>\n\n<p>I\u2019m trying to create an equivalent to libdrm in Rust, that wouldn\u2019t be just a binding to the C library but would directly use the syscalls. This is not an easy task, given that there is almost no documentation for DRM out there, but I'm following <a href=\"https://github.com/dvdhrm/docs/blob/master/drm-howto/modeset.c\" rel=\"nofollow noreferrer\">this example in C</a> to get hints on where to start.</p>\n\n<p>I've now arrived at the point where I\u2019m supposed to create a dumb buffer and map it in memory, so I can modify pixel per pixel what appears on screen. For that, I have to use <code>mmap</code>, but I get a really weird error.</p>\n\n<p>Here is a minimal working code in C:</p>\n\n<pre><code>#include &lt;errno.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;drm/drm.h&gt;\n#include &lt;drm/drm_mode.h&gt;\n#include &lt;sys/ioctl.h&gt;\n#include &lt;sys/mman.h&gt;\n\nint main()  {\n\n    // STEP 1: GET ACCESS TO\u00a0DRM\n\n    int fd = open(\"/dev/dri/card0\", O_RDWR | O_CLOEXEC);\n    if (fd &lt; 0) {\n        printf(\"Error in function open(): %s\\n\", strerror(errno));\n        return 1;\n    }\n\n    // STEP 2: CREATE DUMBBUFFER\n\n    struct drm_mode_create_dumb dreq;\n    dreq.height = 1080,\n    dreq.width  = 1920,\n    dreq.bpp    = 32,\n    dreq.flags  = 0,\n    dreq.handle = 0,\n    dreq.pitch  = 0,\n    dreq.size   = 0;\n    int ret = ioctl(fd, DRM_IOCTL_MODE_CREATE_DUMB, &amp;dreq);\n    if (ret == -1)  {\n        printf(\"Call to DRM_IOCTL_MODE_CREATE_DUMB failed: %s\\n\",\n            strerror(errno));\n        return 1;\n    }\n\n    // STEP 3: ADD FRAMEBUFFER\n\n    struct drm_mode_fb_cmd creq;\n    creq.fb_id  = 0;\n    creq.width  = dreq.width;\n    creq.height = dreq.height;\n    creq.pitch  = dreq.pitch;\n    creq.bpp    = dreq.bpp;\n    creq.depth  = 24;\n    creq.handle = dreq.handle;\n    ret = ioctl(fd, DRM_IOCTL_MODE_ADDFB, &amp;creq);\n    if (ret == -1)  {\n        printf(\"Call to DRM_IOCTL_MODE_ADDFB failed: %s\\n\", strerror(errno));\n        return 1;\n    }\n\n    // STEP 4: PREPARE FOR\u00a0MAPPING\n\n    struct drm_mode_map_dumb mreq;\n    mreq.handle = dreq.handle;\n    mreq.pad    = 0;\n    mreq.offset = 0;\n    ret = ioctl(fd, DRM_IOCTL_MODE_MAP_DUMB, &amp;mreq);\n    if (ret == -1)  {\n        printf(\"Call to DRM_IOCTL_MODE_MAP_DUMB failed: %s\\n\", strerror(errno));\n        return 1;\n    }\n\n    // STEP 5: MAPPING\u00a0PROPER\n\n    void *map = mmap(0, dreq.size, PROT_READ | PROT_WRITE, MAP_SHARED, \n        fd, mreq.offset);\n    if (map == MAP_FAILED)  {\n        printf(\"Error in function mmap(): %s\\n\", strerror(errno));\n        return 1;\n    } else {\n        printf(\"Address of mapped data: 0x%x\\n\", map);\n    }\n\n    return 0;\n}\n</code></pre>\n\n<p>This is the exact same code in Rust. Of course, my real code has much more things in it, but this minimal one is enough to get the error:</p>\n\n<pre><code>#![feature(libc)]\n\nextern crate libc;\nuse self::libc::{c_char, c_int, c_ulong, c_void, off_t, size_t};\n\nextern {\n    pub fn ioctl(fd : c_int, request : c_ulong, arg : *mut c_void) -&gt; c_int;\n}\n\nfn errno() -&gt; c_int {\n    unsafe { *libc::__errno_location() }\n}\n\nfn get_c_error() -&gt; String  {\n    unsafe {\n        let strerr = libc::strerror(errno()) as *mut u8;\n        let length = libc::strlen(strerr as *const c_char) as usize;\n\n        let mut string = String::with_capacity(length);\n\n        for i in 0..length   {\n            let car = *strerr.offset(i as isize) as char;\n            if car == (0 as char)   { break; }\n            string.push(car);\n        }\n\n        string\n    }\n}\n\n#[repr(C)]\nstruct CCreateDumb  {\n    height : u32,\n    width  : u32,\n    bpp    : u32,\n    _flags : u32,\n    handle : u32,\n    pitch  : u32,\n    size   : u64,\n}\n\n#[repr(C)]\nstruct CFrameBuffer {\n    _fb_id  : u32,\n    _width  : u32,\n    _height : u32,\n    _pitch  : u32,\n    _bpp    : u32,\n    _depth  : u32,\n    _handle : u32,\n}\n\n#[repr(C)]\nstruct CMapDumb {\n    _handle : u32,\n    _pad    : u32,\n    offset  : u32,\n}\n\nfn main()   {\n\n    // STEP 1: GET ACCESS TO\u00a0DRM\n\n    let pathname = \"/dev/dri/card0\".to_string();\n    let fd : c_int = unsafe {\n        libc::open(pathname.as_ptr() as *const c_char,\n                    libc::O_RDWR | libc::O_CLOEXEC)\n    };\n    if fd &lt; 0 {\n       panic!(\"Error in call of C function open(): {}\", get_c_error());\n    }\n\n    // STEP 2: CREATE DUMBBUFFER\n\n    let mut dreq = CCreateDumb {\n        height : 1080,\n        width  : 1920,\n        bpp    : 32,\n        _flags : 0,\n        handle : 0,\n        pitch  : 0,\n        size   : 0,\n    };\n    // NB\u202f: 0xc02064b2 = DRM_IOCTL_MODE_CREATE_DUMB\n    let mut ret = unsafe { \n        ioctl(fd, 0xc02064b2 as c_ulong, &amp;mut dreq as *mut _ as *mut c_void)\n    };\n    if ret == -1    {\n        panic!(\"Call to DRM_IOCTL_MODE_CREATE_DUMB failed: {}\", get_c_error());\n    }\n\n    // STEP 3: ADD FRAMEBUFFER\n\n    let mut creq = CFrameBuffer {\n        _fb_id  : 0,\n        _width  : dreq.width,\n        _height : dreq.height,\n        _pitch  : dreq.pitch,\n        _bpp    : dreq.bpp,\n        _depth  : 24,\n        _handle : dreq.handle,\n    };\n    // NB\u202f: 0xc01c64ae = DRM_IOCTL_MODE_ADDFB\n    ret = unsafe { \n        ioctl(fd, 0xc01c64ae as c_ulong, &amp;mut creq as *mut _ as *mut c_void)\n    };\n    if ret == -1    {\n        panic!(\"Call to DRM_IOCTL_MODE_ADDFB failed: {}\", get_c_error());\n    }\n\n    // STEP 4: PREPARE FOR\u00a0MAPPING\n\n    let mut mreq = CMapDumb {\n        _handle : dreq.handle,\n        _pad    : 0,\n        offset  : 0,\n    };\n    // NB\u202f: 0xc01064b3 = DRM_IOCTL_MODE_MAP_DUMB\n    ret = unsafe { \n        ioctl(fd, 0xc01064b3 as c_ulong, &amp;mut mreq as *mut _ as *mut c_void)\n    };\n    if ret == -1    {\n        panic!(\"Call to DRM_IOCTL_MODE_MAP_DUMB failed: {}\", get_c_error());\n    }\n\n    // STEP 5: MAPPING\u00a0PROPER\n\n    let map = unsafe { \n        libc::mmap(\n            0 as *mut c_void,\n            dreq.size as size_t,\n            libc::PROT_READ | libc::PROT_WRITE,\n            libc::MAP_SHARED,\n            fd,\n            mreq.offset as off_t\n        )\n    };\n    if map == libc::MAP_FAILED  {\n        panic!(\"Error in call of C function mmap(): {}\", get_c_error());\n    } else {\n        println!(\"Address of mapped data: 0x{:p}\", map);\n    }\n}\n</code></pre>\n\n<p>It compiles just fine, but when I execute it, I get this error.</p>\n\n<blockquote>\n  <p>thread '' panicked at 'Error in call of C function mmap(): Invalid argument', memmapping.rs:139\n  note: Run with <code>RUST_BACKTRACE=1</code> for a backtrace.</p>\n</blockquote>\n\n<p>Using an <code>extern</code> block to link directly against the original C <code>mmap</code> function rather than the Rust one of crate <code>libc</code> doesn\u2019t change anything.</p>\n\n<p>I took a look at how <a href=\"https://github.com/danburkert/memmap-rs/blob/master/src/unix.rs\" rel=\"nofollow noreferrer\">this project</a> called <code>mmap</code>, and tried doing the same, to be sure that <code>size</code> and <code>offset</code> are page-aligned, but it didn\u2019t change anything, since they were already page-aligned.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/28516996/how-to-create-and-write-to-memory-mapped-files\">This SO question</a> uses a facility of the stdlib called <code>std::os::MemoryMap</code>, but it doesn\u2019t exist anymore.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462109690, "post_id": 36957800, "comment_id": 61490164, "body": "Could you explain &quot;One solution is to take the ownership of c[j] (this would be annoying if c values was not Option), and give it back in the Some branch&quot; in more detail? Do I understand correctly that taking ownership of <code>c[j]</code> means &quot;letting&quot; it like so? <code>let ref mut mineNow = c[j]</code> What constitutes giving ownership back? Going out of scope?"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 1, "last_activity_date": 1462055587, "last_edit_date": 1462055587, "creation_date": 1462036247, "answer_id": 36957800, "question_id": 36957286, "link": "https://stackoverflow.com/questions/36957286/how-do-you-implement-this-simple-trie-node-in-rust/36957800#36957800", "title": "How do you implement this simple trie node in Rust?", "body": "<p>The error says that <code>o</code> is a reference (<code>&amp;</code>) but you are matching with a <code>Option</code> value (not a reference).</p>\n\n<p>If you add a reference (<code>&amp;Some(ref mut n)</code>), you will get another error because you are taking a mutable reference to <code>n</code> but <code>o</code> is immutable.</p>\n\n<p>If you make <code>o</code> mutable (<code>let o = &amp;mut c[j]</code>), you cannot change <code>c</code> in the <code>None</code> branch because <code>o</code> has a mutable borrow of <code>c</code>.</p>\n\n<p>One solution is to take the ownership of <code>c[j]</code> (this would be annoying\n if <code>c</code> values was not <code>Option</code>), and give it back in the <code>Some</code> branch.</p>\n\n<pre><code>impl TrieNode {\n    fn new() -&gt; TrieNode { TrieNode { children: vec![], terminal: false } }\n    fn add(&amp;mut self, i: usize, s: &amp;Vec&lt;usize&gt;) {\n        if s.len() == i {\n            self.terminal = true;\n        } else {\n            let j = s[i];\n            let k = j - 1;\n            let ref mut c = self.children;\n            while c.len() &lt; k {\n                c.push(None);\n            }\n            if c.len() &lt; j {\n                let mut n = TrieNode::new();\n                n.add( i + 1, s );\n                c.push(Some(n));\n            } else {\n                match c[j].take() {\n                    Some(mut n) =&gt; {\n                        n.add( i + 1, s );\n                        c[j] = Some(n)\n                    },\n                    None =&gt; {\n                        let mut n = TrieNode::new();\n                        n.add( i + 1, s );\n                        c[j] = Some(n);\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462108677, "post_id": 36958066, "comment_id": 61489867, "body": "Thank you, Matthieu. I&#39;ve chosen this one because it&#39;s shorter and ends up teach me more Rust. The <code>resize</code> method and the solution to how to actually mutate the children vector are very useful. I&#39;d thought I could borrow a mutable reference in an outer scope and then refer to it in the inner match scope, but this counted as two borrowings."}, {"owner": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462109409, "post_id": 36958066, "comment_id": 61490056, "body": "Incidentally, I find Rust&#39;s documentation comprehensive but it doesn&#39;t surface the more useful, interesting, or unexpected bits, at least for me. I didn&#39;t know to look for <code>resize</code> or the <code>Default</code> trait. As for using a map rather than a vector, that would come at a computational cost for my use that would negate the value of using Rust. As you can imagine when you compare the Rust code to the Ruby and Perl code I included, I started with what I considered simplicity and elegance and added ugliness incrementally as I tried to satisfy the borrow checker."}, {"owner": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462110065, "post_id": 36958066, "comment_id": 61490249, "body": "Is taking a subrange of a slice cheaper than passing and incrementing an index variable? As I have said, this is a case where I want maximum efficiency, so elegance at the cost of efficiency is not a good trade."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462173444, "post_id": 36958066, "comment_id": 61509099, "body": "@dfhoughton: A slice is (literally) just a size and a pointer, so it&#39;s about as cheap as passing an index. As for the hash-map vs vector, it really depends on the range of the values you pass; what&#39;s the range of those <code>usize</code>? If the range is small, then a vector will be more appropriate; if the range is large, then a hash-map will be more appropriate (because the vector consumes too much memory and blows up caches). Finding the tipping point will require experimentation."}, {"owner": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462197429, "post_id": 36958066, "comment_id": 61523137, "body": "In this case, the range will be as large as the character set of a language with an alphabetic, or <a href=\"https://en.wiktionary.org/wiki/abjadic\" rel=\"nofollow noreferrer\">abjadic</a> or syllabic, writing system, so small. So for English no vector will be more than 26 items long (punctuation and whitespace is disregarded)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "edited": false, "score": 0, "creation_date": 1462202146, "post_id": 36958066, "comment_id": 61526124, "body": "@dfhoughton: then indeed a vector might be faster."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1462037700, "creation_date": 1462037700, "answer_id": 36958066, "question_id": 36957286, "link": "https://stackoverflow.com/questions/36957286/how-do-you-implement-this-simple-trie-node-in-rust/36958066#36958066", "title": "How do you implement this simple trie node in Rust?", "body": "<p>Your control flow is a bit convoluted, and there is a lot of nesting. By reducing nesting and unwinding the control flow we can get something a bit more palatable. I would also prefer to avoid all the redundancy.</p>\n\n<pre><code>#[derive(Clone, Debug, Default)]\nstruct TrieNode {\n    children: Vec&lt;Option&lt;TrieNode&gt;&gt;,\n    terminal: bool\n}\n\nimpl TrieNode {\n    pub fn add(&amp;mut self, element: &amp;[usize]) {\n        if element.len() == 0 {\n            self.terminal = true;\n            return;\n        }\n\n        let ref mut c = self.children; \n\n        let value = element[0];\n\n        //  Ensure there is at least \"value\" children\n        if c.len() &lt; value { c.resize(value, None); }\n\n        //  Ensure the \"value\"th child is a full TrieNode\n        if c[value - 1].is_none() {\n            c[value - 1] = Some(TrieNode::default());\n        }\n\n        c[value - 1].as_mut().unwrap().add(&amp;element[1..]);\n    }\n}\n\nfn main() {\n    let mut t = TrieNode::default();\n    t.add(&amp;[1, 2]);\n    println!(\"{:?}\", t);\n}\n</code></pre>\n\n<p>The annoying bit is the latter 6 lines of <code>add</code>. A <code>match</code> is conceptually more elegant, however you cannot borrow <code>c[value - 1]</code> for the duration of the <code>match</code> AND modify it in the <code>None</code> branch because borrow checking is not \"path-aware\" but only \"scope-aware\" (a limitation that might be lifted in the future but we have to contend with for now).</p>\n\n<p>For pieces of advice:</p>\n\n<ul>\n<li>Check for existing methods as much as possible. For example, using <code>Vec::resize</code> rather than a <code>while</code> loop conveys intent more accurately.</li>\n<li>Check for existing traits, when <code>new()</code> takes no parameter, it's better to implement the <code>Default</code> trait instead (opens more doors); also, <code>Default</code> can regularly be derived so that you don't even have to type it out!</li>\n<li>Use slices when ownership of <code>String</code>/<code>Vec</code> is not required. On top of making the code more generic (any type that is dereferenceable to a slice will work), here we also benefit from the indexing notation <code>[1..]</code> to cheaply cut off the first element and thus avoid carrying around an extra index.</li>\n</ul>\n\n<p>All of that makes the code much shorter, and less code generally means less chances for bugs to slip in. Especially when duplication is avoided.</p>\n\n<hr>\n\n<p>On another note, if you are willing to use either <code>HashMap</code> or <code>BTreeMap</code> for children, you can get \"sparseness\" for free and much easier methods for adding. For example, the <code>add</code> method revised with <code>use std::collections::HashMap</code>:</p>\n\n<pre><code>impl TrieNode {\n    pub fn add(&amp;mut self, element: &amp;[usize]) {\n        if element.len() == 0 {\n            self.terminal = true;\n            return;\n        }\n\n        self.children\n            .entry(element[0])\n            .or_insert(TrieNode::default())\n            .add(&amp;element[1..]);\n    }\n}\n</code></pre>\n\n<p>Much, <em>much</em>, simpler, isn't it?</p>\n"}], "owner": {"reputation": 55, "user_id": 3501996, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56cb74999a5c91fb17fb140ceaa5bebc?s=128&d=identicon&r=PG", "display_name": "dfhoughton", "link": "https://stackoverflow.com/users/3501996/dfhoughton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 537, "favorite_count": 0, "accepted_answer_id": 36958066, "answer_count": 2, "score": 0, "last_activity_date": 1462055587, "creation_date": 1462033211, "last_edit_date": 1462055477, "question_id": 36957286, "link": "https://stackoverflow.com/questions/36957286/how-do-you-implement-this-simple-trie-node-in-rust", "title": "How do you implement this simple trie node in Rust?", "body": "<p>I want to implement a <a href=\"https://en.wikipedia.org/wiki/Trie\" rel=\"nofollow\">trie</a> for sequences of integer indices. For the sake of efficiency, it's important that the node's children be associated with the node via an indexed sequence, not some sort of map. To illustrate the basic idea, here is an implementation in Ruby:</p>\n\n<pre><code>require 'virtus'\n\nclass TrieNode\n  include Virtus.model\n\n  attribute :terminal, Boolean, default: false\n  attribute :children, Array,   default: []\n\n  def add(i, vec)\n    if i == vec.length\n      terminal = true\n    else\n      ( children[vec[i]] ||= TrieNode.new ).add i + 1, vec\n    end\n  end\nend\n</code></pre>\n\n<p>Here's the same thing in Perl:</p>\n\n<pre><code>package TrieNode;\nuse Moo;\n\nhas terminal =&gt; ( is =&gt; 'rw' );\nhas children =&gt; ( is =&gt; 'ro', default =&gt; sub { [] } );\n\nsub add {\n   my ( $self, $i, $vec ) = @_;\n   if ( $i == @$vec ) {\n      $self-&gt;terminal(1);\n   }\n   else {\n      ( $self-&gt;children-&gt;[ $vec-&gt;[$i] ] //= TrieNode-&gt;new )-&gt;add( ++$i, $vec );\n   }\n}\n\n'wheee!!!';\n</code></pre>\n\n<p>And here is one of my various attempts to implement this in Rust:</p>\n\n<pre><code>struct TrieNode {\n    children: Vec&lt;Option&lt;TrieNode&gt;&gt;,\n    terminal: bool\n}\n\nimpl TrieNode {\n    fn new() -&gt; TrieNode { TrieNode { children: vec![], terminal: false } }\n    fn add(&amp;mut self, i: usize, s: &amp;Vec&lt;usize&gt;) {\n        if s.len() == i {\n            self.terminal = true;\n        } else {\n            let j = s[i];\n            let k = j - 1;\n            let ref mut c = self.children;\n            while c.len() &lt; k {\n                c.push(None);\n            }\n            if c.len() &lt; j {\n                let mut n = TrieNode::new();\n                n.add( i + 1, s );\n                c.push(Some(n));\n            } else {\n                let ref o = c[j];\n                match o {\n                    Some(ref mut n) =&gt; {\n                        n.add( i + 1, s );\n                    },\n                    None =&gt; {\n                        let mut n = TrieNode::new();\n                        n.add( i + 1, s );\n                        c.remove(j);\n                        c.insert(j, Some(n));\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>For what it's worth, here are the compilation errors for that attempt:</p>\n\n<pre><code>file_toy (master #) $ cargo build\n   Compiling file_toy v0.1.0 (file:///Users/houghton/playground/file_toy)\nsrc/main.rs:27:21: 27:36 error: mismatched types:\n expected `&amp;_`,\n    found `core::option::Option&lt;_&gt;`\n(expected &amp;-ptr,\n    found enum `core::option::Option`) [E0308]\nsrc/main.rs:27                     Some(ref mut n) =&gt; {\n                                   ^~~~~~~~~~~~~~~\nsrc/main.rs:27:21: 27:36 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/main.rs:30:21: 30:25 error: mismatched types:\n expected `&amp;_`,\n    found `core::option::Option&lt;_&gt;`\n(expected &amp;-ptr,\n    found enum `core::option::Option`) [E0308]\nsrc/main.rs:30                     None =&gt; {\n                                   ^~~~\nsrc/main.rs:30:21: 30:25 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/main.rs:28:27: 28:30 error: the type of this value must be known in this context\nsrc/main.rs:28                         n.add( i + 1, s );\n                                         ^~~\nerror: aborting due to 3 previous errors\nerror: Could not compile `file_toy`.\n</code></pre>\n\n<p>The intended use of this is a Rust implementation of <a href=\"https://metacpan.org/pod/Lingua::Anagrams\" rel=\"nofollow\">this</a>. The trie, once fully stuffed with sequences, will be immutable and will live for the lifetime of the program. I'm doing this to learn Rust, so the more of my stupidity you can knock down the better. Thanks!</p>\n"}, {"tags": ["callback", "rust", "event-driven"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462013830, "post_id": 36952894, "comment_id": 61465747, "body": "Did you take a look at some events librarys <a href=\"https://crates.io/search?q=event\" rel=\"nofollow noreferrer\">crates.io/search?q=event</a> ? Do they not meet your needs?"}, {"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1462017241, "post_id": 36952894, "comment_id": 61466816, "body": "Do you mean that a <code>timer_callback</code> can arbitrarily call <code>delete</code> on itself, or just that a <code>timer_callback</code> may invoke <code>unlink_timer</code> on the <code>Timer</code> it belongs to, from within its <code>timer_expired</code>-method?"}, {"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1462017296, "post_id": 36952894, "comment_id": 61466836, "body": "Also, your <code>get_time</code> method seems to simply return the system time. Hence, it doesn&#39;t have to be an instance method, or even a member of <code>EventLoop</code> at all, right? Am I missing something there?"}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1462017904, "post_id": 36952894, "comment_id": 61467046, "body": "@Thierry 1) yes timer_callback can end up calling delete on this or a parent structure can do that, or something else which destructs the object. This is a very common thing to do in event-driven design. For example consider you have a Client class corresponding to a connected TCP class, which has member classes Connection and Timer. The Timer callback would delete the Client upon inactivity and likewise an error callback for the Connection would also delete the Client."}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1462017931, "post_id": 36952894, "comment_id": 61467056, "body": "@Thierry Yes I know get_time need not be an instance method, this is quick and dirty code just here to illustrate the architecture."}, {"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1462029881, "post_id": 36952894, "comment_id": 61470990, "body": "@AmbrozBizjak I think Rust will require you to change the strategy regarding the deletion somewhat. Unless I&#39;m missing something (obvious), the possibility to delete something must be made explicit: you must be the (sole) owner of it. This means that a <code>fn timer_expired(&amp;mut self)</code> won&#39;t work. You could use something like <code>fn timer_expired(self) -&gt; Option&lt;Self&gt;</code>, though, where you explicitly either allow the <code>TimerCallback</code> to outlive the invocation, or don&#39;t. (Of course, <code>unsafe</code> code allows you to translate your code literally from C++, but I&#39;m assuming you don&#39;t want that.)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1462038701, "post_id": 36952894, "comment_id": 61474106, "body": "From my experience, if you cannot properly model ownership, it is likely that there is a risk of shooting yourself in the foot (ie, deleting yourself indirectly by accident). Have you thought about combining <code>Rc</code>/<code>Weak</code> with <code>RefCell</code>?"}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1462041142, "post_id": 36952894, "comment_id": 61474943, "body": "@MatthieuM. I do not want to use Rc because AFAIK that involves dynamic allocation. I am looking at Rust as something to use instead of C++ for low-level event-driven code possibly running in microcontrollers, which must use NO dynamic memory and have high performance. Rust promises zero-overhead safety but it seems to be completely failing for what I need."}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1462041188, "post_id": 36952894, "comment_id": 61474958, "body": "@MatthieuM. I am currently trying to just implement the equivalent of this using unsafe code and then I&#39;ll see if it&#39;s possible to make some abstractions that would hide the unsafe bits."}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1462041449, "post_id": 36952894, "comment_id": 61475049, "body": "@MatthieuM. I have developed a set of patterns/rules that allow me to write nice and reliable event-driven code in C/C++, including deleting objects from their callbacks. For example when calling callbacks, I always directly &quot;return&quot; the callback, so that after the callback control effectively returns straight to the event loop, without risk that something unsafe happen on the return path. If I need to do something after the callback runs, I do it by scheduling such an action via the event loop."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1462046871, "post_id": 36952894, "comment_id": 61476860, "body": "@AmbrozBizjak: You are using a <code>std::list</code> which will allocate memory... if you want to avoid allocating you could use an intrusive list (though in Rust it&#39;ll require some <code>unsafe</code> code it can be implemented). Could all timer objects live longer than the loop? (if so we could just take reference to them in Rust, although mutability would still be an issue of course)"}, {"owner": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 0, "creation_date": 1462059173, "post_id": 36952894, "comment_id": 61479794, "body": "@AmbrozBizjak: With regards to &#39;the class being called back has full freedom to access itself&#39;: you can use pattern matching to obtain simultaneous mutable references to as many subfields of the parent object as you need: <a href=\"http://stackoverflow.com/a/32404611/109549\">stackoverflow.com/a/32404611/109549</a>"}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1462381888, "post_id": 36952894, "comment_id": 61618082, "body": "@MatthieuM. The std::list was just the quickest thing I found to make it work. I have mentioned in the question I would typically use an intrusive list."}, {"owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "reply_to_user": {"reputation": 45410, "user_id": 109549, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9c3b5cc4495ac7a328541287e1de87?s=128&d=identicon&r=PG", "display_name": "zslayton", "link": "https://stackoverflow.com/users/109549/zslayton"}, "edited": false, "score": 0, "creation_date": 1462382002, "post_id": 36952894, "comment_id": 61618139, "body": "@zslayton: That is good to know, but I think it doesn&#39;t happen here. The main issue with regard to references seems to be how to &quot;go from&quot; references from lower-level to references to higher-level objects - in this example, from Timer to TimerUser. I don&#39;t see any scalable way without using pointers &quot;upwards&quot; in the object hierarchy."}], "owner": {"reputation": 7379, "user_id": 1020667, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/225429bee670de56fadefc4ce4e2dbf5?s=128&d=identicon&r=PG", "display_name": "Ambroz Bizjak", "link": "https://stackoverflow.com/users/1020667/ambroz-bizjak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 2350, "favorite_count": 2, "answer_count": 0, "score": 4, "last_activity_date": 1462383096, "creation_date": 1462006851, "last_edit_date": 1462383096, "question_id": 36952894, "link": "https://stackoverflow.com/questions/36952894/event-driven-design-with-callbacks-in-rust", "title": "Event-driven design with callbacks in Rust", "body": "<p>I'd like to know how a composable event-driven design with callbacks can be used in Rust. From my existing experimentation, I have come to suspect that the ownership system in Rust is more suited to top-down procedural code and has problems with references to parent objects that are needed for callbacks in event-driven design.</p>\n\n<p>Essentially, I would like to see the Rust equivalent for the following C++ code. The code implements an EventLoop which dispatches Timer events using a busy-loop, a Timer class with a timer_expired callback, and a User class that schedules a timer in intervals of 500ms.</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;list&gt;\n#include &lt;chrono&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std::chrono;\n\n// Wrapping code in System class so we can implement all functions within classes declarations...\ntemplate &lt;typename Dummy=void&gt;\nstruct System {\n    class Timer;\n\n    class EventLoop {\n        friend class Timer;\n\n    private:\n        std::list&lt;Timer *&gt; m_running_timers;\n        bool m_iterating_timers;\n        typename std::list&lt;Timer *&gt;::iterator m_current_timer;\n\n        void unlink_timer (Timer *timer)\n        {\n            auto it = std::find(m_running_timers.begin(), m_running_timers.end(), timer);\n            assert(it != m_running_timers.end());\n            if (m_iterating_timers &amp;&amp; it == m_current_timer) {\n                ++m_current_timer;\n            }\n            m_running_timers.erase(it);\n        }\n\n    public:\n        EventLoop()\n        : m_iterating_timers(false)\n        {\n        }\n\n        milliseconds get_time()\n        {\n            return duration_cast&lt;milliseconds&gt;(system_clock::now().time_since_epoch());\n        }\n\n        void run()\n        {\n            while (true) {\n                milliseconds now = get_time();\n\n                m_iterating_timers = true;\n                m_current_timer = m_running_timers.begin();\n\n                while (m_current_timer != m_running_timers.end()) {\n                    Timer *timer = *m_current_timer;\n                    assert(timer-&gt;m_running);\n\n                    if (now &gt;= timer-&gt;m_expire_time) {\n                        m_current_timer = m_running_timers.erase(m_current_timer);\n                        timer-&gt;m_running = false;\n                        timer-&gt;m_callback-&gt;timer_expired();\n                    } else {\n                        ++m_current_timer;\n                    }\n                }\n\n                m_iterating_timers = false;\n            }\n        }\n    };\n\n    struct TimerCallback {\n        virtual void timer_expired() = 0;\n    };\n\n    class Timer {\n        friend class EventLoop;\n\n    private:\n        EventLoop *m_loop;\n        TimerCallback *m_callback;\n        bool m_running;\n        milliseconds m_expire_time;\n\n    public:\n        Timer(EventLoop *loop, TimerCallback *callback)\n        : m_loop(loop), m_callback(callback), m_running(false)\n        {\n        }\n\n        ~Timer()\n        {\n            if (m_running) {\n                m_loop-&gt;unlink_timer(this);\n            }\n        }\n\n        void start (milliseconds delay)\n        {\n            stop();\n            m_running = true;\n            m_expire_time = m_loop-&gt;get_time() + delay;\n            m_loop-&gt;m_running_timers.push_back(this);\n        }\n\n        void stop ()\n        {\n            if (m_running) {\n                m_loop-&gt;unlink_timer(this);\n                m_running = false;\n            }\n        }\n    };\n\n    class TimerUser : private TimerCallback {\n    private:\n        Timer m_timer;\n\n    public:\n        TimerUser(EventLoop *loop)\n        : m_timer(loop, this)\n        {\n            m_timer.start(milliseconds(500));\n        }\n\n    private:\n        void timer_expired() override\n        {\n            printf(\"Timer has expired!\\n\");\n            m_timer.start(milliseconds(500));\n        }\n    };\n};\n\nint main ()\n{\n    System&lt;&gt;::EventLoop loop;\n    System&lt;&gt;::TimerUser user(&amp;loop);\n    loop.run();\n    return 0;\n}\n</code></pre>\n\n<p>The code works as standard C++14 and I believe is correct. Note, in a serious implementation I would make the running_timers an intrusive linked-list not a std::list for performance reasons.</p>\n\n<p>Here are some properties of this solution which I need to see in a Rust equivalent:</p>\n\n<ul>\n<li>Timers can be added/removed without restrictions, there are no limitations on how/where a Timer is allocated. For example one can dynamically manage a list of classes each using their own timer.</li>\n<li>In a timer_callback, the class being called back has full freedom to access itself, and the timer it is being called from, e.g. to restart it.</li>\n<li>In a timer_callback, the class being called also has freedom to delete itself and the timer. The EventLoop understands this possibility.</li>\n</ul>\n\n<p>I can show some things I've tried but I don't think it will be useful. The major pain point I'm having is satisfy the borrowing rules with all the references to parent objects involved for callback traits.</p>\n\n<p>I suspect a RefCell or something similar might be part of a solution, possibly one or more special classes with internal unsafe parts, that allow gluing stuff together. Maybe some parts of reference safety typically provided by Rust could only be guaranteed at runtime by panicking.</p>\n\n<p><strong>Update</strong></p>\n\n<p>I have created a <a href=\"https://play.rust-lang.org/?gist=c2f6b31e10f3149a51e6ed17d45ae458&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">prototype implementation</a> of this in Rust, but it is not safe. Specifically:</p>\n\n<ul>\n<li>Timers and the EventLoop must not be moved. If they are accidentally moves undefined behavior occurs due to use pointers to these. It is not possible to even detect this within Rust.</li>\n<li>The callback implementation is a hack but should work. Note that this allows the same object to receive callbacks from two or more Timers, something that is not possible if traits were used for callbacks instead.</li>\n<li>The callbacks are unsafe due to use of pointers that point to the object that is to receive the callback.</li>\n<li>It is theoretically possible for an object to delete itself, but this actually seems unsafe in Rust. Because if a Timer callback ends up deleting itself, there would be a &amp;self reference at one point that is not valid. The source of this unsafety is the use of pointers for callbacks.</li>\n</ul>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1461974952, "post_id": 36949184, "comment_id": 61457008, "body": "Add the structure definition so we can known the type of <code>self.params</code>."}, {"owner": {"reputation": 53, "user_id": 3088347, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8ebbc70987fade50ebc4980a996605e6?s=128&d=identicon&r=PG&f=1", "display_name": "Kadok", "link": "https://stackoverflow.com/users/3088347/kadok"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1461976888, "post_id": 36949184, "comment_id": 61457401, "body": "it&#39;s done, I added the structure"}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 0, "last_activity_date": 1461978578, "last_edit_date": 1495540430, "creation_date": 1461977916, "answer_id": 36949589, "question_id": 36949184, "link": "https://stackoverflow.com/questions/36949184/error-line-does-not-live-long-enough-but-its-ok-in-playground/36949589#36949589", "title": "error: `line` does not live long enough but it&#39;s ok in playground", "body": "<p>In this case you have to use <code>String</code> instead of <code>&amp;str</code>. See <a href=\"https://stackoverflow.com/questions/24158114/rust-string-versus-str\">this</a> to understand the difference.</p>\n\n<p>You can also eliminate the creation of the intermediate vector and use the iterator return by <code>split</code> direct</p>\n\n<pre><code>pub struct Config&lt;'a&gt; {\n    file: &amp;'a str,\n    params: HashMap&lt;String, String&gt;\n}\n\n...\n\nlet mut line = buffer.split(\"=\");\nlet key = line.next().unwrap().trim().to_string();\nlet value = line.next().unwrap().trim().to_string();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "is_accepted": true, "score": 2, "last_activity_date": 1461981439, "creation_date": 1461981439, "answer_id": 36949895, "question_id": 36949184, "link": "https://stackoverflow.com/questions/36949184/error-line-does-not-live-long-enough-but-its-ok-in-playground/36949895#36949895", "title": "error: `line` does not live long enough but it&#39;s ok in playground", "body": "<p>There are three steps in realizing why this does not work.</p>\n\n<pre><code>let line: Vec&lt;String&gt; = buffer.split(\"=\").map(String::from).collect();\nlet key = line[0].trim();\nlet value = line[1].trim();\nself.params.insert(key, value);\n</code></pre>\n\n<ol>\n<li><code>line</code> is a <code>Vec</code> of <code>String</code>s, meaning the vector owns the strings its containing. An effect of this is that when  the vector is freed from memory, the elements, the strings, are also freed. </li>\n<li><p>If we look at <code>string::trim</code> <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.trim\" rel=\"nofollow\">here</a>, we see that it takes and returns a <code>&amp;str</code>. In other words, the function does not allocate anything, or transfer ownership - the string it returns is simply a slice of the original string. So if we were to free the original string, the trimmed string would not have valid data.</p></li>\n<li><p>The signature of <code>HashMap::insert</code> is <code>fn insert(&amp;mut self, k: K, v: V) -&gt; Option&lt;V&gt;</code>. The function moves both the key and the value, because these needs to be valid for as long as they may be in the hashmap. We would like to give the hashmap the two strings. However, both <code>key</code> and <code>value</code> are just references to strings which is owned by the vector - we are just borrowing them - so we can't give them away. </p></li>\n</ol>\n\n<p>The solution is simple: copy the strings after they have been split. </p>\n\n<pre><code>let line: Vec&lt;String&gt; = buffer.split(\"=\").map(String::from).collect();\nlet key = line[0].trim().to_string();\nlet value = line[1].trim().to_string();\nself.params.insert(key, value);\n</code></pre>\n\n<p>This will allocate two new strings, and copy the trimmed slices into the new strings.</p>\n\n<hr>\n\n<p>We could have moved the string out of the vector(ie. with <code>Vec::remove</code>), if we didn't trim the strings afterwards; I was unable to find a easy way of trimming a string without allocating a new one. </p>\n\n<p>In addition, as malbarbo mentions, we can avoid the extra allocation that is done with <code>map(String::from)</code>, and the creation of the vector with <code>collect()</code>, by simply omitting them.</p>\n"}], "owner": {"reputation": 53, "user_id": 3088347, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/8ebbc70987fade50ebc4980a996605e6?s=128&d=identicon&r=PG&f=1", "display_name": "Kadok", "link": "https://stackoverflow.com/users/3088347/kadok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 363, "favorite_count": 0, "accepted_answer_id": 36949895, "answer_count": 2, "score": 1, "last_activity_date": 1461981439, "creation_date": 1461974122, "last_edit_date": 1461976338, "question_id": 36949184, "link": "https://stackoverflow.com/questions/36949184/error-line-does-not-live-long-enough-but-its-ok-in-playground", "title": "error: `line` does not live long enough but it&#39;s ok in playground", "body": "<p>I can't figure it out why my local var line <code>does not live long enough</code>. You can see bellow my code. It work on the Rust's playground. </p>\n\n<p>I may have an idea of the issue: I use a structure (load is a function of this structure). As I want to store the result of the line in a member of my struct, it could be the issue. But I don't see what should I do to resolve this problem.</p>\n\n<pre><code>pub struct Config&lt;'a&gt; {\n    file: &amp;'a str,\n    params: HashMap&lt;&amp;'a str, &amp;'a str&gt;\n}\n\nimpl&lt;'a&gt; Config&lt;'a&gt; {\n    pub fn new(file: &amp;str) -&gt; Config {\n        Config { file: file, params: HashMap::new() }\n    }\n\n    pub fn load(&amp;mut self) -&gt; () {\n        let f = match fs::File::open(self.file) {\n            Ok(e) =&gt; e,\n            Err(e) =&gt; {\n                println!(\"Failed to load {}, {}\", self.file, e);\n                return;\n            }\n        };\n        let mut reader = io::BufReader::new(f);\n        let mut buffer = String::new();\n\n        loop {\n            let result = reader.read_line(&amp;mut buffer);\n\n            if result.is_ok() &amp;&amp; result.ok().unwrap() &gt; 0 {\n                let line: Vec&lt;String&gt; = buffer.split(\"=\").map(String::from).collect();\n\n                let key = line[0].trim();\n                let value = line[1].trim();\n\n                self.params.insert(key, value);\n            }\n\n            buffer.clear();\n        }\n    }\n    ...\n}\n</code></pre>\n\n<p>And I get this error:</p>\n\n<pre><code>src/conf.rs:33:27: 33:31 error: `line` does not live long enough\nsrc/conf.rs:33                 let key = line[0].trim();\n                                         ^~~~\nsrc/conf.rs:16:34: 41:6 note: reference must be valid for the lifetime 'a as defined on the block at 16:33...\nsrc/conf.rs:16     pub fn load(&amp;mut self) -&gt; () {\nsrc/conf.rs:17         let f = match fs::File::open(self.file) {\nsrc/conf.rs:18             Ok(e) =&gt; e,\nsrc/conf.rs:19             Err(e) =&gt; {\nsrc/conf.rs:20                 println!(\"Failed to load {}, {}\", self.file, e);\nsrc/conf.rs:21                 return;\n               ...\nsrc/conf.rs:31:87: 37:14 note: ...but borrowed value is only valid for the block suffix following statement 0 at 31:86\nsrc/conf.rs:31                 let line: Vec&lt;String&gt; = buffer.split(\"=\").map(String::from).collect();\nsrc/conf.rs:32 \nsrc/conf.rs:33                 let key = line[0].trim();\nsrc/conf.rs:34                 let value = line[1].trim();\nsrc/conf.rs:35 \nsrc/conf.rs:36                 self.params.insert(key, value);\n               ...\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462003595, "post_id": 36948922, "comment_id": 61462854, "body": "I&#39;ve seen that answer but get_tydesc for some reason caused the compiler to bork so wasn&#39;t sure if it was me, the call was deprecated, or something else."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462021075, "post_id": 36948922, "comment_id": 61468094, "body": "The second answer works <a href=\"https://play.rust-lang.org/?gist=de059307b1bc12ee0bd713da0284f50e&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462023775, "post_id": 36948922, "comment_id": 61468910, "body": "<code>1716249077420000607</code> would be unlikely to be a <code>f64</code>. Maybe you meant <code>u64</code>?"}, {"owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1462032496, "post_id": 36948922, "comment_id": 61471870, "body": "@malbarbo - any way of getting that example to work on the stable branch?"}], "owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 57, "favorite_count": 0, "closed_date": 1462023720, "answer_count": 0, "score": 0, "last_activity_date": 1462023711, "creation_date": 1461972237, "last_edit_date": 1462023711, "question_id": 36948922, "link": "https://stackoverflow.com/questions/36948922/getting-a-text-representation-of-a-type", "closed_reason": "Duplicate", "title": "Getting a text representation of a type", "body": "<p>I have some code which will print the <code>TypeId</code> of a variable passed in.</p>\n\n<pre><code>fn typeid&lt;T: std::any::Any&gt;(_: &amp;T) {\n    println!(\"{:?}\", std::any::Type::of::&lt;T&gt;());\n}\n</code></pre>\n\n<p>This works, but gives me a numeric id for the type. Is there a way to output the actual type? For example 1716249077420000607 is f64 (IIRC) or do I need to create a physical list (possibly as an enum) and output that value as part of a match construct?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 93509, "user_id": 4086, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e4a1b4bf6865eddd0edfe8cb90361c84?s=128&d=identicon&r=PG", "display_name": "Ferruccio", "link": "https://stackoverflow.com/users/4086/ferruccio"}, "edited": false, "score": 0, "creation_date": 1461942792, "post_id": 36941851, "comment_id": 61442764, "body": "I believe if you change the lambda expression to <code>accum + &quot; &quot; + &amp;s</code>, the trailing space will disappear."}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 93509, "user_id": 4086, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e4a1b4bf6865eddd0edfe8cb90361c84?s=128&d=identicon&r=PG", "display_name": "Ferruccio", "link": "https://stackoverflow.com/users/4086/ferruccio"}, "edited": false, "score": 1, "creation_date": 1461942874, "post_id": 36941851, "comment_id": 61442812, "body": "@Ferruccio This just results in a leading space, I only did it the way around I did because a trailing space is often invisible whereas a leading one can be seen in the formatting. I should have specified leading and trailing spaces are unwanted though."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 2, "creation_date": 1461943115, "post_id": 36941851, "comment_id": 61442964, "body": "There&#39;s an <a href=\"https://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.intersperse\" rel=\"nofollow noreferrer\"><code>intersperse</code></a> method in <code>itertools</code> if you&#39;re willing to add a dependency. I don&#39;t think there&#39;s a straightforward way to do this with <code>std</code>."}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1461943754, "post_id": 36941851, "comment_id": 61443336, "body": "@Dogbert So with <code>itertools</code> it looks like you would call <code>intersperse</code> on the iterator and then <code>fold</code> that iterator into the final <code>String</code> by just having <code>accum + &amp;s</code> in the fold closure? Seems simple enough, would be nice if something similar to this existed in std though."}, {"owner": {"reputation": 93509, "user_id": 4086, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e4a1b4bf6865eddd0edfe8cb90361c84?s=128&d=identicon&r=PG", "display_name": "Ferruccio", "link": "https://stackoverflow.com/users/4086/ferruccio"}, "edited": false, "score": 1, "creation_date": 1461943979, "post_id": 36941851, "comment_id": 61443468, "body": "Yes, of course, I should have realized that would happen. I&#39;ve run into this problem before (using C#). You need to check if <code>accum</code> is empty. I&#39;m not sure if this is valid Rust syntax, but I normally do something like: <code>accum + (if accum == &quot;&quot; {&quot;&quot;} else {&quot; &quot;}) + &amp;s</code>"}, {"owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "reply_to_user": {"reputation": 93509, "user_id": 4086, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/e4a1b4bf6865eddd0edfe8cb90361c84?s=128&d=identicon&r=PG", "display_name": "Ferruccio", "link": "https://stackoverflow.com/users/4086/ferruccio"}, "edited": false, "score": 2, "creation_date": 1461944801, "post_id": 36941851, "comment_id": 61443976, "body": "@Ferruccio Yes that would work, slightly messier looking closure but nothing too dreadful. Just a note for anyone choosing the <code>itertools</code> approach though - there&#39;s a <code>join</code> function in <code>itertools</code> which joins all elements into a single <code>String</code> separated by a specified separator."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1461945984, "post_id": 36941851, "comment_id": 61444640, "body": "@HarveyAdcock you can actually just call <code>.collect()</code> on an iterator of <code>String</code> and get back a single <code>String</code>. But yeah, <code>join</code> is even better for you that I completely missed."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 5, "creation_date": 1461973146, "post_id": 36941851, "comment_id": 61456599, "body": "Why all this talk of intersperse in itertools (I see it often)?  Itertools has actual methods for formatting, use <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.join\" rel=\"nofollow noreferrer\"><code>.join(&quot; &quot;)</code> or <code>.format_default(&quot; &quot;)</code></a>"}], "answers": [{"comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 3, "creation_date": 1461959982, "post_id": 36946085, "comment_id": 61451587, "body": "If you put the <code>for</code> loop inside the <code>if let</code>, you do not need to use <code>fuse</code>."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 2, "creation_date": 1462003053, "post_id": 36946085, "comment_id": 61462730, "body": "With <code>itertools</code>, you can just do <code>std::env::args().join(&quot; &quot;)</code> (thanks to OP and @bluss for the tip in the question comments)."}, {"owner": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "edited": false, "score": 0, "creation_date": 1559242990, "post_id": 36946085, "comment_id": 99368495, "body": "For the <code>intersperse</code> example, couldn&#39;t you just call <code>.collect::&lt;String&gt;()</code> instead of folding?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3152, "user_id": 1525759, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/LHtNL.jpg?s=128&g=1", "display_name": "Addison", "link": "https://stackoverflow.com/users/1525759/addison"}, "edited": false, "score": 0, "creation_date": 1559243871, "post_id": 36946085, "comment_id": 99368856, "body": "@Addison yep! I&#39;m guessing I copy-pasted from the earlier example with <code>fold</code> and didn&#39;t apply critical thought."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1582725065, "last_edit_date": 1582725065, "creation_date": 1461957969, "answer_id": 36946085, "question_id": 36941851, "link": "https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust/36946085#36946085", "title": "What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?", "body": "<blockquote>\n  <p>What's an idiomatic way to <strong>print</strong> all command line arguments in Rust?</p>\n</blockquote>\n\n<pre><code>fn main() {\n    let mut args = std::env::args();\n\n    if let Some(arg) = args.next() {\n        print!(\"{}\", arg);\n\n        for arg in args {\n            print!(\" {}\", arg);\n        }\n    }\n}\n</code></pre>\n\n<p>Or better with Itertools' <a href=\"https://docs.rs/itertools/0.8.0/itertools/trait.Itertools.html#method.format\" rel=\"noreferrer\"><code>format</code></a> or <a href=\"https://docs.rs/itertools/0.8.0/itertools/trait.Itertools.html#method.format_with\" rel=\"noreferrer\"><code>format_with</code></a>:</p>\n\n<pre><code>use itertools::Itertools; // 0.8.0\n\nfn main() {\n    println!(\"{}\", std::env::args().format(\" \"));\n}\n</code></pre>\n\n<blockquote>\n  <p>I just want a space separated <code>String</code> </p>\n</blockquote>\n\n<pre><code>fn args() -&gt; String {\n    let mut result = String::new();\n    let mut args = std::env::args();\n\n    if let Some(arg) = args.next() {\n        result.push_str(&amp;arg);\n\n        for arg in args {\n            result.push(' ');\n            result.push_str(&amp;arg);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    println!(\"{}\", args());\n}\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>fn args() -&gt; String {\n    let mut result = std::env::args().fold(String::new(), |s, arg| s + &amp;arg + \" \");\n    result.pop();\n    result\n}\n\nfn main() {\n    println!(\"{}\", args());\n}\n</code></pre>\n\n<p>If you use Itertools, you can use the <code>format</code> / <code>format_with</code> examples above with the <a href=\"https://doc.rust-lang.org/std/macro.format.html\" rel=\"noreferrer\"><code>format!</code></a> macro. </p>\n\n<p><a href=\"https://docs.rs/itertools/0.8.0/itertools/trait.Itertools.html#method.join\" rel=\"noreferrer\"><code>join</code></a> is also useful:</p>\n\n<pre><code>use itertools::Itertools; // 0.8.0\n\nfn args() -&gt; String {\n    std::env::args().join(\" \")\n}\n\nfn main() {\n    println!(\"{}\", args());\n}\n</code></pre>\n\n<p>In other cases, you may want to use <a href=\"https://docs.rs/itertools/0.8.0/itertools/trait.Itertools.html#method.intersperse\" rel=\"noreferrer\"><code>intersperse</code></a>:</p>\n\n<pre><code>use itertools::Itertools; // 0.8.0\n\nfn args() -&gt; String {\n    std::env::args().intersperse(\" \".to_string()).collect()\n}\n\nfn main() {\n    println!(\"{}\", args());\n}\n</code></pre>\n\n<p>Note this isn't as efficient as other choices as a <code>String</code> is cloned for each iteration.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 2, "last_activity_date": 1463069257, "creation_date": 1463069257, "answer_id": 37192203, "question_id": 36941851, "link": "https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust/37192203#37192203", "title": "What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?", "body": "<p>Here is an alternative for</p>\n\n<blockquote>\n  <p>I just want a space separated <code>String</code> of the argument variables obtained from <code>std::env::args()</code></p>\n</blockquote>\n\n<pre><code>fn args_string() -&gt; String {\n    let mut out = String::new();\n    let mut sep = \"\";\n    for arg in std::env::args() {\n        out.push_str(sep);\n        out.push_str(&amp;*arg);\n        sep = \" \";\n    }\n    out\n}\n\npub fn main() {\n    println!(\"{}\", args_string());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 164, "user_id": 9806233, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/52fpN.jpg?s=128&g=1", "display_name": "Miraclx", "link": "https://stackoverflow.com/users/9806233/miraclx"}, "is_accepted": false, "score": 0, "last_activity_date": 1617673352, "last_edit_date": 1617673352, "creation_date": 1617618091, "answer_id": 66951473, "question_id": 36941851, "link": "https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust/66951473#66951473", "title": "What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?", "body": "<p>Here's a solution with iterators, and zero non-stdlib dependencies</p>\n<p>(performance wise, this shines in release mode, with optimizations turned on [<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=7f664c15a60b87e0819a6c46529ff00a\" rel=\"nofollow noreferrer\">playground</a>])</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter::once;\n\nfn join_iter&lt;T&gt;(\n    mut iter: impl Iterator&lt;Item = T&gt;,\n    sep: impl Fn(&amp;T) -&gt; T,\n) -&gt; impl Iterator&lt;Item = T&gt; {\n    iter.next()\n        .into_iter()\n        .chain(iter.flat_map(move |s| once(sep(&amp;s)).chain(once(s))))\n}\n\nfn examples() {\n    let iter = [1, 3, 5, 7, 9].iter().cloned();\n    println!(&quot;{:?}&quot;, join_iter(iter, |v| v - 1).collect::&lt;Vec&lt;_&gt;&gt;());\n    // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    let iter = [&quot;Hello&quot;, &quot;World&quot;].iter().cloned();\n    let sep = &quot;, &quot;;\n    println!(&quot;{:?}&quot;, join_iter(iter, |_| sep).collect::&lt;String&gt;());\n    // &quot;Hello, World&quot;\n}\n\nfn args() -&gt; String {\n    join_iter(std::env::args(), |_| &quot; &quot;.to_string()).collect()\n}\n\nfn main() {\n    examples();\n\n    println!(&quot;{}&quot;, args());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "is_accepted": false, "score": 0, "last_activity_date": 1618415052, "last_edit_date": 1618415052, "creation_date": 1618413658, "answer_id": 67094520, "question_id": 36941851, "link": "https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust/67094520#67094520", "title": "What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?", "body": "<p>Here is a version using <code>fold</code></p>\n<pre><code>fn join&lt;I, T, D&gt;(iter: I, separator: D) -&gt; String\nwhere\n    T: Display,\n    D: Display,\n    I: Iterator&lt;Item = T&gt;,\n{\n    match iter.fold(None, |a:Option&lt;String&gt;, b| {\n        Some(match a {\n            None =&gt; format!(&quot;{}&quot;, &amp;b),\n            Some(mut a) =&gt; {\n                write!(a, &quot;{}{}&quot;, separator, b).unwrap();\n                a\n            }\n        })\n    }) {\n        None =&gt; String::new(),\n        Some(rval) =&gt; rval,\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 688, "user_id": 4157647, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/82e77ab7941218ff6733d668b8049185?s=128&d=identicon&r=PG&f=1", "display_name": "Harvey Adcock", "link": "https://stackoverflow.com/users/4157647/harvey-adcock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7090, "favorite_count": 1, "accepted_answer_id": 36946085, "answer_count": 4, "score": 20, "last_activity_date": 1618415052, "creation_date": 1461942588, "last_edit_date": 1461958055, "question_id": 36941851, "link": "https://stackoverflow.com/questions/36941851/whats-an-idiomatic-way-to-print-an-iterator-separated-by-spaces-in-rust", "title": "What&#39;s an idiomatic way to print an iterator separated by spaces in Rust?", "body": "<p>I just want a space separated <code>String</code> of the argument variables obtained from <code>std::env::args()</code>, which I've been creating using the <code>fold</code> function like this:</p>\n\n<pre><code>std::env::args()\n    .fold(\"\".to_string(), |accum, s| accum + &amp;s + \" \")\n</code></pre>\n\n<p>However this creates an extra space at the end which is unwanted. I tried using the <code>truncate</code> function, but <code>truncate</code> doesn't return a <code>String</code>, just modifies the existing <code>String</code>, and also this would require the creation of an intermediate binding in order to use the <code>String</code>'s <code>len()</code> call to define how long the truncated <code>String</code> should be (which itself would require an intermediate binding due to Rust's current lexical borrowing rules I believe!)</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461937763, "post_id": 36938246, "comment_id": 61439141, "body": "<i>extract with .0</i> \u2014 that&#39;s a little bit of slickness that I did not expect. Very cool!"}, {"owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "edited": false, "score": 2, "creation_date": 1473190478, "post_id": 36938246, "comment_id": 66043058, "body": "It would be nice if the number of bytes written, returned from <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#tymethod.write\" rel=\"nofollow noreferrer\"><code>Write::write</code></a>, was <code>must_use</code>, not just the <code>Result</code> it&#39;s wrapped in.  Ignoring this, and assuming all the data was written, is likely to be an intermittent bug."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1484268097, "post_id": 36938246, "comment_id": 70452317, "body": "Sadness.  RFC 886 would have been fantastic--(what I was looking for, actually).  :("}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 13, "last_activity_date": 1526834445, "last_edit_date": 1526834445, "creation_date": 1461932471, "answer_id": 36938246, "question_id": 36938104, "link": "https://stackoverflow.com/questions/36938104/can-i-apply-must-use-to-a-function-result/36938246#36938246", "title": "Can I apply must_use to a function result?", "body": "<p>Not before Rust 1.27. In these versions, <code>#[must_use]</code> only applies to types, not individual values. </p>\n\n<p>One alternative is to define a simple wrapper type that is <code>#[must_use]</code>:</p>\n\n<pre><code>#[must_use = \"this value should be used (extract with .0)\"]\npub struct MustUse&lt;T&gt;(pub T);\n</code></pre>\n\n<p>Your function can then return <code>MustUse&lt;f64&gt;</code>, and users will get a warning if they write <code>calculate_the_thing(12.3)</code>, even suggesting the right way to get the thing they want: <code>let x = calculate_the_thing(12.3).0;</code>. <a href=\"https://play.rust-lang.org/?gist=75a7e99c1b4446a8a0b4076a83d6b3b7&amp;version=stable&amp;backtrace=0&amp;run=1\" rel=\"nofollow noreferrer\">For instance</a>:</p>\n\n<pre><code>fn calculate_the_thing(number: f64) -&gt; MustUse&lt;f64&gt; {\n    MustUse(number * 2.0)\n}\n\nfn main() {\n    calculate_the_thing(12.3); // whoops\n\n    let x = calculate_the_thing(12.3).0;\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused `MustUse` which must be used: this value should be used (extract with .0)\n --&gt; src/main.rs:9:5\n  |\n9 |     calculate_the_thing(12.3); // whoops\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(unused_must_use)] on by default\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 1, "creation_date": 1573681253, "post_id": 50437107, "comment_id": 103965689, "body": "Do you know any reason why this isn&#39;t the default behavior for functions to be annotated with the must_use annotation? Swift&#39;s behavior is reversed: we must explicitly annotate the function with @discardableResult when not wanting to do anything with the return type of the function (else: warning). This looks more error-free than Rust&#39;s approach. When creating a function with a return type, I think it is likely that the creator of the function wants the caller of the function to do something with the results. Adding the must_use annotation everything is a lot of noise and pain to maintain."}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1573681559, "post_id": 50437107, "comment_id": 103965828, "body": "When nothing is returned, nothing is expected. When returning a value and it isn&#39;t assigned to anything, I think it&#39;s weird that Rust things: &#39;O, nothing to see&#39; and a annotation must be added to produce any sort of warning. I can not imagine any case in which the Rust way of dealing with not-assigned values is more error-free than Swift&#39;s style (which is: always a warning when not assigning a value when calling a function but you can explicitly opt out by adding @discardableResult (this is pretty rare from what I know))"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1526834269, "creation_date": 1526834269, "answer_id": 50437107, "question_id": 36938104, "link": "https://stackoverflow.com/questions/36938104/can-i-apply-must-use-to-a-function-result/50437107#50437107", "title": "Can I apply must_use to a function result?", "body": "<p>Yes, you can, thanks to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1940-must-use-functions.md\" rel=\"noreferrer\">RFC 1940</a> and available starting in Rust 1.27. Your original code works as-is:</p>\n\n<pre><code>#[must_use]\nfn calculate_the_thing(number: f64) -&gt; f64 {\n    number * 2.0\n}\n\nfn main() {\n    calculate_the_thing(21.0);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused return value of `calculate_the_thing` which must be used\n --&gt; src/main.rs:7:5\n  |\n7 |     calculate_the_thing(21.0);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: #[warn(unused_must_use)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.71s\n     Running `target/debug/playground`\n</code></pre>\n"}], "owner": {"reputation": 1293, "user_id": 2249995, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7f53e653eca1eeefa2389227c066135c?s=128&d=identicon&r=PG", "display_name": "timlyo", "link": "https://stackoverflow.com/users/2249995/timlyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2228, "favorite_count": 0, "accepted_answer_id": 36938246, "answer_count": 2, "score": 6, "last_activity_date": 1526834445, "creation_date": 1461932028, "last_edit_date": 1526834303, "question_id": 36938104, "link": "https://stackoverflow.com/questions/36938104/can-i-apply-must-use-to-a-function-result", "title": "Can I apply must_use to a function result?", "body": "<p>I have a function that returns a <code>f64</code>. I'd like to ensure that the output from this function is used, rather than just ignored. Is there any way to do this?</p>\n\n<p>The return type is not used for error handling so wrapping it in a <code>Result</code> or <code>Option</code> doesn't really make sense.</p>\n\n<p>I'd like something similar to this:</p>\n\n<pre><code>#[must_use]\nfn calculate_the_thing(number: f64) -&gt; f64 {\n    number * 2.0\n}\n</code></pre>\n"}, {"tags": ["c++", "pointers", "data-structures", "rust"], "comments": [{"owner": {"reputation": 8756, "user_id": 416274, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa38a4e372afb202e6ab7eb1619372a8?s=128&d=identicon&r=PG", "display_name": "Robinson", "link": "https://stackoverflow.com/users/416274/robinson"}, "edited": false, "score": 0, "creation_date": 1461928967, "post_id": 36937025, "comment_id": 61433196, "body": "You can do the same in C++, just make left and right Tree rather than * Tree."}, {"owner": {"reputation": 4058, "user_id": 754407, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1b5c51ae68d0d76ce0e178f777f1742d?s=128&d=identicon&r=PG", "display_name": "hauron", "link": "https://stackoverflow.com/users/754407/hauron"}, "reply_to_user": {"reputation": 8756, "user_id": 416274, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa38a4e372afb202e6ab7eb1619372a8?s=128&d=identicon&r=PG", "display_name": "Robinson", "link": "https://stackoverflow.com/users/416274/robinson"}, "edited": false, "score": 8, "creation_date": 1461929082, "post_id": 36937025, "comment_id": 61433263, "body": "@Robinson and that would end the application immediately - due to infinite Tree object creation :)"}, {"owner": {"reputation": 361191, "user_id": 440558, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/9ZYta.jpg?s=128&g=1", "display_name": "Some programmer dude", "link": "https://stackoverflow.com/users/440558/some-programmer-dude"}, "edited": false, "score": 1, "creation_date": 1461929149, "post_id": 36937025, "comment_id": 61433308, "body": "In some cases it&#39;s actually an <i>advantage</i> in using pointers, for example in tree-like structures. How do you otherwise tell that a tree doesn&#39;t have any children? There&#39;s no &quot;null&quot; value that can be used for structures."}, {"owner": {"reputation": 361191, "user_id": 440558, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/9ZYta.jpg?s=128&g=1", "display_name": "Some programmer dude", "link": "https://stackoverflow.com/users/440558/some-programmer-dude"}, "edited": false, "score": 1, "creation_date": 1461929282, "post_id": 36937025, "comment_id": 61433379, "body": "As for why it&#39;s allowed in Rust, that&#39;s because Rust is not C++. Two different languages, no matter how similar their syntax is, can&#39;t really be compared. As for <i>why</i> it works in Rust is probably because it uses <i>references</i> (sort of like pointers) instead of the actual structure."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 4, "creation_date": 1461929451, "post_id": 36937025, "comment_id": 61433508, "body": "Rust is absolutely no different to C++ in this respect: you can&#39;t write <code>struct Tree { data: i32, left: Tree, right: Tree }</code>. Rust&#39;s <code>Vec</code> contains direction internally, it is in fact essentially identical to C++&#39;s <code>std::vector</code>. (Rust&#39;s structs and enums are values, like in C++, not pointers/references.)"}, {"owner": {"reputation": 67, "user_id": 1506304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e3f7e81be7da7d1b488bcabb894823d8?s=128&d=identicon&r=PG", "display_name": "zakum", "link": "https://stackoverflow.com/users/1506304/zakum"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1461929715, "post_id": 36937025, "comment_id": 61433674, "body": "@huon so the have the same problem as in C++. I guess using smart pointers would be the most C++ish way of writing this. (?)"}, {"owner": {"reputation": 96896, "user_id": 2296458, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/wbG2s.png?s=128&g=1", "display_name": "Cory Kramer", "link": "https://stackoverflow.com/users/2296458/cory-kramer"}, "edited": false, "score": 1, "creation_date": 1461930897, "post_id": 36937025, "comment_id": 61434472, "body": "@zakum If your concern is RAII and making sure the memory is cleaned up, then yes smart pointers are the way to go"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1461936279, "post_id": 36937025, "comment_id": 61438073, "body": "@zakum, if you&#39;re happy using <code>Box</code>/<code>Arc</code>/<code>Vec</code> in Rust, then the equivalents in C++ (<code>unique_ptr</code>/<code>shared_ptr</code>/<code>vector</code>) should be just what you&#39;re looking for. (I realise I made a typo in my previous comment: &quot;direction&quot; should be &quot;indirection&quot;.)"}], "answers": [{"comments": [{"owner": {"reputation": 67, "user_id": 1506304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e3f7e81be7da7d1b488bcabb894823d8?s=128&d=identicon&r=PG", "display_name": "zakum", "link": "https://stackoverflow.com/users/1506304/zakum"}, "edited": false, "score": 0, "creation_date": 1461929445, "post_id": 36937132, "comment_id": 61433505, "body": "I am aware of that. However, using C++ style of doing things would make some things easier, like &quot;garbage collection&quot;. That&#39;s why I&#39;m trying to find a way of defining a recursive data-structure  in C++. If I&#39;m not clear enough, just think of how std::Vector handles memory on its own."}], "tags": [], "owner": {"reputation": 96896, "user_id": 2296458, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/wbG2s.png?s=128&g=1", "display_name": "Cory Kramer", "link": "https://stackoverflow.com/users/2296458/cory-kramer"}, "is_accepted": false, "score": 2, "last_activity_date": 1461929129, "creation_date": 1461929129, "answer_id": 36937132, "question_id": 36937025, "link": "https://stackoverflow.com/questions/36937025/recursive-data-structures-without-the-use-of-pointers/36937132#36937132", "title": "Recursive data-structures without the use of pointers", "body": "<p>The reason pointers are used rather than values is because you would never be able to define your <code>struct</code> as its size would be infinitely recursive.</p>\n\n<pre><code>struct Tree{\n    int data;\n    struct Tree left, right;\n};\n</code></pre>\n\n<p>Neglecting padding etc, you could approximate the size of <code>Tree</code> as</p>\n\n<pre><code>sizeof(Tree) == sizeof(int) + sizeof(Tree) + sizeof(Tree)\n//                     ^data         ^left          ^right\n</code></pre>\n\n<p>but you can see that since <code>Tree</code> has two members of <code>Tree</code>, and those members themselves have two <code>Tree</code> members, and those have two <code>Tree</code> members.... you can see where this is going.</p>\n"}, {"comments": [{"owner": {"reputation": 67, "user_id": 1506304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e3f7e81be7da7d1b488bcabb894823d8?s=128&d=identicon&r=PG", "display_name": "zakum", "link": "https://stackoverflow.com/users/1506304/zakum"}, "edited": false, "score": 0, "creation_date": 1461929614, "post_id": 36937219, "comment_id": 61433602, "body": "How would the code be if using references? @Joachim Pileborg says Rust just does that.  However, the option of using <code>unique_ptrs</code> seems the most reasonable for me as well."}, {"owner": {"reputation": 4058, "user_id": 754407, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1b5c51ae68d0d76ce0e178f777f1742d?s=128&d=identicon&r=PG", "display_name": "hauron", "link": "https://stackoverflow.com/users/754407/hauron"}, "reply_to_user": {"reputation": 67, "user_id": 1506304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e3f7e81be7da7d1b488bcabb894823d8?s=128&d=identicon&r=PG", "display_name": "zakum", "link": "https://stackoverflow.com/users/1506304/zakum"}, "edited": false, "score": 1, "creation_date": 1461930255, "post_id": 36937219, "comment_id": 61434050, "body": "@zakum it&#39;d require a series of ugly hacks (e.g. a global vector of Tree, three ctors for Tree: either empty, with a child or with both children (since you cannot change reference pointed to variable after it&#39;s initialization), and that&#39;s just creation... what about deletion!). I&#39;d strongly recommend using unique_ptrs. Do note that in C++ if the raw pointers <i>never</i> leaves the object, it may be safe to use just that (just write a proper destructor, and avoid allocating in Tree constructor)."}, {"owner": {"reputation": 67, "user_id": 1506304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e3f7e81be7da7d1b488bcabb894823d8?s=128&d=identicon&r=PG", "display_name": "zakum", "link": "https://stackoverflow.com/users/1506304/zakum"}, "edited": false, "score": 0, "creation_date": 1461937893, "post_id": 36937219, "comment_id": 61439255, "body": "Thank you for your interesnt and time. I&#39;m accepting your answer as the best one.  I&#39;ll definetely try to use <code>uniqe_ptr</code> next time."}], "tags": [], "owner": {"reputation": 4058, "user_id": 754407, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/1b5c51ae68d0d76ce0e178f777f1742d?s=128&d=identicon&r=PG", "display_name": "hauron", "link": "https://stackoverflow.com/users/754407/hauron"}, "is_accepted": true, "score": 2, "last_activity_date": 1461929389, "creation_date": 1461929389, "answer_id": 36937219, "question_id": 36937025, "link": "https://stackoverflow.com/questions/36937025/recursive-data-structures-without-the-use-of-pointers/36937219#36937219", "title": "Recursive data-structures without the use of pointers", "body": "<p>The Rust example uses a vector of children - this can be empty as well.</p>\n\n<p>In C++, the member variable can be an object, a pointer or a reference (omitted for simplicity). </p>\n\n<p>Since a node object cannot be used directly (this would loop infinitely) and you do not wish to use a pointer, your options are:</p>\n\n<ul>\n<li><p>use a vector as well (though for a binary tree this is not the most convenient type - you could however limit it in code to always two elements),</p></li>\n<li><p>use a map (key could be an enum CHILD_LEFT, CHILD_RIGHT),</p></li>\n<li><p>reconsider using pointers, or better yet: smart pointers (this looks like a good use case for regular <code>unique_ptrs</code>).</p></li>\n</ul>\n"}], "owner": {"reputation": 67, "user_id": 1506304, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e3f7e81be7da7d1b488bcabb894823d8?s=128&d=identicon&r=PG", "display_name": "zakum", "link": "https://stackoverflow.com/users/1506304/zakum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2559, "favorite_count": 0, "accepted_answer_id": 36937219, "answer_count": 2, "score": 2, "last_activity_date": 1461929389, "creation_date": 1461928849, "question_id": 36937025, "link": "https://stackoverflow.com/questions/36937025/recursive-data-structures-without-the-use-of-pointers", "title": "Recursive data-structures without the use of pointers", "body": "<p>During my bachelor degree in CS I've come across the use of recursive data-structures a lot of times. In C++ I always ended up using pointers to make my data structures recursive, just like what I would do in C. </p>\n\n<p>A simplified example could be the following:</p>\n\n<pre><code>struct Tree{\n    int data;\n    struct Tree *left, *right;\n};\n</code></pre>\n\n<p>However, using pointers tends to be a risky job and involves a lot hours debugging and testing the code. For these resouns I would like to know if there is any other efficient way of defining recursive data-structures in C++.</p>\n\n<p>In other programming languages, like Rust, I've seen things like that:</p>\n\n<pre><code>struct Node {\n    children: Vec&lt;Node&gt;,\n    node_type: NodeType,\n}\n</code></pre>\n\n<p>Is there a safer and confortable way of defining such recursive structures in C++. One possibility would be to use std::Vector, but I am not aware of the performance of the method.</p>\n"}, {"tags": ["reference", "rust", "borrowing"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1461937604, "last_edit_date": 1592644375, "creation_date": 1461937604, "answer_id": 36940054, "question_id": 36936221, "link": "https://stackoverflow.com/questions/36936221/pass-self-reference-to-contained-objects-function/36940054#36940054", "title": "Pass self reference to contained object&#39;s function", "body": "<blockquote>\n<p>because <code>App</code> has move semantics so the value was moved into the <code>sender</code> function when it was called.</p>\n</blockquote>\n<p>It's true that it was moved into <code>sender</code>, but that's not what this message is about. Because <code>Player::receive</code> takes <code>self</code> by value, you actually had to decompose <code>app</code> and move <code>player</code> out of it to be able to call <code>receive</code>. At that point in time, <code>app</code> is now half-formed; it has no valid value for <code>player</code>! If <code>receive</code> tried to access <code>app.player</code>, it would be using invalid memory.</p>\n<blockquote>\n<p>&quot;cannot move out of borrowed content&quot; [...] because we've borrowed the reference to <code>self</code> when we went into the <code>sender</code> function.</p>\n</blockquote>\n<p>Right, which ties into above. Because we are borrowing an <code>App</code>, we cannot move <code>player</code> out of it, leaving the <code>App</code> in a invalid state.</p>\n<blockquote>\n<p>I should be able to borrow a reference and perform operations on it, no?</p>\n</blockquote>\n<p>And you can, so long as the thing you are taking a reference to is completely formed at that point. There were also two hints in the above exposition:</p>\n<ol>\n<li>\n<blockquote>\n<p>If <code>receive</code> tried to access <code>app.player</code></p>\n</blockquote>\n<p>If you don't access <code>app.player</code> in <code>receive</code>, restructure your code to pass the other components of <code>App</code> instead of the entire container. Maybe you have some <code>GameState</code> that is really what you want to pass.</p>\n</li>\n<li>\n<blockquote>\n<p>leaving the <code>App</code> in a invalid state</p>\n</blockquote>\n<p>You can use something like <a href=\"http://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\"><code>mem::replace</code></a> to put in a <em>different</em> <code>Player</code> into <code>app</code>. Then it's still completely (but differently) formed and can have a reference to it taken again.</p>\n</li>\n</ol>\n<p>Of course, the more practical solution is to change to accept references (<code>&amp;self</code>).</p>\n<blockquote>\n<p>But what if I want <code>app</code> to be mutable in <code>receive</code>?</p>\n</blockquote>\n<p>Yup! You'd get &quot;cannot borrow <code>*self</code> as mutable more than once at a time&quot;. The solutions are actually basically the same, however! Decompose your <code>App</code> into smaller, non-overlapping pieces or disassociate <code>player</code> from <code>self</code> before calling the method.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1461938653, "last_edit_date": 1495535291, "creation_date": 1461938606, "answer_id": 36940410, "question_id": 36936221, "link": "https://stackoverflow.com/questions/36936221/pass-self-reference-to-contained-objects-function/36940410#36940410", "title": "Pass self reference to contained object&#39;s function", "body": "<p>One way to follow <a href=\"https://stackoverflow.com/a/36940054/155423\">Shepmaster's solution</a></p>\n\n<blockquote>\n  <p>disassociate <code>player</code> from <code>self</code> before calling the method.</p>\n</blockquote>\n\n<p>Is to put the <code>player</code> in an <a href=\"https://doc.rust-lang.org/stable/std/option/index.html\" rel=\"nofollow noreferrer\"><code>Option</code></a>:</p>\n\n<pre><code>impl App {\n    pub fn sender(&amp;mut self) {\n        let mut player = self.player.take();\n        player.receive(&amp;mut self);\n        self.player = Some(player);\n    }\n}\n</code></pre>\n\n<p>One last resource is to use <a href=\"https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>.</p>\n"}], "owner": {"reputation": 907, "user_id": 900540, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/b5d720646701a0f61a5f782c9181c9d0?s=128&d=identicon&r=PG", "display_name": "DukeOf1Cat", "link": "https://stackoverflow.com/users/900540/dukeof1cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3054, "favorite_count": 1, "accepted_answer_id": 36940054, "answer_count": 2, "score": 4, "last_activity_date": 1461938653, "creation_date": 1461926536, "last_edit_date": 1461936431, "question_id": 36936221, "link": "https://stackoverflow.com/questions/36936221/pass-self-reference-to-contained-objects-function", "title": "Pass self reference to contained object&#39;s function", "body": "<p>I'm trying to grok Rust's ownership model. I'm trying to pass a reference to a containing object when calling a function on a struct. </p>\n\n<p>Here's my struct:</p>\n\n<pre><code>pub struct Player {}\n\nimpl Player {\n    pub fn receive(self, app: &amp;App) {\n\n    }\n}\n</code></pre>\n\n<p>As you can see, <code>receive</code> expects a reference to an <code>App</code> object.</p>\n\n<pre><code>pub struct App {\n    pub player: Player,\n}\n\nimpl App {\n    pub fn sender(self) {\n        // how to call player.test() and pass self as a reference?\n        self.player.receive(&amp;self);\n    }\n}\n</code></pre>\n\n<p>The above code gives me \"use of partially moved value: <code>self</code>\". Which makes sense, because <code>App</code> has move semantics so the value was moved into the <code>sender</code> function when it was called.</p>\n\n<p>If I change it so that <code>sender</code> takes a reference to <code>self</code> instead, I get \"cannot move out of borrowed content\", which also sort of makes sense because we've borrowed the reference to <code>self</code> when we went into the <code>sender</code> function.</p>\n\n<p>So what do I do? I understand why I can't store a reference to <code>App</code> inside <code>Player</code>, since that would lead to a doubly-linked structure. But I should be able to borrow a reference and perform operations on it, no?</p>\n\n<p>I couldn't find an answer in the official tutorial.</p>\n\n<p>I solved it by passing <code>self</code> as a reference in <code>receive</code>. But what if I want <code>app</code> to be mutable in <code>receive</code>? I can't pass <code>self</code> as mutable in <code>sender</code> because I'm also borrowing <code>player</code> as mutable. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1715, "user_id": 721809, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/TzkxT.png?s=128&g=1", "display_name": "Matej Kormuth", "link": "https://stackoverflow.com/users/721809/matej-kormuth"}, "edited": false, "score": 1, "creation_date": 1553845704, "post_id": 36928678, "comment_id": 97544699, "body": "How do I match on the values (implemented in <code>value</code> function)?"}, {"owner": {"reputation": 128, "user_id": 4012426, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000105441681/picture?type=large", "display_name": "Hutch Moore", "link": "https://stackoverflow.com/users/4012426/hutch-moore"}, "reply_to_user": {"reputation": 1715, "user_id": 721809, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/TzkxT.png?s=128&g=1", "display_name": "Matej Kormuth", "link": "https://stackoverflow.com/users/721809/matej-kormuth"}, "edited": false, "score": 0, "creation_date": 1575832843, "post_id": 36928678, "comment_id": 104689408, "body": "@MatejKormuth this is late, but, you would just match on the return value of the method. Assuming your enum value is stored in a variable called <code>some_myenum_value</code>, just do <code>match some_myenum_value.value() { ...</code>."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 70, "last_activity_date": 1594051030, "last_edit_date": 1594051030, "creation_date": 1461897726, "answer_id": 36928678, "question_id": 36928569, "link": "https://stackoverflow.com/questions/36928569/how-can-i-create-enums-with-constant-values-in-rust/36928678#36928678", "title": "How can I create enums with constant values in Rust?", "body": "<p>The best way to answer this is working out why you want constants in an enum: are you associating a value with each variant, or do you want each variant to <em>be</em> that value (like an <code>enum</code> in C or C++)?</p>\n<p>For the first case, it probably makes more sense to just leave the enum variants with no data, and make a function:</p>\n<pre><code>enum MyEnum {\n    A,\n    B,\n}\n\nimpl MyEnum {\n    fn value(&amp;self) -&gt; i32 {\n        match *self {\n            MyEnum::A =&gt; 123,\n            MyEnum::B =&gt; 456,\n        }\n    }\n}\n// call like some_myenum_value.value()\n</code></pre>\n<p>This approach can be applied many times, to associate many separate pieces of information with each variant, e.g. maybe you want a <code>.name() -&gt; &amp;'static str</code> method too. In the future, these functions can even be marked as <code>const</code> functions.</p>\n<p>For the second case, you can assign explicit integer tag values, just like C/C++:</p>\n<pre><code>enum MyEnum {\n    A = 123,\n    B = 456,\n}\n</code></pre>\n<p>This can be <code>match</code>ed on in all the same ways, but can also be cast to an integer <code>MyEnum::A as i32</code>. (Note that computations like <code>MyEnum::A | MyEnum::B</code> are not automatically legal in Rust: enums have specific values, they're not bit-flags.)</p>\n"}, {"tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 5, "last_activity_date": 1501880154, "last_edit_date": 1501880154, "creation_date": 1501878697, "answer_id": 45515041, "question_id": 36928569, "link": "https://stackoverflow.com/questions/36928569/how-can-i-create-enums-with-constant-values-in-rust/45515041#45515041", "title": "How can I create enums with constant values in Rust?", "body": "<p>People looking at this may stumble upon the introduction and deprecation of <code>FromPrimitive</code>. A possible replacement which might also be useful here is <a href=\"https://andersk.github.io/enum_primitive-rs/enum_primitive/\" rel=\"noreferrer\">enum_primitive</a>. It allows you to use C-like enums and have them cast between numeric and logical representation:</p>\n\n<pre><code>#[macro_use]\nextern crate enum_primitive;\nextern crate num;\n\nuse num::FromPrimitive;\n\nenum_from_primitive! {\n    #[derive(Debug, PartialEq)]\n    enum FooBar {\n        Foo = 17,\n        Bar = 42,\n        Baz,\n    }\n}\n\nfn main() {\n    assert_eq!(FooBar::from_i32(17), Some(FooBar::Foo));\n    assert_eq!(FooBar::from_i32(42), Some(FooBar::Bar));\n    assert_eq!(FooBar::from_i32(43), Some(FooBar::Baz));\n    assert_eq!(FooBar::from_i32(91), None);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 166, "user_id": 7142076, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f2d2f6539a6179d0841a76c8464ccf4?s=128&d=identicon&r=PG", "display_name": "sireliah", "link": "https://stackoverflow.com/users/7142076/sireliah"}, "is_accepted": false, "score": 3, "last_activity_date": 1594051143, "last_edit_date": 1594051143, "creation_date": 1546598730, "answer_id": 54037395, "question_id": 36928569, "link": "https://stackoverflow.com/questions/36928569/how-can-i-create-enums-with-constant-values-in-rust/54037395#54037395", "title": "How can I create enums with constant values in Rust?", "body": "<p>The <a href=\"https://crates.io/crates/enum-map\" rel=\"nofollow noreferrer\">enum-map</a> crate provides the ability to assign a value to the enum record. What is more, you can use this macro with different value types.</p>\n<pre><code>use enum_map::{enum_map, Enum}; // 0.6.2\n\n#[derive(Debug, Enum)]\nenum Example {\n    A,\n    B,\n    C,\n}\n\nfn main() {\n    let mut map = enum_map! {\n        Example::A =&gt; 1,\n        Example::B =&gt; 2,\n        Example::C =&gt; 3,\n    };\n    map[Example::C] = 4;\n\n    assert_eq!(map[Example::A], 1);\n\n    for (key, &amp;value) in &amp;map {\n        println!(&quot;{:?} has {} as value.&quot;, key, value);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 18987, "user_id": 2470818, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c3e0df5ee75b18ce0c8aeadf4433e151?s=128&d=identicon&r=PG&f=1", "display_name": "vallentin", "link": "https://stackoverflow.com/users/2470818/vallentin"}, "is_accepted": false, "score": 12, "last_activity_date": 1597578399, "last_edit_date": 1597578399, "creation_date": 1594049975, "answer_id": 62759540, "question_id": 36928569, "link": "https://stackoverflow.com/questions/36928569/how-can-i-create-enums-with-constant-values-in-rust/62759540#62759540", "title": "How can I create enums with constant values in Rust?", "body": "<p>Creating an &quot;enum&quot; with constant values, can be augmented using structs and <a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/trait-system/associated-constants.html\" rel=\"noreferrer\">associated constants</a>.\nThis is similar to how crates like <a href=\"https://crates.io/crates/bitflags\" rel=\"noreferrer\">bitflags</a> works and what it would generate.</p>\n<p>Additionally, to prevent direct instantiation of <code>MyEnum</code> you can tag it with <a href=\"https://doc.rust-lang.org/reference/attributes/type_system.html\" rel=\"noreferrer\"><code>#[non_exhaustive]</code></a>.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[non_exhaustive]\nstruct MyEnum;\n\nimpl MyEnum {\n    pub const A: i32 = 123;\n    pub const B: i32 = 456;\n}\n</code></pre>\n<p>Then you simply use the &quot;enum&quot; as you otherwise would, by accessing <code>MyEnum::A</code> and <code>MyEnum::B</code>.</p>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 30337, "favorite_count": 10, "accepted_answer_id": 36928678, "answer_count": 4, "score": 51, "last_activity_date": 1597578399, "creation_date": 1461897004, "last_edit_date": 1594049500, "question_id": 36928569, "link": "https://stackoverflow.com/questions/36928569/how-can-i-create-enums-with-constant-values-in-rust", "title": "How can I create enums with constant values in Rust?", "body": "<p>I can do this:</p>\n\n<pre><code>enum MyEnum {\n    A(i32),\n    B(i32),\n}\n</code></pre>\n\n<p>but not this:</p>\n\n<pre><code>enum MyEnum {\n    A(123), // 123 is a constant\n    B(456), // 456 is a constant\n}\n</code></pre>\n\n<p>I can create the structures for <code>A</code> and <code>B</code> with a single field and then implement that field, but I think there might be an easier way. Is there any?</p>\n"}, {"tags": ["arrays", "vector", "rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1461881186, "post_id": 36925673, "comment_id": 61413623, "body": "Can you show us what you&#39;ve tried? There should be no issue returning an array out of a function.. or a vector. Which one have you tried and how? (your title says array, your question says vector)."}, {"owner": {"reputation": 115, "user_id": 3519580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a7ef8e401c50b4e556de9229d9fc054?s=128&d=identicon&r=PG&f=1", "display_name": "user3519580", "link": "https://stackoverflow.com/users/3519580/user3519580"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1461910633, "post_id": 36925673, "comment_id": 61421628, "body": "Whoops, you&#39;re right - that&#39;s a typo"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461936217, "post_id": 36925673, "comment_id": 61438032, "body": "Related: <a href=\"http://stackoverflow.com/q/27876588/155423\">Why is the Copy trait needed for default (struct valued) array initialization?</a> and <a href=\"http://stackoverflow.com/q/31360993/155423\">What is the proper way to initialize a fixed length array?</a>. Duplicate of <a href=\"http://stackoverflow.com/q/28656387/155423\">Initialize a large, fixed-size array with non-Copy types</a>."}], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 3519580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a7ef8e401c50b4e556de9229d9fc054?s=128&d=identicon&r=PG&f=1", "display_name": "user3519580", "link": "https://stackoverflow.com/users/3519580/user3519580"}, "edited": false, "score": 1, "creation_date": 1461911519, "post_id": 36926695, "comment_id": 61422102, "body": "Would it be theoretically possible to create a macro which can generate a construct like this for any n? My own attempts have been stymied by the rule of rust macros expanding to a single expression, making it hard to have a variable number of expressions inside the square brackets."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 115, "user_id": 3519580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a7ef8e401c50b4e556de9229d9fc054?s=128&d=identicon&r=PG&f=1", "display_name": "user3519580", "link": "https://stackoverflow.com/users/3519580/user3519580"}, "edited": false, "score": 0, "creation_date": 1461946679, "post_id": 36926695, "comment_id": 61445017, "body": "With the current macro system, it&#39;s not possible."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1521561712, "last_edit_date": 1521561712, "creation_date": 1461883350, "answer_id": 36926695, "question_id": 36925673, "link": "https://stackoverflow.com/questions/36925673/how-can-i-initialize-an-array-using-a-function/36926695#36926695", "title": "How can I initialize an array using a function?", "body": "<p>I see two possible approaches</p>\n\n<p><strong>First</strong></p>\n\n<p>A simple solution using macro</p>\n\n<pre><code>macro_rules! array {\n    ($v: expr; 1) =&gt; ([$v]);\n    ($v: expr; 2) =&gt; ([$v, $v]);\n    ($v: expr; 3) =&gt; ([$v, $v, $v]);\n    ($v: expr; 4) =&gt; ([$v, $v, $v, $v]);\n    ($v: expr; 5) =&gt; ([$v, $v, $v, $v, $v]);\n    // until 32\n}\n\nlet a = array![Vec::new(); 3];\n</code></pre>\n\n<p>It's a bit verbose, but even the <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/array.rs#L216\" rel=\"nofollow noreferrer\">standard library</a> uses this kind of construct.</p>\n\n<p><strong>Second</strong></p>\n\n<p>After realizing a connection between this question and <a href=\"https://stackoverflow.com/questions/36919842/is-there-a-way-to-pre-un-leak-a-value\">another that I had answered before</a>, I wrote this solution using <a href=\"https://crates.io/crates/nodrop\" rel=\"nofollow noreferrer\">nodrop</a></p>\n\n<pre><code>extern crate nodrop;\n\nmacro_rules! array {\n    ($e: expr; $n:expr) =&gt; (\n        {\n            use std::mem;\n            use std::ptr;\n            use nodrop::NoDrop;\n\n            struct ArrayBuilder&lt;T&gt; {\n                len: usize,\n                data: *mut T,\n            }\n\n            impl&lt;T&gt; Drop for ArrayBuilder&lt;T&gt; {\n                fn drop(&amp;mut self) {\n                    unsafe {\n                        while self.len &gt; 0 {\n                            let offset = (self.len as isize) - 1;\n                            self.len -= 1;\n                            ptr::drop_in_place(self.data.offset(offset));\n                        }\n                    }\n                }\n            }\n\n            let mut v: NoDrop&lt;[_; $n]&gt; = NoDrop::new(unsafe {\n                mem::uninitialized()\n            });\n            // helps type inference for v\n            if false { v[0] = $e; }\n            let mut builder = ArrayBuilder {\n                len: 0,\n                data: (&amp;mut *v as *mut _) as *mut _\n            };\n            unsafe {\n                for i in 0..$n {\n                    ptr::write(builder.data.offset(i as isize), $e);\n                    builder.len = i + 1;\n                }\n            }\n            builder.len = 0;\n            v.into_inner()\n        }\n    )\n}\n\nlet a = array![Vec::new(); 3];\n</code></pre>\n\n<p>And a test that <em>indicates</em> that it does not leak memory</p>\n\n<pre><code>#[test]\nfn test() {\n    static mut COUNT: usize = 0;\n\n    #[derive(Debug)]\n    struct X(usize);\n\n    impl Drop for X {\n        fn drop(&amp;mut self) {\n            println!(\"drop {:?}\", self.0);\n        }\n    }\n\n    impl X {\n        fn new() -&gt; X {\n            unsafe {\n                if COUNT == 3 {\n                    panic!();\n                }\n                let x = X(COUNT);\n                COUNT += 1;\n                x\n            }\n        }\n    }\n\n    array![X::new(); 6];\n}\n</code></pre>\n\n<p>In this test, the method <code>X::new</code> panics when creating <code>X(3)</code>, so <code>X(0)</code>, <code>X(1)</code>, <code>X(2)</code> must be dropped.</p>\n\n<p><strong>Others</strong></p>\n\n<p>There is an unsafe solution <a href=\"https://stackoverflow.com/questions/28656387/initialize-a-large-fixed-size-array-with-non-copy-types\">here</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1555529624, "last_edit_date": 1555529624, "creation_date": 1521561599, "answer_id": 49388864, "question_id": 36925673, "link": "https://stackoverflow.com/questions/36925673/how-can-i-initialize-an-array-using-a-function/49388864#49388864", "title": "How can I initialize an array using a function?", "body": "<p>For your specific case, you can just use <code>Default</code>:</p>\n\n<pre><code>let v: [Vec&lt;String&gt;; 10] = Default::default();\n</code></pre>\n\n<p>For the general case, you can create an iterator out of your function and then collect into the array using <code>ArrayVec</code>:</p>\n\n<pre><code>use arrayvec::ArrayVec; // 0.4.10\nuse std::iter;\n\nfn make&lt;R&gt;(f: impl FnMut() -&gt; R) -&gt; [R; 10] {\n    let a: ArrayVec&lt;_&gt; = iter::repeat_with(f).collect();\n    a.into_inner()\n        .unwrap_or_else(|_| panic!(\"Did not have enough elements\"))\n}\n\nfn main() {\n    let mut a = 0;\n    let arr = make(|| {\n        a += 3;\n        a\n    });\n\n    println!(\"{:?}\", arr);\n    // [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/26757355/155423\">How do I collect into an array?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 3197, "user_id": 2203828, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/05Z1b.png?s=128&g=1", "display_name": "Telmo Trooper", "link": "https://stackoverflow.com/users/2203828/telmo-trooper"}, "is_accepted": false, "score": 1, "last_activity_date": 1595359743, "creation_date": 1595359743, "answer_id": 63021777, "question_id": 36925673, "link": "https://stackoverflow.com/questions/36925673/how-can-i-initialize-an-array-using-a-function/63021777#63021777", "title": "How can I initialize an array using a function?", "body": "<p>There is a crate called <a href=\"https://crates.io/crates/arr_macro\" rel=\"nofollow noreferrer\">arr_macro</a> that does exactly what you want:</p>\n<pre><code>fn main() {\n    let array: [Vec&lt;String&gt;; 10] = arr![Vec::new(); 10];\n    println!(&quot;{:?}&quot;, array) // [[], [], [], [], [], [], [], [], [], []]\n}\n</code></pre>\n"}], "owner": {"reputation": 115, "user_id": 3519580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a7ef8e401c50b4e556de9229d9fc054?s=128&d=identicon&r=PG&f=1", "display_name": "user3519580", "link": "https://stackoverflow.com/users/3519580/user3519580"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2473, "favorite_count": 0, "accepted_answer_id": 36926695, "answer_count": 3, "score": 7, "last_activity_date": 1595359743, "creation_date": 1461878531, "last_edit_date": 1461910659, "question_id": 36925673, "link": "https://stackoverflow.com/questions/36925673/how-can-i-initialize-an-array-using-a-function", "title": "How can I initialize an array using a function?", "body": "<p>I want to create an array of 10 empty vectors in Rust, but <code>[Vec::new(); 10]</code> doesn't work as <code>Vec</code> doesn't implement <code>Copy</code>. How can I do this, and in more general terms how can I initialize a array by repeatedly calling a function?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 5, "creation_date": 1461874130, "post_id": 36924530, "comment_id": 61410284, "body": "Why would you do this? (Insert melodramatic gasps.)"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1461875371, "post_id": 36924530, "comment_id": 61410958, "body": "To create a compact option type for bool, similar to <a href=\"https://github.com/llogiq/optional\" rel=\"nofollow noreferrer\">github.com/llogiq/optional</a>. The optional crate uses an enumeration, but that do not allow to return a reference to the inner value."}, {"owner": {"reputation": 8073, "user_id": 2852624, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/682806d261e4f00f77aa8633689a9558?s=128&d=identicon&r=PG&f=1", "display_name": "Matthias247", "link": "https://stackoverflow.com/users/2852624/matthias247"}, "edited": false, "score": 0, "creation_date": 1461876693, "post_id": 36924530, "comment_id": 61411649, "body": "Don&#39;t see any functional difference against something like <code>let f: u8 = if boolValue { 1u8 } else { 0u8 }</code> (not sure about the exact rust syntax). But the version without transmute will work without relying on any compiler behavior."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1461877090, "post_id": 36924530, "comment_id": 61411830, "body": "I need the transmute  for the purpose I described in the other comment."}], "answers": [{"comments": [{"owner": {"reputation": 1412, "user_id": 6346531, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/75aa9d2cb0f4e6bdf16e80bb06d5f8f1?s=128&d=identicon&r=PG", "display_name": "aksh1618", "link": "https://stackoverflow.com/users/6346531/aksh1618"}, "edited": false, "score": 0, "creation_date": 1592134891, "post_id": 36926578, "comment_id": 110309852, "body": "Related: <a href=\"https://github.com/rust-lang/rust/pull/46156\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/46156</a>"}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 1, "last_activity_date": 1461882611, "creation_date": 1461882611, "answer_id": 36926578, "question_id": 36924530, "link": "https://stackoverflow.com/questions/36924530/transmuting-bool-to-u8/36926578#36926578", "title": "Transmuting `bool` to `u8`", "body": "<p>There was never any RFC adopted defining the representation of <code>bool</code>.  That said, as a practical matter it's very unlikely it will change.</p>\n"}, {"comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1463069778, "post_id": 36927845, "comment_id": 61917253, "body": "Thanks for your answer. As you sad, this is the opposite direction of my question.  Anyway, it was a interesting answers."}], "tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": false, "score": 3, "last_activity_date": 1461916265, "last_edit_date": 1461916265, "creation_date": 1461891476, "answer_id": 36927845, "question_id": 36924530, "link": "https://stackoverflow.com/questions/36924530/transmuting-bool-to-u8/36927845#36927845", "title": "Transmuting `bool` to `u8`", "body": "<p>The bool representation seems to be very strict. It is represented as 1 and 0, but I'd like to caution that if for some insane reason this changes you'll get some strange behavior if you blindly assume that <code>true == &lt;some u8 that isn't what Rust really uses&gt;</code>. This is the opposite direction to your question, but I think it makes a point:</p>\n\n<pre><code>fn main() {\n    use std::mem;\n\n    let b: bool = unsafe {mem::transmute(4 as u8)};\n\n    println!(\"{} {} {}\", b, b == true, b == false);\n\n    if b {\n        println!(\"evaluates true\");\n    }\n\n    if !b {\n        println!(\"evaluates false\");\n    }\n\n    let x: u8 = unsafe{mem::transmute(b)};\n\n    println!(\"{}\", x);\n\n    let x = b as u8;\n\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>This produces a different output on nearly every configuration on that Playground I tested it on. With frequent flat out contradictions within the same program:</p>\n\n<h2>Debug/Stable:</h2>\n\n<pre><code>true true true\nevaluates false\n0\n0\n</code></pre>\n\n<p>This means it prints as true, compares as true with both true and false, but evaluates  in a branch as false. And transmutes back to 0.</p>\n\n<h2>Release/Stable:</h2>\n\n<pre><code>true false true\nevaluates true\n4\n4\n</code></pre>\n\n<p>This is probably what you'd \"expect\" if you were using a C-style bool, and has the correct transmute behavior. (Edit: actually, no it's not. It prints wrong! It compares the opposite to how it evaluates).</p>\n\n<h2>Debug/Beta:</h2>\n\n<pre><code>true true true\nevaluates false\n4\n4\n</code></pre>\n\n<p>Same as Debug/Stable, but transmutes back correctly (I assume this was probably a bug that got fixed).</p>\n\n<h2>Release/Beta:</h2>\n\n<p>Same as Release/Stable</p>\n\n<h2>Debug/Nightly:</h2>\n\n<p>Same as Debug/Beta</p>\n\n<h2>Release/Nightly:</h2>\n\n<p>Same as Release for others.</p>\n\n<h2>Bonus</h2>\n\n<p>If you change <code>println!(\"{} {} {}\", b, b == true, b == false);</code> to <code>println!(\"{} {}\", b, b == true);</code> you get different printing behavior.</p>\n\n<p>For instance, on Debug/Stable:</p>\n\n<pre><code>true false\nevaluates false\n0\n0\n</code></pre>\n\n<p>In addition, transmuting from <code>1 as u8</code> works as expected on all configurations, so it's not solely a <code>transmute</code> issue.</p>\n\n<hr>\n\n<p>The moral of the story is that, while this is unlikely to change, you potentially have one hell of a Heisenbug on your hands if it does (or you  make a mistake with the u8 and transmute it back or change it with an unsafe pointer). For most cases, I'd probably just stick with the perfectly working and safe <code>my_bool as u8</code>, though I understand your use case may prohibit this.</p>\n"}], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2595, "favorite_count": 0, "accepted_answer_id": 36926578, "answer_count": 2, "score": 3, "last_activity_date": 1461916265, "creation_date": 1461874042, "last_edit_date": 1461877647, "question_id": 36924530, "link": "https://stackoverflow.com/questions/36924530/transmuting-bool-to-u8", "title": "Transmuting `bool` to `u8`", "body": "<p>The following code works correctly with Rust 1.8 on amd64.</p>\n\n<pre><code>use std::mem;\n\nfn main() {\n    let f: u8 = unsafe { mem::transmute(false) };\n    let t: u8 = unsafe { mem::transmute(true) };\n    assert_eq!(0, f);\n    assert_eq!(1, t);\n}\n</code></pre>\n\n<p>My question is, can I assume that this will always works? I tried to find a reference about <code>bool</code> representation, but I only found <a href=\"https://github.com/rust-lang/rust/commit/b49e9fa794addc197e58743bdc120cb9740b73c0\" rel=\"nofollow\">this</a> and <a href=\"https://github.com/rust-lang/rust/issues/14608\" rel=\"nofollow\">this</a>, but I think that is not authoritative.</p>\n"}, {"tags": ["memory-leaks", "rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1461870990, "post_id": 36919842, "comment_id": 61408554, "body": "What are the performance improving that you are expecting? Not incrementing <code>len</code>?"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1461873116, "post_id": 36919842, "comment_id": 61409740, "body": "If I try to prevent leaking by catching panics (which only works on beta/nightly anyway for now), I get about 45% more throughput than collecting into a <code>Vec</code>. I presume I can get even better results by pre-leaking."}], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1461872127, "post_id": 36923601, "comment_id": 61409229, "body": "Thank you! That is exactly what I was looking for."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1461953975, "post_id": 36923601, "comment_id": 61448734, "body": "@llogiq If interest you, I wrote some code to answer other question that makes this kind of construct do not leak. See <a href=\"http://stackoverflow.com/questions/36925673/how-can-i-initialize-an-array-using-a-function\" title=\"how can i initialize an array using a function\">stackoverflow.com/questions/36925673/&hellip;</a>"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1461955032, "post_id": 36923601, "comment_id": 61449218, "body": "Thanks again \u2013 that&#39;s mostly equal to what I came up with. My benchmarks are very promising, too \u2013 very near to plain array construction."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1461872100, "last_edit_date": 1461872100, "creation_date": 1461870947, "answer_id": 36923601, "question_id": 36919842, "link": "https://stackoverflow.com/questions/36919842/is-there-a-way-to-pre-un-leak-a-value/36923601#36923601", "title": "Is there a way to pre- &amp; un-leak a value?", "body": "<p>It is possible using <a href=\"https://crates.io/crates/nodrop\" rel=\"nofollow\">nodrop</a>, but it could leak.</p>\n\n<pre><code>fn map_inner&lt;I, S, F, T, N&gt;(list: I, f: F) -&gt; GenericArray&lt;T, N&gt;\nwhere I: IntoIterator&lt;Item=S&gt;, F: Fn(&amp;S) -&gt; T, N: ArrayLength&lt;T&gt; {\n     unsafe {\n        // pre-leak the whole array, it's uninitialized anyway\n        let mut res : NoDrop&lt;GenericArray&lt;T, N&gt;&gt; = NoDrop::new(std::mem::uninitialized());\n        let i = list.into_iter();\n        for r in res.iter_mut() {\n            // this could panic anytime\n            std::ptr::write(r, f(i.next().unwrap()))\n        }\n        res.into_inner()\n    }\n}\n</code></pre>\n\n<p>Let's suppose that after the first item (<code>a</code>) is consumed from <code>i</code> and written to <code>r</code>, a panic happens. The remaining items from <code>i</code> would be drop, but the item <code>a</code> would not. Although leaking memory <a href=\"https://github.com/rust-lang/rfcs/pull/1066\" rel=\"nofollow\">is not</a> considered unsafe, it is not desirable.</p>\n\n<p>I think that the approach described in the question link is the way to go. It is similar to the <a href=\"https://doc.rust-lang.org/stable/src/collections/up/src/libcollections/vec.rs.html#702\" rel=\"nofollow\">Vec</a> and <a href=\"https://github.com/bluss/arrayvec/blob/master/src/lib.rs#L145\" rel=\"nofollow\">ArrayVec</a> implementations. I'm using a similar approach in array library that I'm writing.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 0, "accepted_answer_id": 36923601, "answer_count": 1, "score": 5, "last_activity_date": 1461872100, "creation_date": 1461859186, "last_edit_date": 1461866038, "question_id": 36919842, "link": "https://stackoverflow.com/questions/36919842/is-there-a-way-to-pre-un-leak-a-value", "title": "Is there a way to pre- &amp; un-leak a value?", "body": "<p>I'm currently looking into <a href=\"https://github.com/fizyk20/generic-array/pull/12\" rel=\"nofollow\">doing more stuff with arrays</a>, but I think the performance of those operations could be even better if we were allowed to somehow transmute into a <code>Leaked&lt;T&gt;</code> the array up front, only to un-leak it when the function ends. This would let us use leak amplification without a) introducing unsafety and b) setting up a <code>catch_panic(_)</code>. Is this somehow possible in Rust?</p>\n\n<p>For example, creating a generic array from an iterator (this obviously does not work):</p>\n\n<pre><code>#[inline]\nfn map_inner&lt;I, S, F, T, N&gt;(list: I, f: F) -&gt; GenericArray&lt;T, N&gt;\nwhere I: IntoIterator&lt;Item=S&gt;, F: Fn(&amp;S) -&gt; T, N: ArrayLength&lt;T&gt; {\n     unsafe {\n        // pre-leak the whole array, it's uninitialized anyway\n        let mut res : GenericArray&lt;Leaked&lt;T&gt;, N&gt; = std::mem::uninitialized();\n        let i = list.into_iter();\n        for r in res.iter_mut() {\n            // this could panic anytime\n            std::ptr::write(r, Leaked::new(f(i.next().unwrap())))\n        }\n        // transmuting un-leaks the array\n        std::mem::transmute::&lt;GenericArray&lt;Leaked&lt;T&gt;, N&gt;,\n                              GenericArray&lt;T, N&gt;&gt;(res)\n    }\n}\n</code></pre>\n\n<p>I should note that if we either had compile-time access to the size of <code>T</code> or a type that can hide its innards from borrowck (like <code>Leaked&lt;T&gt;</code> in the example), this is perfectly feasible.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1461836221, "post_id": 36910219, "comment_id": 61383976, "body": "Have you attempted to ping <code>crates.io</code>, and if so what was the result?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1461849679, "post_id": 36910219, "comment_id": 61393966, "body": "I was able to download that crate via cargo just now. Chances are there was some transient failure in the network. If this still occurs, try downloading that url (<code>https:&#47;&#47;crates.io&#47;api&#47;v1&#47;crates&#47;hyper&#47;0.9.1&#47;download</code>) directly."}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 312, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1461849524, "creation_date": 1461834846, "last_edit_date": 1461849524, "question_id": 36910219, "link": "https://stackoverflow.com/questions/36910219/unable-to-download-a-package-via-cargo-timeout", "title": "Unable to download a package via cargo -- timeout", "body": "<p>I generally have no issues with cargo but with this one package:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build --verbose\n Downloading hyper v0.9.1\nunable to get packages from source\n\nCaused by:\n  failed to download package `hyper v0.9.1` from https://crates.io/api/v1/crates/hyper/0.9.1/download\n\nCaused by:\n  Timeout was reached\n</code></pre>\n\n<p>Hyper v0.9.1 does exist. I see the same issue with 0.8 which also exists.</p>\n"}]