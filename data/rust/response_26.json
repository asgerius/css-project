[{"tags": ["rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "edited": false, "score": 0, "creation_date": 1436415693, "post_id": 31302463, "comment_id": 50605102, "body": "Thanks. That worked. Is there a way that I could print the struct pointed by <code>mqtt</code> ? I&#39;m getting a panic when I try this --&gt; println!(&quot;mqtt = {:?}&quot;, *mqtt);"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "edited": false, "score": 0, "creation_date": 1436423353, "post_id": 31302463, "comment_id": 50607959, "body": "maybe your <code>mosquitto_new</code> function returns a NULL, or it&#39;s because you are using an empty enum as representation. An empty enum cannot be constructed, therefor Rust inserts <code>unreachable!()</code> calls before any code that does interact with empty enums. Here&#39;s a minimal example: <a href=\"http://is.gd/BOEDgb\" rel=\"nofollow noreferrer\">is.gd/BOEDgb</a>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 20, "last_activity_date": 1436385343, "last_edit_date": 1495541787, "creation_date": 1436385343, "answer_id": 31302463, "question_id": 31302185, "link": "https://stackoverflow.com/questions/31302185/rust-ffi-casting-to-void-pointer/31302463#31302463", "title": "Rust FFI. Casting to void pointer", "body": "<p>The <code>ptr::null()</code> function returns a <code>*const T</code>, what you want is the <a href=\"https://doc.rust-lang.org/nightly/std/ptr/fn.null_mut.html\" rel=\"noreferrer\"><code>ptr::null_mut()</code></a> function, since the argument to your function is of type <code>*mut ::libc::c_void</code>.</p>\n\n<p>For passing an actual value, have a look at the answer to <a href=\"https://stackoverflow.com/questions/24191249/working-with-c-void-in-an-ffi\">Working with c_void in an FFI</a></p>\n"}], "owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11193, "favorite_count": 1, "accepted_answer_id": 31302463, "answer_count": 1, "score": 19, "last_activity_date": 1436385343, "creation_date": 1436384412, "question_id": 31302185, "link": "https://stackoverflow.com/questions/31302185/rust-ffi-casting-to-void-pointer", "title": "Rust FFI. Casting to void pointer", "body": "<p>I've a function which has prototype as below</p>\n\n<pre><code>//opaque struct\nstruct mosquitto;\n\nstruct mosquitto *mosquitto_new(const char *id, bool clean_session, void *obj);\n</code></pre>\n\n<p>In my c code, I'm calling it as below.</p>\n\n<pre><code>struct mosquitto *m = mosquitto_new(buf, true, NULL);\n</code></pre>\n\n<p>Now I want to call the above API in my rust code. rust-bindgen generated the following bindings</p>\n\n<pre><code>pub enum Struct_mosquitto { }\npub fn mosquitto_new(id: *const ::libc::c_char, clean_session: u8, obj: *mut ::libc::c_void) -&gt; *mut Struct_mosquitto;\n</code></pre>\n\n<p>When I'm trying to call the above API, I'm getting a mismatch at 3rd argument.</p>\n\n<pre><code>let s = CString::new(\"ravi\").unwrap();\nlet mqtt = mosquitto::mosquitto_new(s.as_ptr(), 1, ptr::null());\n</code></pre>\n\n<p>How do I pass NULL to *mut c_void?</p>\n\n<p><strong>BONUS QUESTION:</strong> How to pass a rust struct to *mut c_void ?</p>\n"}, {"tags": ["syntax", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1653, "user_id": 916330, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/zN25F.jpg?s=128&g=1", "display_name": "Nikolai Mavrenkov", "link": "https://stackoverflow.com/users/916330/nikolai-mavrenkov"}, "edited": false, "score": 0, "creation_date": 1436378361, "post_id": 31298912, "comment_id": 50590708, "body": "Thanks! I forgot about possibility of using destructing syntax in let bindings"}, {"owner": {"reputation": 1713, "user_id": 129543, "user_type": "registered", "accept_rate": 49, "profile_image": "https://www.gravatar.com/avatar/67cc8d7f6420918ab03b716ed9f5c152?s=128&d=identicon&r=PG", "display_name": "Jeenu", "link": "https://stackoverflow.com/users/129543/jeenu"}, "edited": false, "score": 0, "creation_date": 1608062413, "post_id": 31298912, "comment_id": 115466500, "body": "tldr: assignment works like patern matching. Equal number of ampersands cancels out across the <code>=</code>. RHS can have more number of amperands."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 12, "last_activity_date": 1436378317, "last_edit_date": 1436378317, "creation_date": 1436374352, "answer_id": 31298912, "question_id": 31298802, "link": "https://stackoverflow.com/questions/31298802/let-mut-syntax/31298912#31298912", "title": "Let &amp;mut syntax", "body": "<p>An easy way to test the type of something is to assign it to the wrong type:</p>\n\n<pre><code>let _: () = a;\n</code></pre>\n\n<p>In this case the value is an \"integral variable\", or a by-value integer. It is not mutable (as testing with <code>a += 1</code> shows).</p>\n\n<p>This is because you are using <strong>destructuring syntax</strong>. You are pattern matching your <code>&amp;mut 5</code> against an <code>&amp;mut _</code>, much like if you wrote</p>\n\n<pre><code>match &amp;mut 5 { &amp;mut a =&gt; {\n// rest of code\n} };\n</code></pre>\n\n<p>Thus you are adding a mutable reference and immediately dereferencing it.</p>\n\n<p>To bind a mutable reference to a value instead, you can do</p>\n\n<pre><code>let ref mut a = 5;\n</code></pre>\n\n<p>This is useful in destructuring to take references to multiple inner values.</p>\n"}], "owner": {"reputation": 1653, "user_id": 916330, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/zN25F.jpg?s=128&g=1", "display_name": "Nikolai Mavrenkov", "link": "https://stackoverflow.com/users/916330/nikolai-mavrenkov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1106, "favorite_count": 0, "accepted_answer_id": 31298912, "answer_count": 1, "score": 12, "last_activity_date": 1436378317, "creation_date": 1436374003, "last_edit_date": 1436377236, "question_id": 31298802, "link": "https://stackoverflow.com/questions/31298802/let-mut-syntax", "title": "Let &amp;mut syntax", "body": "<p>It is possible to make the following binding in Rust:</p>\n\n<pre><code>let &amp;mut a = &amp;mut 5;\n</code></pre>\n\n<p>But what does it mean exactly? For example, <code>let a = &amp;mut 5</code> creates an immutable binding of type <code>&amp;mut i32</code>, <code>let mut a = &amp;mut 5</code> creates a mutable binding of type <code>&amp;mut i32</code>. What about <code>let &amp;mut</code>?</p>\n"}, {"tags": ["input", "console", "rust"], "comments": [{"owner": {"reputation": 149509, "user_id": 4342498, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/l3j88.jpg?s=128&g=1", "display_name": "NathanOliver", "link": "https://stackoverflow.com/users/4342498/nathanoliver"}, "edited": false, "score": 0, "creation_date": 1436367052, "post_id": 31296059, "comment_id": 50583103, "body": "Why is this tagged as C++?"}, {"owner": {"reputation": 25, "user_id": 4920134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b016d5ae570237c1b3cf4ea2cbb4555?s=128&d=identicon&r=PG&f=1", "display_name": "The Alien", "link": "https://stackoverflow.com/users/4920134/the-alien"}, "edited": false, "score": 0, "creation_date": 1436367566, "post_id": 31296059, "comment_id": 50583522, "body": "Oops, sorry, just an accident."}, {"owner": {"reputation": 25, "user_id": 4920134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b016d5ae570237c1b3cf4ea2cbb4555?s=128&d=identicon&r=PG&f=1", "display_name": "The Alien", "link": "https://stackoverflow.com/users/4920134/the-alien"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436367749, "post_id": 31296059, "comment_id": 50583673, "body": "I think it is a duplicate... I never found that article before. Thanks, @ker! And again, sorry for my bad explanations. Should I delete this question or what? And for the reply, I misunderstood his answer."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1436367834, "post_id": 31296059, "comment_id": 50583746, "body": "If answers to that question answer yours, I&#39;ll mark this one as duplicate."}], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1436367793, "post_id": 31296299, "comment_id": 50583711, "body": "Sorry, but I still don&#39;t understand what you&#39;re trying to convey. My version of <code>start()</code> function above makes the appropriate piece of your Rust program behave exactly like the piece of C++ code, that&#39;s what I assumed you want. Please correct your question if this is not so."}, {"owner": {"reputation": 25, "user_id": 4920134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b016d5ae570237c1b3cf4ea2cbb4555?s=128&d=identicon&r=PG&f=1", "display_name": "The Alien", "link": "https://stackoverflow.com/users/4920134/the-alien"}, "edited": false, "score": 0, "creation_date": 1436367931, "post_id": 31296299, "comment_id": 50583816, "body": "Thanks! I didn&#39;t understand your thing, but now I understand the second example is what the user is <i>meant</i> to see, right?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 25, "user_id": 4920134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b016d5ae570237c1b3cf4ea2cbb4555?s=128&d=identicon&r=PG&f=1", "display_name": "The Alien", "link": "https://stackoverflow.com/users/4920134/the-alien"}, "edited": false, "score": 0, "creation_date": 1436367977, "post_id": 31296299, "comment_id": 50583850, "body": "Well, if you put it that way, I guess yes, that&#39;s right."}, {"owner": {"reputation": 25, "user_id": 4920134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b016d5ae570237c1b3cf4ea2cbb4555?s=128&d=identicon&r=PG&f=1", "display_name": "The Alien", "link": "https://stackoverflow.com/users/4920134/the-alien"}, "edited": false, "score": 0, "creation_date": 1436368035, "post_id": 31296299, "comment_id": 50583902, "body": "Thanks a lot! Now I will continue messing around with Rust. :-)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 0, "last_activity_date": 1436367899, "last_edit_date": 1436367899, "creation_date": 1436367209, "answer_id": 31296299, "question_id": 31296059, "link": "https://stackoverflow.com/questions/31296059/reading-part-of-a-line/31296299#31296299", "title": "Reading part of a line", "body": "<p>Do you mean that the user sees something like the following on the console?</p>\n\n<pre><code>hello\n&gt;&gt;\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>&gt;&gt; hello\n</code></pre>\n\n<p>?</p>\n\n<p>In that case, the problem is that Rust stdout is line-buffered by default, so unless you write a newline, nothing will be printed to the console.</p>\n\n<p>You need to flush the stdout after you write the line prefix:</p>\n\n<pre><code>fn start(){\n    print!(\"&gt;&gt;\");\n    io::stdout().flush().unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 25, "user_id": 4920134, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b016d5ae570237c1b3cf4ea2cbb4555?s=128&d=identicon&r=PG&f=1", "display_name": "The Alien", "link": "https://stackoverflow.com/users/4920134/the-alien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "closed_date": 1436367844, "accepted_answer_id": 31296299, "answer_count": 1, "score": 0, "last_activity_date": 1436367899, "creation_date": 1436366641, "last_edit_date": 1436367286, "question_id": 31296059, "link": "https://stackoverflow.com/questions/31296059/reading-part-of-a-line", "closed_reason": "Duplicate", "title": "Reading part of a line", "body": "<p>I'm totally new to Rust, and in fact just started today. (For those who saw my previous deleted question, you have my most sincere apology.)</p>\n\n<p>I'm just trying to build a simple application to sharpen my skills, but I meet a problem. I like to create something where you can just type stuff, and for those who know dunnet, start each line with two larger than signs.</p>\n\n<p>But I haven't really found out how to read the bits after the two signs. I searched on Google and StackOverflow, but this is the best I got:</p>\n\n<pre><code>//Starting a line\nfn start(){print!(\"&gt;&gt;\");}\n\n//Seeking input and saving input\nfn line_init() -&gt; String\n{\n    use std::io;\n    use std::io::BufRead;\n    start();\n    let mut input = String::new();\n    let stdin = io::stdin();\n    stdin.lock().read_line(&amp;mut input).unwrap();\n    input\n}\n\n//Main function\nfn main() {\n    loop\n    {\n        print!(\"{}\", line_init());\n    }\n}\n</code></pre>\n\n<p>But of course, the user input line lands on a new line, which isn't exactly what I want. This is the C++ version of the thing I want (in fact, I'm just duplicating my C++ project in Rust):</p>\n\n<pre><code>cout &lt;&lt; \"&gt;&gt;\";\nstring input;\ngetline(cin, input);\n</code></pre>\n\n<p>Sorry that this post is getting a bit long!</p>\n"}, {"tags": ["string", "rust", "slice"], "comments": [{"owner": {"reputation": 4138, "user_id": 30160, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9cc7a433f140236fb55c21d3266cced8?s=128&d=identicon&r=PG", "display_name": "Derrick Turk", "link": "https://stackoverflow.com/users/30160/derrick-turk"}, "edited": false, "score": 3, "creation_date": 1437954218, "post_id": 31289588, "comment_id": 51232823, "body": "The fact that this is the one of about five google results for this error message seems crazy to me! I hit this in my first test program post-1.0 (implementing &quot;cat&quot;)."}], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 7, "creation_date": 1436352753, "post_id": 31290258, "comment_id": 50572156, "body": "I&#39;d like to add that the documentation relates to the <i>representation</i>, but conceptually a string slice guarantees that its content is valid UTF-8, whereas a byte slice doesn&#39;t."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 82, "last_activity_date": 1436352020, "creation_date": 1436352020, "answer_id": 31290258, "question_id": 31289588, "link": "https://stackoverflow.com/questions/31289588/converting-a-str-to-a-u8/31290258#31290258", "title": "Converting a str to a &amp;[u8]", "body": "<p>You can use the <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\" rel=\"noreferrer\">as_bytes</a> method:</p>\n\n<pre><code>fn f(s: &amp;[u8]) {}\n\npub fn main() {\n    let x = \"a\";\n    f(x.as_bytes())\n}\n</code></pre>\n\n<p>or, in your specific example, you could use a byte literal:</p>\n\n<pre><code>let x = b\"a\";\nf(x)\n</code></pre>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 33697, "favorite_count": 7, "accepted_answer_id": 31290258, "answer_count": 1, "score": 67, "last_activity_date": 1436352441, "creation_date": 1436350305, "question_id": 31289588, "link": "https://stackoverflow.com/questions/31289588/converting-a-str-to-a-u8", "title": "Converting a str to a &amp;[u8]", "body": "<p>This seems trivial, but I cannot find a way to do it.</p>\n\n<p>For example,</p>\n\n<pre><code>fn f(s: &amp;[u8]) {}\n\npub fn main() {\n    let x = \"a\";\n    f(x)\n}\n</code></pre>\n\n<p>Fails to compile with:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;[u8]`,\n    found `&amp;str`\n(expected slice,\n    found str) [E0308]\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html\">documentation</a>, however, states that:</p>\n\n<blockquote>\n  <p>The actual representation of strs have direct mappings to slices: &amp;str\n  is the same as &amp;[u8].</p>\n</blockquote>\n"}, {"tags": ["iterator", "rust", "traits"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1436355455, "post_id": 31287855, "comment_id": 50573894, "body": "If using an associated type like suggested in the answers below isn&#39;t suitable (it may not be), then you can return a <code>Box&lt;Iterator&lt;Item=&amp;u8&gt;&gt;</code> instead. But this will require a heap allocation!"}], "answers": [{"tags": [], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "is_accepted": false, "score": 3, "last_activity_date": 1436345598, "last_edit_date": 1495540959, "creation_date": 1436345598, "answer_id": 31287856, "question_id": 31287855, "link": "https://stackoverflow.com/questions/31287855/trait-with-functions-that-return-an-iterator/31287856#31287856", "title": "trait with functions that return an iterator", "body": "<p>Based on another <a href=\"https://stackoverflow.com/questions/27535289/correct-way-to-return-an-iterator\">question</a>, I thought that the best way to do it would be to define the Iterator as a trait type, like so:</p>\n\n<pre><code>pub trait TraitA&lt;'a&gt; {\n    type I1: Iterator&lt;Item=u8&gt;;\n    type I2: Iterator&lt;Item=&amp;'a u8&gt;;\n\n    fn iter_i1(&amp;self) -&gt; Self::I1;\n    fn iter_i2(&amp;self) -&gt; Self::I2;\n}\n\nfn foo&lt;'a, A: TraitA&lt;'a&gt;&gt;(a: &amp;A) {\n    for x in a.iter_i1() { }\n    for x in a.iter_i2() { }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 11, "last_activity_date": 1436346944, "creation_date": 1436346944, "answer_id": 31288327, "question_id": 31287855, "link": "https://stackoverflow.com/questions/31287855/trait-with-functions-that-return-an-iterator/31288327#31288327", "title": "trait with functions that return an iterator", "body": "<p>Rust's libstd has one implementation of this, the trait <code>IntoIterator</code>. </p>\n\n\n\n<pre><code>/// Conversion into an `Iterator`\npub trait IntoIterator {\n    /// The type of the elements being iterated\n    type Item;\n\n    /// A container for iterating over elements of type `Item`\n    type IntoIter: Iterator&lt;Item=Self::Item&gt;;\n\n    /// Consumes `Self` and returns an iterator over it\n    fn into_iter(self) -&gt; Self::IntoIter;\n}\n</code></pre>\n\n<p>The trait has this peculiar by-value (<code>self</code>) formulation exactly to be able to express both \u201cinto iterator\u201d and \u201cborrow iterator\u201d semantics.</p>\n\n<p>Demonstrated by HashMap's <code>IntoIterator</code> implementations. (They use the hashmap's iterator structs <code>Iter</code> and <code>IntoIter</code>.)  What's interesting here is that the trait is implemented for the type <code>&amp;HashMap&lt;K, V, S&gt;</code> to express the \u201cborrow iterator\u201d.</p>\n\n\n\n<pre><code>impl&lt;'a, K, V, S&gt; IntoIterator for &amp;'a HashMap&lt;K, V, S&gt;\n    where K: Eq + Hash, S: HashState\n{\n    type Item = (&amp;'a K, &amp;'a V);\n    type IntoIter = Iter&lt;'a, K, V&gt;;\n\n    fn into_iter(self) -&gt; Iter&lt;'a, K, V&gt; {\n        self.iter()\n    }\n}\n\nimpl&lt;K, V, S&gt; IntoIterator for HashMap&lt;K, V, S&gt;\n    where K: Eq + Hash, S: HashState\n{\n    type Item = (K, V);\n    type IntoIter = IntoIter&lt;K, V&gt;;\n\n    /// Creates a consuming iterator, that is, one that moves each key-value\n    /// pair out of the map in arbitrary order. The map cannot be used after\n    /// calling this.\n    fn into_iter(self) -&gt; IntoIter&lt;K, V&gt; {\n        /* ... */\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2206, "favorite_count": 0, "accepted_answer_id": 31288327, "answer_count": 2, "score": 17, "last_activity_date": 1436346944, "creation_date": 1436345598, "question_id": 31287855, "link": "https://stackoverflow.com/questions/31287855/trait-with-functions-that-return-an-iterator", "title": "trait with functions that return an iterator", "body": "<p>I'm trying to build a trait with functions that return an iterator.</p>\n\n<p>My simple example looks like this:</p>\n\n<pre><code>pub trait TraitA {\n    fn things(&amp;self) -&gt; Iterator&lt;Item=&amp;u8&gt;;\n}\n\nfn foo&lt;A: TraitA&gt;(a: &amp;A) {\n    for x in a.things() { }\n}\n</code></pre>\n\n<p>Which does not work because the Iterator size type is not known at compile time.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11041, "user_id": 2766908, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/9Fjfv.png?s=128&g=1", "display_name": "pretzelhammer", "link": "https://stackoverflow.com/users/2766908/pretzelhammer"}, "edited": false, "score": 1, "creation_date": 1586808781, "post_id": 31281155, "comment_id": 108259587, "body": "The above example compiles without any errors as of Rust 1.31+"}], "answers": [{"comments": [{"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436325726, "post_id": 31282821, "comment_id": 50558723, "body": "&quot;Because you extend the return value&#39;s lifetime by assigning it to a value...&quot; -  Can I do something like &#39;tree : &#39;node (node not exceed tree life) ? And if it extends lifetime, why it borrows variable (lifetime is a lifetime, variable is variable)?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436326468, "post_id": 31282821, "comment_id": 50558878, "body": "The lifetime is for the reference, not for the referenced object. I&#39;m not sure if this answers your question."}, {"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436327782, "post_id": 31282821, "comment_id": 50559182, "body": "Ok, look here <a href=\"https://play.rust-lang.org/?gist=9728baf56379ee4699ec&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> . It seems that rust consider reference to object&#39;s element, as borrowing of object itself. Maybe this is the problem? Or am I wrong?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436328667, "post_id": 31282821, "comment_id": 50559431, "body": "&quot;It seems that rust consider reference to object&#39;s element, as borrowing of object itself.&quot; \u2192 That&#39;s the whole idea of borrowing, yes."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1436333097, "post_id": 31282821, "comment_id": 50560698, "body": "If it is possible, please consider not using &quot;extend&quot; word for lifetimes. This is not an official terminology, and there are a lot of questions here on how to &quot;extend&quot; lifetime in situations like <code>fn ret_s&lt;&#39;a&gt;() -&gt; &amp;&#39;a str { let x = &quot;abcde&quot;.to_owned(); &amp;x }</code> which is impossible. This may cause confusion for newcomers."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1436344241, "post_id": 31282821, "comment_id": 50566671, "body": "Yes, I believe you&#39;re right, but that&#39;s how things are now :( No, I don&#39;t have a synonym, probably because I&#39;ve never thought about this behavior like that."}, {"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436364422, "post_id": 31282821, "comment_id": 50580866, "body": "Ok, but I still don&#39;t understand why &quot;-&gt;&amp;&#39;a Node&quot; becomes &quot;&amp;mut&quot;."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1436373408, "post_id": 31282821, "comment_id": 50587652, "body": "@VladimirMatveev Well, I&#39;ve removed the word."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436373535, "post_id": 31282821, "comment_id": 50587751, "body": "@tower120 It doesn&#39;t. Declaring the return as <code>&amp;&#39;a</code> forces the <code>&amp;&#39;a mut</code> to live longer."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 3, "last_activity_date": 1524173705, "last_edit_date": 1524173705, "creation_date": 1436324545, "answer_id": 31282821, "question_id": 31281155, "link": "https://stackoverflow.com/questions/31281155/cannot-borrow-x-as-mutable-more-than-once-at-a-time/31282821#31282821", "title": "Cannot borrow `x` as mutable more than once at a time", "body": "<p>The behaviour is logical. Consider what</p>\n\n<pre><code>fn add&lt;'a&gt;(node: &amp;'a mut Node, data: &amp;'static str) -&gt; &amp;'a Node\n</code></pre>\n\n<p>means.</p>\n\n<p>This says that <code>&amp;mut Node</code> has a lifetime <strong>equal</strong> to the lifetime of its return value. Because you assign the return value to a name, it lives until the end of the scope. Thus, the mutable borrow also lives that long.</p>\n\n<p>If you can easily discard the return value, do so. You can just drop it on the floor:</p>\n\n<pre><code>let mut tree = Node {\n    datum: \"start\",\n    edges: Vec::new(),\n};\n\nadd(&amp;mut tree, \"level1\");\n\ntraverse(&amp;mut tree, &amp;|x| println!(\"{:}\", x));\n</code></pre>\n\n<p>or you can use a lexical scope to constrain it without dropping it completely.</p>\n\n<p>If you want to borrow the return <em>without</em> forcing the mutable borrow to live that long too, you are probably going to have to split the function in two. This is because you are not able to borrow the return value from the mutable borrow to do so.</p>\n"}, {"comments": [{"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436364188, "post_id": 31284065, "comment_id": 50580675, "body": "The hell it is. If compiler can&#39;t process function body to determine affected parts of structures, and there is no way to give a clue about this... Then a)Why they did this? (in the name of data races?); b)How do they suggest to code in such situations?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 3, "creation_date": 1436365378, "post_id": 31284065, "comment_id": 50581665, "body": "The compiler can process function bodies when they are in your crate, but how do you suggest to handle external <i>binary</i> dependencies? They don&#39;t contain enough information for the compiler. Therefore, this is the only way the model of ownership and borrowing can be made sound, so yes, &quot;they did this&quot; for a lot of things including fighting data races. As for how to code in such situations, well, there is no way than to restructure your code, for example, in your particular case you can split insertion and lookup into two methods, where insert won&#39;t return anything, thus avoiding the borrow."}, {"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436367041, "post_id": 31284065, "comment_id": 50583090, "body": "&quot;The compiler can process function bodies when they are in your crate, but how do you suggest to handle external binary dependencies?&quot; - Mark unsafe, do not handle (they are external, afterall). &quot;As for how to code in such situations, well, there is no way than to restructure your code&quot; - I don&#39;t like this. Restructure code just to make some sense to compiler? It doesn&#39;t sound right at all..."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 3, "creation_date": 1436367489, "post_id": 31284065, "comment_id": 50583455, "body": "Under &quot;external&quot; I meant arbitrary Rust code in external crate, <i>not</i> foreign C code for example (naturally, all foreign code should be handled via unsafe and raw pointers which do not contain borrowing information). You don&#39;t suggest making <i>all</i> external dependencies unsafe, do you? A lot of code in std, for example, contains functions like the one in your code. And it is not really restructuring code to make sense to the compiler, it is just following the ownership and borrowing model in general. Rust static analysis <i>is</i> very strict, but it is such for a good reason."}, {"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436367764, "post_id": 31284065, "comment_id": 50583691, "body": "&quot;Under &quot;external&quot; I meant arbitrary Rust code in external crate&quot; - And why it can&#39;t parse it too / add additional info about borrowing to binaries? &quot;A lot of code in std, for example, contains functions like the one in your code. &quot; - can you show them? I would like to look at them."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 1, "creation_date": 1436374005, "post_id": 31284065, "comment_id": 50588040, "body": "@tower120 There are a lot of reasons to depend only on the signature exposed. Yes, this makes parsing and checking much faster, since checks can be done without global analysis. But a more important reason is because the function signature defines the API. Having the true API subtly change when the implementation changes would be a nightmare for maintaining backwards compatibility. And of course one should restructure code to allow it to make sense to the compiler. It&#39;s well known that nearly any powerful static type system rejects some &quot;valid&quot; code. That&#39;s the price we pay."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 1, "creation_date": 1436378698, "post_id": 31284065, "comment_id": 50590915, "body": "@tower120, well, one of the notable examples are collections. All collections have methods which take them by reference or mutable reference and return a reference into themselves. Another example is <code>BufReader</code> which provides a reference to a buffer inside it. This is one of the most important and most often used patterns for structures which encapsulate complex piece of data and provide access to it."}, {"owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "edited": false, "score": 0, "creation_date": 1436395727, "post_id": 31284065, "comment_id": 50599967, "body": "I&#39;m just curious, is this rfc <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/811</a> fix this problem? I reduced code to this <a href=\"https://play.rust-lang.org/?gist=5b6b60a8b2798d5086d3&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>, and now it looks very simmiliar to this one <a href=\"https://github.com/rust-lang/rust/issues/6268\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/6268</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1436426784, "post_id": 31284065, "comment_id": 50609990, "body": "No, this is a different thing. Issue 6268 refers to code like <code>self.method(self.another_method())</code> where <code>method()</code> takes <code>&amp;mut self</code>. In this case <code>self.another_method()</code> can&#39;t be called because of borrowing conflicts. It is only related to scoping (i.e. borrowing behavior inside the same lexical block), it is not related to borrow checking across function boundaries."}, {"owner": {"reputation": 6001, "user_id": 1797000, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/5974f50172fd161e3cccac40ecbe3934?s=128&d=identicon&r=PG", "display_name": "hdante", "link": "https://stackoverflow.com/users/1797000/hdante"}, "edited": false, "score": 1, "creation_date": 1492808921, "post_id": 31284065, "comment_id": 74156258, "body": "Why was this answer upvoted and marked as correct ? The question was whether there was any workaround for the problem. This answer only explained what the problem was, it neither said if there were any workarounds, nor showed the workaround if it existed."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 6001, "user_id": 1797000, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/5974f50172fd161e3cccac40ecbe3934?s=128&d=identicon&r=PG", "display_name": "hdante", "link": "https://stackoverflow.com/users/1797000/hdante"}, "edited": false, "score": 2, "creation_date": 1493029873, "post_id": 31284065, "comment_id": 74220289, "body": "@hdante, there is no workaround, and it is stated in my comment, although indeed it isn&#39;t stated in the answer itself. I probably should fix this."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 25, "last_activity_date": 1524173645, "last_edit_date": 1524173645, "creation_date": 1436332851, "answer_id": 31284065, "question_id": 31281155, "link": "https://stackoverflow.com/questions/31281155/cannot-borrow-x-as-mutable-more-than-once-at-a-time/31284065#31284065", "title": "Cannot borrow `x` as mutable more than once at a time", "body": "<p>This happens because of how <code>add</code> is defined:</p>\n\n<pre><code>fn add&lt;'a&gt;(node: &amp;'a mut Node, data: &amp;'static str) -&gt; &amp;'a Node\n</code></pre>\n\n<p>Here it is specified that the lifetime of the resulting reference should be equal to the lifetime of the incoming reference. The <em>only</em> way it is possible (except for unsafe code) is that the resulting reference is somehow derived from the incoming reference, for example, it references some field inside the object the incoming reference points at:</p>\n\n<pre><code>struct X {\n    a: u32,\n    b: u32,\n}\n\nfn borrow_a&lt;'a&gt;(x: &amp;'a mut X) -&gt; &amp;'a mut u32 {\n    &amp;mut x.a\n}\n</code></pre>\n\n<p>However, there is <em>no</em> way for the compiler to know <em>what exactly</em> from the incoming structure is borrowed by looking only at the function signature (which, in general, is the only thing it can do when compiling code which uses this function). Therefore, it can't know that the following code is technically correct:</p>\n\n<pre><code>let mut x = X { a: 1, b: 2 };\nlet a = borrow_a(&amp;mut x);\nlet b = &amp;mut x.b;\n</code></pre>\n\n<p><em>We</em> know that <code>a</code> and <code>b</code> are disjoint because they point at different parts of the structure, but the compiler can't know that because there is nothing in <code>borrow_a</code>'s signature which would suggest it (and there can't be, Rust does not support it).</p>\n\n<p>Therefore, the only sensible thing the compiler could do is to consider <em>the whole</em> <code>x</code> to be borrowed until the reference returned by <code>borrow_a()</code> is dropped. Otherwise it would be possible to create two mutable references for the same data, which is a violation of Rust aliasing guarantees.</p>\n\n<p>Note that the following code is correct:</p>\n\n<pre><code>let mut x = X { a: 1, b: 2 };\nlet a = &amp;mut x.a;\nlet b = &amp;mut x.b;\n</code></pre>\n\n<p>Here the compiler <em>can</em> see that <code>a</code> and <code>b</code> never point to the same data, even though they do point inside of the same structure.</p>\n\n<p>There is no workaround for this, and the only solution would be to restructure the code so it doesn't have such borrowing patterns.</p>\n"}], "owner": {"reputation": 4055, "user_id": 1559666, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/056d49ed81998b09cfe70aebec986cc2?s=128&d=identicon&r=PG", "display_name": "tower120", "link": "https://stackoverflow.com/users/1559666/tower120"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11549, "favorite_count": 6, "accepted_answer_id": 31284065, "answer_count": 2, "score": 25, "last_activity_date": 1524173705, "creation_date": 1436311973, "last_edit_date": 1524173563, "question_id": 31281155, "link": "https://stackoverflow.com/questions/31281155/cannot-borrow-x-as-mutable-more-than-once-at-a-time", "title": "Cannot borrow `x` as mutable more than once at a time", "body": "<p>In the following code (<a href=\"https://play.rust-lang.org/?gist=19b3b350e48268057a11e0ce934049e9&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>struct Node {\n    datum: &amp;'static str,\n    edges: Vec&lt;Node&gt;,\n}\n\nfn add&lt;'a&gt;(node: &amp;'a mut Node, data: &amp;'static str) -&gt; &amp;'a Node {\n    node.edges.push(Node {\n        datum: data,\n        edges: Vec::new(),\n    });\n    &amp;node.edges[node.edges.len() - 1] // return just added one\n}\n\nfn traverse&lt;F&gt;(root: &amp;Node, callback: &amp;F)\nwhere\n    F: Fn(&amp;'static str),\n{\n    callback(root.datum);\n    for node in &amp;root.edges {\n        traverse(node, callback);\n    }\n}\n\nfn main() {\n    let mut tree = Node {\n        datum: \"start\",\n        edges: Vec::new(),\n    };\n\n    let lvl1 = add(&amp;mut tree, \"level1\");\n\n    traverse(&amp;mut tree, &amp;|x| println!(\"{:}\", x)); //I actually don't need mutability here\n}\n</code></pre>\n\n<p>I have this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `tree` as mutable more than once at a time\n  --&gt; src/main.rs:32:19\n   |\n30 |     let lvl1 = add(&amp;mut tree, \"level1\");\n   |                         ---- first mutable borrow occurs here\n31 | \n32 |     traverse(&amp;mut tree, &amp;|x| println!(\"{:}\", x)); //I actually don't need mutability here\n   |                   ^^^^ second mutable borrow occurs here\n33 | }\n   | - first borrow ends here\n</code></pre>\n\n<p>My question seems to be very similar to  <a href=\"https://stackoverflow.com/questions/24618233/why-does-rust-want-to-borrow-a-variable-as-mutable-more-than-once-at-a-time\">Why does Rust want to borrow a variable as mutable more than once at a time?</a>, but I'm not sure. If so, is there a workaround for this case?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 89, "user_id": 5091584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3cc1a0e14477d4ff4706fc566070546d?s=128&d=identicon&r=PG", "display_name": "Seif Lotfy", "link": "https://stackoverflow.com/users/5091584/seif-lotfy"}, "edited": false, "score": 0, "creation_date": 1436312459, "post_id": 31281064, "comment_id": 50555615, "body": "Sweet thanks. Worked. Looking at a new error though.  self.0[i as usize] == 0      &gt;&gt;&gt;&gt;&gt; error: binary operation <code>==</code> cannot be applied to type <code>bucket::Fingerprint</code> [E0369]"}, {"owner": {"reputation": 165, "user_id": 1102975, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/349d851184514340f1757f3a71b6807a?s=128&d=identicon&r=PG", "display_name": "luke-gru", "link": "https://stackoverflow.com/users/1102975/luke-gru"}, "edited": false, "score": 0, "creation_date": 1436323460, "post_id": 31281064, "comment_id": 50558186, "body": "Fingerprint is also a tuple struct, so you need it needs to be <code>self.0[i as usize].0 == 0</code>. Also, you could look into implementing the Index trait to make indexing into these tuple structs directly."}], "tags": [], "owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "is_accepted": true, "score": 7, "last_activity_date": 1436311358, "creation_date": 1436311358, "answer_id": 31281064, "question_id": 31281012, "link": "https://stackoverflow.com/questions/31281012/how-to-access-a-elements-of-a-struct-of-type-array/31281064#31281064", "title": "How to access a elements of a struct of type array", "body": "<p>The type <code>Bucket</code> is a tuple struct with one field, which you can access with <code>.0</code>.</p>\n\n<p>So you can change the code to:</p>\n\n<pre><code>        if (self.0[i as usize] == 0) {\n            self.0[i as usize] = fp;\n            return true;\n        }\n</code></pre>\n\n<p>You will also need to change the function argument from <code>&amp;self</code> to <code>&amp;mut self</code> so that you can mutate the fields of <code>self</code>.</p>\n"}], "owner": {"reputation": 89, "user_id": 5091584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3cc1a0e14477d4ff4706fc566070546d?s=128&d=identicon&r=PG", "display_name": "Seif Lotfy", "link": "https://stackoverflow.com/users/5091584/seif-lotfy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3127, "favorite_count": 2, "accepted_answer_id": 31281064, "answer_count": 1, "score": 7, "last_activity_date": 1436335634, "creation_date": 1436310999, "last_edit_date": 1436335634, "question_id": 31281012, "link": "https://stackoverflow.com/questions/31281012/how-to-access-a-elements-of-a-struct-of-type-array", "title": "How to access a elements of a struct of type array", "body": "<p>I created the following struct</p>\n\n<pre><code>pub const BUCKET_SIZE: usize = 4;\n\npub const FINGERPRINT_SIZE: usize = 1;\n\npub struct Fingerprint ([u8; FINGERPRINT_SIZE]);\n\nimpl Fingerprint {\n    pub fn new(bytes: [u8; FINGERPRINT_SIZE]) -&gt; Fingerprint {\n        return Fingerprint(bytes);\n    }\n}\n\npub struct Bucket ([Fingerprint; BUCKET_SIZE]);\n\nimpl Bucket {\n    pub fn new(fingerprints: [Fingerprint; BUCKET_SIZE]) -&gt; Bucket {\n        Bucket(fingerprints)\n    }\n    pub fn insert(&amp;self, fp: Fingerprint) -&gt; bool {\n        for i in 0..BUCKET_SIZE {\n\n\n\n            //HERE IS THE ERROR\n            if (self[i as usize] == 0) {\n                self[i as usize] = fp;\n                return true;\n            }\n\n\n\n        }\n        return false;\n    }\n}\n</code></pre>\n\n<p>When trying to compile it i get the following error</p>\n\n<pre><code>error: cannot index a value of type `&amp;bucket::Bucket`\n</code></pre>\n\n<p>Does it make more sense to make Buckets hold a property fingerprints instead?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1436345064, "post_id": 31279773, "comment_id": 50567204, "body": "What kind of begin parameter are you thinking of? If you mean <code>begin</code> is an offset, then you&#39;d just slice and then find <code>s[begin..].find(...)</code>"}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436425716, "post_id": 31279773, "comment_id": 50609310, "body": "Great comment, thanks."}], "answers": [{"comments": [{"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1436341267, "post_id": 31279991, "comment_id": 50564855, "body": "Thank you, I&#39;ll try that. Can you also tell me how performant is that? What does that <code>l = &amp;l[idx+1..]</code> do? Does it create new slice on stack? Does it copy the appropriate bytes? I&#39;m asking because I try to process large files and any such extra work might kill performance significantly."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1436345229, "post_id": 31279991, "comment_id": 50567306, "body": "Slices are references, they never represent copying nor do they represent any allocation of their own"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1436356563, "post_id": 31279991, "comment_id": 50574653, "body": "@stej: measure, measure, measure :) In this specific case, it might well be that the bounds check <code>l[idx+1..]</code> will cost more than the the assignment itself. You can check how a slice is implemented in the <a href=\"https://doc.rust-lang.org/std/raw/struct.Slice.html\" rel=\"nofollow noreferrer\"><code>std::raw</code></a> module: just an integer and pointer."}], "tags": [], "owner": {"reputation": 168655, "user_id": 582, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ev49G.png?s=128&g=1", "display_name": "Lily Ballard", "link": "https://stackoverflow.com/users/582/lily-ballard"}, "is_accepted": true, "score": 4, "last_activity_date": 1436483796, "last_edit_date": 1495540280, "creation_date": 1436305970, "answer_id": 31279991, "question_id": 31279773, "link": "https://stackoverflow.com/questions/31279773/find-a-string-starting-from-given-index/31279991#31279991", "title": "Find a string starting from given index", "body": "<p>You are right, there doesn't appear to be any trivial way of skipping several matches when searching a string. You can do it by hand though.</p>\n\n<pre><code>fn split_file(reader: BufReader&lt;File&gt;) {\n    for line in reader.lines() {\n        let mut l = &amp;line.as_ref().unwrap()[..]; // get a slice\n        for _ in 0..3 {\n            if let Some(idx) = l.find(\":\") {\n                l = &amp;l[idx+1..]\n            } else {\n                panic!(\"the line didn't have enough colons\"); // you probably shouldn't panic\n            }\n        }\n        // l now contains the date\n        ...\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>As <a href=\"https://stackoverflow.com/users/4491989/faiface\">faiface</a> points out <a href=\"https://stackoverflow.com/a/31323259/582\">below</a>, you can do this a bit cleaner with <code>splitn()</code>:</p>\n\n<pre><code>fn split_file(reader: BufReader&lt;File&gt;) {\n    for line in reader.lines() {\n        let l = line.unwrap();\n        if let Some(datetime) = l.splitn(4, ':').last() {\n            // datetime now contains the timestamp string\n            ...\n        } else {\n            panic!(\"line doesn't contain a timestamp\");\n        }\n    }\n}\n</code></pre>\n\n<p>You should go upvote his answer.</p>\n"}, {"comments": [{"owner": {"reputation": 168655, "user_id": 582, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ev49G.png?s=128&g=1", "display_name": "Lily Ballard", "link": "https://stackoverflow.com/users/582/lily-ballard"}, "edited": false, "score": 0, "creation_date": 1436308443, "post_id": 31280211, "comment_id": 50554370, "body": "I assumed the time was part of the date that stej wanted to parse. Together they represent a fully-specified timestamp."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1436341328, "post_id": 31280211, "comment_id": 50564903, "body": "It&#39;s true, I wanted to parse the time as well. This code might look good for small files and shows another way how to solve my problem, so I upvoted as well.."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 1, "last_activity_date": 1436306978, "creation_date": 1436306978, "answer_id": 31280211, "question_id": 31279773, "link": "https://stackoverflow.com/questions/31279773/find-a-string-starting-from-given-index/31280211#31280211", "title": "Find a string starting from given index", "body": "<p>Just the date and not also the time, right?</p>\n\n<pre><code>let test: String = \"06:31:53.012   index0:2015-01-06 00:00:13.084\".into();\n\nlet maybe_date = test.split_whitespace()\n    .skip(1)\n    .next()\n    .and_then(|substring| substring.split(\":\").skip(1).next());\n\nassert_eq!(maybe_date, Some(\"2015-01-06\"));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 168655, "user_id": 582, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ev49G.png?s=128&g=1", "display_name": "Lily Ballard", "link": "https://stackoverflow.com/users/582/lily-ballard"}, "edited": false, "score": 0, "creation_date": 1436483557, "post_id": 31323259, "comment_id": 50645479, "body": "Good call. I remembered that Rust had <code>split()</code> but for some reason I didn&#39;t think of <code>splitn()</code>. BTW, it might be conceptually cleaner to use <code>l.splitn(4, &#39;:&#39;).last()</code> instead of using <code>.nth(3)</code>."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1436539545, "post_id": 31323259, "comment_id": 50671379, "body": "That sounds good also. Already implemented the other solution, but I&#39;ll probably make some benchmarks including this solution as well."}], "tags": [], "owner": {"reputation": 317, "user_id": 4491989, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh6.googleusercontent.com/-Njq06U36KfI/AAAAAAAAAAI/AAAAAAAAACI/LDsRnAz9u_c/photo.jpg?sz=128", "display_name": "faiface", "link": "https://stackoverflow.com/users/4491989/faiface"}, "is_accepted": false, "score": 5, "last_activity_date": 1436460123, "last_edit_date": 1436460123, "creation_date": 1436459355, "answer_id": 31323259, "question_id": 31279773, "link": "https://stackoverflow.com/questions/31279773/find-a-string-starting-from-given-index/31323259#31323259", "title": "Find a string starting from given index", "body": "<p>There is a lot simpler solution to this problem in my opinion, and that is to use a <code>.splitn()</code> method. This method splits a string by a given pattern at most n times. For example:</p>\n\n<pre><code>let s = \"ab:bc:cd:de:ef\".to_string();\nprintln!(\"{:?}\", s.splitn(3, ':').collect::&lt;Vec&lt;_&gt;&gt;());\n// ^ prints [\"ab\", \"bc\", \"cd:de:ef\"]\n</code></pre>\n\n<p>In your case, you need to split the line into 4 parts separated by <code>':'</code> and take the 4th one (indexed from 0):</p>\n\n<pre><code>// assuming the line is correctly formatted\nlet date = l.splitn(4, ':').nth(3).unwrap();\n</code></pre>\n\n<p>If you don't want to use unwrap (the line might not be correctly formatted):</p>\n\n<pre><code>if let Some(date) = l.splitn(4, ':').nth(3) {\n    // parse the date and time\n}\n</code></pre>\n"}], "owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1086, "favorite_count": 0, "accepted_answer_id": 31279991, "answer_count": 3, "score": 8, "last_activity_date": 1436483796, "creation_date": 1436305107, "last_edit_date": 1436335667, "question_id": 31279773, "link": "https://stackoverflow.com/questions/31279773/find-a-string-starting-from-given-index", "title": "Find a string starting from given index", "body": "<p>What is the correct way how to find a substring if I need to start not from 0?</p>\n\n<p>I have this code:</p>\n\n<pre><code>fn SplitFile(reader: BufReader&lt;File&gt;) {\n  for line in reader.lines() {\n    let mut l = line.unwrap();\n    // l contains \"06:31:53.012   index0:2015-01-06 00:00:13.084\n    ...\n</code></pre>\n\n<p>I need to find third <code>:</code> and parse the date behind it. Still no idea how to do it, because <code>find</code> doesn't have any param like <code>begin</code> - see <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.find\" rel=\"noreferrer\">https://doc.rust-lang.org/std/string/struct.String.html#method.find</a>.</p>\n\n<p>(<em>I know I can use regex. I have it done, but I'd like to compare the performance - whether parsing by hand might the quicker than using regex.</em>)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1436310214, "post_id": 31279656, "comment_id": 50554984, "body": "<code>s.slice_unchecked(a, b)</code> == <code>&amp;s[a..b]</code> but without the bounds checking. (And <code>&amp;s[a..s.len()]</code> is <code>&amp;s[a..]</code>.)"}], "answers": [{"comments": [{"owner": {"reputation": 10003, "user_id": 442362, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/29534cdfdcf14f3f1bcacbf04e52c752?s=128&d=identicon&r=PG", "display_name": "Marius Danila", "link": "https://stackoverflow.com/users/442362/marius-danila"}, "edited": false, "score": 0, "creation_date": 1436308215, "post_id": 31280263, "comment_id": 50554294, "body": "The implementation relies on <code>slice_unchecked</code> as well. It seems my only choice is between an unstable function and or an unsafe call."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 10003, "user_id": 442362, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/29534cdfdcf14f3f1bcacbf04e52c752?s=128&d=identicon&r=PG", "display_name": "Marius Danila", "link": "https://stackoverflow.com/users/442362/marius-danila"}, "edited": false, "score": 1, "creation_date": 1436308512, "post_id": 31280263, "comment_id": 50554395, "body": "You can use string slicing if you don&#39;t want the unsafe: &amp;s[next_pos..s.len()]"}, {"owner": {"reputation": 10003, "user_id": 442362, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/29534cdfdcf14f3f1bcacbf04e52c752?s=128&d=identicon&r=PG", "display_name": "Marius Danila", "link": "https://stackoverflow.com/users/442362/marius-danila"}, "edited": false, "score": 1, "creation_date": 1436310433, "post_id": 31280263, "comment_id": 50555067, "body": "Still learning Rust - I did not know you can slice strings. I assume this is done at the byte level (and not char). Could you edit your answer to use string slicing?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 10003, "user_id": 442362, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/29534cdfdcf14f3f1bcacbf04e52c752?s=128&d=identicon&r=PG", "display_name": "Marius Danila", "link": "https://stackoverflow.com/users/442362/marius-danila"}, "edited": false, "score": 1, "creation_date": 1436312220, "post_id": 31280263, "comment_id": 50555555, "body": "yup, it&#39;s bytes, and sure"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 4, "last_activity_date": 1436312391, "last_edit_date": 1436312391, "creation_date": 1436307260, "answer_id": 31280263, "question_id": 31279656, "link": "https://stackoverflow.com/questions/31279656/implement-slice-shift-char-using-the-std-library/31280263#31280263", "title": "Implement slice_shift_char using the std library", "body": "<p>Well, you can look at the source code, and you'll get <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcollections/str.rs#L776-L778\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/blob/master/src/libcollections/str.rs#L776-L778</a> and <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/str/mod.rs#L1531-L1539\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/blob/master/src/libcore/str/mod.rs#L1531-L1539</a> . The second:</p>\n\n<pre><code>fn slice_shift_char(&amp;self) -&gt; Option&lt;(char, &amp;str)&gt; {\n    if self.is_empty() {\n        None\n    } else {\n        let ch = self.char_at(0);\n        let next_s = unsafe { self.slice_unchecked(ch.len_utf8(), self.len()) };\n        Some((ch, next_s))\n    }\n}\n</code></pre>\n\n<p>If you don't want the unsafe, you can just use a normal slice:</p>\n\n<pre><code>fn slice_shift_char(&amp;self) -&gt; Option&lt;(char, &amp;str)&gt; {\n    if self.is_empty() {\n        None\n    } else {\n        let ch = self.char_at(0);\n        let len = self.len();\n        let next_s = &amp;self[ch.len_utf8().. len];\n        Some((ch, next_s))\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 3, "last_activity_date": 1520180017, "last_edit_date": 1520180017, "creation_date": 1520176058, "answer_id": 49096796, "question_id": 31279656, "link": "https://stackoverflow.com/questions/31279656/implement-slice-shift-char-using-the-std-library/49096796#49096796", "title": "Implement slice_shift_char using the std library", "body": "<p>The unstable <code>slice_shift_char</code> function has been deprecated since Rust 1.9.0 and removed completely in Rust 1.11.0.</p>\n\n<p>As of Rust 1.4.0, the <a href=\"https://github.com/rust-lang/rust/issues/27754#issuecomment-195478632\" rel=\"nofollow noreferrer\">recommended approach</a> of implementing this is:</p>\n\n<ol>\n<li>Use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.chars\" rel=\"nofollow noreferrer\"><code>.chars()</code></a> to get an iterator of the <code>char</code> content</li>\n<li>Iterate on this iterator once to get the first character.</li>\n<li>Call <a href=\"https://doc.rust-lang.org/std/str/struct.Chars.html#method.as_str\" rel=\"nofollow noreferrer\"><code>.as_str()</code></a> on that iterator to recover the remaining uniterated string.</li>\n</ol>\n\n\n\n<pre><code>fn slice_shift_char(a: &amp;str) -&gt; Option&lt;(char, &amp;str)&gt; {\n    let mut chars = a.chars();\n    chars.next().map(|c| (c, chars.as_str()))\n}\n\nfn main() {\n    assert_eq!(slice_shift_char(\"hello\"), Some(('h', \"ello\")));\n    assert_eq!(slice_shift_char(\"\u013a\u1e3f\u0144\u00f3\u1e55\"), Some(('\u013a', \"\u1e3f\u0144\u00f3\u1e55\")));\n    assert_eq!(slice_shift_char(\"\"), None);\n}\n</code></pre>\n"}], "owner": {"reputation": 10003, "user_id": 442362, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/29534cdfdcf14f3f1bcacbf04e52c752?s=128&d=identicon&r=PG", "display_name": "Marius Danila", "link": "https://stackoverflow.com/users/442362/marius-danila"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "accepted_answer_id": 31280263, "answer_count": 2, "score": 6, "last_activity_date": 1520180017, "creation_date": 1436304717, "last_edit_date": 1436335703, "question_id": 31279656, "link": "https://stackoverflow.com/questions/31279656/implement-slice-shift-char-using-the-std-library", "title": "Implement slice_shift_char using the std library", "body": "<p>I'd like to use the <code>&amp;str</code> method <code>slice_shift_char</code>, but it is marked as unstable in the <a href=\"https://doc.rust-lang.org/stable/std/primitive.str.html#method.slice_shift_char\">documentation</a>:</p>\n\n<blockquote>\n  <p>Unstable: awaiting conventions about shifting and slices and may not\n  be warranted with the existence of the chars and/or char_indices\n  iterators</p>\n</blockquote>\n\n<p>What would be a good way to implement this method, with Rust's current std library? So far I have:</p>\n\n<pre><code>fn slice_shift_char(s: &amp;str) -&gt; Option&lt;(char, &amp;str)&gt; {\n    let mut ixs = s.char_indices();\n    let next = ixs.next();\n    match next {\n        Some((next_pos, ch)) =&gt; {\n            let rest = unsafe {\n                s.slice_unchecked(next_pos, s.len())\n            };\n            Some((ch, rest))\n        },\n        None =&gt; None\n    }\n}\n</code></pre>\n\n<p>I'd like to avoid the call to <code>slice_unchecked</code>. I'm using Rust 1.1.</p>\n"}, {"tags": ["rust", "fedora", "sdl-2", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1440131473, "post_id": 31278956, "comment_id": 52155466, "body": "Note the error message: &quot;<i>could not exec the linker `cc`: No such file or directory (os error 2)</i>&quot; \u2014 do you actually have <code>cc</code> installed? Can you run <code>cc</code> in the same terminal that you are running <code>cargo build</code> in?"}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 5, "last_activity_date": 1436307345, "creation_date": 1436307345, "answer_id": 31280288, "question_id": 31278956, "link": "https://stackoverflow.com/questions/31278956/sdl2-sys-wont-compile-could-not-exec-the-linker-no-such-file-or-directory/31280288#31280288", "title": "sdl2-sys won&#39;t compile - could not exec the linker: No such file or directory", "body": "<p>Do you have a C compiler installed? It looks to me like it's complaining about <code>cc</code>.</p>\n"}], "owner": {"reputation": 264, "user_id": 5091196, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45d86d7ffe6e9725e41ad2a94b3fea37?s=128&d=identicon&r=PG", "display_name": "batisteo", "link": "https://stackoverflow.com/users/5091196/batisteo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1414, "favorite_count": 0, "accepted_answer_id": 31280288, "answer_count": 1, "score": 4, "last_activity_date": 1440131701, "creation_date": 1436302037, "last_edit_date": 1440131701, "question_id": 31278956, "link": "https://stackoverflow.com/questions/31278956/sdl2-sys-wont-compile-could-not-exec-the-linker-no-such-file-or-directory", "title": "sdl2-sys won&#39;t compile - could not exec the linker: No such file or directory", "body": "<p>I'm following <a href=\"http://jadpole.github.io/arcaders/2015/07/04/arcaders-1-1\" rel=\"nofollow\">this Rust tutorial</a> and am struggling with compiling the first basic project. I am using Fedora, but am a newbie.</p>\n\n<pre><code>$ cargo build --verbose\n   Compiling sdl2-sys v0.5.0\n     Running `rustc /home/batisteo/.cargo/registry/src/github.com-1ecc6299db9ec823/sdl2-sys-0.5.0/build.rs --crate-name build_script_build --crate-type bin -C prefer-dynamic -g --cfg feature=\"default\" --out-dir /home/batisteo/arcade-rs/target/debug/build/sdl2-sys-d9571ac1c4bc4261 --emit=dep-info,link -L dependency=/home/batisteo/arcade-rs/target/debug/deps -L dependency=/home/batisteo/arcade-rs/target/debug/deps -Awarnings`\n   Fresh libc v0.1.8\n   Fresh bitflags v0.2.1\n   Fresh rustc-serialize v0.3.15\n   Fresh rand v0.3.8\n   Fresh num v0.1.25\nerror: could not exec the linker `cc`: No such file or directory (os error 2)\nerror: aborting due to previous error\nCould not compile `sdl2-sys`.\n\nCaused by:\n  Process didn't exit successfully: `rustc /home/batisteo/.cargo/registry/src/github.com-1ecc6299db9ec823/sdl2-sys-0.5.0/build.rs --crate-name build_script_build --crate-type bin -C prefer-dynamic -g --cfg feature=\"default\" --out-dir /home/batisteo/arcade-rs/target/debug/build/sdl2-sys-d9571ac1c4bc4261 --emit=dep-info,link -L dependency=/home/batisteo/arcade-rs/target/debug/deps -L dependency=/home/batisteo/arcade-rs/target/debug/deps -Awarnings` (exit code: 101)\n</code></pre>\n\n<p>I have the same input before or after installing SDL:</p>\n\n<pre><code>$ sudo dnf install SDL2-devel\n</code></pre>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1436301362, "post_id": 31278488, "comment_id": 50551349, "body": "However, it may be possible to achieve the equivalent by writing a macro, as with the standard vec!"}, {"owner": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1436305749, "post_id": 31278488, "comment_id": 50553368, "body": "@trentcl Yeah, I think that&#39;s what I&#39;ll have to do. I also found <a href=\"https://github.com/rust-lang/rfcs/issues/1038\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/1038</a> which seems to be exactly what I&#39;m talking about. Hopefully some day it will be implemented."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "edited": false, "score": 0, "creation_date": 1436350858, "post_id": 31278488, "comment_id": 50571006, "body": "@dobafresh: It is very much desired, and intimately linked to compile-time function evaluation (as having just raw numbers without the ability to modify them is not as useful)."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 6, "last_activity_date": 1436300330, "creation_date": 1436300330, "answer_id": 31278488, "question_id": 31277472, "link": "https://stackoverflow.com/questions/31277472/create-a-generic-type-parameterized-by-a-number/31278488#31278488", "title": "Create a generic type parameterized by a number", "body": "<p>This isn't possible in Rust 1.0. The size of an array can't be generic.</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 4, "last_activity_date": 1436345658, "creation_date": 1436345658, "answer_id": 31287877, "question_id": 31277472, "link": "https://stackoverflow.com/questions/31277472/create-a-generic-type-parameterized-by-a-number/31287877#31287877", "title": "Create a generic type parameterized by a number", "body": "<p>It will be possible in the future, but until then, the best way to do it is:</p>\n\n<p>Use a base trait for a fixed size array, implement it with macros for all the sizes you need. With the trait, you don't need more macros for the rest of the functionality.</p>\n\n<p>In normal use I bet that you don't have to type <code>let vec = Ngram::&lt;[String; 5]&gt;::new();</code>, you can just say:</p>\n\n<pre><code>let vec = Ngram::&lt;[_; 5]&gt;::new();\n</code></pre>\n\n<p>which is slightly better. If you use your supporting trait to constrain the array's element type to <code>String</code>, then this writing is never ambiguous.</p>\n\n<p>See the <a href=\"https://github.com/bluss/arrayvec\" rel=\"nofollow\">crate arrayvec's code</a> for more info.</p>\n"}], "owner": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 795, "favorite_count": 0, "closed_date": 1471180010, "accepted_answer_id": 31287877, "answer_count": 2, "score": 10, "last_activity_date": 1436757327, "creation_date": 1436296774, "last_edit_date": 1436757327, "question_id": 31277472, "link": "https://stackoverflow.com/questions/31277472/create-a-generic-type-parameterized-by-a-number", "closed_reason": "Duplicate", "title": "Create a generic type parameterized by a number", "body": "<p>I'm writing an NGram library in Rust. I want to create a 'generic' ngram where the size doesn't need to be determined until compilation time (as opposed to when I code it). A little code might help make that clear.</p>\n\n<p>Here is basically what I want to be able to do:</p>\n\n<pre><code>pub type Ngram&lt;N&gt; = Vec&lt;[String; N]&gt;;\n</code></pre>\n\n<p>and then to use it, you simply do something like this:</p>\n\n<pre><code>let vec = Ngram::&lt;5&gt;::new();\n</code></pre>\n\n<p>And you would have created a five-gram (or more precisely, a <code>Vec&lt;[String; 5]&gt;</code>). Is something like that possible. I really don't want to do something like this:</p>\n\n<pre><code> pub type Ngram&lt;N&gt; = Vec&lt;N&gt;;\n ...\n let vec = Ngram::&lt;[String; 5]&gt;::new();\n</code></pre>\n\n<p>That would mostly defeat the purpose of creating the type.</p>\n"}, {"tags": ["debugging", "gdb", "rust"], "answers": [{"comments": [{"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 1, "creation_date": 1436296594, "post_id": 31276238, "comment_id": 50548783, "body": "That would produce a trace to where the error first got converted in my code. It&#39;s certainly something, but I&#39;d prefer to see where it originated in the library that produced it. It would be <i>really</i> nice if I could have <code>gdb</code> break there so I could examine state rather than just get a backtrace."}, {"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 1, "creation_date": 1436297415, "post_id": 31276238, "comment_id": 50549234, "body": "BTW, a similar alternative I had seen on Reddit is rust-throw. <a href=\"https://github.com/daboross/rust-throw/\" rel=\"nofollow noreferrer\">github.com/daboross/rust-throw</a>"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1436292638, "creation_date": 1436292638, "answer_id": 31276238, "question_id": 31276098, "link": "https://stackoverflow.com/questions/31276098/how-do-you-track-the-source-of-an-error/31276238#31276238", "title": "How do you track the source of an error?", "body": "<p>If you want to have stacktraces with <code>Result&lt;T, E&gt;</code>, you can build a type that does that: <a href=\"http://phildawes.net/blog/2015/06/17/rust-stacktrace/\" rel=\"nofollow\">http://phildawes.net/blog/2015/06/17/rust-stacktrace/</a></p>\n"}, {"comments": [{"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 0, "creation_date": 1436382059, "post_id": 31282177, "comment_id": 50592974, "body": "Given GDB&#39;s apparent inability to understand Rust return values, I&#39;m thinking that is no longer the way to go. I was trying reverse debugging because it worked really well when I used it in <code>ocamldebug</code>."}], "tags": [], "owner": {"reputation": 18871, "user_id": 1442050, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e975c669f2ce0f2be4613f1e123864b3?s=128&d=identicon&r=PG", "display_name": "Tom Tromey", "link": "https://stackoverflow.com/users/1442050/tom-tromey"}, "is_accepted": false, "score": 2, "last_activity_date": 1436319739, "creation_date": 1436319739, "answer_id": 31282177, "question_id": 31276098, "link": "https://stackoverflow.com/questions/31276098/how-do-you-track-the-source-of-an-error/31282177#31282177", "title": "How do you track the source of an error?", "body": "<p>Reverse debugging isn't as easy as <code>reverse-step</code>.  You have to stop at some point before the failure and ask gdb to <code>record</code>.  Then at some later point you can reverse.</p>\n\n<p>The built-in record facility is on the slow side.  And, it doesn't support multi-threading.  It's difficult to recommend it beyond some smallish use cases.</p>\n\n<p>If you're serious about pursuing reverse-debugging for this problem, let me recommend <a href=\"http://rr-project.org/\" rel=\"nofollow\">rr-project</a>.  It's a much better way to approach this.</p>\n"}], "owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1436381813, "creation_date": 1436292182, "last_edit_date": 1436381813, "question_id": 31276098, "link": "https://stackoverflow.com/questions/31276098/how-do-you-track-the-source-of-an-error", "title": "How do you track the source of an error?", "body": "<p>For panics, <code>RUST_BACKTRACE=1</code> is very useful, but it doesn't do much for non-fatal errors.</p>\n\n<p>For example, I have some code that ends with</p>\n\n<pre><code>match res {\n    Ok(()) =&gt; (),\n    Err(_) =&gt;\n        println_err!(\"{:?}\", res),\n}\n</code></pre>\n\n<p>Unfortunately, running in <code>gdb</code> doesn't do a whole lot by default, since nothing exceptional is happening. (Ye olde C++ behavior where unhandled exceptions would call <code>abort()</code> and <code>gdb</code> would break on <code>SIGABORT</code> by default was pretty convenient.)</p>\n\n<p>Next, since <code>gdb</code> now supports reverse execution, I thought I could debug it by setting a breakpoint at the <code>println_err</code> line and reversing until I found the source of the error. </p>\n\n<pre><code>(gdb) reverse-step\nTarget multi-thread does not support this command.\n</code></pre>\n\n<p>A quick search revealed I should do something like</p>\n\n<pre><code>(gdb) set libthread-db-search-path /etc/nonexistent\n(gdb) start\n</code></pre>\n\n<p>but then I get</p>\n\n<pre><code>(gdb) reverse-step\nTarget child does not support this command.\n</code></pre>\n\n<p>Does that mean reverse debugging just isn't supported in Rust? Or am I doing something wrong/suboptimal?</p>\n\n<p>Is there a better solution than to manually go through each function that forwarded the error (with <code>try!()</code>) in order to find out where it originated?</p>\n\n<p>Edit: Making use of manual breakpoints and restarting, I got to the point where the function was returning, but GDB can't seem to tell what the return value is:</p>\n\n<pre><code>(gdb) finish\nRun till exit from #0  cafs::reader::Reader::read_rawblock (self=0x7fffffffd628, h=Sha256 = {...}) at src/reader.rs:90\n0x00005555556a096b in cafs::reader::Reader::read_blockref_vec (self=0x7fffffffd628, r=Reader = {...}) at src/reader.rs:101\n101             let raw = try!(self.read_rawblock(h));\nValue returned is $3 = {union Result&lt;collections::vec::Vec&lt;u8&gt;, std::io::error::Error&gt; (struct Reader *, struct Sha256)} 0x0\n(gdb)\n</code></pre>\n\n<p>So, maybe GDB will not be all that useful...</p>\n"}, {"tags": ["string", "rust", "trim"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1436345337, "post_id": 31276059, "comment_id": 50567376, "body": "<code>.trim_right_matches()</code> is going to be stable in Rust 1.2"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436371577, "post_id": 31276059, "comment_id": 50586494, "body": "And <code>.trim_right()</code>, which you can use to do this without <code>.to_string()</code>. Just use the length of the trimmed str to truncate with."}], "answers": [{"comments": [{"owner": {"reputation": 365, "user_id": 4195183, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d36a5d9eedc9a446a16a318005f9d25f?s=128&d=identicon&r=PG&f=1", "display_name": "robitex", "link": "https://stackoverflow.com/users/4195183/robitex"}, "edited": false, "score": 0, "creation_date": 1436336710, "post_id": 31276316, "comment_id": 50562190, "body": "Thank you Steve. You are in right. Sometimes the hands on keyboard are not connected so well... :-)"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 3, "last_activity_date": 1436292912, "creation_date": 1436292912, "answer_id": 31276316, "question_id": 31276059, "link": "https://stackoverflow.com/questions/31276059/is-there-a-way-to-trim-a-string-without-allocating-another-one/31276316#31276316", "title": "Is there a way to trim a String without allocating another one?", "body": "<blockquote>\n  <p>but probably an in-place action on a String is not a good idea.</p>\n</blockquote>\n\n<p>The <em>binding</em> is mutable in <code>mut s: &amp;String</code>, not the string itself. You would take <code>s: &amp;mut String</code> if you wanted to mutate the string itself.</p>\n\n<p>That said, I don't think there's anything in the standard library to do this.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1612899201, "last_edit_date": 1612899201, "creation_date": 1436293657, "answer_id": 31276523, "question_id": 31276059, "link": "https://stackoverflow.com/questions/31276059/is-there-a-way-to-trim-a-string-without-allocating-another-one/31276523#31276523", "title": "Is there a way to trim a String without allocating another one?", "body": "<blockquote>\n<p>Is there a way to trim a <code>String</code> without allocating another one?</p>\n</blockquote>\n<p>Yes, you can use <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.truncate\" rel=\"nofollow noreferrer\"><code>truncate</code></a> to remove trailing parts of the string:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>const TRAILER: &amp;'static str = &quot;UNI&quot;;\n\nfn read_csv_rilev(s: &amp;mut String) {\n    while s.ends_with(TRAILER) {\n        let len = s.len();\n        let new_len = len.saturating_sub(TRAILER.len());\n        s.truncate(new_len);\n    }\n}\n\nfn main() {\n    let mut code = &quot;Hello WorldUNIUNIUNI&quot;.into();\n    \n    read_csv_rilev(&amp;mut code);\n    \n    assert_eq!(&quot;Hello World&quot;, code);\n}\n</code></pre>\n<p>You don't <em>need</em> to mess with the allocated string at all. You can use the same logic and make successive subslices of the string. This is basically how <code>trim_right_matches</code> works, but a bit less generic:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>const TRAILER: &amp;'static str = &quot;UNI&quot;;\n\nfn read_csv_rilev(mut s: &amp;str) -&gt; &amp;str {\n    while s.ends_with(TRAILER) {\n        let len = s.len();\n        let new_len = len.saturating_sub(TRAILER.len());\n        s = &amp;s[..new_len];\n    }\n    s\n}\n\nfn main() {\n    let code = &quot;Hello WorldUNIUNIUNI&quot;;\n\n    let truncated = read_csv_rilev(code);\n\n    assert_eq!(&quot;Hello World&quot;, truncated);\n}\n</code></pre>\n<p>In general, I'd probably go with the second solution.</p>\n"}, {"tags": [], "owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "is_accepted": false, "score": 2, "last_activity_date": 1472032344, "creation_date": 1472032344, "answer_id": 39119948, "question_id": 31276059, "link": "https://stackoverflow.com/questions/31276059/is-there-a-way-to-trim-a-string-without-allocating-another-one/39119948#39119948", "title": "Is there a way to trim a String without allocating another one?", "body": "<p>Another solution is to use the <a href=\"https://github.com/Kimundi/owning-ref-rs\" rel=\"nofollow\"><code>owning_ref</code></a> crate, which lets you return both a <code>&amp;str</code> and its backing <code>String</code> at the same time:</p>\n\n<pre><code>extern crate owning_ref;\nuse owning_ref::StringRef;\n\nfn read_csv_rilev(code: String) -&gt; StringRef {\n    StringRef::new(code).map(|s| s.trim_right_matches(\"UNI\"))\n}\n</code></pre>\n"}], "owner": {"reputation": 365, "user_id": 4195183, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d36a5d9eedc9a446a16a318005f9d25f?s=128&d=identicon&r=PG&f=1", "display_name": "robitex", "link": "https://stackoverflow.com/users/4195183/robitex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10185, "favorite_count": 1, "accepted_answer_id": 31276523, "answer_count": 3, "score": 12, "last_activity_date": 1612899201, "creation_date": 1436292056, "last_edit_date": 1612899101, "question_id": 31276059, "link": "https://stackoverflow.com/questions/31276059/is-there-a-way-to-trim-a-string-without-allocating-another-one", "title": "Is there a way to trim a String without allocating another one?", "body": "<p>I have a file in the CSV format with a first column of data that represents item code optionally ended with <code>&quot;UNIUNI&quot;</code> or mixed case of these chars, loaded by means of a barcode reader. I need to trim away the last <code>&quot;UNI&quot;</code>s.</p>\n<p>I wrote this function:</p>\n<pre><code>fn main() {\n    // Ok: from &quot;9846UNIUNI&quot; to &quot;9846&quot;\n    println!(&quot;{}&quot;, read_csv_rilev(&quot;9846UNIUNI&quot;.to_string()));\n    \n    // Wrong: from &quot;9846uniuni&quot; to &quot;9846&quot;\n    println!(&quot;{}&quot;, read_csv_rilev(&quot;9846uniuni&quot;.to_string()));\n}\n\nfn read_csv_rilev(code: String) -&gt; String {\n    code\n        //.to_uppercase() /*Unstable feature in Rust 1.1*/\n        .trim_right_matches(&quot;UNI&quot;)\n        .to_string()\n}\n</code></pre>\n<p>The ideal function signature looks like:</p>\n<pre><code>fn read_csv_rilev(mut s: &amp;String)\n</code></pre>\n<p>but probably an in-place action on a <code>String</code> is not a good idea. In fact, in the Rust standard library there isn't anything to do this excluding <code>String::pop()</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1436263003, "post_id": 31264670, "comment_id": 50525511, "body": "As always with performance questions, the only way to know is to profile it in-situ. Micro-benchmarks are not suitable."}, {"owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 1, "creation_date": 1524425711, "post_id": 31264670, "comment_id": 86955834, "body": "But it&#39;s still interesting to know if the overhead is in the range of a few cycles, a few microseconds, a few milliseconds etc :-) . And Rc is apparently more in the &quot;a few cycles&quot; range."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436280332, "post_id": 31265053, "comment_id": 50538070, "body": "<i>The RC apparently was completely compiled out</i> I don&#39;t think you can claim that it is optimized out. If you look at the <a href=\"http://is.gd/AB68e3\" rel=\"nofollow noreferrer\">LLVM IR</a>, you can see that <code>test_with_box</code> calls <code>@je_mallocx(i64 8, i32 0)</code> and <code>test_with_rc</code> calls <code>@je_mallocx(i64 24, i32 0)</code>, so the two blocks wouldn&#39;t be the same assembly. There&#39;s also 4 more instructions for the <code>Rc</code> case."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 11, "last_activity_date": 1436279951, "last_edit_date": 1436279951, "creation_date": 1436262080, "answer_id": 31265053, "question_id": 31264670, "link": "https://stackoverflow.com/questions/31264670/do-i-have-to-be-concerned-about-the-overhead-of-rc/31265053#31265053", "title": "Do I have to be concerned about the overhead of `Rc`?", "body": "<p>To answer your question, you can turn to the <code>test</code> crate, which contains a benchmarking solution (this needs a nightly):</p>\n\n<pre><code>#![feature(test)]\nextern crate test;\n\nuse std::rc::Rc;\n\nfn test_with_box() {\n    let b = Box::new(1.0);\n    test::black_box(*b * 2.0);\n}\n\nfn test_with_rc() {\n    let rc = Rc::new(1.0);\n    test::black_box(*rc * 2.0);\n}\n\n#[bench]\nfn bench_box(b: &amp;mut test::Bencher) {\n    b.iter(test_with_box)\n}\n\n#[bench]\nfn bench_rc(b: &amp;mut test::Bencher) {\n    b.iter(test_with_rc)\n}\n</code></pre>\n\n<p>Now compiling &amp; running this:</p>\n\n<pre><code>$ rustc --test -O rc.rs &amp;&amp; ./rc --bench\n\nrunning 2 tests\ntest bench_box ... bench:          22 ns/iter (+/- 0)\ntest bench_rc  ... bench:          22 ns/iter (+/- 0)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n</code></pre>\n\n<p>What happened? The RC apparently was completely compiled out. As it should be, because we haven't <strong>cloned</strong> it. So changing the respective <code>fn</code> to:</p>\n\n<pre><code>fn test_with_rc() {\n    let rc = Rc::new(1.0);\n    test::black_box(*rc.clone() * 2.0);\n}\n</code></pre>\n\n<p>We get the following:</p>\n\n<pre><code>running 2 tests\ntest bench_box ... bench:          23 ns/iter (+/- 1)\ntest bench_rc  ... bench:          25 ns/iter (+/- 1)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured\n</code></pre>\n\n<p>So, suffice to say, you'll probably need to worry about other things before looking at RC-induced overhead.</p>\n"}, {"comments": [{"owner": {"reputation": 171, "user_id": 6661601, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BbGtE.png?s=128&g=1", "display_name": "Zenny", "link": "https://stackoverflow.com/users/6661601/zenny"}, "edited": false, "score": 0, "creation_date": 1583278177, "post_id": 31265275, "comment_id": 107060454, "body": "I would just like to add that downgrade/upgrade was stabilized in <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-140-2015-10-29\" rel=\"nofollow noreferrer\">Version 1.4.0, 2015-10-29</a>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 14, "last_activity_date": 1584611277, "last_edit_date": 1584611277, "creation_date": 1436262687, "answer_id": 31265275, "question_id": 31264670, "link": "https://stackoverflow.com/questions/31264670/do-i-have-to-be-concerned-about-the-overhead-of-rc/31265275#31265275", "title": "Do I have to be concerned about the overhead of `Rc`?", "body": "<p><code>Rc&lt;T&gt;</code> is very, very cheap. It\u2019s not as cheap as <code>T</code> by quite a bit (boxing values is comparatively expensive in micro-optimisation terms), but scarcely less efficient than <code>Box&lt;T&gt;</code>.</p>\n\n<p>It\u2019s just like <code>Box</code>, but with an additional couple of words for the strong and weak reference counts, and the only things that need to touch that are creating an <code>Rc</code> (initialises the values), cloning an <code>Rc</code> (increments the refcount), dropping an <code>Rc</code> (decrements the refcount and runs the destructor if appropriate), and downgrading to/upgrading from <code>Weak</code> (increments one and decrements the other of the two refcounts).</p>\n\n<p>Dereferencing is a simple memory operation just like it is with <code>Box</code>.</p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1146, "favorite_count": 1, "accepted_answer_id": 31265275, "answer_count": 2, "score": 12, "last_activity_date": 1584611277, "creation_date": 1436261078, "question_id": 31264670, "link": "https://stackoverflow.com/questions/31264670/do-i-have-to-be-concerned-about-the-overhead-of-rc", "title": "Do I have to be concerned about the overhead of `Rc`?", "body": "<p>Am I right to assume that the only thing that \"slows down\" <code>Rc</code>s is that it checks whether to deallocate the object when it drops? Besides that, \"how much\" is the overhead of dereferencing a <code>Rc</code>, i.e. should I be concerned about it?<br>\nAre those two functions almost equally fast? Or is there a notable difference in speed?  </p>\n\n<pre><code>fn test_with_box() {\n    let b = Box::new(1.0);\n    let x = b * 2;\n}\n\nfn test_with_rc() {\n    let rc = Rc::new(1.0);\n    let x = rc * 2;\n}\n</code></pre>\n\n<p>Since the referenced object in <code>test_with_rc()</code> always only has one reference and behaves like a <code>Box</code> in that function (viewed from outside, not internally, of course).</p>\n\n<p>I suspect that <code>Rc</code>s are actually faster than I think.</p>\n\n<p>PS: When talking about \"fast\" I mean both dereferencing and allocating/deallocating.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "edited": false, "score": 0, "creation_date": 1436265708, "post_id": 31265396, "comment_id": 50527374, "body": "this doesn&#39;t seem to work: src/projects.rs:9:58: 9:59 error: unknown start of token: \\u{ab} src/projects.rs:9         if !metadata(Path::new(expansion_str)).map(|m| m.&#171;is_file or is_dir&#187;()).unwrap_or(false)||"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "edited": false, "score": 3, "creation_date": 1436266187, "post_id": 31265396, "comment_id": 50527669, "body": "@xophos, you do understand that <code>&#171;is_file or is_dir&#187;</code> is just a placeholder for actual function name, don&#39;t you?"}, {"owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "edited": false, "score": 1, "creation_date": 1436266437, "post_id": 31265396, "comment_id": 50527834, "body": "ah sorry i&#39;m very new to rust so i thought it was some strange syntax."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 1, "last_activity_date": 1436263001, "creation_date": 1436263001, "answer_id": 31265396, "question_id": 31264590, "link": "https://stackoverflow.com/questions/31264590/how-to-check-the-existence-of-a-path-in-rust-1-1/31265396#31265396", "title": "How to check the existence of a path in Rust 1.1?", "body": "<p><code>PathExt</code> is simple wrappers around <a href=\"http://doc.rust-lang.org/std/fs/fn.metadata.html\" rel=\"nofollow\"><code>std::fs::metadata</code></a>; if the path doesn\u2019t exist, <code>metadata</code> will return an error, so <code>PathExt.exists()</code> is a simple <code>metadata(self).is_ok()</code>.</p>\n\n<p>Typically you should be using <code>is_file</code> or <code>is_dir</code> instead, though; they correspond to <code>metadata(self).map(|m| m.<em>\u00abis_file or is_dir\u00bb</em>()).unwrap_or(false)</code>.</p>\n"}], "owner": {"reputation": 286, "user_id": 2568597, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b01bc92654b164ac89aa8fb3537087b?s=128&d=identicon&r=PG&f=1", "display_name": "xophos", "link": "https://stackoverflow.com/users/2568597/xophos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 967, "favorite_count": 0, "accepted_answer_id": 31265396, "answer_count": 1, "score": 5, "last_activity_date": 1436279423, "creation_date": 1436260880, "last_edit_date": 1436279423, "question_id": 31264590, "link": "https://stackoverflow.com/questions/31264590/how-to-check-the-existence-of-a-path-in-rust-1-1", "title": "How to check the existence of a path in Rust 1.1?", "body": "<p>In Rust 1.1, <code>std::fs::PathExt</code> is marked unstable; how do I check the existence of a file or directory?</p>\n\n<p>Is there a canonical solution for this or do i have to read the source of <code>std::fs::PathExt</code>?</p>\n\n<p>Is there maybe a crate that delivers this functionality?</p>\n"}, {"tags": ["regex", "rust"], "comments": [{"owner": {"reputation": 1160, "user_id": 4635642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a51496675704d0fed476c58e1621068e?s=128&d=identicon&r=PG&f=1", "display_name": "Andris Leduskrasts", "link": "https://stackoverflow.com/users/4635642/andris-leduskrasts"}, "edited": false, "score": 0, "creation_date": 1436253223, "post_id": 31261594, "comment_id": 50519516, "body": "What&#39;s the &quot;specific point&quot;? &quot;After each character&quot; is what regex already does with the exception of a single part of string matching a regex multiple times as it jumps over a matched part. Is that what you&#39;re wanting to do? e.g. the same letter-number <code>aa9</code> combination matches once but could match 2 times (<code>aa9</code>, <code>a9</code>) for the first regex, if you want to check it after each character."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436253790, "post_id": 31261594, "comment_id": 50519876, "body": "I think the issue is that he wants to match a few regexi in a specific order, and begin at the first regex again after a regex matched"}, {"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "reply_to_user": {"reputation": 1160, "user_id": 4635642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a51496675704d0fed476c58e1621068e?s=128&d=identicon&r=PG&f=1", "display_name": "Andris Leduskrasts", "link": "https://stackoverflow.com/users/4635642/andris-leduskrasts"}, "edited": false, "score": 0, "creation_date": 1436253934, "post_id": 31261594, "comment_id": 50519962, "body": "@AndrisLeduskrasts I want to try and match a group of regexs in a certain order and when I find a match, save away the matched position information and then next time I try to match again, start at the end of the last match so I&#39;m not constantly re-scanning the beginning of the string."}, {"owner": {"reputation": 1160, "user_id": 4635642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a51496675704d0fed476c58e1621068e?s=128&d=identicon&r=PG&f=1", "display_name": "Andris Leduskrasts", "link": "https://stackoverflow.com/users/4635642/andris-leduskrasts"}, "edited": false, "score": 0, "creation_date": 1436254292, "post_id": 31261594, "comment_id": 50520193, "body": "Why not clone the string (to prevent data loss) and then after each match you also substitute the match with <code>&#39;&#39;</code>?"}, {"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "reply_to_user": {"reputation": 1160, "user_id": 4635642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a51496675704d0fed476c58e1621068e?s=128&d=identicon&r=PG&f=1", "display_name": "Andris Leduskrasts", "link": "https://stackoverflow.com/users/4635642/andris-leduskrasts"}, "edited": false, "score": 1, "creation_date": 1436254365, "post_id": 31261594, "comment_id": 50520236, "body": "@AndrisLeduskrasts Performance. If I didn&#39;t care about performance I&#39;d use another language."}, {"owner": {"reputation": 165, "user_id": 1102975, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/349d851184514340f1757f3a71b6807a?s=128&d=identicon&r=PG", "display_name": "luke-gru", "link": "https://stackoverflow.com/users/1102975/luke-gru"}, "edited": false, "score": 1, "creation_date": 1436320963, "post_id": 31261594, "comment_id": 50557625, "body": "I created a strscan library for this purpose exactly (tokenizing with regexes). You can check it out here: <a href=\"https://github.com/luke-gru/rs_strscan/\" rel=\"nofollow noreferrer\">github.com/luke-gru/rs_strscan</a>, or &#39;strscan&#39; on crates.io."}], "answers": [{"comments": [{"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 0, "creation_date": 1436253803, "post_id": 31261733, "comment_id": 50519886, "body": "I&#39;m basically trying to think of what I would want the C compiler to do and trying to get Rust to do the same thing. So this would be the rust equivalent of bumping the char* passed into function? I&#39;ll try it. I hope that the constant convertion to and from str &lt;-&gt; String doesn&#39;t kill the performance."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 2, "creation_date": 1436253989, "post_id": 31261733, "comment_id": 50520004, "body": "to convert from <code>String</code> to <code>str</code> is a no-op, to convert from a <code>str</code> to a <code>String</code> is a heap allocation, but I don&#39;t see where a <code>str</code> -&gt; <code>String</code> conversion should happen in your code"}, {"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 0, "creation_date": 1436254082, "post_id": 31261733, "comment_id": 50520069, "body": "isn&#39;t the &quot;&amp;s&quot; an implicit convertion to &amp;String? Or else the indexing wouldn&#39;t work since &#39;str&#39;s cannot be indexed, no?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 2, "creation_date": 1436254165, "post_id": 31261733, "comment_id": 50520121, "body": "you are mis-reading what&#39;s going on. it&#39;s <code>&amp;(s[1..])</code>. We slice the string (not indexing) from position 1 to the end of the string. and then take a reference to that slice"}, {"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 0, "creation_date": 1436254581, "post_id": 31261733, "comment_id": 50520348, "body": "Thanks. Weird that you cannot plainly index a str but you can slice [n .. n+1]! There really should be an 8-bit array version of str for ASCII strings since we still do most processing in that character set, astr or something. Having to be hamstrung with variable width encoding when I don&#39;t use it really sucks."}, {"owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 0, "creation_date": 1436254667, "post_id": 31261733, "comment_id": 50520395, "body": "This also doesn&#39;t play well with the regex library! Regex returns positions in BYTES, but the slice uses UTF character positions, so this doesn&#39;t work actually."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 3, "creation_date": 1436254835, "post_id": 31261733, "comment_id": 50520484, "body": "yes it does. the slice uses byte positions. That&#39;s why there is no indexing operation. the &quot;am I indexing by chars or by bytes?&quot; question is too confusing. Note that indexing by chars would require O(n) operations, where indexing by bytes takes O(1)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "edited": false, "score": 0, "creation_date": 1436255262, "post_id": 31261733, "comment_id": 50520712, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/82565/discussion-between-ker-and-jasonn\">continue this discussion in chat</a>."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1436255081, "last_edit_date": 1436255081, "creation_date": 1436252088, "answer_id": 31261733, "question_id": 31261594, "link": "https://stackoverflow.com/questions/31261594/regex-match-string-starting-at-offset/31261733#31261733", "title": "regex match string starting at offset", "body": "<p>The regex crate works on string slices. You can always take a sub-slice of another slice and then operate on that one. Instead of moving along indices, you can modify the variable that points to your slice to point to your subslice.</p>\n\n<pre><code>fn main() {\n    let mut s = \"hello\";\n    while !s.is_empty() {\n        println!(\"{}\", s);\n        s = &amp;s[1..];\n    }\n}\n</code></pre>\n\n<p>Note that the slice operation slices at byte-positions, not utf8-char-positions. This allows the slicing operation to be done in O(1) instead of O(n), but will also cause the program to panic if the indices you are slicing from and to happen to be in the middle of a multi-byte utf8 character.</p>\n"}], "owner": {"reputation": 1406, "user_id": 701211, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bc08db90032b212b492536d31464550e?s=128&d=identicon&r=PG&f=1", "display_name": "JasonN", "link": "https://stackoverflow.com/users/701211/jasonn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1793, "favorite_count": 0, "accepted_answer_id": 31261733, "answer_count": 1, "score": 4, "last_activity_date": 1436256187, "creation_date": 1436251635, "last_edit_date": 1436256187, "question_id": 31261594, "link": "https://stackoverflow.com/questions/31261594/regex-match-string-starting-at-offset", "title": "regex match string starting at offset", "body": "<p>I'm learning Rust and trying to write a simple tokenizer right now. I want to go through a string running each regular expression against the current position in the string, create a token, then skip ahead and repeat until I've processed the whole string. I know I can put them into a larger regex and loop through captures, but I need to process them individually for domain reseasons.</p>\n\n<p>However, I see nowhere in the regex crate that allows an offset so I can begin matching again at specific point.</p>\n\n<pre><code>extern crate regex;\nuse regex::Regex;\n\nfn main() {\n\n    let input = \"3 + foo/4\";\n\n    let ident_re = Regex::new(\"[a-zA-Z][a-zA-Z0-9]*\").unwrap();\n    let number_re = Regex::new(\"[1-9][0-9]*\").unwrap();\n    let ops_re = Regex::new(r\"[+-*/]\").unwrap();\n    let ws_re = Regex::new(r\"[ \\t\\n\\r]*\").unwrap();\n\n    let mut i: usize = 0;\n\n    while i &lt; input.len() {\n\n        // Here check each regex to see if a match starting at input[i]\n        // if so copy the match and increment i by length of match.\n    }\n}\n</code></pre>\n\n<p>Those regexs that I'm currently scaning for will actually vary at runtime too. Sometimes I may only be looking for a few of them while others (at top level) I might be looking for almost all of them.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 12, "last_activity_date": 1436248676, "creation_date": 1436248676, "answer_id": 31260840, "question_id": 31260631, "link": "https://stackoverflow.com/questions/31260631/error-with-operator-inside-closure/31260840#31260840", "title": "error with % operator inside closure", "body": "<p>No, it is not related to how closure structure is created, it is a simple type error.</p>\n\n<p><code>vec.iter()</code>, when <code>vec: Vec&lt;T&gt;</code>, returns an iterator which yields references to its elements. <code>filter()</code> closure also accepts each element by reference (because otherwise elements would be consumed but this would defeat the whole purpose of <code>filter()</code>). Therefore, in <code>vec.iter().filter(|x| ...)</code> the closure argument <code>x</code> has type <code>&amp;&amp;T</code>, in your case, <code>&amp;&amp;i32</code>.</p>\n\n<p>Rust numeric operators can't be applied to <code>&amp;&amp;T</code>, only to <code>&amp;T</code> or <code>T</code>, so you need to dereference the closure argument somehow. There are two ways, first, as you noticed, you can use dereference pattern:</p>\n\n<pre><code>vec.iter().filter(|&amp;x| x % 2 == 0)\n// or even\nvec.iter().filter(|&amp;&amp;x| x % 2 == 0)\n</code></pre>\n\n<p>Dereference pattern automatically dereferences the reference it is matching:</p>\n\n<pre><code>&amp;x: &amp;&amp;i32   ==&gt;  x: &amp;i32\n&amp;&amp;x: &amp;&amp;i32  ==&gt;  x: i32\n</code></pre>\n\n<p>Alternatively, you can dereference the number directly:</p>\n\n<pre><code>vec.iter().filter(|x| *x % 2 == 0)\n// or\nvec.iter().filter(|x| **x % 2 == 0)\n</code></pre>\n"}], "owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 31260840, "answer_count": 1, "score": 7, "last_activity_date": 1436279583, "creation_date": 1436247841, "last_edit_date": 1436279583, "question_id": 31260631, "link": "https://stackoverflow.com/questions/31260631/error-with-operator-inside-closure", "title": "error with % operator inside closure", "body": "<p>This code</p>\n\n<pre><code>let vec = vec![1, 3, 4, 5, 6];\nfor i in vec.iter().filter(|x| x % 2 == 0) {\n    println!(\"{}\", i);\n}\n</code></pre>\n\n<p>Produces the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:4:36: 4:37 error: binary operation `%` cannot be applied to type `&amp;&amp;_` [E0369]\n&lt;anon&gt;:4     for i in vec.iter().filter(|x| x % 2 == 0) {\n                                            ^\n</code></pre>\n\n<p>I cannot understand the meaning of this error. Is this related to how the anonymous closure structure is created by the compiler?</p>\n\n<p>The following code seems to be working.</p>\n\n<pre><code>for i in vec.iter().filter(|&amp;x| x % 2 == 0) {\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436256239, "post_id": 31260406, "comment_id": 50521259, "body": "When faced with inflexible build systems, I have cheated and substituted the Debug builds with symbolic links to the Release builds... might get you going as we wait for a full answer :)"}, {"owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436275629, "post_id": 31260406, "comment_id": 50534259, "body": "Can you tell me exactly what you did? Unoptimised crates seem to dislike talking to optimised crates."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436275842, "post_id": 31260406, "comment_id": 50534436, "body": "To be honest, I never used it in Rust only in C++ (part of why it was only a comment); it may be that the hash used in Rust libraries takes the optimization level into account, in which case I apologize for leading you astray."}, {"owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436332870, "post_id": 31260406, "comment_id": 50560600, "body": "OK fixed, I managed to achieve this using FFI linking to a fast dynamic library that cargo doesn&#39;t (need to) know about."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1581992707, "last_edit_date": 1581992707, "creation_date": 1436279881, "answer_id": 31271716, "question_id": 31260406, "link": "https://stackoverflow.com/questions/31260406/linking-to-optimised-crate-from-a-debug-build/31271716#31271716", "title": "Linking to optimised crate from a debug build", "body": "<p>This is possible as of Rust 1.41 via <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html#overrides\" rel=\"nofollow noreferrer\">overrides</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[package]\nname = \"speedy\"\nversion = \"0.1.0\"\nauthors = [\"An Devloper &lt;an.devloper@example.com&gt;\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nimage = \"0.21.1\"\n\n# All dependencies (but not this crate itself or any workspace member)\n# will be compiled with -Copt-level=2 . This includes build dependencies.\n[profile.dev.package.\"*\"]\nopt-level = 2\n</code></pre>\n\n<p>The output with some details elided:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build --verbose\n\n   Compiling image v0.23.0\n     Running `rustc [...] --crate-name image [...] -C opt-level=2 -C debuginfo=2 -C debug-assertions=on [...]`\n   Compiling speedy v0.1.0 (/private/tmp/speedy)\n     Running `rustc [...] --crate-name speedy [...] -C debuginfo=2 [...]`\n</code></pre>\n"}], "owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 263, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1581992707, "creation_date": 1436246926, "last_edit_date": 1559056515, "question_id": 31260406, "link": "https://stackoverflow.com/questions/31260406/linking-to-optimised-crate-from-a-debug-build", "title": "Linking to optimised crate from a debug build", "body": "<p>I would like to separate some performance intensive code into a .so (I am running Kubuntu Linux) while the main quantity of my code is compiled in debug mode. I want the faster compiles and run time support in my code, but it's unacceptable to run the small amount of intensive code with all the debug checks in it.</p>\n\n<p>Is it possible to do this using Cargo? It seems that Cargo propagates the top level profile to the dependencies, so they are all compiled as release or debug, depending on what is requested of the main crate.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 4, "creation_date": 1436207796, "post_id": 31252851, "comment_id": 50503273, "body": "In short, lifetimes only describe how long something lives, never influence how long it lives."}, {"owner": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "edited": false, "score": 0, "creation_date": 1436209053, "post_id": 31252851, "comment_id": 50503995, "body": "Too bad. That would be a nice feature. Thanks!"}], "answers": [{"comments": [{"owner": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "edited": false, "score": 0, "creation_date": 1436209014, "post_id": 31253026, "comment_id": 50503963, "body": "Ahhh, I feel dumb. For some reason, I was thinking of <code>&amp;str</code> as something like a string and a wrapper even though the <code>&amp;</code> clearly indicates it is a reference. Now that I&#39;ve made your correction, it is pretty clear I need to go back through and redefine my initial datatype and propagate that change through my code. Thank you!"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "edited": false, "score": 0, "creation_date": 1436210302, "post_id": 31253026, "comment_id": 50504706, "body": "No problem! I guess feeling dumb is a clear effect of learning :P... especially when learning Rust!"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 11, "last_activity_date": 1436258517, "last_edit_date": 1436258517, "creation_date": 1436207217, "answer_id": 31253026, "question_id": 31252851, "link": "https://stackoverflow.com/questions/31252851/expanding-rust-lifetime/31253026#31253026", "title": "Expanding Rust Lifetime", "body": "<p>The lifetime of <code>out</code> is not <code>'a</code>, since <code>out</code> is destroyed at the end of the function. Rust will not allow you to return a reference to it (it would allow accessing freed memory!).</p>\n\n<p>Try changing your function to the following:</p>\n\n<pre><code>fn take_symbol&lt;'a&gt;(ch: &amp;'a str, current: &amp;'a mut String) -&gt; TokenList&lt;'a&gt; {\n    let out = TokenList::&lt;'a&gt;::new();\n\n    out.push(current.as_str());\n    out.push(ch);\n\n    *current = String::new();\n\n    out\n}\n</code></pre>\n\n<p>This way you will pass the ownership of <code>out</code> to the caller and it will live long enough.</p>\n"}], "owner": {"reputation": 525, "user_id": 3389355, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/21c34d3d1de9b87b7debf3456741116a?s=128&d=identicon&r=PG&f=1", "display_name": "wmaxlees", "link": "https://stackoverflow.com/users/3389355/wmaxlees"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 873, "favorite_count": 1, "accepted_answer_id": 31253026, "answer_count": 1, "score": 11, "last_activity_date": 1436258517, "creation_date": 1436206556, "last_edit_date": 1436213912, "question_id": 31252851, "link": "https://stackoverflow.com/questions/31252851/expanding-rust-lifetime", "title": "Expanding Rust Lifetime", "body": "<p>I have a bit of code that I'm fighting with. It's a little helper function that should return a <code>Vec&lt;&amp;str&gt;</code> to the calling function. I can't seem to get the lifetime right, though.</p>\n\n<p>Here is the code snippet:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn take_symbol&lt;'a&gt;(ch: &amp;'a str, current: &amp;'a mut String) -&gt; &amp;'a mut TokenList&lt;'a&gt; {\n    let out = TokenList::&lt;'a&gt;::new();\n\n    out.push(current.as_str());\n    out.push(ch);\n\n    *current = String::new();\n\n    &amp;mut out\n}\n</code></pre>\n\n<p>The compiler is telling me: <code>error: 'out' does not live long enough</code> and that the reference must be valid for the lifetime of <code>'a</code>, but it looks to me like it is defined for <code>'a</code>.</p>\n\n<p>I have also tried changing it to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let out = &amp;mut TokenList::&lt;'a&gt;::new();\n</code></pre>\n\n<p>which doesn't change any of the error messages. Or:</p>\n\n<pre><code>let out = &amp;'a mut TokenList::&lt;'a&gt;::new();\n</code></pre>\n\n<p>which the compiler doesn't like at all.</p>\n\n<p>How do I define <code>out</code> to have a lifetime of <code>'a</code>?</p>\n\n<p>For further details, here is my definition of TokenList:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub type Token&lt;'a&gt; = &amp;'a str;\npub type TokenList&lt;'a&gt; = Vec&lt;Token&lt;'a&gt;&gt;;\n</code></pre>\n"}, {"tags": ["rust", "associated-types"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1560280052, "last_edit_date": 1560280052, "creation_date": 1436200869, "answer_id": 31251242, "question_id": 31251170, "link": "https://stackoverflow.com/questions/31251170/how-do-i-disambiguate-associated-types/31251242#31251242", "title": "How do I disambiguate associated types?", "body": "<p>You can use what is called <a href=\"https://doc.rust-lang.org/stable/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\" rel=\"nofollow noreferrer\"><em>Fully Qualified Syntax</em></a> (FQS):</p>\n\n<pre><code>fn gimme_a() -&gt; &lt;Self as HasA&gt;::A;\nfn gimme_a() -&gt; &lt;Self as RichHasA&gt;::A;\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44445730/155423\">How to call a method when a trait and struct use the same method name?</a></li>\n</ul>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3571, "favorite_count": 1, "accepted_answer_id": 31251242, "answer_count": 1, "score": 6, "last_activity_date": 1560280052, "creation_date": 1436200663, "last_edit_date": 1499355880, "question_id": 31251170, "link": "https://stackoverflow.com/questions/31251170/how-do-i-disambiguate-associated-types", "title": "How do I disambiguate associated types?", "body": "<p>My current code looks like this:</p>\n\n<pre><code>pub trait A {}\npub trait HasA {\n    type A: A;\n    fn gimme_a() -&gt; Self::A;\n}\n\npub trait RichA: A {}\npub trait RichHasA: HasA {\n    type A: RichA;\n    fn gimme_a() -&gt; Self::A;\n    // ... more things go here ...\n}\n\npub fn main() {}\n</code></pre>\n\n<p>My goal is to be able to use <code>RichHasA</code> as a <code>HasA</code>. The above code fails to compile with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0221]: ambiguous associated type `A` in bounds of `Self`\n  --&gt; src/main.rs:10:21\n   |\n3  |     type A: A;\n   |     ---------- ambiguous `A` from `HasA`\n...\n9  |     type A: RichA;\n   |     -------------- ambiguous `A` from `RichHasA`\n10 |     fn gimme_a() -&gt; Self::A;\n   |                     ^^^^^^^ ambiguous associated type `A`\n</code></pre>\n\n<p>which makes sense. How can I  disambiguate associated types?</p>\n"}, {"tags": ["rust", "freetype"], "answers": [{"comments": [{"owner": {"reputation": 599, "user_id": 2940571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/bLURv.jpg?s=128&g=1", "display_name": "Malloc", "link": "https://stackoverflow.com/users/2940571/malloc"}, "edited": false, "score": 0, "creation_date": 1436199580, "post_id": 31250425, "comment_id": 50498752, "body": "@Matveen   I do use brew, but after I installed freetype, the error still there. I clear the project then run <code>cargo run</code> again, the rust compile freetype again. Maybe rust didn&#39;t use the freetype which brew installed?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 599, "user_id": 2940571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/bLURv.jpg?s=128&g=1", "display_name": "Malloc", "link": "https://stackoverflow.com/users/2940571/malloc"}, "edited": false, "score": 0, "creation_date": 1436203610, "post_id": 31250425, "comment_id": 50500947, "body": "That&#39;s strange, because I&#39;ve also checked it on my Mac and it did work. Do you have pkg-config installed? Unfortunately, I don&#39;t remember whether it should come from brew as well or if it is built-in, and I can&#39;t check until tomorrow. Try running <code>pkg-config --libs freetype2</code>. It should show something like <code>-L &#47;usr&#47;local&#47;Cellar&#47;...&#47; -lfreetype</code>. If it doesn&#39;t, then it is likely some issue with pkg-config configuration files."}, {"owner": {"reputation": 599, "user_id": 2940571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/bLURv.jpg?s=128&g=1", "display_name": "Malloc", "link": "https://stackoverflow.com/users/2940571/malloc"}, "edited": false, "score": 0, "creation_date": 1436235129, "post_id": 31250425, "comment_id": 50513668, "body": "I ran the project on Linux, it reports the same error. and pkg-config tells it can&#39;t find freetype or freetype2, I&#39;ll learn more about pkg-config, thanks"}, {"owner": {"reputation": 599, "user_id": 2940571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/bLURv.jpg?s=128&g=1", "display_name": "Malloc", "link": "https://stackoverflow.com/users/2940571/malloc"}, "edited": false, "score": 0, "creation_date": 1436281832, "post_id": 31250425, "comment_id": 50539288, "body": "on OSX pkg-config was not built-in, after installing pkg-config, everything goes well."}, {"owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "reply_to_user": {"reputation": 599, "user_id": 2940571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/bLURv.jpg?s=128&g=1", "display_name": "Malloc", "link": "https://stackoverflow.com/users/2940571/malloc"}, "edited": false, "score": 0, "creation_date": 1437237420, "post_id": 31250425, "comment_id": 50950037, "body": "@Malloc i am encountering similar issues, but <code>brew install pkg-config</code> did not fix things for me.  Is that how you installed <code>pkg-config</code>, or did you take additional steps?"}, {"owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "edited": false, "score": 0, "creation_date": 1437237744, "post_id": 31250425, "comment_id": 50950154, "body": "(ah, I had to delete the <code>target&#47;</code> directory after installing <code>pkg-config</code> to force some of the dependencies to get recompiled... that is unfortunate (and a tiny bit surprising to me; i clearly have not digested how much info is stored in <code>target&#47;</code> from run-to-run), but i do not know if there is a good way around that ...)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1436198389, "creation_date": 1436198389, "answer_id": 31250425, "question_id": 31249582, "link": "https://stackoverflow.com/questions/31249582/why-is-a-link-error-reported-when-using-freetype-rs/31250425#31250425", "title": "Why is a link error reported when using freetype-rs?", "body": "<p>Well, it builds a Rust library which wants to link with freetype but there is no such library on your system. Since you're using Mac OS X, it is not really unexpected. Freetype is native to Linux world, not for macs.</p>\n\n<p>You need to install freetype, for example, with brew:</p>\n\n<pre><code>brew install freetype\n</code></pre>\n\n<p>It would install the library to <code>/usr/local/lib</code>.</p>\n\n<p>If you do use brew, it would automatically add a corresponding pkg-config configuration to your system, and because <code>freetype-sys</code> (a dependency of <code>freetype-rs</code>) uses pkg-config to discover the library, everything will start working automatically.</p>\n\n<p>If you're not using brew, chances are you won't get a pkg-config configuration, and no necessary flags would be added to the build automatically. Frankly, I don't know how to overcome this without changing <code>freetype-sys</code> build to explicitly add <code>/usr/local/lib</code> (or whatever path the library is installed into). You can add a <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow\">build script</a> to your program which would append the path to freetype to the build options, but it won't affect the compilation of dependency. It may or may not work.</p>\n"}], "owner": {"reputation": 599, "user_id": 2940571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/bLURv.jpg?s=128&g=1", "display_name": "Malloc", "link": "https://stackoverflow.com/users/2940571/malloc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 504, "favorite_count": 1, "accepted_answer_id": 31250425, "answer_count": 1, "score": 4, "last_activity_date": 1436203002, "creation_date": 1436195970, "last_edit_date": 1436203002, "question_id": 31249582, "link": "https://stackoverflow.com/questions/31249582/why-is-a-link-error-reported-when-using-freetype-rs", "title": "Why is a link error reported when using freetype-rs?", "body": "<p>I have a basic project that uses freetype-rs, but it reports a link error when I run <code>cargo run</code>. My system is OS X Yosemite 10.10.2.</p>\n\n<p><strong>Directory listing</strong></p>\n\n<pre><code>./Cargo.toml\n./src/main.rs\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\n\nname = \"usefree\"\nversion = \"0.0.1\"\nauthors = [\"zhch &lt;zhch@gmail.com&gt;\"]\n\n[dependencies]\nfreetype-rs = \"0.1.0\"\n</code></pre>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>#[macro_use]\nextern crate freetype;\n\nfn main() {\n    println!(\"Hello,World!\");\n}\n</code></pre>\n\n<p><strong>Error from <code>cargo run</code></strong></p>\n\n<pre><code>Compiling usefree v0.0.1 (file:///Users/zhangcheng/temp/d3/san)\nerror: linking with `cc` failed: exit code: 1\nnote: \"cc\" \"-m64\" \"-L\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib\" \"/Users/zhangcheng/temp/d3/san/target/debug/usefree.o\" \"-o\" \"/Users/zhangcheng/temp/d3/san/target/debug/usefree\" \"-Wl,-force_load,/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/libmorestack.a\" \"-Wl,-dead_strip\" \"-nodefaultlibs\" \"/Users/zhangcheng/temp/d3/san/target/debug/deps/libfreetype-4323fafa5d970f54.rlib\" \"/Users/zhangcheng/temp/d3/san/target/debug/deps/libfreetype_sys-a42cc5659b21e38e.rlib\" \"/Users/zhangcheng/temp/d3/san/target/debug/deps/liblibc-ef5cbad4ef5c7a1e.rlib\" \"/Users/zhangcheng/temp/d3/san/target/debug/deps/libbitflags-dd68b8369bcd8ff0.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/libstd-74fa456f.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/libcollections-74fa456f.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/librustc_unicode-74fa456f.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/librand-74fa456f.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/liballoc-74fa456f.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/liblibc-74fa456f.rlib\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib/libcore-74fa456f.rlib\" \"-L\" \"/Users/zhangcheng/temp/d3/san/target/debug\" \"-L\" \"/Users/zhangcheng/temp/d3/san/target/debug/deps\" \"-L\" \"/Users/zhangcheng/.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib\" \"-L\" \"/Users/zhangcheng/temp/d3/san/.rust/lib/x86_64-apple-darwin\" \"-L\" \"/Users/zhangcheng/temp/d3/san/lib/x86_64-apple-darwin\" \"-l\" \"freetype\" \"-l\" \"c\" \"-l\" \"m\" \"-l\" \"System\" \"-l\" \"pthread\" \"-l\" \"c\" \"-l\" \"m\" \"-Wl,-rpath,@loader_path/../../../../../.multirust/toolchains/nightly/lib/rustlib/x86_64-apple-darwin/lib\" \"-Wl,-rpath,/usr/local/lib/rustlib/x86_64-apple-darwin/lib\" \"-l\" \"compiler-rt\"\nnote: ld: warning: directory not found for option '-L/Users/zhangcheng/temp/d3/san/.rust/lib/x86_64-apple-darwin'\nld: warning: directory not found for option '-L/Users/zhangcheng/temp/d3/san/lib/x86_64-apple-darwin'\nld: library not found for -lfreetype\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\nerror: aborting due to previous error\nCould not compile `usefree`.\n</code></pre>\n\n<p>After <code>brew install freetype</code>, rust compiles freetype but the error still there.</p>\n\n<pre><code>    Updating registry `https://github.com/rust-lang/crates.io-index`\n   Compiling libc v0.1.8\n   Compiling bitflags v0.1.1\n   Compiling pkg-config v0.3.5\n   Compiling libz-sys v0.1.6\n   Compiling freetype-sys v0.1.2\n   Compiling freetype-rs v0.1.0\n   Compiling usefree v0.0.1 (file:///Users/zhangcheng/temp/d3/san)\nerror: linking with `cc` failed: exit code: 1\n</code></pre>\n"}, {"tags": ["rust", "rustdoc"], "answers": [{"comments": [{"owner": {"reputation": 31108, "user_id": 350351, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=128&d=identicon&r=PG", "display_name": "Daenyth", "link": "https://stackoverflow.com/users/350351/daenyth"}, "edited": false, "score": 0, "creation_date": 1436187020, "post_id": 31245968, "comment_id": 50489965, "body": "It didn&#39;t occur to me to check there! Thank you"}, {"owner": {"reputation": 481, "user_id": 617232, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f1fd29e558765db544be2245cf953912?s=128&d=identicon&r=PG", "display_name": "Hoang Tran", "link": "https://stackoverflow.com/users/617232/hoang-tran"}, "edited": false, "score": 0, "creation_date": 1494439616, "post_id": 31245968, "comment_id": 74833404, "body": "I think <code>cargo doc --open</code> should open the doc of current project (along side with all dependencies crate)"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 8, "last_activity_date": 1436186021, "creation_date": 1436186021, "answer_id": 31245968, "question_id": 31245757, "link": "https://stackoverflow.com/questions/31245757/how-do-i-view-rustdoc-for-a-library-my-project-depends-on/31245968#31245968", "title": "How do I view rustdoc for a library my project depends on?", "body": "<p>Cargo does that automatically. For example, if I have hyper as a dependency, <code>cargo doc</code> produces docs for it starting at <code>target/doc/hyper/index.html</code>.</p>\n"}], "owner": {"reputation": 31108, "user_id": 350351, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=128&d=identicon&r=PG", "display_name": "Daenyth", "link": "https://stackoverflow.com/users/350351/daenyth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 422, "favorite_count": 0, "accepted_answer_id": 31245968, "answer_count": 1, "score": 6, "last_activity_date": 1436186021, "creation_date": 1436185417, "last_edit_date": 1495539949, "question_id": 31245757, "link": "https://stackoverflow.com/questions/31245757/how-do-i-view-rustdoc-for-a-library-my-project-depends-on", "title": "How do I view rustdoc for a library my project depends on?", "body": "<p>I'd like to view the rust docs for a library that my program depends on. How can I pull these down? I found a question with the answer for the <a href=\"https://stackoverflow.com/questions/27592046/how-can-i-download-rust-api-docs\">standard library</a> but I'm looking specifically for crates.io dependencies.</p>\n"}, {"tags": ["rust", "traits", "associated-types"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 5, "last_activity_date": 1436179528, "last_edit_date": 1436179528, "creation_date": 1436178887, "answer_id": 31243630, "question_id": 31243253, "link": "https://stackoverflow.com/questions/31243253/traits-and-associated-types/31243630#31243630", "title": "traits and associated-types", "body": "<p>Here there's the correction:</p>\n\n<pre><code>pub trait Directory&lt;P: Person&gt; {\n    type Per : Person = P;\n    fn get_person(&amp;self) -&gt; Self::Per;\n}\n</code></pre>\n\n<p>The type <code>Per</code> in <code>Directory</code> can be redefined in trait implementations. The compiler doesn't know if <code>Self::Per</code> (which is the re-defined <code>Per</code> in the implementation) implements the trait <code>Person</code>, so you have to bound it to implement <code>Person</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 4, "last_activity_date": 1436178925, "creation_date": 1436178925, "answer_id": 31243642, "question_id": 31243253, "link": "https://stackoverflow.com/questions/31243253/traits-and-associated-types/31243642#31243642", "title": "traits and associated-types", "body": "<p>Here\u2019s the correct code:</p>\n\n<pre><code>pub trait Person {}\n\npub trait Directory {\n    type Person: Person;\n    fn get_person(&amp;self) -&gt; Self::Person;\n}\n\npub trait Catalog {\n    type Dir: Directory;\n\n    fn get_directory(&amp;self) -&gt; Self::Dir;\n}\n\nfn do_something&lt;C: Catalog&gt;(catalog: C) {\n    let directory = catalog.get_directory();\n    let person = directory.get_person();\n    do_something_with_person(person);\n}\n\nfn do_something_with_person&lt;P: Person&gt;(p: P) {}\n</code></pre>\n\n<p><code>&lt;P: Person&gt;</code> is generics syntax. Associated type definitions do not use generic syntax.</p>\n\n<p>Go for the full name in general; don\u2019t abbreviate it <code>Per</code>, leave it <code>Person</code>. It\u2019s always qualified (<code>Directory::Person</code>, <code>C::Person</code>, <em>&amp;c.</em>), so there\u2019s no ambiguity. (<code>Dir</code> is an acknowledged short form of <code>Directory</code>, so there I guess either would be acceptable. I\u2019d probably tend to go with <code>Directory</code>, however.)</p>\n\n<p>There\u2019s no need to have the associated type <code>Person</code> specified on <code>Catalog</code>, either; <code>Self::Dir::Person</code> will do.</p>\n"}], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 0, "accepted_answer_id": 31243630, "answer_count": 2, "score": 4, "last_activity_date": 1436180069, "creation_date": 1436177805, "last_edit_date": 1436180069, "question_id": 31243253, "link": "https://stackoverflow.com/questions/31243253/traits-and-associated-types", "title": "traits and associated-types", "body": "<p>I'm trying to implement something on Rust with traits and associated types. I'm not sure how to form my question with words, so I'll add a code snippet which will hopefully illustrate what I'm trying to do.</p>\n\n<pre><code>pub trait Person {}\n\npub trait Directory&lt;P: Person&gt; {\n    type Per = P;\n    fn get_person(&amp;self) -&gt; Self::Per;\n}\n\npub trait Catalog {\n    type Per : Person;\n    type Dir : Directory&lt;Self::Per&gt;;\n\n    fn get_directory(&amp;self) -&gt; Self::Dir;\n}\n\nfn do_something&lt;C&gt;(catalog: C) where C: Catalog {\n    let directory : C::Dir = catalog.get_directory();\n\n    // let person : C::Per = directory.get_person();\n    // The code above fails with:\n    //  error: mismatched types:\n    //   expected `&lt;C as Catalog&gt;::Per`,\n    //      found `&lt;&lt;C as Catalog&gt;::Dir as Directory&lt;&lt;C as Catalog&gt;::Per&gt;&gt;::Per`\n    //   (expected trait `Catalog`,\n    //       found trait `Directory`) [E0308]\n\n    let person = directory.get_person();\n    do_something_with_person(person);\n}\n\nfn do_something_with_person&lt;P: Person&gt;(p: P) {}\n</code></pre>\n\n<p>I would expect that the above code would compile, but it does not.</p>\n\n<p>Instead, I get:</p>\n\n<pre><code>error: the trait `Person` is not implemented for the type `&lt;&lt;C as Catalog&gt;::Dir as Directory&lt;&lt;C as Catalog&gt;::Per&gt;&gt;::Per` [E0277]\n</code></pre>\n\n<p>Which, AFAICT, means that the compiler cannot determine that the person variable has the Person trait.</p>\n\n<p>I'm using the following rustc version:</p>\n\n<pre><code>rustc 1.2.0-dev (a19ed8ad1 2015-06-18)\n</code></pre>\n\n<p>Am I missing something?</p>\n"}, {"tags": ["string", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436168605, "post_id": 31240245, "comment_id": 50478337, "body": "60 seconds too late :("}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436169817, "post_id": 31240245, "comment_id": 50479030, "body": "@ker: I lost power some 10 seconds after submitting; just barely made it.  :D"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 8, "last_activity_date": 1436168536, "creation_date": 1436168536, "answer_id": 31240245, "question_id": 31240091, "link": "https://stackoverflow.com/questions/31240091/using-str-and-string-interchangably/31240245#31240245", "title": "Using str and String interchangably", "body": "<p><a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\"><code>std::borrow::Cow</code></a>, specifically used as <code>Cow&lt;'a, str&gt;</code>, where <code>'a</code> is the lifetime of the string being parsed.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::borrow::Cow;\n\nfn main() {\n    let mut v: Vec&lt;Cow&lt;'static, str&gt;&gt; = vec![];\n    v.push(\"oh hai\".into());\n    v.push(format!(\"there, {}.\", \"Mark\").into());\n\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>Produces:</p>\n\n<pre><code>[\"oh hai\", \"there, Mark.\"]\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 2, "creation_date": 1436188845, "post_id": 31240266, "comment_id": 50491221, "body": "The <code>to_mut</code> here only creates an unnecessary <code>String</code> value (involves heap memory allocation) which is immediately overwritten (involves deallocation). I&#39;d change the line to <code>*t = Cow::Owned(t.replace(&quot;$world&quot;, &quot;Earth&quot;));</code> to avoid this overhead."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436192193, "post_id": 31240266, "comment_id": 50493609, "body": "Your last example probably should have more warnings beyond &quot;careful consideration&quot; placed around it. It does direct byte-based manipulation of UTF-8 strings and relies of the fact that the replacement happens to be exactly the same number of bytes. It&#39;s definitely an optimization, but not a universally applicable one."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436193479, "post_id": 31240266, "comment_id": 50494547, "body": "added more warnings and some bold text. I wonder if a PR adding a <code>replace(&amp;mut self, needle, value)</code> function to the <code>String</code> struct would be accepted"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1436193343, "last_edit_date": 1436193343, "creation_date": 1436168621, "answer_id": 31240266, "question_id": 31240091, "link": "https://stackoverflow.com/questions/31240091/using-str-and-string-interchangably/31240266#31240266", "title": "Using str and String interchangably", "body": "<p>Rust has exactly what you want in form of a <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow\"><code>Cow</code></a> (Clone On Write) type.</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn main() {\n    let mut v: Vec&lt;_&gt; = \"Hello there $world!\".split_whitespace()\n                                             .map(|s| Cow::Borrowed(s))\n                                             .collect();\n\n    for t in v.iter_mut() {\n        if t.contains(\"$world\") {\n            *t.to_mut() = t.replace(\"$world\", \"Earth\");\n        }\n    }\n\n    println!(\"{:?}\", &amp;v);\n}\n</code></pre>\n\n<p>as @sellibitze correctly notes, the <code>to_mut()</code> creates a new <code>String</code> which causes a heap allocation to store the previous borrowed value. If you are sure you only have borrowed strings, then you can use</p>\n\n<pre><code>*t = Cow::Owned(t.replace(\"$world\", \"Earth\"));\n</code></pre>\n\n<hr>\n\n<p>In case the Vec contains <code>Cow::Owned</code> elements, this would still throw away the allocation. You can prevent that using the following <strong>very fragile and unsafe</strong> code (It does direct byte-based manipulation of UTF-8 strings and relies of the fact that the replacement happens to be exactly the same number of bytes.) inside your for loop.</p>\n\n<pre><code>let mut last_pos = 0; // so we don't start at the beginning every time\nwhile let Some(pos) = t[last_pos..].find(\"$world\") {\n    let p = pos + last_pos; // find always starts at last_pos\n    last_pos = pos + 5;\n    unsafe {\n        let s = t.to_mut().as_mut_vec(); // operating on Vec is easier\n        s.remove(p); // remove $ sign\n        for (c, sc) in \"Earth\".bytes().zip(&amp;mut s[p..]) {\n            *sc = c;\n        }\n    }\n}\n</code></pre>\n\n<p>Note that this is tailored exactly to the \"$world\" -> \"Earth\" mapping. Any other mappings require careful consideration inside the unsafe code.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 31240266, "answer_count": 2, "score": 7, "last_activity_date": 1436193343, "creation_date": 1436167977, "last_edit_date": 1436168645, "question_id": 31240091, "link": "https://stackoverflow.com/questions/31240091/using-str-and-string-interchangably", "title": "Using str and String interchangably", "body": "<p>Suppose I'm trying to do a fancy zero-copy parser in Rust using <code>&amp;str</code>, but sometimes I need to modify the text (e.g. to implement variable substitution). I really want to do something like this:</p>\n\n<pre><code>fn main() {\n    let mut v: Vec&lt;&amp;str&gt; = \"Hello there $world!\".split_whitespace().collect();\n\n    for t in v.iter_mut() {\n        if (t.contains(\"$world\")) {\n            *t = &amp;t.replace(\"$world\", \"Earth\");\n        }\n    }\n\n    println!(\"{:?}\", &amp;v);\n}\n</code></pre>\n\n<p>But of course the <code>String</code> returned by <code>t.replace()</code> doesn't live long enough. Is there a nice way around this? Perhaps there is a type which means \"ideally a <code>&amp;str</code> but if necessary a <code>String</code>\"? Or maybe there is a way to use lifetime annotations to tell the compiler that the returned <code>String</code> should be kept alive until the end of <code>main()</code> (or have the same lifetime as <code>v</code>)?</p>\n"}, {"tags": ["c", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1436164011, "post_id": 31238747, "comment_id": 50475904, "body": "If C passes such arrays by reference, then the Rust signatures would need to use <code>*const [uint8_t; 64]</code> or <code>*mut [uint8_t; 64]</code>."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1436168288, "post_id": 31238747, "comment_id": 50478142, "body": "@ChrisMorgan: A bigger problem is that they&#39;re <i>not</i> 64-element arrays in the first place, but yes; the Rust equivalent of <code>uint8_t [64]</code> as an argument is (at least on platforms where I&#39;ve tested it) <code>*mut [u8; 64]</code>."}, {"owner": {"reputation": 703, "user_id": 768314, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/230551a8d85da9de1b841826da1fd065?s=128&d=identicon&r=PG", "display_name": "Jambaman", "link": "https://stackoverflow.com/users/768314/jambaman"}, "edited": false, "score": 0, "creation_date": 1436239322, "post_id": 31238747, "comment_id": 50514605, "body": "You are right, those signatures were horrible. But I would like to avoid compiling libc for my platform here. Also, I always know the size of the array parameters at compile time, so, something like *mut [u8; 64] is fine. Tried func(input: *mut [u8; 64], dst: *mut [u8; 64] ), but then I&#39;m not allowed to index or mutate the arguments."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 703, "user_id": 768314, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/230551a8d85da9de1b841826da1fd065?s=128&d=identicon&r=PG", "display_name": "Jambaman", "link": "https://stackoverflow.com/users/768314/jambaman"}, "edited": false, "score": 0, "creation_date": 1436239661, "post_id": 31238747, "comment_id": 50514680, "body": "@Jambaman: I don&#39;t understand how those signatures have anything to do with recompiling libc, or what that would accomplish. My concern with them in particular is that, in your C code, you aren&#39;t passing arrays of length 64, which is a buffer overrun waiting to happen.  As for not being able to use <code>*mut [u8; 64]</code>, that&#39;s because dereferencing a raw pointer is unsafe and must be done from within an <code>unsafe</code> block.  Again, the linked example appears to be the closest to what you want, based on what you&#39;ve explained in your question."}, {"owner": {"reputation": 703, "user_id": 768314, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/230551a8d85da9de1b841826da1fd065?s=128&d=identicon&r=PG", "display_name": "Jambaman", "link": "https://stackoverflow.com/users/768314/jambaman"}, "edited": false, "score": 0, "creation_date": 1436240677, "post_id": 31238747, "comment_id": 50514900, "body": "I added code in the example to illustrate what I&#39;m trying to do. I&#39;m basically just trying to copy the input array (which I know at compile time has size 64) into output (which also is of size 64)."}, {"owner": {"reputation": 703, "user_id": 768314, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/230551a8d85da9de1b841826da1fd065?s=128&d=identicon&r=PG", "display_name": "Jambaman", "link": "https://stackoverflow.com/users/768314/jambaman"}, "edited": false, "score": 0, "creation_date": 1436504329, "post_id": 31238747, "comment_id": 50650524, "body": "Thank you! That was exactly what I was looking for, works like magic (and made me realize pointers works a bit different in Rust than in C)."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1436249771, "last_edit_date": 1436249771, "creation_date": 1436162923, "answer_id": 31238747, "question_id": 31238348, "link": "https://stackoverflow.com/questions/31238348/calling-rust-method-from-c-with-array-parameters/31238747#31238747", "title": "Calling Rust method from C with array parameters", "body": "<p>A <code>&amp;[T]</code> in Rust <strong>is not the same thing</strong> as a <code>T []</code> or a <code>T *</code> in C.  You should <strong>never</strong> use borrowed pointers for interacting with C code from Rust.  You should also <strong>never, ever</strong> use <code>[T]</code> or <code>str</code> when interacting with C code.</p>\n\n<p><strong>Ever</strong>.</p>\n\n<p><code>[T]</code> and <code>str</code> are <a href=\"http://doc.rust-lang.org/book/unsized-types.html\" rel=\"nofollow\">dynamically sized types</a>, meaning that all pointers to them (of any kind) are twice the size of a regular pointer.  This means that your C code is passing two pointers, whereas Rust is expecting <em>four</em>.  It's a small miracle your second example didn't just explode in your face.</p>\n\n<p>The <a href=\"http://jakegoulding.com/rust-ffi-omnibus/slice_arguments/\" rel=\"nofollow\">Slice Arguments example from the Rust FFI Omnibus</a> is very nearly exactly what you want.</p>\n\n<p>There is also the <a href=\"http://doc.rust-lang.org/book/ffi.html\" rel=\"nofollow\">FFI chapter of the Rust Book</a>.</p>\n\n<p><strong>Edit</strong>: Those C signatures are also bogus; first of all, there is no limit on the size of the arrays Rust will accept anywhere, so I'm not sure where <code>64</code> came from.  A vaguely comparable Rust type would be <code>[u8; 64]</code>, but even <em>that</em> would <em>still</em> be incorrect, because C and Rust pass fixed-size arrays <em>differently.</em>  C passes them by-reference, Rust passes them by-value.</p>\n\n<p><strong>Edit 2</strong>: assuming you're talking about the second <code>func</code>, the Rust translation is just:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// C ffi signature:\n// void copy(uint8_t src[4], uint8_t dst[4]);\n#[no_mangle]\npub unsafe extern fn copy(src: *const [u8; 4], dst: *mut [u8; 4]) {\n    if src.is_null() { return; }\n    if dst.is_null() { return; }\n\n    // Convert to borrowed pointers.\n    let src: &amp;[u8; 4] = &amp;*src;\n    let dst: &amp;mut [u8; 4] = &amp;mut *dst;\n\n    for (s, d) in src.iter().zip(dst.iter_mut()) {\n        *d = *s;\n    }\n}\n\n#[cfg(test)]\n#[test]\nfn test_copy() {\n    let a = [0, 1, 2, 3];\n    let mut b = [0; 4];\n    unsafe { copy(&amp;a, &amp;mut b); }\n    assert_eq!(b, [0, 1, 2, 3]);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 703, "user_id": 768314, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/230551a8d85da9de1b841826da1fd065?s=128&d=identicon&r=PG", "display_name": "Jambaman", "link": "https://stackoverflow.com/users/768314/jambaman"}, "is_accepted": false, "score": 0, "last_activity_date": 1436910668, "creation_date": 1436910668, "answer_id": 31418018, "question_id": 31238348, "link": "https://stackoverflow.com/questions/31238348/calling-rust-method-from-c-with-array-parameters/31418018#31418018", "title": "Calling Rust method from C with array parameters", "body": "<p>I also found a lot of useful information regarding this in the Rust nightly book, where the function \"dot_product\" basically does exactly what I was looking for: <a href=\"https://doc.rust-lang.org/nightly/book/no-stdlib.html\" rel=\"nofollow\">https://doc.rust-lang.org/nightly/book/no-stdlib.html</a> </p>\n"}], "owner": {"reputation": 703, "user_id": 768314, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/230551a8d85da9de1b841826da1fd065?s=128&d=identicon&r=PG", "display_name": "Jambaman", "link": "https://stackoverflow.com/users/768314/jambaman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1427, "favorite_count": 0, "accepted_answer_id": 31238747, "answer_count": 2, "score": 4, "last_activity_date": 1436910668, "creation_date": 1436160783, "last_edit_date": 1436240596, "question_id": 31238348, "link": "https://stackoverflow.com/questions/31238348/calling-rust-method-from-c-with-array-parameters", "title": "Calling Rust method from C with array parameters", "body": "<p>I'm trying to call Rust code from my C project for an embedded device. The device prints over UART, so I am able to see what the result of my call is.</p>\n\n<p>The following C and Rust code works as expected (I have omitted a lot of boilerplate Rust code that is needed to make it compile).</p>\n\n<p>C:</p>\n\n<pre><code>uint8_t input[] = {1,2,3};\nuint8_t output[] = {4,5,6};\noutput = func(input, output);\nprintf(\"Sum: %d\", output[0]);\n</code></pre>\n\n<p>Rust:</p>\n\n<pre><code>#[no_mangle]\npub extern fn func(input: &amp;[u8], dst: &amp;mut[u8]) -&gt; u8 {\n  3\n}\n</code></pre>\n\n<p>This prints 3 as expected. But I'm stuck at mutating the arrays passed in as references:</p>\n\n<p>C:</p>\n\n<pre><code>uint8_t input[] = {1,2,3};\nuint8_t output[] = {4,5,6};\nfunc(input, output);\nprintf(\"Sum: %d\", output[0]);\n</code></pre>\n\n<p>Rust:</p>\n\n<pre><code>#[no_mangle]\npub extern fn func(input: &amp;[u8], dst: &amp;mut[u8]) {\n  for i in (0..1) {\n      dst[i] = input[i];\n  }\n}\n</code></pre>\n\n<p>This compiles, but prints 4 instead of the expected 1. For some reason I'm not able to change the value of the array. Any ideas?</p>\n\n<p>EDIT: The C function declarations are respectively:</p>\n\n<pre><code>extern uint8_t func(uint8_t in[64], uint8_t output[64]);\nextern void func(uint8_t in[64], uint8_t output[64]);\n</code></pre>\n\n<p>EDIT2: Updated code:\nC:</p>\n\n<pre><code>uint8_t input[64];\nuint8_t output[64];\nfor(uint8_t = 0; i &lt; 64; i++) {\n    input[i] = i;\n}\nfunc(input, output);\nprintf(\"Sum: %d\", output[2]);\n</code></pre>\n\n<p>Expects output 2.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1436191264, "post_id": 31239838, "comment_id": 50492962, "body": "That makes sense.  Is there a good way to get a <code>(usize, usize)</code> from the <code>&amp;str</code> returned by <code>String::split_whitespace()</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 1, "creation_date": 1436221557, "post_id": 31239838, "comment_id": 50510242, "body": "@thirtythreeforty: for a <i>good</i> way, there\u2019s also the unstable <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.subslice_offset\" rel=\"nofollow noreferrer\"><code>subslice_offset</code></a> method; for stable Rust, you can use pointers to the same effect: <a href=\"http://is.gd/ES2UYZ\" rel=\"nofollow noreferrer\">is.gd/ES2UYZ</a>."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1436226689, "post_id": 31239838, "comment_id": 50511820, "body": "I think you&#39;re right. The former is what I want, but the second will work fine. I&#39;m impressed that as_ptr() isn&#39;t marked unsafe."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 2, "creation_date": 1436232890, "post_id": 31239838, "comment_id": 50513156, "body": "@thirtythreeforty: The only operation on raw pointers that Rust considers unsafe is <i>dereferencing</i> the pointer. Other operations, such as comparisons, are not memory unsafe (but that doesn&#39;t mean they are necessarily correct), as they&#39;re just about manipulating integers in disguise."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1436167143, "creation_date": 1436167143, "answer_id": 31239838, "question_id": 31238317, "link": "https://stackoverflow.com/questions/31238317/mutable-borrow-conflict-from-unrolled-loop/31239838#31239838", "title": "Mutable borrow conflict from unrolled loop", "body": "<p>It is not possible in Rust to have a reference to something in the same structure.</p>\n\n<p>Think about it:</p>\n\n<pre><code>struct Line&lt;'a&gt; {\n    text: Box&lt;String&gt;,\n    column: &amp;'a str,\n}\n</code></pre>\n\n<p>What is <code>'a</code> intended to be? The lifetime of the <code>text</code> field (by the way, the <code>Box</code> wrapping around a <code>String</code> is completely superfluous). You thus can\u2019t express the type until it already exists.</p>\n\n<p>If such a reference <em>were</em> permitted, you\u2019d run into problems like this:</p>\n\n<pre><code>let mut line = Line { text: \"foo\".to_owned(), column: \"\" };\nline.column = &amp;self.text;\nline.text = \"bar\".to_owned();\n// Uh oh, column is now invalid, pointing to freed memory\n</code></pre>\n\n<p>There is no way around this while the two values are stored together; they must be stored separately. The workaround that is most likely to be suitable for your case is to store indexes, e.g. start and end indexes as <code>(usize, usize)</code>.</p>\n\n<p>Now: why these particular errors? It comes down to what <code>'a</code> is being inferred as; your vector of lines is <code>Vec&lt;Lines&lt;'x&gt;&gt;</code> for a single lifetime <code>'x</code>: <em>each <code>Lines</code> instance has the same lifetime</em>. This means that the inferred lifetime must be greater than that of the loop, and so each iteration of the loop does indeed keep a mutable reference alive, and so the line does in fact conflict with itself (or rather, a previous iteration) in that way. The loop is not unrolled\u2014it\u2019s just the borrows from the loop are indeed still alive.</p>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 525, "favorite_count": 0, "accepted_answer_id": 31239838, "answer_count": 1, "score": 3, "last_activity_date": 1436167143, "creation_date": 1436160589, "question_id": 31238317, "link": "https://stackoverflow.com/questions/31238317/mutable-borrow-conflict-from-unrolled-loop", "title": "Mutable borrow conflict from unrolled loop", "body": "<p>Consider the following code (<a href=\"http://is.gd/YeSIOf\" rel=\"nofollow\">Playpen</a>), which is meant to simply parse input from stdin and put each line and a reference to that line in a structure:</p>\n\n<pre><code>use std::io;\nuse std::io::BufRead;\n\nstruct Line&lt;'a&gt; {\n    text: Box&lt;String&gt;,\n    column: &amp;'a str,\n}\n\nfn main() {\n    let column = 1;\n    let stdin = io::stdin();\n    let mut lines: Vec&lt;Line&gt; = Vec::new();\n\n    for line_res in stdin.lock().lines() {\n        lines.push(Line {\n            text: Box::new(line_res.unwrap()),\n            column: \"\",\n        });\n\n        let line = lines.last_mut().unwrap();\n        line.column = line.text.split_whitespace().nth(column)\n                      .unwrap_or(\"\");\n    }\n}\n</code></pre>\n\n<p>That is, <code>Line::column</code> should refer to <code>Line::text</code>.  Note that I set <code>column</code> to <code>\"\"</code> initially (and modify it later) because I am not aware of a way to refer to the <code>text</code> element at creation time.</p>\n\n<p>Unfortunately, the above code does not compile, spitting out the following very obtuse error message:</p>\n\n<pre><code>&lt;anon&gt;:15:3: 15:8 error: cannot borrow `lines` as mutable more than once at a time\n&lt;anon&gt;:15       lines.push(Line {\n                ^~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:14:2: 23:3 note: expansion site\n&lt;anon&gt;:20:14: 20:19 note: previous borrow of `lines` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `lines` until the borrow ends\n&lt;anon&gt;:20       let line = lines.last_mut().unwrap();\n                           ^~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:14:2: 23:3 note: expansion site\n&lt;anon&gt;:24:2: 24:2 note: previous borrow ends here\n&lt;anon&gt;:9 fn main() {\n...\n&lt;anon&gt;:24 }\n          ^\n&lt;anon&gt;:20:14: 20:19 error: cannot borrow `lines` as mutable more than once at a time\n&lt;anon&gt;:20       let line = lines.last_mut().unwrap();\n                           ^~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:14:2: 23:3 note: expansion site\n&lt;anon&gt;:20:14: 20:19 note: previous borrow of `lines` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `lines` until the borrow ends\n&lt;anon&gt;:20       let line = lines.last_mut().unwrap();\n                           ^~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:14:2: 23:3 note: expansion site\n&lt;anon&gt;:24:2: 24:2 note: previous borrow ends here\n&lt;anon&gt;:9 fn main() {\n...\n&lt;anon&gt;:24 }\n          ^\n&lt;anon&gt;:20:14: 20:19 error: cannot borrow `lines` as mutable more than once at a time\n&lt;anon&gt;:20       let line = lines.last_mut().unwrap();\n                           ^~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:14:2: 23:3 note: expansion site\n&lt;anon&gt;:20:14: 20:19 note: previous borrow of `lines` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `lines` until the borrow ends\n&lt;anon&gt;:20       let line = lines.last_mut().unwrap();\n                           ^~~~~\nnote: in expansion of for loop expansion\n&lt;anon&gt;:14:2: 23:3 note: expansion site\n&lt;anon&gt;:24:2: 24:2 note: previous borrow ends here\n&lt;anon&gt;:9 fn main() {\n...\n&lt;anon&gt;:24 }\n          ^\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>Surely this is nonsense!  The line conflicts <em>with itself</em>, among other things.  The only clue that I can see in this error is the fact that the loop is being unrolled.  However, shouldn't all the borrows made in the loop expire at the end of each iteration?</p>\n\n<p>What is the actual semantic issue with the above code, and what is the fix?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1436160609, "post_id": 31237579, "comment_id": 50474687, "body": "It may be worth mentioning that the capacity and the contents do have a difference in size. That is, more space may be allocated than is currently used."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1436155130, "creation_date": 1436155130, "answer_id": 31237579, "question_id": 31237408, "link": "https://stackoverflow.com/questions/31237408/does-rust-guarantee-that-elements-of-a-vec-smaller-than-a-word-size-will-be-tigh/31237579#31237579", "title": "Does Rust guarantee that elements of a Vec smaller than a word size will be tightly packed?", "body": "<p><strong>Yes.</strong></p>\n\n<p>The representation of the contents of a vector is the same as that of a slice, which is the same as that of a fixed-size array. Thus you may compare <code>std::mem::size_of::&lt;[u16, 1]&gt;()</code> and <code>std::mem::size_of::&lt;[u16, 10]&gt;()</code> and see that they always differ by a factor of ten. (<a href=\"http://is.gd/9rw3rC\" rel=\"nofollow\">Citation: this code</a>.)</p>\n\n<p>Rust uses byte indexing, so <code>u8</code> takes one byte, <code>u16</code> takes two bytes, <code>u32</code> takes four bytes and <code>u64</code> takes eight bytes. <code>bool</code> also takes one byte; there are seven wasted bits per byte (hence types like the currently unstable <a href=\"http://doc.rust-lang.org/std/collections/struct.BitVec.html\" rel=\"nofollow\"><code>BitVec</code></a>).</p>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 156, "favorite_count": 0, "accepted_answer_id": 31237579, "answer_count": 1, "score": 3, "last_activity_date": 1436155130, "creation_date": 1436153587, "last_edit_date": 1436153843, "question_id": 31237408, "link": "https://stackoverflow.com/questions/31237408/does-rust-guarantee-that-elements-of-a-vec-smaller-than-a-word-size-will-be-tigh", "title": "Does Rust guarantee that elements of a Vec smaller than a word size will be tightly packed?", "body": "<p>How much space the <em>contents</em> of a <code>Vec&lt;u16&gt;</code> takes? With, say, 1000 elements. Is there a way to verify this with a test program?</p>\n\n<p>Is this guaranteed to be the same as <code>&amp;[u16]</code>? (I think it would make no sense to not be, since the conversion is cheap)</p>\n\n<p>Also <code>Vec[u8]</code>, <code>&amp;[u8]</code>, etc.</p>\n\n<p>(<a href=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"nofollow\"><code>std::mem::size_of</code></a> returns the static size of the type, not of its contents)</p>\n"}, {"tags": ["compiler-construction", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1553, "user_id": 3839220, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/8062ce7db5476fc8d470bba1e7cc785d?s=128&d=identicon&r=PG&f=1", "display_name": "metro-man", "link": "https://stackoverflow.com/users/3839220/metro-man"}, "edited": false, "score": 0, "creation_date": 1436200735, "post_id": 31238945, "comment_id": 50499411, "body": "awesome! perfect thanks :)"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 2, "last_activity_date": 1436163896, "creation_date": 1436163896, "answer_id": 31238945, "question_id": 31236747, "link": "https://stackoverflow.com/questions/31236747/how-does-impl-and-traits-work-on-a-lower-level/31238945#31238945", "title": "How does impl and traits work on a lower level?", "body": "<p>This question is quite unspecific (and an exhaustive answer would be excruciating to read), so I'll just refer you to two things:</p>\n\n<p>The <a href=\"https://play.rust-lang.org/\" rel=\"nofollow\">Rust playground</a> can show generated LLVM IR and assembly.</p>\n\n<p>The <a href=\"https://github.com/rust-lang/rust/\" rel=\"nofollow\">Rust source code</a> is publicly available. The code you seek lives in librustc (which takes the AST from libsyntax, typechecked by <code>librustc_typeck</code> and borrow-checked by <code>librustc_borrowck</code> and drives LLVM byte code creation). The <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/README.md\" rel=\"nofollow\">README.md</a> of librustc has a lot of info for you.</p>\n"}], "owner": {"reputation": 1553, "user_id": 3839220, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/8062ce7db5476fc8d470bba1e7cc785d?s=128&d=identicon&r=PG&f=1", "display_name": "metro-man", "link": "https://stackoverflow.com/users/3839220/metro-man"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "closed_date": 1436167111, "accepted_answer_id": 31238945, "answer_count": 1, "score": 1, "last_activity_date": 1436163896, "creation_date": 1436146907, "question_id": 31236747, "link": "https://stackoverflow.com/questions/31236747/how-does-impl-and-traits-work-on-a-lower-level", "closed_reason": "Needs more focus", "title": "How does impl and traits work on a lower level?", "body": "<p>I'm kind of interested in working on the rust compiler one day, but I want to have a solid understanding of how everything is implemented in Rust. I understand most of the concepts in Rust, or how they would be implemented. However, I'm not too sure about impl's or traits are implemented at a lower level? For instance, what kind of code they would generate, etc...</p>\n\n<p>Thanks</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436136026, "post_id": 31235676, "comment_id": 50470018, "body": "Why is this <i>not</i> a duplicate of the question you linked to?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436136060, "post_id": 31235676, "comment_id": 50470025, "body": "Or of the other two it links to: <a href=\"http://stackoverflow.com/q/27535289/155423\">stackoverflow.com/q/27535289/155423</a> and <a href=\"http://stackoverflow.com/q/27496278/155423\">stackoverflow.com/q/27496278/155423</a> ?"}, {"owner": {"reputation": 2812, "user_id": 1742799, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/e06a5811645fd9bce15513a0e7ffd646?s=128&d=identicon&r=PG", "display_name": "tksfz", "link": "https://stackoverflow.com/users/1742799/tksfz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436136189, "post_id": 31235676, "comment_id": 50470062, "body": "I&#39;m happy making this a duplicate.  My case had  to do with <code>map()</code> and the question regarding <code>filter()</code> never  came up in any searches.  Only after I thought to search for filter did I find the  other question, so I figured a duplicate with a pointer would help others."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436136270, "post_id": 31235676, "comment_id": 50470074, "body": "You can mark it as a duplicate yourself \u2014 I&#39;d pick whichever was most useful to solving your problem. Duplicates are great - they are nice signposts for future searchers!"}], "owner": {"reputation": 2812, "user_id": 1742799, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/e06a5811645fd9bce15513a0e7ffd646?s=128&d=identicon&r=PG", "display_name": "tksfz", "link": "https://stackoverflow.com/users/1742799/tksfz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 531, "favorite_count": 0, "closed_date": 1436136526, "answer_count": 0, "score": 2, "last_activity_date": 1436136805, "creation_date": 1436135866, "last_edit_date": 1495540278, "question_id": 31235676, "link": "https://stackoverflow.com/questions/31235676/how-to-return-map-iterator", "closed_reason": "Duplicate", "title": "How to return Map iterator", "body": "<p>I'd like to write a function that returns the lazy iterator resulting from a <code>map()</code>:</p>\n\n<pre><code>fn mapper(v: Vec&lt;u8&gt;) -&gt; ??? {\n  v.iter().map(|x| x + 1)\n}\n</code></pre>\n\n<p>I've used <code>core::iter::Map&lt;core::slice::Iter&lt;'a, u8&gt;, FnOnce(&amp;u8) -&gt; u8&gt;</code> for ??? and I get errors like: <code>map.rs:3:1: 5:2 error: the trait core::marker::Sized is not implemented for the type for&lt;'r&gt; core::ops::FnOnce(&amp;'r u8) -&gt; u8 [E0277]</code>, for example.  I also get various issues relating to the closure and I'm confused about whether returning a closure is even possible.</p>\n\n<p>(I definitely want the return type to be a lazy iterator, not a <code>Vec&lt;_&gt;</code> resulting from a <code>collect()</code>.  My actual code does something more complicated in the map.)</p>\n\n<p>It looks like we are limited by the same issues described here:  <a href=\"https://stackoverflow.com/questions/27646925/how-do-i-return-a-filter-iterator-from-a-function\">How do I return a Filter iterator from a function?</a></p>\n"}, {"tags": ["input", "integer", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436135349, "post_id": 31235359, "comment_id": 50469850, "body": "<a href=\"http://doc.rust-lang.org/stable/book/guessing-game.html\" rel=\"nofollow noreferrer\">The Rust Programming Language, chapter 3.1 \u2014 Guessing game</a>: <i>The <code>parse()</code> method on strings parses a string into some kind of number</i>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1436135387, "post_id": 31235477, "comment_id": 50469859, "body": "You don&#39;t need a compiler installed for things like this - the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust playpen</a> has you covered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436135536, "post_id": 31235477, "comment_id": 50469892, "body": "Using <a href=\"http://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or\" rel=\"nofollow noreferrer\"><code>unwrap_or</code></a> would be more idiomatic here: <code>input_string.parse::&lt;i32&gt;().unwrap_or(-1)</code>. You could also us this to specify the integer type: <code>input_string.parse().unwrap_or(-1i32)</code>."}, {"owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436177838, "post_id": 31235477, "comment_id": 50484028, "body": "@Shepmaster, both very interesting, thanks!  <code>unwrap_or</code> seems less idiomatic to me, but if that&#39;s the way the community is swinging, it works for me."}], "tags": [], "owner": {"reputation": 1754, "user_id": 3438854, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6166f4f52597368408966dd0b679402?s=128&d=identicon&r=PG&f=1", "display_name": "John C", "link": "https://stackoverflow.com/users/3438854/john-c"}, "is_accepted": true, "score": 5, "last_activity_date": 1436177916, "last_edit_date": 1495540849, "creation_date": 1436134204, "answer_id": 31235477, "question_id": 31235359, "link": "https://stackoverflow.com/questions/31235359/reading-an-integer-from-input-and-assigning-it-to-a-variable/31235477#31235477", "title": "Reading an integer from input and assigning it to a variable", "body": "<p>I don't have a Rust compiler on this machine, but based in part on <a href=\"https://stackoverflow.com/a/27683271/3438854\">this answer</a> that comes close, you want something like...</p>\n\n<pre><code>let user_val = match input_string.parse::&lt;i32&gt;() {\n    Ok(x) =&gt; x,\n    Err(_) =&gt; -1,\n};\n</code></pre>\n\n<p>Or, as pointed out in the comments,</p>\n\n<pre><code>let user_val = input_string.parse::&lt;i32&gt;().unwrap_or(-1);\n</code></pre>\n\n<p>...though your choice in integer size and default value might obviously be different, and you don't always need that type qualifier (<code>::&lt;i32&gt;</code>) for <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow noreferrer\">parse()</a> where the type can be inferred from the assignment.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1557092935, "last_edit_date": 1557092935, "creation_date": 1436135938, "answer_id": 31235685, "question_id": 31235359, "link": "https://stackoverflow.com/questions/31235359/reading-an-integer-from-input-and-assigning-it-to-a-variable/31235685#31235685", "title": "Reading an integer from input and assigning it to a variable", "body": "<p>To read user input, you always read a set of bytes. Sometimes, you can interpret those bytes as a UTF-8 string. You can then further interpret the string as an integral or floating point number (or lots of other things, like an IP address).</p>\n\n<p>Here's a complete example of reading a single line of input and parsing it as a 32-bit signed integer:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut input = String::new();\n    io::stdin().read_line(&amp;mut input).expect(\"Not a valid string\");\n    let input_num: i32 = input.trim().parse().expect(\"Not a valid number\");\n    println!(\"Your number plus one is {}\", input_num + 1);\n}\n</code></pre>\n\n<p>Note that no user-friendly error handling is taking place. The program simply panics if reading input or parsing fails. Running the program produces:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ./input\n41\nYour number plus one is 42\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 8340007, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-Fseg6ytN0ts/AAAAAAAAAAI/AAAAAAAAnqo/ceG18cEHhv4/photo.jpg?sz=128", "display_name": "Emmanuel Antony", "link": "https://stackoverflow.com/users/8340007/emmanuel-antony"}, "is_accepted": false, "score": 0, "last_activity_date": 1557092999, "last_edit_date": 1557092999, "creation_date": 1557043449, "answer_id": 55989982, "question_id": 31235359, "link": "https://stackoverflow.com/questions/31235359/reading-an-integer-from-input-and-assigning-it-to-a-variable/55989982#55989982", "title": "Reading an integer from input and assigning it to a variable", "body": "<p>A set of bytes comprises an input. In Rust, you accept the input as a UTF-8 <code>String</code>. Then you parse the string to an integer or floating point number. In simple ways you accept the string and parse it, then write an expect`` statement for both, to display a message to the user what went wrong when the program panics during runtime.</p>\n\n<pre><code>fn main() {\n    let mut x = String::new();\n    std::io::stdin().read_line(&amp;mut x)\n        .expect(\"Failed to read input.\");\n    let x: u32 = x.trim().parse()\n        .expect(\"Enter a number not a string.\");\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<p>If the program fails to parse the input string then it panics and displays an error message. Notice that the program still panics and we are not handling an error perfectly. One more thing to notice is that we can use the same variable name <code>x</code> and not some <code>x_int</code> because of the variable shadowing feature. To handle the error better we can use the <code>match</code> construct.</p>\n\n<pre><code>fn main() {\n    let mut x = String::new();\n    match std::io::stdin().read_line(&amp;mut x) {\n        Ok(_) =&gt; println!(\"String has been taken in.\"),\n        Err(_) =&gt; {\n            println!(\"Failed to read input.\");\n            return;\n        },\n    };\n    let x: u32 = match x.trim().parse() {\n        Ok(n) =&gt; {\n            println!(\"Converted string to int.\");\n            n\n        },\n        Err(_) =&gt; {\n            println!(\"Failed to parse.\");\n            return;\n        },\n    };\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<p>This is longer way but a nicer way to handle errors and input and parse a number.</p>\n"}], "owner": {"reputation": 247, "user_id": 4572619, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh4.googleusercontent.com/-j-KVFCZUYuE/AAAAAAAAAAI/AAAAAAAAAXw/76TrGwYjMpw/photo.jpg?sz=128", "display_name": "Nicol&#225;s Siplis", "link": "https://stackoverflow.com/users/4572619/nicol%c3%a1s-siplis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1225, "favorite_count": 1, "accepted_answer_id": 31235477, "answer_count": 3, "score": 0, "last_activity_date": 1557092999, "creation_date": 1436133258, "question_id": 31235359, "link": "https://stackoverflow.com/questions/31235359/reading-an-integer-from-input-and-assigning-it-to-a-variable", "title": "Reading an integer from input and assigning it to a variable", "body": "<p>I've been trying to find an easy way to read variables in Rust, but haven't had any luck so far. All the examples in the Rust Book deal with strings AFAIK, I couldn't find anything concerning integers or floats that would work.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2902, "user_id": 773754, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4a8ff761f5d046326a04927935be3979?s=128&d=identicon&r=PG", "display_name": "rspeer", "link": "https://stackoverflow.com/users/773754/rspeer"}, "edited": false, "score": 2, "creation_date": 1467930041, "post_id": 31234017, "comment_id": 63933374, "body": "That didn&#39;t turn it into an Option&lt;&amp;str&gt;."}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": false, "score": 1, "last_activity_date": 1436123395, "creation_date": 1436123395, "answer_id": 31234017, "question_id": 31233938, "link": "https://stackoverflow.com/questions/31233938/converting-from-optionstring-to-optionstr/31234017#31234017", "title": "Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;", "body": "<p>Here's one way you can do it. Keep in mind that you <em>have</em> to keep the original <code>String</code> around, otherwise what would the <code>&amp;str</code> be a slice into?</p>\n\n<pre><code>let opt = Some(String::from(\"test\")); // kept around\n\nlet unwrapped: &amp;str = match opt.as_ref() {\n  Some(s) =&gt; s, // deref coercion\n  None =&gt; \"default\",\n};\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2b417ea38cfb1dfe915c&amp;version=stable\" rel=\"nofollow\">playpen</a></p>\n"}, {"comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 13, "creation_date": 1436124493, "post_id": 31234028, "comment_id": 50466955, "body": "bikesheddy comment: instead of <code>map(|x| &amp;**x)</code> you could also do <code>map(String::as_ref)</code>."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 2, "creation_date": 1436127613, "post_id": 31234028, "comment_id": 50467828, "body": "This works nicely, although still a little verbose.  To clarify, the type of <code>opt.as_ref()</code> is <code>Option&lt;&amp;String&gt;</code>, then <code>opt.as_ref().map(String::as_ref)</code> passes this <code>&amp;String</code> to <code>String::as_ref</code>, which returns an <code>&amp;str</code>.  Why can&#39;t the <code>&amp;String</code> from <code>Option::as_ref</code> be coerced to an <code>&amp;str</code>?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 1, "creation_date": 1436127903, "post_id": 31234028, "comment_id": 50467918, "body": "@thirtythreeforty <code>String::as_ref</code> returns an <code>&amp;str</code>, not a <code>&amp;&amp;String</code> (see <a href=\"http://doc.rust-lang.org/collections/string/struct.String.html#method.as_ref\" rel=\"nofollow noreferrer\">here</a>)"}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1436127924, "post_id": 31234028, "comment_id": 50467927, "body": "@fjh I just realized that and edited :).  My coercion question remains."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1436128298, "post_id": 31234028, "comment_id": 50468038, "body": "@thirtythreeforty Your question is why deref coercions don&#39;t work for <code>Option&lt;&amp;String&gt;</code> -&gt; <code>Option&lt;&amp;str&gt;</code> even though they work for <code>&amp;String</code> -&gt; <code>&amp;str</code>? If so, I&#39;m out of my depth, sorry."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1436128363, "post_id": 31234028, "comment_id": 50468057, "body": "Yes, that&#39;s my question.  I suppose it&#39;s a little more obvious that that doesn&#39;t work once you spell it out: there&#39;s no relationship between <code>Option&lt;T&gt;</code> and <code>Option&lt;U&gt;</code>, in general."}, {"owner": {"reputation": 2902, "user_id": 773754, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4a8ff761f5d046326a04927935be3979?s=128&d=identicon&r=PG", "display_name": "rspeer", "link": "https://stackoverflow.com/users/773754/rspeer"}, "edited": false, "score": 0, "creation_date": 1467930336, "post_id": 31234028, "comment_id": 63933461, "body": "The <code>&amp;**x</code> doesn&#39;t work for me in Rust 1.9. It says &quot;error: type <code>str</code> cannot be dereferenced&quot;."}, {"owner": {"reputation": 1326, "user_id": 1836144, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e250d748ff6c2ff23bc4550e0f0971f5?s=128&d=identicon&r=PG", "display_name": "little-dude", "link": "https://stackoverflow.com/users/1836144/little-dude"}, "edited": false, "score": 0, "creation_date": 1488347099, "post_id": 31234028, "comment_id": 72184363, "body": "Can someone explain the <code>&amp;**</code> part? How is <code>&amp;**</code> equivalent to <code>as_ref</code> ?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 1326, "user_id": 1836144, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e250d748ff6c2ff23bc4550e0f0971f5?s=128&d=identicon&r=PG", "display_name": "little-dude", "link": "https://stackoverflow.com/users/1836144/little-dude"}, "edited": false, "score": 1, "creation_date": 1488411997, "post_id": 31234028, "comment_id": 72224322, "body": "@little-dude: In <code>&amp;**</code>, the leftmost <code>*</code> actually invokes the <code>Deref</code> trait, because <code>String</code> implements <code>Deref&lt;Target=str&gt;</code>. <code>Deref::deref</code> and <code>AsRef::as_ref</code> both provide reference-to-reference conversions, and it happens that converting from <code>&amp;String</code> to <code>&amp;str</code> is available with both. You could use <code>map(String::deref)</code> instead of <code>map(String::as_ref)</code>, it would also be equivalent."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 55, "last_activity_date": 1498241033, "last_edit_date": 1498241033, "creation_date": 1436123446, "answer_id": 31234028, "question_id": 31233938, "link": "https://stackoverflow.com/questions/31233938/converting-from-optionstring-to-optionstr/31234028#31234028", "title": "Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.as_ref\" rel=\"noreferrer\"><code>as_ref()</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.map\" rel=\"noreferrer\"><code>map()</code></a> to transform an <code>Option&lt;String&gt;</code> into an <code>Option&lt;&amp;str&gt;</code>.</p>\n\n<pre><code>fn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.as_ref().map(|x| &amp;**x).unwrap_or(\"default string\");\n}\n</code></pre>\n\n<p>First, <code>as_ref()</code> implicitly takes a reference on <code>opt</code>, giving an <code>&amp;Option&lt;String&gt;</code> (because <code>as_ref()</code> takes <code>&amp;self</code>, i.e. it receives a reference), and turns it into an <code>Option&lt;&amp;String&gt;</code>. Then we use <code>map</code> to convert it to an <code>Option&lt;&amp;str&gt;</code>. Here's what <code>&amp;**x</code> does: the rightmost <code>*</code> (which is evaluated first) simply dereferences the <code>&amp;String</code>, giving a <code>String</code> lvalue. Then, the leftmost <code>*</code> actually invokes the <a href=\"https://doc.rust-lang.org/stable/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> trait, because <code>String</code> <a href=\"https://doc.rust-lang.org/stable/std/string/struct.String.html#implementations\" rel=\"noreferrer\">implements</a> <code>Deref&lt;Target=str&gt;</code>, giving us a <code>str</code> lvalue. Finally, the <code>&amp;</code> takes the address of the <code>str</code> lvalue, giving us a <code>&amp;str</code>.</p>\n\n<p>You can simplify this a bit further by using <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.map_or\" rel=\"noreferrer\"><code>map_or</code></a> to combine <code>map</code> and <code>unwrap_or</code> in a single operation:</p>\n\n<pre><code>fn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.as_ref().map_or(\"default string\", |x| &amp;**x);\n}\n</code></pre>\n\n<p>If <code>&amp;**x</code> looks too magical to you, you can write <code>String::as_str</code> instead:</p>\n\n<pre><code>fn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.as_ref().map_or(\"default string\", String::as_str);\n}\n</code></pre>\n\n<p>or <code>String::as_ref</code> (from the <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"noreferrer\"><code>AsRef</code></a> trait, which is in the <a href=\"https://doc.rust-lang.org/stable/std/prelude/v1/index.html\" rel=\"noreferrer\">prelude</a>):</p>\n\n<pre><code>fn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.as_ref().map_or(\"default string\", String::as_ref);\n}\n</code></pre>\n\n<p>or <code>String::deref</code> (though you need to import the <code>Deref</code> trait too):</p>\n\n<pre><code>use std::ops::Deref;\n\nfn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.as_ref().map_or(\"default string\", String::deref);\n}\n</code></pre>\n\n<p>For either of these to work, you need to keep an owner for the <code>Option&lt;String&gt;</code> as long as the <code>Option&lt;&amp;str&gt;</code> or unwrapped <code>&amp;str</code> needs to remain available. If that's too complicated, you could use <a href=\"https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html\" rel=\"noreferrer\"><code>Cow</code></a>.</p>\n\n<pre><code>use std::borrow::Cow::{Borrowed, Owned};\n\nfn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.map_or(Borrowed(\"default string\"), |x| Owned(x));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "edited": false, "score": 1, "creation_date": 1453673339, "post_id": 34978794, "comment_id": 57693335, "body": "This is a great utility function. I wish it was part of the standard library as a function on Option&lt;T&gt;!"}, {"owner": {"reputation": 2902, "user_id": 773754, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4a8ff761f5d046326a04927935be3979?s=128&d=identicon&r=PG", "display_name": "rspeer", "link": "https://stackoverflow.com/users/773754/rspeer"}, "edited": false, "score": 1, "creation_date": 1467930498, "post_id": 34978794, "comment_id": 63933511, "body": "Thanks! This works for me -- if I include this code, then <code>opt.as_deref()</code> is indeed an <code>Option&lt;&amp;str&gt;</code>."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 20, "last_activity_date": 1453655364, "creation_date": 1453655364, "answer_id": 34978794, "question_id": 31233938, "link": "https://stackoverflow.com/questions/31233938/converting-from-optionstring-to-optionstr/34978794#34978794", "title": "Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;", "body": "<p>A nicer way could be to implement this generically for <code>T: Deref</code>:</p>\n\n<pre><code>use std::ops::Deref;\n\ntrait OptionDeref&lt;T: Deref&gt; {\n    fn as_deref(&amp;self) -&gt; Option&lt;&amp;T::Target&gt;;\n}\n\nimpl&lt;T: Deref&gt; OptionDeref&lt;T&gt; for Option&lt;T&gt; {\n    fn as_deref(&amp;self) -&gt; Option&lt;&amp;T::Target&gt; {\n        self.as_ref().map(Deref::deref)\n    }\n}\n</code></pre>\n\n<p>which effectively generalizes <code>as_ref</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 16853, "user_id": 4101725, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-dGwoPMFb_tM/AAAAAAAAAAI/AAAAAAAABks/tMMqc6E9REg/photo.jpg?sz=128", "display_name": "Michele d&#39;Amico", "link": "https://stackoverflow.com/users/4101725/michele-damico"}, "is_accepted": false, "score": 8, "last_activity_date": 1488552398, "last_edit_date": 1488552398, "creation_date": 1488541950, "answer_id": 42578202, "question_id": 31233938, "link": "https://stackoverflow.com/questions/31233938/converting-from-optionstring-to-optionstr/42578202#42578202", "title": "Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;", "body": "<p>Although I love Veedrac's answer (I used it), if you need it at just one point and you would like something that is expressive you can use <code>as_ref()</code>, <code>map</code> and <code>String::as_str</code> chain:</p>\n\n<pre><code>let opt: Option&lt;String&gt; = Some(\"some value\".to_string());\n\nassert_eq!(Some(\"some value\"), opt.as_ref().map(String::as_str));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1581943449, "post_id": 53485793, "comment_id": 106594410, "body": "It works for me but I can&#39;t understand why my other version using <code>map</code> didn&#39;t work. I don&#39;t understand what happens to the first <code>Options&lt;String&gt;</code> and the copy that references it in the case of the <code>as_deref</code> variant of the code. Here&#39;s my working code using <code>as_deref</code>: <code>let device_id = UsbDeviceIdentifier::VidPidSn { vid: device.vendor_id, pid: device.product_id, sn: device.serial_number.as_deref().unwrap_or(&quot;&quot;) };</code> and my first try <code>let device_id = UsbDeviceIdentifier::VidPidSn { vid: device.vendor_id, pid: device.product_id, sn: device.serial_number.map(|s| s.as_str()).unwrap_or(&quot;&quot;) };</code>."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1581943667, "post_id": 53485793, "comment_id": 106594525, "body": "My error is <code>error[E0515]: cannot return value referencing function parameter `s`</code>, <code>s.as_str() returns a value referencing data owned by the current function</code>. OK, but why does <code>as_deref</code> work, because it still creates a reference to the original <code>Option&lt;String&gt;</code> returned by <code>.serial_number</code>, so that still points to data owned by that <code>Option</code>!? Is the difference that <code>as_deref</code> does a transformation in place as opposed to doing it in the closure&#39;s body, where it is discarding the source of the slice it returns? If that&#39;s so, is there a way to fix that? Like return a copy of the str?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1581956547, "post_id": 53485793, "comment_id": 106601751, "body": "@Paul-SebastianManole please read <a href=\"https://stackoverflow.com/a/31234028/155423\">the existing answer that shows how to use <code>map</code></a>; does that solve your issue?"}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1581977619, "post_id": 53485793, "comment_id": 106610548, "body": "Yeah, but I&#39;m still puzzled."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1581984362, "post_id": 53485793, "comment_id": 106612271, "body": "@Paul-SebastianManole how about <a href=\"https://stackoverflow.com/q/35249309/155423\">Result of Option::map does not live long enough</a>"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1591702270, "post_id": 53485793, "comment_id": 110149717, "body": "Interestingly, I can&#39;t get <code>as_deref()</code> to convert <code>Option&lt;&amp;String&gt;</code> to <code>Option&lt;&amp;str&gt;</code>. (The <code>Option&lt;&amp;String&gt;</code> is obtained by a hash table lookup.) Of course, <code>.map(String::as_str)</code> works, but I wonder if there is a &quot;standard&quot; combinator to achieve the same. For example, <code>.copied().as_deref()</code> doesn&#39;t work either because <code>Option&lt;&amp;String&gt;</code> is not <code>Copy</code>, and <code>.cloned().as_deref()</code> works, but at the cost of a cloning."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 82, "last_activity_date": 1576785569, "last_edit_date": 1576785569, "creation_date": 1543251546, "answer_id": 53485793, "question_id": 31233938, "link": "https://stackoverflow.com/questions/31233938/converting-from-optionstring-to-optionstr/53485793#53485793", "title": "Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;", "body": "<p>As of Rust 1.40, the standard library has <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref\" rel=\"noreferrer\"><code>Option::as_deref</code></a> to do this:</p>\n\n<pre><code>fn main() {\n    let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\n    let value = opt.as_deref().unwrap_or(\"default string\");\n}\n</code></pre>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 17738, "favorite_count": 14, "accepted_answer_id": 53485793, "answer_count": 5, "score": 95, "last_activity_date": 1576785569, "creation_date": 1436122957, "last_edit_date": 1543251362, "question_id": 31233938, "link": "https://stackoverflow.com/questions/31233938/converting-from-optionstring-to-optionstr", "title": "Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;", "body": "<p>Very often I have obtained an <code>Option&lt;String&gt;</code> from a calculation, and I would like to either use this value or a default hardcoded value.</p>\n\n<p>This would be trivial with an integer:</p>\n\n<pre><code>let opt: Option&lt;i32&gt; = Some(3);\nlet value = opt.unwrap_or(0); // 0 being the default\n</code></pre>\n\n<p>But with a <code>String</code> and a <code>&amp;str</code>, the compiler complains about mismatched types:</p>\n\n<pre><code>let opt: Option&lt;String&gt; = Some(\"some value\".to_owned());\nlet value = opt.unwrap_or(\"default string\");\n</code></pre>\n\n<p>The exact error here is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:31\n  |\n4 |     let value = opt.unwrap_or(\"default string\");\n  |                               ^^^^^^^^^^^^^^^^\n  |                               |\n  |                               expected struct `std::string::String`, found reference\n  |                               help: try using a conversion method: `\"default string\".to_string()`\n  |\n  = note: expected type `std::string::String`\n             found type `&amp;'static str`\n</code></pre>\n\n<p>One option is to convert the string slice into an owned String, as suggested by rustc:</p>\n\n<pre><code>let value = opt.unwrap_or(\"default string\".to_string());\n</code></pre>\n\n<p>But this causes an allocation, which is undesirable when I want to immediately convert the result back to a string slice, as in this call to <code>Regex::new()</code>:</p>\n\n<pre><code>let rx: Regex = Regex::new(&amp;opt.unwrap_or(\"default string\".to_string()));\n</code></pre>\n\n<p>I would rather convert the <code>Option&lt;String&gt;</code> to an <code>Option&lt;&amp;str&gt;</code> to avoid this allocation.</p>\n\n<p>What is the idomatic way to write this?</p>\n"}, {"tags": ["string", "rust", "lifetime", "string-literals"], "answers": [{"comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436102807, "post_id": 31230724, "comment_id": 50460391, "body": "@MatthieuM. Thanks for the edit. I should really compile my code before posting."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1436190480, "post_id": 31230724, "comment_id": 50492380, "body": "IMHO, applying some simple lifetime elision rules does not have anything to do with &quot;inference&quot; which is why I wouldn&#39;t use that word in this context."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 17, "last_activity_date": 1581284761, "last_edit_date": 1581284761, "creation_date": 1436102080, "answer_id": 31230724, "question_id": 31230585, "link": "https://stackoverflow.com/questions/31230585/how-does-the-lifetime-work-on-constant-strings-string-literals/31230724#31230724", "title": "How does the lifetime work on constant strings / string literals?", "body": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0141-lifetime-elision.md\" rel=\"noreferrer\">Lifetime elision</a> infers that the full type of</p>\n\n<pre><code>fn get_str(s: &amp;str) -&gt; &amp;str\n</code></pre>\n\n<p>is</p>\n\n<pre><code>fn get_str&lt;'a&gt;(s: &amp;'a str) -&gt; &amp;'a str\n</code></pre>\n\n<p>which basically means that the return value of <code>get_str</code> has to be valid as long as <code>s</code> is valid. The actual type of the <a href=\"https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#the-static-lifetime\" rel=\"noreferrer\">string literal <code>\"Hello world\"</code> is <code>&amp;'static str</code></a>, which means that it is valid for the entire run of the program. Since this satisfies the lifetime constraints in the function signature (because <code>'static</code> always includes <code>'a</code> for any <code>'a</code>), this works.</p>\n\n<p>However, a more sensible way to get your original code to work would be to add an explicit lifetime to the function type:</p>\n\n<pre><code>fn get_str() -&gt; &amp;'static str {\n    \"Hello World\"\n}\n</code></pre>\n\n<blockquote>\n  <p>How does \"Hello World\" borrow from the parameter <code>s</code>, even it has nothing to do with <code>s</code>?</p>\n</blockquote>\n\n<p>There are only two options that would make sense for the return value's lifetime in a function with a single reference argument:</p>\n\n<ol>\n<li>It can be <code>'static</code>, as it should be in your example, or</li>\n<li>The return value's lifetime has to be tied to the lifetime of the argument, which is what lifetime elision defaults to.</li>\n</ol>\n\n<p>There is some rationale for choosing the latter in the link at the top of this post, but it basically comes down to the fact that the latter is the far more common case. Note that lifetime elision <em>does not look at the function body</em> at all, it just goes by the function signature. That's why it won't take the fact that you're just returning a string constant into account.</p>\n"}], "owner": {"reputation": 1436, "user_id": 2381889, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/9db2c05b2454cb81154a180fd7792046?s=128&d=identicon&r=PG", "display_name": "Adam", "link": "https://stackoverflow.com/users/2381889/adam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3026, "favorite_count": 1, "accepted_answer_id": 31230724, "answer_count": 1, "score": 7, "last_activity_date": 1581284761, "creation_date": 1436101193, "last_edit_date": 1526433775, "question_id": 31230585, "link": "https://stackoverflow.com/questions/31230585/how-does-the-lifetime-work-on-constant-strings-string-literals", "title": "How does the lifetime work on constant strings / string literals?", "body": "<p>I read the <a href=\"https://doc.rust-lang.org/stable/book/first-edition/lifetimes.html\" rel=\"nofollow noreferrer\">tutorial on the official website</a> and I have some questions on the lifetime of constant strings / string literals.</p>\n\n<p>I get an error when I write the following code:</p>\n\n<pre><code>fn get_str() -&gt; &amp;str {\n    \"Hello World\"\n}\n</code></pre>\n\n<p>error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n --&gt; src/main.rs:1:17\n  |\n1 | fn get_str() -&gt; &amp;str {\n  |                 ^ expected lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n  = help: consider giving it a 'static lifetime\n</code></pre>\n\n<p>However it's OK when I add a parameter:</p>\n\n<pre><code>fn get_str(s: &amp;str) -&gt; &amp;str {\n    \"Hello World\"\n}\n</code></pre>\n\n<p>Why does this work? How does <code>\"Hello World\"</code> borrow from the parameter <code>s</code>, even it though it has nothing to do with <code>s</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436096667, "post_id": 31229964, "comment_id": 50458963, "body": "I did an edit with a workaround for that, I just wrapped the value in a Box again. Still, is using <code>Deref</code> <i>the</i> solution for that?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436097003, "post_id": 31229964, "comment_id": 50459040, "body": "I&#39;ve expanded the answer.  I really should have addressed that in the first place (I think I got distracted by solving the immediate problem)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 1, "last_activity_date": 1436096979, "last_edit_date": 1436096979, "creation_date": 1436096451, "answer_id": 31229964, "question_id": 31229841, "link": "https://stackoverflow.com/questions/31229841/general-pointer-type-for-rc-box-arc/31229964#31229964", "title": "General pointer type for `Rc`, `Box`, `Arc`", "body": "<p>It crashes with the current stable compiler (1.1), but not with beta or nightly (just use your last Playpen link and change the \"Channel\" setting at the top).  I believe that support for <code>Rc&lt;Trait&gt;</code> was only <em>partial</em> in 1.1; there were some changes that didn't make it in time.  This is probably <em>why</em> your code doesn't work.</p>\n\n<p>To address the question of using <code>Deref</code> for this... if dereferencing the pointer is all you need... sure.  It's really just a question of whether or not the trait(s) you've chosen support the operations you need.  If yes, great.</p>\n\n<p>As an aside, you can always write a new trait that expresses the <em>exact</em> semantics you need, and implement that for existing types.  From what you've said, it doesn't seem necessary in this case.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1477093471, "last_edit_date": 1477093471, "creation_date": 1459742592, "answer_id": 36394389, "question_id": 31229841, "link": "https://stackoverflow.com/questions/31229841/general-pointer-type-for-rc-box-arc/36394389#36394389", "title": "General pointer type for `Rc`, `Box`, `Arc`", "body": "<p>While <code>Deref</code> provides the necessary functionality, <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.AsRef.html\" rel=\"nofollow\"><code>AsRef</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.Borrow.html\" rel=\"nofollow\"><code>Borrow</code></a> are more appropriate for this situation (<code>Borrow</code> more so than <code>AsRef</code> in the case of a struct). Both of these traits let your users use <code>Box&lt;T&gt;</code>, <code>Rc&lt;T&gt;</code> and <code>Arc&lt;T&gt;</code>, and <code>Borrow</code> also lets them use <code>&amp;T</code> and <code>T</code>. Your <code>Caller</code> struct could be written like this:</p>\n\n<pre><code>use std::borrow::Borrow;\n\nstruct Caller&lt;CB: Borrow&lt;Callback&gt;&gt; {\n    callback: CB,\n}\n</code></pre>\n\n<p>Then, when you want to use the <code>callback</code> field, you need to call the <code>borrow()</code> (or <code>as_ref()</code>) method:</p>\n\n<pre><code>impl&lt;CB&gt; Caller&lt;CB&gt; \n    where CB: Borrow&lt;Callback&gt;\n{\n    fn new(callback: CB) -&gt; Caller&lt;CB&gt; {\n        Caller { callback: callback }\n    }\n\n    fn call(&amp;self, x: f32) -&gt; f32 {\n        (self.callback.borrow())(x)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 867, "favorite_count": 0, "accepted_answer_id": 36394389, "answer_count": 2, "score": 6, "last_activity_date": 1477093471, "creation_date": 1436095465, "last_edit_date": 1495541871, "question_id": 31229841, "link": "https://stackoverflow.com/questions/31229841/general-pointer-type-for-rc-box-arc", "title": "General pointer type for `Rc`, `Box`, `Arc`", "body": "<p>I have a <code>struct</code> which references a value (because it is <code>?Sized</code> or very big). This value has to live with the struct, of course.<br>\nHowever, the struct shouldn't restrict the user on <em>how</em> to accomplish that. Whether the user wraps the value in a <code>Box</code> or <code>Rc</code> or makes it <code>'static</code>, the value just has to survive with the struct. Using named lifetimes would be complicated because the reference will be moved around and may outlive our <code>struct</code>. What I am looking for is a general pointer type (if it exists / can exist). </p>\n\n<p><strong>How can the struct make sure the referenced value lives as long as the struct lives, without specifying how?</strong>  </p>\n\n<p>Example (<a href=\"http://is.gd/Is9Av6\" rel=\"nofollow noreferrer\">is.gd/Is9Av6</a>):</p>\n\n<pre><code>type CallBack = Fn(f32) -&gt; f32;\n\nstruct Caller {\n    call_back: Box&lt;CallBack&gt;,\n}\n\nimpl Caller {\n    fn new(call_back: Box&lt;CallBack&gt;) -&gt; Caller {\n        Caller {call_back: call_back}\n    }\n\n    fn call(&amp;self, x: f32) -&gt; f32 {\n        (self.call_back)(x)\n    }\n}\n\nlet caller = {\n    // func goes out of scope\n    let func = |x| 2.0 * x; \n    Caller {call_back: Box::new(func)}\n};\n\n// func survives because it is referenced through a `Box` in `caller`\nlet y = caller.call(1.0);\nassert_eq!(y, 2.0);\n</code></pre>\n\n<p>Compiles, all good. But if we don't want to use a <code>Box</code> as a pointer to our function (one can call <code>Box</code> a pointer, right?), but something else, like <code>Rc</code>, this wont be possible, since <code>Caller</code> restricts the pointer to be a <code>Box</code>.</p>\n\n<pre><code>let caller = {\n    // function is used by `Caller` and `main()` =&gt; shared resource\n    // solution: `Rc`\n    let func = Rc::new(|x| 2.0 * x); \n    let caller = Caller {call_back: func.clone()}; // ERROR Rc != Box\n\n    // we also want to use func now\n    let y = func(3.0);\n\n    caller\n};\n\n// func survives because it is referenced through a `Box` in `caller`\nlet y = caller.call(1.0);\nassert_eq!(y, 2.0);\n</code></pre>\n\n<p>(<a href=\"http://is.gd/qUkAvZ\" rel=\"nofollow noreferrer\">is.gd/qUkAvZ</a>)</p>\n\n<p>Possible solution: <code>Deref</code>? (<a href=\"http://is.gd/mmY6QC\" rel=\"nofollow noreferrer\">http://is.gd/mmY6QC</a>)</p>\n\n<pre><code>use std::rc::Rc;\nuse std::ops::Deref;\n\ntype CallBack = Fn(f32) -&gt; f32;\n\nstruct Caller&lt;T&gt;\n        where T: Deref&lt;Target = Box&lt;CallBack&gt;&gt; {\n    call_back: T,\n}\n\nimpl&lt;T&gt; Caller&lt;T&gt; \n        where T: Deref&lt;Target = Box&lt;CallBack&gt;&gt; {\n    fn new(call_back: T) -&gt; Caller&lt;T&gt; {\n        Caller {call_back: call_back}\n    }\n\n    fn call(&amp;self, x: f32) -&gt; f32 {\n        (*self.call_back)(x)\n    }\n}\n\nfn main() {\n    let caller = {\n        // function is used by `Caller` and `main()` =&gt; shared resource\n        // solution: `Rc`\n        let func_obj = Box::new(|x: f32| 2.0 * x) as Box&lt;CallBack&gt;;\n        let func = Rc::new(func_obj); \n        let caller = Caller::new(func.clone());\n\n        // we also want to use func now\n        let y = func(3.0);\n\n        caller\n    };\n\n    // func survives because it is referenced through a `Box` in `caller`\n    let y = caller.call(1.0);\n    assert_eq!(y, 2.0);\n}\n</code></pre>\n\n<p>Is this the way to go with Rust? Using <code>Deref</code>? It works at least.</p>\n\n<p>Am I missing something obvious?  </p>\n\n<p><a href=\"https://stackoverflow.com/q/31215418/2979958\">This question</a> did not solve my problem, since the value is practically unusable as a <code>T</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 0, "creation_date": 1436110426, "post_id": 31227353, "comment_id": 50462587, "body": "You&#39;re restoring my faith in Rust, I was getting a little panicky. Great answer."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1436073297, "creation_date": 1436073297, "answer_id": 31227353, "question_id": 31227269, "link": "https://stackoverflow.com/questions/31227269/generic-types-ownership-and-persistent-data-structures/31227353#31227353", "title": "Generic types, ownership, and persistent data structures", "body": "<p>This sounds like a perfect use case for <code>Rc</code>. <code>Rc</code> is a reference-counted type that allows you to have multiple owners to the same value.</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct Struct1;\nstruct Struct2;\n\ntrait Trait { fn name(&amp;self) -&gt; &amp;str; }\nimpl Trait for Struct1 { fn name(&amp;self) -&gt; &amp;str { \"Struct1\" } }\nimpl Trait for Struct2 { fn name(&amp;self) -&gt; &amp;str { \"Struct2\" } }\n\nfn shallow_copy&lt;'a&gt;(v: &amp;[Rc&lt;Trait + 'a&gt;]) -&gt; Vec&lt;Rc&lt;Trait + 'a&gt;&gt; {\n   v.iter().map(|x| x.clone()).collect()\n}\n\nfn build_vectors() -&gt; (Vec&lt;Rc&lt;Trait&gt;&gt;, Vec&lt;Rc&lt;Trait&gt;&gt;) {\n  let vec1: Vec&lt;Rc&lt;Trait&gt;&gt; = vec![Rc::new(Struct1)];\n  let mut vec2: Vec&lt;Rc&lt;Trait&gt;&gt; = shallow_copy(&amp;vec1);\n\n  vec2.push(Rc::new(Struct2));\n\n  (vec1, vec2)\n}\n\nfn join_names&lt;'a&gt;(v: &amp;[Rc&lt;Trait + 'a&gt;]) -&gt; String {\n   v.iter().map(|s| s.name()).collect::&lt;Vec&lt;_&gt;&gt;().connect(\" \")\n}\n\nfn main() {\n  let (vec1, vec2) = build_vectors();\n\n  println!(\"vec1: {}\", join_names(&amp;vec1));\n  println!(\"vec2: {}\", join_names(&amp;vec2));\n}\n</code></pre>\n\n<p>Note that the closure in <code>shallow_copy</code> uses <code>clone()</code> to clone the <code>Rc</code>. Cloning an <code>Rc</code> creates a new <code>Rc</code> that points to the same value (the underlying value is <strong>not</strong> cloned), and the shared reference count is increased by 1. Dropping an <code>Rc</code> decrements the reference count, and when the reference count drops to zero, the underlying value is dropped.</p>\n\n<p>By the way, I've changed some functions to take slice references instead of <code>Vec</code> references, because it makes the functions more general (you can get slices from arrays too, for example).</p>\n\n<p>Also, I had to annotate trait objects with a lifetime, because without an annotation, the compiler assumes <code>'static</code> (i.e. <code>Trait + 'static</code>), which means \"an implementation of <code>Trait</code> that doesn't contain any borrowed pointers (that are shorter than <code>'static</code>)\", and that caused lifetime errors.</p>\n"}], "owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 31227353, "answer_count": 1, "score": 5, "last_activity_date": 1436073297, "creation_date": 1436072074, "question_id": 31227269, "link": "https://stackoverflow.com/questions/31227269/generic-types-ownership-and-persistent-data-structures", "title": "Generic types, ownership, and persistent data structures", "body": "<p><strong>TL;DR</strong> How do I build data structures over generic types that reference shared underlying data?</p>\n\n<p>This question is about both semantics and good data modeling in Rust. The code below is a (more) trivial distillation of my problem to highlight my specific question, not my actual code.</p>\n\n<p>The goal is to make a function that builds several vectors that contain references to shared data of a generic type. In the nomenclature of the following example I want to be able to return a collection of vectors that can store both <code>Struct1</code>'s and <code>Struct2</code>'s (abstracted by the trait <code>Trait</code>), however since (in my real code) <code>Struct1</code> and <code>Struct2</code> are relatively large and will be stored in relatively many places relatively frequently, I'd rather store references to shared data, not copy them all over the place.</p>\n\n<p>The current problem I'm facing (and there've been many intermediate revisions) is that:</p>\n\n<ol>\n<li>Since the type of data I'm trying to store are <code>Trait</code>, which aren't <code>Sized</code> I need to store references in my vectors</li>\n<li>Since each struct will be referenced from multiple vectors, an <code>&amp;</code> reference is necessary</li>\n<li>Philosophically, there is no singular \"owner\" of a given struct, therefore no \"right\" place to stick my structs so they don't go out of scope with the <code>build_vectors</code> function.\n\n<ol>\n<li>I considered trying to resolve this via a global vector of <code>Traits</code> into which I could point references, unfortunately issue (1) above seems to preclude that strategy.</li>\n</ol></li>\n</ol>\n\n<p>.</p>\n\n<pre><code>struct Struct1;\nstruct Struct2;\n\ntrait Trait { fn name(&amp;self) -&gt; &amp;str; }\nimpl Trait for Struct1 { fn name(&amp;self) -&gt; &amp;str { \"Struct1\" } }\nimpl Trait for Struct2 { fn name(&amp;self) -&gt; &amp;str { \"Struct2\" } }\n\nfn shallow_copy&lt;'a&gt;(v: &amp;'a Vec&lt;&amp;'a Box&lt;Trait&gt;&gt;) -&gt; Vec&lt;&amp;'a Box&lt;Trait&gt;&gt; {\n   v.iter().map(|x|*x).collect()\n}\n\nfn build_vectors&lt;'a&gt;() -&gt; (Vec&lt;&amp;'a Box&lt;Trait&gt;&gt;, Vec&lt;&amp;'a Box&lt;Trait&gt;&gt;) {\n  let box_struct1: &amp;Box&lt;Trait&gt; = &amp;(Box::new(Struct1) as Box&lt;Trait&gt;);\n  let box_struct2: &amp;Box&lt;Trait&gt; = &amp;(Box::new(Struct2) as Box&lt;Trait&gt;);\n\n  let vec1: Vec&lt;&amp;Box&lt;Trait&gt;&gt; = vec![box_struct1];\n  let mut vec2: Vec&lt;&amp;Box&lt;Trait&gt;&gt; = shallow_copy(&amp;vec1);\n\n  vec2.push(box_struct2);\n\n  (vec1, vec2)\n}\n\nfn join_names(v: &amp;Vec&lt;&amp;Box&lt;Trait&gt;&gt;) -&gt; String {\n   v.iter().map(|s| s.name()).collect::&lt;Vec&lt;_&gt;&gt;().connect(\" \")\n}\n\nfn main() {\n  let (vec1, vec2) = build_vectors();\n\n  println!(\"vec1: {}\", join_names(&amp;vec1));\n  println!(\"vec2: {}\", join_names(&amp;vec2));\n}\n</code></pre>\n\n<p>The desired output is:</p>\n\n<pre><code>vec1: Struct1\nvec2: Struct1 Struct2\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 1, "creation_date": 1436056183, "post_id": 31226040, "comment_id": 50452150, "body": "Awesome answer, really helped. Thanks!"}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 23, "last_activity_date": 1436054912, "last_edit_date": 1436054912, "creation_date": 1436053843, "answer_id": 31226040, "question_id": 31225745, "link": "https://stackoverflow.com/questions/31225745/iterate-over-stdfsreaddir-and-get-only-filenames-from-paths/31226040#31226040", "title": "Iterate over std::fs::ReadDir and get only filenames from paths", "body": "<p>You'll probably want to use <code>Path</code>'s <code>file_name()</code> method which yields the file name <em>if</em> it's a regular file, which is why it returns an <code>Option</code>.</p>\n\n<p>I imagine you'd want to ignore the file names of things that aren't regular files, i.e. for which <code>file_name()</code> would return <code>None</code>, in which case you will probably want to leverage <code>Iterator</code>'s <code>filter_map</code> method which is basically like filter and map put together, i.e. you're able to map (in this case the path -> file name) and filter by returning the mapped result as an <code>Option</code>, where <code>None</code> would signify that you want to filter that value out.</p>\n\n<p>The annoying thing will be that you have to check each item returned by the <code>ReadDir</code> iterator, since that's a <code>Result</code> type, so you'll have to see if it's <code>Ok</code>. If you just want to ignore non-<code>Ok</code> (i.e. <code>Err</code>) entries in the directory (e.g. entries for which you don't have permission), you can simply convert it to an <code>Option</code> using <code>Result</code>'s <code>ok()</code> method and integrate that in the <code>filter_map</code>.</p>\n\n<p>You'll also have to attempt to create a <code>String</code> from the returned <code>file_name()</code>, since it may not necessarily be UTF-8. Files with non-UTF-8 names can simply be ignored (in this example) again using a combination of <code>map</code> and <code>and_then</code>.</p>\n\n<p>Here's what it would look like if you make it ignore non-<code>Ok</code> directory entries and paths which aren't regular files (and thus return <code>None</code> on <code>file_name()</code>) as well as files whose file names are not UTF-8:</p>\n\n<pre><code>let paths = fs::read_dir(&amp;Path::new(\n  &amp;env::current_dir().unwrap())).unwrap();\n\nlet names =\npaths.filter_map(|entry| {\n  entry.ok().and_then(|e|\n    e.path().file_name()\n    .and_then(|n| n.to_str().map(|s| String::from(s)))\n  )\n}).collect::&lt;Vec&lt;String&gt;&gt;();\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=822be00f142374cec364&amp;version=stable\">playpen</a></p>\n\n<p>If you're not very familiar with Rust's functional flow-control functions, e.g. <code>map</code>, <code>and_then</code>, etc. on <code>Result</code> and <code>Option</code>, then here's what it would look like expanded out, <em>without</em> ignoring errors and without doing error handling. I leave that up to you:</p>\n\n<pre><code>let paths = fs::read_dir(&amp;Path::new(\n  &amp;env::current_dir().unwrap())).unwrap();\n\nlet names =\npaths.map(|entry| {\n  let entry = entry.unwrap();\n\n  let entry_path = entry.path();\n\n  let file_name = entry_path.file_name().unwrap();\n\n  let file_name_as_str = file_name.to_str().unwrap();\n\n  let file_name_as_string = String::from(file_name_as_str);\n\n  file_name_as_string\n}).collect::&lt;Vec&lt;String&gt;&gt;();\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1ff01269fa61a0ccf120&amp;version=stable\">playpen</a></p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4241, "favorite_count": 1, "accepted_answer_id": 31226040, "answer_count": 1, "score": 13, "last_activity_date": 1436054912, "creation_date": 1436050491, "question_id": 31225745, "link": "https://stackoverflow.com/questions/31225745/iterate-over-stdfsreaddir-and-get-only-filenames-from-paths", "title": "Iterate over std::fs::ReadDir and get only filenames from paths", "body": "<p>I'm trying to figure out how to do a 'list Comprehension' with rust. I have a <code>ReadDir</code> iter that I want to map and only get the filenames of the paths. I'm thinking it would look something like:</p>\n\n<pre><code>// get current dir paths\nlet paths = fs::read_dir(&amp;Path::new(\n    &amp;env::current_dir().unwrap())).unwrap();\n\n// should contain only filenames\nlet files_names = paths.map(|&amp;x| {\n    match (*x).extensions() {\n        Some(y) =&gt; y,\n        None =&gt; //What do I do here? break?\n};\n</code></pre>\n\n<p>I know my expression is likely horrendously broken, but is there a way to make this a single expression that I can bind <code>file_names</code> to?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 1, "creation_date": 1436044655, "post_id": 31225106, "comment_id": 50450255, "body": "That&#39;s too bad, I actually need to call further iterator methods on <code>r</code> (specifically a fold). I suppose I can just call <code>.into_iter()</code> on that <code>r</code>, but I wanted to avoid allocating an intermediate structure."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 2, "creation_date": 1436046347, "post_id": 31225106, "comment_id": 50450614, "body": "Only way to avoid that would be to <code>.fold()</code> on the tupled iterator. Imagine if unzip returned two iterators, their hidden shared state would have to allocate and buffer anyway, if you just consume one of the parts. And if you consume them in lockstep, then you might as well loop or fold over them together in one iterator."}, {"owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "edited": false, "score": 0, "creation_date": 1436054664, "post_id": 31225106, "comment_id": 50451950, "body": "So I need to do everything, then call <code>.unzip</code> in the end. That&#39;s not too bad :) thanks!"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 4, "last_activity_date": 1436044067, "creation_date": 1436044067, "answer_id": 31225106, "question_id": 31224957, "link": "https://stackoverflow.com/questions/31224957/how-to-use-collect-on-each-iterator-returned-by-unzip/31225106#31225106", "title": "How to use .collect() on each iterator returned by .unzip()?", "body": "<p><a href=\"http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.unzip\" rel=\"nofollow\"><code>.unzip()</code></a> doesn't return iterators \u2014 it acts like two parallel collect! You can in fact collect the two pieces to different kinds of collections, but let's use vectors for both in this example:</p>\n\n<pre><code>// Give a type hint to determine the collection type\nlet (v, r): (Vec&lt;MyType&gt;, Vec&lt;OtherType&gt;) = (-1..13).map(|x| {\n    fac(x)\n}).unzip();\n</code></pre>\n\n<p>It is done this way to be as simple and transparent as possible. Returning two iterators instead would need them to share a common state, a complexity that rust's iterator library prefers to avoid.</p>\n"}], "owner": {"reputation": 1276, "user_id": 1846442, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d5f46711431a276412c20f1ed2f7b4ed?s=128&d=identicon&r=PG&f=1", "display_name": "darque", "link": "https://stackoverflow.com/users/1846442/darque"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1094, "favorite_count": 0, "accepted_answer_id": 31225106, "answer_count": 1, "score": 4, "last_activity_date": 1436044731, "creation_date": 1436042476, "last_edit_date": 1436044731, "question_id": 31224957, "link": "https://stackoverflow.com/questions/31224957/how-to-use-collect-on-each-iterator-returned-by-unzip", "title": "How to use .collect() on each iterator returned by .unzip()?", "body": "<p>I have the following code, in which <code>fac</code> return <code>(MyType, OtherType)</code>:</p>\n\n<pre><code>let l = (-1..13).map(|x| {\n    fac(x).0\n}).collect::&lt;Vec&lt;MyType&gt;&gt;();\n</code></pre>\n\n<p>It works, but I'm throwing away the <code>OtherType</code> values. So I decided to use <code>.unzip</code>, like this:</p>\n\n<pre><code>let (v, r) = (-1..13).map(|x| {\n    fac(x)\n}).unzip();\nlet l = v.collect::&lt;Vec&lt;MyType&gt;&gt;();\nlet q = r.collect::&lt;Vec&lt;OtherType&gt;&gt;();\n</code></pre>\n\n<p>But type inference fails with:</p>\n\n<pre><code>error: the type of this value must be known in this context\nlet l = v.collect::&lt;Vec&lt;Literal&gt;&gt;();\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nlet q = r.collect::&lt;Vec&lt;OtherType&gt;&gt;();\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>The thing is: I don't know or care what is the concrete type of the iterators (and I would suppose the compiler could infer them, as shown in the first snippet). How to satisfy the compiler in this case?</p>\n\n<p>Also, I would prefer to restructure the code - I don't like to separately call <code>.collect()</code> on both <code>v</code> and <code>r</code>. Ideally I would continue the method chain after <code>.unzip()</code>, returning two <code>Vec</code>s in that expression.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 22, "last_activity_date": 1435991888, "last_edit_date": 1435991888, "creation_date": 1435991527, "answer_id": 31217679, "question_id": 31217518, "link": "https://stackoverflow.com/questions/31217518/why-does-cloned-allow-this-function-to-compile/31217679#31217679", "title": "Why does cloned() allow this function to compile", "body": "<p>So the call to <code>.cloned()</code> is essentially like doing <code>.map(|i| i.clone())</code> in the same position (i.e. you can replace the former with the latter).</p>\n\n<p>The thing is that when you call <code>iter()</code>, you're iterating/operating on <em>references</em> to the items being iterated. Notice that the vector already consists of 'references', specifically string slices.</p>\n\n<p>So to zoom in a bit, let's replace <code>cloned()</code> with the equivalent <code>map()</code> that I mentioned above, for pedagogical purposes, since they are equivalent. This is what it actually looks like:</p>\n\n<pre><code>.map(|i: &amp; &amp;str| i.clone())\n</code></pre>\n\n<p>So notice that that's a reference to a reference (slice), because like I said, <code>iter()</code> operates on references to the items, not the items themselves. So since a single element in the vector being iterated is of type <code>&amp;str</code>, then we're actually getting a <em>reference</em> to that, i.e. <code>&amp; &amp;str</code>. By calling <code>clone()</code> on each of these items, we go from a <code>&amp; &amp;str</code> to a <code>&amp;str</code>, just like calling <code>.clone()</code> on a <code>&amp;i64</code> would result in an <code>i64</code>.</p>\n\n<p>So to bring everything together, <code>iter()</code> iterates over <em>references</em> to the elements. So if you create a new vector from the collected items yielded by the iterator you construct (which you constructed by calling <code>iter()</code>) you would get a vector of <em>references to references</em>, that is:</p>\n\n<pre><code>let actual: Vec&lt;&amp; &amp;str&gt; = strings.iter().rev().collect();\n</code></pre>\n\n<p>So first of all realize that this is <em>not</em> the same as the type you're saying the function returns, <code>Vec&lt;&amp;str&gt;</code>. More fundamentally, however, the lifetimes of these references would be local to the function, so even if you changed the return type to <code>Vec&lt;&amp; &amp;str&gt;</code> you would get a lifetime error.</p>\n\n<p>Something else you could do, however, is to use the <code>into_iter()</code> method. This method actually <em>does</em> iterate over each element, not a reference to it. However, this means that the elements are <em>moved</em> from the original iterator/container. This is only possible in your situation because you're passing the vector by value, so you're allowed to move elements out of it.</p>\n\n<pre><code>fn reverse_strings(strings:Vec&lt;&amp;str&gt;) -&gt; Vec&lt;&amp;str&gt; {\n  let actual: Vec&lt;_&gt; = strings.into_iter().rev().collect();\n  return actual;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=7239e1be28b374add39a&amp;version=stable\" rel=\"noreferrer\">playpen</a></p>\n\n<p>This probably makes a bit more sense than cloning, since we are passed the vector by value, we're allowed to do anything with the elements, including moving them to a different location (in this case the new, reversed vector).  <strong><em>And</em></strong> even if we don't, the vector will be dropped at the end of that function anyways, so we might as well. Cloning would be more appropriate if we're not allowed to do that (e.g. if we were passed the vector by reference, or a slice instead of a vector more likely).</p>\n"}], "owner": {"reputation": 967, "user_id": 2131871, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/ddd4429d2b7159110e9328abfb01dd93?s=128&d=identicon&r=PG", "display_name": "fast_cen", "link": "https://stackoverflow.com/users/2131871/fast-cen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1980, "favorite_count": 4, "accepted_answer_id": 31217679, "answer_count": 1, "score": 12, "last_activity_date": 1436022136, "creation_date": 1435990194, "last_edit_date": 1436022136, "question_id": 31217518, "link": "https://stackoverflow.com/questions/31217518/why-does-cloned-allow-this-function-to-compile", "title": "Why does cloned() allow this function to compile", "body": "<p>I'm starting to learn Rust and I tried to implement a function to reverse a vector of strings. I found a solution but I don't understand why it works.</p>\n\n<p>This works:</p>\n\n<pre><code>fn reverse_strings(strings:Vec&lt;&amp;str&gt;) -&gt; Vec&lt;&amp;str&gt; {\n  let actual: Vec&lt;_&gt; = strings.iter().cloned().rev().collect();\n  return actual;\n}\n</code></pre>\n\n<p>But this doesn't.</p>\n\n<pre><code>fn reverse_strings(strings:Vec&lt;&amp;str&gt;) -&gt; Vec&lt;&amp;str&gt; {\n  let actual: Vec&lt;_&gt; = strings.iter().rev().collect(); // without clone\n  return actual;\n}\n</code></pre>\n\n<p>Error message</p>\n\n<pre><code>src/main.rs:28:10: 28:16 error: mismatched types:\n expected `collections::vec::Vec&lt;&amp;str&gt;`,\n   found `collections::vec::Vec&lt;&amp;&amp;str&gt;`\n(expected str,\n    found &amp;-ptr) [E0308]\n</code></pre>\n\n<p>Can someone explain to me why? What happens in the second function? Thanks!</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 77, "last_activity_date": 1525725889, "last_edit_date": 1525725889, "creation_date": 1435981698, "answer_id": 31216683, "question_id": 31216646, "link": "https://stackoverflow.com/questions/31216646/repeat-string-with-integer-multiplication/31216683#31216683", "title": "Repeat string with integer multiplication", "body": "<h3>Rust 1.16+</h3>\n\n<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.repeat\" rel=\"noreferrer\"><code>str::repeat</code></a> is now available:</p>\n\n<pre><code>fn main() {\n    let repeated = \"Repeat\".repeat(4);\n    println!(\"{}\", repeated);\n}\n</code></pre>\n\n<h3>Rust 1.0+</h3>\n\n<p>You can use <a href=\"http://doc.rust-lang.org/std/iter/fn.repeat.html\" rel=\"noreferrer\"><code>iter::repeat</code></a>:</p>\n\n<pre><code>use std::iter;\n\nfn main() {\n    let repeated: String = iter::repeat(\"Repeat\").take(4).collect();\n    println!(\"{}\", repeated);\n}\n</code></pre>\n\n<p>This also has the benefit of being more generic \u2014 it creates an infinitely repeating iterator of any type that is cloneable.</p>\n"}, {"comments": [{"owner": {"reputation": 3271, "user_id": 1291812, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87e2d7542ea9ea4212e80456e36fabc9?s=128&d=identicon&r=PG", "display_name": "Achal Dave", "link": "https://stackoverflow.com/users/1291812/achal-dave"}, "edited": false, "score": 1, "creation_date": 1436041665, "post_id": 31222725, "comment_id": 50449595, "body": "That&#39;s neat, too, thanks! (though I&#39;d say a bit less readable than the iterator one.)"}], "tags": [], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "is_accepted": false, "score": 5, "last_activity_date": 1525725836, "last_edit_date": 1525725836, "creation_date": 1436026546, "answer_id": 31222725, "question_id": 31216646, "link": "https://stackoverflow.com/questions/31216646/repeat-string-with-integer-multiplication/31222725#31222725", "title": "Repeat string with integer multiplication", "body": "<p>This one doesn't use <code>Iterator::map</code> but <code>Iterator::fold</code> instead:</p>\n\n<pre><code>fn main() {\n    println!(\"{:?}\", (1..5).fold(String::new(), |b, _| b + \"Repeat\"));\n}\n</code></pre>\n"}], "owner": {"reputation": 3271, "user_id": 1291812, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87e2d7542ea9ea4212e80456e36fabc9?s=128&d=identicon&r=PG", "display_name": "Achal Dave", "link": "https://stackoverflow.com/users/1291812/achal-dave"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7329, "favorite_count": 2, "accepted_answer_id": 31216683, "answer_count": 2, "score": 49, "last_activity_date": 1525725889, "creation_date": 1435981087, "last_edit_date": 1465946004, "question_id": 31216646, "link": "https://stackoverflow.com/questions/31216646/repeat-string-with-integer-multiplication", "title": "Repeat string with integer multiplication", "body": "<p>Is there an easy way to do the following (from Python) in Rust?</p>\n\n<p><code>&gt;&gt;&gt; print (\"Repeat\" * 4)\nRepeatRepeatRepeatRepeat\n</code></p>\n\n<p>I'm starting to learn the language, and it seems <code>String</code> doesn't override <code>Mul</code>, and I can't find any discussion anywhere on a compact way of doing this (other than a map or loop).</p>\n"}, {"tags": ["memory", "stack", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436027541, "post_id": 31216602, "comment_id": 50445537, "body": "So, you are testing undefined behavior and wondering why you cannot define what you get ;) ?"}, {"owner": {"reputation": 3271, "user_id": 1291812, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87e2d7542ea9ea4212e80456e36fabc9?s=128&d=identicon&r=PG", "display_name": "Achal Dave", "link": "https://stackoverflow.com/users/1291812/achal-dave"}, "edited": false, "score": 2, "creation_date": 1436043119, "post_id": 31216602, "comment_id": 50449938, "body": "Hm, does Rust specify somewhere that this is undefined behavior?"}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 2, "creation_date": 1436056851, "post_id": 31216602, "comment_id": 50452263, "body": "Undefined behavior should only occur in an <code>unsafe</code> block. This behavior looks like a bug."}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 0, "creation_date": 1438064283, "post_id": 31216602, "comment_id": 51280724, "body": "@LambdaFairy is right, you should really report this. rust should never run into illegal instructions without unsafe blocks"}], "answers": [{"tags": [], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "is_accepted": false, "score": 1, "last_activity_date": 1436195852, "creation_date": 1436195852, "answer_id": 31249538, "question_id": 31216602, "link": "https://stackoverflow.com/questions/31216602/four-different-outcomes-when-overflowing-main-stack/31249538#31249538", "title": "Four different outcomes when overflowing main stack", "body": "<p>It seems that above randomness is related to my machine.</p>\n\n<p>I checked the same code on another machine, that has the same <code>rustc</code> version, <code>ubuntu</code> version and the same architecture. And my results a much more predictable:</p>\n\n<p>If size of the array <code>536870871</code> or greater (without getting to case 4) I get:</p>\n\n<pre><code>Illegal instruction (core dumped)\n</code></pre>\n\n<p>If size of array is <code>536870870</code> or smaller (without being small enough to actually work) I get:</p>\n\n<pre><code>thread '&lt;main&gt;' has overflowed its stack\nIllegal instruction (core dumped)\n</code></pre>\n\n<p>Not a single time have I gotten a case <code>3)</code> where I had garbage returned.</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 134, "favorite_count": 1, "answer_count": 1, "score": 12, "last_activity_date": 1436195852, "creation_date": 1435980403, "last_edit_date": 1435982692, "question_id": 31216602, "link": "https://stackoverflow.com/questions/31216602/four-different-outcomes-when-overflowing-main-stack", "title": "Four different outcomes when overflowing main stack", "body": "<p>Out of curiosity, I was playing with overflowing the the stack with this code:</p>\n\n<pre><code>fn main() {\n    let my_array: [i32; 3000000000] = [3; 3000000000];\n    println!(\"{}\", my_array[0]);\n}\n</code></pre>\n\n<p>And to my surprise I ended with three different outcomes:</p>\n\n<p>1) This is what I expected:</p>\n\n<pre><code>thread '&lt;main&gt;' has overflowed its stack\n    Illegal instruction (core dumped)\n</code></pre>\n\n<p>2) Surprisingly vague:</p>\n\n<pre><code>Illegal instruction (core dumped)\n</code></pre>\n\n<p>3) Totally puzzling:</p>\n\n<pre><code>208333333\n</code></pre>\n\n<p>In order for stochastic nature to show up I had to restart the shell, otherwise results were deterministic ( I would get the same error message over and over).</p>\n\n<p>I compiled with just:</p>\n\n<pre><code>rustc my_file.rs\n</code></pre>\n\n<p>and excuted with:</p>\n\n<pre><code>./my_file\n</code></pre>\n\n<p>My rustc version:</p>\n\n<pre><code>rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)\n</code></pre>\n\n<p>My ubuntu version:</p>\n\n<pre><code>Distributor ID: Ubuntu\nDescription:    Ubuntu 14.04 LTS\nRelease:    14.04\nCodename:   trusty\n</code></pre>\n\n<p>Also the size of the array I am trying to create is 12 gigs, I am on a tiny laptop that does not have that amount of RAM.</p>\n\n<p>Any ideas what could be going on here? </p>\n\n<p>Edit:</p>\n\n<p>I was playing with the size of array (which I think might be the reason for different errors, but why?), and got one more:</p>\n\n<p>4) Makes perfect sense. </p>\n\n<pre><code>error: the type `[i32; 300000000000000]` is too big for the current architecture\n</code></pre>\n\n<p>and my system architecture is <code>x86_64</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435979705, "post_id": 31216262, "comment_id": 50433823, "body": "Please create a <a href=\"/help/mcve\">MCVE</a>. I&#39;d be willing to bet that a much smaller example would reproduce the same problem. Have you looked at any of the other questions here that have the same error message? How does this differ from those? Have you tried doing what the error message tells you? As it is right now, your question doesn&#39;t show much effort towards solving your own problem."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1435995587, "post_id": 31216262, "comment_id": 50436816, "body": "@rillomas Yeas, you should make it much smaller, this way it make it much easier to spot the issue, here is a minimal version of your code for example: <a href=\"http://is.gd/JfulvR\" rel=\"nofollow noreferrer\">is.gd/JfulvR</a> which I think reproduce your issue. If it is indeed the case, editing your question with it would certainly help to make it more easily answerable."}, {"owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "edited": false, "score": 0, "creation_date": 1435996881, "post_id": 31216262, "comment_id": 50437154, "body": "OK I updated the example to a smaller one. I&#39;ll see if I can solve this by myself but I&#39;ll keep the question posted to see if anyone can give me help."}], "answers": [{"comments": [{"owner": {"reputation": 22726, "user_id": 544621, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0be786869c99d345f60209f98dd7b64?s=128&d=identicon&r=PG", "display_name": "hamstergene", "link": "https://stackoverflow.com/users/544621/hamstergene"}, "edited": false, "score": 0, "creation_date": 1436018403, "post_id": 31221024, "comment_id": 50442802, "body": "You can avoid using <code>scoped</code> by keeping all data (the real owners, not just borrowed pointers) in a struct inside an <code>Arc</code> object, so that static lifetime requirement of <code>thread::spawn</code> could be satisfied."}, {"owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "reply_to_user": {"reputation": 22726, "user_id": 544621, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0be786869c99d345f60209f98dd7b64?s=128&d=identicon&r=PG", "display_name": "hamstergene", "link": "https://stackoverflow.com/users/544621/hamstergene"}, "edited": false, "score": 0, "creation_date": 1436026717, "post_id": 31221024, "comment_id": 50445303, "body": "Yes, I thought about that too, but I believe using <code>Arc</code> and <code>Mutex</code> will only allow a single thread to process the image at one time. What I wanted was simultaneous processing (parallel processing) from multiple threads, so I couldn&#39;t use <code>Arc</code> and <code>Mutex</code>."}, {"owner": {"reputation": 22726, "user_id": 544621, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0be786869c99d345f60209f98dd7b64?s=128&d=identicon&r=PG", "display_name": "hamstergene", "link": "https://stackoverflow.com/users/544621/hamstergene"}, "edited": false, "score": 0, "creation_date": 1436027049, "post_id": 31221024, "comment_id": 50445401, "body": "You don&#39;t need a mutex :) Mutex is to prevent simultaneous access, while you need exactly the opposite - to process the same vector with multiple threads simultaneously."}, {"owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "reply_to_user": {"reputation": 22726, "user_id": 544621, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0be786869c99d345f60209f98dd7b64?s=128&d=identicon&r=PG", "display_name": "hamstergene", "link": "https://stackoverflow.com/users/544621/hamstergene"}, "edited": false, "score": 0, "creation_date": 1436027490, "post_id": 31221024, "comment_id": 50445522, "body": "I think you can share the input without a <code>Mutex</code> (because it doesn&#39;t get mutated), but don&#39;t you need a<code>Mutex</code> for the output? I thought Rust prohibits sharing mutable data."}], "tags": [], "owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "is_accepted": true, "score": 0, "last_activity_date": 1436016212, "last_edit_date": 1436016212, "creation_date": 1436015519, "answer_id": 31221024, "question_id": 31216262, "link": "https://stackoverflow.com/questions/31216262/how-to-do-data-parallel-image-processing/31221024#31221024", "title": "How to do data-parallel image processing?", "body": "<p>OK I got it working with the following steps.</p>\n\n<ol>\n<li>Install Rust Nightly.</li>\n<li>Add <code>#![feature(scoped)]</code> to the top of the source code.</li>\n<li><p>Use the following code as a replacement for the <code>modular_filter_chunk</code> for loop.</p>\n\n<pre><code>let mut handles = Vec::new();\nfor (input, output) in in_itr.zip(out_itr) {\n    let h = std::thread::scoped(move || {\n        modular_filter_chunk(input, width, height_per_slice, mod_value, output);\n    });\n    handles.push(h);\n}\nfor handle in handles {\n    handle.join();\n}\n</code></pre></li>\n</ol>\n\n<p>I initially thought <code>thread::scoped</code> might be a solution, but since it was unstable I couldn't get it to compile. I wonder if there is a way to solve this without using <code>thread::scoped</code> or <code>unsafe</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "edited": false, "score": 0, "creation_date": 1436027251, "post_id": 31222279, "comment_id": 50445453, "body": "Thank you for clarifying the background! I also saw that issue related to scoped threads before, and since it seemed to take some time to resolve I was looking for a method that doesn&#39;t use scoped threads. Maybe I&#39;ll have a look at a more full fledged fork-join library."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1436023722, "last_edit_date": 1495542583, "creation_date": 1436023722, "answer_id": 31222279, "question_id": 31216262, "link": "https://stackoverflow.com/questions/31216262/how-to-do-data-parallel-image-processing/31222279#31222279", "title": "How to do data-parallel image processing?", "body": "<p>Let's look at the signature for <a href=\"http://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>thread::spawn</code></a>:</p>\n\n<pre><code>pub fn spawn&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;\n    where F: FnOnce() -&gt; T,\n          F: Send + 'static,\n          T: Send + 'static\n</code></pre>\n\n<p>This states that <code>spawn</code> takes a type <code>F</code> that implements <code>FnOnce</code> (will be called exactly once) and when called will return something of type <code>T</code>. The types <code>F</code> and <code>T</code> must implement <code>Send</code> and must have at least the lifetime <code>'static</code>.</p>\n\n<p>The <a href=\"http://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"nofollow noreferrer\"><code>Send</code></a> bound restricts the possible types to \"types able to be transferred across thread boundaries\" and <code>'static</code> means that any references in the type must live for the <em>entire</em> lifetime of the program, from before <code>main</code> starts to after <code>main</code> exits.</p>\n\n<p>This explains the error message you are getting: none of your references are guaranteed to live for the entire life of the program. In fact, they are guaranteed to <strong>not</strong> live that long.</p>\n\n<p>When you <code>spawn</code> a thread, the new thread no longer has any concrete connection to the thread that spawned it. It is more than possible that the new thread will outlive the parent! This would cause Very Bad Things to happen if you tried to use the reference after the parent thread died.</p>\n\n<p>As you found, <code>thread::scoped</code> provides a solution to this. Scoped threads are required to be joined before any of the references they contain expire. <strong>However</strong>, scoped threads are unstable for a reason: they are <a href=\"https://github.com/rust-lang/rust/issues/24292\" rel=\"nofollow noreferrer\">unsound in the presence of reference cycles</a>. There was a <a href=\"https://github.com/rust-lang/rfcs/pull/1084\" rel=\"nofollow noreferrer\">RFC</a> to bring it back, but there's some deep details around it, so it's been deferred.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/31216262/how-to-do-data-parallel-image-processing#comment50442802_31221024\">hamstergene points out</a>, you can use <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a> to safely share immutable data in stable Rust. You would need to use <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a> to share your mutable output buffer though. You can tell why people are excited to have <code>thread::scoped</code> reinstated!</p>\n"}], "owner": {"reputation": 343, "user_id": 2432759, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Pw79B.jpg?s=128&g=1", "display_name": "rillomas", "link": "https://stackoverflow.com/users/2432759/rillomas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "accepted_answer_id": 31221024, "answer_count": 2, "score": -1, "last_activity_date": 1436023722, "creation_date": 1435976694, "last_edit_date": 1436012133, "question_id": 31216262, "link": "https://stackoverflow.com/questions/31216262/how-to-do-data-parallel-image-processing", "title": "How to do data-parallel image processing?", "body": "<p>I'm trying to write a simple data-parallel image process filter in Rust.\nI've got it working in single thread with the following code.</p>\n\n<pre><code>/// an example of a very simple filter\nfn modular_filter_chunk(input: &amp;[u16], slice_width: usize, slice_height: usize, mod_value: u16, output: &amp;mut[u16]) {\n    let size = slice_width*slice_height;\n    for i in 0..size {\n        output[i] = input[i] % mod_value;\n    }\n}\n\nfn modular_filter_multi(input: &amp;Vec&lt;u16&gt;, width: usize, height: usize, slice_num: usize, mod_value: u16, output: &amp;mut Vec&lt;u16&gt;) {\n    // divide image vertically to slices\n    let height_per_slice = height / slice_num;\n    let size_per_chunk = height_per_slice * width;\n    let in_itr = input.chunks(size_per_chunk);\n    let out_itr = output.chunks_mut(size_per_chunk);\n    for (input, output) in in_itr.zip(out_itr) {\n        modular_filter_chunk(input, width, height_per_slice, mod_value, output);\n    }\n}\n\nfn main() {\n    let width: usize = 1024;\n    let height: usize = 1024;\n    let input = vec![1234; width*height];\n    let mut output = vec![0; width*height];\n    modular_filter_multi(&amp;input, width, height, 4, 73, &amp;mut output);\n}\n</code></pre>\n\n<p>Now I want to process the for loop in parallel, but I can't figure out a simple way to do this. I tried changing the for loop like the following but can't get through the compile error.</p>\n\n<pre><code>let mut handles = Vec::new();\nfor (input, output) in in_itr.zip(out_itr) {\n    let h = std::thread::spawn(move || {\n        modular_filter_chunk(input, width, height_per_slice, mod_value, output);\n    });\n    handles.push(h);\n}\nfor handle in handles {\n    handle.join().unwrap();\n}\n</code></pre>\n\n<h2>Compile error message</h2>\n\n<pre><code>src\\main.rs:25:21: 25:43 error: cannot infer an appropriate lifetime for lifetime parameter 'a in function call due to c\nonflicting requirements\nsrc\\main.rs:25  let in_itr = input.chunks(size_per_chunk);\n                                   ^~~~~~~~~~~~~~~~~~~~~~\nsrc\\main.rs:27:25: 27:44 note: first, the lifetime cannot outlive the method call at 27:24...\nsrc\\main.rs:27  for (input, output) in in_itr.zip(out_itr) {\n                                       ^~~~~~~~~~~~~~~~~~~\nnote: in expansion of for loop expansion\nsrc\\main.rs:27:2: 29:3 note: expansion site\nsrc\\main.rs:27:25: 27:31 note: ...so that method receiver is valid for the method call\nsrc\\main.rs:27  for (input, output) in in_itr.zip(out_itr) {\n                                       ^~~~~~\nnote: in expansion of for loop expansion\nsrc\\main.rs:27:2: 29:3 note: expansion site\nsrc\\main.rs:25:15: 25:20 note: but, the lifetime must be valid for the expression at 25:14...\nsrc\\main.rs:25  let in_itr = input.chunks(size_per_chunk);\n                             ^~~~~\nsrc\\main.rs:25:15: 25:20 note: ...so that pointer is not dereferenced outside its lifetime\nsrc\\main.rs:25  let in_itr = input.chunks(size_per_chunk);\n                             ^~~~~\nerror: aborting due to previous error\nCould not compile `rust_multithread`.\n</code></pre>\n\n<p>How should I change my code to get the filter working in parallel?</p>\n"}, {"tags": ["rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1436026055, "post_id": 31215586, "comment_id": 50445122, "body": "Wait - how is it possible that you can pass a <code>Box&lt;T&gt;</code> or <code>Rc&lt;T&gt;</code> to the function when it expects a <code>T</code>? They are different types and we don&#39;t have implicit conversion in Rust! I tested it however, and it compiles! <a href=\"http://is.gd/Pwo5hu\" rel=\"nofollow noreferrer\">is.gd/Pwo5hu</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 2, "creation_date": 1436027457, "post_id": 31215586, "comment_id": 50445514, "body": "@Kapichu: You are getting tripped by your use of <code>T</code>, so let&#39;s rewrite this <code>impl &lt;U&gt; Holder&lt;U&gt; { value: U, }</code>. If <code>U</code> can be any type, it can be <code>T</code>, <code>Box&lt;T&gt;</code>, <code>Rc&lt;T&gt;</code> or <code>Vec&lt;T&gt;</code>, cannot it?"}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436027943, "post_id": 31215586, "comment_id": 50445631, "body": "So I can safely assume that I can use a <code>Box&lt;T&gt;</code> or <code>Rc&lt;T&gt;</code> just like a <code>T</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436028335, "post_id": 31215586, "comment_id": 50445745, "body": "@Kapichu yep! As written, <code>Holder</code> places no restrictions on the type it accepts."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436028435, "post_id": 31215586, "comment_id": 50445783, "body": "Hm, but now the Holder can&#39;t do much with the value, in my case the value is a function, so it has to implement <code>FnMut</code>, which is not the case for <code>Box</code> or <code>Rc</code>"}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436029025, "post_id": 31215586, "comment_id": 50445954, "body": "Wouldn&#39;t <code>DerefMut&lt;Target = FnMut&gt;</code> be my solution? When ever I need to call the function, I simply dereference. <code>Box</code> and <code>Rc</code> et al should implement those."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1436030844, "post_id": 31215586, "comment_id": 50446452, "body": "@Kapichu in general, that sounds right. However, <code>Rc</code> is for immutable data, so it wouldn&#39;t work. However, it sounds like you are straying from your original question (general ownership of a value), so you may want to ask another, more specific question to get more eyes on it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1435969019, "creation_date": 1435969019, "answer_id": 31215586, "question_id": 31215418, "link": "https://stackoverflow.com/questions/31215418/general-way-to-own-a-value-dont-specify-rc-or-box/31215586#31215586", "title": "General way to own a value (don&#39;t specify `Rc` or `Box`)", "body": "<p>I think you might be a bit tripped up by the word \"owns\", which is understandable in Rust! Every value is owned by something, but sometimes the value <em>refers to</em> something that you don't own.</p>\n\n<p>In your case, you just need to accept a <code>T</code>. Then <code>Holder</code> will own the <code>T</code>:</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct Holder&lt;T&gt; {\n    value: T,\n}\n\nimpl&lt;T&gt; Holder&lt;T&gt; {\n    fn new(v: T) -&gt; Holder&lt;T&gt; {\n        Holder { value: v }\n    }\n}\n\nfn main() {\n    let variable = \"Hello world\".to_owned();\n    let variable2 = \"Hello moon\".to_owned();\n\n    let rc = Rc::new(variable);\n    let holder = Holder::new(rc.clone());\n    let holder2 = Holder::new(Box::new(variable2));\n}\n</code></pre>\n\n<p>Even if you pass a reference to <code>Holder</code>, it will own <em>the reference</em>. It will not own the referred-to item however.</p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1435969019, "creation_date": 1435967325, "last_edit_date": 1435967652, "question_id": 31215418, "link": "https://stackoverflow.com/questions/31215418/general-way-to-own-a-value-dont-specify-rc-or-box", "title": "General way to own a value (don&#39;t specify `Rc` or `Box`)", "body": "<p>Is there a enum/trait for owned values in general, for when you don't want to specify <em>how</em> exactly the value is owned (either shared or not), but you just want to own it.<br>\nI need to store references to closures in a struct, which means that they have to live as long as the struct lives. I can't copy them, of course, so they need to be references. But I don't want to make restrictions, so the user of the struct should be able to choose how they want to transfer the ownership.<br>\nThis is a general problem when you can't copy the values or if they are really big.</p>\n\n<p>Very general example, what I am looking for is this <code>Owned&lt;T&gt;</code></p>\n\n<pre><code>struct Holder&lt;T&gt; {\n    value: Owned&lt;T&gt;,\n}\n\n...\n\nlet rc = Rc::new(variable);\nlet holder = Holder::new(rc.clone());\nlet holder2 = Holder::new(Box::new(variable2));\n</code></pre>\n\n<p>An example for a very easy \"implementation\" of this type would be:</p>\n\n<pre><code>enum Owned&lt;T&gt; {\n     Unique(Box&lt;T&gt;),\n     Shared(Rc&lt;T&gt;),\n}\n</code></pre>\n\n<p>I hope I could explain what I mean.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 0, "creation_date": 1435966265, "post_id": 31215246, "comment_id": 50431593, "body": "Perhaps the first sentence of the documentation should read \u201cwhen <i>their values are</i> aliased.\u201d However, given your answer, I don&#39;t understand the third paragraph. Why are primitive types such as <code>u8</code> and <code>f64</code> synchronized merely by taking a reference to them? That doesn&#39;t seem right, so again I must be having trouble with the vocabulary here."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 0, "creation_date": 1435967979, "post_id": 31215246, "comment_id": 50431893, "body": "&quot;a type <code>T</code> is <code>Sync</code> if <code>&amp;T</code> is thread-safe&quot;. Note that this talks about <i>immutable</i> references. However, Rust allows interior mutability with <code>UnsafeCell</code>, on which <code>Cell</code> and <code>RefCell</code> are built. Types that contain cells, such as <code>Rc&lt;T&gt;</code> are not thread-safe by default, since multiple threads can race to read from or write to the contents of the cell."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1435965807, "creation_date": 1435965807, "answer_id": 31215246, "question_id": 31215194, "link": "https://stackoverflow.com/questions/31215194/what-does-alias-mean-with-respect-to-the-sync-trait/31215246#31215246", "title": "What does \u201calias\u201d mean with respect to the `Sync` trait?", "body": "<p>A value is said to be <em>aliased</em> if there is more than one alias to it. An alias is just a name.</p>\n\n<p>In this code:</p>\n\n<pre><code>let s1: String = \"hello\".into();\nlet s2: &amp;String = &amp;s1;\n</code></pre>\n\n<p><code>s1</code> and <code>s2</code> are aliases of the same <code>String</code> value; therefore, the <code>String</code> is aliased.</p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 31215246, "answer_count": 1, "score": 4, "last_activity_date": 1435965807, "creation_date": 1435965280, "question_id": 31215194, "link": "https://stackoverflow.com/questions/31215194/what-does-alias-mean-with-respect-to-the-sync-trait", "title": "What does \u201calias\u201d mean with respect to the `Sync` trait?", "body": "<p>I'm learning Rust, trying to figure out the <code>std::marker::Sync</code> trait. The documentation for <code>Sync</code> starts with the following (version 1.1), emphasis mine:</p>\n\n<blockquote>\n  <p>Types that can be safely shared between threads when <strong>aliased</strong>.</p>\n  \n  <p>The precise definition is: a type <code>T</code> is <code>Sync</code> if <code>&amp;T</code> is thread-safe. In other words, there is no possibility of data races when passing <code>&amp;T</code> references between threads.</p>\n  \n  <p>As one would expect, primitive types like <code>u8</code> and <code>f64</code> are all <code>Sync</code>, and so are simple aggregate types containing them (like tuples, structs and enums). \u2026</p>\n</blockquote>\n\n<p>This makes zero sense to me, starting with the first sentence. I thought aliasing has to do with statements such as:</p>\n\n<pre><code>type Name = String;\n</code></pre>\n\n<p>What does this have to do with synchronization? Perhaps the term \u201calias\u201d is overloaded here, and I'm missing the second meaning, but I can't find anywhere in the documentation referring to a second kind of aliasing.</p>\n\n<p>Can someone point me in the right direction?</p>\n"}, {"tags": ["integer", "overflow", "rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1435967471, "post_id": 31215217, "comment_id": 50431795, "body": "For compatibility, observe that some of the wrapping functions aren\u2019t stable until 1.2.0, but the Wrapping type is ready for use."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1435965468, "creation_date": 1435965468, "answer_id": 31215217, "question_id": 31215139, "link": "https://stackoverflow.com/questions/31215139/how-can-integer-overflow-protection-be-turned-off/31215217#31215217", "title": "How can integer overflow protection be turned off?", "body": "<p>Use the <a href=\"http://doc.rust-lang.org/stable/std/num/struct.Wrapping.html\" rel=\"noreferrer\"><code>Wrapping</code></a> type, or use the <a href=\"http://doc.rust-lang.org/stable/std/?search=wrapping\" rel=\"noreferrer\">wrapping functions</a> directly. These disable the overflow checks. The <code>Wrapping</code> type allows you to use the normal operators as usual.</p>\n\n<p>Also, when you compile your code in \"release\" mode (such as with <code>cargo build --release</code>), the overflow checks are omitted to improve performance. Do not rely on this though, use the above type or functions so that the code works even in debug builds.</p>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1435996705, "post_id": 31215652, "comment_id": 50437114, "body": "And it is even possible to use this flag with Cargo now: <code>cargo rustc -- -Z force-overflow-checks=no</code>, even on stable."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1617801574, "last_edit_date": 1617801574, "creation_date": 1435969545, "answer_id": 31215652, "question_id": 31215139, "link": "https://stackoverflow.com/questions/31215139/how-can-integer-overflow-protection-be-turned-off/31215652#31215652", "title": "How can integer overflow protection be turned off?", "body": "<p><a href=\"https://stackoverflow.com/a/31215217/155423\">Francis Gagn\u00e9's answer</a> is absolutely the correct answer for your case, but there <em>is</em> a compiler option to disable overflow checks. I don't see any reason to use it, but it exists and might as well be known about:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#![allow(arithmetic_overflow)]\n\nfn main() {\n    dbg!(u8::MAX + u8::MAX);\n}\n</code></pre>\n<h3>Via Cargo</h3>\n<p>Set this in your <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html#overflow-checks\" rel=\"nofollow noreferrer\">profile section</a>:</p>\n<pre><code>[profile.dev]\noverflow-checks = false\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>% cargo run -q\n[src/main.rs:6] u8::MAX + u8::MAX = 254\n</code></pre>\n<h3>Via <code>rustc</code></h3>\n<p>Use the <code>-C overflow-checks</code> command line option:</p>\n<pre class=\"lang-none prettyprint-override\"><code>% rustc overflow.rs -C overflow-checks=off\n\n% ./overflow\n[overflow.rs:6] u8::MAX + u8::MAX = 254\n</code></pre>\n"}], "owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2342, "favorite_count": 0, "accepted_answer_id": 31215217, "answer_count": 2, "score": 6, "last_activity_date": 1617801574, "creation_date": 1435964774, "last_edit_date": 1435968684, "question_id": 31215139, "link": "https://stackoverflow.com/questions/31215139/how-can-integer-overflow-protection-be-turned-off", "title": "How can integer overflow protection be turned off?", "body": "<p>My default Rust has integer overflow protect enabled, and will halt a program in execution on overflow. A large number of algorithms require overflow to function correctly (SHA1, SHA2, etc.)</p>\n"}, {"tags": ["file-io", "newline", "rust"], "answers": [{"comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1435962163, "post_id": 31214764, "comment_id": 50430759, "body": "I tried it, but instead it just writes it all on one line, just without the <code>\\n</code>&#39;s."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1435963624, "post_id": 31214764, "comment_id": 50431093, "body": "Windows will not show <code>\\n</code> as newlines. Try <code>\\r\\n</code> instead."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1435963820, "post_id": 31214764, "comment_id": 50431138, "body": "Thanks, it shows up after removing the <code>r</code> and adding <code>\\r\\n</code>."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 3, "last_activity_date": 1435963670, "last_edit_date": 1435963670, "creation_date": 1435961615, "answer_id": 31214764, "question_id": 31214691, "link": "https://stackoverflow.com/questions/31214691/write-multiple-lines-to-text-file-with-n/31214764#31214764", "title": "Write multiple lines to text file with &#39;\\n&#39;", "body": "<p>The problem is the 'r' in front of your string. Remove it and your program will print newlines instead of '\\n'.</p>\n\n<p>Also note that only most Unices use '\\n' as newline. Windows uses \"\\r\\n\".</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1514, "favorite_count": 0, "accepted_answer_id": 31214764, "answer_count": 1, "score": 2, "last_activity_date": 1435968737, "creation_date": 1435961149, "last_edit_date": 1435968737, "question_id": 31214691, "link": "https://stackoverflow.com/questions/31214691/write-multiple-lines-to-text-file-with-n", "title": "Write multiple lines to text file with &#39;\\n&#39;", "body": "<p>I have a program that iterates over all lines of a text file, adds spaces between the characters, and writes the output to the same file. However, if there are multiple lines in the input, I want the output to have separate lines as well. I tried:</p>\n\n<pre><code>let text = format!(r\"{}\\n\", line); // Add newline character to each line (while iterating)\nfile.write_all(text.as_bytes()); // Write each line + newline\n</code></pre>\n\n<p>Here is an example input text file:</p>\n\n<pre><code>foo\nbar\nbaz\n</code></pre>\n\n<p>And its output:</p>\n\n<pre><code>f o o\\n b a r\\n b a z\n</code></pre>\n\n<p>It seems that Rust treats <code>\"\\n\"</code> as an escaped <code>n</code> character, but using <code>r\"\\n\"</code> treats it as a string. How can I have Rust treat <code>\\n</code> as a newline character to write multiple lines to a text file?</p>\n\n<p>Note: I can include the rest of my code if you need it, let me know.</p>\n\n<p>Edit: I am on Windows 7 64 bit</p>\n"}, {"tags": ["memory", "rust", "swap"], "comments": [{"owner": {"reputation": 825, "user_id": 2874384, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4fa8ae2950f1439f3250ba8f68455cca?s=128&d=identicon&r=PG&f=1", "display_name": "vincentleest", "link": "https://stackoverflow.com/users/2874384/vincentleest"}, "edited": false, "score": 1, "creation_date": 1435952744, "post_id": 31213286, "comment_id": 50428000, "body": "I bet you&#39;ve never heard of the <a href=\"https://en.wikipedia.org/wiki/XOR_swap_algorithm\" rel=\"nofollow noreferrer\">triple xor trick</a>, which is a popular trivia in coding interviews.  Not sure if the standard library implements it this way or not though.."}, {"owner": {"reputation": 5554, "user_id": 2352507, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ZncEA.jpg?s=128&g=1", "display_name": "Sunsetquest", "link": "https://stackoverflow.com/users/2352507/sunsetquest"}, "edited": false, "score": 0, "creation_date": 1435952773, "post_id": 31213286, "comment_id": 50428005, "body": "I remember back in the assembly days that doing several XOR statements can swap data without a third memory space to copy to.  I&#39;m not sure that is what &quot;swap&quot; uses however. maybe you can view the assembly? <a href=\"https://en.wikipedia.org/wiki/XOR_swap_algorithm\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/XOR_swap_algorithm</a>"}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1435955769, "post_id": 31213286, "comment_id": 50429006, "body": "Yeah already heard of it :)"}], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1435955857, "post_id": 31213780, "comment_id": 50429035, "body": "Um... doesn&#39;t this totally contradict the description: &quot;without [...] copying&quot;? Or do they mean that no value will be duplicated?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 9, "creation_date": 1435956146, "post_id": 31213780, "comment_id": 50429124, "body": "There is a difference between \u201crust-level copying\u201d (duplicated values, would need to be free&#39;d twice) and implementation level copying. In rust semantics, there are no copies here, the two values just move."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1435960272, "post_id": 31213780, "comment_id": 50430324, "body": "@Kapichu the &quot;no copy&quot; here mostly means that the type you do the sawp on does not need to be <code>Clone</code> or <code>Copy</code>, it does not mean that no temporary memory storage is used."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 9, "last_activity_date": 1435954977, "creation_date": 1435954977, "answer_id": 31213780, "question_id": 31213286, "link": "https://stackoverflow.com/questions/31213286/how-does-stdmemswap-work/31213780#31213780", "title": "How does `std::mem::swap` work?", "body": "<p>The function does actually make a copy internally: here is its source extracted from the documentation:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn swap&lt;T&gt;(x: &amp;mut T, y: &amp;mut T) {\n    unsafe {\n        // Give ourselves some scratch space to work with\n        let mut t: T = uninitialized();\n\n        // Perform the swap, `&amp;mut` pointers never alias\n        ptr::copy_nonoverlapping(&amp;*x, &amp;mut t, 1);\n        ptr::copy_nonoverlapping(&amp;*y, x, 1);\n        ptr::copy_nonoverlapping(&amp;t, y, 1);\n\n        // y and t now point to the same thing,\n        // but we need to completely forget `t`\n        // because it's no longer relevant.\n        forget(t);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1589561356, "creation_date": 1589561356, "answer_id": 61824416, "question_id": 31213286, "link": "https://stackoverflow.com/questions/31213286/how-does-stdmemswap-work/61824416#61824416", "title": "How does `std::mem::swap` work?", "body": "<p>The <a href=\"https://stackoverflow.com/a/31213780/155423\">previous answer</a> is correct in semantics, but outdated in exact details. </p>\n\n<p>Logically, swapping two values works by reading value A into a temporary location, copying B on top of A, then writing the temporary value back into B. There is a brief period where the same value exists twice in memory. This is why the <em>implementation</em> of these functions requires <code>unsafe</code> code, as only a human can guarantee that Rust's safety requirements are upheld.</p>\n\n<p>As of Rust 1.43.0, <a href=\"https://github.com/rust-lang/rust/blob/1.43.0/src/libcore/mem/mod.rs#L553-L559\" rel=\"nofollow noreferrer\"><code>mem::swap</code> is implemented as</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn swap&lt;T&gt;(x: &amp;mut T, y: &amp;mut T) {\n    // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n    // constraints on `ptr::swap_nonoverlapping_one`\n    unsafe {\n        ptr::swap_nonoverlapping_one(x, y);\n    }\n}\n</code></pre>\n\n<p><code>swap_nonoverlapping_one</code> is private, but <a href=\"https://github.com/rust-lang/rust/blob/1.43.0/src/libcore/ptr/mod.rs#L406-L416\" rel=\"nofollow noreferrer\">its implementation</a> is:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub(crate) unsafe fn swap_nonoverlapping_one&lt;T&gt;(x: *mut T, y: *mut T) {\n    // For types smaller than the block optimization below,\n    // just swap directly to avoid pessimizing codegen.\n    if mem::size_of::&lt;T&gt;() &lt; 32 {\n        let z = read(x);\n        copy_nonoverlapping(y, x, 1);\n        write(y, z);\n    } else {\n        swap_nonoverlapping(x, y, 1);\n    }\n}\n</code></pre>\n\n<p>You can see the documentation for <a href=\"https://doc.rust-lang.org/std/ptr/fn.copy_nonoverlapping.html\" rel=\"nofollow noreferrer\"><code>ptr::copy_nonoverlapping</code></a> and <a href=\"https://doc.rust-lang.org/std/ptr/fn.swap_nonoverlapping.html\" rel=\"nofollow noreferrer\"><code>ptr::swap_nonoverlapping</code></a>. The latter is basically a highly-optimized version of copying for larger values.</p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1746, "favorite_count": 2, "accepted_answer_id": 31213780, "answer_count": 2, "score": 8, "last_activity_date": 1589561356, "creation_date": 1435952397, "question_id": 31213286, "link": "https://stackoverflow.com/questions/31213286/how-does-stdmemswap-work", "title": "How does `std::mem::swap` work?", "body": "<blockquote>\n  <p>Swap the values at two mutable locations of the same type, without deinitialising or copying either one.  </p>\n\n<pre><code>use std::mem;\n\nlet x = &amp;mut 5;\nlet y = &amp;mut 42;\n\nmem::swap(x, y);\n\nassert_eq!(42, *x);\nassert_eq!(5, *y);\n</code></pre>\n</blockquote>\n\n<p>(From <a href=\"https://doc.rust-lang.org/std/mem/fn.swap.html\">offical Rust doc</a>)</p>\n\n<p>How can two values be swapped without copying? How did the value <code>42</code> go from <code>y</code> to <code>x</code>? This shouldn't be possible.</p>\n"}, {"tags": ["rust", "modulo"], "comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1483346019, "post_id": 31210357, "comment_id": 70052390, "body": "Any reason to use the term <code>modulus</code> instead of <code>modulo</code> (which is more common AFAICS)."}, {"owner": {"reputation": 488, "user_id": 306354, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/o3837.jpg?s=128&g=1", "display_name": "OliverUv", "link": "https://stackoverflow.com/users/306354/oliveruv"}, "edited": false, "score": 2, "creation_date": 1514143955, "post_id": 31210357, "comment_id": 82896377, "body": "They might have studied somewhere where the term modulus is used, not knowing that different institutions tend to differ in vocabulary."}, {"owner": {"reputation": 482, "user_id": 5286593, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-TEsNm6kITnY/AAAAAAAAAAI/AAAAAAAAAPA/fyrLkdEoX40/photo.jpg?sz=128", "display_name": "AldaronLau", "link": "https://stackoverflow.com/users/5286593/aldaronlau"}, "edited": false, "score": 0, "creation_date": 1597445127, "post_id": 31210357, "comment_id": 112145174, "body": "For powers of two, you can do something like -21 &amp; (4 - 1), granted it&#39;s an integer."}], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 3, "creation_date": 1435939708, "post_id": 31210691, "comment_id": 50423192, "body": "I, as a C/C++ programmer, am embarrassed that I didn&#39;t know that <code>%</code> works in C that way, too..."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 3, "creation_date": 1435939765, "post_id": 31210691, "comment_id": 50423210, "body": "Isn&#39;t this a gap in Rust?"}, {"owner": {"reputation": 4738, "user_id": 3998607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/363cb66ecadf072f1b4485d3b953b7da?s=128&d=identicon&r=PG", "display_name": "JosEduSol", "link": "https://stackoverflow.com/users/3998607/josedusol"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 1, "creation_date": 1435940445, "post_id": 31210691, "comment_id": 50423493, "body": "Well, as you expect, this is not something mathematicians enjoy. And i would not say it is a gap, for all this family of languages <code>%</code> is just the remainder."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 2, "creation_date": 1435940684, "post_id": 31210691, "comment_id": 50423595, "body": "I&#39;ll go with <code>%</code> being the remainder, but not having support for modulus sucks..."}, {"owner": {"reputation": 28407, "user_id": 109618, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/84a4143803eafa1966191c604864a7b5?s=128&d=identicon&r=PG", "display_name": "David J.", "link": "https://stackoverflow.com/users/109618/david-j"}, "edited": false, "score": 6, "creation_date": 1542765535, "post_id": 31210691, "comment_id": 93683565, "body": "@JosEduSol As I write this, the answer above shows <code>(a % b) + b</code> as a way to calculate the modulus, but I&#39;m pretty sure what you meant to write is this: <code>((a % b) + b) % b</code>."}, {"owner": {"reputation": 706, "user_id": 2640937, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/2bdde9ada4ed0bf5df04bad03a51642d?s=128&d=identicon&r=PG", "display_name": "Vaelus", "link": "https://stackoverflow.com/users/2640937/vaelus"}, "edited": false, "score": 2, "creation_date": 1570200400, "post_id": 31210691, "comment_id": 102849946, "body": "<code>(a &#47; b) * b + a mod b = a</code> is satisfied if <code>&#47;</code> rounds toward -\u221e."}, {"owner": {"reputation": 131, "user_id": 6661110, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e5c98a985dd8ac7d9f1235817ad2df00?s=128&d=identicon&r=PG", "display_name": "Hypno", "link": "https://stackoverflow.com/users/6661110/hypno"}, "edited": false, "score": 0, "creation_date": 1612008700, "post_id": 31210691, "comment_id": 116635456, "body": "It has been added now, see next comment."}], "tags": [], "owner": {"reputation": 4738, "user_id": 3998607, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/363cb66ecadf072f1b4485d3b953b7da?s=128&d=identicon&r=PG", "display_name": "JosEduSol", "link": "https://stackoverflow.com/users/3998607/josedusol"}, "is_accepted": false, "score": 36, "last_activity_date": 1597605546, "last_edit_date": 1597605546, "creation_date": 1435939300, "answer_id": 31210691, "question_id": 31210357, "link": "https://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation/31210691#31210691", "title": "Is there a modulus (not remainder) function / operation?", "body": "<blockquote>\n<p>Is there a modulus (not remainder!) function / operation in Rust?</p>\n</blockquote>\n<p>As far as I can tell, there is no <em>modular arithmetic</em> function.</p>\n<p>This also happens in C, where it is common to use the workaround you mentioned: <code>((a % b) + b) % b</code>.</p>\n<p>In C, C++, D, C#, F# and Java, <code>%</code> is in fact the remainder. In Perl, Python or Ruby, <code>%</code> is the modulus.</p>\n<p>Language developers don't always go the &quot;correct mathematical way&quot;, so computer languages might seem weird from the strict mathematician view. The thing is that both modulus and remainder, are correct for different uses.</p>\n<p>Modulus is more mathematical if you like, while the remainder (in the C-family) is consistent with common integer division satisfying: <code>(a / b) * b + a % b = a</code>; this is adopted from old Fortran. So <code>%</code> is better called the remainder, and I suppose Rust is being consistent with C.</p>\n<p>You are not the first to note this:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/13909\" rel=\"noreferrer\">No modulo operator?</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/4565\" rel=\"noreferrer\">Remainder is not modulus, but int::rem() uses the mod operator.</a> .</li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 2654, "user_id": 1153645, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/adb60cb2ea576eeb47fc2f3ff5a3081b?s=128&d=identicon&r=PG", "display_name": "Alexx Roche", "link": "https://stackoverflow.com/users/1153645/alexx-roche"}, "edited": false, "score": 0, "creation_date": 1598398214, "post_id": 41422009, "comment_id": 112444859, "body": "Would <code>modulo_signed_ext_impl! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }</code> be better?"}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 10, "last_activity_date": 1542830514, "last_edit_date": 1542830514, "creation_date": 1483336868, "answer_id": 41422009, "question_id": 31210357, "link": "https://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation/41422009#41422009", "title": "Is there a modulus (not remainder) function / operation?", "body": "<p>No, Rust doesn't have a built in modulus, see <a href=\"https://mail.mozilla.org/pipermail/rust-dev/2013-April/003683.html\" rel=\"noreferrer\">this discussion</a> for some reasons why.</p>\n\n<p>Here's an example that might be handy:</p>\n\n<pre><code>///\n/// Modulo that handles negative numbers, works the same as Python's `%`.\n///\n/// eg: `(a + b).modulo(c)`\n///\npub trait ModuloSignedExt {\n    fn modulo(&amp;self, n: Self) -&gt; Self;\n}\nmacro_rules! modulo_signed_ext_impl {\n    ($($t:ty)*) =&gt; ($(\n        impl ModuloSignedExt for $t {\n            #[inline]\n            fn modulo(&amp;self, n: Self) -&gt; Self {\n                (self % n + n) % n\n            }\n        }\n    )*)\n}\nmodulo_signed_ext_impl! { i8 i16 i32 i64 }\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 762, "user_id": 2959763, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/mnsXN.png?s=128&g=1", "display_name": "nert", "link": "https://stackoverflow.com/users/2959763/nert"}, "edited": false, "score": 2, "creation_date": 1589111428, "post_id": 57342011, "comment_id": 109157349, "body": "They are also implemented for unsigned variants, although it is not possible to figure out what they do from that documentation. I would also mention <code>div_euclid()</code> for completeness. But this should be the selected answer anyway."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 39, "last_activity_date": 1564865624, "creation_date": 1564865624, "answer_id": 57342011, "question_id": 31210357, "link": "https://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation/57342011#57342011", "title": "Is there a modulus (not remainder) function / operation?", "body": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2169-euclidean-modulo.md\" rel=\"noreferrer\">RFC 2196</a> adds a couple of integer methods related to euclidian division. Specifically, the <code>rem_euclid</code> method (<a href=\"https://doc.rust-lang.org/stable/std/primitive.i32.html#method.rem_euclid\" rel=\"noreferrer\">example link for <code>i32</code></a>) is what you are searching for:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>println!(\"{}\", -1i32 % 4);                // -1\nprintln!(\"{}\", (-21i32).rem_euclid(4));   // 3\n</code></pre>\n\n<p>This method is available in <code>rustc 1.38.0</code> (released on 2019-09-27) and above. </p>\n"}, {"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1598402269, "post_id": 63588449, "comment_id": 112445660, "body": "If you&#39;re going to use that on integers, how is it better than the built-in <a href=\"https://stackoverflow.com/a/57342011/2733851\"><code>rem_euclid</code> mentioned in Lukas Kalbertodt&#39;s answer</a>?"}, {"owner": {"reputation": 2654, "user_id": 1153645, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/adb60cb2ea576eeb47fc2f3ff5a3081b?s=128&d=identicon&r=PG", "display_name": "Alexx Roche", "link": "https://stackoverflow.com/users/1153645/alexx-roche"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1598537113, "post_id": 63588449, "comment_id": 112496369, "body": "I find this explicit function easier to mentally parse than the opaque .rem_euclid()"}], "tags": [], "owner": {"reputation": 2654, "user_id": 1153645, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/adb60cb2ea576eeb47fc2f3ff5a3081b?s=128&d=identicon&r=PG", "display_name": "Alexx Roche", "link": "https://stackoverflow.com/users/1153645/alexx-roche"}, "is_accepted": false, "score": -1, "last_activity_date": 1598398058, "creation_date": 1598398058, "answer_id": 63588449, "question_id": 31210357, "link": "https://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation/63588449#63588449", "title": "Is there a modulus (not remainder) function / operation?", "body": "<p>From the other answers I constructed:</p>\n<pre><code>fn n_mod_m &lt;T: std::ops::Rem&lt;Output = T&gt; + std::ops::Add&lt;Output = T&gt; + Copy&gt;\n  (n: T, m: T) -&gt; T {\n    ((n % m) + m) % m\n}\n\nassert_eq!(n_mod_m(-21, 4), 3);\n</code></pre>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 25825, "favorite_count": 8, "answer_count": 4, "score": 73, "last_activity_date": 1598398058, "creation_date": 1435937972, "last_edit_date": 1542767849, "question_id": 31210357, "link": "https://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation", "title": "Is there a modulus (not remainder) function / operation?", "body": "<p>In Rust (like most programming languages), the <code>%</code> operator performs the <em>remainder</em> operation, not the <em>modulus</em> operation. These <a href=\"https://stackoverflow.com/q/13683563/155423\">operations have different results for negative numbers</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>-21 modulus 4 =&gt; 3\n-21 remainder 4 =&gt; -1\n</code></pre>\n\n\n\n<pre><code>println!(\"{}\", -21 % 4); // -1\n</code></pre>\n\n<p>However, I <strong>want</strong> the modulus.</p>\n\n<p>I found a workaround <code>((a % b) + b) % b</code>, but I don't want to reinvent the wheel if there's already a function for that!</p>\n"}, {"tags": ["rust", "pi", "ambiguous"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 3, "creation_date": 1435932336, "post_id": 31208465, "comment_id": 50419198, "body": "the error is surprising (and is a bug IMHO). To make the code work you can specify <code>std::f32::consts::PI</code> or add a use <code>std::f32</code>"}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1435932702, "post_id": 31208465, "comment_id": 50419424, "body": "It&#39;s working, thanks! This solves the fourth question and maybe even 1 and 2 them if it really is a bug (which it looks like)"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1435933817, "post_id": 31208465, "comment_id": 50420106, "body": "I reported it as an issue <a href=\"https://github.com/rust-lang/rust/issues/26760\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26760</a>, so a Rust dev can look into it."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435934863, "post_id": 31208465, "comment_id": 50420721, "body": "I&#39;m voting to close this question as off-topic because Stack Overflow isn\u2019t the place for compiler bugs like this has been identified as."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435936743, "post_id": 31208465, "comment_id": 50421737, "body": "It&#39;s confusing, but I don&#39;t think the difference between the <b>module</b> <code>std::f32</code> and the <b>type</b> <code>f32</code> will ever disappear."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1435938454, "post_id": 31208465, "comment_id": 50422627, "body": "@bluss ...but can we agree that the error message could be better?"}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435938463, "post_id": 31208465, "comment_id": 50422632, "body": "@ChrisMorgan It&#39;s not actually a bug, just bad design."}], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 4, "creation_date": 1435938561, "post_id": 31210454, "comment_id": 50422677, "body": "It&#39;s actually bad design if the module <code>f32</code> and type <code>f32</code> conflict <b>by default</b>, though this is even forbidden in Rust!"}], "tags": [], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "is_accepted": true, "score": 13, "last_activity_date": 1435938393, "creation_date": 1435938393, "answer_id": 31210454, "question_id": 31208465, "link": "https://stackoverflow.com/questions/31208465/pi-constant-is-ambiguous/31210454#31210454", "title": "PI constant is ambiguous", "body": "<p>To solve the issue, add <code>use std::f32</code> or use <code>std::f32::consts::PI</code>, so that the compiler knows we're talking about the <strong>module</strong> <code>f32</code> here, not the <strong>type</strong> <code>f32</code>.  </p>\n"}, {"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 4, "last_activity_date": 1435961663, "last_edit_date": 1435961663, "creation_date": 1435941818, "answer_id": 31211249, "question_id": 31208465, "link": "https://stackoverflow.com/questions/31208465/pi-constant-is-ambiguous/31211249#31211249", "title": "PI constant is ambiguous", "body": "<blockquote>\n  <p>What is this <code>&lt;f32 as Trait&gt;::consts</code> syntax? I've never seen it before.</p>\n</blockquote>\n\n<p>This is currently called \"universal function call syntax\" <a href=\"http://doc.rust-lang.org/stable/book/ufcs.html\" rel=\"nofollow\">http://doc.rust-lang.org/stable/book/ufcs.html</a>, but we're talking about not calling it that anymore, since this isn't a function... it's more of an expanded, unambiguous form.</p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4743, "favorite_count": 0, "accepted_answer_id": 31210454, "answer_count": 2, "score": 17, "last_activity_date": 1435961663, "creation_date": 1435931396, "question_id": 31208465, "link": "https://stackoverflow.com/questions/31208465/pi-constant-is-ambiguous", "title": "PI constant is ambiguous", "body": "<p>Consider following code:</p>\n\n<pre><code>fn main() {\n    let i = f32::consts::PI;\n}\n</code></pre>\n\n<p>With following error:</p>\n\n<pre><code>$ rustc --version\nrustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)\n$ rustc -\n&lt;anon&gt;:2:13: 2:28 error: ambiguous associated type; specify the type using the syntax `&lt;f32 as Trait&gt;::consts` [E0223]\n&lt;anon&gt;:2     let i = f32::consts::PI;\n                     ^~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<ol>\n<li>Why does it complain about an \"associated type\"? The only type I see here is <code>f32</code>, which is not associated.  </li>\n<li>Why is this ambigious? I clearly specified the <code>f32</code>.</li>\n<li>What is this <code>&lt;f32 as Trait&gt;::consts</code> syntax? I've never seen it before.</li>\n<li>And, obviously, what can I do to fix this error and get my variable set to PI?</li>\n</ol>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 3027, "user_id": 2621706, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/0aead89db990468d5359999664020289?s=128&d=identicon&r=PG", "display_name": "Uwe Allner", "link": "https://stackoverflow.com/users/2621706/uwe-allner"}, "edited": false, "score": 0, "creation_date": 1435930227, "post_id": 31207897, "comment_id": 50417772, "body": "Perhaps you should make a feature request on the rust site."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1435930281, "post_id": 31207897, "comment_id": 50417814, "body": "I&#39;m confused as to which feature you are missing... this can easily be done in rust already: <a href=\"http://is.gd/UhyPOe\" rel=\"nofollow noreferrer\">is.gd/UhyPOe</a> You just need to define and implement the &quot;self.X&quot; types outside of your trait impl"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435931877, "post_id": 31207897, "comment_id": 50418897, "body": "@ker That doesn&#39;t make a unique type each time. That allows eg. <a href=\"http://is.gd/ishvT8\" rel=\"nofollow noreferrer\">this</a>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1435933255, "post_id": 31207897, "comment_id": 50419767, "body": "@Pentagolo FWIW, you <a href=\"http://is.gd/NpR55F\" rel=\"nofollow noreferrer\">can make this a bit prettier</a>. I don&#39;t think what you&#39;re asking for is possible, though."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435935223, "post_id": 31207897, "comment_id": 50420921, "body": "ah I understand now... You cannot generate a new type from a variable really... The lifetime of the variable is the only thing that differs, and there&#39;s no way to test equivalence of lifetimes afaik"}, {"owner": {"reputation": 111, "user_id": 4032476, "user_type": "registered", "accept_rate": 25, "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Pentagolo", "link": "https://stackoverflow.com/users/4032476/pentagolo"}, "edited": false, "score": 0, "creation_date": 1435936524, "post_id": 31207897, "comment_id": 50421624, "body": "Ok, so its not possible in rust at the moment. But are there any rfcs discussing such a feature?"}, {"owner": {"reputation": 111, "user_id": 4032476, "user_type": "registered", "accept_rate": 25, "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Pentagolo", "link": "https://stackoverflow.com/users/4032476/pentagolo"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1435936666, "post_id": 31207897, "comment_id": 50421697, "body": "@Veedrac Yes, some portions of your code seem to be a bit prettier. Thx. I will try to edit my initial post."}, {"owner": {"reputation": 111, "user_id": 4032476, "user_type": "registered", "accept_rate": 25, "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Pentagolo", "link": "https://stackoverflow.com/users/4032476/pentagolo"}, "reply_to_user": {"reputation": 3027, "user_id": 2621706, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/0aead89db990468d5359999664020289?s=128&d=identicon&r=PG", "display_name": "Uwe Allner", "link": "https://stackoverflow.com/users/2621706/uwe-allner"}, "edited": false, "score": 0, "creation_date": 1435944469, "post_id": 31207897, "comment_id": 50425172, "body": "@Uwe Allner Yes, if there does not exists such a feature request, i will try to write one. It&#39;s a shame i did not heard of rust before it was stable. Adding features like this now will likely intotruce inconsistencies."}], "owner": {"reputation": 111, "user_id": 4032476, "user_type": "registered", "accept_rate": 25, "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Pentagolo", "link": "https://stackoverflow.com/users/4032476/pentagolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 115, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1435930392, "creation_date": 1435929819, "last_edit_date": 1435930392, "question_id": 31207897, "link": "https://stackoverflow.com/questions/31207897/associated-types-which-are-distinct-for-each-instance", "title": "Associated types which are distinct for each instance", "body": "<p>Is there a way to specify associated types in rust which are distinct for each instance? Or is there any plan to introduce it to the language? Or any other way to implement this behavour? I think scala has this feature.</p>\n\n<p>I need this feature for example to define types which represent indices to slices, which do not need to be ranged checked. I don't know the syntax for using this feature, if it exists. So i will use the one i would have expected to work in the following example.</p>\n\n<pre><code>// Each safe index has to implement this trait. \npub trait SafeIndex {\n    // Convert the safe index to an unsafe index.\n    fn to_unsafe(&amp;self) -&gt; usize;\n}\n\n// Safe indexable\npub trait SafeIndexable {\n    // The Item which is indexable.\n    type Item;\n\n    // In this context self.Index should be usable as index\n    // without the need to do a range check.\n    // This is a type alias which is distinct for each\n    // instance. Therefore you need to specify an instance\n    // (self) instead of a type name (Self) to access the type.\n    // It is known, that each self.Index implements SafeIndex.\n    type self.Index : SafeIndex;\n\n    // Iterator of indices usable without range checking.\n    type self.Indices : Iterator&lt;Item = self.Index&gt;;\n    fn indices(&amp;self) -&gt; self.Indices;\n\n    // Get item from index, without range checking.\n    fn get&lt;'s&gt;(&amp;'s self, index: self.Index) -&gt; &amp;'s Self::Item;\n}\n\nimpl&lt;I&gt; SafeIndexable for &amp;[I] {\n    // The Item which is indexable.\n    type Item = I;\n\n    // This is a struct which is distinct for each\n    // instance. Therefore you need to specify an instance\n    // (self) instead of a type name (Self) to access the struct.\n    struct self.IndexImpl {\n        unsafe_index: usize,\n    }\n    impl SafeIndex for self.IndexImpl {\n        fn to_unsafe(&amp;self) -&gt; usize {\n            self.unsafe_index\n        }\n    }\n    // This is the type alias which is distinct for each instance.\n    type self.Index = self.IndexImpl;\n\n    // Iterator of indices usable without range checking.\n    struct self.IndicesImpl {\n        begin: usize,\n        end: usize,\n    }\n    impl Iterator for self.IndicesImpl {\n        type Item = self.Index;\n        fn next(&amp;self) -&gt; Option&lt;Self::Item&gt; {\n            if self.begin != self.end {\n                let cur = self.begin;\n                self.begin += 1;\n                Some(Self::Item{unsafe_index: cur})\n            } else {\n                None\n            }\n        }\n    }\n    type self.Indices = self.IndicesImpl;\n    fn indices(&amp;self) -&gt; self.Indices {\n        self.IndicesImpl{begin:0, end: self.len()}\n    }\n\n    // Get item from index, without range checking.\n    fn get&lt;'s&gt;(&amp;'s self, index: self.Index) -&gt; &amp;'s Self::Item {\n        unsafe {\n            let ptr = &amp;self[0] as *const I;\n            &amp;*ptr.offset(index.unsafe_index as isize) as &amp;Self::Item\n        }\n    }\n}\n</code></pre>\n\n<p>There are tons of even more useful usecases for this feature. Growable only vectors for example.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1435921767, "post_id": 31202822, "comment_id": 50412681, "body": "The constraint on the <code>impl</code> is actually <code>F::Err: Debug</code>, since the enum variant <code>Parse</code> contains an <code>F::Err</code>, not an <code>F</code>. (Though <code>rustc --pretty=expanded</code> <i>also</i> puts an <code>F: Debug</code> constraint on the <code>impl</code>, but I can&#39;t see why.)"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1435914409, "creation_date": 1435914409, "answer_id": 31202822, "question_id": 31202590, "link": "https://stackoverflow.com/questions/31202590/an-enum-deriving-debug/31202822#31202822", "title": "An enum deriving Debug", "body": "<p><code>MyError</code> <em>does not</em> implement <code>Debug</code>... <em>unconditionally</em>.  Rather, it implements it so long as all the required generic parameters <em>also</em> implement it.  In essence, the <code>#[derive(Debug)]</code> attribute expands to something roughly like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;F&gt; MyError&lt;F&gt; where F: Debug {\n    ...\n}\n</code></pre>\n\n<p>After all, if <code>F</code> doesn't implement <code>Debug</code>, <code>MyError</code> can't provide an implementation.</p>\n\n<p>Additionally, it appears as though <code>where F: str::FromStr + fmt::Debug</code> is not sufficient, either.  Presumably, Rust either isn't smart enough to realise that <code>F: Debug</code> \u21d2 <code>MyError&lt;F&gt;: Debug</code>, or there's a problem with assuming so.</p>\n"}], "owner": {"reputation": 428, "user_id": 4917890, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/29109f0a256a1fdbb598c890c8e18b5a?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Ozdemir", "link": "https://stackoverflow.com/users/4917890/alex-ozdemir"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1482, "favorite_count": 0, "accepted_answer_id": 31202822, "answer_count": 1, "score": 4, "last_activity_date": 1435914409, "creation_date": 1435913704, "question_id": 31202590, "link": "https://stackoverflow.com/questions/31202590/an-enum-deriving-debug", "title": "An enum deriving Debug", "body": "<p>The following code compiles (In particular MyError is recognized as having trait debug):</p>\n\n<pre><code>use std::str;\nuse std::fmt;\n\n#[derive(Debug)]\nenum MyError&lt;F&gt; where F: str::FromStr {\n    Parse(F::Err),\n    Space,\n}\n\nfn my_parse&lt;F&gt;(s: String) -&gt; Result&lt;F,MyError&lt;F&gt;&gt;\n    where F: str::FromStr {\n    match s.len() {\n        0 =&gt; Err(MyError::Space),\n        _ =&gt; s.parse::&lt;F&gt;().map_err(|err| MyError::Parse(err)),\n    }\n}\n\nfn my_force_parse&lt;F&gt;(s: String) -&gt; F\n    where F: str::FromStr, MyError&lt;F&gt;: fmt::Debug {\n    my_parse::&lt;F&gt;(s).unwrap()\n}\n\nfn main() {\n    println!(\"hi\");\n    let s = \"nope\".to_string();\n    println!(\"{}\", my_force_parse::&lt;i64&gt;(s));\n}\n</code></pre>\n\n<p>But if I replace the where statement for <code>my_force_parse</code> with</p>\n\n<pre><code>where F: str::FromStr\n</code></pre>\n\n<p>then it does not. SHouldn't the program  gather that MyError implements Debug from the #[derive(Debug)] attribute?</p>\n"}, {"tags": ["macos", "haskell", "rust", "ffi"], "comments": [{"owner": {"reputation": 163, "user_id": 5075794, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1567b434ed6dfd5fe053b7280f659e01?s=128&d=identicon&r=PG&f=1", "display_name": "chalkandpaste", "link": "https://stackoverflow.com/users/5075794/chalkandpaste"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435938076, "post_id": 31196449, "comment_id": 50422453, "body": "Sorry about that. @Shepmaster --typo on my part, should be .c."}, {"owner": {"reputation": 163, "user_id": 5075794, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1567b434ed6dfd5fe053b7280f659e01?s=128&d=identicon&r=PG&f=1", "display_name": "chalkandpaste", "link": "https://stackoverflow.com/users/5075794/chalkandpaste"}, "reply_to_user": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "edited": false, "score": 0, "creation_date": 1435938105, "post_id": 31196449, "comment_id": 50422464, "body": "@ReidBarton I cut down all the extraneous stuff. Focusing on compiling a dynamic library on my mac using Rust and Haskell."}], "answers": [{"comments": [{"owner": {"reputation": 163, "user_id": 5075794, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1567b434ed6dfd5fe053b7280f659e01?s=128&d=identicon&r=PG&f=1", "display_name": "chalkandpaste", "link": "https://stackoverflow.com/users/5075794/chalkandpaste"}, "edited": false, "score": 0, "creation_date": 1435957784, "post_id": 31212434, "comment_id": 50429643, "body": "Thanks a bunch man. I realized the last night that I got the return type wrong--I had a build that somehow worked (I haven&#39;t been able to reproduce today) and got type unit/empty tuple returns, but couldn&#39;t figure out what allowed it to build (nothing in my terminal history allowed me to reproduce).  Again, much thanks @Shepmaster!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1435947653, "creation_date": 1435947653, "answer_id": 31212434, "question_id": 31196449, "link": "https://stackoverflow.com/questions/31196449/calling-dynamically-linked-haskell-code-from-rust/31212434#31212434", "title": "Calling dynamically linked Haskell code from Rust", "body": "<p>When you compile your shared library, it looks like you need to link against <code>libffi</code> as well:</p>\n\n<pre><code>ghc -o libfibonacci.dylib -shared -dynamic -fPIC \\\n  Fibonacci.hs wrapper.c -lHSrts -lffi\n</code></pre>\n\n<p>I deduced this by going into my GHC library directory (<code>/usr/local/lib/ghc-7.10.1/rts</code>) and then grepping for the symbol <code>ffi_call</code>:</p>\n\n<pre><code>$ grep -lRa ffi_call .\n./include/ffi.h\n./rts/libHSrts-ghc7.10.1.dylib\n...\n</code></pre>\n\n<p>I then used <code>nm</code> to find which exact library had it:</p>\n\n<pre><code>for i in *dylib; do\n   if nm $i | grep -q 'T.*ffi_call'; then\n       echo \"== $i\";\n   fi;\ndone\n</code></pre>\n\n<p>I was then able to run with:</p>\n\n<pre><code>DYLD_LIBRARY_PATH='.' ./main\n</code></pre>\n\n<p>Unfortunately, it appears your code isn't quite right, as I just get a bunch of empty tuples. You forgot to have a return type on the function, and then you run into a problem that the 46th or so Fibbonacci is too big for a <code>u32</code>.</p>\n\n<p>Additionally, you should be using the types from the <code>libc</code> package, and it may be safest to use a <code>u64</code> here.</p>\n\n<p>I have installed GHC 7.10.1 using Homebrew, but hopefully the same pattern would work elsewhere.</p>\n"}, {"tags": [], "owner": {"reputation": 14485, "user_id": 190376, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd8280c5e1491b8cf55760750ed97dec?s=128&d=identicon&r=PG", "display_name": "Reid Barton", "link": "https://stackoverflow.com/users/190376/reid-barton"}, "is_accepted": false, "score": 5, "last_activity_date": 1435958577, "creation_date": 1435958577, "answer_id": 31214339, "question_id": 31196449, "link": "https://stackoverflow.com/questions/31196449/calling-dynamically-linked-haskell-code-from-rust/31214339#31214339", "title": "Calling dynamically linked Haskell code from Rust", "body": "<p>You mention two different final link commands,</p>\n\n<pre><code>ghc -o libfibonacci.so -shared -dynamic -fPIC Fibonacci.o wrapper.o -lHSrts\n</code></pre>\n\n<p>and</p>\n\n<pre><code>ghc -o libfibonacci.so -shared -static haskell/Fibonacci.o haskell/wrapper.o -lHSrts\n</code></pre>\n\n<p>It might be worth explicitly describing what some of these flags mean.</p>\n\n<ul>\n<li><p><code>-shared</code> tells ghc to produce a shared object (rather than an executable).</p></li>\n<li><p><code>-dynamic</code> tells ghc to link the output against the dynamic library versions of its Haskell dependencies (base, ghc-prim, etc.)</p></li>\n<li><p><code>-static</code> is the opposite of <code>-dynamic</code>, it tells ghc to link against the static library versions of Haskell dependencies.</p></li>\n<li><p><code>-lHSrts</code> means to link against the (static or shared) library libHSrts. <strong>But</strong> in GHC, only the static library actually has the basename libHSrts (so that the library file name is <code>libHSrts.a</code>). The shared library version has file name <code>libHSrts-ghc7.8.4.so</code> (adjust for your GHC version). So, <code>-lHSrts</code> really means to link against the static library version of the RTS.</p></li>\n</ul>\n\n<p>So the second command is linking against the static versions of all Haskell dependencies, including the RTS. This may work on OS X where all code must be generated as PIC, but it won't work on a normal Linux binary distribution of GHC because a shared library must be PIC code, but the static Haskell libraries shipped with GHC are built as non-PIC (they are intended to be linked into non-relocatable executables). I don't totally understand why GHC is not smart enough to add <code>-lffi</code> itself here, possibly it doesn't really expect this combination of options since it won't work on a normal Linux setup.</p>\n\n<p>The first command is odd, because you are linking statically against the RTS, but dynamically against all other Haskell dependencies. If you change the library name in the <code>-l</code> option to <code>-lHSrts-ghc7.8.4</code>, then things will Just Work on Linux, and probably everywhere else (other than Windows).</p>\n"}], "owner": {"reputation": 163, "user_id": 5075794, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1567b434ed6dfd5fe053b7280f659e01?s=128&d=identicon&r=PG&f=1", "display_name": "chalkandpaste", "link": "https://stackoverflow.com/users/5075794/chalkandpaste"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 644, "favorite_count": 2, "accepted_answer_id": 31212434, "answer_count": 2, "score": 15, "last_activity_date": 1570017977, "creation_date": 1435881259, "last_edit_date": 1435947775, "question_id": 31196449, "link": "https://stackoverflow.com/questions/31196449/calling-dynamically-linked-haskell-code-from-rust", "title": "Calling dynamically linked Haskell code from Rust", "body": "<p>I'm trying to compile some Rust code with some Haskell code. I have a test system set up with a file, <code>Fibonacci.hs</code> with a function which computes fibonacci numbers in Haskell and exports the function as <code>fibonacci_hs</code> via Haskell's FFI (as here: <a href=\"https://github.com/nh2/haskell-from-python\" rel=\"noreferrer\">https://github.com/nh2/haskell-from-python</a>, though I'll copy and paste at the bottom), and in <code>wrapper.c</code> have defined the functions to export to be called for initializing and exiting Haskell's RTS. </p>\n\n<p>The code looks like this:</p>\n\n<pre><code>{- Fibonacci.hs -}\n{-# LANGUAGE ForeignFunctionInterface #-}\n\nmodule Fibonacci where\n\nimport Foreign.C.Types\n\nfibonacci :: Int -&gt; Int\nfibonacci n = fibs !! n\n    where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)\n\nfibonacci_hs :: CInt -&gt; CInt\nfibonacci_hs = fromIntegral . fibonacci . fromIntegral\n\nforeign export ccall fibonacci_hs :: CInt -&gt; CInt\n</code></pre>\n\n<hr>\n\n<pre><code>// wrapper.c\n\n#include &lt;stdlib.h&gt;\n#include \"HsFFI.h\"\n\nvoid\nexample_init (void)\n{\n  hs_init (NULL, NULL);\n}\n\nvoid\nexample_exit (void)\n{\n  hs_exit ();\n}\n</code></pre>\n\n<p>I compile these via:</p>\n\n<p><code>ghc -c -dynamic -fPIC Fibonacci.hs</code></p>\n\n<p><code>ghc -c -dynamic -fPIC wrapper.c</code></p>\n\n<p>and I link the objects into a shared/dynamic library (more on this in a second) via:</p>\n\n<p><code>ghc -o libfibonacci.so -shared -dynamic -fPIC Fibonacci.o wrapper.o -lHSrts</code></p>\n\n<p>On running the Python example code from the linked repository, it runs just fine on my mac, but I can't get it to link with Rust.</p>\n\n<p>In Rust my code looks something like this:</p>\n\n<pre><code>//main.rs\n#[link(name = \"fibonacci\")]\nextern {\n    fn fibonacci_hs (n : i32); // c_int = i32\n    fn fib_init (); // start hs rts\n    fn fib_exit (); // kill hs rts\n}\n\nfn main () {\n    unsafe {\n        fib_init();\n        for i in 0..100 {\n            println!(\"{:?}th fibonacci : {:?}\", i, fibonacci_hs(i));\n        }\n        fib_exit();\n    }\n}\n</code></pre>\n\n<p>And I compile with <code>rustc main.rs -L .</code> (since shared library file is local).</p>\n\n<p>The error I generate on Mac, when compiled with a dynamic library (<code>ghc -o libfibonacci.so -shared -static haskell/Fibonacci.o haskell/wrapper.o -lHSrts</code> then 'rustc main.rs -L . ) is at runtime:</p>\n\n<pre><code>dyld: Symbol not found: _ffi_call\n  Referenced from: ./libfibonacci.so\n  Expected in: flat namespace\n in ./libfibonacci.so\nTrace/BPT trap: 5\n</code></pre>\n\n<p>Thanks for any help in advance.</p>\n"}, {"tags": ["recursion", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1435892708, "post_id": 31197781, "comment_id": 50399615, "body": "The question is open for 3 hours, and we answer it within 26 seconds. Stack Overflow is <i>weird</i>."}, {"owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 0, "creation_date": 1435895100, "post_id": 31197781, "comment_id": 50400160, "body": "Tell me about it... how do I go about picking an answer now?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1435921124, "post_id": 31197781, "comment_id": 50412296, "body": "I may be biased, but :-) pick this one, since it explains the reason (how rust compiles generic items)."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 12, "last_activity_date": 1546275032, "last_edit_date": 1546275032, "creation_date": 1435892646, "answer_id": 31197781, "question_id": 31196422, "link": "https://stackoverflow.com/questions/31196422/what-does-overflow-evaluating-the-requirement-mean-and-how-can-i-fix-it/31197781#31197781", "title": "What does &quot;Overflow evaluating the requirement&quot; mean and how can I fix it?", "body": "<p>The problem is an incompatibility, (which I'll show how to resolve) between unique closure types, how generics are instantiated when Rust is compiled, and a recursive use of the closure.</p>\n\n<pre><code>fn map_nodes&lt;F, R&gt;(f: F, n: &amp;Node) -&gt; Vec&lt;R&gt;\nwhere\n    F: Fn(&amp;Node) -&gt; R,\n</code></pre>\n\n<p>Each recursive call instantiates a new version of this function, with a new type inserted for <code>F</code>. In this case, the <code>map_nodes</code> receives <code>F</code> and passes on <code>&amp;F</code>, and it creates an infinite series of new <code>map_nodes</code> specializations that would need to be compiled.</p>\n\n<p>What you can do instead is use a concrete closure type by using a reference to a <code>Fn</code> trait object:</p>\n\n<pre><code>fn map_nodes&lt;R&gt;(f: &amp;Fn(&amp;Node) -&gt; R, n: &amp;Node) -&gt; Vec&lt;R&gt;\n</code></pre>\n\n<p>This would require inserting a <code>&amp;</code> before the lambda expression where the closure is used: <code>map_nodes(&amp;|n| n.children.len(), &amp;node)</code>.</p>\n\n<p>If you don't want to burden your public API with this difference, then you can use an internal wrapper for your recursive function instead:</p>\n\n<pre><code>fn map_nodes&lt;F, R&gt;(f: F, n: &amp;Node) -&gt; Vec&lt;R&gt;\nwhere\n    F: Fn(&amp;Node) -&gt; R,\n{\n    fn map_nodes_inner&lt;R&gt;(f: &amp;Fn(&amp;Node) -&gt; R, n: &amp;Node) -&gt; Vec&lt;R&gt; {\n        let mut v: Vec&lt;R&gt; = Vec::new();\n        v.push(f(n));\n\n        v.extend(n.children.iter().flat_map(|child| map_nodes_inner(f, &amp;child)));\n\n        v\n    }\n\n    map_nodes_inner(&amp;f, n)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 0, "creation_date": 1435895085, "post_id": 31197786, "comment_id": 50400153, "body": "I didn&#39;t know there was a closure-reference literal! Very cool."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "edited": false, "score": 4, "creation_date": 1435907065, "post_id": 31197786, "comment_id": 50404211, "body": "@user12341234: You can use <code>&amp;</code> to take the address of any expression. If the expression is a literal or a temporary, the compiler will silently create a temporary, anonymous binding (variable) for the expression and drop the value at the end of the statement."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1546275149, "last_edit_date": 1546275149, "creation_date": 1435892672, "answer_id": 31197786, "question_id": 31196422, "link": "https://stackoverflow.com/questions/31196422/what-does-overflow-evaluating-the-requirement-mean-and-how-can-i-fix-it/31197786#31197786", "title": "What does &quot;Overflow evaluating the requirement&quot; mean and how can I fix it?", "body": "<p>I don't claim to fully understand the problem, but it looks like an issue with resolving a type parameter. For example, what does <code>F</code> correspond to? At the first level, it is the closure. At the next level, it's a reference to that closure. At the <strong>next</strong> level, it's a reference to the reference of the closure.</p>\n\n<p>My <em>guess</em> is that this is happening because of inlining, and basically it has hit an infinite recursion.</p>\n\n<p>You can fix it by passing a reference to your closure instead: </p>\n\n<pre><code>struct Node {\n    pub children: Vec&lt;Node&gt;,\n}\n\nfn map_nodes&lt;F, R&gt;(f: &amp;F, n: &amp;Node) -&gt; Vec&lt;R&gt;\nwhere\n    F: Fn(&amp;Node) -&gt; R,\n{\n    let mut v = Vec::new();\n    let z: R = f(n);\n    v.push(z);\n\n    v.extend(n.children.iter().flat_map(|child| map_nodes(f, &amp;child)));\n\n    v\n}\n\nfn main() {\n    let node = Node {\n        children: vec![Node { children: vec![] }, Node { children: vec![] }],\n    };\n\n    println!(\n        \"Node lengths: {:?}\",\n        map_nodes(&amp;|n| n.children.len(), &amp;node)\n    );\n}\n</code></pre>\n"}], "owner": {"reputation": 5207, "user_id": 3277393, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/a2967a01798ad7d675a6b39f41232a5b?s=128&d=identicon&r=PG&f=1", "display_name": "user12341234", "link": "https://stackoverflow.com/users/3277393/user12341234"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1781, "favorite_count": 0, "accepted_answer_id": 31197781, "answer_count": 2, "score": 8, "last_activity_date": 1546275149, "creation_date": 1435881028, "last_edit_date": 1546274810, "question_id": 31196422, "link": "https://stackoverflow.com/questions/31196422/what-does-overflow-evaluating-the-requirement-mean-and-how-can-i-fix-it", "title": "What does &quot;Overflow evaluating the requirement&quot; mean and how can I fix it?", "body": "<p>I'm running into what is <a href=\"https://github.com/rust-lang/rust/issues/23707\" rel=\"nofollow noreferrer\">potentially a compiler bug</a>. However, I don't understand the issue well enough to port the proposed solution to my own code. Here's a stripped-down version of my code:</p>\n\n<pre><code>struct Node {\n    pub children: Vec&lt;Node&gt;,\n}\n\nfn map_nodes&lt;F, R&gt;(f: F, n: &amp;Node) -&gt; Vec&lt;R&gt;\nwhere\n    F: Fn(&amp;Node) -&gt; R,\n{\n    let mut v: Vec&lt;R&gt; = Vec::new();\n    v.push(f(n));\n\n    v.extend(n.children.iter().flat_map(|child| map_nodes(&amp;f, &amp;child)));\n\n    v\n}\n\nfn main() {\n    let node = Node {\n        children: vec![Node { children: vec![] }, Node { children: vec![] }],\n    };\n\n    println!(\"Node lengths: {:?}\", map_nodes(|n| n.children.len(), &amp;node));\n}\n</code></pre>\n\n<p>Specifically the error for this code is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0275]: overflow evaluating the requirement `[closure@src/main.rs:22:46: 22:66]: std::ops::Fn&lt;(&amp;Node,)&gt;`\n  |\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n  = note: required because of the requirements on the impl of `std::ops::Fn&lt;(&amp;Node,)&gt;` for `&amp;[closure@src/main.rs:22:46: 22:66]`\n  = note: required because of the requirements on the impl of `std::ops::Fn&lt;(&amp;Node,)&gt;` for `&amp;&amp;[closure@src/main.rs:22:46: 22:66]`\n  # ... this continues for many lines ...\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 12, "last_activity_date": 1435894220, "creation_date": 1435894220, "answer_id": 31197972, "question_id": 31195529, "link": "https://stackoverflow.com/questions/31195529/escaping-commas-in-macro-output/31197972#31197972", "title": "Escaping commas in macro output", "body": "<p>No; the result of a macro <strong>must</strong> be a complete grammar construct like an expression or an item.  You <strong>absolutely cannot</strong> have random bits of syntax like a comma or a closing brace.</p>\n\n<p>You can get around this by simply not outputting anything until you have a complete, final expression.  Behold!</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(trace_macros)]\n\nmacro_rules! pascal_impl {\n    /*\n    The input to this macro takes the following form:\n\n    ```ignore\n    (\n        // The current output accumulator.\n        ($($out:tt)*);\n\n        // The current additive prefix.\n        $prefix:expr;\n\n        // The remaining, comma-terminated elements.\n        ...\n    )\n    ```\n    */\n\n    /*\n    Termination condition: there is no input left.  As\n    such, dump the output.\n    */\n    (\n        $out:expr;\n        $_prefix:expr;\n    ) =&gt; {\n        $out\n    };\n\n    /*\n    Otherwise, we have more to scrape!\n    */\n    (\n        ($($out:tt)*);\n        $prefix:expr;\n        $e:expr, $($rest:tt)*\n    ) =&gt; {\n        pascal_impl!(\n            ($($out)* $prefix+$e,);\n            $prefix+$e;\n            $($rest)*\n        )\n    };\n}\n\nmacro_rules! pascal {\n    ($($es:expr),+) =&gt; { pascal_impl!((); 0; $($es),+,) };\n}\n\ntrace_macros!(true);\n\nfn main() {\n    println!(\"{:?}\", pascal!(1, 2, 3, 4));\n}\n</code></pre>\n\n<p><strong>Note</strong>: To use this on a stable compiler, you will need to delete the <code>#![feature(trace_macros)]</code> and <code>trace_macros!(true);</code> lines.  Everything else should be fine.</p>\n\n<p>What this does is it recursively munches away at the input, passing the partial (and potentially <em>semantically invalid</em>) output as <em>input</em> to the next level of recursion.  This lets us build up an \"open list\", which we couldn't otherwise do.</p>\n\n<p>Then, once we're out of input, we just re-interpret our partial output as a complete expression and... done.</p>\n\n<p>The reason I including the tracing stuff is so I could show you what it looks like as it runs:</p>\n\n<pre><code>pascal! { 1 , 2 , 3 , 4 }\npascal_impl! { (  ) ; 0 ; 1 , 2 , 3 , 4 , }\npascal_impl! { ( 0 + 1 , ) ; 0 + 1 ; 2 , 3 , 4 , }\npascal_impl! { ( 0 + 1 , 0 + 1 + 2 , ) ; 0 + 1 + 2 ; 3 , 4 , }\npascal_impl! { ( 0 + 1 , 0 + 1 + 2 , 0 + 1 + 2 + 3 , ) ; 0 + 1 + 2 + 3 ; 4 , }\npascal_impl! { ( 0 + 1 , 0 + 1 + 2 , 0 + 1 + 2 + 3 , 0 + 1 + 2 + 3 + 4 , ) ; 0 + 1 + 2 + 3 + 4 ; }\n</code></pre>\n\n<p>And the output is:</p>\n\n<pre><code>(1, 3, 6, 10)\n</code></pre>\n\n<p>One thing to be aware of: large numbers of un-annotated integer literals can cause a <em>dramatic</em> increase in compile times.  If this happens, you can solve it by simply annotating <em>all</em> of your integer literals (like <code>1i32</code>).</p>\n"}], "owner": {"reputation": 1433, "user_id": 3345885, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/W25fG.jpg?s=128&g=1", "display_name": "Colliot", "link": "https://stackoverflow.com/users/3345885/colliot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 688, "favorite_count": 3, "accepted_answer_id": 31197972, "answer_count": 1, "score": 8, "last_activity_date": 1435894220, "creation_date": 1435875289, "last_edit_date": 1435892430, "question_id": 31195529, "link": "https://stackoverflow.com/questions/31195529/escaping-commas-in-macro-output", "title": "Escaping commas in macro output", "body": "<p>I am trying to write a macro which enables me to transform\n<code>(a, b, c, d)</code> to <code>(a, a + b, a + b + c, a + b + c + d)</code>, etc. Here is what I have got so far:</p>\n\n<pre><code>macro_rules! pascal_next {\n    ($x: expr) =&gt; ($x);\n    ($x: expr, $y: expr) =&gt; (\n        ($x, $x + $y)\n    );\n    ($x: expr, $y: expr, $($rest: expr),+) =&gt; (\n        ($x, pascal_next!(\n                $x + $y, $($rest),+\n            )\n        )\n    );\n}\n</code></pre>\n\n<p>However, there is a problem that it would actually output (a, (a + b, (a + b + c, a + b + c +d))). The origin is that the second matching rule <code>($x: expr, $y: expr) =&gt; (($x, $x + $y));</code>, produces an extra bracket, so that there would be nested brackets. If I don't put a bracket outside, I would get the error error: </p>\n\n<blockquote>\n  <p>unexpected token: <code>,</code></p>\n</blockquote>\n\n<p>So is it possible to output a comma <code>,</code> in Rust macros?</p>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1435869918, "post_id": 31194237, "comment_id": 50393290, "body": "I think you want a <i>trait object</i>: <code>Box&lt;io::Read&gt;</code>."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1435874029, "post_id": 31194237, "comment_id": 50395067, "body": "@Shepmaster: please be careful with the terminology around trait objects\u2014<code>io::Read</code> is a trait object, <code>Box&lt;io::Read&gt;</code> is a boxed trait object. <code>&amp;mut io::Read</code> is as much a trait object as <code>Box&lt;io::Read&gt;</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435874124, "post_id": 31194237, "comment_id": 50395102, "body": "@ChrisMorgan ugh, good point. That&#39;s what I get for throwing out a quick comment."}], "answers": [{"comments": [{"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 0, "creation_date": 1435876365, "post_id": 31194463, "comment_id": 50395907, "body": "Yes, I mentioned I could use <code>Box</code>, but what are the implications/alternatives? Would I need to change everything that uses the result of <code>problem</code> to use <code>Box</code> too, or can I use a more generic/abstract pointer type?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 3, "creation_date": 1435877280, "post_id": 31194463, "comment_id": 50396172, "body": "@aij: You can borrow the interior of a box with <code>&amp;*box</code> (or just <code>&amp;box</code>, thanks to <code>Deref</code>) to obtain a borrowed pointer from a <code>Box</code>."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 5, "last_activity_date": 1435870437, "creation_date": 1435870437, "answer_id": 31194463, "question_id": 31194237, "link": "https://stackoverflow.com/questions/31194237/how-to-return-reference-to-locally-allocated-struct-object-aka-error-foo-doe/31194463#31194463", "title": "How to return reference to locally allocated struct/object? AKA error: `foo` does not live long enough", "body": "<p>Replacing the reference with a <code>Box</code> <a href=\"http://is.gd/hORcQw\" rel=\"noreferrer\">compiles successfully</a>:</p>\n\n<pre><code>fn problem&lt;'a&gt;() -&gt; io::Result&lt;Box&lt;io::Read&gt;&gt; {\n    let mut foo = Foo{ v: 42 };\n    Ok(Box::new(foo))\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 1, "creation_date": 1435889320, "post_id": 31196693, "comment_id": 50398954, "body": "In my case I can&#39;t use a <code>&#39;static</code> lifetime, but it is a good option to keep in mind."}], "tags": [], "owner": {"reputation": 16091, "user_id": 4975822, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c04e8c4c984d36bea8a6239574980fbd?s=128&d=identicon&r=PG&f=1", "display_name": "artm", "link": "https://stackoverflow.com/users/4975822/artm"}, "is_accepted": false, "score": 1, "last_activity_date": 1435883230, "creation_date": 1435883230, "answer_id": 31196693, "question_id": 31194237, "link": "https://stackoverflow.com/questions/31194237/how-to-return-reference-to-locally-allocated-struct-object-aka-error-foo-doe/31196693#31196693", "title": "How to return reference to locally allocated struct/object? AKA error: `foo` does not live long enough", "body": "<p>Can you use static type? Looks like in either C or rust, static variable lasts as long as the program does - even if it's a static local.</p>\n\n<p><a href=\"http://rustbyexample.com/scope/lifetime/static_lifetime.html\" rel=\"nofollow\">http://rustbyexample.com/scope/lifetime/static_lifetime.html</a></p>\n"}], "owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 132, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1435883230, "creation_date": 1435869561, "question_id": 31194237, "link": "https://stackoverflow.com/questions/31194237/how-to-return-reference-to-locally-allocated-struct-object-aka-error-foo-doe", "title": "How to return reference to locally allocated struct/object? AKA error: `foo` does not live long enough", "body": "<p>Here's a simplified example of what I'm doing:</p>\n\n<pre><code>struct Foo ...\nimpl io::Read for Foo ...\n\nfn problem&lt;'a&gt;() -&gt; io::Result&lt;&amp;'a mut io::Read&gt; {\n    // foo does not live long enough, because it gets allocated on the stack\n    let mut foo = Foo{ v: 42 };\n    Ok(&amp;mut foo)\n}\n</code></pre>\n\n<p>Rust playground is <a href=\"https://play.rust-lang.org/?gist=34fe97f924ff004a13ad&amp;version=stable\" rel=\"nofollow\">here</a>.</p>\n\n<p>Obviously, the problem is that <code>foo</code> is allocated on the stack, so if we return a reference to it, the reference outlives the object.</p>\n\n<p>In C, you'd get around this by using <code>malloc</code> to allocate the object on the heap, and the caller would need to know to call <code>free</code> when appropriate. In a GCed language, this would just work since <code>foo</code> would stick around until there are no references to it. Rust is really clever, and kind of in-between, so I'm not sure what my options are.</p>\n\n<p>I think one option would be to return a managed pointer type. Is <code>Box</code> the most appropriate? (I found a guide to pointers in rust, but it is way outdated.)</p>\n\n<p>The reason I'm returning a reference is that in reality I need to return any of several structs which implement <code>Read</code>. I suppose another option would be to create an enum to wrap each of the possible structs. That would avoid heap allocation, but seems needlessly awkward.</p>\n\n<p>Are there other options I haven't thought of?</p>\n"}, {"tags": ["iterator", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1435866917, "post_id": 31193408, "comment_id": 50391776, "body": "I might be very wrong, don&#39;t take my word for this, it&#39;s just a guess, but I think that the conceptual reason why you can&#39;t do this is that if pushing to <code>s.b</code> causes <code>s</code> to be relocated in memory, then the reference to <code>s.a</code> will be invalidated. You could always use <code>s.a.clone().iter()</code> instead of <code>s.a.iter()</code> to fix this though."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 1, "creation_date": 1435867253, "post_id": 31193408, "comment_id": 50391972, "body": "@Adrian using <code>s.a.iter</code> and <code>s.b.push</code> would actually work fine. I suspect that @Rory wants to keep the fields private in their non-simplified code (or <code>a_iter</code> and <code>b_push</code> might actually be more complicated, not just simple wrappers around <code>Vec</code> methods)."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "reply_to_user": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1435869261, "post_id": 31193408, "comment_id": 50393010, "body": "@Adrian where your reasoning doesn&#39;t hold is that pushing to <code>s.b</code> will not relocate <code>s</code>, but will relocate the internal piece of memory owned by <code>s.b</code> and specifically pointed to by its private <code>ptr</code> field (see implementation of <code>Vec</code>)."}, {"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1435870080, "post_id": 31193408, "comment_id": 50393376, "body": "@fjh You&#39;re right. I want to keep the things private. I want these functions be &quot;abstractions&quot; over more complicated things."}, {"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "reply_to_user": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1435870239, "post_id": 31193408, "comment_id": 50393470, "body": "@Adrian Tried that, and get a new error in <code>a_iter</code> about &quot;borrorwed value does not live long enough&quot;. Also get the same error as before &quot;cannot borrow <code>s</code> as mutable because it is also borrowed as immutable&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1435870176, "post_id": 31193999, "comment_id": 50393442, "body": "Yes that would probably solve <i>this</i> example. However I want to keep this &quot;API&quot; the same, namely, I need a function that that I can use to iterate over. I don&#39;t want to &quot;reach inside&quot; the struct."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1435870842, "post_id": 31193999, "comment_id": 50393716, "body": "@Rory Would it make sense to expose the iterate-and-push logic as a method on <code>S</code>? In there, you could directly access <code>a</code> and <code>b</code> without making them public. I obviously can&#39;t tell if that makes sense without knowing the specifics."}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1435872140, "post_id": 31193999, "comment_id": 50394318, "body": "@fjh at the moment that is the only solution I can think of, but maybe is not enough yet for Rory. I updated the answer with an example."}, {"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1435908669, "post_id": 31193999, "comment_id": 50405088, "body": "<i>(after edit)</i> That could work. The problem is that I want to swap out <code>a</code> &amp; <code>b</code> from <code>Vec</code> (they&#39;re <code>HashMap</code>s in Real Version), with more complicated datastructres which will have more complicated logic for <code>push</code> and <code>iter</code>..."}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 4, "last_activity_date": 1435872497, "last_edit_date": 1495542584, "creation_date": 1435868650, "answer_id": 31193999, "question_id": 31193408, "link": "https://stackoverflow.com/questions/31193408/modifying-one-attribute-of-a-struct-while-iterating-over-another-attribute/31193999#31193999", "title": "Modifying one attribute of a struct while iterating over another attribute", "body": "<p>You can remove the error if you use <code>s.a.it</code> instead of <code>s.a_iter()</code>.\nYour current solution doesn't work because the returned iterator from <code>s.a_iter()</code> keep a reference of <code>s</code> which have the same lifetime of <code>s</code> itself, and so until that reference is alive you cannot borrow as mutable something inside <code>s</code>. Specifically this happens because:</p>\n\n<blockquote>\n  <p>the compiler stops at the function call boundary when evaluating\n  generic parameters</p>\n</blockquote>\n\n<p>(the lifetime in your case)</p>\n\n<p>Here there's a good answer which contains a complete explanation of a very similar problem:\n<a href=\"https://stackoverflow.com/questions/31093841/cannot-borrow-self-x-as-immutable-because-self-is-also-borrowed-as-mutable\">cannot borrow `self.x` as immutable because `*self` is also borrowed as mutable</a></p>\n\n<p><strong>Edit</strong></p>\n\n<p>A possible solution could be to bring the operation inside <code>S</code> instead of bring out the iterator from <code>S</code>. You can define in <code>S</code> a method like this:</p>\n\n<pre><code>fn foreach_in_a_push_to_b&lt;F&gt;(&amp;mut self, func: F) where F : Fn(&amp;i32) -&gt; i32 {\n    for a_val in self.a.iter() {\n        self.b.push(func(a_val));\n    }\n}\n</code></pre>\n\n<p>and then</p>\n\n<pre><code>s.foreach_in_a_push_to_b(|&amp;x| x * 2);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 0, "last_activity_date": 1435868861, "creation_date": 1435868861, "answer_id": 31194064, "question_id": 31193408, "link": "https://stackoverflow.com/questions/31193408/modifying-one-attribute-of-a-struct-while-iterating-over-another-attribute/31194064#31194064", "title": "Modifying one attribute of a struct while iterating over another attribute", "body": "<p>With raw pointers, you can alias the struct into a second variable -- Rust will consider them as two different variables and let you borrow the immutable part without complaining.</p>\n\n<pre><code>let s_alias = &amp;s as *const S;\nlet a_iter = unsafe { (*s_alias).a_iter() };\n\nfor a_val in a_iter {\n    s.b_push(a_val*2);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/nK3E5C\" rel=\"nofollow\">Playground</a></p>\n\n<p>I welcome a second opinion on this, but I don't see how it could cause any memory safety issue, in this example at least.</p>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1435891063, "creation_date": 1435891063, "answer_id": 31197592, "question_id": 31193408, "link": "https://stackoverflow.com/questions/31193408/modifying-one-attribute-of-a-struct-while-iterating-over-another-attribute/31197592#31197592", "title": "Modifying one attribute of a struct while iterating over another attribute", "body": "<p>The fundamental problem is that the borrow checker doesn't have enough information to prove your code is safe; it stops at function boundaries.  You can get around this by writing a method that splits the reference such that the compiler <em>does</em> have the information it needs:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct S {\n    a: Vec&lt;i32&gt;,\n    b: Vec&lt;i32&gt;\n}\n\nimpl S {\n    fn a_push(&amp;mut self, val: i32) {\n        self.a.push(val);\n    }\n    fn split_a_mut_b&lt;'a&gt;(&amp;'a mut self) -&gt; (&amp;'a Vec&lt;i32&gt;, &amp;'a mut Vec&lt;i32&gt;) {\n        (&amp;self.a, &amp;mut self.b)\n    }\n}\n\nfn main() {\n    let mut s = S { a: Vec::new(), b: Vec::new() };\n    s.a_push(1);\n    s.a_push(2);\n    s.a_push(3);\n\n    let (a, b) = s.split_a_mut_b();\n\n    for a_val in a.iter() {\n        b.push(a_val*2);\n    }\n}\n</code></pre>\n\n<p>They key here is that within <code>split_a_mut_b</code>, the compiler can prove the two borrows do not overlap.  Another pattern you can use, which lets you retain more of the original API, is to temporarily disassemble the value into mutable and immutable parts:</p>\n\n<pre><code>use std::slice;\n\n#[derive(Debug)]\nstruct S {\n    a: Vec&lt;i32&gt;,\n    b: Vec&lt;i32&gt;\n}\n\nimpl S {\n    fn a_iter(&amp;self) -&gt; slice::Iter&lt;i32&gt;  {\n        self.a.iter()\n    }\n    fn a_push(&amp;mut self, val: i32) {\n        self.a.push(val);\n    }\n    fn b_push(&amp;mut self, val: i32) {\n        self.b.push(val);\n    }\n    fn split_a_mut_b&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R\n    where F: FnOnce(&amp;Self, &amp;mut Self) -&gt; R {\n        use std::mem::swap;\n\n        // Break off the mutable part(s) (or the immutable parts if there\n        // are less of those).\n        let mut temp = S { a: vec![], b: vec![] };\n        swap(&amp;mut self.b, &amp;mut temp.b);\n\n        // Call the closure.\n        let result = f(self, &amp;mut temp);\n\n        // Glue the value back together.\n        swap(&amp;mut self.b, &amp;mut temp.b);\n\n        result\n    }\n}\n\nfn main() {\n    let mut s = S { a: Vec::new(), b: Vec::new() };\n    s.a_push(1);\n    s.a_push(2);\n    s.a_push(3);\n\n    s.split_a_mut_b(|imm, muta| {\n        for a_val in imm.a_iter() {\n            muta.b_push(a_val*2);\n        }\n    });\n\n    println!(\"{:?}\", s);\n}\n</code></pre>\n\n<p>This is <em>not</em> terribly inefficient; this method introduces <em>absolutely no heap activity</em>; we're just shuffling pointers around.</p>\n"}, {"tags": [], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "is_accepted": true, "score": 0, "last_activity_date": 1436098839, "creation_date": 1436098839, "answer_id": 31230275, "question_id": 31193408, "link": "https://stackoverflow.com/questions/31193408/modifying-one-attribute-of-a-struct-while-iterating-over-another-attribute/31230275#31230275", "title": "Modifying one attribute of a struct while iterating over another attribute", "body": "<p>I think I have \"solved\" this problem using macros. If I use the following code, it works:</p>\n\n<pre><code>use std::slice;\n\nstruct S {\n    a: Vec&lt;i32&gt;,\n    b: Vec&lt;i32&gt;\n}\n\nimpl S {\n    fn a_push(&amp;mut self, val: i32) {\n        self.a.push(val);\n    }\n}\n\nmacro_rules! a_iter {\n    ($x: expr) =&gt; {\n        { $x.a.iter() }\n    }\n}\n\nmacro_rules! b_push {\n    ($x: expr, $val: expr) =&gt; {\n        $x.b.push($val);\n    }\n}\n\nfn main() {\n    let mut s = S { a: Vec::new(), b: Vec::new() };\n    s.a_push(1);\n    s.a_push(2);\n    s.a_push(3);\n\n    let iter = a_iter!(s);\n\n    for a_val in iter {\n        println!(\"Looking at {}\", a_val);\n        b_push!(s, a_val*2);\n    }\n}\n</code></pre>\n\n<p>Here, I have moved the <code>a_iter</code> and <code>b_push</code> code into a macro. When the code is compiled, the macro will be expanded and it's as if we're not using an abstraction function(s). However for writing the code, that functionality is abstracted away.</p>\n\n<p>I'm not sure if they is a good or bad idea.</p>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 162, "favorite_count": 0, "accepted_answer_id": 31230275, "answer_count": 4, "score": 3, "last_activity_date": 1436098839, "creation_date": 1435866489, "question_id": 31193408, "link": "https://stackoverflow.com/questions/31193408/modifying-one-attribute-of-a-struct-while-iterating-over-another-attribute", "title": "Modifying one attribute of a struct while iterating over another attribute", "body": "<p>I have a struct that has 2 <code>Vec</code>s. I want to be able to iterate over one while modifying the other one. Here's an example programme:</p>\n\n<pre><code>use std::slice;\n\nstruct S {\n    a: Vec&lt;i32&gt;,\n    b: Vec&lt;i32&gt;\n}\n\nimpl S {\n    fn a_iter&lt;'a&gt;(&amp;'a self) -&gt; slice::Iter&lt;i32&gt;  {\n        self.a.iter()\n    }\n    fn a_push(&amp;mut self, val: i32) {\n        self.a.push(val);\n    }\n    fn b_push(&amp;mut self, val: i32) {\n        self.b.push(val);\n    }\n}\n\nfn main() {\n    let mut s = S { a: Vec::new(), b: Vec::new() };\n    s.a_push(1);\n    s.a_push(2);\n    s.a_push(3);\n\n    for a_val in s.a_iter() {\n        s.b_push(a_val*2);\n    }\n}\n</code></pre>\n\n<p>But there is this compiler error:</p>\n\n<pre><code>$ rustc iterexample.rs \niterexample.rs:28:9: 28:10 error: cannot borrow `s` as mutable because it is also borrowed as immutable\niterexample.rs:28         s.b_push(a_val*2);\n                           ^\nnote: in expansion of for loop expansion\n iterexample.rs:26:5: 29:6 note: expansion site\niterexample.rs:26:18: 26:19 note: previous borrow of `s` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `s` until the borrow ends\niterexample.rs:26     for a_val in s.a_iter() {\n                                   ^\nnote: in expansion of for loop expansion\niterexample.rs:26:5: 29:6 note: expansion site\niterexample.rs:29:6: 29:6 note: previous borrow ends here\niterexample.rs:26     for a_val in s.a_iter() {\niterexample.rs:27         println!(\"Looking at {}\", a_val);\niterexample.rs:28         s.b_push(a_val*2);\niterexample.rs:29     }\n                      ^\nnote: in expansion of for loop expansion\niterexample.rs:26:5: 29:6 note: expansion site\nerror: aborting due to previous error\n</code></pre>\n\n<p>I understand what the compiler is complaining about. I have borrowed <code>self</code> in the for loop, because I am still looping over it.</p>\n\n<p>Conceptially there should be a way to do this though. I am only modifying <code>s.b</code>, and not modifying the thing I'm looping over (<code>s.a</code>). Is there anyway to write my programme to demostrate this separation, and allow this sort of programme to compile?</p>\n\n<p>This is a simplified example of a larger programme, so I need to keep the general structure the same (a struct that has some things, one of which will be iterated over, and another that will be updated).</p>\n"}, {"tags": ["file-io", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435865517, "post_id": 31192956, "comment_id": 50391016, "body": "How do you want to read the file? Do you want it line-by-line, as you&#39;ve shown? Do you want it all in one string? There&#39;s more than one way to &quot;read a file&quot;."}, {"owner": {"reputation": 2840, "user_id": 709010, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7550d19d9a0b58c9d4b8a16eb1ebb523?s=128&d=identicon&r=PG", "display_name": "Jared", "link": "https://stackoverflow.com/users/709010/jared"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435865755, "post_id": 31192956, "comment_id": 50391145, "body": "Either manner is fine. I left it open intentionally. If it&#39;s collected all into one string, splitting it into a Vec&lt;String&gt; would be trivial, and vice versa. At this point in my search for solutions, I&#39;ll be happy to just see elegant, up-to-date Rust file I/O code that works."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1435905409, "post_id": 31192956, "comment_id": 50403387, "body": "Regarding the trait error (<code>std::io::Read</code>), note that in Rust you must import the traits you expect to be using <i>explicitly</i>; thus here you are missing a <code>use std::io::Read</code> (which could be a <code>use std::io::{Read,BufReader}</code> to coalesce the two uses together)"}], "answers": [{"comments": [{"owner": {"reputation": 2840, "user_id": 709010, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7550d19d9a0b58c9d4b8a16eb1ebb523?s=128&d=identicon&r=PG", "display_name": "Jared", "link": "https://stackoverflow.com/users/709010/jared"}, "edited": false, "score": 2, "creation_date": 1435867265, "post_id": 31193386, "comment_id": 50391978, "body": "I don&#39;t really have much to base this off of, but while researching this I felt a bit of a push from the community to use BufReader and BufWriter instead of reading straight from a file to a string. Do you know much about these objects or the pros and cons of using them over the &quot;more classical&quot; version you&#39;ve shown in your answer?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 138, "user_id": 11580138, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/z6chc.jpg?s=128&g=1", "display_name": "The Daleks", "link": "https://stackoverflow.com/users/11580138/the-daleks"}, "edited": false, "score": 0, "creation_date": 1591411040, "post_id": 31193386, "comment_id": 110053497, "body": "@TheDaleks I&#39;m not following your question. <code>b&quot;foobar&quot;</code> is a literal to create a reference to an array of bytes (<code>&amp;[u8; N]</code>). As such, it&#39;s immutable. There&#39;s nothing it gives you that you can&#39;t do in a simpler manner."}, {"owner": {"reputation": 138, "user_id": 11580138, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/z6chc.jpg?s=128&g=1", "display_name": "The Daleks", "link": "https://stackoverflow.com/users/11580138/the-daleks"}, "edited": false, "score": 0, "creation_date": 1591454491, "post_id": 31193386, "comment_id": 110064620, "body": "@Shepmaster Occasionally it is advantageous to have a byte-array instead of an encoded string; for example, if you want to make an app that moves files from one spot to another, you need to have the raw bytes so that you do not corrupt executable files that the app processes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 138, "user_id": 11580138, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/z6chc.jpg?s=128&g=1", "display_name": "The Daleks", "link": "https://stackoverflow.com/users/11580138/the-daleks"}, "edited": false, "score": 0, "creation_date": 1591454670, "post_id": 31193386, "comment_id": 110064691, "body": "@TheDaleks yes, which is why this answer explains how to use a <code>Vec&lt;u8&gt;</code> for reading and writing. Those are raw bytes."}, {"owner": {"reputation": 105, "user_id": 3841784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e45b8c780ed6859ddb9613528dec27b0?s=128&d=identicon&r=PG&f=1", "display_name": "Dragoon", "link": "https://stackoverflow.com/users/3841784/dragoon"}, "edited": false, "score": 0, "creation_date": 1615921428, "post_id": 31193386, "comment_id": 117840745, "body": "Does bufwriter need to be explicitly flushed at any time?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 105, "user_id": 3841784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e45b8c780ed6859ddb9613528dec27b0?s=128&d=identicon&r=PG&f=1", "display_name": "Dragoon", "link": "https://stackoverflow.com/users/3841784/dragoon"}, "edited": false, "score": 0, "creation_date": 1617024682, "post_id": 31193386, "comment_id": 118177637, "body": "@Dragoon that depends on your use case, really. The <a href=\"https://doc.rust-lang.org/std/io/struct.BufWriter.html\" rel=\"nofollow noreferrer\">docs say</a>: <i>It is critical to call <code>flush</code> before <code>BufWriter&lt;W&gt;</code> is dropped. Though dropping will attempt to flush the contents of the buffer, any errors that happen in the process of dropping will be ignored. Calling <code>flush</code> ensures that the buffer is empty and thus dropping will not even attempt file operations.</i>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 240, "last_activity_date": 1571307571, "last_edit_date": 1571307571, "creation_date": 1435866398, "answer_id": 31193386, "question_id": 31192956, "link": "https://stackoverflow.com/questions/31192956/whats-the-de-facto-way-of-reading-and-writing-files-in-rust-1-x/31193386#31193386", "title": "What&#39;s the de-facto way of reading and writing files in Rust 1.x?", "body": "<p>None of the functions I show here panic on their own, but I am using <code>expect</code> because I don't know what kind of error handling will fit best into your application. Go read <em>The Rust Programming Language</em>'s <a href=\"https://doc.rust-lang.org/book/ch09-00-error-handling.html\" rel=\"noreferrer\">chapter on error handling</a> to understand how to appropriately handle failure in your own program.</p>\n\n<h1>Rust 1.26 and onwards</h1>\n\n<p>If you don't want to care about the underlying details, there are one-line functions for reading and writing.</p>\n\n<h3>Read a file to a <code>String</code></h3>\n\n<pre><code>use std::fs;\n\nfn main() {\n    let data = fs::read_to_string(\"/etc/hosts\").expect(\"Unable to read file\");\n    println!(\"{}\", data);\n}\n</code></pre>\n\n<h3>Read a file as a <code>Vec&lt;u8&gt;</code></h3>\n\n<pre><code>use std::fs;\n\nfn main() {\n    let data = fs::read(\"/etc/hosts\").expect(\"Unable to read file\");\n    println!(\"{}\", data.len());\n}\n</code></pre>\n\n<h3>Write a file</h3>\n\n<pre><code>use std::fs;\n\nfn main() {\n    let data = \"Some data!\";\n    fs::write(\"/tmp/foo\", data).expect(\"Unable to write file\");\n}\n</code></pre>\n\n<h1>Rust 1.0 and onwards</h1>\n\n<p>These forms are slightly more verbose than the one-line functions that  allocate a <code>String</code> or <code>Vec</code> for you, but are more powerful in that you can reuse allocated data or append to an existing object.</p>\n\n<h2>Reading data</h2>\n\n<p>Reading a file requires two core pieces: <a href=\"http://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"noreferrer\"><code>File</code></a> and <a href=\"http://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"noreferrer\"><code>Read</code></a>.</p>\n\n<h3>Read a file to a <code>String</code></h3>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let mut data = String::new();\n    let mut f = File::open(\"/etc/hosts\").expect(\"Unable to open file\");\n    f.read_to_string(&amp;mut data).expect(\"Unable to read string\");\n    println!(\"{}\", data);\n}\n</code></pre>\n\n<h3>Read a file as a <code>Vec&lt;u8&gt;</code></h3>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let mut data = Vec::new();\n    let mut f = File::open(\"/etc/hosts\").expect(\"Unable to open file\");\n    f.read_to_end(&amp;mut data).expect(\"Unable to read data\");\n    println!(\"{}\", data.len());\n}\n</code></pre>\n\n<h3>Write a file</h3>\n\n<p>Writing a file is similar, except we use the <a href=\"http://doc.rust-lang.org/std/io/trait.Write.html\" rel=\"noreferrer\"><code>Write</code></a> trait and we always write out bytes. You can convert a <code>String</code> / <code>&amp;str</code> to bytes with <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.as_bytes-1\" rel=\"noreferrer\"><code>as_bytes</code></a>:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Write;\n\nfn main() {\n    let data = \"Some data!\";\n    let mut f = File::create(\"/tmp/foo\").expect(\"Unable to create file\");\n    f.write_all(data.as_bytes()).expect(\"Unable to write data\");\n}\n</code></pre>\n\n<h2>Buffered I/O</h2>\n\n<blockquote>\n  <p>I felt a bit of a push from the community to use <code>BufReader</code> and <code>BufWriter</code> instead of reading straight from a file</p>\n</blockquote>\n\n<p>A buffered reader (or writer) uses a buffer to reduce the number of I/O requests. For example, it's much more efficient to access the disk once to read 256 bytes instead of accessing the disk 256 times.</p>\n\n<p>That being said, I don't believe a buffered reader/writer will be useful when reading the entire file. <a href=\"https://github.com/rust-lang/rust/blob/1.10.0/src/libstd/io/mod.rs#L345-L374\" rel=\"noreferrer\"><code>read_to_end</code></a> seems to copy data in somewhat large chunks, so the transfer may already be naturally coalesced into fewer I/O requests.</p>\n\n<p>Here's an example of using it for reading:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{BufReader, Read};\n\nfn main() {\n    let mut data = String::new();\n    let f = File::open(\"/etc/hosts\").expect(\"Unable to open file\");\n    let mut br = BufReader::new(f);\n    br.read_to_string(&amp;mut data).expect(\"Unable to read string\");\n    println!(\"{}\", data);\n}\n</code></pre>\n\n<p>And for writing:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{BufWriter, Write};\n\nfn main() {\n    let data = \"Some data!\";\n    let f = File::create(\"/tmp/foo\").expect(\"Unable to create file\");\n    let mut f = BufWriter::new(f);\n    f.write_all(data.as_bytes()).expect(\"Unable to write data\");\n}\n</code></pre>\n\n<p>A <code>BufReader</code> is more useful when you want to read line-by-line:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main() {\n    let f = File::open(\"/etc/hosts\").expect(\"Unable to open file\");\n    let f = BufReader::new(f);\n\n    for line in f.lines() {\n        let line = line.expect(\"Unable to read line\");\n        println!(\"Line: {}\", line);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1047, "user_id": 456878, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/6b67863cb230c1ac2b408808354aca7d?s=128&d=identicon&r=PG", "display_name": "Doug Bradshaw", "link": "https://stackoverflow.com/users/456878/doug-bradshaw"}, "edited": false, "score": 0, "creation_date": 1617836617, "post_id": 66484174, "comment_id": 118422451, "body": "I found that I needed to import <code>std::io::Write</code> for the upper flow as well."}], "tags": [], "owner": {"reputation": 105, "user_id": 3841784, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e45b8c780ed6859ddb9613528dec27b0?s=128&d=identicon&r=PG&f=1", "display_name": "Dragoon", "link": "https://stackoverflow.com/users/3841784/dragoon"}, "is_accepted": false, "score": 1, "last_activity_date": 1614898081, "creation_date": 1614898081, "answer_id": 66484174, "question_id": 31192956, "link": "https://stackoverflow.com/questions/31192956/whats-the-de-facto-way-of-reading-and-writing-files-in-rust-1-x/66484174#66484174", "title": "What&#39;s the de-facto way of reading and writing files in Rust 1.x?", "body": "<p>For anybody who is writing to a file, the accepted answer is good but if you need to append to the file you have to use the OpenOptions struct instead:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fs::OpenOptions;\n\nfn main() {\n    let data = &quot;Some data!\\n&quot;;\n    let mut f = OpenOptions::new()\n        .append(true)\n        .create(true) // Optionally create the file if it doesn't already exist\n        .open(&quot;/tmp/foo&quot;)\n        .expect(&quot;Unable to open file&quot;);\n    f.write_all(data.as_bytes()).expect(&quot;Unable to write data&quot;);\n}\n</code></pre>\n<p>Buffered writing still works the same way:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::{BufWriter, Write};\nuse std::fs::OpenOptions;\n\nfn main() {\n    let data = &quot;Some data!\\n&quot;;\n    let f = OpenOptions::new()\n        .append(true)\n        .open(&quot;/tmp/foo&quot;)\n        .expect(&quot;Unable to open file&quot;);\n    let mut f = BufWriter::new(f);\n    f.write_all(data.as_bytes()).expect(&quot;Unable to write data&quot;);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 21, "user_id": 15365126, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1dfebd6f603f2e6c6bbc7998de2834f?s=128&d=identicon&r=PG&f=1", "display_name": "will", "link": "https://stackoverflow.com/users/15365126/will"}, "is_accepted": false, "score": 2, "last_activity_date": 1615344905, "creation_date": 1615344905, "answer_id": 66557689, "question_id": 31192956, "link": "https://stackoverflow.com/questions/31192956/whats-the-de-facto-way-of-reading-and-writing-files-in-rust-1-x/66557689#66557689", "title": "What&#39;s the de-facto way of reading and writing files in Rust 1.x?", "body": "<p>By using the <code>Buffered I/O</code> you can copy the file size is greater than the actual memory.</p>\n<pre><code>\nuse std::fs::{File, OpenOptions};\nuse std::io::{BufReader, BufWriter, Write, BufRead};\n\nfn main() {\n    let read = File::open(r#&quot;E:\\1.xls&quot;#);\n\n    let write = OpenOptions::new().write(true).create(true).open(r#&quot;E:\\2.xls&quot;#);\n\n    let mut reader = BufReader::new(read.unwrap());\n\n    let mut writer = BufWriter::new(write.unwrap());\n\n    let mut length = 1;\n\n    while length &gt; 0 {\n        let buffer = reader.fill_buf().unwrap();\n\n        writer.write(buffer);\n\n        length = buffer.len();\n        reader.consume(length);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2840, "user_id": 709010, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/7550d19d9a0b58c9d4b8a16eb1ebb523?s=128&d=identicon&r=PG", "display_name": "Jared", "link": "https://stackoverflow.com/users/709010/jared"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 59403, "favorite_count": 43, "accepted_answer_id": 31193386, "answer_count": 3, "score": 172, "last_activity_date": 1615344905, "creation_date": 1435865026, "last_edit_date": 1473559430, "question_id": 31192956, "link": "https://stackoverflow.com/questions/31192956/whats-the-de-facto-way-of-reading-and-writing-files-in-rust-1-x", "title": "What&#39;s the de-facto way of reading and writing files in Rust 1.x?", "body": "<p>With Rust being comparatively new, I've seen far too many ways of reading and writing files. Many are extremely messy snippets someone came up with for their blog, and 99% of the examples I've found (even on Stack Overflow) are from unstable builds that no longer work. Now that Rust is stable, what is a simple, readable, non-panicking snippet for reading or writing files?</p>\n\n<p>This is the closest I've gotten to something that works in terms of reading a text file, but it's still not compiling even though I'm fairly certain I've included everything I should have. This is based off of a snippet I found on Google+ of all places, and the only thing I've changed is that the old <code>BufferedReader</code> is now just <code>BufReader</code>:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::BufReader;\nuse std::path::Path;\n\nfn main() {\n    let path = Path::new(\"./textfile\");\n    let mut file = BufReader::new(File::open(&amp;path));\n    for line in file.lines() {\n        println!(\"{}\", line);\n    }\n}\n</code></pre>\n\n<p>The compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::result::Result&lt;std::fs::File, std::io::Error&gt;: std::io::Read` is not satisfied [--explain E0277]\n --&gt; src/main.rs:7:20\n  |&gt;\n7 |&gt;     let mut file = BufReader::new(File::open(&amp;path));\n  |&gt;                    ^^^^^^^^^^^^^^\nnote: required by `std::io::BufReader::new`\n\nerror: no method named `lines` found for type `std::io::BufReader&lt;std::result::Result&lt;std::fs::File, std::io::Error&gt;&gt;` in the current scope\n --&gt; src/main.rs:8:22\n  |&gt;\n8 |&gt;     for line in file.lines() {\n  |&gt;                      ^^^^^\n</code></pre>\n\n<p>To sum it up, what I'm looking for is:</p>\n\n<ul>\n<li>brevity</li>\n<li>readability</li>\n<li>covers all possible errors</li>\n<li>doesn't panic</li>\n</ul>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1435867834, "post_id": 31193222, "comment_id": 50392306, "body": "I just decided to use <code>IndexMut</code> instead of <code>FnMut</code> for my task, however, I think I spotted an error? Cause, for functions, there&#39;s (<code>FnOnce</code>), (<code>FnOnce</code>, <code>FnMut</code>), (<code>FnOnce</code>, <code>FnMut</code>, <code>Fn</code>). Alright, understood. But for the <code>Index</code>es it is: (<code>Index</code>), (<code>Index</code>, <code>IndexMut</code>). That&#39;s the other way around and a mistake I think, since, when I implement the mutable version, I have to have the immutable version too, which wont work... (Should I open a new question for that or does this comment suffice?)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1435870027, "post_id": 31193222, "comment_id": 50393346, "body": "@Kapichu it sounds like a different question to me. Specifically because I want to ask you what you mean by &quot;which won&#39;t work&quot;. I bet that warrants a code snippet, which means it&#39;s probably another question. More questions are good - finer grained search results for the future people."}, {"owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "edited": false, "score": 0, "creation_date": 1435930485, "post_id": 31193222, "comment_id": 50417941, "body": "Ok I&#39;ll do it, this answer to this question helped me then! Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1435865908, "creation_date": 1435865908, "answer_id": 31193222, "question_id": 31190851, "link": "https://stackoverflow.com/questions/31190851/why-is-fn-derived-from-fnmut-which-is-derived-from-fnonce/31193222#31193222", "title": "Why is Fn derived from FnMut (which is derived from FnOnce)?", "body": "<p>The best reference for this is the excellent <a href=\"http://huonw.github.io/blog/2015/05/finding-closure-in-rust/\">Finding Closure in Rust</a> blog post. I'll quote the salient part:</p>\n\n<blockquote>\n  <p>There\u2019s three traits, and so seven non-empty sets of traits that could possibly be implemented\u2026 but there\u2019s actually only three interesting configurations:</p>\n  \n  <ul>\n  <li><code>Fn</code>, <code>FnMut</code> and <code>FnOnce</code>,</li>\n  <li><code>FnMut</code> and <code>FnOnce</code>,</li>\n  <li>only <code>FnOnce</code>.</li>\n  </ul>\n  \n  <p>Why? Well, the three closure traits are actually three nested sets: every closure that implements <code>Fn</code> can also implement <code>FnMut</code> (if <code>&amp;self works</code>, <code>&amp;mut self</code> also works; proof: <code>&amp;*self</code>), and similarly every closure implementing <code>FnMut</code> can also implement <code>FnOnce</code>. This hierarchy is enforced at the type level</p>\n</blockquote>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 368, "favorite_count": 1, "accepted_answer_id": 31193222, "answer_count": 1, "score": 5, "last_activity_date": 1435865908, "creation_date": 1435857596, "last_edit_date": 1435865567, "question_id": 31190851, "link": "https://stackoverflow.com/questions/31190851/why-is-fn-derived-from-fnmut-which-is-derived-from-fnonce", "title": "Why is Fn derived from FnMut (which is derived from FnOnce)?", "body": "<p>If you look in the <a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"nofollow\">official Rust doc</a>, you see that the trait <code>Fn</code> is derived from <code>FnMut</code>, or, to implement <code>Fn</code>, you have to implement <code>FnMut</code> (and after that <code>FnOnce</code> since <code>FnMut</code> also derives from it).  </p>\n\n<p>Why is that so? I simply can't comprehend that. Is it because you can call every <code>Fn</code> as a <code>FnOnce</code> or <code>FnMut</code>?</p>\n"}, {"tags": ["ruby", "rust", "ffi", "ruby-ffi"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1435857027, "post_id": 31190562, "comment_id": 50386340, "body": "I&#39;m not familiar with Ruby FFI but... are <code>len</code> and <code>data</code> supposed to be reversed?  It&#39;s <code>data</code>, <code>len</code> in Rust, but <code>len</code>, <code>data</code> in Ruby."}, {"owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1435857448, "post_id": 31190562, "comment_id": 50386569, "body": "Hmm.  Good point. However I do believe I had them in the correct layout at some point and was still segfaulting.  I will try switching that and update the question."}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 1, "creation_date": 1435860114, "post_id": 31190562, "comment_id": 50388050, "body": "You now have two separate definitions of the <code>Array</code> struct in your rust source... please post the code that you are using"}], "answers": [{"comments": [{"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 1, "creation_date": 1435863284, "post_id": 31192311, "comment_id": 50389814, "body": "As a side note, you may want to consider using <code>std::ffi::CString</code> instead of <code>String</code>"}, {"owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 0, "creation_date": 1435892337, "post_id": 31192311, "comment_id": 50399537, "body": "Awesome.  Thank you Adrian.   And yes CString is what I should have been using."}, {"owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 0, "creation_date": 1435892699, "post_id": 31192311, "comment_id": 50399612, "body": "One issue though is that I am getting an array of strings only pointing to the first sting in the array.  So I am getting an array that looks like this:  [&quot;<a href=\"https://www.google.com/webhp?tab=ww\" rel=\"nofollow noreferrer\">google.com/webhp?tab=ww</a>&quot;, &quot;www.google.com/webhp?tab=ww&quot;, &quot;le.com/webhp?tab=ww&quot;, &quot;ebhp?tab=ww&quot;, &quot;=ww&quot;, &quot;\\t&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]"}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 0, "creation_date": 1435897277, "post_id": 31192311, "comment_id": 50400686, "body": "@mpiccolo I can&#39;t imagine why that would be happening. I would recommend posting a new question with a complete example program, the output you are getting, and your expected output. Without that information it is hard to help you."}, {"owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "edited": false, "score": 0, "creation_date": 1435897751, "post_id": 31192311, "comment_id": 50400803, "body": "I posted the fix above.  You pointed me in the right direction with reminding me I needed a CString instead of a String."}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": false, "score": 1, "last_activity_date": 1435862792, "creation_date": 1435862792, "answer_id": 31192311, "question_id": 31190562, "link": "https://stackoverflow.com/questions/31190562/rust-vec-to-ruby-array-with-ffi-segfaults/31192311#31192311", "title": "Rust Vec to Ruby Array with FFI Segfaults", "body": "<p>It seems like <code>FFI::Pointer#get_array_of_string</code> is bugged (or it just doesn't do what I think it does). Your code works for me if I change this line:</p>\n\n<pre><code>self[:data].get_array_of_string(0, self[:len]).compact\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>Array.new(self[:len]) {|i| self[:data].read_pointer[i * FFI::Pointer::SIZE].read_string }\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "is_accepted": true, "score": 2, "last_activity_date": 1451317677, "last_edit_date": 1495539882, "creation_date": 1435897671, "answer_id": 31198479, "question_id": 31190562, "link": "https://stackoverflow.com/questions/31190562/rust-vec-to-ruby-array-with-ffi-segfaults/31198479#31198479", "title": "Rust Vec to Ruby Array with FFI Segfaults", "body": "<p>The issue, pointed out by <a href=\"https://stackoverflow.com/users/283342/adrian\">Adrian</a>, was that I was pushing strings into the Vec.  FFI needs <code>*const libc::c_char</code>, which can be converted from a <code>String</code>.</p>\n\n<pre><code>let mut urls: Vec&lt;*const libc::c_char&gt; = vec![];\n\nurls.push(CString::new(string_var.value.to_string()).unwrap().into_raw());\n</code></pre>\n"}], "owner": {"reputation": 642, "user_id": 2626490, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7c9fda048420a5139f7ed90cc03e708a?s=128&d=identicon&r=PG", "display_name": "mpiccolo", "link": "https://stackoverflow.com/users/2626490/mpiccolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 503, "favorite_count": 1, "accepted_answer_id": 31198479, "answer_count": 2, "score": 3, "last_activity_date": 1451317677, "creation_date": 1435856458, "last_edit_date": 1435895362, "question_id": 31190562, "link": "https://stackoverflow.com/questions/31190562/rust-vec-to-ruby-array-with-ffi-segfaults", "title": "Rust Vec to Ruby Array with FFI Segfaults", "body": "<p>I am trying to return a struct that can be converted into a Ruby array from an external rust function but when I try to call the structs #to_a method I get a segfault.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use libc::size_t;\n#[repr(C)]\npub struct Array {\n    len: libc::size_t,\n    data: *const libc::c_void,\n}\n\nimpl Array {\n    fn from_vec&lt;T&gt;(mut vec: Vec&lt;T&gt;) -&gt; Array {\n\n        vec.shrink_to_fit();\n\n        let array = Array { data: vec.as_ptr() as *const libc::c_void, len: vec.len() as libc::size_t };\n\n        mem::forget(vec);\n\n        array\n    }\n}\n\n#[no_mangle]\npub extern fn get_links(url: *const libc::c_char) -&gt; Array {\n\n  // Get links\n\n  let mut urls: Vec&lt;String&gt; = vec![];\n\n  // push strings into urls vec\n\n  // urls =&gt; collections::vec::Vec&lt;collections::string::String&gt;\n\n  Array::from_vec(urls)\n}\n</code></pre>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>require 'ffi'\n\nmodule Rust\n  extend FFI::Library\n  ffi_lib './bin/libembed.dylib'\n\n  class NodesArray &lt; FFI::Struct\n      layout :len,    :size_t, # dynamic array layout\n             :data,   :pointer #\n\n      def to_a\n          self[:data].get_array_of_string(0, self[:len]).compact\n      end\n  end\n\n  attach_function :get_links, [:string], NodesArray.by_value\nend\n</code></pre>\n\n<p>When I try to use this function in ruby it will return the Fii::NodesArray.  I can also get the len and data off of the struct.  It is only when I call the #to_a that segfaults.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1435849457, "post_id": 31187838, "comment_id": 50381457, "body": "Please read the rust-book. You can implement functions directly on types: <a href=\"https://doc.rust-lang.org/nightly/book/method-syntax.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/book/method-syntax.html</a> and your previous question would have been answered by the trait chapter in the rust-book <a href=\"https://doc.rust-lang.org/nightly/book/traits.html#default-methods\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/book/traits.html#default-methods</a>"}], "answers": [{"comments": [{"owner": {"reputation": 5770, "user_id": 2980246, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/hpOec.png?s=128&g=1", "display_name": "jayelm", "link": "https://stackoverflow.com/users/2980246/jayelm"}, "edited": false, "score": 0, "creation_date": 1435849296, "post_id": 31187986, "comment_id": 50381348, "body": "I then get the error &quot;method <code>new</code> is not a member of trait <code>ERP</code>&quot;."}, {"owner": {"reputation": 5770, "user_id": 2980246, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/hpOec.png?s=128&g=1", "display_name": "jayelm", "link": "https://stackoverflow.com/users/2980246/jayelm"}, "edited": false, "score": 1, "creation_date": 1435849613, "post_id": 31187986, "comment_id": 50381568, "body": "Ah, I didn&#39;t realize you can implement both the type directly and a trait for the type. Thanks."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 9, "last_activity_date": 1435848963, "creation_date": 1435848963, "answer_id": 31187986, "question_id": 31187838, "link": "https://stackoverflow.com/questions/31187838/new-method-on-traits-with-varying-parameters/31187986#31187986", "title": "new() method on traits with varying parameters", "body": "<p>Don't make the <code>new</code> function part of the trait. Functions with variable number of input arguments are not supported.</p>\n"}], "owner": {"reputation": 5770, "user_id": 2980246, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/hpOec.png?s=128&g=1", "display_name": "jayelm", "link": "https://stackoverflow.com/users/2980246/jayelm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4876, "favorite_count": 0, "accepted_answer_id": 31187986, "answer_count": 1, "score": 3, "last_activity_date": 1435849361, "creation_date": 1435848613, "last_edit_date": 1435849361, "question_id": 31187838, "link": "https://stackoverflow.com/questions/31187838/new-method-on-traits-with-varying-parameters", "title": "new() method on traits with varying parameters", "body": "<p>I'm trying to make a trait with various implementations with different internal parameters:</p>\n\n<pre><code>pub trait ERP {\n    fn new() -&gt; Self;\n    fn sample(&amp;self) -&gt; f64;\n}\n\npub struct Bernoulli {\n    p: f64\n}\n\nimpl ERP for Bernoulli {\n    fun new(p: f64) -&gt; Bernoulli {\n        Bernoulli { p: p }\n    }\n\n    fun sample(&amp;self) -&gt; f64 { self.p } // Filler code\n}\n\npub struct Gaussian {\n    mu: f64,\n    sigma: f64\n}\n\nimpl ERP for Gaussian {\n    fun new(mu: f64, sigma: f64) -&gt; Gaussian {\n        Gaussian { mu: mu, sigma: sigma }\n    }\n\n    fun sample(&amp;self) -&gt; f64 { self.mu } // Filler code\n}\n</code></pre>\n\n<p>But of course I get</p>\n\n<pre><code>error: method new` has 1 parameter but the declaration in trait\n`erp::ERP::new` has 0\n</code></pre>\n\n<p>since I must specify a fixed number of arguments in the trait.</p>\n\n<p>I also can't leave <code>new</code> out of the trait, since that gives</p>\n\n<pre><code>error: method `new` is not a member of trait `ERP`\n</code></pre>\n\n<p>My motivation is that I want the exposed ERP interface to stay consistent <em>except</em> for the <code>new</code> method, since each distribution's required parameters are dependent on the unique mathematics behind its implementation. Are there any workarounds?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435894427, "post_id": 31186864, "comment_id": 50400007, "body": "You really should be including some amount of example code. As it is right now, any answerer needs to create some arbitrary amount of code that uses the chrono crate which may or may not match the code you have. Please read about creating an <a href=\"/help/mcve\">MCVE</a>."}], "answers": [{"comments": [{"owner": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "edited": false, "score": 0, "creation_date": 1435912329, "post_id": 31198048, "comment_id": 50407063, "body": "Thanks! Sorry, i didn&#39;t post sample code but yours actually solves my problem. I didn&#39;t see that and i was trying to figure out by the API docs...  Now that i see it, it seems obvious."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1570029561, "last_edit_date": 1570029561, "creation_date": 1435894847, "answer_id": 31198048, "question_id": 31186864, "link": "https://stackoverflow.com/questions/31186864/how-to-convert-datetimeutc-to-datetimefixedoffset-or-vice-versa/31198048#31198048", "title": "How to convert DateTime&lt;UTC&gt; to DateTime&lt;FixedOffset&gt; or vice versa?", "body": "<p>I believe that you are looking for <a href=\"https://docs.rs/chrono/0.4.9/chrono/struct.DateTime.html#method.with_timezone\" rel=\"nofollow noreferrer\"><code>DateTime::with_timezone</code></a>:</p>\n\n<pre><code>use chrono::{DateTime, Local, TimeZone, Utc}; // 0.4.9\n\nfn main() {\n    let now = Utc::now();\n    let then = Local\n        .datetime_from_str(\"Thu Jul  2 23:26:06 EDT 2015\", \"%a %h %d %H:%M:%S EDT %Y\")\n        .unwrap();\n\n    println!(\"{}\", now);\n    println!(\"{}\", then);\n\n    let then_utc: DateTime&lt;Utc&gt; = then.with_timezone(&amp;Utc);\n\n    println!(\"{}\", then_utc);\n}\n</code></pre>\n\n<p>I've added a redundant type annotation on <code>then_utc</code> to show it is in UTC. This code prints</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>2019-10-02 15:18:52.247884539 UTC\n2015-07-02 23:26:06 +00:00\n2015-07-02 23:26:06 UTC\n</code></pre>\n"}], "owner": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2620, "favorite_count": 0, "accepted_answer_id": 31198048, "answer_count": 1, "score": 7, "last_activity_date": 1570029561, "creation_date": 1435846139, "last_edit_date": 1435893426, "question_id": 31186864, "link": "https://stackoverflow.com/questions/31186864/how-to-convert-datetimeutc-to-datetimefixedoffset-or-vice-versa", "title": "How to convert DateTime&lt;UTC&gt; to DateTime&lt;FixedOffset&gt; or vice versa?", "body": "<p>I have a struct that contains a timestamp.\nFor that I am using the <a href=\"https://lifthrasiir.github.io/rust-chrono/chrono/\" rel=\"noreferrer\">chrono library</a>. There are two ways to get the timestamp:</p>\n\n<ol>\n<li>Parsed from a string via <code>DateTime::parse_from_str</code> which results in a <code>DateTime&lt;FixedOffset&gt;</code></li>\n<li>The current time, received by <code>UTC::now</code> which results in a <code>DateTime&lt;UTC&gt;</code>.</li>\n</ol>\n\n<p>Is there a way to convert <code>DateTime&lt;UTC&gt;</code> to <code>DateTime&lt;FixedOffset&gt;</code>?</p>\n"}, {"tags": ["struct", "rust", "traits"], "comments": [{"owner": {"reputation": 5770, "user_id": 2980246, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/hpOec.png?s=128&g=1", "display_name": "jayelm", "link": "https://stackoverflow.com/users/2980246/jayelm"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435843831, "post_id": 31185585, "comment_id": 50377293, "body": "@ker My intent was not to create a compilable example, but just an example for a generalizable issue, hence leaving out <code>sample</code> in <code>Gaussian</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435843892, "post_id": 31185585, "comment_id": 50377328, "body": "rust has the <code>unimplemented!()</code> macro for such situations. Your code will compile, but do nothing useful. you can see this in <a href=\"http://is.gd/WwsBW2\" rel=\"nofollow noreferrer\">is.gd/WwsBW2</a>"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435850673, "post_id": 31185585, "comment_id": 50382304, "body": "For code that is very similar, sometimes an implementation macro makes sense. Though, I think that @ker&#39;s default implementation is the most appropriate here. (see macro question: <a href=\"http://stackoverflow.com/questions/31082179/implementing-a-trait-for-a-trait\" title=\"implementing a trait for a trait\">stackoverflow.com/questions/31082179/&hellip;</a> )"}], "answers": [{"comments": [{"owner": {"reputation": 3026, "user_id": 381712, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/561f214b150981056634bc5b60a995cb?s=128&d=identicon&r=PG", "display_name": "soulmachine", "link": "https://stackoverflow.com/users/381712/soulmachine"}, "edited": false, "score": 0, "creation_date": 1609162067, "post_id": 31185722, "comment_id": 115762846, "body": "What if <code>sample_many </code> needs to access strut fields?"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1435843020, "creation_date": 1435843020, "answer_id": 31185722, "question_id": 31185585, "link": "https://stackoverflow.com/questions/31185585/methods-shared-among-structs/31185722#31185722", "title": "Methods shared among structs", "body": "<p>You can create a default implementation for any function in the trait definition. It can still be overwritten by an implementor</p>\n\n<pre><code>pub trait ERP&lt;T&gt; {\n    fn sample(&amp;self) -&gt; T;\n    fn sample_many(&amp;self, i: isize) -&gt; Vec&lt;T&gt; {\n        (0..i).map(|_| self.sample()).collect()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5770, "user_id": 2980246, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/hpOec.png?s=128&g=1", "display_name": "jayelm", "link": "https://stackoverflow.com/users/2980246/jayelm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 726, "favorite_count": 1, "accepted_answer_id": 31185722, "answer_count": 1, "score": 8, "last_activity_date": 1435843755, "creation_date": 1435842609, "last_edit_date": 1435843755, "question_id": 31185585, "link": "https://stackoverflow.com/questions/31185585/methods-shared-among-structs", "title": "Methods shared among structs", "body": "<p>New to Rust here, apologies for my naivet\u00e9.</p>\n\n<p>I want to define some probability distributions, which obviously have differing parameters. But the \"interface\" (as I know it in Java) should be the same. At the most basic level each distribution should have a <code>sample</code> and a <code>sample_many</code> method. So I implement a trait:</p>\n\n<pre><code>pub trait ERP&lt;T&gt; {\n    fn sample(&amp;self) -&gt; T;\n    fn sample_many(&amp;self, i: isize) -&gt; Vec&lt;T&gt;;\n}\n</code></pre>\n\n<p>Then a specific distribution can be created:</p>\n\n<pre><code>pub struct Bernoulli {\n    pub p: f64\n}\n\nimpl ERP&lt;bool&gt; for Bernoulli {\n    fn sample(&amp;self) -&gt; bool {\n        rand::random::&lt;f64&gt;() &lt; self.p\n    }\n\n    fn sample_many(&amp;self, i: isize) -&gt; Vec&lt;bool&gt; {\n        (0..i).map(|_| self.sample()).collect()\n    }\n}\n</code></pre>\n\n<p>My issue is with the <code>sample_many</code> method, specifically. This method will be the same code regardless of the kind of distribution, e.g.</p>\n\n<pre><code>pub struct Gaussian {\n    pub mu: f64,\n    pub sigma: f64\n}\n\nimpl ERP&lt;f64&gt; for Gaussian {\n    fn sample(&amp;self) -&gt; f64 {\n        // Code unique to each distribution\n    }\n\n    fn sample_many(&amp;self, i: isize) -&gt; Vec&lt;f64&gt; {\n        (0..i).map(|_| self.sample()).collect() // Code reuse??\n    }\n}\n</code></pre>\n\n<p>So copying the method here is pretty redundant. Is there a way around this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435833399, "post_id": 31181232, "comment_id": 50370092, "body": "@ker This title is more fitting, yes?"}], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1435832532, "post_id": 31181779, "comment_id": 50369582, "body": "I had a similar idea. But not sure about<code>Clone</code>. My inner nerd yells at me for having too much <code>clone</code>. Even though it&#39;s probably optimized away."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435854165, "post_id": 31181779, "comment_id": 50384692, "body": "there&#39;s often no difference between <code>Clone</code> and <code>Copy</code> (and imo there shouldn&#39;t ever be), So you can assume any type that impls <code>Copy</code> will have a trivial <code>Clone</code> implementation that does nothing more than a memcpy"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 1, "last_activity_date": 1435831930, "creation_date": 1435831930, "answer_id": 31181779, "question_id": 31181232, "link": "https://stackoverflow.com/questions/31181232/moving-array-values-between-enum-variations/31181779#31181779", "title": "Moving array values between enum variations", "body": "<p>You could change the constraint from <code>Copy</code> to <code>Clone</code>; then, the match arm would become:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>&amp;mut Single(ref b) =&gt; Double([value, b[0].clone()]),\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1435833962, "post_id": 31182159, "comment_id": 50370424, "body": "O_o: note, this only works with enums, not with arrays directly: <a href=\"https://github.com/rust-lang/rust/issues/26736\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26736</a> slice patterns are rather buggy (I&#39;d say the label &quot;unstable&quot; fits slice patterns very well)"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1435836284, "post_id": 31182159, "comment_id": 50371871, "body": "It&#39;s the more clever solution, I&#39;ll give you that. But it&#39;s kinda broken :( and I need to modify way Affix works (namely add Nothing variant)."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1435839529, "post_id": 31182159, "comment_id": 50374139, "body": "the Nothing variant is just for safe-rust, you can always use <code>uninitialized</code>, since the value will never be read: <a href=\"http://is.gd/6i1MLX\" rel=\"nofollow noreferrer\">is.gd/6i1MLX</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1435843677, "post_id": 31182159, "comment_id": 50377174, "body": "note though, that that trick is not panic-safe, so it actually causes UB in case of the panic"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 1, "last_activity_date": 1435833112, "creation_date": 1435833112, "answer_id": 31182159, "question_id": 31181232, "link": "https://stackoverflow.com/questions/31181232/moving-array-values-between-enum-variations/31182159#31182159", "title": "Moving array values between enum variations", "body": "<p>On nightly you can use the \"slice_pattern\" syntax:</p>\n\n<pre><code>Single([one]) =&gt; Double([value, one]),\n</code></pre>\n\n<p><a href=\"http://is.gd/F3bBTc\" rel=\"nofollow\">PlayPen</a></p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "accepted_answer_id": 31181779, "answer_count": 2, "score": 3, "last_activity_date": 1435833384, "creation_date": 1435830497, "last_edit_date": 1435833384, "question_id": 31181232, "link": "https://stackoverflow.com/questions/31181232/moving-array-values-between-enum-variations", "title": "Moving array values between enum variations", "body": "<p>My problem is following. I have enum with several variants that use increasing number of items. For simplicity I'll reduce the numbers to first two:</p>\n\n<pre><code>#[derive(Debug)]\npub enum Variant&lt;A&gt; {\n    Single([A; 1]),\n    Double([A; 2]),\n}\n</code></pre>\n\n<p>I want to create special methods which would preferably transform <code>Single</code> into <code>Double</code>. For example if I call <code>push_front(a)</code> on <code>Single([x])</code> I need to get back <code>Double([a,x]</code>. One way I could do it is:</p>\n\n<pre><code>impl&lt;A: Copy&gt; Variant&lt;A&gt; {\n    fn push_front(&amp;mut self, value: A)  {\n        self* = match self {\n            &amp;mut Single(b) =&gt; Double([value, b[0]]),\n            _ =&gt; panic!(\"Can't convert\"),\n        };            \n    }\n}\n</code></pre>\n\n<p>Is there a way to achieve similar effect without <code>A</code> having to implement <code>Copy</code>?</p>\n\n<p>Playground link: <a href=\"http://is.gd/i0bQtl\" rel=\"nofollow\">http://is.gd/i0bQtl</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1435822122, "post_id": 31177437, "comment_id": 50362681, "body": "It would be easier to understand exactly what you wish if you could present some sample code of what the enums look like and which syntax you are looking for."}], "answers": [{"comments": [{"owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "edited": false, "score": 0, "creation_date": 1435831797, "post_id": 31178524, "comment_id": 50369109, "body": "Thanks guys, if let is exactly what I was looking for."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 5, "last_activity_date": 1435823287, "creation_date": 1435823287, "answer_id": 31178524, "question_id": 31177437, "link": "https://stackoverflow.com/questions/31177437/matching-with-less-boilerplate/31178524#31178524", "title": "Matching with less boilerplate", "body": "<p>It is not possible to access nested enums with dots syntax, but you can use <code>if let</code>:</p>\n\n<pre><code>pub enum X {\n    A(Y),\n    B(Z)\n}\n\npub enum Y {\n    C,\n    D(u32)\n}\n\npub enum Z {\n    E\n}\n\nfn main() {\n    let x = X::A(Y::D(12));\n\n    if let X::A(Y::D(n)) = x {\n        println!(\"Got it: {}\", n);\n    } else {\n        println!(\"Nope\");\n    }\n}\n</code></pre>\n\n<p>(try it <a href=\"http://is.gd/nbWRsJ\" rel=\"noreferrer\">here</a>)</p>\n\n<p><code>if let</code> makes the code arguably more concise than <code>match</code>. Naturally, this is as efficient as <code>match</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 4, "last_activity_date": 1435823343, "creation_date": 1435823343, "answer_id": 31178537, "question_id": 31177437, "link": "https://stackoverflow.com/questions/31177437/matching-with-less-boilerplate/31178537#31178537", "title": "Matching with less boilerplate", "body": "<p>Given these definitions:</p>\n\n<pre><code>enum X {\n    Variant(Y),\n    \u2026\n}\n\nenum Y {\n    Variant(Z),\n    \u2026\n}\n\nstruct Z;\n</code></pre>\n\n<p>You can use <code>if let</code> with deep patterns as one way:</p>\n\n<pre><code>if let X::Variant(Y::Variant(ref z) = x {\n    // Use z\n} else {       // And these two lines are,\n    panic!();  // of course, optional.\n}\n</code></pre>\n\n<p>Or you could define methods (panicking is not a good idea, though; having such methods return <code>Option</code> is much more common, as is shown in rustc_serialize\u2019s <code>Json</code> enum, for example), but it will still leave you with comparatively ugly code, probably):</p>\n\n<pre><code>impl X {\n    fn y(&amp;self) -&gt; &amp;Y {\n        match *self {\n            Variant(ref y) =&gt; y,\n            _ =&gt; panic!(),\n        }\n    }\n}\n\n// Ditto for Y.z()\n\nlet z = x.y().z();\n</code></pre>\n"}], "owner": {"reputation": 2295, "user_id": 1099089, "user_type": "registered", "accept_rate": 11, "profile_image": "https://www.gravatar.com/avatar/a0bf49f333363ebd26ae2d0df3be9533?s=128&d=identicon&r=PG", "display_name": "stevenkucera", "link": "https://stackoverflow.com/users/1099089/stevenkucera"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1435823343, "creation_date": 1435819960, "last_edit_date": 1435822058, "question_id": 31177437, "link": "https://stackoverflow.com/questions/31177437/matching-with-less-boilerplate", "title": "Matching with less boilerplate", "body": "<p>I have nested structures of <code>enums</code>, ie. <code>enum X</code> has a variant which contains <code>enum Y</code> etc. Is there any way to access fields eg <code>x.y.z</code> with a runtime error if <code>x.y.z</code> doesn't exist (eg, <code>x</code> is of wrong variant). Furthermore is this a reasonably moral thing to do, or is there a better alternative, without <code>match</code> statements everywhere? Efficiency is not so important, though it would be good to make it as cheap as possible.</p>\n"}, {"tags": ["arrays", "rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1435813359, "post_id": 31175915, "comment_id": 50358863, "body": "To say that a slice is a view into an array is a misrepresentation; it\u2019s a view into <i>any</i> suitable chunk of memory. That could be an array (or a part thereof), a vector, a string (<code>&amp;[u8]</code> only, no other type of slice), <i>&amp;c.</i>"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1435816364, "post_id": 31175915, "comment_id": 50359807, "body": "I consider vectors and strings to contain an array (even if it&#39;s not a fixed-size array), so from this point of view, the statement remains true."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1435822264, "post_id": 31175915, "comment_id": 50362751, "body": "\u201cArray\u201d is a very specific term in Rust: <code>[T; n]</code>. Nothing else."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1435861868, "post_id": 31175915, "comment_id": 50389017, "body": "Your point is good, but this belongs as a comment, not an answer."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 0, "last_activity_date": 1435813251, "creation_date": 1435813251, "answer_id": 31175915, "question_id": 31175723, "link": "https://stackoverflow.com/questions/31175723/how-to-convert-a-static-array-to-a-dynamic-one/31175915#31175915", "title": "How to convert a static array to a dynamic one?", "body": "<pre><code>print_foo(&amp;xs);\n</code></pre>\n\n<p>By the way, <code>&amp;[Foo]</code> is not a dynamic array; it's a <em>slice</em>. A slice is a view into an array.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1435813262, "creation_date": 1435813262, "answer_id": 31175918, "question_id": 31175723, "link": "https://stackoverflow.com/questions/31175723/how-to-convert-a-static-array-to-a-dynamic-one/31175918#31175918", "title": "How to convert a static array to a dynamic one?", "body": "<p>If you take a reference to it (<code>&amp;xs</code>), you\u2019ll have something of type <code>&amp;[Foo; 3]</code>, which coerces freely to the dynamically sized slice <code>&amp;[Foo]</code>.</p>\n"}], "owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 125, "favorite_count": 0, "accepted_answer_id": 31175918, "answer_count": 2, "score": 2, "last_activity_date": 1435861814, "creation_date": 1435812098, "last_edit_date": 1435861814, "question_id": 31175723, "link": "https://stackoverflow.com/questions/31175723/how-to-convert-a-static-array-to-a-dynamic-one", "title": "How to convert a static array to a dynamic one?", "body": "<pre><code>struct Foo(i32);\n\nfn print_foo(xs: &amp;[Foo]){\n    for i in xs{\n        println!(\"{}\", i.0);\n    }\n}\n\nfn main() {\n    let xs = [Foo(1), Foo(2), Foo(3)];\n    // need do something in this line to conert xs to &amp;[Foo]\n    print_foo(xs); // error: expected &amp;[Foo] but found [Foo; 3]\n\n}\n</code></pre>\n\n<p>The variable <code>xs</code> needs to be converted to <code>&amp;[Foo]</code> but searching didn't give me the right answer.</p>\n"}, {"tags": ["python", "rust", "shared-libraries", "ctypes"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1435809980, "creation_date": 1435809980, "answer_id": 31175421, "question_id": 31175389, "link": "https://stackoverflow.com/questions/31175389/error-when-calling-rust-from-python/31175421#31175421", "title": "Error when calling Rust from Python", "body": "<p>The <code>#[no_mangle]</code> goes on the function, not on the <code>use</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub extern fn process() { ... }\n</code></pre>\n\n<p>For a complete, working example, see <a href=\"http://jakegoulding.com/rust-ffi-omnibus/integers/\" rel=\"nofollow\">the Rust FFI Omnibus \"Integers\" example</a>.</p>\n"}], "owner": {"reputation": 111, "user_id": 2727523, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/bQGiv.jpg?s=128&g=1", "display_name": "Libraco", "link": "https://stackoverflow.com/users/2727523/libraco"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 268, "favorite_count": 2, "accepted_answer_id": 31175421, "answer_count": 1, "score": 4, "last_activity_date": 1469389382, "creation_date": 1435809765, "last_edit_date": 1469389382, "question_id": 31175389, "link": "https://stackoverflow.com/questions/31175389/error-when-calling-rust-from-python", "title": "Error when calling Rust from Python", "body": "<p>Rust Code:</p>\n\n<pre><code>#[no_mangle]\nuse std::thread;\n\npub extern fn process() {\n    let handles: Vec&lt;_&gt; = (0..10).map(|_| {\n        thread::spawn(|| {\n            let mut _x = 0;\n            for _ in (0..5_000_001) {\n                _x += 1\n            }\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().ok().expect(\"Could not join a thread!\");\n    }\n}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"embed\"\nversion = \"0.1.0\"\nauthors = [\"hustlibraco &lt;hustlibraco@gmail.com&gt;\"]\n\n[lib]\nname = \"embed\"\ncrate-type = [\"dylib\"]\n</code></pre>\n\n<p>I build it to get <code>target/release/libembed.so</code>, and create <code>invoke.py</code> in this path\uff1a</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from ctypes import cdll\n\nlib = cdll.LoadLibrary(\"target/release/libembed.so\")\n\nlib.process()\n\nprint(\"done!\")\n</code></pre>\n\n<p>Executing, and Error\uff1a</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>-bash-4.2# python invoke.py \nTraceback (most recent call last):\n  File \"invoke.py\", line 5, in &lt;module&gt;\n    lib.process()\n  File \"/usr/lib64/python2.7/ctypes/__init__.py\", line 373, in __getattr__\n    func = self.__getitem__(name)\n  File \"/usr/lib64/python2.7/ctypes/__init__.py\", line 378, in __getitem__\n    func = self._FuncPtr((name_or_ordinal, self))\nAttributeError: target/release/libembed.so: undefined symbol: process\n</code></pre>\n\n<p>How to solve this problem?</p>\n"}, {"tags": ["regex", "rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 193, "user_id": 5000371, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afae53935fea45fc27fd58d245985ec8?s=128&d=identicon&r=PG", "display_name": "jdungan", "link": "https://stackoverflow.com/users/5000371/jdungan"}, "edited": false, "score": 0, "creation_date": 1435883520, "post_id": 31174746, "comment_id": 50397734, "body": "Thanks.  Changing to String works.   I did have to use: ` &#39;flag = new_flag.**to_string()**.into();&#39;`  I assume this is due to the product of new_flag is a &amp;str."}, {"owner": {"reputation": 193, "user_id": 5000371, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afae53935fea45fc27fd58d245985ec8?s=128&d=identicon&r=PG", "display_name": "jdungan", "link": "https://stackoverflow.com/users/5000371/jdungan"}, "edited": false, "score": 0, "creation_date": 1435884340, "post_id": 31174746, "comment_id": 50397903, "body": "Correction: .to_string() is unnecessary.  Notice the errant &amp; in the new_flag assignment.  Sorry for the confusion and thanks again for the help."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1435804474, "creation_date": 1435804474, "answer_id": 31174746, "question_id": 31174688, "link": "https://stackoverflow.com/questions/31174688/what-is-the-best-pattern-for-working-with-regex-results/31174746#31174746", "title": "What is the best pattern for working with regex results?", "body": "<p>The problem is that <code>new_flag</code> is borrowed from <code>line</code>.  That is, <code>new_flag</code> can <em>only</em> exist so long as <code>line</code> continues to exist.  Once you fall out of the loop, <code>line</code> will be destroyed.</p>\n\n<p>The simplest way to handle this is to switch from a borrowed string (<code>&amp;str</code>) to an <em>owned</em> string (<code>String</code>).  That is, you want a value that owns its contents so that there is no borrowing in play.  The appropriate changes would be:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut flag = String::from(\"V\"); // One way of constructing a String from a &amp;str\n...\n    flag = new_flag.into(); // Another way, using inference\n</code></pre>\n\n<p>A <em>slightly</em> more efficient alternative would be to use <code>std::borrow::Cow</code>, but that's probably unnecessary in this context.</p>\n"}], "owner": {"reputation": 193, "user_id": 5000371, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afae53935fea45fc27fd58d245985ec8?s=128&d=identicon&r=PG", "display_name": "jdungan", "link": "https://stackoverflow.com/users/5000371/jdungan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 807, "favorite_count": 0, "accepted_answer_id": 31174746, "answer_count": 1, "score": 3, "last_activity_date": 1435805701, "creation_date": 1435803909, "last_edit_date": 1435805701, "question_id": 31174688, "link": "https://stackoverflow.com/questions/31174688/what-is-the-best-pattern-for-working-with-regex-results", "title": "What is the best pattern for working with regex results?", "body": "<p>I am a Javascript dev looking to up my game with Rust.  I've read <em>The Rust Programming Language</em>, completed the tutorials, and successfully added Rust to a node project using FFI.  I would like to speed up a parser I wrote but think I'm missing a fundamental ownership concept.</p>\n\n<p>The current challenge is simple: evaluate a regex for a named capture and change the value of the variable to the new captured value.   </p>\n\n<p>I've tried this fifteen ways using <code>unwrap</code> or nesting <code>Result</code>s and <code>Option</code>s.  It always comes down to a 'does not live long enough' error.</p>\n\n<p>My most recent code looks like this:</p>\n\n<pre><code>let flag_re = compile_re(r\"(?:\\s*)([~])(?:\\s*)(?P&lt;FLAG&gt;.)\"); \n\nlet mut flag : &amp;str = \"V\";\n\nfor line in file.lines() {\n\n    let mut current_line : String = line.unwrap();\n\n    if flag_re.is_match(&amp;current_line) {\n\n        let new_flag = &amp;flag_re.captures(&amp;current_line).unwrap().name(\"FLAG\").unwrap().clone();\n\n        println!(\"old flag: {} new flag: {}\",flag,new_flag);\n\n        flag = new_flag;\n\n    }\n</code></pre>\n\n<p>This works great if I comment out the <code>flag = new_flag</code> line.  But once I try to assign a value to <code>flag</code> I get a 'does not live long enough' ON THE <code>current_line</code> variable.  I get that <code>current_line</code> is short lived so I've tried <code>clone</code> and <code>to_owned</code> with no luck and leading me to be certain I've got some misunderstanding of the concepts.</p>\n\n<p>I've tried to recreate this in the Rust playground with this code:</p>\n\n<pre><code>fn main() {\n   let mut a: &amp;str;\n   {\n     let b: &amp;str = \"B\";\n     a = b;  \n   }\n   println!(\"a: {} \",a);\n}\n</code></pre>\n\n<p>But (wouldn't you know) this works?  So please be gentle on this Javascript guy.  </p>\n"}]