[{"tags": ["rust", "serde", "serde-json"], "answers": [{"tags": [], "owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "is_accepted": true, "score": 1, "last_activity_date": 1493209011, "last_edit_date": 1493209011, "creation_date": 1481745229, "answer_id": 41151081, "question_id": 41151080, "link": "https://stackoverflow.com/questions/41151080/deserialize-a-json-string-or-array-of-strings-into-a-vec/41151081#41151081", "title": "Deserialize a JSON string or array of strings into a Vec", "body": "<p>This solution works for Serde 1.0.</p>\n\n<p>The way I found also required me to write a custom deserializer, because I needed one that would call <code>visitor.visit_newtype_struct</code> to try deserializing newtypes, and there don't seem to be any in-built into serde that do so. (I was expecting something like the <code>ValueDeserializer</code> series of types.)</p>\n\n<p>A self-contained example is below. The <code>SomeStruct</code> is deserialized correctly for both inputs, one where the values are JSON arrays of strings, and the other where they're just strings.</p>\n\n<pre><code>#[macro_use]\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\n\nfn main() {\n    #[derive(Debug, Deserialize)]\n    struct SomeStringNewType(String);\n\n    #[derive(Debug)]\n    struct SomeTypeWithCustomDeserializeFromStr(String);\n    impl&lt;'de&gt; ::serde::Deserialize&lt;'de&gt; for SomeTypeWithCustomDeserializeFromStr {\n        fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;Self, D::Error&gt; where D: ::serde::Deserializer&lt;'de&gt; {\n            struct Visitor;\n\n            impl&lt;'de&gt; ::serde::de::Visitor&lt;'de&gt; for Visitor {\n                type Value = SomeTypeWithCustomDeserializeFromStr;\n\n                fn expecting(&amp;self, f: &amp;mut ::std::fmt::Formatter) -&gt; ::std::fmt::Result {\n                    write!(f, \"a string\")\n                }\n\n                fn visit_str&lt;E&gt;(self, v: &amp;str) -&gt; Result&lt;Self::Value, E&gt; where E: ::serde::de::Error {\n                    Ok(SomeTypeWithCustomDeserializeFromStr(v.to_string() + \" custom\"))\n                }\n            }\n\n            deserializer.deserialize_any(Visitor)\n        }\n    }\n\n    #[derive(Debug, Deserialize)]\n    struct SomeStruct {\n        #[serde(deserialize_with = \"deserialize_string_or_seq_string\")]\n        field1: Vec&lt;SomeStringNewType&gt;,\n\n        #[serde(deserialize_with = \"deserialize_string_or_seq_string\")]\n        field2: Vec&lt;SomeTypeWithCustomDeserializeFromStr&gt;,\n    }\n\n    let x: SomeStruct = ::serde_json::from_str(r#\"{ \"field1\": [\"a\"], \"field2\": [\"b\"] }\"#).unwrap();\n    println!(\"{:?}\", x);\n    assert_eq!(x.field1[0].0, \"a\");\n    assert_eq!(x.field2[0].0, \"b custom\");\n\n    let x: SomeStruct = ::serde_json::from_str(r#\"{ \"field1\": \"c\", \"field2\": \"d\" }\"#).unwrap();\n    println!(\"{:?}\", x);\n    assert_eq!(x.field1[0].0, \"c\");\n    assert_eq!(x.field2[0].0, \"d custom\");\n}\n\n/// Deserializes a string or a sequence of strings into a vector of the target type.\npub fn deserialize_string_or_seq_string&lt;'de, T, D&gt;(deserializer: D) -&gt; Result&lt;Vec&lt;T&gt;, D::Error&gt;\n    where T: ::serde::Deserialize&lt;'de&gt;, D: ::serde::Deserializer&lt;'de&gt; {\n\n    struct Visitor&lt;T&gt;(::std::marker::PhantomData&lt;T&gt;);\n\n    impl&lt;'de, T&gt; ::serde::de::Visitor&lt;'de&gt; for Visitor&lt;T&gt;\n        where T: ::serde::Deserialize&lt;'de&gt; {\n\n        type Value = Vec&lt;T&gt;;\n\n        fn expecting(&amp;self, f: &amp;mut ::std::fmt::Formatter) -&gt; ::std::fmt::Result {\n            write!(f, \"a string or sequence of strings\")\n        }\n\n        fn visit_str&lt;E&gt;(self, v: &amp;str) -&gt; Result&lt;Self::Value, E&gt;\n            where E: ::serde::de::Error {\n\n            let value = {\n                // Try parsing as a newtype\n                let deserializer = StringNewTypeStructDeserializer(v, ::std::marker::PhantomData);\n                ::serde::Deserialize::deserialize(deserializer)\n            }.or_else(|_: E| {\n                // Try parsing as a str\n                let deserializer = ::serde::de::IntoDeserializer::into_deserializer(v);\n                ::serde::Deserialize::deserialize(deserializer)\n            })?;\n            Ok(vec![value])\n        }\n\n        fn visit_seq&lt;A&gt;(self, visitor: A) -&gt; Result&lt;Self::Value, A::Error&gt;\n            where A: ::serde::de::SeqAccess&lt;'de&gt; {\n\n            ::serde::Deserialize::deserialize(::serde::de::value::SeqAccessDeserializer::new(visitor))\n        }\n    }\n\n    deserializer.deserialize_any(Visitor(::std::marker::PhantomData))\n}\n\n// Tries to deserialize the given string as a newtype\nstruct StringNewTypeStructDeserializer&lt;'a, E&gt;(&amp;'a str, ::std::marker::PhantomData&lt;E&gt;);\n\nimpl&lt;'de, 'a, E&gt; ::serde::Deserializer&lt;'de&gt; for StringNewTypeStructDeserializer&lt;'a, E&gt; where E: ::serde::de::Error {\n    type Error = E;\n\n    fn deserialize_any&lt;V&gt;(self, visitor: V) -&gt; Result&lt;V::Value, Self::Error&gt; where V: ::serde::de::Visitor&lt;'de&gt; {\n        visitor.visit_newtype_struct(self)\n    }\n\n    fn deserialize_string&lt;V&gt;(self, visitor: V) -&gt; Result&lt;V::Value, Self::Error&gt; where V: ::serde::de::Visitor&lt;'de&gt; {\n        // Called by newtype visitor\n        visitor.visit_str(self.0)\n    }\n\n    forward_to_deserialize_any! {\n        bool i8 i16 i32 i64 u8 u16 u32 u64 f32 f64 char str bytes\n        byte_buf option unit unit_struct newtype_struct seq tuple tuple_struct map\n        struct enum identifier ignored_any\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 0, "creation_date": 1493205131, "post_id": 43627388, "comment_id": 74312850, "body": "This does not deserialize <code>SomeStringNewType(String)</code> or <code>SomeTypeWithCustomDeserializeFromStr(String)</code> as the question requires."}, {"owner": {"reputation": 2253, "user_id": 758165, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e2e5143987ca2e61441c572ca9129488?s=128&d=identicon&r=PG", "display_name": "Pit", "link": "https://stackoverflow.com/users/758165/pit"}, "reply_to_user": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 1, "creation_date": 1493227513, "post_id": 43627388, "comment_id": 74329857, "body": "Sorry -- my understanding was that <code>SomeStringNewType</code> was some form of workaround because you couldn&#39;t get it to work with <code>String</code>. If you don&#39;t mind, I would still keep this answer around because at least I came across this question because I searched for its title. I have updated the answer to specify that this is for the general form of wanting a simple <code>String</code>."}, {"owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 1, "creation_date": 1493247298, "post_id": 43627388, "comment_id": 74340053, "body": "Yes yes, your answer is good for the case where the user wants to deserialize String directly. No reason to delete it."}], "tags": [], "owner": {"reputation": 2253, "user_id": 758165, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e2e5143987ca2e61441c572ca9129488?s=128&d=identicon&r=PG", "display_name": "Pit", "link": "https://stackoverflow.com/users/758165/pit"}, "is_accepted": false, "score": 4, "last_activity_date": 1493227496, "last_edit_date": 1493227496, "creation_date": 1493190878, "answer_id": 43627388, "question_id": 41151080, "link": "https://stackoverflow.com/questions/41151080/deserialize-a-json-string-or-array-of-strings-into-a-vec/43627388#43627388", "title": "Deserialize a JSON string or array of strings into a Vec", "body": "<p>In case you want to deserialize a single string or a list of strings into the more general <code>Vec&lt;String&gt;</code> instead of a custom type, the following is a simpler solution for Serde 1.0:</p>\n\n<pre><code>extern crate serde;\n#[macro_use] extern crate serde_derive;\nextern crate serde_json;\n\nuse std::fmt;\nuse std::marker::PhantomData;\n\nuse serde::de;\nuse serde::de::{Deserialize, Deserializer};\n\n#[derive(Deserialize, Debug, Clone)]\npub struct Parent {\n    #[serde(deserialize_with = \"string_or_seq_string\")]\n    pub strings: Vec&lt;String&gt;,\n}\n\nfn main() {\n    let list_of_strings: Parent = serde_json::from_str(r#\"{ \"strings\": [\"value1\", \"value2\"] }\"#).unwrap();\n    println!(\"list of strings: {:?}\", list_of_strings);\n    // Prints:\n    //   list of strings: Parent { strings: [\"value1\", \"value2\"] }\n\n    let single_string: Parent = serde_json::from_str(r#\"{ \"strings\": \"value\" }\"#).unwrap();\n    println!(\"single string: {:?}\", single_string);\n    // Prints:\n    //   single string: Parent { strings: [\"value\"] }\n}\n\nfn string_or_seq_string&lt;'de, D&gt;(deserializer: D) -&gt; Result&lt;Vec&lt;String&gt;, D::Error&gt;\n    where D: Deserializer&lt;'de&gt;\n{\n    struct StringOrVec(PhantomData&lt;Vec&lt;String&gt;&gt;);\n\n    impl&lt;'de&gt; de::Visitor&lt;'de&gt; for StringOrVec {\n        type Value = Vec&lt;String&gt;;\n\n        fn expecting(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n            formatter.write_str(\"string or list of strings\")\n        }\n\n        fn visit_str&lt;E&gt;(self, value: &amp;str) -&gt; Result&lt;Self::Value, E&gt;\n            where E: de::Error\n        {\n            Ok(vec![value.to_owned()])\n        }\n\n        fn visit_seq&lt;S&gt;(self, visitor: S) -&gt; Result&lt;Self::Value, S::Error&gt;\n            where S: de::SeqAccess&lt;'de&gt;\n        {\n            Deserialize::deserialize(de::value::SeqAccessDeserializer::new(visitor))\n        }\n    }\n\n    deserializer.deserialize_any(StringOrVec(PhantomData))\n}\n</code></pre>\n\n<p>This solution also works under the 0.9 release of Serde with the following changes:</p>\n\n<ul>\n<li>remove the lifetimes</li>\n<li><code>SeqAccess</code> -> <code>SeqVisitor</code></li>\n<li><code>SeqAccessDeserializer</code> -> <code>SeqVisitorDeserializer</code></li>\n<li><code>MapAccess</code> -> <code>MapVisitor</code></li>\n<li><code>MapAccessDeserializer</code> -> <code>MapVisitorDeserializer</code></li>\n</ul>\n"}], "owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5172, "favorite_count": 2, "accepted_answer_id": 41151081, "answer_count": 2, "score": 8, "last_activity_date": 1493227496, "creation_date": 1481745229, "last_edit_date": 1481745649, "question_id": 41151080, "link": "https://stackoverflow.com/questions/41151080/deserialize-a-json-string-or-array-of-strings-into-a-vec", "title": "Deserialize a JSON string or array of strings into a Vec", "body": "<p>I'm writing a crate that interfaces with a JSON web API. One endpoint usually returns responses of the form <code>{ \"key\": [\"value1\", \"value2\"] }</code>, but sometimes there's only one value for the key, and the endpoint returns <code>{ \"key\": \"value\" }</code> instead of <code>{ \"key\": [\"value\"] }</code></p>\n\n<p>I wanted to write something generic for this that I could use with <code>#[serde(deserialize_with)]</code> like so:</p>\n\n<pre><code>#[derive(Deserialize)]\nstruct SomeStruct {\n    #[serde(deserialize_with = \"deserialize_string_or_seq_string\")]\n    field1: Vec&lt;SomeStringNewType&gt;,\n\n    #[serde(deserialize_with = \"deserialize_string_or_seq_string\")]\n    field2: Vec&lt;SomeTypeWithCustomDeserializeFromStr&gt;,\n}\n\n#[derive(Deserialize)]\nstruct SomeStringNewType(String);\n\nstruct SomeTypeWithCustomDeserializeFromStr(String);\nimpl ::serde::de::Deserialize for SomeTypeWithCustomDeserializeFromStr {\n    // Some custom implementation here\n}\n</code></pre>\n\n<p>How can I write a <code>deserialize_string_or_seq_string</code> to be able to do this?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "is_accepted": true, "score": 1, "last_activity_date": 1481897493, "last_edit_date": 1481897493, "creation_date": 1481805526, "answer_id": 41164393, "question_id": 41150495, "link": "https://stackoverflow.com/questions/41150495/workspace-giving-two-different-behaviors-in-rust/41164393#41164393", "title": "Workspace giving two different behaviors in Rust", "body": "<p>After confirming it on latest stable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>~$ rustc --version &amp;&amp; cargo --version\nrustc 1.13.0 (2c6933acc 2016-11-07)\ncargo 0.13.0-nightly (eca9e15 2016-11-01)\n</code></pre>\n\n<p>It <a href=\"https://users.rust-lang.org/t/workspace-giving-two-different-behaviors-in-rust/8385/3\" rel=\"nofollow noreferrer\">seems to be a bug</a>:</p>\n\n<blockquote>\n  <p>All members of workspace should share the same target directory no\n  matter what!</p>\n</blockquote>\n\n<p>A <a href=\"https://github.com/rust-lang/cargo/issues/3407\" rel=\"nofollow noreferrer\">bug report was submitted</a>, and it is solved now.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 79, "favorite_count": 0, "accepted_answer_id": 41164393, "answer_count": 1, "score": 2, "last_activity_date": 1481897493, "creation_date": 1481743182, "last_edit_date": 1481744006, "question_id": 41150495, "link": "https://stackoverflow.com/questions/41150495/workspace-giving-two-different-behaviors-in-rust", "title": "Workspace giving two different behaviors in Rust", "body": "<p>I am learning about Cargo workspaces and have set up the following structure:</p>\n\n<p>Top-level:</p>\n\n<pre><code>[package]\nname = \"workspacer\"\nversion = \"0.1.0\"\nauthors = [\"ustulation &lt;zzzzzz@gmail.com&gt;\"]\n\n[workspace]\nmembers = [\"safe_core\", \"safe_authenticator\", \"safe_app\"]\n\n# If this is removed then each of the sub-projects will have thier own Cargo.lock file\n# will build binaries/objects in their own target/ directories. With this present, it's\n# always the parent-projects Cargo.lock and target/ directory used. Need to check if this\n# is standard behaviour or some bug about to be fixed.\n[lib]\ncrate_type = [\"rlib\", \"cdylib\", \"staticlib\"]\n</code></pre>\n\n<p>A lib called <strong>safe_core</strong> which only needs to produce a <code>.rlib</code></p>\n\n<pre><code>[package]\nauthors = [\"ustulation &lt;zzzzzz@gmail.com&gt;\"]\nname = \"safe_core\"\nversion = \"0.1.0\"\n\n[dependencies]\nmaidsafe_utilities = \"~0.10.0\"\n</code></pre>\n\n<p>A lib called <strong>safe_app</strong> which depends on <strong>safe_core</strong> and needs to produce all 3 <code>.rlib</code>, <code>.a</code> and <code>.so</code>:</p>\n\n<pre><code>[package]\nname = \"safe_app\"\nversion = \"0.1.0\"\nauthors = [\"ustulation &lt;zzzzzz@gmail.com&gt;\"]\n\n[dependencies]\nmaidsafe_utilities = \"~0.10.0\"\nsafe_core = { path = \"../safe_core\" }\n\n[lib]\ncrate_type = [\"rlib\", \"cdylib\", \"staticlib\"]\n</code></pre>\n\n<p>A lib called <strong>safe_authenticator</strong> which depends on <strong>safe_core</strong> and needs to produce all 3 <code>.rlib</code>, <code>.a</code> and <code>.so</code>:</p>\n\n<pre><code>[package]\nname = \"safe_authenticator\"\nversion = \"0.1.0\"\nauthors = [\"ustulation &lt;zzzzzz@gmail.com&gt;\"]\n\n[dependencies]\nsafe_core = { path = \"../safe_core\" }\n\n[lib]\ncrate_type = [\"rlib\", \"cdylib\", \"staticlib\"]\n</code></pre>\n\n<p>The tree looks like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>workspacer\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 safe_app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 safe_authenticator\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 lib.rs\n\u2514\u2500\u2500 safe_core\n    \u251c\u2500\u2500 Cargo.toml\n    \u2514\u2500\u2500 src\n        \u2514\u2500\u2500 lib.rs\n</code></pre>\n\n<p>If I go to <code>safe_core</code> and build, it creates a <code>target/</code> folder and <code>Cargo.lock</code> files inside the top level <code>workspacer/</code>, which is good. </p>\n\n<p>If I go to <code>safe_authenticator</code> folder and build that it too uses the same <code>target/</code> and <code>Cargo.lock</code> files and hence does not recompile <code>safe_core</code> which is what I want too. Same with <code>safe_app</code>.</p>\n\n<p>However if I remove the <code>[lib]</code> section from the top-level <code>workspacer/Cargo.toml</code>, each of the sub-projects start creating their own <code>Cargo.lock</code> files and their own <code>/target</code> directories inside their respective sub-directories. I have mentioned this in the inline comment in the <code>Cargo.toml</code> of <code>workspacer</code> above (the 1st snippet above).</p>\n\n<p>Is this an expected behavior or a bug or am I doing something wrong ?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>~$ rustc --version &amp;&amp; cargo --version\nrustc 1.15.0-nightly (ba872f270 2016-11-17)\ncargo 0.15.0-nightly (1877f59 2016-11-16)\n</code></pre>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481729644, "post_id": 41146267, "comment_id": 69495124, "body": "Would returning an associated type <code>B: Borrow&lt;T&gt;</code> work?"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481729791, "post_id": 41146267, "comment_id": 69495219, "body": "@ChrisEmerson I&#39;m not sure what the tradeoffs of doing that would be so I&#39;m unsure. Could you expand on that a bit? This seems like a question that could be generally useful so I&#39;m interested in all answers even if they don&#39;t address my specific situation."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481733565, "post_id": 41146267, "comment_id": 69497826, "body": "I think actually it doesn&#39;t really help directly; you still end up needing something like <code>Cow</code>."}], "answers": [{"comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1481732170, "post_id": 41146942, "comment_id": 69496860, "body": "Thanks for the advice. In simplifying the problem, I misstated my reasons for sometimes wanting to return a <code>&amp;T</code> and other times needing to return a <code>T</code>. If the implementation stores <code>T</code> in an <code>Arc&lt;Refcell&lt;T&gt;&gt;</code> (for example) then it isn&#39;t possible to simply return a <code>&amp;T</code>. <code>T</code> must be cloned and since the clone lives on the function&#39;s stack, you can&#39;t return a reference to it. I hope that&#39;s helpful.   PS. It was great talking to you at RBR :)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1481789579, "post_id": 41146942, "comment_id": 69519666, "body": "Ah! That makes more sense. Well.. I then suggest that your <code>BorrowedOrOwned</code> should be <code>enum Borrow&lt;&#39;a, T&gt; { Ref(&amp;&#39;a T), Arc(Arc&lt;RefCell&lt;T&gt;&gt;), Rc(Rc&lt;RefCell&lt;T&gt;&gt;) }</code> or something along those lines. It&#39;s complicated by the <code>RefCell</code>, since many use cases might not want a <code>RefCell</code> in there, but without knowing more about the use case, I&#39;d guess that would solve it."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1481817469, "post_id": 41146942, "comment_id": 69537051, "body": "Very true. I&#39;ll have to play around with it a bit but I&#39;m going to mark this as the answer since you&#39;ve answered my question about <code>Cow</code> and this has definitely pointed me in the right direction. Thanks"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1485374103, "post_id": 41146942, "comment_id": 70904708, "body": "The term <code>Cow</code> is a bit confusing for new-comers, especially when dealing with read-only return values that you never intend to copy-from or write-to. While I was aware of <code>Cow</code> I was looking for something like <code>MaybeOwned</code>. But seems <code>Cow</code> is used for this too."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 8, "last_activity_date": 1481732146, "last_edit_date": 1481732146, "creation_date": 1481731180, "answer_id": 41146942, "question_id": 41146267, "link": "https://stackoverflow.com/questions/41146267/how-to-abstract-over-a-reference-to-a-value-or-a-value-itself/41146942#41146942", "title": "How to abstract over a reference to a value or a value itself?", "body": "<p>I suggest you use a <code>Cow</code>, since your <code>BorrowedOrOwned</code> has no difference to <code>Cow</code> except that it has fewer convenience methods. Anybody that gets a hold of a <code>BorrowedOrOwned</code> object could match on it and get the owned value or a mutable reference to it. If you want to prevent the confusion of being able to get a mutable reference or the object itself, the solution below applies, too.</p>\n\n<p>For your use case i'd simply stay with <code>&amp;T</code>, since there's no reason to make the API more complex. If a user wants a <code>usize</code>, when <code>T</code> is <code>usize</code>, they can simply dereference the reference.</p>\n\n<p>An owned object only makes sense, if you expect the user to actually process it in an owned fashion. And even then, <code>Cow</code> is meant to abstract over big/heavy objects that you pass by ownership for the purpose of not requiring anyone to <code>clone</code> it. Your use case is the opposite, you want to pass small objects by ownership to prevent users from needing to copy small objects, and instead you are copying it.</p>\n"}], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 494, "favorite_count": 1, "accepted_answer_id": 41146942, "answer_count": 1, "score": 4, "last_activity_date": 1481733573, "creation_date": 1481729247, "last_edit_date": 1481733573, "question_id": 41146267, "link": "https://stackoverflow.com/questions/41146267/how-to-abstract-over-a-reference-to-a-value-or-a-value-itself", "title": "How to abstract over a reference to a value or a value itself?", "body": "<p>I have a trait that defines an interface for objects that can hold a value. The trait has a way of getting the current value:</p>\n\n<pre><code>pub trait HasValue&lt;T&gt; {\n    fn get_current_value(&amp;self) -&gt; &amp;T;\n}\n</code></pre>\n\n<p>This is fine, but I realized that depending on the actual implementation, sometimes it's convenient to return a reference if <code>T</code> is stored in a field, and sometimes it's convenient to return a clone of <code>T</code> if the backing field was being shared across threads (for example). I'm struggling to figure out how to represent this in the trait. I could have something like this:</p>\n\n<pre><code>pub enum BorrowedOrOwned&lt;'a, T: 'a&gt; {\n    Borrowed(&amp;'a T),\n    Owned(T)\n}\n\nimpl&lt;'a, T: 'a&gt; Deref for BorrowedOrOwned&lt;'a, T&gt; {\n    type Target = T;\n\n    fn deref(&amp;self) -&gt; &amp;T {\n        use self::BorrowedOrOwned::*;\n\n        match self {\n            &amp;Borrowed(b) =&gt; b,\n            &amp;Owned(ref o) =&gt; o,\n        }\n    }\n}\n</code></pre>\n\n<p>And change <code>get_current_value()</code> to return a <code>BorrowedOrOwned&lt;T&gt;</code> but I'm not sure that this is idiomatic. <code>BorrowedOrOwned&lt;T&gt;</code> kind of reminds me of <code>Cow&lt;T&gt;</code> but since the point of <code>Cow</code> is to <em>copy-on-write</em> and I will be discarding any writes, that seems semantically wrong. </p>\n\n<p>Is <code>Cow&lt;T&gt;</code> the correct way to abstract over a reference or an owned value? Is there a better way than <code>BorrowedOrOwned&lt;T&gt;</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 806, "user_id": 4373784, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/jY9up.jpg?s=128&g=1", "display_name": "Szymon Roziewski", "link": "https://stackoverflow.com/users/4373784/szymon-roziewski"}, "is_accepted": true, "score": 8, "last_activity_date": 1481720879, "creation_date": 1481720879, "answer_id": 41143449, "question_id": 41143225, "link": "https://stackoverflow.com/questions/41143225/how-to-define-a-hashmap-with-contents-in-1-line-in-rust/41143449#41143449", "title": "How to define a hashmap with contents in 1 line in Rust?", "body": "<p>If you create a macro </p>\n\n<pre><code>macro_rules! hashmap {\n    ($( $key: expr =&gt; $val: expr ),*) =&gt; {{\n         let mut map = ::std::collections::HashMap::new();\n         $( map.insert($key, $val); )*\n         map\n    }}\n}\n</code></pre>\n\n<p>then you call it like following</p>\n\n<pre><code>let map= hashmap![\"key1\" =&gt; \"value1\", \"key2\" =&gt; \"value2\"];\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 1, "creation_date": 1481728744, "post_id": 41143511, "comment_id": 69494582, "body": "It would be better not to use the vector to avoid unnecessary memory allocation. The array works fine with cloneable types: <code>[(&quot;foo&quot;, 0), (&quot;bar&quot;, 1)].iter().cloned().collect()</code>"}, {"owner": {"reputation": 1721, "user_id": 4268862, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/daefd26c4e8c4ad64790330214dd26d1?s=128&d=identicon&r=PG", "display_name": "Lud", "link": "https://stackoverflow.com/users/4268862/lud"}, "reply_to_user": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1481730448, "post_id": 41143511, "comment_id": 69495627, "body": "Yes. It&#39;s corrected."}], "tags": [], "owner": {"reputation": 1721, "user_id": 4268862, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/daefd26c4e8c4ad64790330214dd26d1?s=128&d=identicon&r=PG", "display_name": "Lud", "link": "https://stackoverflow.com/users/4268862/lud"}, "is_accepted": false, "score": 6, "last_activity_date": 1481730364, "last_edit_date": 1481730364, "creation_date": 1481721022, "answer_id": 41143511, "question_id": 41143225, "link": "https://stackoverflow.com/questions/41143225/how-to-define-a-hashmap-with-contents-in-1-line-in-rust/41143511#41143511", "title": "How to define a hashmap with contents in 1 line in Rust?", "body": "<p>One solution is to rely on an array and <code>collect()</code> it into a <code>HashMap</code>:</p>\n\n<pre><code>fn main() {\n    let map: std::collections::HashMap&lt;_, _&gt; = [(\"foo\", 0), (\"bar\", 1)]\n        .iter()\n        .cloned()\n        .collect();\n\n    println!(\"{:?}\", map);\n}\n</code></pre>\n\n<p>It outputs:</p>\n\n<pre><code>{\"foo\": 0, \"bar\": 1}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>collect()</code></a> From the Rust documentation:</p>\n\n<blockquote>\n  <p>Transforms an iterator into a collection.</p>\n  \n  <p>collect() can take anything iterable, and turn it into a relevant\n  collection. This is one of the more powerful methods in the standard\n  library, used in a variety of contexts.</p>\n  \n  <p>The most basic pattern in which collect() is used is to turn one\n  collection into another. You take a collection, call iter() on it, do\n  a bunch of transformations, and then collect() at the end.</p>\n</blockquote>\n"}], "owner": {"reputation": 15070, "user_id": 388427, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/a43a07bc90818154ff9c8d4af7c23502?s=128&d=identicon&r=PG", "display_name": "Sergey", "link": "https://stackoverflow.com/users/388427/sergey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1343, "favorite_count": 0, "closed_date": 1481722344, "accepted_answer_id": 41143449, "answer_count": 2, "score": 4, "last_activity_date": 1481730364, "creation_date": 1481720159, "question_id": 41143225, "link": "https://stackoverflow.com/questions/41143225/how-to-define-a-hashmap-with-contents-in-1-line-in-rust", "closed_reason": "Duplicate", "title": "How to define a hashmap with contents in 1 line in Rust?", "body": "<p>I can use <code>vec![1,2,3]</code> to build a vector.<br>\nCan I build a hashmap in Rust a bit like this:</p>\n\n<pre><code>hashmap![(\"key\", \"value\")]\n</code></pre>\n\n<p>without creating a separate variable and calling <code>.insert()</code> each time?  </p>\n"}, {"tags": ["pointers", "rust", "traits", "ffi"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481719061, "post_id": 41142844, "comment_id": 69488032, "body": "Interesting question; I know that Rust references are fat, but I don&#39;t know whether pointers are (I assume they have to be?)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481722577, "post_id": 41142844, "comment_id": 69490365, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>. Think about when you were searching for answers to these questions (<b>you did search, right?</b>). Would <i>you</i> have clicked on a question titled &quot;pointer to trait&quot; for any of these bullet points? SO isn&#39;t about answering <i>your</i> question, it&#39;s about building a world-class knowledge base for <b>everyone</b> to refer to in the future. I guarantee if you had asked questions separately, at least one of them would have been answered already."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1481724086, "last_edit_date": 1481724086, "creation_date": 1481720199, "answer_id": 41143243, "question_id": 41142844, "link": "https://stackoverflow.com/questions/41142844/pointer-to-trait/41143243#41143243", "title": "Pointer to trait", "body": "<p>Pointers and references behave exactly the same, except for the borrow-checker which forbids you to have dangling references and the fact that you need to wrap pointer dereferencing into an <code>unsafe</code> block.</p>\n\n<ol>\n<li>So yes, <code>sizeof::&lt;*mut Read&gt;() == sizeof::&lt;*mut ()&gt;() * 2</code>. The trait object isn't allocated anywhere. It's nothing more than a struct with two fields. One that is a pointer that points to your data, and one that is a pointer that points to the vtable. The vtable is allocated in the static memory.</li>\n<li>Correct. It accesses the vtable pointer of <code>reader</code> and looks up the <code>drop</code> impl in the vtable.</li>\n<li>If you didn't have a <code>'static</code> lifetime, your <code>T</code> might contain references with lifetimes shorter than <code>'static</code>. All that lifetime bound says is that <code>T</code> doesn't have such references and may thus be copied anywhere without restrictions, even on the heap.</li>\n</ol>\n"}], "owner": {"reputation": 1913, "user_id": 275196, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/2c20425d4619585036e00049e4f325d6?s=128&d=identicon&r=PG", "display_name": "moatPylon", "link": "https://stackoverflow.com/users/275196/moatpylon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1479, "favorite_count": 0, "accepted_answer_id": 41143243, "answer_count": 1, "score": 3, "last_activity_date": 1481724086, "creation_date": 1481718933, "last_edit_date": 1481722402, "question_id": 41142844, "link": "https://stackoverflow.com/questions/41142844/pointer-to-trait", "title": "Pointer to trait", "body": "<p>When I started learning Rust, I naively assumed Rust's pointers to traits were implemented just like a C++ pointer to a base class, and wrote some code that worked even under that assumption. Specifically, the code I wrote interfaced with an FFI library that needed to read and seek a stream, and it was something like this:</p>\n\n<pre><code>struct StreamParts {\n    reader: *mut Read,\n    seeker: *mut Seek,\n}\n\nfn new_ffi_object&lt;T: Read + Seek + 'static&gt;(stream: T) -&gt; FFIObject {\n    let stream_ptr   = Box::into_raw(Box::new(stream));\n    let stream_parts = Box::into_raw(Box::new(StreamParts {\n        reader: stream_ptr as *mut Read,\n        seeker: stream_ptr as *mut Seek,\n    }));\n\n    ffi_library::new_object(stream_parts, ffi_read, ffi_seek, ffi_close)\n}\n\nextern \"C\" fn ffi_read(stream_parts: *mut StreamParts, ...) -&gt; c_ulong {\n    (*stream_parts.reader).read(...)\n    ...\n}\n\nextern \"C\" fn ffi_seek(stream_parts: *mut StreamParts, ...) -&gt; c_ulong {\n    (*stream_parts.seeker).seek(...)\n    ...\n}\n\nextern \"C\" fn ffi_close(stream_parts: *mut StreamParts) {\n    mem::drop(Box::from_raw(stream_parts.reader));\n    mem::drop(Box::from_raw(stream_parts));\n}\n</code></pre>\n\n<p>And it worked. However, there are three things I don't fully understand about why it works:</p>\n\n<ol>\n<li>Rust's trait objects are fat, containing two pointers. Thus, unlike C++, <code>*mut Read</code> is a pointer to a trait object, correct? And where is this trait object allocated? The Rust docs don't touch on this specific case.</li>\n<li>Am I correct to assume that <code>mem::drop(Box::from_raw(stream_parts.reader))</code> fully drops the original stream?</li>\n<li>Why is the <code>'static</code> needed in <code>new_ffi_object()</code>?</li>\n</ol>\n"}, {"tags": ["floating-point", "rust", "precision"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 4, "creation_date": 1481707989, "post_id": 41138599, "comment_id": 69481196, "body": "What do you want to happen if the <code>f64</code> is integral but out of range of <code>i64</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481722828, "post_id": 41138599, "comment_id": 69490542, "body": "@ChrisEmerson in this case, Java appears to round <code>1e100</code> to <code>9223372036854775807</code>."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481709428, "post_id": 41139453, "comment_id": 69482111, "body": "It seems you would need a way to obtain the lower and upper limits of the contiguous range of integral values that fits into a <code>f64</code> to be able to either clamp or raise an exception. Otherwise, because of undefined behavior, you cannot actually check the conversion. Maybe the language should expose <a href=\"http://stackoverflow.com/questions/3793838/which-is-the-first-integer-that-an-ieee-754-float-is-incapable-of-representing-e\">those</a>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481709958, "post_id": 41139453, "comment_id": 69482448, "body": "I agree, in the general case.  But there&#39;s probably a limit below those which makes sense for any (ok, most) given application."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481710136, "post_id": 41139453, "comment_id": 69482555, "body": "Given that we are talking about 2&lt;sup&gt;53&lt;/sup&gt;, yep, there&#39;s probably a good limit!"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 9, "last_activity_date": 1481708973, "creation_date": 1481708973, "answer_id": 41139453, "question_id": 41138599, "link": "https://stackoverflow.com/questions/41138599/rounding-a-f64-to-nearest-i64-in-rust/41139453#41139453", "title": "Rounding a f64 to nearest i64 in Rust", "body": "<p>From <a href=\"https://doc.rust-lang.org/book/casting-between-types.html\" rel=\"noreferrer\">the book</a>, conversions from floating point to integer types round towards zero, so rounding first is nearly correct: <code>f.round() as i64</code>.</p>\n\n<p>However, it's also currently undefined behaviour (but this is <a href=\"https://github.com/rust-lang/rust/issues/10184\" rel=\"noreferrer\">a bug</a>) if the <code>f64</code> is out of range (huge magnitude) of <code>i64</code>.  Therefore you should clamp the value first (or possibly better, raise an error or assert).  The possibly obvious answer doesn't work:</p>\n\n<pre><code>f.max(std::i64::MIN as f64).min(std::i64::MAX as f64).round() as i64\n</code></pre>\n\n<p>because the conversions of <code>i64::MAX</code> to <code>f64</code> aren't exact, and applying the above to <code>1e100</code> ends up with a large negative value (in my test; as mentioned it's actually undefined).</p>\n\n<p>The best option seems to be to return an error of some if the floating point value is out of the reasonable range your application expects.</p>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 7, "last_activity_date": 1481710739, "creation_date": 1481710739, "answer_id": 41140068, "question_id": 41138599, "link": "https://stackoverflow.com/questions/41138599/rounding-a-f64-to-nearest-i64-in-rust/41140068#41140068", "title": "Rounding a f64 to nearest i64 in Rust", "body": "<p>You can use the <a href=\"https://crates.io/crates/conv\" rel=\"noreferrer\"><code>conv</code></a> crate for this:</p>\n\n<pre><code>use conv::prelude::*;\n\nlet x = 9_223_371_487_098_961_920i64 as f64;\nprintln!(\"{:?}\", x.approx_as_by::&lt;i64, RoundToNearest&gt;());\n// Ok(9223371487098962944)\n\nlet x = 9_223_372_036_854_775_807i64 as f64;\nprintln!(\"{:?}\", x.approx_as_by::&lt;i64, RoundToNearest&gt;());\n// Err(FloatError::PosOverflow(..))\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1481711876, "creation_date": 1481711876, "answer_id": 41140479, "question_id": 41138599, "link": "https://stackoverflow.com/questions/41138599/rounding-a-f64-to-nearest-i64-in-rust/41140479#41140479", "title": "Rounding a f64 to nearest i64 in Rust", "body": "<p>Here is a simple \"back of the envelope\" implementation:</p>\n\n<pre><code>const INTEGRAL_LIMIT: f64 = 9007199254740992.0;\n\n#[derive(Debug, PartialEq, Eq)]\nenum Error {\n    NaN,\n    Overflow,\n    Underflow,\n}\n\nfn try_from(f: f64) -&gt; Result&lt;i64, Error&gt; {\n    let f = f.round();\n\n    if f.is_nan() { return Err(Error::NaN); }\n\n    if f &lt; -INTEGRAL_LIMIT { return Err(Error::Underflow); }\n    if f &gt; INTEGRAL_LIMIT { return Err(Error::Overflow); }\n\n    Ok(f as i64)\n}\n</code></pre>\n\n<p>And it comes with a minimal test suite which passes:</p>\n\n<pre><code>fn main() {\n    assert_eq!(try_from(std::f64::NAN), Err(Error::NaN));\n\n    assert_eq!(try_from(std::f64::NEG_INFINITY), Err(Error::Underflow));\n    assert_eq!(try_from(-9007199254740994.0), Err(Error::Underflow));\n\n    assert_eq!(try_from( 9007199254740994.0), Err(Error::Overflow));\n    assert_eq!(try_from(std::f64::INFINITY), Err(Error::Overflow));\n\n    assert_eq!(try_from(-INTEGRAL_LIMIT), Ok(-9007199254740992));\n    assert_eq!(try_from( INTEGRAL_LIMIT), Ok( 9007199254740992));\n}\n</code></pre>\n\n<p>I was actually expecting a <code>TryFrom</code> implementation to be available, but found none.</p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2683, "favorite_count": 1, "accepted_answer_id": 41139453, "answer_count": 3, "score": 7, "last_activity_date": 1481722698, "creation_date": 1481706398, "last_edit_date": 1481722698, "question_id": 41138599, "link": "https://stackoverflow.com/questions/41138599/rounding-a-f64-to-nearest-i64-in-rust", "title": "Rounding a f64 to nearest i64 in Rust", "body": "<p>Rust's <code>f64</code> type provides the function <code>round()</code>, which rounds to the nearest integer, but it returns a <code>f64</code>. Java's <code>Math.round(double)</code>, on the other hand, returns a <code>long</code>. I can call <code>round()</code> and then cast to <code>i64</code>, but will this guarantee that I get the correct result? Here, \"correct\" means getting the closest <code>i64</code> \u2014 Java's <code>round()</code> returns the \"closest long\".</p>\n"}, {"tags": ["rust", "ffi", "lifetime-scoping"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481663458, "post_id": 41130447, "comment_id": 69465342, "body": "Please produce a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> when asking questions. The code as presented fails with 7 errors of undefined items. It&#39;s also possible you can make it more <b>M</b> while making it <b>C</b>."}], "answers": [{"comments": [{"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1481663824, "post_id": 41130670, "comment_id": 69465528, "body": "Aha I tried that but got it slightly wrong! Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1481664010, "post_id": 41130670, "comment_id": 69465631, "body": "@Timmmm note that the choice of <code>&amp;mut self</code> for <code>create_object</code> means that you can&#39;t create a second object though, as it looks like <code>Context</code> is still mutably borrowed and/or you couldn&#39;t mutate it a second time as there&#39;s still a immutable borrow to it; not sure if that&#39;s going to mesh with your expectations."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1481664652, "post_id": 41130670, "comment_id": 69465965, "body": "Ah that explains the second problem I was having. Is there a way to remove the <code>mut</code>-ness while still having the function take <code>&amp;mut self</code>? Something like <code>context: self as &amp;Context,</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1481664994, "post_id": 41130670, "comment_id": 69466133, "body": "@Timmmm it depends a lot on what the underlying code does... Does the <code>Object</code> actually have a pointer to something in the <code>Context</code>? What happens if the <code>Context</code> is moved? What about multithreaded concerns - does the underlying code handle that? Why do you have it as <code>&amp;mut self</code> to start with?"}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1481709634, "post_id": 41130670, "comment_id": 69482249, "body": "<code>Object</code> doesn&#39;t have an explicit pointer to <code>Context</code> but there might be an internal one (haven&#39;t checked yet). If <code>Context</code> is moved everything is fine because I haven&#39;t derived <code>Clone</code> or <code>Copy</code>. And raw pointers aren&#39;t <code>Send</code> so nothing can be moved across threads. At least that is my newbie-level understanding."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1481663870, "last_edit_date": 1481663870, "creation_date": 1481663750, "answer_id": 41130670, "question_id": 41130447, "link": "https://stackoverflow.com/questions/41130447/restricting-object-lifetimes-in-rust/41130670#41130670", "title": "Restricting object lifetimes in Rust", "body": "<p>Yes, just use normal lifetimes:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Context(u8);\n\nimpl Context {\n    fn new() -&gt; Context {\n        Context(0)\n    }\n\n    fn create_object(&amp;mut self) -&gt; Object {\n        Object {\n            context: self,\n            raw_object: 1,\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct Object&lt;'a&gt; {\n    context: &amp;'a Context,\n    raw_object: u8,\n}\n\nfn main() {\n    let mut ctx = Context::new();\n    let ob = ctx.create_object();\n    drop(ctx);\n\n    println!(\"{:?}\", ob);\n}\n</code></pre>\n\n<p>This will fail with </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0505]: cannot move out of `ctx` because it is borrowed\n  --&gt; src/main.rs:26:10\n   |\n25 |     let ob = ctx.create_object();\n   |              --- borrow of `ctx` occurs here\n26 |     drop(ctx);\n   |          ^^^ move out of `ctx` occurs here\n</code></pre>\n\n<p>Sometimes people like to use <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\"><code>PhantomData</code></a>, but I'm not sure I see the benefit here:</p>\n\n<pre><code>fn create_object(&amp;mut self) -&gt; Object {\n    Object {\n        marker: PhantomData,\n        raw_object: 1,\n    }\n}\n\n#[derive(Debug)]\nstruct Object&lt;'a&gt; {\n    marker: PhantomData&lt;&amp;'a ()&gt;,\n    raw_object: u8,\n}\n</code></pre>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 310, "favorite_count": 0, "accepted_answer_id": 41130670, "answer_count": 1, "score": 3, "last_activity_date": 1481663870, "creation_date": 1481662798, "question_id": 41130447, "link": "https://stackoverflow.com/questions/41130447/restricting-object-lifetimes-in-rust", "title": "Restricting object lifetimes in Rust", "body": "<p>I'm wrapping a C library, and it has a standard sort of context object:</p>\n\n<pre><code>library_context* context = library_create_context();\n</code></pre>\n\n<p>And then using that you can create more objects:</p>\n\n<pre><code>library_object* object = library_create_object(context);\n</code></pre>\n\n<p>And destroy them both:</p>\n\n<pre><code>library_destroy_object(object);\nlibrary_destroy_context(context);\n</code></pre>\n\n<p>So I've wrapped this up in Rust structs:</p>\n\n<pre><code>struct Context {\n    raw_context: *mut library_context,\n}\n\nimpl Context {\n    fn new() -&gt; Context {\n        Context {\n            raw_context: unsafe { library_create_context() },\n        }\n    }\n\n    fn create_object(&amp;mut self) -&gt; Object {\n        Object {\n            raw_object: unsafe { library_create_object(self.raw_context) },\n        }\n    }\n}\n\nimpl Drop for Context {\n    fn drop(&amp;mut self) {\n        unsafe {\n            library_context_destroy(self.raw_context);\n        }\n    }\n}\n\nstruct Object {\n    raw_object: *mut library_object,\n}\n\nimpl Drop for Object {\n    fn drop(&amp;mut self) {\n        unsafe {\n            library_object_destroy(self.raw_object);\n        }\n    }\n}\n</code></pre>\n\n<p>So now I can do this, and it seems to work:</p>\n\n<pre><code>fn main() {\n    let mut ctx = Context::new();\n    let ob = ctx.create_object();\n}\n</code></pre>\n\n<p>However, I can also do this:</p>\n\n<pre><code>fn main() {\n    let mut ctx = Context::new();\n    let ob = ctx.create_object();\n    drop(ctx);\n\n    do_something_with(ob);\n}\n</code></pre>\n\n<p>I.e. the library context is destroyed before the objects it creates are.</p>\n\n<p>Can I somehow use Rust's lifetime system to prevent the above code from compiling?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 4, "creation_date": 1481656411, "post_id": 41128816, "comment_id": 69461490, "body": "There was a great article on this not too long ago actually: <a href=\"https://mgattozzi.com/posts/russian-dolls.html\" rel=\"nofollow noreferrer\">mgattozzi.com/posts/russian-dolls.html</a>"}, {"owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1481656469, "post_id": 41128816, "comment_id": 69461514, "body": "Thanks! I check it out!"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1481657933, "post_id": 41128816, "comment_id": 69462292, "body": "I use <code>try!()</code> macro"}, {"owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "edited": false, "score": 0, "creation_date": 1481658080, "post_id": 41128816, "comment_id": 69462372, "body": "both <code>try!()</code> (and <code>?</code>-operator) have early returns on <code>Err</code>, i don&#39;t want that."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1481658713, "post_id": 41128816, "comment_id": 69462743, "body": "I&#39;m trying to reproduce, what is <code>Json</code> referring to? <code>serialize::json</code>? or serde?"}, {"owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "edited": false, "score": 0, "creation_date": 1481658794, "post_id": 41128816, "comment_id": 69462789, "body": "<code>rustc_serialize::json</code>. i did&#39;t dare try the modern stuff :)"}], "answers": [{"comments": [{"owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "edited": false, "score": 0, "creation_date": 1481736657, "post_id": 41129287, "comment_id": 69499744, "body": "<code>Into::into</code> is a nice touch. Is there a &quot;free&quot; function like that to get a ref? <code>String</code> -&gt; <code>&amp;String</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "edited": false, "score": 0, "creation_date": 1481741142, "post_id": 41129287, "comment_id": 69502041, "body": "@MartinAlgesten I think you are looking for <a href=\"https://doc.rust-lang.org/std/convert/trait.AsRef.html\" rel=\"nofollow noreferrer\"><code>AsRef::as_ref</code></a>, but it may not work in the case you want. You can&#39;t map an <code>Option&lt;String&gt;</code> to <code>Option&lt;&amp;str&gt;</code>, for example, because it would be taking a reference to something that would then be dropped. There is <code>Option::as_ref</code> though."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1520260831, "last_edit_date": 1520260831, "creation_date": 1481658157, "answer_id": 41129287, "question_id": 41128816, "link": "https://stackoverflow.com/questions/41128816/is-there-a-way-to-chain-result-mapping-and-unwrapping/41129287#41129287", "title": "Is there a way to chain Result mapping and unwrapping?", "body": "<blockquote>\n  <p>Is there such a mechanism in Rust?</p>\n</blockquote>\n\n<p>Yes \u2014 although not all in one shot like you've presented. Let's review your theoretical signature:</p>\n\n<pre><code>impl&lt;T, E&gt; Result&lt;T, E&gt; {\n    fn map_unwrap&lt;F, U, D&gt;(&amp;self, op: F) -&gt; Result&lt;U, D&gt;\n    where\n        F: FnOnce(T) -&gt; Result&lt;U, D&gt;,\n    {}\n}\n</code></pre>\n\n<p>This cannot work - assume that we start with an <code>Err</code> variant - how would this code know how to convert from <code>E</code> to <code>D</code>? Additionally, <code>&amp;self</code> isn't appropriate for functions that want to convert types; those usually take <code>self</code>.</p>\n\n<p>There are two components that you will need to combine:</p>\n\n<ol>\n<li><p><a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then\" rel=\"nofollow noreferrer\"><code>Result::and_then</code></a></p>\n\n<pre><code>impl&lt;T, E&gt; Result&lt;T, E&gt; {\n    fn and_then&lt;U, F&gt;(self, op: F) -&gt; Result&lt;U, E&gt;\n    where\n        F: FnOnce(T) -&gt; Result&lt;U, E&gt;,\n    {}\n}\n</code></pre></li>\n<li><p><a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err\" rel=\"nofollow noreferrer\"><code>Result::map_err</code></a></p>\n\n<pre><code>impl&lt;T, E&gt; Result&lt;T, E&gt; {\n    fn map_err&lt;F, O&gt;(self, op: O) -&gt; Result&lt;T, F&gt;\n    where\n        O: FnOnce(E) -&gt; F,\n    {}\n}\n</code></pre></li>\n</ol>\n\n<p>Then you will need a type that can represent both error types. I'll be lazy and use <code>Box&lt;Error&gt;</code></p>\n\n<p>Combined together, you need something like:</p>\n\n<pre><code>use std::env;\nuse std::fs::File;\nuse std::error::Error;\n\nfn main() {\n    let conf = env::var(\"CONF\")\n        .map_err(|e| Box::new(e) as Box&lt;Error&gt;)\n        .and_then(|f| File::open(f).map_err(|e| Box::new(e) as Box&lt;Error&gt;));\n}\n</code></pre>\n\n<p>Now each call converts the error value to a shared type, and the result is chainable with <code>and_then</code>. Presumably, your real code would create an error type that is suited to your problem, and then you would use that in the <code>map_err</code> call. I'd <a href=\"https://stackoverflow.com/q/29812530/155423\">implement <code>From</code></a>, then you can have just:</p>\n\n<pre><code>let conf: Result&lt;_, Box&lt;Error&gt;&gt; = env::var(\"CONF\")\n    .map_err(Into::into)\n    .and_then(|f| File::open(f).map_err(Into::into));\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "edited": false, "score": 0, "creation_date": 1481736713, "post_id": 41131543, "comment_id": 69499779, "body": "A macro is certainly a way. Thanks!"}], "tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": false, "score": 5, "last_activity_date": 1481667581, "last_edit_date": 1495541636, "creation_date": 1481667581, "answer_id": 41131543, "question_id": 41128816, "link": "https://stackoverflow.com/questions/41128816/is-there-a-way-to-chain-result-mapping-and-unwrapping/41131543#41131543", "title": "Is there a way to chain Result mapping and unwrapping?", "body": "<p>If you actually want to ignore the results as you are doing with <code>if let</code> you can use a macro like this:</p>\n\n<pre><code>macro_rules! iflet {\n    ([$p:pat = $e:expr] $($rest:tt)*) =&gt; {\n        if let $p = $e {\n            iflet!($($rest)*);\n        }\n    };\n    ($b:block) =&gt; {\n        $b\n    };\n}\n\n\nfn main() {\n    iflet!([Ok(file) = env::var(\"CONF\")]\n           [Ok(mut reader) = File::open(&amp;file)]\n           [Ok(conf) = Json::from_reader(&amp;mut reader)] {\n        // do something with conf\n    });\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Aenv%3B%0Ause%20std%3A%3Afs%3A%3AFile%3B%0A%0Amacro_rules!%20iflet%20%7B%0A%20%20%20%20(%5B%24p%3Apat%20%3D%20%24e%3Aexpr%5D%20%24(%24rest%3Att)*)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20if%20let%20%24p%20%3D%20%24e%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20iflet!(%24(%24rest)*)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20(%24b%3Ablock)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%24b%0A%20%20%20%20%7D%3B%0A%7D%0A%0A%0Afn%20main()%20%7B%0A%20%20%20%20iflet!(%5BOk(file)%20%3D%20env%3A%3Avar(%22CONF%22)%5D%0A%20%20%20%20%20%20%20%20%20%20%20%5BOk(mut%20reader)%20%3D%20File%3A%3Aopen(%26file)%5D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20do%20something%20with%20reader%0A%20%20%20%20%7D)%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground (without Json part)</a></p>\n\n<p>The macro is originally from <a href=\"https://stackoverflow.com/questions/40986141/how-to-group-option-assignments-in-rust/40987097#40987097\">an answer I made to a similar question on <code>Option</code>s</a>, but it works with any <code>if let</code>. Though, with <code>Result</code> you often want to use the <code>Err</code> in some way, so I would usually lean towards <a href=\"https://stackoverflow.com/a/41129287/3347227\">the approach explained by Shepmaster</a> or <code>?</code>/<code>try!</code>.</p>\n"}], "owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2767, "favorite_count": 1, "accepted_answer_id": 41129287, "answer_count": 2, "score": 10, "last_activity_date": 1612200907, "creation_date": 1481656325, "last_edit_date": 1481671652, "question_id": 41128816, "link": "https://stackoverflow.com/questions/41128816/is-there-a-way-to-chain-result-mapping-and-unwrapping", "title": "Is there a way to chain Result mapping and unwrapping?", "body": "<p>I have this code.</p>\n\n<pre><code>if let Ok(file) = env::var(\"CONF\") {\n    if let Ok(mut reader) = fs::File::open(&amp;file) {\n        if let Ok(conf) = Json::from_reader(&amp;mut reader) {\n            // do something with conf\n        }\n    }\n}\n</code></pre>\n\n<p>I'm trying to make it less like a festive holiday tree and was thinking about chaining. Notice that each step in this chain produces another <code>Result</code>, so clearly this won't work (we get <code>Result</code> in <code>Result</code>).</p>\n\n<pre><code>let conf = env::var(\"CONF\")\n    .map(fs::File::open)\n    .map(Json::from_reader);\n\n// do something with conf\n</code></pre>\n\n<p>Also my error types differ for each step, which means I can't just replace <code>.map</code> with <code>.and_then</code>.</p>\n\n<p>I think I'm looking for something that is similar to JavaScript's promises. That is, a promise returned from inside a promise unwraps the inner promise. The signature should probably be along the lines of:</p>\n\n<pre><code>impl&lt;T, E&gt; Result&lt;T, E&gt; {\n    fn map_unwrap&lt;F, U, D&gt;(&amp;self, op: F) -&gt; Result&lt;U, D&gt;\n        where F: FnOnce(T) -&gt; Result&lt;U, D&gt;\n}\n</code></pre>\n\n<p>Is there such a mechanism in Rust? Is there another way to get rid of my festive holiday tree?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "edited": false, "score": 0, "creation_date": 1481644971, "post_id": 41125161, "comment_id": 69454742, "body": "Hmmm - thanks, so if I write <code>use std::io::util::copy;</code> is it imported through <code>mod.rs</code>, perhaps my problem is with not understanding how imports are resolved."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "edited": false, "score": 2, "creation_date": 1481645668, "post_id": 41125161, "comment_id": 69455184, "body": "@opensourcegeek You should probably head back to The Book on <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html#multiple-file-crates\" rel=\"nofollow noreferrer\">multiple file crates</a>."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1481644128, "creation_date": 1481644128, "answer_id": 41125161, "question_id": 41125006, "link": "https://stackoverflow.com/questions/41125006/understanding-a-specific-usage-of-the-super-keyword-in-rust/41125161#41125161", "title": "Understanding a specific usage of the &quot;super&quot; keyword in Rust", "body": "<p>The source for the function <a href=\"https://doc.rust-lang.org/nightly/src/std/io/util.rs.html#46-61\" rel=\"nofollow noreferrer\"><code>copy</code></a> is located in the <a href=\"https://doc.rust-lang.org/nightly/src/std/io/util.rs.html\" rel=\"nofollow noreferrer\"><code>util</code></a> module that is imported by <a href=\"https://github.com/rust-lang/rust/tree/master/src/libstd/io\" rel=\"nofollow noreferrer\"><code>io</code></a>'s module file, <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/io/mod.rs\" rel=\"nofollow noreferrer\"><code>mod.rs</code></a>. Since <code>DEFAULT_BUF_SIZE</code> is <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/io/mod.rs#L293\" rel=\"nofollow noreferrer\">defined</a> in <code>mod.rs</code>, you need to access it via <code>super</code> from <code>util.rs</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1481644138, "creation_date": 1481644138, "answer_id": 41125163, "question_id": 41125006, "link": "https://stackoverflow.com/questions/41125006/understanding-a-specific-usage-of-the-super-keyword-in-rust/41125163#41125163", "title": "Understanding a specific usage of the &quot;super&quot; keyword in Rust", "body": "<p>I think you just missed a definition, if you check out <a href=\"https://github.com/rust-lang/rust/blob/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6/src/libstd/io/mod.rs#287\" rel=\"nofollow noreferrer\"><code>std/io/mod.rs</code></a> you'll see:</p>\n\n<pre><code>const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n</code></pre>\n\n<p>That's all.</p>\n"}], "owner": {"reputation": 4229, "user_id": 327702, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/FEzyr.jpg?s=128&g=1", "display_name": "opensourcegeek", "link": "https://stackoverflow.com/users/327702/opensourcegeek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 630, "favorite_count": 0, "accepted_answer_id": 41125161, "answer_count": 2, "score": 1, "last_activity_date": 1518268938, "creation_date": 1481643631, "last_edit_date": 1518268938, "question_id": 41125006, "link": "https://stackoverflow.com/questions/41125006/understanding-a-specific-usage-of-the-super-keyword-in-rust", "title": "Understanding a specific usage of the &quot;super&quot; keyword in Rust", "body": "<p>I understand that <code>super</code> lets you access the \"parent\" scope, but I stumbled upon this code from <a href=\"https://github.com/rust-lang/rust/blob/b1363a73ede57ae595f3a1be2bb75d308ba4f7f6/src/libstd/io/util.rs#L49\" rel=\"nofollow noreferrer\"><code>std::io</code></a> and I'm not sure how it works.</p>\n\n<pre><code>pub fn copy&lt;R: ?Sized, W: ?Sized&gt;(reader: &amp;mut R, writer: &amp;mut W) -&gt; io::Result&lt;u64&gt;\n    where R: Read, W: Write\n{\n    let mut buf = [0; super::DEFAULT_BUF_SIZE];\n    let mut written = 0;\n    loop {\n        let len = match reader.read(&amp;mut buf) {\n            Ok(0) =&gt; return Ok(written),\n            Ok(len) =&gt; len,\n            Err(ref e) if e.kind() == ErrorKind::Interrupted =&gt; continue,\n            Err(e) =&gt; return Err(e),\n        };\n        writer.write_all(&amp;buf[..len])?;\n        written += len as u64;\n    }\n}\n</code></pre>\n\n<p>How does it access <code>super::DEFAULT_BUF_SIZE</code>? I can see it is declared in <code>sys_common::io</code>, but I can't see how this module can be the <code>util</code> module's parent though.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1481626088, "post_id": 41118824, "comment_id": 69442091, "body": "<code>Some(val) =&gt; &amp;mut val,</code> here, <code>val</code> is a local variable, so we can&#39;t return a reference to it. Can you explain more about what you want to do?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1481628905, "post_id": 41118824, "comment_id": 69443848, "body": "It is absolutely unclear what you are asking. Could you rephrase your question? Right now it sounds like: &quot;this program doesn&#39;t compile, please help&quot;. What are you actually trying to achieve?"}], "answers": [{"comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 1233, "user_id": 3977812, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cb3f865af885e77ac4d07b8d617a9a0?s=128&d=identicon&r=PG&f=1", "display_name": "Harald Hoyer", "link": "https://stackoverflow.com/users/3977812/harald-hoyer"}, "edited": false, "score": 0, "creation_date": 1481638121, "post_id": 41120368, "comment_id": 69449895, "body": "You may want to take a look at the <code>Deref</code> trait. If you implement it for your wrapper struct, you could get all methods from <code>HashMap</code> for free."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 1233, "user_id": 3977812, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cb3f865af885e77ac4d07b8d617a9a0?s=128&d=identicon&r=PG&f=1", "display_name": "Harald Hoyer", "link": "https://stackoverflow.com/users/3977812/harald-hoyer"}, "edited": false, "score": 0, "creation_date": 1481638889, "post_id": 41120368, "comment_id": 69450457, "body": "(you even get the nice square bracket syntax for indexing)"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 5, "last_activity_date": 1481630395, "last_edit_date": 1481630395, "creation_date": 1481629600, "answer_id": 41120368, "question_id": 41118824, "link": "https://stackoverflow.com/questions/41118824/how-to-implement-index-over-a-wrapped-hashmap/41120368#41120368", "title": "How to implement Index over a wrapped HashMap?", "body": "<p>Since your question is pretty unclear, I will reinterpret it as follows:</p>\n\n<blockquote>\n  <p>I am trying to implement <code>Index</code> for my struct, but somehow it doesn't work.</p>\n</blockquote>\n\n<h3>The errors</h3>\n\n<p>After looking at the compiler errors, it became clear that your implementation of <code>Index</code> is wrong for many reasons:</p>\n\n<ol>\n<li>The <code>Index</code> trait defines a function called <code>index</code>, which returns an <em>immutable</em> reference to the value. However, you are trying to return a <em>mutable</em> reference. Of course, Rust complains that the method you are implementing is incompatible with the trait.</li>\n<li>The <code>Output</code> associated type of your <code>Index</code> implementation should not be wrapped in a reference. Therefore, instead of <code>type Output = &amp;'a mut Value;</code> you need <code>type Output = Value;</code></li>\n<li>The lifetimes of <code>key</code> and the output in the <code>index</code> function are unrelated, but you use <code>'a</code> for both.</li>\n<li>You need to make the <code>Value</code> type public in order to use it in a trait implementation.</li>\n</ol>\n\n<h3>The code</h3>\n\n<p>A correct and simple implementation of <code>Index</code> would be:</p>\n\n<pre><code>impl&lt;'a&gt; Index&lt;&amp;'a str&gt; for HMShadow {\n    type Output = Value;\n\n    fn index(&amp;self, key: &amp;'a str) -&gt; &amp;Value {\n        &amp;self.hashmap[key]\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1233, "user_id": 3977812, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cb3f865af885e77ac4d07b8d617a9a0?s=128&d=identicon&r=PG&f=1", "display_name": "Harald Hoyer", "link": "https://stackoverflow.com/users/3977812/harald-hoyer"}, "is_accepted": false, "score": 2, "last_activity_date": 1481631485, "creation_date": 1481631485, "answer_id": 41120946, "question_id": 41118824, "link": "https://stackoverflow.com/questions/41118824/how-to-implement-index-over-a-wrapped-hashmap/41120946#41120946", "title": "How to implement Index over a wrapped HashMap?", "body": "<p>I guess, I was looking for</p>\n\n<pre><code>#[cfg(test)]\nimpl&lt;'a&gt; IndexMut&lt;&amp;'a str&gt; for HMShadow {\n    fn index_mut&lt;'b&gt;(&amp;'b mut self, key: &amp;'a str) -&gt; &amp;'b mut Value {\n        self.hashmap.get_mut(key).expect(\"no entry found for key\")\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1233, "user_id": 3977812, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5cb3f865af885e77ac4d07b8d617a9a0?s=128&d=identicon&r=PG&f=1", "display_name": "Harald Hoyer", "link": "https://stackoverflow.com/users/3977812/harald-hoyer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 445, "favorite_count": 0, "accepted_answer_id": 41120368, "answer_count": 2, "score": 1, "last_activity_date": 1481632271, "creation_date": 1481624947, "last_edit_date": 1481632271, "question_id": 41118824, "link": "https://stackoverflow.com/questions/41118824/how-to-implement-index-over-a-wrapped-hashmap", "title": "How to implement Index over a wrapped HashMap?", "body": "<p>I would like to implement the Index trait for a wrapper type over the HashMap type:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::option::Option;\n\n#[cfg(test)]\nuse std::ops::Index;\n\n#[derive(Debug, Clone)]\nstruct Value {\n    val: i32,\n}\n\n#[derive(Debug, Clone)]\npub struct HMShadow {\n    hashmap: HashMap&lt;String, Value&gt;,\n}\n\nimpl HMShadow {\n    fn new() -&gt; HMShadow {\n        HMShadow {\n            hashmap: {\n                HashMap::&lt;String, Value&gt;::new()\n            },\n        }\n    }\n\n    fn insert&lt;S&gt;(&amp;mut self, key: S, element: Value) -&gt; Option&lt;Value&gt;\n        where S: Into&lt;String&gt;\n    {\n        self.hashmap.insert(key.into(), element)\n    }\n\n    fn get(&amp;mut self, key: &amp;str) -&gt; &amp;mut Value {\n        self.hashmap.get_mut(key).expect(\"no entry found for key\")\n    }\n}\n\nfn main()\n{\n    let mut s: HMShadow = HMShadow::new();\n    let v: Value = Value { val : 5 };\n    let _ = s.insert(\"test\", v);\n    println!(\"{:?}\", s);\n    println!(\"Get: {}\", s.get(\"test\").val);\n}\n\n#[cfg(test)]\nimpl&lt;'a&gt; Index&lt;&amp;'a str&gt; for HMShadow {\n    type Output = &amp;'a mut Value;\n\n    fn index(&amp;self, key: &amp;'a str) -&gt; &amp;&amp;'a mut Value {\n        match self.hashmap.get_mut(key) {\n            Some(val) =&gt; &amp;mut val,\n            _ =&gt; panic!(\"no entry found for key\"),\n        }\n    }\n}\n\n#[cfg(test)]\n#[test]\nfn test_index() {\n    let mut s: HMShadow = HMShadow::new();\n    let v: Value = Value { val : 5 };\n    let _ = s.insert(\"test\", v);\n    println!(\"{:?}\", s);\n    println!(\"Index: {}\", s[\"test\"].val);\n}\n</code></pre>\n\n<p>Doing <code>rustc --test tt.rs</code> the compiler says:</p>\n\n<blockquote>\n<pre><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; tt.rs:51:28\n   |\n51 |         match self.hashmap.get_mut(key) {\n   |                            ^^^^^^^\n   |\nhelp: consider using an explicit lifetime parameter as shown: fn index(&amp;'a self, key: &amp;'a str) -&gt; &amp;&amp;'a mut Value\n  --&gt; tt.rs:50:5\n   |\n50 |     fn index(&amp;self, key: &amp;'a str) -&gt; &amp;&amp;'a mut Value {\n   |     ^\n</code></pre>\n</blockquote>\n\n<p>But I cannot do <code>fn index(&amp;'a self, key: &amp;'a str) -&gt; &amp;&amp;'a mut Value</code> because the Index trait does not allow <code>&amp;'a self</code> and the compiler errors: </p>\n\n<blockquote>\n  <p>error[E0308]: method not compatible with trait</p>\n</blockquote>\n"}, {"tags": ["multidimensional-array", "rust", "unsafe"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 3, "last_activity_date": 1481652703, "last_edit_date": 1481652703, "creation_date": 1481593809, "answer_id": 41112548, "question_id": 41112399, "link": "https://stackoverflow.com/questions/41112399/whats-the-best-way-to-convert-a-t-4-3-into-a-t-12/41112548#41112548", "title": "What&#39;s the best way to convert a [[T; 4]; 3] into a [T; 12]?", "body": "<p>Disclaimer: I am not really great with Rust's low-level side of things yet, I don't know what is considered \"good practice\" in low-level Rust. The advice given here may not be good ideas. I'm putting them here though because... well, they work.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=9502d97aae27320e39fd739467249e01&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">You could transmute them</a>. The problem is that it'll be a copy, the documentation says it's the equivalent of a <code>memcpy</code> call. This isn't what you wanted, but here it is anyway:</p>\n\n<pre><code>fn main() {\n    let a: [[u8; 4]; 3] = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]];\n    let b: [u8; 12] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n    println!(\"a: {:?}\", a);\n    println!(\"b: {:?}\", b);\n\n    let c = unsafe { std::mem::transmute::&lt;[[u8; 4]; 3], [u8; 12]&gt;(a) };\n\n    println!(\"c: {:?}\", c);\n}\n</code></pre>\n\n<p>Your other option <a href=\"https://play.rust-lang.org/?gist=d3a0844f2657139736b448cdf8243de0&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">is to work with a raw pointer</a>:</p>\n\n<pre><code>fn main() {\n    let a: [[u8; 4]; 3] = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]];\n    let b: [u8; 12] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n    println!(\"a: {:?}\", a);\n    println!(\"b: {:?}\", b);\n\n    let c = &amp;a as *const _ as *const [u8; 12];\n    // Or it can be this: let c = &amp;mut a as *mut [[u8; 4]; 3];\n\n    for i in 0..12 {\n        let p = c as *const u8;\n        let v = unsafe { *p.offset(i) };\n        println!(\"{}\", v);\n    }\n}\n</code></pre>\n\n<p>which isn't particularly great either.</p>\n\n<p>The pointer can also be a pointer or mutable pointer to the same type (since <code>&amp;mut T</code> can be cast to <code>*mut T</code>), and the above code works exactly the same (with <code>a</code> marked mutable):</p>\n\n<pre><code>let c = &amp;mut a as *mut [[u8; 4]; 3];\n</code></pre>\n\n<p>I do wonder whether this is a bit of an XY-Problem though. Maybe the way you're working with your data can be altered to not require this?</p>\n"}, {"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1481595284, "post_id": 41112703, "comment_id": 69429856, "body": "Just to clarify: This does a bit-for-bit copy if <i>the reference itself</i> and not the contents of the array? I wasn&#39;t sure."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 3, "creation_date": 1481599095, "post_id": 41112703, "comment_id": 69430740, "body": "@Simon: If you transmute a <i>reference</i> to the array, then only the reference is copied. If you transmute the <i>array</i> directly (as you did in your answer), then the whole array is copied. However, the compiler might elide the copy depending on what you do with the value and on how you compile the code (debug or release)."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1481600478, "post_id": 41112703, "comment_id": 69431020, "body": "Great no problem. I will leave my answer anyway as a point of reference for myself in future. Thanks for clarifying :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1481595020, "creation_date": 1481595020, "answer_id": 41112703, "question_id": 41112399, "link": "https://stackoverflow.com/questions/41112399/whats-the-best-way-to-convert-a-t-4-3-into-a-t-12/41112703#41112703", "title": "What&#39;s the best way to convert a [[T; 4]; 3] into a [T; 12]?", "body": "<p>Yes, you can convert a reference to a <code>[[T; 4]; 3]</code> into a reference to a <code>[T; 12]</code>, but only with unsafe code, using <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\"><code>mem::transmute</code></a>. It's best to wrap this in a function so that the resulting reference is assigned the proper lifetime, as otherwise <code>transmute</code> would make it possible to obtain a reference with a larger lifetime than the reference should have.</p>\n\n<pre><code>fn convert&lt;'a&gt;(a: &amp;'a [[u8; 4]; 3]) -&gt; &amp;'a [u8; 12] {\n    unsafe { std::mem::transmute(a) }\n}\n</code></pre>\n\n<p>This can be shortened thanks to the lifetime elision rules:</p>\n\n<pre><code>fn convert(a: &amp;[[u8; 4]; 3]) -&gt; &amp;[u8; 12] {\n    unsafe { std::mem::transmute(a) }\n}\n</code></pre>\n\n<p>Though when dealing with unsafe code, I'd understand if you preferred the more explicit version!</p>\n"}], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 146, "favorite_count": 1, "accepted_answer_id": 41112703, "answer_count": 2, "score": 6, "last_activity_date": 1481652703, "creation_date": 1481592636, "question_id": 41112399, "link": "https://stackoverflow.com/questions/41112399/whats-the-best-way-to-convert-a-t-4-3-into-a-t-12", "title": "What&#39;s the best way to convert a [[T; 4]; 3] into a [T; 12]?", "body": "<p>As I understand it, a <code>[[T; 4]; 3]</code> and a <code>[T; 12]</code> have the same layout in memory. What is the best way to convert a value between these types? Can I convert a reference to one into a reference to the other? Can I avoid copying all the elements? Do I need <code>unsafe</code>?</p>\n"}, {"tags": ["rust", "micro-optimization", "llvm-codegen"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1481549880, "post_id": 41101936, "comment_id": 69408296, "body": "It&#39;s not quite clear to me what you mean by &quot;standard&quot; integer arithmetic. For example, in Release mode, an add is a <code>wrapping_add</code> by default, as rustc does not check for underflow/overflow in Release unless you specifically ask for it."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481550729, "post_id": 41101936, "comment_id": 69408832, "body": "Clarified what I mean by <i>standard</i> operations."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481550034, "post_id": 41102125, "comment_id": 69408394, "body": "<i>that&#39;s not asm</i> \u2014 I feel like I&#39;ve see assembly get optimized by LLVM as well; I think there are cases where it&#39;s acceptable for this to happen."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481550121, "post_id": 41102125, "comment_id": 69408448, "body": "oh didn&#39;t know that, well... all bets are off no matter what in that case. Optimizing compilers don&#39;t know what you want, thus they optimize for some fitness"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1481551201, "post_id": 41102125, "comment_id": 69409155, "body": "Does this mean that release mode wont panic on integer overflow, or add checks which would make it slower then the same C expression - under any circumstances? I wasn&#39;t sure of this because, for eg - wrapping_shl is documented to be panic free, and doesn&#39;t mention release mode."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1481553956, "post_id": 41102125, "comment_id": 69410854, "body": "you won&#39;t get additional panics. It will be slower than the same C expression only depending on other code, because llvm can&#39;t optimize as extremely because that would introduce undefined behaviour. The operations themselves will be on par with C."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1481549835, "last_edit_date": 1481549835, "creation_date": 1481549778, "answer_id": 41102125, "question_id": 41101936, "link": "https://stackoverflow.com/questions/41101936/which-integer-operations-have-higher-performance-alternate-methods-in-rust/41102125#41102125", "title": "Which integer operations have higher performance alternate methods in Rust?", "body": "<p>Rust gives no guarantees as to the speed of its operations. If you want guarantees, you need to call into assembler.</p>\n\n<p>That said, currently Rust forwards to LLVM, so you can just call the intrinsics, which map 1:1 to LLVM intrinsics and use those guarantees. Still, whatever you do that's not asm, be aware that the optimizer might have a different opinion of what you consider optimal, and thus unoptimize your manual calls to LLVM intrinsics.</p>\n\n<p>That said, Rust strives to be as fast as possible, so you can assume (or simply look at the standard library's implementation) that all operations that have an LLVM intrinsic that does the same will map to that LLVM intrinsic and thus be as fast as LLVM can do it.</p>\n\n<p>There is no general rule as to which operation is the fastest for a given basic arithmetic operation, since it totally depends on your use case.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1481550418, "post_id": 41102180, "comment_id": 69408632, "body": "Is it possible LLVM optimizes code into SIMD, like it does for clang? - <a href=\"http://llvm.org/docs/Vectorizers.html\" rel=\"nofollow noreferrer\">llvm.org/docs/Vectorizers.html</a>"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 2, "creation_date": 1481550520, "post_id": 41102180, "comment_id": 69408705, "body": "Sure! It certainly is."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 1, "creation_date": 1481551585, "post_id": 41102180, "comment_id": 69409381, "body": "Even though I mention pixel processing, this answer ignores there are some pixel processing operations that don&#39;t translate into SIMD. So while helpful, there is still the case when you&#39;d want to perform fast integer maths - that can&#39;t be solved by using SIMD."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1481550902, "last_edit_date": 1495540427, "creation_date": 1481549933, "answer_id": 41102180, "question_id": 41101936, "link": "https://stackoverflow.com/questions/41101936/which-integer-operations-have-higher-performance-alternate-methods-in-rust/41102180#41102180", "title": "Which integer operations have higher performance alternate methods in Rust?", "body": "<blockquote>\n  <p>think pixel processing</p>\n</blockquote>\n\n<p>Then you shouldn't be thinking single-valued operations at all; you want to use SIMD instructions instead. These are currently not available in stable Rust, but some are accessible through feature-gated functions and all are available through assembly.</p>\n\n<blockquote>\n  <p>Is it possible LLVM optimizes code into SIMD, like it does for clang?</p>\n</blockquote>\n\n<p>As <a href=\"https://stackoverflow.com/questions/41101936/which-integer-operations-have-higher-performance-alternate-methods-in-rust/41102180?noredirect=1#comment69408705_41102180\">aochagavia already replied</a>, yes, LLVM will autovectorize certain types of code. However, when you demand the highest performance, you don't usually want to leave yourself at the whims of the optimizer. I tend to hope for autovectorization in my normal run-of-the-mill code, then write the straight-line code for my heavy-math kernels, then write SIMD code and test for correctness and benchmark for speed.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 7, "last_activity_date": 1566409442, "last_edit_date": 1566409442, "creation_date": 1481553720, "answer_id": 41103338, "question_id": 41101936, "link": "https://stackoverflow.com/questions/41101936/which-integer-operations-have-higher-performance-alternate-methods-in-rust/41103338#41103338", "title": "Which integer operations have higher performance alternate methods in Rust?", "body": "<blockquote>\n  <p>Of the standard operations (add / subtract / multiply / modulo / divide / shift / bit manipulation...), which operations have higher performance alternatives which aren't used by default?</p>\n</blockquote>\n\n<p>Note that Rust was designed for performance; as a result, while integer operations are checked in <em>Debug</em>, they are defined to <em>wrap</em> in <em>Release</em> unless you specifically instruct the compiler otherwise.</p>\n\n<p>As a result, in release mode with default options, there is <strong>strictly</strong> no performance difference between:</p>\n\n<ul>\n<li><code>+</code> and <code>wrapping_add</code></li>\n<li><code>-</code> and <code>wrapping_sub</code></li>\n<li><code>*</code> and <code>wrapping_mul</code></li>\n<li><code>/</code> and <code>wrapping_div</code></li>\n<li><code>%</code> and <code>wrapping_rem</code></li>\n<li><code>&lt;&lt;</code> and <code>wrapping_shl</code></li>\n<li><code>&gt;&gt;</code> and <code>wrapping_shr</code></li>\n</ul>\n\n<p>For unsigned integers, the performance is thus strictly like that of C or C++; for signed integers, however, the optimizer might yield different results since underflow/overflow on signed integers is undefined behavior in C and C++ (gcc and Clang accept a <code>-fwrapv</code> flag to mandate wrapping even for signed integers, but it's not the default).</p>\n\n<p>I expect that using the <code>checked_*</code>, <code>overflow_*</code> and <code>saturating_*</code> methods will however be slower in general.</p>\n\n<hr>\n\n<p>An interesting tangent, then, is to understand what happens when you flip the switch and explicitly require checked arithmetic.</p>\n\n<p>Currently, the Rust implementation<sup>1</sup> is a <em>precise</em> implementation of underflow/overflow checking. Each addition, subtraction, multiplication, ... is checked independently, and the optimizer is not good at fusing those branches.</p>\n\n<p>Specifically, a <em>precise</em> implementation precludes temporary overflows: <code>5 + x - 5</code> cannot be optimized as <code>x</code>, because <code>5 + x</code> could overflow. It also precludes auto-vectorization in general.</p>\n\n<p>Only when the optimizer can prove the absence of overflow (which it generally cannot) you may hope to regain a branch-free path which is more amenable to optimizations.</p>\n\n<p>One should note that on general software the impact is barely noticeable, as arithmetic instructions represent a small portion of the overall cost. When this proportion rises however, it can be very noticeable, and indeed it shows up in part of the SPEC2006 benchmark with Clang.</p>\n\n<p>This overhead was sufficient to be deemed unsuitable for the checks to be activated by default.</p>\n\n<p><sup>1</sup> <em>This is due to technical limitations on LLVM side; the Rust implementation just delegates to LLVM.</em></p>\n\n<hr>\n\n<p>In the future, there is hope that a <em>fuzzy</em> implementation of the checks would be available. The idea behind a fuzzy implementation is that instead of checking each and every operation, they are just executed and a flag is set or the values are poisoned in case of underflow/overflow. Then, before using the result, a check (branch) is executed.</p>\n\n<p>According to Joe Duffy, they had such an implementation in Midori and the performance impact was barely noticeable, so it seems to be feasible. I am not aware of any effort to have anything similar in LLVM yet, though.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 445, "favorite_count": 0, "answer_count": 3, "score": 8, "last_activity_date": 1566409442, "creation_date": 1481549118, "last_edit_date": 1564862630, "question_id": 41101936, "link": "https://stackoverflow.com/questions/41101936/which-integer-operations-have-higher-performance-alternate-methods-in-rust", "title": "Which integer operations have higher performance alternate methods in Rust?", "body": "<p>When writing integer functions in Rust which will run millions of times (think pixel processing), it's useful to use operations with the highest performance - similar to C/C++.</p>\n\n<p>While the reference manual explains changes in behavior, it's not always clear which methods are higher performance than the standard <sup>(see note 1.)</sup> integer arithmetic operations. I'd assume <code>wrapping_add</code> compiles down to something equivalent to C's addition.</p>\n\n<p>Of the standard operations (add / subtract / multiply / modulo / divide / shift / bit manipulation...), which operations have higher performance alternatives which aren't used by default?</p>\n\n<hr>\n\n<p>Note:</p>\n\n<ol>\n<li>By <em>standard</em>  I mean integer arithmetic using symbols <code>a + b</code>, <code>i / k</code> or <code>c % e</code> ... etc.<br>What you would use when writing math expressions - unless you have a special need for using one of the methods that wraps or returns the overflow.</li>\n<li>I realize answering this question may require some research. So I'm happy to do some checks by looking at resulting assembly to see which operations are using unchecked/primitive operations.</li>\n<li>It may be that the speed difference between checked / unchecked operations isn't significant, if that's the case I'd <em>still</em> like to be able to write a 'fast' version of a function to compare against the 'safe' version, to come to my own conclusion as to whether it's a reasonable choice for a given function.</li>\n<li>Having mentioned pixel-processing, SIMD has come up as a possible solution. Even though this is a good suggestion. That still leaves us with the cases which <strong>can't</strong> be optimized using SIMD, so the general case of fast integer arithmetic is still something to consider.</li>\n</ol>\n"}, {"tags": ["struct", "rust", "default-value"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 8, "last_activity_date": 1481533308, "creation_date": 1481533308, "answer_id": 41097268, "question_id": 41094315, "link": "https://stackoverflow.com/questions/41094315/how-to-declare-a-struct-where-only-some-members-can-use-a-value-from-another-str/41097268#41097268", "title": "How to declare a struct where only some members can use a value from another struct?", "body": "<p>Since your <code>unique_id</code> is supposed to be unique, it should not have a <code>Default</code> constructor. But if you remove the <code>Default</code> impl from a hypothetical <code>UniqueId</code> type, then you won't be able to derive <code>Default</code> for <code>SomeTool</code>.</p>\n\n<p>The currently working solution is to move all fields that don't require a value to a sub-struct and not implement <code>Default</code> for <code>SomeTool</code>. Thus you'd be able to use <code>SomeTool</code> as follows:</p>\n\n<pre><code>new_tool = SomeTool {\n    unique_id: \"tool.foobar\".to_string(),\n    callbacks: Callbacks {\n        exec: Some(foobar_exec),\n        .. Callbacks::default()\n    }\n};\n</code></pre>\n\n<p>There is a hypothetical feature that Rust might get in the future, which allows you to have two structs with the same fields to be the base expression in a struct expression. That feature would allow you to use the sub-struct to initialize all the fields that the sub-struct and <code>SomeTool</code> have in common, but not more.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 656, "favorite_count": 0, "answer_count": 1, "score": 8, "last_activity_date": 1482071924, "creation_date": 1481517649, "last_edit_date": 1482071924, "question_id": 41094315, "link": "https://stackoverflow.com/questions/41094315/how-to-declare-a-struct-where-only-some-members-can-use-a-value-from-another-str", "title": "How to declare a struct where only some members can use a value from another struct?", "body": "<p>Rust has a useful feature where you can use an existing struct and only override some of its members. For example, a value of the following struct</p>\n\n<pre><code>struct SomeTool {\n    pub unique_id: String,\n    pub poll: Option&lt;fn(&amp;Context) -&gt; bool&gt;,\n    pub exec: Option&lt;fn(&amp;mut Context) -&gt; ToolResult&gt;,\n    pub modal: Option&lt;fn(&amp;mut Context) -&gt; ToolResult&gt;,\n    pub ui: Option&lt;fn(&amp;mut UIPanel)&gt;,\n}\n</code></pre>\n\n<p>can be initialized by passing in a struct instance (e.g. <code>SomeTool::default()</code>):</p>\n\n<pre><code>new_tool = SomeTool {\n    unique_id: \"tool.foobar\".to_string(),\n    exec: Some(foobar_exec)\n    .. SomeTool::default()\n};\n</code></pre>\n\n<p>I want to be able to declare <code>SomeTool</code> without having to explicitly list every callback (adding new callbacks in the future may lead to many additions of <code>None</code> all over a codebase).</p>\n\n<p>This works well, but now I could accidentally leave out <code>unique_id</code> for some other initialization, and it would use whatever is in the <code>default</code>.</p>\n\n<p>Is there a way to describe a struct that can have some members overridden but not others?</p>\n\n<hr>\n\n<p>Note that the real world use-case has more members than this (making the chance of accidents higher), just simplified for the question.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1481515725, "creation_date": 1481515725, "answer_id": 41094083, "question_id": 41093945, "link": "https://stackoverflow.com/questions/41093945/macro-with-variable-arguments-of-different-types/41094083#41094083", "title": "macro with variable arguments of different types", "body": "<p>A macro cannot reason about the type of its operands, because macro expansion happens before type resolution.</p>\n\n<p>That doesn't mean there's no solution, though! Indeed, the macro can expand to code whose behavior varies based on the expression's type. How do we do that? With traits, of course! We'll use the <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.From.html\" rel=\"noreferrer\"><code>From</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.Into.html\" rel=\"noreferrer\"><code>Into</code></a> traits from the standard library here, but you can define your own trait if you prefer.</p>\n\n<p>Let's first see how the <code>mod_multi!</code> macro looks like when using traits:</p>\n\n<pre><code>macro_rules! mod_multi {\n    ($($x:expr),*) =&gt; {{\n        let mut children: Vec&lt;MDTree&gt; = Vec::new();\n        $(\n            children.push($x.into());\n        )*\n        MultiNode::new(children)\n    }}\n}\n</code></pre>\n\n<p>The key point here is that the macro doesn't try to figure out the type of <code>$x</code>; it'll be figured out later on by the compiler, and the compiler will dispatch the call to <code>into()</code> based on that type. That does mean that if you pass an unsupported argument to the macro, you'll get compiler errors that might be unclear at first sight.</p>\n\n<p>Now, we need to implement <code>Into</code> in order for both <code>u32</code> and <code>MDTree</code> to be accepted by the macro. <code>Into</code> has a blanket implementation based on the <code>From</code> trait, so we should implement <code>From</code> instead of <code>Into</code>. The standard library already provides <code>impl&lt;T&gt; From&lt;T&gt; for T</code>, so we can already pass an <code>MDTree</code> to the macro. That just leaves <code>u32</code>. The implementation goes like this:</p>\n\n<pre><code>impl From&lt;u32&gt; for MDTree {\n    fn from(value: u32) -&gt; MDTree {\n        mod_single!(value)\n    }\n}\n</code></pre>\n\n<p>And now the macro invocation works as intended!</p>\n"}, {"comments": [{"owner": {"reputation": 1788, "user_id": 2789560, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/46a017cbbb040e568f0e4f6c595f46d1?s=128&d=identicon&r=PG&f=1", "display_name": "Henning Koehler", "link": "https://stackoverflow.com/users/2789560/henning-koehler"}, "edited": false, "score": 0, "creation_date": 1481524488, "post_id": 41094460, "comment_id": 69395225, "body": "Very neat - much more compact and less macro clutter. And for more node types / improved readability you can always add characters as part of the pattern, like <code>mdtree!([1, P[2, 3], D[4, 5])</code> ..."}, {"owner": {"reputation": 1788, "user_id": 2789560, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/46a017cbbb040e568f0e4f6c595f46d1?s=128&d=identicon&r=PG&f=1", "display_name": "Henning Koehler", "link": "https://stackoverflow.com/users/2789560/henning-koehler"}, "edited": false, "score": 0, "creation_date": 1481525695, "post_id": 41094460, "comment_id": 69395627, "body": "Actually, adding <code>P[2,3]</code> and <code>D[4,5]</code> doesn&#39;t seem to work - I&#39;m guessing that&#39;s because they don&#39;t form a single token tree?"}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 1788, "user_id": 2789560, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/46a017cbbb040e568f0e4f6c595f46d1?s=128&d=identicon&r=PG&f=1", "display_name": "Henning Koehler", "link": "https://stackoverflow.com/users/2789560/henning-koehler"}, "edited": false, "score": 1, "creation_date": 1481525801, "post_id": 41094460, "comment_id": 69395665, "body": "Yes, so you have to do <code>[P 2, 3]</code> <code>[D 4, 5]</code> if you want to add identifiers as far as I can tell."}], "tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": false, "score": 6, "last_activity_date": 1481518854, "last_edit_date": 1495542823, "creation_date": 1481518854, "answer_id": 41094460, "question_id": 41093945, "link": "https://stackoverflow.com/questions/41093945/macro-with-variable-arguments-of-different-types/41094460#41094460", "title": "macro with variable arguments of different types", "body": "<p>While <a href=\"https://stackoverflow.com/a/41094083/3347227\">the answer by Francis Gagn\u00e9</a> may be more directly an answer to the question you asked, I just want to highlight the fact that macros also let you build trees like these with quite minimal syntax if you so desire (since you are after all asking about building trees with macros):</p>\n\n<pre><code>#[derive(Debug)]\npub enum MDTree {\n    Single(u32),\n    Prime(Vec&lt;MDTree&gt;),\n    Degenerate(Vec&lt;MDTree&gt;),\n}\n\nmacro_rules! mdtree {\n    ([$($sub:tt),*]) =&gt; {{\n        MDTree::Prime(vec!($(mdtree!($sub),)*))\n    }};\n    ({$($sub:tt),*}) =&gt; {{\n        MDTree::Degenerate(vec!($(mdtree!($sub),)*))\n    }};\n    ($e:expr) =&gt; {\n        MDTree::Single($e)\n    };\n}\n\nfn main() {\n    println!(\"{:?}\", mdtree!([1, [2, 3], {4, 5}]));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=%23%5Bderive(Debug)%5D%0Apub%20enum%20MDTree%20%7B%0A%20%20%20%20Single(u32)%2C%0A%20%20%20%20Prime(Vec%3CMDTree%3E)%2C%0A%20%20%20%20Degenerate(Vec%3CMDTree%3E)%2C%0A%7D%0A%0Amacro_rules!%20mdtree%20%7B%0A%20%20%20%20(%5B%24(%24sub%3Att)%2C*%5D)%20%3D%3E%20%7B%7B%0A%20%20%20%20%20%20%20%20MDTree%3A%3APrime(vec!(%24(mdtree!(%24sub)%2C)*))%0A%20%20%20%20%7D%7D%3B%0A%20%20%20%20(%7B%24(%24sub%3Att)%2C*%7D)%20%3D%3E%20%7B%7B%0A%20%20%20%20%20%20%20%20MDTree%3A%3ADegenerate(vec!(%24(mdtree!(%24sub)%2C)*))%0A%20%20%20%20%7D%7D%3B%0A%20%20%20%20(%24e%3Aexpr)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20MDTree%3A%3ASingle(%24e)%0A%20%20%20%20%7D%3B%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20mdtree!(%5B1%2C%20%5B2%2C%203%5D%2C%20%7B4%2C%205%7D%5D))%3B%0A%7D&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>You can use <code>(</code>, <code>{</code> and <code>[</code> as different variants, but beyond two using some actual identifiers are probably a good idea anyway.</p>\n"}], "owner": {"reputation": 1788, "user_id": 2789560, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/46a017cbbb040e568f0e4f6c595f46d1?s=128&d=identicon&r=PG&f=1", "display_name": "Henning Koehler", "link": "https://stackoverflow.com/users/2789560/henning-koehler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1687, "favorite_count": 0, "accepted_answer_id": 41094083, "answer_count": 2, "score": 6, "last_activity_date": 1481550543, "creation_date": 1481514591, "last_edit_date": 1481550543, "question_id": 41093945, "link": "https://stackoverflow.com/questions/41093945/macro-with-variable-arguments-of-different-types", "title": "macro with variable arguments of different types", "body": "<p>I'm trying to create macros to make is simple to create small instances of a custom tree-type. For this I'd like to specify children either as nodes or integers (without explicitly turning them into a <code>Node</code> type). <a href=\"https://play.rust-lang.org/?gist=5ab07de6ce77a05d2047e45d971e6070&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">My attempt</a> is below, which fails as the type of <code>$x</code> resolves as <code>MDTree</code>, with the message <code>expected enum MDTree, found integral variable</code>.</p>\n\n<pre><code>pub struct MultiNode {\n    children: Vec&lt;MDTree&gt;\n}\nimpl MultiNode {\n    pub fn new(children: Vec&lt;MDTree&gt;) -&gt; Box&lt;MultiNode&gt; {\n        return Box::new(MultiNode { children: children });\n    }\n}\npub enum MDTree {\n    Single(u32),\n    Prime(Box&lt;MultiNode&gt;),\n    Degenerate(Box&lt;MultiNode&gt;),\n}\nmacro_rules! mod_single {\n    ($x:expr) =&gt; { MDTree::Single($x) }\n}\nmacro_rules! mod_multi {\n    ($($x:expr),*) =&gt; {{\n        let mut children: Vec&lt;MDTree&gt; = Vec::new();\n        $(\n            match $x {\n                0...4294967295 =&gt; { children.push(mod_single!($x)); }\n                _ =&gt; { children.push($x); }\n            }\n        )*\n        MultiNode::new(children)\n    }}\n}\nmacro_rules! mod_prime {\n    ($($x:expr),*) =&gt; { MDTree::Prime(mod_multi!($($x),*)) }\n}\nmacro_rules! mod_degen {\n    ($($x:expr),*) =&gt; { MDTree::Degenerate(mod_multi!($($x),*)) }\n}\nfn main() {\n    let md: MDTree = mod_prime!(0, mod_degen!(1,2));\n}\n</code></pre>\n\n<p>Is there any way to fix this without having to write <code>mod_prime!(mod_single(0), mod_degen!(mod_single(1),mod_single(2)))</code> or similar?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481512348, "post_id": 41093530, "comment_id": 69392090, "body": "Works for me. Appears to be a transient network error."}, {"owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481513125, "post_id": 41093530, "comment_id": 69392319, "body": "It&#39;s not a network issue. Something was dodgy in my ~/.cargo/registry"}], "answers": [{"comments": [{"owner": {"reputation": 786, "user_id": 1711917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/669761acbd371e00052f341484161703?s=128&d=identicon&r=PG", "display_name": "mindTree", "link": "https://stackoverflow.com/users/1711917/mindtree"}, "edited": false, "score": 1, "creation_date": 1482060206, "post_id": 41093785, "comment_id": 69614369, "body": "Just ran into this same issue after switching from installing rust via the universal binaries to using rustup. This seems to have fixed the issue for me too."}], "tags": [], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "is_accepted": true, "score": 9, "last_activity_date": 1481513303, "last_edit_date": 1481513303, "creation_date": 1481513255, "answer_id": 41093785, "question_id": 41093530, "link": "https://stackoverflow.com/questions/41093530/cargo-build-results-in-no-match-for-id/41093785#41093785", "title": "Cargo build results in &quot;No match for id&quot;", "body": "<p>I'm not sure what caused the problem - but can attest that it was not a network issue. Removing <code>~/.cargo/registry</code> fixed the issue.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ mv ~/.cargo/registry/ ~/.cargo/registry_\n$ cargo build --verbose\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n Downloading num-traits v0.1.36\n Downloading serde v0.8.19\n Downloading dtoa v0.2.2\n Downloading itoa v0.1.1\n   Compiling itoa v0.1.1\n   Compiling dtoa v0.2.2\n   Compiling num-traits v0.1.36\n   Compiling serde v0.8.19\n     Running `rustc /Users/jem/.cargo/registry/src/github.com-1ecc6299db9ec823/itoa-0.1.1/src/lib.rs --crate-name itoa --crate-type lib -g -C metadata=58ab3e11c7b36cd3 -C extra-filename=-58ab3e11c7b36cd3 --out-dir /Users/jem/t/json/json/target/debug/deps --emit=dep-info,link -L dependency=/Users/jem/t/json/json/target/debug/deps --cap-lints allow`\n     Running `rustc /Users/jem/.cargo/registry/src/github.com-1ecc6299db9ec823/dtoa-0.2.2/src/lib.rs --crate-name dtoa --crate-type lib -g -C metadata=76ebb504ac31c05f -C extra-filename=-76ebb504ac31c05f --out-dir /Users/jem/t/json/json/target/debug/deps --emit=dep-info,link -L dependency=/Users/jem/t/json/json/target/debug/deps --cap-lints allow`\n     Running `rustc /Users/jem/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.1.36/src/lib.rs --crate-name num_traits --crate-type lib -g -C metadata=92bb90166cd1857c -C extra-filename=-92bb90166cd1857c --out-dir /Users/jem/t/json/json/target/debug/deps --emit=dep-info,link -L dependency=/Users/jem/t/json/json/target/debug/deps --cap-lints allow`\n     Running `rustc /Users/jem/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.19/src/lib.rs --crate-name serde --crate-type lib -g --cfg feature=\\\"default\\\" --cfg feature=\\\"std\\\" -C metadata=97f01bf227222121 -C extra-filename=-97f01bf227222121 --out-dir /Users/jem/t/json/json/target/debug/deps --emit=dep-info,link -L dependency=/Users/jem/t/json/json/target/debug/deps --cap-lints allow`\n   Compiling serde_json v0.8.4 (file:///Users/jem/t/json/json)\n     Running `rustc src/lib.rs --crate-name serde_json --crate-type lib -g -C metadata=924ef2e3fa7e5748 --out-dir /Users/jem/t/json/json/target/debug/deps --emit=dep-info,link -L dependency=/Users/jem/t/json/json/target/debug/deps --extern num_traits=/Users/jem/t/json/json/target/debug/deps/libnum_traits-92bb90166cd1857c.rlib --extern serde=/Users/jem/t/json/json/target/debug/deps/libserde-97f01bf227222121.rlib --extern dtoa=/Users/jem/t/json/json/target/debug/deps/libdtoa-76ebb504ac31c05f.rlib --extern itoa=/Users/jem/t/json/json/target/debug/deps/libitoa-58ab3e11c7b36cd3.rlib`\n    Finished debug [unoptimized + debuginfo] target(s) in 8.44 secs\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 161, "user_id": 7302326, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-Zj6109nSs1U/AAAAAAAAAAI/AAAAAAAACmE/9YYNz4nxM24/photo.jpg?sz=128", "display_name": "Charles Schleich", "link": "https://stackoverflow.com/users/7302326/charles-schleich"}, "is_accepted": false, "score": 1, "last_activity_date": 1579791933, "creation_date": 1579791933, "answer_id": 59881524, "question_id": 41093530, "link": "https://stackoverflow.com/questions/41093530/cargo-build-results-in-no-match-for-id/59881524#59881524", "title": "Cargo build results in &quot;No match for id&quot;", "body": "<p>I have been getting the same issue.</p>\n\n<p><code>rm -rf ~/.cargo/registry</code></p>\n\n<p>Clears it up.</p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1013, "favorite_count": 0, "accepted_answer_id": 41093785, "answer_count": 2, "score": 5, "last_activity_date": 1579791933, "creation_date": 1481510985, "last_edit_date": 1481512175, "question_id": 41093530, "link": "https://stackoverflow.com/questions/41093530/cargo-build-results-in-no-match-for-id", "title": "Cargo build results in &quot;No match for id&quot;", "body": "<p>I'm unable to build with cargo today due to a \"no match for id\" error.</p>\n\n<p>What's going on here?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustup default stable\ninfo: using existing install for 'stable-x86_64-apple-darwin'\ninfo: default toolchain set to 'stable-x86_64-apple-darwin'\n\n  stable-x86_64-apple-darwin unchanged - rustc 1.13.0 (2c6933acc 2016-11-07)\n\n$ git clone https://github.com/serde-rs/json\nCloning into 'json'...\nremote: Counting objects: 1755, done.\nremote: Compressing objects: 100% (26/26), done.\nremote: Total 1755 (delta 7), reused 0 (delta 0), pack-reused 1729\nReceiving objects: 100% (1755/1755), 401.86 KiB | 431.00 KiB/s, done.\nResolving deltas: 100% (717/717), done.\nChecking connectivity... done.\n\n$ cd json/json\n$ cargo build --verbose\n    Updating registry `https://github.com/rust-lang/crates.io-index`\nerror: failed to load source for a dependency on `clippy`\n\nCaused by:\n  Unable to update registry https://github.com/rust-lang/crates.io-index\n\nCaused by:\n  failed to fetch `https://github.com/rust-lang/crates.io-index`\n\nCaused by:\n  [9/-3] Object not found - no match for id (aaceb5b4ca9ce0a6e5a02f86cea5635f721d29d8)\n</code></pre>\n"}, {"tags": ["rust", "lazy-evaluation"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481512675, "post_id": 41093304, "comment_id": 69392184, "body": "Please produce a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. It&#39;s very unlikely that someone is going to also create a compiler plugin just to try to reproduce your error. Ideally, make something that can <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">run on the playground</a>. Even better, <a href=\"http://stackoverflow.com/search?q=cannot+move+out+of+captured+outer+variable+in+an+FnMut+closure+is%3Aq\">review the <b>7 other questions with the same error message</b></a> <i>before</i> asking. Then, explain why <i>this question</i> is different from <i>those questions</i>."}, {"owner": {"reputation": 321, "user_id": 6193633, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/f642d3c45da4db031e2d41798d1801a5?s=128&d=identicon&r=PG&f=1", "display_name": "kdy", "link": "https://stackoverflow.com/users/6193633/kdy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481519532, "post_id": 41093304, "comment_id": 69393793, "body": "I decided to do something like <a href=\"http://pybites.blogspot.kr/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow noreferrer\">pybites.blogspot.kr/2011/07/&hellip;</a> because I can&#39;t represent ast with generic and this question becomes useless to me."}, {"owner": {"reputation": 321, "user_id": 6193633, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/f642d3c45da4db031e2d41798d1801a5?s=128&d=identicon&r=PG&f=1", "display_name": "kdy", "link": "https://stackoverflow.com/users/6193633/kdy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481519681, "post_id": 41093304, "comment_id": 69393836, "body": "@Shepmaster This is question about designing, and those questions are about using FnMut. I&#39;m not trying to move value to closure. Instead, I wanted to do something like allowing both FnOnce and FnMut. And I found that this can be done via <a href=\"http://alexcrichton.com/futures-rs/futures/index.html\" rel=\"nofollow noreferrer\">futures-rs</a>"}], "answers": [{"tags": [], "owner": {"reputation": 321, "user_id": 6193633, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/f642d3c45da4db031e2d41798d1801a5?s=128&d=identicon&r=PG&f=1", "display_name": "kdy", "link": "https://stackoverflow.com/users/6193633/kdy"}, "is_accepted": false, "score": 0, "last_activity_date": 1481547751, "last_edit_date": 1481547751, "creation_date": 1481541605, "answer_id": 41099701, "question_id": 41093304, "link": "https://stackoverflow.com/questions/41093304/designing-data-structures-for-a-child-first-lazy-evaluator-which-prints-procedur/41099701#41099701", "title": "Designing data structures for a child-first lazy evaluator which prints procedure", "body": "<p>I don't need this anymore, because I used another apporach. But just to be complete, you can define a trait with <code>(&amp;mut self)</code> and use \n[<code>std::mem::replace</code>][] to get owned value, and <code>Option</code> has a helper method named <code>.take()</code>.</p>\n\n<p>For who wants to build lazy evaluatable engine with compiler plugin, I <a href=\"https://github.com/kdy1997/must/blob/52492d76bcd4c852e7dfb5aa8ed89f80598a82f8/must-assert/src/expand/mod.rs#L119-L160\" rel=\"nofollow noreferrer\">did some more on compile time</a>.</p>\n\n<p>It calls</p>\n\n<pre><code>fn capture&lt;T :?Sized&gt;(&amp;mut self, expr: &amp;'static str, val: &amp;T)\n</code></pre>\n\n<p>from generated code like</p>\n\n<pre><code>ctx.capture(\"f()\", &amp;_var_of_expr)\n</code></pre>\n\n<p>so context can write expression and value with it.</p>\n"}], "owner": {"reputation": 321, "user_id": 6193633, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/f642d3c45da4db031e2d41798d1801a5?s=128&d=identicon&r=PG&f=1", "display_name": "kdy", "link": "https://stackoverflow.com/users/6193633/kdy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 84, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1481547751, "creation_date": 1481508670, "last_edit_date": 1481512480, "question_id": 41093304, "link": "https://stackoverflow.com/questions/41093304/designing-data-structures-for-a-child-first-lazy-evaluator-which-prints-procedur", "title": "Designing data structures for a child-first lazy evaluator which prints procedure", "body": "<p>I'm building a lazy expression evaluator <a href=\"http://doc.pytest.org/en/latest/assert.html#asserting-with-the-assert-statement\" rel=\"nofollow noreferrer\">like Python's</a> using a compiler plugin.</p>\n\n<p>I want to print a log like:</p>\n\n<pre><code>assert ( left == vec![1, 2, 3, 4] )\nassert ( vec![1, 2, 3, 4] == vec![1, 2, 3, 4] );\n</code></pre>\n\n<p>and tried:</p>\n\n<pre><code>// crate rt\npub struct Expr&lt;T, F: FnMut() -&gt; T&gt; {\n    // I noticed that this must be changed to fn with format!() call, to\n    // support updating child.\n    src: &amp;'static str, // holds value\n}\npub trait EvalTo: Display {\n    /// Type of expression\n    type Type;\n\n    /// Returns Some(val) when done\n    /// Accepts &amp;mut self as it might be called many time.\n    fn eval_one_level(&amp;mut self) -&gt; Some&lt;T&gt;;\n}\n\nimpl&lt;T, F&gt; EvalTo for Expr&lt;T, F&gt; {\n    type Type = T;\n}\n/// Prints source before evaluation, (it must be changed)\n/// and value after evaluation.\nimpl&lt;T, F&gt; Display for Expr&lt;T, F&gt; {}\n</code></pre>\n\n<p>with compiler plugin to create them on compile time. But when I do </p>\n\n<pre><code>let left = vec![1, 2, 3, 4];\nlazy_expr!(left == vec![1, 2, 3, 4]);\n</code></pre>\n\n<p>It expands to</p>\n\n<pre><code>::rt::binary({\n   ::rt::Expr::wrap(::rt::Source{ expr: \"left\" }, || Some(left))\n}, { \n   ::rt::Expr::wrap(::rt::Source{ expr: \"vec!(1, 2, 3, 4)\" },\n   || vec![1, 2, 3, 4])\n}).eq()\n</code></pre>\n\n<p>and the compiler doesn't like it. It says <code>cannot move out of captured outer variable in an `FnMut` closure</code>.</p>\n\n<p>So I can't use <code>FnMut</code>, but it needs to be called multiple time, and needs to be able to modify the child expression.</p>\n\n<p>Is there a data structure which allows capturing local variable, but can called multiple times with <code>&amp;mut self</code>? Should I use <code>FnOnce(&amp;mut Context)</code>?</p>\n"}, {"tags": ["indexing", "rust", "fold"], "answers": [{"comments": [{"owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "edited": false, "score": 1, "creation_date": 1481494792, "post_id": 41091685, "comment_id": 69388422, "body": "Beautiful! That&#39;s exactly what I wanted! Thank you."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "edited": false, "score": 0, "creation_date": 1481494885, "post_id": 41091685, "comment_id": 69388444, "body": "Glad I could help! :)"}, {"owner": {"reputation": 1004, "user_id": 4901806, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/Cy6qw.jpg?s=128&g=1", "display_name": "duck", "link": "https://stackoverflow.com/users/4901806/duck"}, "edited": false, "score": 0, "creation_date": 1500220961, "post_id": 41091685, "comment_id": 77230553, "body": "It if use <code>.enumerate()</code> to give me the index in a fold, will it add the arguments after the <code>acc</code> and <code>curr</code> or before ?"}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 24, "last_activity_date": 1481494229, "creation_date": 1481494229, "answer_id": 41091685, "question_id": 41091641, "link": "https://stackoverflow.com/questions/41091641/is-there-a-way-to-fold-with-index-in-rust/41091685#41091685", "title": "Is there a way to fold with index in Rust?", "body": "<p>You can chain it with <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.enumerate\" rel=\"noreferrer\"><code>enumerate</code></a>:</p>\n\n<pre><code>fn main() {\n    let a = [1, 2, 3, 4, 5];\n    let b = a.into_iter().enumerate().fold(0, |s, (i, j)| s + i * j);\n\n    println!(\"{:?}\", b); // Prints 40\n}\n</code></pre>\n"}], "owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1911, "favorite_count": 0, "accepted_answer_id": 41091685, "answer_count": 1, "score": 10, "last_activity_date": 1481497417, "creation_date": 1481493874, "last_edit_date": 1481497417, "question_id": 41091641, "link": "https://stackoverflow.com/questions/41091641/is-there-a-way-to-fold-with-index-in-rust", "title": "Is there a way to fold with index in Rust?", "body": "<p>In Ruby, if I had an array <code>a = [1, 2, 3, 4, 5]</code> and I wanted to get the sum of each element times its index I could do</p>\n\n<pre class=\"lang-rb prettyprint-override\"><code>a.each.with_index.inject(0) {|s,(i,j)| s + i*j}    \n</code></pre>\n\n<p>Is there an idiomatic way to do the same thing in Rust? So far, I have</p>\n\n<pre><code>a.into_iter().fold(0, |x, i| x + i)\n</code></pre>\n\n<p>But that doesn't account for the index, and I can't really figure out a way to get it to account for the index. Is this possible and if so, how?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 7383, "user_id": 303931, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a9e4f07d0a64294640efc6a1a47e9963?s=128&d=identicon&r=PG", "display_name": "RecursivelyIronic", "link": "https://stackoverflow.com/users/303931/recursivelyironic"}, "is_accepted": false, "score": 0, "last_activity_date": 1481497613, "last_edit_date": 1481497613, "creation_date": 1481487325, "answer_id": 41090691, "question_id": 41090572, "link": "https://stackoverflow.com/questions/41090572/expected-reference-found-integral-variable-in-accessing-a-value-from-btreemap/41090691#41090691", "title": "`expected reference, found integral variable` in accessing a value from BTreeMap", "body": "<p>The bug was in what was being <em>passed</em> to <code>[]</code>, though the error highlighted the whole <code>map[0]</code>, suggesting that the error was in the type of the <em>value</em> of <code>map[0]</code> when it was actually in computing the value. The correct implementation needs to pass a reference to <code>[]</code> as follows:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn main() {\n    let mut map: BTreeMap&lt;u64, u64&gt; = BTreeMap::new();\n    map.entry(0).or_insert(0);\n\n    let y = map[&amp;0] + 1;\n    println!(\"{}\", y);\n}\n</code></pre>\n"}], "owner": {"reputation": 7383, "user_id": 303931, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a9e4f07d0a64294640efc6a1a47e9963?s=128&d=identicon&r=PG", "display_name": "RecursivelyIronic", "link": "https://stackoverflow.com/users/303931/recursivelyironic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1400, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1481512903, "creation_date": 1481486631, "last_edit_date": 1481512903, "question_id": 41090572, "link": "https://stackoverflow.com/questions/41090572/expected-reference-found-integral-variable-in-accessing-a-value-from-btreemap", "title": "`expected reference, found integral variable` in accessing a value from BTreeMap", "body": "<p>I'm trying to retrieve a key from a <code>BTreeMap</code> and manipulate it in subsequent code.</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn main() {\n    let mut map: BTreeMap&lt;u64, u64&gt; = BTreeMap::new();\n    map.entry(0).or_insert(0);\n\n    // It seems like this should work:\n    let y = map[0] + 1;  // expected reference, found integral variable\n\n    // Other things I've tried:\n    let value_at_0 = map[0];  // expected reference, found integral variable\n    let ref value_at_0 = map[0];  // expected reference, found integral variable\n    let y = value_at_0 + 1;\n\n    let y = (&amp;map[0]) + 1;  // expected reference, found integral variable\n    let y = (&amp;mut map[0]) + 1;  // binary operation `+` cannot be applied to type `&amp;mut u64`\n    let y = (*map[0]) + 1;  // type `u64` cannot be dereferenced\n    println!(\"{}\", y);\n}\n</code></pre>\n\n<p>The error is particularly confusing, since I would think an integral variable would be <em>precisely</em> the kind of thing you could add <code>1</code> to.</p>\n\n<p>To show what I would like this code to do, here is how this would be implemented in Python:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; map = {}\n&gt;&gt;&gt; map.setdefault(0, 0)\n0\n&gt;&gt;&gt; y = map[0] + 1\n&gt;&gt;&gt; print(y)\n1\n</code></pre>\n\n<p>For SEO purposes, since my Googling failed, the originating error in somewhat more complex code is <code>expected reference, found u64</code></p>\n\n<p>For reference, the full compilation error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; ./map_weirdness.rs:8:15\n  |\n8 |       let y = map[0] + 1;  // expected reference, found integral variable\n  |               ^^^^^^ expected reference, found integral variable\n  |\n  = note: expected type `&amp;u64`\n  = note:    found type `{integer}`\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1315, "user_id": 2619501, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5a2e73ec1d18119524fc602c747b0dfe?s=128&d=identicon&r=PG", "display_name": "benjumanji", "link": "https://stackoverflow.com/users/2619501/benjumanji"}, "edited": false, "score": 0, "creation_date": 1481485270, "post_id": 41090290, "comment_id": 69385462, "body": "I am confusing the size of the array with the size of the type. I guess there aren&#39;t any 64 byte simd types."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 1315, "user_id": 2619501, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5a2e73ec1d18119524fc602c747b0dfe?s=128&d=identicon&r=PG", "display_name": "benjumanji", "link": "https://stackoverflow.com/users/2619501/benjumanji"}, "edited": false, "score": 0, "creation_date": 1481485530, "post_id": 41090290, "comment_id": 69385548, "body": "There&#39;s <a href=\"https://en.m.wikipedia.org/wiki/AVX-512\" rel=\"nofollow noreferrer\">AVX512</a>. Not sure if Rust supports it yet."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481536501, "post_id": 41090290, "comment_id": 69400559, "body": "@ChrisEmerson: Rust doesn&#39;t have SIMD types yet. It&#39;s a big topic of discussions, lots of people are waiting for them (and the instructions that go with them) but there are many different needs/expectations/wants so it&#39;s taking a long time to converge..."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481536746, "post_id": 41090290, "comment_id": 69400701, "body": "@MatthieuM. Yes, I&#39;m following the discussions.  :-)  But there is <a href=\"http://huonw.github.io/blog/2015/08/simd-in-rust/\" rel=\"nofollow noreferrer\">some unstable <code>#[repr(simd)]</code></a> support on nightlies, as far as I am aware."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481537731, "post_id": 41090290, "comment_id": 69401256, "body": "@ChrisEmerson: To be honest, though, I&#39;m not quite clear on the exact effect of applying <code>#[repr(simd)]</code>. Does it somehow use the size as alignment?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1481537864, "post_id": 41090290, "comment_id": 69401330, "body": "@MatthieuM. I think so, but that&#39;s only an assumption; I haven&#39;t checked."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 9, "last_activity_date": 1552652098, "last_edit_date": 1552652098, "creation_date": 1481485022, "answer_id": 41090290, "question_id": 41090078, "link": "https://stackoverflow.com/questions/41090078/align-struct-to-cache-lines-in-rust/41090290#41090290", "title": "Align struct to cache lines in Rust", "body": "<p>No, that wouldn't guarantee that the alignment was a cache line.</p>\n\n<p><a href=\"https://rust-lang.github.io/rfcs/1358-repr-align.html\" rel=\"nofollow noreferrer\">RFC 1358</a> added the concept of <code>#[repr(align)]</code>, allowing the programmer to specify alignment requirements. This attribute was stabilized in <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1250-2018-03-29\" rel=\"nofollow noreferrer\">Rust 1.25</a>.</p>\n\n<p>For your specific case, you'd use it like:</p>\n\n<pre><code>#[repr(align(64))]\nstruct Foo {\n    value: u8,\n}\n</code></pre>\n"}], "owner": {"reputation": 1315, "user_id": 2619501, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5a2e73ec1d18119524fc602c747b0dfe?s=128&d=identicon&r=PG", "display_name": "benjumanji", "link": "https://stackoverflow.com/users/2619501/benjumanji"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 884, "favorite_count": 0, "accepted_answer_id": 41090290, "answer_count": 1, "score": 6, "last_activity_date": 1552652129, "creation_date": 1481483869, "last_edit_date": 1481497508, "question_id": 41090078, "link": "https://stackoverflow.com/questions/41090078/align-struct-to-cache-lines-in-rust", "title": "Align struct to cache lines in Rust", "body": "<p>Assuming I wanted to (ab)use cache coherency to do lock free reads like <a href=\"https://www.usenix.org/system/files/conference/nsdi14/nsdi14-paper-dragojevic.pdf\" rel=\"noreferrer\">FaRM</a>, would it be enough to have a struct with a single 64 byte array as data to guarantee that on an architecture with 64 byte cache lines each struct would occupy exactly one cache line?</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 5, "last_activity_date": 1481544561, "last_edit_date": 1481544561, "creation_date": 1481478897, "answer_id": 41089221, "question_id": 41089016, "link": "https://stackoverflow.com/questions/41089016/how-to-store-a-void-reference-to-a-struct-in-rust/41089221#41089221", "title": "How to store a void* reference to a struct in Rust?", "body": "<p>You can prevent the value from changing address by heap-allocating the object. This will cost a dereference to access it, but it will be stationary:</p>\n\n<pre><code>struct RealThing {\n    // ...\n}\n\nstruct Thing {\n    // pointer could also be a field in RealThing, but it seems to\n    // make more sense to leave only the actual payload there\n    real_thing: Box&lt;RealThing&gt;,\n    pointer_to_real: *mut RealThing,\n}\n\nfn create_thing() -&gt; Thing {\n    let mut a = Thing {\n        real_thing: Box::new(RealThing {}),\n        pointer_to_real: std::ptr::null_mut(),\n    };\n    a.pointer_to_real = a.real_thing.as_mut() as *mut _;\n    a\n}\n\nfn main() {\n    let mut b = create_thing();\n\n    assert_eq!(b.real_thing.as_mut() as *mut _, b.pointer_to_real);\n}\n</code></pre>\n\n<p>Note that you would have the same issue in C++ if you tried to use the address of an object that has been move- or copy-constructed in the meantime.</p>\n\n<p>A word of warning: actually <strong>using</strong> the pointer will lead to undefined behavior unless one takes precautions to prevent the existence of multiple writable references to the same object. The <code>UnsafeCell</code> documentation says:</p>\n\n<blockquote>\n  <p>In general, transmuting an <code>&amp;T</code> type into an <code>&amp;mut T</code> is considered undefined behavior. The compiler makes optimizations based on the knowledge that <code>&amp;T</code> is not mutably aliased or mutated, and that <code>&amp;mut T</code> is unique.</p>\n</blockquote>\n\n<p>It is probably safer to box <code>RefCell&lt;RealThing&gt;</code>, store an immutable pointer to the boxed cell, and convert that back to <code>&amp;mut RealThing</code> by casting the pointer to <code>&amp;RefCell&lt;RealThing&gt;</code> and calling <code>borrow_mut()</code> on the reference. If you then make a mistake, at least Rust will warn you by panicking.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 807, "favorite_count": 1, "accepted_answer_id": 41089221, "answer_count": 1, "score": 3, "last_activity_date": 1481544561, "creation_date": 1481477730, "last_edit_date": 1481497453, "question_id": 41089016, "link": "https://stackoverflow.com/questions/41089016/how-to-store-a-void-reference-to-a-struct-in-rust", "title": "How to store a void* reference to a struct in Rust?", "body": "<p>I'm interacting with some C callbacks that use the standard <code>void* userdata</code> method to allow you to store a reference to some context (e.g. a struct). How can I store a reference to a Rust struct in a <code>void*</code> and still allow it to be moved around? It seems that Rust moves really are moves, i.e. this code fails (as expected):</p>\n\n<pre><code>struct Thing {\n    pointer_to_self: *mut Thing,\n}\n\nfn create_thing() -&gt; Thing {\n    let mut a = Thing {\n        pointer_to_self: std::ptr::null_mut(),\n    };\n    a.pointer_to_self = &amp;mut a as *mut _;\n    a\n}\n\nfn main() {\n    let mut b = create_thing();\n\n    assert_eq!(&amp;mut b as *mut _, b.pointer_to_self);\n}\n</code></pre>\n\n<p>Is there a way around this? Can I have a Rust value that doesn't change address when you move it?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481484661, "post_id": 41087490, "comment_id": 69385263, "body": "I think you&#39;re right, but it didn&#39;t stop me from trying to use <code>for&lt;&#39;a&gt; ...</code> in a few ways to get around it.  :-)"}, {"owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 0, "creation_date": 1481496597, "post_id": 41087490, "comment_id": 69388920, "body": "I&#39;ve read something about for&lt;&#39;a&gt;, but found no way to get around it. May I know how do you do it?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 0, "creation_date": 1481503356, "post_id": 41087490, "comment_id": 69390435, "body": "@Cheng-ChangWu: What Chris was saying is that he tried using <code>for&lt;&#39;a&gt;...</code> to solve your problem, but unfortunately it doesn&#39;t work here. For the record, in <code>D</code>, <code>f: fn(&amp;A)</code> is a shorthand for <code>f: for&lt;&#39;a&gt; fn(&amp;&#39;a A)</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1481468163, "creation_date": 1481468163, "answer_id": 41087490, "question_id": 41087239, "link": "https://stackoverflow.com/questions/41087239/expected-concrete-lifetime-found-bound-lifetime-parameter-when-storing-a-fn-in/41087490#41087490", "title": "Expected concrete lifetime, found bound lifetime parameter when storing a fn in a struct", "body": "<p>When you write <code>f1::&lt;B&gt;</code>, the compiler interprets that as <code>f1::&lt;B&lt;'_&gt;&gt;</code>, there <code>'_</code> is a lifetime inferred by the compiler, because <code>B</code> is generic over a lifetime and you can only pass concrete types as type parameters.</p>\n\n<p>But then, in <code>D</code>, the <code>f</code> field is expected to be a function that accepts references to <code>A</code> with any lifetime. <code>f1::&lt;B&gt;</code> does not fulfill that requirement, because the function has been instantiated with a specific lifetime.</p>\n\n<p>Unfortunately, at the moment, there's no way to make this work. Rust would have to support either <a href=\"https://en.wikipedia.org/wiki/Kind_%28type_theory%29\" rel=\"nofollow noreferrer\">higher kinded types</a> or <a href=\"https://internals.rust-lang.org/t/blog-post-series-alternative-type-constructors-and-hkt/4300\" rel=\"nofollow noreferrer\">associated type constructors</a>. You could then define <code>E</code> in <code>f1</code> to be a type constructor parameter, rather than a type parameter (though I'm wondering how the compiler would handle the <code>'a</code> lifetime parameter).</p>\n"}], "owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 570, "favorite_count": 0, "accepted_answer_id": 41087490, "answer_count": 1, "score": 0, "last_activity_date": 1481468163, "creation_date": 1481466616, "last_edit_date": 1481467457, "question_id": 41087239, "link": "https://stackoverflow.com/questions/41087239/expected-concrete-lifetime-found-bound-lifetime-parameter-when-storing-a-fn-in", "title": "Expected concrete lifetime, found bound lifetime parameter when storing a fn in a struct", "body": "<p>I'm trying to store a function in a struct:</p>\n\n<pre><code>trait T&lt;'a&gt; {}\n\nstruct A {}\n\nstruct B&lt;'a&gt; {\n    a: &amp;'a A\n}\n\nimpl&lt;'a&gt; T&lt;'a&gt; for B&lt;'a&gt; {}\n\nfn f1&lt;'a, E: T&lt;'a&gt;&gt;(a: &amp;'a A) {}\n\nstruct D {\n    f: fn(&amp;A)\n}\n\nfn main() {\n    let d = D { f: f1::&lt;B&gt; };\n}\n</code></pre>\n\n<p>The compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:18:20\n   |\n18 |     let d = D { f: f1::&lt;B&gt; };\n   |                    ^^^^^^^ expected concrete lifetime, found bound lifetime parameter \n   |\n   = note: expected type `fn(&amp;A)`\n   = note:    found type `fn(&amp;A) {f1::&lt;'_, B&lt;'_&gt;&gt;}`\n</code></pre>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1481458649, "post_id": 41086033, "comment_id": 69377277, "body": "<a href=\"https://github.com/hyperium/hyper/blob/0.9.x/examples/server.rs\" rel=\"nofollow noreferrer\">github.com/hyperium/hyper/blob/0.9.x/examples/server.rs</a>"}], "answers": [{"tags": [], "owner": {"reputation": 452, "user_id": 2000435, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2d083f2e04aca7baa5f67cd616cdbf8c?s=128&d=identicon&r=PG", "display_name": "klausi", "link": "https://stackoverflow.com/users/2000435/klausi"}, "is_accepted": true, "score": 3, "last_activity_date": 1481458881, "creation_date": 1481458881, "answer_id": 41086099, "question_id": 41086033, "link": "https://stackoverflow.com/questions/41086033/how-do-i-start-a-web-server-in-rust-with-hyper/41086099#41086099", "title": "How do I start a web server in Rust with hyper?", "body": "<p>All expressions in Rust must be inside a function, so I need to start my server in fn main(). Then it works!</p>\n"}], "owner": {"reputation": 452, "user_id": 2000435, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2d083f2e04aca7baa5f67cd616cdbf8c?s=128&d=identicon&r=PG", "display_name": "klausi", "link": "https://stackoverflow.com/users/2000435/klausi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1631, "favorite_count": 0, "accepted_answer_id": 41086099, "answer_count": 1, "score": 0, "last_activity_date": 1481467364, "creation_date": 1481458442, "last_edit_date": 1481467364, "question_id": 41086033, "link": "https://stackoverflow.com/questions/41086033/how-do-i-start-a-web-server-in-rust-with-hyper", "title": "How do I start a web server in Rust with hyper?", "body": "<p>I want to learn Rust by writing a reverse proxy with the hyper framework. My <a href=\"https://github.com/klausi/rustnish\" rel=\"nofollow noreferrer\">complete project is on GitHub</a>. I'm stuck at starting a listener as <a href=\"http://hyper.rs/hyper/v0.9.12/hyper/server/index.html\" rel=\"nofollow noreferrer\">explained in the documentation</a>:</p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::Client;\nuse hyper::server::{Server, Request, Response};\nuse std::io::Read;\n\nfn pipe_through(req: Request, res: Response) {\n    let client = Client::new();\n    // Why does the response have to be mutable here? We never need to modify it, so we should be\n    // able to remove \"mut\"?\n    let mut response = client.get(\"http://drupal-8.localhost/\").send().unwrap();\n    // Print out all the headers first.\n    for header in response.headers.iter() {\n        println!(\"{}\", header);\n    }\n    // Now the body. This is ugly, why do I have to create an intermediary string variable? I want\n    // to push the response directly to stdout.\n    let mut body = String::new();\n    response.read_to_string(&amp;mut body).unwrap();\n    print!(\"{}\", body);\n}\n\nServer::http(\"127.0.0.1:9090\").unwrap().handle(pipe_through).unwrap();\n</code></pre>\n\n<p>That does not work and fails with the following compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `!` or `::`, found `(`\n  --&gt; src/main.rs:23:13\n   |\n23 | Server::http(\"127.0.0.1:9090\").unwrap().handle(pipe_through).unwrap();\n   |             ^\n</code></pre>\n\n<p>Why is my call to <code>http()</code> not correct? Shouldn't it create a new server as indicated in the documentation?</p>\n"}, {"tags": ["emacs", "macros", "rust", "spacemacs", "rust-macros"], "answers": [{"tags": [], "owner": {"reputation": 1721, "user_id": 4268862, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/daefd26c4e8c4ad64790330214dd26d1?s=128&d=identicon&r=PG", "display_name": "Lud", "link": "https://stackoverflow.com/users/4268862/lud"}, "is_accepted": true, "score": 7, "last_activity_date": 1481580831, "last_edit_date": 1481580831, "creation_date": 1481454217, "answer_id": 41085434, "question_id": 41085080, "link": "https://stackoverflow.com/questions/41085080/does-emacs-spacemacs-support-nested-c-mode-embedded-in-rust-macro/41085434#41085434", "title": "Does emacs/spacemacs support nested C++ mode embedded in Rust Macro?", "body": "<h1>General information</h1>\n\n<p>You have access to a <a href=\"https://emacswiki.org/emacs/MultipleModes\" rel=\"nofollow noreferrer\">wiki</a> listing some solutions to run several major modes at once:</p>\n\n<blockquote>\n  <ul>\n  <li><a href=\"https://github.com/purcell/mmm-mode\" rel=\"nofollow noreferrer\">mmm-mode</a></li>\n  <li><a href=\"https://github.com/vitoshka/polymode\" rel=\"nofollow noreferrer\">polymode</a></li>\n  <li><a href=\"http://www.loveshack.ukfsn.org/emacs/multi-mode.el\" rel=\"nofollow noreferrer\">multi-mode</a></li>\n  </ul>\n</blockquote>\n\n<p>In your case, you will need to run 2 major modes in order to recognize C++ and Rust in the same buffer:</p>\n\n<ul>\n<li><code>c++-mode</code> (available by default)</li>\n<li><a href=\"https://github.com/rust-lang/rust-mode\" rel=\"nofollow noreferrer\"><code>rust-mode</code></a></li>\n</ul>\n\n<h1>A practical example with <code>mmm-mode</code></h1>\n\n<p>I suppose your Rust environment is already configured in your Emacs. The following will add <code>c++-mode</code> while the Rust major mode is running. In your Emacs configuration file, add the following snippet:</p>\n\n<pre class=\"lang-lisp prettyprint-override\"><code>(require 'mmm-mode)\n(setq mmm-global-mode 'maybe)\n\n(mmm-add-classes\n '((rust-cpp ; Name of the mmm class\n    :submode c++-mode ; Additional major mode, here it is C++\n    :front \"^cpp! {[\\n\\r]+\" ; Start tag for c++-mode\n    :back \"^}$\"))) ; Stop tag for c++-mode\n\n(mmm-add-mode-ext-class 'rust-mode nil 'rust-cpp)\n</code></pre>\n\n<p>In your Rust code, <code>c++-mode</code> will be activated when the following pattern is present:</p>\n\n<pre><code>cpp! {\n    // your C++ code...\n}\n</code></pre>\n\n<p>I'll let you fine-tune the regular expression since I do not know the rules of <code>rust-cpp</code> when mixing Rust and C++.</p>\n"}], "owner": {"reputation": 1359, "user_id": 1065942, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/F2ynP.png?s=128&g=1", "display_name": "snow", "link": "https://stackoverflow.com/users/1065942/snow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 41085434, "answer_count": 1, "score": 2, "last_activity_date": 1481580831, "creation_date": 1481451213, "question_id": 41085080, "link": "https://stackoverflow.com/questions/41085080/does-emacs-spacemacs-support-nested-c-mode-embedded-in-rust-macro", "title": "Does emacs/spacemacs support nested C++ mode embedded in Rust Macro?", "body": "<p>Reference: <a href=\"https://github.com/mystor/rust-cpp\" rel=\"nofollow noreferrer\">rust-cpp</a></p>\n\n<p>Can emacs/spacemacs support nested mode in major mode? I'm used to vim and new to emacs/spacemacs.</p>\n"}, {"tags": ["generics", "rust", "closures"], "answers": [{"comments": [{"owner": {"reputation": 167, "user_id": 4610716, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/318e46619794c838204b4c6acc4775dd?s=128&d=identicon&r=PG&f=1", "display_name": "lesurp", "link": "https://stackoverflow.com/users/4610716/lesurp"}, "edited": false, "score": 0, "creation_date": 1481522776, "post_id": 41083205, "comment_id": 69394695, "body": "Thank you ! That did solve my issue. I don&#39;t understand the <code>T + &#39;static</code> syntax though. What is this (so I can read the appropriate doc) ? Is this about the lifetime ?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 167, "user_id": 4610716, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/318e46619794c838204b4c6acc4775dd?s=128&d=identicon&r=PG&f=1", "display_name": "lesurp", "link": "https://stackoverflow.com/users/4610716/lesurp"}, "edited": false, "score": 0, "creation_date": 1481556863, "post_id": 41083205, "comment_id": 69412623, "body": "<code>&#39;static</code> here is a <i>lifetime bound</i>. It restricts the lifetime of borrowed pointers in the type that implements <code>Fn() -&gt; T</code>. <code>&#39;static</code> means that the type cannot contain any borrowed pointers shorter than <code>&#39;static</code> (a type with no borrowed pointers at all is OK). If you need more flexibility, you could introduce a lifetime parameter (<code>&lt;&#39;a, T&gt;</code>) on <code>Struct</code> and use that instead."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1481432932, "creation_date": 1481432932, "answer_id": 41083205, "question_id": 41082409, "link": "https://stackoverflow.com/questions/41082409/closures-as-a-type-in-a-rust-struct/41083205#41083205", "title": "Closures as a type in a Rust struct", "body": "<p><code>Struct::new</code> doesn't have any parameter that depends on <code>F</code>, so the compiler is unable to infer what type it should use for <code>F</code>. If you called a method later that used <code>F</code>, then the compiler would use that information to figure out the <code>Struct</code>'s concrete type. For example:</p>\n\n<pre><code>use std::hash::Hash;\nuse std::collections::HashMap;\n\npub struct Struct&lt;T, F&gt;\n    where T: Eq,\n          T: Hash,\n          F: Fn() -&gt; T,\n{\n    hash_map: HashMap&lt;T, F&gt;,\n    value: T,\n}\n\nimpl&lt;T, F&gt; Struct&lt;T, F&gt;\n    where T: Eq,\n          T: Hash,\n          F: Fn() -&gt; T,\n{\n    pub fn new(init_value: T) -&gt; Struct&lt;T, F&gt; {\n        Struct {\n            hash_map: HashMap::new(),\n            value: init_value,\n        }\n    }\n\n    pub fn set_fn(&amp;mut self, value: T, func: F) {\n        self.hash_map.insert(value, func);\n    }\n}\n\nfn main() {\n    let mut a = Struct::new(0);\n    a.set_fn(0, || 1); // the closure here provides the type for `F`\n}\n</code></pre>\n\n<p>There's a problem with this though. If we call <code>set_fn</code> a second time with a different closure:</p>\n\n<pre><code>fn main() {\n    let mut a = Struct::new(0);\n    a.set_fn(0, || 1);\n    a.set_fn(1, || 2);\n}\n</code></pre>\n\n<p>then we get a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:33:17\n   |\n33 |     a.set_fn(1, || 2);\n   |                 ^^^^ expected closure, found a different closure\n   |\n   = note: expected type `[closure@&lt;anon&gt;:32:17: 32:21]`\n   = note:    found type `[closure@&lt;anon&gt;:33:17: 33:21]`\nnote: no two closures, even if identical, have the same type\n  --&gt; &lt;anon&gt;:33:17\n   |\n33 |     a.set_fn(1, || 2);\n   |                 ^^^^\nhelp: consider boxing your closure and/or using it as a trait object\n  --&gt; &lt;anon&gt;:33:17\n   |\n33 |     a.set_fn(1, || 2);\n   |                 ^^^^\n</code></pre>\n\n<p>As mentioned by the compiler, each closure expression defines a brand new type and evaluates to that type. However, by defining <code>Struct</code> the way you did, you are forcing all functions in the <code>HashMap</code> to have the same type. Is that really what you want?</p>\n\n<p>If you want map different values of <code>T</code> to possibly different types of closures, then you'll need to use trait objects instead of generics, as suggested by the compiler. If you want the struct to own the closure, then you'll have to use a <code>Box</code> around the object type.</p>\n\n<pre><code>pub struct Struct&lt;T&gt;\n    where T: Eq,\n          T: Hash,\n{\n    hash_map: HashMap&lt;T, Box&lt;Fn() -&gt; T + 'static&gt;&gt;,\n    value: T,\n}\n</code></pre>\n\n<p><code>set_fn</code> could then look like this:</p>\n\n<pre><code>pub fn set_fn&lt;F: Fn() -&gt; T + 'static&gt;(&amp;mut self, value: T, func: F) {\n    self.hash_map.insert(value, Box::new(func));\n}\n</code></pre>\n"}], "owner": {"reputation": 167, "user_id": 4610716, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/318e46619794c838204b4c6acc4775dd?s=128&d=identicon&r=PG&f=1", "display_name": "lesurp", "link": "https://stackoverflow.com/users/4610716/lesurp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2113, "favorite_count": 1, "accepted_answer_id": 41083205, "answer_count": 1, "score": 5, "last_activity_date": 1481467254, "creation_date": 1481423449, "last_edit_date": 1481467254, "question_id": 41082409, "link": "https://stackoverflow.com/questions/41082409/closures-as-a-type-in-a-rust-struct", "title": "Closures as a type in a Rust struct", "body": "<p>I am trying to create a struct like this in Rust:</p>\n\n<pre><code>pub struct Struct&lt;T, F&gt;\n    where T: Eq,\n          T: Hash,\n          F: Fn() -&gt; T\n{\n    hashMap: HashMap&lt;T, F&gt;,\n    value: T,\n}\n</code></pre>\n\n<p>My constructor looks like this:</p>\n\n<pre><code>pub fn new(init_value: T) -&gt; Struct&lt;T, F&gt; {\n    Struct {\n        hashMap: HashMap::new(),\n        value: init_state,\n    }\n}\n</code></pre>\n\n<p>However when trying to instantiate the class, using <code>let a = Struct::&lt;MyEnum&gt;::new(MyEnum::Init);</code>, the compiler complains that the generics needs two arguments (<code>expected 2 type arguments, found 1</code>)</p>\n\n<p>I saw <a href=\"https://doc.rust-lang.org/book/closures.html\" rel=\"nofollow noreferrer\">here</a> that this code works:</p>\n\n<pre><code>fn call_with_one&lt;F&gt;(some_closure: F) -&gt; i32\n    where F: Fn(i32) -&gt; i32 {\n\n    some_closure(1)\n}\n\nlet answer = call_with_one(|x| x + 2);\n</code></pre>\n\n<p>I guess the problem comes from me having another generic in my template instantiation, but how can I do that?</p>\n"}, {"tags": ["callback", "rust"], "answers": [{"comments": [{"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 16, "creation_date": 1481455625, "post_id": 41081702, "comment_id": 69376593, "body": "Wow, I think this is the best answer I&#39;ve ever got to a SO question! Thank you! Perfectly explained. One minor thing I don&#39;t get though - why does <code>CB</code> have to be <code>&#39;static</code> in the final example?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 9, "creation_date": 1481456976, "post_id": 41081702, "comment_id": 69376891, "body": "The <code>Box&lt;FnMut()&gt;</code> used in the struct field means <code>Box&lt;FnMut() + &#39;static&gt;</code>. Roughly &quot;The boxed trait object contains no references / any references it contains outlive (or equal) <code>&#39;static</code>&quot;. It prevents the callback from capturing locals by reference."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1481457580, "post_id": 41081702, "comment_id": 69377028, "body": "Ah I see, I think!"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1481461911, "post_id": 41081702, "comment_id": 69378124, "body": "You should probably mention the upsides of genericity - namely the lack of indirection, both for data and for resolving the call."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1481462164, "post_id": 41081702, "comment_id": 69378186, "body": "@Veedrac The trouble is that for this type of use case those aren&#39;t really upsides, especially the lack of indirection. The OP asked for an idiomatic way to express &quot;function pointers&quot; (with <i>userdata</i>, even)."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 1, "creation_date": 1506634414, "post_id": 41081702, "comment_id": 79912402, "body": "@Timmmm More details on the <code>&#39;static</code> bound in a <a href=\"https://morestina.net/blog/793/closure-lifetimes-in-rust\" rel=\"nofollow noreferrer\">separate blog post</a>."}, {"owner": {"reputation": 916, "user_id": 3019905, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/P1ga3.png?s=128&g=1", "display_name": "Dash83", "link": "https://stackoverflow.com/users/3019905/dash83"}, "edited": false, "score": 5, "creation_date": 1523024657, "post_id": 41081702, "comment_id": 86402529, "body": "This is a fantastic answer, thank you for providing it @user4815162342."}, {"owner": {"reputation": 317, "user_id": 1153319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fded3d72ca91dd726f29784d83df452?s=128&d=identicon&r=PG", "display_name": "Mike Mestnik", "link": "https://stackoverflow.com/users/1153319/mike-mestnik"}, "edited": false, "score": 0, "creation_date": 1564073264, "post_id": 41081702, "comment_id": 100920178, "body": "You don&#39;t provide an example of a baxed trait, you just give an example of a boxed Fn with little explanation.  What are the pros and cons of boxed trait VS boxed Fn?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 317, "user_id": 1153319, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fded3d72ca91dd726f29784d83df452?s=128&d=identicon&r=PG", "display_name": "Mike Mestnik", "link": "https://stackoverflow.com/users/1153319/mike-mestnik"}, "edited": false, "score": 0, "creation_date": 1564139468, "post_id": 41081702, "comment_id": 100941925, "body": "@MikeMestnik I&#39;m not sure what kind of example of a boxed trait you&#39;re looking for, but <code>Fn</code> is a trait and the last example stores it boxed to allow polymorphism."}, {"owner": {"reputation": 14053, "user_id": 650891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/01dc99801914d08b2aa5889777970c0e?s=128&d=identicon&r=PG", "display_name": "Stephen Chung", "link": "https://stackoverflow.com/users/650891/stephen-chung"}, "edited": false, "score": 0, "creation_date": 1583303097, "post_id": 41081702, "comment_id": 107065742, "body": "True.  This probably needs to be in the textbooks."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 228, "last_activity_date": 1599634077, "last_edit_date": 1599634077, "creation_date": 1481415129, "answer_id": 41081702, "question_id": 41081240, "link": "https://stackoverflow.com/questions/41081240/idiomatic-callbacks-in-rust/41081702#41081702", "title": "Idiomatic callbacks in Rust", "body": "<p>Short answer: For maximum flexibility, you can store the callback as a boxed <code>FnMut</code> object, with the callback setter generic on callback type. The code for this is shown in the last example in the answer. For a more detailed explanation, read on.</p>\n<h3>&quot;Function pointers&quot;: callbacks as <code>fn</code></h3>\n<p>The closest equivalent of the C++ code in the question would be declaring callback as a <code>fn</code> type. <code>fn</code> encapsulates functions defined by the <code>fn</code> keyword, much like C++'s function pointers:</p>\n<pre><code>type Callback = fn();\n\nstruct Processor {\n    callback: Callback,\n}\n\nimpl Processor {\n    fn set_callback(&amp;mut self, c: Callback) {\n        self.callback = c;\n    }\n\n    fn process_events(&amp;self) {\n        (self.callback)();\n    }\n}\n\nfn simple_callback() {\n    println!(&quot;hello world!&quot;);\n}\n\nfn main() {\n    let p = Processor {\n        callback: simple_callback,\n    };\n    p.process_events(); // hello world!\n}\n</code></pre>\n<p>This code could be extended to include an <code>Option&lt;Box&lt;Any&gt;&gt;</code> to hold the &quot;user data&quot; associated with the function. Even so, it would not be idiomatic Rust. The Rust way to associate data with a function is to capture it in an anonymous <em>closure</em>, just like in modern C++. Since closures are not <code>fn</code>, <code>set_callback</code> will need to accept other kinds of function objects.</p>\n<h3>Callbacks as generic function objects</h3>\n<p>In both Rust and C++ closures with the same call signature come in different sizes to accommodate the different values they might capture. Additionally, each closure definition generates a unique anonymous type for the closure's value. Due to these constraints, the struct cannot name the type of its <code>callback</code> field, nor can it use an alias.</p>\n<p>One way to embed a closure in the struct field without referring to a concrete type is by making the struct <em>generic</em>. The struct will automatically adapt its size and the type of callback for the concrete function or closure you pass to it:</p>\n<pre><code>struct Processor&lt;CB&gt;\nwhere\n    CB: FnMut(),\n{\n    callback: CB,\n}\n\nimpl&lt;CB&gt; Processor&lt;CB&gt;\nwhere\n    CB: FnMut(),\n{\n    fn set_callback(&amp;mut self, c: CB) {\n        self.callback = c;\n    }\n\n    fn process_events(&amp;mut self) {\n        (self.callback)();\n    }\n}\n\nfn main() {\n    let s = &quot;world!&quot;.to_string();\n    let callback = || println!(&quot;hello {}&quot;, s);\n    let mut p = Processor { callback: callback };\n    p.process_events();\n}\n</code></pre>\n<p>As before, the new definition of callback will be able to accept top-level functions defined with <code>fn</code>, but this one will also accept closures as <code>|| println!(&quot;hello world!&quot;)</code>, as well as closures that capture values, such as <code>|| println!(&quot;{}&quot;, somevar)</code>. Because of this the processor doesn't need <code>userdata</code> to accompany the callback; the closure provided by the caller of <code>set_callback</code> will automatically capture the data it needs from its environment and have it available when invoked.</p>\n<p>But what's the deal with the <code>FnMut</code>, why not just <code>Fn</code>? Since closures hold captured values, Rust's usual mutation rules must apply when calling the closure. Depending on what the closures do with the values they hold, they are grouped in three families, each marked with a trait:</p>\n<ul>\n<li><code>Fn</code> are closures that only read data, and may be safely called multiple times, possibly from multiple threads. Both above closures are <code>Fn</code>.</li>\n<li><code>FnMut</code> are closures that modify data, e.g. by writing to a captured <code>mut</code> variable. They may also be called multiple times, but not in parallel. (Calling a <code>FnMut</code> closure from multiple threads would lead to a data race, so it can only be done with the protection of a mutex.) The closure object must be declared mutable by the caller.</li>\n<li><code>FnOnce</code> are closures that <em>consume</em> some od the data they capture, e.g. by moving a captured value to a function that takes its ownership. As the name implies, these may be called only once, and the caller must own them.</li>\n</ul>\n<p>Somewhat counter-intuitively, when specifying a trait bound for the type of an object that accepts a closure, <code>FnOnce</code> is actually the most permissive one. Declaring that a generic callback type must satisfy the <code>FnOnce</code> trait means that it will accept literally any closure. But that comes with a price: it means the holder is only allowed to call it once. Since <code>process_events()</code> may opt to invoke the callback multiple times, and as the method itself may be called more than once, the next most permissive bound is <code>FnMut</code>. Note that we had to mark <code>process_events</code> as mutating <code>self</code>.</p>\n<h3>Non-generic callbacks: function trait objects</h3>\n<p>Even though the generic implementation of the callback is extremely efficient, it has serious interface limitations. It requires each <code>Processor</code> instance to be parameterized with a concrete callback type, which means that a single <code>Processor</code> can only deal with a single callback type. Given that each closure has a distinct type, the generic <code>Processor</code> cannot handle <code>proc.set_callback(|| println!(&quot;hello&quot;))</code> followed by <code>proc.set_callback(|| println!(&quot;world&quot;))</code>.  Extending the struct to support two callbacks fields would require the whole struct to be parameterized to two types, which would quickly become unwieldy as the number of callbacks grows. Adding more type parameters wouldn't work if the number of callbacks needed to be dynamic, e.g. to implement an <code>add_callback</code> function that maintains a vector of different callbacks.</p>\n<p>To remove the type parameter, we can take advantage of <a href=\"https://doc.rust-lang.org/book/ch17-02-trait-objects.html\" rel=\"noreferrer\">trait objects</a>, the feature of Rust that allows automatic creation of dynamic interfaces based on traits. This is sometimes referred to as <em>type erasure</em> and is a popular technique in C++<a href=\"http://davekilian.com/cpp-type-erasure.html\" rel=\"noreferrer\">[1]</a><a href=\"https://akrzemi1.wordpress.com/2013/11/18/type-erasure-part-i/\" rel=\"noreferrer\">[2]</a>, not to be confused with Java and FP languages' somewhat different use of the term. Readers familiar with C++ will recognize the distinction between a closure that implements <code>Fn</code> and an <code>Fn</code> trait object as equivalent to the distinction between general function objects and <code>std::function</code> values in C++.</p>\n<p>A trait object is created by borrowing an object with the <code>&amp;</code> operator and casting or coercing it to a reference to the specific trait. In this case, since <code>Processor</code> needs to own the callback object, we cannot use borrowing, but must store the callback in a heap-allocated <code>Box&lt;dyn Trait&gt;</code> (the Rust equivalent of <code>std::unique_ptr</code>), which is functionally equivalent to a trait object.</p>\n<p>If <code>Processor</code> stores <code>Box&lt;dyn FnMut()&gt;</code>, it no longer needs to be generic, but the <code>set_callback</code> <em>method</em> now accepts a generic <code>c</code> via an <a href=\"https://doc.rust-lang.org/edition-guide/rust-2018/trait-system/impl-trait-for-returning-complex-types-with-ease.html\" rel=\"noreferrer\"><code>impl Trait</code> argument</a>. As such, it can accept any kind of callable, including closures with state, and properly box it before storing it in the <code>Processor</code>. The generic argument to <code>set_callback</code> doesn't limit what kind of callback the processor accepts, as the type of the accepted callback is decoupled from the type stored in the <code>Processor</code> struct.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>struct Processor {\n    callback: Box&lt;dyn FnMut()&gt;,\n}\n\nimpl Processor {\n    fn set_callback(&amp;mut self, c: impl FnMut() + 'static) {\n        self.callback = Box::new(c);\n    }\n\n    fn process_events(&amp;mut self) {\n        (self.callback)();\n    }\n}\n\nfn simple_callback() {\n    println!(&quot;hello&quot;);\n}\n\nfn main() {\n    let mut p = Processor {\n        callback: Box::new(simple_callback),\n    };\n    p.process_events();\n    let s = &quot;world!&quot;.to_string();\n    let callback2 = move || println!(&quot;hello {}&quot;, s);\n    p.set_callback(callback2);\n    p.process_events();\n}\n</code></pre>\n<h3>Lifetime of references inside boxed closures</h3>\n<p>The <code>'static</code> lifetime bound on the type of the <code>c</code> argument accepted by <code>set_callback</code> is a simple way to convince the compiler that <em>references</em> contained in <code>c</code>, which might be a closure that refers to its environment, only refer to global values and will therefore remain valid throughout the use of the callback. But the static bound is also very heavy-handed: while it accepts closures that own objects just fine (which we've ensured above by making the closure <code>move</code>), it rejects closures that refer to local environment, even when they only refer to values that outlive the processor and would in fact be safe.</p>\n<p>As we only need the callbacks alive as long as the processor is alive, we should try to tie their lifetime to that of the processor, which is a less strict bound than <code>'static</code>. But if we just remove the <code>'static</code> lifetime bound from <code>set_callback</code>, it no longer compiles. This is because <code>set_callback</code> creates a new box and assigns it to the <code>callback</code> field defined as <code>Box&lt;dyn FnMut()&gt;</code>. Since the definition doesn't specify a lifetime for the boxed trait object, <code>'static</code> is implied, and the assignment would effectively widen the lifetime (from an unnamed arbitrary lifetime of the callback to <code>'static</code>), which is disallowed. The fix is to provide an explicit lifetime for the processor and tie that lifetime to both the references in the box and the references in the callback received by <code>set_callback</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>struct Processor&lt;'a&gt; {\n    callback: Box&lt;dyn FnMut() + 'a&gt;,\n}\n\nimpl&lt;'a&gt; Processor&lt;'a&gt; {\n    fn set_callback(&amp;mut self, c: impl FnMut() + 'a) {\n        self.callback = Box::new(c);\n    }\n    // ...\n}\n</code></pre>\n<p>With these lifetimes being made explicit, it is no longer necessary to use <code>'static</code>. The closure can now refer to the local <code>s</code> object, i.e. no longer has to be <code>move</code>, provided that the definition of <code>s</code> is placed before the definition of <code>p</code> to ensure that the string outlives the processor.</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 24363, "favorite_count": 59, "accepted_answer_id": 41081702, "answer_count": 1, "score": 110, "last_activity_date": 1618268187, "creation_date": 1481410970, "last_edit_date": 1481574032, "question_id": 41081240, "link": "https://stackoverflow.com/questions/41081240/idiomatic-callbacks-in-rust", "title": "Idiomatic callbacks in Rust", "body": "<p>In C/C++ I'd normally do callbacks with a plain function pointer, maybe passing a <code>void* userdata</code> parameter too. Something like this:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>typedef void (*Callback)();\n\nclass Processor\n{\npublic:\n    void setCallback(Callback c)\n    {\n        mCallback = c;\n    }\n\n    void processEvents()\n    {\n        for (...)\n        {\n            ...\n            mCallback();\n        }\n    }\nprivate:\n    Callback mCallback;\n};\n</code></pre>\n\n<p>What is the idiomatic way of doing this in Rust? Specifically, what types should my <code>setCallback()</code> function take, and what type should <code>mCallback</code> be? Should it take an <code>Fn</code>? Maybe <code>FnMut</code>? Do I save it <code>Boxed</code>? An example would be amazing.</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481393555, "post_id": 41078603, "comment_id": 69363538, "body": "Perhaps <a href=\"http://stackoverflow.com/q/25413201/155423\">How do I implement a trait I don&#39;t own for a type I don&#39;t own?</a> will explain everything you need to know?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481393685, "post_id": 41078603, "comment_id": 69363577, "body": "@Shepmaster I think it&#39;s not really about that, but about providing an efficient O(1) implementation for the <code>Triangle</code> iterator. I sense that overriding <code>Iterator::sum()</code> is the solution... maybe."}, {"owner": {"reputation": 73, "user_id": 3897330, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc466b6422497cbf5eba22a8a5d45417?s=128&d=identicon&r=PG&f=1", "display_name": "user3897330", "link": "https://stackoverflow.com/users/3897330/user3897330"}, "edited": false, "score": 1, "creation_date": 1481394623, "post_id": 41078603, "comment_id": 69363919, "body": "I have removed the dependancy on <code>Num</code> and added an example of sum working initially."}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1481417862, "post_id": 41078603, "comment_id": 69369945, "body": "In the <code>sum</code> function, <code>iter</code> is a trait. Downcasting is only defined for <code>&#39;static</code> data. See <a href=\"http://stackoverflow.com/a/27892569/33499\">this answer</a>"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1573654690, "last_edit_date": 1573654690, "creation_date": 1481418229, "answer_id": 41081986, "question_id": 41078603, "link": "https://stackoverflow.com/questions/41078603/is-it-possible-to-implement-a-custom-iteratorsum-in-rust/41081986#41081986", "title": "Is it possible to implement a custom Iterator::sum in Rust?", "body": "<p>You cannot specialize the existing implementation of <code>Sum</code>, but you can specialize <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.sum\" rel=\"nofollow noreferrer\"><code>Iterator::sum</code></a> in your iterator! It's a bit tricky, though, since its return type is generic.</p>\n\n<pre><code>use std::iter::{self, Sum};\n\nimpl Iterator for Triangle {\n    // existing members are unchanged\n\n    fn sum&lt;S&gt;(self) -&gt; S\n    where\n        S: Sum&lt;Self::Item&gt;,\n    {\n        let nsum = (self.n * (self.n + 1) * (self.n + 2)) / 6;\n        let msum = (self.m * (self.m + 1) * (self.m + 2)) / 6;\n        S::sum(iter::once(msum - nsum))\n    }\n}\n</code></pre>\n\n<p>We cannot return a fixed type (such as <code>u32</code>), as that would not respect the contract defined by the <code>Iterator</code> trait. All we know about the return type <code>S</code> is that it implements <code>Sum&lt;Self::Item&gt;</code>. <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Sum.html\" rel=\"nofollow noreferrer\"><code>Sum</code></a> has a single method, <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Sum.html#tymethod.sum\" rel=\"nofollow noreferrer\"><code>sum</code></a>, that returns <code>Self</code>, so we can use it to produce a value of type <code>S</code>. The method expects an iterator; we feed it a <a href=\"https://doc.rust-lang.org/stable/std/iter/struct.Once.html\" rel=\"nofollow noreferrer\"><code>Once</code></a>, \"an iterator that yields an element exactly once\". Since that iterator will iterate a fixed number of times, we can expect <code>sum</code> to perform a fixed number of operations.</p>\n\n<p>When you compile the program in release mode and <code>S</code> is <code>u32</code>, the whole <code>sum</code> call is optimized away, and the function returns <code>msum - nsum</code> directly.</p>\n"}], "owner": {"reputation": 73, "user_id": 3897330, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cc466b6422497cbf5eba22a8a5d45417?s=128&d=identicon&r=PG&f=1", "display_name": "user3897330", "link": "https://stackoverflow.com/users/3897330/user3897330"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1523, "favorite_count": 0, "accepted_answer_id": 41081986, "answer_count": 1, "score": 7, "last_activity_date": 1573654690, "creation_date": 1481393086, "last_edit_date": 1573654601, "question_id": 41078603, "link": "https://stackoverflow.com/questions/41078603/is-it-possible-to-implement-a-custom-iteratorsum-in-rust", "title": "Is it possible to implement a custom Iterator::sum in Rust?", "body": "<p>I am trying to learn about iterators with an iterator that produces triangle numbers. Triangle numbers are 1, 3, 6, 10, 15 where 1 = 1, 3 = 1 + 2, 6 = 1 + 2 + 3 etc. I have the basics of this created:</p>\n\n<pre><code>pub struct Triangle {\n    cur: u32,\n    n: u32,\n    m: u32,\n}\n\nimpl Iterator for Triangle {\n    type Item = u32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n        if self.n == self.m {\n            return None;\n        }\n        self.n = self.n + 1;\n        self.cur = self.cur + self.n;\n\n        Some(self.cur)\n    }\n}\n</code></pre>\n\n<p>A quick runnable example of this is</p>\n\n<pre><code>let t = Triangle { cur: 0, n: 0, m: 10 };\nlet s: u32 = t.sum();\nprintln!(\"{}\", s);  // prints 220\n</code></pre>\n\n<p>Is it possible to create a custom summation function for the iterator that returns type <code>u32</code>? I was hoping to be able to do this with the default iterator and sum functions, and not have to make my own specialized function.</p>\n\n<p>What I was hoping to be able to do is:</p>\n\n<pre><code>use std::iter::Sum;\n\nimpl Sum&lt;u32&gt; for u32 {\n    fn sum&lt;I&gt;(iter: I) -&gt; Self\n    where\n        I: Triangle,\n    {\n        let nsum = (self.n * (self.n + 1) * (self.n + 2)) / 6;\n        let msum = (self.m * (self.m + 1) * (self.m + 2)) / 6;\n        msum - nsum\n    }\n}\n</code></pre>\n\n<p>but this does not work. The error that I get with this is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0404]: expected trait, found struct `Triangle`\n  --&gt; src/main.rs:26:12\n   |\n26 |         I: Triangle,\n   |            ^^^^^^^^ not a trait\n</code></pre>\n\n<p>I could change it from <code>Triangle</code> to <code>Iterator</code> like it wants, but that would prevent me from accessing the <code>m</code> and <code>n</code> values of the <code>Triangle</code> struct. </p>\n\n<p>How do I do this? Is it impossible? I know that I could write my own function like <code>my_sum()</code>, but I was hoping to be able to do it in the context of an iterator.</p>\n"}, {"tags": ["rust", "in-memory"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 51, "last_activity_date": 1576600742, "last_edit_date": 1576600742, "creation_date": 1481322739, "answer_id": 41069910, "question_id": 41069865, "link": "https://stackoverflow.com/questions/41069865/how-to-create-an-in-memory-object-that-can-be-used-as-a-reader-writer-or-seek/41069910#41069910", "title": "How to create an in-memory object that can be used as a Reader, Writer, or Seek in Rust?", "body": "<p>In fact there is a way: <strong><a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"noreferrer\"><code>Cursor&lt;T&gt;</code></a>!</strong> <br>\n(<em>please also read <a href=\"https://stackoverflow.com/a/50732452/2408867\">Shepmaster's answer</a> on why often it's even easier</em>)</p>\n\n<p>In the documentation you can see that there are the following impls:</p>\n\n<pre><code>impl&lt;T&gt; Seek for Cursor&lt;T&gt; where T: AsRef&lt;[u8]&gt;\nimpl&lt;T&gt; Read for Cursor&lt;T&gt; where T: AsRef&lt;[u8]&gt;\nimpl Write for Cursor&lt;Vec&lt;u8&gt;&gt;\nimpl&lt;T&gt; AsRef&lt;[T]&gt; for Vec&lt;T&gt;\n</code></pre>\n\n<p>From this you can see that <strong>you can use the type <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code> just as an ordinary file</strong>, because <code>Read</code>, <code>Write</code> and <code>Seek</code> are implemented for that type! </p>\n\n<p>Little example (<a href=\"https://play.rust-lang.org/?gist=af3dce99cac3c24b7fcc7b290de2729d&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\"><em>Playground</em></a>):</p>\n\n<pre><code>use std::io::{Cursor, Read, Seek, SeekFrom, Write};\n\n// Create fake \"file\"\nlet mut c = Cursor::new(Vec::new());\n\n// Write into the \"file\" and seek to the beginning\nc.write_all(&amp;[1, 2, 3, 4, 5]).unwrap();\nc.seek(SeekFrom::Start(0)).unwrap();\n\n// Read the \"file's\" contents into a vector\nlet mut out = Vec::new();\nc.read_to_end(&amp;mut out).unwrap();\n\nprintln!(\"{:?}\", out);\n</code></pre>\n\n<p>For a more useful example, check the documentation linked above.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487123139, "post_id": 41942144, "comment_id": 71637884, "body": "You can <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html#method.into_inner\" rel=\"nofollow noreferrer\">get the <code>Vec</code> back</a> after you are done with the <code>Cursor</code>."}, {"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487149832, "post_id": 41942144, "comment_id": 71648175, "body": "@Shepmaster Great! And then I can use <a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8.html\" rel=\"nofollow noreferrer\"><code>from_utf8</code></a> to convet to String, <code>from_utf8</code> seems to avoid copying of the vector so it should be efficient, could robably also use the `from_utf8_unchecked&#39; which should be a simple move."}], "tags": [], "owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "is_accepted": false, "score": 7, "last_activity_date": 1487123094, "last_edit_date": 1487123094, "creation_date": 1485798169, "answer_id": 41942144, "question_id": 41069865, "link": "https://stackoverflow.com/questions/41069865/how-to-create-an-in-memory-object-that-can-be-used-as-a-reader-writer-or-seek/41942144#41942144", "title": "How to create an in-memory object that can be used as a Reader, Writer, or Seek in Rust?", "body": "<p>If you want to use <code>BufReader</code> with an in-memory <code>String</code>, you can use the <code>as_bytes()</code> method:  </p>\n\n<pre><code>use std::io::BufRead;\nuse std::io::BufReader;\nuse std::io::Read;\n\nfn read_buff&lt;R: Read&gt;(mut buffer: BufReader&lt;R&gt;) {\n    let mut data = String::new();\n    let _ = buffer.read_line(&amp;mut data);\n\n    println!(\"read_buff got {}\", data);\n}\n\nfn main() {\n    read_buff(BufReader::new(\"Potato!\".as_bytes()));\n}\n</code></pre>\n\n<p>This prints <code>read_buff got Potato!</code>. There is no need to use a cursor for this case.</p>\n\n<p>To use an in-memory <code>String</code> with <code>BufWriter</code>, you can use the <code>as_mut_vec</code> method. Unfortunately it is <code>unsafe</code> and I have not found any other way. I don't like the <code>Cursor</code> approach since it consumes the vector and I have not found a way yet to use the <code>Cursor</code> together with <code>BufWriter</code>. </p>\n\n<pre><code>use std::io::BufWriter;\nuse std::io::Write;\n\npub fn write_something&lt;W: Write&gt;(mut buf: BufWriter&lt;W&gt;) {\n    buf.write(\"potato\".as_bytes());\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::io::{BufWriter};\n\n    #[test]\n    fn testing_bufwriter_and_string() {\n        let mut s = String::new();\n\n        write_something(unsafe { BufWriter::new(s.as_mut_vec()) });\n\n        assert_eq!(\"potato\", &amp;s);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 839, "user_id": 2869868, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cb128aa77ed5962d3918e85e1380179f?s=128&d=identicon&r=PG&f=1", "display_name": "liszt", "link": "https://stackoverflow.com/users/2869868/liszt"}, "edited": false, "score": 0, "creation_date": 1528442024, "post_id": 50732452, "comment_id": 88518316, "body": "This is great. Is it something we couldn&#39;t do over a year ago?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 839, "user_id": 2869868, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cb128aa77ed5962d3918e85e1380179f?s=128&d=identicon&r=PG&f=1", "display_name": "liszt", "link": "https://stackoverflow.com/users/2869868/liszt"}, "edited": false, "score": 1, "creation_date": 1528465063, "post_id": 50732452, "comment_id": 88531291, "body": "@liszt nope, those implementations existed in Rust 1.0."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 16, "last_activity_date": 1528465035, "last_edit_date": 1528465035, "creation_date": 1528341632, "answer_id": 50732452, "question_id": 41069865, "link": "https://stackoverflow.com/questions/41069865/how-to-create-an-in-memory-object-that-can-be-used-as-a-reader-writer-or-seek/50732452#50732452", "title": "How to create an in-memory object that can be used as a Reader, Writer, or Seek in Rust?", "body": "<p>You don't need a <code>Cursor</code> <em>most of the time</em>.</p>\n\n<blockquote>\n  <p>object that I can give to <code>BufReader</code> and <code>BufWriter</code></p>\n</blockquote>\n\n<p><code>BufReader</code> requires a value that implements <code>Read</code>:</p>\n\n<pre><code>impl&lt;R: Read&gt; BufReader&lt;R&gt; {\n    pub fn new(inner: R) -&gt; BufReader&lt;R&gt;\n}\n</code></pre>\n\n<p><code>BufWriter</code> requires a value that implements <code>Write</code>:</p>\n\n<pre><code>impl&lt;W: Write&gt; BufWriter&lt;W&gt; {\n    pub fn new(inner: W) -&gt; BufWriter&lt;W&gt; {}\n}\n</code></pre>\n\n<p>If you view the implementors of <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#implementors\" rel=\"noreferrer\"><code>Read</code></a> you will find <code>impl&lt;'a&gt; Read for &amp;'a [u8]</code>.</p>\n\n<p>If you view the implementors of <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#implementors\" rel=\"noreferrer\"><code>Write</code></a>, you will find <code>impl Write for Vec&lt;u8&gt;</code>.</p>\n\n<pre><code>use std::io::{Read, Write};\n\nfn main() {\n    // Create fake \"file\"\n    let mut file = Vec::new();\n\n    // Write into the \"file\"\n    file.write_all(&amp;[1, 2, 3, 4, 5]).unwrap();\n\n    // Read the \"file's\" contents into a new vector\n    let mut out = Vec::new();\n    let mut c = file.as_slice();\n    c.read_to_end(&amp;mut out).unwrap();\n\n    println!(\"{:?}\", out);\n}\n</code></pre>\n\n<p>Writing to a <code>Vec</code> will always append to the end. We also take a slice to the <code>Vec</code> that we can update. Each read of <code>c</code> will advance the slice further and further until it is empty. </p>\n\n<p>The main differences from <code>Cursor</code>:</p>\n\n<ul>\n<li>Cannot seek the data, so you cannot easily re-read data</li>\n<li>Cannot write to anywhere but the end</li>\n</ul>\n"}], "owner": {"reputation": 839, "user_id": 2869868, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cb128aa77ed5962d3918e85e1380179f?s=128&d=identicon&r=PG&f=1", "display_name": "liszt", "link": "https://stackoverflow.com/users/2869868/liszt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9776, "favorite_count": 7, "accepted_answer_id": 41069910, "answer_count": 3, "score": 45, "last_activity_date": 1576600742, "creation_date": 1481322442, "last_edit_date": 1541380126, "question_id": 41069865, "link": "https://stackoverflow.com/questions/41069865/how-to-create-an-in-memory-object-that-can-be-used-as-a-reader-writer-or-seek", "title": "How to create an in-memory object that can be used as a Reader, Writer, or Seek in Rust?", "body": "<p>I need a completely in-memory object that I can give to <code>BufReader</code> and <code>BufWriter</code>. Something like Python's <code>StringIO</code>. I want to write to and read from such an object using methods ordinarily used with <code>File</code>s.</p>\n\n<p>Is there a way to do this using the standard library?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11934, "user_id": 54606, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/e7de961282b156410426c657342ef466?s=128&d=identicon&r=PG", "display_name": "Lo&#239;c Faure-Lacroix", "link": "https://stackoverflow.com/users/54606/lo%c3%afc-faure-lacroix"}, "edited": false, "score": 0, "creation_date": 1481289031, "post_id": 41061165, "comment_id": 69328895, "body": "Not really fluent in Rust, but I&#39;m pretty sure it has to do with using a reference to <code>a</code> and <code>b</code> that cause the problem. What you really want is use the object directly as in the &quot;working code&quot;."}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 0, "creation_date": 1481289600, "post_id": 41061165, "comment_id": 69329294, "body": "would enjoy if the answer could address what the borrow applies to in <code>&amp;a[1..a.len()].iter().zip(&amp;b[1..b.len()].iter()).map(|(x, y)| x*y).sum()</code> is it the same as <code>&amp;(a[1..a.len()]).iter().zip(&amp;(b[1..b.len()]).iter()).map(|(x&zwnj;&#8203;, y)| x*y).sum()</code> or <code>&amp;(a[1..a.len()].iter().zip(&amp;(b[1..b.len()].iter())).map(|(x, y)| x*y).sum())</code>"}], "answers": [{"tags": [], "owner": {"reputation": 2671, "user_id": 326304, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f9a77e4fcd411cd94f9f4ab1a932e74d?s=128&d=identicon&r=PG", "display_name": "Reece45", "link": "https://stackoverflow.com/users/326304/reece45"}, "is_accepted": false, "score": 2, "last_activity_date": 1481292173, "last_edit_date": 1481292173, "creation_date": 1481290706, "answer_id": 41061759, "question_id": 41061165, "link": "https://stackoverflow.com/questions/41061165/slice-and-iter-simultaneously/41061759#41061759", "title": "Slice and iter() simultaneously", "body": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip\" rel=\"nofollow noreferrer\"><code>Iterator::zip</code></a> expects something that implements <code>IntoIterator</code>.</p>\n\n<p>Instead of passing an <code>Iterator</code>, you're passing a <em>reference</em> to the <code>Iterator</code>. <code>Iterator</code>s mutate, and a reference isn't sufficient.</p>\n\n<p>You can resolve this by using parenthesis to make it clear what you're trying to grab a reference from</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    let b = a.clone();\n\n    let s: i32 = (&amp;a)[1..a.len()].iter()\n        .zip(((&amp;b)[1..b.len()]).iter())\n        .map(|(x, y)| x * y)\n        .sum();\n\n    println!(\"{}\", s);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 15, "last_activity_date": 1481291321, "last_edit_date": 1495540813, "creation_date": 1481290860, "answer_id": 41061804, "question_id": 41061165, "link": "https://stackoverflow.com/questions/41061165/slice-and-iter-simultaneously/41061804#41061804", "title": "Slice and iter() simultaneously", "body": "<p><strong>In short</strong>: you probably misunderstood operator precedence:</p>\n\n<pre><code>&amp;b[1..b.len()].iter()\n</code></pre>\n\n<p>Is equal to:</p>\n\n<pre><code>&amp;(b[1..b.len()].iter())\n</code></pre>\n\n<p>And since <code>zip()</code> is expecting something that implements <code>IntoIterator</code>, the call fails, since a reference to this iterator type does not implement said trait.</p>\n\n<hr>\n\n<h2>Full Explanation</h2>\n\n<p>Let's try to understand the error message! Of course, we will first just look at the first error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;std::slice::Iter&lt;'_, {integer}&gt;: std::iter::Iterator` is not satisfied\n --&gt; &lt;anon&gt;:6:10\n  |\n6 |         .zip(&amp;b[1..b.len()].iter())\n  |          ^^^ trait `&amp;std::slice::Iter&lt;'_, {integer}&gt;: std::iter::Iterator` not satisfied\n  |\n  = note: `&amp;std::slice::Iter&lt;'_, {integer}&gt;` is not an iterator; maybe try calling `.iter()` or a similar method\n  = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;std::slice::Iter&lt;'_, {integer}&gt;`\n</code></pre>\n\n<p>Wow, that's quite a mouthful. But we can see that some trait bound requirement of the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip\" rel=\"noreferrer\">function <code>zip()</code></a> is violated. So, let's look at the signature of said function:</p>\n\n<pre><code>fn zip&lt;U&gt;(self, other: U) -&gt; Zip&lt;Self, U::IntoIter&gt; \n    where U: IntoIterator\n</code></pre>\n\n<p>What matters is the <code>other</code> argument (type <code>U</code>). <code>U</code> has to be <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noreferrer\"><code>IntoIterator</code></a>. This trait is implemented for quite a few types ... let's check what type we're trying to pass into <code>zip()</code>:</p>\n\n<pre><code>&amp;b[1..b.len()].iter()\n</code></pre>\n\n<p>To analyze this completely, we need to understand quite something, but I'll try to break it down. First, let's disambiguate operator precedence by inserting more parenthesis. The above code snippet is equivalent to:</p>\n\n<pre><code>&amp;(b[1..b.len()].iter())\n</code></pre>\n\n<ol>\n<li><p>An expression <code>foo[bar]</code> desugares to <code>*::std::ops::Index::index(&amp;foo, bar)</code>. This is the most complex part here, but looking this up in the documentation reveals that the expression <code>b[1..b.len()]</code> has the type <code>[i32]</code>. </p></li>\n<li><p>On that type, you call <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.iter\" rel=\"noreferrer\"><code>iter()</code></a> which returns a type <code>Iter&lt;_, _&gt;</code> which is the iterator type for slices.</p></li>\n<li><p>Now the<code>&amp;</code>: you borrow this <code>Iter&lt;_, _&gt;</code> thing, resulting in <code>&amp;Iter&lt;_, _&gt;</code>.</p></li>\n</ol>\n\n<p>And hey, this matches the error message! Look at the last note:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;std::slice::Iter&lt;'_, {integer}&gt;`\n</code></pre>\n\n<p>So... what does satisfy the <code>IntoIterator</code> trait? For one, every type that implements <code>Iterator</code> (e.g. <code>Iter&lt;_, _&gt;</code>) also implements <code>IntoIterator</code>. So you can just remove the <code>&amp;</code> in the expression and it works!</p>\n\n<p>But we can do even better! <code>IntoIterator</code> is also implemented for <code>&amp;[T]</code>, so you can also just remove the <code>.iter()</code> and it works!</p>\n\n<h2>Working Code</h2>\n\n<pre><code>let s: i32 = a[1..].iter()\n    .zip(&amp;b[1..])\n    .map(|(x, y)| x * y)\n    .sum();\n</code></pre>\n\n<p><em>Note</em>: I also removed the ranges' upper bounds to make them half open, <a href=\"https://stackoverflow.com/a/41061872/2408867\">as Paolo Falabella suggested</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 5, "last_activity_date": 1485852919, "last_edit_date": 1485852919, "creation_date": 1481291103, "answer_id": 41061872, "question_id": 41061165, "link": "https://stackoverflow.com/questions/41061165/slice-and-iter-simultaneously/41061872#41061872", "title": "Slice and iter() simultaneously", "body": "<p>Your first version has an issue with operator precedence: <code>&amp;a[1..a.len()].iter()</code> applies <code>iter()</code> first and then takes a reference to it, ending with a reference to a <code>std::slice::Iter</code>.</p>\n\n<p>As you can see on the <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"nofollow noreferrer\">docs for <code>Iter</code></a> , there is an <code>impl Iterator</code> for <code>Iter</code> but not for <code>&amp;Iter</code>.\nThis is what the first error is trying to say: (look at the part that says: <code>&amp;std::slice::Iter&lt;'_, {integer}&gt;</code> is not an iterator).</p>\n\n<p>Simplifying a bit, you can have:</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    // let b = a.clone(); // no more need to clone. We're going to only\n                          // work with references\n\n    let s: i32 = (&amp;a[1..]).iter() // you don't need the a.len() \n                                  // to slice to the end\n        .zip(&amp;a[1..])             // &amp;a implements IntoIter, which zip \n                                  // accepts, so you don't need iter() \n        .map(|(x, y)| x * y)\n        .sum();\n    println!(\"{}\", s);\n}\n</code></pre>\n"}], "owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2464, "favorite_count": 1, "accepted_answer_id": 41061804, "answer_count": 3, "score": 7, "last_activity_date": 1485852919, "creation_date": 1481288590, "last_edit_date": 1481289774, "question_id": 41061165, "link": "https://stackoverflow.com/questions/41061165/slice-and-iter-simultaneously", "title": "Slice and iter() simultaneously", "body": "<p>I am trying to figure out why this does not work (<a href=\"https://play.rust-lang.org/?gist=15f67014fa6badd1a99183b620d82b36&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>):</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    let b = a.clone();\n    // slice and iter (wrong way)\n    let s: i32 = &amp;a[1..a.len()].iter()\n        .zip(&amp;b[1..b.len()].iter())\n        .map(|(x, y)| x * y)\n        .sum();\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.13.0 (2c6933acc 2016-11-07)\nerror[E0277]: the trait bound `&amp;std::slice::Iter&lt;'_, {integer}&gt;: std::iter::Iterator` is not satisfied\n --&gt; &lt;anon&gt;:6:10\n  |\n6 |         .zip(&amp;b[1..b.len()].iter())\n  |          ^^^ trait `&amp;std::slice::Iter&lt;'_, {integer}&gt;: std::iter::Iterator` not satisfied\n  |\n  = note: `&amp;std::slice::Iter&lt;'_, {integer}&gt;` is not an iterator; maybe try calling `.iter()` or a similar method\n  = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;std::slice::Iter&lt;'_, {integer}&gt;`\n\nerror: no method named `map` found for type `std::iter::Zip&lt;std::slice::Iter&lt;'_, {integer}&gt;, &amp;std::slice::Iter&lt;'_, {integer}&gt;&gt;` in the current scope\n --&gt; &lt;anon&gt;:7:10\n  |\n7 |         .map(|(x, y)| x * y)\n  |          ^^^\n  |\n  = note: the method `map` exists but the following trait bounds were not satisfied: `&amp;std::slice::Iter&lt;'_, {integer}&gt; : std::iter::Iterator`, `std::iter::Zip&lt;std::slice::Iter&lt;'_, {integer}&gt;, &amp;std::slice::Iter&lt;'_, {integer}&gt;&gt; : std::iter::Iterator`\n</code></pre>\n\n<p>But this does work:</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    let b = a.clone();\n    // slice and iter (correct way)\n    let s: i32 = a[1..a.len()].iter()\n        .zip(b[1..b.len()].iter())\n        .map(|(x, y)| x * y)\n        .sum();\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>Please explain how vectors work in Rust and the difference above when I <code>iter()</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 1, "creation_date": 1481287953, "post_id": 41060679, "comment_id": 69328178, "body": "Hi, I am trying to understand the difference between arrays, slices, vectors and box. Do you know any good tuts for it? I specifically want to understand how box works and what do they mean when they say that vectors are smart pointers."}, {"owner": {"reputation": 86, "user_id": 7263900, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf8bb887c44cb146bf6edd7008d8256?s=128&d=identicon&r=PG&f=1", "display_name": "anon8112", "link": "https://stackoverflow.com/users/7263900/anon8112"}, "reply_to_user": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 0, "creation_date": 1481289028, "post_id": 41060679, "comment_id": 69328892, "body": "it explains the difference between arrays, slices and vectors pretty good"}, {"owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 0, "creation_date": 1481289482, "post_id": 41060679, "comment_id": 69329213, "body": "I went through this but it does not explain clearly the difference between box, vectors and arrays."}, {"owner": {"reputation": 86, "user_id": 7263900, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf8bb887c44cb146bf6edd7008d8256?s=128&d=identicon&r=PG&f=1", "display_name": "anon8112", "link": "https://stackoverflow.com/users/7263900/anon8112"}, "reply_to_user": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 0, "creation_date": 1481290798, "post_id": 41060679, "comment_id": 69330089, "body": "Maybe this helps, it explains various wrapper types and also boxes <a href=\"http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/\" rel=\"nofollow noreferrer\">link</a>"}, {"owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "edited": false, "score": 0, "creation_date": 1481291516, "post_id": 41060679, "comment_id": 69330553, "body": "Thanks this is really helpful :)"}], "tags": [], "owner": {"reputation": 86, "user_id": 7263900, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf8bb887c44cb146bf6edd7008d8256?s=128&d=identicon&r=PG&f=1", "display_name": "anon8112", "link": "https://stackoverflow.com/users/7263900/anon8112"}, "is_accepted": true, "score": 7, "last_activity_date": 1481292869, "last_edit_date": 1481292869, "creation_date": 1481287038, "answer_id": 41060679, "question_id": 41060461, "link": "https://stackoverflow.com/questions/41060461/print-sliced-vector-results-in-sized-is-not-satisfied/41060679#41060679", "title": "Print sliced vector results in &quot;Sized is not satisfied&quot;", "body": "<p>You need to use a reference; it worked for me in Rust 1.13.</p>\n\n<pre><code>println!(\"{:?}\", &amp;a[1..3]);\n</code></pre>\n"}], "owner": {"reputation": 3202, "user_id": 5082406, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f5fed7664333a6c548ad8c87eb9648c6?s=128&d=identicon&r=PG", "display_name": "Abhijay Ghildyal", "link": "https://stackoverflow.com/users/5082406/abhijay-ghildyal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 766, "favorite_count": 0, "accepted_answer_id": 41060679, "answer_count": 1, "score": 5, "last_activity_date": 1481292869, "creation_date": 1481286301, "last_edit_date": 1481291727, "question_id": 41060461, "link": "https://stackoverflow.com/questions/41060461/print-sliced-vector-results-in-sized-is-not-satisfied", "title": "Print sliced vector results in &quot;Sized is not satisfied&quot;", "body": "<p>I am trying to slice a vector and print it simultaneously in Rust. This is my code:</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3, 4];\n    println!(\"{:?}\", a[1..2]);\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[{integer}]: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:6:5\n  |\n6 |     println!(\"{:?}\", a[1..3]);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ trait `[{integer}]: std::marker::Sized` not satisfied\n  |\n  = note: `[{integer}]` does not have a constant size known at compile-time\n  = note: required by `std::fmt::ArgumentV1::new`\n  = note: this error originates in a macro outside of the current crate\n</code></pre>\n\n<p>How do I print this sliced vector?</p>\n"}, {"tags": ["rust", "raii"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 3, "creation_date": 1481269509, "post_id": 41053542, "comment_id": 69317653, "body": "Can you give some example code please? It would be easier to formulate a suggestion with a starting point."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1481291954, "post_id": 41056727, "comment_id": 69330836, "body": "Specifically for this case, the C values are likely to be pointers. That means you can also implement <code>drop</code> to free the pointers only if they are non-<code>NULL</code>. Then, set the pointers to NULL after freeing them, preventing double frees. It&#39;s the same idea as <code>Option</code>."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 1042, "user_id": 1236574, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/hyl6L.jpg?s=128&g=1", "display_name": "jmegaffin", "link": "https://stackoverflow.com/users/1236574/jmegaffin"}, "edited": false, "score": 1, "creation_date": 1499161607, "post_id": 41056727, "comment_id": 76782134, "body": "@jmegaffin just updated the answer to account for the developments of the language in the last seven months. I hope you find it useful :)"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 18, "last_activity_date": 1499260243, "last_edit_date": 1499260243, "creation_date": 1481274418, "answer_id": 41056727, "question_id": 41053542, "link": "https://stackoverflow.com/questions/41053542/forcing-the-order-in-which-struct-fields-are-dropped/41056727#41056727", "title": "Forcing the order in which struct fields are dropped", "body": "<p>You can specify drop order of your struct fields in two ways:</p>\n\n<h3>Implicitly</h3>\n\n<p>I wrote <a href=\"https://github.com/rust-lang/rfcs/blob/246ff86b320a72f98ed2df92805e8e3d48b402d6/text/1857-stabilize-drop-order.md\" rel=\"noreferrer\">RFC 1857</a> specifying drop order and it was merged 2017/07/03! According to the RFC, struct fields are dropped in the same order as they are declared.</p>\n\n<p>You can check this by running the example below</p>\n\n<pre><code>struct PrintDrop(&amp;'static str);\n\nimpl Drop for PrintDrop {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping {}\", self.0)\n    }\n}\n\nstruct Foo {\n    x: PrintDrop,\n    y: PrintDrop,\n    z: PrintDrop,\n}\n\nfn main() {\n    let foo = Foo {\n        x: PrintDrop(\"x\"),\n        y: PrintDrop(\"y\"),\n        z: PrintDrop(\"z\"),\n    };\n}\n</code></pre>\n\n<p>The output should be:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Dropping x\nDropping y\nDropping z\n</code></pre>\n\n<h3>Explicitly</h3>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1860-manually-drop.md\" rel=\"noreferrer\">RFC 1860</a> introduces the <a href=\"https://doc.rust-lang.org/nightly/std/mem/union.ManuallyDrop.html\" rel=\"noreferrer\"><code>ManuallyDrop</code></a> type, which wraps another type and disables its destructor. The idea is that you can manually drop the object by calling a special function (<code>ManuallyDrop::drop</code>). This function is unsafe, since memory is left uninitialized after dropping the object.</p>\n\n<p>You can use <code>ManuallyDrop</code> to explicitly specify the drop order of your fields in the destructor of your type:</p>\n\n<pre><code>#![feature(manually_drop)]\n\nuse std::mem::ManuallyDrop;\n\nstruct Foo {\n    x: ManuallyDrop&lt;String&gt;,\n    y: ManuallyDrop&lt;String&gt;\n}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        // Drop in reverse order!\n        unsafe {\n            ManuallyDrop::drop(&amp;mut self.y);\n            ManuallyDrop::drop(&amp;mut self.x);\n        }\n    }\n}\n\nfn main() {\n    Foo {\n        x: ManuallyDrop::new(\"x\".into()),\n        y: ManuallyDrop::new(\"y\".into())\n    };\n}\n</code></pre>\n\n<hr>\n\n<p>If you need this behavior without being able to use either of the newer methods, keep on reading...</p>\n\n<h3>The issue with drop</h3>\n\n<p>The <code>drop</code> method cannot take its parameter by value, since the parameter would be dropped again at the end of the scope. This would result in infinite recursion for all destructors of the language.</p>\n\n<h3>A possible solution/workaround</h3>\n\n<p>A pattern that I have seen in some codebases is to wrap the values that are being dropped in an <code>Option&lt;T&gt;</code>. Then, in the destructor, you can replace each option with <code>None</code> and drop the resulting value in the right order.</p>\n\n<p>For instance, in the <a href=\"https://github.com/Kimundi/scoped-threadpool-rs/blob/2e7450f92648512f3bf749ebd57110b40238dc86/src/lib.rs#L76\" rel=\"noreferrer\">scoped-threadpool</a> crate, the <code>Pool</code> object contains threads and a sender that will schedule new work. In order to join the threads correctly upon dropping, the sender should be dropped first and the threads second.</p>\n\n<pre><code>pub struct Pool {\n    threads: Vec&lt;ThreadData&gt;,\n    job_sender: Option&lt;Sender&lt;Message&gt;&gt;\n}\n\nimpl Drop for Pool {\n    fn drop(&amp;mut self) {\n        // By setting job_sender to `None`, the job_sender is dropped first.\n        self.job_sender = None;\n    }\n}\n</code></pre>\n\n<h3>A note on ergonomics</h3>\n\n<p>Of course, doing things this way is more of a workaround than a proper solution. Also, if the optimizer cannot prove that the option will always be <code>Some</code>, you now have an extra branch for each access to your struct field.</p>\n\n<p>Fortunately, nothing prevents a future version of Rust to implement a feature that allows specifying drop order. It would probably require an RFC, but seems certainly doable. There is an ongoing <a href=\"https://github.com/rust-lang/rfcs/issues/744\" rel=\"noreferrer\">discussion</a> on the issue tracker about specifying drop order for the language, though it has been inactive last months.</p>\n\n<h3>A note on safety</h3>\n\n<p>If destroying your structs in the wrong order is unsafe, you should probably consider making their constructors <code>unsafe</code> and document this fact (in case you haven't done that already). Otherwise it would be possible to trigger unsafe behavior just by creating the structs and letting them fall out of scope.</p>\n"}], "owner": {"reputation": 1042, "user_id": 1236574, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/hyl6L.jpg?s=128&g=1", "display_name": "jmegaffin", "link": "https://stackoverflow.com/users/1236574/jmegaffin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2080, "favorite_count": 3, "accepted_answer_id": 41056727, "answer_count": 1, "score": 13, "last_activity_date": 1499260243, "creation_date": 1481260509, "question_id": 41053542, "link": "https://stackoverflow.com/questions/41053542/forcing-the-order-in-which-struct-fields-are-dropped", "title": "Forcing the order in which struct fields are dropped", "body": "<p>I'm implementing an object that owns several resources created from C libraries through FFI.  In order to clean up what's already been done if the constructor panics, I'm wrapping each resource in its own struct and implementing <code>Drop</code> for them.  However, when it comes to dropping the object itself, I cannot guarantee that resources will be dropped in a safe order because Rust doesn't define the order that a struct's fields are dropped.</p>\n\n<p>Normally, you would solve this by making it so the object doesn't own the resources but rather borrows them (so that the resources may borrow each other).  In effect, this pushes the problem up to the calling code, where the drop order is well defined and enforced with the semantics of borrowing.  But this is inappropriate for my use case and in general a bit of a cop-out.</p>\n\n<p>What's infuriating is that this would be incredibly easy if <code>drop</code> took <code>self</code> instead of <code>&amp;mut self</code> for some reason.  Then I could just call <code>std::mem::drop</code> in my desired order.</p>\n\n<p>Is there any way to do this?  If not, is there any way to clean up in the event of a constructor panic without manually catching and repanicking?</p>\n"}, {"tags": ["matrix", "types", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481248983, "post_id": 41051788, "comment_id": 69311430, "body": "Have you read <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>? Specifically, I&#39;m thinking of the <a href=\"https://doc.rust-lang.org/stable/book/primitive-types.html\" rel=\"nofollow noreferrer\"><b>Primitive Types</b> section</a>, which introduces <a href=\"https://doc.rust-lang.org/stable/book/primitive-types.html#slices\" rel=\"nofollow noreferrer\"><i>slices</i></a>."}, {"owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481249225, "post_id": 41051788, "comment_id": 69311485, "body": "@Shepmaster Yes of course. However its not apparent how to do it with 2D array."}], "answers": [{"comments": [{"owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "edited": false, "score": 1, "creation_date": 1481365104, "post_id": 41052093, "comment_id": 69355243, "body": "Another problem with using slices is that there is no guarantee that &amp;[&amp;[i32]] will have rows of equal lengths: let matrix = &amp;[[3, 3, 3],[4, 4, 4, 4],[3, 3, 3]];"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1558619703, "last_edit_date": 1558619703, "creation_date": 1481249781, "answer_id": 41052093, "question_id": 41051788, "link": "https://stackoverflow.com/questions/41051788/how-to-pass-an-arbitrary-sized-matrix-to-a-function-in-rust/41052093#41052093", "title": "How to pass an arbitrary sized matrix to a function in Rust?", "body": "<p>Arrays have a fixed size, determined at compile time. <a href=\"https://doc.rust-lang.org/stable/book/ch04-03-slices.html\" rel=\"nofollow noreferrer\"><em>Slices</em></a> have a fixed size, determined at <strong>run-time</strong>.</p>\n\n<p>The easiest thing to do is to accept a slice of slices:</p>\n\n<pre><code>fn convolve(matrix: &amp;[&amp;[i32]]) {\n    println!(\"{:?}\", matrix);\n}\n\nfn main() {\n    let matrix = &amp;[\n        &amp;[0, 0, 0][..],\n        &amp;[0, 1, 0][..],\n        &amp;[0, 0, 0][..],\n    ];\n    convolve(matrix);\n}\n</code></pre>\n\n<p>That's a bit annoying, as you have to use the <em>slicing syntax</em> (<code>&amp;foo[..]</code>) to convert the literal arrays to slices. You could also accept a generic, which allows you to accept the above, but also anything that can be converted to a slice:</p>\n\n<pre><code>fn convolve&lt;T, I&gt;(matrix: &amp;[T])\nwhere\n    T: AsRef&lt;[I]&gt;,\n    I: std::fmt::Debug,\n{\n    for part in matrix {\n        println!(\"{:?}\", part.as_ref());\n    }\n}\n\nfn main() {\n    let matrix = &amp;[\n        [0, 0, 0],\n        [0, 1, 0],\n        [0, 0, 0],\n    ];\n    convolve(matrix);\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/41051788/how-to-pass-an-arbitrary-sized-matrix-to-a-function-in-rust/41052093?noredirect=1#comment69355243_41052093\">kosinix points out</a>, there is no guarantee that <code>&amp;[&amp;[i32]]</code> will have rows of equal lengths; it's possible to have a <em>ragged array</em>.</p>\n\n<p>The run-time solution to that is to iterate through all the rows and ensure all the lengths are the same. This can be reduced to checking just once if you create a <em>newtype</em> for matrices you have validated:</p>\n\n<pre><code>struct Matrix&lt;'a, T: 'a&gt;(&amp;'a [&amp;'a [T]]);\n\nimpl&lt;'a, T&gt; Matrix&lt;'a, T&gt; {\n    fn new(slice: &amp;'a [&amp;'a [T]]) -&gt; Result&lt;Self, ()&gt; {\n        if slice.is_empty() {\n            return Ok(Matrix(slice));\n        }\n\n        let (head, tail) = slice.split_at(1);\n        let expected = head[0].len();\n\n        if tail.iter().map(|row| row.len()).all(|l| l == expected) {\n            Ok(Matrix(slice))\n        } else {\n            Err(()) // return a real error here\n        }\n    }\n}\n</code></pre>\n\n<p>Now, whenever you have a <code>Matrix</code>, you can be sure the rows are all the same length.</p>\n\n<p>The compile-time solution... doesn't exist yet. These are called <a href=\"https://github.com/rust-lang/rfcs/pull/2000\" rel=\"nofollow noreferrer\">const generics</a>. The <strong>proposed syntax</strong> would be</p>\n\n<pre><code>fn convolve&lt;const N: usize&gt;(matrix: [[i32; N]; N]) \n</code></pre>\n\n<p>There are stable workarounds available (such as <a href=\"https://crates.io/crates/generic-array\" rel=\"nofollow noreferrer\">generic-array</a>), but these may be limited in one fashion or another.</p>\n"}], "owner": {"reputation": 1461, "user_id": 1594918, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/69305d97391e6732df46b038ffbeaee5?s=128&d=identicon&r=PG", "display_name": "kosinix", "link": "https://stackoverflow.com/users/1594918/kosinix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 500, "favorite_count": 0, "accepted_answer_id": 41052093, "answer_count": 1, "score": 4, "last_activity_date": 1558619703, "creation_date": 1481247466, "last_edit_date": 1481249027, "question_id": 41051788, "link": "https://stackoverflow.com/questions/41051788/how-to-pass-an-arbitrary-sized-matrix-to-a-function-in-rust", "title": "How to pass an arbitrary sized matrix to a function in Rust?", "body": "<p>I have a 3x3 matrix (a 2D array) passed to a function:</p>\n\n<pre><code>let matrix: [[i32; 3]; 3] = [\n    [0, 0, 0],\n    [0, 1, 0],\n    [0, 0, 0]\n];\n\nfilter::convolve(&amp;mut image, matrix, 1).unwrap();\n</code></pre>\n\n<p>The function is currently hardwired to accept 3x3 matrix:</p>\n\n<pre><code>pub fn convolve(src: &amp;mut Image, matrix: [[i32; 3]; 3], divisor: i32) -&gt; Result&lt;&amp;mut Image, String&gt; {\n    // ...\n}\n</code></pre>\n\n<p>How would I pass a 3x3, 5x5, or any arbitrarily sized matrix to the same function?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1481246479, "post_id": 41051567, "comment_id": 69310708, "body": "I was going to say &quot;your tests will cover logical errors like this&quot; ... but then, if you have a 200 line function I imagine you&#39;re already having a hard time testing it properly... My answer would be: in practice, you don&#39;t run in to the issues you&#39;re thinking this causes often, if at all."}, {"owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1481246553, "post_id": 41051567, "comment_id": 69310726, "body": "@SimonWhitehead I&#39;m coming from Java where that&#39;s exactly backwards! Meaning, once you declare <code>int x</code> in a scope you can&#39;t redeclare it. It makes sooo much sense that I must be missing something. It does not make sense to be scary every time you do <code>let x = 3;</code> because you might be erasing a value previously declared."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1481246760, "post_id": 41051567, "comment_id": 69310785, "body": "@rusty_programmer ...to which I would answer: <code>Java != Rust</code>. Thats like saying block scoping is backwards because Javascript has function-level scoping. I&#39;m not sure what point you&#39;re trying to make there, sorry."}, {"owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1481246921, "post_id": 41051567, "comment_id": 69310834, "body": "@SimonWhitehead I honestly don&#39;t intend to create a language war. Just trying to understand how people proceed when they encounter this dilema, which is quite often in my experience."}, {"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 1, "creation_date": 1481247089, "post_id": 41051567, "comment_id": 69310879, "body": "@rusty_programmer The body of your question and your comments implies that you feel that shadowing is unsafe (and you&#39;re looking for explanations of how/why it might not be). Your title implies the opposite, which is why Shep changed it, but you changed it back. So which is it?"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1481247484, "post_id": 41051567, "comment_id": 69311003, "body": "@rusty_programmer No problem. My question to you would be: How do you know you&#39;re about to override a variable in Java? The compiler I imagine throws an error for a re-declaration? You could leverage the Rust compiler too.. you could <code>temp = ();</code> .. and the compiler will tell you if it exists or not."}], "answers": [{"comments": [{"owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "edited": false, "score": 0, "creation_date": 1481246728, "post_id": 41051668, "comment_id": 69310776, "body": "Sometimes you are changing someone else&#39;s code. I have <b>no way to know</b> that <code>a</code> is already being used. How do I pick a variable name then?"}, {"owner": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "reply_to_user": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "edited": false, "score": 1, "creation_date": 1481247261, "post_id": 41051668, "comment_id": 69310934, "body": "@rusty_programmer Be more descriptive in how you name variables. Don&#39;t name so many things with only a single letter. <code>x</code> may be easier to type the first time, but doesn&#39;t provide any real context about the value or intended use, making maintenance more difficult (e.g. collisions and shadowing are more likely \u2013 <i>hint</i>). Spend the extra time now adding clarity to save time later."}, {"owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "reply_to_user": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "edited": false, "score": 0, "creation_date": 1481248328, "post_id": 41051668, "comment_id": 69311225, "body": "@JonathanLonowski Even being descriptive there&#39;s a chance it was used before in the same code block."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "reply_to_user": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "edited": false, "score": 1, "creation_date": 1481316458, "post_id": 41051668, "comment_id": 69344482, "body": "@rusty_programmer if your function is so long that you can&#39;t fit it all on a screen or two, you probably need to refactor it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1481251602, "last_edit_date": 1481251602, "creation_date": 1481246612, "answer_id": 41051668, "question_id": 41051567, "link": "https://stackoverflow.com/questions/41051567/how-do-you-avoid-accidentally-redeclaring-a-variable-inside-a-code-block-in-rust/41051668#41051668", "title": "How do you avoid accidentally redeclaring a variable inside a code block in Rust?", "body": "<p>The problem isn't Rust, or any programming language really, it's the code. Specifically this \"line\":</p>\n\n<pre><code>// 200 lines of code\n</code></pre>\n\n<p>If you write 200 (or 400!) lines of code between the declaration of a variable and a usage of it, it's very likely that something unexpected will happen. However, whatever that is could also happen if the variable is mutable and you change it accidentally:</p>\n\n<pre><code>let mut a = 1;\na += 1;\n// or\nlet a = 1;\nlet a = 2;\n</code></pre>\n\n<p>Both of those have the same end result, but only one of them involves shadowing.</p>\n\n<p>Personally, I find shadowing very useful with Rust's wrapper types like <code>Option</code> or <code>Result</code>:</p>\n\n<pre><code>fn foo(name: Option&lt;&amp;str&gt;) {\n    let name = name.unwrap_or(\"Who are you\");\n    println!(\"{}\", name);\n}\n</code></pre>\n\n<p>If you find that you are not able to handle variable shadowing, then I'd suggest looking into <a href=\"https://github.com/Manishearth/rust-clippy\" rel=\"nofollow noreferrer\">Clippy</a>, which has multiple <code>shadow_*</code> lints that you can turn on and disallow your code from compiling if you have any shadowing.</p>\n\n<blockquote>\n  <p>Sometimes you are changing someone else's code. I have no way to know that <code>a</code> is already being used. How do I pick a variable name then?</p>\n</blockquote>\n\n<p>I'd suggest that you <em>read the code</em> before modifying it. Some editors also allow searching through text for patterns or highlighting patterns.</p>\n\n<blockquote>\n  <p>I'm coming from Java where that's exactly backwards! Meaning, once you declare <code>int x</code> in a scope you can't redeclare it.</p>\n</blockquote>\n\n<p>That's true, but you can still shadow your instance or class variables:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public class HelloWorld {\n  static int a = 42;\n\n  public static void main(String[] args) {\n    int a = 21;\n    System.out.print(a); // Oh no, it's not 42 anymore!\n  }\n}\n</code></pre>\n\n<p>The Java compiler doesn't prevent this mistake; it's up to you, your tests, your code review, or external linting tools.</p>\n\n<blockquote>\n  <p>How do you avoid accidentally redeclaring a variable inside a code block in Rust?</p>\n</blockquote>\n\n<p>You could have a small piece of paper next to your desk. Write the number zero on it. Every time you declare a new variable, you add one to the number. Prefix or suffix all your variables with that number. </p>\n\n<p>To be on the safe side, you could also add your name to the variable - you wouldn't want to conflict with anyone else following the same algorithm. You may also want to add the function and type to the name of the variable, to avoid clashes between different functions.</p>\n\n<p>Of course, these variable names might be very long. To fix that, you might want to abbreviate all of the above, and write the number as either hexadecimal or maybe Base64. Instead of <code>my_type_cool_function_john_doe_x_12223123</code>, you can have the fairly unique <code>mtcfjdxBA8293</code>. This is very unlikely to collide with any existing variables.</p>\n\n<p><sub>(The above is satire)</sub></p>\n\n<hr>\n\n<p>Make no mistake: I <strong>strongly</strong> believe that the problem is <strong>not</strong> variable shadowing: it's functions that are hundreds of lines long which require so much mental overhead. Create functions, create types and methods on those types, but somehow fix the code before changing it further for the worse.</p>\n"}, {"comments": [{"owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "edited": false, "score": 0, "creation_date": 1481246848, "post_id": 41051679, "comment_id": 69310817, "body": "If you are changing someone else&#39;s code and want to introduce a new variable how can you be sure you are not overriding a previous declared variable?"}], "tags": [], "owner": {"reputation": 100407, "user_id": 16406, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/fadf252892475e9b177d5cd5e8b24145?s=128&d=identicon&r=PG&f=1", "display_name": "Chris Dodd", "link": "https://stackoverflow.com/users/16406/chris-dodd"}, "is_accepted": false, "score": 3, "last_activity_date": 1481246719, "creation_date": 1481246719, "answer_id": 41051679, "question_id": 41051567, "link": "https://stackoverflow.com/questions/41051567/how-do-you-avoid-accidentally-redeclaring-a-variable-inside-a-code-block-in-rust/41051679#41051679", "title": "How do you avoid accidentally redeclaring a variable inside a code block in Rust?", "body": "<p>Any variable that has a lifetime that covers 100s of lines of code should have a long and descriptive name, and generally should never shadow.</p>\n\n<p>Names like <code>temp</code> and <code>x</code> should only be used for variables with <em>short</em> lifetimes -- a dozen lines or less -- so that for any use of the variable, you can easily see the definition of it a few lines earlier.</p>\n"}, {"comments": [{"owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "edited": false, "score": 0, "creation_date": 1481248386, "post_id": 41051857, "comment_id": 69311244, "body": "Although adding scope just to prevent that feels overkill."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "edited": false, "score": 0, "creation_date": 1481248480, "post_id": 41051857, "comment_id": 69311270, "body": "@rusty_programmer Sure, in this tiny example. Larger bodies of code (especially your example of a 200 line function) generally have some nested scopes. My point was to demonstrate that it is called shadowing because it &quot;shadows&quot;.. it certainly does not overwrite or erase anything."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481250382, "post_id": 41051857, "comment_id": 69311746, "body": "@SimonWhitehead I like this idea a lot. However, I think it would be really clever if there was some way of giving a name to these scopes, to make it easier to understand what they do. I&#39;ve also occasionally had to copy and paste these scopes to reuse them, which was a real pain. I wonder if we could add something to solve that too. Even rarer, I&#39;ve had scopes that repeated the same logic, but using different variable names. That was really tricky to copy and paste and get right. It&#39;s a good thing I&#39;m paid by the line! \ud83d\ude02"}, {"owner": {"reputation": 8109, "user_id": 237351, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a2fb09f37c93194e9515f32de43bd258?s=128&d=identicon&r=PG", "display_name": "DMin", "link": "https://stackoverflow.com/users/237351/dmin"}, "edited": false, "score": 0, "creation_date": 1613883789, "post_id": 41051857, "comment_id": 117211552, "body": "Neither of the answers explain a solid reason for this feature and just do &quot;you&#39;re holding the phone wrong&quot;"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 8109, "user_id": 237351, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a2fb09f37c93194e9515f32de43bd258?s=128&d=identicon&r=PG", "display_name": "DMin", "link": "https://stackoverflow.com/users/237351/dmin"}, "edited": false, "score": 0, "creation_date": 1613970118, "post_id": 41051857, "comment_id": 117230625, "body": "The question doesn&#39;t ask us to provide a reason for this feature @DMin. The question quite specifically asked &quot;what am I missing?&quot; about this feature. I provided an answer to one of the more obvious things the OP was missing. If you&#39;re looking for a reason why <i>Rust</i> specifically allows it ... well, its likely because <a href=\"https://en.wikipedia.org/wiki/Variable_shadowing\" rel=\"nofollow noreferrer\">all of the languages it takes inspiration from also allow it</a>."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 3, "last_activity_date": 1481247970, "creation_date": 1481247970, "answer_id": 41051857, "question_id": 41051567, "link": "https://stackoverflow.com/questions/41051567/how-do-you-avoid-accidentally-redeclaring-a-variable-inside-a-code-block-in-rust/41051857#41051857", "title": "How do you avoid accidentally redeclaring a variable inside a code block in Rust?", "body": "<p>As another point, just to target the Java comparison and the \"erasing\" or \"overwriting\" prose being used, such as:</p>\n\n<blockquote>\n  <p>It does not make sense to be scary every time you do let x = 3; because you might be erasing a value previously declared.</p>\n</blockquote>\n\n<p>Rust still has scoping rules. The shadowing respects the scopes. Unlike Java, you can shadow the variable but it preserves the scope of the original. <a href=\"https://play.rust-lang.org/?gist=05c9a851616f9f81541c68b7f0698037&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">For example</a>:</p>\n\n<pre><code>fn main() {\n    let x = 3;\n\n    {\n        let x = 5;\n\n        println!(\"Inner scope: {}\", x); // Prints 5\n    }\n\n    println!(\"Outer scope: {}\", x); // Prints 3\n}\n</code></pre>\n\n<p>The shadowing takes scope into account.</p>\n"}, {"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1481252427, "post_id": 41051924, "comment_id": 69312207, "body": "I like this too - &quot;Don&#39;t leave broken windows&quot;. Adding code to a huge function is breaking the window further."}], "tags": [], "owner": {"reputation": 6631, "user_id": 51683, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ac88413948aad12e279e0d9609e7f74?s=128&d=identicon&r=PG", "display_name": "carols10cents", "link": "https://stackoverflow.com/users/51683/carols10cents"}, "is_accepted": false, "score": 2, "last_activity_date": 1481248423, "creation_date": 1481248423, "answer_id": 41051924, "question_id": 41051567, "link": "https://stackoverflow.com/questions/41051567/how-do-you-avoid-accidentally-redeclaring-a-variable-inside-a-code-block-in-rust/41051924#41051924", "title": "How do you avoid accidentally redeclaring a variable inside a code block in Rust?", "body": "<p>If you have a method that is hundreds of lines long and you want to introduce a new variable, I would suggest that instead of adding more variables to a long method, you call a function instead in the spot where you would want to introduce a new variable. Then you get two advantages: a new scope where you know your variable isn't shadowing or being shadowed, plus you're not adding code to an already long method.</p>\n"}], "owner": {"reputation": 99, "user_id": 7270418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9ae0567fe1dc40a79ecb6c88e37a231a?s=128&d=identicon&r=PG&f=1", "display_name": "rusty_programmer", "link": "https://stackoverflow.com/users/7270418/rusty-programmer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 292, "favorite_count": 0, "accepted_answer_id": 41051857, "answer_count": 4, "score": -3, "last_activity_date": 1481251602, "creation_date": 1481245970, "last_edit_date": 1481248614, "question_id": 41051567, "link": "https://stackoverflow.com/questions/41051567/how-do-you-avoid-accidentally-redeclaring-a-variable-inside-a-code-block-in-rust", "title": "How do you avoid accidentally redeclaring a variable inside a code block in Rust?", "body": "<p>I'm learning Rust and I came across this:</p>\n\n<pre><code>let mut x: i32 = 1;\nx = 7;\nlet x = x; // x is now immutable and is bound to 7\n\nlet y = 4;\nlet y = \"I can also be bound to text!\"; // y is now of a different type\n</code></pre>\n\n<p>How can this be safe? Please check below:</p>\n\n<pre><code>let temp = 23;\n\n// 200 lines of code\n\n// I'm changing something here &lt;====== IMPORTANT\nlet temp = 101;\n\n// 200 lines of code\n\n// do something with temp (with 23 not 101 !!!)\n</code></pre>\n\n<p>If I do <code>let temp = 101</code> again I have no way to know that I just created a nasty bug in the code. Do I really need to search for <code>let temp</code> before I type <code>let temp</code>? What am I missing?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1481233597, "post_id": 41049270, "comment_id": 69306377, "body": "FYI - <a href=\"http://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String) or Vec (&amp;Vec) as a function argument?</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user634175"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481234382, "post_id": 41049270, "comment_id": 69306761, "body": "@Shepmaster thanks, quite right. This is a cut down version of something else and I didn&#39;t clean that up. The argument was originally <code>&amp;BTreeMap</code>"}], "answers": [{"comments": [{"owner": {"reputation": 223, "user_id": 1662108, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/l8AeA.jpg?s=128&g=1", "display_name": "hanbumpark", "link": "https://stackoverflow.com/users/1662108/hanbumpark"}, "edited": false, "score": 0, "creation_date": 1481237954, "post_id": 41049935, "comment_id": 69308168, "body": "good answer!! now I have a question. would you answer it plz? how can I see infered type or lifecycle by compile?"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 223, "user_id": 1662108, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/l8AeA.jpg?s=128&g=1", "display_name": "hanbumpark", "link": "https://stackoverflow.com/users/1662108/hanbumpark"}, "edited": false, "score": 0, "creation_date": 1481240407, "post_id": 41049935, "comment_id": 69309014, "body": "Not that I know of, to be honest. Within the <code>transform</code> function, the elided lifetimes will be the same. The introduction of the closure using a reference though is what causes the compiler to not know what to do. If you look at the MIR (<a href=\"https://play.rust-lang.org/?gist=8e091434fffaa4bc28e723e5a88203fd&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">say, on the Playground</a>), you can see that the compiler settles on <code>&#39;_</code> as the lifetime it infers and it uses it everywhere. When you introduce a compiler error though.. you can&#39;t see this."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481240498, "post_id": 41049935, "comment_id": 69309045, "body": "I&#39;d be interested in a reference for how the inference (especially on closures, which seem a bit special) works..."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481242613, "post_id": 41049935, "comment_id": 69309683, "body": "@ChrisEmerson The MIR was what I used as a reference. Specifically, <a href=\"https://play.rust-lang.org/?gist=69f44cda87a709e920a231777ccfe97a&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">it appears to declare an <code>Iter</code> instance where the lifetime used matches that of the output parameter</a>, in the MIR generated for the closure. If I have misinterpreted that I apologise."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481243201, "post_id": 41049935, "comment_id": 69309849, "body": "I haven&#39;t really looked into MIR yet - I should.  But for detail questions like this I really miss an authoritative language spec (as opposed to what the current compiler does, which is useful but might not be as intended, e.g. might include bugs)."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1481243550, "post_id": 41049935, "comment_id": 69309954, "body": "@ChrisEmerson A fair point. There is probably something in the <i>rvalue/lvalue</i> parts of the Rust reference that explains how the compiler will infer the lifetime given its surrounding environment. If I get a chance later I will try and find it."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 4, "last_activity_date": 1481235980, "creation_date": 1481235980, "answer_id": 41049935, "question_id": 41049270, "link": "https://stackoverflow.com/questions/41049270/why-does-a-closure-passed-to-flat-map-without-a-type-annotation-compile-while-o/41049935#41049935", "title": "Why does a closure passed to flat_map without a type annotation compile, while one with an annotation does not?", "body": "<p>The compiler is worried that your code can produce dangling pointers. When you leave off the type annotation, the compiler correctly infers the lifetime of the inner references in relation to the outer references.</p>\n\n<p>However, when you annotate the type and <em>don't</em> explain to the compiler how the lifetimes of the internal references relate to the outer references (that is, how the <code>words: &amp;Vec&lt;String&gt;</code>/internal references relate to the <code>input: &amp;Vec&lt;Vec&lt;String&gt;&gt;</code>/outer references), the compiler freaks out.</p>\n\n<p>The easy fix, is to let the compiler know that the inner references live at least the same lifetime as the outer one:</p>\n\n<pre><code>fn transform&lt;'a&gt;(input: &amp;'a Vec&lt;Vec&lt;String&gt;&gt;) {\n    input.iter().flat_map(|words: &amp;'a Vec&lt;String&gt;| words.iter());\n}\n</code></pre>\n\n<p>Hopefully that makes sense. In Rust, a reference can't outlive what it references. In the eyes of the compiler, your <code>input</code> reference might go away before your <code>words</code> references do (which is bad because <code>words</code> references items inside <code>input</code>). So if you're not going to let the compiler infer the lifetimes, you need to be explicit about it.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user634175"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 245, "favorite_count": 0, "accepted_answer_id": 41049935, "answer_count": 1, "score": 2, "last_activity_date": 1481235980, "creation_date": 1481233175, "last_edit_date": 1481233430, "question_id": 41049270, "link": "https://stackoverflow.com/questions/41049270/why-does-a-closure-passed-to-flat-map-without-a-type-annotation-compile-while-o", "title": "Why does a closure passed to flat_map without a type annotation compile, while one with an annotation does not?", "body": "<p>Why does this, with no type annotation on the closure, compile?</p>\n\n<pre><code>fn transform(input: &amp;Vec&lt;Vec&lt;String&gt;&gt;) {\n    input.iter().flat_map(|words| words.iter());\n}\n</code></pre>\n\n<p>But this doesn't?</p>\n\n<pre><code>fn transform(input: &amp;Vec&lt;Vec&lt;String&gt;&gt;) {\n    input.iter().flat_map(|words: &amp;Vec&lt;String&gt;| words.iter());\n}\n</code></pre>\n\n<p>Is the inferred type not <code>&amp;Vec&lt;String&gt;</code>? Or do I need to annotate the lifetime too, as this seems to be about the closure not living long enough?</p>\n\n<p>The error for in the latter snippet is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n --&gt; src/main.rs:2:55\n  |\n2 |     input.iter().flat_map(|words: &amp;Vec&lt;String&gt;| words.iter());\n  |                                                       ^^^^\n  |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the block at 2:48...\n --&gt; src/main.rs:2:49\n  |\n2 |     input.iter().flat_map(|words: &amp;Vec&lt;String&gt;| words.iter());\n  |                                                 ^^^^^^^^^^^^\nnote: ...so that reference does not outlive borrowed content\n --&gt; src/main.rs:2:49\n  |\n2 |     input.iter().flat_map(|words: &amp;Vec&lt;String&gt;| words.iter());\n  |                                                 ^^^^^\nnote: but, the lifetime must be valid for the method call at 2:4...\n --&gt; src/main.rs:2:5\n  |\n2 |     input.iter().flat_map(|words: &amp;Vec&lt;String&gt;| words.iter());\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...so type `fn(std::slice::Iter&lt;'_, std::vec::Vec&lt;std::string::String&gt;&gt;, [closure@src/main.rs:2:27: 2:61]) -&gt; std::iter::FlatMap&lt;std::slice::Iter&lt;'_, std::vec::Vec&lt;std::string::String&gt;&gt;, std::slice::Iter&lt;'_, std::string::String&gt;, [closure@src/main.rs:2:27: 2:61]&gt; {&lt;std::slice::Iter&lt;'_, std::vec::Vec&lt;std::string::String&gt;&gt; as std::iter::Iterator&gt;::flat_map::&lt;std::slice::Iter&lt;'_, std::string::String&gt;, [closure@src/main.rs:2:27: 2:61]&gt;}` of expression is valid during the expression\n --&gt; src/main.rs:2:5\n  |\n2 |     input.iter().flat_map(|words: &amp;Vec&lt;String&gt;| words.iter());\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1481217309, "post_id": 41045011, "comment_id": 69297924, "body": "Have you looked at the <a href=\"http://stackoverflow.com/search?q=is%3Aq+cannot+borrow+immutable+borrowed+content+as+mutable\"><b>23 other questions with the same error message</b></a>? What makes <i>this</i> question different from any of those? There&#39;s even one titled <a href=\"http://stackoverflow.com/q/28008585/155423\">Changing a node in a tree in Rust</a>, which seems highly relevant. A good amount of <a href=\"http://meta.stackoverflow.com/q/261592/155423\">effort is expected from question askers</a>, and at least finding other questions with the same error message and data structure seems a bare minimum."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481217424, "post_id": 41045011, "comment_id": 69297996, "body": "As for idiomatic Rust, you should not call your variable <code>_data</code>. Leading underscores are used to indicate <i>unused variables</i>. That variable is very much used."}, {"owner": {"reputation": 8871, "user_id": 1132871, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/IO6V2.jpg?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/1132871/alex"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481218308, "post_id": 41045011, "comment_id": 69298521, "body": "@Shepmaster what is the better convention for input arguments of constructing functions?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1481218426, "post_id": 41045011, "comment_id": 69298580, "body": "In general, there&#39;s nothing wrong with variable shadowing in Rust. However, there&#39;s no shadowing occurring here; just calling it <code>data</code> is fine. Remember that the name is <i>shown to users</i> when they browse your documentation as well."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1481217897, "creation_date": 1481217897, "answer_id": 41045302, "question_id": 41045011, "link": "https://stackoverflow.com/questions/41045011/cannot-borrow-immutable-borrowed-content-as-mutable-when-implementing-a-binary-t/41045302#41045302", "title": "Cannot borrow immutable borrowed content as mutable when implementing a binary tree with Rc", "body": "<p>Here's a <a href=\"/help/mcve\">MCVE</a> of your problem:</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct Node;\n\nimpl Node {\n    fn insert_left(&amp;mut self) {}\n}\n\nfn main() {\n    let root = Rc::new(Node);\n    root.insert_left();\n}\n</code></pre>\n\n<p>You can arrive at an example like this by removing as much code as possible while still getting the same error. This process helps tremendously to build understanding of the problem.</p>\n\n<p>The problem is that <code>Rc</code> disallows mutation of any kind. As <a href=\"https://doc.rust-lang.org/std/rc/index.html\" rel=\"noreferrer\">stated in the documentation</a>:</p>\n\n<blockquote>\n  <p>Shared pointers in Rust disallow mutation by default, and <code>Rc</code> is no exception. If you need to mutate through an <code>Rc</code>, use <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"noreferrer\"><code>Cell</code></a> or <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"noreferrer\"><code>RefCell</code></a>.</p>\n</blockquote>\n\n<p>Therefore, there's no way to go from a <code>Rc&lt;Foo&gt;</code> to a <code>&amp;mut Foo</code>, which would be needed to call the <code>insert_left</code> method.</p>\n\n<p>As documented, you can use one of the types that allows <em>interior mutability</em>, such as a <code>Cell</code> or <code>RefCell</code>. These function a bit like a mutex, but are not valid for multithreaded scenarios. They ensure that only one mutable reference to a value is available at a time, a key component of Rust's safety.</p>\n\n<p>If you don't need the functionality of <code>Rc</code>'s sharing, you can just move to having an <code>Option&lt;Box&lt;Node&gt;&gt;</code> as well.</p>\n"}], "owner": {"reputation": 8871, "user_id": 1132871, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/IO6V2.jpg?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/1132871/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1799, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1481217897, "creation_date": 1481216885, "last_edit_date": 1481217710, "question_id": 41045011, "link": "https://stackoverflow.com/questions/41045011/cannot-borrow-immutable-borrowed-content-as-mutable-when-implementing-a-binary-t", "title": "Cannot borrow immutable borrowed content as mutable when implementing a binary tree with Rc", "body": "<p>I want to implement a binary tree. My main language is C++ so the code is probably not idiomatic Rust, but compiling the following code:</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct Node {\n    left: Option&lt;Rc&lt;Node&gt;&gt;,\n    right: Option&lt;Rc&lt;Node&gt;&gt;,\n    data: String,\n}\n\n\nimpl Node {\n    fn new(_data: String) -&gt; Node {\n        Node {\n            data : _data.clone(),\n            left : None,\n            right : None,\n        }\n    }\n\n    fn insert_left(&amp;mut self, mut node: &amp;Rc&lt;Node&gt;) {\n        self.left = Some(node.clone());\n    }\n\n    fn insert_right(&amp;mut self, mut node: &amp;Rc&lt;Node&gt;) {\n        self.left = Some(node.clone());\n    }\n}\n\nfn main() {\n    let mut root = Rc::new(Node::new(String::from(\"root\")));\n    let mut left = Rc::new(Node::new(String::from(\"left\")));\n    root.insert_left(&amp;left);\n}\n</code></pre>\n\n<p>I have the compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow immutable borrowed content as mutable\n  --&gt; so.rs:31:9\n   |\n31 |         root.insert_left(&amp;left);\n   |         ^^^^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>I can't understand what is wrong here. After some try-mistake iterations I found out that problem lies in the <code>insert_left()</code> function: if <code>self</code> is an immutable reference, then it compiles with commented out content, but an immutable reference does not allow my to accomplish my goal.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 1, "creation_date": 1481215242, "post_id": 41043975, "comment_id": 69296606, "body": "Is is possible to include a <a href=\"http://stackoverflow.com/help/mcve\">Minimal, Complete, and Verifiable</a> example that reproduces your problem?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481215919, "post_id": 41043975, "comment_id": 69297035, "body": "Related: <a href=\"http://stackoverflow.com/q/36645452/155423\">variable does not live long enough when storing a csv::DecodedRecords iterator</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481216041, "post_id": 41043975, "comment_id": 69297120, "body": "<i>I would think move semantics would apply, making <code>reader</code> live as long as the struct</i> \u2014 kind of &quot;yes&quot;, kind of &quot;no&quot;. Lifetimes mark how long a value lives <b>at the current address</b>.  When you move <code>reader</code>, you invalidate any references to it because those references contain the address of the value, which just changed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1481216129, "post_id": 41043975, "comment_id": 69297182, "body": "Note that your function has a warning sign in it: <code>fn new(file_path: &amp;str, country: &amp;str) -&gt; Result&lt;PopulationIter&lt;&#39;a&gt;, Box&lt;Error&gt;&gt;</code> - it returns a lifetime <i>chosen by the caller</i> that isn&#39;t constrained by any input lifetimes. See also <a href=\"http://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a>"}], "owner": {"reputation": 464, "user_id": 4660145, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/61039b2e8fce93ae427a1173273cbeaa?s=128&d=identicon&r=PG&f=1", "display_name": "Momh", "link": "https://stackoverflow.com/users/4660145/momh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 46, "favorite_count": 0, "closed_date": 1481215939, "answer_count": 0, "score": 1, "last_activity_date": 1481215720, "creation_date": 1481213692, "last_edit_date": 1481215720, "question_id": 41043975, "link": "https://stackoverflow.com/questions/41043975/rust-lifetime-and-ownership-need-an-hand", "closed_reason": "Duplicate", "title": "Rust lifetime and ownership: need an hand", "body": "<p>I'm trying to encapsulate a CSV iterator into one of my structs like this:</p>\n\n<pre><code>struct PopulationCount {\n    city: String,\n    country: String,\n    count: u64,\n}\n\nstruct PopulationIter&lt;'a&gt; {\n    reader: csv::Reader&lt;std::fs::File&gt;,\n    records: DecodedRecords&lt;'a, std::fs::File, Row&gt;,\n}\n\nimpl&lt;'a&gt; PopulationIter&lt;'a&gt; {\n    fn new(file_path: &amp;str, country: &amp;str) -&gt; Result&lt;PopulationIter&lt;'a&gt;, Box&lt;Error&gt;&gt; {\n        let file = File::open(file_path)?;\n        let mut reader = csv::Reader::from_reader(file);\n\n        let decoded_records = reader.decode::&lt;Row&gt;();\n\n        Ok(PopulationIter {\n            reader: reader,\n            records: decoded_records,\n        })\n    }\n}\n\nimpl&lt;'a&gt; Iterator for PopulationIter&lt;'a&gt; {\n    type Item = csv::Result&lt;Row&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.records.next()\n    }\n}\n</code></pre>\n\n<p>As far as I understand, <code>DecodedRecords</code> holds a reference to the <code>csv::Reader</code>, that's why the <code>csv::Reader</code> must live as long as the <code>DecodedRecords</code>.</p>\n\n<p>Trying to compile this code gives me this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `reader` does not live long enough\n  --&gt; src/main.rs:39:31\n   |\n39 |         let decoded_records = reader.decode::&lt;Row&gt;();\n   |                               ^^^^^^ does not live long enough\n...\n42 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the block at 34:85...\n  --&gt; src/main.rs:34:86\n   |\n34 |     fn new(file_path: &amp;str, country: &amp;str) -&gt; Result&lt;PopulationIter&lt;'a&gt;, Box&lt;Error&gt;&gt; {\n   |                                                                                      ^\n</code></pre>\n\n<p>I don't understand this since the reader is passed to the <code>PopulationIter</code> struct, I would think move semantics would apply, making <code>reader</code> live as long as the struct. This is obviously not what happens here.</p>\n"}, {"tags": ["json", "rust", "serde"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481210605, "post_id": 41042767, "comment_id": 69293291, "body": "As a note, there&#39;s no <i>performance</i> downside to having a nested struct; there&#39;s only code organization to worry about."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1481212523, "post_id": 41042767, "comment_id": 69294762, "body": "This is not possible yet: <a href=\"https://github.com/serde-rs/serde/issues/119\" rel=\"nofollow noreferrer\">github.com/serde-rs/serde/issues/119</a>"}], "answers": [{"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 8, "last_activity_date": 1550016390, "last_edit_date": 1550016390, "creation_date": 1519592353, "answer_id": 48978402, "question_id": 41042767, "link": "https://stackoverflow.com/questions/41042767/is-it-possible-to-flatten-sub-object-fields-while-parsing-with-serde-json/48978402#48978402", "title": "Is it possible to flatten sub-object fields while parsing with serde_json?", "body": "<p>There is no built-in way to do this with attributes, but you can write your own <code>Deserialize</code> impl for your <code>Object</code> type that deserializes first to some intermediate helper representation and then rearranges the data into the desired struct.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\n\nextern crate serde;\nextern crate serde_json;\n\nuse serde::{Deserialize, Deserializer};\n\n#[derive(Debug)]\nstruct Object {\n    name: String,\n    count: i32,\n    foo: String,\n}\n\nimpl&lt;'de&gt; Deserialize&lt;'de&gt; for Object {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;Self, D::Error&gt;\n        where D: Deserializer&lt;'de&gt;\n    {\n        #[derive(Deserialize)]\n        struct Outer {\n            name: String,\n            info: Inner,\n        }\n\n        #[derive(Deserialize)]\n        struct Inner {\n            count: i32,\n            foo: String,\n        }\n\n        let helper = Outer::deserialize(deserializer)?;\n        Ok(Object {\n            name: helper.name,\n            count: helper.info.count,\n            foo: helper.info.foo,\n        })\n    }\n}\n\nfn main() {\n    let j = r#\"{\n                 \"name\": \"myobject\",\n                 \"info\": {\n                   \"count\": 3,\n                   \"foo\": \"bar\"\n                 }\n               }\"#;\n\n    println!(\"{:#?}\", serde_json::from_str::&lt;Object&gt;(j).unwrap());\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>Object {\n    name: \"myobject\",\n    count: 3,\n    foo: \"bar\"\n}\n</code></pre>\n\n<hr>\n\n<p>There are three materially different places where insignificant nesting arises:</p>\n\n<ol>\n<li>adjacent to other fields </li>\n<li>by itself at the top level</li>\n<li>by itself below the top level</li>\n</ol>\n\n<p>All three require different approaches. #1 is observed in this question.</p>\n\n<p>To solve #2 or #3, see <a href=\"https://stackoverflow.com/q/54657873/155423\">Is there a way to omit wrapper/root objects when deserializing objects with Serde?</a></p>\n"}], "owner": {"reputation": 336, "user_id": 3748215, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed0e35e4fdc144d63a02e84d2e6e1168?s=128&d=identicon&r=PG&f=1", "display_name": "eddy", "link": "https://stackoverflow.com/users/3748215/eddy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2502, "favorite_count": 0, "accepted_answer_id": 48978402, "answer_count": 1, "score": 13, "last_activity_date": 1550016390, "creation_date": 1481210158, "last_edit_date": 1481210416, "question_id": 41042767, "link": "https://stackoverflow.com/questions/41042767/is-it-possible-to-flatten-sub-object-fields-while-parsing-with-serde-json", "title": "Is it possible to flatten sub-object fields while parsing with serde_json?", "body": "<p><code>#[serde(rename)]</code> seems to be the right option, but the documentation  does not state if it is possible or how to do it.</p>\n\n<p>This JSON object:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n   \"name\" : \"myobject\"\n   \"info\" : \n   {\n      \"counter\" : \"3\"\n      \"foo\" : \"bar\"\n   }\n}\n</code></pre>\n\n<p>The corresponding <em>flat</em> Rust struct should be:</p>\n\n<pre><code>#[derive(Deserialize)]\nstruct Object {\n    name: String,\n    #[serde(rename=\"info.counter\")] // wrong syntax here !!\n    count: i32,\n    #[serde(rename=\"info::foo\")] // neither this works\n    foo: String,\n}\n</code></pre>\n"}, {"tags": ["rust", "pattern-matching"], "answers": [{"comments": [{"owner": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1481194265, "post_id": 41037267, "comment_id": 69282500, "body": "Not sure what you&#39;re doing on your second bit of code. What is <code>x</code>? Also, why is the <code>SERVER_TOKEN</code> match terminated in a simple colon?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1481194783, "post_id": 41037267, "comment_id": 69282847, "body": "<code>x</code> is just a dummy name which mathes anything.  I can&#39;t see a colon (did you mean the comma?); I left out all the handling that&#39;s not relevant to the question to make the example shorter."}, {"owner": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "edited": false, "score": 0, "creation_date": 1481195017, "post_id": 41037267, "comment_id": 69282960, "body": "Yeah, I meant, comma, not sure why I wrote colon. I see what you mean now, thanks for taking the time to help me :)"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 12, "last_activity_date": 1481193237, "creation_date": 1481193237, "answer_id": 41037267, "question_id": 41037114, "link": "https://stackoverflow.com/questions/41037114/why-do-i-get-an-error-about-non-exhaustive-patterns/41037267#41037267", "title": "Why do I get an error about non-exhaustive patterns?", "body": "<p>Here <code>SERVER_TOKEN</code> is a constant equal to <code>Token(0)</code>, so let's simplify the match:</p>\n\n<pre><code>match token {\n    Token(0) =&gt; { },\n}\n</code></pre>\n\n<p>While <em>you</em> know that you won't get any other tokens, the compiler doesn't know, and the type allows other values like <code>Token(1)</code>.  You can add a case to cover the other cases, and just <code>panic</code>.  I like to print out what was matched if it ever does happen as a debug aid.</p>\n\n<pre><code>match token {\n    SERVER_TOKEN =&gt; { },\n    x =&gt; panic!(\"Unexpected invalid token {:?}\", x),\n}\n</code></pre>\n\n<p>This assumes that <code>Token</code> implements <code>Debug</code>.</p>\n"}], "owner": {"reputation": 1985, "user_id": 2080712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/NyaqQ.jpg?s=128&g=1", "display_name": "Bernardo Meurer", "link": "https://stackoverflow.com/users/2080712/bernardo-meurer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3632, "favorite_count": 3, "accepted_answer_id": 41037267, "answer_count": 1, "score": 8, "last_activity_date": 1481204248, "creation_date": 1481192786, "last_edit_date": 1481204248, "question_id": 41037114, "link": "https://stackoverflow.com/questions/41037114/why-do-i-get-an-error-about-non-exhaustive-patterns", "title": "Why do I get an error about non-exhaustive patterns?", "body": "<p>I'm writing a chat server using <a href=\"https://docs.rs/mio/0.5.1/mio/\" rel=\"noreferrer\">mio</a> (0.5.1), following <a href=\"https://nbaksalyar.github.io/2015/07/10/writing-chat-in-rust.html\" rel=\"noreferrer\">this tutorial</a>. With it, I have written the following Handler:</p>\n\n<pre><code>const SERVER_TOKEN: Token = Token(0);\n\nimpl Handler for WebSocketServer {\n    type Timeout = usize;\n    type Message = ();\n\n    fn ready(&amp;mut self, event_loop: &amp;mut EventLoop&lt;WebSocketServer&gt;,\n             token: Token, events: EventSet)\n    {\n        match token {\n            SERVER_TOKEN =&gt; {\n                let client_socket = match self.socket.accept() {\n                    Err(e) =&gt; {\n                        println!(\"Accept error: {}\", e);\n                        return;\n                    },\n                    Ok(None) =&gt; unreachable!(\"Accept has returned 'None'\"),\n                    Ok(Some((sock, addr))) =&gt; sock,\n                };\n\n                self.token_counter += 1;\n                let new_token = Token(self.token_counter);\n\n                self.clients.insert(new_token, client_socket);\n                event_loop.register(&amp;self.clients[&amp;new_token],\n                                    new_token, EventSet::readable(),\n                                    PollOpt::edge() | PollOpt::oneshot()).unwrap();\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>However, in trying to compile it I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0004]: non-exhaustive patterns: `Token(_)` not covered\n  --&gt; src/main.rs:23:15\n   |\n23 |         match token {\n   |               ^^^^^ pattern `Token(_)` not covered\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>Although I understand that this should mean that my <code>match</code> does not cover all possible cases, I do not see how  that is true. </p>\n\n<p>Why am I getting this error, and how may I fix it?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1481297990, "post_id": 41036395, "comment_id": 69334858, "body": "In addition to the value being moved into the map, the value might be moved <i>inside</i> the map any time values are added or removed."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 7, "last_activity_date": 1556459656, "last_edit_date": 1556459656, "creation_date": 1481190769, "answer_id": 41036395, "question_id": 41035869, "link": "https://stackoverflow.com/questions/41035869/how-to-use-a-structs-member-as-its-own-key-when-inserting-the-struct-into-a-map/41036395#41036395", "title": "How to use a struct&#39;s member as its own key when inserting the struct into a map without duplicating it?", "body": "<p>It's not going to work with plain references:</p>\n\n<pre><code>let item = StructThatContainsString {\n    id: \"Some Key\".to_string(),\n    other_data: 0,\n}\n\nms.insert(&amp;item.id, item);\n</code></pre>\n\n<p><code>item</code> is <em>moved</em> into the map, so there can't be any pending borrows/references.</p>\n\n<p>Also, methods like <a href=\"https://doc.rust-lang.org/1.8.0/collections/struct.BTreeMap.html#method.get_mut\" rel=\"nofollow noreferrer\"><code>get_mut()</code></a> would become dangerous or impossible, as it would let you modify the item that has an outstanding reference.</p>\n\n<p>Assuming the reason for wanting to do this is to save space, the obvious options are:</p>\n\n<ul>\n<li><p>Take the key out of the value struct.  If you need it at the same time, you've either got it when looking up a key in the map, or the iterators include both key and value:</p>\n\n<pre><code>struct OnlyKey {\n    id: String,\n}\n\nstruct OnlyValue {\n    other_data: u32,\n}\n</code></pre>\n\n<p>This can be cleaned up with appropriate methods to split apart / recombine the various pieces.</p></li>\n<li><p>Use something like <code>Rc</code> for the key part of the value.  <code>Rc&lt;T&gt;</code> implements <code>Ord</code> (required for <code>BTreeMap</code>) if <code>T</code> does.</p>\n\n<pre><code>struct StructThatContainsString {\n    id: Rc&lt;String&gt;,\n    other_data: u32,\n}\n</code></pre></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 3, "last_activity_date": 1485204955, "last_edit_date": 1485204955, "creation_date": 1485147142, "answer_id": 41799439, "question_id": 41035869, "link": "https://stackoverflow.com/questions/41035869/how-to-use-a-structs-member-as-its-own-key-when-inserting-the-struct-into-a-map/41799439#41799439", "title": "How to use a struct&#39;s member as its own key when inserting the struct into a map without duplicating it?", "body": "<p>Using a single member of a struct as a key in a map can be done (in principle) by using a set with a zero-overhead wrapper struct that only serves to override implementations. </p>\n\n<ul>\n<li>Override <code>Ord, Eq, PartialEq, PartialOrd</code><br>To control it's order in the set.</li>\n<li><p>Override <code>Borrow</code> so <code>BTreeSet.get(..)</code> can take the type used for ordering, instead of the entire struct.</p></li>\n<li><p>One down side with this method is you need to wrap the struct with the container when adding it into the set.</p></li>\n</ul>\n\n<p>Here is a working example:</p>\n\n<pre><code>use ::std::collections::BTreeSet;\n\n#[derive(Debug)]\npub struct MyItem {\n    id: String,\n    num: i64,\n}\n\nmod my_item_ord {\n    use super::MyItem;\n\n    #[derive(Debug)]\n    pub struct MyItem_Ord(pub MyItem);\n\n    use ::std::cmp::{\n        PartialEq,\n        Eq,\n        Ord,\n        Ordering,\n    };\n    use ::std::borrow::Borrow;\n\n    impl PartialEq for MyItem_Ord {\n        fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n            return self.0.id.eq(&amp;other.0.id);\n        }\n\n    }\n    impl PartialOrd for MyItem_Ord {\n        fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {\n            return self.0.id.partial_cmp(&amp;other.0.id);\n        }\n    }\n    impl Eq for MyItem_Ord {}\n    impl Ord for MyItem_Ord {\n        fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {\n            return self.0.id.cmp(&amp;other.0.id);\n        }\n    }\n    impl Borrow&lt;str&gt; for MyItem_Ord {\n        fn borrow(&amp;self) -&gt; &amp;str {\n            return &amp;self.0.id;\n        }\n    }\n}\n\n\nfn main() {\n    use my_item_ord::MyItem_Ord;\n\n    let mut c: BTreeSet&lt;MyItem_Ord&gt; = BTreeSet::new();\n\n    c.insert(MyItem_Ord(MyItem { id: \"Zombie\".to_string(), num: 21, }));\n    c.insert(MyItem_Ord(MyItem { id: \"Hello\".to_string(), num: 1, }));\n    c.insert(MyItem_Ord(MyItem { id: \"World\".to_string(), num: 22, }));\n    c.insert(MyItem_Ord(MyItem { id: \"The\".to_string(), num: 11,  }));\n    c.insert(MyItem_Ord(MyItem { id: \"Brown\".to_string(), num: 33, }));\n    c.insert(MyItem_Ord(MyItem { id: \"Fox\".to_string(), num: 99, }));\n\n    for i in &amp;c {\n        println!(\"{:?}\", i);\n    }\n\n    // Typical '.get()', too verbose needs an entire struct.\n    println!(\"lookup: {:?}\", c.get(&amp;MyItem_Ord(MyItem { id: \"Zombie\".to_string(), num: -1, })));\n    //                                                                            ^^^^^^^ ignored\n\n    // Fancy '.get()' using only string, allowed because 'Borrow&lt;str&gt;' is implemented.\n    println!(\"lookup: {:?}\", c.get(\"Zombie\"));\n\n    println!(\"done!\");\n}\n</code></pre>\n\n<p>To avoid having to define these manually, this can be wrapped up into a macro:</p>\n\n<pre><code>///\n/// Macro to create a container type to be used in a 'BTreeSet' or ordered types\n/// to behave like a map where a key in the struct is used for the key.\n///\n/// For example, data in a set may have a unique identifier which\n/// can be used in the struct as well as a key for it's use in the set.\n///\n///\n/// ```\n/// // Defines 'MyTypeOrd', a container type for existing struct,\n/// // using MyType.uuid is used as the key.\n/// container_order_by_member_impl(MyTypeOrd, MyType, uuid);\n/// ```\n///\n/// See: http://stackoverflow.com/questions/41035869\n\n#[macro_export]\nmacro_rules! container_type_order_by_member_struct_impl {\n    ($t_ord:ident, $t_base:ty, $t_member:ident) =&gt; {\n        /// Caller must define the struct, see: container_type_order_by_member_impl\n        // pub struct $t_ord(pub $t_base);\n        impl PartialEq for $t_ord {\n            fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n                return (self.0).$t_member.eq(&amp;(other.0).$t_member);\n            }\n        }\n        impl PartialOrd for $t_ord {\n            fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;::std::cmp::Ordering&gt; {\n                return (self.0).$t_member.partial_cmp(&amp;(other.0).$t_member);\n            }\n        }\n        impl Eq for $t_ord {}\n        impl Ord for $t_ord {\n            fn cmp(&amp;self, other: &amp;Self) -&gt; ::std::cmp::Ordering {\n                return (self.0).$t_member.cmp(&amp;(other.0).$t_member);\n            }\n        }\n        impl ::std::borrow::Borrow&lt;str&gt; for $t_ord {\n            fn borrow(&amp;self) -&gt; &amp;str {\n                return &amp;(self.0).$t_member;\n            }\n        }\n    }\n}\n\n/// Macro that also defines structs.\n#[macro_export]\nmacro_rules! container_type_order_by_member_impl {\n    (pub $t_ord:ident, $t_base:ty, $t_member:ident) =&gt; {\n        pub struct $t_ord(pub $t_base);\n        container_type_order_by_member_struct_impl!($t_ord, $t_base, $t_member);\n    };\n    ($t_ord:ident, $t_base:ty, $t_member:ident) =&gt; {\n        struct $t_ord(pub $t_base);\n        container_type_order_by_member_struct_impl!($t_ord, $t_base, $t_member);\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1445, "favorite_count": 3, "answer_count": 2, "score": 6, "last_activity_date": 1556459656, "creation_date": 1481189108, "last_edit_date": 1544538275, "question_id": 41035869, "link": "https://stackoverflow.com/questions/41035869/how-to-use-a-structs-member-as-its-own-key-when-inserting-the-struct-into-a-map", "title": "How to use a struct&#39;s member as its own key when inserting the struct into a map without duplicating it?", "body": "<p>Is it possible to insert a struct into a map where the key is owned by the value being inserted?</p>\n\n<p>When using hash-maps in C, this is something which I'm used to doing.</p>\n\n<p>Pseudocode example:</p>\n\n<pre><code>struct MyStruct {\n    pub map: BTreeMap&lt;&amp;String, StructThatContainsString&gt;,\n    // XXX            ^ Rust wants lifetime specified here!\n}\n\nstruct StructThatContainsString {\n    id: String,\n    other_data: u32,\n}\n\nfn my_fn() {\n    let ms = MyStruct { map: BTreeMap::new() };\n\n    let item = StructThatContainsString {\n        id: \"Some Key\".to_string(),\n        other_data: 0,\n    }\n\n    ms.insert(&amp;item.id, item);\n}\n</code></pre>\n\n<p>How can this situation be correctly handled?</p>\n\n<hr>\n\n<ul>\n<li><p>If this isn't possible, could the reverse be done, where the value holds a reference to the key which would be a <code>String</code> ?</p></li>\n<li><p>An alternative could be to use a <code>set</code> instead of a <code>map</code>, then store the entire <code>struct</code> as the key, but only use one of its values when comparing <em>(seems like it would work, but could backfire if you wanted to compare the <code>struct</code> in other contexts)</em>.</p></li>\n</ul>\n"}, {"tags": ["listview", "winapi", "rust"], "answers": [{"comments": [{"owner": {"reputation": 45, "user_id": 7266608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f697c16f03688033108be195830860a6?s=128&d=identicon&r=PG&f=1", "display_name": "Jesper Axelsson", "link": "https://stackoverflow.com/users/7266608/jesper-axelsson"}, "edited": false, "score": 0, "creation_date": 1481215194, "post_id": 41042248, "comment_id": 69296569, "body": "I have actually tried this before, sorry for saying that. I have updated the code for SETITEMCOUNT. I use widestrings and make sure the pointer survive and it seems to be set on the item but still no text visible. Does the pointer have to live in a globalalloc or somesuch?"}, {"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "reply_to_user": {"reputation": 45, "user_id": 7266608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f697c16f03688033108be195830860a6?s=128&d=identicon&r=PG&f=1", "display_name": "Jesper Axelsson", "link": "https://stackoverflow.com/users/7266608/jesper-axelsson"}, "edited": false, "score": 0, "creation_date": 1481218261, "post_id": 41042248, "comment_id": 69298482, "body": "If you check <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb774760(v=vs.85).aspx\" rel=\"nofollow noreferrer\">the documentation for the <code>LVITEM</code> structure</a>, you&#39;ll see in the <code>pszText</code> field documentation that the pointer must remain valid &quot;until after the next notification has been received&quot;. I do not know if this means after the next <code>LVN_GETDISPINFO</code> for any cell or for the specific cell in question, but it does mean it has to survive after you return from your window procedure. I would not know how to do this in Rust; sorry."}, {"owner": {"reputation": 45, "user_id": 7266608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f697c16f03688033108be195830860a6?s=128&d=identicon&r=PG&f=1", "display_name": "Jesper Axelsson", "link": "https://stackoverflow.com/users/7266608/jesper-axelsson"}, "edited": false, "score": 0, "creation_date": 1481218660, "post_id": 41042248, "comment_id": 69298717, "body": "Thanks any way. I have store all string in a global variable and they are valid as long as the program is running. I have even tried allocating them with GlobalAlloc, but still no text in the ListView."}], "tags": [], "owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "is_accepted": false, "score": 0, "last_activity_date": 1481208724, "last_edit_date": 1481208724, "creation_date": 1481208631, "answer_id": 41042248, "question_id": 41035612, "link": "https://stackoverflow.com/questions/41035612/virtual-listview-not-showing-any-text/41042248#41042248", "title": "Virtual listview not showing any text", "body": "<p>You are using a virtual list view control, so you don't use <code>LVM_INSERTITEM</code>; instead, you just call <code>LVM_SETITEMCOUNT</code> to set the item count and then the list view will take care of the rest. In particular, you should not be making <code>LVITEM</code>s manually, and especially not be using <code>LPSTR_TEXTCALLBACK</code>.</p>\n\n<p>More references:</p>\n\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/hh270411(v=vs.85).aspx\" rel=\"nofollow noreferrer\">https://msdn.microsoft.com/en-us/library/windows/desktop/hh270411(v=vs.85).aspx</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20050615-30/?p=35313\" rel=\"nofollow noreferrer\">https://blogs.msdn.microsoft.com/oldnewthing/20050615-30/?p=35313</a></li>\n</ul>\n\n<p>Also, the messages that end with <code>A</code> are for backwards compatibility and are not Unicode-aware; if you handle the <code>W</code> messages you don't need to handle them.</p>\n"}, {"tags": [], "owner": {"reputation": 449289, "user_id": 65863, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f00013ceab8fb1928885c5c172fbfd4a?s=128&d=identicon&r=PG", "display_name": "Remy Lebeau", "link": "https://stackoverflow.com/users/65863/remy-lebeau"}, "is_accepted": true, "score": 1, "last_activity_date": 1481218942, "creation_date": 1481218942, "answer_id": 41045604, "question_id": 41035612, "link": "https://stackoverflow.com/questions/41035612/virtual-listview-not-showing-any-text/41045604#41045604", "title": "Virtual listview not showing any text", "body": "<pre><code>if (mask &amp; LVIF_TEXT) == 0\n</code></pre>\n\n<p>This statement is checking if the <code>LVIF_TEXT</code> flag <em>IS NOT</em> present.  You need to provide text when the flag <em>IS</em> present instead:</p>\n\n<pre><code>if (mask &amp; LVIF_TEXT) != 0\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>if (mask &amp; LVIF_TEXT) == LVIF_TEXT\n</code></pre>\n"}], "owner": {"reputation": 45, "user_id": 7266608, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f697c16f03688033108be195830860a6?s=128&d=identicon&r=PG&f=1", "display_name": "Jesper Axelsson", "link": "https://stackoverflow.com/users/7266608/jesper-axelsson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 0, "accepted_answer_id": 41045604, "answer_count": 2, "score": 1, "last_activity_date": 1481218942, "creation_date": 1481188253, "last_edit_date": 1481215370, "question_id": 41035612, "link": "https://stackoverflow.com/questions/41035612/virtual-listview-not-showing-any-text", "title": "Virtual listview not showing any text", "body": "<p>I am trying to create a virtual listview in Rust using the winapi. I got an normal listview working, but the virtual one won't show any data. \nI set the number of items with: </p>\n\n<pre><code>user32::SendMessageW(list_hwnd, winapi::LVM_SETITEMCOUNT, (ALL_DATA.read().unwrap().len()-1) as u64, 0);\n</code></pre>\n\n<p>I create the list itself with: </p>\n\n<pre><code>let style = WS_VISIBLE | WS_CHILD | WS_TABSTOP |\n            LVS_NOSORTHEADER | LVS_OWNERDATA | LVS_AUTOARRANGE |\n            LVS_SINGLESEL | LVS_REPORT;\nlet hwnd = user32::CreateWindowExW(\n    0,\n    wc.as_ptr() as *mut _,\n    to_wstring(\"\").as_ptr() as *mut _,\n    style,\n    0,\n    0,\n    rc_client.right - rc_client.left,\n    rc_client.bottom - rc_client.top,\n    hwnd_parent,\n    0 as HMENU,\n    // IDC_MAIN_LISTVIEW,\n    h_instance,\n    std::ptr::null_mut()\n);\n</code></pre>\n\n<p>In the <code>LVN_GETDISPINFOW</code> message I try to add text with:</p>\n\n<pre><code>if (mask &amp; LVIF_TEXT) == 0 {\n    let len = ALL_DATA.read().unwrap().len();\n    if ix &gt;= len - 1 {\n        println!(\"ix bigger then index! ix: {:?} len: {:?}\", ix, len);\n        return 0;\n\n    }\n    let ref item = ALL_DATA.read().unwrap()[ix];\n\n    let f = |key| {\n        let ref vec = STRING_CACHE.read().unwrap()[(key)];\n        let ptr = STRING_CACHE.read().unwrap()[(key)].as_ptr();\n        (ptr, vec.len())\n    };\n\n    let (ptr, _) = match (*(l_param as *const NMLVDISPINFOW)).item.iSubItem {\n        0 =&gt; f(&amp;item.item),\n        1 =&gt; f(&amp;item.sub_item),\n        n =&gt; {\n            println!(\"Found subitem: {:?}\", n);\n            return 0;\n        }\n    };\n\n    // Try to set text in dispinfo\n    (*(l_param as *mut NMLVDISPINFOW)).item.pszText = ptr as LPWSTR;\n\n    return 0;\n}\n</code></pre>\n\n<p><code>STRING_CACHE</code> is an <code>HashMap&lt;String, Vec&lt;u16&gt;&gt;</code>. I use this so the string is not dropped when returning from <code>window_prow()</code>.</p>\n\n<p>When I compile and run the code, it seems to populate the listview but no text is visible. </p>\n\n<p>The <a href=\"https://github.com/JesperAxelsson/rust-virtual-listview\" rel=\"nofollow noreferrer\">complete code can be found at GitHub</a>.</p>\n"}, {"tags": ["string", "rust", "type-conversion"], "answers": [{"comments": [{"owner": {"reputation": 244, "user_id": 867921, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/0e18bee08462857a8ffbf8e6ca6d26a1?s=128&d=identicon&r=PG&f=1", "display_name": "piotao", "link": "https://stackoverflow.com/users/867921/piotao"}, "edited": false, "score": 0, "creation_date": 1596059366, "post_id": 41034751, "comment_id": 111692768, "body": "OK, but how to change a single u8 variable to string? to_string() seems to not work, since it yells &quot;no method named <code>as_string</code> found for type <code>u8</code> in the current scope&quot;... What I want is to change a small number (like 32) to string &quot;32&quot;."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 72, "last_activity_date": 1566151592, "last_edit_date": 1566151592, "creation_date": 1481185039, "answer_id": 41034751, "question_id": 41034635, "link": "https://stackoverflow.com/questions/41034635/how-do-i-convert-between-string-str-vecu8-and-u8/41034751#41034751", "title": "How do I convert between String, &amp;str, Vec&lt;u8&gt; and &amp;[u8]?", "body": "<h1>From <code>&amp;str</code></h1>\n\n<ul>\n<li><code>&amp;str -&gt; String</code> has <a href=\"https://stackoverflow.com/q/31331356/155423\">many equally valid methods</a>: <code>String::from(st)</code>, <code>st.to_string()</code>, <code>st.to_owned()</code>.\n\n<ul>\n<li>But I suggest you stick with one of them within a single project. The major advantage of <code>String::from</code> is that you can use it as an argument to a <code>map</code> method. So instead of <code>x.map(|s| String::from(s))</code> you can often use <code>x.map(String::from)</code>.</li>\n</ul></li>\n<li><code>&amp;str</code> -> <code>&amp;[u8]</code> is done by <code>st.as_bytes()</code></li>\n<li><code>&amp;str</code> -> <code>Vec&lt;u8&gt;</code> is a combination of <code>&amp;str -&gt; &amp;[u8] -&gt; Vec&lt;u8&gt;</code>, i.e. <code>st.as_bytes().to_vec()</code> or <code>st.as_bytes().to_owned()</code></li>\n</ul>\n\n<h1>From <code>String</code></h1>\n\n<ul>\n<li><code>String -&gt; &amp;str</code> should just be <code>&amp;s</code> where coercion is available or <code>s.as_str()</code> where it is not.</li>\n<li><code>String -&gt; &amp;[u8]</code> is the same as <code>&amp;str -&gt; &amp;[u8]</code>: <code>s.as_bytes()</code></li>\n<li><code>String -&gt; Vec&lt;u8&gt;</code> has a custom method: <code>s.into_bytes()</code></li>\n</ul>\n\n<h1>From <code>&amp;[u8]</code></h1>\n\n<ul>\n<li><code>&amp;[u8] -&gt; Vec&lt;u8&gt;</code> is done by <code>u.to_owned()</code> or <code>u.to_vec()</code>. They do the same thing, but <code>to_vec</code> has the slight advantage of being unambiguous about the type it returns.</li>\n<li><code>&amp;[u8] -&gt; &amp;str</code> doesn't actually exist, that would be <code>&amp;[u8] -&gt; Result&lt;&amp;str, Error&gt;</code>, provided via <code>str::from_utf8(u)</code>\n\n<ul>\n<li><code>str::from_utf8(u).unwrap()</code> works, but you should prefer better error handling (see <a href=\"https://doc.rust-lang.org/book/error-handling.html#the-result-type\" rel=\"noreferrer\">Error handling - The Result type</a>).</li>\n</ul></li>\n<li><code>&amp;[u8] -&gt; String</code> is the combination of <code>&amp;[u8] -&gt; Result&lt;&amp;str, Error&gt; -&gt; Result&lt;String, Error&gt;</code> \n\n<ul>\n<li><code>String::from_utf8(u).unwrap()</code> works, but prefer better error handling (see <a href=\"https://doc.rust-lang.org/book/error-handling.html#the-result-type\" rel=\"noreferrer\">Error handling - The Result type</a> and also <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.map\" rel=\"noreferrer\"><code>Result::map</code></a>.</li>\n</ul></li>\n</ul>\n\n<h1>From <code>Vec&lt;u8&gt;</code></h1>\n\n<ul>\n<li><code>Vec&lt;u8&gt; -&gt; &amp;[u8]</code> should be just <code>&amp;v</code> where coercion is available, or <code>as_slice</code> where it's not.</li>\n<li><code>Vec&lt;u8&gt; -&gt; &amp;str</code> is the same as <code>Vec&lt;u8&gt; -&gt; &amp;[u8] -&gt; Result&lt;&amp;str, Error&gt;</code> i.e. <code>str::from_utf8(&amp;v)</code>\n\n<ul>\n<li><code>str::from_utf8(&amp;v).unwrap()</code> works, but prefer better error handling (see <a href=\"https://doc.rust-lang.org/book/error-handling.html#the-result-type\" rel=\"noreferrer\">Error handling - The Result type</a>)</li>\n</ul></li>\n<li><code>Vec&lt;u8&gt; -&gt; String</code> doesn't actually exist, that would be <code>Vec&lt;u8&gt; -&gt; Result&lt;String, Error&gt;</code> via <code>String::from_utf8(v)</code>\n\n<ul>\n<li><code>String::from_utf8(v).unwrap()</code> works, but prefer better error handling (see <a href=\"https://doc.rust-lang.org/book/error-handling.html#the-result-type\" rel=\"noreferrer\">Error handling - The Result type</a>).</li>\n</ul></li>\n</ul>\n\n<p>Coercion is available whenever the target is not generic but explicitly typed as <code>&amp;str</code> or <code>&amp;[u8]</code>, respectively. The Rustonomicon has a chapter on <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"noreferrer\">coercions</a> with more details about coercion sites.</p>\n\n<hr>\n\n<h3>tl;dr</h3>\n\n<pre class=\"lang-none prettyprint-override\"><code>&amp;str    -&gt; String  | String::from(s) or s.to_string() or s.to_owned()\n&amp;str    -&gt; &amp;[u8]   | s.as_bytes()\n&amp;str    -&gt; Vec&lt;u8&gt; | s.as_bytes().to_vec() or s.as_bytes().to_owned()\nString  -&gt; &amp;str    | &amp;s if possible* else s.as_str()\nString  -&gt; &amp;[u8]   | s.as_bytes()\nString  -&gt; Vec&lt;u8&gt; | s.into_bytes()\n&amp;[u8]   -&gt; &amp;str    | s.to_vec() or s.to_owned()\n&amp;[u8]   -&gt; String  | std::str::from_utf8(s).unwrap(), but don't**\n&amp;[u8]   -&gt; Vec&lt;u8&gt; | String::from_utf8(s).unwrap(), but don't**\nVec&lt;u8&gt; -&gt; &amp;str    | &amp;s if possible* else s.as_slice()\nVec&lt;u8&gt; -&gt; String  | std::str::from_utf8(&amp;s).unwrap(), but don't**\nVec&lt;u8&gt; -&gt; &amp;[u8]   | String::from_utf8(s).unwrap(), but don't**\n\n* target should have explicit type (i.e., checker can't infer that)\n\n** handle the error properly instead\n</code></pre>\n"}], "owner": {"reputation": 11374, "user_id": 437679, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/ded1c591320cc2be6aa8109d02a74640?s=128&d=identicon&r=PG", "display_name": "Martin Algesten", "link": "https://stackoverflow.com/users/437679/martin-algesten"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7474, "favorite_count": 32, "accepted_answer_id": 41034751, "answer_count": 1, "score": 51, "last_activity_date": 1617907409, "creation_date": 1481184541, "last_edit_date": 1617907409, "question_id": 41034635, "link": "https://stackoverflow.com/questions/41034635/how-do-i-convert-between-string-str-vecu8-and-u8", "title": "How do I convert between String, &amp;str, Vec&lt;u8&gt; and &amp;[u8]?", "body": "<p>A new Rustacean like me struggles with juggling these types: <code>String</code>, <code>&amp;str</code>, <code>Vec&lt;u8&gt;</code>, <code>&amp;[u8]</code>.</p>\n<p>In time, I hope to have an epiphany and suddenly get why some library calls use one or the other. Until then, I need help to map out each idiomatic transition.</p>\n<p>Given these types:</p>\n<pre><code>let st: &amp;str = ...;\nlet s:  String = ...;\nlet u:  &amp;[u8] = ...;\nlet v:  Vec&lt;u8&gt; = ...;\n</code></pre>\n<p>I think I have figured these out, but are they idiomatic?</p>\n<pre class=\"lang-none prettyprint-override\"><code>&amp;str    -&gt; String    String::from(st)\n&amp;str    -&gt; &amp;[u8]     st.as_bytes()\nString  -&gt; &amp;str      s.as_str()\n&amp;[u8]   -&gt; &amp;str      str::from_utf8(u)\nVec&lt;u8&gt; -&gt; String    String::from_utf8(v)\n</code></pre>\n<p>Ultimately I want a complete table of transitions for these types:</p>\n<pre class=\"lang-none prettyprint-override\"><code>&amp;str    -&gt; String\n&amp;str    -&gt; &amp;[u8]\n&amp;str    -&gt; Vec&lt;u8&gt;\nString  -&gt; &amp;str\nString  -&gt; &amp;[u8]\nString  -&gt; Vec&lt;u8&gt;\n&amp;[u8]   -&gt; &amp;str\n&amp;[u8]   -&gt; String\n&amp;[u8]   -&gt; Vec&lt;u8&gt;\nVec&lt;u8&gt; -&gt; &amp;str\nVec&lt;u8&gt; -&gt; String\nVec&lt;u8&gt; -&gt; &amp;[u8]\n</code></pre>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "edited": false, "score": 0, "creation_date": 1481197792, "post_id": 41035063, "comment_id": 69284746, "body": "I&#39;m aware of potential reallocation invalidating the references to the elements of the Vec. That&#39;s why I used Vec&lt;Box&lt;T&gt;&gt;: the references to the Box&lt;T&gt; are unstable, but the references to the T are stable, aren&#39;t they? After all, Vec&lt;Box&lt;T&gt;&gt; does not require Box&lt;T&gt; to be cloneable, so it can&#39;t invalidate the references to the T."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "edited": false, "score": 0, "creation_date": 1481198107, "post_id": 41035063, "comment_id": 69284971, "body": "At that point, what you really want is <code>Rc&lt;T&gt;</code>, because that is literally the definition of a shared owned reference in Rust"}, {"owner": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "edited": false, "score": 0, "creation_date": 1481198503, "post_id": 41035063, "comment_id": 69285230, "body": "The Vec is the (only) owner of the pointer, so reference counting isn&#39;t what I want. It is perfectly fine for the references to be invalidated once the lifetime of the owning Vec ends. (I agree reference counting would avoid the whole ownership problem. But I want the references to be as lightweight as possible for performance reasons.)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "edited": false, "score": 0, "creation_date": 1481199759, "post_id": 41035063, "comment_id": 69286022, "body": "Accessing a <code>T</code> through an <code>Rc&lt;T&gt;</code> is no different from accessing it through a <code>&amp;T</code>. Both are represented by a pointer and nothing more. The storage they point to is a little bigger and cloning <code>Rc</code>s is heavier, but the access is just a single pointer dereference"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1481186307, "creation_date": 1481186307, "answer_id": 41035063, "question_id": 41034046, "link": "https://stackoverflow.com/questions/41034046/is-there-an-idiomatic-way-to-keep-references-to-elements-of-an-ever-growing-cont/41035063#41035063", "title": "Is there an idiomatic way to keep references to elements of an ever-growing container?", "body": "<p>The problem is that your <code>Vec</code> might run out of memory. If that happens, it has to allocate a new (bigger) chunk of memory, copy all the old data over, and delete the old memory allocation. At that point all references into the old container would become invalid.</p>\n\n<p>You could design a <a href=\"https://en.wikipedia.org/wiki/Rope_%28data_structure%29\" rel=\"nofollow noreferrer\">rope</a> (a <code>Vec</code> of <code>Vec</code>), where, once an inner vec is full, you just create a new one, thus never invalidating pointers just by pushing.</p>\n\n<p>That would require some unsafe code and very careful analysis of the borrowing rules that you have to keep up.</p>\n"}, {"comments": [{"owner": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "edited": false, "score": 0, "creation_date": 1481198100, "post_id": 41035828, "comment_id": 69284965, "body": "Reallocation of Vec&#39;s buffer should not be a problem here because the Vec is moving the Box&lt;T&gt;, not the T -- so references to T should remain stable. The index solution is quite suboptimal in my case because identifying the item requires the index plus a reference to the container."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "edited": false, "score": 0, "creation_date": 1481198343, "post_id": 41035828, "comment_id": 69285115, "body": "If you want to stay in safe Rust, though, if you&#39;ve got a reference to <code>*v[0]</code>, you&#39;re borrowing <code>v</code> too, since otherwise Rust can&#39;t catch <code>v[0] = Box::new(&quot;baz&quot;)</code> which would invalidate the reference.  I agree with @ker that <code>Rc&lt;T&gt;</code> may be the best answer here."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 4, "last_activity_date": 1481188974, "creation_date": 1481188974, "answer_id": 41035828, "question_id": 41034046, "link": "https://stackoverflow.com/questions/41034046/is-there-an-idiomatic-way-to-keep-references-to-elements-of-an-ever-growing-cont/41035828#41035828", "title": "Is there an idiomatic way to keep references to elements of an ever-growing container?", "body": "<p>As @ker's answer says, just because you only grow a container doesn't mean references stay valid, as the memory can be reallocated.</p>\n\n<p>Another solution if you're only growing the container is to just store indices instead of references:</p>\n\n<pre><code>fn main() {\n    let mut v = vec![\"Foo\"];    // line 1\n    let x = 0;                  // line 2: just store an index.\n    println!(\"x = {:?}\", v[x]); // Use the index as needed\n    v.push(\"bar\");              // line 4: No problem, there are no references.\n    println!(\"x = {:?}\", v[x]); // line 5: use the index again.\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 1, "last_activity_date": 1481199632, "creation_date": 1481199632, "answer_id": 41039392, "question_id": 41034046, "link": "https://stackoverflow.com/questions/41034046/is-there-an-idiomatic-way-to-keep-references-to-elements-of-an-ever-growing-cont/41039392#41039392", "title": "Is there an idiomatic way to keep references to elements of an ever-growing container?", "body": "<p>Unfortunately there's nothing \"ready to use\" for your usecase, but you can write a wrapper around <code>Vec</code> that does <strong>unsafe</strong> stuff to give you the features you need while keeping the guarantees that Rust needs</p>\n\n<pre><code>struct BoxVec&lt;T&gt;(Vec&lt;Box&lt;T&gt;&gt;);\n\nimpl&lt;T&gt; BoxVec&lt;T&gt; {\n    pub fn new() -&gt; Self { BoxVec(Vec::new()) }\n    pub fn push&lt;'a&gt;(&amp;'a mut self, t: T) -&gt; &amp;'a mut T {\n        let mut b = Box::new(t);\n        let t: &amp;'a mut T = unsafe { std::mem::transmute::&lt;&amp;mut T, &amp;'a mut T&gt;(&amp;mut b) };\n        self.0.push(b);\n        t\n    }\n    pub fn pusher&lt;'a&gt;(&amp;'a mut self) -&gt; BoxVecPusher&lt;'a, T&gt; {\n        BoxVecPusher(self)\n    }\n}\n\nstruct BoxVecPusher&lt;'a, T: 'a&gt;(&amp;'a mut BoxVec&lt;T&gt;);\n\nimpl&lt;'a, T&gt; BoxVecPusher&lt;'a, T&gt; {\n    fn push&lt;'b&gt;(&amp;'b mut self, t: T) -&gt; &amp;'a mut T {\n        let mut b = Box::new(t);\n        let t: &amp;'a mut T = unsafe { std::mem::transmute::&lt;&amp;mut T, &amp;'a mut T&gt;(&amp;mut b) };\n        (self.0).0.push(b);\n        t\n    }\n}\n</code></pre>\n\n<p>The guarantees I chose is that you can't index into the <code>Pusher</code>, but you get a mutable reference to the newly pushed object. Once to release the pusher, you can go back to indexing.</p>\n\n<p>An example usage is</p>\n\n<pre><code>let mut v = BoxVec::new();\nv.push(1);\nlet x = v[0];\nlet mut p = v.pusher();\nlet i = p.push(2);\np.push(3); // works now\nlet y = v[0]; // denied by borrow checker\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5499dce382190ba15cb2e3ef4f280950&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Full example in the playground</a></p>\n"}], "owner": {"reputation": 630, "user_id": 882323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/992c0693e50cf4308aea52ce620b2f85?s=128&d=identicon&r=PG", "display_name": "chs", "link": "https://stackoverflow.com/users/882323/chs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 450, "favorite_count": 0, "accepted_answer_id": 41039392, "answer_count": 3, "score": 1, "last_activity_date": 1481204359, "creation_date": 1481182213, "last_edit_date": 1481204359, "question_id": 41034046, "link": "https://stackoverflow.com/questions/41034046/is-there-an-idiomatic-way-to-keep-references-to-elements-of-an-ever-growing-cont", "title": "Is there an idiomatic way to keep references to elements of an ever-growing container?", "body": "<p>I'm trying to write a container for objects of type <code>T</code> which provides access to references <code>&amp;T</code> to the stored objects (I want to avoid making copies). Since the container only ever grows during its lifetime, the lifetime of the returned references <code>&amp;T</code> should be the same as for the container.</p>\n\n<p>The closest I got so far was to use <code>Box&lt;T&gt;</code> objects internally in my container and use <code>Box&lt;T&gt;.as_ref()</code> to return references to these objects. Then, however, I run into the same problem as in this minimal example:</p>\n\n<pre><code>fn main() {\n    let mut v = vec![Box::new(1)]; // line 1\n    let x = v[0].as_ref();         // line 2: immutable borrow occurs here\n    println!(\"x = {:?}\", x);       // line 3\n    v.push(Box::new(2));           // line 4: mutable borrow occurs here -&gt; error\n    println!(\"x = {:?}\", x);       // line 5\n}\n</code></pre>\n\n<p>I understand that it would be unsound to use <code>x</code> in line 5 if it had been deleted from <code>v</code> during the the mutable borrow. But that's not the case here, and it'll never be for my container. If there's no safe way to express this in Rust, how could I \"repair\" the example (without copying <code>x</code>)?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1481275785, "post_id": 41041499, "comment_id": 69320878, "body": "Is the <code>RefCell</code> really necessary in <code>Arc&lt;Mutex&lt;RefCell&lt;...&gt;&gt;&gt;</code>? The guard returned by <code>Mutex::unlock</code> already gives mutable access to underlying data."}, {"owner": {"reputation": 336, "user_id": 3748215, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed0e35e4fdc144d63a02e84d2e6e1168?s=128&d=identicon&r=PG&f=1", "display_name": "eddy", "link": "https://stackoverflow.com/users/3748215/eddy"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1481276709, "post_id": 41041499, "comment_id": 69321434, "body": "I think you are right. RefCell is only needed in combination with Rc. <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>"}], "tags": [], "owner": {"reputation": 336, "user_id": 3748215, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed0e35e4fdc144d63a02e84d2e6e1168?s=128&d=identicon&r=PG&f=1", "display_name": "eddy", "link": "https://stackoverflow.com/users/3748215/eddy"}, "is_accepted": false, "score": 0, "last_activity_date": 1481284133, "last_edit_date": 1481284133, "creation_date": 1481206272, "answer_id": 41041499, "question_id": 41029772, "link": "https://stackoverflow.com/questions/41029772/how-to-create-a-handle-for-application-context-in-rust/41041499#41041499", "title": "How to create a handle for application context in Rust?", "body": "<p>The <code>&amp;</code> is used to temporary borrow data to a function. Usually when you need to hold access to data from multiple places in the code, you will need the <code>Rc</code> or <code>Arc</code> type. </p>\n\n<p>Additionally you may want internal mutability for your data. In this case you will need to wrap it also in <code>Cell</code> or <code>RefCell</code>.</p>\n\n<p>And if your data is shared between threads you'll also need to wrap it by a <code>Mutex</code> or <code>RwLock</code>.</p>\n\n<p>Now depending on your use case you need composite all this in your data structure. For more information read: <a href=\"https://doc.rust-lang.org/beta/book/choosing-your-guarantees.html#composition\" rel=\"nofollow noreferrer\">rust wrapper type composition</a></p>\n\n<p>your example could look like this:\n</p>\n\n<pre><code>// Where the data lives.\nstruct Application {\n    preferences: Rc&lt;Preferences&gt;,\n    windows: Rc&lt;Vec&lt;Windows&gt;&gt;,\n    document: Rc&lt;RefCell&lt;Vec&lt;Document&gt;&gt;&gt;,\n}\n\n// A view on the data to pass to tool-code.\nstruct AppContext {\n    preferences: Rc&lt;Preferences&gt;,  // immutable\n    window: Rc&lt;Window&gt;,            // immutable\n    document: Rc&lt;RefCell&lt;Document&gt;&gt;,             // mutable\n    // ... real world use case has more vars ...\n}\n\n// example use\nfn some_tool_uppercase(context: &amp;mut AppContext, options: &amp;ToolOptions) {\n    // random example\n    for w in (*context.document.borrow_mut()).words {\n        w.to_uppercase();\n    }\n    context.window.redraw_tag();\n}\n</code></pre>\n\n<p>or if it is multi threaded:\n</p>\n\n<pre><code>struct Application {\n    preferences: Arc&lt;RwLock&lt;Preferences&gt;&gt;,\n    windows: Arc&lt;Mutex&lt;Vec&lt;Windows&gt;&gt;&gt;,\n    document: Arc&lt;Mutex&lt;Vec&lt;Document&gt;&gt;,\n}\n....\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 198, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1481284133, "creation_date": 1481156954, "last_edit_date": 1481168690, "question_id": 41029772, "link": "https://stackoverflow.com/questions/41029772/how-to-create-a-handle-for-application-context-in-rust", "title": "How to create a handle for application context in Rust?", "body": "<p>This is a higher level issue, however I'm not sure which features of Rust should be used to refine the question.</p>\n\n<p>Taking the first steps to write a graphical application which has a <em>tool</em> API, we might want pass in a <code>context</code> argument, which exposes various parts of the application:</p>\n\n<pre><code>// Where the data lives.\nstruct Application {\n    preferences: Preferences,\n    windows: Vec&lt;Windows&gt;,\n    documents: Vec&lt;Document&gt;,\n}\n\n// A view on the data to pass to tool-code.\nstruct AppContext {\n    preferences: &amp;Preferences,  // immutable\n    window: &amp;Window,            // immutable\n    doc: &amp;Document,             // mutable\n    // ... real world use case has more vars ...\n}\n\n// example use\nfn some_tool_uppercase(context: &amp;mut AppContext, options: &amp;ToolOptions) {\n    // random example\n    for w in context.document.words {\n        w.to_uppercase();\n    }\n    context.window.redraw_tag();\n}\n</code></pre>\n\n<p>When writing this, I ran into issues with the borrow checker since the document is also stored in a list of other documents - causing it to be mutable in two places at once.</p>\n\n<p>Just to have my program compile, currently I'm removing the document from the list, running the tool, then adding it back into the document list when the tool is finished.</p>\n\n<p>While in some cases its possible to pass multiple arguments, the example above is simplified. Passing every member of the context as an argument is impractical.</p>\n\n<p>How should the context of an application be wrapped into a type that can be passed into tool code, without causing complications with the borrow checker?</p>\n"}]