[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453289128, "post_id": 34898684, "comment_id": 57533899, "body": "good answer. For additional reading I would also refer to the chapter of the Book on <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">trait objects</a> and the <a href=\"https://github.com/rust-lang/rust/issues/28796\" rel=\"nofollow noreferrer\">discussion on FnBox</a>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1453380115, "post_id": 34898684, "comment_id": 57581563, "body": "<code>FnOnce</code> is object safe, it&#39;s just that its method can not be called through an object. <i>object safety</i> is equivalent to <i>trait has an object type</i>. Without <code>FnOnce</code>, <code>FnMut</code> couldn&#39;t be object safe either."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1453383141, "post_id": 34898684, "comment_id": 57583730, "body": "@bluss, according to the documentation page a trait is object-safe if it does not require <code>Self: Sized</code> (<code>FnOnce</code> does not) and if all of its methods are object-safe. A method is object-safe if it either requires <code>Self: Sized</code> (<code>call_once()</code> does not) or if it neither is generic (<code>call_once()</code> is not generic, so that&#39;s ok) nor uses <code>Self</code>. The latter is the problem, because <code>call_once()</code> uses <code>Self</code> both implicitly, as a type of <code>self</code>, and explicitly, in <code>Self::Output</code>, so <code>call_once()</code> is not object-safe. Therefore, <code>FnOnce</code> is not object safe either."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1453388120, "post_id": 34898684, "comment_id": 57587427, "body": "@bluss, that&#39;s very strange. There probably should be a single source of what is considered object safe and what is not. According to the Rust book, <code>FnOnce()</code> is not object safe, as I&#39;ve shown in the previous comment. I&#39;ll probably write about this on reddit or users.rust-lang soon."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1453390021, "post_id": 34898684, "comment_id": 57588761, "body": "@bluss, I&#39;ve just reread <a href=\"http://huonw.github.io/blog/2015/01/object-safety\" rel=\"nofollow noreferrer\">this great article</a> on object safety and indeed, it seems that by-value <code>self</code> is not an obstacle for object safety since some change in Rust compiler. And it seems I was wrong about associated types as well - indeed, referencing associated types should not be problematic for object safety even though <code>Self</code> is used in their naming because all of the generic types (which includes associated types) are bound to be present in the type of the trait object."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 9, "last_activity_date": 1453405883, "last_edit_date": 1453405883, "creation_date": 1453289014, "answer_id": 34898684, "question_id": 34898330, "link": "https://stackoverflow.com/questions/34898330/slight-tweak-to-custom-fnbox-code-stops-it-from-compiling/34898684#34898684", "title": "Slight tweak to custom FnBox code stops it from compiling", "body": "<p>There is a great difference, actually. In the first piece of code:</p>\n\n<pre><code>impl&lt;F: FnOnce()&gt; FnBox for F {\n    fn call_box(self: Box&lt;F&gt;) {\n        (*self)()\n    }\n}\n</code></pre>\n\n<p>it is declared that for any type <code>F</code> which implements <code>FnOnce</code> we implement <code>FnBox</code>. <code>F</code> is a concrete type, and at each call site <code>call_box()</code> method will be monomorphized. The concrete type of <code>F</code> at each call site, as well as its size, is known to the compiler, so there are no problems with this definition.</p>\n\n<p>In the second piece of code, however:</p>\n\n<pre><code>impl FnBox for FnOnce() {\n    fn call_box(self: Box&lt;FnOnce()&gt;) {\n        (*self)();\n    }\n}\n</code></pre>\n\n<p>it is declared that <em>bare trait object type</em> implements <code>FnBox</code>. However, this implementation is unsound: while <code>Box&lt;FnOnce()&gt;</code> is a correct, sized type which is suitable for variables and function arguments, <code>FnOnce()</code> by itself is not - it is a bare trait object type and it is unsized, that is, its size is not known to the compiler. This places several restrictions on what you can do with this type, and one of the main restrictions is that you cannot use values of this type <em>by value</em>. However, this is exactly what happens in this code: you attempt to dereference <code>Box&lt;FnOnce()&gt;</code> to get <code>FnOnce()</code>.</p>\n\n<p>Previously by-value <code>self</code> methods would meant that the trait is <a href=\"http://doc.rust-lang.org/book/trait-objects.html#object-safety\" rel=\"nofollow noreferrer\">not object-safe</a>, and because <code>FnOnce::call_once</code> consumes the implementing instance by value, it wouldn't be object-safe. However, by-value <code>self</code> methods do not make the trait object-unsafe since <a href=\"https://github.com/rust-lang/rfcs/pull/817\" rel=\"nofollow noreferrer\">RFC 817</a> got implemented. By-value <code>self</code> methods still can't be called on a trait object according to the above reasoning, though.</p>\n"}], "owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 141, "favorite_count": 0, "accepted_answer_id": 34898684, "answer_count": 1, "score": 7, "last_activity_date": 1558702680, "creation_date": 1453287958, "last_edit_date": 1558702680, "question_id": 34898330, "link": "https://stackoverflow.com/questions/34898330/slight-tweak-to-custom-fnbox-code-stops-it-from-compiling", "title": "Slight tweak to custom FnBox code stops it from compiling", "body": "<p>The following code compiles without warning on nightly 1.7.0:</p>\n\n<pre><code>trait FnBox {\n    fn call_box(self: Box&lt;Self&gt;);\n}\n\nimpl &lt;F: FnOnce()&gt; FnBox for F {\n    fn call_box(self: Box&lt;F&gt;) {\n        (*self)()\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>But when I make this slight modification, which I thought meant the exact same thing, I get an error about <code>FnOnce</code> being unsized and not movable.</p>\n\n<pre><code>trait FnBox {\n    fn call_box(self: Box&lt;Self&gt;);\n}\n\nimpl FnBox for FnOnce() {\n    fn call_box(self: Box&lt;FnOnce()&gt;) {\n        (*self)();\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0161]: cannot move a value of type dyn std::ops::FnOnce(): the size of dyn std::ops::FnOnce() cannot be statically determined\n --&gt; src/main.rs:7:9\n  |\n7 |         (*self)();\n  |         ^^^^^^^\n</code></pre>\n\n<p>What is the difference between these two examples, and why are there no problems with the first one?</p>\n"}, {"tags": ["post", "rust", "hyper"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1453277977, "post_id": 34891171, "comment_id": 57526528, "body": "You should check what is really emitted in terms of HTTP; for example, the <code>=</code> and <code>&amp;</code> in the body might be url-encoded accidentally."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1453344497, "last_edit_date": 1453344497, "creation_date": 1453300359, "answer_id": 34902836, "question_id": 34891171, "link": "https://stackoverflow.com/questions/34891171/hyper-post-request-always-yields-400/34902836#34902836", "title": "Hyper POST request always yields 400", "body": "<p>It is greatly beneficial to be aware of various tools for debugging HTTP problems like this. In this case, I used <code>nc</code> to start a dumb server so I could see the headers the HTTP client is sending (<code>nc -l 5000</code>). I modified the cURL and Rust examples to point to <code>127.0.0.1:5000</code> and this was the output:</p>\n\n<p>cURL:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>POST /v1/devices/secret/set_light HTTP/1.1\nHost: 127.0.0.1:5000\nUser-Agent: curl/7.43.0\nAccept: */*\nContent-Length: 26\nContent-Type: application/x-www-form-urlencoded\n\nargs=0&amp;access_token=secret\n</code></pre>\n\n<p>Hyper:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>POST /v1/devices/secret/set_light HTTP/1.1\nHost: 127.0.0.1:5000\nContent-Length: 26\n\naccess_token=secret&amp;args=0\n</code></pre>\n\n<p>I don't have an account at particle.io to test with, but I'm guessing you need that <code>Content-Type</code> header. Setting a <code>User-Agent</code> would be good etiquette and the <code>Accept</code> header is really more for your benefit, so you might as well set them too.</p>\n"}], "owner": {"reputation": 764, "user_id": 258834, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/73c433692510200ade41516f7dc7fd32?s=128&d=identicon&r=PG", "display_name": "luke", "link": "https://stackoverflow.com/users/258834/luke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1315, "favorite_count": 0, "accepted_answer_id": 34902836, "answer_count": 1, "score": 1, "last_activity_date": 1517586340, "creation_date": 1453261263, "last_edit_date": 1517586340, "question_id": 34891171, "link": "https://stackoverflow.com/questions/34891171/hyper-post-request-always-yields-400", "title": "Hyper POST request always yields 400", "body": "<p>I am trying to send a POST request to a site using Hyper 0.9. The request works with <code>curl</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>curl https://api.particle.io/v1/devices/secret/set_light -d args=0 -d access_token=secret\n</code></pre>\n\n<p>and Python:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import requests\nr = requests.post(\"https://api.particle.io/v1/devices/secret/set_light\",\n    data={\"access_token\": \"secret\", \"args\": \"0\"})\n</code></pre>\n\n<p>but my Rust implementation doesn't seem to go through, always yielding 400.</p>\n\n<pre><code>use hyper::client::Client;\n\nlet addr = \"https://api.particle.io/v1/devices/secret/set_light\";\nlet body = \"access_token=secret&amp;args=0\";\nlet mut res = client.post(addr)\n                .body(body)\n                .send()\n                .unwrap();\n</code></pre>\n"}, {"tags": ["python", "rust", "ctypes", "access-violation", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453231080, "post_id": 34885107, "comment_id": 57507988, "body": "Are you sure the error isn&#39;t occurring because of <code>print(result)</code> ?"}, {"owner": {"reputation": 8538, "user_id": 3059812, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/UaU9b.jpg?s=128&g=1", "display_name": "Morgan Thrapp", "link": "https://stackoverflow.com/users/3059812/morgan-thrapp"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453231129, "post_id": 34885107, "comment_id": 57508018, "body": "@Shepmaster Yes, I set a breakpoint in my Python code before that line and it never even hits that line. I just took it out and got the same results."}], "answers": [{"comments": [{"owner": {"reputation": 8538, "user_id": 3059812, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/UaU9b.jpg?s=128&g=1", "display_name": "Morgan Thrapp", "link": "https://stackoverflow.com/users/3059812/morgan-thrapp"}, "edited": false, "score": 0, "creation_date": 1453300117, "post_id": 34885984, "comment_id": 57541402, "body": "The example you linked me to doesn&#39;t work. I copied the code exactly, but I get <code>ctypes.ArgumentError: argument 2: &lt;class &#39;TypeError&#39;&gt;: wrong type</code> in Python."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8538, "user_id": 3059812, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/UaU9b.jpg?s=128&g=1", "display_name": "Morgan Thrapp", "link": "https://stackoverflow.com/users/3059812/morgan-thrapp"}, "edited": false, "score": 0, "creation_date": 1453300454, "post_id": 34885984, "comment_id": 57541658, "body": "@MorganThrapp the <i>Omnibus</i> uses Python 2; I&#39;m guessing that there&#39;s some difference with Python 3... :-("}, {"owner": {"reputation": 8538, "user_id": 3059812, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/UaU9b.jpg?s=128&g=1", "display_name": "Morgan Thrapp", "link": "https://stackoverflow.com/users/3059812/morgan-thrapp"}, "edited": false, "score": 0, "creation_date": 1453300499, "post_id": 34885984, "comment_id": 57541695, "body": "Yup, that seems to be the issue. It works fine in 2."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8538, "user_id": 3059812, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/UaU9b.jpg?s=128&g=1", "display_name": "Morgan Thrapp", "link": "https://stackoverflow.com/users/3059812/morgan-thrapp"}, "edited": false, "score": 0, "creation_date": 1453300626, "post_id": 34885984, "comment_id": 57541792, "body": "@MorganThrapp I&#39;d file an issue on the Github repo for the <i>Omnibus</i> and I&#39;ll see if I can get around to it some day ;-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1453233989, "creation_date": 1453233989, "answer_id": 34885984, "question_id": 34885107, "link": "https://stackoverflow.com/questions/34885107/access-violation-when-calling-rust-function-through-ffi/34885984#34885984", "title": "Access violation when calling Rust function through FFI", "body": "<p>I'm not sure of the full extent of the issues, but I know this one isn't going to be good: you <strong>can not</strong> return a <code>String</code> through FFI.</p>\n\n<p>A Rust <code>String</code> is conceptually 3 parts: a pointer to a chunk of memory, how long that memory is, and how much of that memory is a valid string.</p>\n\n<p>Compare that to a C string. A C string is just a pointer to memory. You don't know how much memory there is, and you only know the valid length by walking down every single byte until you get to a NUL byte.</p>\n\n<p>Even more than that, a <code>String</code> isn't marked as <code>#[repr(C)]</code>, so the actual layout of the <code>String</code> structure is up to the Rust compiler.</p>\n\n<p>I suspect that the error occurs because Python sees you are returning a <code>c_char_p</code> (which I assume is a <code>char *</code>). It then tries to read a pointer's worth of data and then moves to the next pointer. The \"pointer\" it reads may be the <code>String</code>'s pointer <em>or</em> length <em>or</em> capacity, and as soon as it reads the second one it's off in the weeds somewhere. </p>\n\n<p>Instead, you will need to figure out alternative ways of dealing with this string. A few thoughts:</p>\n\n<ol>\n<li>Manipulate the passed-in string to add NUL bytes at the break points, then return pointers into that large chunk. You need to be careful to not use any of the substrings after the original string has been freed. Also the original string will now look shorter as it has embedded NUL bytes. I also don't know when Python will free the string.</li>\n<li><a href=\"http://jakegoulding.com/rust-ffi-omnibus/objects/\" rel=\"nofollow\">Return an object</a> that holds onto a <code>CString</code> and has methods that return the result of <code>as_ptr</code>.</li>\n</ol>\n\n<p>A similar logic applies for <code>&amp;str</code>, which is conceptually a pointer to a chunk of memory and how much of that memory is valid.</p>\n"}], "owner": {"reputation": 8538, "user_id": 3059812, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/UaU9b.jpg?s=128&g=1", "display_name": "Morgan Thrapp", "link": "https://stackoverflow.com/users/3059812/morgan-thrapp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 589, "favorite_count": 0, "accepted_answer_id": 34885984, "answer_count": 1, "score": 0, "last_activity_date": 1469358134, "creation_date": 1453230813, "last_edit_date": 1469358134, "question_id": 34885107, "link": "https://stackoverflow.com/questions/34885107/access-violation-when-calling-rust-function-through-ffi", "title": "Access violation when calling Rust function through FFI", "body": "<p>As the title states, I get an access violation when I try to call the following Rust code in Python.</p>\n\n<p>Here's the Rust code:</p>\n\n<pre><code>#![crate_type = \"dylib\"]\n\nextern crate libc;\n\nuse libc::c_char;\nuse std::ffi::CStr;\nuse std::str;\n\n#[repr(C)]\npub struct AdditionalDetail {\n    swis: String,\n    sbl: String,\n    school_code: String,\n    land_assessed_value: u32,\n    deed_book: String,\n    deed_page: String,\n}\n\n#[no_mangle]\npub extern fn parse_details(l: *const c_char) -&gt; AdditionalDetail{\n    let _line = unsafe {\n        assert!(!l.is_null());\n        CStr::from_ptr(l)\n    };\n    let line = str::from_utf8(_line.to_bytes()).unwrap();\n    let _swis = line[52..58].to_owned();\n    let _sbl = line[58..78].to_owned();\n    let _school_code = line[371..377].to_owned();\n    let _land_assessed_value = line[824..836].parse::&lt;u32&gt;().ok().expect(\"Couldn't convert to an int\");\n    let _deed_book = line[814..819].to_owned();\n    let _deed_page = line[819..824].to_owned();\n    AdditionalDetail{swis: _swis, sbl: _sbl, school_code: _school_code, deed_page: _deed_page,\n                     land_assessed_value: _land_assessed_value, deed_book: _deed_book}\n}\n</code></pre>\n\n<p>And the Python code I'm using to call it:</p>\n\n<pre><code>from ctypes import cdll, c_uint32, Structure, c_char_p\n\n\nclass TaxDetail(Structure):\n    _fields_ = [('swis', c_char_p),\n                ('sbl', c_char_p),\n                ('school_code', c_char_p),\n                ('land_assessed_value', c_uint32),\n                ('deed_book', c_char_p),\n                ('deed_page', c_char_p), ]\n\n    def __str__(self):\n        return str(self.swis)\n\n\nlib = cdll.LoadLibrary(r\"C:\\Rust Workspace\\embed\\target\\release\\embed.dll\")\nlib.parse_details.restype = TaxDetail\nlib.parse_details.argtype = (c_char_p,)\nresult = lib.parse_details(b\"1346011          63 WAP WEST  LLC    00000101       13460100615800142703690000  63 Wap West  LLC              10 Fair Oaks Dr               Poughkeepsie, NY 12603                                                                                                                                                                                            000500000150000000017135601       14270369   411      000001 1        4-6Church St                            0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006158-14-270369-0000      058369006127002200002074000000052500000000286000N    0000000028600000000000000000000000000000000000Y\")\nprint(result)\n</code></pre>\n\n<p>I've added <code>println!</code> calls to my Rust code, and the access violation seems to occur when it tries to create and return the struct. The specific error message I'm getting is <code>Process finished with exit code -1073741819 (0xC0000005)</code>.</p>\n\n<p>This happens with 32 bit Rust and Python on 64 bit Windows 10.</p>\n"}, {"tags": ["file", "rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 4, "creation_date": 1453214436, "post_id": 34878970, "comment_id": 57497057, "body": "inspecting the result of <code>seek</code>. See the <a href=\"https://doc.rust-lang.org/std/io/trait.Seek.html#tymethod.seek\" rel=\"nofollow noreferrer\">docs for seek</a>, <code>seek</code> returns a <code>Result&lt;u64&gt;</code>, where the u64 is the new position"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453229992, "post_id": 34878970, "comment_id": 57507346, "body": "@PaoloFalabella: Shouldn&#39;t that be an answer?"}, {"owner": {"reputation": 1279, "user_id": 4299078, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/85e4a1e6895c608aa595b2480d15fb27?s=128&d=identicon&r=PG&f=1", "display_name": "AndreyT", "link": "https://stackoverflow.com/users/4299078/andreyt"}, "edited": false, "score": 0, "creation_date": 1453241140, "post_id": 34878970, "comment_id": 57514063, "body": "It turns out that if I need it value later, then I should store it somehow, and manually update after each <code>seek</code> ? In my opinion it&#39;s stupid."}, {"owner": {"reputation": 1279, "user_id": 4299078, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/85e4a1e6895c608aa595b2480d15fb27?s=128&d=identicon&r=PG&f=1", "display_name": "AndreyT", "link": "https://stackoverflow.com/users/4299078/andreyt"}, "edited": false, "score": 0, "creation_date": 1453241460, "post_id": 34878970, "comment_id": 57514243, "body": "Or as alternative way: wrap File struct to my own and add needed functionality (i.e. create Proxy with position() method). But why I should do that, if it is the responsibility of File?"}], "answers": [{"comments": [{"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "reply_to_user": {"reputation": 1279, "user_id": 4299078, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/85e4a1e6895c608aa595b2480d15fb27?s=128&d=identicon&r=PG&f=1", "display_name": "AndreyT", "link": "https://stackoverflow.com/users/4299078/andreyt"}, "edited": false, "score": 0, "creation_date": 1453274095, "post_id": 34888248, "comment_id": 57524697, "body": "@AndreyT Updated Cursor example"}, {"owner": {"reputation": 1279, "user_id": 4299078, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/85e4a1e6895c608aa595b2480d15fb27?s=128&d=identicon&r=PG&f=1", "display_name": "AndreyT", "link": "https://stackoverflow.com/users/4299078/andreyt"}, "edited": false, "score": 0, "creation_date": 1453287891, "post_id": 34888248, "comment_id": 57532959, "body": "Result is always = 0"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1453315858, "post_id": 34888248, "comment_id": 57552192, "body": "You access the underlying file (<code>.get_ref()</code>), so you circumvent the cursor entirely. Result should be <code>0</code> given that. <code>Cursor</code> is not used with <code>File</code>, it&#39;s used for wrapping slices, vectors, and other in-memory data structures."}], "tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": false, "score": 3, "last_activity_date": 1453316038, "last_edit_date": 1453316038, "creation_date": 1453242810, "answer_id": 34888248, "question_id": 34878970, "link": "https://stackoverflow.com/questions/34878970/how-to-get-the-current-cursor-position-in-file/34888248#34888248", "title": "How to get the current cursor position in file?", "body": "<p>According to the <a href=\"https://doc.rust-lang.org/std/io/trait.Seek.html#method.seek\" rel=\"nofollow\"><code>Seek</code></a> trait API the new position is returned with the seek function. However you can also take the data of the <code>File</code>, and place it within a <code>Vec</code>, and then wrap the <code>Vec</code> in a <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"nofollow\"><code>Cursor</code></a> which does contain a method which gets the current position.</p>\n\n<h3>Without Cursor</h3>\n\n<pre><code>let any_offset: u64 = 42;\nlet mut file = File::open(\"/home/user/file\").unwrap();\nlet new_position = file.seek(SeekFrom::Start(any_offset)).unwrap();\nprintln!(\"{:?}\", new_position);\n</code></pre>\n\n<h3>With Cursor</h3>\n\n<pre><code>use std::io::Cursor;\n\nlet any_offset: u64 = 42;\nlet mut file = File::open(\"/home/user/file\").unwrap();\nlet contents = Vec::new();\nfile.read_to_end(&amp;mut contents);\nlet mut cursor = Cursor::new(contents);\ncursor.seek(SeekFrom::Start(any_offset));\nprintln!(\"{:?}\", cursor.position());\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1547603213, "post_id": 34889413, "comment_id": 95244968, "body": "So for a stream implementing <code>Seek</code> but not providing direct cursor access, the only way is <code>stream.seek(SeekFrom::Current(0)).unwrap()</code>. That&#39;s...verbose."}, {"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 3, "creation_date": 1547603354, "post_id": 34889413, "comment_id": 95244996, "body": "...actually, there&#39;s a deeper problem: this requires mutably borrowing the stream."}], "tags": [], "owner": {"reputation": 70803, "user_id": 28128, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/4e974a514f0764fdfe99a8915f192002?s=128&d=identicon&r=PG", "display_name": "David Grayson", "link": "https://stackoverflow.com/users/28128/david-grayson"}, "is_accepted": true, "score": 11, "last_activity_date": 1589979908, "last_edit_date": 1589979908, "creation_date": 1453249474, "answer_id": 34889413, "question_id": 34878970, "link": "https://stackoverflow.com/questions/34878970/how-to-get-the-current-cursor-position-in-file/34889413#34889413", "title": "How to get the current cursor position in file?", "body": "<p>You should call <a href=\"https://doc.rust-lang.org/std/io/trait.Seek.html#tymethod.seek\" rel=\"nofollow noreferrer\"><code>Seek:seek</code></a> with a relative offset of 0.  This has no side effect and returns the information you are looking for.</p>\n\n<p><code>Seek</code> is implemented for a number of types, including:</p>\n\n<ul>\n<li><code>impl Seek for File</code></li>\n<li><code>impl&lt;'_&gt; Seek for &amp;'_ File</code></li>\n<li><code>impl&lt;'_, S: Seek + ?Sized&gt; Seek for &amp;'_ mut S</code></li>\n<li><code>impl&lt;R: Seek&gt; Seek for BufReader&lt;R&gt;</code></li>\n<li><code>impl&lt;S: Seek + ?Sized&gt; Seek for Box&lt;S&gt;</code></li>\n<li><code>impl&lt;T&gt; Seek for Cursor&lt;T&gt; where</code></li>\n<li><code>impl&lt;W: Write + Seek&gt; Seek for BufWriter&lt;W&gt;</code></li>\n</ul>\n\n<p>Using the <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"nofollow noreferrer\"><code>Cursor</code></a> class <a href=\"https://stackoverflow.com/a/34888248/155423\">mentioned by Aaronepower</a> might be more efficient though, since you could avoid having to make an extra system call.</p>\n"}], "owner": {"reputation": 1279, "user_id": 4299078, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/85e4a1e6895c608aa595b2480d15fb27?s=128&d=identicon&r=PG&f=1", "display_name": "AndreyT", "link": "https://stackoverflow.com/users/4299078/andreyt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5188, "favorite_count": 0, "accepted_answer_id": 34889413, "answer_count": 2, "score": 4, "last_activity_date": 1589979908, "creation_date": 1453212599, "last_edit_date": 1589979729, "question_id": 34878970, "link": "https://stackoverflow.com/questions/34878970/how-to-get-the-current-cursor-position-in-file", "title": "How to get the current cursor position in file?", "body": "<p>Given this code:</p>\n\n<pre><code>let any_offset: u64 = 42;\nlet mut file = File::open(\"/home/user/file\").unwrap();\nfile.seek(SeekFrom::Start(any_offset));\n// println!(\"{:?}\", file.cursor_position()) \n</code></pre>\n\n<p>How can I obtain the current cursor position?</p>\n"}, {"tags": ["rust", "internals", "rust-crates"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1488058823, "post_id": 42443640, "comment_id": 72065976, "body": "I wrote that RFC. And sorry, in that case finding and parsing Cargo.lock is the better option. Thanks anyway."}, {"owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1488069929, "post_id": 42443640, "comment_id": 72068897, "body": "Why do you think that is also better than getting the version from the API of the crate whose deprecations you want to lint about?"}], "tags": [], "owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "is_accepted": false, "score": 0, "last_activity_date": 1487953718, "creation_date": 1487953718, "answer_id": 42443640, "question_id": 34865593, "link": "https://stackoverflow.com/questions/34865593/find-out-the-current-version-of-a-crate-from-a-lint/42443640#42443640", "title": "Find out the current version of a crate from a lint?", "body": "<p>Use <code>#[deprecated]</code> instead, see <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md\" rel=\"nofollow noreferrer\">Rust lang rfc 1270</a> for documentation. This is stable since Rust 1.9. Then the compiler does the job of the lint you want to create.</p>\n\n<p>A way to instead implement what you asked for without touching the compiler or using a compiler feature is to include the version in the crate its public API and use that from your lint.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 980, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1487953718, "creation_date": 1453157672, "question_id": 34865593, "link": "https://stackoverflow.com/questions/34865593/find-out-the-current-version-of-a-crate-from-a-lint", "title": "Find out the current version of a crate from a lint?", "body": "<p>I'm working on an extended deprecation lint that can decide if something <em>already is</em> or <em>will be</em> deprecated. There is one problem left, though: Crates do not appear to have version information. I know that I can get the current Crate's version using some environment variable that cargo will set, but that's not enough to distinguish deprecated parts of dependencies.</p>\n\n<p>I can at least get the current crate path via <code>ctx.sess.local_crate_source_file</code> (as in fhahn's <a href=\"https://github.com/Manishearth/rust-clippy/pull/544/files\" rel=\"noreferrer\">current PR</a>.</p>\n\n<p>So barring getting the filepath and finding and parsing <code>Cargo.lock</code> manually (which I consider to be fragile and hacky), is there a way to get the dependencies' version numbers and if so, how?</p>\n"}, {"tags": ["rust", "lldb"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1453137082, "post_id": 34859936, "comment_id": 57459922, "body": "See also <a href=\"http://stackoverflow.com/q/28713043/155423\">stackoverflow.com/q/28713043/155423</a> (although it doesn&#39;t seem to help here)."}], "answers": [{"comments": [{"owner": {"reputation": 3550, "user_id": 261393, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/334a587ef1901e2d48dfd15f90522496?s=128&d=identicon&r=PG", "display_name": "Sam Elliott", "link": "https://stackoverflow.com/users/261393/sam-elliott"}, "edited": false, "score": 0, "creation_date": 1453428924, "post_id": 34860209, "comment_id": 57608117, "body": "Will breaking at a function name work given name mangling (on by default)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3550, "user_id": 261393, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/334a587ef1901e2d48dfd15f90522496?s=128&d=identicon&r=PG", "display_name": "Sam Elliott", "link": "https://stackoverflow.com/users/261393/sam-elliott"}, "edited": false, "score": 1, "creation_date": 1453431358, "post_id": 34860209, "comment_id": 57608757, "body": "@SamElliott yes. Debuggers (should) know about name mangling and de-mangle by default. If they don&#39;t, <code>lldb</code> allows you to set a breakpoint with a regex: <code>breakpoint set -r &#39;.*foo.*&#39;</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1453137885, "last_edit_date": 1453137885, "creation_date": 1453136593, "answer_id": 34860209, "question_id": 34859936, "link": "https://stackoverflow.com/questions/34859936/can-i-set-an-lldb-breakpoint-when-multiple-rust-source-files-share-the-same-name/34860209#34860209", "title": "Can I set an LLDB breakpoint when multiple Rust source files share the same name?", "body": "<p>You can use the <em>absolute path</em> to the file. In my case, I compiled in the <code>/tmp</code> directory on OS X, which is actually <code>/private/tmp</code>. That means that I can do something like this:</p>\n\n<pre><code>breakpoint set --file /private/tmp/debug/src/bar/mod.rs --line 2\n</code></pre>\n\n<p>I figured this out by looking at the DWARF debugging information:</p>\n\n<pre><code>dwarfdump target/debug/debug.dSYM/Contents/Resources/DWARF/debug | grep mod.rs\n</code></pre>\n\n<p>There are also a few workarounds if this doesn't work:</p>\n\n<ol>\n<li><p>Break at a function instead: <code>breakpoint set --name my_func</code>. It's unlikely that you will have the same method name, but here you can use the module name as well: <code>breakpoint set --name foo::my_func</code>.</p></li>\n<li><p>Disable non-interesting duplicate breakpoints. <code>breakpoint set</code> establishes a <em>logical</em> breakpoint with a numeric ID (like <code>1</code>), and then real breakpoints that match the condition have a sub ID (like <code>1.1</code>). You can see these with <code>breakpoint list</code> and then disable others with <code>breakpoint disable 1.1</code>.</p></li>\n</ol>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 949, "favorite_count": 1, "accepted_answer_id": 34860209, "answer_count": 1, "score": 7, "last_activity_date": 1453137885, "creation_date": 1453135705, "last_edit_date": 1453135842, "question_id": 34859936, "link": "https://stackoverflow.com/questions/34859936/can-i-set-an-lldb-breakpoint-when-multiple-rust-source-files-share-the-same-name", "title": "Can I set an LLDB breakpoint when multiple Rust source files share the same name?", "body": "<p><strong>Background:</strong> In Rust, you typically have multiple source files called <code>mod.rs</code>. For example:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>app_name\n  src\n    main.rs\n    foo\n      mod.rs\n    bar\n      mod.rs\n</code></pre>\n\n<p><strong>Problem:</strong> I can't find a way to distinguish one <code>mod.rs</code> from another when setting an LLDB breakpoint:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build\n$ rust-lldb target/debug/app_name\n\n(lldb) breakpoint set -f mod.rs -l 10\nBreakpoint 1: 2 locations.\n\n(lldb) breakpoint set -f foo/mod.rs -l 10\nBreakpoint 2: no locations (pending).\nWARNING:  Unable to resolve breakpoint to any actual locations.\n\n(lldb) breakpoint set -f src/foo/mod.rs -l 10\nBreakpoint 3: no locations (pending).\nWARNING:  Unable to resolve breakpoint to any actual locations.\n</code></pre>\n\n<p>This issue arises most commonly with <code>mod.rs</code>. More generally, it arises anytime multiple source files share the same name.</p>\n\n<p><strong>Question</strong>: Is there a way to set a breakpoint at line 10 of <code>foo/mod.rs</code> but not at line 10 of <code>bar/mod.rs</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "edited": false, "score": 0, "creation_date": 1453096859, "post_id": 34847890, "comment_id": 57436310, "body": "Maybe it would be better if you specified in the question title that the problem is mutual recursion?"}, {"owner": {"reputation": 95, "user_id": 4777440, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a90e9f5af1e931f26cf7ec7598d1a87?s=128&d=identicon&r=PG&f=1", "display_name": "vessd", "link": "https://stackoverflow.com/users/4777440/vessd"}, "reply_to_user": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "edited": false, "score": 0, "creation_date": 1453097489, "post_id": 34847890, "comment_id": 57436533, "body": "Thank you, I just did not know how it&#39;s called"}, {"owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "edited": false, "score": 1, "creation_date": 1453098458, "post_id": 34847890, "comment_id": 57436885, "body": "I was curious, so I searched and found this <a href=\"https://stackoverflow.com/questions/16946888/recursive-closure-in-rust\">question about normal single recursion with closures</a>. That&#39;s not supported directly either, though this <a href=\"https://stackoverflow.com/questions/16946888/recursive-closure-in-rust/16953239#16953239\">answer</a> points out a way to do it by passing the function as an argument to itself."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453107534, "post_id": 34847890, "comment_id": 57441207, "body": "@D101101 I&#39;m curious if this is possible and how the end result would look, but I doubt it would look pretty. If your goal is clarity as I think you&#39;re saying, your first approach with function pointers is probably best..."}, {"owner": {"reputation": 95, "user_id": 4777440, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a90e9f5af1e931f26cf7ec7598d1a87?s=128&d=identicon&r=PG&f=1", "display_name": "vessd", "link": "https://stackoverflow.com/users/4777440/vessd"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1453109589, "post_id": 34847890, "comment_id": 57442429, "body": "@PaoloFalabella Yes, I want to make the code cleaner. Thanks for your help."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1453117541, "post_id": 34847890, "comment_id": 57447300, "body": "I tried <code>let bar; let foo = [closure]; bar = [closure];</code>, but unfortunately, it fails to compile with <code>error: the type of this value must be known in this context</code> on the call to <code>bar</code> in the first closure, and it&#39;s not possible to specify the type of <code>bar</code>, since it&#39;s an anonymous generated type."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1453118196, "post_id": 34847890, "comment_id": 57447738, "body": "@FrancisGagn&#233; you might work around that specific problem <a href=\"http://is.gd/iA1q4e\" rel=\"nofollow noreferrer\">with trait objects</a>. Unfortunately even if you can declare the type of bar before foo, it&#39;s still an error to capture it while it is uninitialized."}], "answers": [{"comments": [{"owner": {"reputation": 95, "user_id": 4777440, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a90e9f5af1e931f26cf7ec7598d1a87?s=128&d=identicon&r=PG&f=1", "display_name": "vessd", "link": "https://stackoverflow.com/users/4777440/vessd"}, "edited": false, "score": 0, "creation_date": 1453188487, "post_id": 34862889, "comment_id": 57480037, "body": "Well, this is the answer to my question, but unfortunately not the solution for me."}, {"owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "reply_to_user": {"reputation": 95, "user_id": 4777440, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a90e9f5af1e931f26cf7ec7598d1a87?s=128&d=identicon&r=PG&f=1", "display_name": "vessd", "link": "https://stackoverflow.com/users/4777440/vessd"}, "edited": false, "score": 0, "creation_date": 1453215627, "post_id": 34862889, "comment_id": 57497920, "body": "Yes. It might work for you if you passed the mutable borrows around as extra arguments as well, but then you might as well use local <code>fn</code>s instead, which was your first solution in your question."}], "tags": [], "owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "is_accepted": true, "score": 3, "last_activity_date": 1453149495, "last_edit_date": 1453149495, "creation_date": 1453146553, "answer_id": 34862889, "question_id": 34847890, "link": "https://stackoverflow.com/questions/34847890/how-to-define-mutual-recursion-with-closures/34862889#34862889", "title": "How to define mutual recursion with closures?", "body": "<p>I have a solution for mutually recursive closures, but it doesn't work with multiple mutable borrows, so I couldn't extend it to your example.</p>\n\n<p>There is a way to use define mutually recursive closures, using an approach similar to how <a href=\"https://stackoverflow.com/questions/16946888/recursive-closure-in-rust/16953239#16953239\">this answer</a> does single recursion. You can put the closures together into a struct, where each of them takes a borrow of that struct as an extra argument.</p>\n\n<pre><code>fn func(n: u32) -&gt; bool {\n    struct EvenOdd&lt;'a&gt; {\n        even: &amp;'a Fn(u32, &amp;EvenOdd&lt;'a&gt;) -&gt; bool,\n        odd: &amp;'a Fn(u32, &amp;EvenOdd&lt;'a&gt;) -&gt; bool\n    }\n    let evenodd = EvenOdd {\n        even: &amp;|n, evenodd| {\n            if n == 0 {\n                true\n            } else {\n                (evenodd.odd)(n - 1, evenodd)\n            }\n        },\n        odd: &amp;|n, evenodd| {\n            if n == 0 {\n                false\n            } else {\n                (evenodd.even)(n - 1, evenodd)\n            }\n        }\n    };\n    (evenodd.even)(n, &amp;evenodd)\n}\n\nfn main() {\n    println!(\"{}\", func(5));\n    println!(\"{}\", func(6));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": false, "score": 2, "last_activity_date": 1591001107, "creation_date": 1591001107, "answer_id": 62128538, "question_id": 34847890, "link": "https://stackoverflow.com/questions/34847890/how-to-define-mutual-recursion-with-closures/62128538#62128538", "title": "How to define mutual recursion with closures?", "body": "<p>While defining mutually recursive closures works in some cases, as demonstrated in the answer by Alex Knauth, I don't think that's an approach you should usually take. It is kind of opaque, has some limitations pointed out in the other answer, and it also has a performance overhead since it uses trait objects and dynamic dispatch at runtime.</p>\n\n<p>Closures in Rust can be thought of as functions with associated structs storing the data you closed over. So a more general solution is to define your own struct storing the data you want to close over, and define methods on that struct instead of closures. For this case, the code could look like this:</p>\n\n<pre><code>pub struct FooBar {\n    pub u: Vec&lt;i32&gt;,\n    pub v: Vec&lt;i32&gt;,\n}\n\nimpl FooBar {\n    fn new(u: Vec&lt;i32&gt;, v: Vec&lt;i32&gt;) -&gt; Self {\n        Self { u, v }\n    }\n\n    fn foo(&amp;mut self, i: usize, j: usize) {\n        for k in i+1..self.u.len() {\n            self.u[k] += 1;\n            self.bar(k, j);\n        }\n    }\n\n    fn bar(&amp;mut self, i: usize, j: usize) {\n        for k in j+1..self.v.len() {\n            self.v[k] += 1;\n            self.foo(i, k);\n        }\n    }\n}\n\nfn main() {\n    let mut x = FooBar::new(vec![0;5], vec![0;5]);\n    x.foo(0, 0);\n    println!(\"{:?}\", x.u);\n    println!(\"{:?}\", x.v);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e9f3b1c1e9c66abd101cea205d3abe2d\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<p>While this can get slightly more verbose than closures, and requires a few more explicit type annotations, it's more flexible and easier to read, so I would generally prefer this approach.</p>\n"}], "owner": {"reputation": 95, "user_id": 4777440, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a90e9f5af1e931f26cf7ec7598d1a87?s=128&d=identicon&r=PG&f=1", "display_name": "vessd", "link": "https://stackoverflow.com/users/4777440/vessd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 642, "favorite_count": 0, "accepted_answer_id": 34862889, "answer_count": 2, "score": 3, "last_activity_date": 1591001107, "creation_date": 1453095303, "last_edit_date": 1453097363, "question_id": 34847890, "link": "https://stackoverflow.com/questions/34847890/how-to-define-mutual-recursion-with-closures", "title": "How to define mutual recursion with closures?", "body": "<p>I can do something like this:</p>\n\n<pre><code>fn func() -&gt; (Vec&lt;i32&gt;, Vec&lt;i32&gt;) {\n    let mut u = vec![0;5];\n    let mut v = vec![0;5];\n\n    fn foo(u: &amp;mut [i32], v: &amp;mut [i32], i: usize, j: usize) {\n        for k in i+1..u.len() {\n            u[k] += 1;\n            bar(u, v, k, j);\n        }\n    }\n    fn bar(u: &amp;mut [i32], v: &amp;mut [i32], i: usize, j: usize) {\n        for k in j+1..v.len() {\n            v[k] += 1;\n            foo(u, v, i, k);\n        }\n    }\n    foo(&amp;mut u, &amp;mut v, 0, 0);\n    (u,v)\n}\n\nfn main() {\n    let (u,v) = func();\n    println!(\"{:?}\", u);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>but I would prefer to do something like this:</p>\n\n<pre><code>fn func() -&gt; (Vec&lt;i32&gt;, Vec&lt;i32&gt;) {\n    let mut u = vec![0;5];\n    let mut v = vec![0;5];\n\n    let foo = |i, j| {\n        for k in i+1..u.len() {\n            u[k] += 1;\n            bar(k, j);\n        }\n    };\n    let bar = |i, j| {\n        for k in j+1..v.len() {\n            v[k] += 1;\n            foo(i, k);\n        }\n    };\n    foo(0, 0);\n    (u,v)\n}\n\nfn main() {\n    let (u,v) = func();\n    println!(\"{:?}\", u);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>The second example doesn't compile with the error: unresolved name <code>bar</code>.\nIn my task I can do it through one recursion, but it will not look clear.\nDoes anyone have any other suggestions?</p>\n"}, {"tags": ["rust", "rustdoc", "rust-compiler-plugin"], "answers": [{"comments": [{"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1453162460, "post_id": 34845971, "comment_id": 57472128, "body": "Cool. Troubleshooting Tip: If one defines the empty macros and invokes them in the same crate, that&#39;ll invoke the empty macros rather than the ones registered by the compiler plugin, which is the opposite of what you want. Do not be alarmed. Once the empty macros are defined in a separate crate from the invocation site, the procedural macros will be called as expected."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1453081423, "last_edit_date": 1453081423, "creation_date": 1453080770, "answer_id": 34845971, "question_id": 34845752, "link": "https://stackoverflow.com/questions/34845752/documenting-items-rustdoc-cannot-see/34845971#34845971", "title": "Documenting items rustdoc cannot see", "body": "<p>One possibility is to do what <a href=\"https://github.com/rust-lang/rust/blob/4ab9a2d1d6a5140c1968e59449442d3cc9006fdd/src/libstd/macros.rs#L197-L465\" rel=\"nofollow\">the compiler does</a>: create an empty <code>macro_rules!</code> macro and attach documentation to that. E.g. if a crate defines <code>foo</code> that takes a single expression, then write something like</p>\n\n<pre><code>/// Documentation\n#[macro_export]\nmacro_rules! foo {\n     ($e: expr) =&gt; ({ /* syntax extension */ })\n}\n</code></pre>\n\n<blockquote>\n  <p>I notice the syntax crate could benefit from such a thing as well. quote_item, for instance, is completely undocumented. I can't even find the code that registers it.</p>\n</blockquote>\n\n<p>You can <a href=\"https://github.com/rust-lang/rust/search?utf8=%E2%9C%93&amp;q=%27%22quote_item%22%27&amp;type=Code\" rel=\"nofollow\">search the Rust source for <code>quote_item</code></a>, which is helpful for two reasons: it gives some examples, and also allows you to track down the definition. The latter is easier using <a href=\"https://dxr.mozilla.org/rust/search?q=%27%22quote_item%22%27&amp;redirect=true&amp;case=false\" rel=\"nofollow\">Rust's DXR instance</a> which can search for things with quotes (i.e. can find strings), and includes various source code navigation tricks (like jump-to-definition).</p>\n"}], "owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 192, "favorite_count": 0, "accepted_answer_id": 34845971, "answer_count": 1, "score": 3, "last_activity_date": 1453081423, "creation_date": 1453078769, "last_edit_date": 1453080096, "question_id": 34845752, "link": "https://stackoverflow.com/questions/34845752/documenting-items-rustdoc-cannot-see", "title": "Documenting items rustdoc cannot see", "body": "<p>I notice that compiler plugins frequently provide macros that the documentation wont even mention. They're registered and created programmatically rather than being defined in a syntax rustdoc recognizes. Naturally, no documentation can be shown.</p>\n\n<p>I'm looking for a way to get around that, some way of generating documentation for a macro that doesn't exist in the crate at compile time.</p>\n\n<p>I notice the syntax crate could benefit from such a thing as well. <code>quote_item</code>, for instance, is completely undocumented. I can't even find the code that registers it.</p>\n"}, {"tags": ["return", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1453078148, "post_id": 34845546, "comment_id": 57431874, "body": "Also of interest is that it&#39;s the return of <code>&amp;K</code> that causes the problem."}], "answers": [{"comments": [{"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453136371, "post_id": 34853304, "comment_id": 57459485, "body": "This is always true for any return statement though, isn&#39;t it?  Could you give an example of a case where the borrow checker is correct in not letting the borrow end?"}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453137294, "post_id": 34853304, "comment_id": 57460061, "body": "To clarify, why should a return statement be counted as &quot;escaping the scope&quot; at all?  Since it necessarily precludes any conflicting thing from happening by immediately ending the function call."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453137813, "post_id": 34853304, "comment_id": 57460373, "body": "@dspyz I tried to specify a bit better how the compiler reasons about lifetimes. If you return <code>&amp;K</code> it will have the same lifetime as <code>&amp;mut self</code> (so at least as long as <code>insert_largest</code>). In this sense an early return &quot;escapes the scope&quot; of the nearest enclosing block (the match)."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453198442, "post_id": 34853304, "comment_id": 57485959, "body": "@dspyz I added an example <a href=\"http://is.gd/0pzjoW\" rel=\"nofollow noreferrer\">here on the playground</a> to show you that when you tie the lifetime of the return value to &amp;self, the borrow extends even beyond the function. When you assign the return of the function the compiler must ensure that self stays borrowed until that return value falls out of scope."}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453224956, "post_id": 34853304, "comment_id": 57504453, "body": "I don&#39;t think that&#39;s really a counterexample.  I formalized my proposed rules for handling return-statements above.  Please take another look."}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453229406, "post_id": 34853304, "comment_id": 57507051, "body": "Actually, to put it much more simply, why should any return statement be less safe than &quot;return panic!()&quot;?  Couldn&#39;t the borrow checker just replace all return statements with &quot;return panic!()&quot; for the purposes of checking correctness?  Or can this lead to something bad?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453236653, "post_id": 34853304, "comment_id": 57511495, "body": "@dspyz not sure I get your point. A panic is a runtime thing, there is nothing inherently unsafe with it. The program compiles and (when run) exits with an error as you told it to. Returning a reference from a function is different. The compiler tries to ensure that the memory that reference points to is still alive when you assign that return value (so even out of the function itself)"}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453238470, "post_id": 34853304, "comment_id": 57512529, "body": "The panic!() isn&#39;t the point, I just wanted something that would typecheck.  What I mean is, consider any borrowchecking function containing the line &quot;return panic!()&quot;.  If we replace &quot;panic!()&quot; with &quot;x&quot; (where &quot;x&quot; is a variable, possibly even a borrow or a mutable borrow in the function) to get &quot;return x&quot;, is there ever a reason why such a function shouldn&#39;t borrowcheck?  If yes, can you provide an example of such a function?  If not, why not just replace all &quot;return&quot; statements with &quot;panic&quot; statements when borrow-checking the function?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453267582, "post_id": 34853304, "comment_id": 57522272, "body": "@dspyz I think we should find another home for this discussion. This is not the format for Stackoverflow. Happy to take it to the rust subreddit or the rust users forum if you wish"}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1453352358, "post_id": 34853304, "comment_id": 57566346, "body": "<a href=\"https://www.reddit.com/r/rust/comments/41ydv1/why_does_returning_early_not_finish_outstanding/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/41ydv1/&hellip;</a>"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 7, "last_activity_date": 1453286883, "last_edit_date": 1453286883, "creation_date": 1453115480, "answer_id": 34853304, "question_id": 34845546, "link": "https://stackoverflow.com/questions/34845546/why-does-returning-early-not-finish-outstanding-borrows/34853304#34853304", "title": "Why does returning early not finish outstanding borrows?", "body": "<p>If we name lifetimes explicitly, the signature of <code>insert_largest</code> becomes <code>fn insert_largest&lt;'a&gt;(&amp;'a mut self, k: K, v: V) -&gt; Result&lt;(), &amp;'a K&gt;</code>. So, when you create your return type <code>&amp;K</code>, its lifetime will be the same as the <code>&amp;mut self</code>.</p>\n\n<p>And, in fact, you are taking and returning <code>lk</code> from inside <code>self</code>.\nThe compiler is seeing that the reference to <code>lk</code> escapes the scope of the match (as it is assigned to the return value of the function, so it must outlive the function itself) and it can't let the borrow end when the match is over.</p>\n\n<p>I think you're saying that the compiler should be smarter and realize that the <code>self.0.push</code> can only ever be reached if <code>lk</code> was not returned. But it is not. And I'm not even sure how hard it would be to teach it that sort of analysis, as it's a bit more sophisticated than the way I understand the borrow checker reasons today. </p>\n\n<p>Today, the compiler sees a reference and basically tries to answer one question (\"how long does this live?\"). When it sees that your return value is <code>lk</code>, it assigns <code>lk</code> the lifetime it expects for the return value from the fn's signature (<code>'a</code> with the explicit name we gave it above) and calls it a day.</p>\n\n<p>So, in short:</p>\n\n<ul>\n<li><em>should an early return end the mutable borrow on self?</em> No. As said the borrow should extend outside of the function and follow its return value</li>\n<li><em>is the borrow checker a bit too strict in the code that goes from the early return to the end of the function?</em> Yes, I think so. The part after the early return and before the end of the function is only reachable if the function has NOT returned early, so I think you have a point that the borrow checked might be less strict with borrows <em>in that specific area of code</em> </li>\n<li><em>do I think it's feasible/desirable to change the compiler to enable that pattern?</em> I have no clue. The borrow checker is one of the most complex pieces of the Rust compiler and I'm not qualified to give you an answer on that. This seems related to (and might even be a subset of) the discussion on <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow\">non-lexical borrow scopes</a>, so I encourage you to look into it and possibly contribute if you're interested in this topic.</li>\n</ul>\n\n<p>For the time being I'd suggest just returning a clone instead of a reference, if possible. I assume returning an <code>Err</code> is not the typical case, so performance should not be a particular worry, but I'm not sure how the <code>K:Clone</code> bound might work with the types you're using.</p>\n\n<pre><code>impl &lt;K, V&gt; MyArray&lt;K, V&gt; where K:Clone + Ord { // 1. now K is also Clone\n    pub fn insert_largest(&amp;mut self, k: K, v: V) -&gt; \n                                    Result&lt;(), K&gt; { // 2. returning K (not &amp;K)\n        match self.0.iter().next_back() {\n            None =&gt; (),\n            Some(&amp;(ref lk, _)) =&gt; {\n                if lk &gt; &amp;k {\n                    return Err(lk.clone()); // 3. returning a clone\n                }\n            }\n        };\n        self.0.push((k, v));\n        Ok(())\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1531675687, "creation_date": 1531675687, "answer_id": 51350561, "question_id": 34845546, "link": "https://stackoverflow.com/questions/34845546/why-does-returning-early-not-finish-outstanding-borrows/51350561#51350561", "title": "Why does returning early not finish outstanding borrows?", "body": "<blockquote>\n  <p>Why does returning early not finish outstanding borrows?</p>\n</blockquote>\n\n<p>Because the current implementation of the borrow checker is overly conservative.</p>\n\n<p>Your code works as-is once <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> are enabled, but only with the experimental \"Polonius\" implementation. Polonius is what enables <em>conditional</em> tracking of borrows.</p>\n\n<p>I've also simplified your code a bit:</p>\n\n<pre><code>#![feature(nll)]\n\nstruct MyArray&lt;K, V&gt;(Vec&lt;(K, V)&gt;);\n\nimpl&lt;K: Ord, V&gt; MyArray&lt;K, V&gt; {\n    pub fn insert_largest(&amp;mut self, k: K, v: V) -&gt; Result&lt;(), &amp;K&gt; {\n        if let Some((lk, _)) = self.0.iter().next_back() {\n            if lk &gt; &amp;k {\n                return Err(lk);\n            }\n        }\n\n        self.0.push((k, v));\n        Ok(())\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 417, "favorite_count": 1, "answer_count": 2, "score": 3, "last_activity_date": 1531675687, "creation_date": 1453076779, "last_edit_date": 1531675236, "question_id": 34845546, "link": "https://stackoverflow.com/questions/34845546/why-does-returning-early-not-finish-outstanding-borrows", "title": "Why does returning early not finish outstanding borrows?", "body": "<p>I'm trying to write a function which pushes an element onto the end of a sorted vector only if the element is larger than the last element already in the vector, otherwise returns an error with a ref to the largest element.  This doesn't seem to violate any borrowing rules as far as I cant tell, but the borrow checker doesn't like it.  I don't understand why.</p>\n\n<pre><code>struct MyArray&lt;K, V&gt;(Vec&lt;(K, V)&gt;);\n\nimpl&lt;K: Ord, V&gt; MyArray&lt;K, V&gt; {\n    pub fn insert_largest(&amp;mut self, k: K, v: V) -&gt; Result&lt;(), &amp;K&gt; {\n        {\n            match self.0.iter().next_back() {\n                None =&gt; (),\n                Some(&amp;(ref lk, _)) =&gt; {\n                    if lk &gt; &amp;k {\n                        return Err(lk);\n                    }\n                }\n            };\n        }\n        self.0.push((k, v));\n        Ok(())\n    }\n}\n</code></pre>\n\n<p></p>\n\n<pre><code>error[E0502]: cannot borrow `self.0` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:15:9\n   |\n6  |             match self.0.iter().next_back() {\n   |                   ------ immutable borrow occurs here\n...\n15 |         self.0.push((k, v));\n   |         ^^^^^^ mutable borrow occurs here\n16 |         Ok(())\n17 |     }\n   |     - immutable borrow ends here\n</code></pre>\n\n<p>Why doesn't this work?</p>\n\n<hr>\n\n<p>In response to <a href=\"https://stackoverflow.com/a/34853304/155423\">Paolo Falabella's answer</a>.</p>\n\n<p>We can translate any function with a return statement into one without a return statement as follows:</p>\n\n<pre><code>fn my_func() -&gt; &amp;MyType {\n    'inner: {\n        // Do some stuff\n        return &amp;x;\n    }\n    // And some more stuff\n}\n</code></pre>\n\n<p>Into</p>\n\n<pre><code>fn my_func() -&gt; &amp;MyType {\n    let res;\n    'outer: {\n        'inner: {\n            // Do some stuff\n            res = &amp;x;\n            break 'outer;\n        }\n        // And some more stuff\n    }\n    res\n}\n</code></pre>\n\n<p>From this, it becomes clear that the borrow outlives the scope of <code>'inner</code>.</p>\n\n<p>Is there any problem with instead using the following rewrite for the purpose of borrow-checking?</p>\n\n<pre><code>fn my_func() -&gt; &amp;MyType {\n    'outer: {\n        'inner: {\n            // Do some stuff\n            break 'outer;\n        }\n        // And some more stuff\n    }\n    panic!()\n}\n</code></pre>\n\n<p>Considering that return statements preclude anything from happening afterwards which might otherwise violate the borrowing rules.</p>\n"}, {"tags": ["struct", "enums", "rust"], "answers": [{"tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": true, "score": 1, "last_activity_date": 1453038385, "last_edit_date": 1453038385, "creation_date": 1453037800, "answer_id": 34838928, "question_id": 34838531, "link": "https://stackoverflow.com/questions/34838531/accessing-a-struct-inside-an-enum/34838928#34838928", "title": "Accessing a struct inside an enum", "body": "<p>I think the first problem is that what you really want is <code>y</code> to be of type <code>A</code>, so it cannot have a field named <code>c</code> in the first place. <code>y</code> can be <code>A::B</code> or <code>A::D</code>. Only if <code>y</code> is an <code>A::B</code> variant, then you can get the <code>B_</code> object inside the variant and then get the <code>c</code>.</p>\n\n<p>The second problem in your code is that you are not initializing <code>y</code> to be an <code>A::B</code> variant. The expression <code>A::B</code> is of type <code>fn(B_) -&gt; A {A::B}</code> which is a kind of constructor function (automagically generated by the compiler) for <code>A</code> enums.</p>\n\n<p>The following code initialize <code>y</code> correctly and get <code>c</code>:</p>\n\n<pre><code>enum A {\n    B(B_),\n    D(D_)\n}\n\nenum D_ { D_1, D_2 }\n\nstruct B_ {\n    c: Vec&lt;i32&gt;,\n}\n\nfn main() {\n    let y = A::B( B_ { c : Vec::new() });\n\n    // Check if y is an A::B, so we can get the B_ object inside\n    // by deconstruction. Then we can get c.\n    if let A::B(b_) = y {\n        println!(\"{:?}\", b_.c);\n    }\n}\n</code></pre>\n\n<p>Maybe you thought that <code>A::B</code> is a kind of <code>B</code> type defined \"inside\" <code>A</code>, which is not how enums work is Rust. </p>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 615, "favorite_count": 0, "accepted_answer_id": 34838928, "answer_count": 1, "score": 1, "last_activity_date": 1453038385, "creation_date": 1453035229, "question_id": 34838531, "link": "https://stackoverflow.com/questions/34838531/accessing-a-struct-inside-an-enum", "title": "Accessing a struct inside an enum", "body": "<p>How do I access field <code>c</code> inside <code>struct</code> of type <code>B_</code> inside <code>enum</code> of type <code>A</code> in this case?</p>\n\n<pre><code>enum A {\n    B(B_),\n    D(D_)\n}\n\nenum D_ { D_1, D_2 }\n\nstruct B_ {\n    c: Vec&lt;i32&gt;,\n}\n</code></pre>\n\n<p>Obvious stuff like this doesn't work:</p>\n\n<pre><code>let y = A::B;\ny.c = Vec::new();\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1453173054, "post_id": 34866679, "comment_id": 57474941, "body": "FYI, I tried to replace a few impls for <code>Read</code> in the std crate with a generic <code>impl&lt;T, U: ?Sized&gt; Read for T where T: DerefMut&lt;U&gt;, U: Read</code>, but that impl conflicted with the impl for <code>&amp;[u8]</code>..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1453164120, "creation_date": 1453164120, "answer_id": 34866679, "question_id": 34838396, "link": "https://stackoverflow.com/questions/34838396/making-a-wrapper-type-implementation-generic/34866679#34866679", "title": "Making a wrapper type implementation generic", "body": "<blockquote>\n  <p>Is there a way to have a generic implementation of <code>Limited</code> that would work for <code>Read</code>, <code>RefMut&lt;Read&gt;</code>, <code>Rc&lt;Read&gt;</code>, <code>Deref&lt;Target=Read&gt;</code>?</p>\n</blockquote>\n\n<p>Not really.</p>\n\n<p><code>Read</code> and <code>DerefMut</code> <sup>1</sup> are both traits. What should the expected behavior be if you passed in a type that implemented <strong>both traits</strong>? There's <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow\">a RFC for <em>specialization</em></a> that might allow this in some form or the other. As the name says, it's usually about a more specific implementation, so I don't know how two distinct traits would fit in.</p>\n\n<p><code>RefMut</code> already implements <code>DerefMut</code>, so presumably that would be covered. I don't know how <code>Rc</code> would come into play as it's only for immutable data.</p>\n\n<p><strong>1</strong>: I assume you mean <code>DerefMut</code> instead of <code>Deref</code> as <code>Read</code> needs a mutable receiver.</p>\n"}], "owner": {"reputation": 11609, "user_id": 100237, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/05dddc8770b7d4f438c78a287da1c404?s=128&d=identicon&r=PG", "display_name": "pingw33n", "link": "https://stackoverflow.com/users/100237/pingw33n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 208, "favorite_count": 0, "accepted_answer_id": 34866679, "answer_count": 1, "score": 0, "last_activity_date": 1453195417, "creation_date": 1453034352, "last_edit_date": 1453195417, "question_id": 34838396, "link": "https://stackoverflow.com/questions/34838396/making-a-wrapper-type-implementation-generic", "title": "Making a wrapper type implementation generic", "body": "<p>I have the following wrapper type (similar to <code>std::io::Cursor</code>) to allow limiting the number of bytes read:</p>\n\n<pre><code>use std::{cmp, io};\n\npub struct Limited&lt;T&gt; {\n    inner: T,\n    pos: u64,\n    limit: u64,\n}\n\nimpl&lt;T&gt; Limited&lt;T&gt; {\n    pub fn new(inner: T, limit: u64) -&gt; Limited&lt;T&gt; {\n        Limited {\n            inner: inner,\n            pos: 0,\n            limit: limit,\n        }\n    }\n\n    pub fn pos(&amp;self) -&gt; u64 { self.pos }\n    pub fn limit(&amp;self) -&gt; u64 { self.limit }\n    pub fn into_inner(self) -&gt; T { self.inner }\n    pub fn get_ref(&amp;self) -&gt; &amp;T { &amp;self.inner }\n    pub fn get_mut(&amp;mut self) -&gt; &amp;mut T { &amp;mut self.inner }\n}\n\nimpl&lt;T: io::Read&gt; io::Read for Limited&lt;T&gt; {\n    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n        let can_read = cmp::min(buf.len() as u64, self.limit - self.pos);\n        if can_read != 0 {\n            match self.inner.read(&amp;mut buf[..(can_read as usize)]) {\n                Ok(read) =&gt; {\n                    self.pos += read as u64;\n                    Ok(read)\n                },\n                e @ _ =&gt; e\n            }\n        } else {\n            Ok(0)\n        }\n    }\n}\n</code></pre>\n\n<p>Then I can use it like this:</p>\n\n<pre><code>let mut l = Limited::new(io::Cursor::new(vec![1, 2, 3]), 1);\nassert_eq!(l.read(&amp;mut [0; 10]).unwrap(), 1);\n</code></pre>\n\n<p>Next I need to have <code>Limited&lt;RefMut&lt;Read&gt;&gt;</code> (so it owns the <code>RefMut</code>). Adding <code>impl&lt;'a, T: 'a + io::Read&gt; io::Read for Limited&lt;RefMut&lt;'a, T&gt;&gt;</code> makes the compiler complain about conflicting implementations.</p>\n\n<p>Is there a way to have a generic implementation of <code>Limited</code> that would work for <code>Read</code>, <code>RefMut&lt;Read&gt;</code>, <strike><code>Rc&lt;Read&gt;</code></strike>, <code>DerefMut&lt;Target=Read&gt;</code>?</p>\n"}, {"tags": ["terminal", "rust"], "comments": [{"owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "edited": false, "score": 8, "creation_date": 1507934513, "post_id": 34837011, "comment_id": 80424793, "body": "This is no duplicate! This is asking for a way to clear the terminal. The linked &quot;duplicate&quot; is about clearing the current line. The question also states that clearing the current line is not helpful."}], "answers": [{"comments": [{"owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 3, "creation_date": 1576681929, "post_id": 34837038, "comment_id": 104979122, "body": "A simpler way: <code>print!(&quot;\\x1B[2J&quot;);</code>"}, {"owner": {"reputation": 879, "user_id": 3758602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b2cc0ae99a2b8e5491ecd59bebdeecae?s=128&d=identicon&r=PG&f=1", "display_name": "iamcastelli", "link": "https://stackoverflow.com/users/3758602/iamcastelli"}, "reply_to_user": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 0, "creation_date": 1593507215, "post_id": 34837038, "comment_id": 110798594, "body": "@PavelStrakhov, that though wont position the cursor to the very top. But i&#39;ts way much simpler if compared to the first."}], "tags": [], "owner": {"reputation": 833, "user_id": 413672, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f89adbc8e686e72004d8be6902a89d74?s=128&d=identicon&r=PG", "display_name": "minghan", "link": "https://stackoverflow.com/users/413672/minghan"}, "is_accepted": false, "score": 41, "last_activity_date": 1609869581, "last_edit_date": 1609869581, "creation_date": 1453024433, "answer_id": 34837038, "question_id": 34837011, "link": "https://stackoverflow.com/questions/34837011/how-to-clear-the-terminal-screen-in-rust-after-a-new-line-is-printed/34837038#34837038", "title": "How to clear the terminal screen in Rust after a new line is printed?", "body": "<p>You can send a control character to <a href=\"http://rosettacode.org/wiki/Terminal_control/Clear_the_screen\" rel=\"noreferrer\">clear the terminal screen</a>.</p>\n<pre><code>fn main() {\n    print!(&quot;{}[2J&quot;, 27 as char);\n}\n</code></pre>\n<p>Or to also <a href=\"https://stackoverflow.com/a/4062051/214446\">position the cursor at row <code>1</code>, column <code>1</code></a>:</p>\n<pre><code>print!(&quot;{esc}[2J{esc}[1;1H&quot;, esc = 27 as char);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 121, "user_id": 13647389, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/262be18ccffc131fc1028194ce807543?s=128&d=identicon&r=PG", "display_name": "Muhammad Tariq Baig", "link": "https://stackoverflow.com/users/13647389/muhammad-tariq-baig"}, "is_accepted": false, "score": 12, "last_activity_date": 1590845716, "last_edit_date": 1590845716, "creation_date": 1590837814, "answer_id": 62101709, "question_id": 34837011, "link": "https://stackoverflow.com/questions/34837011/how-to-clear-the-terminal-screen-in-rust-after-a-new-line-is-printed/62101709#62101709", "title": "How to clear the terminal screen in Rust after a new line is printed?", "body": "<pre><code>print!(\"\\x1B[2J\\x1B[1;1H\");\n</code></pre>\n\n<p>This will clear the screen and put the cursor at first row &amp; first col of the screen.</p>\n"}, {"comments": [{"owner": {"reputation": 113, "user_id": 10824041, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/sSfiB.jpg?s=128&g=1", "display_name": "amyiris", "link": "https://stackoverflow.com/users/10824041/amyiris"}, "edited": false, "score": 0, "creation_date": 1615167439, "post_id": 65583826, "comment_id": 117600040, "body": "This doesn&#39;t actually have the desired effect."}], "tags": [], "owner": {"reputation": 1, "user_id": 13819618, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GgTAd_ci0R-RoqQGVSgoqNfeBtBaJ0dylmdZk2nVg=k-s128", "display_name": "moloko824", "link": "https://stackoverflow.com/users/13819618/moloko824"}, "is_accepted": false, "score": -3, "last_activity_date": 1609869614, "last_edit_date": 1609869614, "creation_date": 1609868242, "answer_id": 65583826, "question_id": 34837011, "link": "https://stackoverflow.com/questions/34837011/how-to-clear-the-terminal-screen-in-rust-after-a-new-line-is-printed/65583826#65583826", "title": "How to clear the terminal screen in Rust after a new line is printed?", "body": "<p>Try this in the Linux or macOS terminal:</p>\n<pre><code>std::process::Command::new(&quot;clear&quot;).status().unwrap();\n</code></pre>\n<p>In Windows one:</p>\n<pre><code>std::process::Command::new(&quot;cls&quot;).status().unwrap();\n</code></pre>\n<p>This basically sends the &quot;clear&quot; command to terminal.</p>\n"}, {"tags": [], "owner": {"reputation": 52, "user_id": 5833342, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/WRe62.jpg?s=128&g=1", "display_name": "Dan Charousek", "link": "https://stackoverflow.com/users/5833342/dan-charousek"}, "is_accepted": false, "score": 0, "last_activity_date": 1617313523, "creation_date": 1617313523, "answer_id": 66911945, "question_id": 34837011, "link": "https://stackoverflow.com/questions/34837011/how-to-clear-the-terminal-screen-in-rust-after-a-new-line-is-printed/66911945#66911945", "title": "How to clear the terminal screen in Rust after a new line is printed?", "body": "<p>Solutions provided by the upvoted answers did not work the way I wanted to.\nThe <code>\\x1B[2J\\x1B[1;1H</code> sequency only scrolls down the terminal so it actually hides the content and does not clear it. As I wanted to run and infinite loop that re-renders the content shown to the user, this was problem since the scrollbar of my terminal window was shrinking with every &quot;tick&quot;.</p>\n<p>Inspired from <a href=\"https://stackoverflow.com/questions/5367068/clear-a-terminal-screen-for-real\">Clear a terminal screen for real</a> I am using</p>\n<pre class=\"lang-rust prettyprint-override\"><code>print!(&quot;{esc}c&quot;, esc = 27 as char);\n</code></pre>\n<p>which works great for me. There might be some drawback on other systems than I use (Ubuntu), I do not know that.</p>\n"}], "owner": {"reputation": 1204, "user_id": 3241447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/unNbh.jpg?s=128&g=1", "display_name": "Haru Atari", "link": "https://stackoverflow.com/users/3241447/haru-atari"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11774, "favorite_count": 4, "answer_count": 4, "score": 22, "last_activity_date": 1617313523, "creation_date": 1453024078, "last_edit_date": 1609869562, "question_id": 34837011, "link": "https://stackoverflow.com/questions/34837011/how-to-clear-the-terminal-screen-in-rust-after-a-new-line-is-printed", "title": "How to clear the terminal screen in Rust after a new line is printed?", "body": "<p>I have printed some text using <code>println!</code> and now I need to clear the terminal and write the new text instead of the old. How can I clear all the current text from terminal?</p>\n<p>I have tried this code, but it only clears the current line and <code>1</code> is still in the output.</p>\n<pre><code>fn main() {\n    println!(&quot;1&quot;);\n    print!(&quot;2&quot;);\n    print!(&quot;\\r&quot;);\n}\n</code></pre>\n"}, {"tags": ["hashmap", "rust", "libraries"], "answers": [{"tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": true, "score": 13, "last_activity_date": 1523980029, "last_edit_date": 1523980029, "creation_date": 1452983087, "answer_id": 34832819, "question_id": 34832583, "link": "https://stackoverflow.com/questions/34832583/global-mutable-hashmap-in-a-library/34832819#34832819", "title": "Global mutable HashMap in a library", "body": "<p>This would be possible with the <a href=\"https://github.com/rust-lang-nursery/lazy-static.rs\" rel=\"noreferrer\"><code>lazy_static</code></a> crate. As seen in their example. Since mutablity accessing a static variable is unsafe, it would need to wrapped into a <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"noreferrer\"><code>Mutex</code></a>. I would recommend not making the <code>HashMap</code> public, but instead provide a set of methods that lock, and provide access to the <code>HashMap</code>. <a href=\"https://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">See this answer</a> on making a globally mutable singleton.</p>\n\n<p></p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\nuse std::sync::Mutex;\n\nlazy_static! {\n    static ref HASHMAP: Mutex&lt;HashMap&lt;u32, &amp;'static str&gt;&gt; = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        Mutex::new(m)\n    };    \n}\n\nfn main() {\n    let mut map = HASHMAP.lock().unwrap();\n    map.insert(3, \"sample\");\n}\n</code></pre>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6646, "favorite_count": 0, "closed_date": 1452986227, "accepted_answer_id": 34832819, "answer_count": 1, "score": 9, "last_activity_date": 1523980029, "creation_date": 1452981404, "question_id": 34832583, "link": "https://stackoverflow.com/questions/34832583/global-mutable-hashmap-in-a-library", "closed_reason": "Duplicate", "title": "Global mutable HashMap in a library", "body": "<p>I want to have an extendable dictionary linking together <code>Object</code> with a <code>&amp;'static str</code> inside my library. <code>HashMap</code> seems like the right data structure for this, but how do I make it global, initialised on declaration and mutable?</p>\n\n<p>So something like this:</p>\n\n<pre><code>use std::collections::HashMap;\n\nenum Object { A, B, C }\n\nconst OBJECT_STR: &amp;'static [&amp;'static str] = &amp;[ \"a\", \"b\", \"c\" ];\n\nstatic mut word_map: HashMap&lt;&amp;'static str, Object&gt; = {\n    let mut m = HashMap::new();\n    m.insert(OBJECT_STR[0], Object::A);\n    m.insert(OBJECT_STR[1], Object::B);\n    m.insert(OBJECT_STR[2], Object::C);\n    m\n};\n\nimpl Object {\n...\n}\n</code></pre>\n"}, {"tags": ["performance", "rust", "shared-memory"], "comments": [{"owner": {"reputation": 163028, "user_id": 477878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qounX.jpg?s=128&g=1", "display_name": "Joachim Isaksson", "link": "https://stackoverflow.com/users/477878/joachim-isaksson"}, "edited": false, "score": 2, "creation_date": 1452968036, "post_id": 34830369, "comment_id": 57402428, "body": "Well, you&#39;re running 14 instances in parallel, so each taking 4 times as long still generates ~3 times more tickets per second."}, {"owner": {"reputation": 27440, "user_id": 4756299, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e38adc5559df095cfe10c664916e8ffa?s=128&d=identicon&r=PG&f=1", "display_name": "Andrew Henle", "link": "https://stackoverflow.com/users/4756299/andrew-henle"}, "edited": false, "score": 0, "creation_date": 1452968154, "post_id": 34830369, "comment_id": 57402464, "body": "<i>why would it be MUCH slower when running multiple instances?</i>  Why?  Because whatever it&#39;s doing doesn&#39;t scale, or you&#39;re bound by some resource limit such as CPU cycles.  Without detailed information, all anyone can do is guess."}, {"owner": {"reputation": 15473, "user_id": 744720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65030f1bd22dbb4d1e6976cfac08a1c5?s=128&d=identicon&r=PG", "display_name": "keltar", "link": "https://stackoverflow.com/users/744720/keltar"}, "edited": false, "score": 3, "creation_date": 1452968512, "post_id": 34830369, "comment_id": 57402597, "body": "<a href=\"http://doc.rust-lang.org/rand/rand/index.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/rand/rand/index.html</a> section about blocking"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15473, "user_id": 744720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65030f1bd22dbb4d1e6976cfac08a1c5?s=128&d=identicon&r=PG", "display_name": "keltar", "link": "https://stackoverflow.com/users/744720/keltar"}, "edited": false, "score": 1, "creation_date": 1452968820, "post_id": 34830369, "comment_id": 57402713, "body": "@keltar reading the <a href=\"http://doc.rust-lang.org/rand/rand/index.html#cryptographic-security\" rel=\"nofollow noreferrer\">section I think you mean</a> (note you can link to a specific header of the docs), it says that a Linux system past kernel 3.17 is unlikely to block unless the system has recently been booted. Do you suspect that is the case here?"}, {"owner": {"reputation": 15473, "user_id": 744720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65030f1bd22dbb4d1e6976cfac08a1c5?s=128&d=identicon&r=PG", "display_name": "keltar", "link": "https://stackoverflow.com/users/744720/keltar"}, "edited": false, "score": 0, "creation_date": 1452969500, "post_id": 34830369, "comment_id": 57402949, "body": "Ok, let me rephrase it. <code>urandom</code> isn&#39;t instantly-fast. It takes time to generate random number, and by time I mean CPU cycles. Program have no designated sleeps or blocks, so it have no reason to not occupy full CPU, and if it doesn&#39;t - it probably means <code>urandom</code> can work only on one CPU core (which makes sense, but cannot verify for now). Since it is kernel call it will not be counted as your program CPU load, but as system time."}, {"owner": {"reputation": 15473, "user_id": 744720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65030f1bd22dbb4d1e6976cfac08a1c5?s=128&d=identicon&r=PG", "display_name": "keltar", "link": "https://stackoverflow.com/users/744720/keltar"}, "edited": false, "score": 0, "creation_date": 1452969966, "post_id": 34830369, "comment_id": 57403110, "body": "@electrometro what does it even mean and how it reflects &quot;I am only hitting about 45% core load&quot;?"}, {"owner": {"reputation": 15473, "user_id": 744720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65030f1bd22dbb4d1e6976cfac08a1c5?s=128&d=identicon&r=PG", "display_name": "keltar", "link": "https://stackoverflow.com/users/744720/keltar"}, "edited": false, "score": 2, "creation_date": 1452970438, "post_id": 34830369, "comment_id": 57403253, "body": "@electrometro which is exactly what I meant when I said urandom doesn&#39;t go parallel, or at least not infinitely. Look at e.g. <a href=\"http://drsnyder.us/2014/04/16/linux-dev-urandom-and-concurrency.html\" rel=\"nofollow noreferrer\">drsnyder.us/2014/04/16/linux-dev-urandom-and-concurrency.htm&zwnj;&#8203;l</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15473, "user_id": 744720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65030f1bd22dbb4d1e6976cfac08a1c5?s=128&d=identicon&r=PG", "display_name": "keltar", "link": "https://stackoverflow.com/users/744720/keltar"}, "edited": false, "score": 1, "creation_date": 1452971202, "post_id": 34830369, "comment_id": 57403515, "body": "@keltar Rust doesn&#39;t <i>just</i> ask <code>&#47;dev&#47;urandom</code> for bits. <a href=\"https://github.com/rust-lang-nursery/rand/blob/8feb9df678990f91c39759f62c05f5ad5a6a78c8/src/os.rs\" rel=\"nofollow noreferrer\"><code>OsRng</code></a> uses <code>getrandom</code> or <code>&#47;dev&#47;urandom</code>, which then seeds <a href=\"https://github.com/rust-lang-nursery/rand/blob/8feb9df678990f91c39759f62c05f5ad5a6a78c8/src/lib.rs#L783-L798\" rel=\"nofollow noreferrer\"><code>StdRng</code></a> which is <a href=\"https://github.com/rust-lang-nursery/rand/blob/8feb9df678990f91c39759f62c05f5ad5a6a78c8/src/lib.rs#L873\" rel=\"nofollow noreferrer\">kept in TLS</a> and <a href=\"https://github.com/rust-lang-nursery/rand/blob/8feb9df678990f91c39759f62c05f5ad5a6a78c8/src/lib.rs#L851\" rel=\"nofollow noreferrer\">reseeded every 32K</a>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1452971916, "post_id": 34830369, "comment_id": 57403730, "body": "<code>.unique()</code> is using a <code>HashSet</code> too, so that&#39;s another thing hitting <code>OsRng</code> regularly."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1453813193, "post_id": 34830369, "comment_id": 57755398, "body": "What is the problem? How does your result differ from your expectations?"}, {"owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1453832304, "post_id": 34830369, "comment_id": 57768401, "body": "@sellibitze maybe my expectations are skewed but I would expect it to be almost linear in scaling. I would expect running multiple of the same code wouldn&#39;t make each one individually slow down unless I was maxing out some sort of hardware (CPU, Memory, Disk)."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1453983829, "post_id": 34830369, "comment_id": 57845459, "body": "What level of concurrency does your hardware support? If your hardware concurrency is 4 (being able to run 4 threads concurrently) your time measurements are exactly what I would expect."}, {"owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1454016219, "post_id": 34830369, "comment_id": 57867580, "body": "@sellibitze Yes, as I have stated I am NOT hitting my maximum amount of CPU threads/cores or percent utilization on either. Each thread used (14 of them in this case) is at 100%. But I have many more available."}], "owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 987, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1452970676, "creation_date": 1452967794, "last_edit_date": 1452970676, "question_id": 34830369, "link": "https://stackoverflow.com/questions/34830369/why-is-the-rust-random-number-generator-slower-with-multiple-instances-running", "title": "Why is the Rust random number generator slower with multiple instances running?", "body": "<p>I am doing some random number generation for my <a href=\"https://codereview.stackexchange.com/questions/116399/lotto-simulator\">Lotto Simulation</a> and was wondering why would it be MUCH slower when running multiple instances? </p>\n\n<p>I am running this program under Ubuntu 15.04 (linux kernel 4.2). <code>rustc 1.7.0-nightly (d5e229057 2016-01-04)</code></p>\n\n<p>Overall CPU utilization is about 45% during these tests but each individual thread is taking up 100% of that thread. </p>\n\n<p>Here is my script I am using to start multiple instances at the same time.</p>\n\n<pre><code>#!/usr/bin/env bash\n\npkill lotto_sim\n\nfor _ in `seq 1 14`;\ndo\n    ./lotto_sim 15000000 1&gt;&gt; /var/log/syslog &amp;\ndone\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Took PT38.701900316S seconds to generate 15000000 random tickets\nTook PT39.193917241S seconds to generate 15000000 random tickets\nTook PT39.412279484S seconds to generate 15000000 random tickets\nTook PT39.492940352S seconds to generate 15000000 random tickets\nTook PT39.715433024S seconds to generate 15000000 random tickets\nTook PT39.726609237S seconds to generate 15000000 random tickets\nTook PT39.884151996S seconds to generate 15000000 random tickets\nTook PT40.025874106S seconds to generate 15000000 random tickets\nTook PT40.088332517S seconds to generate 15000000 random tickets\nTook PT40.112601899S seconds to generate 15000000 random tickets\nTook PT40.205958636S seconds to generate 15000000 random tickets\nTook PT40.227956170S seconds to generate 15000000 random tickets\nTook PT40.393753486S seconds to generate 15000000 random tickets\nTook PT40.465173616S seconds to generate 15000000 random tickets\n</code></pre>\n\n<p>However, a single run gives this output:</p>\n\n<pre><code>$ ./lotto_sim 15000000\nTook PT9.860698141S seconds to generate 15000000 random tickets\n</code></pre>\n\n<p>My understanding is that each process has it's own memory and doesn't share anything. Correct?</p>\n\n<p>Here is the relevant code:</p>\n\n<pre><code>extern crate rand;\nextern crate itertools;\nextern crate time;\n\nuse std::env;\n\nuse rand::{Rng, Rand};\nuse itertools::Itertools;\nuse time::PreciseTime;\n\nstruct Ticket {\n    whites: Vec&lt;u8&gt;,\n    power_ball: u8,\n    is_power_play: bool,\n}\n\nconst POWER_PLAY_PERCENTAGE: u8 = 15;\nconst WHITE_MIN: u8 = 1;\nconst WHITE_MAX: u8 = 69;\nconst POWER_BALL_MIN: u8 = 1;\nconst POWER_BALL_MAX: u8 = 26;\n\nimpl Rand for Ticket {\n    fn rand&lt;R: Rng&gt;(rng: &amp;mut R) -&gt; Self {\n        let pp_guess = rng.gen_range(0, 100);\n        let pp_value = pp_guess &lt; POWER_PLAY_PERCENTAGE;\n\n        let mut whites_vec: Vec&lt;_&gt; = (0..).map(|_| rng.gen_range(WHITE_MIN, WHITE_MAX + 1))\n                                          .unique().take(5).collect();\n        whites_vec.sort();\n\n        let pb_value = rng.gen_range(POWER_BALL_MIN, POWER_BALL_MAX + 1);\n        Ticket { whites: whites_vec, power_ball: pb_value, is_power_play: pp_value}\n    }\n}\n\nfn gen_test(num_tickets: i64) {\n    let mut rng = rand::thread_rng();\n    let _: Vec&lt;_&gt; = rng.gen_iter::&lt;Ticket&gt;()\n            .take(num_tickets as usize)\n            .collect();\n}\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().collect();\n    let num_tickets: i64 = args[1].parse::&lt;i64&gt;().unwrap();\n\n    let start = PreciseTime::now();\n    gen_test(num_tickets);\n    let end = PreciseTime::now();\n\n    println!(\"Took {} seconds to generate {} random tickets\", start.to(end), num_tickets);\n\n}\n</code></pre>\n\n<p>Edit: </p>\n\n<p>Maybe a better question would be how do I debug and figure this out? Where would I look within the program or within my OS to find the performance hindrances? I am new to Rust and lower level programming like this that relies so heavily on the OS. </p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "edited": false, "score": 1, "creation_date": 1452957881, "post_id": 34828202, "comment_id": 57398920, "body": "It&#39;s not a duplicate. The answer in the referenced question suggests returning an owned string - that&#39;s not an option here because the return type is specified by the trait. I was in the middle of writing an answer to this problem when the question was suddenly closed, it&#39;s very frustrating. I edited the question to make the point clear."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "edited": false, "score": 0, "creation_date": 1452959549, "post_id": 34828202, "comment_id": 57399450, "body": "@Malcolm there is simply no way to return a string slice of something created inside a function. I didn&#39;t vote for closing but I can&#39;t see any solution here except for storing the pre-formatted error string inside the enum itself, which is pretty unwieldy."}, {"owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1452959671, "post_id": 34828202, "comment_id": 57399486, "body": "@VladimirMatveev You named both options, this is exactly what I was going to put into my answer. That would be helpful. Directing to a question with an answer which suggests something that can&#39;t be done doesn&#39;t help at all."}, {"owner": {"reputation": 136706, "user_id": 146325, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09939a1d3bd9c1af199a948bdc68cb71?s=128&d=identicon&r=PG", "display_name": "APC", "link": "https://stackoverflow.com/users/146325/apc"}, "reply_to_user": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "edited": false, "score": 0, "creation_date": 1452961535, "post_id": 34828202, "comment_id": 57400034, "body": "@Malcolm - looks like you got your wish"}], "answers": [{"tags": [], "owner": {"reputation": 38714, "user_id": 45668, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/d4288118e4836464de401d53b60466dd?s=128&d=identicon&r=PG", "display_name": "Malcolm", "link": "https://stackoverflow.com/users/45668/malcolm"}, "is_accepted": true, "score": 4, "last_activity_date": 1452967702, "last_edit_date": 1452967702, "creation_date": 1452962280, "answer_id": 34829371, "question_id": 34828202, "link": "https://stackoverflow.com/questions/34828202/how-to-extend-the-lifetimes-of-strings-within-functions-of-traits-that-require-r/34829371#34829371", "title": "How to extend the lifetimes of Strings within functions of traits that require returning &amp;str?", "body": "<p>The string you create needs to be owned by something. When you create a local string in the method, you have to transfer its ownership to the caller. But since you have to return <code>&amp;str</code>, this is not an option.</p>\n\n<p>The way around it would be to store the string in the struct itself. You can declare the enum value as <code>B(usize, String)</code>, put the description there when you create it, and then return it with</p>\n\n<pre><code>B(_, ref descr) =&gt; descr\n</code></pre>\n\n<p>To be frank, description is not supposed to be a terribly detailed message, it just needs to give a general description of what kind of error this is, this is why it returns <code>&amp;str</code>. I didn't see instances of writing any dynamic data into the description in the standard library, usually it's just a static string. <code>Display</code> implementation is a different matter though, in there you can be much more verbose.</p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 34829371, "answer_count": 1, "score": 2, "last_activity_date": 1452967702, "creation_date": 1452955118, "last_edit_date": 1452958124, "question_id": 34828202, "link": "https://stackoverflow.com/questions/34828202/how-to-extend-the-lifetimes-of-strings-within-functions-of-traits-that-require-r", "title": "How to extend the lifetimes of Strings within functions of traits that require returning &amp;str?", "body": "<h3>Problem</h3>\n\n<hr>\n\n<p>I am trying to implement the  <a href=\"http://doc.rust-lang.org/std/error/trait.Error.html\" rel=\"nofollow\"><code>std::error::Error</code></a> trait on a enum. Some elements of the enum are Enum Variants, and I would like to generate a different error message containing the data from the variant. However with the implementation below the formatted <code>String</code> that <code>Deref</code> to <code>&amp;str</code> don't live long enough.</p>\n\n<p>The general solution is to return a <code>String</code>. However, this is not an option here as the returned type must be <code>&amp;str</code> as specified by the <code>Error</code> trait.</p>\n\n<hr>\n\n<h3>Example: <a href=\"http://is.gd/aC5WWa\" rel=\"nofollow\">Playground link</a></h3>\n\n<hr>\n\n<p>It is important to note that the variants may not contain usize, and might instead be another enum, or struct etc.</p>\n\n<pre><code>use std::fmt;\nuse std::fmt::{Display, Formatter};\nuse std::error;\n\n#[derive(Debug)]\nenum EnumError {\n    A,\n    B(usize),\n    C(usize),\n    D,\n}\n\nimpl error::Error for EnumError {\n    fn description(&amp;self) -&gt; &amp;str {\n        use EnumError::*;\n        match *self {\n            A =&gt; \"A happened\",\n            B(value) =&gt; &amp;*format!(\"B happened info: {:?}\", value),\n            C(value) =&gt; &amp;*format!(\"B happened info: {:?}\", value),\n            D =&gt; \"D happened\",\n        }\n    }\n}\n\nimpl Display for EnumError {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; fmt::Result {\n    use std::error::Error;\n        write!(f, \"{}\", self.description())\n    }\n}\n\nfn main() {}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "edited": false, "score": 3, "creation_date": 1452899661, "post_id": 34821389, "comment_id": 57385405, "body": "I might be missing something crucial, but it seems to me that this can\u2019t possibly be sound. As soon as your <code>as_ref</code> function exits the upgraded reference is destroyed, so there is no guarantee that the data is not freed, you can\u2019t have a reference to it."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1452900308, "post_id": 34821557, "comment_id": 57385597, "body": "Your answer is mostly on point, but <a href=\"http://doc.rust-lang.org/std/rc/struct.Weak.html#method.upgrade\" rel=\"nofollow noreferrer\"><code>upgrade()</code></a> does (potentially) convert a <code>Weak</code> into an <code>Rc</code>, so OP isn&#39;t trying to &quot;borrow from a weak pointer&quot;."}, {"owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1452900458, "post_id": 34821557, "comment_id": 57385641, "body": "@Shepmaster As far as I understand, what OP is <i>ultimately</i> trying to do is borrow from a weak reference. As an intermediate step it is (potentially) converted to <code>Rc</code> but this can\u2019t possibly help, unless I can\u2019t see something obvious."}, {"owner": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "edited": false, "score": 0, "creation_date": 1452900817, "post_id": 34821557, "comment_id": 57385737, "body": "It looks like I am ultimately trying to borrow from a weak reference. I guess what I&#39;d need to do is something like <code>as_ref(&amp;self) -&gt; ThingRef&lt;T&gt;</code> where I return a wrapper type like <code>ThingRef(Rc&lt;T&gt;)</code> implementing <code>AsRef&lt;T&gt;</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "edited": false, "score": 0, "creation_date": 1452913833, "post_id": 34821557, "comment_id": 57388594, "body": "@rvidal <code>Rc&lt;T&gt;</code> implements <code>Deref</code> and <code>AsRef&lt;T&gt;</code>, so maybe you just want to return that?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 2, "creation_date": 1452931412, "post_id": 34821557, "comment_id": 57391716, "body": "Indeed, just return the <code>Rc</code>."}], "tags": [], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "is_accepted": true, "score": 3, "last_activity_date": 1452900467, "last_edit_date": 1452900467, "creation_date": 1452900180, "answer_id": 34821557, "question_id": 34821389, "link": "https://stackoverflow.com/questions/34821389/borrowing-from-weakt/34821557#34821557", "title": "Borrowing from Weak&lt;T&gt;", "body": "<p>You can\u2019t borrow from a <em>weak</em> reference, you just can\u2019t. It\u2019s weak, it does not guarantee that the underlying object exists (that\u2019s why <code>upgrade()</code> returns an <code>Option</code>). And even if you were lucky and the value was still alive at the point you accessed it through the weak reference (<code>upgrade()</code> returned <code>Some</code>), it can be freed the next moment, as soon as the <code>upgrade</code>d reference goes out of scope.</p>\n\n<p>In order to get a reference to the underlying value you need <em>something</em> that will keep it alive (e.g. a strong reference), but this means you\u2019ll have to return it along with the reference.</p>\n"}], "owner": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 380, "favorite_count": 0, "accepted_answer_id": 34821557, "answer_count": 1, "score": 1, "last_activity_date": 1452900467, "creation_date": 1452899234, "question_id": 34821389, "link": "https://stackoverflow.com/questions/34821389/borrowing-from-weakt", "title": "Borrowing from Weak&lt;T&gt;", "body": "<p>I feel like <code>rc::Weak</code> could use a (sort of) <code>AsRef</code> trait implementation. I'm trying to borrow some shared content from a weak pointer, but this won't compile:</p>\n\n<pre><code>use std::rc::Weak;\n\nstruct Thing&lt;T&gt;(Weak&lt;T&gt;);\n\n\nimpl&lt;T&gt; Thing&lt;T&gt; {\n  fn as_ref(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n    self.0.upgrade().map(|rc| {\n      rc.as_ref()\n    })\n  }\n\n  // For clarity, without a confusing closure\n  fn unwrapped_as_ref(&amp;self) -&gt; &amp;T {\n    self.0.upgrade().unwrap().as_ref()\n  }\n}\n</code></pre>\n\n<p>I understand why: the upgraded <code>Rc</code> does not survive the <code>as_ref</code> call. However it seems to me that it is perfectly sound. A possible magic trick using <code>unsafe</code> that does compile:</p>\n\n<pre><code>impl&lt;T&gt; Thing&lt;T&gt; {\n  fn unwrapped_as_ref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a T {\n    let rc = self.0.upgrade().unwrap();\n    unsafe {\n      std::mem::transmute(rc.as_ref())\n    }\n  }\n}\n</code></pre>\n\n<p>So:</p>\n\n<ul>\n<li>Are there any downsides to this solution? Is it sound? Can you think of a simpler alternative?</li>\n<li>Would it make sense to implement a <code>as_ref(&amp;self) -&gt; Option&lt;&amp;T&gt;</code> in the standard library?</li>\n</ul>\n"}, {"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1452882098, "post_id": 34817204, "comment_id": 57376822, "body": "As phrased, this question seems overly broad or opinion based. Have you tried something and had it not work? Are you aware of the &quot;escape hatch&quot; that <code>unsafe</code> provides? What kind of answer would be valid here? There&#39;s a <a href=\"https://crates.io/crates/hamt/\" rel=\"nofollow noreferrer\">hamt crate</a>, does that provide an answer?"}, {"owner": {"reputation": 7455, "user_id": 5432501, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8MGE3.png?s=128&g=1", "display_name": "Alex Knauth", "link": "https://stackoverflow.com/users/5432501/alex-knauth"}, "edited": false, "score": 3, "creation_date": 1452898428, "post_id": 34817204, "comment_id": 57384998, "body": "See the answer to <a href=\"https://stackoverflow.com/questions/31227269/generic-types-ownership-and-persistent-data-structures?rq=1\">this question</a>. It explains that <code>Rc</code> allows multiple owners of the same data, and while it might look like <code>.clone()</code> does a copy, it&#39;s a shallow copy that doesn&#39;t actually copy the data. It&#39;s actually immutability that allows this to happen. The hamt crate uses <code>Rc</code> <a href=\"https://github.com/rainbowbismuth/hamt-rs/blob/master/src/lib.rs#L801\" rel=\"nofollow noreferrer\">here</a>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1452913663, "post_id": 34817204, "comment_id": 57388567, "body": "Shared immutable ownership is generally simple by making GC explicit. Cyclic data is the problematic part."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1453037481, "creation_date": 1453037481, "answer_id": 34838869, "question_id": 34817204, "link": "https://stackoverflow.com/questions/34817204/do-rusts-borrowing-rules-get-in-the-way-of-functional-data-structures/34838869#34838869", "title": "Do Rust&#39;s borrowing rules get in the way of functional data structures?", "body": "<p>Short Answer: <strong>No</strong>.</p>\n\n<p>Long Answer:</p>\n\n<p>Rust actually works very well with immutable structures (it gives more guarantees than C's <code>const</code> for example).</p>\n\n<p>The shared ownership is no problem (<code>Rc</code>/<code>Arc</code>) with a truly immutable value, and you can easily borrow multiple times into an immutable structure. You cannot move while borrowing, but this can be circumvented by handing out owning proxies (via <code>Rc</code> or <code>Arc</code> once again) instead of references.</p>\n\n<p>The one issue in Rust that you may not have in Haskell is mixing mutable values in with <code>Cell</code> or <code>RefCell</code> as you can then create cycles and those won't be collected because Rust has no GC.</p>\n"}], "owner": {"reputation": 8297, "user_id": 298847, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b52bc71fb15db17f585b912aed45b217?s=128&d=identicon&r=PG", "display_name": "tibbe", "link": "https://stackoverflow.com/users/298847/tibbe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1040, "favorite_count": 1, "accepted_answer_id": 34838869, "answer_count": 1, "score": 9, "last_activity_date": 1458212660, "creation_date": 1452881446, "last_edit_date": 1458212660, "question_id": 34817204, "link": "https://stackoverflow.com/questions/34817204/do-rusts-borrowing-rules-get-in-the-way-of-functional-data-structures", "title": "Do Rust&#39;s borrowing rules get in the way of functional data structures?", "body": "<p>Functional data structures (such as the Hash Array Mapped Trie used in Haskell/Clojure/Scala) rely on lots of sharing in the underlying data structure. For example, if we implement <code>insert</code> on a map-like data type that's usually implemented by path-copying on the tree that implements the data structure.</p>\n\n<p>Given that these data structures rely a lot on sharing (and no principal owner of) underlying values, will borrowing get in the way of implementing such structures?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1452873549, "post_id": 34814423, "comment_id": 57372057, "body": "Thanks, I added some information about what I am trying to do."}], "answers": [{"comments": [{"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "edited": false, "score": 0, "creation_date": 1452880667, "post_id": 34815871, "comment_id": 57376165, "body": "Thanks! That makes perfect sense."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "edited": false, "score": 0, "creation_date": 1452882766, "post_id": 34815871, "comment_id": 57377163, "body": "@kardeiz Not knowing how User is defined and what from_value_opt returns it&#39;s hard to say, but it&#39;s possible that you don&#39;t actually need get to be generic and you can help the compiler by hinting at the return type like from_value_opt::&lt;ActualStruct&gt;(x)"}, {"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "edited": false, "score": 0, "creation_date": 1452883370, "post_id": 34815871, "comment_id": 57377475, "body": "Yes, that works, but I don&#39;t think that will help me, since my <code>User</code> fields have different types. I just tried placing the <code>from_value_opt</code> call into the closure and calling the closure like <code>get::&lt;Option&lt;i64&gt;&gt;(&quot;id&quot;)</code>, but apparently I can&#39;t pass type parameters to a closure."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 14, "last_activity_date": 1452930499, "last_edit_date": 1452930499, "creation_date": 1452876278, "answer_id": 34815871, "question_id": 34814423, "link": "https://stackoverflow.com/questions/34814423/possible-to-define-generic-closure/34815871#34815871", "title": "Possible to define generic closure?", "body": "<p>No, AFAIK you can't. I mean, you can <em>define</em> a generic closure, what you can't do is create a let binding with a generic left-hand side.</p>\n\n<p>A <code>fn get&lt;T&gt;</code>, as the one you mention rewriting, undergoes monomorphisation, i.e. when compiling it, rustc generates a different version of <code>get</code> for every actual <code>T</code> that is used to call it. By the time you assign the result of that <code>get</code> (<code>let a = get(...)</code>), that result has a concrete type and size.</p>\n\n<p>A <code>let</code> binding does not get monomorphised, so you can't have a <code>let a&lt;T&gt; = ...</code> and have a different version of <code>a</code> generated for you by the compiler.</p>\n\n<p>What I think might enable this is the introduction of higher-kinded types, which is one of the highly desired but not yet fully fleshed out new features for Rust. They would enable you to write something like:</p>\n\n<pre><code>// does not work as of Rust 1\nlet a = for&lt;T&gt; |s: &amp;str, t: T| {...}\n</code></pre>\n\n<p>i.e. return a closure that I can later parametrize with a T (which is what you're asking for).</p>\n"}, {"comments": [{"owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "edited": false, "score": 1, "creation_date": 1452880879, "post_id": 34816030, "comment_id": 57376256, "body": "Thanks for the answer. Yes, that is why I wanted to use a closure--so I wouldn&#39;t have to pass around those values. However, this is the way I ended up going (see the last part of my question)."}], "tags": [], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "is_accepted": false, "score": 4, "last_activity_date": 1452876850, "creation_date": 1452876850, "answer_id": 34816030, "question_id": 34814423, "link": "https://stackoverflow.com/questions/34814423/possible-to-define-generic-closure/34816030#34816030", "title": "Possible to define generic closure?", "body": "<p>The closure type is anonymous, so you won\u2019t be able to write it down, and seems that the compiler won\u2019t be able to infer it, so no luck.</p>\n\n<p>But is there any particular reason you want to use a <em>closure</em>? If I understood your question correctly, you just use this function to factor out some repeating actions, and you are not actually going to pass it around. Thus, an inner <code>fn</code> should work just fine. The downside is that you\u2019ll have to pass all the values that used to be automatically captured by your closure.</p>\n\n<p>It would be something like that (the example is still pretty complex, so I didn\u2019t try to compile it):</p>\n\n<pre><code>fn from_row(result: &amp;QueryResult, row: Vec&lt;Value&gt;) -&gt; User {\n    let mut map: HashMap&lt;_, _&gt; = row.into_iter().enumerate().collect();\n\n    fn get&lt;T: FromValue&gt;(s: &amp;str, result: &amp;QueryResult, map: &amp;mut HashMap&lt;_, _&gt;)\n       -&gt; T {\n        result.column_index(s)\n            .and_then(|i| map.remove(&amp;i))\n            .and_then(|x| from_value_opt(x)).ok()\n    };\n\n    User {\n        id: get(\"id\", &amp;result, &amp;mut map)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6393, "favorite_count": 1, "accepted_answer_id": 34815871, "answer_count": 2, "score": 22, "last_activity_date": 1452930499, "creation_date": 1452871621, "last_edit_date": 1452873190, "question_id": 34814423, "link": "https://stackoverflow.com/questions/34814423/possible-to-define-generic-closure", "title": "Possible to define generic closure?", "body": "<p>Does Rust support closures with generic return types? For example, I want to write something like this:</p>\n\n<pre><code>let get&lt;T: FromValue&gt; = |s: &amp;str| -&gt; Option&lt;T&gt; { ... }\n</code></pre>\n\n<p>But that syntax is clearly wrong.</p>\n\n<p><strong>What I'm trying to do</strong></p>\n\n<p>I'm working with <a href=\"https://github.com/blackbeam/rust-mysql-simple\" rel=\"noreferrer\">rust-mysql-simple</a>, and I'm writing a <code>from_row</code> method for my <code>User</code> struct, to build a user from a database row.</p>\n\n<p>The library doesn't provide (as far as I can tell) a way to look up query result row values by column name. So to work around this, my method looks like (this compiles and works correctly):</p>\n\n<pre><code>fn from_row(result: &amp;QueryResult, row: Vec&lt;Value&gt;) -&gt; User {\n\n    let mut map: HashMap&lt;_, _&gt; = row.into_iter().enumerate().collect();\n\n    let mut get = |s: &amp;str|  {\n        result.column_index(s)\n           .and_then(|i| map.remove(&amp;i) )\n    };\n\n    User {\n        id: get(\"id\").and_then(|x| from_value_opt(x).ok() )\n    }\n}\n</code></pre>\n\n<p>Here, <code>result</code> is an object that contains information about the query's column names (used to find the column index for a column name), and the <code>row</code> contains the ordered values from a query result row. <code>from_value_opt</code> is a method provided by the library that takes a <code>Value</code> and returns a <code>Result&lt;T, MyError&gt;</code>. The value is coerced to the field's type.</p>\n\n<p>I was trying to move the <code>.and_then(|x| from_value_opt(x).ok() )</code> into the <code>get</code> closure just to clean up the code some. However, when I do so, the closure return type is interpreted to be the result of the first occurrence of the <code>get</code> call.</p>\n\n<p>I rewrote the closure as a nested method that looks like:</p>\n\n<pre><code>fn get&lt;T: FromValue&gt;(r: &amp;QueryResult, m: &amp;mut HashMap&lt;usize, Value&gt;, s: &amp;str)\n    -&gt; Option&lt;T&gt; { ... }\n</code></pre>\n\n<p>which also worked fine, but didn't help cutting the verbosity much.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 4, "creation_date": 1452849994, "post_id": 34807817, "comment_id": 57358021, "body": "What is the thing you have in Rust that could possibly be some type but you don&#39;t know which one?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1452859052, "post_id": 34807817, "comment_id": 57362978, "body": "@SebastianRedl, you don&#39;t know which concrete type a generic parameter has, e.g. someone with experience of other languages might wish to write <code>fn foo&lt;T&gt;(x: T) { if T is String { ... } else { ... } }</code>."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1452850118, "creation_date": 1452850118, "answer_id": 34807974, "question_id": 34807817, "link": "https://stackoverflow.com/questions/34807817/can-pythons-isinstance-be-emulated-or-used-in-rust/34807974#34807974", "title": "Can Python&#39;s isinstance be emulated or used in Rust?", "body": "<p>Rust has a limited for a downcasting that can be provided by <a href=\"https://doc.rust-lang.org/beta/std/any/trait.Any.html\" rel=\"nofollow\"><code>Any</code></a>: you can <code>Any</code> to query whether the concrete type is <code>X</code> or <code>Y</code>.</p>\n\n<hr>\n\n<p>The usefulness of the construct is rather limited though; Rust is a statically typed language so in most situation you:</p>\n\n<ul>\n<li>either know the exact concrete type</li>\n<li>or use a <code>trait</code> that has sufficient methods for your needs</li>\n</ul>\n\n<p>still, Chris Morgan developed an <a href=\"https://github.com/chris-morgan/anymap\" rel=\"nofollow\"><code>AnyMap</code></a> for example to store one value of each type, without knowing said types a-priori, which he then used to provide a typed interface to HTTP headers without restricting the set of headers to a known set.</p>\n"}, {"tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": true, "score": 5, "last_activity_date": 1452850520, "creation_date": 1452850520, "answer_id": 34808093, "question_id": 34807817, "link": "https://stackoverflow.com/questions/34807817/can-pythons-isinstance-be-emulated-or-used-in-rust/34808093#34808093", "title": "Can Python&#39;s isinstance be emulated or used in Rust?", "body": "<p>Python is dynamically typed. When you write for example a function <code>def foo(x):</code>, the caller can choose to give a value of any type as the parameter <code>x</code>. That\u2019s why Python has <code>isinstance()</code>, so that you can check when it\u2019s important.</p>\n\n<p>Rust is statically typed. Any variable in the code has a type that is known at compile-time. For functions parameters you have to write it explicitly: <code>fn foo(x: String) {</code>. For local variables you can write it: <code>let x: String = something();</code> or leave it to the compiler\u2019s <em>type inference</em> to figure out: <code>let x = something();</code> based on other information (here based on the return type of <code>something()</code>). Sometimes there is not enough context for type inference and you have to write an explicit type annotation.</p>\n\n<p>If everything has a known type, an <code>isinstance</code> function that returns true or false doesn\u2019t make sense. So Rust doesn\u2019t quite have one.</p>\n\n<p>Note that some form of dynamic typing is possible with trait objects and the <code>Any</code> trait:</p>\n\n<ul>\n<li><a href=\"http://doc.rust-lang.org/book/trait-objects.html\" rel=\"noreferrer\">http://doc.rust-lang.org/book/trait-objects.html</a></li>\n<li><a href=\"http://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"noreferrer\">http://doc.rust-lang.org/std/any/trait.Any.html</a></li>\n</ul>\n\n<p>So you can write:</p>\n\n<pre><code>fn foo(object: &amp;Any) {\n    if object.is::&lt;String&gt;() {\n         // ...\n    }\n}\n</code></pre>\n\n<p><code>object</code>\u2019s type is still static: it\u2019s <code>&amp;Any</code>. But it also <em>represents</em> a value of some other, arbitrary type. You can access that value with other <code>Any</code> methods such as <code>downcast_ref</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 75, "user_id": 7993815, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-1GxBOO0ZJoM/AAAAAAAAAAI/AAAAAAAAF-0/lUl0Ik4e_kQ/photo.jpg?sz=128", "display_name": "Joe Murphy", "link": "https://stackoverflow.com/users/7993815/joe-murphy"}, "is_accepted": false, "score": 1, "last_activity_date": 1531792290, "last_edit_date": 1531792290, "creation_date": 1531706459, "answer_id": 51353688, "question_id": 34807817, "link": "https://stackoverflow.com/questions/34807817/can-pythons-isinstance-be-emulated-or-used-in-rust/51353688#51353688", "title": "Can Python&#39;s isinstance be emulated or used in Rust?", "body": "<p>I think the most similar paradigm in Rust is using the <code>match</code> keyword on enum types.  For instance, in the <code>std::net::IpAddr</code> case, you can use matching to decide whether you are dealing with an <code>Ipv4Addr</code> or an <code>Ipv6Addr</code>.</p>\n\n<pre><code>use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n\nfn main() {\n    do_something(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)));\n    do_something(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)));\n}\n\nfn do_something(v: IpAddr) {\n    match v {\n        IpAddr::V4(_x) =&gt; {\n            println!(\"I'm an IPv4 Address!\");\n        }\n        IpAddr::V6(_x) =&gt; {\n            println!(\"I'm an IPv6 Address!\");\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=99a0d2c4a559ca81a67f82693ad71adc&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Link to Rust Playground with working example</a></p>\n\n<p>This has the advantage of having well-defined types everywhere, which is of course required as Rust is strongly typed.  However, it does have a potential impact on how you arrange your data structures; thus this sort of behavior has to be planned in advance.</p>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 366, "favorite_count": 0, "accepted_answer_id": 34808093, "answer_count": 3, "score": 0, "last_activity_date": 1531792290, "creation_date": 1452849602, "question_id": 34807817, "link": "https://stackoverflow.com/questions/34807817/can-pythons-isinstance-be-emulated-or-used-in-rust", "title": "Can Python&#39;s isinstance be emulated or used in Rust?", "body": "<p>In Python you can do something like this:</p>\n\n<pre><code>if isinstance(\"hello\", basestring):\n   print \"hello is a string\"\nelse:\n   print \"Not a string\"\n</code></pre>\n\n<p>My question is can this kind of code be recreated or emulated using Rust ? If it is possible, is this kind of checking necessary or useful in Rust ?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 9, "last_activity_date": 1452844458, "creation_date": 1452844458, "answer_id": 34806494, "question_id": 34806203, "link": "https://stackoverflow.com/questions/34806203/writing-a-generic-trait-implementation-with-intoiterator-trait-but-only-for-imm/34806494#34806494", "title": "Writing a generic trait implementation with IntoIterator trait, but only for immutable reference implementors", "body": "<p>Saying that <code>I</code> is an <code>IntoIterator</code> doesn't say anything about <code>&amp;I</code>, e.g. <code>x..y</code> is an <code>IntoIterator</code> (because it is an <code>Iterator</code> and all of them are), but <code>&amp;(x..y)</code> is not.</p>\n\n<p>You specifically want to bound <code>&amp;I</code>, which fortunately can be done via a <code>where</code> clause, e.g.</p>\n\n<pre><code>impl&lt;I, T&gt; Bar&lt;I&gt; for Test \n    where for&lt;'a&gt; &amp;'a I: IntoIterator&lt;Item = T&gt;\n{\n    fn bar(&amp;self, i: &amp;I) {\n        for x in i {\n            println!(\"woo!\");\n        }\n    }\n}\n</code></pre>\n\n<p>The <code>for&lt;'a&gt;</code> just means \"for any lifetime <code>'a</code>\", and so the <code>where</code> clause is saying that <code>&amp;I</code> is always an <code>IntoIterator</code> (just writing <code>where &amp;I: IntoIterator</code> isn't quite enough).</p>\n\n<p>There's some choices to be made about the <code>T</code> parameter there, e.g.</p>\n\n<ol>\n<li><code>IntoIterator&lt;Item = T&gt;</code></li>\n<li><code>IntoIterator&lt;Item = &amp;'a T&gt;</code></li>\n<li>remove the parameter entirely and just write <code>IntoIterator</code></li>\n</ol>\n\n<p>The best choice will depend on exactly what you're doing with it. For the specific example in the question, I would go with 3, since the <code>Item</code> type doesn't matter at all. Number 2 makes sense because almost all types that have <code>&amp;T</code> implement <code>IntoIterator</code> will yield references (it also seems to avoids most of the bugs/general difficulties the compiler currently has about reasoning about universal quantification over lifetimes, which hit 1 and 3).</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1452981924, "creation_date": 1452981924, "answer_id": 34832664, "question_id": 34806203, "link": "https://stackoverflow.com/questions/34806203/writing-a-generic-trait-implementation-with-intoiterator-trait-but-only-for-imm/34832664#34832664", "title": "Writing a generic trait implementation with IntoIterator trait, but only for immutable reference implementors", "body": "<p>In Rust, <a href=\"http://aturon.github.io/style/naming/conversions.html\" rel=\"nofollow\">by convention</a>, methods whose name starts with <code>into</code> take their argument by value and transform it into another value, usually reusing some resources from the original value. The <code>IntoIterator</code> trait and its <code>into_iter</code> follow that convention.</p>\n\n<p>Are you sure you need to use <code>&amp;I</code> in your trait? Your codes works just fine with <code>I</code>. That's because there is an implementation of <code>IntoIterator</code> for <code>&amp;Vec&lt;T&gt;</code>. That's why one can write <code>for x in &amp;v</code> where <code>v</code> is a <code>Vec</code>.</p>\n\n<pre><code>struct Test;\n\ntrait Bar&lt;I&gt; {\n    fn bar(&amp;self, i: I);\n}\n\nimpl&lt;T, I: IntoIterator&lt;Item=T&gt;&gt; Bar&lt;I&gt; for Test {\n    fn bar(&amp;self, i: I) {\n        for x in i {\n            println!(\"woo!\");\n        }\n    }\n}\n\nfn main() {\n    let vec = vec!(1, 2, 3);\n    let test = Test;\n    test.bar(&amp;vec);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/fEFyw9\" rel=\"nofollow\">playground</a></p>\n"}], "owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 767, "favorite_count": 2, "accepted_answer_id": 34806494, "answer_count": 2, "score": 3, "last_activity_date": 1452981924, "creation_date": 1452843080, "last_edit_date": 1452869148, "question_id": 34806203, "link": "https://stackoverflow.com/questions/34806203/writing-a-generic-trait-implementation-with-intoiterator-trait-but-only-for-imm", "title": "Writing a generic trait implementation with IntoIterator trait, but only for immutable reference implementors", "body": "<p>I am defining a trait that takes in a <code>i: &amp;I</code> parameter. I would like to use this <code>i</code> value in a <code>for</code> loop.</p>\n\n<p>For example:</p>\n\n<pre><code>struct Test;\n\ntrait Bar&lt;I&gt; {\n    fn bar(&amp;self, i: &amp;I);\n}\n\nimpl&lt;T, I: IntoIterator&lt;Item=T&gt;&gt; Bar&lt;I&gt; for Test {\n    fn bar(&amp;self, i: &amp;I) {\n        for x in i {\n            println!(\"woo!\");\n        }\n    }\n}\n\nfn main() {\n    let vec = vec!(1, 2, 3);\n    let test = Test;\n    test.bar(&amp;vec);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/OkuUHo\" rel=\"nofollow\">Playground link</a></p>\n\n<p>This results in the error:</p>\n\n<pre><code>&lt;anon&gt;:10:9: 12:10 error: the trait `core::iter::Iterator` is not implemented for the type `&amp;I` [E0277] &lt;anon&gt;:10         for x in i { &lt;anon&gt;:11             println!(\"woo!\"); &lt;anon&gt;:12         } &lt;anon&gt;:10:9: 12:10 help: see the detailed explanation for E0277 &lt;anon&gt;:10:9: 12:10 note: `&amp;I` is not an iterator; maybe try calling `.iter()` or a similar method &lt;anon&gt;:10:9: 12:10 note: required by `core::iter::IntoIterator::into_iter` error: aborting due to previous error playpen: application terminated with error code 101\n</code></pre>\n\n<p>I was playing around with using the <code>Deref</code> trait to see if I could get something to work, but to no avail.</p>\n\n<p>I would really like to keep the immutable reference in the function definition as this trait is attempting to be generic over many types, and defining the other implementations using <code>Bar&lt;&amp;'a I&gt;</code> has lead to some other lifetime related issues that I have been having trouble with as well.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1452846027, "post_id": 34805996, "comment_id": 57355887, "body": "If you&#39;re asking why code doesn&#39;t work, it is good to be specific about what doesn&#39;t work. In this case, that would mean including the compiler error."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1452846644, "post_id": 34805996, "comment_id": 57356178, "body": "@huon: or the expect behavior if it does compile but the result is not expected..."}], "answers": [{"tags": [], "owner": {"reputation": 7519, "user_id": 5747548, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/45e0667746a2b2050babf6e83ce467a3?s=128&d=identicon&r=PG&f=1", "display_name": "jkiiski", "link": "https://stackoverflow.com/users/5747548/jkiiski"}, "is_accepted": false, "score": 5, "last_activity_date": 1452869005, "last_edit_date": 1452869005, "creation_date": 1452843441, "answer_id": 34806291, "question_id": 34805996, "link": "https://stackoverflow.com/questions/34805996/how-does-iteratorall-work/34806291#34806291", "title": "How does Iterator::all work?", "body": "<p><code>all</code> tests that the given predicate holds true for all elements. It returns <code>false</code> as soon as it finds an element that does not match the predicate, or <code>true</code> if all elements match. It is not used to iterate over matching elements. You should probably use <code>filter</code> for that. See <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.all\" rel=\"nofollow\">the <code>Iterator::all</code> documentation</a>.</p>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "answer_count": 1, "score": -4, "last_activity_date": 1452869080, "creation_date": 1452842104, "last_edit_date": 1452869080, "question_id": 34805996, "link": "https://stackoverflow.com/questions/34805996/how-does-iteratorall-work", "title": "How does Iterator::all work?", "body": "<p>I do not understand <code>iter().all</code>. This code from the docs works:</p>\n\n<pre><code>let d = [2, 3, 4, 6, 8];\nassert!(a.iter().all(|x| *x &gt; 0));\n</code></pre>\n\n<p>Why does the one below not work?</p>\n\n<pre><code>for x in d.iter().all(|x| *x &gt; 2) {\n   println!(\"{} is bigger than 2\", x);\n}\n</code></pre>\n"}, {"tags": ["rust", "cross-compiling"], "comments": [{"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1452796227, "post_id": 34793607, "comment_id": 57337248, "body": "I won&#39;t be very helpful, but I&#39;d advise to ask the instruction author. Create an issue on github."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1452799127, "post_id": 34793607, "comment_id": 57338902, "body": "This was <a href=\"https://www.reddit.com/r/rust/comments/40ypxk/cant_find_crate_while_crosscompiling_rust_project/\" rel=\"nofollow noreferrer\">cross-posted to Reddit</a>."}], "owner": {"reputation": 31, "user_id": 5639559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/398a53a035fb70f429feaf9c88d7e5b7?s=128&d=identicon&r=PG&f=1", "display_name": "Seerer", "link": "https://stackoverflow.com/users/5639559/seerer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1390, "favorite_count": 1, "answer_count": 0, "score": 3, "last_activity_date": 1452786334, "creation_date": 1452786028, "last_edit_date": 1452786334, "question_id": 34793607, "link": "https://stackoverflow.com/questions/34793607/cant-find-crate-for-std-while-cross-compiling-rust-project-for-arm", "title": "can&#39;t find crate for `std` while cross-compiling Rust project for ARM", "body": "<p>I have followed the <a href=\"https://github.com/Ogeon/rust-on-raspberry-pi/blob/master/MANUAL.md\" rel=\"nofollow\">steps in the instructions</a> very carefully, but when I try to cross compile my Cargo project using <a href=\"https://github.com/Ogeon/rust-on-raspberry-pi/blob/master/cross32\" rel=\"nofollow\">its script</a>, \nI get an error while compiling the dependencies for my project:</p>\n\n<pre><code>Compiling libc v0.2.4                                                                                                                   \n/root/.cargo/registry/src/github.com-88ac128001ac3a9a/libc-0.2.4/src/lib.rs:1:1: 1:1 error: can't find crate for `std` [E0463]             \n/root/.cargo/registry/src/github.com-88ac128001ac3a9a/libc-0.2.4/src/lib.rs:1 // Copyright 2012-2015 The Rust Project Developers. See the C\nOPYRIGHT                                                                                                                                   \n                                                                              ^                                                            \nerror: aborting due to previous error                                                                                                      \nCould not compile `libc`.               \n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1452788090, "post_id": 34793506, "comment_id": 57332171, "body": "Are you aware of the <code>cfg</code> attribute to test features <code>#[cfg(feature = &quot;&quot;)]</code>?"}, {"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1452794430, "post_id": 34793506, "comment_id": 57336239, "body": "@MatthieuM. I hadn&#39;t thought of that. I suppose the idea is to put all the integration tests into their own feature. E.g., <code>cargo test --features integration_tests --no-run &amp;&amp; cargo test</code> to build all tests and run only the library tests and documentation tests. However, it&#39;s not quite as convenient as what I would like\u2014something like <code>cargo test --build-all --lib --doc</code>, which wouldn&#39;t require marking integration tests as being conditional on a feature."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1452851518, "post_id": 34793506, "comment_id": 57358938, "body": "There&#39;s also <a href=\"https://doc.rust-lang.org/book/testing.html#the-ignore-attribute\" rel=\"nofollow noreferrer\">ignore</a> attribute."}], "answers": [{"comments": [{"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 0, "creation_date": 1452950249, "post_id": 34808393, "comment_id": 57396507, "body": "Good ideas, thanks! There&#39;s already an <a href=\"https://github.com/rust-lang/cargo/issues/1789\" rel=\"nofollow noreferrer\">open Cargo issue for running just the doc tests</a>. Also, I tried the sub-crate idea, but it introduces too much friction when I&#39;m developing. So until Cargo gets that new option to run just the doc tests, my Travis CI build runs only the <code>--lib</code> tests and skips both the integration tests and the documentation tests. In short, this problem reduces to Cargo getting that new option."}], "tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": true, "score": 8, "last_activity_date": 1558390863, "last_edit_date": 1558390863, "creation_date": 1452851556, "answer_id": 34808393, "question_id": 34793506, "link": "https://stackoverflow.com/questions/34793506/how-to-run-library-tests-and-doc-tests-but-not-integration-tests/34808393#34808393", "title": "How to run library tests and doc tests but not integration tests", "body": "<p>Looking at <code>cargo help test</code> (as you probably have):</p>\n\n<ul>\n<li>Running only tests in the library: <code>cargo test --lib</code></li>\n<li>Running only doc-tests: <code>cargo test --doc</code></li>\n<li>Building tests in <code>tests/</code> without running them: <code>cargo test --no-run --test NAME</code>, but you need to enumerate them yourself. Again it probably makes sense to add something to Cargo here.</li>\n</ul>\n\n<p>In the mean time, integration tests are really separate crates that use your library as a dependency. You could make them explicit with <code>Cargo.toml</code> files and <code>[dependencies] foo = {path = \"\u2026\"}</code> so that <code>cargo test</code> without arguments on your main crate doesn\u2019t run them.</p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2949, "favorite_count": 1, "accepted_answer_id": 34808393, "answer_count": 1, "score": 8, "last_activity_date": 1558390863, "creation_date": 1452785748, "last_edit_date": 1452791029, "question_id": 34793506, "link": "https://stackoverflow.com/questions/34793506/how-to-run-library-tests-and-doc-tests-but-not-integration-tests", "title": "How to run library tests and doc tests but not integration tests", "body": "<p>Is it possible to use the <code>cargo</code> command to run library tests (i.e.., <code>cargo test --lib</code>) and documentation tests <em>without</em> running any integration tests (i.e., the tests in the crate's top-level <code>tests</code> directory)? Bonus points are awarded for compiling the integration tests without running them.</p>\n\n<p>Here's the bigger picture. My crate is a client library for a web service, and the HTTP server is not part of the crate. I've organized my crate into:</p>\n\n<ol>\n<li>Library tests, which do <em>not</em> depend on the HTTP server,</li>\n<li>Documentation tests, which do <em>not</em> depend on the HTTP server, and</li>\n<li>Integration tests, which require the HTTP server to be running on the localhost.</li>\n</ol>\n\n<p>As such, it's sometimes unfeasible to have the HTTP server running on the machine building the crate\u2014e.g., a Travis CI build agent. In these situations I would like to build all tests but exclude all integration tests from running because every integration test will fail.</p>\n"}, {"tags": ["function", "types", "rust", "coercion"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1452770831, "creation_date": 1452770831, "answer_id": 34788440, "question_id": 34787928, "link": "https://stackoverflow.com/questions/34787928/explicitly-cast-a-type-that-involves-a-specific-function-item-type/34788440#34788440", "title": "Explicitly cast a type that involves a specific function item type", "body": "<p>You can actually cast using <code>as</code>:</p>\n\n<pre><code>fn test(xs: &amp;[i32]) -&gt; Filter&lt;Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {\n    fn nothing(_: &amp;&amp;i32) -&gt; bool { false }\n\n    let ys = xs.iter().filter(nothing as fn(&amp;&amp;i32) -&gt; bool);\n                                      ^~~~~~~~~~~~~~~~~~~~\n    ys\n}\n</code></pre>\n\n<p>However you need to use <code>as</code> to change the function's type, not the <code>Filter</code> type, as <code>as</code> is not allowed to change arbitrary types.</p>\n\n<hr>\n\n<p>Personally, I consider the necessity of the cast a short-coming and hope that type inference will improve to the point it becomes unnecessary. The fact that it works for a direct return is a red-herring, it should probably work with an intermediate value too.</p>\n"}], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 284, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1452770831, "creation_date": 1452769300, "question_id": 34787928, "link": "https://stackoverflow.com/questions/34787928/explicitly-cast-a-type-that-involves-a-specific-function-item-type", "title": "Explicitly cast a type that involves a specific function item type", "body": "<p>Here is an example:</p>\n\n<pre><code>use std::iter::Filter;\nuse std::slice::Iter;\n\nfn test(xs: &amp;[i32]) -&gt; Filter&lt;Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {\n    fn nothing(_: &amp;&amp;i32) -&gt; bool { false }\n\n    let ys = xs.iter().filter(nothing);\n    ys\n}\n\nfn main () {\n}\n</code></pre>\n\n<p>Compilation fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:8:5: 8:7 error: mismatched types:\n expected `core::iter::Filter&lt;core::slice::Iter&lt;'_, i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt;`,\n    found `core::iter::Filter&lt;core::slice::Iter&lt;'_, i32&gt;, fn(&amp;&amp;i32) -&gt; bool {test1::nothing}&gt;`\n(expected fn pointer,\n    found fn item) [E0308]\nsrc/main.rs:8     ys\n                  ^~\n</code></pre>\n\n<p>This is because the inferred type of <code>ys</code> has the <a href=\"https://doc.rust-lang.org/reference.html#function-types-for-specific-items\" rel=\"nofollow\">type of a specific function item in it</a>. In this particular case the issue is easy to fix: one can either explicitly specify the type without the function item in the binding, or avoid the <code>let</code> altogether.</p>\n\n<p>Both of these work:</p>\n\n<pre><code>fn test(xs: &amp;[i32]) -&gt; Filter&lt;Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {\n    fn nothing(_: &amp;&amp;i32) -&gt; bool { false }\n\n    let ys: Filter&lt;Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; = xs.iter().filter(nothing);\n    ys\n}\n</code></pre>\n\n\n\n<pre><code>fn test(xs: &amp;[i32]) -&gt; Filter&lt;Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {\n    fn nothing(_: &amp;&amp;i32) -&gt; bool { false }\n\n    xs.iter().filter(nothing)\n}\n</code></pre>\n\n<p>Therefore, as the Reference says, indeed Rust is capable of performing this coercion itself. But what if the code was more complex and I had to perform this cast manually? How would I do this?</p>\n\n<p>In this case <code>as</code> won\u2019t work, and <code>transmute</code> seems to be an overkill, although, I believe, it would do the job.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1452784133, "post_id": 34784806, "comment_id": 57329208, "body": "Why isn&#39;t this a duplicate of <a href=\"http://stackoverflow.com/q/27535289/155423\">stackoverflow.com/q/27535289/155423</a> or <a href=\"http://stackoverflow.com/q/31904842/155423\">stackoverflow.com/q/31904842/155423</a> or <a href=\"http://stackoverflow.com/q/27646925/155423\">stackoverflow.com/q/27646925/155423</a> ?"}], "answers": [{"comments": [{"owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "edited": false, "score": 0, "creation_date": 1452763357, "post_id": 34785144, "comment_id": 57315455, "body": "I used exactly that and I got: <code>src&#47;functional.rs:19:22: 19:81 error: failed to resolve. Use of undeclared type or module `std::iter` [E0433] src&#47;functional.rs:19                   -&gt; std::iter::Filter&lt;std::slice::Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  </code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "edited": false, "score": 0, "creation_date": 1452765132, "post_id": 34785144, "comment_id": 57316606, "body": "Because you&#39;re using it in a module; change the <code>std::*</code> paths to <code>::std::*</code>."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "edited": false, "score": 0, "creation_date": 1452767574, "post_id": 34785144, "comment_id": 57318195, "body": "@LowKianSeong This is a good answer. However, a heads up: since your function is generally named &quot;factor&quot;, I think your next step would be to specify the number (2 in this example) as an argument to factor instead of hardcoding it. This approach would not work, then (because the inner fn can&#39;t capture n). In that case you would either write your own iterator or just box the response."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 3, "last_activity_date": 1452761492, "creation_date": 1452761492, "answer_id": 34785144, "question_id": 34784806, "link": "https://stackoverflow.com/questions/34784806/cant-figure-out-return-type-of-this-rust-function-that-returns-iter/34785144#34785144", "title": "Can&#39;t figure out return type of this Rust function that returns Iter?", "body": "<p>Under normal circumstances, you could just copy+paste the <code>found</code> part of the error message.  There are two problems with that in this particular case.</p>\n\n<p>First, <code>core</code> isn't directly accessible.  Various items are exposed by the standard library <code>libstd</code>, but are actually <em>defined</em> by <code>libcore</code>.  Basically, the standard library is the public interface you are meant to use to access these items, <em>but the compiler doesn't know that</em>.  Typically, you work around this by just replacing <code>core::*</code> with <code>std::*</code>.</p>\n\n<p>The second problem is that the type includes a closure, and closures <em>cannot</em> be named.  The simplest solution is to just not use a closure at all; you aren't capturing anything, anyway.</p>\n\n<p>Doing that and just fixing the compile errors as they come up leads to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn factor(input_array: &amp;mut [i32])\n-&gt; std::iter::Filter&lt;std::slice::Iter&lt;i32&gt;, fn(&amp;&amp;i32) -&gt; bool&gt; {\n    fn even(x: &amp;&amp;i32) -&gt; bool { **x % 2 == 0 }\n    let x = input_array\n        .iter()\n        .filter(even as for&lt;'r&gt; fn(&amp;'r &amp;_) -&gt; _);\n    x\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 12035, "user_id": 603094, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/325af9a946cb4337c6640f0e95044be1?s=128&d=identicon&r=PG", "display_name": "kirelagin", "link": "https://stackoverflow.com/users/603094/kirelagin"}, "is_accepted": false, "score": 2, "last_activity_date": 1452765929, "creation_date": 1452765929, "answer_id": 34786663, "question_id": 34784806, "link": "https://stackoverflow.com/questions/34784806/cant-figure-out-return-type-of-this-rust-function-that-returns-iter/34786663#34786663", "title": "Can&#39;t figure out return type of this Rust function that returns Iter?", "body": "<p>Your function returns a <code>Filter</code> object, so its actual return type is <code>Filter&lt;_, _&gt;</code> for some generic arguments. That\u2019s fine, but chances are, you\u2019ll want to hide all the implementation details from the type signature and just say that your function returns some iterator. Unfortunately, there is no (as of today) easy way to do this.</p>\n\n<p>The pattern that seems to be rather common is to use a newtype wrapper. The problem with this is that writing the wrapper is a little bit more difficult than one might expect, e.g. one will have to deal with lifetimes explicitly.</p>\n\n<p>Here is a complete example:</p>\n\n<pre><code>use std::iter::Filter;\nuse std::slice::Iter;\n\nstruct FactorResult&lt;'a, T: 'a&gt;(Filter&lt;Iter&lt;'a, T&gt;, fn(&amp;&amp;T) -&gt; bool&gt;);\n\nimpl&lt;'a, T&gt; Iterator for FactorResult&lt;'a, T&gt; {\n    type Item = &amp;'a T;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a T&gt; { self.0.next() }\n    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) { self.0.size_hint() }\n}\n\nfn factor(input_array: &amp;[i32]) -&gt; FactorResult&lt;i32&gt; {\n    fn even(x : &amp;&amp;i32) -&gt; bool { **x % 2 == 0 }\n\n    FactorResult(input_array.iter().filter(even))\n}\n\nfn main () {\n    for x in factor(&amp;[1,2,3,4]) {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n\n<ul>\n<li>The <code>factor</code> function returns a <code>FactorResult</code> which is just a wrapper that hides the actual underlying type.</li>\n<li>The only thing the user knows about <code>FactorResult</code> is that it is an <code>Iterator</code>. The implementation of the trait is trivial, but I had to spell it out.</li>\n<li>I had to replace the closure with the function. This is because here Rust does not perform any allocations, so it needs to know the size of <code>FactorResult&lt;T&gt;</code>, but the type of the closure is anonymous so there is no way to refer to it. One could use a closure but the whole thing would have to be boxed in this case.</li>\n</ul>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 495, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1452784020, "creation_date": 1452760275, "last_edit_date": 1452784020, "question_id": 34784806, "link": "https://stackoverflow.com/questions/34784806/cant-figure-out-return-type-of-this-rust-function-that-returns-iter", "title": "Can&#39;t figure out return type of this Rust function that returns Iter?", "body": "<p>I have this small Rust function: </p>\n\n<pre><code>pub fn factor(input_array: &amp;mut [i32]) {\n        let x = input_array\n            .iter()\n            .filter(|&amp;x| x % 2 == 0);\n        x\n}\n</code></pre>\n\n<p>When I run this via <code>cargo run</code> I get this error:</p>\n\n<pre><code>Compiling gettingrusty v0.0.1 (file:///home/lowks/src/rust/gettingrusty)\nsrc/functional.rs:22:9: 22:10 error: mismatched types:\n expected `()`,\n    found `core::iter::Filter&lt;core::slice::Iter&lt;'_, i32&gt;, [closure@src/functional.rs:21:21: 21:36]&gt;`\n(expected (),\n    found struct `core::iter::Filter`) [E0308]\nsrc/functional.rs:22         x\n                             ^\nsrc/functional.rs:22:9: 22:10 help: run `rustc --explain E0308` to see a detailed explanation\nerror: aborting due to previous error\nCould not compile `gettingrusty`.\n</code></pre>\n\n<p>I tried a few return types such as <code>slice::Iter&lt;i32&gt;</code> and <code>core::slice::Iter&lt;i32&gt;</code> but seems like all of them are wrong. What should be the return type of my function?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1452760915, "creation_date": 1452760915, "answer_id": 34784981, "question_id": 34784625, "link": "https://stackoverflow.com/questions/34784625/how-does-the-rust-compiler-know-whether-a-value-has-been-moved-or-not/34784981#34784981", "title": "How does the Rust compiler know whether a value has been moved or not?", "body": "<p>This is explained in the <a href=\"https://doc.rust-lang.org/stable/nomicon/drop-flags.html\">Rustnomicon</a>:</p>\n\n<blockquote>\n  <p>As of Rust 1.0, the drop flags are actually not-so-secretly stashed in a hidden field of any type that implements Drop.</p>\n</blockquote>\n\n<p>The hidden field tells whether the current value has been dropped, or not, and if it has not then it is. Thus, this is known at run-time, and requires a bit of book keeping.</p>\n\n<hr>\n\n<p>Looking to the future, there is a RFC to <a href=\"https://github.com/mmun/rfcs-1/blob/master/text/0320-nonzeroing-dynamic-drop.md\">remove these hidden fields</a>.</p>\n\n<p>The idea of the RFC is to replace the hidden fields by:</p>\n\n<ol>\n<li>Identifying unconditional drops (those don't need any run-time check)</li>\n<li>Stash a hidden field on the <em>stack</em>, in the function frame, for those values conditionally being dropped</li>\n</ol>\n\n<p>This new strategy has several advantages over the old one:</p>\n\n<ul>\n<li>the main advantage being that <code>#[repr(C)]</code> will now always give a representation equivalent to the C's one even if the <code>struct</code> implements <code>Drop</code></li>\n<li>another important advantage is saving memory (by NOT inflating the <code>struct</code> size)</li>\n<li>another slight advantage is a possible slight speed gain due to unconditional drops and better caching (from reducing memory size)</li>\n</ul>\n"}], "owner": {"reputation": 149, "user_id": 5639961, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V2RDo.jpg?s=128&g=1", "display_name": "yyyy", "link": "https://stackoverflow.com/users/5639961/yyyy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 246, "favorite_count": 1, "accepted_answer_id": 34784981, "answer_count": 1, "score": 8, "last_activity_date": 1452783893, "creation_date": 1452759527, "last_edit_date": 1452783893, "question_id": 34784625, "link": "https://stackoverflow.com/questions/34784625/how-does-the-rust-compiler-know-whether-a-value-has-been-moved-or-not", "title": "How does the Rust compiler know whether a value has been moved or not?", "body": "<p>A simple example:</p>\n\n<pre><code>struct A;\n\nfn main() {\n    test(2);\n    test(1);\n}\n\nfn test(i: i32) {\n    println!(\"test\");\n    let a = A;\n    if i == 2 {\n        us(a);\n    }\n    println!(\"end\");\n}\n\nimpl Drop for A {\n    fn drop(&amp;mut self) {\n        println!(\"drop\");\n    }\n}\n\n#[allow(unused_variables)]\nfn us(a: A){\n    println!(\"use\");\n}\n</code></pre>\n\n<p>When I run it, the output is:</p>\n\n<pre><code>test\nuse\ndrop\nend\ntest\nend\ndrop\n</code></pre>\n\n<p>I understand in the <code>test(2)</code> case, <code>a</code> is moved at <code>us(a)</code>, so it's output is \"test-use-drop-end\".</p>\n\n<p>However, in the <code>test(1)</code>, the output is \"test-end-drop\", meaning that the compiler knows that <code>a</code> was not moved.</p>\n\n<p>If <code>us(a)</code> is called, it will be unnecessary to drop <code>a</code> in <code>test(i)</code>, it will be dropped in <code>us(a)</code>; and if <code>us(a)</code> is not called, <code>a</code> must be dropped after <code>println!(\"end\")</code>.</p>\n\n<p>Since it's impossible for the compiler to know whether <code>us(a)</code> is called or not, how does compiler know whether <code>a.drop()</code> shall be called or not after <code>println!(\"end\")</code>?</p>\n"}]