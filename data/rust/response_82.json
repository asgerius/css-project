[{"tags": ["winapi", "time", "rust"], "comments": [{"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 2, "creation_date": 1470251282, "post_id": 38751677, "comment_id": 64877366, "body": "Yes, August is during DST, so the current time zone is EDT (GMT-4), not EST (GMT-5). If you need to know local time from a <code>SYSTEMTIME</code> that uses UTC, use <code>SystemTimeToTzSpecificLocalTime()</code> (or convert the result to a Rust-native time format)."}, {"owner": {"reputation": 449279, "user_id": 65863, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f00013ceab8fb1928885c5c172fbfd4a?s=128&d=identicon&r=PG", "display_name": "Remy Lebeau", "link": "https://stackoverflow.com/users/65863/remy-lebeau"}, "edited": false, "score": 0, "creation_date": 1470262577, "post_id": 38751677, "comment_id": 64882880, "body": "Or, simply don&#39;t deal with timestamps in local timezones to begin with.  Deal with UTC/GMT timestamps instead. <code>FILETIME</code> and <code>SYSTEMTIME</code> are usually expressed in UTC by default, you usually have to take extra steps to convert them to local time (<code>FileTimeToLocalFileTime()</code>, <code>SystemTimeToTzSpecificLocalTime()</code>, <code>GetLocalTime()</code>, etc). Try to work with UTC when possible."}, {"owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "edited": false, "score": 0, "creation_date": 1470324020, "post_id": 38751677, "comment_id": 64914147, "body": "Yes I understand where you are coming from, and yes you correct. Working in UTC is better for everyone. I was just wondering why the call was behaving weird. I&#39;m just trying to build a library to wrap these functions, not offering the functionality that is already including in windows would be dumb."}, {"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1470337358, "post_id": 38751677, "comment_id": 64922214, "body": "Does Rust have a time library of its own? Before I add an answer."}, {"owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "edited": false, "score": 0, "creation_date": 1470337956, "post_id": 38751677, "comment_id": 64922570, "body": "Yes/No. Rust has it&#39;s own time library but it&#39;s based on strftime, and Tm structure in POSIX not those in Windows. In both Rust/Unix it exposes the <code>SystemTime</code> structure although they have different meanings in different OS&#39;s. Furthermore there is no way to convert a <code>SystemTime</code> value into a wall clock value in Unix or Windows. Nor is their an external library to handle this."}, {"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1470342751, "post_id": 38751677, "comment_id": 64925241, "body": "So it&#39;s just a thin wrapper around C&#39;s <code>&lt;time.h&gt;</code>?! That&#39;s very weird :S I&#39;ll post the answer I was going to write later then; thanks for the info (which I was going to use to write it)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1470343253, "post_id": 38751677, "comment_id": 64925504, "body": "@andlabs I think you are looking for <a href=\"https://github.com/lifthrasiir/rust-chrono\" rel=\"nofollow noreferrer\">chrono</a>."}, {"owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "edited": false, "score": 0, "creation_date": 1470343647, "post_id": 38751677, "comment_id": 64925705, "body": "chrono doesn&#39;t offer a function that accepts <code>SystemTime</code> as an argument. Rust&#39;s STL will give a <code>SystemTime</code> when I interact with an OS, but I&#39;m having to write the library that&#39;ll convert the <code>SystemTime</code> to a native time."}], "answers": [{"tags": [], "owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "is_accepted": false, "score": 0, "last_activity_date": 1470403756, "last_edit_date": 1470403756, "creation_date": 1470401145, "answer_id": 38789599, "question_id": 38751677, "link": "https://stackoverflow.com/questions/38751677/windows-systemtime-structure-different-then-system-clock/38789599#38789599", "title": "Windows SYSTEMTIME structure different then System clock?", "body": "<p><code>FileTimeToLocalFileTime()</code> returns time at UTC. In the United States, locations normally in EST transition to EDT during Daylight Saving Time, so it will be GMT+5 DST-1 or UTC-4.</p>\n\n<p>To get time in the local timezone and take DST into account, one would instead need to call <code>SystemTimeToTzSpecificLocalTime()</code>. </p>\n\n<p>Generally this inadvisable as working in UTC is preferable for computers as 2 intercommunicating computers are not necessarily in the same timezone.</p>\n"}], "owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 127, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1470403756, "creation_date": 1470250878, "last_edit_date": 1470343299, "question_id": 38751677, "link": "https://stackoverflow.com/questions/38751677/windows-systemtime-structure-different-then-system-clock", "title": "Windows SYSTEMTIME structure different then System clock?", "body": "<p>The goal of the following code is to call the Win32 function <code>FileTimeToSystemTime</code>:</p>\n\n<pre><code>pub fn convert_times(s: SystemTime) -&gt; Option&lt;SYSTEMTIME&gt; {\n    let mut st = SYSTEMTIME::default();\n    let x: u64 = unsafe { transmute(s) };\n    let low = (x &amp; 0x00000000FFFFFFFF) as u32;\n    let high = ((x &amp; 0xFFFFFFFF00000000) &gt;&gt; 32) as u32;\n    let fs = FILETIME {\n        dwLowDateTime: low,\n        dwHighDateTime: high,\n    };\n    if unsafe { FileTimeToSystemTime(transmute(&amp;fs), transmute(&amp;mut st)) } &gt; 0 {\n        Some(st)\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<p>When I take a known file time <code>131147233180069965</code> which was generated at <code>2016-08-03T14:41 US-EST(GMT+5)</code> according to my computer's clock. The return structure I get from this returns <code>2016-0803T18:41:58.006</code></p>\n\n<p>This is +4 hours. </p>\n\n<p>While US-EST is GMT+5?</p>\n\n<p>Is it because Daylight Saving Time is -1hr?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 57, "user_id": 2394115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c5a2e0c640aad2659f481a1a71ad632?s=128&d=identicon&r=PG", "display_name": "somnid", "link": "https://stackoverflow.com/users/2394115/somnid"}, "edited": false, "score": 0, "creation_date": 1470249585, "post_id": 38748418, "comment_id": 64876417, "body": "Thanks!  The + &#39;a to tie the closure lifetime was exactly what I was looking for."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1493305355, "last_edit_date": 1493305355, "creation_date": 1470239719, "answer_id": 38748418, "question_id": 38748054, "link": "https://stackoverflow.com/questions/38748054/rust-closures-from-factory-functions/38748418#38748418", "title": "Rust closures from factory functions", "body": "<p>The error says that <code>names</code> must outlive the static lifetime, this is because the boxed <code>Fn</code> has static lifetime. You have two options:</p>\n\n<ol>\n<li><p>Add the <code>'static</code> lifetime to <code>names</code>:</p>\n\n<pre><code>fn printer(names: Vec&lt;&amp;'static str&gt;) -&gt; Box&lt;Fn() -&gt; String&gt;{\n    Box::new(move|| {\n        // ...\n    })\n}\n</code></pre></li>\n<li><p>Change the lifetime of the boxed <code>Fn</code> to match the <code>names</code> lifetime:</p>\n\n<pre><code>fn printer&lt;'a&gt;(names: Vec&lt;&amp;'a str&gt;) -&gt; Box&lt;Fn() -&gt; String + 'a&gt;{\n    Box::new(move|| {\n        // ...\n    })\n}\n</code></pre></li>\n</ol>\n\n<p>Note that the body of closure needs to be adjusted and that you are giving the ownership of <code>names</code> to <code>printer</code>, so you cannot use <code>names</code> in <code>do_other_thing</code>. Here is a fixed version:</p>\n\n<pre><code>fn main() {\n    let names = vec![\"foo\", \"bar\", \"baz\"];\n    let print = printer(&amp;names);\n    let result = print();\n    println!(\"{}\", result);\n    do_other_thing(names.as_slice());\n}\n\nfn printer&lt;'a&gt;(names: &amp;'a Vec&lt;&amp;str&gt;) -&gt; Box&lt;Fn() -&gt; String + 'a&gt;{\n    Box::new(move || {\n        // this is more idiomatic\n        // map transforms &amp;&amp;str to &amp;str\n        names.iter().map(|s| *s).collect()\n    })\n}\n</code></pre>\n"}], "owner": {"reputation": 57, "user_id": 2394115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c5a2e0c640aad2659f481a1a71ad632?s=128&d=identicon&r=PG", "display_name": "somnid", "link": "https://stackoverflow.com/users/2394115/somnid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 38748418, "answer_count": 1, "score": 2, "last_activity_date": 1493305355, "creation_date": 1470238670, "last_edit_date": 1493305255, "question_id": 38748054, "link": "https://stackoverflow.com/questions/38748054/rust-closures-from-factory-functions", "title": "Rust closures from factory functions", "body": "<p>I have some Rust code I'm trying to get working but I'm not sure how to go about it.</p>\n\n<pre><code>fn main() {\n    let names = vec![\"foo\", \"bar\", \"baz\"];\n    let print = printer(names);\n    let result = print();\n    println!(\"{}\", result);\n    do_other_thing(names.as_slice());\n}\n\nfn printer(names: Vec&lt;&amp;str&gt;) -&gt; Box&lt;Fn() -&gt; String&gt; {\n    Box::new(move || {\n        let text = String::new();\n        for name in names {\n            text = text + name;\n        }\n        text\n    })\n}\n\nfn do_other_thing(names: &amp;[&amp;str]) {}\n</code></pre>\n\n<p>This compiles with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0477]: the type `[closure@src/main.rs:10:14: 16:6 names:std::vec::Vec&lt;&amp;str&gt;]` does not fulfill the required lifetime\n  --&gt; src/main.rs:10:5\n   |\n10 |       Box::new(move || {\n   |  _____^ starting here...\n11 | |         let text = String::new();\n12 | |         for name in names {\n13 | |             text = text + name;\n14 | |         }\n15 | |         text\n16 | |     })\n   | |______^ ...ending here\n   |\n   = note: type must outlive the static lifetime\n</code></pre>\n\n<p>I have a vague idea of what's going on.  It looks like there's a chance the closure will outlive the <code>names</code> parameter. I can annotate as <code>'static</code> but that doesn't feel right and even then I'd like to not move the vector so that <code>do_other_thing</code> works. I need to copy somehow.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2043, "user_id": 1675607, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/xvItm.jpg?s=128&g=1", "display_name": "Gavin Hope", "link": "https://stackoverflow.com/users/1675607/gavin-hope"}, "edited": false, "score": 0, "creation_date": 1470300902, "post_id": 38748485, "comment_id": 64897282, "body": "Excellent, thanks for answering the question <i>and</i> offering further improvement :thumbsup:"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1470343479, "post_id": 38748485, "comment_id": 64925618, "body": "All that unneeded mutability, allocation, and escape characters! <a href=\"https://play.rust-lang.org/?gist=0102bc8d36aa19aeb38eb7c7e190d5db\" rel=\"nofollow noreferrer\">You can slim it down a bit</a>. ^_^"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1470381471, "last_edit_date": 1470381471, "creation_date": 1470239929, "answer_id": 38748485, "question_id": 38747562, "link": "https://stackoverflow.com/questions/38747562/how-to-copy-or-borrow-a-reference-to-an-owned-string-inside-an-owned-vec/38748485#38748485", "title": "How to copy or borrow a reference to, an owned String inside an owned Vec?", "body": "<p>In Rust, to create a copy of an element, it should implement the <code>Clone</code> trait, and thus have a <code>.clone()</code> method.</p>\n\n<p><code>String</code> implements <code>Clone</code>, thus:</p>\n\n<pre><code>config_file = args[1].clone();\n</code></pre>\n\n<hr>\n\n<p>Your method, however, has many unnecessary memory allocations; we can do better there is no need to create a <code>Vec</code>, <code>args()</code> yields an iterator so let's use that directly and cherry-pick the interesting value.</p>\n\n<p>With this in mind:</p>\n\n<pre><code>fn main() {\n    let mut config_file = \"C:\\\\temp\\\\rust\\\\config.txt\".to_string();\n\n    if let Some(v) = env::args().nth(1) {\n        config_file = v;\n    }\n\n    println!(\"Config file path: {}\", config_file);\n}\n</code></pre>\n\n<hr>\n\n<p>At the behest of Shepmaster: it's show time!</p>\n\n<p>The following is an equivalent program, without mutability or escape characters, and with as little allocations as possible:</p>\n\n<pre><code>fn main() {\n    let config_file = env::args()\n        .nth(1)\n        .unwrap_or_else(|| r#\"C:\\temp\\rust\\config.txt\"#.to_string());\n\n    println!(\"Config file path: {}\", config_file);\n}\n</code></pre>\n\n<p>It uses <code>unwrap_or_else</code> on the <code>Option</code> returned by <code>nth(1)</code> to get either the content of the <code>Option</code> or, if none, generate a value using the passed lambda.</p>\n\n<p>It also show cases the <a href=\"https://doc.rust-lang.org/reference.html#raw-string-literals\" rel=\"noreferrer\">Raw String Literals</a>, a great feature to use when having to embed back slashes in a string.</p>\n"}], "owner": {"reputation": 2043, "user_id": 1675607, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/xvItm.jpg?s=128&g=1", "display_name": "Gavin Hope", "link": "https://stackoverflow.com/users/1675607/gavin-hope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5409, "favorite_count": 0, "accepted_answer_id": 38748485, "answer_count": 1, "score": 7, "last_activity_date": 1470381471, "creation_date": 1470237447, "question_id": 38747562, "link": "https://stackoverflow.com/questions/38747562/how-to-copy-or-borrow-a-reference-to-an-owned-string-inside-an-owned-vec", "title": "How to copy or borrow a reference to, an owned String inside an owned Vec?", "body": "<p>I'm trying to first set a <code>String</code> to be some default, but then update that <code>String</code> if a command line argument has been given...</p>\n\n<p>This is my starting point (which doesn't compile):</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    let mut config_file = \"C:\\\\temp\\\\rust\\\\config.txt\".to_string();\n    let args: Vec&lt;String&gt; = env::args().collect();\n    if args.len() &gt; 1 {\n        config_file = args[1];\n    }\n    println!(\"Config file path: {}\", config_file);\n}\n</code></pre>\n\n<p>So, (I think) <code>env::args()</code> is giving me an owned vector or owned strings... How do I either:</p>\n\n<ul>\n<li>Copy a string in the vector</li>\n<li>Get a reference to a string in the vector</li>\n</ul>\n\n<p>Note:</p>\n\n<pre><code>$ rustc --version\nrustc 1.8.0 (db2939409 2016-04-11)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1470342437, "last_edit_date": 1470342437, "creation_date": 1470241657, "answer_id": 38749052, "question_id": 38746693, "link": "https://stackoverflow.com/questions/38746693/converting-2d-fixed-sized-array-to-a-slice/38749052#38749052", "title": "Converting 2d fixed sized array to a slice", "body": "<p>There is no trivial way of doing this (for some definition of trivial). The problem is that <code>&amp;[&amp;[usize]]</code> is a slice of slices (like a <a href=\"https://en.wikipedia.org/wiki/Jagged_array\" rel=\"nofollow\">jagged array</a>), while <code>[[0usize; 10]; 10]</code> is a 2D array. The data in a 2D array is contiguous, a line starts after the end of the previous line and all lines have the same number of elements. In a jagged array, each line can have a different length, and this length must be stored with each line (in Rust, a slice is a length and a pointer).</p>\n\n<p>That said, you can change the definition of <code>foo</code> (this is the best alternative, because there is no extra allocation):</p>\n\n<pre><code>// a slice of T, where T can be used as &amp;[usize]\nfn foo&lt;T&gt;(r: &amp;[T])\n    where T: AsRef&lt;[usize]&gt;\n{\n    for line in r {\n        println!(\"{:?}\", line.as_ref());\n    }\n}\n\nfn main() {\n    let r = [[0usize; 10]; 10];\n    foo(&amp;r);\n}\n</code></pre>\n\n<p>or create a temporary vector of slices:</p>\n\n<pre><code>fn foo(r: &amp;[&amp;[usize]]) {\n    for line in r {\n        println!(\"{:?}\", line);\n    }\n}\n\nfn main() {\n    let r = [[0usize; 10]; 10];\n    let x: Vec&lt;&amp;[usize]&gt; = r.iter().map(|v| v.as_ref()).collect();\n    foo(&amp;x);\n}\n</code></pre>\n"}], "owner": {"reputation": 377, "user_id": 2336635, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cbfc14fbc9cc55e700e3635609edd45e?s=128&d=identicon&r=PG", "display_name": "Wim V", "link": "https://stackoverflow.com/users/2336635/wim-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 560, "favorite_count": 0, "accepted_answer_id": 38749052, "answer_count": 1, "score": 0, "last_activity_date": 1470342437, "creation_date": 1470235092, "question_id": 38746693, "link": "https://stackoverflow.com/questions/38746693/converting-2d-fixed-sized-array-to-a-slice", "title": "Converting 2d fixed sized array to a slice", "body": "<p>With a 1 dimensional array it is possible to convert from a fixed sized array to a slice but is this possible with 2d array in a trivial way?</p>\n\n<pre><code>fn foo(r: &amp;[&amp;[usize]]) { }\nlet r = [[0usize; 10]; 10];\nfoo(&amp;r); //&lt;== error expected type `&amp;[&amp;[usize]]` found type `&amp;[[usize; 10]; 10]`\n</code></pre>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1470229340, "post_id": 38744410, "comment_id": 64862606, "body": "AFAIK, what you said about <code>clone</code> is not true.  There was an RFC that required that they have the same effect if they&#39;re both implemented, but there&#39;s nothing that says the compiler <i>has</i> to replace the call to <code>clone</code> with a bit copy.  Ideally, the optimiser will take care of that, but again, that&#39;s not <i>guaranteed</i>."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1470342546, "last_edit_date": 1470342546, "creation_date": 1470229188, "answer_id": 38744410, "question_id": 38744249, "link": "https://stackoverflow.com/questions/38744249/what-trait-tells-the-compiler-that-t-is-simple-type-with-implicit-copy/38744410#38744410", "title": "What trait tells the compiler that `T` is simple type with implicit copy?", "body": "<p>You can use the <a href=\"https://doc.rust-lang.org/stable/std/marker/trait.Copy.html\" rel=\"nofollow\"><code>Copy</code></a> trait to indicate that a type has copy semantics (instead of move semantics).</p>\n\n<pre><code>impl&lt;T&gt; Rect&lt;T&gt; where T: PartialOrd + Add&lt;T, Output=T&gt; + Copy {\n    pub fn contains(&amp;self, x: T, y: T) -&gt; bool {\n        x &gt;= self.x &amp;&amp; y &gt;= self.y\n            &amp;&amp; x &lt; self.x + self.w\n            &amp;&amp; y &lt; self.y + self.h\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>Can I count on the compiler that the <code>clone()</code> call will be discarded for numeric types, without any performance hit?</p>\n</blockquote>\n\n<p>We hope that the compiler do this optimization, but there are no guarantees (thanks @DK).</p>\n\n<p>There is an <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1521-copy-clone-semantics.md\" rel=\"nofollow\">RFC</a> to formalize the semantics of <code>clone</code> for <code>Copy</code> types. The RFC start with the following:</p>\n\n<blockquote>\n  <p>It's generally been an unspoken rule of Rust that a clone of a <code>Copy</code> type is equivalent to a <code>memcpy</code> of that type</p>\n</blockquote>\n"}], "owner": {"reputation": 126, "user_id": 6013024, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b85cc78a88d6375ccc9a6086389c7e95?s=128&d=identicon&r=PG&f=1", "display_name": "rbrich", "link": "https://stackoverflow.com/users/6013024/rbrich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 0, "accepted_answer_id": 38744410, "answer_count": 1, "score": 0, "last_activity_date": 1470342546, "creation_date": 1470228768, "last_edit_date": 1470342512, "question_id": 38744249, "link": "https://stackoverflow.com/questions/38744249/what-trait-tells-the-compiler-that-t-is-simple-type-with-implicit-copy", "title": "What trait tells the compiler that `T` is simple type with implicit copy?", "body": "<p>I intend to use the following struct with simple numeric types like <code>i32</code>, <code>usize</code>, but in the implementation of the <code>contains()</code> method, Rust forces me to use <code>Clone</code> instead of an implicit copy (\"cannot move out of borrowed content\").</p>\n\n<p>I did not find any trait that would tell the compiler that <code>T</code> is simple type with implicit copy. Can I count on the compiler that the <code>clone()</code> call will be discarded for numeric types, without any performance hit?</p>\n\n<pre><code>pub struct Rect&lt;T&gt; {\n    pub x: T,\n    pub y: T,\n    pub w: T,\n    pub h: T,\n}\n\nimpl&lt;T&gt; Rect&lt;T&gt; where T: PartialOrd + Add&lt;T, Output=T&gt; + Clone {\n    pub fn contains(&amp;self, x: T, y: T) -&gt; bool {\n        x &gt;= self.x &amp;&amp; y &gt;= self.y\n            &amp;&amp; x &lt; self.x.clone() + self.w.clone()\n            &amp;&amp; y &lt; self.y.clone() + self.h.clone()\n    }\n}\n</code></pre>\n"}, {"tags": ["arrays", "rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 1, "last_activity_date": 1470350590, "last_edit_date": 1470350590, "creation_date": 1470221871, "answer_id": 38741644, "question_id": 38740644, "link": "https://stackoverflow.com/questions/38740644/error-performing-operations-on-array-elements-cannot-move-out-of-type/38741644#38741644", "title": "Error performing operations on array elements: &quot;cannot move out of type&quot;", "body": "<p>It turns out I needed to add support for adding <code>&amp;Vector</code> types, then access the array elements as references.</p>\n\n<p>This is a working example:</p>\n\n<pre><code>use std::ops::Add;\nuse std::fmt;\n\nstruct Vector(f64, f64);\n\nimpl Add for Vector {\n    type Output = Vector;\n\n    fn add(self, _rhs: Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0,\n               self.1 + _rhs.1)\n    }\n}\n\nimpl&lt;'a, 'b&gt; Add&lt;&amp;'b Vector&gt; for &amp;'a Vector {\n    type Output = Vector;\n\n    fn add(self, _rhs: &amp;'b Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0,\n               self.1 + _rhs.1)\n    }\n}\n\n\nimpl fmt::Display for Vector {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"({}, {})\", self.0, self.1)\n    }\n}\n\nfn main() {\n    let points: [Vector; 2] = [\n        Vector(1.0, 1.0),\n        Vector(5.0, 5.0),\n    ];\n\n    let v: Vector = &amp;points[0] + &amp;points[1];\n\n    println!(\"Vector is {}\\n\", v);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470222360, "post_id": 38741793, "comment_id": 64857376, "body": "Are there any down-sides to this? (unnecessary copying assuming <code>Vector</code> objects are much larger?) or are the copies generally optimized out?"}, {"owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470225163, "post_id": 38741793, "comment_id": 64859336, "body": "@ideasman42 I&#39;m a absolute Rust beginner too and now if I&#39;m looking at your solution I think maybe it&#39;s better, because it&#39;s uses references and no copying is involved. Maybe we&#39;ll wait someone experienced to answer you comment :)"}], "tags": [], "owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "is_accepted": false, "score": 1, "last_activity_date": 1470223909, "last_edit_date": 1470223909, "creation_date": 1470222248, "answer_id": 38741793, "question_id": 38740644, "link": "https://stackoverflow.com/questions/38740644/error-performing-operations-on-array-elements-cannot-move-out-of-type/38741793#38741793", "title": "Error performing operations on array elements: &quot;cannot move out of type&quot;", "body": "<p>You can make your <code>Vector</code> tuple struct to derive from <code>Copy</code> and <code>Clone</code> traits. So the compiler can copy elements from array.</p>\n\n<pre><code>use std::ops::Add;\nuse std::fmt;\n\n#[derive(Copy, Clone)]\nstruct Vector(f64, f64);\n\nimpl Add for Vector {\n    type Output = Vector;\n\n    fn add(self, _rhs: Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0,\n               self.1 + _rhs.1)\n    }\n}\n\nimpl fmt::Display for Vector {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"({}, {})\", self.0, self.1)\n    }\n}\n\nfn main() {\n    let points: [Vector; 2] = [\n        Vector(1.0, 1.0),\n        Vector(5.0, 5.0),\n    ];\n\n    let v: Vector = points[0] + points[1];\n\n    println!(\"Vector is {}\\n\", v);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 512, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1470350590, "creation_date": 1470219115, "last_edit_date": 1470342264, "question_id": 38740644, "link": "https://stackoverflow.com/questions/38740644/error-performing-operations-on-array-elements-cannot-move-out-of-type", "title": "Error performing operations on array elements: &quot;cannot move out of type&quot;", "body": "<p>In the following example, I would like to add 2 elements within an array, there is a simple addition on 2 elements, declared inline, and accessed from an array.</p>\n\n<pre><code>use std::ops::Add;\nuse std::fmt;\n\nstruct Vector(f64, f64);\n\nimpl Add for Vector {\n    type Output = Vector;\n\n    fn add(self, _rhs: Vector) -&gt; Vector {\n        Vector(self.0 + _rhs.0,\n               self.1 + _rhs.1)\n    }\n}\n\nimpl fmt::Display for Vector {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"({}, {})\", self.0, self.1)\n    }\n}\n\nfn main() {\n    let points: [Vector; 2] = [\n        Vector(1.0, 1.0),\n        Vector(5.0, 5.0),\n    ];\n\n    /* Adding from an array fails somehow: */\n\n    // let v: Vector = Vector(1.0, 1.0) + Vector(5.0, 5.0);    // This works!\n\n    let v: Vector = points[0] + points[1];                     // This fails!\n\n    println!(\"Vector is {}\\n\", v);\n}\n</code></pre>\n\n<p>For some reason <code>let v: Vector = points[0] + points[1];</code> gives the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>main.rs:37:21: 37:30 error: cannot move out of type `[Vector; 2]`, a non-copy fixed-size array [E0508]\nmain.rs:37     let v: Vector = points[0] + points[1];                     // This fails!\n</code></pre>\n\n<p>How is it possible to avoid this error and perform operator overloading actions on array elements?</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 4, "creation_date": 1470215231, "post_id": 38739088, "comment_id": 64852700, "body": "You can skip the complete type annotation in this case but I don&#39;t think you can skip the <code>3</code> and also specify the type of the item."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1470342350, "last_edit_date": 1470342350, "creation_date": 1470230977, "answer_id": 38745065, "question_id": 38739088, "link": "https://stackoverflow.com/questions/38739088/is-it-possible-to-declare-arrays-without-an-explicit-length/38745065#38745065", "title": "Is it possible to declare arrays without an explicit length?", "body": "<p>As of Rust 1.10 the answer is <strong>No</strong>, based on a quick series of tests:</p>\n\n<pre><code>let points              = [ ... ]; // OK\nlet points: [_     ; 3] = [ ... ]; // OK\nlet points: [Vector; _] = [ ... ]; // REJECTED\nlet points: [Vector; 3] = [ ... ]; // OK\n</code></pre>\n\n<p>In Rust, <code>_</code> is the simple way to ask the compiler to fill in the blanks for you. Unfortunately, it is not accepted instead of <code>3</code>: the compiler complains rather harshly that it expects an expression.</p>\n\n<p>This is maybe not too surprising as arrays are a special-case at the moment: Rust generics do not allow working with non-type generic parameters yet, so the compiler \"hacks\" in place for arrays are understandably limited.</p>\n\n<p>For the curious, the exact error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected expression, found `_`\n --&gt; &lt;anon&gt;:4:21\n4 |&gt;     let points: [_; _] = [\n  |&gt;  \n</code></pre>\n\n<p><em>Note: and now to wait for someone else to prove me wrong :)</em></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 358, "favorite_count": 0, "closed_date": 1523149242, "accepted_answer_id": 38745065, "answer_count": 1, "score": 1, "last_activity_date": 1522876911, "creation_date": 1470215026, "last_edit_date": 1522876911, "question_id": 38739088, "link": "https://stackoverflow.com/questions/38739088/is-it-possible-to-declare-arrays-without-an-explicit-length", "closed_reason": "Duplicate", "title": "Is it possible to declare arrays without an explicit length?", "body": "<p>In Rust, you can declare an array with a specific size:</p>\n\n<pre><code>struct Vector(f64, f64);\n\nfn main() {\n    let points: [Vector; 3] = [\n        Vector(1.0, 1.0), \n        Vector(5.0, 5.0), \n        Vector(0.0, 0.0),\n    ];\n\n    println!(\"Length is {}\\n\", points.len());\n}\n</code></pre>\n\n<p>Is there a way to have the length (<code>3</code> in this case) be implicit, since 3 elements are inside the array. Similar to how in C you can do:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>typedef double Vector[2];\nVector points[] = {{1, 1}, {5, 5}, {0, 0}};\nprintf(\"Length is %d\\n\", sizeof(*points) / sizeof(points));\n</code></pre>\n\n<p>Note that this is an absolute beginner question.</p>\n"}, {"tags": ["struct", "rust", "traits"], "comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 3, "creation_date": 1470422776, "post_id": 38735122, "comment_id": 64962169, "body": "A simple &quot;no&quot; answer with relevant information would be more useful (in the SO sense) than voting to close as duplicate. Edited to explain further."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470495234, "post_id": 38735122, "comment_id": 64979797, "body": "The relevant information <i>is</i> the linked duplicate and <a href=\"http://stackoverflow.com/q/25413201/155423\">the question it is a duplicate of</a>. <i>How</i> you attempt to implement the trait is immaterial, it still cannot be done."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1470546618, "post_id": 38735122, "comment_id": 64990085, "body": "I don&#39;t mean any offense by it, but I disagree that the &#39;how&#39; is immaterial--it&#39;s not immaterial to me. I would like to know whether or not the code intended to be generated by a custom <code>derive</code> macro can be applied to an imported struct, especially one that wraps other imported structs. In this same vein, the question you link to mentions the <a href=\"https://crates.io/crates/newtype_derive\" rel=\"nofollow noreferrer\">newtype_derive</a> crate, which might provide a macro for this job. So which is it? Not possible, or not expressible this way? Because the linked question puts both of those forks in question without answering them."}, {"owner": {"reputation": 306, "user_id": 1060781, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fecccddf67edb87cc1971feeff556511?s=128&d=identicon&r=PG", "display_name": "process91", "link": "https://stackoverflow.com/users/1060781/process91"}, "edited": false, "score": 0, "creation_date": 1529463371, "post_id": 38735122, "comment_id": 88877154, "body": "In my opinion, this is one of the most important reasons to implement a fix for this issue. Aside from suffering from strange &quot;wrapping&quot; issues with the new type, implementing this manually can be a large amount of code duplication, depending on the trait being implemented and the level of nesting."}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 219, "favorite_count": 1, "closed_date": 1470207001, "answer_count": 0, "score": 4, "last_activity_date": 1470422719, "creation_date": 1470202250, "last_edit_date": 1470422719, "question_id": 38735122, "link": "https://stackoverflow.com/questions/38735122/is-it-possible-to-derive-traits-on-crate-included-structs", "closed_reason": "Duplicate", "title": "Is it possible to #[derive] traits on crate-included structs?", "body": "<p>If I have something like</p>\n\n<pre><code>use serde_json;\nuse iso8601::DateTime;\n\n#[derive(Deserialize, Debug)]\npub struct Thing {\n    pub attr: i32,\n    pub foo: i32,\n    pub ts: DateTime\n}\n</code></pre>\n\n<p>The compiler is also going to insist that I ensure <code>DateTime</code> satisfies the trait bound <code>Deserialize</code>:</p>\n\n<pre><code>error: the trait bound `iso8601::DateTime: serde::Deserialize` is not satisfied [E0277]\nsrc/lib.rs:208   #[derive(Deserialize, Debug)\n</code></pre>\n\n<p>You can't place the derive annotation above the included struct, or the compiler will complain. In fact, the plot thickens, as <code>DateTime</code> itself has <a href=\"http://badboy.github.io/iso8601/iso8601/struct.DateTime.html\" rel=\"nofollow\">structs</a> that would need the same annotation:</p>\n\n<pre><code>pub struct DateTime {\n    pub date: Date,\n    pub time: Time,\n}\n</code></pre>\n\n<p>Is there a way to swing this, or do I have to implement these traits manually for external structs?</p>\n\n<p>Edit: Let me be clear, I was asking about the <code>#[derive]</code> macro. I read the linked and related questions, and I understand that I can provide my own implementation of different traits, as well as use newtypes etc. That is not what I am asking about.</p>\n\n<h3>Cargo.toml</h3>\n\n<pre><code>serde = \"0.8\"\nserde_json = \"0.8\"\nserde_macros = \"0.8\"\niso8601 = \"0.1.1\"\n</code></pre>\n"}, {"tags": ["performance", "rust"], "comments": [{"owner": {"reputation": 94713, "user_id": 1139697, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/5f136ddb684f39aaee1c028ee1950f6f?s=128&d=identicon&r=PG", "display_name": "Zeta", "link": "https://stackoverflow.com/users/1139697/zeta"}, "edited": false, "score": 1, "creation_date": 1470203066, "post_id": 38734057, "comment_id": 64845966, "body": "Could you quote the relevant parts of the problem HR description, or add a link?"}], "answers": [{"comments": [{"owner": {"reputation": 345, "user_id": 2179079, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ebbf8303d2f09da0b0a55ef801b58597?s=128&d=identicon&r=PG", "display_name": "KDN", "link": "https://stackoverflow.com/users/2179079/kdn"}, "edited": false, "score": 0, "creation_date": 1470233694, "post_id": 38735904, "comment_id": 64865929, "body": "You&#39;re solution worked! Can you explain the logic of how you figure out the winner (how does count_ones() + trailing_zeros()  - 1) get the winner. Thanks!"}], "tags": [], "owner": {"reputation": 399, "user_id": 1672626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/896f73afe1b526dd17cd5cd99896a053?s=128&d=identicon&r=PG", "display_name": "John Schug", "link": "https://stackoverflow.com/users/1672626/john-schug"}, "is_accepted": true, "score": 2, "last_activity_date": 1470205530, "creation_date": 1470205530, "answer_id": 38735904, "question_id": 38734057, "link": "https://stackoverflow.com/questions/38734057/speedup-counter-game/38735904#38735904", "title": "Speedup counter game", "body": "<p>Your inner loop can be replaced by a combination of builtin functions:</p>\n\n<pre><code>let win = if n &gt; 0 {\n    n.count_ones() + n.trailing_zeros() - 1\n} else {\n    0\n};\n</code></pre>\n\n<p>Also, instead of allocating a string every time <code>find_winner</code> is called,\na string slice may be returned:</p>\n\n<pre><code>fn find_winner(n: u64) -&gt; &amp;'static str {\n    let win = if n &gt; 0 {\n        n.count_ones() + n.trailing_zeros() - 1\n    } else {\n        0\n    };\n\n    if win % 2 == 0 {\n        \"Richard\"\n    } else{\n        \"Louise\"\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 345, "user_id": 2179079, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ebbf8303d2f09da0b0a55ef801b58597?s=128&d=identicon&r=PG", "display_name": "KDN", "link": "https://stackoverflow.com/users/2179079/kdn"}, "edited": false, "score": 0, "creation_date": 1470233730, "post_id": 38737136, "comment_id": 64865967, "body": "Thanks! the loop was the main time sink, but your solution helped too"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1470209456, "creation_date": 1470209456, "answer_id": 38737136, "question_id": 38734057, "link": "https://stackoverflow.com/questions/38734057/speedup-counter-game/38737136#38737136", "title": "Speedup counter game", "body": "<p>Avoiding memory allocation can help speeding up the application.</p>\n\n<p>At the moment, the <code>read_one_line</code> function is doing one memory allocation per call, which can be avoided if you supply the <code>String</code> as a <code>&amp;mut</code> parameter:</p>\n\n<pre><code>fn read_one_line(input: &amp;mut String) -&gt; &amp;str {\n    io::stdin().read_line(input).expect(\"Failed to read\");\n    input \n}\n</code></pre>\n\n<p>Note how I also alter the return type to return a slice (which borrows <code>input</code>): further uses here do not need to modify the original string.</p>\n\n<hr>\n\n<p>Another improvement is I/O. Rust is all about explicitness, and it means that <code>io::stdin()</code> is raw I/O: each call to <code>read_line</code> triggers interactions with the kernel.</p>\n\n<p>You can (and should) instead used buffered I/O with <code>std::io::BufReader</code>. Build it once, then pass it as an argument:</p>\n\n<pre><code>fn read_one_line&lt;'a, R&gt;(reader: &amp;mut R, input: &amp;'a mut String) -&gt; &amp;'a str\n    where R: io::BufRead\n{\n    reader.read_line(input).expect(\"Failed to read\");\n    input\n}\n</code></pre>\n\n<p>Note:</p>\n\n<ul>\n<li>it's easier to make it generic (<code>R</code>) than to specify the exact type of <code>BufReader</code> :)</li>\n<li>annotating the lifetime is mandatory because the return type could borrow either parameter</li>\n</ul>\n\n<hr>\n\n<p>Putting it altogether:</p>\n\n<pre><code>fn read_one_line&lt;'a, R&gt;(reader: &amp;mut R, input: &amp;'a mut String) -&gt; &amp;'a str\n    where R: io::BufRead\n{\n    reader.read_line(input).expect(\"Failed to read\");\n    input\n}\n\nfn main() {\n    let mut reader = io::BufReader::new(io::stdin());\n    let mut input = String::new();\n\n    let n: usize = read_one_line(&amp;mut reader, &amp;mut input).\n        trim().parse().unwrap();\n\n    for _i in 0..n{\n        let inp: u64 = read_one_line(&amp;mut reader, &amp;mut input).\n            trim().parse().unwrap();\n        println!(\"{:?}\", find_winner(inp)); \n    }\n    return;\n}\n</code></pre>\n\n<p>with the bigger win probably being I/O (might even be sufficient in itself).</p>\n\n<p>Don't forget to also apply @John's advices, this way you'll be allocation-free in your main loop!</p>\n"}], "owner": {"reputation": 345, "user_id": 2179079, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ebbf8303d2f09da0b0a55ef801b58597?s=128&d=identicon&r=PG", "display_name": "KDN", "link": "https://stackoverflow.com/users/2179079/kdn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57, "favorite_count": 0, "accepted_answer_id": 38735904, "answer_count": 2, "score": 0, "last_activity_date": 1470209456, "creation_date": 1470196149, "question_id": 38734057, "link": "https://stackoverflow.com/questions/38734057/speedup-counter-game", "title": "Speedup counter game", "body": "<p>I'm trying to solve a Rust algorithm question on hackerrank. My answer times out on some of the larger test cases. There are about 5 people who've completed it, so I believe it is possible and I assume they compile in release mode. Is there any speed-ups I'm missing?</p>\n\n<p>The gist of the game is a counter (inp in main) is conditionally reduced and based on who can't reduce it any more, the winner is chosen.</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let n: usize = read_one_line().\n        trim().parse().unwrap();\n    for _i in 0..n{\n        let inp: u64 = read_one_line().\n            trim().parse().unwrap();\n        println!(\"{:?}\", find_winner(inp)); \n    }\n    return;\n}\n\nfn find_winner(mut n: u64) -&gt; String{\n    let mut win = 0;\n    while n&gt;1{\n        if n.is_power_of_two(){\n            n /= 2;\n        }\n        else{\n            n -= n.next_power_of_two()/2;\n        }\n        win += 1;\n    }\n    let winner = \n        if win % 2 == 0{\n            String::from(\"Richard\")\n        } else{\n            String::from(\"Louise\")\n        };\n    winner\n}\n\nfn read_one_line() -&gt; String{\n    let mut input = String::new();\n    io::stdin().read_line(&amp;mut input).expect(\"Failed to read\");\n    input\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust", "shared-memory"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1470187832, "creation_date": 1470187832, "answer_id": 38732931, "question_id": 38732263, "link": "https://stackoverflow.com/questions/38732263/what-is-the-best-way-to-share-a-big-read-only-structure-between-two-threads/38732931#38732931", "title": "What is the best way to share a big read-only structure between two threads?", "body": "<p>The code and your statements don't really make sense together. For example, there's nothing that prevents the second thread from finishing before the first thread ever has a chance to start. Yes, I see the sleeps, but <strong>sleeping is not a viable concurrency solution</strong>.</p>\n\n<p>For the question as asked, I'd use a <a href=\"https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html\" rel=\"nofollow\"><em>channel</em></a>. This allows one thread to produce a value and then transfer ownership of that value to another thread:</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    let a = thread::spawn(move || {\n        let large_value = 1;\n        println!(\"write large_value {}\", large_value);\n        tx.send(large_value).expect(\"Unable to send\");\n    });\n\n    let b = thread::spawn(move || {\n        let large_value = rx.recv().expect(\"Unable to receive\");\n        println!(\"read shared = {}\", large_value);\n    });\n\n    a.join().expect(\"Unable to join a\");\n    b.join().expect(\"Unable to join b\");\n\n    println!(\"main\");\n}\n</code></pre>\n\n<p>For the code as presented, there's really no other options besides a <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow\"><code>Mutex</code></a> or a <a href=\"https://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"nofollow\"><code>RwLock</code></a>. This allows one thread to mutate the shared value for a while, then the other thread may read it for a while (subject to the vagaries of the OS scheduler):</p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\nuse std::sync::{Arc, Mutex};\n\nfn main() {\n    let shared = Arc::new(Mutex::new(0));\n\n    let shared_1 = shared.clone();\n    thread::spawn(move || {\n        loop {\n            let mut shared = shared_1.lock().expect(\"Unable to lock\");\n            *shared += 1;\n            println!(\"write large_value {}\", *shared);\n        }\n    });\n\n    thread::spawn(move || {\n        loop {\n            let shared = shared.lock().expect(\"Unable to lock\");\n            println!(\"read shared = {}\", *shared);\n        }\n    });\n\n    thread::sleep(Duration::from_secs(1));\n    println!(\"main\");\n}\n</code></pre>\n\n<p>None of this is particularly unique to Rust; channels are quite popular in Go and Clojure and mutexes have existed for A Very Long Time. I'd suggest checking out any of the numerous beginner's guides on the Internet for multithreading and the perils therein.</p>\n"}], "owner": {"reputation": 147, "user_id": 4240851, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-jl98Tw3Pe8k/AAAAAAAAAAI/AAAAAAAAADw/RURfud72ups/photo.jpg?sz=128", "display_name": "Stan Kondrat", "link": "https://stackoverflow.com/users/4240851/stan-kondrat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 374, "favorite_count": 0, "accepted_answer_id": 38732931, "answer_count": 1, "score": 1, "last_activity_date": 1470187832, "creation_date": 1470182110, "last_edit_date": 1470186900, "question_id": 38732263, "link": "https://stackoverflow.com/questions/38732263/what-is-the-best-way-to-share-a-big-read-only-structure-between-two-threads", "title": "What is the best way to share a big read-only structure between two threads?", "body": "<p>One thread calculates some data that takes about 1GB of RAM and another thread only reads this data. What is the best way to implement this?</p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\n\nfn main() {\n\n    let mut shared: i32 = 0; // will be changed to big structure\n\n    thread::spawn(move || {\n        loop {\n            shared += 1;\n            println!(\"write shared {}\", shared);\n            thread::sleep(Duration::from_secs(2));\n        }\n    });\n\n    thread::spawn(move || {\n        loop {\n            thread::sleep(Duration::from_secs(1));\n            println!(\"read shared = ???\"); // &lt;---------------- ????\n        }\n    });\n\n    thread::sleep(Duration::from_secs(4));\n    println!(\"main\");\n}\n</code></pre>\n\n<p>You can run <a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Athread%3B%0Ause%20std%3A%3Atime%3A%3ADuration%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%0A%20%20%20%20let%20mut%20shared%3A%20i32%20%3D%200%3B%0A%20%20%20%20%0A%20%20%20%20thread%3A%3Aspawn(move%20%7C%7C%20%7B%0A%20%20%20%20%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20shared%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22write%20shared%20%7B%7D%22%2C%20shared)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%3A%3Asleep(Duration%3A%3Afrom_secs(2))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%0A%20%20%20%20thread%3A%3Aspawn(move%20%7C%7C%20%7B%0A%20%20%20%20%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%3A%3Asleep(Duration%3A%3Afrom_secs(1))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22read%20shared%20%3D%20%3F%3F%3F%22)%3B%20%2F%2F%20%3C---%20%3F%3F%3F%3F%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%0A%20%20%20%20thread%3A%3Asleep(Duration%3A%3Afrom_secs(4))%3B%0A%20%20%20%20println!(%22main%22)%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">this code online</a> (play.rust-lang.org)</p>\n"}, {"tags": ["vector", "types", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1470129694, "post_id": 38716349, "comment_id": 64809313, "body": "Are you aware of <code>AnyMap</code>? And be aware that getting the value out of <code>Any</code> requires knowing its concrete type."}, {"owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1470130441, "post_id": 38716349, "comment_id": 64809797, "body": "@MatthieuM. Sure, I know about that Any require implementing trait for your types, but doesn&#39;t know something about AnyMap. Maybe it&#39;s a good fit, however I wonder if can I write this constructions which described in this topic"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1470133961, "post_id": 38716349, "comment_id": 64812120, "body": "<a href=\"https://github.com/chris-morgan/anymap\" rel=\"nofollow noreferrer\"><code>AnyMap</code></a> is written by Chris Morgan and <a href=\"https://github.com/reem/rust-typemap\" rel=\"nofollow noreferrer\"><code>rust-typemap</code></a> is written by Jonathan Reem, if you are interested in investigating them."}, {"owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1470135100, "post_id": 38716349, "comment_id": 64812843, "body": "Thanks you for the useful answer!"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1470188279, "post_id": 38716349, "comment_id": 64842021, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/25818082/vector-of-objects-belonging-to-a-trait\">Vector of objects belonging to a trait</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1471024129, "post_id": 38923552, "comment_id": 65204308, "body": "@Shepmaster I didn&#39;t know that, but it&#39;s really convenient. Always nice to learn something new."}], "tags": [], "owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "is_accepted": true, "score": 2, "last_activity_date": 1471024374, "last_edit_date": 1471024374, "creation_date": 1471023094, "answer_id": 38923552, "question_id": 38716349, "link": "https://stackoverflow.com/questions/38716349/define-vector-with-tuple-of-any-type/38923552#38923552", "title": "Define vector with tuple of any type", "body": "<p><code>Any</code> is a trait, not a concrete type, so you need to add a generic type parameter to the struct.</p>\n\n<pre><code>struct BertDirectory&lt;T: Any&gt; {\n    data: Vec&lt;T&gt;\n}\n</code></pre>\n\n<p>You might also want to ensure that <code>T</code> is also something that implements <code>Debug</code> and <code>PartialEq</code>. This isn't required to compile, but would be if you want to ensure that <code>BertDirectory</code> always implements those traits. Otherwise, it will only implement <code>Debug</code> when <code>T</code> does so.</p>\n\n<pre><code>struct BertDirectory&lt;T: Any + Debug + PartialEq&gt; {\n    data: Vec&lt;T&gt;\n}\n</code></pre>\n\n<p>Even given both of those things I don't know that this will give you what you really want because <code>data</code> will still be constrained to hold a <em>single type</em>. <code>T</code> can only ever represent a single type per instance of the struct.</p>\n\n<p>If you need <code>data</code> to store values of different types, you might instead want to look into using <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\">trait objects</a> instead, which is Rust's way of using vTables:</p>\n\n<pre><code>pub trait MyTrait: Debug {\n    // you can still use Any by doing MyTrait: Any + Debug\n    // Note that you won't be able to derive PartialEq for your trait \n    // because PartialEq can't be made into a TraitObject\n\n    // can also define whatever methods you would want on your data, which\n    // might be preferable to using Any, if possible\n}\n\npub struct BertDirectory&lt;T: MyTrait&gt;{\n    data: Vec&lt;(Box&lt;MyTrait&gt;, Box&lt;MyTrait&gt;)&gt;\n}\n</code></pre>\n\n<p>That way the concrete type of <code>T</code> would not need to be known at compile time. Each element in <code>data</code> could be of a different concrete type and the correct methods would be called automatically. You would not be able to derive <code>PartialEq</code>, though, so you'd just have to implement that yourself.</p>\n"}], "owner": {"reputation": 710, "user_id": 2128615, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/eeg0I.gif?s=128&g=1", "display_name": "Relrin", "link": "https://stackoverflow.com/users/2128615/relrin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 563, "favorite_count": 0, "accepted_answer_id": 38923552, "answer_count": 1, "score": 1, "last_activity_date": 1471024374, "creation_date": 1470129298, "last_edit_date": 1470139161, "question_id": 38716349, "link": "https://stackoverflow.com/questions/38716349/define-vector-with-tuple-of-any-type", "title": "Define vector with tuple of any type", "body": "<p>I'm trying to define a custom structure with a field that can be a <code>std::vec::Vec</code> with <strong>any</strong> type of element:</p>\n\n<pre><code>use std::vec::Vec;\n\n#[derive(Debug, PartialEq)]\npub struct BertDictionary {\n    data: Vec&lt;(Any, Any)&gt;  // not work also with Vec&lt;(_, _)&gt;\n}\n</code></pre>\n\n<p>When compiling, this generates a <a href=\"https://doc.rust-lang.org/error-index.html#E0308\" rel=\"nofollow\">E0308 error</a> which means the compiler is unable to infer the concrete type. Is is possible to define such a structure?</p>\n\n<p>As an example, I'm going to use this vector when each element may be represented like <code>(name, \"user\"), (id, 1)</code> and so on.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 1, "creation_date": 1470168674, "post_id": 38713228, "comment_id": 64835447, "body": "<a href=\"https://play.rust-lang.org/?gist=dabe17d66a14e72c2ca67e064ca26601&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> works. so..."}, {"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "edited": false, "score": 0, "creation_date": 1470172526, "post_id": 38713228, "comment_id": 64837434, "body": "Nevertheless, this seems to be a bug."}], "answers": [{"comments": [{"owner": {"reputation": 133, "user_id": 1820277, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a0428312d47cbdeeb9906d907312f8a?s=128&d=identicon&r=PG", "display_name": "Pavel Shander", "link": "https://stackoverflow.com/users/1820277/pavel-shander"}, "edited": false, "score": 0, "creation_date": 1470245496, "post_id": 38733254, "comment_id": 64874154, "body": "Thanks for detailed answer. Still one unclear moment for me. As you said <i>&quot;Lifetime parameters always represent lifetimes that live longer than the function call, and for the purposes of borrow checking (which is local to a function), the compiler considers that the borrow covers the whole function call.&quot;</i>. Why compiler compiler consider this? We have lifetime that lives longer then function scope. But how it related to that borrow covers the whole function call? Is it details of implementation or part of specification?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 133, "user_id": 1820277, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a0428312d47cbdeeb9906d907312f8a?s=128&d=identicon&r=PG", "display_name": "Pavel Shander", "link": "https://stackoverflow.com/users/1820277/pavel-shander"}, "edited": false, "score": 0, "creation_date": 1470265076, "post_id": 38733254, "comment_id": 64883667, "body": "There is no proper &quot;specification&quot; of Rust yet, so the implementation is the closest thing to a spec you&#39;ll get. For your other question, see my edit."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 8, "last_activity_date": 1470265073, "last_edit_date": 1470265073, "creation_date": 1470190262, "answer_id": 38733254, "question_id": 38713228, "link": "https://stackoverflow.com/questions/38713228/cannot-borrow-variable-when-borrower-scope-ends/38733254#38733254", "title": "Cannot borrow variable when borrower scope ends", "body": "<p>The <code>test</code> function requires that type <code>F</code> implements <code>Foo&lt;'a&gt;</code>. The <code>'a</code> there is a lifetime parameter that's passed to the function. Lifetime parameters always represent lifetimes that live longer than the function call \u2013 because there is just no way a caller could supply a reference with a shorter lifetime; how could you pass a reference to a local variable from <em>another function</em>? \u2013, and for the purposes of borrow checking (which is local to a function), the compiler considers that the borrow covers the whole function call.</p>\n\n<p>Therefore, when you create an instance of <code>F</code> from the call to <code>Foo::new</code>, you create an object that borrows something with lifetime <code>'a</code>, a lifetime that covers the whole function call.</p>\n\n<p>It's important to understand that when you call <code>test::&lt;FooS&gt;</code>, the compiler actually fills in a lifetime parameter for <code>FooS&lt;'a&gt;</code>, so you end up calling <code>test::&lt;FooS&lt;'a&gt;&gt;</code>, where <code>'a</code> is the region that covers the statement that contains the function call (because <code>&amp;mut a</code> is a temporary expression). Therefore, the compiler thinks that the <code>FooS</code> that would be constructed in <code>test</code> would borrow something until the end of the statement with the call to <code>test</code>!</p>\n\n<p>Let's contrast this with the nongeneric version:</p>\n\n<pre><code>let mut foo = FooS {data: data};\n</code></pre>\n\n<p>In this version, the compiler chooses a concrete lifetime for <code>FooS&lt;'a&gt;</code> in <code>test</code>, rather than in <code>main</code>, so it will choose the block suffix extending from the end of the <code>let</code> statement to the end of the block, which means that the next borrow of <code>data</code> doesn't overlap and there's no conflict.</p>\n\n<p>What you really want is that <code>F</code> implement <code>Foo&lt;'x&gt;</code> for some lifetime <code>'x</code> that is shorter than <code>'a</code>, and most importantly, that lifetime must be a region within the function, not an enclosing one like <code>'a</code> is.</p>\n\n<p>Rust's current solution to this problem is higher-ranked trait bounds. It looks like this:</p>\n\n<pre><code>fn test&lt;'a, F&gt;(data: &amp;'a mut u32)\n    where F: for&lt;'x&gt; Foo&lt;'x&gt;\n{\n    {\n        let mut foo: F = Foo::new(data);\n        foo.apply();\n    }\n    println!(\"{:?}\", data);\n}\n</code></pre>\n\n<p>In words, it means <em>the type <code>F</code> must implement <code>Foo&lt;'x&gt;</code> for every possible <code>'x</code></em>.</p>\n\n<p>While this version of <code>test</code> compiles on its own, we cannot actually supply a type that fulfills this constraint, because for every possible lifetime <code>'a</code>, there is a distinct type <code>FooS&lt;'a&gt;</code> that only implements <code>Foo&lt;'a&gt;</code>. If <code>FooS</code> had no lifetime parameter and the impl of <code>Foo</code> for <code>FooS</code> looked like this:</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; for FooS {\n</code></pre>\n\n<p>then it would be fine, since there is a single type <code>FooS</code> that implements <code>Foo&lt;'a&gt;</code> for every possible lifetime <code>'a</code>.</p>\n\n<p>Of course, you can't remove the lifetime parameter on <code>FooS</code>, as it contains a borrowed pointer. The proper solution for this problem is a feature that Rust doesn't have yet: the ability to pass a type constructor (rather than a fully constructed type) as a generic parameter to a function. With this capability, we could call <code>test</code> with <code>FooS</code>, a type constructor that needs a lifetime parameter to produce a concrete type, without specifying the concrete lifetime at the call site, and the caller would be able to supply its own lifetime.</p>\n"}], "owner": {"reputation": 133, "user_id": 1820277, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a0428312d47cbdeeb9906d907312f8a?s=128&d=identicon&r=PG", "display_name": "Pavel Shander", "link": "https://stackoverflow.com/users/1820277/pavel-shander"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 505, "favorite_count": 2, "accepted_answer_id": 38733254, "answer_count": 1, "score": 10, "last_activity_date": 1470265073, "creation_date": 1470119502, "last_edit_date": 1470187902, "question_id": 38713228, "link": "https://stackoverflow.com/questions/38713228/cannot-borrow-variable-when-borrower-scope-ends", "title": "Cannot borrow variable when borrower scope ends", "body": "<p>I can't understand why a mutable borrowed variable is still borrowed after the scope of the borrower ends. It looks like it is related to trait usage, but I don't see why:</p>\n\n<pre><code>fn main() {\n    let mut a = 10;\n    test::&lt;FooS&gt;(&amp;mut a);\n    println!(\"out {:?}\", a)\n}\n\ntrait Foo&lt;'a&gt; {\n    fn new(data: &amp;'a mut u32) -&gt; Self;\n    fn apply(&amp;mut self);\n}\n\nstruct FooS&lt;'a&gt; {\n    data: &amp;'a mut u32,\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; for FooS&lt;'a&gt; {\n    fn new(data: &amp;'a mut u32) -&gt; Self {\n        FooS { data: data }\n    }\n\n    fn apply(&amp;mut self) {\n        *self.data += 10;\n    }\n}\n\nfn test&lt;'a, F&gt;(data: &amp;'a mut u32)\n    where F: Foo&lt;'a&gt;\n{\n    {\n        // let mut foo = FooS {data: data}; // This works fine\n        let mut foo: F = Foo::new(data);\n        foo.apply();\n    } // foo scope ends here\n    println!(\"{:?}\", data); // error\n} // but borrowed till here\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2efab9502dcf3d5fd5ffe74972aa31a3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">try online</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow `data` as immutable because `*data` is also borrowed as mutable [--explain E0502]\n   --&gt; &lt;anon&gt;:34:22\n31  |&gt;         let mut foo: F = Foo::new(data);\n    |&gt;                                   ---- mutable borrow occurs here\n...\n34  |&gt;     println!(\"{:?}\", data); // error\n    |&gt;                      ^^^^ immutable borrow occurs here\n35  |&gt; } // but borrowed till here\n    |&gt; - mutable borrow ends here\n</code></pre>\n"}, {"tags": ["vector", "rust", "increment"], "answers": [{"comments": [{"owner": {"reputation": 7683, "user_id": 91756, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4eaa62a351a4d41982f24cbac269f77d?s=128&d=identicon&r=PG&f=1", "display_name": "Kevin", "link": "https://stackoverflow.com/users/91756/kevin"}, "edited": false, "score": 2, "creation_date": 1470077742, "post_id": 38706090, "comment_id": 64789852, "body": "Also stack needs to be mutable. (Your code does this, obviously; I&#39;m just pointing out the change from the question)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1470077606, "creation_date": 1470077606, "answer_id": 38706090, "question_id": 38705995, "link": "https://stackoverflow.com/questions/38705995/increment-last-element-of-vecusize/38706090#38706090", "title": "Increment last element of Vec&lt;usize&gt;", "body": "<p>Dereference before incrementing:</p>\n\n<pre><code>fn main() {\n    let mut stack = vec![1, 3, 5];\n    *stack.last_mut().unwrap() += 1;\n    println!(\"{:?}\", stack);\n}\n</code></pre>\n"}], "owner": {"reputation": 1706, "user_id": 4255842, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b0d7dfd98472547776f7d23112d000f5?s=128&d=identicon&r=PG&f=1", "display_name": "Pyfisch", "link": "https://stackoverflow.com/users/4255842/pyfisch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 219, "favorite_count": 1, "accepted_answer_id": 38706090, "answer_count": 1, "score": 2, "last_activity_date": 1470078232, "creation_date": 1470077215, "last_edit_date": 1470078232, "question_id": 38705995, "link": "https://stackoverflow.com/questions/38705995/increment-last-element-of-vecusize", "title": "Increment last element of Vec&lt;usize&gt;", "body": "<p>I have a <code>let mut stack: Vec&lt;usize&gt; = vec![5, 7, 1]</code> of varying length. At some point of the program I want to increment the last element of the <code>stack</code> by one. I tried <code>stack.last_mut().unwrap() += 1</code> (I know the <code>stack</code> won't be empty) but the compiler complains</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: binary assignment operation `+=` cannot be applied to type `&amp;mut _` [--explain E0368]\n --&gt; src/main.rs:3:5\n3 |&gt;     stack.last_mut().unwrap() += 1;\n  |&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: invalid left-hand side expression [--explain E0067]\n --&gt; src/main.rs:3:5\n3 |&gt;     stack.last_mut().unwrap() += 1;\n  |&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>Of course I can first pop the last element from the stack, increment it and add it again, but is there an easier way?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470080157, "post_id": 38705734, "comment_id": 64791103, "body": "<i>it seems weird to pass a null pointer as a out parameter</i> \u2014 this is true, but sometimes you pass a <i>reference</i> to a null pointer as a parameter. Then the function can allocate and return the pointer that way."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1470080092, "last_edit_date": 1470080092, "creation_date": 1470076309, "answer_id": 38705734, "question_id": 38705456, "link": "https://stackoverflow.com/questions/38705456/regopenkeyexa-keeps-returning-invalid-paramater/38705734#38705734", "title": "RegOpenKeyExA Keeps Returning Invalid Paramater", "body": "<p>There are two problems with your code:</p>\n\n<ol>\n<li><p>The underlying <code>CString</code> is being deallocated because there is no reference to it. <code>as_ptr</code> returns a raw pointer, there is no information of lifetime in raw pointer, so Rust thinks that is ok to deallocate the string. The solution is to name the string before using <code>as_ptr</code> (also inside the loop):</p>\n\n<pre><code>let m = CString::new(\"Control Panel\\\\Mouse\").unwrap();\nlet mouse: LPCSTR = m.as_ptr();\n</code></pre></li>\n</ol>\n\n<p>Please read the updated docs for <a href=\"https://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.as_ptr\" rel=\"nofollow\"><code>CString::as_ptr</code></a> and <a href=\"https://github.com/rust-lang/rfcs/pull/1642\" rel=\"nofollow\">this</a> RFC that tries to address this issue.</p>\n\n<ol start=\"2\">\n<li><p>You are passing a null pointer (<code>href</code>) as an out parameter. You have to change the declaration of <code>hkey</code> to</p>\n\n<pre><code>let mut hkey: HKEY = 0;\n</code></pre></li>\n</ol>\n\n<p>as use <code>&amp;mut hkey as *mut HKEY</code> in <code>advapi32::RegOpenKeyExA</code> call.</p>\n"}], "owner": {"reputation": 13, "user_id": 1520737, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/962f01b833836a52f604f0351c195408?s=128&d=identicon&r=PG", "display_name": "Tohei", "link": "https://stackoverflow.com/users/1520737/tohei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 38705734, "answer_count": 1, "score": 1, "last_activity_date": 1470080092, "creation_date": 1470075146, "last_edit_date": 1470076440, "question_id": 38705456, "link": "https://stackoverflow.com/questions/38705456/regopenkeyexa-keeps-returning-invalid-paramater", "title": "RegOpenKeyExA Keeps Returning Invalid Paramater", "body": "<p>I'm trying to use the <code>winapi (0.2.8)</code> and <code>advapi32 (0.2.0)</code> crates to edit registry relating to mouse acceleration. Every time I call <code>advapi32::RegOpenKeyExA</code> the program crashes and the result value is set to <code>INVALID_PARAMETER (87)</code>. The offending code is:</p>\n\n<pre><code>fn switch_acceleration(values: HashMap&lt;&amp;str, &amp;str&gt;) {\n    let mouse: LPCSTR = CString::new(\"Control Panel\\\\Mouse\").unwrap().as_ptr();\n\n    unsafe {\n        let hkey: *mut HKEY = ptr::null_mut();\n        let reg_open_result = advapi32::RegOpenKeyExA(HKEY_CURRENT_USER, mouse, 0 as u32, winnt::KEY_WRITE | winnt::KEY_WOW64_64KEY, hkey);\n        println!(\"{}\", reg_open_result);\n\n        for (key, value) in &amp;values {\n            let setting = CString::new(*key).unwrap().as_ptr();\n            let new_val = CString::new(*value).unwrap().as_ptr() as *const u8;\n            advapi32::RegSetValueExA(*hkey, setting, 0, winnt::REG_SZ, new_val, (size_of_val(&amp;new_val) as u32));\n        }\n\n        advapi32::RegCloseKey(*hkey);            \n    }\n}\n</code></pre>\n\n<p>I have tried to change the samDesired option by removing <code>KEY_WOW_64</code> and/or replacing <code>KEY_WRITE</code> with <code>KEY_ACCESS_ALL</code> and I have tried replacing the registry key to open to something else however I always get the same error code no matter what I try. Which one of the arguments is invalid?</p>\n"}, {"tags": ["closures", "rust", "lifetime-scoping"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1470078280, "post_id": 38704415, "comment_id": 64790109, "body": "Do you have a git repo or somesuch? I&#39;d like to test this."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470085895, "post_id": 38704415, "comment_id": 64793922, "body": "In addition to Veedrac&#39;s comment, you should provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> when asking a question here on Stack Overflow (really anywhere, but especially here). If we can&#39;t reproduce your problem purely from what is included <b>here</b>, the question will end up closed."}, {"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1470091336, "post_id": 38704415, "comment_id": 64795971, "body": "@Veedrac Yes, the repository is <a href=\"https://github.com/coriolinus/julia-set/tree/c3b1d31ec9bc981f1a0575c7e3fcc2d377de30db\" rel=\"nofollow noreferrer\">here</a>. The location where the call works is <a href=\"https://github.com/coriolinus/julia-set/blob/master/src/bin.rs#L79-L82\" rel=\"nofollow noreferrer\">here</a>, and the test where it doesn&#39;t work is <a href=\"https://github.com/coriolinus/julia-set/blob/master/src/lib.rs#L223-L234\" rel=\"nofollow noreferrer\">here</a>.  I&#39;d pasted as little as I did here because it seemed the question was already fairly long and detailed, and pasting several hundred lines of extraneous source wouldn&#39;t have been minimal."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1470127944, "post_id": 38704415, "comment_id": 64808127, "body": "@coriolinus: I think you misunderstood. The intention was that you reduce your problem until it is just a few lines long and doesn&#39;t require any crates. Most likely you end up answering your own question once you manage to reduce the issue."}, {"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1470133526, "post_id": 38704415, "comment_id": 64811833, "body": "@ker That&#39;s why the code I posted, above, is down to four function signatures, a two line invocation that works, and a 10 line invocation that doesn&#39;t, and reasoning about why that&#39;s confusing. It&#39;s as minimal as I could make it. You should be able to reproduce by copy-pasting the code shown and just leaving the function bodies <code>unimplemented!()</code>. The question is about the lifetimes, analysis of which is compile-time behavior."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1470134925, "post_id": 38704415, "comment_id": 64812731, "body": "Sadly this is not possible: <a href=\"https://play.rust-lang.org/?gist=5791a0b6245348b85d61fe6733ec38f6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> there are still dependencies on other crates and on types not supplied here. We can obviously do this work ourselves, but you motivate help by providing such a &quot;compileable&quot; example. Obviously it won&#39;t compile, but it will produce the exact error you showed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470139258, "post_id": 38704415, "comment_id": 64815778, "body": "<i>You should be able to reproduce by copy-pasting the code shown and just leaving the function bodies unimplemented!()</i> \u2014 then put <b>that version of the code</b> into your question. However, if we still need other crates, then remove / replace them. As mentioned, we should be able to copy-paste what is in the question and produce the same error."}], "answers": [{"comments": [{"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470142027, "post_id": 38719071, "comment_id": 64817757, "body": "The reason I started down the <code>Box&lt;Fn&gt;</code> rabbithole in the first place. If I change the signature of <code>interpolate</code> as you suggest, <code>parallel_image</code> complains that <code>Fn(u32, u32) -&gt; Complex64 cannot be shared between threads safely</code>. I try to resolve that by wrapping the function in an Arc: <code>let interpolate = Arc::new(interpolate);</code>, but that doesn&#39;t change the error. If instead I wrap it as <code>let interpolate = Arc::new(*interpolate);</code>, the error becomes <code>the trait bound std::ops::Fn(u32, u32) -&gt; num::Complex&lt;f64&gt;: std::marker::Sized is not satisfied</code>. How else might I approach this?"}, {"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470142128, "post_id": 38719071, "comment_id": 64817839, "body": "I&#39;d like <code>sequential_image</code> and <code>parallel_image</code> to share the same signature, because it shouldn&#39;t matter to the caller what happens under the hood."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470142595, "post_id": 38719071, "comment_id": 64818212, "body": "@coriolinus <code>parallel_image</code> just needs to take <code>interpolate: &amp;(Fn(u32, u32) -&gt; Complex64 + Send + Sync)</code>."}, {"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470142640, "post_id": 38719071, "comment_id": 64818251, "body": "Your first solution works; incidentally. thanks for showing me that! I hadn&#39;t realized adding <code>Send + Sync</code> would prevent the Box from working. I guess I&#39;m looking for advice how to make both <code>sequential_image</code> and <code>parallel_image</code> work if their signature for <code>interpolate</code> is just the function pointer."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470143037, "post_id": 38719071, "comment_id": 64818536, "body": "@coriolinus Actually <code>parallel_image</code> just needs <code>interpolate: &amp;(Fn(u32, u32) -&gt; Complex64 + Sync)</code>, not even <code>Send</code>."}, {"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470143059, "post_id": 38719071, "comment_id": 64818564, "body": "oh, I see! And now that the signature doesn&#39;t expect a boxed function, having the <code>interpolate</code> implement <code>Send + Sync</code> doesn&#39;t require an explicit cast anymore. Thank you, this is exactly what I needed!"}, {"owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470143249, "post_id": 38719071, "comment_id": 64818681, "body": "Is it possible to add trait bounds to a function argument like that in general, or is that a special case for functions? Until now I&#39;d only known of the <code>function&lt;T: Bound&gt;(t: T) {}</code> and <code>function&lt;T&gt;(t: T) where T: Bound {}</code> syntaxes."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "reply_to_user": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "edited": false, "score": 0, "creation_date": 1470143961, "post_id": 38719071, "comment_id": 64819240, "body": "@coriolinus No, it&#39;s only special ones. I&#39;m not sure of the exact rules, but I think it&#39;s only these: <a href=\"https://doc.rust-lang.org/1.5.0/std/marker/\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.5.0/std/marker</a>."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 1, "last_activity_date": 1500914103, "last_edit_date": 1500914103, "creation_date": 1470136971, "answer_id": 38719071, "question_id": 38704415, "link": "https://stackoverflow.com/questions/38704415/boxed-fn-requires-lifetime-static-only-when-testing/38719071#38719071", "title": "Boxed Fn requires lifetime &#39;static only when testing?", "body": "<p>The problem is actually here:</p>\n\n<pre><code>pub fn sequential_image&lt;F&gt;(\n    ...,\n    interpolate: &amp;Box&lt;Fn(u32, u32) -&gt; Complex64&gt;,\n    ...) -&gt; ...\n</code></pre>\n\n<p>The <code>interpolate</code> doesn't expect a <code>&amp;Box&lt;Fn(u32, u32) -&gt; Complex64 + Send + Sync&gt;</code>, and Rust is pretty bad at handling variance through all of this complexity.</p>\n\n<p>One solution is to do the cast where it's called:</p>\n\n<pre><code>sequential_image(width, height, &amp;default_julia,\n    &amp;(interpolate as Box&lt;Fn(u32, u32) -&gt; Complex64&gt;),\nthreshold)\n</code></pre>\n\n<p>but this requires a value case of <code>sequential_image</code> and is pretty damn ugly.</p>\n\n<p>A nicer way is to just fix the parameter of <code>sequential_image</code> to something both more general and something easier for the compiler to reason about: basic pointers.</p>\n\n<pre><code>pub fn sequential_image&lt;F&gt;(\n    ...,\n    interpolate: &amp;Fn(u32, u32) -&gt; Complex64,\n    ...) -&gt; ...\n</code></pre>\n\n<p>Now you can call it with just</p>\n\n<pre><code>sequential_image(width, height, &amp;default_julia,\n    &amp;*interpolate,\nthreshold)\n</code></pre>\n\n<p>and the compiler can do all of the variance magic itself.</p>\n"}], "owner": {"reputation": 749, "user_id": 504550, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/01c50fcd072b3dabca5184fd6c84718b?s=128&d=identicon&r=PG", "display_name": "coriolinus", "link": "https://stackoverflow.com/users/504550/coriolinus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "accepted_answer_id": 38719071, "answer_count": 1, "score": 0, "last_activity_date": 1500914103, "creation_date": 1470071277, "question_id": 38704415, "link": "https://stackoverflow.com/questions/38704415/boxed-fn-requires-lifetime-static-only-when-testing", "title": "Boxed Fn requires lifetime &#39;static only when testing?", "body": "<p>Using <code>rustc 1.10.0</code>, I'm trying to write some code which passes around boxed closures--the eventual goal is to procedurally generate an animation of fractals. Right now I have some function signatures like this:</p>\n\n<pre><code>pub fn interpolate_rectilinear(width: u32, height: u32, mut min_x: f64, mut max_x: f64, mut min_y: f64, mut max_y: f64)\n    -&gt; Box&lt;Fn(u32, u32) -&gt; Complex64 + Send + Sync + 'static&gt; { ... }\n\npub fn interpolate_stretch(width: u32, height: u32, mut min_x: f64, mut max_x: f64, mut min_y: f64, mut max_y: f64)\n    -&gt; Box&lt;Fn(u32, u32) -&gt; Complex64 + Send + Sync + 'static&gt; { ... }\n\npub fn parallel_image&lt;F&gt;(width: u32, height: u32, function: &amp;F, interpolate: &amp;Box&lt;Fn(u32, u32) -&gt; Complex64 + Send + Sync&gt;, threshold: f64)\n    -&gt; ImageBuffer&lt;image::Luma&lt;u8&gt;, Vec&lt;u8&gt;&gt;\n        where F: Sync + Fn(Complex64) -&gt; Complex64\n{ ... }\n\npub fn sequential_image&lt;F&gt;(width: u32, height: u32, function: &amp;F, interpolate: &amp;Box&lt;Fn(u32, u32) -&gt; Complex64&gt;, threshold: f64)\n    -&gt; ImageBuffer&lt;image::Luma&lt;u8&gt;, Vec&lt;u8&gt;&gt;\n        where F: Fn(Complex64) -&gt; Complex64\n{ ... }\n</code></pre>\n\n<p>Running this code for one image at a time in a binary works without problems:</p>\n\n<pre><code>let interpolate = interpolate_rectilinear(width, height, -1.0, 1.0, -1.0, 1.0);\nlet image = parallel_image(width * 2, height * 2, &amp;default_julia, &amp;interpolate, 2.0);\n</code></pre>\n\n<p>However, I wanted to ensure my serial and parallel image-production were both producing the same results, so I wrote the following test function:</p>\n\n<pre><code>#[test]\nfn test_serial_parallel_agree() {\n    let (width, height) = (200, 200);\n    let threshold = 2.0;\n    let interpolate = interpolate_stretch(width, height, -1.0, 1.0, -1.0, 1.0);\n\n    assert!(parallel_image(width, height, &amp;default_julia, &amp;interpolate, threshold)\n        .pixels()\n        .zip(sequential_image(width, height, &amp;default_julia, &amp;interpolate, threshold)\n            .pixels())\n        .all(|(p, s)| p == s));\n}\n</code></pre>\n\n<p>This refuses to compile, and I just can't figure it out. The error it gives is as follows:</p>\n\n<pre><code>&gt; cargo test\nCompiling julia-set v0.3.0 \nsrc/lib.rs:231:66: 231:78 error: mismatched types [E0308]\nsrc/lib.rs:231             .zip(sequential_image(width, height, &amp;default_julia, &amp;interpolate, threshold)\n                                                                                ^~~~~~~~~~~~\nsrc/lib.rs:229:9: 233:36 note: in this expansion of assert! (defined in &lt;std macros&gt;)\nsrc/lib.rs:231:66: 231:78 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/lib.rs:231:66: 231:78 note: expected type `&amp;Box&lt;std::ops::Fn(u32, u32) -&gt; num::Complex&lt;f64&gt; + 'static&gt;`\nsrc/lib.rs:231:66: 231:78 note:    found type `&amp;Box&lt;std::ops::Fn(u32, u32) -&gt; num::Complex&lt;f64&gt; + Send + Sync&gt;`\nerror: aborting due to previous error\nBuild failed, waiting for other jobs to finish...\nerror: Could not compile `julia-set`.\n</code></pre>\n\n<p>I really don't know what's going on there. I don't know why I'm required to manually mark <code>Send</code> and <code>Sync</code> in the boxed return types of the interpolation functions, when the compiler typically derives those traits automatically. Still, I just kept adding in markers that the compiler suggested until things worked.</p>\n\n<p>The real problem is that, while I think I have a pretty good guess why you can't just mark a boxed closure <code>'static</code>, I don't know what's requiring that lifetime in this case or how to fix it.</p>\n\n<p>I did guess that possibly the issue was that I was trying to reference the closure from two read-borrows at once, (which should be ok, but I was desperate); at any rate, wrapping <code>interpolate</code> in an <code>Rc</code> gives the exact same error, so that wasn't the problem.</p>\n"}, {"tags": ["rust", "emulation"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1470016186, "post_id": 38689844, "comment_id": 64759460, "body": "Do you need threads? If not, switch to <code>Rc</code> and <code>Cell</code> / <code>RefCell</code>."}, {"owner": {"reputation": 41, "user_id": 6661313, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/778a2f07aad189efd8def5b0ca327c21?s=128&d=identicon&r=PG&f=1", "display_name": "zx64", "link": "https://stackoverflow.com/users/6661313/zx64"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470017294, "post_id": 38689844, "comment_id": 64759683, "body": "Right now I don&#39;t need threads, but not sure if I would use them in the future."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1470053500, "post_id": 38689844, "comment_id": 64774968, "body": "@zx64: Might want to start without then, rustc will emit an error if you try to share something you should not when moving to a threaded program anyway :)"}, {"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1471285148, "post_id": 38689844, "comment_id": 65275778, "body": "<code>Mmu</code> trait is good idea, but why do you keep stuff as <code>Mutex&lt;Box&lt;MMU&gt;&gt;</code>, if you could just have <code>Mutex&lt;Gpu&gt;</code> and <code>Mutex&lt;Apu&gt;</code>? You&#39;re unnecessary loosing the concrete type which should be avoided. You can still call trait methods implemented by concrete type.  Also, <code>Arc</code> and <code>Mutex</code> are unncessary until you figure out which parts exacty do you want to make multirehtreaded. You probably want just <code>Vec&lt;Gpu&gt;</code>, or <code>Vec&lt;Rc&lt;RefCell&lt;Gpu&gt;&gt;&gt;</code>. Other than this, it&#39;s not really a Rust question, that can just answered correctly."}], "owner": {"reputation": 41, "user_id": 6661313, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/778a2f07aad189efd8def5b0ca327c21?s=128&d=identicon&r=PG&f=1", "display_name": "zx64", "link": "https://stackoverflow.com/users/6661313/zx64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 144, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1470016091, "creation_date": 1470014686, "last_edit_date": 1470016091, "question_id": 38689844, "link": "https://stackoverflow.com/questions/38689844/modeling-embedded-hardware-in-rust-and-how-to-have-multiple-mutable-references-c", "title": "Modeling embedded hardware in Rust and how to have multiple mutable references cleanly?", "body": "<p>I'm modeling a system that has a CPU, GPU, MMU, APU, and maybe other things. The CPU will have mutable references to the GPU, MMU, and APU. I also would like the MMU to have a way to be able to call specific functions on the GPU and APU. Where this comes into play is when I'm mapping memory to different locations. The MMU takes care of that, and will dispatch to GPU or APU if the memory request is in those devices.</p>\n\n<p>Here is how I modeled it using <code>Arc</code> and <code>Mutex</code>. I was wondering if there is a cleaner way of achieving what I did here, or if this is the correct method. </p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\ntrait MMU {\n    fn read(&amp;self, addr: usize) -&gt; u8;\n    fn write(&amp;mut self, addr: usize, value: u8);\n}\n\n#[allow(dead_code)]\nstruct Cpu {\n    apu: Arc&lt;Mutex&lt;Box&lt;MMU&gt;&gt;&gt;,\n    mmu: Box&lt;Mmu&gt;,\n    gpu: Arc&lt;Mutex&lt;Box&lt;MMU&gt;&gt;&gt;,\n}\n\nstruct Mmu {\n    map: Vec&lt;(usize, usize, Arc&lt;Mutex&lt;Box&lt;MMU&gt;&gt;&gt;)&gt;,\n}\n\nimpl Mmu {\n    fn new() -&gt; Mmu {\n        Mmu { map: vec![] }\n    }\n\n    fn add_mapping(&amp;mut self, start: usize, end: usize, cb: Arc&lt;Mutex&lt;Box&lt;MMU&gt;&gt;&gt;) {\n        self.map.push((start, end, cb));\n    }\n\n    fn read(&amp;self, addr: usize) -&gt; u8 {\n        // See if the addr is in a range that is mapped, then\n        // call read on it.\n        for i in self.map.iter() {\n            if i.0 &lt;= addr &amp;&amp; addr &lt;= i.1 {\n                let d = i.2.clone();\n                let d = d.lock().unwrap();\n                return d.read(addr);\n            }\n        }\n\n        println!(\"Mmu.read: {}\", addr);\n        0\n    }\n\n    fn write(&amp;mut self, addr: usize, value: u8) {\n        // See if the addr is in a range that is mapped, then\n        // call write on it.\n        for i in self.map.iter() {\n            if i.0 &lt;= addr &amp;&amp; addr &lt;= i.1 {\n                let d = i.2.clone();\n                let mut d = d.lock().unwrap();\n                d.write(addr, value);\n                return;\n            }\n        }\n\n        println!(\"Mmu.write: {} {}\", addr, value);\n    }\n}\n\nstruct Gpu;\nimpl MMU for Gpu {\n    fn read(&amp;self, addr: usize) -&gt; u8 {\n        println!(\"Gpu.read: {}\", addr);\n        0\n    }\n\n    fn write(&amp;mut self, addr: usize, value: u8) {\n        println!(\"Gpu.write: {} {}\", addr, value);\n    }\n}\n\nstruct Apu;\nimpl MMU for Apu {\n    fn read(&amp;self, addr: usize) -&gt; u8 {\n        println!(\"Apu.read: {}\", addr);\n        0\n    }\n\n    fn write(&amp;mut self, addr: usize, value: u8) {\n        println!(\"Apu.write: {} {}\", addr, value);\n    }\n}\n\nfn main() {\n    let apu = Arc::new(Mutex::new(Box::new(Apu) as Box&lt;MMU&gt;));\n    let gpu = Arc::new(Mutex::new(Box::new(Gpu) as Box&lt;MMU&gt;));\n    let mut mmu = Box::new(Mmu::new());\n\n    // If a memory read/write occurs at 0x300-0x400, then the\n    // GPU should handle it.\n    mmu.add_mapping(0x300, 0x400, gpu.clone());\n    // If a memory read/write occurs at 0x100-0x200, then the\n    // GPU should handle it.\n    mmu.add_mapping(0x100, 0x200, apu.clone());\n    // Otherwise the MMU will handle it.\n\n    let mut c = Cpu {\n        apu: apu,\n        gpu: gpu,\n        mmu: mmu,\n    };\n\n    c.mmu.read(0);\n    c.mmu.write(0, 5);\n\n    c.mmu.read(0x150);\n    c.mmu.write(0x150, 5);\n\n    c.mmu.read(0x350);\n    c.mmu.write(0x350, 5);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=cca7cfeda8d590b229bd99430b78b560&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Rust play URL</a></p>\n\n<p>I notice that my solution isn't ideal because the <code>apu</code> and <code>gpu</code> stored in the <code>Cpu</code> are references to <code>MMU</code>, and not to the original <code>Apu</code> or <code>Gpu</code> struct. It would need to be changed so that <code>Cpu</code> can call other functions on <code>Gpu</code> or <code>Apu</code> that aren't defined in the <code>MMU</code> trait.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1470698401, "post_id": 38689818, "comment_id": 65045395, "body": "I added the implementations of <code>PartialEq</code> and <code>Debug</code>, because I did need them now. (For my unittests). Your answer also helped me fix that!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1470778869, "last_edit_date": 1470778869, "creation_date": 1470014482, "answer_id": 38689818, "question_id": 38689586, "link": "https://stackoverflow.com/questions/38689586/use-an-enum-with-a-function-which-has-a-slice-parameter/38689818#38689818", "title": "Use an enum with a function which has a slice parameter", "body": "<p>This is related to <a href=\"https://github.com/rust-lang/rust/issues/28229\" rel=\"nofollow\">issue 28229</a>: some types implement <code>Copy</code> but not <code>Clone</code> (even though <code>Copy</code> is a subtrait of <code>Clone</code>, so this should be impossible!). This means that you <em>can</em> derive <code>Copy</code> but you <em>cannot</em> derive <code>Clone</code>. It's possible to work around this by implementing <code>Clone</code> manually by copying <code>self</code>.</p>\n\n<pre><code>#[derive(Copy)]\npub enum Function {\n    FunctionVal(fn(u8) -&gt; String),\n    FunctionSlice(fn(&amp;[u8]) -&gt; String),\n}\n\nimpl Clone for Function {\n    fn clone(&amp;self) -&gt; Self {\n        *self\n    }\n}\n</code></pre>\n\n<p>This does not help with deriving <code>Debug</code> and <code>PartialEq</code>, though. You'll only be able to do that when an implementation for the respective trait is added to the problematic type. In the meantime, you'll have to implement them by yourself. (<code>Eq</code> can be derived if <code>PartialEq</code> is provided.)</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=60b227f3a0b088006764ed45cc3851b9&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">For example</a>:</p>\n\n<pre><code>impl PartialEq for Function {\n    fn eq(&amp;self, other: &amp;Function) -&gt; bool {\n        match (self, other) {\n            (&amp;Function::FunctionVal(a), &amp;Function::FunctionVal(b)) =&gt; a == b,\n            (&amp;Function::FunctionSlice(a), &amp;Function::FunctionSlice(b)) =&gt; a as usize == b as usize,\n            _ =&gt; false,\n        }\n    }\n}\n\nimpl fmt::Debug for Function {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            &amp;Function::FunctionVal(ref p) =&gt; {\n                try!(f.write_str(\"FunctionVal:\"));\n                fmt::Pointer::fmt(p, f)\n            },\n            &amp;Function::FunctionSlice(ref p) =&gt; {\n                try!(f.write_str(\"FunctionSlice:\"));\n                fmt::Pointer::fmt(&amp;(*p as *const ()), f)\n            },\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1134, "favorite_count": 0, "accepted_answer_id": 38689818, "answer_count": 1, "score": 1, "last_activity_date": 1470778869, "creation_date": 1470011652, "last_edit_date": 1470011973, "question_id": 38689586, "link": "https://stackoverflow.com/questions/38689586/use-an-enum-with-a-function-which-has-a-slice-parameter", "title": "Use an enum with a function which has a slice parameter", "body": "<p>I use an enum to choose between different function signatures. As long as the function has \"normal\" (sized) parameters, like <code>u8</code>, this works fine. But as soon as I use a function with a slice as parameter, I get compiler errors. I found a workaround, but I am not sure if this is the only way to solve this. And I don't understand why. Assuming the function is stored as a pointer, how do the parameters change what is possible? </p>\n\n<pre><code>#[derive(Copy, Clone/*, Debug, Eq, PartialEq*/)]\npub enum Function {\n    FunctionVal(fn(u8) -&gt; String),\n    //FunctionSlice(fn(&amp;[u8]) -&gt; String), // E0277\n    FunctionSlice(&amp;'static fn(&amp;[u8]) -&gt; String), // workaround\n}\n\n#[derive(Copy, Clone/*, Debug, Eq, PartialEq*/)]\npub struct FunctionStruct {\n    pub func: Function,\n}\n\npub static FUNC1: FunctionStruct = FunctionStruct {\n    func: Function::FunctionVal(convert_u8_to_string),\n};\n\nstatic F2:fn(&amp;[u8]) -&gt; String = convert_u8slice_to_string;\npub static FUNC2: FunctionStruct = FunctionStruct {\n    func: Function::FunctionSlice(&amp;F2), // to avoid E0308\n};\n\nfn convert_u8_to_string(_:u8) -&gt; String { String::from(\"\") }\nfn convert_u8slice_to_string(_:&amp;[u8]) -&gt; String { String::from(\"\") }\n\nfn main() {\n    let f = FUNC1;\n\n    match f.func {\n        Function::FunctionVal(f) =&gt; { f(0); }\n        Function::FunctionSlice(f) =&gt; { f(&amp;[0u8]); }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0649605edfc82e9f0f1bf0e259bcfebf&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">(Rust Playground)</a></p>\n\n<p>As soon as there is a slice as parameter, <code>#[derive(Debug, Eq, PartialEq)]</code> is not possible any more. But that is not a problem in my case.</p>\n\n<p>I was not able to make <code>FunctionSlice(fn(&amp;[u8]) -&gt; String),</code> work. I had to use a reference type with a static lifetime. Otherwise <code>#[derive(Copy, Clone)]</code> would fail. To initialize the struct, I had to use an additional static.</p>\n\n<p>I am currently using rust 1.10</p>\n"}, {"tags": ["rust", "tuples", "concatenation"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 7, "creation_date": 1470053369, "post_id": 38689566, "comment_id": 64774892, "body": "That&#39;s actually quite beautiful (as far as I am concerned). The main issue I see is that probably other functionalities (taking the head, the tail, etc...) will require new traits each time, but otherwise it&#39;s pretty nice!"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1470067188, "post_id": 38689566, "comment_id": 64784227, "body": "I think this belongs on codereview, because you have a working solution, asking to improve on it is out of scope for stackoverflow."}], "owner": {"reputation": 11117, "user_id": 1554020, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/49118fbd7e64a00bc99b19d41e5e28e0?s=128&d=identicon&r=PG", "display_name": "yuri kilochek", "link": "https://stackoverflow.com/users/1554020/yuri-kilochek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 161, "favorite_count": 0, "answer_count": 0, "score": 5, "last_activity_date": 1470053264, "creation_date": 1470011481, "last_edit_date": 1470053264, "question_id": 38689566, "link": "https://stackoverflow.com/questions/38689566/concatenate-heterogeneous-lists-based-on-2-tuples", "title": "Concatenate heterogeneous lists based on 2-tuples", "body": "<p>Consider lisp-like heterogeneous 'lists' based on 2-tuples:</p>\n\n<pre><code>let a = (); // ()\nlet b = (1i32, ('2', (\"3\", (4u64, ())))); // (1i32 '2' \"3\", 4u64)\n</code></pre>\n\n<p>I want to concatenate them like so:</p>\n\n<pre><code>let a = (1, ('2', ()));\nlet b = (\"3\", (4, ()));\nlet c = concat(a, b); // (1, ('2', (\"3\", (4, ()))));\n</code></pre>\n\n<p>I have managed to do so in what I believe to be an excessively convoluted way:</p>\n\n<pre><code>impl&lt;Other&gt; Concat&lt;Other&gt; for () {\n    type Result = Other;\n\n    fn concat(self, other: Other) -&gt; Self::Result {\n        other\n    }\n}\n\nimpl&lt;Head, Tail, Other&gt; Concat&lt;Other&gt; for (Head, Tail)\n    where Tail: Concat&lt;Other&gt;\n{\n    type Result = (Head, &lt;Tail as Concat&lt;Other&gt;&gt;::Result);\n\n    fn concat(self, other: Other) -&gt; Self::Result {\n        let (head, tail) = self;\n        (head, tail.concat(other))\n    }\n}\n\nfn main() {\n    let a = (1, ('2', ()));\n    let b = (\"3\", (4, ()));\n    println!(\"{:?}\", a.concat(b));  // (1, ('2', (\"3\", (4, ()))));\n}\n</code></pre>\n\n<p>Can we do better? If so, how?</p>\n"}, {"tags": ["rust", "rust-crates"], "answers": [{"comments": [{"owner": {"reputation": 1376, "user_id": 6285832, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/ijtFS.jpg?s=128&g=1", "display_name": "Robert Reynolds", "link": "https://stackoverflow.com/users/6285832/robert-reynolds"}, "edited": false, "score": 0, "creation_date": 1469982892, "post_id": 38686076, "comment_id": 64751376, "body": "In the past i tried to add the crate piston_window by adding the pinston_window = &quot;*&quot; to my cargo.toml but it did not work, but i&#39;m still trying  what you just told me, the code is compiling.."}, {"owner": {"reputation": 1376, "user_id": 6285832, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/ijtFS.jpg?s=128&g=1", "display_name": "Robert Reynolds", "link": "https://stackoverflow.com/users/6285832/robert-reynolds"}, "edited": false, "score": 0, "creation_date": 1469983508, "post_id": 38686076, "comment_id": 64751528, "body": "It&#39;s working ty, but i don&#39;t anderstand, isn&#39;t that suppose to work i had piston_window = &quot;*&quot; in the toml ? And how am i suppose to know the last version of the dependecy i&#39;m adding ?"}, {"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "reply_to_user": {"reputation": 1376, "user_id": 6285832, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/ijtFS.jpg?s=128&g=1", "display_name": "Robert Reynolds", "link": "https://stackoverflow.com/users/6285832/robert-reynolds"}, "edited": false, "score": 1, "creation_date": 1469983622, "post_id": 38686076, "comment_id": 64751564, "body": "When you search for a package on crates.io, there is a box with the declaration to copy, for example on the <a href=\"https://crates.io/crates/lazy_static\" rel=\"nofollow noreferrer\">lazy_static</a> page, you can see the line <code>lazy_static = &quot;0.2.1&quot;</code>. Don&#39;t worry - no-one expects you to learn and remember the versions, but it&#39;s bad practice to use &quot;*&quot; because it means your code could break in the future."}], "tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": true, "score": 2, "last_activity_date": 1469982422, "creation_date": 1469982422, "answer_id": 38686076, "question_id": 38685966, "link": "https://stackoverflow.com/questions/38685966/cant-use-the-conrod-library-in-my-rust-project-cant-find-crate-piston-window/38686076#38686076", "title": "Can&#39;t use the conrod library in my Rust project: can&#39;t find crate piston_window", "body": "<p>You need the <a href=\"https://crates.io/crates/piston_window\" rel=\"nofollow\">piston_window crate</a> from crates.io. Just add this to your <code>Cargo.toml</code>, under dependencies:</p>\n\n<pre><code>piston_window = \"0.51.1\"\n</code></pre>\n\n<p>Whenever you see <code>extern crate _</code>, you will need to add the crate in your <code>Cargo.toml</code> file. The documentation on <a href=\"http://doc.crates.io/manifest.html\" rel=\"nofollow\">crates.io</a> shows the different ways of importing crates (locally, optionally, from Git, etc.)</p>\n"}], "owner": {"reputation": 1376, "user_id": 6285832, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/ijtFS.jpg?s=128&g=1", "display_name": "Robert Reynolds", "link": "https://stackoverflow.com/users/6285832/robert-reynolds"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 455, "favorite_count": 0, "accepted_answer_id": 38686076, "answer_count": 1, "score": 0, "last_activity_date": 1469987901, "creation_date": 1469981628, "last_edit_date": 1469987901, "question_id": 38685966, "link": "https://stackoverflow.com/questions/38685966/cant-use-the-conrod-library-in-my-rust-project-cant-find-crate-piston-window", "title": "Can&#39;t use the conrod library in my Rust project: can&#39;t find crate piston_window", "body": "<p>I'm new to Rust and I'm trying to open a window with the <a href=\"https://github.com/PistonDevelopers/conrod\" rel=\"nofollow\">Conrod library</a>, like they did in the <a href=\"https://github.com/PistonDevelopers/conrod/blob/308d35e0be4dec6646a52d7cac69145a1d4a5109/examples/canvas.rs\" rel=\"nofollow\"><code>canvas.rs</code> example</a>:</p>\n\n<pre><code>#[macro_use] extern crate conrod;\nextern crate find_folder;\nextern crate piston_window;\n\nuse conrod::{Canvas, Theme, Widget, color};\nuse piston_window::{EventLoop, OpenGL, PistonWindow, UpdateEvent,     WindowSettings};\n\nfn main() {\n    const WIDTH: u32 = 800;\n    const HEIGHT: u32 = 600;\n\n    // Change this to OpenGL::V2_1 if not working.\n    let opengl = OpenGL::V3_2;\n\n    // Construct the window.\n    let mut window: PistonWindow =\n    WindowSettings::new(\"Canvas Demo\", [WIDTH, HEIGHT].opengl(opengl).exit_on_esc(true).vsync(true).build().unwrap();\n   window.set_ups(60);\n}\n</code></pre>\n\n<p>This code works when I use it in a a file in the Conrod project (the one I downloaded from GitHub), but it does not work when I use it in my own code:</p>\n\n<pre><code>extern crate conrod;\nextern crate piston_window;\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>With the following Cargo.toml:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[package]\nname = \"hello_conrod\"\nversion = \"0.1.0\"\nauthors = [\"omega\"]\n\n[dependencies]\nconrod = \"0.37.2\"\n</code></pre>\n\n<p>Then the compiler tells me this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: can't find crate for `piston_window` [E0463]\n</code></pre>\n\n<p>I guess my <code>Cargo.toml</code> is wrong but I don't have a clue what I should do.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 7, "creation_date": 1469964963, "post_id": 38683432, "comment_id": 64746254, "body": "There isn&#39;t enough detail here to give a definitive answer, but assuming you&#39;re compiling the components separately: <code>TypeId</code>s (which <code>Any</code> is internally based on) <i>are not</i> stable across compilations.  It&#39;s likely returning <code>None</code> because each component has a different idea of what the unique ID for <code>fun::Bob</code> is, thus they &quot;see&quot; different types.  You can verify this by running <code>println!(&quot;{:?}&quot;, ::std::any::TypeId::of::&lt;Bob&gt;());</code> in both components and checking the output."}, {"owner": {"reputation": 159, "user_id": 6659804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3568154ffb6271de6297d08479a9dfa1?s=128&d=identicon&r=PG", "display_name": "Feng Cen", "link": "https://stackoverflow.com/users/6659804/feng-cen"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1469968577, "post_id": 38683432, "comment_id": 64747136, "body": "Yes, you are right. TypeId of String is the same. But Router&#39;s TypeId is different. See the update. Any solution for this problem?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1469986851, "post_id": 38683432, "comment_id": 64752606, "body": "@DK.: Any idea of why they appear similar for <code>String</code>? Is this an accident, a specificity of <code>std</code>, or the key to making it work for user-written types?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1469999637, "post_id": 38683432, "comment_id": 64756371, "body": "@MatthieuM. it&#39;s probably because the std library is compiled only once (when the distribution is prepared), but in this case the type in question is likely compiled twice, even if it is declared in the same crate (once for the dylib, once for the main program)."}, {"owner": {"reputation": 159, "user_id": 6659804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3568154ffb6271de6297d08479a9dfa1?s=128&d=identicon&r=PG", "display_name": "Feng Cen", "link": "https://stackoverflow.com/users/6659804/feng-cen"}, "edited": false, "score": 0, "creation_date": 1470013096, "post_id": 38683432, "comment_id": 64758883, "body": "dylib is compiled independently, so TypeId would always be different. But I think TypeId should be the same what ever compiled times. This link may be helpful: <a href=\"http://davidlegare.ghost.io/seeking-compilation-independent-type-ids-in-rust/\" rel=\"nofollow noreferrer\">http://davidlegare.ghost.io/seeking-compilation-independent-&zwnj;&#8203;type-ids-in-rust/</a>. But now It seems there is no solution, except that rustc change the way how TypeId generated."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1470885202, "creation_date": 1470885202, "answer_id": 38886671, "question_id": 38683432, "link": "https://stackoverflow.com/questions/38683432/boxany-downcast-return-none-in-dylib-module/38886671#38886671", "title": "Box&lt;Any&gt; downcast return None in dylib module", "body": "<p>As mentioned, up until now (1.10) the <code>TypeId</code> is not stable across crates or compilations.</p>\n\n<p>@eddyb just this week landed a <a href=\"https://github.com/rust-lang/rust/pull/35267\" rel=\"nofollow\">pull request</a> which makes <code>TypeId</code> unique cross-crate which will enable your particular usecase.</p>\n\n<p>It is important to note that this stability is not complete; if you read down the comments, for example, you will note that the <code>TypeId</code> may change if the compiler version or crate version changes. Still, for a single compiler and shared dependency, it's now stable across re-compilations.</p>\n\n<p>For now, you can either use a nightly compiler, or wait until the next stable version which will contain this patch (1.12 or 1.13 I suppose).</p>\n"}], "owner": {"reputation": 159, "user_id": 6659804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3568154ffb6271de6297d08479a9dfa1?s=128&d=identicon&r=PG", "display_name": "Feng Cen", "link": "https://stackoverflow.com/users/6659804/feng-cen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 229, "favorite_count": 1, "accepted_answer_id": 38886671, "answer_count": 1, "score": 10, "last_activity_date": 1470885202, "creation_date": 1469964107, "last_edit_date": 1469971596, "question_id": 38683432, "link": "https://stackoverflow.com/questions/38683432/boxany-downcast-return-none-in-dylib-module", "title": "Box&lt;Any&gt; downcast return None in dylib module", "body": "<p>I use dylib as plugin solution. When I call function <code>register</code>(in the code below, <code>fun</code> is my project name)\uff1a</p>\n\n<pre><code>let register = plugin.get::&lt;unsafe extern fn(&amp;mut fun::mem::Mem)&gt;(\"register\").unwrap();\nunsafe {\n    register(&amp;mut mem);\n}\n</code></pre>\n\n<p>In dylib's <code>register</code> function, <code>mem.get_mut::&lt;fun::router::Router&gt;(\"router\")</code> return <code>None</code></p>\n\n<p>But if I use <code>mem.get_mut::&lt;fun::router::Router&gt;(\"router\")</code> in <code>main.rs</code>. It return <code>Router</code> as I want.</p>\n\n<p>I test more and get some result below:</p>\n\n<p>In dylib:</p>\n\n<ul>\n<li><code>mem.get_mut::&lt;String&gt;(\"test\")</code> work well.  </li>\n<li><code>mem.get_mut::&lt;fun::Bob&gt;(\"bob\")</code> return <code>None</code>.</li>\n</ul>\n\n<p>In <code>main.rs</code>:</p>\n\n<ul>\n<li><code>mem.get_mut::&lt;String&gt;(\"test\")</code> work well.  </li>\n<li><code>mem.get_mut::&lt;fun::Bob&gt;(\"bob\")</code> work well.</li>\n</ul>\n\n<p><strong>My question:</strong></p>\n\n<p><strong>Why downcast_mut return None in dylib if downcast's generic type defined in Main module ?</strong></p>\n\n<p>mem struct:</p>\n\n<pre><code>#[derive(Debug)]\npub struct Mem {\n    pub value: HashMap&lt;String, Box&lt;Any&gt;&gt;,\n}\n</code></pre>\n\n<p>get_mut:</p>\n\n<pre><code>pub fn get_mut&lt;T: Any&gt;(&amp;mut self, key: &amp;str) -&gt; Option&lt;&amp;mut T&gt; {\n    match self.value.get_mut(key) {\n        Some(val) =&gt; {\n            match val.downcast_mut::&lt;T&gt;() {\n                Some(value) =&gt; Some(value),\n                None =&gt; None,\n            }\n        }\n        None =&gt; None,\n    }\n}\n</code></pre>\n\n<p>Sorry for my poor description.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>TypeId test result:</p>\n\n<pre><code># in dylib's function:\nRouter TypeId: TypeId { t: 10245301028242226491 }\nString TypeId: TypeId { t: 2231836747111135853 }\n\n# in `main.rs`'s function:\nRouter TypeId: TypeId { t: 11005875220745415326 }\nString TypeId: TypeId { t: 2231836747111135853 }\n</code></pre>\n\n<p><strong>TypeId is different. Any solution for this problem?</strong></p>\n"}, {"tags": ["multithreading", "rust", "panic"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1469913804, "post_id": 38678360, "comment_id": 64736772, "body": "Could you expand a bit more on your goal? Since you&#39;ve already read the linked Internals forum post, you understand why something like <code>Thread::cancel</code> would be a bad idea. What&#39;s wrong with just terminating the program?"}, {"owner": {"reputation": 171, "user_id": 3614352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d66be3e50da03736e4af8f902511239d?s=128&d=identicon&r=PG&f=1", "display_name": "mfarrugi", "link": "https://stackoverflow.com/users/3614352/mfarrugi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1470007360, "post_id": 38678360, "comment_id": 64757950, "body": "I have cleanup on some threads that I would like to be very confident is run. Having a separate program watch for this one&#39;s health would work, but I feel that adds more complexity.  This kind of thing in Java would be provided by a ShutDownHook, but that is some runtime magic."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1469924383, "post_id": 38679661, "comment_id": 64738927, "body": "If only there was some resource you could reference to be sure what the signal names and numbers were... ^_^ If OP decides to switch to a different signal, what would be the solution?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1469924724, "post_id": 38679661, "comment_id": 64738978, "body": "OP asks: <i>gracefully die <b>on panics</b> and sigkills</i> (emphasis mine); what solutions exist for this case?"}], "tags": [], "owner": {"reputation": 432, "user_id": 6542561, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uEiJr.png?s=128&g=1", "display_name": "Bruce David Wilner", "link": "https://stackoverflow.com/users/6542561/bruce-david-wilner"}, "is_accepted": false, "score": 3, "last_activity_date": 1469924116, "creation_date": 1469924116, "answer_id": 38679661, "question_id": 38678360, "link": "https://stackoverflow.com/questions/38678360/how-to-unwind-all-threads-on-panic/38679661#38679661", "title": "How to unwind all threads on panic?", "body": "<p>You can't do anything graceful on a SIGKILL.  That's what SIGKILL means.  There's a less austere kill, I think it's called ABORT. (I'm an old-schooler, and I refer to them by their numbers: kill is 9, abort was, I think, 15.)</p>\n"}], "owner": {"reputation": 171, "user_id": 3614352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d66be3e50da03736e4af8f902511239d?s=128&d=identicon&r=PG&f=1", "display_name": "mfarrugi", "link": "https://stackoverflow.com/users/3614352/mfarrugi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 306, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1470007392, "creation_date": 1469911762, "last_edit_date": 1495540292, "question_id": 38678360, "link": "https://stackoverflow.com/questions/38678360/how-to-unwind-all-threads-on-panic", "title": "How to unwind all threads on panic?", "body": "<p>What's the least terrible way to implement 'unwind all threads on panic'? I would like to have every thread (attempt to) gracefully die on panics and SIGINTs (and notice SIGKILLs?).</p>\n\n<p>It doesn't appear there is a Rust way to interrupt threads, so I'm thinking that I would implement a trait akin to <code>runOneStep</code> and have my threads check a boolean or look at libc interrupt handling.</p>\n\n<p>I've seen <a href=\"https://stackoverflow.com/questions/35988775\">How can I cause a panic on a thread to immediately end the main thread?</a>, which is basically the hacky way of setting <code>panic=abort</code>.\nI've also seen <a href=\"https://internals.rust-lang.org/t/thread-cancel-support/3056\" rel=\"nofollow noreferrer\">Thread::cancel() support</a>.</p>\n"}, {"tags": ["closures", "rust", "immutability", "traits"], "answers": [{"comments": [{"owner": {"reputation": 146, "user_id": 6658352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a840bf4dfd4f4acf84ac8292738bfa73?s=128&d=identicon&r=PG", "display_name": "Johan", "link": "https://stackoverflow.com/users/6658352/johan"}, "edited": false, "score": 0, "creation_date": 1469908584, "post_id": 38677845, "comment_id": 64735521, "body": "Now that I see your answer I feel stupid I never realised that Fn in the function syntax is the name of the Trait it should implement. Thanks! As for the inlined closure, I believe that naming a variable is documenting it. An inlined closure is worse than a magic number."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 146, "user_id": 6658352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a840bf4dfd4f4acf84ac8292738bfa73?s=128&d=identicon&r=PG", "display_name": "Johan", "link": "https://stackoverflow.com/users/6658352/johan"}, "edited": false, "score": 0, "creation_date": 1469908677, "post_id": 38677845, "comment_id": 64735542, "body": "@Johan I think you mean <i>I feel like I know more today than I did yesterday</i> ^_^."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1518712105, "last_edit_date": 1518712105, "creation_date": 1469907704, "answer_id": 38677845, "question_id": 38677736, "link": "https://stackoverflow.com/questions/38677736/passing-a-closure-that-modifies-its-environment-to-a-function-in-rust/38677845#38677845", "title": "Passing a closure that modifies its environment to a function in Rust", "body": "<h3>If you can change the function that accepts the closure...</h3>\n\n<p>Accept a <code>FnMut</code> instead of a <code>Fn</code>:</p>\n\n<pre><code>fn main() {\n    let mut integer = 5;\n    execute_closure(|| {\n        integer += 1;\n        integer\n    });\n}\n\nfn execute_closure&lt;F&gt;(mut closure_argument: F)\nwhere\n    F: FnMut() -&gt; i32,\n{\n    let result = closure_argument();\n    println!(\"Result of closure: {}\", result);\n}\n</code></pre>\n\n<h3>If you can not change the function that accepts the closure...</h3>\n\n<p>Use <em>interior mutability</em> provided by types like <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow noreferrer\"><code>Cell</code></a> or <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>:</p>\n\n<pre><code>use std::cell::Cell;\n\nfn main() {\n    let integer = Cell::new(5);\n    execute_closure(|| {\n        integer.set(integer.get() + 1);\n        integer.get()\n    });\n}\n\nfn execute_closure&lt;F&gt;(closure_argument: F)\nwhere\n    F: Fn() -&gt; i32,\n{\n    let result = closure_argument();\n    println!(\"Result of closure: {}\", result);\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>Or is there something fundamentally wrong with how I use Rust in this example?</p>\n</blockquote>\n\n<p>Perhaps. An argument of type <code>&amp;mut Fn() -&gt; i32</code> cannot mutate the variables it has closed over, so the error message makes sense to me.</p>\n\n<p>It's <em>kind</em> of similar to the type <code>&amp;mut &amp;u8</code> \u2014 you could alter the outer reference to point to another immutable reference, but you cannot \"ignore\" the inner immutability and change the numeric value.</p>\n\n<p>Aside:</p>\n\n<p>The original code uses <em>dynamic dispatch</em> because there is a <em>trait object</em> that provides indirection. In many cases you'd see this version that I posted above, which uses static dispatch and can be <em>monomorphized</em>. I've also inlined the closure as that's the normal syntax.</p>\n\n<p>Here's the original version with just enough changes to work:</p>\n\n<pre><code>fn main() {\n    let mut integer = 5;\n    let mut closure_variable = || -&gt; i32 {\n        integer += 1;\n        integer\n    };\n    execute_closure(&amp;mut closure_variable);\n}\n\nfn execute_closure(closure_argument: &amp;mut FnMut() -&gt; i32) {\n    let result = closure_argument();\n    println!(\"Result of closure: {}\", result);\n}\n</code></pre>\n"}], "owner": {"reputation": 146, "user_id": 6658352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a840bf4dfd4f4acf84ac8292738bfa73?s=128&d=identicon&r=PG", "display_name": "Johan", "link": "https://stackoverflow.com/users/6658352/johan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2027, "favorite_count": 1, "accepted_answer_id": 38677845, "answer_count": 1, "score": 3, "last_activity_date": 1518712105, "creation_date": 1469906844, "last_edit_date": 1518711322, "question_id": 38677736, "link": "https://stackoverflow.com/questions/38677736/passing-a-closure-that-modifies-its-environment-to-a-function-in-rust", "title": "Passing a closure that modifies its environment to a function in Rust", "body": "<p>I have a closure that captures and modifies its environment. I want to pass this closure to a function that accepts closures:</p>\n\n<pre><code>fn main() {\n    let mut integer = 5;\n    let mut closure_variable = || -&gt; i32 {\n        integer += 1;\n        integer\n    };\n    execute_closure(&amp;mut closure_variable);\n}\n\nfn execute_closure(closure_argument: &amp;mut Fn() -&gt; i32) {\n    let result = closure_argument();\n    println!(\"Result of closure: {}\", result);\n}\n</code></pre>\n\n<p>Because the closure modifies its environment, this fails:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n --&gt; src/main.rs:3:32\n  |\n3 |       let mut closure_variable = || -&gt; i32 {\n  |  ________________________________^\n4 | |         integer += 1;\n5 | |         integer\n6 | |     };\n  | |_____^\n7 |       execute_closure(&amp;mut closure_variable);\n  |                       --------------------- the requirement to implement `Fn` derives from here\n  |\nnote: closure is `FnMut` because it mutates the variable `integer` here\n --&gt; src/main.rs:4:9\n  |\n4 |         integer += 1;\n  |         ^^^^^^^\n</code></pre>\n\n<p>As I understand from <a href=\"https://stackoverflow.com/questions/30177395\">When does a closure implement Fn, FnMut and FnOnce?</a>, this means that my closure actually is expanded to a struct that implements the trait <code>FnMut</code>. This trait is mutable, meaning calling the function changes the (implicit) object. I think this correct, because the variable <code>integer</code> should be modified after calling <code>execute_closure()</code>.</p>\n\n<p>How do I convince the compiler this is okay and that I actually want to call a <code>FnMut</code> function? Or is there something fundamentally wrong with how I use Rust in this example?</p>\n"}, {"tags": ["combobox", "rust", "gtk3", "treemodel", "rust-gnome"], "answers": [{"tags": [], "owner": {"reputation": 291, "user_id": 3735355, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9712cc38a6a18bbb7aaee2b510514b6d?s=128&d=identicon&r=PG", "display_name": "pixunil", "link": "https://stackoverflow.com/users/3735355/pixunil"}, "is_accepted": false, "score": 2, "last_activity_date": 1501267195, "last_edit_date": 1501267195, "creation_date": 1501266258, "answer_id": 45380087, "question_id": 38676739, "link": "https://stackoverflow.com/questions/38676739/how-to-add-liststore-inside-liststore-in-rusts-gtk-rs-bindings/45380087#45380087", "title": "How to add ListStore inside ListStore in Rust&#39;s gtk-rs bindings?", "body": "<h3>Type problems</h3>\n\n<p>If you want to store a <code>gtk::ListStore</code> in another <code>gtk::ListStore</code>, you don't specify <code>gtk::Type::Pointer</code>, you'll need to make use of the last variant, <a href=\"http://gtk-rs.org/docs/glib/types/enum.Type.html\" rel=\"nofollow noreferrer\"><code>gtk::Type::Other(usize)</code></a>. You can get the type of <code>gtk::ListStore</code> with <a href=\"http://gtk-rs.org/docs/gtk/trait.ToValue.html#tymethod.to_value_type\" rel=\"nofollow noreferrer\"><code>ToValue::to_value_type</code></a> at runtime. I sadly could not find a method to do this at compile-time as the type number changes.</p>\n\n<pre><code>let model = ListStore::new(&amp;[Type::U8]);\nprintln!(\"{:?}\", model.to_value_type()); // Other(139977306752544)\nprintln!(\"{:?}\", model.to_value()); // Value(((GtkListStore*) 0x7f4f01b9a060))\n// get type at runtime\nlet liststore_type = model.to_value_type();\nlet model = ListStore::new(&amp;[Type::U32, Type::F64, liststore_type]);\n</code></pre>\n\n<p>Now you can insert your sub-model as you wanted to do with <code>ToValue::to_value</code>.</p>\n\n<h3>Using <code>gtk::CellRendererCombo</code></h3>\n\n<p>However, you wrote that you want to use combo boxes in a row, possibly for editing a number. For this, you do not need nested <code>gtk::ListStore</code>. You need a model for the <code>gtk::TreeView</code> and another for the options.</p>\n\n<pre><code>let model_list_of_data = ListStore::new(&amp;[gtk::Type::U32, gtk::Type::String]);\nlet model_for_combo = ListStore::new(&amp;[gtk::Type::String]);\n\n\nfor liczba in 0..10 {\n    let integer = liczba.to_value();\n    let float = format!(\"{}\", liczba as f64 * 1.5).to_value();\n\n    model_list_of_data.insert_with_values(None, &amp;[0, 1], &amp;[&amp;integer, &amp;float]);\n    model_for_combo.insert_with_values(None, &amp;[0], &amp;[&amp;float]);\n}\n\n// code for first column not changed\n\nlet object_to_render_cells_2: gtk::CellRendererCombo = gtk::CellRendererCombo::new();\nobject_to_render_cells_2.set_visible(true);\nobject_to_render_cells_2.set_property_editable(true);\n// use the combo model for the options\nobject_to_render_cells_2.set_property_model(Some(&amp;model_for_combo.upcast()));\n// display the options of the first column in the combo model\nobject_to_render_cells_2.set_property_text_column(0);\nlet view_column_2 = TreeViewColumn::new();\nview_column_2.set_expand(true);\nview_column_2.set_visible(true);\nview_column_2.set_title(\"f64\");\nview_column_2.pack_start(&amp;object_to_render_cells_2, false);\n// the data for each row is in the second column in the tree model\nview_column_2.add_attribute(&amp;object_to_render_cells_2, \"text\", 1);\nview_list.append_column(&amp;view_column_2);\n</code></pre>\n\n<p>You might have noticed that I used strings instead of plain floats. This has two reasons:</p>\n\n<ol>\n<li>Using <code>format!</code>, unnecessary zeros are not included in the output</li>\n<li>With plain floats, gtk will display the combo, but will crash if you click on one</li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/cCOzK.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/cCOzK.png\" alt=\"screenshot\"></a></p>\n"}], "owner": {"reputation": 43, "user_id": 6585847, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f6a19a8df03c160eec302405c911c172?s=128&d=identicon&r=PG&f=1", "display_name": "wm_obsd", "link": "https://stackoverflow.com/users/6585847/wm-obsd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 613, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1501267195, "creation_date": 1469900412, "last_edit_date": 1469907707, "question_id": 38676739, "link": "https://stackoverflow.com/questions/38676739/how-to-add-liststore-inside-liststore-in-rusts-gtk-rs-bindings", "title": "How to add ListStore inside ListStore in Rust&#39;s gtk-rs bindings?", "body": "<p>I want to create program with a <code>TreeView</code> containing <code>ComboBox</code>es using the <a href=\"http://gtk-rs.org/\" rel=\"nofollow\">gtk-rs bindings</a>.</p>\n\n<p>In order to have data for the <code>GtkCellRendererCombo</code>, I need a <code>GtkTreeModel *</code>, but I don't know how to add a <code>ListStore</code> inside a <code>ListStore</code>.</p>\n\n<p>For now I have only a simple <code>TreeView</code>. I want a <code>ComboBox</code> inside 1 column (header \"f64\"):</p>\n\n<pre><code>extern crate gtk;\n\nuse gtk::prelude::*;\nuse gtk::{ComboBox, ListStore, Orientation, TreeView, TreeViewColumn, Window, WindowType};\n\nfn main() {\n    gtk::init().expect(\"Failed to initialize GTK\");\n    let window = Window::new(WindowType::Toplevel);\n    window.set_position(gtk::WindowPosition::Center);\n    window.set_title(\"Rust&amp;GTK+3\");\n    window.set_position(gtk::WindowPosition::Center);\n    window.connect_delete_event(|wind, _| {\n        let (szerokosc, wysokosc) = wind.get_size();\n        println!(\"Width {} Height {}\", szerokosc, wysokosc);\n        // Stop the main loop.\n        gtk::main_quit();\n        // Let the default handler destroy the window.\n        Inhibit(false)\n    });\n    let main_box = gtk::Box::new(Orientation::Vertical, 0);\n    let view_list = TreeView::new();\n    {\n        let types_inside_columns = &amp;[gtk::Type::U32, gtk::Type::F64];\n        let model_list_of_data = ListStore::new(types_inside_columns);\n        for liczba in 0..10 {\n            let array_of_data = [&amp;(liczba.to_value()) as &amp;ToValue,\n                                 &amp;((liczba as f64 * 1.5).to_value()) as &amp;ToValue];\n            model_list_of_data.insert_with_values(None, &amp;[0, 1], &amp;array_of_data);\n        }\n        view_list.set_model(Some(&amp;model_list_of_data));\n        let object_to_render_cells: gtk::CellRendererText = gtk::CellRendererText::new();\n        object_to_render_cells.set_visible(true);\n        let view_column = TreeViewColumn::new();\n        view_column.set_expand(true);\n        view_column.set_visible(true);\n        view_column.set_title(\"u32\");\n        view_column.pack_start(&amp;object_to_render_cells, true);\n        view_column.add_attribute(&amp;object_to_render_cells, \"text\", 0);\n        view_list.append_column(&amp;view_column);\n        // second column\n        let object_to_render_cells_2: gtk::CellRendererText = gtk::CellRendererText::new();\n        object_to_render_cells_2.set_visible(true);\n        let view_column_2 = TreeViewColumn::new();\n        view_column_2.set_expand(true);\n        view_column_2.set_visible(true);\n        view_column_2.set_title(\"f64\");\n        view_column_2.pack_start(&amp;object_to_render_cells, true);\n        view_column_2.add_attribute(&amp;object_to_render_cells, \"text\", 1);\n        view_list.append_column(&amp;view_column_2);\n    }\n    view_list.expand_all();\n    main_box.add(&amp;view_list);\n    window.add(&amp;main_box);\n    window.show_all();\n    gtk::main();\n}\n</code></pre>\n\n<p>I have tried adding <code>gtk::Type:BaseBoxed</code> to <code>types_inside_columns</code> and then add a boxed <code>ListStore</code> to <code>array_of_data</code>, but <code>Box</code> can not be successfully converted by method <code>to_value()</code> to type <code>ToValue</code>.</p>\n\n<p>Added:\nThis program is panicking at runtime:</p>\n\n<pre><code>extern crate gtk;\nuse gtk::prelude::*;\nuse gtk::{ComboBox, ListStore, Orientation, TreeView, TreeViewColumn, Window, WindowType};\n\n\nfn main()\n{\n    gtk::init().expect(\"Failed to initialize GTK\");\n    let window = Window::new(WindowType::Toplevel);\n    window.set_position(gtk::WindowPosition::Center);    \n    window.set_title(\"Rust&amp;GTK+3\");\n    window.set_position(gtk::WindowPosition::Center);\n    window.connect_delete_event(|wind, _| {\n        let (szerokosc,wysokosc) =  wind.get_size();\n        println!(\"Width {} Height {}\",szerokosc,wysokosc);\n        // Stop the main loop.\n        gtk::main_quit();\n        // Let the default handler destroy the window.\n        Inhibit(false)\n    });\n    let main_box = gtk::Box::new(Orientation::Vertical,0);\n    let view_list = TreeView::new();\n    {\n        let types_inside_columns = &amp;[gtk::Type::U32,gtk::Type::F64,gtk::Type::Pointer];\n        let model_list_of_data = ListStore::new(types_inside_columns);\n        for liczba in 0..10 {\n            let model_for_combo = ListStore::new(types_inside_columns);\n            let array_of_data = [&amp;(liczba.to_value()) as &amp;ToValue,\n            &amp;((liczba as f64 * 1.5).to_value()) as &amp;ToValue,\n            ];\n            let typ_iter = model_list_of_data.insert_with_values(None,&amp;[0,1],&amp;array_of_data);\n            model_list_of_data.set_value(&amp;typ_iter,2, &amp;model_for_combo.to_value() as &amp;gtk::Value);\n        }\n        view_list.set_model(Some(&amp;model_list_of_data));\n        let object_to_render_cells : gtk::CellRendererText = gtk::CellRendererText::new();\n        object_to_render_cells.set_visible(true);\n        let view_column= TreeViewColumn::new();\n        view_column.set_expand(true);\n        view_column.set_visible(true);\n        view_column.set_title(\"u32\");\n        view_column.pack_start(&amp;object_to_render_cells,true);\n        view_column.add_attribute(&amp;object_to_render_cells,\"text\",0);\n        view_list.append_column(&amp;view_column);\n        //second column\n        let object_to_render_cells_2 : gtk::CellRendererCombo = gtk::CellRendererCombo::new();\n        let view_column_2 = TreeViewColumn::new();\n        view_column_2.set_expand(true);\n        view_column_2.set_visible(true);\n        view_column_2.set_title(\"f64\");\n        view_column_2.pack_start(&amp;object_to_render_cells_2,true);\n        view_column_2.add_attribute(&amp;object_to_render_cells_2,\"text\",1);\n        view_list.append_column(&amp;view_column_2);\n    }\n    view_list.expand_all();\n    main_box.add(&amp;view_list);\n    window.add(&amp;main_box);\n    window.show_all();\n    gtk::main();\n}\n</code></pre>\n"}, {"tags": ["postgresql", "rust", "rust-diesel"], "comments": [{"owner": {"reputation": 6788, "user_id": 1748754, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/jjk7p.jpg?s=128&g=1", "display_name": "erewok", "link": "https://stackoverflow.com/users/1748754/erewok"}, "edited": false, "score": 1, "creation_date": 1469904396, "post_id": 38676229, "comment_id": 64734297, "body": "Looks like it may not be supported yet, so I may have to go with a naive datetime for now: <a href=\"https://github.com/diesel-rs/diesel/issues/106\" rel=\"nofollow noreferrer\">github.com/diesel-rs/diesel/issues/106</a>"}, {"owner": {"reputation": 6788, "user_id": 1748754, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/jjk7p.jpg?s=128&g=1", "display_name": "erewok", "link": "https://stackoverflow.com/users/1748754/erewok"}, "reply_to_user": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 2, "creation_date": 1469938194, "post_id": 38676229, "comment_id": 64740918, "body": "You know my favorite part about ORMs is the input sanitization so I don&#39;t have to think as much about SQL injection. I&#39;ve heard them called leaky abstractions and it&#39;s probably true because you have to know a lot of SQL to use most ORMs effectively. Of course, you also have to write a ton of boilerplate marshalling types into and out of SQL types. Have you used SQLalchemy? It gets best-in-show in my limited experience."}, {"owner": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1469938327, "post_id": 38676229, "comment_id": 64740948, "body": "ORMs get in the way, write slow queries, and hide problems from the programmer. You can end up doing seriously stupid things, but unless you read the SQL statements the stupid ORM is writing, you&#39;d never know until you wonder why the thing is dog slow and realize you&#39;ve ended up doing sequential scans with joins for absolutely no good reason."}, {"owner": {"reputation": 6788, "user_id": 1748754, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/jjk7p.jpg?s=128&g=1", "display_name": "erewok", "link": "https://stackoverflow.com/users/1748754/erewok"}, "reply_to_user": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1469938422, "post_id": 38676229, "comment_id": 64740964, "body": "I don&#39;t share that opinion. I think they serve a role. I won&#39;t try to change your time about them, though."}, {"owner": {"reputation": 1693, "user_id": 5731861, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iKaMT.png?s=128&g=1", "display_name": "Felipe Valdes", "link": "https://stackoverflow.com/users/5731861/felipe-valdes"}, "reply_to_user": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1563791707, "post_id": 38676229, "comment_id": 100803267, "body": "The issue was fixed by the Diesel team.  I share the same views and concerns of @ZanLynx with respecto to ORMs, however, the advantage of being able to move between database engines, is a plus, consider change to be a constant in Software, what happens when people need to move from MySQL to a Serverless Database? The price of Freedom is eternal vigilance, so we must observe the ORM&#39;s behaviour closely, and not let the abstraction bite is us the behind."}], "answers": [{"comments": [{"owner": {"reputation": 6788, "user_id": 1748754, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/jjk7p.jpg?s=128&g=1", "display_name": "erewok", "link": "https://stackoverflow.com/users/1748754/erewok"}, "edited": false, "score": 0, "creation_date": 1469938346, "post_id": 38678210, "comment_id": 64740952, "body": "One thing you were right about: I accidentally imported that type in the wrong file!"}], "tags": [], "owner": {"reputation": 9, "user_id": 6457052, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f4124acd08d4b612ece0514ba035208?s=128&d=identicon&r=PG&f=1", "display_name": "Murat YANAR", "link": "https://stackoverflow.com/users/6457052/murat-yanar"}, "is_accepted": false, "score": 0, "last_activity_date": 1469910597, "creation_date": 1469910597, "answer_id": 38678210, "question_id": 38676229, "link": "https://stackoverflow.com/questions/38676229/timestamp-in-rusts-diesel-library-with-postgres/38678210#38678210", "title": "Timestamp in Rust&#39;s Diesel Library with Postgres", "body": "<p>please check datatype from ui </p>\n\n<p>\"src/models.rs:16:18: 16:27 help: you can import it into scope: <code>use diesel::types::Timestamp;</code>.\nsrc/models.rs:17:18: 17:27 error: type name <code>Timestamp</code> is undefined or not in scope [E0412]\nsrc/models.rs:17     pub updated: Timestamp \"</p>\n\n<p>maybe timestamp is not define word.</p>\n"}, {"comments": [{"owner": {"reputation": 176, "user_id": 8027040, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/525eb516c34c9df53d9b24e3e825a23a?s=128&d=identicon&r=PG&f=1", "display_name": "pragMATHiC", "link": "https://stackoverflow.com/users/8027040/pragmathic"}, "edited": false, "score": 0, "creation_date": 1592038475, "post_id": 38994994, "comment_id": 110285006, "body": "There is a great compilation of Diesel, PostgreSQL and Rust&#39;s data type mappings <a href=\"https://kotiri.com/2018/01/31/postgresql-diesel-rust-types.html\" rel=\"nofollow noreferrer\">here</a>"}, {"owner": {"reputation": 77, "user_id": 2571208, "user_type": "registered", "accept_rate": 17, "profile_image": "https://i.stack.imgur.com/a5uGt.jpg?s=128&g=1", "display_name": "Joe Meyer", "link": "https://stackoverflow.com/users/2571208/joe-meyer"}, "edited": false, "score": 0, "creation_date": 1612129912, "post_id": 38994994, "comment_id": 116664147, "body": "Best answer! Thank you for your wisdom!"}], "tags": [], "owner": {"reputation": 3368, "user_id": 385966, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/0f674817f8c6e149518f0a4b4ad3d560?s=128&d=identicon&r=PG", "display_name": "sgrif", "link": "https://stackoverflow.com/users/385966/sgrif"}, "is_accepted": true, "score": 37, "last_activity_date": 1520181780, "last_edit_date": 1520181780, "creation_date": 1471432231, "answer_id": 38994994, "question_id": 38676229, "link": "https://stackoverflow.com/questions/38676229/timestamp-in-rusts-diesel-library-with-postgres/38994994#38994994", "title": "Timestamp in Rust&#39;s Diesel Library with Postgres", "body": "<p>All of the types in <a href=\"http://docs.diesel.rs/diesel/sql_types/index.html\" rel=\"noreferrer\"><code>diesel::sql_types</code></a> are markers to represent various SQL datatypes for your schema. They should never be used in your own structs. What you need is a type which implements <code>diesel::deserialize::FromSql&lt;diesel::sql_types::Timestamp, diesel::pg::Pg&gt;</code> (docs: <a href=\"http://docs.diesel.rs/diesel/deserialize/trait.FromSql.html\" rel=\"noreferrer\"><code>FromSql</code></a>, <a href=\"http://docs.diesel.rs/diesel/sql_types/struct.Timestamp.html\" rel=\"noreferrer\"><code>Timestamp</code></a>, <a href=\"http://docs.diesel.rs/diesel/pg/struct.Pg.html\" rel=\"noreferrer\"><code>Pg</code></a>). There are two types which implement that trait.</p>\n\n<p>The first is <a href=\"https://doc.rust-lang.org/nightly/std/time/struct.SystemTime.html\" rel=\"noreferrer\"><code>std::time::SystemTime</code></a> which doesn't require additional dependencies, but doesn't have a ton of capabilities.</p>\n\n<p>The second is <a href=\"https://lifthrasiir.github.io/rust-chrono/chrono/naive/datetime/struct.NaiveDateTime.html\" rel=\"noreferrer\"><code>chrono::NaiveDateTime</code></a>. This is probably the type you want. In order to use it, you'll need to add <a href=\"https://crates.io/crates/chrono\" rel=\"noreferrer\"><code>chrono</code></a> to your dependencies, and change the diesel line in Cargo.toml to include the chrono feature, so it'll look something like <code>diesel = { version = \"0.7.0\", features = [\"postgres\", \"chrono\"] }</code></p>\n\n<p>(Technically there's a third type, which is <a href=\"http://docs.diesel.rs/diesel/pg/data_types/struct.PgTimestamp.html\" rel=\"noreferrer\"><code>diesel::data_types::PgTimestamp</code></a> but that's almost certainly not what you want, as that struct is just the literal representation of timestamp in the database so other types don't have to worry about raw bytes)</p>\n"}], "owner": {"reputation": 6788, "user_id": 1748754, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/jjk7p.jpg?s=128&g=1", "display_name": "erewok", "link": "https://stackoverflow.com/users/1748754/erewok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8470, "favorite_count": 3, "accepted_answer_id": 38994994, "answer_count": 2, "score": 26, "last_activity_date": 1520181780, "creation_date": 1469896971, "last_edit_date": 1469936965, "question_id": 38676229, "link": "https://stackoverflow.com/questions/38676229/timestamp-in-rusts-diesel-library-with-postgres", "title": "Timestamp in Rust&#39;s Diesel Library with Postgres", "body": "<p>I have been taking a look at Rust's <a href=\"https://github.com/diesel-rs/diesel\" rel=\"noreferrer\">Diesel ORM</a> today by following along on <a href=\"http://diesel.rs/guides/getting-started/\" rel=\"noreferrer\">this walk-through</a>, and I can't get a <code>Timestamp</code> to work. </p>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[dependencies]\ndiesel = { version = \"0.6.2\", features = [\"chrono\"] }\ndiesel_codegen = { version = \"0.6.2\", default-features = false, features = [\"nightly\", \"postgres\"] }\ndotenv = \"0.8.0\"\ndotenv_macros = \"0.8.0\"\n</code></pre>\n\n<p><strong>models.rs</strong></p>\n\n<pre><code>#[derive(Queryable)]\n\npub struct Author {\n    pub id: i32,\n    pub first_name: String,\n    pub last_name: String,\n    pub email: String\n}\n\npub struct Post {\n    pub id: i32,\n    pub author: Author,\n    pub title: String,\n    pub body: String,\n    pub published: bool,\n    pub created: Timestamp,\n    pub updated: Timestamp\n}\n</code></pre>\n\n<p>(I read that there's a <code>diesel::types::Timestamp</code> type)</p>\n\n<p><strong>lib.rs</strong></p>\n\n<pre><code>#![feature(custom_derive, custom_attribute, plugin)]\n#![plugin(diesel_codegen, dotenv_macros)]\n\n#[macro_use]\nextern crate diesel;\nextern crate dotenv;\n\npub mod schema;\npub mod models;\n\nuse diesel::prelude::*;\nuse diesel::types::Timestamp;\nuse diesel::pg::PgConnection;\nuse dotenv::dotenv;\nuse std::env;\n\npub fn establish_connection() -&gt; PgConnection {\n    dotenv().ok();\n\n    let database_url = env::var(\"DATABASE_URL\").\n        expect(\"DATABASE_URL must be set\");\n    PgConnection::establish(&amp;database_url).\n        expect(&amp;format!(\"Error connecting to {}\", database_url))\n}\n</code></pre>\n\n<p>But these are the errors I get when I try to use it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;diesel macros&gt;:5:1: 5:71 note: in this expansion of table_body! (defined in &lt;diesel macros&gt;)\nsrc/schema.rs:1:1: 1:40 note: in this expansion of table! (defined in &lt;diesel macros&gt;)\nsrc/schema.rs:1:1: 1:40 note: in this expansion of infer_schema! (defined in src/lib.rs)\nsrc/lib.rs:1:1: 1:1 help: run `rustc --explain E0412` to see a detailed explanation\nsrc/lib.rs:1:1: 1:1 help: no candidates by the name of `Timestamptz` found in your project; maybe you misspelled the name or forgot to import an external crate?\nsrc/lib.rs:1:1: 1:1 error: type name `Timestamptz` is undefined or not in scope [E0412]\nsrc/lib.rs:1 #![feature(custom_derive, custom_attribute, plugin)]\n\n...\n\n&lt;diesel macros&gt;:38:1: 38:47 note: in this expansion of column! (defined in &lt;diesel macros&gt;)\n&lt;diesel macros&gt;:5:1: 5:71 note: in this expansion of table_body! (defined in &lt;diesel macros&gt;)\nsrc/schema.rs:1:1: 1:40 note: in this expansion of table! (defined in &lt;diesel macros&gt;)\nsrc/schema.rs:1:1: 1:40 note: in this expansion of infer_schema! (defined in src/lib.rs)\nsrc/lib.rs:1:1: 1:1 help: run `rustc --explain E0412` to see a detailed explanation\nsrc/lib.rs:1:1: 1:1 help: no candidates by the name of `Timestamptz` found in your project; maybe you misspelled the name or forgot to import an external crate?\nsrc/models.rs:16:18: 16:27 error: type name `Timestamp` is undefined or not in scope [E0412]\nsrc/models.rs:16     pub created: Timestamp,\n                              ^~~~~~~~~\nsrc/models.rs:16:18: 16:27 help: run `rustc --explain E0412` to see a detailed explanation\nsrc/models.rs:16:18: 16:27 help: you can import it into scope: `use diesel::types::Timestamp;`.\nsrc/models.rs:17:18: 17:27 error: type name `Timestamp` is undefined or not in scope [E0412]\nsrc/models.rs:17     pub updated: Timestamp\n                              ^~~~~~~~~\n</code></pre>\n\n<p>It looks like the first error, <code>Timestamptz</code> is a result of <code>infer_schema</code> not knowing how to interpret that Postgresql type, which is already in the table. As for the second, I thought perhaps if explicitly imported that <code>Timestamp</code> type, I could create a <code>Post</code> struct with it.</p>\n\n<p>Is there something obvious that I am doing wrong here?</p>\n\n<p>As an aside, I am pretty new to Rust and Diesel uses a fair bit of code-generation, so it's easy to get lost, but I thought this should be a straightforward thing to accomplish.</p>\n\n<hr>\n\n<p><strong>Edit</strong>: </p>\n\n<p>I used <code>timestamp with time zone</code> to create the table, and it looks like that <a href=\"https://github.com/diesel-rs/diesel/issues/106\" rel=\"noreferrer\">may not be supported yet</a>:</p>\n\n<pre><code>CREATE TABLE post (\n    ...\n    created timestamp with time zone NOT NULL,\n    updated timestamp with time zone\n)\n</code></pre>\n\n<hr>\n\n<p><strong>Edit 2:</strong> </p>\n\n<p>I changed <strong>models.rs</strong> to look like the following and got rid of the error about <code>Timestamp</code> being undefined. I also realized that I needed <code>#[derive(Queryable)]</code> above each of the structs to be derived. The following compiles fine, but the previous errors with <code>Timestamptz</code> remain:</p>\n\n<pre><code>use diesel::types::Timestamp;\n\n#[derive(Queryable)]\npub struct Author {\n    pub id: i32,\n    pub first_name: String,\n    pub last_name: String,\n    pub email: String\n}\n\n#[derive(Queryable)]\npub struct Post {\n    pub id: i32,\n    pub author: Author,\n    pub title: String,\n    pub body: String,\n    pub published: bool,\n    pub created: Timestamp,\n    pub updated: Timestamp\n}\n</code></pre>\n"}, {"tags": ["performance", "rust", "integer-arithmetic"], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 2789124, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/731ca53ad6094e1c0108640bea933c74?s=128&d=identicon&r=PG", "display_name": "Ben Eills", "link": "https://stackoverflow.com/users/2789124/ben-eills"}, "edited": false, "score": 0, "creation_date": 1469882069, "post_id": 38673913, "comment_id": 64727943, "body": "Thanks - I&#39;ll  use this."}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 3, "last_activity_date": 1469881333, "creation_date": 1469881333, "answer_id": 38673913, "question_id": 38673713, "link": "https://stackoverflow.com/questions/38673713/writing-an-efficient-power-function-in-rust/38673913#38673913", "title": "Writing an efficient power function in Rust", "body": "<p>Why not use <a href=\"http://rust-num.github.io/num/num/pow/fn.pow.html\" rel=\"nofollow\">num::pow::pow</a>? In any case, here is how it is implemented:</p>\n\n<pre><code>#[inline]\npub fn pow&lt;T: Clone + One + Mul&lt;T, Output = T&gt;&gt;(mut base: T, mut exp: usize) -&gt; T {\n    if exp == 0 { return T::one() }\n\n    while exp &amp; 1 == 0 {\n        base = base.clone() * base;\n        exp &gt;&gt;= 1;\n    }\n    if exp == 1 { return base }\n\n    let mut acc = base.clone();\n    while exp &gt; 1 {\n        exp &gt;&gt;= 1;\n        base = base.clone() * base;\n        if exp &amp; 1 == 1 {\n            acc = acc * base.clone();\n        }\n    }\n    acc\n}\n</code></pre>\n\n<p>It requires <code>Clone</code> in addition to <code>Mul</code> (and <code>One</code>, but that's not needed if you're not being generic).</p>\n\n<p>There's nothing wrong or unsafe about using bitwise operations in Rust, by the way.</p>\n"}], "owner": {"reputation": 13, "user_id": 2789124, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/731ca53ad6094e1c0108640bea933c74?s=128&d=identicon&r=PG", "display_name": "Ben Eills", "link": "https://stackoverflow.com/users/2789124/ben-eills"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 403, "favorite_count": 0, "accepted_answer_id": 38673913, "answer_count": 1, "score": 1, "last_activity_date": 1470089999, "creation_date": 1469880115, "last_edit_date": 1470089999, "question_id": 38673713, "link": "https://stackoverflow.com/questions/38673713/writing-an-efficient-power-function-in-rust", "title": "Writing an efficient power function in Rust", "body": "<p>I am writing an efficient squaring method in Rust.  Let's assume that the <code>Mul</code> trait of <code>AbstractNumber</code> is a black box and that we're only allowed safe, idiomatic Rust.</p>\n\n<p>Below is a first pass which uses repeated squaring for larger indices.  I'm unsure how LLVM will translate Rust arithmetic method calls such as <code>checked_next_power_of_two()</code>.</p>\n\n<p><strong>Does the following look reasonable?  Would it be more efficient to split off the smaller-case branch into its own inlined function?</strong></p>\n\n<pre><code>/// Compute an integer power of this number efficiently with repeated squaring.\npub fn pow(&amp;self, n: u32) -&gt; AbstractNumber {\n    let optimization = 5;\n\n    if n &lt; optimization {\n        let mut x = Complex::one();\n\n        for _ in 0..n {\n            x *= *self;\n        }\n\n        x\n    } else {\n        // l = floor(log_2(n)), r = n - 2^l\n        let (l, r) = if n.is_power_of_two() {\n            (n.trailing_zeros(), 0)\n        } else {\n            let p = n.checked_next_power_of_two().unwrap().trailing_zeros() - 1;\n            (p, n - 2u32.pow(p))\n        };\n\n        let mut x = *self;\n\n        for _ in 0..l {\n            x *= x;\n        }\n\n        self.pow(r) * x\n    }\n}\n</code></pre>\n"}, {"tags": ["operator-overloading", "rust", "function-call-operator"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1562196616, "last_edit_date": 1562196616, "creation_date": 1469871838, "answer_id": 38672502, "question_id": 38672235, "link": "https://stackoverflow.com/questions/38672235/how-do-i-implement-the-fn-trait-for-one-struct-for-different-types-of-arguments/38672502#38672502", "title": "How do I implement the Fn trait for one struct for different types of arguments?", "body": "<p>You can't (but read until the end of the answer).</p>\n\n<p>First of all, implementing the <code>Fn*</code> family of traits explicitly is unstable and subject to change at any time, so it'd be a bad idea to depend on that.</p>\n\n<p>Secondly, and more importantly, the Rust compiler before <a href=\"https://github.com/rust-lang/rust/pull/55986\" rel=\"nofollow noreferrer\">Rust 1.33 nightly</a> just <em>will not</em> let you call a value that has <code>Fn*</code> implementations for different argument types.  It just can't work out what you want it to do, since there's normally no way for it to happen.  The only way around that is fully specifying the trait you wanted to call, but at that point, you've lost any possible ergonomic benefit of this approach.</p>\n\n<p>Just define and implement your own trait instead of trying to use the <code>Fn*</code> traits.  I took some liberties with the question to avoid/fix questionable aspects.</p>\n\n<pre><code>struct Clf {\n    x: f64,\n}\n\ntrait ClfExt&lt;T: ?Sized&gt; {\n    type Result;\n    fn classify(&amp;self, arg: &amp;T) -&gt; Self::Result;\n}\n\nimpl ClfExt&lt;f64&gt; for Clf {\n    type Result = bool;\n    fn classify(&amp;self, arg: &amp;f64) -&gt; Self::Result {\n        *arg &gt; self.x\n    }\n}\n\nimpl ClfExt&lt;[f64]&gt; for Clf {\n    type Result = Vec&lt;bool&gt;;\n    fn classify(&amp;self, arg: &amp;[f64]) -&gt; Self::Result {\n        arg.iter().map(|v| self.classify(v)).collect()\n    }\n}\n\nfn main() {\n    let c = Clf { x: 0.0 };\n    let v = vec![-1.0, 0.5, 1.0];\n    println!(\"{}\", c.classify(&amp;0.5f64));\n    println!(\"{:?}\", c.classify(&amp;v[..]));\n}\n</code></pre>\n\n<h3>How to use the <code>Fn*</code> traits</h3>\n\n<p>I've included this for the sake of completeness; <em>do not actually do this.</em>  Not only is it unsupported, it's <em>damn</em> ugly.</p>\n\n<pre><code>#![feature(fn_traits, unboxed_closures)]\n\n#[derive(Copy, Clone)]\nstruct Clf {\n    x: f64,\n}\n\nimpl FnOnce&lt;(f64,)&gt; for Clf {\n    type Output = bool;\n    extern \"rust-call\" fn call_once(self, args: (f64,)) -&gt; Self::Output {\n        args.0 &gt; self.x\n    }\n}\n\nimpl&lt;'a&gt; FnOnce&lt;(&amp;'a [f64],)&gt; for Clf {\n    type Output = Vec&lt;bool&gt;;\n    extern \"rust-call\" fn call_once(self, args: (&amp;'a [f64],)) -&gt; Self::Output {\n        args.0\n            .iter()\n            .cloned()\n            .map(|v| FnOnce::call_once(self, (v,)))\n            .collect()\n    }\n}\n\nfn main() {\n    let c = Clf { x: 0.0 };\n    let v = vec![-1.0, 0.5, 1.0];\n\n    // Before 1.33 nightly\n    println!(\"{}\", FnOnce::call_once(c, (0.5f64,)));\n    println!(\"{:?}\", FnOnce::call_once(c, (&amp;v[..],)));\n\n    // After\n    println!(\"{}\", c(0.5f64));\n    println!(\"{:?}\", c(&amp;v[..]));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 5189, "user_id": 5223757, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/FdOvO.png?s=128&g=1", "display_name": "wizzwizz4", "link": "https://stackoverflow.com/users/5223757/wizzwizz4"}, "edited": false, "score": 0, "creation_date": 1562833196, "post_id": 38672581, "comment_id": 100504292, "body": "Am I right in thinking that this is old (historical) syntax nowadays?"}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 8, "last_activity_date": 1562196190, "last_edit_date": 1562196190, "creation_date": 1469872408, "answer_id": 38672581, "question_id": 38672235, "link": "https://stackoverflow.com/questions/38672235/how-do-i-implement-the-fn-trait-for-one-struct-for-different-types-of-arguments/38672581#38672581", "title": "How do I implement the Fn trait for one struct for different types of arguments?", "body": "<p>The short answer is: You can't. At least it won't work the way you want. I think the best way to show that is to walk through and see what happens, but the general idea is that Rust doesn't support function overloading.</p>\n\n<p>For this example, we will be implementing <code>FnOnce</code>, because <code>Fn</code> requires <code>FnMut</code> which requires <code>FnOnce</code>. So, if we were to get this all sorted, we could do it for the other function traits.</p>\n\n<p>First, this is unstable, so we need some feature flags</p>\n\n<pre><code>#![feature(unboxed_closures, fn_traits)]\n</code></pre>\n\n<p>Then, let's do the <code>impl</code> for taking an <code>f64</code>:</p>\n\n<pre><code>impl FnOnce&lt;(f64,)&gt; for Clf {\n    type Output = i32;\n    extern \"rust-call\" fn call_once(self, args: (f64,)) -&gt; i32 {\n        if args.0 &gt; self.x {\n            1\n        } else {\n            0\n        }\n    }\n}\n</code></pre>\n\n<p>The arguments to the <code>Fn</code> family of traits are supplied via a tuple, so that's the <code>(f64,)</code> syntax; it's a tuple with just one element.</p>\n\n<p>This is all well and good, and we can now do <code>c(0.5)</code>, although it will consume <code>c</code> until we implement the other traits.</p>\n\n<p>Now let's do the same thing for <code>Vec</code>s:</p>\n\n<pre><code>impl FnOnce&lt;(Vec&lt;f64&gt;,)&gt; for Clf {\n    type Output = Vec&lt;i32&gt;;\n    extern \"rust-call\" fn call_once(self, args: (Vec&lt;f64&gt;,)) -&gt; Vec&lt;i32&gt; {\n        args.0\n            .iter()\n            .map(|&amp;f| if f &gt; self.x { 1 } else { 0 })\n            .collect()\n    }\n}\n</code></pre>\n\n<p>Before <a href=\"https://github.com/rust-lang/rust/pull/55986\" rel=\"nofollow noreferrer\">Rust 1.33 nightly</a>, you cannot directly call <code>c(v)</code> or even <code>c(0.5)</code> (which worked before); we'd get an error about the type of the function not being known. Basically, these versions of Rust didn't support function overloading. But we can still call the functions using <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\" rel=\"nofollow noreferrer\">fully qualified syntax</a>, where <code>c(0.5)</code> becomes <code>FnOnce::call_once(c, (0.5,))</code>.</p>\n\n<hr>\n\n<p>Not knowing your bigger picture, I would want to solve this simply by giving <code>Clf</code> two functions like so:</p>\n\n<pre><code>impl Clf {\n    fn classify(&amp;self, val: f64) -&gt; u32 {\n        if val &gt; self.x {\n            1\n        } else {\n            0\n        }\n    }\n\n    fn classify_vec(&amp;self, vals: Vec&lt;f64&gt;) -&gt; Vec&lt;u32&gt; {\n        vals.into_iter().map(|v| self.classify(v)).collect()\n    }\n}\n</code></pre>\n\n<p>Then your usage example becomes</p>\n\n<pre><code>let c = Clf { x: 0 };\nlet v = vec![-1, 0.5, 1];\nprintln!(\"{}\", c.classify(0.5));   // prints 1\nprintln!(\"{}\", c.classify_vec(v)); // prints [0, 1, 1]\n</code></pre>\n\n<p>I would actually want to make the second function <code>classify_slice</code> and take <code>&amp;[f64]</code> to be a bit more general, then you could still use it with <code>Vec</code>s by referencing them: <code>c.classify_slice(&amp;v)</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 9, "last_activity_date": 1562196922, "last_edit_date": 1562196922, "creation_date": 1469881029, "answer_id": 38673864, "question_id": 38672235, "link": "https://stackoverflow.com/questions/38672235/how-do-i-implement-the-fn-trait-for-one-struct-for-different-types-of-arguments/38673864#38673864", "title": "How do I implement the Fn trait for one struct for different types of arguments?", "body": "<p>This is indeed possible, but you need a new trait and a ton of mess.</p>\n\n<p>If you start with the abstraction</p>\n\n<pre><code>enum VecOrScalar&lt;T&gt; {\n    Scalar(T),\n    Vector(Vec&lt;T&gt;),\n}\n\nuse VecOrScalar::*;\n</code></pre>\n\n<p>You want a way to use the type transformations</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>T      (hidden) -&gt; VecOrScalar&lt;T&gt; -&gt; T      (known)\nVec&lt;T&gt; (hidden) -&gt; VecOrScalar&lt;T&gt; -&gt; Vec&lt;T&gt; (known)\n</code></pre>\n\n<p>because then you can take a \"hidden\" type <code>T</code>, wrap it in a <code>VecOrScalar</code> and extract the real type <code>T</code> with a <code>match</code>.</p>\n\n<p>You also want</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>T      (known) -&gt; bool      = T::Output\nVec&lt;T&gt; (known) -&gt; Vec&lt;bool&gt; = Vec&lt;T&gt;::Output\n</code></pre>\n\n<p>but without higher-kinded-types, this is a bit tricky. Instead, you can do</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>T      (known) -&gt; VecOrScalar&lt;T&gt; -&gt; T::Output\nVec&lt;T&gt; (known) -&gt; VecOrScalar&lt;T&gt; -&gt; Vec&lt;T&gt;::Output\n</code></pre>\n\n<p>if you allow for a branch that can panic.</p>\n\n<p>The trait will thus be</p>\n\n<pre><code>trait FromVecOrScalar&lt;T&gt; {\n    type Output;\n\n    fn put(self) -&gt; VecOrScalar&lt;T&gt;;\n\n    fn get(out: VecOrScalar&lt;bool&gt;) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>with implementations</p>\n\n<pre><code>impl&lt;T&gt; FromVecOrScalar&lt;T&gt; for T {\n    type Output = bool;\n\n    fn put(self) -&gt; VecOrScalar&lt;T&gt; {\n        Scalar(self)\n    }\n\n    fn get(out: VecOrScalar&lt;bool&gt;) -&gt; Self::Output {\n        match out {\n            Scalar(val) =&gt; val,\n            Vector(_) =&gt; panic!(\"Wrong output type!\"),\n        }\n    }\n}\n</code></pre>\n\n\n\n<pre><code>impl&lt;T&gt; FromVecOrScalar&lt;T&gt; for Vec&lt;T&gt; {\n    type Output = Vec&lt;bool&gt;;\n\n    fn put(self) -&gt; VecOrScalar&lt;T&gt; {\n        Vector(self)\n    }\n\n    fn get(out: VecOrScalar&lt;bool&gt;) -&gt; Self::Output {\n        match out {\n            Vector(val) =&gt; val,\n            Scalar(_) =&gt; panic!(\"Wrong output type!\"),\n        }\n    }\n}\n</code></pre>\n\n<p>Your type</p>\n\n<pre><code>#[derive(Copy, Clone)]\nstruct Clf {\n    x: f64,\n}\n</code></pre>\n\n<p>will first implement the two branches:</p>\n\n<pre><code>impl Clf {\n    fn calc_scalar(self, f: f64) -&gt; bool {\n        f &gt; self.x\n    }\n\n    fn calc_vector(self, v: Vec&lt;f64&gt;) -&gt; Vec&lt;bool&gt; {\n        v.into_iter().map(|x| self.calc_scalar(x)).collect()\n    }\n}\n</code></pre>\n\n<p>Then it will dispatch by implementing <code>FnOnce</code> for <code>T: FromVecOrScalar&lt;f64&gt;</code></p>\n\n<pre><code>impl&lt;T&gt; FnOnce&lt;(T,)&gt; for Clf\nwhere\n    T: FromVecOrScalar&lt;f64&gt;,\n{\n</code></pre>\n\n<p>with types</p>\n\n<pre><code>    type Output = T::Output;\n    extern \"rust-call\" fn call_once(self, (arg,): (T,)) -&gt; T::Output {\n</code></pre>\n\n<p>The dispatch first boxes the private type up, so you can extract it with the <code>enum</code>, and then <code>T::get</code>s the result, to hide it again.</p>\n\n<pre><code>        match arg.put() {\n            Scalar(scalar) =&gt; T::get(Scalar(self.calc_scalar(scalar))),\n            Vector(vector) =&gt; T::get(Vector(self.calc_vector(vector))),\n        }\n    }\n}\n</code></pre>\n\n<p>Then, success:</p>\n\n<pre><code>fn main() {\n    let c = Clf { x: 0.0 };\n    let v = vec![-1.0, 0.5, 1.0];\n    println!(\"{}\", c(0.5f64));\n    println!(\"{:?}\", c(v));\n}\n</code></pre>\n\n<p>Since the compiler can see through all of this malarky, it actually compiles away to basically the same assembly as a direct call to the <code>calc_</code> methods.</p>\n\n<p>That's not to say it's nice to write. Overloading like this is a pain, fragile and most certainly A Bad Idea\u2122. Don't do it, though it's fine to know that you can.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1562194943, "post_id": 56878800, "comment_id": 100306222, "body": "This answer is seemingly already provided <a href=\"https://stackoverflow.com/a/38672502/155423\">by an existing answer</a>. Please thoroughly read <i>all</i> existing answers before providing new ones. Clearly distinguish what makes your answer distinct from existing ones if it truly is different."}], "tags": [], "owner": {"reputation": 17, "user_id": 11730155, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/26b609080e3e275cd3fbd6e4c7dd3386?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbfounded", "link": "https://stackoverflow.com/users/11730155/dumbfounded"}, "is_accepted": false, "score": -1, "last_activity_date": 1562194775, "last_edit_date": 1562194775, "creation_date": 1562194246, "answer_id": 56878800, "question_id": 38672235, "link": "https://stackoverflow.com/questions/38672235/how-do-i-implement-the-fn-trait-for-one-struct-for-different-types-of-arguments/56878800#56878800", "title": "How do I implement the Fn trait for one struct for different types of arguments?", "body": "<p>You can do using nightly and unstable features:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(fn_traits, unboxed_closures)]\nstruct Clf {\n    x: f64,\n}\n\nimpl FnOnce&lt;(f64,)&gt; for Clf {\n    type Output = i32;\n    extern \"rust-call\" fn call_once(self, args: (f64,)) -&gt; i32 {\n        if args.0 &gt; self.x {\n            1\n        } else {\n            0\n        }\n    }\n}\n\nimpl FnOnce&lt;(Vec&lt;f64&gt;,)&gt; for Clf {\n    type Output = Vec&lt;i32&gt;;\n    extern \"rust-call\" fn call_once(self, args: (Vec&lt;f64&gt;,)) -&gt; Vec&lt;i32&gt; {\n        args.0\n            .iter()\n            .map(|&amp;f| if f &gt; self.x { 1 } else { 0 })\n            .collect()\n    }\n}\n\nfn main() {\n    let c = Clf { x: 0.0 };\n    let v = vec![-1.0, 0.5, 1.0];\n    println!(\"{:?}\", c(0.5));\n\n    let c = Clf { x: 0.0 };\n    println!(\"{:?}\", c(v));\n}\n</code></pre>\n"}], "owner": {"reputation": 193, "user_id": 5177296, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/74d8a88f1671531b2a6f2ff4218764d4?s=128&d=identicon&r=PG&f=1", "display_name": "asdetrefle", "link": "https://stackoverflow.com/users/5177296/asdetrefle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6114, "favorite_count": 1, "accepted_answer_id": 38672581, "answer_count": 4, "score": 5, "last_activity_date": 1562196922, "creation_date": 1469869709, "last_edit_date": 1562195987, "question_id": 38672235, "link": "https://stackoverflow.com/questions/38672235/how-do-i-implement-the-fn-trait-for-one-struct-for-different-types-of-arguments", "title": "How do I implement the Fn trait for one struct for different types of arguments?", "body": "<p>I have a simple classifier:</p>\n\n<pre><code>struct Clf {\n    x: f64,\n}\n</code></pre>\n\n<p>The classifier returns 0 if the observed value is smaller than <code>x</code> and 1 if bigger than <code>x</code>.</p>\n\n<p>I want to implement the call operator for this classifier. However, the function should be able to take either a float or a vector as arguments. In case of a vector, the output is a vector of 0 or 1 which has the same size as the input vector:</p>\n\n<pre><code>let c = Clf { x: 0 };\nlet v = vec![-1, 0.5, 1];\nprintln!(\"{}\", c(0.5));   // prints 1\nprintln!(\"{}\", c(v));     // prints [0, 1, 1]\n</code></pre>\n\n<p>How can I write implementation of <code>Fn</code> in this case? </p>\n\n<pre><code>impl Fn for Clf {\n    extern \"rust-call\" fn call(/*...*/) {\n        // ...\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 8, "last_activity_date": 1469852583, "creation_date": 1469852583, "answer_id": 38670317, "question_id": 38670303, "link": "https://stackoverflow.com/questions/38670303/rust-if-let-not-working/38670317#38670317", "title": "Rust &quot;if let&quot; not working?", "body": "<p>You need to pass the actual pattern to <code>if let</code> (unlike languages like Swift which special case <code>if let</code> for <code>Option</code> types):</p>\n\n<pre><code>if let Some(doc) = xml::parse_file(\"filename\") {\n    doc.simple_function();\n}\n</code></pre>\n"}], "owner": {"reputation": 382, "user_id": 837913, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/34b261e42380a6b5251ce8513c8ab350?s=128&d=identicon&r=PG", "display_name": "jefftime", "link": "https://stackoverflow.com/users/837913/jefftime"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 535, "favorite_count": 0, "accepted_answer_id": 38670317, "answer_count": 1, "score": 2, "last_activity_date": 1469852583, "creation_date": 1469852447, "question_id": 38670303, "link": "https://stackoverflow.com/questions/38670303/rust-if-let-not-working", "title": "Rust &quot;if let&quot; not working?", "body": "<p>I am wrapping libxml2 in Rust as an exercise in learning the Rust FFI, and I have come across something strange. I am new to Rust, but I believe the following should work.</p>\n\n<p>In <code>main.rs</code> I have:</p>\n\n<pre><code>mod xml;\n\nfn main() {\n    if let doc = xml::parse_file(\"filename\") {\n        doc.simple_function();\n    }\n}\n</code></pre>\n\n<p>And <code>xml.rs</code> is:</p>\n\n<pre><code>extern create libc;\n\nuse libc::{c_void, c_char, c_int, c_ushort};\nuse std::ffi::CString;\n\n// There are other struct definitions I've implemented that xmlDoc\n// depends on, but I'm not going to list them because I believe\n// they're irrelevant\n\n#[allow(non_snake_case)]\n#[allow(non_camel_case_types)]\n#[repr(C)]\nstruct xmlDoc {\n    // xmlDoc structure defined by the libxml2 API\n}\n\n\npub struct Doc {\n    ptr: *mut xmlDoc\n}\n\nimpl Doc {\n    pub fn simple_function(&amp;self) {\n        if self.ptr.is_null() {\n            println!(\"ptr doesn't point to anything\");\n        } else {\n            println!(\"ptr is not null\");\n        }\n    }\n}\n\n#[allow(non_snake_case)]\n#[link(name = \"xml2\")]\nextern {\n    fn xmlParseFile(filename: *const c_char) -&gt; *mut xmlDoc;\n}\n\npub fn parse_file(filename: &amp;str) -&gt; Option&lt;Doc&gt; {\n    unsafe {\n        let result;\n        match CString::new(filename) {\n            Ok(f) =&gt; { result = xmlParseFile(f.as_ptr()); },\n            Err(_) =&gt; { return None; }\n        }\n        if result.is_null() {\n            return None;\n        }\n        Some(Doc { ptr: result })\n    }\n}\n</code></pre>\n\n<p>I'm wrapping the C struct, <code>xmlDoc</code> in a nice Rust-friendly struct, <code>Doc</code>, to have a clear delineation between the safe (Rust) and unsafe (C) data types and functions.</p>\n\n<p>This all works for the most part except when I compile, I get an error in main.rs:</p>\n\n<pre><code>src/main.rs:38:13: 38:28 error: no method named 'simple_function' found\nfor type 'std::option::Option&lt;xml::Doc&gt;' in the current scope\nsrc/main.rs:38         doc.simple_function();\n                       ^~~~~~~~~~~~~~~\nerror: aborting due to previous error`\n</code></pre>\n\n<p>It seems convinced that <code>doc</code> is an <code>Option&lt;xml::Doc&gt;</code> even though I'm using the <code>if let</code> form that should unwrap the <code>Option</code> type. Is there something I'm doing incorrectly?</p>\n\n<pre><code>match xml::parse_file(\"filename\") {\n    Some(doc) =&gt; doc.simple_function(),\n    None =&gt; {}\n}\n</code></pre>\n\n<p>The above works fine, but I'd like to use the <code>if let</code> feature of Rust if I'm able.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1469822127, "last_edit_date": 1469822127, "creation_date": 1469821780, "answer_id": 38666493, "question_id": 38666006, "link": "https://stackoverflow.com/questions/38666006/how-am-i-supposed-to-apply-a-match-or-option-after-an-unwrap/38666493#38666493", "title": "How am I supposed to apply a match or Option after an unwrap?", "body": "<p>There seems to be a large disconnect here. <code>unwrap</code> or <code>expect</code> handle errors by panicking the thread. You aren't really supposed to \"handle\" a panic in 99.9% of Rust programs; you just let things die.</p>\n\n<p>If you don't want a panic, don't use <code>unwrap</code> or <code>expect</code>. Instead, pass back the error via a <code>Result</code> or an <code>Option</code>, as described in the <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\">Error Handling section of <em>The Rust Programming Language</em></a>.</p>\n\n<p>You can <code>match</code> (or any other pattern matching technique) on the <code>Result</code> or <code>Option</code> and handle an error appropriately for your case. One example of handling the error in your outer loop:</p>\n\n<pre><code>use std::net::{TcpStream, TcpListener};\nuse std::time::Duration;\nuse std::io::prelude::*;\nuse std::io::BufReader;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:5432\")\n        .expect(\"Unable to bind to the port\");\n\n    loop {\n        if let Ok((stream, _)) = listener.accept() {\n            stream\n                .set_read_timeout(Some(Duration::from_millis(100)))\n                .expect(\"Unable to set timeout\");\n\n            handle_request(stream);    \n        }\n    }\n}\n</code></pre>\n\n<p>Note that I <strong>highly</strong> recommend using <code>expect</code> instead of <code>unwrap</code> in just about every case. </p>\n"}], "owner": {"reputation": 11, "user_id": 6655671, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/51bd11fc9edb8acb62ade653452bc0dc?s=128&d=identicon&r=PG&f=1", "display_name": "crabbyone", "link": "https://stackoverflow.com/users/6655671/crabbyone"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 351, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1469822127, "creation_date": 1469819503, "last_edit_date": 1469821648, "question_id": 38666006, "link": "https://stackoverflow.com/questions/38666006/how-am-i-supposed-to-apply-a-match-or-option-after-an-unwrap", "title": "How am I supposed to apply a match or Option after an unwrap?", "body": "<p>I'm trying to get into Rust from a Python background and I'm having an issue with a PoC I'm messing around with.  I've read through a bunch of blogs and documentation on how to handle errors in Rust, but I can't figure out how to implement it when I use <code>unwrap</code> and get a panic.  Here is part of the code:</p>\n\n<pre><code>fn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:5432\").unwrap();\n\n    // The .0 at the end is indexing a tuple, FYI\n    loop {\n        let stream = listener.accept().unwrap().0;\n        stream.set_read_timeout(Some(Duration::from_millis(100)));\n        handle_request(stream);\n    }\n}\n\n// Things change a bit in here\nfn handle_request(stream: TcpStream) {\n    let address = stream.peer_addr().unwrap();\n    let mut reader = BufReader::new(stream);\n    let mut payload = \"\".to_string();\n\n    for line in reader.by_ref().lines() {\n        let brap = line.unwrap();\n        payload.push_str(&amp;*brap);\n        if brap == \"\" {\n            break;\n        }\n    }\n\n    println!(\"{0} -&gt; {1}\", address, payload);\n    send_response(reader.into_inner());\n}\n</code></pre>\n\n<p>It is handling the socket not receiving anything with <code>set_read_timeout</code> on the stream as expected, but when that triggers my <code>unwrap</code> on line in the loop it is causing a panic.  Can someone help me understand how I'm properly supposed to apply a match or <code>Option</code> to this code?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 27690, "user_id": 362589, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/125a471032cdef6e8de28ff6d54c7324?s=128&d=identicon&r=PG", "display_name": "Dani", "link": "https://stackoverflow.com/users/362589/dani"}, "edited": false, "score": 1, "creation_date": 1469809433, "post_id": 38663359, "comment_id": 64707711, "body": "<a href=\"http://stackoverflow.com/questions/24842271/the-use-of-the-unit-type-in-rust\" title=\"the use of the unit type in rust\">stackoverflow.com/questions/24842271/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "is_accepted": true, "score": 11, "last_activity_date": 1469809475, "creation_date": 1469809475, "answer_id": 38663453, "question_id": 38663359, "link": "https://stackoverflow.com/questions/38663359/what-type-is-the-type-in-rust/38663453#38663453", "title": "What type is the &quot;type ()&quot; in Rust?", "body": "<p>() is the <em>unit type</em>, analogous to a <code>void</code> return type in other languages.</p>\n\n<p>You're getting it here:</p>\n\n<pre><code>if key == arr[mid] {\n    mid as usize\n}\n</code></pre>\n\n<p>Rust is expecting that if expression to return <code>()</code>, but you're returning <code>usize</code> for that expression. Since virtually everything in Rust is an expression, you can <em>usually</em> implicit return like you're trying to here, but in this specific case you can't because the <code>if</code> expression is not the <strong>only</strong> expression in the <code>while</code> expression. You could fix the immediate problem by using <code>return mid as usize;</code> instead.</p>\n"}, {"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1523291209, "post_id": 38663468, "comment_id": 86489244, "body": "I personally think this is the better answer because it correctly addresses <i>why</i> the <code>if</code> expects the unit type - the lack of <code>else</code> instead of it not being the only expression in the loop."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 12, "last_activity_date": 1469814118, "last_edit_date": 1469814118, "creation_date": 1469809513, "answer_id": 38663468, "question_id": 38663359, "link": "https://stackoverflow.com/questions/38663359/what-type-is-the-type-in-rust/38663468#38663468", "title": "What type is the &quot;type ()&quot; in Rust?", "body": "<p><code>()</code> is the <em>unit type</em> or <em>singleton type</em>: it has a single value, also denoted <code>()</code>.</p>\n\n<p>I personally view it as a tuple with 0 elements.</p>\n\n<p>Where C or C++ would use <code>void</code> (which has no value) to indicate the return type of a function which returns nothing interesting, Rust uses <code>()</code> instead. This is much nicer to meta-programming, as <code>()</code> is a regular type which accepts values, can be mutated, borrowed, etc...</p>\n\n<hr>\n\n<p>Regarding your specific code sample:</p>\n\n<pre><code>if key == arr[mid] {\n    mid as usize\n}\n</code></pre>\n\n<p>is an expression of type <code>()</code> (because there is no <code>else</code> branch) yet you are attempting to have the <code>if</code> block evaluate to <code>mid as usize</code> which has the type <code>usize</code> thus the compiler notices the mismatch.</p>\n\n<p>You want to use a <code>return</code> here:</p>\n\n<pre><code>if key == arr[mid] {\n    return mid as usize;\n}\n</code></pre>\n"}], "owner": {"reputation": 130, "user_id": 344911, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e2274a9fb44aa976280ff2a04ef988c?s=128&d=identicon&r=PG&f=1", "display_name": "pgr", "link": "https://stackoverflow.com/users/344911/pgr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3247, "favorite_count": 0, "accepted_answer_id": 38663453, "answer_count": 2, "score": 10, "last_activity_date": 1469814118, "creation_date": 1469809138, "last_edit_date": 1469814077, "question_id": 38663359, "link": "https://stackoverflow.com/questions/38663359/what-type-is-the-type-in-rust", "title": "What type is the &quot;type ()&quot; in Rust?", "body": "<p>As a simple exercise to learn Rust, I've decided to implement a simple binary search:</p>\n\n<pre><code>pub fn binary_search(arr: &amp;[i32], key: i32) -&gt; usize {\n    let min: usize = 0;\n    let max: usize = arr.len();\n    while max &gt;= min {\n        let mid: usize = (max - min) / 2 as usize;\n        if key == arr[mid] {\n            mid as usize\n        }\n\n        if key &lt; arr[mid] {\n            min = mid + 1;\n            continue;\n        }\n\n        max = mid - 1;\n    }\n    -1 as usize\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::binary_search;\n\n    #[test]\n    fn binary_search_works() {\n        let arr: [i32; 8] = [1, 2, 3, 4, 5, 6, 7, 8];\n        let index: usize = binary_search(&amp;arr, 2);\n        assert_eq!(1, index);\n    }\n}\n</code></pre>\n\n<p>At build time, I get this error which I do not understand. What is the <code>()</code> type? Variable <code>mid</code> is always <code>usize</code> but even with the <code>as</code> cast I'm getting this compilation error.</p>\n\n<pre><code>error: mismatched types [E0308]\n            mid as usize\n            ^~~~~~~~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `()`\nnote:    found type `usize`\n</code></pre>\n"}, {"tags": ["rust", "iron"], "answers": [{"tags": [], "owner": {"reputation": 13, "user_id": 6654261, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c989f132593de7c65476212c6de99216?s=128&d=identicon&r=PG&f=1", "display_name": "Thijs", "link": "https://stackoverflow.com/users/6654261/thijs"}, "is_accepted": false, "score": 0, "last_activity_date": 1469798616, "last_edit_date": 1469798616, "creation_date": 1469798289, "answer_id": 38659948, "question_id": 38659008, "link": "https://stackoverflow.com/questions/38659008/unable-to-compile-iron-example-expected-struct-ironrequestrequest-found/38659948#38659948", "title": "Unable to compile Iron example: expected struct `iron::request::Request`, found struct `iron::Request`", "body": "<p>I removed the <code>Cargo.lock</code> file and rebuilt and it works as expected.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1469798598, "last_edit_date": 1495542762, "creation_date": 1469798598, "answer_id": 38660041, "question_id": 38659008, "link": "https://stackoverflow.com/questions/38659008/unable-to-compile-iron-example-expected-struct-ironrequestrequest-found/38660041#38660041", "title": "Unable to compile Iron example: expected struct `iron::request::Request`, found struct `iron::Request`", "body": "<p>See also <a href=\"https://stackoverflow.com/q/38370713/155423\">Cannot access parameters in Iron because the trait bound plugin::Plugin&lt;iron::Request&gt; is not satisfied</a></p>\n\n<p>You are including an old version of <code>router</code> that replies on Iron 0.3:</p>\n\n<pre><code>[[package]]\nname = \"router\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"iron 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"route-recognizer 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n</code></pre>\n\n<p>But then are using Iron 0.4 directly:</p>\n\n<pre><code>[[package]]\nname = \"iron\"\nversion = \"0.4.0\"\n</code></pre>\n\n<p>Different crate versions act as completely separate crates (even though they look similar in error messages). It's not valid to mix and match the versions in this manner.</p>\n"}], "owner": {"reputation": 13, "user_id": 6654261, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c989f132593de7c65476212c6de99216?s=128&d=identicon&r=PG&f=1", "display_name": "Thijs", "link": "https://stackoverflow.com/users/6654261/thijs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 407, "favorite_count": 0, "accepted_answer_id": 38660041, "answer_count": 2, "score": 1, "last_activity_date": 1469798616, "creation_date": 1469795686, "last_edit_date": 1469798335, "question_id": 38659008, "link": "https://stackoverflow.com/questions/38659008/unable-to-compile-iron-example-expected-struct-ironrequestrequest-found", "title": "Unable to compile Iron example: expected struct `iron::request::Request`, found struct `iron::Request`", "body": "<p>I'm trying to get a simple Iron example to work:</p>\n\n<pre><code>extern crate iron;\nextern crate router;\n\nuse iron::prelude::*;\nuse iron::status;\n\nuse router::Router;\n\nfn main() {\n\n    let mut router = Router::new();\n\n    router.get(\"/controller\", controller);\n\n    fn controller(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        Ok(Response::with((status::Ok, \"Hello World!\")))\n    }\n\n    Iron::new(router).http(\"localhost:3000\").unwrap();\n}\n</code></pre>\n\n<p>I maintain the following Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"simple_router\"\nversion = \"0.1.0\"\nauthors = [\"Thijs\"]\n\n[dependencies]\niron=\"*\"\nrouter = \"*\"\n</code></pre>\n\n<p>I can see the following error:</p>\n\n<pre><code>type mismatch: the type `fn(&amp;mut iron::Request&lt;'_, '_&gt;) -&gt; std::result::Result&lt;iron::Response, iron::IronError&gt; {main::controller}` implements the trait `for&lt;'r, 'r, 'r&gt; std::ops::Fn&lt;(&amp;'r mut iron::Request&lt;'r, 'r&gt;,)&gt;`, but the trait `for&lt;'r, 'r, 'r&gt; std::ops::Fn&lt;(&amp;'r mut iron::request::Request&lt;'r, 'r&gt;,)&gt;` is required (expected struct `iron::request::Request`, found struct `iron::Request`) [E0281]at line 13 col 12\n</code></pre>\n\n<p>when running <code>cargo build</code> I got the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  Compiling SimpleRouter v0.1.0 (file:///home/kolbein/workspaces/simplerust/SimpleRouter)\nsrc/main.rs:13:12: 13:15 error: type mismatch: the type `fn(&amp;mut iron::Request&lt;'_, '_&gt;) -&gt; std::result::Result&lt;iron::Response, iron::IronError&gt; {main::controller}` implements the trait `for&lt;'r, 'r, 'r&gt; std::ops::Fn&lt;(&amp;'r mut iron::Request&lt;'r, 'r&gt;,)&gt;`, but the trait `for&lt;'r, 'r, 'r&gt; std::ops::Fn&lt;(&amp;'r mut iron::request::Request&lt;'r, 'r&gt;,)&gt;` is required (expected struct `iron::request::Request`, found struct `iron::Request`) [E0281]\nsrc/main.rs:13     router.get(\"/controller\", controller);\n                          ^~~\nsrc/main.rs:13:12: 13:15 help: run `rustc --explain E0281` to see a detailed explanation\nsrc/main.rs:13:12: 13:15 note: required because of the requirements on the impl of `iron::middleware::Handler` for `fn(&amp;mut iron::Request&lt;'_, '_&gt;) -&gt; std::result::Result&lt;iron::Response, iron::IronError&gt; {main::controller}`\nsrc/main.rs:13:12: 13:15 error: type mismatch: the type `fn(&amp;mut iron::Request&lt;'_, '_&gt;) -&gt; std::result::Result&lt;iron::Response, iron::IronError&gt; {main::controller}` implements the trait `for&lt;'r, 'r, 'r&gt; std::ops::FnOnce&lt;(&amp;'r mut iron::Request&lt;'r, 'r&gt;,)&gt;`, but the trait `for&lt;'r, 'r, 'r&gt; std::ops::FnOnce&lt;(&amp;'r mut iron::request::Request&lt;'r, 'r&gt;,)&gt;` is required (expected struct `iron::request::Request`, found struct `iron::Request`) [E0281]\nsrc/main.rs:13     router.get(\"/controller\", controller);\n                          ^~~\nsrc/main.rs:13:12: 13:15 help: run `rustc --explain E0281` to see a detailed explanation\nsrc/main.rs:13:12: 13:15 note: required because of the requirements on the impl of `iron::middleware::Handler` for `fn(&amp;mut iron::Request&lt;'_, '_&gt;) -&gt; std::result::Result&lt;iron::Response, iron::IronError&gt; {main::controller}`\nsrc/main.rs:19:5: 19:14 error: the trait bound `for&lt;'r, 'r, 'r&gt; router::Router: std::ops::Fn&lt;(&amp;'r mut iron::Request&lt;'r, 'r&gt;,)&gt;` is not satisfied [E0277]\nsrc/main.rs:19     Iron::new(router).http(\"localhost:3000\").unwrap();\n                   ^~~~~~~~~\nsrc/main.rs:19:5: 19:14 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:19:5: 19:14 note: required because of the requirements on the impl of `iron::Handler` for `router::Router`\nsrc/main.rs:19:5: 19:14 note: required by `iron::Iron::new`\nsrc/main.rs:19:5: 19:14 error: the trait bound `for&lt;'r, 'r, 'r&gt; router::Router: std::ops::FnOnce&lt;(&amp;'r mut iron::Request&lt;'r, 'r&gt;,)&gt;` is not satisfied [E0277]\nsrc/main.rs:19     Iron::new(router).http(\"localhost:3000\").unwrap();\n                   ^~~~~~~~~\nsrc/main.rs:19:5: 19:14 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:19:5: 19:14 note: required because of the requirements on the impl of `iron::Handler` for `router::Router`\nsrc/main.rs:19:5: 19:14 note: required by `iron::Iron::new`\nsrc/main.rs:19:23: 19:27 error: no method named `http` found for type `iron::Iron&lt;router::Router&gt;` in the current scope\nsrc/main.rs:19     Iron::new(router).http(\"localhost:3000\").unwrap();\n                                     ^~~~\nsrc/main.rs:19:23: 19:27 note: the method `http` exists but the following trait bounds were not satisfied: `router::Router : iron::Handler`\nerror: aborting due to 5 previous errors\nerror: Could not compile `SimpleRouter`.\n</code></pre>\n\n<p>Below you'll find the Cargo.lock file:</p>\n\n<pre><code>[root]\nname = \"simple_router\"\nversion = \"0.1.0\"\ndependencies = [\n \"iron 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"router 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"conduit-mime-types\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"cookie\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"time 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"url 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"error\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"traitobject 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"typeable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"hpack\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"cookie 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"httparse 1.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"language-tags 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"mime 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"solicit 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"time 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"traitobject 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"typeable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicase 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"url 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"hyper\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"cookie 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"httparse 1.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"language-tags 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"mime 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"solicit 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"time 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"traitobject 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"typeable 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicase 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"url 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"iron\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"conduit-mime-types 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"error 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"hyper 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"modifier 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"plugin 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"typemap 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"url 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"iron\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"conduit-mime-types 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"error 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"hyper 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"lazy_static 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"modifier 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"plugin 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"typemap 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"url 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"kernel32-sys\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"language-tags\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"log\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"mime\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"modifier\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"num_cpus\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"plugin\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"typemap 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.3.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"route-recognizer\"\nversion = \"0.1.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"router\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"iron 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"route-recognizer 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"rustc-serialize\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"semver 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.1.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"solicit\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"hpack 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.1.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"traitobject\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"traitobject\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"typeable\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"typemap\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"unsafe-any 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"unicase\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"rustc_version 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"unsafe-any\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"traitobject 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicode-bidi 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicode-normalization 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"uuid 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"matches 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"uuid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"rand 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"winapi-build\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n</code></pre>\n\n<p>I should add more details. What more details can I add..</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10379, "user_id": 69893, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Jo6Ks.png?s=128&g=1", "display_name": "Christian Witts", "link": "https://stackoverflow.com/users/69893/christian-witts"}, "edited": false, "score": 0, "creation_date": 1469778867, "post_id": 38649573, "comment_id": 64688348, "body": "What version of the rust toolchain are you using ? I compiled and ran your code fine without a segfault on <code>rustc 1.10.0 (cfcb716cf 2016-07-03)</code> and <code>rustc 1.12.0-nightly (feeca9457 2016-07-26)</code> on El Capitan 10.11.6."}, {"owner": {"reputation": 3008, "user_id": 3204951, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8aca84582c72a22e9cb5245571103d92?s=128&d=identicon&r=PG", "display_name": "Nate Mara", "link": "https://stackoverflow.com/users/3204951/nate-mara"}, "reply_to_user": {"reputation": 10379, "user_id": 69893, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Jo6Ks.png?s=128&g=1", "display_name": "Christian Witts", "link": "https://stackoverflow.com/users/69893/christian-witts"}, "edited": false, "score": 0, "creation_date": 1469787656, "post_id": 38649573, "comment_id": 64693818, "body": "I&#39;m using 1.10 stable"}, {"owner": {"reputation": 10379, "user_id": 69893, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Jo6Ks.png?s=128&g=1", "display_name": "Christian Witts", "link": "https://stackoverflow.com/users/69893/christian-witts"}, "edited": false, "score": 0, "creation_date": 1469790543, "post_id": 38649573, "comment_id": 64695662, "body": "I am able to get it to crash now. If you run <code>rust-lldb target&#47;release&#47;linkfoo</code> and then <code>r&lt;Enter&gt;</code> to run the program what is the segfault reason you get ? Mine bombs with <code>stop reason = EXC_BAD_ACCESS (code=1, address=0x0)     frame #0: 0x0000000100026404 segfault`je_huge_dalloc [inlined] je_rtree_val_read(dependent=true) + 4 at rtree.h:193</code>"}, {"owner": {"reputation": 10379, "user_id": 69893, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Jo6Ks.png?s=128&g=1", "display_name": "Christian Witts", "link": "https://stackoverflow.com/users/69893/christian-witts"}, "edited": false, "score": 0, "creation_date": 1469790577, "post_id": 38649573, "comment_id": 64695684, "body": "Subsequent executions of the binary succeed without segfaulting."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1469793875, "post_id": 38649573, "comment_id": 64697576, "body": "Have you seen <a href=\"http://stackoverflow.com/q/26602353/155423\">stackoverflow.com/q/26602353/155423</a> ?"}], "answers": [{"tags": [], "owner": {"reputation": 3008, "user_id": 3204951, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8aca84582c72a22e9cb5245571103d92?s=128&d=identicon&r=PG", "display_name": "Nate Mara", "link": "https://stackoverflow.com/users/3204951/nate-mara"}, "is_accepted": false, "score": 1, "last_activity_date": 1469869137, "last_edit_date": 1469869137, "creation_date": 1469797069, "answer_id": 38659521, "question_id": 38649573, "link": "https://stackoverflow.com/questions/38649573/segmentation-fault-doing-dynamic-loading-in-osx/38659521#38659521", "title": "Segmentation fault doing dynamic loading in OSX", "body": "<p>Rust uses the system allocator for dynamic libraries, and jemalloc for all other code. This difference in loaders was causing the segfault, and I was able to fix it by adding this to the top of <code>main.rs</code>:</p>\n\n<pre><code>#![feature(alloc_system)]\nextern crate alloc_system;\n</code></pre>\n"}], "owner": {"reputation": 3008, "user_id": 3204951, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8aca84582c72a22e9cb5245571103d92?s=128&d=identicon&r=PG", "display_name": "Nate Mara", "link": "https://stackoverflow.com/users/3204951/nate-mara"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 261, "favorite_count": 1, "answer_count": 1, "score": 4, "last_activity_date": 1469869137, "creation_date": 1469758888, "question_id": 38649573, "link": "https://stackoverflow.com/questions/38649573/segmentation-fault-doing-dynamic-loading-in-osx", "title": "Segmentation fault doing dynamic loading in OSX", "body": "<p>I'm trying to do some dynamic library loading in Rust. I'm getting a segmentation fault when passing a large <code>Vec</code> from a dynamically loaded library function. It's a basic function that creates a <code>Vec&lt;i32&gt;</code> of a specified size. If the <code>Vec</code> gets much bigger than 8MB, the program hits a segfault on OSX. I haven't had the same problem when running on linux, can anyone look at this and tell me if I'm doing something wrong here? I'm running this with:</p>\n\n<pre><code>$ cargo build --release\n$ ./target/release/linkfoo\n8281\n[1]    84253 segmentation fault  ./target/release/linkfoo\n</code></pre>\n\n<h2>Cargo.toml</h2>\n\n<pre><code>[package]\nname = \"linkfoo\"\nversion = \"0.1.0\"\nauthors = [\"Nate Mara &lt;nathan.mara@kroger.com&gt;\"]\n\n[dependencies]\nlibloading = \"0.3.0\"\n\n[lib]\nname = \"foo\"\ncrate-type = [\"dylib\"]\n</code></pre>\n\n<h2>main.rs</h2>\n\n<pre><code>extern crate libloading as lib;\n\nfn main() {\n    let dylib = lib::Library::new(\"./target/release/libfoo.dylib\").expect(\"Failed to load library\");\n    let func = unsafe {\n        let wrapped_func: lib::Symbol&lt;fn(&amp;[i32]) -&gt; Vec&lt;i32&gt;&gt; = dylib.get(b\"alloc\")\n            .expect(\"Failed to load function\");\n\n        wrapped_func.into_raw()\n    };\n\n    let args = vec![8182];\n    println!(\"{}\", func(&amp;args).len());\n}\n</code></pre>\n\n<h2>lib.rs</h2>\n\n<pre><code>#[no_mangle]\npub fn alloc(args: &amp;[i32]) -&gt; Vec&lt;i32&gt; {\n    let size = args[0] as usize;\n    let mut mat = Vec::with_capacity(size);\n\n    for _ in 0..size {\n        mat.push(0);\n    }\n\n    mat\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1469727247, "post_id": 38642804, "comment_id": 64669407, "body": "What exactly is your question?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1469729556, "post_id": 38642804, "comment_id": 64670716, "body": "It&#39;s not the best etiquette to modify your question in such a way that it invalidates existing answers."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1469738053, "post_id": 38642804, "comment_id": 64675149, "body": "I don&#39;t think this is possible, sorry. You cannot downgrade a mutable reference to a shared one to regain the shared lifetime."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1469792466, "post_id": 38642804, "comment_id": 64696756, "body": "@Veedrac: Really? The reverse is obvious (once aliased, you cannot guarantee exclusivity) but moving from exclusive to aliased is possible as far as I know."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1469792993, "post_id": 38642804, "comment_id": 64697071, "body": "@Shepmaster: I am sorry you deleted your answer, you were very close (I would argue the remaining error was a typo)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1469793693, "post_id": 38642804, "comment_id": 64697478, "body": "@MatthieuM. no worries; I couldn&#39;t answer the core meat of the question, so it wasn&#39;t a big loss. I read the problem the same as Veedrac; that the mutability should be given up after the builder builds."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1469793894, "post_id": 38642804, "comment_id": 64697591, "body": "@Shepmaster: If that is the case then Chris&#39; answer will have the gist of it: I don&#39;t see how to downgrade a borrow at the moment in Rust (the compiler <i>could</i> analyze this deep, but it would be more brittle). It&#39;s not necessary here, but I guess that&#39;s what happens with reduced examples."}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1469748370, "post_id": 38647770, "comment_id": 64679044, "body": "If you&#39;re checking dynamically, a <code>RefCell</code> is a lot less heavyweight. <a href=\"https://play.rust-lang.org/?gist=88a746b54a6cd6e6ede1818c8ce136d2&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1469775317, "post_id": 38647770, "comment_id": 64686361, "body": "That is true, but doesn&#39;t give the &quot;convert to immutable&quot; part. I&#39;m not saying that&#39;s necessarily desired though!"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 1, "last_activity_date": 1469744944, "creation_date": 1469744944, "answer_id": 38647770, "question_id": 38642804, "link": "https://stackoverflow.com/questions/38642804/how-do-i-give-a-mutable-reference-to-a-builder-but-only-an-immutable-reference-t/38647770#38647770", "title": "How do I give a mutable reference to a builder but only an immutable reference to the built object?", "body": "<p>You can do something similar if you don't mind wrapping <code>bar</code> in an <code>Rc</code>.  The trick is that if there's only one <code>Rc</code> reference, you can get an <code>&amp;mut</code> reference to the contents.  This is sort of backwards; instead of downgrading <code>&amp;mut</code> to <code>&amp;</code> at compile time, it's making use of runtime information (reference counts) to \"upgrade\" from an immutable reference to mutable.</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct FooBuilder&lt;'a&gt; {\n    bar: &amp;'a mut Rc&lt;Bar&gt;,\n}\nimpl&lt;'a&gt; FooBuilder&lt;'a&gt; {\n    fn new(bar: &amp;'a mut Rc&lt;Bar&gt;) -&gt; Self {\n        FooBuilder { bar: bar }\n    }\n    fn f(mut self) -&gt; Self {\n        Rc::get_mut(self.bar).unwrap().mut_method();\n        self\n    }\n    fn build(&amp;'a self) -&gt; Foo {\n        Foo { bar: self.bar.clone() }\n    }\n}\n\nstruct Foo {\n    bar: Rc&lt;Bar&gt;,\n}\n\nstruct Bar;\nimpl Bar {\n    fn bar(&amp;self) {}\n    fn mut_method(&amp;mut self) {}\n}\n\nfn main() {\n    let mut bar = Rc::new(Bar);\n    let foo = FooBuilder::new(&amp;mut bar).f().build();\n    bar.bar();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5c1ebf4f35ff694a0070426866512a2f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Play link</a></p>\n\n<p>Once the Foo has been constructed with an <code>Rc</code> clone, there is more than one reference and a later attempt to get a <code>mut</code> reference would panic (or at least return <code>None</code> from <code>Rc::get_mut()</code>).</p>\n\n<p>This means that you can only do this once; if you want a second <code>FooBuilder</code> to create a second <code>Foo</code> from the same <code>bar</code> it won't work, as you're not allowed any other references if you have an <code>&amp;mut T</code>.</p>\n\n<p>This is a little clumsy, though, and there are likely to be better ways of solving the actual problem, depending on the circumstances.</p>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1469793305, "post_id": 38658086, "comment_id": 64697255, "body": "I think you&#39;ve misunderstood the question; my understanding is that your last step - discarding <code>foo</code> before using <code>bar</code> - is against the OP&#39;s wishes. OP wants <code>foo</code> and <code>bar</code> to both be usable immutably together."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1469793594, "post_id": 38658086, "comment_id": 64697417, "body": "@Veedrac: That&#39;s not what I had gotten out of the question at all, but I now see how it could be read this way too. Let&#39;s see what the OP will think of this answer."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1469793731, "last_edit_date": 1469793731, "creation_date": 1469792945, "answer_id": 38658086, "question_id": 38642804, "link": "https://stackoverflow.com/questions/38642804/how-do-i-give-a-mutable-reference-to-a-builder-but-only-an-immutable-reference-t/38658086#38658086", "title": "How do I give a mutable reference to a builder but only an immutable reference to the built object?", "body": "<p>The first step is to fix <code>build</code>.</p>\n\n<p>In order to transform a <code>&amp;mut T</code> into a <code>&amp;T</code> you need to <em>consume</em> <code>&amp;mut T</code> (otherwise you would have aliasing and mutability). This means:</p>\n\n<ul>\n<li>consuming the builder, not taking a reference to it</li>\n<li>passing the mutable reference, not taking a reference to it</li>\n</ul>\n\n<p>In short, you go from:</p>\n\n<pre><code>fn build(&amp;'a self) -&gt; Foo&lt;'a&gt; {\n    Foo { bar: &amp;self.bar }\n}\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>fn build(self) -&gt; Foo&lt;'a&gt; {\n    Foo { bar: self.bar }\n}\n</code></pre>\n\n<p>This leaves you with a single error:</p>\n\n<pre><code>error: cannot borrow `bar` as immutable because it is also borrowed as mutable [--explain E0502]\n  --&gt; &lt;anon&gt;:25:5\n24 |&gt;     let foo = FooBuilder::new(&amp;mut bar).build();\n   |&gt;                                    --- mutable borrow occurs here\n25 |&gt;     bar.bar();\n   |&gt;     ^^^ immutable borrow occurs here\n26 |&gt;     //foo.bar.bar();\n27 |&gt; }\n   |&gt; - mutable borrow ends here\n</code></pre>\n\n<p>As far as the compiler can see from the method signatures, <code>bar</code> is borrowed mutably and therefore cannot be used directly. The borrow extends until <code>foo</code> is dropped.</p>\n\n<p>The fix is very simple: instead of using <code>bar</code> directly, use <code>bar</code> from its reference in <code>foo</code>. Or to make it clear that scope matters:</p>\n\n<pre><code>fn main() {\n    let mut bar = Bar;\n    {\n        let foo = FooBuilder::new(&amp;mut bar).build();\n        // `bar` currently borrow (mutably) by `foo`, cannot use it directly\n        foo.bar.bar();\n    }\n    // `bar` no longer borrowed, use at your heart's content\n    bar.bar();\n}\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 6650892, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a07aa37a26862791e81c8744b24a0d13?s=128&d=identicon&r=PG&f=1", "display_name": "yiwicup", "link": "https://stackoverflow.com/users/6650892/yiwicup"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 307, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1469793731, "creation_date": 1469726063, "last_edit_date": 1469732895, "question_id": 38642804, "link": "https://stackoverflow.com/questions/38642804/how-do-i-give-a-mutable-reference-to-a-builder-but-only-an-immutable-reference-t", "title": "How do I give a mutable reference to a builder but only an immutable reference to the built object?", "body": "<p>When constructing a <code>FooBuilder</code>, I want to provide a <code>&amp;mut Bar</code>. When I build <code>Foo</code> I want to provide a <code>&amp;Bar</code> and <code>Foo</code> should be able to invoke <code>&amp;self</code> methods from <code>Bar</code>. In other words, the mutable borrow should only during exist during the life of <code>FooBuilder</code>.</p>\n\n<pre><code>struct FooBuilder&lt;'a&gt; {\n    bar: &amp;'a mut Bar,\n}\nimpl&lt;'a&gt; FooBuilder&lt;'a&gt; {\n    fn new(bar: &amp;'a mut Bar) -&gt; Self {\n        FooBuilder { bar: bar }\n    }\n    fn build(&amp;'a self) -&gt; Foo&lt;'a&gt; {\n        Foo { bar: &amp;self.bar }\n    }\n}\n\nstruct Foo&lt;'a&gt; {\n    bar: &amp;'a Bar,\n}\n\nstruct Bar;\nimpl Bar {\n    fn bar(&amp;self) {}\n}\n\nfn main() {\n    let mut bar = Bar;\n    let foo = FooBuilder::new(&amp;mut bar).build();\n    bar.bar();\n}\n</code></pre>\n\n<p>This code has the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; &lt;anon&gt;:24:15\n   |\n24 |     let foo = FooBuilder::new(&amp;mut bar).build();\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long     enough\n   |\nnote: reference must be valid for the block suffix following     statement 1 at 24:48...\n  --&gt; &lt;anon&gt;:24:49\n   |\n24 |     let foo = FooBuilder::new(&amp;mut bar).build();\n   |                                                 ^\nnote: ...but borrowed value is only valid for the statement at 24:4\n  --&gt; &lt;anon&gt;:24:5\n   |\n24 |     let foo = FooBuilder::new(&amp;mut bar).build();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n  --&gt; &lt;anon&gt;:24:5\n   |\n24 |     let foo = FooBuilder::new(&amp;mut bar).build();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0502]: cannot borrow `bar` as immutable because it is also     borrowed as mutable\n  --&gt; &lt;anon&gt;:25:5\n   |\n24 |     let foo = FooBuilder::new(&amp;mut bar).build();\n   |                                    --- mutable borrow occurs     here\n25 |     bar.bar();\n   |     ^^^ immutable borrow occurs here\n26 | }\n   | - mutable borrow ends here\n\nerror: aborting due to 2 previous errors\n</code></pre>\n"}, {"tags": ["rust", "protocol-buffers"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1469729349, "post_id": 38642488, "comment_id": 64670628, "body": "I don&#39;t think you can. Essentially you are asking for reflection, which doesn&#39;t quite exist in the sense you need. As an example, consider the <code>#[test]</code> attribute, which basically does the same thing you want \u2014 it collects all the annotated functions and calls them. That is implemented as an addition to the compiler itself, not a technique available to most programmers. Instead, consider enhancing the file conversion tool to produce a well-known and required symbol that you can always trust to be there."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1993515"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1469729865, "post_id": 38642488, "comment_id": 64670908, "body": "What if I made it a requirement that there was a top level proto file that did an &quot;import &lt;other_proto_file_here&gt;.proto&quot; (in the actual .proto file) for all of the other proto files. If I did that, could I just include that top level .rs file (that would be compiled) and then use the method that returns a FileDescriptorProto to get the other proto structures? Maybe I don&#39;t fully understand how the FileDescriptorProto() method works..."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user1993515"}, "edited": false, "score": 0, "creation_date": 1469794249, "post_id": 38648191, "comment_id": 64697819, "body": "Well, I mean, I&#39;m already doing sort of that. My build script runs the protoc compiler against all the .proto files in a directory and creates a .rs file that has (mod foo; mod bar; etc... on seperate lines), which I then include in my main program.  The issue is that I don&#39;t know what modules will be included because the file names could be totally random, so I wouldn&#39;t know how to construct things, call implemented structure functions, etc."}], "tags": [], "owner": {"reputation": 138, "user_id": 1144858, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b3cba17cd5c6e976d2a58ff135587aec?s=128&d=identicon&r=PG", "display_name": "David Brown", "link": "https://stackoverflow.com/users/1144858/david-brown"}, "is_accepted": false, "score": 1, "last_activity_date": 1469747609, "creation_date": 1469747609, "answer_id": 38648191, "question_id": 38642488, "link": "https://stackoverflow.com/questions/38642488/how-to-determine-messages-in-rs-files-generated-from-rust-protobuf-included-by/38648191#38648191", "title": "How to determine messages in .rs files generated from rust-protobuf included by include! macro", "body": "<p>What about if you include a single file that is generated by the <code>build.rs</code> script.  This script can scan the given directory and generate the proper file.</p>\n\n<p>I do have an example I can link to, but it includes solutions to Project Euler solutions, so I'm not sure how people feel about that.</p>\n\n<p>Here is the <code>build.rs</code> that I use:</p>\n\n<pre><code>// Generate the problem list based on available modules.\n\nuse std::env;\nuse std::fs;\nuse std::io::prelude::*;\nuse std::fs::File;\nuse std::path::Path;\n\nuse regex::Regex;\n\nextern crate regex;\n\nfn main() {\n    let odir = env::var(\"OUT_DIR\").unwrap();\n    let cwd = env::current_dir().unwrap().to_str().unwrap().to_owned();\n    let dst = Path::new(&amp;odir);\n    let gen_name = dst.join(\"plist.rs\");\n    let mut f = File::create(&amp;gen_name).unwrap();\n    writeln!(&amp;mut f, \"// Auto-generated, do not edit.\").unwrap();\n    writeln!(&amp;mut f, \"\").unwrap();\n    writeln!(&amp;mut f, \"pub use super::Problem;\").unwrap();\n    writeln!(&amp;mut f, \"\").unwrap();\n\n    let problems = get_problems();\n\n    // Generate the inputs.\n    for &amp;p in problems.iter() {\n        writeln!(&amp;mut f, \"#[path=\\\"{1}/src/pr{0:03}.rs\\\"] mod pr{0:03};\", p, cwd).unwrap();\n    }\n    writeln!(&amp;mut f, \"\").unwrap();\n\n    // Make the problem set.\n    writeln!(&amp;mut f, \"pub fn make() -&gt; Vec&lt;Box&lt;Problem + 'static&gt;&gt; {{\").unwrap();\n    writeln!(&amp;mut f, \"    let mut probs = Vec::new();\").unwrap();\n    for &amp;p in problems.iter() {\n        writeln!(&amp;mut f, \"    add_problem!(probs, pr{:03}::Solution);\", p).unwrap();\n    }\n    writeln!(&amp;mut f, \"    probs\").unwrap();\n    writeln!(&amp;mut f, \"}}\").unwrap();\n\n    drop(f);\n}\n\n// Get all of the problems, based on standard filenames of \"src/prxxx.rs\" where xxx is the problem\n// number.  Returns the result, sorted.\nfn get_problems() -&gt; Vec&lt;u32&gt; {\n    let mut result = vec![];\n\n    let re = Regex::new(r\"^.*/pr(\\d\\d\\d)\\.rs$\").unwrap();\n    for entry in fs::read_dir(&amp;Path::new(\"src\")).unwrap() {\n        let entry = entry.unwrap();\n        let p = entry.path();\n        let n = p.as_os_str().to_str();\n        let name = match n {\n            Some(n) =&gt; n,\n            None =&gt; continue,\n        };\n        match re.captures(name) {\n            None =&gt; continue,\n            Some(cap) =&gt; {\n                let num: u32 = cap.at(1).unwrap().parse().unwrap();\n                result.push(num);\n            },\n        }\n    }\n\n    result.sort();\n    result\n}\n</code></pre>\n\n<p>Another source file under <code>src</code> then has the following:</p>\n\n<pre><code>include!(concat!(env!(\"OUT_DIR\"), \"/plist.rs\"));\n</code></pre>\n"}, {"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user1993515"}, "is_accepted": true, "score": 0, "last_activity_date": 1471439840, "creation_date": 1471439840, "answer_id": 38997804, "question_id": 38642488, "link": "https://stackoverflow.com/questions/38642488/how-to-determine-messages-in-rs-files-generated-from-rust-protobuf-included-by/38997804#38997804", "title": "How to determine messages in .rs files generated from rust-protobuf included by include! macro", "body": "<p>I have figured out a way to do this, based on @Shepmaster's suggestion in the comment on the original post: </p>\n\n<p>Since Rust doesn't support reflection (at the time of this post), I had to expand my cargo build script to write code in the file that is being generated to have symbols that I would know would always be there. </p>\n\n<p>I generated specific functions for each of the modules that I was including (since I had their module names at that point), and then generated \"aggregate\" functions that had generic names, that I could call back in my main code. </p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1993515"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 238, "favorite_count": 0, "accepted_answer_id": 38997804, "answer_count": 2, "score": 3, "last_activity_date": 1471439840, "creation_date": 1469724977, "last_edit_date": 1495535318, "question_id": 38642488, "link": "https://stackoverflow.com/questions/38642488/how-to-determine-messages-in-rs-files-generated-from-rust-protobuf-included-by", "title": "How to determine messages in .rs files generated from rust-protobuf included by include! macro", "body": "<p>I previously asked <a href=\"https://stackoverflow.com/questions/38504933/how-can-i-include-an-arbitrary-set-of-protobuf-built-files-without-knowing-their\">How can I include an arbitrary set of Protobuf-built files without knowing their names?</a> - this is a follow up question based on the results of that.</p>\n\n<p>I now have a file that I include that contains the different modules on their own line - i.e.:</p>\n\n<pre><code>mod foo;\nmod bar;\n</code></pre>\n\n<p>These modules and their names can be totally random depending on what the user has put in the directory for the proto files.</p>\n\n<p>I need to perform operations on those random modules. For instance, the first thing I would like to do is get all the messages that exist in those new modules and present them back as strings that I can push onto a vector.</p>\n\n<p>So really a 2 part question:</p>\n\n<ol>\n<li>Is there a way I can not know the names of the modules that I am now including in this file with include! and use the structures inside them (generically - now that I have them included). </li>\n<li>After the above, how to get all the possible messages inside a protobuf generated .rs file/module. Each .rs file has a <code>FileDescriptorProto()</code> method, which looking on the Google protobuf documentation, looks similar to this: <a href=\"https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.descriptor#FileDescriptor\" rel=\"nofollow noreferrer\">Google Protobuf FileDescriptor</a></li>\n</ol>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1469721960, "post_id": 38640858, "comment_id": 64666113, "body": "Is there any reason you can&#39;t just run <code>cargo watch build</code> and get the error message from that?"}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1469728429, "post_id": 38640858, "comment_id": 64670094, "body": "@Aurora0001 If you save faster than a build then you have to wait for the build to complete."}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 6, "last_activity_date": 1469729423, "last_edit_date": 1469729423, "creation_date": 1469726836, "answer_id": 38643019, "question_id": 38640858, "link": "https://stackoverflow.com/questions/38640858/is-it-possible-to-deactivate-file-locking-in-cargo/38643019#38643019", "title": "Is it possible to deactivate file locking in cargo?", "body": "<blockquote>\n  <p>I don't think that a file lock would be required for cargo check.</p>\n</blockquote>\n\n<p>I can think of in one reason: <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow\">build scripts</a>. A build script can generate files that are included in the crate, checking the crate without generating the files would probably produce errors. Running 2 instances of a build script in parallel is not a good idea (conflicting file writes, etc), so the locking is required.</p>\n\n<hr>\n\n<blockquote>\n  <p>I want to run the following commands side by side</p>\n</blockquote>\n\n<p>You have two options:</p>\n\n<ol>\n<li><p>Sequential: install <a href=\"https://crates.io/crates/cargo-do\" rel=\"nofollow\"><code>cargo-do</code></a> and run</p>\n\n<pre><code>cargo watch \"do check, build\"\n</code></pre></li>\n</ol>\n\n<p>this will first run <code>cargo check</code> and then <code>cargo build</code> (if <code>cargo check</code> did not find an error).</p>\n\n<ol start=\"2\">\n<li><p>Parallel: change the <a href=\"http://doc.crates.io/config.html#configuration-keys\" rel=\"nofollow\"><code>target-dir</code></a> for  one of the two cargo commands:</p>\n\n<pre><code>CARGO_TARGET_DIR=/tmp cargo watch check\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 877, "favorite_count": 0, "accepted_answer_id": 38643019, "answer_count": 1, "score": 5, "last_activity_date": 1469729423, "creation_date": 1469720104, "question_id": 38640858, "link": "https://stackoverflow.com/questions/38640858/is-it-possible-to-deactivate-file-locking-in-cargo", "title": "Is it possible to deactivate file locking in cargo?", "body": "<p>I want to run the following commands side by side</p>\n\n<pre><code>cargo watch \"check\"\n\ncargo watch \"build\"\n</code></pre>\n\n<p>I want to run <code>cargo watch build</code> in the background and use <code>cargo watch check</code> to look at the error messages.</p>\n\n<p>The problem is that <code>cargo watch check</code> always runs after <code>cargo watch build</code> and then also needs to wait on the file lock</p>\n\n<pre><code>cargo check\n    Blocking waiting for file lock on build directory\n</code></pre>\n\n<p>I don't think that a file lock would be required for cargo check. Is it possible to disable file locking in cargo?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1469716382, "post_id": 38628681, "comment_id": 64661878, "body": "What does 30MB mean? Is 30MB the total footprint of the cache + contained key/values? Or just the payload? How do you account for values which allocates? And what if some values share some parts such as with the FlyWeight pattern? Do you need to take into account the overhead from the under-use of allocated memory blocks? The overhead of the allocator data-structures? The fragmentation? The fact that the allocator itself caches memory pages before releasing them to the OS? =&gt; imagine the nightmare in creating a cache which attempts to be thorough in its memory accounting..."}], "answers": [{"tags": [], "owner": {"reputation": 3023, "user_id": 1691145, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/4b6744a17b41f3b0e5c7554a43a04094?s=128&d=identicon&r=PG", "display_name": "Justin Raymond", "link": "https://stackoverflow.com/users/1691145/justin-raymond"}, "is_accepted": true, "score": 2, "last_activity_date": 1469709103, "last_edit_date": 1469709103, "creation_date": 1469705052, "answer_id": 38634958, "question_id": 38628681, "link": "https://stackoverflow.com/questions/38628681/rust-ram-limited-lru-cache/38634958#38634958", "title": "Rust RAM limited LRU cache?", "body": "<p><code>fn set_capacity(&amp;mut self, capacity: usize)</code> sets the number of key value pairs the cache can hold. So if you wanted to limit it to 30MB then you would need to calculate the size of the key/value pair, and divide 30MB by the size of the key/value pair to get the capacity you should set the LRU cache to.</p>\n"}], "owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 386, "favorite_count": 0, "closed_date": 1470137710, "accepted_answer_id": 38634958, "answer_count": 1, "score": -2, "last_activity_date": 1469709103, "creation_date": 1469687572, "last_edit_date": 1469709083, "question_id": 38628681, "link": "https://stackoverflow.com/questions/38628681/rust-ram-limited-lru-cache", "closed_reason": "Not suitable for this site", "title": "Rust RAM limited LRU cache?", "body": "<p>Is there a RAM limited LRU cache for Rust? I want to specify a 30 MB limit and when it goes over the limit it starts deleting the LRU entries.</p>\n\n<p>I can find the <a href=\"http://contain-rs.github.io/lru-cache/lru_cache/\" rel=\"nofollow\">number of entries limited</a>.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1469684656, "post_id": 38626644, "comment_id": 64640284, "body": "This gets doubly confusing with associated types.You have to bind &lt;T as Trait&gt;::Associated: &#39;a <i>even if</i> you already bound T&#39;s lifetime, which doesn&#39;t really make sense to me."}], "answers": [{"comments": [{"owner": {"reputation": 137, "user_id": 6472567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a673e0546f4d934abb47ca4278ba3816?s=128&d=identicon&r=PG&f=1", "display_name": "Novus", "link": "https://stackoverflow.com/users/6472567/novus"}, "edited": false, "score": 0, "creation_date": 1469708329, "post_id": 38631666, "comment_id": 64655257, "body": "I agree that being explicit is never a bad thing. I always ask the question of &quot;does the source outlive the destination&quot; and with that frame of mind it is hard to write your example because I knew implicitly the compiler would reject it. Thanks for the simple yet clarifying example."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 8, "last_activity_date": 1469696499, "creation_date": 1469696499, "answer_id": 38631666, "question_id": 38626644, "link": "https://stackoverflow.com/questions/38626644/why-does-the-rust-compiler-request-i-constrain-a-generic-type-parameters-lifeti/38631666#38631666", "title": "Why does the Rust compiler request I constrain a generic type parameter&#39;s lifetime (error E0309)?", "body": "<p>What <code>T: 'a</code> is saying is that any references in <code>T</code> must outlive <code>'a</code>.</p>\n\n<p>What this means is that you can't do something like:</p>\n\n<pre><code>let mut o: Option&lt;&amp;str&gt; = Some(\"foo\");\nlet mut nt = NewType { x: &amp;o };  // o has a reference to &amp;'static str, ok.\n\n{\n    let s = \"bar\".to_string();\n    let o2: Option&lt;&amp;str&gt; = Some(&amp;s);\n    nt.x = &amp;o2;\n}\n</code></pre>\n\n<p>This would be dangerous because <code>nt</code> would have a dangling reference to <code>s</code> after the block.  In this case it would <em>also</em> complain that <code>o2</code> didn't live long enough either.</p>\n\n<p>I can't think of a way you can have a <code>&amp;'a</code> reference to something which contains shorter-lifetime references, and clearly the compiler <em>knows</em> this in some way (because it's telling you to add the constraint).  However I think it's helpful in some ways to spell out the restriction, since it makes the borrow checker less magic: you can reason about it just from just type declarations and function signatures, without having to look at how the fields are defined (often implementation details which aren't in documentation) or how the implementation of a function.</p>\n"}], "owner": {"reputation": 137, "user_id": 6472567, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a673e0546f4d934abb47ca4278ba3816?s=128&d=identicon&r=PG&f=1", "display_name": "Novus", "link": "https://stackoverflow.com/users/6472567/novus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 693, "favorite_count": 4, "accepted_answer_id": 38631666, "answer_count": 1, "score": 5, "last_activity_date": 1507656876, "creation_date": 1469676837, "last_edit_date": 1507656876, "question_id": 38626644, "link": "https://stackoverflow.com/questions/38626644/why-does-the-rust-compiler-request-i-constrain-a-generic-type-parameters-lifeti", "title": "Why does the Rust compiler request I constrain a generic type parameter&#39;s lifetime (error E0309)?", "body": "<p>Why does the Rust compiler emit an error requesting me to constrain the lifetime of the generic parameter in the following structure?</p>\n\n<pre><code>pub struct NewType&lt;'a, T&gt; {\n    x: &amp;'a T,\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0309]: the parameter type `T` may not live long enough\n --&gt; src/main.rs:2:5\n  |\n2 |     x: &amp;'a T,\n  |     ^^^^^^^^\n  |\n  = help: consider adding an explicit lifetime bound `T: 'a`...\nnote: ...so that the reference type `&amp;'a T` does not outlive the data it points at\n --&gt; src/main.rs:2:5\n  |\n2 |     x: &amp;'a T,\n  |     ^^^^^^^^\n</code></pre>\n\n<p>I can fix it by changing to</p>\n\n<pre><code>pub struct NewType&lt;'a, T&gt;\nwhere\n    T: 'a,\n{\n    x: &amp;'a T,\n}\n</code></pre>\n\n<p>I don't understand why it is necessary to add the <code>T: 'a</code> part to the structure definition. I cannot think of a way that the data contained in <code>T</code> could outlive the reference to <code>T</code>. The referent of <code>x</code> needs to outlive the <code>NewType</code> struct and if <code>T</code> is another structure then it would need to meet the same criteria for any references it contains as well.</p>\n\n<p>Is there a specific example where this type of annotation would be necessary or is the Rust compiler just being pedantic?</p>\n"}]