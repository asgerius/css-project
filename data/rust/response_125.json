[{"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496250452, "post_id": 44290099, "comment_id": 75588167, "body": "See also <a href=\"https://stackoverflow.com/q/39250335/155423\">How do I use the Rust memory allocator for a C library that can be provided an allocator?</a>"}], "owner": {"reputation": 2863, "user_id": 342618, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/330dbf6ab22dd51d11c77ffc300ae918?s=128&d=identicon&r=PG", "display_name": "ChrisD", "link": "https://stackoverflow.com/users/342618/chrisd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 25, "favorite_count": 0, "closed_date": 1496250356, "answer_count": 0, "score": 1, "last_activity_date": 1496250263, "creation_date": 1496248021, "last_edit_date": 1496250263, "question_id": 44290099, "link": "https://stackoverflow.com/questions/44290099/how-to-dynamically-allocate-an-opaque-ffi-type", "closed_reason": "Duplicate", "title": "How to dynamically allocate an opaque FFI type?", "body": "<p>I'm using a dynamically loaded C library that requires me to allocate and manage memory at runtime for opaque objects (i.e. structures that my program only accesses indirectly). Currently I'm using code that looks similar to this, where <code>GetObjectSize</code> and <code>InitalizeObject</code> are foreign functions:</p>\n\n<pre><code>unsafe {\n    // Ask the library for the size.\n    let mut size: usize = 0;\n    let mut success = GetObjectSize(&amp;mut size);\n    if success &amp;&amp; size &gt; 0 {\n        // allocate and zero fill the memory, using a Vec.\n        let mut ffi_obj = vec![0u8; size];\n        // pass ffi_obj to the C library.\n        success = InitalizeObject(ffi_obj.as_ptr(), &amp;size);\n        // ...etc, etc.\n</code></pre>\n\n<p>Presumably I should be wrapping the <code>Vec</code> in a struct so that it has a less generic type? I'm not sure <code>Vec</code> is right in the first place as I'd always want a fixed size which makes having a separate length and capacity redundant.</p>\n\n<p>So what's the preferred way to manage the memory?</p>\n"}, {"tags": ["struct", "enums", "casting", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1496250747, "post_id": 44290237, "comment_id": 75588355, "body": "You should definitely <code>#[derive(Copy, Clone)]</code> for <code>Foo</code>. Since it can only ever be a pure integer, there&#39;s no reason to not copy them."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 5, "last_activity_date": 1496248794, "last_edit_date": 1496248794, "creation_date": 1496248494, "answer_id": 44290237, "question_id": 44289831, "link": "https://stackoverflow.com/questions/44289831/how-to-cast-an-enum-that-is-a-field-inside-a-struct/44290237#44290237", "title": "How to cast an enum that is a field inside a struct?", "body": "<p>I couldn't find any information about it in the official sources, but it appears that <code>as</code> casts have move semantics, i.e. they consume the cast object; consider this shortened case:</p>\n\n<pre><code>#[derive(Debug)]\nenum Foo {\n    Foo1 = 1\n}\n\nfn main() {\n    let foo = Foo::Foo1;\n    let bar = foo as u8; // the cast moves foo\n\n    println!(\"{:?}\", bar); // ok\n    println!(\"{:?}\", foo); // error[E0382]: use of moved value: `foo`\n}\n</code></pre>\n\n<p>In your case you were mutably borrowing <code>self</code>, so it couldn't be consumed (i.e. moved); if you changed the signature to <code>bar(self)</code> or made <code>Foo</code> copyable by deriving <code>Clone</code> and <code>Copy</code>, it would work.</p>\n"}], "owner": {"reputation": 143, "user_id": 3004044, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/ebbc1508206c1371381de32348e13982?s=128&d=identicon&r=PG&f=1", "display_name": "Robbsen", "link": "https://stackoverflow.com/users/3004044/robbsen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 186, "favorite_count": 0, "accepted_answer_id": 44290237, "answer_count": 1, "score": 2, "last_activity_date": 1496251773, "creation_date": 1496247284, "last_edit_date": 1496251773, "question_id": 44289831, "link": "https://stackoverflow.com/questions/44289831/how-to-cast-an-enum-that-is-a-field-inside-a-struct", "title": "How to cast an enum that is a field inside a struct?", "body": "<p>Why does casting move <code>self</code> out of borrowed content?</p>\n\n<pre><code>#[derive(Debug)]\nenum Foo {\n    One = 1,\n    Two = 2,\n}\n\nstruct Bar {\n    f: Foo,\n}\n\nimpl Bar {\n    fn bar(&amp;mut self) {\n        println!(\"{:?}\", self.f); // \"Two\"\n        println!(\"{:?}\", Foo::Two as u8); // \"2\"\n        println!(\"{:?}\", self.f as u8); // error\n    }\n}\n\nfn main() {\n    Bar{f: Foo::Two}.bar();\n}\n</code></pre>\n\n<p>Throws this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:15:26\n   |\n15 |         println!(\"{:?}\", self.f as u8); // error\n   |                          ^^^^ cannot move out of borrowed content\n</code></pre>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1496209926, "post_id": 44276059, "comment_id": 75560405, "body": "It seems that documentation wasn&#39;t updated. In latest nightly <code>Unique&lt;T&gt;</code> doesn&#39;t implement <code>Deref&lt;Target=*mut T&gt;</code>. You can use <code>*a.as_ptr().offset(2)</code> instead. <code>Unique</code> isn&#39;t stable yet, so changes are to be expected."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1496211134, "post_id": 44276059, "comment_id": 75561015, "body": "The latest nightly doc can be found in <a href=\"https://doc.rust-lang.org/nightly/std/ptr/struct.Unique.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/ptr/struct.Unique.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 4, "last_activity_date": 1496233315, "last_edit_date": 1496233315, "creation_date": 1496211752, "answer_id": 44277135, "question_id": 44276059, "link": "https://stackoverflow.com/questions/44276059/stdptrunique-has-no-method-named-offset/44277135#44277135", "title": "std::ptr::Unique has no method named offset", "body": "<p>You are reading outdated docs compared to the code you are using. The most up-to-date nightly APIs can be found at <a href=\"https://doc.rust-lang.org/nightly/std/ptr/struct.Unique.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/<strong>nightly</strong>/std/ptr/struct.Unique.html</a>.</p>\n\n<p>Previously, <code>Unique</code> got the <code>.offset()</code> method via the <code>Deref</code> trait to <code>*mut T</code>. This <code>Deref</code> impl was removed on <a href=\"https://github.com/rust-lang/rust/pull/41064\" rel=\"nofollow noreferrer\">2017 May 6th</a> because</p>\n\n<blockquote>\n  <p>Major difference is that I removed <code>Deref</code> impls, as apparently <strong>LLVM has trouble maintaining metadata with a <code>&amp;ptr -&gt; &amp;ptr</code> API</strong>. This was cited as a blocker for ever stabilizing this API. It wasn't that ergonomic anyway.</p>\n</blockquote>\n\n<p>Nowadays to get the <code>*mut T</code>, you call <a href=\"https://doc.rust-lang.org/nightly/std/ptr/struct.Unique.html#method.as_ptr\" rel=\"nofollow noreferrer\"><code>.as_ptr()</code></a>. This is a value-to-value, not reference-to-reference function, thus works around the LLVM issue.</p>\n\n<pre><code>println!(\"{}\", *a.as_ptr().offset(2));\n//                ^~~~~~~~\n</code></pre>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 44277135, "answer_count": 1, "score": 2, "last_activity_date": 1496233385, "creation_date": 1496206995, "last_edit_date": 1496233385, "question_id": 44276059, "link": "https://stackoverflow.com/questions/44276059/stdptrunique-has-no-method-named-offset", "title": "std::ptr::Unique has no method named offset", "body": "<p>When I try to compile the following code using the nightly compiler, I get an error:</p>\n\n<pre><code>#![feature(alloc)]\n#![feature(unique)]\n#![feature(heap_api)]\nextern crate alloc;\n\nuse std::ptr::{Unique, self};\nuse alloc::heap;\nuse std::mem;\n\nfn main() {\n    unsafe {\n        let align = mem::align_of::&lt;i32&gt;();\n        let elem_size = mem::size_of::&lt;i32&gt;();\n        let ptr = heap::allocate(elem_size*5, align);\n        let a = Unique::new(ptr as *mut _);\n        println!(\"{}\", *a.offset(2));\n    }\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.19.0-nightly (5de00925b 2017-05-29)\nerror: no method named `offset` found for type `std::ptr::Unique&lt;_&gt;` in the current scope\n  --&gt; &lt;anon&gt;:16:27\n   |\n16 |         println!(\"{}\", *a.offset(2));\n   |                           ^^^^^^\n</code></pre>\n\n<p>According to the <a href=\"https://doc.rust-lang.org/std/ptr/struct.Unique.html#method.offset\" rel=\"nofollow noreferrer\">docs</a>, <code>offset</code> should be defined for <code>Unique</code>. What am I doing wrong?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 17, "last_activity_date": 1496126993, "creation_date": 1496126993, "answer_id": 44255379, "question_id": 44254995, "link": "https://stackoverflow.com/questions/44254995/are-there-any-performance-advantages-in-using-unreachable-vs-panic/44255379#44255379", "title": "Are there any performance advantages in using `unreachable!` vs `panic!`?", "body": "<p>Yes the <a href=\"https://doc.rust-lang.org/std/macro.unreachable.html\" rel=\"noreferrer\"><code>unreachable!</code> macro</a> (and <a href=\"https://doc.rust-lang.org/std/macro.unimplemented.html\" rel=\"noreferrer\"><code>unimplemented!</code></a> too) are purely for clarity. They are <a href=\"https://github.com/rust-lang/rust/blob/77d096a2bb3f914f33a5daf10bfe855d0011e57e/src/libcore/macros.rs#L481-L493\" rel=\"noreferrer\">implemented</a> to directly forward to <code>panic!</code>.</p>\n\n<pre><code>#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nmacro_rules! unreachable {\n    () =&gt; ({\n        panic!(\"internal error: entered unreachable code\")\n    });\n    ($msg:expr) =&gt; ({\n        unreachable!(\"{}\", $msg)\n    });\n    ($fmt:expr, $($arg:tt)*) =&gt; ({\n        panic!(concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n    });\n}\n\n#[macro_export]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nmacro_rules! unimplemented {\n    () =&gt; (panic!(\"not yet implemented\"))\n}\n</code></pre>\n\n<p>Not to be confused with the <a href=\"https://doc.rust-lang.org/std/intrinsics/fn.unreachable.html\" rel=\"noreferrer\"><code>unreachable</code> <em>intrinsic</em></a> (accessible in stable Rust via the <a href=\"https://docs.rs/crate/unreachable\" rel=\"noreferrer\"><code>unreachable</code></a> or <a href=\"https://docs.rs/crate/debug_unreachable\" rel=\"noreferrer\"><code>debug_unreachable</code></a> crates), which unsafely asserts a branch is totally unreachable. This allows the branch to be completely removed when optimizing. It could lead to undefined behavior if the assertion turns out to be wrong, compared with <code>unreachable!()</code> which only panics. </p>\n"}], "owner": {"reputation": 1457, "user_id": 2849934, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3ff0a46f18c8d548fa91c12b922290b6?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/2849934/john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1620, "favorite_count": 0, "accepted_answer_id": 44255379, "answer_count": 1, "score": 13, "last_activity_date": 1496147646, "creation_date": 1496125709, "last_edit_date": 1496147646, "question_id": 44254995, "link": "https://stackoverflow.com/questions/44254995/are-there-any-performance-advantages-in-using-unreachable-vs-panic", "title": "Are there any performance advantages in using `unreachable!` vs `panic!`?", "body": "<p>Is the existence of <code>unreachable!</code> macro purely for the sake of clarity when reading code, or does it provide any functional advantages?</p>\n"}, {"tags": ["rust", "gtk-rs"], "comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 3, "creation_date": 1496091585, "post_id": 44249803, "comment_id": 75508887, "body": "Just a guess, but you might want <code>String</code> instead of <code>str</code>. You can convert <code>str</code> to <code>String</code> with <code>&quot;example&quot;.to_string()</code>."}, {"owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1496169113, "post_id": 44249803, "comment_id": 75546933, "body": "I managed to find an example which is doing <code>list_model.insert_with_values(None, &amp;[0], &amp;[&amp;(&quot;S&quot;.to_value()) as &amp;ToValue]);</code>"}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1496178288, "post_id": 44249803, "comment_id": 75551778, "body": "You should add that as an answer!"}], "answers": [{"comments": [{"owner": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 0, "creation_date": 1507225299, "post_id": 44317779, "comment_id": 80136526, "body": "<code>this function takes 4 parameters but 3 parameters were supplied (expected 4 parameters) [E0061] [4 times]</code> at the <code>None</code>s"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 1, "creation_date": 1507250193, "post_id": 44317779, "comment_id": 80146004, "body": "@Zelphir: You&#39;re probably using a <code>TreeStore</code> instead of a <code>ListStore</code>. The former also needs a parent to be specified, which can be <code>None</code>."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 1, "last_activity_date": 1496354462, "creation_date": 1496354462, "answer_id": 44317779, "question_id": 44249803, "link": "https://stackoverflow.com/questions/44249803/how-do-we-convert-a-rust-string-to-a-gtktypestring/44317779#44317779", "title": "How do we convert a Rust string to a gtk::type::String?", "body": "<p>You want to use the following, instead:</p>\n\n<pre><code>let type_in_col = &amp;[gtk::Type::String];\nlet list_model = ListStore::new(type_in_col);\nlist_model.insert_with_values(None, &amp;[0], &amp;[&amp;\"\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[&amp;\"h\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[&amp;\"H\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[&amp;\"W\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[&amp;\"S\"]);\n</code></pre>\n\n<p>since <code>SetValue</code> is implemented for <code>&amp;T where T: ?Sized</code>.</p>\n\n<p>You cannot cast from <code>&amp;str</code> to <code>&amp;ToValue</code>: see <a href=\"https://stackoverflow.com/questions/41604107/rust-trait-object-conversion\">here</a> for the reasons.</p>\n"}], "owner": {"reputation": 5143, "user_id": 600351, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/7a2a3b9fd62972fa271deb3d0e31256c?s=128&d=identicon&r=PG", "display_name": "Geob-o-matic", "link": "https://stackoverflow.com/users/600351/geob-o-matic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 222, "favorite_count": 0, "accepted_answer_id": 44317779, "answer_count": 1, "score": 1, "last_activity_date": 1496354462, "creation_date": 1496088967, "last_edit_date": 1496101510, "question_id": 44249803, "link": "https://stackoverflow.com/questions/44249803/how-do-we-convert-a-rust-string-to-a-gtktypestring", "title": "How do we convert a Rust string to a gtk::type::String?", "body": "<p>I'm trying to create a <code>ComboBox</code>, especially the model for it:</p>\n\n<pre><code>let type_in_col = &amp;[gtk::Type::String];\nlet list_model = ListStore::new(type_in_col);\nlist_model.insert_with_values(None, &amp;[0], &amp;[\"\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[\"h\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[\"H\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[\"W\"]);\nlist_model.insert_with_values(None, &amp;[0], &amp;[\"S\"]);\n</code></pre>\n\n<p>This piece of code gave me this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `str: std::marker::Sized` is not satisfied\n--&gt; src\\widgets\\daywidget.rs:36:1\n   |\n36 | #[widget]\n   | ^^^^^^^^^ `str` does not have a constant size known at compile-time\n   |\n= help: the trait `std::marker::Sized` is not implemented for `str`\n= note: required for the cast to the object type `gtk::ToValue`\n</code></pre>\n\n<p>(the error is not very precise because I'm using Relm)</p>\n"}, {"tags": ["import", "module", "rust"], "answers": [{"comments": [{"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "edited": false, "score": 0, "creation_date": 1496206817, "post_id": 44250201, "comment_id": 75559183, "body": "I believe this is addressing a different issue. My problem seems to be solved when I re-arrange the import order. If I import heap first, then Unique, then mem it works fine."}], "tags": [], "owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "is_accepted": false, "score": 3, "last_activity_date": 1496124529, "last_edit_date": 1496124529, "creation_date": 1496091421, "answer_id": 44250201, "question_id": 44249423, "link": "https://stackoverflow.com/questions/44249423/use-of-undeclared-unstable-module-when-module-is-imported-and-a-cfg-attribute-is/44250201#44250201", "title": "Use of undeclared unstable module when module is imported and a cfg attribute is used", "body": "<p>Let's deconstruct your <code>cfg</code> instruction:</p>\n\n<pre><code>#[cfg(all(feature = \"unstable\", unique))]\n</code></pre>\n\n<p>This is an <code>outer</code> attribute, meaning it is outside the item it will change, and will apply to the next item. With the <code>cfg</code> attribute, it means \"if the feature inside the parenthesis is enabled, do the next block\", and <code>all</code> is a AND between the features. So you have something like \"if features unstable and unique are enabled, do the next statement.</p>\n\n<p><a href=\"https://doc.rust-lang.org/book/attributes.html\" rel=\"nofollow noreferrer\">Attributes</a>! What you want is to have the <code>inner</code> attribute <code>feature(unique)</code> conditionally if you have set the feature <code>unstable</code> on the command line. A conditional attribute can be obtained with <a href=\"https://doc.rust-lang.org/book/conditional-compilation.html#cfg_attr\" rel=\"nofollow noreferrer\"><code>cfg_attr</code></a>.</p>\n\n<pre><code>#![cfg_attr(feature = \"unstable\", feature(unique))]\n</code></pre>\n\n<p>This can be read as if feature <code>unstable</code> is enabled, then enable the inner <code>feature(unique)</code>. Then you will be able to use <code>std::ptr::Unique</code>.</p>\n\n<p>You should also add a <code>#[cfg(feature = \"unstable\")]</code> before the <code>use</code> and your <code>struct</code>, so that they won't be usable if the feature is not enabled.</p>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1537463076, "creation_date": 1496086620, "last_edit_date": 1537463076, "question_id": 44249423, "link": "https://stackoverflow.com/questions/44249423/use-of-undeclared-unstable-module-when-module-is-imported-and-a-cfg-attribute-is", "title": "Use of undeclared unstable module when module is imported and a cfg attribute is used", "body": "<p>I have the below code:</p>\n\n<pre><code>#[cfg(all(feature = \"unstable\", unique))]\n#[cfg(all(feature = \"unstable\", heap_api))]\n#[cfg(all(feature = \"unstable\", alloc))]\n\nuse std::ptr::Unique;\nuse std::mem;\nuse alloc::heap;\n\npub struct Foo&lt;T&gt; {\n    arr: Unique&lt;T&gt;,\n    cap: usize,\n    probe_limit: usize,\n}\n</code></pre>\n\n<p>However, when I try to compile it with <code>cargo build --features \"unstable\"</code> I get a compilation error. Note that I am using the nightly build of Rust and the unstable feature is set up correctly (otherwise I would get a different error).</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0412]: cannot find type `Unique` in this scope\n  --&gt; src/hash/arr.rs:27:8\n   |\n27 |   arr: Unique&lt;T&gt;,\n   |        ^^^^^^ not found in this scope\n   |\nhelp: possible candidate is found in another module, you can import it into scope\n   | use std::ptr::Unique;\n</code></pre>\n\n<p>I'm not sure why <code>Unique</code> is not found. I am should be using it at the top of my file. <code>use ::std::ptr::Unique</code> does not work.</p>\n"}, {"tags": ["syntax", "rust", "traits", "type-alias"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1496075052, "post_id": 44246787, "comment_id": 75502202, "body": "Yes, I read about about this RFC before ask question, question is what to do now, with current stable/beta compiler. Hacks/tricks/macroses"}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 8, "last_activity_date": 1496323736, "last_edit_date": 1496323736, "creation_date": 1496074692, "answer_id": 44246787, "question_id": 44246722, "link": "https://stackoverflow.com/questions/44246722/is-there-any-way-to-create-an-alias-of-a-specific-fnmut/44246787#44246787", "title": "Is there any way to create an alias of a specific FnMut?", "body": "<p>Trait aliases are not currently part of the language. However, there is an <a href=\"https://github.com/rust-lang/rfcs/pull/1733\" rel=\"nofollow noreferrer\">accepted RFC</a> for exactly that. It's hard to predict exactly when it will be implemented, but accepting the RFC represents a commitment to implement it at some point in the future.</p>\n\n<p>The reason for your error is that your <code>Boo</code> trait is a subtype of <code>FnMut</code> and any implementation must also provide the required associated type <code>Output</code>. But the compiler still doesn't know which implementation will be provided, so you need to tell it what the type of <code>Output</code> will be:</p>\n\n<pre><code>struct X(Vec&lt;Box&lt;Boo&lt;Output = f32&gt;&gt;&gt;);\n</code></pre>\n\n<p>This is a little clunky, and I feel like it's an area for improvement. Intuitively, it seems that <code>Output</code> could be inferred from <code>-&gt; f32</code>, but I could be wrong here.</p>\n\n<p>Even with that error fixed, <code>Boo</code> is strictly a subtype of <code>FnMut(&amp;[f32])</code> so you can't just provide any closure where <code>Boo</code> is expected. That closure must also implement your trait. You can do this as a blanket implementation for all <code>FnMut(&amp;[f32]) -&gt; f32</code>, like this:</p>\n\n<pre><code>impl &lt;F&gt; Boo for F where F: FnMut(&amp;[f32]) -&gt; f32 {}\n</code></pre>\n\n<p>Now any <code>Boo</code> is an <code>FnMut(&amp;[f32]) -&gt; f32</code> (by subtyping), and any <code>FnMut(&amp;[f32]) -&gt; f32</code> is a <code>Boo</code> (by the blanket implementation).</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 530, "favorite_count": 0, "accepted_answer_id": 44246787, "answer_count": 1, "score": 7, "last_activity_date": 1545398892, "creation_date": 1496074446, "last_edit_date": 1545398892, "question_id": 44246722, "link": "https://stackoverflow.com/questions/44246722/is-there-any-way-to-create-an-alias-of-a-specific-fnmut", "title": "Is there any way to create an alias of a specific FnMut?", "body": "<p>I want to work with <code>FnMut(&amp;[f32]) -&gt; f32</code>,\nto not copy/paste full signature, I want to introduce some kind of alias, but</p>\n\n<pre><code>type Boo = FnMut(&amp;[f32]) -&gt; f32;\n\nfn f&lt;F: Boo&gt;(mut f: F) {}\n</code></pre>\n\n<p>Causes a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0404]: expected trait, found type alias `Boo`\n --&gt; src/main.rs:3:13\n  |\n3 |     fn f&lt;F: Boo&gt;(mut f: F) {}\n  |             ^^^ type aliases cannot be used for traits\n</code></pre>\n\n<p>I then tried:</p>\n\n<pre><code>trait Boo: FnMut(&amp;[f32]) -&gt; f32 {}\n\nfn f&lt;F: Boo&gt;(mut f: F) {}\n</code></pre>\n\n<p>it compiled, but if I try to use <code>Boo</code> in place of trait in another place:</p>\n\n<pre><code>trait Boo: FnMut(&amp;[f32]) -&gt; f32 {}\n\nstruct X(Vec&lt;Box&lt;Boo&gt;&gt;);\n</code></pre>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0191]: the value of the associated type `Output` (from the trait `std::ops::FnOnce`) must be specified\n --&gt; src/main.rs:3:18\n  |\n3 | struct X(Vec&lt;Box&lt;Boo&gt;&gt;);\n  |                  ^^^ missing associated type `Output` value\n</code></pre>\n\n<p>Is there any way to create an alias of a specific <code>FnMut</code> which I can use \ninstead of <code>FnMut(&amp;[f32]) -&gt; f32</code>?</p>\n"}, {"tags": ["rust", "syntax-error"], "answers": [{"comments": [{"owner": {"reputation": 1119, "user_id": 11714860, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/e6Xo3.png?s=128&g=1", "display_name": "Sapphire_Brick", "link": "https://stackoverflow.com/users/11714860/sapphire-brick"}, "edited": false, "score": 0, "creation_date": 1597804952, "post_id": 44246529, "comment_id": 112250673, "body": "Neither C++ nor C# have that ambiguity, because their syntax for type casting is  <code>(DATA_TYPE) EXPRESSION</code> rather than<code>EXPRESSION as DATA_TYPE</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1119, "user_id": 11714860, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/e6Xo3.png?s=128&g=1", "display_name": "Sapphire_Brick", "link": "https://stackoverflow.com/users/11714860/sapphire-brick"}, "edited": false, "score": 0, "creation_date": 1597837518, "post_id": 44246529, "comment_id": 112262407, "body": "@Sapphire_Brick Sure, the syntax for casting avoids the issue. On the other hand, C and C++ require keeping track of symbol tables for other constructs, and C# does token lookahead to clear up any eventual ambiguity (more info <a href=\"https://github.com/rust-lang/rust/issues/22644#issuecomment-75466424\" rel=\"nofollow noreferrer\">here</a>). I have updated the answer nevertheless."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 15, "last_activity_date": 1597829920, "last_edit_date": 1597829920, "creation_date": 1496073663, "answer_id": 44246529, "question_id": 44246528, "link": "https://stackoverflow.com/questions/44246528/why-cant-the-compiler-parse-a-as-u32-b-or-similar/44246529#44246529", "title": "Why can&#39;t the compiler parse &quot;a as u32 &lt; b&quot; or similar?", "body": "<p><strong>Note:</strong> The latest Rust compilers now provide a more useful error message (<a href=\"https://github.com/rust-lang/rust/pull/42578\" rel=\"nofollow noreferrer\">#42578</a>):</p>\n<pre class=\"lang-none prettyprint-override\"><code>error: `&lt;` is interpreted as a start of generic arguments for `u32`, not a comparison\n --&gt; src/main.rs:6:22\n  |\n6 |     let c = a as u32 &lt; b;\n  |             -------- ^ -- interpreted as generic arguments\n  |             |        |\n  |             |        not interpreted as comparison\n  |             help: try comparing the casted value: `(a as u32)`\n</code></pre>\n<hr />\n<p>This is a known compiler issue (<a href=\"https://github.com/rust-lang/rust/issues/22644\" rel=\"nofollow noreferrer\">#22644</a>). Simply put, since a type (<code>u32</code>) was followed by <code>&lt;</code>, the compiler attempted to parse <code>&lt;</code> as the beginning of a type parameter list.  Hence, the compiler was expecting something like <code>u32 &lt; b &gt;</code>, which would be syntactically valid, even though it doesn't make sense. However, an example that makes perfectly valid Rust is <code>foo as Rc &lt; fmt::Debug &gt;</code>, and if the syntax was too eager to make <code>&lt;</code> the less-than operator, this one would fail just the same.</p>\n<p>Of course, technically there are ways around it: C++ and C# have had the same ambiguity from the beginning, they just happen to have a combination of means to disambiguate these cases:</p>\n<ul>\n<li>different syntax;</li>\n<li>symbol tables at the parser level;</li>\n<li>or some form of look-ahead.</li>\n</ul>\n<p>Any of these will either have implications in the complexity of the parser or in the complexity of the language's syntax definition. The inclusion of those mechanisms in Rust could lead to breaking changes in the syntax (or probably just the rustc syntax crate).</p>\n<p>As there is currently no active discussion to address this issue, a fairly simple and long-term solution is to wrap the cast around parentheses:</p>\n<pre><code>let c = (a as u32) &lt; b;\n</code></pre>\n"}], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 412, "favorite_count": 0, "accepted_answer_id": 44246529, "answer_count": 1, "score": 8, "last_activity_date": 1597829920, "creation_date": 1496073663, "last_edit_date": 1516879861, "question_id": 44246528, "link": "https://stackoverflow.com/questions/44246528/why-cant-the-compiler-parse-a-as-u32-b-or-similar", "title": "Why can&#39;t the compiler parse &quot;a as u32 &lt; b&quot; or similar?", "body": "<p>The following code appears to be trivial and unambiguous (<a href=\"http://play.integer32.com/?gist=3c2b3f0a0d51d5c06eaf9f2320983ffd&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>let a: u16 = 5;\nlet b: u32 = 10;\n\nlet c = a as u32 &lt; b;\n</code></pre>\n\n<p>Yet the compiler (as of 2017-05-30) fails with a syntax error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `!`, `(`, `+`, `,`, `::`, `&lt;`, or `&gt;`, found `;`\n --&gt; src/main.rs:6:25\n  |\n6 |     let c = a as u32 &lt; b;\n  |        \n</code></pre>\n\n<p>What is wrong with the compiler?</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496147874, "post_id": 44245753, "comment_id": 75532883, "body": "I think I must be missing something \u2014 isn&#39;t your variable <code>handshake</code> the &quot;key&quot; you are looking for? Add it&#39;s already being returned from this function, so you just... <i>use</i> it?"}, {"owner": {"reputation": 449, "user_id": 878298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d5910505de191043ea9aa614073ae05?s=128&d=identicon&r=PG", "display_name": "Sergey Mitskevich", "link": "https://stackoverflow.com/users/878298/sergey-mitskevich"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496148630, "post_id": 44245753, "comment_id": 75533492, "body": "<code>handshake</code> variable that is returned from the <code>bind_transport()</code> is a future that contains handshake procedure that hasn&#39;t been executed yet. I need to read some key value during this handshake and use it in the requests that will go later from this client. Basically, I need to retrieve and store some value after the handshake future will complete. I don&#39;t see any way to do this except implementing my own <code>BindClient</code> trait for my protocol, and I&#39;m not sure it&#39;s the right way..."}], "answers": [{"tags": [], "owner": {"reputation": 1047, "user_id": 204442, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92fa12e9d6c3916c06b7f0043da30d0a?s=128&d=identicon&r=PG", "display_name": "SpamapS", "link": "https://stackoverflow.com/users/204442/spamaps"}, "is_accepted": true, "score": 1, "last_activity_date": 1497974073, "last_edit_date": 1497974073, "creation_date": 1497941758, "answer_id": 44645890, "question_id": 44245753, "link": "https://stackoverflow.com/questions/44245753/how-to-retrieve-information-from-the-tokio-proto-connection-handshake/44645890#44645890", "title": "How to retrieve information from the tokio-proto connection handshake?", "body": "<p>You can add fields to <code>ClientLineProto</code>, so this should work:</p>\n\n<pre><code>pub struct ClientLineProto {\n    handshakes: Arc&lt;Mutex&lt;HashMap&lt;String, String&gt;&gt;&gt;\n}\n</code></pre>\n\n<p>And then you can reference it and store data as needed:</p>\n\n<pre><code>let mut handshakes = self.handshakes.lock();\nhandshakes.insert(handshake_key, \"Blah blah handshake data\")\n</code></pre>\n\n<p>This sort of access would work in <code>bind_transport()</code> for storing things. Then when you create the <code>Arc::Mutex::HashMap</code> in your <code>main()</code> function and you will have access to the whole thing in the <code>serve()</code> method as well, which means you can pass it in to the Service object instantiation and then the handshakes will be available during <code>call()</code>.</p>\n"}], "owner": {"reputation": 449, "user_id": 878298, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d5910505de191043ea9aa614073ae05?s=128&d=identicon&r=PG", "display_name": "Sergey Mitskevich", "link": "https://stackoverflow.com/users/878298/sergey-mitskevich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 168, "favorite_count": 0, "accepted_answer_id": 44645890, "answer_count": 1, "score": 1, "last_activity_date": 1497974073, "creation_date": 1496070853, "last_edit_date": 1496101935, "question_id": 44245753, "link": "https://stackoverflow.com/questions/44245753/how-to-retrieve-information-from-the-tokio-proto-connection-handshake", "title": "How to retrieve information from the tokio-proto connection handshake?", "body": "<p>I'm figuring out how to use the <code>tokio-proto</code> crate, particularly on the handshake made when a connection is established. I've got the example from the <a href=\"https://tokio.rs/docs/going-deeper-tokio/handshake/\" rel=\"nofollow noreferrer\">official documentation</a> working:</p>\n\n<pre><code>impl&lt;T: AsyncRead + AsyncWrite + 'static&gt; ClientProto&lt;T&gt; for ClientLineProto {\n    type Request = String;\n    type Response = String;\n\n    /// `Framed&lt;T, LineCodec&gt;` is the return value of `io.framed(LineCodec)`\n    type Transport = Framed&lt;T, line::LineCodec&gt;;\n    type BindTransport = Box&lt;Future&lt;Item = Self::Transport, Error = io::Error&gt;&gt;;\n\n    fn bind_transport(&amp;self, io: T) -&gt; Self::BindTransport {\n        // Construct the line-based transport\n        let transport = io.framed(line::LineCodec);\n\n        // Send the handshake frame to the server.\n        let handshake = transport.send(\"You ready?\".to_string())\n            // Wait for a response from the server, if the transport errors out,\n            // we don't care about the transport handle anymore, just the error\n            .and_then(|transport| transport.into_future().map_err(|(e, _)| e))\n            .and_then(|(line, transport)| {\n                // The server sent back a line, check to see if it is the\n                // expected handshake line.\n                match line {\n                    Some(ref msg) if msg == \"Bring it!\" =&gt; {\n                        println!(\"CLIENT: received server handshake\");\n                        Ok(transport)\n                    }\n                    Some(ref msg) if msg == \"No! Go away!\" =&gt; {\n                        // At this point, the server is at capacity. There are a\n                        // few things that we could do. Set a backoff timer and\n                        // try again in a bit. Or we could try a different\n                        // remote server. However, we're just going to error out\n                        // the connection.\n\n                        println!(\"CLIENT: server is at capacity\");\n                        let err = io::Error::new(io::ErrorKind::Other, \"server at capacity\");\n                        Err(err)\n                    }\n                    _ =&gt; {\n                        println!(\"CLIENT: server handshake INVALID\");\n                        let err = io::Error::new(io::ErrorKind::Other, \"invalid handshake\");\n                        Err(err)\n                    }\n                }\n            });\n\n        Box::new(handshake)\n    }\n}\n</code></pre>\n\n<p>But the official docs only mention a handshake without stateful information. Is there a common way to retrieve and store useful data from the handshake? </p>\n\n<p>For example, if during the handshake (in the first message after the connection is established) the server sends some key that should be used later by the client, how should the <code>ClientProto</code> implementation look into that key? And where should it be stored?</p>\n"}, {"tags": ["rust", "gtk"], "comments": [{"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 2, "creation_date": 1496038141, "post_id": 44234358, "comment_id": 75480832, "body": "Calling <code>gtk_main_quit()</code> twice in a row like that has no effect because only the innermost <code>gtk_main()</code> will be marked for quitting \u2014 and it&#39;s merely marked for quitting, so you need to return to <code>gtk_main()</code> to actually quit for real. Hence, the only way to make the second <code>gtk_main_quit()</code> quit the way you expect it is to put it after the inner <code>gtk_main()</code> returns. However, I don&#39;t fully understand what the goal of your code is, especially since your use of <code>gtk_main()</code> and <code>gtk::idle_add()</code> is unusual, so I don&#39;t feel like I can properly answer the question yet. What are you trying to do?"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1496055013, "post_id": 44234358, "comment_id": 75490337, "body": "That was actually only an example. My real code is quite complex so that&#39;s why I didn&#39;t posted it. What I&#39;m trying to achieve is to be able to ask the user whether to exit or not when the window is closed. This is asked with a nested event loop because I need to prevent from closing the window if the user doesn&#39;t want to exit. In case the user wants to exit, <code>gtk::main_quit()</code> is called twice (not 2 instructions in a row like in this question, but the effect is the same)."}], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 0, "last_activity_date": 1496058443, "creation_date": 1496058443, "answer_id": 44241746, "question_id": 44234358, "link": "https://stackoverflow.com/questions/44234358/second-gtk-main-quit-not-working/44241746#44241746", "title": "Second gtk_main_quit() not working", "body": "<p>I've fixed my issue by manually creating a glib <code>MainLoop</code> and using it instead of nesting calls gtk event loop.</p>\n"}, {"tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 3, "last_activity_date": 1496315704, "last_edit_date": 1496315704, "creation_date": 1496256793, "answer_id": 44292631, "question_id": 44234358, "link": "https://stackoverflow.com/questions/44234358/second-gtk-main-quit-not-working/44292631#44292631", "title": "Second gtk_main_quit() not working", "body": "<p>Short answer: the solution is to replace the second <code>gtk::main_quit</code> with:</p>\n\n<pre><code>gtk::idle_add(|| {\n    gtk::main_quit();\n    Continue(false)\n});\n</code></pre>\n\n<p>As before, the first <code>gtk::main_quit()</code> will arrange for the inner main loop to quit. Additionally, the idle handler will be picked up by the <em>outer</em> main loop, causing it to immediately terminate as well.</p>\n\n<p>This can be generalized with a pseudo-recursive function that repeats the process as many times as necessary:</p>\n\n<pre><code>fn deep_main_quit(n: usize) {\n    if n == 0 {\n        return;\n    }\n    gtk::main_quit();\n    gtk::idle_add(move || {\n        deep_main_quit(n - 1);\n        Continue(false)\n    });\n}\n</code></pre>\n\n<p>Note that the use of <code>idle_add</code> to continually check for a flag will result in busy-looping, which you almost certainly want to avoid. (On my machine, running your program takes up a full CPU core.) In general, the preferred approach is to wait on a condition variable. But if you just need to tell the GUI thread to do something, as shown in your code, you can just call <code>glib::idle_add</code> from a different thread. The provided callback will be queued and executed in the GUI thread.</p>\n\n<p>With this change, one thread releasing two levels of <code>gtk_main</code> in the GUI thread would look like this:</p>\n\n<pre><code>fn main() {\n    gtk::init().unwrap();\n    let window = Window::new(WindowType::Toplevel);\n\n    window.connect_delete_event(|_, _| {\n        gtk::main_quit();\n        Inhibit(false)\n    });\n\n    let button = Button::new_with_label(\"Click\");\n    button.connect_clicked(|_| {\n        thread::spawn(|| {\n            glib::idle_add(|| {\n                println!(\"Quit\");\n                deep_main_quit(2);\n                Continue(false)\n            });\n        });\n        println!(\"Run\");\n        gtk::main();\n    });\n    window.add(&amp;button);\n    window.show_all();\n\n    gtk::main();\n}\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 681, "favorite_count": 0, "accepted_answer_id": 44241746, "answer_count": 2, "score": 0, "last_activity_date": 1496315704, "creation_date": 1496029981, "last_edit_date": 1496038211, "question_id": 44234358, "link": "https://stackoverflow.com/questions/44234358/second-gtk-main-quit-not-working", "title": "Second gtk_main_quit() not working", "body": "<p>In an application, I nest gtk event loops to be able to return a value in a callback.\nHowever, I have some issues with a callback already calling <code>gtk_main_quit()</code> because multiple calls to this function does not seem to exit as many nestings of event loop.</p>\n\n<p>Here is an example of my issue:</p>\n\n<pre><code>extern crate gtk;\n\nuse std::sync::Arc;\nuse std::sync::atomic::AtomicBool;\nuse std::sync::atomic::Ordering;\nuse std::thread;\n\nuse gtk::{Button, ButtonExt, ContainerExt, Continue, Inhibit, WidgetExt, Window, WindowType};\n\nfn main() {\n    gtk::init().unwrap();\n    let window = Window::new(WindowType::Toplevel);\n\n    let quit = Arc::new(AtomicBool::new(false));\n\n    window.connect_delete_event(|_, _| {\n        gtk::main_quit();\n        Inhibit(false)\n    });\n\n    let button = Button::new_with_label(\"Click\");\n    let quit2 = quit.clone();\n    button.connect_clicked(move |_| {\n        let quit = quit2.clone();\n        thread::spawn(move || {\n            quit.store(true, Ordering::Relaxed);\n        });\n        println!(\"Run\");\n        gtk::main();\n    });\n    window.add(&amp;button);\n    window.show_all();\n\n    gtk::idle_add(move || {\n        if quit.load(Ordering::Relaxed) {\n            println!(\"Quit\");\n            gtk::main_quit();\n            gtk::main_quit();\n            quit.store(false, Ordering::Relaxed);\n        }\n        Continue(true)\n    });\n\n    gtk::main();\n}\n</code></pre>\n\n<p>As you can see in the <code>gtk::idle_add</code> call, I call <code>gtk::main_quit()</code> twice, which should exit the application when the button is pressed because <code>gtk::main()</code> was also called twice (one at the end of the <code>main</code> function, the other one in the button clicked callback).\nBut the application does not exit when I click the button.</p>\n\n<p>The documentation of gtk seems to indicate that this is the expected behaviour:</p>\n\n<blockquote>\n  <p>Makes the innermost invocation of the main loop return <strong>when it regains control</strong>.</p>\n</blockquote>\n\n<p>(emphasis is mine)</p>\n\n<p>So, I believe that this does not exit the application because calling <code>gtk::main_quit()</code> twice won't allow the gtk main loop to \"regain control\".</p>\n\n<p>My question is, what should I do between the two calls to <code>gtk::main_quit()</code> to stop the 2 nestings of event loop?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1496005556, "post_id": 44231965, "comment_id": 75473929, "body": "I don&#39;t understand the task... In what exact circumstances would the callback be triggered? Perhaps simplifying the problem to less variables would help."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1496062905, "post_id": 44231965, "comment_id": 75495233, "body": "@E_net4 if callback subscribed to update of <code>v1</code> and <code>v2</code> then it should be called on update of <code>v1</code> or <code>v2</code>."}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 64, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1496065006, "creation_date": 1496005125, "last_edit_date": 1496065006, "question_id": 44231965, "link": "https://stackoverflow.com/questions/44231965/callback-on-several-variables-modification", "title": "callback on several variables modification", "body": "<p>I have the variables <code>v1</code>, ..., <code>vn</code>, each one having a unique type <code>T1</code>, ..., <code>Tn</code>. I want to make it possible to subscribe to modifications\nof these variables, not more then 4 at once.</p>\n\n<pre><code>use std::any::Any;\n\n#[derive(Debug)]\nstruct T1(f32);\n#[derive(Debug)]\nstruct T2(f32);\n\nfn f1(a: &amp;T1, b: &amp;T2) {\n    println!(\"you call f1: a {:?} b {:?}\", a, b);\n}\n\nfn main() {\n    let mut p1: Box&lt;Any&gt; = Box::new(T1(0.1));\n    let mut p2: Box&lt;Any&gt; = Box::new(T2(0.1));\n\n    let mut v = vec![p1, p2];\n\n    let mut callbacks = ???    \n\n    subscribe_on_change(&amp;mut callbacks, T1_id, T2_id, f1);\n\n    if let Some(num) = v[0].downcast_mut::&lt;T1&gt;() {\n        println!(\"num: {:?}\", num);\n        *num = T1(5.1);\n        callbacks.update(T1_id);\n    }\n}\n</code></pre>\n\n<p>How can I implement such functionality using only the stable or beta compiler?</p>\n\n<p>Because <code>std::any::Any::get_type_id</code> is only usable in the nightly compiler, I can extend <code>Any</code> with my trait, and replace <code>TypeId</code> with my own <code>enum</code>, if there is no more elegant solution.</p>\n\n<p>But what would I put into <code>callbacks</code>, if I want call functions\nwith signatures: <code>(&amp;Tk1)</code>, <code>(&amp;Tk1, &amp;Tk2)</code>, <code>(&amp;Tk1, &amp;Tk2, &amp;Tk3)</code>,\n<code>(&amp;Tk1, &amp;Tk2, &amp;Tk3, &amp;Tk4)</code>, where I have at least 10 types,\nso because of each ki != kj, I have 10 + 10 * 9 + 10 * 9 * 8 + 10 * 9 * 8 * 7 variants.</p>\n\n<p>Because it is not clear, I want to call the callbacks if any of the arguments are updated. For example, in the code above, <code>f1</code> should be called if variables of type <code>T1</code> or <code>T2</code> were updated. I have <code>n</code> unique variables, each of them having a unique type and I put then into a <code>Vec&lt;Box&lt;Any&gt;&gt;</code>.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "edited": false, "score": 0, "creation_date": 1496002936, "post_id": 44231543, "comment_id": 75473169, "body": "thanks. refactoring the code to only single match helped."}], "tags": [], "owner": {"reputation": 694, "user_id": 7033869, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-qhp8umXBLiA/AAAAAAAAAAI/AAAAAAAAAAA/faBbkZ-N7fw/photo.jpg?sz=128", "display_name": "Francois Mockers", "link": "https://stackoverflow.com/users/7033869/francois-mockers"}, "is_accepted": true, "score": 1, "last_activity_date": 1496002114, "creation_date": 1496002114, "answer_id": 44231543, "question_id": 44231356, "link": "https://stackoverflow.com/questions/44231356/refactor-parser-code-to-avoid-borrow-checker-issue/44231543#44231543", "title": "Refactor parser code to avoid borrow checker issue", "body": "<p>Your <code>peek</code>function doesn't need a <code>&amp;mut self</code>, and using just a <code>&amp;self</code> would totally solve your error and give you <code>cannot borrow *stream as mutable because it is also borrowed as immutable</code>. Anyway, avoiding <code>mut</code> when not needed is better.</p>\n\n<p>Your issue is that you bind that <code>Token</code> reference to <code>t</code>, so the borrow doesn't end. You don't need to have a multi level <code>match</code>, and can do the same thing with</p>\n\n<pre><code>fn parse_expr(stream: &amp;mut Parser) -&gt; ParseResult&lt;()&gt; {\n    match stream.peek() {\n        None =&gt; Err(String::from(\"No more tokens\")),\n        Some(&amp;0) =&gt; parse_number_literal(stream),\n        Some(&amp;1) =&gt; panic!(\"parse string\"),\n        Some(&amp;2) =&gt; panic!(\"parse character\"),\n        _ =&gt; Err(String::from(\"Unexpected Token\")),\n    }\n}\n</code></pre>\n\n<p>Or you could change peek to</p>\n\n<pre><code>fn peek(&amp;self) -&gt; Option&lt;Token&gt; {\n    self.input.get(self.position + 1).cloned()\n}\n</code></pre>\n\n<p>which would not create a borrow issue, but will clone the data.</p>\n"}], "owner": {"reputation": 345, "user_id": 1344106, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/387c1b83d5db6cbb55d3c2760fe2269b?s=128&d=identicon&r=PG", "display_name": "Gigih Aji Ibrahim", "link": "https://stackoverflow.com/users/1344106/gigih-aji-ibrahim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 58, "favorite_count": 0, "accepted_answer_id": 44231543, "answer_count": 1, "score": -1, "last_activity_date": 1496083449, "creation_date": 1496000807, "last_edit_date": 1496083449, "question_id": 44231356, "link": "https://stackoverflow.com/questions/44231356/refactor-parser-code-to-avoid-borrow-checker-issue", "title": "Refactor parser code to avoid borrow checker issue", "body": "<p>What the best way to refactor this parser code to avoid borrow checker issue?</p>\n\n<pre><code>pub type Token=u8;\npub trait Stream {\n    type Item;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;Self::Item&gt;;\n    fn peek(&amp;mut self) -&gt; Option&lt;&amp;Self::Item&gt;;\n}\n\n#[derive(Clone)]\npub struct Parser {\n    input: Vec&lt;Token&gt;,\n    position: usize,\n}\n\npub type ParseError = String;\npub type ParseResult&lt;T&gt; = Result&lt;T, ParseError&gt;;\n\nimpl Stream for Parser {\n    type Item = Token;\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;Token&gt; {\n        let token = self.input.get(self.position);\n        self.position += 1;\n        token\n    }\n\n    fn peek(&amp;mut self) -&gt; Option&lt;&amp;Token&gt; {\n        self.input.get(self.position + 1)\n    }\n}\n\nfn parse_expr(stream: &amp;mut Parser) -&gt; ParseResult&lt;()&gt; {\n    match stream.peek() { // ~~ borrowed stream here\n        None =&gt; Err(String::from(\"No more tokens\")),\n        Some(t) =&gt; match t {\n            &amp;0 =&gt; parse_number_literal(stream), // ~~ and here\n            &amp;1 =&gt; panic!(\"parse string\"),\n            &amp;2 =&gt; panic!(\"parse character\"),\n            _ =&gt; Err(String::from(\"Unexpected Token\")),\n        }\n    }\n}\n\nfn parse_number_literal(stream: &amp;mut Parser) -&gt; ParseResult&lt;()&gt; {\n    let token = stream.next();\n    Ok(())\n}\n\nfn main(){}\n</code></pre>\n\n<p>The compiler complaint about <code>cannot borrow</code>*stream<code>as mutable more than once at a time</code>. Reading other stackoverflow questions only answered why this problem occured but not how to solve the problem.</p>\n"}, {"tags": ["serialization", "rust", "serde"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1496006420, "post_id": 44231020, "comment_id": 75474192, "body": "&quot;But in my case using enums is inappropriate solution.&quot; Can we know why? It sounds like the whole issue would fade away when using an enum. Note that type erasure in <code>erased_serde</code> happens at the <code>Deserializer</code>, not on the object being deserialized."}, {"owner": {"reputation": 2151, "user_id": 5902079, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4df4530b8e41c66ac12d17f96cd70c6c?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Gordon", "link": "https://stackoverflow.com/users/5902079/dmitry-gordon"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1496034829, "post_id": 44231020, "comment_id": 75479637, "body": "&quot;Can we know why?&quot; I&#39;m trying to have minimal number of dependencies. I have a trait in some very small and very basic module and a lot of code that depends on it. And I want to have each of implementations of this trait in a separate module. Also there is another downside of using"}, {"owner": {"reputation": 2151, "user_id": 5902079, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4df4530b8e41c66ac12d17f96cd70c6c?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Gordon", "link": "https://stackoverflow.com/users/5902079/dmitry-gordon"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1496035423, "post_id": 44231020, "comment_id": 75479805, "body": "Sorry, I accidentally posted comment before it was finished. Also there is another downside of using enums: if you have the same method in all enum subtypes to call it on enum you have to add <code>match</code> construction with similar cases for each type. &quot;type erasure in erased_serde happens at the Deserializer, not on the object being deserialized&quot; Yes, I know that. I mentioned in the question that erased_serder doesn&#39;t solve problem with deserialization, only with serialization."}, {"owner": {"reputation": 577, "user_id": 4938460, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/109ce42816d23c999e06490a700f4c63?s=128&d=identicon&r=PG&f=1", "display_name": "Qwertycrackers", "link": "https://stackoverflow.com/users/4938460/qwertycrackers"}, "edited": false, "score": 0, "creation_date": 1566220214, "post_id": 44231020, "comment_id": 101576686, "body": "You may be interested in the Rust package <code>enum_dispatch</code>, which may solve your program from the other direction. It provides a derive macro that generates the boilerplate <code>match</code> expression to implement traits for the enum automatically."}], "answers": [{"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 0, "last_activity_date": 1496359109, "last_edit_date": 1496359109, "creation_date": 1496353545, "answer_id": 44317570, "question_id": 44231020, "link": "https://stackoverflow.com/questions/44231020/how-can-deserialization-of-polymorphic-trait-objects-be-added-in-rust-if-at-all/44317570#44317570", "title": "How can deserialization of polymorphic trait objects be added in Rust if at all?", "body": "<p>All your libraries could provide a registration routine, guarded by <code>std::sync::Once</code>, that register some identifier into a common <a href=\"https://doc.rust-lang.org/book/const-and-static.html\" rel=\"nofollow noreferrer\"><code>static mut</code></a>, but obviously your program must call them all.</p>\n\n<p>I've no idea if <code>TypeId</code> yields consistent values across recompiles with different dependencies.  </p>\n"}, {"tags": [], "owner": {"reputation": 1784, "user_id": 996118, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/22e3d63a5c93121b865df18bd188cff5?s=128&d=identicon&r=PG", "display_name": "Miles", "link": "https://stackoverflow.com/users/996118/miles"}, "is_accepted": false, "score": 0, "last_activity_date": 1526315729, "creation_date": 1526315729, "answer_id": 50335108, "question_id": 44231020, "link": "https://stackoverflow.com/questions/44231020/how-can-deserialization-of-polymorphic-trait-objects-be-added-in-rust-if-at-all/50335108#50335108", "title": "How can deserialization of polymorphic trait objects be added in Rust if at all?", "body": "<p>A library to do this should be possible. To create such a library, we would create a bidirectional mapping from TypeId to type name before using the library, and then use that for serialization/deserialization with a type marker. It would be possible to have a function for registering types that are not owned by your package, and to provide a macro annotation that automatically does this for types declared in your package.</p>\n\n<p>If there's a way to access a type ID in a macro, that would be a good way to instrument the mapping between TypeId and type name at compile time rather than runtime.</p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 9, "last_activity_date": 1567758265, "last_edit_date": 1592644375, "creation_date": 1567758265, "answer_id": 57818325, "question_id": 44231020, "link": "https://stackoverflow.com/questions/44231020/how-can-deserialization-of-polymorphic-trait-objects-be-added-in-rust-if-at-all/57818325#57818325", "title": "How can deserialization of polymorphic trait objects be added in Rust if at all?", "body": "<p>This has been <a href=\"https://github.com/dtolnay/typetag\" rel=\"noreferrer\">implemented by dtolnay</a>.</p>\n<p>The concept is quite clever ans is explained in the <code>README</code>:</p>\n<blockquote>\n<p><em>How does it work?</em></p>\n<p>We use the <a href=\"https://github.com/dtolnay/inventory\" rel=\"noreferrer\"><code>inventory</code></a> crate to produce a registry of impls of your trait, which is built on the <a href=\"https://github.com/mmastrac/rust-ctor\" rel=\"noreferrer\"><code>ctor</code></a> crate to hook up initialization functions that insert into the registry. The first <code>Box&lt;dyn Trait&gt;</code> deserialization will perform the work of iterating the registry and building a map of tags to deserialization functions. Subsequent deserializations find the right deserialization function in that map. The <a href=\"https://github.com/dtolnay/erased-serde\" rel=\"noreferrer\"><code>erased-serde</code></a> crate is also involved, to do this all in a way that does not break object safety.</p>\n</blockquote>\n<p>To summarize, every implementation of the trait declared as [de]serializable is registered at compile-time, and this is resolved at runtime in case of [de]serialization of a trait object.</p>\n"}], "owner": {"reputation": 2151, "user_id": 5902079, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4df4530b8e41c66ac12d17f96cd70c6c?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Gordon", "link": "https://stackoverflow.com/users/5902079/dmitry-gordon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1812, "favorite_count": 3, "accepted_answer_id": 57818325, "answer_count": 3, "score": 17, "last_activity_date": 1567758265, "creation_date": 1495998446, "last_edit_date": 1496007562, "question_id": 44231020, "link": "https://stackoverflow.com/questions/44231020/how-can-deserialization-of-polymorphic-trait-objects-be-added-in-rust-if-at-all", "title": "How can deserialization of polymorphic trait objects be added in Rust if at all?", "body": "<p>I'm trying to solve the problem of serializing and deserializing <code>Box&lt;SomeTrait&gt;</code>. I know that in the case of a closed type hierarchy, the recommended way is to use an enum and there are no issues with their serialization, but in my case using enums is an inappropriate solution.</p>\n\n<p>At first I tried to use Serde as it is the de-facto Rust serialization mechanism. Serde is capable of serializing <code>Box&lt;X&gt;</code> but not in the case when <code>X</code> is a trait. The <a href=\"https://docs.serde.rs/serde/trait.Serialize.html\" rel=\"noreferrer\"><code>Serialize</code></a> trait can\u2019t be implemented for trait objects because it has generic methods. This particular issue can be solved by using <a href=\"https://github.com/dtolnay/erased-serde\" rel=\"noreferrer\">erased-serde</a> so serialization of <code>Box&lt;SomeTrait&gt;</code> can work.</p>\n\n<p>The main problem is deserialization. To deserialize polymorphic type you need to have some type marker in serialized data. This marker should be deserialized first and after that used to dynamically get the function that will return <code>Box&lt;SomeTrait&gt;</code>.</p>\n\n<p><code>std::any::TypeId</code> could be used as a marker type, but the main problem is how to dynamically get the deserialization function. I do not consider the option of registering a function for each polymorphic type that should be called manually during application initialization.</p>\n\n<p>I know two possible ways to do it:</p>\n\n<ol>\n<li>Languages that have runtime reflection like C# can use it to get\ndeserialization method. </li>\n<li>In C++, the cereal library uses magic of static objects to register deserializer in a static map at the library initialization time.</li>\n</ol>\n\n<p>But neither of these options is available in Rust. How can deserialization of polymorphic objects be added in Rust if at all? </p>\n"}, {"tags": ["rust", "generic-programming", "either"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1495987961, "post_id": 44228747, "comment_id": 75468749, "body": "This question is tricky for its &quot;suggestions&quot; nature (it hits the &quot;too broad&quot; borderline in my opinion). In particular, you have listed two options without showing an attempt of turning them into code. Even if we wanted, we could not show &quot;how to reduce the complexity&quot;. Showing some more code could improve the question&#39;s quality. Regardless, we can already lay some facts on the table: Even if the function returns a <code>Result&lt;T, Error&gt;</code> (where <code>T</code> could be <code>f64</code>, <code>Complex64</code>, ...), we can&#39;t have a runtime field in <code>config</code> choosing <code>T</code>. In the worst case, you might need 2 function instances."}, {"owner": {"reputation": 863, "user_id": 212505, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/814b4c1033520039b0d28bf8b1d45cc2?s=128&d=identicon&r=PG", "display_name": "Geodesic", "link": "https://stackoverflow.com/users/212505/geodesic"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495994915, "post_id": 44228747, "comment_id": 75470800, "body": "<i>we can&#39;t have a runtime field in <code>config</code> choosing <code>T</code> ...you might need 2 function instances</i> &lt;- This may indeed be my answer actually. Will look into that and edit my question soon if the other options still fit. Thanks!"}], "answers": [{"comments": [{"owner": {"reputation": 863, "user_id": 212505, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/814b4c1033520039b0d28bf8b1d45cc2?s=128&d=identicon&r=PG", "display_name": "Geodesic", "link": "https://stackoverflow.com/users/212505/geodesic"}, "edited": false, "score": 0, "creation_date": 1495995071, "post_id": 44230322, "comment_id": 75470845, "body": "Thanks Peter. I&#39;ll take a look into your code and try to get a MWE of mine in a similar fashion. Will mark your answer as correct once I&#39;ve verified something."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 4, "last_activity_date": 1495997809, "last_edit_date": 1495997809, "creation_date": 1495994009, "answer_id": 44230322, "question_id": 44228747, "link": "https://stackoverflow.com/questions/44228747/handling-f64-or-complex64-return-types-generics-either/44230322#44230322", "title": "Handling f64 or Complex64 return types. Generics? Either?", "body": "<p>There might be a lot of code change, but using generic parameters is probably the most flexible approach, and it won't impact performance. Passing around an <code>enum</code> will be less performant, partly because the enum will be bigger (the size of the larger variant plus a tag to discriminate between them) and partly because the enum variant will have to be frequently checked.</p>\n\n<p>One thing that can get cumbersome is the potentially long list of traits that constrain your type parameter. This can be done on the <code>impl</code> level, rather than on each function, to save repetition. There isn't currently a way to alias a set of traits, which would make this more ergonomic, but there is an <a href=\"https://github.com/rust-lang/rfcs/pull/1733\" rel=\"nofollow noreferrer\">RFC</a> approved for that.</p>\n\n<p>I made a very <a href=\"https://github.com/servo/euclid/commit/b8166e24b0f294eb103e8717d4de755aa5989b91\" rel=\"nofollow noreferrer\">similar change in the Euclid library</a>. It was more than a year ago, so much has changed since then, both in Rust and in that library, but a quick look over that commit should still give you an idea of the amount of changes necessary. </p>\n\n<p>This is the <a href=\"https://github.com/servo/euclid/blob/f33d6e2808a31b42bb013adafc967bacba140eca/src/transform3d.rs#L113-L122\" rel=\"nofollow noreferrer\">current state</a> of the same (renamed) implementation:</p>\n\n<pre><code>impl &lt;T, Src, Dst&gt; TypedTransform3D&lt;T, Src, Dst&gt;\nwhere T: Copy + Clone +\n         Add&lt;T, Output=T&gt; +\n         Sub&lt;T, Output=T&gt; +\n         Mul&lt;T, Output=T&gt; +\n         Div&lt;T, Output=T&gt; +\n         Neg&lt;Output=T&gt; +\n         ApproxEq&lt;T&gt; +\n         PartialOrd +\n         Trig +\n         One + Zero {\n\n  // methods of TypedTransform3D defined here...\n\n}\n</code></pre>\n\n<p>Some of those traits (<code>Trig</code>, <code>One</code>, <code>Zero</code>) are actually <a href=\"https://github.com/servo/euclid/blob/0f3afcc9c183b5a21a087c9120563d22c03ed27d/src/num.rs\" rel=\"nofollow noreferrer\">defined inside the crate</a>, as they aren't in the standard library.</p>\n"}], "owner": {"reputation": 863, "user_id": 212505, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/814b4c1033520039b0d28bf8b1d45cc2?s=128&d=identicon&r=PG", "display_name": "Geodesic", "link": "https://stackoverflow.com/users/212505/geodesic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 0, "accepted_answer_id": 44230322, "answer_count": 1, "score": 1, "last_activity_date": 1495997809, "creation_date": 1495983833, "question_id": 44228747, "link": "https://stackoverflow.com/questions/44228747/handling-f64-or-complex64-return-types-generics-either", "title": "Handling f64 or Complex64 return types. Generics? Either?", "body": "<p>I have a functioning Rust program using real doubles (<code>f64</code>) as the underlying type and wish to extend the system such that it can also handle complex values (<code>num::complex::Complex64</code>).</p>\n\n<p>A (cut down example) function takes some configuration struct <code>config</code>, and depending on that input generates a potential value at an index <code>idx</code>:</p>\n\n<pre><code>fn potential(config: &amp;Config, idx: &amp;Index3) -&gt; Result&lt;f64, Error&gt; {\n    let num = &amp;config.grid.size;\n    match config.potential {\n        PotentialType::NoPotential =&gt; Ok(0.0),\n        PotentialType::Cube =&gt; {\n            if (idx.x &gt; num.x / 4 &amp;&amp; idx.x &lt;= 3 * num.x / 4) &amp;&amp;\n               (idx.y &gt; num.y / 4 &amp;&amp; idx.y &lt;= 3 * num.y / 4) &amp;&amp;\n               (idx.z &gt; num.z / 4 &amp;&amp; idx.z &lt;= 3 * num.z / 4) {\n                Ok(-10.0)\n            } else {\n                Ok(0.0)\n            }\n        }\n        PotentialType::Coulomb =&gt; {\n            let r = config.grid.dn * (calculate_r2(idx, &amp;config.grid)).sqrt();\n            if r &lt; config.grid.dn {\n                Ok(-1. / config.grid.dn)\n            } else {\n                Ok(-1. / r)\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I now wish to add a <code>ComplexCoulomb</code> match which returns a <code>Complex64</code> value:</p>\n\n<pre><code>PotentialType::ComplexCoulomb =&gt; {\n    let r = config.grid.dn * (calculate_r2(idx, &amp;config.grid)).sqrt();\n    if r &lt; config.grid.dn {\n        Ok(Complex64::new(-1. / config.grid.dn, 1.))\n    } else {\n        Ok(Complex64::new(-1. / r, 1.))\n    }\n}\n</code></pre>\n\n<p>This function is an early entry point in my program, which fills an <code>ndarray::Array3</code>; currently I'm operating on a number of variables with the type <code>ndarray::Array3&lt;f64&gt;</code> - so I need to generalise the whole program, not just this function.</p>\n\n<p><strong>How can I extend this program to use both types based on the input from <code>config</code>?</strong> This struct comes from parsing a configuration file on disk and will match a number of <code>PotentialType::Complex*</code> values.</p>\n\n<p>I'm aware of two possible options, but am unsure if either fits my criteria.</p>\n\n<ol>\n<li>Use something similar to <a href=\"https://docs.rs/either/1.1.0/either/\" rel=\"nofollow noreferrer\">Either</a> and return <code>Left</code> for real and <code>Right</code> for complex; then use additional logic to treat the values separately in other functions.</li>\n<li>Use generic types. This isn't something I've done too much of before and <a href=\"https://stackoverflow.com/questions/26810793/how-can-i-create-an-is-prime-function-that-is-generic-over-various-integer-types\">generalisation over many types</a> seems like a fair chunk of complicated alteration of my current code base. Is there a way to reduce the complexity here?</li>\n</ol>\n\n<p>If you have any other suggestions I'd love to hear them!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 6, "creation_date": 1495956152, "post_id": 44224729, "comment_id": 75459698, "body": "Your example Rust code is not well formed: the first <code>if</code> is missing the condition. Are you sure <code>rustfmt</code> doesn&#39;t emit any errors? Apart from that: what do you want to show us with your example code? Is that the code you want to format or is it the formatting you consider &quot;correct&quot;? In the latter case: ... why? Why those 3-space and 2-space indent? And lastly: while we all are still using text based editors, we do care about format consistency. Obeying the rules from the community (4 space indent) is <b>far more important</b> than using the format you like best. You just have to get used to it."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 4, "creation_date": 1496015896, "post_id": 44224729, "comment_id": 75476087, "body": "In the interest of avoiding false consensus, note that not all Rust programmers use a 4 space indent convention. Some of them just aren&#39;t as...outspoken as others ;)"}, {"owner": {"reputation": 103, "user_id": 8068176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d6264f5b21a54dcccc34c76406c3407?s=128&d=identicon&r=PG&f=1", "display_name": "Avi", "link": "https://stackoverflow.com/users/8068176/avi"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1496017289, "post_id": 44224729, "comment_id": 75476305, "body": "@LukasKalbertodt Once the <code>_</code>s and <code>---&gt;</code> are removed the code is perfectly valid. Rust allows for blocks to return a type(this is notated by the lack of a semicolon where one would normal be) hence <code>{ true }</code> is <code>true</code>. In my example above the first if statement depends on the condition returned by the following block. As to following the rules of the community: I can follow them by running a standard <code>cargo fmt</code> before uploading. I don&#39;t have to use the standard style while editing."}, {"owner": {"reputation": 103, "user_id": 8068176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d6264f5b21a54dcccc34c76406c3407?s=128&d=identicon&r=PG&f=1", "display_name": "Avi", "link": "https://stackoverflow.com/users/8068176/avi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1496017818, "post_id": 44224729, "comment_id": 75476383, "body": "@Shepmaster The code is not &quot;syntactically invalid Rust code&quot;. also the question has as much detail as have about the task. I do not know what way or even if there is a way to format this code so indenting spaces are removed, so I cannot provide a example of what that <code>rustfmt</code> setting would modify the output to. Would changing the title from &quot;these space&quot; to &quot;these indenting spaces&quot; help clarify?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1496018930, "post_id": 44224729, "comment_id": 75476574, "body": "@Avi You seem to wish for <code>rustfmt</code> to perform a very specific form of indentation. Consider writing an input code and the desired output code by hand. If you cannot do this, then the question is inevitably ill-formed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1496019374, "post_id": 44224729, "comment_id": 75476659, "body": "@Avi I see now. If nothing else, that&#39;s certainly a <i>very unusual</i> way to organize your code, getting close to obfuscated code territory. I&#39;d generally recommend that you store that as a variable instead of placing the block there. Were I code reviewing it, I&#39;d certainly reject it ^_^. However, your question can still be improved by providing <b>both</b> the input source code and the desired output code. That way there can be no ambiguity about what exactly it is you want the formatter to do and a potential answerer can feel that much more confident about their answer being useful."}, {"owner": {"reputation": 103, "user_id": 8068176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d6264f5b21a54dcccc34c76406c3407?s=128&d=identicon&r=PG&f=1", "display_name": "Avi", "link": "https://stackoverflow.com/users/8068176/avi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1496028278, "post_id": 44224729, "comment_id": 75478125, "body": "@Shepmaster I have updated the question. Are there any other ways in which it can be improved."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1496041358, "post_id": 44224729, "comment_id": 75482507, "body": "@Avi: I have further tweaked the question; if you do not like my edit, you can (1) further edit or (2) revert it by clicking on the &quot;edited ... ago&quot; link which leads you to the post history and selecting a revision to revert to."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1496053485, "post_id": 44224729, "comment_id": 75489438, "body": "@Avi: I&#39;m sorry, my bad for saying your code is invalid Rust! :( But the fact that a few experienced Rust programmers incorrectly parsed your code as invalid in their heads, is a clear indicator that the formatting is unusual (or even not idiomatic). I agree with Shepmaster that you would want to save your boolean condition in a variable and write the <code>if</code>-head in a single line. But thanks a lot for improving your quesiton! :)"}, {"owner": {"reputation": 103, "user_id": 8068176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d6264f5b21a54dcccc34c76406c3407?s=128&d=identicon&r=PG&f=1", "display_name": "Avi", "link": "https://stackoverflow.com/users/8068176/avi"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1496109214, "post_id": 44224729, "comment_id": 75512976, "body": "@LukasKalbertodt It is worth noting this code was derived from real code to demonstrate a formatting issue. This type of pattern is unusual, but it  can be useful in certain cases where storing context is not ideal or for a number of other reasons that can not be appropriately expressed here."}], "answers": [{"tags": [], "owner": {"reputation": 321, "user_id": 7562670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/lyaYy.jpg?s=128&g=1", "display_name": "Seiichi Uchida", "link": "https://stackoverflow.com/users/7562670/seiichi-uchida"}, "is_accepted": true, "score": 3, "last_activity_date": 1496030239, "creation_date": 1496030239, "answer_id": 44234386, "question_id": 44224729, "link": "https://stackoverflow.com/questions/44224729/how-can-rustfmt-be-configured-to-emit-tabs-not-these-indenting-spaces/44234386#44234386", "title": "How can rustfmt be configured to emit tabs not these indenting spaces?", "body": "<p>You could try <code>control_style = \"Rfc\"</code>. The output will be like the following:</p>\n\n<pre><code>fn main() {\n    if {\n        let to_comp = true;\n        if to_comp { true } else { false }\n    }\n    {\n        println!(\"true\");\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 103, "user_id": 8068176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d6264f5b21a54dcccc34c76406c3407?s=128&d=identicon&r=PG&f=1", "display_name": "Avi", "link": "https://stackoverflow.com/users/8068176/avi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1660, "favorite_count": 1, "accepted_answer_id": 44234386, "answer_count": 1, "score": 2, "last_activity_date": 1496041288, "creation_date": 1495955491, "last_edit_date": 1496041288, "question_id": 44224729, "link": "https://stackoverflow.com/questions/44224729/how-can-rustfmt-be-configured-to-emit-tabs-not-these-indenting-spaces", "title": "How can rustfmt be configured to emit tabs not these indenting spaces?", "body": "<p>Why is rustfmt emitting indenting spaces in the below code example, and how can it be configured to stop?</p>\n\n<p>I have the following code:</p>\n\n<pre><code>fn main() {\n    if {\n        let to_comp = true;\n        if to_comp { true } else { false }\n    } {\n        println!(\"true\");\n    }\n}\n</code></pre>\n\n<p>which rustfmt formats as (<em>I have replaced all the tabs with <code>---&gt;</code> and the indenting spaces with <code>_</code> to illustrate the indentation</em>):</p>\n\n<pre><code>fn main() {\n---&gt;if {\n---&gt;---&gt;___let to_comp = true;\n---&gt;---&gt;___if to_comp { true } else { false }\n---&gt;---&gt;__} {\n---&gt;---&gt;println!(\"true\");\n---&gt;}\n}\n</code></pre>\n\n<p>My <code>rustfmt.toml</code> for the above code:</p>\n\n<pre><code>tab_spaces = 4\nhard_tabs = true\narray_layout = \"Block\"\nreorder_imports = true\nnewline_style = \"Unix\"\nspaces_within_angle_brackets = false\nspaces_within_parens = false\nspaces_within_square_brackets = false\nfn_args_layout = \"Block\"\nfn_call_style = \"Block\"\nfn_return_indent = \"WithArgs\"\nfn_brace_style = \"SameLineWhere\"\ngenerics_indent= \"Block\"\nitem_brace_style = \"PreferSameLine\"\nwhere_layout = \"Horizontal\"\nwhere_pred_indent = \"Block\"\nwhere_style = \"Rfc\"\n</code></pre>\n\n<p>I would like to know if there exists a <code>rustfmt</code> configuration option that will emit only tabs for indenting. So the code would be formatted like:</p>\n\n<pre><code>fn main() {\n---&gt;if {\n---&gt;---&gt;let to_comp = true;\n---&gt;---&gt;if to_comp { true } else { false }\n---&gt;---&gt;} {\n---&gt;---&gt;println!(\"true\");\n---&gt;}\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "is_accepted": true, "score": 2, "last_activity_date": 1495941599, "last_edit_date": 1495941599, "creation_date": 1495940088, "answer_id": 44223393, "question_id": 44222478, "link": "https://stackoverflow.com/questions/44222478/cannot-return-a-reference-to-an-element-in-a-lazy-static-hashmap-because-it-does/44223393#44223393", "title": "Cannot return a reference to an element in a lazy_static HashMap because it does not live long enough", "body": "<p>You're returning a reference to object inside the hash table, which can be altered/removed by others at any time.</p>\n\n<p>The easiest way is to clone it:</p>\n\n<pre><code>pub fn get_sub(key: &amp;str) -&gt; Option&lt;String&gt; {\n    //                              ^~~~~~ change the signature\n    let subs: LockResult&lt;RwLockReadGuard&lt;HashMap&lt;String, String&gt;&gt;&gt; = SUBS.read();\n    let x: RwLockReadGuard&lt;HashMap&lt;String, String&gt;&gt; = subs.unwrap();\n    x.get(key).cloned()\n    //         ^~~~~~ Option::cloned()\n}\n</code></pre>\n\n<p>In the case that you wanted a completely constant (immutable) lookup table, check out the <a href=\"https://github.com/sfackler/rust-phf\" rel=\"nofollow noreferrer\"><code>phf</code></a> crate.</p>\n"}], "owner": {"reputation": 2668, "user_id": 784043, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/1d96778c2a489f5250fa81f648f613df?s=128&d=identicon&r=PG", "display_name": "RokL", "link": "https://stackoverflow.com/users/784043/rokl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 330, "favorite_count": 0, "closed_date": 1495941731, "accepted_answer_id": 44223393, "answer_count": 1, "score": 2, "last_activity_date": 1495941599, "creation_date": 1495927802, "last_edit_date": 1495941564, "question_id": 44222478, "link": "https://stackoverflow.com/questions/44222478/cannot-return-a-reference-to-an-element-in-a-lazy-static-hashmap-because-it-does", "closed_reason": "Duplicate", "title": "Cannot return a reference to an element in a lazy_static HashMap because it does not live long enough", "body": "<p>I have code like this:</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\nuse std::cell::RefCell;\nuse std::sync::{RwLock, RwLockReadGuard, LockResult};\n\nlazy_static! {\n    static ref SUBS: RwLock&lt;HashMap&lt;String, String&gt;&gt; = RwLock::new(HashMap::new());\n}\n\npub fn get_sub(key: &amp;str) -&gt; Option&lt;&amp;String&gt; {\n    let subs: LockResult&lt;RwLockReadGuard&lt;HashMap&lt;String, String&gt;&gt;&gt; = SUBS.read();\n    let x: RwLockReadGuard&lt;HashMap&lt;String, String&gt;&gt; = subs.unwrap();\n    x.get(key)\n}\n</code></pre>\n\n<p>And it doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `x` does not live long enough\n  --&gt; src/main.rs:15:5\n   |\n15 |     x.get(key)\n   |     ^ does not live long enough\n16 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the body at 12:45...\n  --&gt; src/main.rs:12:46\n   |\n12 |   pub fn get_sub(key: &amp;str) -&gt; Option&lt;&amp;String&gt; {\n   |  ______________________________________________^ starting here...\n13 | |     let subs: LockResult&lt;RwLockReadGuard&lt;HashMap&lt;String, String&gt;&gt;&gt; = SUBS.read();\n14 | |     let x: RwLockReadGuard&lt;HashMap&lt;String, String&gt;&gt; = subs.unwrap();\n15 | |     x.get(key)\n16 | | }\n   | |_^ ...ending here\n</code></pre>\n\n<p>I am completely stumped. I don't understand why this doesn't compile.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 3, "user_id": 7626403, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5bd12d4b2543c7d5c08d8970242716e3?s=128&d=identicon&r=PG", "display_name": "Kevin", "link": "https://stackoverflow.com/users/7626403/kevin"}, "edited": false, "score": 0, "creation_date": 1495924043, "post_id": 44221573, "comment_id": 75454796, "body": "Thank you!! That was very thorough and is exactly what I was looking for."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 1, "last_activity_date": 1495969253, "last_edit_date": 1495969253, "creation_date": 1495918868, "answer_id": 44221573, "question_id": 44220792, "link": "https://stackoverflow.com/questions/44220792/how-do-i-construct-any-of-potentially-many-structs-that-implement-a-trait/44221573#44221573", "title": "How do I construct any of potentially many structs that implement a trait?", "body": "<p>You seem to be almost on the right track. Let's cover the essentials:</p>\n\n<p>An implementation of a function <code>fn new() -&gt; FooHolder&lt;T&gt;</code> cannot choose the type <code>T</code>. That is chosen by the context where it's called. So we cannot enforce, or always assume that <code>T = StructBar</code>.</p>\n\n<p>Usually, you would do one of two things: provide a constructor interface to <code>T</code> in a trait implemented by <code>T</code>.</p>\n\n<blockquote>\n  <p>something like moving <code>new()</code> into the trait wouldn't help me as new structs that implement TraitBar might take different arguments into new().</p>\n</blockquote>\n\n<p>Even if you could do that, how would the compiler know what arguments to expect in <code>FooHolder::new()</code>? Variable number of arguments are out of your reach here (see <a href=\"https://stackoverflow.com/q/28951503/1233251\">How can I create a function with a variable number of arguments?</a>), so telling the compiler to accept a different number of arguments depending on <code>T</code> is not realistic. However, we can emulate that by having an associated type that defines construction parameters. In the following code, I took the liberty of making the identifiers more idiomatic (<code>Struct</code> or <code>Trait</code> as prefixes only introduce noise).</p>\n\n<pre><code>trait Foo {\n    type Params; // new type parameter\n\n    fn new(params: Self::Params) -&gt; Self; // new static method\n\n    fn foo(&amp;self) -&gt; i32;\n}\n</code></pre>\n\n<p>Our <code>Bar</code> would be defined like this:</p>\n\n<pre><code>struct Bar {\n    var: i32,\n}\n\nimpl Foo for Bar {\n    type Params = i32;\n\n    fn foo(&amp;self) -&gt; i32 {\n        self.var\n    }\n\n    fn new(params: Self::Params) -&gt; Self {\n        Bar { var: params }\n    }\n}\n</code></pre>\n\n<p>And our <code>FooHolder</code> would now be able to construct a value of type <code>T</code>:</p>\n\n<pre><code>struct FooHolder&lt;T: Foo&gt; {\n    myfoo: T,\n}\n\nimpl&lt;T: Foo&gt; FooHolder&lt;T&gt; {\n    fn new(params: T::Params) -&gt; FooHolder&lt;T&gt; {\n        FooHolder { myfoo : T::new(params) }\n    }\n}\n</code></pre>\n\n<p>Using <code>FooHolder</code>:</p>\n\n<pre><code>let aaa = FooHolder::&lt;Bar&gt;::new(5);\n</code></pre>\n\n<p>When no arguments are needed to construct <code>T</code>, we can rely on the <code>Default</code> trait:</p>\n\n<pre><code>impl&lt;T: Foo + Default&gt; Default for FooHolder&lt;T&gt; {\n    fn default() -&gt; Self {\n        FooHolder { myfoo: T::default() }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=08cffd1bf23e821ee2874791f2c14feb&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Full Playground</a></p>\n\n<p>Otherwise, in case you just want to avoid making new type parameters and exposing constructor methods, there is usually no problem with moving <code>T</code> into the holder. In fact, many APIs in the standard library and popular crates follow this approach.</p>\n\n<pre><code>impl&lt;T&gt; FooHolder&lt;T&gt; {\n    fn new(foo: T) -&gt; Self {\n        FooHolder { myfoo: foo }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3, "user_id": 7626403, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5bd12d4b2543c7d5c08d8970242716e3?s=128&d=identicon&r=PG", "display_name": "Kevin", "link": "https://stackoverflow.com/users/7626403/kevin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 104, "favorite_count": 0, "accepted_answer_id": 44221573, "answer_count": 1, "score": 0, "last_activity_date": 1495969253, "creation_date": 1495913038, "last_edit_date": 1495942656, "question_id": 44220792, "link": "https://stackoverflow.com/questions/44220792/how-do-i-construct-any-of-potentially-many-structs-that-implement-a-trait", "title": "How do I construct any of potentially many structs that implement a trait?", "body": "<p>I have created a small working example of a problem I'm having in Rust below:</p>\n\n<pre><code>trait TraitFoo {\n    fn foo(&amp;self) -&gt; i32;\n}\n\nstruct StructBar {\n    var: i32,\n}\n\nimpl TraitFoo for StructBar {\n    fn foo(&amp;self) -&gt; i32 {\n        self.var\n    }\n}\n\nimpl StructBar {\n    fn new() -&gt; StructBar {\n        StructBar { var: 5 }\n    }\n}\n\nstruct FooHolder&lt;T: TraitFoo&gt; {\n    myfoo: T,\n}\n\nimpl&lt;T: TraitFoo&gt; FooHolder&lt;T&gt; {\n    fn new() -&gt; FooHolder&lt;T&gt; {\n        FooHolder { myfoo: StructBar::new() }\n    }\n}\n\nfn main() {\n    let aaa = FooHolder::new();\n}\n</code></pre>\n\n<p>This fails to compile with :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:27:9\n   |\n27 |         FooHolder { myfoo: StructBar::new() }\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found struct `StructBar`\n   |\n   = note: expected type `FooHolder&lt;T&gt;`\n              found type `FooHolder&lt;StructBar&gt;`\n</code></pre>\n\n<p>I would like to be able to return any of potentially many structs that implement <code>TraitFoo</code> from the <code>FooHolder::new()</code> method. I'd like it to expect any <code>T:TraitFoo</code> as a return type instead of just <code>StructBar</code> in this case.</p>\n\n<p>I have tried several things but something like moving <code>new()</code> into the trait wouldn't help me as new structs that implement <code>TraitBar</code> might take different arguments into <code>new()</code>.</p>\n"}, {"tags": ["rust", "rust-macros"], "owner": {"reputation": 8082, "user_id": 1446048, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/N05fy.jpg?s=128&g=1", "display_name": "OJFord", "link": "https://stackoverflow.com/users/1446048/ojford"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 46, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1495886986, "creation_date": 1495886986, "question_id": 44216669, "link": "https://stackoverflow.com/questions/44216669/bring-custom-derive-macro-into-namespace-via-plugin", "title": "Bring custom derive macro into namespace via plugin", "body": "<p>Is it possible to reduce the boilerplate in using a library (as the library author) from:</p>\n\n<pre><code>#![feature(plugin)]\n#![plugin(myplugin)]\n\n#[macro_use]\nextern crate myplugin_derive;\n\n#[derive(MyPlugin)]\n// ...\n</code></pre>\n\n<p>to something more like:</p>\n\n<pre><code>#![feature(plugin)]\n#![plugin(myplugin)]\n\n#[derive(MyPlugin)]\n// ...\n</code></pre>\n\n<p>That is, since I know anyone using <code>myplugin</code> wants to use <code>#[derive(MyPlugin)]</code>, is there a way of bringing <code>MyPlugin</code> into scope with <code>#![plugin(myplugin)]</code> only?</p>\n"}, {"tags": ["rust", "lifetime", "mutability"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495883509, "post_id": 44214826, "comment_id": 75443154, "body": "Can you also put the definition of the remaining relevant types in the question? In particular, <code>Scheduler</code>, <code>AssemblyTrait</code> and <code>ViewTrait</code> should be here. That issue looks very similar to <a href=\"https://stackoverflow.com/q/24574741/1233251\">stackoverflow.com/q/24574741/1233251</a> (although not with iterators but your own trait): the lifetime of <code>&amp;mut self</code> is incompatible with lifetime <code>&#39;a</code>."}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495886919, "post_id": 44214826, "comment_id": 75444106, "body": "@E_net4: I see the similarities to the linked question. Although I don&#39;t quite know how I would apply its solution to my problem. In the meantime, I&#39;ve added the definitions you&#39;ve asked for."}, {"owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1495887871, "post_id": 44214826, "comment_id": 75444388, "body": "I notice you used <code>&#39;a ViewTrait&lt;&#39;a&gt;</code> which is probably overspecifying lifetimes, as in this question: <a href=\"https://stackoverflow.com/questions/44081272\">stackoverflow.com/questions/44081272</a>."}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1495888594, "post_id": 44214826, "comment_id": 75444612, "body": "I actually introduced the additional lifetime bound to the generic type <code>A</code> because the struct <code>World</code> contains a <code>std::marker::PhantomData</code> field which in turn consumes a falsely unused lifetime parameter. I&#39;ll update the question to include the definition of the World struct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495899539, "post_id": 44214826, "comment_id": 75447993, "body": "I have to run; but <a href=\"https://gist.github.com/shepmaster/74523a8ccf7167822570df9e26764b99\" rel=\"nofollow noreferrer\">I&#39;ve started an answer which contains some MCVEs</a> if anyone wants to pick it up."}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495903829, "post_id": 44214826, "comment_id": 75449358, "body": "@Shepmaster, thanks for the in-progress answer. Based on yours, I recreated an <a href=\"https://gist.github.com/youngec/3063d6688b7061d21f2a8107ca333a48\" rel=\"nofollow noreferrer\">MCVE</a> on my own, and realized that I have multiple simultaneous issues with my code: not only do I have a lifetime issue with <code>ViewTrait::View</code> (i.e. mutable references as return type) but I also mutably borrow <code>World</code> multiple times. I guess, what I&#39;m asking is; how do I sort this all out?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495980291, "post_id": 44214826, "comment_id": 75466309, "body": "Can you explain why you&#39;ve chosen to define <code>&#39;a</code> at the trait level?"}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1495989137, "post_id": 44214826, "comment_id": 75469121, "body": "I followed the suggestions made by <a href=\"https://stackoverflow.com/questions/33734640/lifetime-parameters-in-associated-type#33756123\">Lifetime parameters in associated type</a>. The option to include it at the trait level seemed to work more easily than implementing the trait for a reference type. I&#39;m open to alternative suggestions!"}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1496217877, "post_id": 44214826, "comment_id": 75565049, "body": "Finally, I did manage to solve the multiple mutable borrow issue of <code>World</code> (and its members). But I still don&#39;t know how to solve the issue of the interaction between <code>SystemTrait</code> and <code>ViewTrait</code> with regards to lifetimes. For the purpose of better detailing the actual issue, should I modify my original question or ask a new one?"}], "owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 141, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1495896775, "creation_date": 1495874871, "last_edit_date": 1495896775, "question_id": 44214826, "link": "https://stackoverflow.com/questions/44214826/lifetime-parameters-in-associated-types-with-mutability", "title": "Lifetime Parameters in Associated Types with Mutability", "body": "<p>I'm trying to write an entity-component system in Rust (version <code>rustc 1.19.0-nightly (557967766 2017-05-26)</code>) without the use of downcasting, and preferably also without macros. The general architecture is a loose amalgamation of <code>specs</code> and <code>calx-ecs</code>. </p>\n\n<p>I'm struggling with the definition of a working <code>run</code> method that executes system actions based on their selected components. The requirement is that systems may borrow components of each relevant entity mutably. However, I'm really fighting with the borrow checker, and I'm a bit lost. </p>\n\n<p>The <code>run</code> method is implemented by the <code>Scheduler</code> struct, which owns a <code>World</code> struct and a vector of boxed system trait objects.</p>\n\n<pre><code>pub type ComponentMask = u8;\npub trait AssemblyTrait {\n    fn new() -&gt; Self;\n    fn match_mask(&amp;self, entity: &amp;Entity, mask: ComponentMask) -&gt; bool;\n    fn remove(&amp;mut self, entity: &amp;Entity);\n}\npub trait ViewTrait&lt;'a&gt; {\n    type View;\n    fn get_view(&amp;'a mut self, entity: &amp;Entity) -&gt; Self::View;\n}\npub struct World&lt;'a, A: 'a + AssemblyTrait + ViewTrait&lt;'a&gt;&gt; {\n    next_idx: usize,\n    next_uuid:  UUID,\n    free_indices: Vec&lt;usize&gt;,\n    entities: ComponentContainer&lt;bool&gt;,\n    pub components: A,\n    phantom: marker::PhantomData&lt;&amp;'a A&gt;,\n}\npub struct Scheduler&lt;'a, A&gt; where A: 'a + AssemblyTrait + ViewTrait&lt;'a&gt; {\n    world: World&lt;'a, A&gt;,\n    systems: Vec&lt;Box&lt;'static + SystemTrait&lt;'a, A&gt;&gt;&gt;,\n}\nimpl&lt;'a, A&gt; Scheduler&lt;'a, A&gt; where A: 'a + AssemblyTrait + ViewTrait&lt;'a&gt; {\n    // Some methods ommitted.\n    pub fn run(&amp;'a mut self) {\n        for system in self.systems.iter() {\n            let mask = system.get_mask();\n            let mut components: Vec&lt;A::View&gt; = self.world.iter()\n                .filter(|e| self.world.match_mask(e, mask))\n                .map(|e| self.world.components.get_view(e))\n                .collect();\n            if components.len() &gt; 0 {\n                system.run(&amp;components);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The system trait is defined as follows:</p>\n\n<pre><code>pub trait SystemTrait&lt;'a, A&gt; where A: AssemblyTrait + ViewTrait&lt;'a&gt; {\n    fn get_name(&amp;self) -&gt; &amp;'static str;\n    fn get_mask(&amp;self) -&gt; ComponentMask;\n    fn run(&amp;mut self, components: &amp;mut [A::View]);\n}\n</code></pre>\n\n<p>I've posted <a href=\"https://gist.github.com/youngec/8badf6887e337e8aa4753759db220ba5\" rel=\"nofollow noreferrer\">the full implementation</a> as well.</p>\n\n<p>The definition of the <code>ViewTrait</code> can be found in <a href=\"https://gist.github.com/youngec/2f055cbcf7fc46cab45bb33dd0d8ae57\" rel=\"nofollow noreferrer\">this minimal working example</a>, which I managed to get working thanks to <a href=\"https://stackoverflow.com/questions/33734640/lifetime-parameters-in-associated-type#33756123\">Lifetime parameters in associated type</a>. </p>\n\n<p>While the above example works properly, I continue to get lifetime errors for the <code>Scheduler::run</code> method:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n   --&gt; src\\lib.rs:261:48\n    |\n261 |                 .map(|e| self.world.components.get_view(e))\n    |                                                ^^^^^^^^\n    |\nnote: first, the lifetime cannot outlive the lifetime  as defined on the body at 261:22...\n   --&gt; src\\lib.rs:261:22\n    |\n261 |                 .map(|e| self.world.components.get_view(e))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nnote: ...so that closure can access `self`\n   --&gt; src\\lib.rs:261:26\n    |\n261 |                 .map(|e| self.world.components.get_view(e))\n    |                          ^^^^^^^^^^^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 244:1...\n   --&gt; src\\lib.rs:244:1\n    |\n244 | / impl&lt;'a, A&gt; Scheduler&lt;'a, A&gt; where A: 'a + AssemblyTrait + ViewTrait&lt;'a&gt; {\n245 | |     pub fn new(world: World&lt;'a, A&gt;) -&gt; Scheduler&lt;'a, A&gt; {\n246 | |         Scheduler {\n247 | |             world: world,\n...   |\n267 | |     }\n268 | | }\n    | |_^\nnote: ...so that types are compatible (expected &amp;'a mut A, found &amp;mut A)\n   --&gt; src\\lib.rs:261:48\n    |\n261 |                 .map(|e| self.world.components.get_view(e))\n    |                                                ^^^^^^^^\n</code></pre>\n"}, {"tags": ["struct", "reference", "iterator", "rust", "lifetime"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495835200, "post_id": 44210486, "comment_id": 75433526, "body": "&quot;and return a tuple of references to internal data in the struct&quot; Are you sure you don&#39;t want a method, rather than a function object in a field? Right now you&#39;re using <code>next_fn</code> as if it was a method."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495835305, "post_id": 44210486, "comment_id": 75433544, "body": "The field simply holds a pointer to a method on the object. It&#39;s not nice, but I&#39;m porting python so there&#39;s a lot that doesn&#39;t translate nicely."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495835502, "post_id": 44210486, "comment_id": 75433599, "body": "Methods from Python do translate nicely... into <a href=\"https://doc.rust-lang.org/book/method-syntax.html\" rel=\"nofollow noreferrer\">methods</a>."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495835675, "post_id": 44210486, "comment_id": 75433641, "body": "yeah but the original python uses a pointer to a method to decide which method to call, so this does the same. Anyway I don&#39;t see how this is relevant to the question I asked."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495837792, "post_id": 44210486, "comment_id": 75434186, "body": "It matters because you might end up with lifetime conflicts. Can you add a minimal example of a function that you would feed such an object with?"}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495840577, "post_id": 44210486, "comment_id": 75434836, "body": "Ok so I added the general mechanism for choosing a function. I suppose I could just keep the bool and use a conditional in the <code>next</code> function, but that doesn&#39;t change the fact that the return type has references and so lifetime annotations come into it."}, {"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495842928, "post_id": 44210486, "comment_id": 75435337, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/145246/discussion-between-camden-narzt-and-e-net4\">continue this discussion in chat</a>."}], "answers": [{"comments": [{"owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1495844121, "post_id": 44211486, "comment_id": 75435542, "body": "<code>Note that usually this isn&#39;t a concern to consumers of the struct, since the concrete lifetimes are then imposed by the compiler</code> That is my question, how can i get that to work for the LogstreamProcessor."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "edited": false, "score": 0, "creation_date": 1495845253, "post_id": 44211486, "comment_id": 75435745, "body": "@CamdenNarzt As I stated at the beginning of the answer, you would need an explicit lifetime on that struct as well. The compiler does not automatically resolve that."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 1, "last_activity_date": 1495842403, "last_edit_date": 1495842403, "creation_date": 1495842039, "answer_id": 44211486, "question_id": 44210486, "link": "https://stackoverflow.com/questions/44210486/can-i-limit-the-lifetime-pollution-from-a-struct/44211486#44211486", "title": "Can I limit the lifetime pollution from a struct?", "body": "<blockquote>\n  <p>Can I limit the lifetime pollution from a struct?</p>\n</blockquote>\n\n<p>Generically, if you're using them in any of your struct's fields, then <strong>you can't</strong>. They are made explicit for very good reasons (see <a href=\"https://stackoverflow.com/q/31609137/1233251\">Why are explicit lifetimes needed in Rust?</a>), and once you have a struct containing objects that require explicit lifetimes, then they must be propagated.</p>\n\n<p>Note that usually this isn't a concern to consumers of the struct, since the concrete lifetimes are then imposed by the compiler:</p>\n\n<pre><code>struct NameRef&lt;'a&gt;(&amp;'a str);\n\nlet name = NameRef(\"Jake\"); // 'a is 'static\n</code></pre>\n\n<p>One could also slightly mitigate the \"noise\" on the implementation of <code>next</code> by using the definition of <code>Self::Item</code>.</p>\n\n<pre><code>impl&lt;'a&gt; Iterator for LogReader&lt;'a &gt; {\n    type Item = (&amp;'a str,&amp;'a[ConvertedValue]);\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        (self.next_fn)(self)\n    }\n}\n</code></pre>\n\n<p>However, your concern actually hides a more serious issue: Unlike you've mentioned, the values returned from <code>next</code> are not necessarily internal data from the struct. They actually live for as long as the generic lifetime <code>'a</code>, and nothing inside <code>LogReader</code> is actually bound by that lifetime.</p>\n\n<p>This means two things:</p>\n\n<p>(1) I could pass a function that gives something completely different, and it would work just fine:</p>\n\n<pre><code>static NO_DATA: &amp;[()] = &amp;[()];\nfn my_next_fn&lt;'a&gt;(reader: &amp;mut LogReader&lt;'a&gt;) -&gt; Option&lt;(&amp;'a str, &amp;'a[ConvertedValue])&gt; {\n    Some((\"wat\", NO_DATA))\n}\n</code></pre>\n\n<p>(2) Even if I wanted my function to return something from the log reader's internal data, it wouldn't work because the lifetimes do not match at all. Let's try it out anyway to see what happens:</p>\n\n<pre><code>static DATA: &amp;[()] = &amp;[()];\n\nfn my_next_fn&lt;'a&gt;(reader: &amp;mut LogReader&lt;'a&gt;) -&gt; Option&lt;(&amp;'a str, &amp;'a[ConvertedValue])&gt; {\n    Some((&amp;reader.data[0..4], DATA))\n}\n\nfn main() {\n    let mut a = LogReader {\n      data: \"This is DATA!\".to_owned(),\n      next_fn: my_next_fn\n    };\n\n    println!(\"{:?}\", a.next());\n}\n</code></pre>\n\n<p>The compiler would throw you this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n  --&gt; src/main.rs:26:12\n   |\n26 |     Some((&amp;reader.data[0..4], DATA))\n   |            ^^^^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 25:88...\n  --&gt; src/main.rs:25:89\n   |\n25 |   fn my_next_fn&lt;'a&gt;(reader: &amp;mut LogReader&lt;'a&gt;) -&gt; Option&lt;(&amp;'a str, &amp;'a[ConvertedValue])&gt; {\n   |  _________________________________________________________________________________________^ starting here...\n26 | |     Some((&amp;reader.data[0..4], DATA))\n27 | | }\n   | |_^ ...ending here\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:26:12\n   |\n26 |     Some((&amp;reader.data[0..4], DATA))\n   |            ^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the body at 25:88...\n  --&gt; src/main.rs:25:89\n   |\n25 |   fn my_next_fn&lt;'a&gt;(reader: &amp;mut LogReader&lt;'a&gt;) -&gt; Option&lt;(&amp;'a str, &amp;'a[ConvertedValue])&gt; {\n   |  _________________________________________________________________________________________^ starting here...\n26 | |     Some((&amp;reader.data[0..4], DATA))\n27 | | }\n   | |_^ ...ending here\nnote: ...so that expression is assignable (expected std::option::Option&lt;(&amp;'a str, &amp;'a [()])&gt;, found std::option::Option&lt;(&amp;str, &amp;[()])&gt;)\n  --&gt; src/main.rs:26:5\n   |\n26 |     Some((&amp;reader.data[0..4], DATA))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>...where the anonymous lifetime #1 is the log reader's lifetime. Forcing <code>&amp;mut LogReader</code> to also have a lifetime <code>'a</code> (<code>&amp;'a mut LogReader&lt;'a&gt;</code>) would lead to further lifetime issues when attempting to implement <code>Iterator</code>. This basically narrows down to the fact that <code>'a</code> is incompatible with references to values of <code>LogReader</code> themselves.</p>\n\n<p>So, how should we fix that?</p>\n\n<blockquote>\n  <p>but that doesn't change the fact that the return type has references and so lifetime annotations come into it</p>\n</blockquote>\n\n<p>Although that is not accurate (since lifetime elision can occur in some cases),  that gives a hint to the solution: either avoid returning references at all or delegate data to a separate object, so that <code>'a</code> can be bound to that object's lifetime. The final part of the answer to your question is in <a href=\"https://stackoverflow.com/q/24574741/1233251\">Iterator returning items by reference, lifetime issue</a>.</p>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 142, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1495842403, "creation_date": 1495834873, "last_edit_date": 1495839597, "question_id": 44210486, "link": "https://stackoverflow.com/questions/44210486/can-i-limit-the-lifetime-pollution-from-a-struct", "title": "Can I limit the lifetime pollution from a struct?", "body": "<p>I have a struct which contains some stuff. I implement the <code>Iterator</code> trait for that struct, and return a tuple of references to internal data in the struct. That necessitates that I annotate at least some things with lifetimes. What I want is to minimize the lifetime annotation, especially when it comes to other structs which have the original struct as a member.</p>\n\n<p>some code:</p>\n\n<pre><code>pub struct LogReader&lt;'a&gt; {\n    data:String,\n    next_fn:fn(&amp;mut LogReader)-&gt;Option&lt;(&amp;'a str,&amp;'a [ConvertedValue])&gt;,\n//...\n}\n\npub struct LogstreamProcessor {\n    reader: LogReader, // doesn't work without polluting LogstreamProcessor with lifetimes\n//...\n}\n\nimpl&lt;'a&gt; Iterator for LogReader&lt;'a &gt; {\n    type Item = (&amp;'a str,&amp;'a[ConvertedValue]);\n\n    fn next(&amp;mut self) -&gt; Option&lt;(&amp;'a str,&amp;'a[ConvertedValue])&gt;{(self.next_fn)(self)}\n\n}\n\nimpl &lt;'a&gt; LogReader&lt;'a&gt; {\n    pub fn new(textFile:Option&lt;bool&gt;) -&gt; LogReader&lt;'a&gt; {\n        LogReader {\n            next_fn:if textFile.unwrap_or(false) { LogReader::readNextText }else{ LogReader::readNextRaw },\n            data: \"blah\".to_string()\n        }\n    }\n\n    fn readNextText(&amp;mut self)-&gt;Option&lt;(&amp;str,&amp;[ConvertedValue])&gt;{unimplemented!();}\n    fn  readNextRaw(&amp;mut self)-&gt;Option&lt;(&amp;str,&amp;[ConvertedValue])&gt;{unimplemented!();}\n}\n</code></pre>\n"}, {"tags": ["json", "rust", "serde"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495816330, "post_id": 44205435, "comment_id": 75425018, "body": "It is <b>strongly recommended</b> that you read <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>, which covers the concept of <code>Option</code> and <code>Result</code>, which are very pervasive in Rust."}, {"owner": {"reputation": 293, "user_id": 46470, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/580b4863e50ebc684d7470a90fb71820?s=128&d=identicon&r=PG", "display_name": "Hartmut", "link": "https://stackoverflow.com/users/46470/hartmut"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495819117, "post_id": 44205435, "comment_id": 75426455, "body": "I already did this, but a hint would be helpful how to handle this case, as it seems I need to think a little bit different than I expected. As I said above my assumption is that I need to implement the Visitor Trait and I wanted to avoid that. As I said below: I also wanted to avoid to parse all the read Structures a second time and hoped that Serde has some kind of magic to help."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1495845109, "post_id": 44205435, "comment_id": 75435712, "body": "Your question would be clearer if you provided a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. As-is, you&#39;ve provided code and the input, but not what <i>output you want</i>. As you can see, the ambiguity you&#39;ve presented has resulted in two wildly different answers."}, {"owner": {"reputation": 293, "user_id": 46470, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/580b4863e50ebc684d7470a90fb71820?s=128&d=identicon&r=PG", "display_name": "Hartmut", "link": "https://stackoverflow.com/users/46470/hartmut"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1496142053, "post_id": 44205435, "comment_id": 75528627, "body": "ok, thanks, I will do this the next time."}], "answers": [{"comments": [{"owner": {"reputation": 293, "user_id": 46470, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/580b4863e50ebc684d7470a90fb71820?s=128&d=identicon&r=PG", "display_name": "Hartmut", "link": "https://stackoverflow.com/users/46470/hartmut"}, "edited": false, "score": 0, "creation_date": 1495818679, "post_id": 44206069, "comment_id": 75426230, "body": "I hoped there is some trick to automate this conversion. I wanted to avoid to parse the Element struct a second time after it came back from the Serde  parser and repair all the null values myself."}], "tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 4, "last_activity_date": 1495815498, "creation_date": 1495815498, "answer_id": 44206069, "question_id": 44205435, "link": "https://stackoverflow.com/questions/44205435/how-to-deserialize-a-json-file-which-contains-null-values-using-serde/44206069#44206069", "title": "How to deserialize a JSON file which contains null values using Serde?", "body": "<p>Any field that can be null should be an <code>Option</code> type so that you can handle the null case. Something like this?</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug, Clone)]\npub struct Element {\n    ...\n    color: Option&lt;String&gt;,\n    ...\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 293, "user_id": 46470, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/580b4863e50ebc684d7470a90fb71820?s=128&d=identicon&r=PG", "display_name": "Hartmut", "link": "https://stackoverflow.com/users/46470/hartmut"}, "edited": false, "score": 0, "creation_date": 1495896214, "post_id": 44210829, "comment_id": 75446910, "body": "Thank you, especially for the explanation. I think I will go with the second way, so I can avoid a translation class (from a structure with Option&lt;T&gt; to the structure I like to work with)"}, {"owner": {"reputation": 1634, "user_id": 1734785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cda4a051ab231487e0517599ff9bc07f?s=128&d=identicon&r=PG", "display_name": "Christophe Vidal", "link": "https://stackoverflow.com/users/1734785/christophe-vidal"}, "edited": false, "score": 0, "creation_date": 1598860708, "post_id": 44210829, "comment_id": 112583501, "body": "I really wish Serde would handle this in a better way. <code>null</code> is not a valid value in Rust but <i>is</i> a valid value in a JSON, thus Serde shall just implement the basic JSON standards. The solutions at the moment are all verbose and sub-optimals. Either using Option&lt;...&gt; for every field (and then <code>unwrap_or_else</code> for every field, huh...), or append a <code>#[serde(deserialize_with=&quot;...&quot;)]</code> to every field, which seems actually maybe better"}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 22, "last_activity_date": 1598861021, "last_edit_date": 1598861021, "creation_date": 1495837084, "answer_id": 44210829, "question_id": 44205435, "link": "https://stackoverflow.com/questions/44205435/how-to-deserialize-a-json-file-which-contains-null-values-using-serde/44210829#44210829", "title": "How to deserialize a JSON file which contains null values using Serde?", "body": "<p>A deserialization error occurs because the struct definition is incompatible with the incoming objects: the <code>color</code> field can also be <code>null</code>, as well as a string, yet giving this field the type <code>String</code> forces your program to always expect a string. This is the default behaviour, which makes sense. Be reminded that <code>String</code> (or other containers such as <code>Box</code>) are not &quot;nullable&quot; in Rust. As for a <code>null</code> value not triggering the default value instead, that is just how Serde works: if the object field wasn't there, it would work because you have added the default field attribute. On the other hand, a field &quot;color&quot; with the value <code>null</code> is not equivalent to no field at all.</p>\n<p>One way to solve this is to adjust our application's specification to accept <code>null | string</code>, as specified by @user25064's answer:</p>\n<pre><code>#[derive(Serialize, Deserialize, Debug, Clone)]\npub struct Element {\n    color: Option&lt;String&gt;,\n}\n</code></pre>\n<p><a href=\"http://play.integer32.com/?gist=f23ff1a25fe74b54454f0169e54c23c3&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground with minimal example</a></p>\n<p>Another way is to write our own deserialization routine for the field, which will accept <code>null</code> and turn it to something else of type <code>String</code>. This can be done with the attribute <code>#[serde(deserialize_with=...)]</code>.</p>\n<pre><code>#[derive(Serialize, Deserialize, Debug, Clone)]\npub struct Element {\n    #[serde(deserialize_with=&quot;parse_color&quot;)]\n    color: String,\n}\n\nfn parse_color&lt;'de, D&gt;(d: D) -&gt; Result&lt;String, D::Error&gt; where D: Deserializer&lt;'de&gt; {\n    Deserialize::deserialize(d)\n        .map(|x: Option&lt;_&gt;| {\n            x.unwrap_or(&quot;black&quot;.to_string())\n        })\n}\n</code></pre>\n<p><a href=\"http://play.integer32.com/?gist=4d0d3d751b84574a8ff56207ba01a8ae&amp;version=undefined\" rel=\"nofollow noreferrer\">Playground</a></p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44331037/how-can-i-distinguish-between-a-deserialized-field-that-is-missing-and-one-that\">How can I distinguish between a deserialized field that is missing and one that is null?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 2653, "user_id": 2845044, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/781bc6fdfce6bd15a04ac3e41f1c692d?s=128&d=identicon&r=PG&f=1", "display_name": "gabhijit", "link": "https://stackoverflow.com/users/2845044/gabhijit"}, "is_accepted": false, "score": 1, "last_activity_date": 1610694355, "last_edit_date": 1610694355, "creation_date": 1610552388, "answer_id": 65705111, "question_id": 44205435, "link": "https://stackoverflow.com/questions/44205435/how-to-deserialize-a-json-file-which-contains-null-values-using-serde/65705111#65705111", "title": "How to deserialize a JSON file which contains null values using Serde?", "body": "<p>Based on code from <a href=\"https://github.com/serde-rs/serde/issues/1098#issuecomment-346706565\" rel=\"nofollow noreferrer\">here</a>, when one needs default values to be deserialized if <code>null</code> is present.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// Omitting other derives, for brevity \n#[derive(Deserialize)]\nstruct Foo {\n   #[serde(deserialize_with = &quot;deserialize_null_default&quot;)]\n   value: String, \n}\n\nfn deserialize_null_default&lt;'de, D, T&gt;(deserializer: D) -&gt; Result&lt;T, D::Error&gt;\nwhere\n    T: Default + Deserialize&lt;'de&gt;,\n    D: Deserializer&lt;'de&gt;,\n{\n    let opt = Option::deserialize(deserializer)?;\n    Ok(opt.unwrap_or_default())\n}\n</code></pre>\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d1b67fae798e958b377c622fd009de14\" rel=\"nofollow noreferrer\">playground link</a> with full example. This also works for <code>Vec</code> and <code>HashMap</code>.</p>\n"}], "owner": {"reputation": 293, "user_id": 46470, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/580b4863e50ebc684d7470a90fb71820?s=128&d=identicon&r=PG", "display_name": "Hartmut", "link": "https://stackoverflow.com/users/46470/hartmut"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8052, "favorite_count": 4, "accepted_answer_id": 44210829, "answer_count": 3, "score": 12, "last_activity_date": 1610694355, "creation_date": 1495813283, "last_edit_date": 1495815104, "question_id": 44205435, "link": "https://stackoverflow.com/questions/44205435/how-to-deserialize-a-json-file-which-contains-null-values-using-serde", "title": "How to deserialize a JSON file which contains null values using Serde?", "body": "<p>I want to deserialize the chemical elements JSON file from <a href=\"https://github.com/Bowserinator/Periodic-Table-JSON/blob/master/PeriodicTableJSON.json\" rel=\"noreferrer\">Bowserinator on github</a> using Serde. For this I created a structure with all the needed fields and derived the needed macros:</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug, Clone)]\npub struct Element {\n    name: String,\n    appearance: String,\n    atomic_mass: f64,\n    boil: f64, \n    category: String,\n    #[serde(default)]\n    color: String,\n    density: f64,\n    discovered_by: String,\n    melt: f64, \n    #[serde(default)]\n    molar_heat: f64,\n    named_by: String,\n    number: String,\n    period: u32,\n    phase: String,\n    source: String,\n    spectral_img: String,\n    summary: String,\n    symbol: String,\n    xpos: u32,\n    ypos: u32,\n}\n</code></pre>\n\n<p>This works fine until it gets to fields which contain a \"null\" value. \nE.g. for the field <code>\"color\": null,</code> in Helium.</p>\n\n<p>The error message I get is <code>{ code: Message(\"invalid type: unit value, expected a string\"), line: 8, column: 17 }</code> for this field.</p>\n\n<p>I experimented with the <code>#[serde(default)]</code> Macro. But this only works when the field is missing in the JSON file, not when there is a <code>null</code> value. </p>\n\n<p>I like to do the deserialization with the standard macros avoiding to program a Visitor Trait. Is there a trick I miss? </p>\n"}, {"tags": ["regex", "rust"], "comments": [{"owner": {"reputation": 524, "user_id": 2463246, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a463a79ce931fc953b4d4907c1d9f5ce?s=128&d=identicon&r=PG", "display_name": "schaazzz", "link": "https://stackoverflow.com/users/2463246/schaazzz"}, "edited": false, "score": 0, "creation_date": 1495785181, "post_id": 44196388, "comment_id": 75405935, "body": "I have currently resorted to passing a &quot;pre-escaped&quot; value as an arugment, e.g. <code>\\$\\{replace\\}</code>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1495789014, "post_id": 44196388, "comment_id": 75407964, "body": "It&#39;s worth noting that <code>format!</code> absolutely does not behave how you appear to think it does.  <code>&quot;abc&quot;</code> and <code>r&quot;abc&quot;</code> are not different kinds of things; they&#39;re both strings.  It&#39;s just a question of how the compiler interprets their literal contents at compile time.  Meaning that <code>format!(&quot;{}&quot;, ...)</code> and <code>format!(r#&quot;{}&quot;#, ...)</code> do the same thing.  It&#39;s also worth noting that <code>format!(&quot;{}&quot;, value)</code> is really just a long-winded way of writing <code>value.to_string()</code>."}, {"owner": {"reputation": 524, "user_id": 2463246, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a463a79ce931fc953b4d4907c1d9f5ce?s=128&d=identicon&r=PG", "display_name": "schaazzz", "link": "https://stackoverflow.com/users/2463246/schaazzz"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1495792537, "post_id": 44196388, "comment_id": 75410139, "body": "I understand now...my (incorrect) assumption was that it would convert it into a raw string since you can pass a raw string to Regex and not worry about escaping characters. Thank you for the explanation!"}], "answers": [{"tags": [], "owner": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "is_accepted": true, "score": 11, "last_activity_date": 1529320660, "last_edit_date": 1529320660, "creation_date": 1495786112, "answer_id": 44196655, "question_id": 44196388, "link": "https://stackoverflow.com/questions/44196388/how-do-i-create-a-regex-from-a-user-provided-string-which-contains-regex-metacha/44196655#44196655", "title": "How do I create a Regex from a user-provided string which contains regex metacharacters?", "body": "<p>The regex crate has a function <code>escape</code> which does what you need.</p>\n\n<p>From the <a href=\"https://docs.rs/regex/1.0.0/regex/fn.escape.html\" rel=\"noreferrer\">documentation</a>:</p>\n\n<blockquote>\n  <h1>Function <code>regex::escape</code></h1>\n\n<pre><code>pub fn escape(text: &amp;str) -&gt; String\n</code></pre>\n  \n  <p>Escapes all regular expression meta characters in <code>text</code>.<br>\n  The string returned may be safely used as a literal in a regular expression.</p>\n</blockquote>\n\n<p>So passing your <code>arg_str</code> through <code>regex::escape</code> should fix your problem.</p>\n"}], "owner": {"reputation": 524, "user_id": 2463246, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a463a79ce931fc953b4d4907c1d9f5ce?s=128&d=identicon&r=PG", "display_name": "schaazzz", "link": "https://stackoverflow.com/users/2463246/schaazzz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1316, "favorite_count": 1, "accepted_answer_id": 44196655, "answer_count": 1, "score": 5, "last_activity_date": 1599513887, "creation_date": 1495785102, "last_edit_date": 1599513887, "question_id": 44196388, "link": "https://stackoverflow.com/questions/44196388/how-do-i-create-a-regex-from-a-user-provided-string-which-contains-regex-metacha", "title": "How do I create a Regex from a user-provided string which contains regex metacharacters?", "body": "<p>I need to create a regular expression using the <code>regex</code> crate which includes a string passed as a command line argument to the program. The command line argument can contain <code>$</code> and <code>{}</code>.</p>\n<p>If I hard code the string as <code>r&quot;...&quot;</code>, then it works fine, but if I use the command line argument as <code>format!(r#&quot;{}&quot;#, arg_str)</code>, I get the following error (assuming <code>arg_str</code> = <code>${replace}</code>) :</p>\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Syntax(\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nregex parse error:\n    ${replace}\n      ^\nerror: decimal literal empty\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n)', libcore/result.rs:945:5\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n<p>Simplified code example to demonstrate this issue:</p>\n<pre><code>extern crate regex;\nuse regex::Regex;\n\nfn main() {\n    let args: Vec&lt;_&gt; = std::env::args().collect();\n    let ref arg_str = args[1];\n\n    let re = Regex::new(format!(r#&quot;{}&quot;#, arg_str).as_str()).unwrap();\n    println!(&quot;{:?}&quot;, re);\n}\n</code></pre>\n<p>If this is run with a simple argument like <code>replace</code>, there is no error, but if I pass it something like <code>${replace}</code>, I get the error mentioned above.</p>\n"}, {"tags": ["multithreading", "reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 0, "creation_date": 1495780289, "post_id": 44190369, "comment_id": 75403482, "body": "Thank you @Shepmaster, I gather that I cannot share a reference to conf with the thread because the thread may outlive the scope so again I would need a scoped thread for that. Correct? If I just remove the <code>move</code> I get the &quot;may outlive borrowed value <code>conf</code>&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 0, "creation_date": 1495805752, "post_id": 44190369, "comment_id": 75418608, "body": "@RobertCutajar-Robajz yes; that would be why the final paragraph of my answer says <i>This still doesn&#39;t allow your code to compile because there&#39;s no guarantee that the reference outlives the thread</i> and then links to an answer that talks about scoped threads. Is there some other way I could have worded that to be more understandable?"}, {"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 0, "creation_date": 1495811535, "post_id": 44190369, "comment_id": 75422363, "body": "Aha! :o) I thought you refered to the &quot;move in a reference&quot;. Perhaps it would be clearer to say upfront that I cannot do this immutable reference sharing with thread::spawn at all without a copy. Thanks a lot for your effort to educate the seeker :o)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1495749365, "last_edit_date": 1495749365, "creation_date": 1495749036, "answer_id": 44190369, "question_id": 44189288, "link": "https://stackoverflow.com/questions/44189288/why-do-i-need-to-implement-copy-and-clone-if-im-sharing-an-immutable-refere/44190369#44190369", "title": "Why do I need to implement `Copy` and `Clone` if I&#39;m sharing an immutable reference with multiple threads?", "body": "<p>Implementing <code>Copy</code> (<code>Clone</code> is incidental here) only fixes the problem because implementing it allows the compiler to implicitly duplicate the <code>Configuration</code> struct, passing a copied value into the thread.</p>\n\n<p>It needs to pass the variable by value because you told the compiler to <code>move</code> all used values into the closure:</p>\n\n<pre><code>thread::spawn(move || {\n//            ^^^^ HERE\n    handle_client(stream, &amp;conf);\n});\n</code></pre>\n\n<p>The <em>entire purpose</em> of the <code>move</code> keyword is to tell the compiler \"no, don't try to infer how variables are used inside this closure, just move everything in\".</p>\n\n<p>When you <code>move</code> <code>&amp;conf</code>, the compiler says \"OK, I'll move <code>conf</code> into the closure then take a reference to it\".</p>\n\n<p>In your case, you can just remove the <code>move</code> keyword:</p>\n\n<pre><code>thread::spawn(|| {\n    handle_client(stream, &amp;conf);\n});\n</code></pre>\n\n<p>If you really need to be able to use the <code>move</code> keyword <strong>and</strong> pass in a reference, you need to <em>move in a reference</em>:</p>\n\n<pre><code>let conf = &amp;conf;\nthread::spawn(move || {\n    handle_client(stream, conf);\n});\n</code></pre>\n\n<p>This still doesn't allow your code to compile because there's no guarantee that the reference outlives the thread. That's discussed thoroughly in <a href=\"https://stackoverflow.com/q/32750829/155423\">Passing a reference to a stack variable to a scoped thread</a>.</p>\n"}], "owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 384, "favorite_count": 1, "accepted_answer_id": 44190369, "answer_count": 1, "score": 4, "last_activity_date": 1495749365, "creation_date": 1495744050, "last_edit_date": 1495748709, "question_id": 44189288, "link": "https://stackoverflow.com/questions/44189288/why-do-i-need-to-implement-copy-and-clone-if-im-sharing-an-immutable-refere", "title": "Why do I need to implement `Copy` and `Clone` if I&#39;m sharing an immutable reference with multiple threads?", "body": "<p>Still struggling with the Rust mind shift, now I have this use case - one configuration for a multi-threaded <code>TcpListener</code>:</p>\n\n<pre><code>use std::net::{TcpListener, TcpStream, ToSocketAddrs};\nuse std::thread;\n\nfn main() {\n    serve(\"127.0.0.1:3333\", Configuration { do_something: true });\n}\n\n//#[derive(Copy, Clone)]\npub struct Configuration {\n    pub do_something: bool,\n}\n\npub fn serve&lt;A: ToSocketAddrs&gt;(addr: A, conf: Configuration) {\n    let listener = TcpListener::bind(addr).expect(\"bind failed\");\n\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) =&gt; {\n                thread::spawn(move || {\n                    handle_client(stream, &amp;conf);\n                });\n            }\n            Err(e) =&gt; {\n                println!(\"Connection failed: {}\", e);\n            }\n        }\n    }\n}\n\nfn handle_client(stream: TcpStream, conf: &amp;Configuration) {\n    if conf.do_something {\n        //stream....\n    }\n}\n</code></pre>\n\n<p>I'm happy that the <code>TcpStream</code> is consumed by <code>handle_client</code>, that's it's purpose, but why does <code>Configuration</code> have to be copied for each thread? I'd like to have just one copy and share an immutable reference with all threads. Is that possible? Or perhaps I'm missing the point.</p>\n\n<p>Why do I need the <code>Copy</code> and <code>Clone</code> traits if I'm passing <code>Configuration</code> by reference? This confused me a good deal:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: capture of moved value: `conf`\n  --&gt; src/main.rs:19:64\n   |\n19 |                 thread::spawn(move || { handle_client(stream, &amp;conf); });\n   |                               -------                          ^^^^ value captured here after move\n   |                               |\n   |                               value moved (into closure) here\n   |\n   = note: move occurs because `conf` has type `Configuration`, which does not implement the `Copy` trait\n</code></pre>\n"}, {"tags": ["arrays", "rust"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 15, "last_activity_date": 1605859051, "last_edit_date": 1605859051, "creation_date": 1495736162, "answer_id": 44187256, "question_id": 44186660, "link": "https://stackoverflow.com/questions/44186660/initializing-an-array-of-strings-in-rust/44187256#44187256", "title": "Initializing an array of strings in Rust", "body": "<p>At the moment, initialization of arrays is still a bit quirky.\nIn particular, having <code>Default</code> would have been useful here, but it's only implemented for arrays up to 32:</p>\n<pre><code>let array: [String; 32] = Default::default();\n</code></pre>\n<p>Any number over that will fail to compile because, while Rust 1.47 now implements some traits over a generic size for array types, <code>Default</code> is yet not one of them. These 32 implementations of <code>Default</code> were &quot;sort-of&quot; added manually.</p>\n<p>We can overcome that with alternative container types, such as <code>Vec</code>. The <code>vec!</code> macro will let you clone a string as many times as you wish to fill in the new vector:</p>\n<pre><code>let mut array: Vec&lt;String&gt; = vec![String::new(); 126];\n</code></pre>\n<p>But of course, depending on your use case, you might also consider going lazy and only collecting the final outcomes using the <a href=\"https://doc.rust-lang.org/stable/std/iter/index.html\" rel=\"nofollow noreferrer\">Iterator API</a>.</p>\n"}], "owner": {"reputation": 73, "user_id": 3161500, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a4942d75c9a30e618b08e54b8ad853e?s=128&d=identicon&r=PG&f=1", "display_name": "user3161500", "link": "https://stackoverflow.com/users/3161500/user3161500"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9709, "favorite_count": 1, "accepted_answer_id": 44187256, "answer_count": 1, "score": 6, "last_activity_date": 1605859051, "creation_date": 1495734165, "last_edit_date": 1495740581, "question_id": 44186660, "link": "https://stackoverflow.com/questions/44186660/initializing-an-array-of-strings-in-rust", "title": "Initializing an array of strings in Rust", "body": "<p>I want to create a mutable array of a fixed size. The elements are initialized later in the program. How do I initialize the array?</p>\n\n<p>I tried doing this:</p>\n\n<pre><code>let mut array: [String; 126] = [String::new(); 126];\n</code></pre>\n\n<p>and it gives me the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound 'std::string::String: std::marker::Copy' is not satisfied\nthe trait 'std::marker::Copy' is not implemented for 'std::string::String'\n</code></pre>\n\n<p>how do I initialize the array with new strings?</p>\n"}, {"tags": ["arrays", "for-loop", "struct", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1495721129, "last_edit_date": 1495721129, "creation_date": 1495720614, "answer_id": 44182409, "question_id": 44182269, "link": "https://stackoverflow.com/questions/44182269/initialize-array-holding-struct-more-efficiently/44182409#44182409", "title": "Initialize array holding struct more efficiently", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.uninitialized.html\" rel=\"nofollow noreferrer\"><code>std::mem::uninitialized()</code></a>. Note, however, that it is considered unsafe and needs to be marked as such:</p>\n\n<pre><code>let mut t: [T; N] = unsafe { std::mem::uninitialized() };\n</code></pre>\n\n<p>As stated by the aforelinked docs:</p>\n\n<blockquote>\n  <p>This is useful for FFI functions and <strong>initializing arrays</strong> sometimes,\n  but should generally be avoided.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1495723284, "post_id": 44182576, "comment_id": 75380564, "body": "If you use <code>std::ptr::write(e, t)</code> rather than <code>*e = t</code> does it eliminate the <code>Copy</code>-only restriction?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 4, "creation_date": 1495723491, "post_id": 44182576, "comment_id": 75380698, "body": "@ildjarn: That&#39;s got nothing to do with it.  I said that because non-<code>Copy</code> types can have custom <code>Drop</code> logic, which can cause Bad Things\u2122 to happen if you make a mistake and drop uninitialised memory.  The sort of people who don&#39;t need to follow that advice are the sort of people who&#39;ve already read the <a href=\"https://doc.rust-lang.org/nomicon/\" rel=\"nofollow noreferrer\">Rustonomicon</a>, and aren&#39;t likely to need advice from the likes of me."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1495723548, "last_edit_date": 1495723548, "creation_date": 1495721136, "answer_id": 44182576, "question_id": 44182269, "link": "https://stackoverflow.com/questions/44182269/initialize-array-holding-struct-more-efficiently/44182576#44182576", "title": "Initialize array holding struct more efficiently", "body": "<blockquote>\n  <p>I'm unsure why the array <code>t</code> must be initialized that way.</p>\n</blockquote>\n\n<p>Because Rust doesn't let you touch (entirely or partially) uninitialised values.  The compiler isn't smart enough to prove that the loop will <em>definitely</em> initialise everything, so it just forbids it.</p>\n\n<p>Now, the <em>optimiser</em> is a different story.  That <em>can</em> notice that the initialisation is redundant and skip it... in theory.  It doesn't appear to do so with that code and the current compiler.  Such is optimisation.</p>\n\n<blockquote>\n  <p>I just want to know if there is a smarter way for the array and it's initialization with the first for-loop.</p>\n</blockquote>\n\n<p>The smart way is to just leave the code as-it-is.  Statistically speaking, it's unlikely to be a bottleneck.  If profiling suggests that it <em>is</em> a bottleneck, then you can use <a href=\"https://doc.rust-lang.org/std/mem/fn.uninitialized.html\" rel=\"nofollow noreferrer\"><code>uninitialised</code></a>.  However, note that doing so can lead to undefined behaviour if you use it wrong.  Although not an exhaustive list, you <em>definitely avoid</em> using it on any type that is not <code>Copy</code>.</p>\n\n<p>If you do <em>need</em> to use it, I strongly recommend also adjusting the first loop to make forgetting to initialise an element <em>or</em> a field in the structure impossible:</p>\n\n<pre><code>    let mut t: [T; N] = unsafe { ::std::mem::uninitialized() };\n\n    for (i, e) in t.iter_mut().enumerate() {\n        *e = T {\n            a: 0.0,\n            b: 1.0,\n            f: i as f64 * 0.25,\n        }\n    }\n</code></pre>\n"}], "owner": {"reputation": 77, "user_id": 6290347, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21e64c6360762ad69bc0a541c7f4439b?s=128&d=identicon&r=PG&f=1", "display_name": "hecaex", "link": "https://stackoverflow.com/users/6290347/hecaex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 577, "favorite_count": 0, "accepted_answer_id": 44182576, "answer_count": 2, "score": 2, "last_activity_date": 1495723548, "creation_date": 1495720199, "question_id": 44182269, "link": "https://stackoverflow.com/questions/44182269/initialize-array-holding-struct-more-efficiently", "title": "Initialize array holding struct more efficiently", "body": "<p>I have the following code:</p>\n\n<pre><code>const N: usize = 10000;\nconst S: usize = 7000;\n\n#[derive(Copy, Clone, Debug)]\nstruct T {\n    a: f64,\n    b: f64,\n    f: f64\n}\n\nfn main() {\n    let mut t: [T; N] = [T {a: 0.0, b: 0.0, f: 0.0}; N];\n\n    for i in 0..N {\n        t[i].a = 0.0;\n        t[i].b = 1.0;\n        t[i].f = i as f64 * 0.25;\n    }\n\n    for _ in 0..S {\n        for i in 0..N {\n            t[i].a += t[i].b * t[i].f;\n            t[i].b -= t[i].a * t[i].f;\n        }\n        println!(\"{}\", t[1].a);\n    }\n}\n</code></pre>\n\n<p>I'm unsure why the array <code>t</code> must be initialized that way. The first for-loop is intended to initialize the array with the containing struct to their respective values.</p>\n\n<p>When I try to omit the initialization directly with the array:</p>\n\n<pre><code>let mut t: [T; N];\n</code></pre>\n\n<p>I get the following error:</p>\n\n<blockquote>\n  <p>error[E0381]: use of possibly uninitialized variable: t</p>\n</blockquote>\n\n<p>All for-loops are intended to be as such, I just want to know if there is a smarter way for the array and it's initialization with the first for-loop.</p>\n"}, {"tags": ["error-handling", "rust", "xml-rs"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1495718953, "post_id": 44181572, "comment_id": 75377544, "body": "You don&#39;t own <code>xml::Error</code>, so creating custom instances of that error doesn&#39;t sound right. You are actually advised to roll your own error type."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1495719727, "post_id": 44181572, "comment_id": 75378086, "body": "Also, please include the compiler&#39;s error messages on those code snippets."}, {"owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1495813994, "post_id": 44181572, "comment_id": 75423821, "body": "Hello @E_net4 I added the error message in the main question message. Also, I know I can create my own error type, for now this is the workaround I&#39;m using to progress with the code.. But for this case, I want to use <code>xml::reader::Error</code> since I see this error as a xml syntax error."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1495818105, "post_id": 44206247, "comment_id": 75425930, "body": "While technically this compiles and works, I don&#39;t think this is a <b>good</b> idea. If the library intended you to put whatever custom error kinds you wanted, they would have exposed a more obvious way of doing so. This seems much closer to abusing accidentally public functionality."}], "tags": [], "owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "is_accepted": false, "score": 1, "last_activity_date": 1495818123, "last_edit_date": 1495818123, "creation_date": 1495816296, "answer_id": 44206247, "question_id": 44181572, "link": "https://stackoverflow.com/questions/44181572/using-xml-rs-xmlreadererror-to-return-a-custom-error/44206247#44206247", "title": "Using xml-rs xml::reader::Error to return a custom error", "body": "<p>The problem was that I was not adding the <code>&amp;</code> to the event_reader. Adding it fixed the issue and now the <code>From</code> implementation is called and I can instantiate an <code>xml::reader::Error</code>:</p>\n\n<pre><code>(&amp;event_reader, \"custom error\").into()\n</code></pre>\n"}], "owner": {"reputation": 1113, "user_id": 969295, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dea809ef5ac9770fb400f1eb65544443?s=128&d=identicon&r=PG", "display_name": "Sassa", "link": "https://stackoverflow.com/users/969295/sassa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1495818123, "creation_date": 1495718154, "last_edit_date": 1495814719, "question_id": 44181572, "link": "https://stackoverflow.com/questions/44181572/using-xml-rs-xmlreadererror-to-return-a-custom-error", "title": "Using xml-rs xml::reader::Error to return a custom error", "body": "<p>I'm using <code>xml-rs</code> to do some xml parsing and there are some special cases where I want to issue a custom <code>xml::reader::Error</code>. This error struct is implemented as:</p>\n\n<pre><code>pub struct Error {\n    pos: TextPosition,\n    kind: ErrorKind,\n}\n</code></pre>\n\n<p><code>pos</code> and <code>kind</code> attributes are private, so I cannot instantiate a <code>Error</code> manually, and there is no <code>new()</code> method or something like that.</p>\n\n<p>What I have is this <code>From</code> implementation:</p>\n\n<pre><code>impl&lt;'a, P, M&gt; From&lt;(&amp;'a P, M)&gt; for Error where P: Position, M: Into&lt;Cow&lt;'static, str&gt;&gt; {\n    fn from(orig: (&amp;'a P, M)) -&gt; Self {\n        Error{\n            pos: orig.0.position(),\n            kind: ErrorKind::Syntax(orig.1.into())\n        }\n    }\n}\n</code></pre>\n\n<p>I can use this to instantiate a custom error, I need a <code>P</code> which implies a type which implements <code>xml::common::Position</code> trait and a <code>M</code> which is a <code>Into&lt;Cow&lt;'static, str&gt;&gt;</code>.</p>\n\n<p>For, <code>P</code>, I think I can use <code>xml::reader::EventReader</code> since it implements <code>xml::common::Position</code>. But I'm not sure how to obtain <code>Into&lt;Cow&lt;'static, str&gt;&gt;</code>.</p>\n\n<p>I tried doing something like this:</p>\n\n<pre><code>(event_reader, \"custom error\").into()\n</code></pre>\n\n<p>But it doesn't work, I think because <code>\"custom error\"</code> cannot be converted to <code>Into&lt;Cow&lt;'static, str&gt;&gt;</code> or something like that.</p>\n\n<p>The error message I receive is this one:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `xml::reader::Error: std::convert::From&lt;(xml::EventReader&lt;std::io::BufReader&lt;&amp;[u8]&gt;&gt;, &amp;str)&gt;` is not satisfied\n   --&gt; src/main.rs:234:78\n    |\n234 |                                     _ =&gt; return Err((event_reader, \"custom error\").into()),\n    |                                                                                    ^^^^ the trait `std::convert::From&lt;(xml::EventReader&lt;std::io::BufReader&lt;&amp;[u8]&gt;&gt;, &amp;str)&gt;` is not implemented for `xml::reader::Error`\n    |\n    = help: the following implementations were found:\n              &lt;xml::reader::Error as std::convert::From&lt;(&amp;'a P, M)&gt;&gt;\n              &lt;xml::reader::Error as std::convert::From&lt;xml::util::CharReadError&gt;&gt;\n              &lt;xml::reader::Error as std::convert::From&lt;std::io::Error&gt;&gt;\n    = note: required because of the requirements on the impl of `std::convert::Into&lt;xml::reader::Error&gt;` for `(xml::EventReader&lt;std::io::BufReader&lt;&amp;[u8]&gt;&gt;, &amp;str)`\n</code></pre>\n\n<p>As can be seen, from the error, Rust is unable to convert my <code>(event_reader, \"custom error\")</code> tuple to the available <code>xml::reader::Error as std::convert::From&lt;(&amp;'a P, M)&gt;</code> implementation.</p>\n\n<p>That's what I want to know why and how to fix.</p>\n"}, {"tags": ["memory-management", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1495732642, "last_edit_date": 1495732642, "creation_date": 1495709565, "answer_id": 44178756, "question_id": 44178168, "link": "https://stackoverflow.com/questions/44178168/how-to-return-the-result-of-serde-jsonfrom-str-when-called-with-a-string-that/44178756#44178756", "title": "How to return the result of serde_json::from_str when called with a String that will be dropped at the end of the function?", "body": "<p>The idiomatic solution is either of:</p>\n\n<ul>\n<li>having <code>T</code> implement <code>DeserializeOwned</code> instead,</li>\n<li>have two methods: one to create the string, and one to deserialize, and ensure that the deserialized result is stored longer than <code>T</code>.</li>\n</ul>\n\n<p>The former is, of course, much easier.</p>\n"}], "owner": {"reputation": 20334, "user_id": 78667, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/b13a3e168d85c7f7f45ae1e54dc9db57?s=128&d=identicon&r=PG", "display_name": "Arkaitz Jimenez", "link": "https://stackoverflow.com/users/78667/arkaitz-jimenez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 236, "favorite_count": 0, "accepted_answer_id": 44178756, "answer_count": 1, "score": 2, "last_activity_date": 1495732642, "creation_date": 1495708007, "last_edit_date": 1495725448, "question_id": 44178168, "link": "https://stackoverflow.com/questions/44178168/how-to-return-the-result-of-serde-jsonfrom-str-when-called-with-a-string-that", "title": "How to return the result of serde_json::from_str when called with a String that will be dropped at the end of the function?", "body": "<p>I have a newly allocated <code>String</code> inside a function, I need to create a derived object that borrows <code>&amp;str</code> from that <code>String</code>, and return the given object.  </p>\n\n<p>I know my code is wrong because the <code>String</code> lifetime is that of the function, so the derived object will never be returned because of dangling references.  </p>\n\n<p>What would be the idiomatic solution here? I cannot change the signature of <code>serde_json::from_str</code></p>\n\n<pre><code>#[inline]\npub fn get_object&lt;'a, T&gt;(json_data: &amp;'a Value, path: &amp;[&amp;str]) -&gt; Option&lt;T&gt;\n    where T: serde::Deserialize&lt;'a&gt;\n{\n    let mut pointer_str = String::new();\n    for entry in path.iter() {\n        pointer_str = format!(\"{}/{}\", pointer_str, entry);\n    }\n\n    let child = json_data.pointer(&amp;pointer_str).unwrap().to_string();\n\n    let result = serde_json::from_str(&amp;child).ok();\n    return result;\n}\n</code></pre>\n\n<p>And the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `child` does not live long enough\n  --&gt; src/lib.rs:88:40\n   |\n88 |     let result = serde_json::from_str(&amp;child).ok();\n   |                                        ^^^^^ does not live long enough\n89 |     return result;\n90 | }\n   | - borrowed value only lives until here\n</code></pre>\n"}, {"tags": ["performance", "rust", "pattern-matching"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1495709080, "post_id": 44177206, "comment_id": 75371146, "body": "As for all micro-optimization questions: if it&#39;s not a problem, use the safe alternative."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1495711044, "post_id": 44177206, "comment_id": 75372416, "body": "@ildjarn: I did my check on <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust playground</a>. I can see that the ASM you linked was compiled with a specific set of flags to reduce its size to a functional minimum; that&#39;s pretty handy."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495711247, "post_id": 44177206, "comment_id": 75372518, "body": "@MatthieuM.: this makes sense, though in this case both variants are equally safe."}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "edited": false, "score": 0, "creation_date": 1495711376, "post_id": 44177206, "comment_id": 75372611, "body": "@ljedrz : Yeah, in general I find Compiler Explorer&#39;s output much more useful than the playground&#39;s ASM listing. :-]"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495711903, "post_id": 44179479, "comment_id": 75372946, "body": "Community Wiki does not make link answers acceptable. I would personally advise just posting a regular answer, and maybe list the assembly emitted stating that both cases yield it."}, {"owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1495712052, "post_id": 44179479, "comment_id": 75373029, "body": "@MatthieuM. : Feel free to edit the answer into whatever format you think is more appropriate \u2013 <i>that&#39;s</i> why it&#39;s CW. ;-]"}], "tags": [], "owner": {"reputation": 59630, "user_id": 636019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38ba39c7ba510ac2951c010c26afb6a6?s=128&d=identicon&r=PG", "display_name": "ildjarn", "link": "https://stackoverflow.com/users/636019/ildjarn"}, "is_accepted": true, "score": 1, "last_activity_date": 1495712324, "last_edit_date": 1495712324, "creation_date": 1495711735, "answer_id": 44179479, "question_id": 44177206, "link": "https://stackoverflow.com/questions/44177206/are-unwraps-under-patterns-optimized-away/44179479#44179479", "title": "Are unwrap()s under patterns optimized away?", "body": "<p><a href=\"https://godbolt.org/g/SUfcRD\" rel=\"nofollow noreferrer\">A more direct comparison</a> of the two approaches yields identical ASM, so at least for this simple example the answer appears to be: yes, such cases can be optimized away.</p>\n\n<pre><code>example::do_stuff_with_foo:\n        push    rbp\n        mov     rbp, rsp\n        push    rbx\n        push    rax\n        mov     rbx, qword ptr [rdi]\n        test    rbx, rbx\n        je      .LBB1_3\n        cmp     qword ptr [rbx], 0\n        je      .LBB1_3\n        mov     rdi, rbx\n        call    core::ptr::drop_in_place\n        mov     qword ptr [rbx], 0\n.LBB1_3:\n        add     rsp, 8\n        pop     rbx\n        pop     rbp\n        ret\n</code></pre>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 367, "favorite_count": 0, "accepted_answer_id": 44179479, "answer_count": 1, "score": 1, "last_activity_date": 1495726621, "creation_date": 1495705182, "last_edit_date": 1495726621, "question_id": 44177206, "link": "https://stackoverflow.com/questions/44177206/are-unwraps-under-patterns-optimized-away", "title": "Are unwrap()s under patterns optimized away?", "body": "<p>I have some code where I often use <code>unwrap()</code> under patterns, where I can be sure it won't panic. Some of those pieces are in performance-critical functions, so I was wondering if it would be a good idea to get rid of these <code>unwrap()</code>s in favor of unchecked variants of applicable functions. However, I didn't see any difference with <code>#[bench]</code> tests and the ASM for both variants looks pretty similar to me (though I'm not an expert).</p>\n\n<p>It appears that Rust is able to optimize such cases away; am I right or should I use unchecked functions instead of <code>unwrap()</code>?</p>\n\n<p>MCVE:</p>\n\n<pre><code>use self::Foo::*;\nuse self::Error::*;\n\n#[derive(Debug)]\nenum Foo {\n    Bar(Box&lt;Foo&gt;),\n    Baz\n}\n\n#[derive(Debug)]\nenum Error {\n    NotBar\n}\n\nimpl Foo {\n    fn bar_mut_ref(&amp;mut self) -&gt; Result&lt;&amp;mut Foo, Error&gt; {\n        match *self {\n            Bar(ref mut foo) =&gt; Ok(foo),\n            _ =&gt; Err(NotBar)\n        }\n    }\n\n    fn bar_mut_ref_unchecked(&amp;mut self) -&gt; &amp;mut Foo {\n        match *self {\n            Bar(ref mut foo) =&gt; foo,\n            _ =&gt; panic!(\"bar_mut_ref_unchecked() called on a non-Bar!\")\n        }\n    }\n\n    fn bazify(&amp;mut self) {\n        match *self {\n            Bar(_) =&gt; { *self = Baz },\n            _ =&gt; ()\n        }\n    }\n}\n\nfn do_stuff_with_foo(foo: &amp;mut Foo) {\n    match *foo {\n        Bar(_) =&gt; {\n            foo.bar_mut_ref().unwrap().bazify(); // is _unchecked() better here?\n            // underscore was used because foo is assigned to a new value here\n        },\n        _ =&gt; {}\n    }\n}\n\nfn main() {\n    let mut foo = Bar(Box::new(Bar(Box::new(Baz))));\n    do_stuff_with_foo(&amp;mut foo);\n    println!(\"{:?}\", foo);\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-macros"], "answers": [{"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1495697520, "last_edit_date": 1495697520, "creation_date": 1495676376, "answer_id": 44170962, "question_id": 44170735, "link": "https://stackoverflow.com/questions/44170735/how-to-initialize-a-struct-with-a-series-of-arguments/44170962#44170962", "title": "How to initialize a struct with a series of arguments", "body": "<p>I'm not sure you can (or perhaps should) rely on the order of the fields of a struct in a macro.</p>\n\n<p>But perhaps similar to what you want, in that it saves constructor boilerplate, is the <a href=\"https://crates.io/crates/derive_builder\" rel=\"nofollow noreferrer\"><code>derive_builder</code> crate</a>.</p>\n\n<p>You can use it like this:</p>\n\n<pre><code>#[macro_use]\nextern crate derive_builder;\n\n#[derive(Builder, Debug)]\nstruct Circle {\n    x: i32,\n    y: i32,\n    radius: i32,\n}\n\nfn do_stuff() -&gt; Result&lt;(), String&gt; {\n    let c = CircleBuilder::default()\n        .x(2)\n        .y(4)\n        .radius(123)\n        .build()?;\n\n    println!(\"     x = {}\", c.x);\n    println!(\"     y = {}\", c.y);\n    println!(\"radius = {}\", c.radius);\n\n    Ok(())\n}\n</code></pre>\n\n<p>Note the <code>Result</code> in the calling function and the <code>?</code> after the call to <code>build()</code>.</p>\n\n<p>Make sure to have this in your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nderive_builder = \"0.4.7\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "edited": false, "score": 0, "creation_date": 1495737945, "post_id": 44177196, "comment_id": 75389249, "body": "Thank you for this, I wasn&#39;t aware of the <code>From</code> trait and it exposes exactly the kind of interface I&#39;d hoped to use. Another option I found, if named fields were not important, is to use a tuple struct: <code>Circle(i32, i32, i32)</code>. A less adaptable solution is to deserialize from a configuration file, though this has the benefit of making multiple different instances available by default, and easy to include more."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1495705169, "creation_date": 1495705169, "answer_id": 44177196, "question_id": 44170735, "link": "https://stackoverflow.com/questions/44170735/how-to-initialize-a-struct-with-a-series-of-arguments/44177196#44177196", "title": "How to initialize a struct with a series of arguments", "body": "<p>This is not possible with a macro for a very simple reason: a macro cannot conjure the field names out of thin air.</p>\n\n<p>The simplest solution, if you are comfortable exposing the details of your type, is making the fields public:</p>\n\n<pre><code>struct Circle {\n    pub x: i32,\n    pub y: i32,\n    pub radius: i32,\n}\n\nfn main() {\n    let circle = Circle { x: 3, y: 4, radius: 5 };\n}\n</code></pre>\n\n<p>That is, there is no <em>need</em> to have a constructor, it works perfectly fine without one.</p>\n\n<p>After all, if the constructor does nothing else than passing on the values, the constructor itself is rather pointless, isn't it?</p>\n\n<p>If you wish to offer a shorter initialization syntax, you can for example:</p>\n\n<pre><code>use std::convert::From;\n\nimpl From&lt;(i32, i32, i32)&gt; for Circle {\n    fn from(t: (i32, i32, i32)) -&gt; Circle {\n        Circle { x: t.0, y: t.1, radius: t.2 }\n    }\n}\n\nfn main() {\n    let circle: Circle = (3, 4, 5).into();\n}\n</code></pre>\n\n<p><em>And normally, type inference should relieve you from having to spell out <code>: Circle</code>.</em></p>\n\n<p>I would note however that this is much more error-prone, as swapping two of the arguments without noticing is much easier. You may want to stick to explicit names, or instead introduce explicit types.</p>\n"}], "owner": {"reputation": 1604, "user_id": 5991423, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/beK29.jpg?s=128&g=1", "display_name": "Aaron3468", "link": "https://stackoverflow.com/users/5991423/aaron3468"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2712, "favorite_count": 1, "accepted_answer_id": 44177196, "answer_count": 2, "score": 2, "last_activity_date": 1495705169, "creation_date": 1495674374, "last_edit_date": 1495677210, "question_id": 44170735, "link": "https://stackoverflow.com/questions/44170735/how-to-initialize-a-struct-with-a-series-of-arguments", "title": "How to initialize a struct with a series of arguments", "body": "<p>In many languages, a common constructor idiom is to initialize values of an object using syntax like this pseudocode:</p>\n\n<pre><code>constructor Foo(args...) {\n    for arg {\n        object.arg = arg\n    }\n}\n</code></pre>\n\n<p>Rust at first seems to be no exception. Many <code>impl</code> for a <code>struct</code> include a constructor named <code>new</code> to zip an ordered series of arguments onto the fields of the struct:</p>\n\n<pre><code>struct Circle {\n    x: i32,\n    y: i32,\n    radius: i32,\n}\n\nimpl Circle {\n    fn new(x: i32, y: i32, radius: i32) -&gt; Circle {\n        Circle { x: x, y: y, radius: radius }\n    }\n}\n</code></pre>\n\n<p>Doing this with a macro might look like <code>zip!(Circle, 52, 32, 5)</code>. It would zip the values, in order, onto the fields of <code>Circle</code>. Both <code>zip!(Circle, 52, 32)</code> or <code>zip!(Circle, 52, 32, 5, 100)</code> would present issues, but a macro like this would be a very flexible way to push values onto a new instance of any struct without so much boilerplate.</p>\n\n<p>Is there an idiomatic way to simplify this boilerplate? How is it possible to map a series of ordered arguments onto each field of a struct without explicitly writing the boilerplate code to do so?</p>\n"}]