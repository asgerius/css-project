[{"tags": ["rust", "visibility", "traits"], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 2558507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b93d636eebee515f5107e922a9d90d54?s=128&d=identicon&r=PG", "display_name": "CrystalGamma", "link": "https://stackoverflow.com/users/2558507/crystalgamma"}, "edited": false, "score": 0, "creation_date": 1431590027, "post_id": 30225013, "comment_id": 48566896, "body": "I still don&#39;t understand why <code>serialize</code> needs to be public, even though everything referenced in the trait (<code>InternStr</code>, and obviously <code>BTreeMap</code>) is visible to the crate root where it&#39;s used. Thank you very much though."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 13, "user_id": 2558507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b93d636eebee515f5107e922a9d90d54?s=128&d=identicon&r=PG", "display_name": "CrystalGamma", "link": "https://stackoverflow.com/users/2558507/crystalgamma"}, "edited": false, "score": 0, "creation_date": 1431600351, "post_id": 30225013, "comment_id": 48572646, "body": "@CrystalGamma I&#39;ve tracked down the behavior. The problem is Trait reexport. Pub struct behaves as you thought it would, but Traits are a another bag of crazy."}, {"owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 0, "creation_date": 1455648822, "post_id": 30225013, "comment_id": 58579426, "body": "To solve the problem, I only had to make the module in which the trait is public <code>pub mod my_trait</code>"}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 1, "last_activity_date": 1431632937, "last_edit_date": 1431632937, "creation_date": 1431550551, "answer_id": 30225013, "question_id": 30224795, "link": "https://stackoverflow.com/questions/30224795/source-trait-is-inaccessible/30225013#30225013", "title": "Source trait is inaccessible", "body": "<p>It needs a pub declaration. Also your declarations are all over the place. Recommended form is to stick your <code>pub mod</code> declarations first, then, <code>use</code>. </p>\n\n<p>Here is the working example.</p>\n\n<pre><code>mod tokentree {\n    pub struct TokenTree;\n    pub mod serialize {\n        use std::collections::BTreeMap;\n        use super::TokenTree;\n        #[derive(Debug)]\n        pub struct InternStr;\n        pub trait InternStrsExt {\n            fn intern_strs(&amp;self) -&gt; BTreeMap&lt;&amp;str, InternStr&gt;;\n        }\n        impl InternStrsExt for [TokenTree] {\n            fn intern_strs(&amp;self) -&gt; BTreeMap&lt;&amp;str, InternStr&gt; { BTreeMap::new() }\n        }\n    }\n    pub use self::serialize::{InternStrsExt, InternStr};\n}\npub use tokentree::*;\n\nfn main() {\n    println!(\"{:?}\", [TokenTree].intern_strs());\n}\n</code></pre>\n\n<p>(<a href=\"http://is.gd/ojajUZ\" rel=\"nofollow\">playpen</a>)</p>\n\n<p>What happened here is that you stumbled upon following glitches:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/18241\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/18241</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/16264\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/16264</a></li>\n</ul>\n\n<p>You can't export your traits from a private module. That's why you need to change  <code>mod serialize</code> into <code>pub mod serialize</code>. For example this <a href=\"http://is.gd/wKD8gC\" rel=\"nofollow\">playpen example</a> demonstrates that exporting <code>struct Export</code> works, but un-commenting the <code>println!</code> will make it stop compiling, because we used a trait. </p>\n\n<p>Tip: One thing that helps me with the visibility rules is to generate doc files and see which doc files are visible.</p>\n"}], "owner": {"reputation": 13, "user_id": 2558507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b93d636eebee515f5107e922a9d90d54?s=128&d=identicon&r=PG", "display_name": "CrystalGamma", "link": "https://stackoverflow.com/users/2558507/crystalgamma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 30225013, "answer_count": 1, "score": 1, "last_activity_date": 1431632937, "creation_date": 1431549650, "question_id": 30224795, "link": "https://stackoverflow.com/questions/30224795/source-trait-is-inaccessible", "title": "Source trait is inaccessible", "body": "<p>The situation is (severely simplified) this (<a href=\"http://is.gd/vxViAu\" rel=\"nofollow\">playpen</a>):</p>\n\n<pre><code>mod tokentree {\n    pub struct TokenTree;\n    mod serialize {\n        use std::collections::BTreeMap;\n        use super::TokenTree;\n        #[derive(Debug)]\n        pub struct InternStr;\n        pub trait InternStrsExt {\n            fn intern_strs(&amp;self) -&gt; BTreeMap&lt;&amp;str, InternStr&gt;;\n        }\n        impl InternStrsExt for [TokenTree] {\n            fn intern_strs(&amp;self) -&gt; BTreeMap&lt;&amp;str, InternStr&gt; { BTreeMap::new() }\n        }\n    }\n    pub use self::serialize::{InternStrsExt, InternStr};\n}\nuse tokentree::*;\n\nfn main() {\n    println!(\"{:?}\", [TokenTree].intern_strs());\n}\n</code></pre>\n\n<p>I get the following error (both on nightly and beta):</p>\n\n<pre><code>&lt;anon&gt;:20:22: 20:47 error: source trait is inaccessible\n&lt;anon&gt;:20     println!(\"{:?}\", [TokenTree].intern_strs());\n                               ^~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>My problem is that I don't even know what this is supposed to mean.</p>\n"}, {"tags": ["rust", "optional"], "answers": [{"comments": [{"owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "edited": false, "score": 0, "creation_date": 1431540714, "post_id": 30222244, "comment_id": 48548444, "body": "This won&#39;t work if you need to call methods that take <code>self</code> or <code>stack</code> by mutable reference inside the loop, however."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "edited": false, "score": 0, "creation_date": 1431541724, "post_id": 30222244, "comment_id": 48549025, "body": "@mbrubeck sure, but then you aren&#39;t popping off the stack, and thus the  example in the question would be different ^_^."}, {"owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "edited": false, "score": 1, "creation_date": 1431543286, "post_id": 30222244, "comment_id": 48549935, "body": "In the example from the question, if <code>self.apply_grammar</code> takes <code>&amp;mut self</code>, then the <code>while</code> or <code>while let</code> loops will work but a <code>for</code> loop will not.  <a href=\"http://is.gd/rp1Jdx\" rel=\"nofollow noreferrer\">Simplified example</a>.  (You could work around this with <code>std::mem::replace</code>.)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1431540336, "creation_date": 1431540336, "answer_id": 30222244, "question_id": 30222059, "link": "https://stackoverflow.com/questions/30222059/avoid-optional-checking-when-accessing-a-vector/30222244#30222244", "title": "Avoid optional checking when accessing a vector", "body": "<p>In this case, you should use an iterator. It's just as efficient (maybe more so), and is shorter:</p>\n\n<pre><code>fn main() {\n    let stack = vec![1,2,3,4,5,6];\n\n    // Consume the stack, pop from the beginning\n    for i in stack {\n        println!(\"{}\", i);\n    }\n\n    let stack = vec![1,2,3,4,5,6];\n\n    // Consume the stack, pop from the end\n    for i in stack.into_iter().rev() {\n        println!(\"{}\", i);\n    }\n\n    let stack = vec![1,2,3,4,5,6];\n\n    // Don't consume the stack, read from the beginning\n    for i in &amp;stack {\n        println!(\"{}\", i);\n    }\n\n    // Don't consume the stack, read from the end\n    for i in stack.iter().rev() {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>In your example, Rust doesn't know there is any connection between <code>is_empty</code> and <code>pop</code>, so it has to handle the failure case in <code>pop</code>. An iterator exposes a more knowledgable interface to the vector, and can avoid checking for out-of-bounds to boot.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431624628, "post_id": 30222268, "comment_id": 48588242, "body": "Note: in case you do not know, this is called <i>Irrefutable Pattern</i>."}], "tags": [], "owner": {"reputation": 1102, "user_id": 883360, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/8a3ae3040204636f0ac9d207cacdee95?s=128&d=identicon&r=PG", "display_name": "boxi", "link": "https://stackoverflow.com/users/883360/boxi"}, "is_accepted": false, "score": 6, "last_activity_date": 1600428833, "last_edit_date": 1600428833, "creation_date": 1431540423, "answer_id": 30222268, "question_id": 30222059, "link": "https://stackoverflow.com/questions/30222059/avoid-optional-checking-when-accessing-a-vector/30222268#30222268", "title": "Avoid optional checking when accessing a vector", "body": "<p>the irc helped me with the following answer:</p>\n<pre><code>while let Some(top) = self.stack.pop() {\n    let top_path = top.to_vec();\n    let mut is_terminal = self.tree.root.is_terminal( top.to_vec() );\n\n    self.apply_grammar(top_path);\n}\n</code></pre>\n<p>and this looks <em>much</em> nicer.</p>\n"}, {"tags": [], "owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "is_accepted": false, "score": 2, "last_activity_date": 1431540786, "creation_date": 1431540786, "answer_id": 30222364, "question_id": 30222059, "link": "https://stackoverflow.com/questions/30222059/avoid-optional-checking-when-accessing-a-vector/30222364#30222364", "title": "Avoid optional checking when accessing a vector", "body": "<p>You could use the <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow\"><code>Option::unwrap</code></a> method, which panics on <code>None</code> just like your <code>if let ... else</code> expression:</p>\n\n<pre><code>while !self.stack.is_empty() {\n    let top = self.stack.last().unwrap();\n    let top_path = top.to_vec();\n    self.stack.pop();\n    self.apply_grammar(top_path);\n}\n</code></pre>\n\n<p>but in this case it would be even clearer to use a <code>while let</code> block as you mentioned in your own answer.</p>\n"}], "owner": {"reputation": 1102, "user_id": 883360, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/8a3ae3040204636f0ac9d207cacdee95?s=128&d=identicon&r=PG", "display_name": "boxi", "link": "https://stackoverflow.com/users/883360/boxi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 293, "favorite_count": 0, "answer_count": 3, "score": 4, "last_activity_date": 1600428833, "creation_date": 1431539683, "last_edit_date": 1431540119, "question_id": 30222059, "link": "https://stackoverflow.com/questions/30222059/avoid-optional-checking-when-accessing-a-vector", "title": "Avoid optional checking when accessing a vector", "body": "<p>How can I avoid the optional checking when accessing a <code>Vec</code>?</p>\n\n<pre><code>while !self.stack.is_empty() {\n    let top_path;\n\n    if let Some(top) = self.stack.last() {\n        top_path = top.to_vec();\n    } else {\n        panic!(\"error (but can't happen, becouse the stack can't be empty becouse of the while loop)\");\n    }\n\n    self.stack.pop();\n    self.apply_grammar(top_path);\n}\n</code></pre>\n\n<p>There are 2 problems:</p>\n\n<ol>\n<li>I have to check with the <code>if let</code>... statement (but I know I don't need it)</li>\n<li>I need an <code>else panic</code>, because without it <code>top_path</code> could be uninitialized (-> error).</li>\n</ol>\n\n<p>Is it my mistake or is it Rust?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1431534408, "creation_date": 1431534408, "answer_id": 30220447, "question_id": 30219549, "link": "https://stackoverflow.com/questions/30219549/trait-type-and-lifetime-issues/30220447#30220447", "title": "Trait type and lifetime issues", "body": "<p>Here is the definition of <code>Key</code>:</p>\n\n<pre><code>pub trait Key: Any {\n    type Value: Any;\n}\n</code></pre>\n\n<p>That is, it extends trait <a href=\"http://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"nofollow\"><code>Any</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Any: 'static + Reflect {\n    fn get_type_id(&amp;self) -&gt; TypeId;\n}\n</code></pre>\n\n<p>This means that any type which implements <code>Key</code> must also implement <code>Any</code>, and any <code>Value</code> associated type instantiation must also implement <code>Any</code>. However, <code>Any</code> is only defined for types which are <code>'static</code>, that is, which do not contain non-static references.</p>\n\n<p>Types which are parameterized with lifetime parameters, like your <code>Database</code>, usually do contain such references (and indeed, your type contains <code>&amp;'a</code> field), so they are not <code>'static</code> and so they cannot implement <code>Any</code>. Therefore such types can't implement <code>Key</code>. And this is in fact what your error is about, even if this is not really obvious:</p>\n\n<pre><code>note: but, the lifetime must be valid for the static lifetime...\n</code></pre>\n\n<p>Anyway, the core reason of this error is that Rust currently does not support reflection with <code>Any</code> for non-static types - as far as I remember, there were some kind of soundness issues around lifetimes here. So currently your only option is to refactor your program so you won't need to store non-<code>'static</code> types in <code>TypeMap</code>.</p>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 1, "accepted_answer_id": 30220447, "answer_count": 1, "score": 1, "last_activity_date": 1431535923, "creation_date": 1431531712, "last_edit_date": 1431535923, "question_id": 30219549, "link": "https://stackoverflow.com/questions/30219549/trait-type-and-lifetime-issues", "title": "Trait type and lifetime issues", "body": "<p>I'm trying to write an Iron plugin middleware, but I'm running into an issue when trying to define a <code>typemap</code> key:</p>\n\n<p>The minimal example with simple type works without issues:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct Database;\nimpl Key for Database {\n    type Value = isize;\n}\n</code></pre>\n\n<p>But as soon as lifetime is involved, I cannot compile the library:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct Database&lt;'a&gt; {\n    pool: &amp;'a Arc&lt;Pool&lt;PostgresConnectionManager&gt;&gt;\n}\n\nimpl&lt;'a&gt; Key for Database&lt;'a&gt; {\n    type Value = PooledConnection&lt;'a, PostgresConnectionManager&gt;;\n}\n</code></pre>\n\n<p>What's happening here? I get the errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/lib.rs:33:1: 35:2 note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 33:0...\nsrc/lib.rs:33 impl&lt;'a&gt; Key for Database&lt;'a&gt; {\nsrc/lib.rs:34     type Value = PooledConnection&lt;'a, PostgresConnectionManager&gt;;\nsrc/lib.rs:35 }\nsrc/lib.rs:33:1: 35:2 note: ...so that trait type parameters matches those specified on the impl (expected `typemap::Key`, found `typemap::Key`)\nsrc/lib.rs:33 impl&lt;'a&gt; Key for Database&lt;'a&gt; {\nsrc/lib.rs:34     type Value = PooledConnection&lt;'a, PostgresConnectionManager&gt;;\nsrc/lib.rs:35 }\nnote: but, the lifetime must be valid for the static lifetime...\nsrc/lib.rs:33:1: 35:2 note: ...so that the type `r2d2::PooledConnection&lt;'_, r2d2_postgres::PostgresConnectionManager&gt;` will meet its required lifetime bounds\nsrc/lib.rs:33 impl&lt;'a&gt; Key for Database&lt;'a&gt; {\nsrc/lib.rs:34     type Value = PooledConnection&lt;'a, PostgresConnectionManager&gt;;\nsrc/lib.rs:35 }\n</code></pre>\n\n<p>But that doesn't make sense to me - the <code>PooledConnection</code> cannot outlive the manager and the <code>Arc&lt;Pool&lt;...Manager&gt;&gt;</code> is given that lifetime to ensure this. What am I missing here?</p>\n\n<p>(<a href=\"https://sfackler.github.io/r2d2/doc/r2d2/struct.Pool.html\" rel=\"nofollow\">documentation for Pool</a>)</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1431536105, "post_id": 30220832, "comment_id": 48545783, "body": "The OP was on to something though: it&#39;d be much more convenient to write this by reusing iterators that already exists, e.g., with <code>[T; 3]</code>. But AFAIK, you can&#39;t move out of arrays. Instead, you can do this, but it costs an allocation: <a href=\"http://is.gd/IMVLoG\" rel=\"nofollow noreferrer\">is.gd/IMVLoG</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1431536252, "post_id": 30220832, "comment_id": 48545857, "body": "Right, and you can&#39;t convert an array into an iterator to store it standalone, either. Allocating a <code>Vec</code> is certainly an option, but seemed overkill for <i>this</i> struct."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1431536830, "post_id": 30220832, "comment_id": 48546196, "body": "Now that we have a good answer I&#39;ll post mine. It has a bit of guesswork about arrays."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1431540082, "post_id": 30220832, "comment_id": 48548117, "body": "You can implement a by move iterator for fixed size arrays (see literator on github). The basic trick available right now is to store <code>Option&lt;[T; N]&gt;</code> in the iterator and write over it with <code>None</code> to inhibit drop of the inner value. The drop_in_place intrinsic just merged will make this easier in future rust."}, {"owner": {"reputation": 2134, "user_id": 381797, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/576f3008bb8d57cabe606279474f2375?s=128&d=identicon&r=PG", "display_name": "Piper Merriam", "link": "https://stackoverflow.com/users/381797/piper-merriam"}, "edited": false, "score": 0, "creation_date": 1431625166, "post_id": 30220832, "comment_id": 48588557, "body": "@Shepmaster, you stated <i>This consumes the Pixel. If you had a reference to a Pixel, you&#39;d need to also implement an iterator that doesn&#39;t consume it:</i>.  Can you expand on this some.  Would I need to implement both, or is the second a super-set of the first.  Please forgive my extreme novice in this area."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2134, "user_id": 381797, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/576f3008bb8d57cabe606279474f2375?s=128&d=identicon&r=PG", "display_name": "Piper Merriam", "link": "https://stackoverflow.com/users/381797/piper-merriam"}, "edited": false, "score": 1, "creation_date": 1431637911, "post_id": 30220832, "comment_id": 48595761, "body": "@AaronMerriam I added a bit more about the differences - does that help any?"}, {"owner": {"reputation": 2654, "user_id": 1153645, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/adb60cb2ea576eeb47fc2f3ff5a3081b?s=128&d=identicon&r=PG", "display_name": "Alexx Roche", "link": "https://stackoverflow.com/users/1153645/alexx-roche"}, "edited": false, "score": 0, "creation_date": 1599327559, "post_id": 30220832, "comment_id": 112743504, "body": "I just learn from this answer that you can <code>impl Iterator</code> that consumes <i>and</i> the one that uses a ref for the same struct in the same file, (and even include the std::iter() method as well.)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 105, "last_activity_date": 1617028501, "last_edit_date": 1617028501, "creation_date": 1431535653, "answer_id": 30220832, "question_id": 30218886, "link": "https://stackoverflow.com/questions/30218886/how-to-implement-iterator-and-intoiterator-for-a-simple-struct/30220832#30220832", "title": "How to implement Iterator and IntoIterator for a simple struct?", "body": "<p>Your iterator type is <code>Iterator&lt;Item = Self::Item&gt;</code>, but <code>Iterator</code> is a trait. Traits are <em>implemented</em> by structs, they don't exist on their own. You could also have a reference trait object (<code>&amp;Iterator</code>), a boxed trait object (<code>Box&lt;Iterator&gt;</code>) or an anonymous trait implementation (<code>impl Iterator</code>), all of which have a known sizes.</p>\n<p>Instead, we create a <code>PixelIntoIterator</code> that has a known size and <em>implements</em> <code>Iterator</code> itself:</p>\n<pre><code>struct Pixel {\n    r: i8,\n    g: i8,\n    b: i8,\n}\n\nimpl IntoIterator for Pixel {\n    type Item = i8;\n    type IntoIter = PixelIntoIterator;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        PixelIntoIterator {\n            pixel: self,\n            index: 0,\n        }\n    }\n}\n\npub struct PixelIntoIterator {\n    pixel: Pixel,\n    index: usize,\n}\n\nimpl Iterator for PixelIntoIterator {\n    type Item = i8;\n    fn next(&amp;mut self) -&gt; Option&lt;i8&gt; {\n        let result = match self.index {\n            0 =&gt; self.pixel.r,\n            1 =&gt; self.pixel.g,\n            2 =&gt; self.pixel.b,\n            _ =&gt; return None,\n        };\n        self.index += 1;\n        Some(result)\n    }\n}\n\nfn main() {\n    let p = Pixel {\n        r: 54,\n        g: 23,\n        b: 74,\n    };\n    for component in p {\n        println!(&quot;{}&quot;, component);\n    }\n}\n</code></pre>\n<p>This has the nice benefit of returning actual <code>i8</code>s, not references. Since these are so small, you might as well pass them directly.</p>\n<p>This consumes the <code>Pixel</code>. If you had a reference to a <code>Pixel</code>, you'd need to also implement an iterator that doesn't consume it:</p>\n<pre><code>impl&lt;'a&gt; IntoIterator for &amp;'a Pixel {\n    type Item = i8;\n    type IntoIter = PixelIterator&lt;'a&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        PixelIterator {\n            pixel: self,\n            index: 0,\n        }\n    }\n}\n\npub struct PixelIterator&lt;'a&gt; {\n    pixel: &amp;'a Pixel,\n    index: usize,\n}\n\nimpl&lt;'a&gt; Iterator for PixelIterator&lt;'a&gt; {\n    type Item = i8;\n    fn next(&amp;mut self) -&gt; Option&lt;i8&gt; {\n        let result = match self.index {\n            0 =&gt; self.pixel.r,\n            1 =&gt; self.pixel.g,\n            2 =&gt; self.pixel.b,\n            _ =&gt; return None,\n        };\n        self.index += 1;\n        Some(result)\n    }\n}\n</code></pre>\n<p>If you wanted to support creating both a consuming iterator and a non-consuming iterator, you can implement both versions. You can always take a reference to a <code>Pixel</code> you own, so you only <em>need</em> the non-consuming variant. However, it's often nice to have a consuming version so that you can return the iterator without worrying about lifetimes.</p>\n<hr />\n<blockquote>\n<p>it'd be much more convenient to write this by reusing iterators that already exists, e.g., with <code>[T; 3]</code></p>\n</blockquote>\n<p>As of Rust 1.51, you can leverage <a href=\"https://doc.rust-lang.org/std/array/struct.IntoIter.html\" rel=\"nofollow noreferrer\"><code>array::IntoIter</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl IntoIterator for Pixel {\n    type Item = i8;\n    type IntoIter = std::array::IntoIter&lt;i8, 3&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        std::array::IntoIter::new([self.r, self.b, self.g])\n    }\n}\n</code></pre>\n<p>In previous versions, it might be a bit silly, but you could avoid creating your own iterator type by gluing some existing types together and using <code>impl Iterator</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::iter;\n\nimpl Pixel {\n    fn values(&amp;self) -&gt; impl Iterator&lt;Item = i8&gt; {\n        let r = iter::once(self.r);\n        let b = iter::once(self.b);\n        let g = iter::once(self.g);\n        r.chain(b).chain(g)\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2134, "user_id": 381797, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/576f3008bb8d57cabe606279474f2375?s=128&d=identicon&r=PG", "display_name": "Piper Merriam", "link": "https://stackoverflow.com/users/381797/piper-merriam"}, "edited": false, "score": 0, "creation_date": 1431537398, "post_id": 30221052, "comment_id": 48546526, "body": "I don&#39;t know enough about the language to understand any of the additional implications that might come with this, but it looks clean.  Thank you."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 2134, "user_id": 381797, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/576f3008bb8d57cabe606279474f2375?s=128&d=identicon&r=PG", "display_name": "Piper Merriam", "link": "https://stackoverflow.com/users/381797/piper-merriam"}, "edited": false, "score": 1, "creation_date": 1431540608, "post_id": 30221052, "comment_id": 48548388, "body": "Using <code>vec!</code> adds a heap allocation, it&#39;s slower than Shepmaster&#39;s version. On my machine Shepmaster&#39;s version (<a href=\"http://is.gd/BJUSbZ\" rel=\"nofollow noreferrer\">is.gd/BJUSbZ</a>) performs at <b>1 ns/iter</b>. <code>vec!</code> version (<a href=\"http://is.gd/CMNqzR\" rel=\"nofollow noreferrer\">is.gd/CMNqzR</a>) performs at <b>23 ns/iter</b>. A version returning an array (<a href=\"http://is.gd/pr6Zaf\" rel=\"nofollow noreferrer\">is.gd/pr6Zaf</a>) is both fast and simple to implement, it performs at <b>1 ns/iter</b> on my hardware."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 4, "last_activity_date": 1431540763, "last_edit_date": 1431540763, "creation_date": 1431536385, "answer_id": 30221052, "question_id": 30218886, "link": "https://stackoverflow.com/questions/30218886/how-to-implement-iterator-and-intoiterator-for-a-simple-struct/30221052#30221052", "title": "How to implement Iterator and IntoIterator for a simple struct?", "body": "<p>First, <code>IntoIter</code> must point to a real <code>struct</code> and not to a <code>trait</code> in order for Rust to be able to pass the value around (that's what <code>Sized</code> means). In case of arrays <code>into_iter</code> returns the <a href=\"http://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"nofollow\">std::slice::Iter</a> <code>struct</code>.</p>\n\n<p>Second, a typical array, <code>[1, 2, 3]</code>, isn't allocated on heap. In fact, the compiler is allowed to optimize away the allocation entirely, pointing to a pre-compiled array instead. Being able to iterate the arrays without copying them anywhere is I think the reason why the <code>IntoIterator</code> implementation for arrays doesn't <em>move</em> the array anywhere as other <code>IntoIterator</code> implementations do. Instead it seems to <em>reference</em> the existing array. You can see from <a href=\"http://doc.rust-lang.org/std/primitive.array.html\" rel=\"nofollow\">its signature</a></p>\n\n<pre><code>impl&lt;'a, T&gt; IntoIterator for &amp;'a [T; 3]\n    type Item = &amp;'a T\n    type IntoIter = Iter&lt;'a, T&gt;\n    fn into_iter(self) -&gt; Iter&lt;'a, T&gt;\n</code></pre>\n\n<p>that it takes a <em>reference</em> to an array (<code>&amp;'a [T; 3]</code>).</p>\n\n<p>As such, you can't use it in the way you're trying to. The referenced array must outlive the returned iterator. <a href=\"http://is.gd/aXLu3K\" rel=\"nofollow\">Here's a version</a> where Rust compiler tells so.</p>\n\n<p>Vector has an <code>IntoIterator</code> implementation that truly moves the data into the iterator and so <a href=\"http://is.gd/dktJAa\" rel=\"nofollow\">you can use it</a>.</p>\n\n<hr>\n\n<p>P.S. To make it both fast and simple, return an array instead of an iterator (<a href=\"http://is.gd/gWhlYX\" rel=\"nofollow\">playpen</a>):</p>\n\n<pre><code>impl Pixel {\n    fn into_array(self) -&gt; [i8; 3] {[self.r, self.g, self.b]}\n}\n</code></pre>\n\n<p>That way the array is first <em>moved</em> into the outer scope and then it can be <em>referenced</em> from the outer scope's iterator:</p>\n\n<pre><code>for color in &amp;(Pixel {r: 1, g: 2, b: 3}).into_array() {\n    println! (\"{}\", color);\n}\n</code></pre>\n"}], "owner": {"reputation": 2134, "user_id": 381797, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/576f3008bb8d57cabe606279474f2375?s=128&d=identicon&r=PG", "display_name": "Piper Merriam", "link": "https://stackoverflow.com/users/381797/piper-merriam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 30352, "favorite_count": 23, "accepted_answer_id": 30220832, "answer_count": 2, "score": 66, "last_activity_date": 1617028501, "creation_date": 1431529892, "last_edit_date": 1492006946, "question_id": 30218886, "link": "https://stackoverflow.com/questions/30218886/how-to-implement-iterator-and-intoiterator-for-a-simple-struct", "title": "How to implement Iterator and IntoIterator for a simple struct?", "body": "<p>How would someone implement the <code>Iterator</code> and <code>IntoIterator</code> traits for the following struct?</p>\n\n<pre><code>struct Pixel {\n    r: i8,\n    g: i8,\n    b: i8,\n}\n</code></pre>\n\n<p>I've tried various forms of the following with no success.</p>\n\n<pre><code>impl IntoIterator for Pixel {\n    type Item = i8;\n    type IntoIter = Iterator&lt;Item=Self::Item&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        [&amp;self.r, &amp;self.b, &amp;self.g].into_iter()\n    }\n}\n</code></pre>\n\n<p>This code gives me a compile error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::iter::Iterator&lt;Item=i8&gt; + 'static: std::marker::Sized` is not satisfied\n --&gt; src/main.rs:7:6\n  |\n7 | impl IntoIterator for Pixel {\n  |      ^^^^^^^^^^^^ the trait `std::marker::Sized` is not implemented for `std::iter::Iterator&lt;Item=i8&gt; + 'static`\n  |\n  = note: `std::iter::Iterator&lt;Item=i8&gt; + 'static` does not have a constant size known at compile-time\n  = note: required by `std::iter::IntoIterator`\n</code></pre>\n"}, {"tags": ["json", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431522389, "post_id": 30215208, "comment_id": 48535328, "body": "<code>RustcEncodable</code> is not intended to cope with this sort of thing; it\u2019s designed to have a fixed number of fields, though for something limited like JSON you could probably successfully cheat. It\u2019d be asking for trouble, though. I would guess that <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow noreferrer\">serde</a> would handle this sort of thing, though I do not know for certain."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1431522643, "post_id": 30215208, "comment_id": 48535545, "body": "not yet, but there&#39;s an issue for that: <a href=\"https://github.com/serde-rs/serde/issues/43\" rel=\"nofollow noreferrer\">github.com/serde-rs/serde/issues/43</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1431522712, "post_id": 30215208, "comment_id": 48535601, "body": "you can always <code>impl Encodable</code> manually and make sure that serialization skips a <code>None</code> field"}, {"owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1431528346, "post_id": 30215208, "comment_id": 48540357, "body": "Thanks for the tips! I&#39;ll go with serde and wait for the issue to be resolved, because it&#39;s not that big of a deal and at the moment there are bigger issues. @ker I&#39;ll probably look later into implementing<code>Encodable</code> manually."}], "answers": [{"tags": [], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "is_accepted": false, "score": 0, "last_activity_date": 1435278782, "last_edit_date": 1435278782, "creation_date": 1435278107, "answer_id": 31062938, "question_id": 30215208, "link": "https://stackoverflow.com/questions/30215208/omit-values-that-are-optionnone-when-encoding-json-with-rustc-serialize/31062938#31062938", "title": "Omit values that are Option::None when encoding JSON with rustc_serialize", "body": "<p>It doesn't seem to be possible by doing purely from a struct, so i converted the struct into a string, and then converted that into a JSON object. This method requires that all <code>Option</code> types be the same type. I'd recommend if you need to have variable types in the struct to turn them into string's first.</p>\n\n<p><code>field_vec</code> and <code>field_name_vec</code> have to be filled with all fields at compile time, as I couldn't find a way to get the field values, and field names without knowing them in rust at run time.</p>\n\n<pre><code>extern crate rustc_serialize;\n\nuse rustc_serialize::json::Json;\n\nfn main() {\n\n\n    #[derive(RustcEncodable)]\n    struct TestStruct {\n        test: Option&lt;i32&gt;\n    }\n\n    impl TestStruct {\n        fn to_json(&amp;self) -&gt; String {\n            let mut json_string = String::new();\n            json_string.push('{');\n\n            let field_vec = vec![self.test];\n            let field_name_vec = vec![stringify!(self.test)];\n            let mut previous_field = false;\n            let mut count = 0;\n            for field in field_vec {\n                if previous_field {\n                    json_string.push(',');\n                }\n                match field {\n                    Some(value) =&gt; {\n                        let opt_name = field_name_vec[count].split(\". \").collect::&lt;Vec&lt;&amp;str&gt;&gt;()[1];\n                        json_string.push('\"');\n                        json_string.push_str(opt_name);\n                        json_string.push('\"');\n                        json_string.push(':');\n                        json_string.push_str(&amp;value.to_string());\n                        previous_field = true;\n                    },\n                    None =&gt; {},\n                }\n                count += 1;\n            }\n            json_string.push('}');\n            json_string\n        }\n    }\n\n    let object = TestStruct {\n        test: None\n    };\n\n    let object2 = TestStruct {\n        test: Some(42)\n    };\n\n    let obj = Json::from_str(&amp;object.to_json()).unwrap();\n    let obj2 = Json::from_str(&amp;object2.to_json()).unwrap();\n\n    println!(\"{:?}\", obj);\n    println!(\"{:?}\", obj2);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "is_accepted": false, "score": 0, "last_activity_date": 1458382795, "creation_date": 1458382795, "answer_id": 36100449, "question_id": 30215208, "link": "https://stackoverflow.com/questions/30215208/omit-values-that-are-optionnone-when-encoding-json-with-rustc-serialize/36100449#36100449", "title": "Omit values that are Option::None when encoding JSON with rustc_serialize", "body": "<p>To omit <code>Option&lt;T&gt;</code> fields, you can create an implementation of the <code>Encodable</code> trait (instead of using <code>#[derive(RustcEncodable)]</code>).</p>\n\n<p>Here I updated your example to do this.</p>\n\n<pre><code>extern crate rustc_serialize;\nuse rustc_serialize::json::{ToJson, Json};\nuse rustc_serialize::{Encodable,json};\n\nuse std::collections::BTreeMap;\n\n#[derive(PartialEq, RustcDecodable)]\nstruct TestStruct {\n    test: Option&lt;i32&gt;\n}\n\nimpl Encodable for TestStruct {\n    fn encode&lt;S: rustc_serialize::Encoder&gt;(&amp;self, s: &amp;mut S) -&gt; Result&lt;(), S::Error&gt; {\n        self.to_json().encode(s)\n    }\n}\n\nimpl ToJson for TestStruct {\n    fn to_json(&amp;self) -&gt; Json {\n        let mut d = BTreeMap::new();\n        match self.test {\n            Some(value) =&gt; { d.insert(\"test\".to_string(), value.to_json()); },\n            None =&gt; {},\n        }\n        Json::Object(d)\n    }\n}\n\nfn main() {\n    let object = TestStruct {\n        test: None\n    };\n\n    let obj = json::encode(&amp;object).unwrap();\n\n    println!(\"{}\", obj);\n\n    let decoded: TestStruct = json::decode(&amp;obj).unwrap();\n    assert!(decoded==object);\n}\n</code></pre>\n\n<p>It would be nice to implement a custom <code>#[derive]</code> macro which does this automatically for <code>Option</code> fields, as this would eliminate the need for such custom implementations of <code>Encodable</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1647, "user_id": 21548, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8450afcb19e752809f06d35af7a6bdd6?s=128&d=identicon&r=PG&f=1", "display_name": "bernardn", "link": "https://stackoverflow.com/users/21548/bernardn"}, "is_accepted": false, "score": 1, "last_activity_date": 1617886813, "creation_date": 1617886813, "answer_id": 67004517, "question_id": 30215208, "link": "https://stackoverflow.com/questions/30215208/omit-values-that-are-optionnone-when-encoding-json-with-rustc-serialize/67004517#67004517", "title": "Omit values that are Option::None when encoding JSON with rustc_serialize", "body": "<p>If someone arrives here with the same question like I did, serde has now an option skip_serializing_none to do exactly that.</p>\n<p><a href=\"https://docs.rs/serde_with/1.8.0/serde_with/attr.skip_serializing_none.html\" rel=\"nofollow noreferrer\">https://docs.rs/serde_with/1.8.0/serde_with/attr.skip_serializing_none.html</a></p>\n"}], "owner": {"reputation": 360, "user_id": 4743935, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-D0UsDqm2eGw/AAAAAAAAAAI/AAAAAAAAAJ8/lc0gehFEEdQ/photo.jpg?sz=128", "display_name": "Tristan Storch", "link": "https://stackoverflow.com/users/4743935/tristan-storch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 805, "favorite_count": 0, "answer_count": 3, "score": 0, "last_activity_date": 1617886813, "creation_date": 1431521126, "last_edit_date": 1431524209, "question_id": 30215208, "link": "https://stackoverflow.com/questions/30215208/omit-values-that-are-optionnone-when-encoding-json-with-rustc-serialize", "title": "Omit values that are Option::None when encoding JSON with rustc_serialize", "body": "<p>I have a struct that I want to encode to JSON. This struct contains a field with type <code>Option&lt;i32&gt;</code>. Let's say</p>\n\n<pre><code>extern crate rustc_serialize;\nuse rustc_serialize::json;\n\n#[derive(RustcEncodable)]\nstruct TestStruct {\n    test: Option&lt;i32&gt;\n}\n\nfn main() {\n    let object = TestStruct {\n        test: None\n    };\n\n    let obj = json::encode(&amp;object).unwrap();\n\n    println!(\"{}\", obj);\n}\n</code></pre>\n\n<p>This will give me the output</p>\n\n<pre><code>{\"test\": null}\n</code></pre>\n\n<p>Is there a convenient way to omit <code>Option</code> fields with value <code>None</code>? In this case I would like to have the output</p>\n\n<pre><code>{}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1431484819, "post_id": 30204683, "comment_id": 48514607, "body": "I&#39;m pretty sure the <code>http</code> crate is deprecated. Check out <a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow noreferrer\">hyper</a> and it would be a good idea to update your Rust version too."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 5, "creation_date": 1431485305, "post_id": 30204683, "comment_id": 48514739, "body": "rust-http is obsolete and completely unmaintained. The current recommendation is indeed to use hyper instead. The code you\u2019re trying to build, <a href=\"https://github.com/indiv0/paste-rs\" rel=\"nofollow noreferrer\">github.com/indiv0/paste-rs</a>, is also eight months old. This is an extremely long time ago in the Rust world, and very little code from then will still compile."}, {"owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "edited": false, "score": 0, "creation_date": 1431485537, "post_id": 30204683, "comment_id": 48514809, "body": "I did not know which one is old/new. maybe a deprecated alert in documentation would help for beginners who are trying out everything. anyway, tried <code>hyper</code> and it work well to what i wanted to. thanks for the suggestions. I&#39;ll update my post."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431524592, "post_id": 30212202, "comment_id": 48537189, "body": "There are also <a href=\"https://github.com/hyperium/hyper#example\" rel=\"nofollow noreferrer\">some Hyper usage examples available</a>."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431525915, "post_id": 30212202, "comment_id": 48538277, "body": "@Shepmaster Neat. I&#39;ll link it and inline the source."}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 1, "last_activity_date": 1431525897, "last_edit_date": 1431525897, "creation_date": 1431512975, "answer_id": 30212202, "question_id": 30204683, "link": "https://stackoverflow.com/questions/30204683/can-not-compile-the-http-crate/30212202#30212202", "title": "Can not compile the &#39;http&#39; crate", "body": "<p>Ah, yes, <a href=\"http://www.rust-ci.org/\" rel=\"nofollow\">Rust-CI</a>.</p>\n\n<p>Problem is, Rust-CI is a site from before there was support for Rust in Travis or even Cargo. In those dark, dark days, we relied on Rust-CI to detect changes in Rust nightlies and automatically update Travis CI so our build to be built with latest Rust. Also it served as a repository for docs. </p>\n\n<p>Nowadays we use <a href=\"https://crates.io/\" rel=\"nofollow\">Cargo</a> and host doc on personal Github Pages document repo.</p>\n\n<hr>\n\n<p>Anyway as others have noted, <code>rust-http</code> crate is outdated and suggested alternative is to use <code>hyper</code> crate now.</p>\n\n<pre><code>[dependencies]\nhyper = \"0.5.0\"\n</code></pre>\n\n<p>And here is a <a href=\"https://github.com/hyperium/hyper#example\" rel=\"nofollow\">hyper usage example</a>:</p>\n\n<pre><code>extern crate hyper;\n\nuse std::io::Read;\n\nuse hyper::Client;\nuse hyper::header::Connection;\n\nfn main() {\n    // Create a client.\n    let mut client = Client::new();\n\n    // Creating an outgoing request.\n    let mut res = client.get(\"http://www.gooogle.com/\")\n        // set a header\n        .header(Connection::close())\n        // let 'er go!\n        .send().unwrap();\n\n    // Read the Response.\n    let mut body = String::new();\n    res.read_to_string(&amp;mut body).unwrap();\n\n    println!(\"Response: {}\", body);\n}\n</code></pre>\n"}], "owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1833, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1431531589, "creation_date": 1431484460, "last_edit_date": 1431531589, "question_id": 30204683, "link": "https://stackoverflow.com/questions/30204683/can-not-compile-the-http-crate", "title": "Can not compile the &#39;http&#39; crate", "body": "<p>I am trying out Rust and trying to perform a simple HTTP GET request, following <a href=\"http://www.rust-ci.org/Indiv0/paste/doc/http/client/request/index.html\" rel=\"nofollow\">this example</a>. To start, I ran <code>cargo new request_learn --bin</code>, then pasted the example code in <code>main.rs</code> then ran <code>cargo build</code></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>request git:(master) \u2717 cargo build\n   Compiling request v0.0.1 (file:///Users/soliva/Sites/rust/app/request)\nsrc/main.rs:12:23: 12:27 error: macro undefined: 'fail!'\nsrc/main.rs:12         Err(error) =&gt; fail!(\":-( {}\", error),\n                                 ^~~~\nsrc/main.rs:17:35: 17:39 error: macro undefined: 'fail!'\nsrc/main.rs:17         Err((_request, error)) =&gt; fail!(\":-( {}\", error),\n                                             ^~~~\nerror: aborting due to 2 previous errors\nCould not compile `request`.\n</code></pre>\n\n<p>I changed the <code>fail!</code> macro here, as it seems I don`t have it. The next build says</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>request git:(master) \u2717 cargo build\n   Compiling request v0.0.1 (file:///Users/soliva/Sites/rust/app/request)\nsrc/main.rs:1:1: 1:19 error: can't find crate for `http`\nsrc/main.rs:1 extern crate http;\n          ^~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nCould not compile `request`.\n</code></pre>\n\n<p>so I add to <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies]\nhttp = \"0.0.0\"\n</code></pre>\n\n<p>And I build again</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>request git:(master) \u2717 cargo build --verbose\n    Updating registry https://github.com/rust-lang/crates.io-index\n   Compiling http v0.0.0-prealpha\n   Running `rustc /Users/soliva/.cargo/registry/src/github.com-/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.0.0-prealpha/src/lib.rs:1:1: 1:20 error: The attribute license is currently unknown to the compiler and may have meaning added to it in the future\nerror: aborting due to previous error\nCould not compile `http`.\n\nCaused by:\n  Process didn't exit successfully: `rustc /Users/soliva/.cargo/registry/src/github.com-1ecc6299db9ec823/http-0.0.0-prealpha/src/lib.rs --crate-name http --crate-type lib -g -C metadata=bec89420f16c6bf6 -C extra-filename=-bec89420f16c6bf6 --out-dir /Users/soliva/Sites/rust/app/request/target/debug/deps --emit=dep-info,link -L dependency=/Users/soliva/Sites/rust/app/request/target/debug/deps -L dependency=/Users/soliva/Sites/rust/app/request/target/debug/deps -Awarnings` (exit code: 101)\n</code></pre>\n\n<p><em>I cut some error message, as it was very long and duplicated</em></p>\n\n<p>Am I missing something? I am looking in to Rust modules and <code>cargo</code> documentation but I seem to be lost.</p>\n"}, {"tags": ["logging", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1431623523, "post_id": 30203857, "comment_id": 48587577, "body": "Note: have synchronous I/O in the thread calling <code>log</code> is generally not desired, as a result it is common to use an internal queue or buffer and have a dedicated &quot;consumer&quot; thread in charge of writing to the files. In the Rust world, maybe a channel?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1431478393, "creation_date": 1431478393, "answer_id": 30203857, "question_id": 30203591, "link": "https://stackoverflow.com/questions/30203591/how-to-implement-a-logger-that-appends-to-a-file/30203857#30203857", "title": "How to implement a logger that appends to a file?", "body": "<p>Whenever you need to present a non-mutable interface but do mutation behind the scenes, you can use <em>interior mutability</em>. The common way of doing this is with something from <a href=\"http://doc.rust-lang.org/std/cell/index.html\" rel=\"nofollow\"><code>std::cell</code></a>. The docs call out this specific usecase:</p>\n\n<blockquote>\n  <p>because you must employ mutation to implement a trait method that was originally defined to take &amp;self.</p>\n</blockquote>\n\n<p>Specifically, I'd try to use <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a> in this case.</p>\n\n<p>Unfortunately, <a href=\"http://doc.rust-lang.org/log/log/trait.Log.html\" rel=\"nofollow\"><code>Log</code></a> requires the implementer to also be <code>Sync + Send</code>, but cells are not. That means we need to upgrade to something that can handle multiple threads. That something is <a href=\"http://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"nofollow\"><code>Mutex</code></a>:</p>\n\n<pre><code>extern crate log;\n\nuse std::fs::File;\nuse std::io::Write;\nuse std::sync::Mutex;\nuse log::{LogLevelFilter,LogMetadata,LogRecord,Log};\n\npub struct FileLogger {\n    loglevel: LogLevelFilter,\n    logfile: Option&lt;Mutex&lt;File&gt;&gt;,\n}\n\nimpl Log for FileLogger {\n    fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool {\n        metadata.level() &lt;= self.loglevel\n    }\n\n    fn log(&amp;self, record: &amp;LogRecord) {\n        if self.enabled(record.metadata()) {\n            let msg = format!(\"{}\\t| {}\\t| {}\", record.level(), record.target(), record.args());\n            self.logfile.as_ref().map(|f| {\n                f.lock().unwrap().write_all(msg.as_bytes()).unwrap()\n            });\n        }\n    }\n}\n\n#[test]\nfn it_works() {\n}\n</code></pre>\n"}], "owner": {"reputation": 363, "user_id": 3835342, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6f54c04b770283464c6ae03c213a596?s=128&d=identicon&r=PG&f=1", "display_name": "Cole Reynolds", "link": "https://stackoverflow.com/users/3835342/cole-reynolds"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 30203857, "answer_count": 1, "score": 1, "last_activity_date": 1431478393, "creation_date": 1431476514, "question_id": 30203591, "link": "https://stackoverflow.com/questions/30203591/how-to-implement-a-logger-that-appends-to-a-file", "title": "How to implement a logger that appends to a file?", "body": "<p>I'm trying to implement <code>log::Log</code> such that the call to <code>log()</code> appends the message to a file. This is my logger at the moment:</p>\n\n<pre><code>pub struct MyLogger {\n    loglevel: LogLevelFilter,\n    logfile: Option&lt;File&gt;,\n}\n</code></pre>\n\n<p>And the implementation of log::Log:</p>\n\n<pre><code>impl Log for Logger {\n    fn enabled(&amp;self, metadata: &amp;LogMetadata) -&gt; bool {\n        metadata.level() &lt;= self.loglevel\n    }\n\n    fn log(&amp;self, record: &amp;LogRecord) {\n        if self.enabled(record.metadata()) {\n            let msg = format!(\"{}\\t| {}\\t| {}\", record.level(), record.target(), record.args());\n            self.logfile.write_all(msg.as_bytes()).unwrap();\n        }\n    }\n}\n</code></pre>\n\n<p>Which, understandably, fails because <code>log()</code> doesn't take a mutable reference. I can't take a mutable reference because then I wouldn't be implementing the type correctly, so what would be the idiomatic way to achieve this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": false, "score": 1, "last_activity_date": 1431475217, "creation_date": 1431475217, "answer_id": 30203401, "question_id": 30203277, "link": "https://stackoverflow.com/questions/30203277/cannot-implement-quickchecks-arbitrary-for-my-own-type-source-trait-is-privat/30203401#30203401", "title": "Cannot implement quickchecks Arbitrary for my own type - &quot;source trait is private&quot;", "body": "<p>That's strange. I can reproduce your initial error, but your suggested fix works for me:</p>\n\n<pre><code>extern crate quickcheck;\nextern crate rand;\n\nuse quickcheck::{Arbitrary,Gen};\nuse rand::Rng;\n\n#[derive(Debug,Copy,Clone)]\nstruct AsciiChar(u8);\n\nimpl Arbitrary for AsciiChar {\n    fn arbitrary&lt;G&gt;(g: &amp;mut G) -&gt; AsciiChar\n        where G: Gen\n    {\n        let a: u8 = g.gen_range(0, 128);\n        AsciiChar(a)\n    }\n}\n\n#[test]\nfn it_works() {}\n</code></pre>\n\n<p>Running <code>cargo test</code> on both beta5 and the 2015-05-12 nightly works.</p>\n"}, {"comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1431512925, "post_id": 30204066, "comment_id": 48528459, "body": "Oooo. Very nice! I had indeed added <code>rand</code> to <code>Cargo.toml</code>. I&#39;ve been bitten by that same misconception previously, so I&#39;ve internalized the need to to have all <code>extern crate blah;</code> statements correspond to an entry in <code>Cargo.toml</code>. :-) I also forgot that there is a <code>rand</code> crate that comes with Rust proper."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1431512999, "post_id": 30204066, "comment_id": 48528502, "body": "You should mark your answer as the answer. If other people get a similar error as you, hopefully this question will appear in their search."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1502715103, "last_edit_date": 1502715103, "creation_date": 1431480229, "answer_id": 30204066, "question_id": 30203277, "link": "https://stackoverflow.com/questions/30203277/cannot-implement-quickchecks-arbitrary-for-my-own-type-source-trait-is-privat/30204066#30204066", "title": "Cannot implement quickchecks Arbitrary for my own type - &quot;source trait is private&quot;", "body": "<p>Ah, this was a tricky one. To progress in my testing, I added this hack:</p>\n\n<pre><code>impl Arbitrary for AsciiChar {\n    fn arbitrary&lt;G&gt;(g: &amp;mut G) -&gt; AsciiChar\n        where G: Gen\n    {\n        let a: u8 = Arbitrary::arbitrary(g);\n        AsciiChar(a % 128)\n    }\n}\n</code></pre>\n\n<p>After that compiled, I got this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/lib.rs:419:5: 419:23 error: use of unstable library feature 'rand': use `rand` from crates.io\nsrc/lib.rs:419     extern crate rand;\n                   ^~~~~~~~~~~~~~~~~~\nsrc/lib.rs:419:5: 419:23 help: add #![feature(rand)] to the crate attributes to enable\n</code></pre>\n\n<p>My problem was that <strong>I forgot to add <code>rand</code> to my <code>Cargo.toml</code></strong>. I was thinking that I would just magically get the same version pulled in by quickcheck.</p>\n\n<p>The ultimate problem was that I <em>hadn't</em> actually <code>use</code>d the correct version of <code>Rng</code>, the one that <code>Gen</code> was a subtrait of. Very confusing!</p>\n\n<p>After adding <code>rand</code> to my <code>Cargo.toml</code>, I am back in business.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 219, "favorite_count": 0, "accepted_answer_id": 30204066, "answer_count": 2, "score": -1, "last_activity_date": 1502715103, "creation_date": 1431474287, "last_edit_date": 1431480479, "question_id": 30203277, "link": "https://stackoverflow.com/questions/30203277/cannot-implement-quickchecks-arbitrary-for-my-own-type-source-trait-is-privat", "title": "Cannot implement quickchecks Arbitrary for my own type - &quot;source trait is private&quot;", "body": "<p>I am using <a href=\"https://github.com/BurntSushi/quickcheck\" rel=\"nofollow\">quickcheck</a> to validate some properties of my code. At one point, I need an ASCII byte, so I tried to write an implementation of <a href=\"http://burntsushi.net/rustdoc/quickcheck/trait.Arbitrary.html\" rel=\"nofollow\"><code>Arbitrary</code></a> like this:</p>\n\n<pre><code>extern crate quickcheck;\n\nuse quickcheck::{quickcheck,Arbitrary,Gen};\n\n#[derive(Debug,Copy,Clone)]\nstruct AsciiChar(u8);\n\nimpl Arbitrary for AsciiChar {\n    fn arbitrary&lt;G&gt;(g: &amp;mut G) -&gt; AsciiChar\n        where G: Gen\n    {\n        let a: u8 = g.gen_range(0, 128);\n        AsciiChar(a)\n    }\n}\n\n#[test]\nfn it_works() {}\n</code></pre>\n\n<p>This fails with the error:</p>\n\n<pre><code>src/lib.rs:12:21: 12:40 error: source trait is private\nsrc/lib.rs:12         let a: u8 = g.gen_range(0, 128);\n                                  ^~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Some searching led me to various bug reports (<a href=\"https://github.com/rust-lang/rust/issues/22050\" rel=\"nofollow\">1</a>, <a href=\"https://github.com/rust-lang/rust/issues/24877\" rel=\"nofollow\">2</a>, <a href=\"https://github.com/rust-lang/rust/issues/16264\" rel=\"nofollow\">3</a>, <a href=\"https://github.com/rust-lang/rust/issues/21670\" rel=\"nofollow\">4</a>) that all seem to suggest I need to <code>use</code> the supertrait of <a href=\"http://burntsushi.net/rustdoc/quickcheck/trait.Gen.html\" rel=\"nofollow\"><code>Gen</code></a>, which is <a href=\"http://burntsushi.net/rustdoc/rand/trait.Rng.html\" rel=\"nofollow\"><code>rand::Rng</code></a>. I updated my crates and use statements to</p>\n\n<pre><code>extern crate quickcheck;\nextern crate rand;\n\nuse rand::Rng;\nuse quickcheck::{quickcheck,Arbitrary,Gen};\n</code></pre>\n\n<p>But I continue to get the same error.</p>\n\n<p>I've tried with</p>\n\n<ul>\n<li><code>rustc version 1.1.0-dev (b402c43f0 2015-05-07) (built 2015-05-07)</code></li>\n<li><code>rustc 1.1.0-dev (3ca008dcf 2015-05-12) (built 2015-05-12)</code></li>\n</ul>\n\n<p>I'm also using <code>quickcheck v0.2.18</code></p>\n"}, {"tags": ["rust", "rust-macros"], "answers": [{"tags": [], "owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "is_accepted": false, "score": 0, "last_activity_date": 1431468031, "creation_date": 1431468031, "answer_id": 30202178, "question_id": 30200374, "link": "https://stackoverflow.com/questions/30200374/how-do-i-debug-macros/30202178#30202178", "title": "How do I debug macros?", "body": "<p>Debugging was interesting. I started with the simplest possible input, and worked up from there. I found that I had issues along the way with the printing functions (rewrite so it just prints inputs and doesn't cycle back!).</p>\n\n<p>I also added rules that were more explicit, and then removed them once everything was working (one by one of course, testing along the way). Once I knew each individual piece was compiling, and the printing functions were working, I was able to verify the output of the macros. The below macro sometimes runs when it shouldn't, but it compiles, and prints and is debuggable. I'm happy enough with the current state to post it here.</p>\n\n<pre><code>fn main() {\n    // \"Bitwise Cyclic Tag\" automation through macros\n    macro_rules! bct {\n        // cmd 0:  0 ... =&gt; ...\n        (0, $($program:tt),* ; $_head:tt)\n            =&gt; (pbct!($($program),*, 0 ; ));\n        (0, $($program:tt),* ; $_head:tt, $($tail:tt),*)\n            =&gt; (pbct!($($program),*, 0 ; $($tail),*));\n\n        // cmd 1x:  1 ... =&gt; 1 ... x\n        (1, $x:tt, $($program:tt),* ; 1)\n            =&gt; (pbct!($($program),*, 1, $x ; 1, $x));\n        (1, $x:tt, $($program:tt),* ; 1, $($tail:tt),*)\n            =&gt; (pbct!($($program),*, 1, $x ; 1, $($tail),*, $x));\n\n        // cmd 1x:  0 ... =&gt; 0 ...\n        (1, $x:tt, $($program:tt),* ; $($tail:tt),*)\n            =&gt; (pbct!($($program),*, 1, $x ; $($tail),*));\n\n        // halt on empty data string\n        ( $($program:tt),* ; )\n            =&gt; (());\n    }\n\n    macro_rules! println_bct {\n        () =&gt;\n            (println!(\"\"));\n        (;) =&gt;\n            (println!(\":\"));\n\n        ($d:tt) =&gt;\n            (println!(\"{}\", stringify!($d)));\n        ($d:tt, $($data:tt),*) =&gt; {\n            print!(\"{}\", stringify!($d));\n            println_bct!($($data),*);\n        };\n        ( ; $($data:tt),*) =&gt; {\n            print!(\":\");\n            println_bct!($($data),*);\n        };\n\n        ($x:tt ; $($data:tt),*) =&gt; {\n            print!(\"{}\", stringify!($x));\n            println_bct!( ; $($data),*);\n        };\n        ($x:tt, $($program:tt),* ; $($data:tt),*) =&gt; {\n            print!(\"{}\", stringify!($x));\n            println_bct!($($program),* ; $($data),*);\n        };\n    }\n\n    macro_rules! pbct {\n        ($($program:tt),* ; $($data:tt),*) =&gt; {\n            println_bct!($($program),* ; $($data),*);\n            bct!($($program),* ; $($data),*);\n        };\n    }\n\n    pbct!(0, 0, 1, 1, 1, 0, 0, 0 ; 1, 0, 1);\n\n    // This one causes the compiler to hit recursion limits, heh\n    // pbct!(0, 0, 1, 1, 1, 1, 1, 0 ; 1, 0, 1);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 0, "creation_date": 1431521791, "post_id": 30208269, "comment_id": 48534847, "body": "Why doesn&#39;t the macro compilation step complain about <code>$(not_al_variable),*</code> ? In what situations would that be valid on its own?  Also, don&#39;t forget about --pretty expanded,hygiene, which is useful when a variable outside the macro has the same name as a variable inside the macro (at least, that&#39;s how it was explained to me)."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 2, "creation_date": 1431563707, "post_id": 30208269, "comment_id": 48558584, "body": "It might make sense to eat a lot of copies of an exact thing, e.g. one could strip trailing zeros with <code>$(0),*</code> which would match only <code>0, 0, 0</code> (etc.). That said, seems relatively rare that this would be hugely useful."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 31, "last_activity_date": 1431501851, "creation_date": 1431501851, "answer_id": 30208269, "question_id": 30200374, "link": "https://stackoverflow.com/questions/30200374/how-do-i-debug-macros/30208269#30208269", "title": "How do I debug macros?", "body": "<p>There's two main ways to debug macros that are failing to expand:</p>\n\n<ul>\n<li><code>trace_macros!</code> and</li>\n<li><code>log_syntax!</code></li>\n</ul>\n\n<p>(NB. both are feature gated, under features of the same name, and so require the nightly compiler to work, <a href=\"https://github.com/brson/multirust\"><code>multirust</code></a> makes it easy to switch between versions for this sort of work.)</p>\n\n<p><code>trace_macros!(...)</code> takes a boolean argument that switches macro tracing on or off (i.e. it's stateful), if it's on, the compiler will print each macro invocation with its arguments as they are expanded. Usually one just wants to throw a <code>trace_macros!(true);</code> call at the top of the crate, e.g. if one <a href=\"https://play.rust-lang.org/?run=1&amp;code=%23![feature%28trace_macros%29]%0A%0Atrace_macros!%28true%29%3B%0A%0Afn%20main%28%29%0A%7B%0A%20%20%20%20%2F%2F%20%22Bitwise%20Cyclic%20Tag%22%20automation%20through%20macros%0A%20%20%20%20macro_rules!%20bct%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20cmd%200%3A%20%200%20...%20%3D%3E%20...%0A%20%20%20%20%20%20%20%20%280%2C%20%24%28%24program%3Att%29%2C*%20%3B%20%24_head%3Att%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28bct_p!%28%24%28%24program%29%2C*%2C%200%20%3B%20%29%29%3B%0A%20%20%20%20%20%20%20%20%280%2C%20%24%28%24program%3Att%29%2C*%20%3B%20%24_head%3Att%2C%20%24%28%24tail%3Att%29%2C*%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28bct_p!%28%24%28%24program%29%2C*%2C%200%20%3B%20%24%28%24tail%29%2C*%29%29%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20cmd%201x%3A%20%201%20...%20%3D%3E%201%20...%20x%0A%20%20%20%20%20%20%20%20%281%2C%20%24x%3Att%2C%20%24%28%24program%3Att%29%2C*%20%3B%201%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28bct_p!%28%24%28%24program%29%2C*%2C%201%2C%20%24x%20%3B%201%2C%20%24x%29%29%3B%0A%20%20%20%20%20%20%20%20%281%2C%20%24x%3Att%2C%20%24%28%24program%3Att%29%2C*%20%3B%201%2C%20%24%28%24tail%3Att%29%2C*%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28bct_p!%28%24%28%24program%29%2C*%2C%201%2C%20%24x%20%3B%201%2C%20%24%28%24tail%29%2C*%2C%20%24x%29%29%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20cmd%201x%3A%20%200%20...%20%3D%3E%200%20...%0A%20%20%20%20%20%20%20%20%281%2C%20%24x%3Att%2C%20%24%28%24program%3Att%29%2C*%20%3B%20%24%28%24tail%3Att%29%2C*%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28bct_p!%28%24%28%24program%29%2C*%2C%201%2C%20%24x%20%3B%20%24%28%24tail%29%2C*%29%29%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20halt%20on%20empty%20data%20string%0A%20%20%20%20%20%20%20%20%28%20%24%28%24program%3Att%29%2C*%20%3B%20%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28%28%29%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20macro_rules!%20print_bct%20%7B%0A%20%20%20%20%20%20%20%20%28%24x%3Att%20%3B%20%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28print!%28%22%7B%7D%22%2C%20stringify!%28%24x%29%29%29%3B%0A%20%20%20%20%20%20%20%20%28%20%3B%20%24d%3Att%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%28print!%28%22%7B%7D%22%2C%20stringify!%28%24d%29%29%29%3B%0A%20%20%20%20%20%20%20%20%28%24x%3Att%2C%20%24%28%24program%3Att%29%2C*%20%3B%20%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print!%28%22%7B%7D%22%2C%20stringify!%28%24x%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print_bct!%28%24program%20%3B%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%28%24x%3Att%2C%20%24%28%24program%3Att%29%2C*%20%3B%20%24%28%24data%3Att%29%2C*%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print!%28%22%7B%7D%22%2C%20stringify!%28%24x%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print_bct!%28%24program%20%3B%20%24data%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%28%20%3B%20%24d%3Att%2C%20%24%28%24data%3Att%29%2C*%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print!%28%22%7B%7D%22%2C%20stringify!%28%24d%29%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print_bct!%28%20%3B%20%24data%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20macro_rules!%20bct_p%20%7B%0A%20%20%20%20%20%20%20%20%28%24%28%24program%3Att%29%2C*%20%3B%20%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print_bct!%28%24%28%24program%3Att%29%2C*%20%3B%20%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!%28%22%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bct!%28%24%28%24program%29%2C*%20%3B%20%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%28%24%28%24program%3Att%29%2C*%20%3B%20%24%28data%3Att%29%2C*%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20print_bct!%28%24%28%24program%29%2C*%20%3B%20%24%28%24data%29%2C*%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!%28%22%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bct!%28%24%28%24program%29%2C*%20%3B%20%24%28%24data%29%2C*%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20the%20compiler%20is%20going%20to%20hate%20me...%0A%20%20%20%20bct!%280%2C%201%2C%201%2C%201%2C%200%2C%200%2C%200%3B%201%2C%200%29%3B%0A%7D%20%20%20%20%20%20%20%20%20%20&amp;version=nightly\">adds</a> the following to the top of your code:</p>\n\n<pre><code>#![feature(trace_macros)]\n\ntrace_macros!(true);\n</code></pre>\n\n<p>Then the output looks like:</p>\n\n<pre><code>bct! { 0 , 1 , 1 , 1 , 0 , 0 , 0 ; 1 , 0 }\nbct_p! { 1 , 1 , 1 , 0 , 0 , 0 , 0 ; 0 }\n&lt;anon&gt;:68:34: 68:35 error: no rules expected the token `0`\n&lt;anon&gt;:68     bct!(0, 1, 1, 1, 0, 0, 0; 1, 0);\n                                           ^\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>which hopefully narrows down the problem: the <code>bct_p!</code> call is invalid in some way. Looking at it carefully reveals the problem, the left-hand side of second arm of <code>bct_p</code> uses <code>data:tt</code> when it should use <code>$data:tt</code>, i.e. a missing <code>$</code>.</p>\n\n<pre><code>    ($($program:tt),* ; $(data:tt),*)\n</code></pre>\n\n<p>Fixing that allows compilation to make progress.</p>\n\n<p><code>log_syntax!</code> isn't as immediately useful in this case, but is still a neat tool: it takes arbitrary arguments and prints them out when it is expanded, e.g. </p>\n\n<pre><code>#![feature(log_syntax)]\n\nlog_syntax!(\"hello\", 1 2 3);\n\nfn main() {}\n</code></pre>\n\n<p>will print <code>\"hello\" , 1 2 3</code> as it compiles. This is most useful to inspect things inside other macro invocations.</p>\n\n<p>(Once you've got expansion to work, the best tool to debug any problems in the generated code is to use the <code>--pretty expanded</code> argument to <code>rustc</code>. NB. this requires the <code>-Z unstable-options</code> flag to be passed to activate it.)</p>\n"}, {"tags": [], "owner": {"reputation": 3779, "user_id": 242135, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/44b0dfdcc0345553f8aca6e154944c95?s=128&d=identicon&r=PG", "display_name": "Geoff", "link": "https://stackoverflow.com/users/242135/geoff"}, "is_accepted": false, "score": 13, "last_activity_date": 1550281408, "creation_date": 1550281408, "answer_id": 54719094, "question_id": 30200374, "link": "https://stackoverflow.com/questions/30200374/how-do-i-debug-macros/54719094#54719094", "title": "How do I debug macros?", "body": "<p>Another great tool to use for easily seeing the expansion is <a href=\"https://github.com/dtolnay/cargo-expand\" rel=\"noreferrer\">cargo-expand</a>.</p>\n\n<p>It can be installed with:</p>\n\n<pre><code>cargo install cargo-expand\n</code></pre>\n\n<p>And then used quite simply as:</p>\n\n<pre><code>cargo expand\n</code></pre>\n\n<p>Or with more precision to target a particular test file (tests/simple.rs for example):</p>\n\n<pre><code>cargo expand --test simple\n</code></pre>\n\n<p>Be sure to check out the <code>--help</code>, there are a bunch of options to narrow down what is expanded.  You can even target individual <a href=\"https://doc.rust-lang.org/reference/items.html\" rel=\"noreferrer\">items (structs, fns etc.)</a> for expansion!</p>\n"}], "owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11307, "favorite_count": 3, "accepted_answer_id": 30208269, "answer_count": 3, "score": 18, "last_activity_date": 1556804155, "creation_date": 1431460870, "last_edit_date": 1556804155, "question_id": 30200374, "link": "https://stackoverflow.com/questions/30200374/how-do-i-debug-macros", "title": "How do I debug macros?", "body": "<p>So I've got the following macro code I'm trying to debug. I've taken it from the <a href=\"http://doc.rust-lang.org/book/macros.html\" rel=\"noreferrer\" title=\"The Rust Programming Language Book\">Rust Book</a> under the section \"The deep end\". I renamed the variables within the macro to more closely follow <a href=\"http://esolangs.org/wiki/Bitwise_Cyclic_Tag\" rel=\"noreferrer\" title=\"Bitwise Cyclic Tag\">this</a> post.</p>\n\n<p>My goal is to have the program print out each line of the BCT program. I'm well aware that this is very compiler heavy.</p>\n\n<p>The only error rustc is giving me is:</p>\n\n<pre><code>user@debian:~/rust/macros$ rustc --pretty expanded src/main.rs -Z unstable-options &gt; src/main.precomp.rs\nsrc/main.rs:151:34: 151:35 error: no rules expected the token `0`\nsrc/main.rs:151     bct!(0, 1, 1, 1, 0, 0, 0; 1, 0);\n</code></pre>\n\n<p>What steps can I take to figure out <strong><em>where</em></strong> in the macro the problem is coming from?</p>\n\n<p>Here's my code:</p>\n\n<pre><code>fn main() {\n{\n    // \"Bitwise Cyclic Tag\" automation through macros\n    macro_rules! bct {\n        // cmd 0:  0 ... =&gt; ...\n        (0, $($program:tt),* ; $_head:tt)\n            =&gt; (bct_p!($($program),*, 0 ; ));\n        (0, $($program:tt),* ; $_head:tt, $($tail:tt),*)\n            =&gt; (bct_p!($($program),*, 0 ; $($tail),*));\n\n        // cmd 1x:  1 ... =&gt; 1 ... x\n        (1, $x:tt, $($program:tt),* ; 1)\n            =&gt; (bct_p!($($program),*, 1, $x ; 1, $x));\n        (1, $x:tt, $($program:tt),* ; 1, $($tail:tt),*)\n            =&gt; (bct_p!($($program),*, 1, $x ; 1, $($tail),*, $x));\n\n        // cmd 1x:  0 ... =&gt; 0 ...\n        (1, $x:tt, $($program:tt),* ; $($tail:tt),*)\n            =&gt; (bct_p!($($program),*, 1, $x ; $($tail),*));\n\n        // halt on empty data string\n        ( $($program:tt),* ; )\n            =&gt; (());\n        }\n\n    macro_rules! print_bct {\n        ($x:tt ; )\n            =&gt; (print!(\"{}\", stringify!($x)));\n        ( ; $d:tt)\n            =&gt; (print!(\"{}\", stringify!($d)));\n        ($x:tt, $($program:tt),* ; )\n            =&gt; {\n                print!(\"{}\", stringify!($x));\n                print_bct!($program ;);\n            };\n        ($x:tt, $($program:tt),* ; $($data:tt),*)\n            =&gt; {\n                print!(\"{}\", stringify!($x));\n                print_bct!($program ; $data);\n            };\n        ( ; $d:tt, $($data:tt),*)\n            =&gt; {\n                print!(\"{}\", stringify!($d));\n                print_bct!( ; $data);\n            };\n    }\n\n    macro_rules! bct_p {\n        ($($program:tt),* ; )\n            =&gt; {\n                print_bct!($($program:tt),* ; );\n                println!(\"\");\n                bct!($($program),* ; );\n            };\n        ($($program:tt),* ; $(data:tt),*)\n            =&gt; {\n                print_bct!($($program),* ; $($data),*);\n                println!(\"\");\n                bct!($($program),* ; $($data),*);\n            };\n    }\n\n    // the compiler is going to hate me...\n    bct!(0, 1, 1, 1, 0, 0, 0; 1, 0);\n}            \n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1431492146, "post_id": 30202868, "comment_id": 48516616, "body": "Argh, it&#39;s odd that I applied a similar technique when decomposing the structure in the assertions, but didn&#39;t see it in the mutable case. Thank you !"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1431471649, "creation_date": 1431471649, "answer_id": 30202868, "question_id": 30200199, "link": "https://stackoverflow.com/questions/30200199/whats-the-best-way-to-mutate-a-nested-enum/30202868#30202868", "title": "What&#39;s the best way to mutate a nested enum?", "body": "<p>The borrow checker works on names, and so some examples like your first approach don\u2019t work; this can be worked around by moving the value <code>v</code> to a different name first and <em>then</em> assigning the new value to <code>v</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn set_null_to_how_i_want_it(fields: &amp;[&amp;str], mut v: &amp;mut Value) {\n    debug_assert!(fields.len() &gt; 0);\n\n    for (fid, field) in fields.iter().enumerate() {\n        let tmp = v;\n        v = match *tmp {\n            Value::Object(ref mut map) =&gt; {\n                let val_to_insert = \n                    if fid == fields.len() - 1 {\n                        Value::Null\n                    } else {\n                        Value::Object(Default::default())\n                    };\n                map.entry(field.to_string()).or_insert(val_to_insert)\n            }\n            _ =&gt; unreachable!(),\n        };\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1266, "favorite_count": 0, "accepted_answer_id": 30202868, "answer_count": 1, "score": 3, "last_activity_date": 1431471649, "creation_date": 1431460264, "question_id": 30200199, "link": "https://stackoverflow.com/questions/30200199/whats-the-best-way-to-mutate-a-nested-enum", "title": "What&#39;s the best way to mutate a nested enum?", "body": "<p>I have an enum which roughly looks like this simplified example:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nenum Value {\n    Null,\n    Object(BTreeMap&lt;String, Value&gt;)\n}\n</code></pre>\n\n<p>Now I would like to, based on a list of field names, drill down into a <code>Value::Object</code> and initialize it with the given fields. The leaf field should always receive the <code>Value::Null</code> variant.</p>\n\n<p>What I would like to, and am used to, do is the following:</p>\n\n<pre><code>fn set_null_to_how_i_want_it(fields: &amp;[&amp;str], mut v: &amp;mut Value) {\n    debug_assert!(fields.len() &gt; 0);\n\n    for (fid, field) in fields.iter().enumerate() {\n        v = \n            match *v {\n                Value::Object(ref mut map) =&gt; {\n                    let val_to_insert = \n                        if fid == fields.len() - 1 {\n                            Value::Null\n                        } else {\n                            Value::Object(Default::default())\n                        };\n                    map.entry(field.to_string()).or_insert(val_to_insert)\n                }\n                _ =&gt; unreachable!(),\n            }\n    }\n}\n</code></pre>\n\n<p>However, the borrow checker will not allow it.</p>\n\n<p>Interestingly, what worked is the following, more complex and probably less performant implementation:</p>\n\n<pre><code>fn set_null_how_borrow_chk_allows_it(fields: &amp;[&amp;str], v: &amp;mut Value) {\n    let next = \n        match *v {\n            Value::Object(ref mut map) =&gt; {\n                let val_to_insert = \n                    if fields.len() == 1 {\n                        Value::Null\n                    } else {\n                        Value::Object(Default::default())\n                    };\n                map.entry(fields[0].to_string()).or_insert(val_to_insert)\n            },\n            _ =&gt; unreachable!()\n        };\n    if fields.len() &gt; 1 {\n        set_null_how_borrow_chk_allows_it(&amp;fields[1..], next)\n    }\n}\n</code></pre>\n\n<p>With the version above, all the following code runs fine:</p>\n\n<pre><code>let mut v = Value::Object(Default::default());\nlet fields = [\"foo\", \"bar\", \"baz\"];\nset_null_how_borrow_chk_allows_it(&amp;fields, &amp;mut v);\n\n\nlet mut map_count = 0;\nfor (fid, field) in fields.iter().enumerate() {\n    let next = \n        match v {\n            Value::Object(mut map) =&gt; {\n                map_count += 1;\n                map.remove(&amp;field.to_string()).unwrap()\n            },\n            _ =&gt; unreachable!()\n        };\n    v = next;\n}\nassert_eq!(map_count, fields.len());\nmatch v {\n    Value::Null =&gt; (),\n    Value::Object(_) =&gt; unreachable!(),\n}\n</code></pre>\n\n<p><strong>Is there a better way to initialize a nested enumeration or to get <code>set_null_to_how_i_want_it(...)</code> to work ?</strong></p>\n\n<h3>How to reproduce</h3>\n\n<p>You can have a look at the complete example <a href=\"https://github.com/Byron/depot/blob/master/src/rust/hello/tests/lang.rs#L1111\" rel=\"nofollow\">on github</a>, and play around with it as follows:</p>\n\n<pre><code>git clone https://github.com/Byron/depot\ncd depot/src/rust/hello\ncargo test --test lang\n# edit src/rust/hello/tests/lang.rs for testing\n</code></pre>\n\n<h3>Meta</h3>\n\n<pre><code>\u279c  hello git:(master) \u2717 rustc --version --verbose\nrustc 1.1.0-nightly (4b88e8f63 2015-05-11) (built 2015-05-12)\nbinary: rustc\ncommit-hash: 4b88e8f63eeaf557c916a0a1e73150b028c44c52\ncommit-date: 2015-05-11\nbuild-date: 2015-05-12\nhost: x86_64-apple-darwin\nrelease: 1.1.0-nightly\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1431456049, "post_id": 30197745, "comment_id": 48503425, "body": "Looks like a bug in the compiler to me. Or at least the error message is completely confusing. I&#39;d submitted an issue ticket on this if I were you."}], "answers": [{"tags": [], "owner": {"reputation": 229, "user_id": 4255309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5wow8.jpg?s=128&g=1", "display_name": "jojo", "link": "https://stackoverflow.com/users/4255309/jojo"}, "is_accepted": false, "score": 0, "last_activity_date": 1431455249, "creation_date": 1431455249, "answer_id": 30198770, "question_id": 30197745, "link": "https://stackoverflow.com/questions/30197745/cannot-mutably-borrow-in-a-pattern-guard-e0301/30198770#30198770", "title": "Cannot mutably borrow in a pattern guard [E0301]", "body": "<p>I already happened to find reason why it doesn't works. It's because <a href=\"https://github.com/retep998/winapi-rs\" rel=\"nofollow\">retep998/winapi-rs</a>\nwhich I'm using defines <code>HANDLE as *mut c_void</code>, casting to <code>usize</code> solves problem.</p>\n"}, {"comments": [{"owner": {"reputation": 229, "user_id": 4255309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5wow8.jpg?s=128&g=1", "display_name": "jojo", "link": "https://stackoverflow.com/users/4255309/jojo"}, "edited": false, "score": 1, "creation_date": 1431456478, "post_id": 30198883, "comment_id": 48503713, "body": "yes, you&#39;re right, it&#39;s pretty much the same as in my response (without example), I guess it&#39;s because I could potentially dereference foo and mutate it since <code>foo</code> itself is declared as mutable (but then I&#39;m rust newbie so I&#39;m only guessing)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1431455631, "creation_date": 1431455631, "answer_id": 30198883, "question_id": 30197745, "link": "https://stackoverflow.com/questions/30197745/cannot-mutably-borrow-in-a-pattern-guard-e0301/30198883#30198883", "title": "Cannot mutably borrow in a pattern guard [E0301]", "body": "<p>Here's a self-contained example:</p>\n\n<pre><code>type Handle = *mut ();\n\nfn main() {\n    let foo = 0 as Handle;\n    match foo {\n        x if x &gt;= 0 as Handle =&gt; None,\n        x                     =&gt; Some(x)\n    };\n}\n</code></pre>\n\n<p>Note the error message and <em>where it points</em>:</p>\n\n<pre><code>&lt;anon&gt;:6:19: 6:30 error: cannot mutably borrow in a pattern guard [E0301]\n&lt;anon&gt;:6         x if x &gt;= 0 as Handle =&gt; None,\n                           ^~~~~~~~~~~\n</code></pre>\n\n<p>It's actually the \"null\" that is complained about. You can flip the check around, then there won't be any mutability in the match guard. </p>\n\n<pre><code>type Handle = *mut ();\n\nfn main() {\n    let foo = 0 as Handle;\n    match foo {\n        x if x as isize &gt;= 0 =&gt; None,\n        x                    =&gt; Some(x)\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 229, "user_id": 4255309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5wow8.jpg?s=128&g=1", "display_name": "jojo", "link": "https://stackoverflow.com/users/4255309/jojo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 532, "favorite_count": 0, "accepted_answer_id": 30198883, "answer_count": 2, "score": 1, "last_activity_date": 1431455631, "creation_date": 1431451874, "question_id": 30197745, "link": "https://stackoverflow.com/questions/30197745/cannot-mutably-borrow-in-a-pattern-guard-e0301", "title": "Cannot mutably borrow in a pattern guard [E0301]", "body": "<pre><code>unsafe fn get_sync_handle(pid: u32) -&gt; Option&lt;HANDLE&gt;\n{\n    let raw_h = OpenProcess(SYNCHRONIZE, 0, pid as DWORD);\n    match raw_h\n    {\n        x if x &gt;= 0 as HANDLE =&gt; None,\n        x =&gt; Some(x)\n    }\n}\n\nsrc\\lib.rs:411:19: 411:23 error: cannot mutably borrow in a pattern guard [E0301] src\\lib.rs:411 x if x &gt;= zero =&gt; None\n</code></pre>\n\n<p>Could someone explain to me cause of this error? While I know this is quite contrived example I don't understand why compiler complains, I'm not trying to modify anything, and <code>raw_h</code> itself is immutable.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4818, "user_id": 403018, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/nDDbs.jpg?s=128&g=1", "display_name": "Gerstmann", "link": "https://stackoverflow.com/users/403018/gerstmann"}, "edited": false, "score": 6, "creation_date": 1431426067, "post_id": 30186553, "comment_id": 48481165, "body": "What about <a href=\"http://doc.rust-lang.org/nightly/std/io/struct.Stdin.html#method.read_line\" rel=\"nofollow noreferrer\">Stdin::read_line</a>?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 4818, "user_id": 403018, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/nDDbs.jpg?s=128&g=1", "display_name": "Gerstmann", "link": "https://stackoverflow.com/users/403018/gerstmann"}, "edited": false, "score": 1, "creation_date": 1431429102, "post_id": 30186553, "comment_id": 48483312, "body": "@Gerstmann: that function is rather odd to use in my opinion."}, {"owner": {"reputation": 3785, "user_id": 2388257, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/4QzSp.jpg?s=128&g=1", "display_name": "Hi-Angel", "link": "https://stackoverflow.com/users/2388257/hi-angel"}, "reply_to_user": {"reputation": 4818, "user_id": 403018, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/nDDbs.jpg?s=128&g=1", "display_name": "Gerstmann", "link": "https://stackoverflow.com/users/403018/gerstmann"}, "edited": false, "score": 0, "creation_date": 1555706471, "post_id": 30186553, "comment_id": 98209516, "body": "@Gerstmann I just tried it: for some reason it&#39;s made to accept a buffer rather than return a string, so you can&#39;t compose it with other functions working on strings."}, {"owner": {"reputation": 24594, "user_id": 148195, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/386f66584492acb26272c930891400e6?s=128&d=identicon&r=PG", "display_name": "mk12", "link": "https://stackoverflow.com/users/148195/mk12"}, "edited": false, "score": 0, "creation_date": 1603996830, "post_id": 30186553, "comment_id": 114219974, "body": "The separate <code>let stdin = io::stdin();</code> line is no longer necessary. You can just do <code>for line in io::stdin().lock().lines() { ... }</code>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 57, "last_activity_date": 1526145835, "last_edit_date": 1526145835, "creation_date": 1431422125, "answer_id": 30186553, "question_id": 30186037, "link": "https://stackoverflow.com/questions/30186037/how-can-i-read-a-single-line-from-stdin/30186553#30186553", "title": "How can I read a single line from stdin?", "body": "<p>In <a href=\"https://stackoverflow.com/questions/13579266/how-to-read-user-input-in-rust\">How to read user input in Rust?</a> you can see how to iterate over all lines:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() {\n    let stdin = io::stdin();\n    for line in stdin.lock().lines() {\n        println!(\"{}\", line.unwrap());\n    }\n}\n</code></pre>\n\n<p>You can also manually iterate without a for-loop:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() {\n    let stdin = io::stdin();\n    let mut iterator = stdin.lock().lines();\n    let line1 = iterator.next().unwrap().unwrap();\n    let line2 = iterator.next().unwrap().unwrap();\n}\n</code></pre>\n\n<p>You cannot write a one-liner to do what you want. But the following reads a single line (and is exactly the same answer as in <a href=\"https://stackoverflow.com/questions/28528998/how-do-i-read-a-single-string-from-standard-input\">How do I read a single String from standard input?</a>):</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() {\n    let stdin = io::stdin();\n    let line1 = stdin.lock().lines().next().unwrap().unwrap();\n}\n</code></pre>\n\n<hr>\n\n<p>You can also use the <a href=\"https://crates.io/crates/text_io\" rel=\"noreferrer\"><code>text_io</code></a> crate for super simple input:</p>\n\n<pre><code>#[macro_use] extern crate text_io;\n\nfn main() {\n    // reads until a \\n is encountered\n    let line: String = read!(\"{}\\n\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 17, "last_activity_date": 1518216773, "last_edit_date": 1518216773, "creation_date": 1431433766, "answer_id": 30190918, "question_id": 30186037, "link": "https://stackoverflow.com/questions/30186037/how-can-i-read-a-single-line-from-stdin/30190918#30190918", "title": "How can I read a single line from stdin?", "body": "<p>If you truly want the equivalent to <code>fgets</code>, then <a href=\"https://stackoverflow.com/questions/30186037/read-a-single-line-from-stdin-in-rust#comment48481165_30186553\">@Gerstmann is right</a>, you should use <a href=\"http://doc.rust-lang.org/nightly/std/io/struct.Stdin.html#method.read_line\" rel=\"noreferrer\"><code>Stdin::read_line</code></a>. This method accepts a buffer that you have more control of to put the string into:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() {\n    let mut line = String::new();\n    let stdin = io::stdin();\n    stdin.lock().read_line(&amp;mut line).unwrap();\n    println!(\"{}\", line)\n}\n</code></pre>\n\n<p>Unlike C, you can't accidentally overrun the buffer; it will be automatically resized if the input string is too big.</p>\n\n<p>The <a href=\"https://stackoverflow.com/a/30186553/155423\">answer from @oli_obk - ker</a> is the idiomatic solution you will see most of the time. In it, the string is managed for you, and the interface is much cleaner. </p>\n"}, {"tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": false, "score": 7, "last_activity_date": 1580145402, "last_edit_date": 1580145402, "creation_date": 1570969374, "answer_id": 58363533, "question_id": 30186037, "link": "https://stackoverflow.com/questions/30186037/how-can-i-read-a-single-line-from-stdin/58363533#58363533", "title": "How can I read a single line from stdin?", "body": "<p>Read a single line from <code>stdin</code>:  </p>\n\n<pre><code>    let mut line = String::new();\n    std::io::stdin().read_line(&amp;mut line)?; // including '\\n'\n</code></pre>\n\n<p>You may remove <code>'\\n'</code> using <code>line.trim_end()</code></p>\n\n<p>Read until EOF:  </p>\n\n<pre><code>    let mut buffer = String::new();\n    std::io::stdin().read_to_string(&amp;mut buffer)?;\n</code></pre>\n\n<hr>\n\n<p>Using implicit synchronization:</p>\n\n<pre><code>use std::io;\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut line = String::new();\n    io::stdin().read_line(&amp;mut line)?;\n\n    println!(\"You entered: {}\", line);\n    Ok(())\n}\n</code></pre>\n\n<hr>\n\n<p>Using explicit synchronization:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let stdin = io::stdin();\n    let mut handle = stdin.lock();\n\n    let mut line = String::new();\n    handle.read_line(&amp;mut line)?;\n\n    println!(\"You entered: {}\", line);\n    Ok(())\n}\n</code></pre>\n\n<hr>\n\n<p>If you interested in the number of bytes e.g. <code>n</code>, use:<br>\n<code>let n = handle.read_line(&amp;mut line)?;</code><br>\nor<br>\n<code>let n = io::stdin().read_line(&amp;mut line)?;</code>  </p>\n\n<p>Try this:</p>\n\n<pre><code>use std::io;\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut line = String::new();\n    let n = io::stdin().read_line(&amp;mut line)?;\n\n    println!(\"{} bytes read\", n);\n    println!(\"You entered: {}\", line);\n    Ok(())\n}\n</code></pre>\n\n<p>See <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line\" rel=\"noreferrer\">doc</a></p>\n"}], "owner": {"reputation": 62673, "user_id": 492336, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/UjW5c.png?s=128&g=1", "display_name": "sashoalm", "link": "https://stackoverflow.com/users/492336/sashoalm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 26944, "favorite_count": 7, "accepted_answer_id": 30186553, "answer_count": 3, "score": 43, "last_activity_date": 1580145402, "creation_date": 1431420698, "last_edit_date": 1526132682, "question_id": 30186037, "link": "https://stackoverflow.com/questions/30186037/how-can-i-read-a-single-line-from-stdin", "title": "How can I read a single line from stdin?", "body": "<p>I'm asking for the equivalent of <code>fgets()</code> in C.</p>\n\n<pre><code>let line = ...;\nprintln!(\"You entered: {}\", line);\n</code></pre>\n\n<p>I've read <a href=\"https://stackoverflow.com/questions/13579266/how-to-read-user-input-in-rust\">How to read user input in Rust?</a>, but it asks how to read multiple lines; I want only one line. </p>\n\n<p>I also read <a href=\"https://stackoverflow.com/questions/28528998/how-do-i-read-a-single-string-from-standard-input\">How do I read a single String from standard input?</a>, but I'm not sure if it behaves like <code>fgets()</code> or <code>sscanf(\"%s\",...)</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 6, "last_activity_date": 1431462240, "creation_date": 1431462240, "answer_id": 30200739, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests/30200739#30200739", "title": "How to initialize the logger for integration tests?", "body": "<p>There's no good way to do this kind of thing built-in right now.</p>\n\n<p>You can write a macro that inserts some sort of initialization call before each test, but that's as close as there is.</p>\n"}, {"comments": [{"owner": {"reputation": 417, "user_id": 2237171, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dfe8b8970c30aef802740340ed89adf4?s=128&d=identicon&r=PG", "display_name": "Alex M", "link": "https://stackoverflow.com/users/2237171/alex-m"}, "edited": false, "score": 1, "creation_date": 1588134716, "post_id": 39007155, "comment_id": 108780110, "body": "This no longer works,  you get an panic when calling init multiple times: <code>panicked at &#39;env_logger::init should not be called after logger initialized: SetLoggerError(())</code>"}], "tags": [], "owner": {"reputation": 5160, "user_id": 553092, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d161f230b3456d0bfd740154ae16e0a3?s=128&d=identicon&r=PG", "display_name": "Steven", "link": "https://stackoverflow.com/users/553092/steven"}, "is_accepted": false, "score": 2, "last_activity_date": 1471472555, "creation_date": 1471472555, "answer_id": 39007155, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests/39007155#39007155", "title": "How to initialize the logger for integration tests?", "body": "<p>For now, you can just re-initialize the logger at the top of every test and ignore the error. It's not a pretty solution but it works and is perfectly safe.</p>\n\n<pre><code>let _ = env_logger::init();\n\n// your test code...\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4509, "user_id": 740067, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b5ab928a16fe85b254a9cb182307d48a?s=128&d=identicon&r=PG", "display_name": "xliiv", "link": "https://stackoverflow.com/users/740067/xliiv"}, "edited": false, "score": 0, "creation_date": 1600705382, "post_id": 43093371, "comment_id": 113165208, "body": "Could anyone provide a full example? Where this code should go?"}], "tags": [], "owner": {"reputation": 15722, "user_id": 284318, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1e0588e345236881aff23040eb1d5dc3?s=128&d=identicon&r=PG", "display_name": "Danilo Bargen", "link": "https://stackoverflow.com/users/284318/danilo-bargen"}, "is_accepted": false, "score": 23, "last_activity_date": 1574334724, "last_edit_date": 1574334724, "creation_date": 1490790075, "answer_id": 43093371, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests/43093371#43093371", "title": "How to initialize the logger for integration tests?", "body": "<p>You can use something like this:</p>\n\n<pre><code>use std::sync::Once;\n\nstatic INIT: Once = Once::new();\n\n/// Setup function that is only run once, even if called multiple times.\nfn setup() {\n    INIT.call_once(|| {\n        env_logger::init().unwrap();\n    });\n}\n</code></pre>\n\n<p>Then simply call <code>setup()</code> in the beginning of each test.</p>\n\n<p>Originally based on <a href=\"https://medium.com/@ericdreichert/run-code-once-in-rust-e2b75be41c39\" rel=\"noreferrer\">this blogpost</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509451305, "post_id": 47033582, "comment_id": 81015949, "body": "This is a very bad idea because Cargo runs tests in parallel by default. This likely will introduce test flakiness for the first few tests that are run at the same time as this one."}, {"owner": {"reputation": 98, "user_id": 8835688, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/128a375c457d13fa5c5b68d12b1eb821?s=128&d=identicon&r=PG&f=1", "display_name": "snake_case", "link": "https://stackoverflow.com/users/8835688/snake-case"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509489028, "post_id": 47033582, "comment_id": 81038287, "body": "Huh, I didn&#39;t know that, they are not parallel for me. Thanks for the tip though.  Ok I found out from <code>cargo test --help</code> that the number of test threads are the number of CPUs I have. I will update the answer to note that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1509489154, "post_id": 47033582, "comment_id": 81038329, "body": "<a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch11-02-running-tests.html#running-tests-in-parallel-or-consecutively\" rel=\"nofollow noreferrer\">They run in parallel by default</a>, so unless you&#39;ve disabled this explicitly, it&#39;s still going to affect the tests."}], "tags": [], "owner": {"reputation": 98, "user_id": 8835688, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/128a375c457d13fa5c5b68d12b1eb821?s=128&d=identicon&r=PG&f=1", "display_name": "snake_case", "link": "https://stackoverflow.com/users/8835688/snake-case"}, "is_accepted": false, "score": -4, "last_activity_date": 1509489510, "last_edit_date": 1509489510, "creation_date": 1509447120, "answer_id": 47033582, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests/47033582#47033582", "title": "How to initialize the logger for integration tests?", "body": "<p>I've observed <code>cargo test</code> running the tests in alphabetical order, so I devised a very dirty hack to initialize the logger.</p>\n\n<ol>\n<li>I made a module called <code>aaa_testing</code> residing inside the root of the crate.</li>\n<li><p>Inside the module, I wrote the logger initializer.</p>\n\n<pre><code>#[test]\nfn initialize_logger() {\n    env_logger::init();\n}\n</code></pre></li>\n</ol>\n\n<p>Yes I did create a test that will always pass, but if you want to have a test for initializing the logger, you can do a <code>assert!(env_logger::try_init().is_ok());</code></p>\n\n<hr>\n\n<p>Shepmaster pointed out that <code>cargo test</code> runs tests asynchronously and may make logging of the first few tests unreliable. To prevent this, the tests can be ran in the same thread. (This will cause performance problems, <strong>so this answer should not be used if you need multiple threads to test your project.</strong>) </p>\n\n<blockquote>\n  <p>If you want to control the number of simultaneous running test cases, pass the <code>--test-threads</code> option to the test binaries:</p>\n\n<pre><code>cargo test -- --test-threads=1\n</code></pre>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1553111415, "post_id": 55268274, "comment_id": 97269210, "body": "I don&#39;t know what the documentation is attempting to show, but the <code>init</code> function is never called by anything and the <code>info!</code> line is not printed when the test either passes or fails (via <code>RUST_LOG=info cargo test</code>)."}, {"owner": {"reputation": 1301, "user_id": 932311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e48c6edbc780e069f225a295f9ca65d?s=128&d=identicon&r=PG", "display_name": "Ji\u0159&#237; Str&#225;nsk&#253;", "link": "https://stackoverflow.com/users/932311/ji%c5%99%c3%ad-str%c3%a1nsk%c3%bd"}, "edited": false, "score": 1, "creation_date": 1566313854, "post_id": 55268274, "comment_id": 101613473, "body": "The <code>init</code> function has to be called explicitly, it&#39;s fixed in <a href=\"https://docs.rs/env_logger/0.6.2/env_logger/#capturing-logs-in-tests\" rel=\"nofollow noreferrer\">docs for v0.6.2</a>. Also, log printing happens only if the test fails (which i think is good)."}, {"owner": {"reputation": 4509, "user_id": 740067, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b5ab928a16fe85b254a9cb182307d48a?s=128&d=identicon&r=PG", "display_name": "xliiv", "link": "https://stackoverflow.com/users/740067/xliiv"}, "edited": false, "score": 0, "creation_date": 1600705605, "post_id": 55268274, "comment_id": 113165300, "body": "I&#39;m getting <code>panicked at &#39;env_logger::init should not be called after logger initialized: SetLoggerError(())&#39;,</code>"}], "tags": [], "owner": {"reputation": 3226, "user_id": 589224, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a744a269ff74d0a8395f8e2dea7303b6?s=128&d=identicon&r=PG", "display_name": "Patrick Tescher", "link": "https://stackoverflow.com/users/589224/patrick-tescher"}, "is_accepted": false, "score": 4, "last_activity_date": 1590613705, "last_edit_date": 1590613705, "creation_date": 1553108209, "answer_id": 55268274, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests/55268274#55268274", "title": "How to initialize the logger for integration tests?", "body": "<p>The <a href=\"https://docs.rs/env_logger/0.7.1/env_logger/#capturing-logs-in-tests\" rel=\"nofollow noreferrer\">latest documentation has a recommendation</a>:</p>\n\n<pre><code>#[cfg(test)]\nmod tests {\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(3, 1 + 2);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 71, "user_id": 13077143, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb63654d0e902241d08a17f25daadec8?s=128&d=identicon&r=PG&f=1", "display_name": "Konstantin Grech", "link": "https://stackoverflow.com/users/13077143/konstantin-grech"}, "is_accepted": false, "score": 0, "last_activity_date": 1591257862, "creation_date": 1591257862, "answer_id": 62189702, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests/62189702#62189702", "title": "How to initialize the logger for integration tests?", "body": "<p>In addition to Danilo Bargen's comment, you can write it in a shorter form:</p>\n\n<pre><code>use std::sync::Once;\n\nstatic INIT: Once = Once::new();\n\nfn setup() {\n  INIT.call_once(env_logger::init);\n}\n</code></pre>\n"}], "owner": {"reputation": 473, "user_id": 4744493, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0db906d5981fbc0eab8cd79e10ae872b?s=128&d=identicon&r=PG&f=1", "display_name": "Dmitry Uvarov", "link": "https://stackoverflow.com/users/4744493/dmitry-uvarov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3985, "favorite_count": 3, "accepted_answer_id": 30200739, "answer_count": 6, "score": 27, "last_activity_date": 1591257862, "creation_date": 1431379193, "last_edit_date": 1455029311, "question_id": 30177845, "link": "https://stackoverflow.com/questions/30177845/how-to-initialize-the-logger-for-integration-tests", "title": "How to initialize the logger for integration tests?", "body": "<p>I have a crate with production code in the <code>src</code> directory and integration tests in the <code>tests</code> directory. The production code uses <code>log</code> macros.</p>\n\n<p>I would like to init a global logger when running the integration tests (e.g. <code>env_logger::init().unwrap();</code>)\nThere are several tests and the test order is not defined, so I don't know in which test I should put the initialize command.</p>\n\n<p>Is there any way I can do this nicely? Perhaps by overriding the tests <code>main</code> function?</p>\n"}, {"tags": ["rust", "closures"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 11, "creation_date": 1431377452, "post_id": 30177395, "comment_id": 48460721, "body": "Have you seen this recent <a href=\"http://huonw.github.io/blog/2015/05/finding-closure-in-rust/\" rel=\"nofollow noreferrer\">great article on closures</a>?"}], "answers": [{"comments": [{"owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 0, "creation_date": 1431887441, "post_id": 30232500, "comment_id": 48677851, "body": "If a closure only implements <code>FnOnce</code>, does this mean that it can be called only once?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 0, "creation_date": 1431902601, "post_id": 30232500, "comment_id": 48682273, "body": "@nalply, yes, only once."}, {"owner": {"reputation": 1057, "user_id": 1789237, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/71e0187d388e7261f59dade5f3d1dbe4?s=128&d=identicon&r=PG", "display_name": "sleeparrow", "link": "https://stackoverflow.com/users/1789237/sleeparrow"}, "edited": false, "score": 9, "creation_date": 1440718288, "post_id": 30232500, "comment_id": 52401743, "body": "I misread nalply&#39;s comment and it caused me some confusion. Future readers, please note that he said &quot;if a closure <i>only</i> implements <code>FnOnce</code>&quot;."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1473354846, "post_id": 30232500, "comment_id": 66119401, "body": "Implementation detail: <i>will automatically implement as many of those as it can.</i> is not entirely true, it will implement them automatically if it seems to be needed. You can detect a missing Fn-impl for a closure that was used for an FnMut argument using specialization. This is bug <a href=\"https://github.com/rust-lang/rust/issues/26085\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26085</a>"}, {"owner": {"reputation": 5962, "user_id": 3873510, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/YpJMi.jpg?s=128&g=1", "display_name": "Paul Razvan Berg", "link": "https://stackoverflow.com/users/3873510/paul-razvan-berg"}, "edited": false, "score": 2, "creation_date": 1607336167, "post_id": 30232500, "comment_id": 115230522, "body": "I still struggle to understand how all closures implement <code>FnOnce</code> even if they can be called multiple times. The name for this trait is confusing."}, {"owner": {"reputation": 475, "user_id": 131074, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2a36a5e8471ec0f3e80eb50d1b47ee49?s=128&d=identicon&r=PG&f=1", "display_name": "hjfreyer", "link": "https://stackoverflow.com/users/131074/hjfreyer"}, "edited": false, "score": 2, "creation_date": 1609346550, "post_id": 30232500, "comment_id": 115819969, "body": "A couple ways to think about it: 1. The &quot;Once&quot; in <code>FnOnce</code> refers to an upper bound on how many times the caller will invoke it, not how many times it <i>can</i> be invoked. 2. You can always convert a closure that can be called many times into a closure that can only be called once: simply throw away any memory associated with the closure after the first call. But you can&#39;t convert it back the other way."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 149, "last_activity_date": 1575992140, "last_edit_date": 1575992140, "creation_date": 1431591335, "answer_id": 30232500, "question_id": 30177395, "link": "https://stackoverflow.com/questions/30177395/when-does-a-closure-implement-fn-fnmut-and-fnonce/30232500#30232500", "title": "When does a closure implement Fn, FnMut and FnOnce?", "body": "<p>The traits each represent more and more restrictive properties about closures/functions, indicated by the signatures of their <code>call_...</code> method, and particularly the type of <code>self</code>:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/ops/trait.FnOnce.html\" rel=\"noreferrer\"><code>FnOnce</code></a> (<code>self</code>) are functions that can be called once</li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/trait.FnMut.html\" rel=\"noreferrer\"><code>FnMut</code></a> (<code>&amp;mut self</code>) are functions that can be called if they have <code>&amp;mut</code> access to their environment</li>\n<li><a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"noreferrer\"><code>Fn</code></a> (<code>&amp;self</code>) are functions that can be called if they only have <code>&amp;</code> access to their environment</li>\n</ul>\n\n<p>A closure <code>|...| ...</code> will automatically implement as many of those as it can.</p>\n\n<ul>\n<li>All closures implement <code>FnOnce</code>: a closure that can't be called once doesn't deserve the name. Note that if a closure only implements <code>FnOnce</code>, it can be called only once.</li>\n<li>Closures that don't move out of their captures implement <code>FnMut</code>, allowing them to be called more than once (if there is unaliased access to the function object).</li>\n<li>Closures that don't need unique/mutable access to their captures implement <code>Fn</code>, allowing them to be called essentially everywhere.</li>\n</ul>\n\n<p>These restrictions follow directly from the type of <code>self</code> and the \"desugaring\" of closures into structs; described in my blog post <a href=\"http://huonw.github.io/blog/2015/05/finding-closure-in-rust\" rel=\"noreferrer\"><em>Finding Closure in Rust</em></a>.</p>\n\n<p>For information on closures, see <a href=\"https://doc.rust-lang.org/book/ch13-01-closures.html\" rel=\"noreferrer\">Closures: Anonymous Functions that Can Capture Their Environment</a> in <em>The Rust Programming Language</em>.</p>\n"}], "owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 25606, "favorite_count": 38, "accepted_answer_id": 30232500, "answer_count": 1, "score": 141, "last_activity_date": 1575992140, "creation_date": 1431377376, "last_edit_date": 1473344420, "question_id": 30177395, "link": "https://stackoverflow.com/questions/30177395/when-does-a-closure-implement-fn-fnmut-and-fnonce", "title": "When does a closure implement Fn, FnMut and FnOnce?", "body": "<p>What are the <strong>specific conditions</strong> for a closure to implement the <code>Fn</code>, <code>FnMut</code> and <code>FnOnce</code> traits?</p>\n\n<p>That is:</p>\n\n<ul>\n<li>When does a closure <em>not</em> implement the <code>FnOnce</code> trait?</li>\n<li>When does a closure <em>not</em> implement the <code>FnMut</code> trait?</li>\n<li>When does a closure <em>not</em> implement the <code>Fn</code> trait?</li>\n</ul>\n\n<p>For instance, mutating the state of the closure on it's body makes the compiler not implement <code>Fn</code> on it.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1431379038, "post_id": 30174822, "comment_id": 48461518, "body": "This thing is different enough from everything in the standard library (that I know of) that implementing it manually, with <code>unsafe</code> code, is probably the easiest, most reliable, and all around best option. It most likely won&#39;t fit into the existing DST scheme or into Box."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431389831, "post_id": 30174822, "comment_id": 48465184, "body": "There are exactly two types of unsized objects: slices (<code>[T]</code>), where it adds a length member; and trait objects (<code>Trait</code>, <code>Trait + Send</code>, <i>&amp;c.</i>), where it adds a vtable including a destructor which knows how large an object to free. There is no mechanism for declaring your own variety of unsized objects."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431413151, "post_id": 30174822, "comment_id": 48472884, "body": "@ChrisMorgan: Humpf... I was kind of afraid of that... May I suppose thus that <code>box</code> allocates based on <code>std::mem::size_of</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431417146, "post_id": 30174822, "comment_id": 48474997, "body": "@MatthieuM.: it would add significant complexity, which has not been justified yet; until such a time it will be at best a very low-priority task."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431420721, "post_id": 30174822, "comment_id": 48477229, "body": "@ChrisMorgan: Oh sure, I am trying to understand how Rust works at low-level; not being able to use <code>box</code> syntax is annoying, but it&#39;s not necessarily a show-stopper."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431429641, "post_id": 30174822, "comment_id": 48483701, "body": "<code>box</code> syntax is definitely not stable yet; placement new hasn\u2019t even been implemented, for example. And that\u2019s something that\u2019s definitely higher priority than custom types of unsized types!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431433561, "post_id": 30174822, "comment_id": 48486609, "body": "@ChrisMorgan: Sure, I&#39;d just be glad to understand how the current box syntax works."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1431439721, "post_id": 30174822, "comment_id": 48491652, "body": "At the moment, the answer is sadly \u201cmagic\u201d."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1431442256, "post_id": 30174822, "comment_id": 48493808, "body": "@ChrisMorgan: Would you formalize all this in an answer? After all, &quot;Not possible&quot; is a perfectly valid answer."}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1450208933, "post_id": 30202796, "comment_id": 56337914, "body": "This is correct, but there is a third class of DST, <code>struct Foo&lt;T: ?Sized&gt;</code>; <i>however</i>, it must be parameterized by one of the three classes, which fundamentally comes down to using one of the <i>two</i> DST classes of traits or slices in the lowest level."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1431471250, "creation_date": 1431471250, "answer_id": 30202796, "question_id": 30174822, "link": "https://stackoverflow.com/questions/30174822/how-to-create-a-dst-type/30202796#30202796", "title": "How to create a DST type?", "body": "<p>There are exactly two types of unsized objects at present: slices (<code>[T]</code>), where it adds a length member; and trait objects (<code>Trait</code>, <code>Trait + Send</code>, <em>&amp;c.</em>), where it adds a vtable including a destructor which knows how large an object to free.</p>\n\n<p>There is not currently any mechanism for declaring your own variety of unsized objects.</p>\n"}, {"tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 1, "last_activity_date": 1584319764, "creation_date": 1584319764, "answer_id": 60699135, "question_id": 30174822, "link": "https://stackoverflow.com/questions/30174822/how-to-create-a-dst-type/60699135#60699135", "title": "How to create a DST type?", "body": "<p>At this point, you should seek inspiration from <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html#method.new_uninit_slice\" rel=\"nofollow noreferrer\"><code>Arc::new_uinint_slice</code></a> and <a href=\"https://doc.rust-lang.org/src/alloc/sync.rs.html#212-220\" rel=\"nofollow noreferrer\"><code>Arc::from_ptr</code></a>.  </p>\n\n<p>We've no nice mechanism to make custom DSTs play nicely together though, making <code>Arc&lt;Known&lt;T&gt;&gt;</code> nasty.</p>\n\n<p>We still always create <code>Arc&lt;dyn Trait&gt;</code> with <code>CoerceUnsized</code> because you cannot make trait objects form DSTs currently.</p>\n"}, {"tags": [], "owner": {"reputation": 2652, "user_id": 5445670, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xrwS2.png?s=128&g=1", "display_name": "Solomon Ucko", "link": "https://stackoverflow.com/users/5445670/solomon-ucko"}, "is_accepted": false, "score": 1, "last_activity_date": 1592452207, "creation_date": 1592452207, "answer_id": 62442068, "question_id": 30174822, "link": "https://stackoverflow.com/questions/30174822/how-to-create-a-dst-type/62442068#62442068", "title": "How to create a DST type?", "body": "<p>You could try using <a href=\"https://docs.rs/vptr/0.2.1/vptr/\" rel=\"nofollow noreferrer\">the vptr crate</a>, which stores the vtable pointer with the data instead of with the pointer.</p>\n"}], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1132, "favorite_count": 1, "accepted_answer_id": 30202796, "answer_count": 3, "score": 8, "last_activity_date": 1592452207, "creation_date": 1431368220, "question_id": 30174822, "link": "https://stackoverflow.com/questions/30174822/how-to-create-a-dst-type", "title": "How to create a DST type?", "body": "<p>DST (Dynamically Sized Types) are a thing in Rust now. I have <em>used</em> them successfully, with a flexible last member which is known to the compiler (such as <code>[u8]</code>).</p>\n\n<p>What I am looking to do, however, is to create a custom DST. Say, for example:</p>\n\n<pre><code>struct Known&lt;S&gt; {\n    dropit: fn (&amp;mut S) -&gt; (),\n    data: S,\n}\n\nstruct Unknown {\n    dropit: fn (&amp;mut ()) -&gt; (),\n    data: (),\n}\n</code></pre>\n\n<p>With an expected usage being <code>Box&lt;Known&lt;S&gt;&gt;</code> => <code>Box&lt;Unknown&gt;</code> => <code>Box&lt;Known&lt;S&gt;&gt;</code>, where the middleware need not know about concrete types.</p>\n\n<p><em>Note: yes, I know about <code>Any</code>, and no I am not interested in using it.</em></p>\n\n<p>I am open to suggestions in the layout of both <code>Known</code> and <code>Unknown</code>, however:</p>\n\n<ol>\n<li><code>size_of::&lt;Box&lt;Known&gt;&gt;() = size_of::&lt;Box&lt;Unknown&gt;&gt;() = size_of::&lt;Box&lt;u32&gt;&gt;()</code>; that is it should be a thin pointer.</li>\n<li>dropping <code>Box&lt;Unknown&gt;</code> drops its content</li>\n<li>cloning <code>Box&lt;Unknown&gt;</code> (assuming a clonable <code>S</code>), clones its content</li>\n<li>ideally, <code>fn dup(u: &amp;Unknown) -&gt; Box&lt;Unknown&gt; { box u.clone() }</code> works</li>\n</ol>\n\n<p>I have particular difficulties with (3) and (4), I could solve (3) with manually allocating memory (not using <code>box</code>, but directly calling <code>malloc</code>) but I would prefer providing an idiomatic experience to the user.</p>\n\n<p>I could not find any documentation on how to inform <code>box</code> of the right size to allocate.</p>\n"}, {"tags": ["llvm", "rust", "cross-compiling", "mmix"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431360254, "post_id": 30172123, "comment_id": 48450923, "body": "I don&#39;t think you can get away with just flipping an LLVM flag and getting something that would run. For example, there&#39;s <a href=\"https://github.com/rust-lang/rust/tree/master/src/librustc_back/target\" rel=\"nofollow noreferrer\">a directory</a> of target architectures, some (tiny) <a href=\"https://github.com/rust-lang/rust/tree/master/src/rt/arch\" rel=\"nofollow noreferrer\">runtime shims</a>, etc. However, you might be able to start <a href=\"http://doc.rust-lang.org/nightly/book/no-stdlib.html\" rel=\"nofollow noreferrer\">without the standard library</a>."}, {"owner": {"reputation": 363, "user_id": 3835342, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6f54c04b770283464c6ae03c213a596?s=128&d=identicon&r=PG&f=1", "display_name": "Cole Reynolds", "link": "https://stackoverflow.com/users/3835342/cole-reynolds"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431361217, "post_id": 30172123, "comment_id": 48451503, "body": "Using <code>no_std</code> looks like the right place to start; the issue now becomes how to target the LLVM IR for MMIX."}], "answers": [{"tags": [], "owner": {"reputation": 7657, "user_id": 182327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f39a093535874d323647c1cb64a6e36b?s=128&d=identicon&r=PG", "display_name": "richo", "link": "https://stackoverflow.com/users/182327/richo"}, "is_accepted": false, "score": 3, "last_activity_date": 1436239259, "creation_date": 1436239259, "answer_id": 31259187, "question_id": 30172123, "link": "https://stackoverflow.com/questions/30172123/how-to-compile-rust-for-mmix/31259187#31259187", "title": "How to compile Rust for MMIX", "body": "<p>Not a super helpful answer, but you could look at my pull request where I implemented support for powerpc: <a href=\"https://github.com/rust-lang/rust/pull/20980\" rel=\"nofollow\">https://github.com/rust-lang/rust/pull/20980</a></p>\n\n<p>(And then the followup where I unbroke some stuff in libc that I messed up the first time around: <a href=\"https://github.com/rust-lang/rust/pull/21500\" rel=\"nofollow\">https://github.com/rust-lang/rust/pull/21500</a>)</p>\n\n<p>Some things have moved around in the meantime, but this should give you a general idea of which places you'll need to poke. I feel like I should mention though that while the general approach to architecture support has been to officially support few architectures, but hold in tree others, it's worth noting that especially boutique arches that are breakage prone might be an uphill battle if you want official support in core: <a href=\"https://github.com/rust-lang/rust/pull/26505\" rel=\"nofollow\">https://github.com/rust-lang/rust/pull/26505</a></p>\n"}], "owner": {"reputation": 363, "user_id": 3835342, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6f54c04b770283464c6ae03c213a596?s=128&d=identicon&r=PG&f=1", "display_name": "Cole Reynolds", "link": "https://stackoverflow.com/users/3835342/cole-reynolds"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 481, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1436239259, "creation_date": 1431359303, "last_edit_date": 1431369277, "question_id": 30172123, "link": "https://stackoverflow.com/questions/30172123/how-to-compile-rust-for-mmix", "title": "How to compile Rust for MMIX", "body": "<p>Is it possible to compile Rust for the MMIX architecture?</p>\n\n<p>From what I understand about the Rust compiler (which is admittedly not a whole lot) it uses LLVM as a backend; coming from a C and gcc background, I know that gcc can produce MMIX executables but I'm not sure how to get the same result from rustc.</p>\n\n<p>Does anyone know how one would go about doing this? Or pointers as to where I should start searching?</p>\n\n<p>Thank you</p>\n"}, {"tags": ["compiler-errors", "rust"], "answers": [{"tags": [], "owner": {"reputation": 1070, "user_id": 1283083, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/Vy6f7.jpg?s=128&g=1", "display_name": "gustafbstrom", "link": "https://stackoverflow.com/users/1283083/gustafbstrom"}, "is_accepted": true, "score": 12, "last_activity_date": 1431336029, "last_edit_date": 1431336029, "creation_date": 1431325076, "answer_id": 30160758, "question_id": 30160458, "link": "https://stackoverflow.com/questions/30160458/compile-error-when-trying-to-print-an-integer-in-rust-v0-13-0/30160758#30160758", "title": "Compile error when trying to print an integer in Rust v0.13.0", "body": "<p>The error is because the compiler you use is old. For this compiler, try by explicitly giving an integer type:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x: i32 = 5;\nprintln!(\"x = {}\", x);\n</code></pre>\n\n<p>On newer compilers, your code will work as is, even without specifying <code>i32</code> explicitly:</p>\n\n<pre><code>let x = 5;\nprintln!(\"x = {}\", x);\n</code></pre>\n\n<p>You can use the official online compiler at <a href=\"https://play.rust-lang.org/\" rel=\"noreferrer\">https://play.rust-lang.org/</a>, which is always an up-to-date version of Rust.</p>\n"}], "owner": {"reputation": 62673, "user_id": 492336, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/UjW5c.png?s=128&g=1", "display_name": "sashoalm", "link": "https://stackoverflow.com/users/492336/sashoalm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3415, "favorite_count": 0, "accepted_answer_id": 30160758, "answer_count": 1, "score": 5, "last_activity_date": 1442348854, "creation_date": 1431323514, "last_edit_date": 1442348854, "question_id": 30160458, "link": "https://stackoverflow.com/questions/30160458/compile-error-when-trying-to-print-an-integer-in-rust-v0-13-0", "title": "Compile error when trying to print an integer in Rust v0.13.0", "body": "<p>I thought this would work:</p>\n\n<pre><code>let x = 5;\nprintln!(\"x = {}\", x);\n</code></pre>\n\n<p>But it gives the following compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>main.rs:3:24: 3:25 error: unable to infer enough type information to locate the impl of the trait `core::fmt::Show` for the type `_`; type annotations required                                                                             \nmain.rs:3     println!(\"x = {}\", x);\n</code></pre>\n\n<p>Am I missing something?                                                                                </p>\n\n<p>I'm using an <a href=\"http://www.tutorialspoint.com/compile_rust_online.php\" rel=\"nofollow\">online Rust compiler</a> and the version they have is <code>Rust v0.13.0</code>.</p>\n"}, {"tags": ["rust", "identity"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431296905, "post_id": 30157258, "comment_id": 48421668, "body": "For your example, <code>SomeStruct</code> is not <code>Copy</code>able, so it would be moved. When something moves, do you want the object ID to be the same or different?"}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431297002, "post_id": 30157258, "comment_id": 48421686, "body": "But a move is also just a bitwise copy with the difference that the old place becomes invalid (ownership moved). So basically I want to make visible that those are really different chunks of memory ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431297202, "post_id": 30157258, "comment_id": 48421736, "body": "<i>&quot;But a move is also just a bitwise copy&quot;</i> not necessarily. In your example, nothing would be copied, because there is nothing <b>to</b> copy :-). In general, I believe the compiler is also free to optimize out moves that don&#39;t change the program behavior."}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431297533, "post_id": 30157258, "comment_id": 48421804, "body": "Ok, but can we make it visible somehow? Something like <code>{:p}</code> but not limited to pointers. I just love to make all those small things visible rather than just take them for granted ;)"}], "answers": [{"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1431298464, "post_id": 30157393, "comment_id": 48422021, "body": "Mmh...ok then. In this example it prints out two different addresses so it did copy. You commented above that it wouldn&#39;t copy. I&#39;m confused ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1431298770, "post_id": 30157393, "comment_id": 48422092, "body": "@Christoph my guess is that optimization is coming into play. My psychic powers say you are compiling this locally as <code>rustc foo.rs</code>. If so, try adding <code>-O</code> ^_^. When I run the code on <a href=\"http://is.gd/yOM8IE\" rel=\"nofollow noreferrer\">the playpen</a>, I see two lines of the same value for <code>-O2</code> and two different values for <code>-O0</code>."}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431299421, "post_id": 30157393, "comment_id": 48422283, "body": "Notice that on this example both pointers will be the same because those are zero-sized objects! Here&#39;s a better view of it <a href=\"http://is.gd/WUQVxN\" rel=\"nofollow noreferrer\">is.gd/WUQVxN</a>. So yeah, you should probably add to your &#39;*&#39; that zero sized objects doesn&#39;t take space too :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431299703, "post_id": 30157393, "comment_id": 48422349, "body": "@thelink2012 that&#39;s what I would have expected too, but try turning off optimization (as mentioned a few comments above). You will see two different values printed! Crazy!"}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431300133, "post_id": 30157393, "comment_id": 48422445, "body": "@Shepmaster wow that one is really interesting! Although if the zero-sized is dynamically allocated they&#39;ll have the same allocated address regardless of optimization =P. So I still suggest to add it to the &#39;*&#39; point."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431300289, "post_id": 30157393, "comment_id": 48422482, "body": "@thelink2012 well, the footnote indicates items that can&#39;t be <i>referenced</i>, not items that have no size or that are coalesced into one ^_^. You certainly can get the address of zero-sized items, boxed or not."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1431333489, "post_id": 30157393, "comment_id": 48432658, "body": "<b>Warning</b>: The Rust language makes no guarantee, and the optimizer is therefore free NOT to move (in memory) when it&#39;s more efficient. Therefore an observed move in Debug might not occur in Release, and both executions would still be valid."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1431503064, "post_id": 30157393, "comment_id": 48521912, "body": "It&#39;s probably worth noting one can get an idea via addresses by heap-allocating non-zero-sized things with a <code>Box</code>. The <code>Box</code> pointer itself will then be unique and stable (there&#39;s no guarantee of uniqueness for zero-sized things). Alternatively, one can just store an id inside the objects."}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1434641185, "post_id": 30157393, "comment_id": 49876314, "body": "Sorry for digging it up again. The thing I still don&#39;t seem to understand. Why does it <i>not</i> print the same memory addresses as soon as I make <code>SomeStruct</code> to contain a vector?  <a href=\"http://is.gd/Pqd1px\" rel=\"nofollow noreferrer\">is.gd/Pqd1px</a> Because if I don&#39;t have a vector in my struct it does print the same memory addresses: <a href=\"http://is.gd/WUQVxN\" rel=\"nofollow noreferrer\">is.gd/WUQVxN</a> (assuming it&#39;s compiled in release mode for both)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1550015840, "last_edit_date": 1550015840, "creation_date": 1431297744, "answer_id": 30157393, "question_id": 30157258, "link": "https://stackoverflow.com/questions/30157258/does-rust-track-unique-object-ids-and-can-we-print-them/30157393#30157393", "title": "Does Rust track unique object ids and can we print them?", "body": "<p>No, Rust does not have any automatically generated ID for objects. That kind of functionality would incur some overhead for every user, and Rust wants to impose as little overhead as it needs to. Everything else should be opt-in.</p>\n\n<hr>\n\n<p>As far as I know, the address of an item is as unique as you can get:</p>\n\n<pre><code>struct SomeStruct;\n\nfn main() {\n    let some_thing = SomeStruct;\n    println!(\"{:p}\", &amp;some_thing);\n    let another = some_thing;\n    println!(\"{:p}\", &amp;another);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>0x7ffc020ba638\n0x7ffc020ba698\n</code></pre>\n\n<p>Everything<sup>1</sup> takes up space somewhere, so you can get the address of that space and print that.</p>\n\n<p>This might be <strong>too</strong> unique for some cases. For example, when you transfer ownership of an item, you might expect that the ID stays the same. I think in that case, you'd have to roll your own. <a href=\"https://stackoverflow.com/q/32935808/155423\">Something like a global atomic variable that you can pull from when you create the object</a>. Such a scheme won't apply to objects you don't control.</p>\n\n<hr>\n\n<p><strong>1</strong> \u2014 Well, almost everything. I know that <code>const</code> items aren't guaranteed to have a location, which is why <code>static</code> items exist.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 964, "favorite_count": 0, "accepted_answer_id": 30157393, "answer_count": 1, "score": 3, "last_activity_date": 1550015916, "creation_date": 1431296591, "last_edit_date": 1550015916, "question_id": 30157258, "link": "https://stackoverflow.com/questions/30157258/does-rust-track-unique-object-ids-and-can-we-print-them", "title": "Does Rust track unique object ids and can we print them?", "body": "<p>Does Rust use some kind of instance id for each object behind the scenes and if so, can it be made visible?</p>\n\n<p>Consider this</p>\n\n<pre><code>struct SomeStruct;\n\nfn main() {\n    let some_thing = SomeStruct;\n    println!(\"{:UniqueId}\", some_thing);\n    let another = some_thing;\n    println!(\"{:UniqueId}\", another);\n}\n</code></pre>\n\n<p>I'm using a pseudo format string with <code>{:UniqueId}</code> here. In this case it may print</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>4711\n4712\n</code></pre>\n\n<p>I know that Rust makes a bitwise copy and I want to make that actually visible. If I had such an instance id I could make it visible by comparing ids.</p>\n\n<p>There may be an alternative way to achieve the same though.</p>\n"}, {"tags": ["stack", "heap", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1431296713, "post_id": 30157201, "comment_id": 48421632, "body": "The first question that comes to mind is <i>&quot;why?&quot;</i>. What kind of code would work differently with this knowledge?"}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1431296813, "post_id": 30157201, "comment_id": 48421648, "body": "I don&#39;t need this code for anything different than discovering the language more :)"}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 5, "creation_date": 1431298151, "post_id": 30157201, "comment_id": 48421949, "body": "The <code>0x1</code> is a dummy address that the Rust allocator returns for zero sized objects, it&#39;s not on the heap. See <a href=\"https://github.com/rust-lang/rust/blob/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f/src/liballoc/heap.rs#L90\" rel=\"nofollow noreferrer\">heap.rs#L90</a>."}, {"owner": {"reputation": 1100, "user_id": 1548557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e0d23686d0f2a1f68be3cdb60a4adc86?s=128&d=identicon&r=PG", "display_name": "MrMesees", "link": "https://stackoverflow.com/users/1548557/mrmesees"}, "edited": false, "score": 1, "creation_date": 1515184626, "post_id": 30157201, "comment_id": 83218469, "body": "I had the same question. I&#39;d like to know because it&#39;s of interest to me how the thing is working under the hood. For example this trivial example seems to show everything in near contiguous addresses <a href=\"https://play.rust-lang.org/?gist=4d9e0b2e94fe179edf9baf961316665c&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> . I&#39;m now wondering if all references to the heap take up stack space and it&#39;s giving me the address of the stack reference to the heap."}], "answers": [{"comments": [{"owner": {"reputation": 15119, "user_id": 8182118, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d321a0bcd7b3d7831b54d1d9b5b70f60?s=128&d=identicon&r=PG", "display_name": "Masklinn", "link": "https://stackoverflow.com/users/8182118/masklinn"}, "edited": false, "score": 1, "creation_date": 1614687150, "post_id": 30157900, "comment_id": 117455586, "body": "Most modern POSIX systems (/ allocators) use <code>mmap</code> to get heap space rather than <code>(s)brk</code>. <code>(s)brk</code> is formally deprecated on macOS (will trigger warnings), and informally so on most every BSD (where they are called &quot;historical curiosities&quot;). I think the correct way to do this would be to get the <i>stack base</i> (<code>pthread_attr_getstackaddr</code>), the current stack pointer, and check whether your pointer is between the two."}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": false, "score": 6, "last_activity_date": 1431302901, "last_edit_date": 1431302901, "creation_date": 1431302564, "answer_id": 30157900, "question_id": 30157201, "link": "https://stackoverflow.com/questions/30157201/how-to-tell-if-something-is-heap-or-stack-allocated/30157900#30157900", "title": "How to tell if something is heap or stack allocated?", "body": "<p>If you're on some POSIX system, you can probably use the <a href=\"http://man7.org/linux/man-pages/man2/sbrk.2.html\" rel=\"noreferrer\"><code>sbrk()</code></a> system call with an argument of <code>0</code> to determine the current location of the program break, which is the current limit of the heap. If the address of a given value is less than this address but greater than the start of the heap then it's on the heap. I don't know how you'd check if it's on the stack though, which isn't necessarily automatically the alternative of not being on the heap, since it can also be statically initialized or uninitialized data, though that would probably be obvious to you upon inspection of the code. You can probably use the <code>rbp</code> register on an x86_64 architecture, which should point to the beginning of the current stack frame. That's if you want to check if it's on the current stack frame, or if you want to check if it's anywhere on the stack you can probably use <code>rsp</code>.</p>\n\n<p>I think you can get the start of the heap with the <a href=\"http://man7.org/linux/man-pages/man3/end.3.html\" rel=\"noreferrer\"><code>end()</code></a> system call using the <code>end</code> argument. So the lower bound of the heap would be the result of <code>end(end)</code> and the upper bound would be <code>sbrk(0)</code>.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1316, "favorite_count": 1, "answer_count": 1, "score": 11, "last_activity_date": 1431302901, "creation_date": 1431296039, "last_edit_date": 1431296799, "question_id": 30157201, "link": "https://stackoverflow.com/questions/30157201/how-to-tell-if-something-is-heap-or-stack-allocated", "title": "How to tell if something is heap or stack allocated?", "body": "<p>I wonder if there's a way to figure out if a variable is stack or heap allocated.</p>\n\n<p>Consider this:</p>\n\n<pre><code>struct SomeStruct;\n\nfn main() {\n    let some_thing = Box::new(SomeStruct);\n    println!(\"{:p}\", some_thing);\n    foo(&amp;*some_thing);\n}\n\nfn foo (bar: &amp;SomeStruct) {\n    println!(\"{:p}\", bar);\n}\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>0x1\n0x1\n</code></pre>\n\n<p>And then</p>\n\n<pre><code>struct SomeStruct;\n\nfn main() {\n    let some_thing = &amp;SomeStruct;\n    println!(\"{:p}\", some_thing);\n    foo(some_thing);\n}\n\nfn foo (bar: &amp;SomeStruct) {\n    println!(\"{:p}\", bar);\n}\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>0x10694dcc0\n0x10694dcc0\n</code></pre>\n\n<p>I can see that the memory address is much shorter for the heap allocated version but I don't know if that's an reliable way to tell the difference. I wonder if there's something like <code>std::foo::is_heap_allocated()</code></p>\n"}, {"tags": ["string", "rust", "string-concatenation"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 16, "creation_date": 1431280297, "post_id": 30154541, "comment_id": 48416533, "body": "Note that <code>str</code> and <code>&amp;str</code> are <i>different types</i> and for 99% of the time, you only should care about <code>&amp;str</code>. There are other questions detailing the differences between them."}, {"owner": {"reputation": 31, "user_id": 14721946, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c1ea623782234bc1a1955f7d392e791a?s=128&d=identicon&r=PG&f=1", "display_name": "Nathan McMillan", "link": "https://stackoverflow.com/users/14721946/nathan-mcmillan"}, "edited": false, "score": 0, "creation_date": 1617661237, "post_id": 30154541, "comment_id": 118361202, "body": "Does this answer your question? <a href=\"https://stackoverflow.com/questions/35157399/how-to-concatenate-static-strings-in-rust\">How to concatenate static strings in Rust</a>"}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1431301705, "post_id": 30154791, "comment_id": 48422780, "body": "What do you think about <code>Add</code> / <code>+</code> symbol? You could cover it if you want."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431301810, "post_id": 30154791, "comment_id": 48422803, "body": "Maybe that&#39;s simple enough, but understanding it requires looking at the possible type signatures for Add with String."}, {"owner": {"reputation": 3070, "user_id": 770829, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7fdf3bab39125ecd7525bad17f8c561?s=128&d=identicon&r=PG", "display_name": "jsalter", "link": "https://stackoverflow.com/users/770829/jsalter"}, "edited": false, "score": 0, "creation_date": 1431427647, "post_id": 30154791, "comment_id": 48482287, "body": "Thanks! Are you able to go into slightly more depth into how &amp;String can be dereferenced as a &amp;str? Which part of its implemention permits that and/or where does it say this in the doco?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3070, "user_id": 770829, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7fdf3bab39125ecd7525bad17f8c561?s=128&d=identicon&r=PG", "display_name": "jsalter", "link": "https://stackoverflow.com/users/770829/jsalter"}, "edited": false, "score": 1, "creation_date": 1431433265, "post_id": 30154791, "comment_id": 48486394, "body": "@jsalter that&#39;s a pretty separate topic, so it may be good as another top-level question. I have updated to link to the appropriate docs (as close as I can get, at least...)"}, {"owner": {"reputation": 365, "user_id": 2593302, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17fe83beb5917d7541b088a20bce08b3?s=128&d=identicon&r=PG&f=1", "display_name": "chad", "link": "https://stackoverflow.com/users/2593302/chad"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 13, "creation_date": 1479868240, "post_id": 30154791, "comment_id": 68735905, "body": "@ChrisMorgan It should be noted that the discrepancy <code>.to_owned()</code> and <code>.to_string()</code> has been fixed since the above comment thanks to impl specialization. They both now have the same performance when called on a <code>&amp;str</code>. Relevant commit: <a href=\"https://github.com/rust-lang/rust/pull/32586/files\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/32586/files</a>"}, {"owner": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 0, "creation_date": 1509463498, "post_id": 30154791, "comment_id": 81024443, "body": "The type specifications are definitely helpful in this code."}, {"owner": {"reputation": 1873, "user_id": 1725553, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-CsRuoQmwqLo/AAAAAAAAAAI/AAAAAAAAAFM/hESpKGJTWZo/photo.jpg?sz=128", "display_name": "paddyg", "link": "https://stackoverflow.com/users/1725553/paddyg"}, "edited": false, "score": 0, "creation_date": 1510926690, "post_id": 30154791, "comment_id": 81656347, "body": "Should 2nd sentence 2nd para read &#39;... case for <code>String</code> and <code>&amp;String</code>...&#39; as it&#39;s an edit of less than 6 characters SO won&#39;t allow me to make this change! (or could be a more subtle point that I haven&#39;t understood)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1873, "user_id": 1725553, "user_type": "registered", "accept_rate": 40, "profile_image": "https://lh3.googleusercontent.com/-CsRuoQmwqLo/AAAAAAAAAAI/AAAAAAAAAFM/hESpKGJTWZo/photo.jpg?sz=128", "display_name": "paddyg", "link": "https://stackoverflow.com/users/1725553/paddyg"}, "edited": false, "score": 0, "creation_date": 1510927663, "post_id": 30154791, "comment_id": 81657046, "body": "@paddyg Yes, it&#39;s kind of subtle. The starting types are both <code>String</code>, but then you take a reference to one (<code>&amp;String</code>) which can be coerced to a <code>&amp;str</code>. I put the entire path <code>String</code> -&gt; <code>&amp;String</code> -&gt; <code>&amp;str</code> because beginners may not even realize that you can take a reference to a <code>String</code>. :-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 342, "last_activity_date": 1610461140, "last_edit_date": 1610461140, "creation_date": 1431280879, "answer_id": 30154791, "question_id": 30154541, "link": "https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings/30154791#30154791", "title": "How do I concatenate strings?", "body": "<p>When you concatenate strings, you need to allocate memory to store the result. The easiest to start with is <code>String</code> and <code>&amp;str</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut owned_string: String = &quot;hello &quot;.to_owned();\n    let borrowed_string: &amp;str = &quot;world&quot;;\n    \n    owned_string.push_str(borrowed_string);\n    println!(&quot;{}&quot;, owned_string);\n}\n</code></pre>\n<p>Here, we have an owned string that we can mutate. This is efficient as it potentially allows us to reuse the memory allocation. There's a similar case for <code>String</code> and <code>String</code>, as <code>&amp;String</code> <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#deref-methods\" rel=\"noreferrer\">can be dereferenced as <code>&amp;str</code></a>.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut owned_string: String = &quot;hello &quot;.to_owned();\n    let another_owned_string: String = &quot;world&quot;.to_owned();\n    \n    owned_string.push_str(&amp;another_owned_string);\n    println!(&quot;{}&quot;, owned_string);\n}\n</code></pre>\n<p>After this, <code>another_owned_string</code> is untouched (note no <code>mut</code> qualifier). There's another variant that <em>consumes</em> the <code>String</code> but doesn't require it to be mutable. This is an <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-Add%3C%26%27_%20str%3E\" rel=\"noreferrer\">implementation of the <code>Add</code> trait</a> that takes a <code>String</code> as the left-hand side and a <code>&amp;str</code> as the right-hand side:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let owned_string: String = &quot;hello &quot;.to_owned();\n    let borrowed_string: &amp;str = &quot;world&quot;;\n    \n    let new_owned_string = owned_string + borrowed_string;\n    println!(&quot;{}&quot;, new_owned_string);\n}\n</code></pre>\n<p>Note that <code>owned_string</code> is no longer accessible after the call to <code>+</code>.</p>\n<p>What if we wanted to produce a new string, leaving both untouched? The simplest way is to use <a href=\"https://doc.rust-lang.org/std/macro.format.html\" rel=\"noreferrer\"><code>format!</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let borrowed_string: &amp;str = &quot;hello &quot;;\n    let another_borrowed_string: &amp;str = &quot;world&quot;;\n    \n    let together = format!(&quot;{}{}&quot;, borrowed_string, another_borrowed_string);\n\n    // After https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\n    // let together = format!(&quot;{borrowed_string}{another_borrowed_string}&quot;);\n\n    println!(&quot;{}&quot;, together);\n}\n</code></pre>\n<p>Note that both input variables are immutable, so we know that they aren't touched. If we wanted to do the same thing for any combination of <code>String</code>, we can use the fact that <code>String</code> also can be formatted:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let owned_string: String = &quot;hello &quot;.to_owned();\n    let another_owned_string: String = &quot;world&quot;.to_owned();\n    \n    let together = format!(&quot;{}{}&quot;, owned_string, another_owned_string);\n\n    // After https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\n    // let together = format!(&quot;{owned_string}{another_owned_string}&quot;);\n    println!(&quot;{}&quot;, together);\n}\n</code></pre>\n<p>You don't <em>have</em> to use <code>format!</code> though. You can <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#impl-Clone\" rel=\"noreferrer\">clone one string</a> and append the other string to the new string:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let owned_string: String = &quot;hello &quot;.to_owned();\n    let borrowed_string: &amp;str = &quot;world&quot;;\n    \n    let together = owned_string.clone() + borrowed_string;\n    println!(&quot;{}&quot;, together);\n}\n</code></pre>\n<p><strong>Note</strong> - all of the type specification I did is redundant - the compiler can infer all the types in play here. I added them simply to be clear to people new to Rust, as I expect this question to be popular with that group!</p>\n"}, {"comments": [{"owner": {"reputation": 1000, "user_id": 159344, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=128&d=identicon&r=PG", "display_name": "Duane J", "link": "https://stackoverflow.com/users/159344/duane-j"}, "edited": false, "score": 0, "creation_date": 1515621098, "post_id": 41688369, "comment_id": 83374381, "body": "Where is <code>join</code> documented? It seems to sit halfway between an Array and a String. I searched through the <a href=\"https://doc.rust-lang.org/std/primitive.array.html\" rel=\"nofollow noreferrer\">array</a> documentation and was quickly confused."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 1000, "user_id": 159344, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=128&d=identicon&r=PG", "display_name": "Duane J", "link": "https://stackoverflow.com/users/159344/duane-j"}, "edited": false, "score": 3, "creation_date": 1515624359, "post_id": 41688369, "comment_id": 83375692, "body": "@DuaneJ <code>join</code> is actually attached to <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html\" rel=\"nofollow noreferrer\">the <code>SliceContactExt</code> trait</a>. The trait is marked unstable but its methods are stable and <a href=\"https://doc.rust-lang.org/std/prelude/#prelude-contents\" rel=\"nofollow noreferrer\">are included in the Prelude</a> so they&#39;re usable everywhere by default. The team appear to be well aware this trait does not need to exist and I imagine things will change in future with it."}, {"owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "edited": false, "score": 0, "creation_date": 1616168210, "post_id": 41688369, "comment_id": 117926404, "body": "Perhaps you should mention that <code>join</code> is more efficient than <code>s1.to_owned().push_str(s2)</code> for concatenating two <code>str</code>&#39;s as it avoids the second allocation."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 68, "last_activity_date": 1484622924, "last_edit_date": 1484622924, "creation_date": 1484621806, "answer_id": 41688369, "question_id": 30154541, "link": "https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings/41688369#41688369", "title": "How do I concatenate strings?", "body": "<p>To concatenate multiple strings into a single string, separated by another character, there are a couple of ways.</p>\n\n<p>The nicest I have seen is using the <code>join</code> method on an array:</p>\n\n<pre><code>fn main() {\n    let a = \"Hello\";\n    let b = \"world\";\n    let result = [a, b].join(\"\\n\");\n\n    print!(\"{}\", result);\n}\n</code></pre>\n\n<p>Depending on your use case you might also prefer more control:</p>\n\n<pre><code>fn main() {\n    let a = \"Hello\";\n    let b = \"world\";\n    let result = format!(\"{}\\n{}\", a, b);\n\n    print!(\"{}\", result);\n}\n</code></pre>\n\n<p>There are some more manual ways I have seen, some avoiding one or two allocations here and there. For readability purposes I find the above two to be sufficient.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1579015179, "post_id": 55581111, "comment_id": 105622143, "body": "<code>+</code> is already mentioned in an <a href=\"https://stackoverflow.com/a/30154791/155423\">existing answer</a>. (<i>This is an implementation of the <code>Add</code> trait that takes a <code>String</code> as the left-hand side and a <code>&amp;str</code> as the right-hand side:</i>)"}, {"owner": {"reputation": 348, "user_id": 1463086, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5e261a8cf830404885473906a1869272?s=128&d=identicon&r=PG", "display_name": "suside", "link": "https://stackoverflow.com/users/1463086/suside"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1579112077, "post_id": 55581111, "comment_id": 105660557, "body": "True, <i>existing answer</i> is so broad I didn&#39;t notice though."}, {"owner": {"reputation": 2269, "user_id": 1794002, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b63211e8bd9155deed45b05dd9d249ce?s=128&d=identicon&r=PG", "display_name": "Anssi", "link": "https://stackoverflow.com/users/1794002/anssi"}, "edited": false, "score": 1, "creation_date": 1596187930, "post_id": 55581111, "comment_id": 111738344, "body": "Best answer so far. Just use array method or concat for strings. Macros are just handy for hiding some syntax rather than inventing complex syntax making core language cryptic. Add trait could be nice for objects but can be confusing at least."}], "tags": [], "owner": {"reputation": 348, "user_id": 1463086, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5e261a8cf830404885473906a1869272?s=128&d=identicon&r=PG", "display_name": "suside", "link": "https://stackoverflow.com/users/1463086/suside"}, "is_accepted": false, "score": 15, "last_activity_date": 1554754508, "creation_date": 1554754508, "answer_id": 55581111, "question_id": 30154541, "link": "https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings/55581111#55581111", "title": "How do I concatenate strings?", "body": "<p>I think that <a href=\"https://doc.rust-lang.org/1.0.0/std/slice/trait.SliceConcatExt.html#tymethod.concat\" rel=\"noreferrer\"><code>concat</code></a> method and <code>+</code> should be mentioned here as well:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>assert_eq!(\n  (\"My\".to_owned() + \" \" + \"string\"),\n  [\"My\", \" \", \"string\"].concat()\n);\n</code></pre>\n\n<p>and there is also <a href=\"https://doc.rust-lang.org/1.0.0/std/macro.concat!.html\" rel=\"noreferrer\"><code>concat!</code></a> macro but only for literals:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let s = concat!(\"test\", 10, 'b', true);\nassert_eq!(s, \"test10btrue\");\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1579015048, "post_id": 59728838, "comment_id": 105622063, "body": "This answer does not add anything new to the existing answers."}], "tags": [], "owner": {"reputation": 1187, "user_id": 10390273, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-ZnPo-zLAkpE/AAAAAAAAAAI/AAAAAAAAAQ0/eDv2tBJWBWM/photo.jpg?sz=128", "display_name": "ASHWIN RAJEEV", "link": "https://stackoverflow.com/users/10390273/ashwin-rajeev"}, "is_accepted": false, "score": 14, "last_activity_date": 1612803399, "last_edit_date": 1612803399, "creation_date": 1578985028, "answer_id": 59728838, "question_id": 30154541, "link": "https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings/59728838#59728838", "title": "How do I concatenate strings?", "body": "<h2>Simple ways to concatenate strings in Rust</h2>\n<p>There are various methods available in Rust to concatenate strings</p>\n<h2>First method (Using <code>concat!()</code> ):</h2>\n<pre><code>fn main() {\n    println!(&quot;{}&quot;, concat!(&quot;a&quot;, &quot;b&quot;))\n}\n</code></pre>\n<p>The output of the above code is :</p>\n<blockquote>\n<p>ab</p>\n</blockquote>\n<hr />\n<h2>Second method (using <code>push_str()</code> and <code>+</code> operator):</h2>\n<pre><code>fn main() {\n    let mut _a = &quot;a&quot;.to_string();\n    let _b = &quot;b&quot;.to_string();\n    let _c = &quot;c&quot;.to_string();\n\n    _a.push_str(&amp;_b);\n\n    println!(&quot;{}&quot;, _a);\n\n    println!(&quot;{}&quot;, _a + &amp;_c);\n}\n</code></pre>\n<p>The output of the above code is:</p>\n<blockquote>\n<p>ab</p>\n<p>abc</p>\n</blockquote>\n<hr />\n<h2>Third method (<code>Using format!()</code>):</h2>\n<pre><code>fn main() {\n    let mut _a = &quot;a&quot;.to_string();\n    let _b = &quot;b&quot;.to_string();\n    let _c = format!(&quot;{}{}&quot;, _a, _b);\n\n    println!(&quot;{}&quot;, _c);\n}\n</code></pre>\n<p>The output of the above code is :</p>\n<blockquote>\n<p>ab</p>\n</blockquote>\n<p>Check it out and experiment with <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f50feb4d857982551eb462abe3a01acc\" rel=\"nofollow noreferrer\">Rust playground</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 1892, "user_id": 1402498, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/NzPfI.png?s=128&g=1", "display_name": "JamesHoux", "link": "https://stackoverflow.com/users/1402498/jameshoux"}, "is_accepted": false, "score": 6, "last_activity_date": 1600975106, "last_edit_date": 1600975106, "creation_date": 1600974658, "answer_id": 64052930, "question_id": 30154541, "link": "https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings/64052930#64052930", "title": "How do I concatenate strings?", "body": "<p>2020 Update: Concatenation by String Interpolation</p>\n<p>RFC 2795 issued 2019-10-27:\nSuggests support for implicit arguments to do what many people would know as &quot;string interpolation&quot; -- a way of embedding arguments within a string to concatenate them.</p>\n<p>RFC: <a href=\"https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\" rel=\"noreferrer\">https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html</a></p>\n<p>Latest issue status can be found here:\n<a href=\"https://github.com/rust-lang/rust/issues/67984\" rel=\"noreferrer\">https://github.com/rust-lang/rust/issues/67984</a></p>\n<p>At the time of this writing (2020-9-24), I believe this feature should be available in the Rust Nightly build.</p>\n<p>This will allow you to concatenate via the following shorthand:</p>\n<pre><code>format_args!(&quot;hello {person}&quot;)\n</code></pre>\n<p>It is equivalent to this:</p>\n<pre><code>format_args!(&quot;hello {person}&quot;, person=person)\n</code></pre>\n<p>There is also the &quot;ifmt&quot; crate, which provides its own kind of string interpolation:</p>\n<p><a href=\"https://crates.io/crates/ifmt\" rel=\"noreferrer\">https://crates.io/crates/ifmt</a></p>\n"}], "owner": {"reputation": 3070, "user_id": 770829, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7fdf3bab39125ecd7525bad17f8c561?s=128&d=identicon&r=PG", "display_name": "jsalter", "link": "https://stackoverflow.com/users/770829/jsalter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128633, "favorite_count": 56, "accepted_answer_id": 30154791, "answer_count": 5, "score": 284, "last_activity_date": 1612803399, "creation_date": 1431279620, "last_edit_date": 1464220854, "question_id": 30154541, "link": "https://stackoverflow.com/questions/30154541/how-do-i-concatenate-strings", "title": "How do I concatenate strings?", "body": "<p>How do I concatenate the following combinations of types:</p>\n\n<ul>\n<li><code>str</code> and <code>str</code></li>\n<li><code>String</code> and <code>str</code></li>\n<li><code>String</code> and <code>String</code></li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431281692, "post_id": 30153973, "comment_id": 48417028, "body": "What kind of protection against concurrent mutation do you have? What do other event-driven APIs do to deal with races caused by concurrent mutation?"}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431283382, "post_id": 30153973, "comment_id": 48417608, "body": "@Shepmaster Concurrency is disallowed, i.e. it&#39;s guaranted the callbacks will be called in the same thread as <code>gui_run</code>. I think it doesn&#39;t even allow using the API from another thread other than the main one."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1431286645, "post_id": 30153973, "comment_id": 48418794, "body": "Concurrency isn&#39;t even important. Two aliasing <code>&amp;mut</code>s (or even just one <code>&amp;mut</code> and a <code>&amp;</code>)  within one thread is enough to get you into hot water, for example around iterator invalidation."}], "answers": [{"comments": [{"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431287920, "post_id": 30155921, "comment_id": 48419161, "body": "Good point about the cells type, but the issues pointed in the code comments are is still up as the <code>RefCell</code> <code>obj</code> has been moved into <code>same_action</code> (cannot take it as <code>&amp;</code> because static lifetime in the constraint <code>F: Fn(...) + &#39;static</code>), therefore it cannot be used in the outer scope neither in <code>button3</code> callback. Plus a alternative to the fact <code>same_action</code> not being able to be used twice (at <code>button1</code> and <code>button2</code>) is welcome in the answer."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431288263, "post_id": 30155921, "comment_id": 48419265, "body": "@thelink2012 I think I addressed that now."}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431289181, "post_id": 30155921, "comment_id": 48419539, "body": "Oh, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>, good, that made it work, thanks! Is there some sugar to the <code>let x = rc.clone()</code> I have to do before each closure move? And, not that I&#39;m on a performance critical system but just out of curiosity since the <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> seems to be a common pattern in Rust and <code>Rc</code> performing dynamic allocation wouldn&#39;t this piece of dynamic allocation be a bad thing considering Rust intends to be used in performance critical systems?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431291693, "post_id": 30155921, "comment_id": 48420222, "body": "@thelink2012 <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> (or plain <code>Rc&lt;_&gt;</code>) is/should be only used when it&#39;s necessary. And if it&#39;s necessary, well... you probably can&#39;t avoid the allocation anyway, or not easily. Rust <i>allows</i> you to avoid allocations and other expensive things, you still have the responsibility to decide if it&#39;s worth it."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 3, "last_activity_date": 1431288242, "last_edit_date": 1431288242, "creation_date": 1431287129, "answer_id": 30155921, "question_id": 30153973, "link": "https://stackoverflow.com/questions/30153973/mutating-the-same-data-in-multiple-static-closures/30155921#30155921", "title": "Mutating the same data in multiple &#39;static closures", "body": "<p>If you need to share mutable data, you need some container that make sure that the aliasing rules are being followed, most likely one from <a href=\"http://doc.rust-lang.org/std/cell/\" rel=\"nofollow\"><code>std::cell</code></a>. For <code>Copy</code> data this is <code>Cell</code>, for other types there's <code>RefCell</code>. Then the closures can use either:</p>\n\n<ul>\n<li><code>Cell&lt;TheObject&gt;</code>/<code>Cell&lt;TheObject&gt;</code>, or</li>\n<li><code>TheObject</code> where some fields are <code>Cell</code>s and <code>RefCell</code>s.</li>\n</ul>\n\n<p>Which is better depends on how granular you want the mutability to be and whether this is a common need for all users of <code>TheObject</code> or just for this particular closure. In the second case, you need to alter the definition of <code>TheObject</code>, in the first you'd do something like this:</p>\n\n<pre><code>let obj = RefCell::new(obj);\n\nlet same_action = move |_| {\n  obj.borrow_mut().text = \"Modified\";\n}\n</code></pre>\n\n<p>If you furthermore can't have borrows in the closure's captured values, for example because of a <code>'static</code> bound, you can put the <code>RefCell</code> into an <code>Rc</code>.</p>\n\n<p>Also, you can't pass <code>same_action</code> to two buttons because closures can't be copied or cloned. In general this can't be done, because they might close over things that can't be copied or cloned. When possible, it may be allowed in the future, for now you can work around it with a macro, a function (that would have to box the closure), or by simply writing the closure twice if it's simple.</p>\n"}], "owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 188, "favorite_count": 0, "accepted_answer_id": 30155921, "answer_count": 1, "score": 3, "last_activity_date": 1431374523, "creation_date": 1431276295, "last_edit_date": 1431374523, "question_id": 30153973, "link": "https://stackoverflow.com/questions/30153973/mutating-the-same-data-in-multiple-static-closures", "title": "Mutating the same data in multiple &#39;static closures", "body": "<p>Given a library (for instance a GUI library) that uses callbacks to communicate events to the library user, how would I proceed to have proper mutability in the program? For instance:</p>\n\n<pre><code>// so I have this `obj` I want to modify when the user clicks buttons\n// in the GUI\n\nlet same_action = move |_| {\n  // modify obj in several ways, e.g. obj.text = \"Modified\"\n  obj.text = \"Modified\";\n}\n// --&gt; I had to move `obj` above since `on_click` has a `'static`\n// constraint for `F` but that's not really a thing I want to do,\n// I want to keep control of `obj` in the outer scope!!!\n\n// --&gt; error because `same_action` does not implement `Fn` since it\n// mutates the moved `obj` in it\nbutton1.on_click(same_action);\n// --&gt; if the above worked, here we'd have a error because `button1`\n// has moved `same_action`\nbutton2.on_click(same_action);\n// --&gt; assuming all of the above worked, we'd have a error here about\n// unable to use `obj` because it has been moved to same_action\nbutton3.on_click(move |_| obj.text = \"Another modifier\");\n\n// the library now process the gui and call the callbacks in a loop\n// until exit\ngui_run();\n\n// --&gt; ..., error cannot use `obj` because it has been moved by\n// `same_action`\nprintln!(\"Final value: {}\", obj.text);\n</code></pre>\n\n<p>See the comments with <code>// --&gt;</code> for the critical points of this question.</p>\n\n<p>This seems like a pretty common problem to worry on event-driven APIs in Rust.\nHow'd one get around it?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431294242, "post_id": 30156344, "comment_id": 48420992, "body": "You can count in enum context too, but unfortunately one enum variant as usize is not a valid constant expression for another.  <code>enum Count { $( $name ),* }</code>"}], "tags": [], "owner": {"reputation": 1492, "user_id": 1299804, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/eb046a5fc70918c5f769865d4266c563?s=128&d=identicon&r=PG", "display_name": "Austin B", "link": "https://stackoverflow.com/users/1299804/austin-b"}, "is_accepted": false, "score": 0, "last_activity_date": 1431289980, "creation_date": 1431289980, "answer_id": 30156344, "question_id": 30152800, "link": "https://stackoverflow.com/questions/30152800/is-it-possible-to-create-a-macro-which-counts-the-number-of-expanded-items/30156344#30156344", "title": "Is it possible to create a macro which counts the number of expanded items?", "body": "<p>In this context, no. A macro could create an expression that counts the number of identifiers passed to it, but it would only be evaluated at runtime. I created <a href=\"http://is.gd/XR64Dv\" rel=\"nofollow\">this example</a> in just a few minutes, but I realized it would not work for what you're doing.</p>\n\n<p><a href=\"https://doc.rust-lang.org/book/compiler-plugins.html\" rel=\"nofollow\">Compiler plugins</a>, however, are particularly suited to this sort of work. While they're not trivial to implement, I don't think it would be overly difficult to create one for this purpose. Maybe take a look, try your hand at it, and come back if you get stuck?</p>\n"}, {"tags": [], "owner": {"reputation": 8171, "user_id": 311655, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6bad9300ce17b6a89678ed9343647906?s=128&d=identicon&r=PG", "display_name": "DenisKolodin", "link": "https://stackoverflow.com/users/311655/deniskolodin"}, "is_accepted": false, "score": 0, "last_activity_date": 1468419687, "last_edit_date": 1468419687, "creation_date": 1468392795, "answer_id": 38344546, "question_id": 30152800, "link": "https://stackoverflow.com/questions/30152800/is-it-possible-to-create-a-macro-which-counts-the-number-of-expanded-items/38344546#38344546", "title": "Is it possible to create a macro which counts the number of expanded items?", "body": "<p>Yes, if you pack it as <strong>array of idents</strong>:</p>\n\n<pre><code>macro_rules! count {\n    ($($name:ident),*) =&gt; {\n        {\n            let counter = [$(stringify!($name),)*];\n            counter.len()\n        }\n    }\n}\n</code></pre>\n\n<p>Count, names, reverse order of names are available. After, you can use it to construct something. For <code>enum</code> building you have to join it with something like <a href=\"https://andersk.github.io/enum_primitive-rs/enum_primitive/macro.enum_from_primitive!.html\" rel=\"nofollow\">this</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 4, "last_activity_date": 1468441207, "creation_date": 1468441207, "answer_id": 38361018, "question_id": 30152800, "link": "https://stackoverflow.com/questions/30152800/is-it-possible-to-create-a-macro-which-counts-the-number-of-expanded-items/38361018#38361018", "title": "Is it possible to create a macro which counts the number of expanded items?", "body": "<p>Here is a macro that counts the number of matched items: </p>\n\n<pre><code>macro_rules! count_items {\n    ($name:ident) =&gt; { 1 };\n    ($first:ident, $($rest:ident),*) =&gt; {\n        1 + count_items!($($rest),*)\n    }\n}\n\nfn main() {\n    const X: usize = count_items!(a);\n    const Y: usize = count_items!(a, b);\n    const Z: usize = count_items!(a, b, c);\n    assert_eq!(1, X);\n    assert_eq!(2, Y);\n    assert_eq!(3, Z);\n}\n</code></pre>\n\n<p>Note that the counting is computed at compile time.</p>\n\n<hr>\n\n<p>For your example, you can do it using <a href=\"https://danielkeep.github.io/tlborm/book/pat-push-down-accumulation.html\" rel=\"nofollow\">accumulation</a>:</p>\n\n<pre><code>macro_rules! count {\n    ($first:ident, $($rest:ident),*) =&gt; (\n        count!($($rest),+ ; 0; $first = 0)\n    );\n    ($cur:ident, $($rest:ident),* ; $last_index: expr ; $($var:ident = $index:expr)+) =&gt; (\n        count!($($rest),* ; $last_index + 1; $($var = $index)* $cur = $last_index + 1)\n    );\n    ($cur:ident; $last_index:expr ; $($var:ident = $index:expr)+) =&gt; (\n        #[repr(C)]\n        enum Count {\n            $($var = 1 &lt;&lt; $index),*,\n            $cur = 1 &lt;&lt; ($last_index + 1),\n        }\n    );\n}\n\npub fn main() {\n    count!(A, B, C, D);\n    assert_eq!(1, Count::A as usize);\n    assert_eq!(2, Count::B as usize);\n    assert_eq!(4, Count::C as usize);\n    assert_eq!(8, Count::D as usize);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1486715817, "creation_date": 1486715817, "answer_id": 42154860, "question_id": 30152800, "link": "https://stackoverflow.com/questions/30152800/is-it-possible-to-create-a-macro-which-counts-the-number-of-expanded-items/42154860#42154860", "title": "Is it possible to create a macro which counts the number of expanded items?", "body": "<p>Since this question is general, posting an example of counting where arguments are separated by white-space (not commas).</p>\n\n<p>Although in retrospect it seems obvious, it took me a while to figure out:</p>\n\n<pre><code>/// Separated by white-space.\n#[macro_export]\nmacro_rules! count_args_space {\n    ($name:ident) =&gt; { 1 };\n    ($first:ident $($rest:ident) *) =&gt; {\n        1 + count_args_space!($($rest) *)\n    }\n}\n\n/// Separated by commas.\n#[macro_export]\nmacro_rules! count_args_comma {\n    ($name:ident) =&gt; { 1 };\n    ($first:ident, $($rest:ident),*) =&gt; {\n        1 + count_args_comma!($($rest),*)\n    }\n}\n</code></pre>\n\n<p><em>Second example is from @malbarbo, just posting to so you can see the 2x changes that were needed.</em></p>\n"}], "owner": {"reputation": 1299, "user_id": 216247, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/714f671da100ae1caacfae017ed07a3a?s=128&d=identicon&r=PG", "display_name": "scooterman", "link": "https://stackoverflow.com/users/216247/scooterman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 950, "favorite_count": 1, "accepted_answer_id": 38361018, "answer_count": 4, "score": 5, "last_activity_date": 1486715817, "creation_date": 1431269429, "last_edit_date": 1468441263, "question_id": 30152800, "link": "https://stackoverflow.com/questions/30152800/is-it-possible-to-create-a-macro-which-counts-the-number-of-expanded-items", "title": "Is it possible to create a macro which counts the number of expanded items?", "body": "<p>Is it possible to create a macro which counts the number of expanded items?</p>\n\n<pre><code>macro_rules! count {\n    ($($name:ident),*) =&gt; {\n        pub enum Count {\n           $(\n               $name = 1 &lt;&lt; $i // $i is the current expansion index\n            ),*\n        }\n    }\n}\n\ncount!(A, B, C);\n</code></pre>\n"}, {"tags": ["static", "global", "rust", "declaration"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1431213882, "post_id": 30145814, "comment_id": 48400509, "body": "Well surely you want to use the variables, and surely you don&#39;t want to leave them uninitialized. So what <i>do</i> you want?"}, {"owner": {"reputation": 81, "user_id": 4883016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9b213f4e30de5f6093b9e39f0a714a8?s=128&d=identicon&r=PG&f=1", "display_name": "maki", "link": "https://stackoverflow.com/users/4883016/maki"}, "edited": false, "score": 0, "creation_date": 1431245364, "post_id": 30145814, "comment_id": 48406036, "body": "I want to initialize and work with such variables in main. I rewrite \u0421 application to check it&#39;s speed in rust. So I need to have similar architecture design. Also I am beginner in rust :)"}], "answers": [{"comments": [{"owner": {"reputation": 81, "user_id": 4883016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9b213f4e30de5f6093b9e39f0a714a8?s=128&d=identicon&r=PG&f=1", "display_name": "maki", "link": "https://stackoverflow.com/users/4883016/maki"}, "edited": false, "score": 0, "creation_date": 1431244226, "post_id": 30146113, "comment_id": 48405748, "body": "Thank you! This helped out a lot!"}, {"owner": {"reputation": 928, "user_id": 1899424, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a7daee92c10febe423ec55cea4119919?s=128&d=identicon&r=PG", "display_name": "dcorking", "link": "https://stackoverflow.com/users/1899424/dcorking"}, "edited": false, "score": 0, "creation_date": 1520536323, "post_id": 30146113, "comment_id": 85367036, "body": "<code>static</code> variables can be mutable although they need to be marked unsafe. <a href=\"https://rustbyexample.com/custom_types/constants.html\" rel=\"nofollow noreferrer\">rustbyexample.com/custom_types/constants.html</a> says &quot;static: A possibly mutable variable with &#39;static lifetime.&quot;"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 8, "last_activity_date": 1431214182, "creation_date": 1431214182, "answer_id": 30146113, "question_id": 30145814, "link": "https://stackoverflow.com/questions/30145814/how-do-i-declare-a-static-mutable-variable-without-assignment/30146113#30146113", "title": "How do I declare a static mutable variable without assignment?", "body": "<p>A static or constant must be assigned when declared; they can never be assigned to after that.</p>\n\n<p>A static must be purely literals; it cannot have any function calls.</p>\n\n<p>A constant must at present be purely literals, but when <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\" rel=\"noreferrer\">RFC 911, const fn</a> is implemented it will be possible to do things more like how you desire.</p>\n\n<p>Inside a function, you can have <code>static</code> or <code>const</code> items, just as outside a function, and there is no difference\u2014placing items (trait and type definitions, functions, <em>&amp;c.</em>) inside a function purely hides them from the outside scope. Therefore you typically might as well use <code>let foo</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 8, "last_activity_date": 1587195890, "last_edit_date": 1587195890, "creation_date": 1431246608, "answer_id": 30149295, "question_id": 30145814, "link": "https://stackoverflow.com/questions/30145814/how-do-i-declare-a-static-mutable-variable-without-assignment/30149295#30149295", "title": "How do I declare a static mutable variable without assignment?", "body": "<p>You can use <a href=\"https://github.com/Kimundi/lazy-static.rs\" rel=\"nofollow noreferrer\">lazy-static</a> to initialize the static array on first access, even though it might incur a minimal overhead (it seems to invoke <a href=\"http://doc.rust-lang.org/std/sync/struct.Once.html\" rel=\"nofollow noreferrer\">Once::call_once</a> every time you access the static variable).</p>\n\n<p>For example, Cargo.toml:</p>\n\n<pre class=\"lang-toml prettyprint-override\"><code>[package]\nname = \"arr\"\nversion = \"0.0.1\"\n\n[[bin]]\nname = \"arr\"\npath = \"arr.rs\"\n\n[dependencies]\nlazy_static = \"*\"\n</code></pre>\n\n<p>arr.rs:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[macro_use]\nextern crate lazy_static;\nuse std::mem;\nuse std::ptr;\n\n#[derive(Debug)]\nstruct Mbuf {\n    cacheline: *mut u64,\n}\n// Let's pretend it's thread-safe to appease the lazy_static! constrains.\nunsafe impl Sync for Mbuf { }\n\nlazy_static! {\n    static ref ARR: [Mbuf; 32] = {\n        let mut tmp: [Mbuf; 32] =  = unsafe { mem::MaybeUninit::uninit().assume_init() };\n        for idx in 0..tmp.len() {\n            tmp[idx] = Mbuf { cacheline: ptr::null_mut() };\n        }\n        tmp\n    };\n}\n\nfn main() {\n    println!(\"{:?}\", *ARR);\n}\n</code></pre>\n\n<hr>\n\n<p>Alternatively, just make your own lazy accessor:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem;\nuse std::ptr;\n\n#[derive(Debug)]\nstruct Mbuf {\n    cacheline: *mut u64,\n}\n\nstatic mut ARR: Option&lt;[Mbuf; 32]&gt; = None;\nfn arr() -&gt; &amp;'static mut [Mbuf; 32] {\n    unsafe {\n        if ARR.is_none() {\n            let mut tmp: [Mbuf; 32] = mem::MaybeUninit::uninit().assume_init();\n            for idx in 0..tmp.len() {\n                tmp[idx] = Mbuf { cacheline: ptr::null_mut() };\n            }\n            ARR = Some(tmp);\n        }\n        mem::transmute(ARR.as_mut().unwrap())\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", arr());\n}\n</code></pre>\n\n<hr>\n\n<p>Needless to say, this code isn't thread-safe and thus shuns some of the Rust safety guarantees, but for a speed comparison port it shall suffice.</p>\n"}], "owner": {"reputation": 81, "user_id": 4883016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9b213f4e30de5f6093b9e39f0a714a8?s=128&d=identicon&r=PG&f=1", "display_name": "maki", "link": "https://stackoverflow.com/users/4883016/maki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3105, "favorite_count": 1, "answer_count": 2, "score": 8, "last_activity_date": 1587195890, "creation_date": 1431211561, "last_edit_date": 1431245735, "question_id": 30145814, "link": "https://stackoverflow.com/questions/30145814/how-do-i-declare-a-static-mutable-variable-without-assignment", "title": "How do I declare a static mutable variable without assignment?", "body": "<p>I tried the following</p>\n\n<pre><code>struct mbuf\n{\n  cacheline: *mut [u64],               // great amount of rows follows below\n  // ..........\n}\nstatic mut arr: [mbuf; 32];                // Q1 my main aim\n// something as before but using Vec;      // Q2 also main aim\n\nfn main() {\n // let static mut arr: [mbuf; 32];        // Q3 also doesn't work\n // static mut arr: [mbuf; 32];            // Q3 also doesn't work\n}\n</code></pre>\n\n<p>and got error</p>\n\n<pre><code>src/main.rs:74:29: 74:30 error: expected one of `+` or `=`, found `;`\nsrc/main.rs:74   static mut arr: [mbuf; 32];\n                                           ^\n</code></pre>\n\n<p>Q1,Q2,Q3 - Is it possible and how?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 2, "creation_date": 1431203737, "post_id": 30142155, "comment_id": 48397989, "body": "the long answer to this is basically <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md\" rel=\"nofollow noreferrer\">rfc 738 on variance</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431205569, "post_id": 30142155, "comment_id": 48398445, "body": "&quot; Why is using a type parameter in the closure&#39;s return type ok, but not in its arguments?&quot; I suspect this is somehow connected with the fact that closure return type is modeled with associated type on the corresponding trait while argument types are type parameters of that trait, but I don&#39;t know for sure."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431206102, "post_id": 30142155, "comment_id": 48398587, "body": "@VladimirMatveev yes, that is mentioned towards the end of the rfc I linked, in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md#rules-for-associated-types\" rel=\"nofollow noreferrer\">rules for associated types</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431200913, "post_id": 30143696, "comment_id": 48397134, "body": "Could you explain more why <code>PhantomData</code> is needed in this case? The docs say <i>&quot;a type acts as if it stores a value of type T, even though it does not&quot;</i>, but the struct <code>Bar</code> shouldn&#39;t be storing anything of type <code>I</code> or <code>F</code> it seems."}, {"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431201064, "post_id": 30143696, "comment_id": 48397177, "body": "I honestly have no idea. I figured it was a limitation of the type system. Also, looking at the &#39;ownership&#39; section, it&#39;s probably preferable to have it as <code>PhantomData&lt;*const T&gt;</code>, though I&#39;m not sure."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1431201067, "post_id": 30143696, "comment_id": 48397178, "body": "you don&#39;t need <code>_t</code>, just <code>_i</code> is enough (and the question is asking why that is the case)"}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 0, "creation_date": 1431217744, "post_id": 30143696, "comment_id": 48401203, "body": "A PhantomData in this case will make <code>I</code> and <code>T</code> used by the struct effectively removing the unused type parameters error without adding any overhead to the struct size."}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": false, "score": 1, "last_activity_date": 1506387091, "last_edit_date": 1506387091, "creation_date": 1431196988, "answer_id": 30143696, "question_id": 30142155, "link": "https://stackoverflow.com/questions/30142155/unused-type-parameter-on-closure-argument/30143696#30143696", "title": "Unused type parameter on closure argument", "body": "<p>An alternative to using dynamic dispatch via the trait object is to use <a href=\"http://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\"><code>std::marker::PhantomData</code></a> for this:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Bar&lt;I, T, F&gt;\nwhere\n    F: Fn(I) -&gt; Option&lt;T&gt;,\n{\n    f: F,\n    _i: PhantomData&lt;I&gt;,\n    _t: PhantomData&lt;T&gt;,\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=f8ad185eb8abaaa7e945d4c76a3b1cc9\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>You \"instantiate\" a <code>PhantomData</code> just by using <code>PhantomData</code>, e.g.</p>\n\n<pre><code>let phantom: PhantomData&lt;T&gt; = PhantomData;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431340157, "post_id": 30152826, "comment_id": 48437017, "body": "In the first example I&#39;m thinking you should use <code>PhantomData&lt;fn(I)&gt;</code>. I&#39;d do that to make sure it was right."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431342582, "post_id": 30152826, "comment_id": 48438555, "body": "@bluss ok, this is hurting my head a little, but I think you already have a concrete <code>f: F</code>, so you don&#39;t need a <code>PhantomData</code> to tell <code>I</code> to behave like the argument to a closure. What you&#39;re trying to constrain is I itself. I&#39;m not sure if at this point you should make a decision on the closures you want to use with <code>Bar</code>. (i.e. Do I need <code>PhantomType&lt;Cell&lt;&amp;i32&gt;&gt;</code> if I&#39;m planning to use closures like <code>Fn(Cell&lt;&amp;i32&gt;)</code> or it makes no difference in this case?)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431346830, "post_id": 30152826, "comment_id": 48441217, "body": "My head hurts as well, to be sure, but I think <code>fn(I)</code> and plain <code>I</code> have opposite variance w.r.t to <code>I</code>. What I meant was that even if they are the same, I know <code>fn(I)</code> will be right, because that&#39;s how the type behaves -- like a function that needs <code>I</code>. :-)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431347016, "post_id": 30152826, "comment_id": 48441344, "body": "I think the breakdown is basically this. Depending on the type variable <code>X</code>, we have covariant: <code>X</code> and <code>fn() -&gt; X</code>, contravariant: <code>fn(X)</code>, invariant: <code>Cell&lt;X&gt;</code>."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 6, "last_activity_date": 1506387024, "last_edit_date": 1506387024, "creation_date": 1431269560, "answer_id": 30152826, "question_id": 30142155, "link": "https://stackoverflow.com/questions/30142155/unused-type-parameter-on-closure-argument/30152826#30152826", "title": "Unused type parameter on closure argument", "body": "<p>As <a href=\"https://stackoverflow.com/questions/30142155/unused-type-parameter-on-closure-argument#comment48398445_30142155\">@VladimirMatveev says</a>, the return type of a closure is an associated type.</p>\n\n<p>An associated type is different from a type parameter because its value is determined when you <em>implement</em> a trait, not when you use it in a call.<br>\nIn <code>Fn(I) -&gt; Option&lt;T&gt;</code>, once you have the input (of type <code>I</code>) and the implementation (the particular operations defined in the closure you're passing), the <code>Option&lt;T&gt;</code> output is determined. </p>\n\n<p>For <code>I</code> it's different, though. You need to either use the type in the struct, or to show the compiler <em>how it would be theoretically used</em>, with a <code>PhantomData</code> field.</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Bar&lt;I, T, F&gt;\nwhere\n    F: Fn(I) -&gt; Option&lt;T&gt;,\n{\n    f: F,\n    _marker: PhantomData&lt;I&gt;,\n}\n</code></pre>\n\n<p><code>PhantomData</code> is only used to check types, but is erased in the generated code, so it does not occupy any memory in your struct (that's why it's a phantom).  </p>\n\n<p>The reason why it is needed is explained in detail in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md\" rel=\"nofollow noreferrer\">RFC 738 on variance</a>. I'll try to give you a shorter (and hopefully correct) version here.</p>\n\n<p>In Rust, you can most of the times (but not always!) use a longer lifetime where a shorter one is expected.</p>\n\n<pre><code>fn foo&lt;'short, 'long&gt;(_a: &amp;'short i32, b: &amp;'long i32)\nwhere\n    'long: 'short,\n{\n    let _shortened: &amp;'short i32 = b; // we're binding b to a shorter lifetime\n}\n\nfn foo2&lt;'short, 'long&gt;(_a: &amp;'short i32, b: &amp;'long Cell&lt;&amp;'long i32&gt;)\nwhere\n    'long: 'short,\n{\n    let _shortened: &amp;Cell&lt;&amp;'short i32&gt; = b;\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=0887cf999f4a3003de2e8394993328cb&amp;version=beta\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>The RFC explains why <code>Cell</code> expects exactly the same (and not a longer) lifetime, but for now I suggest you just trust the compiler that it would be unsafe to allow <code>foo2</code> to compile.</p>\n\n<p>Now pretend you have a </p>\n\n<pre><code>struct Foo&lt;T&gt; { t: T }\n</code></pre>\n\n<p>That <code>T</code> can be anything, including a type that holds references.<br>\nIn particular, <code>T</code> can be a type like <code>&amp; i32</code> or a type like <code>&amp;Cell&lt;&amp;i32&gt;</code>.<br>\nAs with our <code>foo</code> functions above, Rust can infer just fine when it can or can't allow us to assign to a shorter lifetime by inspecting the type of <code>T</code> (<a href=\"https://play.rust-lang.org/?gist=166c47c1494e36bffd6b884f6515687f&amp;version=beta\" rel=\"nofollow noreferrer\">playground</a>).</p>\n\n<p>However, when you have an unused type parameter, inference does not have any field to inspect to know how it should allow the type to behave with lifetimes.  </p>\n\n<p>If you have</p>\n\n<pre><code>struct Foo&lt;T&gt;; // unused type parameter!\n</code></pre>\n\n<p>Rust asks you to specify with a <code>PhantomType</code> if you wish your <code>T</code> to behave as if it was a <code>&amp; i32</code> or like a <code>Cell</code>. You would write: </p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    marker: PhantomData&lt;T&gt;, // this is what you usually want\n                            // unless you're working with unsafe code and\n                            // raw pointers\n}\n</code></pre>\n\n<p>or you could write:</p>\n\n<pre><code>struct Foo&lt;T&gt; {\n    marker: PhantomData&lt;Cell&lt;T&gt;&gt;\n}\n</code></pre>\n"}], "owner": {"reputation": 11809, "user_id": 319084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d7588bce02f53e22ff6cf5c1d4866eec?s=128&d=identicon&r=PG", "display_name": "Dan Simon", "link": "https://stackoverflow.com/users/319084/dan-simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 910, "favorite_count": 2, "accepted_answer_id": 30152826, "answer_count": 2, "score": 10, "last_activity_date": 1583330225, "creation_date": 1431187552, "last_edit_date": 1583330225, "question_id": 30142155, "link": "https://stackoverflow.com/questions/30142155/unused-type-parameter-on-closure-argument", "title": "Unused type parameter on closure argument", "body": "<p>This works:</p>\n\n<pre><code>struct Foo&lt;T, F&gt;\nwhere\n    F: Fn() -&gt; Option&lt;T&gt;,\n{\n    f: F,\n}\n</code></pre>\n\n<p>but this gives me compile errors:</p>\n\n<pre><code>struct Bar&lt;I, T, F&gt;\nwhere\n    F: Fn(I) -&gt; Option&lt;T&gt;,\n{\n    f: F,\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `I` is never used\n --&gt; src/lib.rs:1:12\n  |\n1 | struct Bar&lt;I, T, F&gt;\n  |            ^ unused parameter\n  |\n  = help: consider removing `I`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n\nerror[E0392]: parameter `T` is never used\n --&gt; src/lib.rs:1:15\n  |\n1 | struct Bar&lt;I, T, F&gt;\n  |               ^ unused parameter\n  |\n  = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>Why is using a type parameter in the closure's return type ok, but not in its arguments?</p>\n\n<p>I can get around it by storing the closure as a trait object:</p>\n\n<pre><code>struct Bar&lt;I, T&gt; {\n    f: Box&lt;Fn(I) -&gt; Option&lt;T&gt;&gt;,\n}\n</code></pre>\n\n<p>but I'd like to avoid this if possible.</p>\n"}, {"tags": ["arrays", "rust"], "answers": [{"tags": [], "owner": {"reputation": 8267, "user_id": 315129, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/mSRT4.jpg?s=128&g=1", "display_name": "vbezhenar", "link": "https://stackoverflow.com/users/315129/vbezhenar"}, "is_accepted": true, "score": 10, "last_activity_date": 1431155967, "creation_date": 1431155967, "answer_id": 30137202, "question_id": 30137160, "link": "https://stackoverflow.com/questions/30137160/whats-the-correct-way-to-specify-that-a-function-takes-an-array-of-unspecified/30137202#30137202", "title": "What&#39;s the correct way to specify that a function takes an array of unspecified length as an argument?", "body": "<p>You can just use <code>&amp;[u32]</code>. No need to add <code>mut</code> modifier because you're not modifying data in print method.</p>\n\n<pre><code>fn print_nums(nums: &amp;[i32]) {\n    println!(\"{:?}\", nums);\n}\n\nprint_nums(&amp;xs);\n</code></pre>\n"}], "owner": {"reputation": 24213, "user_id": 390897, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/bb90a39b77596fcffbab96de88f0ee34?s=128&d=identicon&r=PG", "display_name": "fny", "link": "https://stackoverflow.com/users/390897/fny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1563, "favorite_count": 1, "accepted_answer_id": 30137202, "answer_count": 1, "score": 1, "last_activity_date": 1431184932, "creation_date": 1431155661, "last_edit_date": 1431184932, "question_id": 30137160, "link": "https://stackoverflow.com/questions/30137160/whats-the-correct-way-to-specify-that-a-function-takes-an-array-of-unspecified", "title": "What&#39;s the correct way to specify that a function takes an array of unspecified length as an argument?", "body": "<p>Here's a working selection sort I've implemented in Rust along with a simple print function using <code>&amp;mut [i32]</code>:</p>\n\n<pre><code>fn print_nums(nums: &amp;mut [i32]) {\n    println!(\"{:?}\", nums);\n}\n\nfn selection_sort(nums: &amp;mut [i32]) {\n    let len = nums.len();\n    let mut mindex;\n\n    for i in 0..len {\n        mindex = i;\n        for j in (i + 1)..len {\n            if nums[j] &lt; nums[mindex] { mindex = j; }\n        }\n        nums.swap(i, mindex);\n    }\n}\n\nfn main() {\n    let mut xs: [i32; 5] = [1, 2, 3, 4, 5];\n    selection_sort(&amp;mut xs);\n    print_nums(&amp;mut xs);\n}\n</code></pre>\n\n<p><code>&amp;mut [i32]</code> seems reasonable for <code>selection_sort</code> since it modified the array, but it doesn't seem appropriate to use for <code>print_nums</code>: I just couldn't figure out another way to get the types to match. :P</p>\n"}, {"tags": ["python", "rust", "ctypes"], "comments": [{"owner": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 6, "creation_date": 1431124087, "post_id": 30133293, "comment_id": 48377553, "body": "It looks like the Rust format string <code>&quot;{:?}&quot;</code> only prints the lower 32 bits of the address, as the full address is apparently <code>10dc24000</code>. On the Python side, you&#39;re missing <code>lib.continue_state.argtypes = (ctypes.c_void_p,)</code>. Without defining the parameter as a pointer, ctypes uses the default conversion for a Python integer, which truncates the value to 32-bit, e.g. <code>0x0dc24000</code>. If you&#39;re lucky accessing that address triggers a segfault immediately."}, {"owner": {"reputation": 1200, "user_id": 15720, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b4b632e43e7f105e747aa66ae9c8355a?s=128&d=identicon&r=PG&f=1", "display_name": "Rob Young", "link": "https://stackoverflow.com/users/15720/rob-young"}, "reply_to_user": {"reputation": 29355, "user_id": 205580, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/460e6e299e385fd46df156c85a1dd55f?s=128&d=identicon&r=PG", "display_name": "Eryk Sun", "link": "https://stackoverflow.com/users/205580/eryk-sun"}, "edited": false, "score": 0, "creation_date": 1431126857, "post_id": 30133293, "comment_id": 48378350, "body": "That works! Thanks @eryksun"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1431145453, "last_edit_date": 1495535384, "creation_date": 1431126339, "answer_id": 30134107, "question_id": 30133293, "link": "https://stackoverflow.com/questions/30133293/how-can-a-pointer-be-passed-between-rust-and-python/30134107#30134107", "title": "How can a pointer be passed between Rust and Python?", "body": "<p><a href=\"https://stackoverflow.com/questions/30133293/how-can-a-pointer-be-passed-between-rust-and-python#comment48377553_30133293\">eryksun nailed it</a>:</p>\n\n<blockquote>\n  <p>On the Python side, you're missing lib.continue_state.argtypes = (ctypes.c_void_p,). Without defining the parameter as a pointer, ctypes uses the default conversion for a Python integer, which truncates the value to 32-bit, e.g. 0x0dc24000. If you're lucky accessing that address triggers a segfault immediately.</p>\n</blockquote>\n\n<p>My output (with my own padding) was:</p>\n\n<pre><code>0x103424000\n  103424000\n0x  3424000\n</code></pre>\n\n<p>So the <code>Debug</code> formatter for pointers should be fine. Not sure why your output differs.</p>\n\n<p>After adding</p>\n\n<pre><code>lib.continue_state.argtypes = (ctypes.c_void_p,)\n</code></pre>\n\n<p>The program ran just fine.</p>\n"}], "owner": {"reputation": 1200, "user_id": 15720, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b4b632e43e7f105e747aa66ae9c8355a?s=128&d=identicon&r=PG&f=1", "display_name": "Rob Young", "link": "https://stackoverflow.com/users/15720/rob-young"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 329, "favorite_count": 2, "accepted_answer_id": 30134107, "answer_count": 1, "score": 10, "last_activity_date": 1431145453, "creation_date": 1431121309, "last_edit_date": 1431126690, "question_id": 30133293, "link": "https://stackoverflow.com/questions/30133293/how-can-a-pointer-be-passed-between-rust-and-python", "title": "How can a pointer be passed between Rust and Python?", "body": "<p>I am experimenting with writing a library in Rust that I can call from Python code. I would like to be able to pass a void pointer back to Python so that I can hold state between calls into Rust. However, I get a segfault in Rust when trying to access the pointer again.</p>\n\n<p>Full code samples and crash report: <a href=\"https://gist.github.com/robyoung/3644f13a05c95cb1b947\" rel=\"noreferrer\">https://gist.github.com/robyoung/3644f13a05c95cb1b947</a></p>\n\n<h2>The code</h2>\n\n<pre class=\"lang-rs prettyprint-override\"><code>#![feature(libc)]\n#![feature(alloc)]\nextern crate libc;\nuse std::boxed;\n\npub struct Point {\n    x: i64,\n    y: i32,\n}\n\n#[no_mangle]\npub extern \"C\" fn start_state() -&gt; *mut Point {\n    let point = Box::new(Point{x: 0, y: 10});\n    let raw = unsafe { boxed::into_raw(point) };\n    println!(\"{:?}\", raw);\n    raw\n}\n\n#[no_mangle]\npub extern \"C\" fn continue_state(point: *mut Point) -&gt; i32 {\n    println!(\"{:?}\", point);\n    let p = unsafe { Box::from_raw(point) };\n    println!(\"{} {}\", p.x, p.y);\n    0\n}\n</code></pre>\n\n<pre class=\"lang-py prettyprint-override\"><code>import ctypes\n\nlib = ctypes.cdll.LoadLibrary('target/libpytesttype.so')\nlib.start_state.restype = ctypes.c_void_p\n\npointer = lib.start_state()\nprint(\"{:x}\".format(pointer))\nlib.continue_state(pointer)\n</code></pre>\n\n<h2>The output</h2>\n\n<pre><code>0xdc24000\n10dc24000\n0xdc24000\n[1]    64006 segmentation fault  python src/main.py\n</code></pre>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["parsing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 0, "creation_date": 1431183401, "post_id": 30131233, "comment_id": 48391444, "body": "Is this the way rust is supposed to be written in &#39;production&#39;? It looks incredibly terse, seems like something which would be hard to understand by an author after being away from the code for some time. Anyway, could you explain what exactly is the function and syntax of &#39;.and_then()&#39;? I feel like official docs for it assume having some knowledge of functional programming which I don&#39;t have."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 1, "creation_date": 1431184878, "post_id": 30131233, "comment_id": 48391950, "body": "@andreyg beauty is in the eye of the beholder, I suppose! You can certainly rewrite it with more <code>match</code> statements or upgrade from an <code>Option</code> to a <code>Result</code> and then make use of the <code>try!</code> macro. I&#39;ve added this and a regex example. I can&#39;t speak for the entire Rust community, but you should certainly write code that you can understand! <i>Everyone knows that debugging is twice as hard as writing a program in the first place. So if you&#39;re as clever as you can be when you write it, how will you ever debug it?</i> - <a href=\"http://en.wikiquote.org/wiki/Brian_Kernighan\" rel=\"nofollow noreferrer\">Brian Kernighan</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1431184800, "last_edit_date": 1431184800, "creation_date": 1431112377, "answer_id": 30131233, "question_id": 30130939, "link": "https://stackoverflow.com/questions/30130939/parsing-strings-into-integers/30131233#30131233", "title": "Parsing strings into integers", "body": "<p>Parsing is a wide and varied topic. There are easy parsing tools and there are performant parsing tools and a spectrum in between.</p>\n\n<pre><code>fn main() {\n    let haystack = \"HTTP/1.1 200\\r\\n\";\n    let needle = \"HTTP/1.\";\n\n    let z: Option&lt;u8&gt; = haystack.rfind(needle).and_then(|pt| {\n        let after_match = &amp;haystack[(pt + needle.len())..];\n        after_match.splitn(2, \" \").next()\n    }).and_then(|val| {\n        val.parse().ok()\n    });\n\n    println!(\"{:?}\", z)\n}\n</code></pre>\n\n<p>Here, we use <code>rfind</code> as you did before, which can fail. We use <code>and_then</code> to run the closure if the result was <code>Some</code>. The first closure slices the string <em>after</em> the needle, then splits it on spaces, with a maximum of 2 parts. That can fail, so we use a second <code>and_then</code> to use <code>parse</code>, which can <em>also</em> fail with a <code>Result</code>, so we convert that into an <code>Option</code> to preserve the type.</p>\n\n<p>And the end of this, we still might have failed, as the thing we parsed might not have been a parseable number!</p>\n\n<p>Rust really helps you make explicit places you can fail, and you have to deal with them. ^_^</p>\n\n<p>In this case:</p>\n\n<ol>\n<li>Maybe the string doesn't have \"HTTP/1.\" in it</li>\n<li>Iterators have to end at some point, so they can return <code>None</code>.</li>\n<li>Parsing a string to a number can fail.</li>\n</ol>\n\n<p>Here's an alternate solution that uses the <a href=\"http://doc.rust-lang.org/regex/regex/index.html\" rel=\"nofollow\">regex crate</a>:</p>\n\n<pre><code>extern crate regex;\n\nuse regex::Regex;\n\nfn main() {\n    let haystack = \"HTTP/1.1 200\\r\\n\";\n\n    let re = Regex::new(r\"HTTP/1.(\\d) (\\d+)\\r\\n\").unwrap();\n    let captures = re.captures(haystack).unwrap();\n    let version: Option&lt;u8&gt; = captures.at(1).and_then(|version| version.parse().ok());\n    let status: Option&lt;u8&gt; = captures.at(2).and_then(|version| version.parse().ok());\n\n    assert_eq!(Some(1), version);\n    assert_eq!(Some(200), status);\n\n    println!(\"Version: {:?}, Status: {:?}\", version, status);\n}\n</code></pre>\n\n<p>You'll see that we have the same types of failure modes, but the structure is a bit different.</p>\n\n<p>Or maybe a version that uses <code>Result</code> and <code>try!</code>:</p>\n\n<pre><code>#[derive(Debug,Copy,Clone,PartialEq)]\nenum Error {\n    StartNotFound,\n    NotANumber,\n}\n\nfn parse_it(haystack: &amp;str) -&gt; Result&lt;u8, Error&gt; {\n    let needle = \"HTTP/1.\";\n    let pt = try!(haystack.rfind(needle).ok_or(Error::StartNotFound));\n    let after_match = &amp;haystack[(pt + needle.len())..];\n    let val = after_match.splitn(2, \" \").next().unwrap();\n    val.parse().map_err(|_| Error::NotANumber)\n}\n\nfn main() {\n    println!(\"{:?}\", parse_it(\"HTTP/1.1 200\\r\\n\"));\n    println!(\"{:?}\", parse_it(\"HTTP/1\"));\n    println!(\"{:?}\", parse_it(\"HTTP/1.cow\"));\n}\n</code></pre>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1097, "favorite_count": 0, "accepted_answer_id": 30131233, "answer_count": 1, "score": 2, "last_activity_date": 1431184800, "creation_date": 1431111312, "last_edit_date": 1431111706, "question_id": 30130939, "link": "https://stackoverflow.com/questions/30130939/parsing-strings-into-integers", "title": "Parsing strings into integers", "body": "<p>So I'm trying to find a pattern in a string and convert it to an integer.</p>\n\n<p>Firstly I look for a string:</p>\n\n<pre><code>let haystack = \"HTTP/1.1 200\\r\\n\";\nlet needle = \"HTTP/1.\";\n\nlet http_location = haystack.rfind(needle);\nif (http_location.is_some()) {\n</code></pre>\n\n<p>Now that I've found it I can think of two ways to get the numerical status. Either:</p>\n\n<pre><code>    let mut temp_str = haystack.char_at(http_location.unwrap());\n    let status = String::from_str(temp_str);\n}\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>    let status = String::from_str(&amp;haystack[http_location.unwrap()]);\n}\n</code></pre>\n\n<p>Unfortunately both of them are deprecated (and probably wrong anyway). What is currently the correct way of doing this?</p>\n\n<p>Also, is this part stylistically correct?:</p>\n\n<pre><code>let http_location = haystack.rfind(needle);\nif (http_location.is_some())\n</code></pre>\n"}, {"tags": ["iterator", "rust", "immutability", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431108533, "post_id": 30130046, "comment_id": 48370407, "body": "<i>and with reference trait objects there is nowhere you can store it</i> - additionally, the actual <b>size</b> of the iterator <code>base</code> changes as it gets more and more nested. Thus, we need to use heap-allocation so that the size of <code>Primes</code> is always constant."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431108684, "post_id": 30130046, "comment_id": 48370495, "body": "@Shepmaster, The size of reference trait object does not change, afaik. The only reason it can&#39;t be used is ownership."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431118951, "post_id": 30130046, "comment_id": 48375553, "body": "The size is indeed constant. Every layer is a box around <code>Filter&lt;Box&lt;Iterator&gt;, Closure&gt;</code>, the size of the closure is constant (captures one u64)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431134079, "post_id": 30130046, "comment_id": 48379785, "body": "@VladimirMatveev ah, good point. I thought it was a generic type, not a trait object."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1530900642, "last_edit_date": 1530900642, "creation_date": 1431108003, "answer_id": 30130046, "question_id": 30129270, "link": "https://stackoverflow.com/questions/30129270/how-to-compose-mutable-iterators/30130046#30130046", "title": "How to compose mutable Iterators?", "body": "<p>Here is a working version:</p>\n\n<pre><code>struct Primes&lt;'a&gt; {\n    base: Option&lt;Box&lt;Iterator&lt;Item = u64&gt; + 'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Iterator for Primes&lt;'a&gt; {\n    type Item = u64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {\n        let p = self.base.as_mut().unwrap().next();\n        p.map(|n| {\n            let base = self.base.take();\n            let step = base.unwrap().filter(move |x| x % n != 0);\n            self.base = Some(Box::new(step));\n            n\n        })\n    }\n}\n\nimpl&lt;'a&gt; Primes&lt;'a&gt; {\n    #[inline]\n    pub fn new&lt;I: Iterator&lt;Item = u64&gt; + 'a&gt;(r: I) -&gt; Primes&lt;'a&gt; {\n        Primes {\n            base: Some(Box::new(r)),\n        }\n    }\n}\n\nfn main() {\n    for p in Primes::new(2..).take(32) {\n        print!(\"{} \", p);\n    }\n    println!(\"\");\n}\n</code></pre>\n\n<p>I'm using a <code>Box&lt;Iterator&gt;</code> trait object. Boxing is unavoidable because the internal iterator must be stored somewhere between <code>next()</code> calls, and there is nowhere you can store reference trait objects.</p>\n\n<p>I made the internal iterator an <code>Option</code>. This is necessary because you need to replace it with a value which consumes it, so it is possible that the internal iterator may be \"absent\" from the structure for a short time. Rust models absence with <code>Option</code>. <code>Option::take</code> replaces the value it is called on with <code>None</code> and returns whatever was there. This is useful when shuffling non-copyable objects around.</p>\n\n<p>Note, however, that this sieve implementation is going to be both memory and computationally inefficient - for each prime you're creating an additional layer of iterators which takes heap space. Also the depth of stack when calling <code>next()</code> grows linearly with the number of primes, so you will get a stack overflow on a sufficiently large number:</p>\n\n<pre><code>fn main() {\n    println!(\"{}\", Primes::new(2..).nth(10000).unwrap());\n}\n</code></pre>\n\n<p>Running it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>% ./test1 \n\nthread '&lt;main&gt;' has overflowed its stack\nzsh: illegal hardware instruction (core dumped)  ./test1\n</code></pre>\n"}], "owner": {"reputation": 257, "user_id": 608742, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8cb40689c78a888bcf2295a965b6497a?s=128&d=identicon&r=PG", "display_name": "dkhenry", "link": "https://stackoverflow.com/users/608742/dkhenry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 662, "favorite_count": 0, "accepted_answer_id": 30130046, "answer_count": 1, "score": 7, "last_activity_date": 1530900642, "creation_date": 1431104948, "last_edit_date": 1530900528, "question_id": 30129270, "link": "https://stackoverflow.com/questions/30129270/how-to-compose-mutable-iterators", "title": "How to compose mutable Iterators?", "body": "<blockquote>\n  <p>Editor's note: This code example is from a version of Rust prior to 1.0 and is not syntactically valid Rust 1.0 code. Updated versions of this code produce different errors, but the answers still contain valuable information. </p>\n</blockquote>\n\n<p>I would like to make an iterator that generates a stream of prime numbers. My general thought process was to wrap an iterator with successive filters so for example you start with </p>\n\n<pre><code>let mut n = (2..N)\n</code></pre>\n\n<p>Then for each prime number you mutate the iterator and add on a filter </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let p1 = n.next()\nn = n.filter(|&amp;x| x%p1 !=0) \nlet p2 = n.next()\nn = n.filter(|&amp;x| x%p2 !=0) \n</code></pre>\n\n<p>I am trying to use the following code, but I can not seem to get it to work </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Primes {\n    base: Iterator&lt;Item = u64&gt;,\n}\n\nimpl&lt;'a&gt; Iterator for Primes&lt;'a&gt; {\n    type Item = u64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {\n        let p = self.base.next();\n        match p {\n            Some(n) =&gt; {\n                let prime = n.clone();\n                let step = self.base.filter(move |&amp;: &amp;x| {x%prime!=0});\n                self.base = &amp;step as &amp;Iterator&lt;Item = u64&gt;;\n                Some(n)                \n            },\n            _ =&gt; None\n        }        \n    }\n}\n</code></pre>\n\n<p>I have toyed with variations of this, but I can't seem to get lifetimes and types to match up. Right now the compiler is telling me</p>\n\n<ol>\n<li>I can't mutate self.base </li>\n<li>the variable prime doesn't live long enough</li>\n</ol>\n\n<p>Here is the error I am getting</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>solution.rs:16:17: 16:26 error: cannot borrow immutable borrowed content `*self.base` as mutable\nsolution.rs:16         let p = self.base.next();\n                                                     ^~~~~~~~~\nsolution.rs:20:28: 20:37 error: cannot borrow immutable borrowed content `*self.base` as mutable\nsolution.rs:20                 let step = self.base.filter(move |&amp;: &amp;x| {x%prime!=0});\n                                                                ^~~~~~~~~\nsolution.rs:21:30: 21:34 error: `step` does not live long enough\nsolution.rs:21                 self.base = &amp;step as &amp;Iterator&lt;Item = u64&gt;;\n                                                                  ^~~~\nsolution.rs:15:39: 26:6 note: reference must be valid for the lifetime 'a as defined on the block at 15:38...\nsolution.rs:15     fn next(&amp;mut self) -&gt; Option&lt;u64&gt; {\nsolution.rs:16         let p = self.base.next();\nsolution.rs:17         match p {\nsolution.rs:18             Some(n) =&gt; {\nsolution.rs:19                 let prime = n.clone();\nsolution.rs:20                 let step = self.base.filter(move |&amp;: &amp;x| {x%prime!=0});\n                                     ...\nsolution.rs:20:71: 23:14 note: ...but borrowed value is only valid for the block suffix following statement 1 at 20:70\nsolution.rs:20                 let step = self.base.filter(move |&amp;: &amp;x| {x%prime!=0});\nsolution.rs:21                 self.base = &amp;step as &amp;Iterator&lt;Item = u64&gt;;\nsolution.rs:22                 Some(n)                \nsolution.rs:23             },\nerror: aborting due to 3 previous errors\n</code></pre>\n\n<p>Why won't Rust let me do this?</p>\n"}, {"tags": ["input", "rust", "stdin"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1431096800, "creation_date": 1431096800, "answer_id": 30126804, "question_id": 30126581, "link": "https://stackoverflow.com/questions/30126581/how-can-i-get-user-input-without-receiving-an-unsed-variable-warning/30126804#30126804", "title": "How can I get user input without receiving an &quot;Unsed Variable&quot; warning?", "body": "<p>You can simply not write the value to a variable. As long as the type of the value is not marked <code>must_use</code>, you can ignore the value.</p>\n\n<pre><code>let mut number = String::new();\n\nio::stdin().read_line(&amp;mut number)\n           .ok()\n           .expect(\"Failed to read line\");\n\nprintln!(\"You entered {}\", number);\n</code></pre>\n\n<hr>\n\n<p><em>[commercial]</em></p>\n\n<p>You can use the <a href=\"https://crates.io/crates/text_io\"><code>text_io</code></a> crate for super short and readable input like </p>\n\n<pre><code>let i: i32 = read!()\nlet tup: (i32, String) = read!(\"{}, {}\");\n</code></pre>\n\n<p><em>[/commercial]</em></p>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 3, "last_activity_date": 1431099348, "last_edit_date": 1431099348, "creation_date": 1431097460, "answer_id": 30127038, "question_id": 30126581, "link": "https://stackoverflow.com/questions/30126581/how-can-i-get-user-input-without-receiving-an-unsed-variable-warning/30127038#30127038", "title": "How can I get user input without receiving an &quot;Unsed Variable&quot; warning?", "body": "<p>It creates a warning because you are allocating space for a variable that is never used.</p>\n\n<p>When faced with such warning you can either replace offending variable with <code>_</code></p>\n\n<pre><code>let _ = io::stdin().read_line(&amp;mut number) ...\n</code></pre>\n\n<p>or as ker noted just remove the variable altogether</p>\n\n<pre><code>io::stdin().read_line(&amp;mut number)...\n</code></pre>\n\n<p>The <code>_</code> will also work in other situation like parameters or in <code>match</code> clauses.</p>\n\n<hr>\n\n<p>One additional option is to add <code>#[allow(unused_variables)]</code> in the module or crate and disable unused variable warnings. Although, I don't recommend it.</p>\n"}], "owner": {"reputation": 470, "user_id": 1442743, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/30f300466169a5ea004f07177794cbe9?s=128&d=identicon&r=PG&f=1", "display_name": "otolock", "link": "https://stackoverflow.com/users/1442743/otolock"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 0, "accepted_answer_id": 30126804, "answer_count": 2, "score": 1, "last_activity_date": 1431099348, "creation_date": 1431096207, "last_edit_date": 1592644375, "question_id": 30126581, "link": "https://stackoverflow.com/questions/30126581/how-can-i-get-user-input-without-receiving-an-unsed-variable-warning", "title": "How can I get user input without receiving an &quot;Unsed Variable&quot; warning?", "body": "<p>I'm taking a look at Rust and decided to build a small program that takes a user's input and prints it, but also want to do some math stuff with it for practice. Currently, this is how I am taking user input:</p>\n<pre><code>let mut number = String::new();\n\nlet input = io::stdin().read_line(&amp;mut number)\n    .ok()\n    .expect(&quot;Failed to read line&quot;);\n\nprintln!(&quot;You entered {}&quot;, number);\n</code></pre>\n<p>However, although I do get the correct input this way, Cargo gives me the following warning:</p>\n<blockquote>\n<p>src/main.rs:10:9: 10:14 warning: unused variable: <code>input</code>, #[warn(unused_variables)] on by default</p>\n<p>src/main.rs:10     let input = reader.read_line(&amp;mut number)</p>\n</blockquote>\n<p>If I were to just use the <code>input</code> variable, no matter what number I enter I would get a &quot;2&quot; in return when I print the number.</p>\n<p>How can I avoid the warning? Is there another way for me to take input without creating 2 variable bindings?</p>\n"}, {"tags": ["rust", "rustdoc"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1431083283, "creation_date": 1431083283, "answer_id": 30122312, "question_id": 30121271, "link": "https://stackoverflow.com/questions/30121271/indicating-which-version-of-a-crate-generated-docs-are-for/30122312#30122312", "title": "Indicating which version of a crate generated docs are for", "body": "<p>There isn't a straight forward way to do this, but there is <a href=\"https://github.com/rust-lang/rust/issues/24336\" rel=\"nofollow\">an issue about it</a>. You may be able to hack something that uses the \"extra html\" feature of rustdoc though. </p>\n"}], "owner": {"reputation": 31241, "user_id": 242493, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/8893e2e206c0377ff776d2535887d23f?s=128&d=identicon&r=PG", "display_name": "Jimmy Cuadra", "link": "https://stackoverflow.com/users/242493/jimmy-cuadra"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1431087573, "creation_date": 1431079870, "last_edit_date": 1431087573, "question_id": 30121271, "link": "https://stackoverflow.com/questions/30121271/indicating-which-version-of-a-crate-generated-docs-are-for", "title": "Indicating which version of a crate generated docs are for", "body": "<p>When you generate documentation for a Rust crate with Cargo and rustdoc, I don't see any indication in the generated pages which version of the crate it's for. For example, take a look at <a href=\"http://doc.rust-lang.org/log/log/index.html\" rel=\"nofollow\">the log crate's documentation</a>. Is there a way to know which version of the crate a set of docs are for?</p>\n"}, {"tags": ["c++", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1431080709, "post_id": 30117962, "comment_id": 48352625, "body": "afaik rustc doesn&#39;t do any optimizations except for constant evaluation (fold expressions that only depend on constants). All the optimizations are done in llvm."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1431082982, "post_id": 30117962, "comment_id": 48354002, "body": "@ker Yes, but that is mostly an implementation detail, irrelevant for run time performance, as LLVM is really good at optimizations."}, {"owner": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1431084562, "post_id": 30117962, "comment_id": 48354980, "body": "@ker yes, but it is due to how templates are instantiated that the compiler/optimizer actually has enough information to readily optimize these things, so I guess the language or rustc itself needs to have some way of doing this kind of operation."}], "answers": [{"comments": [{"owner": {"reputation": 809, "user_id": 3973558, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f7a0f190f8b6b443b9ecbc21541ce5e1?s=128&d=identicon&r=PG&f=1", "display_name": "xcvr", "link": "https://stackoverflow.com/users/3973558/xcvr"}, "edited": false, "score": 0, "creation_date": 1520992088, "post_id": 30122636, "comment_id": 85540495, "body": "The main thing lacking (but coming soon hopefully) are dependent types in rust. e.g. <code>template&lt;int i&gt;</code> has no rust equivalent, so things like loop unrolling are up to LLVM to figure out, whereas expression templates in C++ can (essentially) guarantee it."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 4, "last_activity_date": 1431086991, "last_edit_date": 1495541167, "creation_date": 1431084248, "answer_id": 30122636, "question_id": 30117962, "link": "https://stackoverflow.com/questions/30117962/is-there-something-like-expression-templates-in-rust/30122636#30122636", "title": "Is there something like expression templates in Rust?", "body": "<p>If I read <a href=\"http://en.wikipedia.org/wiki/Expression_templates\" rel=\"nofollow noreferrer\">Expression Templates</a> right, then you can see them in action with Rust Iterators: methods such as <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow noreferrer\">filter</a>, <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take\" rel=\"nofollow noreferrer\">take</a>, etc etc return an expression template, a struct which represents the computation but doesn't perform it until requested. This gives the optimization you require right away, no temporaries are created.</p>\n\n<p>Using the <a href=\"https://stackoverflow.com/questions/28405621/what-is-the-syntax-and-semantics-of-the-where-keyword\">where</a> clause I imagine one can write specializations to further optimize certain combinations of computations.</p>\n"}], "owner": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1115, "favorite_count": 0, "accepted_answer_id": 30122636, "answer_count": 1, "score": 6, "last_activity_date": 1431086991, "creation_date": 1431069361, "question_id": 30117962, "link": "https://stackoverflow.com/questions/30117962/is-there-something-like-expression-templates-in-rust", "title": "Is there something like expression templates in Rust?", "body": "<p>In C++, expression templates is a technique that relies on the compiler's knowledge about expressions in C++ code to simplify them and optimize them beyond what would be possible in a procedural program. It's a powerful technique used by e.g. the Eigen and Armadillo matrix libraries to speed up certain compound operations on matrices. An <a href=\"http://eigen.tuxfamily.org/index.php?title=Expression_templates\" rel=\"noreferrer\">incomplete wiki page on the Eigen web page</a> almost starts explaining it.</p>\n\n<p>I wonder if a similar technique exists in Rust, i.e. is there a way to make the Rust compiler optimize certain expressions at compile time so that the least amount of temporaries is created.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1893, "user_id": 3831435, "user_type": "registered", "accept_rate": 77, "profile_image": "https://graph.facebook.com/829983118/picture?type=large", "display_name": "Luke Dupin", "link": "https://stackoverflow.com/users/3831435/luke-dupin"}, "edited": false, "score": 0, "creation_date": 1514228163, "post_id": 30113985, "comment_id": 82912045, "body": "This response is outdated, its perfectly legal to do macro calls inside macro differentiation.  I&#39;m using version1.24.0-nightly."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 1893, "user_id": 3831435, "user_type": "registered", "accept_rate": 77, "profile_image": "https://graph.facebook.com/829983118/picture?type=large", "display_name": "Luke Dupin", "link": "https://stackoverflow.com/users/3831435/luke-dupin"}, "edited": false, "score": 0, "creation_date": 1514512309, "post_id": 30113985, "comment_id": 83002247, "body": "@LukeDupin: no; the answer is still correct, nothing has changed: the parser does not accept macros in field name position. To remove <code>macro_rules!</code> from the equation, try <code>struct Test { concat_idents!(var_, a): u8 }</code>: It fails to parse."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1431045784, "creation_date": 1431045784, "answer_id": 30113985, "question_id": 30113579, "link": "https://stackoverflow.com/questions/30113579/how-do-i-call-concat-idents-inside-a-recursive-macro-expansion/30113985#30113985", "title": "How do I call concat_idents inside a recursive macro expansion?", "body": "<p>It is not at present possible to do this in any way. Substitutions (<code>$foo</code>) are fine there, but not macro calls.</p>\n"}], "owner": {"reputation": 1299, "user_id": 216247, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/714f671da100ae1caacfae017ed07a3a?s=128&d=identicon&r=PG", "display_name": "scooterman", "link": "https://stackoverflow.com/users/216247/scooterman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 762, "favorite_count": 0, "closed_date": 1514229896, "accepted_answer_id": 30113985, "answer_count": 1, "score": 4, "last_activity_date": 1514229933, "creation_date": 1431043000, "last_edit_date": 1514229933, "question_id": 30113579, "link": "https://stackoverflow.com/questions/30113579/how-do-i-call-concat-idents-inside-a-recursive-macro-expansion", "closed_reason": "Duplicate", "title": "How do I call concat_idents inside a recursive macro expansion?", "body": "<p>I'm trying to create a macro to expand a set of names and define fields for a struct:</p>\n\n<pre><code>macro_rules! expand {\n  ($($name:ident),*) =&gt; {\n     pub struct Test {\n       $(\n          concat_idents!(var_, $name) : Vec&lt;$name&gt;\n        ),*\n     }\n  }\n}\n//fails\nexpand!(a,b,c);\n</code></pre>\n\n<p>This fails as the compiler does not recognize <code>concat_idents!</code> as a macro. How am I supposed to work around this?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1431032548, "post_id": 30105735, "comment_id": 48334026, "body": "You can use the <code>Num</code> trait of the num crate if other solutions become too verbose for you."}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 1, "last_activity_date": 1431013567, "creation_date": 1431013567, "answer_id": 30105910, "question_id": 30105735, "link": "https://stackoverflow.com/questions/30105735/how-do-i-require-that-a-generic-type-supports-numeric-operations/30105910#30105910", "title": "How do I require that a generic type supports numeric operations?", "body": "<p>I don't know what you mean by \"numeric type\", but this is how you constrain the type such that addition and subtraction yield <code>T</code>:</p>\n\n<pre><code>pub struct Foo&lt;T&gt; where T: Ord+Add&lt;Output=T&gt;+Sub&lt;Output=T&gt; {\n    ...\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431025466, "post_id": 30105994, "comment_id": 48330060, "body": "This is correct, but as delnan points out, there&#39;s nothing <i>numeric</i> about <code>T</code> (and there probably shouldn&#39;t be). This simply allows any type that can be added to its own type and produce its own type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431079141, "post_id": 30105994, "comment_id": 48351737, "body": "Oh certainly, for example, it would make sense for matrices even though they are not the first thing that pops to mind when thinking numeric."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1431013846, "creation_date": 1431013846, "answer_id": 30105994, "question_id": 30105735, "link": "https://stackoverflow.com/questions/30105735/how-do-i-require-that-a-generic-type-supports-numeric-operations/30105994#30105994", "title": "How do I require that a generic type supports numeric operations?", "body": "<p>If you look at <a href=\"https://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"nofollow\">the <code>Add</code> trait</a> you will see:</p>\n\n<pre><code>pub trait Add&lt;RHS = Self&gt; {\n    type Output;\n    fn add(self, rhs: RHS) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>This is the flexibility required to specify the result type depending on both the Left and Right arguments to <code>+</code>.</p>\n\n<p>If you wish to constrain your <code>Foo&lt;T&gt;</code> structure to <code>T</code> for which there exists a symmetric implementation of <code>T</code> which itself returns <code>T</code>, you can do so in the <code>where</code> clause:</p>\n\n<ul>\n<li>to require that <code>T</code> can be added to <code>T</code>, <code>T</code> must implement <code>Add&lt;T&gt;</code> (which, since <code>RHS</code> defaults to <code>Self</code>, is the same as implementing <code>Add</code>)</li>\n<li>to require that the result be <code>T</code>, <code>T</code> must implement <code>Add&lt;Output = T&gt;</code> (the associated type syntax)</li>\n</ul>\n\n<p>A similar principle applies to <code>Sub</code>, giving:</p>\n\n<pre><code>struct Foo&lt;T&gt;\n    where T: Ord + Add&lt;Output = T&gt; + Sub&lt;Output = T&gt;\n{\n    ...\n}\n</code></pre>\n"}], "owner": {"reputation": 14360, "user_id": 35189, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6010464aba06865d7a982c3a1456d377?s=128&d=identicon&r=PG", "display_name": "Dave Vogt", "link": "https://stackoverflow.com/users/35189/dave-vogt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 309, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1431025367, "creation_date": 1431013096, "last_edit_date": 1431025367, "question_id": 30105735, "link": "https://stackoverflow.com/questions/30105735/how-do-i-require-that-a-generic-type-supports-numeric-operations", "title": "How do I require that a generic type supports numeric operations?", "body": "<p>I have a struct (and some methods) like this:</p>\n\n<pre><code>pub struct Foo&lt;T&gt; where T:Ord+Add+Sub {\n    bar: T,\n    baz: T,\n    // ...\n}\n</code></pre>\n\n<p>I need to do some numeric operations (addition, subtraction etc) and store the results. The documentation states that the result in the <code>Sub</code> or <code>Add</code> traits may be yet another type.</p>\n"}, {"tags": ["rust", "swig"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1430982606, "post_id": 30093769, "comment_id": 48300564, "body": "In method definitions, <code>self</code> is sugar for <code>self: Self</code>, <code>&amp;self</code> for <code>self: &amp;Self</code> and <code>&amp;mut self</code> for <code>self: &amp;mut Self</code>. Sure, the <code>self</code> keyword <i>is</i> still special in Rust, but <code>A::some_trait_funct</code> and <code>A::some_funct_0</code> are still functions with <code>&amp;mut A</code> as their first parameter\u2019s type."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1430986912, "post_id": 30093769, "comment_id": 48303188, "body": "You could try to create your own attribute through a compiler-plugin, which automatically inserts <code>no_mangle</code>, creates a c-header file for that one function and runs swig on it."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1430987455, "post_id": 30095647, "comment_id": 48303503, "body": "note: when you return a struct by value, the return value ends up being void and the actual return value has to be written to the first argument of the function (an additional pointer) <code>extern void bumm(Bla* sret, Bla*, int32_t val);</code> is the type of rust&#39;s <code>pub extern fn bumm(&amp;self, val: i32) -&gt; Bla</code>. At least that&#39;s how it looks in llvm: <a href=\"http://is.gd/1VDMKd\" rel=\"nofollow noreferrer\">is.gd/1VDMKd</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1430987830, "post_id": 30095647, "comment_id": 48303714, "body": "@ker, does it affect extern functions as well? That&#39;s strange, I though that <code>extern</code> makes functions work exactly like in C. Anyway, this optimization seem to fire only for larger structs (larger than pointer size, I believe), as the program above works correctly as it is."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1431327448, "post_id": 30095647, "comment_id": 48429509, "body": "ah sorry for being late ..  was away for a few days. You answered my question and I&#39;m accepting this as the correct answer but I found out that i will not be able to do this as it requires modifying the actual backend codebase with <code>#[repr(C)]</code> etc. So instead I am writing a rust-wrapper which will exposed handles to these structs and give them as <code>void*</code> to C. When C wants to call a function it will pass this back, rust wrapper will <code>retinterpret_cast</code> it (<code>transmute</code>) and call the mem. function etc. I&#39;ll post it here soon for u and others to comment."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1430987626, "last_edit_date": 1430987626, "creation_date": 1430987124, "answer_id": 30095647, "question_id": 30093769, "link": "https://stackoverflow.com/questions/30093769/how-to-access-rust-from-other-languages/30095647#30095647", "title": "How to access Rust from other languages", "body": "<p>Well, methods are just regular functions, and as Chris said, <code>self</code> argument has implicit connection with <code>Self</code> type. With your example (slightly modified) using functions from C code should be straightforward:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\npub struct A { id: u32, }\n\n#[no_mangle]\npub extern fn new_a(id: u32) -&gt; A {\n    A { id: id }\n}\n\nimpl A {\n    #[no_mangle]\n    pub extern fn some_funct(&amp;self) {\n        println!(\"Called some_funct: {}\", self.id);\n    }\n}\n\ntrait SomeTrait {\n    extern fn some_trait_funct(&amp;self);\n}\n\nimpl SomeTrait for A {\n    #[no_mangle]\n    extern fn some_trait_funct(&amp;self) {\n        println!(\"Called some_trait_funct: {}\", self.id);\n    }\n}\n</code></pre>\n\n<p>Note that I added <code>extern</code> to change calling convention and <code>#[no_mangle]</code> to avoid name mangling and <code>#[repr(C)]</code> on the struct. The latter is not necessary if your code creates <code>Box</code>es of the struct and pass them to C as raw pointers. I'm not sure, however, how <code>#[no_mangle]</code> could affect trait methods if there is more than one trait implementor - if both have <code>#[no_mangle]</code>, there is bound to be some kind of name conflict.</p>\n\n<p>Now using this type and its functions from C is easy:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdint.h&gt;\n\nstruct A {\n    uint32_t id;\n};\n\nextern struct A new_a(uint32_t id);\nextern void some_funct(const struct A *self);\nextern void some_trait_funct(const struct A *self);\n\nint main() {\n    struct A a = new_a(123);\n    some_funct(&amp;a);\n    some_trait_funct(&amp;a);\n}\n</code></pre>\n\n<p>This program compiles and works:</p>\n\n<pre><code>% rustc --crate-type=staticlib test.rs\nmultirust: a new version of 'nightly' is available. run `multirust update nightly` to install it\nnote: link against the following native artifacts when linking against this static library\nnote: the order and any duplication can be significant on some platforms, and so may need to be preserved\nnote: library: System\nnote: library: pthread\nnote: library: c\nnote: library: m\n% gcc -o test_use test_use.c libtest.a -lSystem -lpthread -lc -lm\n% ./test_use\nCalled some_funct: 123\nCalled some_trait_funct: 123\n</code></pre>\n\n<p>If methods accepted <code>&amp;mut self</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\nextern fn some_funct_mut(&amp;mut self) { ... }\n</code></pre>\n\n<p>you would need to omit <code>const</code>:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>extern void some_funct_mut(struct A *self);\n</code></pre>\n\n<p>If methods accepted <code>self</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\nextern fn some_funct_value(self) { ... }\n</code></pre>\n\n<p>you would need to pass the structure by value:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>extern void some_funct_value(struct A self);\n</code></pre>\n\n<p>Though if you use the structure through an opaque pointer, calling functions taking it by value may be difficult as C has to know the exact size of the structure. Not that it is that common with opaque pointers, I believe.</p>\n"}, {"tags": [], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "is_accepted": false, "score": 5, "last_activity_date": 1431338483, "creation_date": 1431338483, "answer_id": 30164710, "question_id": 30093769, "link": "https://stackoverflow.com/questions/30093769/how-to-access-rust-from-other-languages/30164710#30164710", "title": "How to access Rust from other languages", "body": "<p>Ok, as i commented in the accepted answer that I couldn't use that approach, I ended up doing something like this for other's to comment on:</p>\n\n<p>The backend rust code that gets compiled to <code>rlib</code>:</p>\n\n<pre><code>pub trait TestTrait {\n    fn trait_func(&amp;mut self) -&gt; i32;\n}\n\npub struct TestStruct {\n    value: i32,\n}\n\nimpl TestStruct {\n    pub fn new(value: i32) -&gt; TestStruct {\n        TestStruct {\n            value: value,\n        }\n    }\n\n    pub fn decrement(&amp;mut self, delta: i32) {\n        self.value -= delta;\n    }\n}\n\nimpl TestTrait for TestStruct {\n    fn trait_func(&amp;mut self) -&gt; i32 {\n        self.value += 3;\n        self.value\n    }\n}\n</code></pre>\n\n<p>The rust-wrapper over this that links to the above <code>rlib</code> and compiles into <code>staticlib</code> (ie., <code>.a</code> in Linux etc):</p>\n\n<pre><code>#[no_mangle]\npub extern fn free_function_wrapper(value: i32) -&gt; i32 {\n    rustlib::free_function(value)\n}\n\n#[no_mangle]\npub extern fn new_test_struct_wrapper(value: i32) -&gt; *mut libc::c_void {\n    let obj = rustlib::TestStruct::new(value);\n    unsafe {\n        let raw_ptr = libc::malloc(mem::size_of::&lt;rustlib::TestStruct&gt;() as libc::size_t) as *mut rustlib::TestStruct;\n\n        ptr::write(&amp;mut *raw_ptr, obj);\n        raw_ptr as *mut libc::c_void\n    }\n}\n\n#[no_mangle]\npub extern fn test_struct_decrement_wrapper(raw_ptr: *mut libc::c_void, delta: i32) {\n    unsafe {\n        mem::transmute::&lt;*mut libc::c_void, &amp;mut rustlib::TestStruct&gt;(raw_ptr).decrement(delta);\n    }\n}\n\n#[no_mangle]\npub extern fn test_struct_trait_function_wrapper(raw_ptr: *mut libc::c_void) -&gt; i32 {\n    unsafe {\n        mem::transmute::&lt;*mut libc::c_void, &amp;mut rustlib::TestStruct&gt;(raw_ptr).trait_func()\n    }\n}\n</code></pre>\n\n<p>The C-wrapper (<code>api.h &amp; api.c</code>) that links to the <code>staticlib</code> above and compiles into a shared object if required:</p>\n\n<pre><code>extern int32_t free_function_wrapper(int32_t value);\n\nextern void* new_test_struct_wrapper(int32_t value);\nextern void test_struct_decrement_wrapper(void* ptr, int32_t delta);\nextern int32_t test_struct_trait_function_wrapper(void* ptr);\n\nint32_t free_function(int32_t value) {\n  return free_function_wrapper(value);\n}\n\nvoid* new_test_struct(int32_t value) {\n  return new_test_struct_wrapper(value);\n}\n\nvoid test_struct_decrement(void* ptr, int32_t value) {\n  test_struct_decrement_wrapper(ptr, value);\n}\n\nint32_t test_struct_trait_function(void* ptr) {\n  return test_struct_trait_function_wrapper(ptr);\n}\n</code></pre>\n\n<p>Now just run <code>SWIG</code> over the C file (i've posted just the <code>.c</code> file - you can guess the <code>.h</code> over which SWIG will run) for the target language, get an <code>interface_wrap.c</code> generated (default name) by it and compile these source code link, them against the <code>staticlib</code> to get a shared-object.</p>\n\n<p>Eg, for python:</p>\n\n<pre><code>swig -python interface.i\ngcc -std=c99 -c -fPIC -Wall -Werror -O2 api.c interface_wrap.c -I/usr/include/python2.7\ngcc -shared -o _port_sample.so api.o interface_wrap.o -L./ -lrust_wrapper\n</code></pre>\n\n<p>Now just call from Python and the whole thing works:</p>\n\n<pre><code>$ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import port_sample\n&gt;&gt;&gt; handle = port_sample.new_test_struct(36)\n&gt;&gt;&gt; port_sample.test_struct_decrement(handle, 12)\n&gt;&gt;&gt; value = port_sample.test_struct_trait_function(handle)\n&gt;&gt;&gt; print value\n27\n&gt;&gt;&gt; exit()\n</code></pre>\n\n<p>I hope someone finds this useful and/or can suggest improvements etc. I've also got this thing working and committed to my github repo: <a href=\"https://github.com/ustulation/rust-ffi/tree/master/python-swig-rust\" rel=\"nofollow\">https://github.com/ustulation/rust-ffi/tree/master/python-swig-rust</a></p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2002, "favorite_count": 5, "accepted_answer_id": 30095647, "answer_count": 2, "score": 9, "last_activity_date": 1431338483, "creation_date": 1430981187, "last_edit_date": 1430982220, "question_id": 30093769, "link": "https://stackoverflow.com/questions/30093769/how-to-access-rust-from-other-languages", "title": "How to access Rust from other languages", "body": "<p>Previously when the code-base was in C++, I had C++ wrapper files which would link to the code base and I would run <code>swig</code> (version 3 for C++11 support) to generate the interface files for the target language (Python, JavaScript, C#, etc.). Then of course get all these files and libraries compiled into a shared object and have it invoked from the required languages. Now the code base is being changed to rust. So for swig to work I have the following:</p>\n\n<ol>\n<li>Main rust code file compiling into an rlib.</li>\n<li>Rust wrapper file that calls into the main code base but uses <code>no_mangle</code> and <code>extern</code> syntax for <code>FFI</code> and compiles into a staticlib.</li>\n<li>A C file that calls the rust wrapper and is a replica of it.</li>\n</ol>\n\n<p>Now I use <code>swig</code> on the C file, get the interface file for the target language, combine all the files (steps two and three) and the SWIG interface file) into a shared object and call from the target language.</p>\n\n<p>So:</p>\n\n<ol>\n<li><p>Is the approach fine?</p></li>\n<li><p>I can get free functions to work. However I'm confused on how to get member functions (methods) to work. In C++ the first parameter of the member functions is the implicit <code>this</code> pointer. So I could return a <code>void*</code> handle to the class or struct to the C interface which would pass it on to others who wanted to store it (e.g. jsctypes for Firefox) and then on receiving again <code>reinterpret_cast</code> it to the concrete/actual type and invoke the member function on it. How do I do this with Rust?</p></li>\n</ol>\n\n<p>e.g., for</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct A { id: SomeType, }\nimpl A {\n    pub fn some_funct_0(&amp;mut self) {}\n    pub fn some_funct_1(&amp;self) {}\n}\n\nimpl SomeTrait for A {\n    fn some_trait_funct(&amp;mut self) {}\n}\n</code></pre>\n\n<p>So how do I access these member functions on an object of <code>A</code> (should be unmanaged and on the heap I guess?) from target languages (Python, C, etc.) or even simply a C interface?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 8, "last_activity_date": 1430979572, "creation_date": 1430979572, "answer_id": 30093315, "question_id": 30092272, "link": "https://stackoverflow.com/questions/30092272/how-to-use-rwlocks-without-scoped/30093315#30093315", "title": "How to use RwLocks without scoped?", "body": "<p><code>&amp;mut</code> references are not safe to send to a non-scoped thread, because the thread may still run after the referenced data has been deallocated. Furthermore, after <code>helper</code> returns, the main thread would still be able to mutate <code>stuff</code>, and the spawned thread would also be able to mutate <code>stuff</code> indirectly, which is not allowed in Rust (there can only be one mutable alias for a variable).</p>\n\n<p>Instead, the <code>RwLock</code> should own the data, rather than borrow it. This means <code>helper</code> should receive a <code>Stuff</code> rather than a <code>&amp;mut Stuff</code>.</p>\n\n<pre><code>use std::sync::{Arc, RwLock};\nuse std::thread;\n\nstruct Stuff {\n    x: i32\n}\n\nfn main() {\n    let mut stuff = Stuff{x: 5};\n    helper(stuff);\n    println!(\"done\");\n}\n\nfn helper(stuff: Stuff){\n    let rwlock = RwLock::new(stuff);\n    let arc = Arc::new(rwlock);\n    let local_arc = arc.clone();\n    for _ in 0..10{\n        let my_rwlock = arc.clone();\n        thread::spawn(move || {\n            let reader = my_rwlock.read().unwrap();\n            // do some stuff\n        });\n    }\n    let mut writer = local_arc.write().unwrap();\n    writer.x += 1;\n}\n</code></pre>\n"}], "owner": {"reputation": 1743, "user_id": 1056805, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/4db27c7d2549e64d21216f812ce84a4f?s=128&d=identicon&r=PG", "display_name": "user1056805", "link": "https://stackoverflow.com/users/1056805/user1056805"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1377, "favorite_count": 0, "accepted_answer_id": 30093315, "answer_count": 1, "score": 5, "last_activity_date": 1431012659, "creation_date": 1430974703, "last_edit_date": 1431012659, "question_id": 30092272, "link": "https://stackoverflow.com/questions/30092272/how-to-use-rwlocks-without-scoped", "title": "How to use RwLocks without scoped?", "body": "<p>I'm trying to share a <a href=\"https://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"nofollow\">RwLock</a> amongst several threads without using scoped threads but I can't figure out how to get the lifetimes correct. I assume that this is possible (what's the point of RwLocks otherwise?) but I can't find any examples of it.</p>\n\n<p>Here is a toy example of what I'm trying to accomplish. Any advice would be appreciated.\n<a href=\"http://is.gd/hdWCzr\" rel=\"nofollow\">rust playpen for this code</a></p>\n\n<pre><code>use std::sync::{Arc, RwLock};\nuse std::thread;\n\nstruct Stuff {\n    x: i32\n}\n\nfn main() {\n    let mut stuff = Stuff{x: 5};\n    helper(&amp;mut stuff);\n    println!(\"done\");\n}\n\nfn helper(stuff: &amp;mut Stuff){\n    let rwlock = RwLock::new(stuff);\n    let arc = Arc::new(rwlock);\n    let local_arc = arc.clone();\n    for _ in 0..10{\n        let my_rwlock = arc.clone();\n        thread::spawn(move || {\n            let reader = my_rwlock.read().unwrap();\n            // do some stuff\n        });\n    }\n    let mut writer = local_arc.write().unwrap();\n    writer.x += 1;\n}\n</code></pre>\n"}]