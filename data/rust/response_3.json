[{"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1422491818, "post_id": 28203414, "comment_id": 44775932, "body": "It\u2019s just <code>[None; 100]</code> that you can\u2019t write; <code>[None, None, None, None, \u2026]</code> would work fine. But semantically I imagine <code>Vec&lt;Tree&gt;</code> is more what you want."}, {"owner": {"reputation": 1958, "user_id": 3217013, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8fe4c19ed2edcb4fe6e661a5faed0205?s=128&d=identicon&r=PG&f=1", "display_name": "Emil", "link": "https://stackoverflow.com/users/3217013/emil"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1422492350, "post_id": 28203414, "comment_id": 44776097, "body": "Right, I tried that and it worked, but that feels wrong for so many reasons. Vec&lt;Tree&gt; works for what I need."}], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 3, "creation_date": 1422484008, "post_id": 28203612, "comment_id": 44773245, "body": "<code>Box</code> is redundant because <code>Vec</code> already adds a layer of indirection."}, {"owner": {"reputation": 1958, "user_id": 3217013, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8fe4c19ed2edcb4fe6e661a5faed0205?s=128&d=identicon&r=PG&f=1", "display_name": "Emil", "link": "https://stackoverflow.com/users/3217013/emil"}, "edited": false, "score": 0, "creation_date": 1422484402, "post_id": 28203612, "comment_id": 44773427, "body": "A fixed size array would suit my needs much better."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422485351, "post_id": 28203612, "comment_id": 44773770, "body": "@VladimirMatveev great point! Mostly due to my na&#239;ve translation. :-)"}, {"owner": {"reputation": 1958, "user_id": 3217013, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8fe4c19ed2edcb4fe6e661a5faed0205?s=128&d=identicon&r=PG&f=1", "display_name": "Emil", "link": "https://stackoverflow.com/users/3217013/emil"}, "edited": false, "score": 0, "creation_date": 1422486415, "post_id": 28203612, "comment_id": 44774229, "body": "@Shepmaster is it possible to preallocate a specific amount of space with a Vec?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1422487326, "last_edit_date": 1422487326, "creation_date": 1422483891, "answer_id": 28203612, "question_id": 28203414, "link": "https://stackoverflow.com/questions/28203414/recursive-types-and-arrays/28203612#28203612", "title": "Recursive types and arrays", "body": "<p>The problem is that <a href=\"http://doc.rust-lang.org/std/boxed/struct.Box.html\" rel=\"nofollow\"><code>Box</code></a> doesn't support <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow\"><code>Copy</code></a>. Copy states:</p>\n\n<blockquote>\n  <p>Types that can be copied by simply copying bits</p>\n</blockquote>\n\n<p>However, a <code>Box</code> contains pointers to memory, and that memory will not be copied when you just copy the bits of the pointer.</p>\n\n<p>When you are constructing your array, Rust only knows that you are going to put an <code>Option</code> in there. There isn't a way to have a enum only half-implement a trait. </p>\n\n<p>Do you need to use a fixed-size array? Perhaps this would work better:</p>\n\n<pre><code>struct Tree {\n    root : i32,\n    children : Vec&lt;Tree&gt;\n}\n</code></pre>\n\n<p>Your constructor can then use <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.with_capacity\" rel=\"nofollow\"><code>Vec::with_capacity</code></a>:</p>\n\n<pre><code>impl Tree {\n    fn new(root: i32) -&gt; Tree {\n        Tree { root: root, children: Vec::with_capacity(100) }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1958, "user_id": 3217013, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8fe4c19ed2edcb4fe6e661a5faed0205?s=128&d=identicon&r=PG&f=1", "display_name": "Emil", "link": "https://stackoverflow.com/users/3217013/emil"}, "edited": false, "score": 0, "creation_date": 1422484739, "post_id": 28203628, "comment_id": 44773553, "body": "But my initial element is a None. Why does it even need the <code>Copy</code> instance for Tree?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1958, "user_id": 3217013, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8fe4c19ed2edcb4fe6e661a5faed0205?s=128&d=identicon&r=PG&f=1", "display_name": "Emil", "link": "https://stackoverflow.com/users/3217013/emil"}, "edited": false, "score": 2, "creation_date": 1422486181, "post_id": 28203628, "comment_id": 44774127, "body": "It doesn&#39;t matter - your type is not <code>Copy</code>, hence <code>Option&lt;Tree&gt;</code> is not <code>Copy</code> as well. I suspect it <i>might</i> be possible to special-case null-argument enum variants for them to be usable in such situations, but I think that this is a rare case, so no one bothered yet. Maybe when we get generic literals, it will change."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 1, "last_activity_date": 1422483981, "creation_date": 1422483981, "answer_id": 28203628, "question_id": 28203414, "link": "https://stackoverflow.com/questions/28203414/recursive-types-and-arrays/28203628#28203628", "title": "Recursive types and arrays", "body": "<p>I'm afraid you won't be able to use static arrays and recursive types like that without <code>unsafe</code>. The reason is that array initializers require the array element type to be <code>Copy</code> because they initialize all elements with bytewise copies of the initial element, and your type can't be <code>Copy</code> because it contains <code>Box</code>, which is the only safe way to allow recursive types in Rust (well, there are also <code>Vec</code> and other similar containers, but they also need a heap allocation).</p>\n\n<p>If you are not afraid of allocations, you can just as well use <code>Vec</code>:</p>\n\n<pre><code>struct Tree {\n    root: i32,\n    children: Vec&lt;Tree&gt;\n}\n</code></pre>\n\n<p>Then the initialization could look like</p>\n\n<pre><code>Tree {\n    root: 0,\n    children: vec![]\n}\n</code></pre>\n"}], "owner": {"reputation": 1958, "user_id": 3217013, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8fe4c19ed2edcb4fe6e661a5faed0205?s=128&d=identicon&r=PG&f=1", "display_name": "Emil", "link": "https://stackoverflow.com/users/3217013/emil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 435, "favorite_count": 0, "accepted_answer_id": 28203612, "answer_count": 2, "score": 0, "last_activity_date": 1422487326, "creation_date": 1422483125, "question_id": 28203414, "link": "https://stackoverflow.com/questions/28203414/recursive-types-and-arrays", "title": "Recursive types and arrays", "body": "<p>Okay, so I am just starting learn a little bit of Rust and I am running to a pretty simple problem. I have a recursive type like this:</p>\n\n<pre><code>struct Tree {\n    root : i32,\n    children : Box&lt;[Option&lt;Tree&gt; ; 100]&gt;\n}\n</code></pre>\n\n<p>Later, when I was trying to initialize Tree</p>\n\n<pre><code>hex.rs:30:29: 30:40 error: the trait `core::marker::Copy` is not implemented for the type `Tree` [E0277]\nhex.rs:30         children : Box::new([None; 100])\n                                      ^~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>So, I added</p>\n\n<pre><code>#[derive(Copy)]\n</code></pre>\n\n<p>before the struct definition, but I got this error:</p>\n\n<pre><code>hex.rs:8:10: 8:14 error: the trait `Copy` may not be implemented for this type; field `children` does not implement `Copy` [E0204]\nhex.rs:8 #[derive(Copy)]\n                  ^~~~\nnote: in expansion of #[derive]\nhex.rs:8:1: 8:16 note: expansion site\nerror: aborting due to previous error\n</code></pre>\n\n<p>I am not entirely sure where to go from here. Is there an easy way to derive traits for recursive data types?</p>\n"}, {"tags": ["rust", "parser-combinators"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422478214, "post_id": 28201792, "comment_id": 44770445, "body": "To get the best answers, you should produce a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, ideally something that we can run on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Playpen</a>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422478542, "post_id": 28201792, "comment_id": 44770606, "body": "@Shepmaster, I&#39;m afraid you won&#39;t be able to use external libraries on playpen, and here the problem is exactly with an external library."}, {"owner": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "edited": false, "score": 0, "creation_date": 1422478599, "post_id": 28201792, "comment_id": 44770628, "body": "I will try to see if I can reproduce the problem with a smaller amount of code at least."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422478661, "post_id": 28201792, "comment_id": 44770660, "body": "@VladimirMatveev certainly we can&#39;t use external libraries (although that would be awesome, especially since more and more is moving to crates). However, perhaps we could copy-and-paste code from the original library into a single file."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422478679, "post_id": 28201792, "comment_id": 44770672, "body": "FWIW, I was able to reproduce it but I&#39;m still investigating the reason of the problem."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422479778, "post_id": 28201792, "comment_id": 44771198, "body": "I guess I&#39;ve found the reason, writing the answer now."}, {"owner": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "edited": false, "score": 0, "creation_date": 1422480142, "post_id": 28201792, "comment_id": 44771371, "body": "I have been trying to recreate the problem with less code. I have not been successful though."}], "answers": [{"tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": false, "score": 2, "last_activity_date": 1422479731, "creation_date": 1422479731, "answer_id": 28202522, "question_id": 28201792, "link": "https://stackoverflow.com/questions/28201792/calling-a-function-which-takes-a-closure-twice-with-different-closures/28202522#28202522", "title": "Calling a function which takes a closure twice with different closures", "body": "<p>Two facets of Rust's closures are causing your problem, one, closures cannot be generic, and two, each closure is its own type. Because closure's cannot be generic,<code>prop_value</code>'s parameter <code>value_type</code> must be a specific type. Because each closure is a specific type, the closure you pass to <code>prop_value</code> in <code>pwhite</code> is a different type from the one in <code>pblack</code>. What the compiler does is conclude that the <code>value_type</code> must have the type of the closure in <code>pblack</code>, and when it gets to <code>pwhite</code> it finds a different closure, and gives an error.</p>\n\n<p>Judging from your code sample, the simplest solution would probably be to make <code>prop_value</code> a generic <code>fn</code> - it doesn't look like it needs to be a closure. Alternatively, you could declare its parameter <code>value_type</code> to be a closure trait object, e.g. <code>&amp;Fn(...) -&gt; ...</code>. Here is a simplifed example demonstrating these approaches:</p>\n\n<pre><code>fn higher_fn&lt;F: Fn() -&gt; bool&gt;(f: &amp;F) -&gt; bool {\n    f()\n}\nlet higher_closure = |&amp;: f: &amp;Fn() -&gt; bool | { f() };\n\nlet closure1 = |&amp;:| { true };\nlet closure2 = |&amp;:| { false };\nhigher_fn(&amp;closure1);\nhigher_fn(&amp;closure2);\nhigher_closure(&amp;closure1);\nhigher_closure(&amp;closure2);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1422480446, "creation_date": 1422480446, "answer_id": 28202718, "question_id": 28201792, "link": "https://stackoverflow.com/questions/28201792/calling-a-function-which-takes-a-closure-twice-with-different-closures/28202718#28202718", "title": "Calling a function which takes a closure twice with different closures", "body": "<p>The existing answer(s) are good, but I wanted to share an even smaller example of the problem:</p>\n\n<pre><code>fn thing&lt;F: FnOnce(T), T&gt;(f: F) {}\n\nfn main() {\n    let caller = |&amp;: f| {thing(f)};\n    caller(|&amp;: _| {});\n    caller(|&amp;: _| {});\n}\n</code></pre>\n\n<p>When we define <code>caller</code>, its signature is not fully fixed yet. When we call it the first time, type inference sets the input and output types. In this example, after the first call, <code>caller</code> will be required to take a closure with a specific type, the type of the first closure. This is because each and every closure has its own unique, anonymous type. When we call <code>caller</code> a second time, the second closure's (unique, anonymous) type doesn't fit!</p>\n\n<p>As @wingedsubmariner points out, there's no way to create closures with generic types. If we had hypothetical syntax like <code>for&lt;F: Fn()&gt; |f: F| { ... }</code>, then perhaps we could work around this. The suggestion to make a generic function is a good one.</p>\n"}, {"comments": [{"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422481083, "post_id": 28202775, "comment_id": 44771825, "body": "I&#39;m not sure you last point is true. Closure types are no longer anonymous once they are passed to generic functions, because inside the generic function their types are represented by one of the type parameters. It should be possible to write the signature of the generic function."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422481199, "post_id": 28202775, "comment_id": 44771884, "body": "Unfortunately, the closure in question contains other closures inside it (in <code>parser::satisfy</code> calls). You won&#39;t be able to write them out."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422481401, "post_id": 28202775, "comment_id": 44771999, "body": "That is, unless you also pass them as parameters. That actually might work."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422481514, "post_id": 28202775, "comment_id": 44772053, "body": "The output type will be <i>very</i> long though."}, {"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422481561, "post_id": 28202775, "comment_id": 44772073, "body": "Yes, something like <code>fn function&lt;F: Fn() -&gt; G, G: Fn() -&gt; ()&gt;(f: F) -&gt; G</code>, though like you said probably much bigger in the real code."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422481634, "post_id": 28202775, "comment_id": 44772114, "body": "More like <code>... -&gt; SomeStruct&lt;F, G&gt;</code> in fact, but yes."}, {"owner": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "edited": false, "score": 0, "creation_date": 1422481838, "post_id": 28202775, "comment_id": 44772231, "body": "Thank you. Maybe the parser-combinators library has something to deal with this though. There was a part of the documentation I did not really understand before which seems to make a little more sense now."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422482115, "post_id": 28202775, "comment_id": 44772364, "body": "It&#39;s not <i>exactly</i> the library&#39;s fault. It&#39;s just that mixing closures and traits in a generic way is hard. I was going to write that you want to use trait objects in this case but I can&#39;t come up with an example, unfortunately :("}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "edited": false, "score": 0, "creation_date": 1422483309, "post_id": 28202775, "comment_id": 44772939, "body": "@AndreasVinter-Hviid, please see the update - I was able to find the working solution. But it is not really pretty :("}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422483573, "post_id": 28202775, "comment_id": 44773059, "body": "You can find the full code <a href=\"https://gist.github.com/netvl/0164955d801695239e6c\" rel=\"nofollow noreferrer\">here</a>, BTW."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1422483289, "last_edit_date": 1422483289, "creation_date": 1422480620, "answer_id": 28202775, "question_id": 28201792, "link": "https://stackoverflow.com/questions/28201792/calling-a-function-which-takes-a-closure-twice-with-different-closures/28202775#28202775", "title": "Calling a function which takes a closure twice with different closures", "body": "<p>Unfortunately, you stumbled upon one of the rough edges in the Rust type system (which is, given the closure-heavy nature of parser-combinators, not really unexpected).</p>\n\n<p>Here is a simplified example of your problem:</p>\n\n<pre><code>fn main() {\n    fn call_closure_fun&lt;F: Fn(usize)&gt;(f: F) { f(12) }  // 1\n    fn print_int(prefix: &amp;str, i: usize) { println!(\"{}: {}\", prefix, i) }\n\n    let call_closure = |&amp;: closure| call_closure_fun(closure);  // 2\n\n    call_closure(|&amp;: i| print_int(\"first\", i));  // 3.1\n    call_closure(|&amp;: i| print_int(\"second\", i)); // 3.2\n}\n</code></pre>\n\n<p>It gives exactly the same error as your code:</p>\n\n<pre><code>test.rs:8:18: 8:47 error: mismatched types:\n expected `closure[test.rs:7:18: 7:46]`,\n    found `closure[test.rs:8:18: 8:47]`\n(expected closure,\n    found a different closure) [E0308]\ntest.rs:8     call_closure(|&amp;: i| print_int(\"second\", i));\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>We have (referenced in the comments in the code):</p>\n\n<ol>\n<li>a function which accepts a closure of some concrete form;</li>\n<li>a closure which calls a function (1) with its own argument;</li>\n<li><em>two</em> invocations of closure (1), passing different closures each time.</li>\n</ol>\n\n<p>Rust closures are unboxed. It means that for each closure the compiler generates a fresh type which implements one of closure traits (<a href=\"http://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"nofollow\"><code>Fn</code></a>, <a href=\"http://doc.rust-lang.org/std/ops/trait.FnMut.html\" rel=\"nofollow\"><code>FnMut</code></a>, <a href=\"http://doc.rust-lang.org/std/ops/trait.FnOnce.html\" rel=\"nofollow\"><code>FnOnce</code></a>). These types are anonymous - they don't have a name you can write out. All you know is that these types implement a certain trait.</p>\n\n<p>Rust is a strongly- and statically-typed language: the compiler must know exact type of each variable and each parameter at the compile time. Consequently it has to assign types for every parameter of every closure you write. But what type should <code>closure</code> argument of (2) have? Ideally, it should be some generic type, just like in (1): the closure should accept any type as long as it implements a trait. However, Rust closures can't be generic, and so there is no syntax to specify that. So Rust compiler does the most natural thing it can - it infers the type of <code>closure</code> argument based on the first use of <code>call_closure</code>, i.e. from <code>3.1</code> invocation - that is, it assigns the anonymous type of the closure in <code>3.1</code>!</p>\n\n<p>But this anonymous type is different from the anonymous type of the closure in <code>3.2</code>: the only thing they have in common is that they both implement <code>Fn(usize)</code>. And this is exactly what error is about.</p>\n\n<p>The best solution would be to use functions instead of closures because functions can be generic. Unfortunately, you won't be able to do that either: your closures return structures which contain closures inside themselves, something like</p>\n\n<pre><code>pub struct Satisfy&lt;I, Pred&gt; { ... }\n</code></pre>\n\n<p>where <code>Pred</code> is later constrained to be <code>Pred: FnMut(char) -&gt; bool</code>. Again, because closures have anonymous types, you can't specify them in type signatures, so you won't be able to write out the signature of such generic function. </p>\n\n<p>In fact, the following does work (because I've extracted closures for <code>parser::satisfy()</code> calls to parameters):</p>\n\n<pre><code>fn prop_value&lt;'r, I, P, L, R&gt;(ident: I, value_type: P, l: L, r: R) -&gt; pp::With&lt;pp::With&lt;pp::With&lt;pp::Spaces&lt;&amp;'r str&gt;, I&gt;, pp::Spaces&lt;&amp;'r str&gt;&gt;, pp::Between&lt;pp::Satisfy&lt;&amp;'r str, L&gt;, pp::Satisfy&lt;&amp;'r str, R&gt;, P&gt;&gt;\n    where I: Parser&lt;Input=&amp;'r str, Output=&amp;'r str&gt;,\n          P: Parser&lt;Input=&amp;'r str, Output=Property&gt;,\n          L: Fn(char) -&gt; bool,\n          R: Fn(char) -&gt; bool {\n    parser::spaces().with(ident).with(parser::spaces()).with(\n        parser::between(\n            parser::satisfy(l),\n            parser::satisfy(r),\n            value_type\n        )\n    )\n}\n</code></pre>\n\n<p>And you'd use it like this:</p>\n\n<pre><code>let pblack = prop_value(\n    parser::string(\"B\"),\n    pmove().map(|&amp;: m| Property::Black(m)),\n    |c| c == '[', |c| c == ']'\n);\n\nlet pwhite = prop_value(\n    parser::string(\"W\"),\n    pmove().map(|&amp;: m| Property::White(m)),\n    |c| c == '[', |c| c == ']'\n);\n</code></pre>\n\n<p><code>pp</code> is introduced with <code>use parser::parser as pp</code>.</p>\n\n<p>This does work, but it is really ugly - I had to use the compiler error output to actually determine the required return type. With the slightest change in the function it will have to be adjusted again. Ideally this is solved with unboxed abstract return types - there is <a href=\"https://github.com/rust-lang/rfcs/pull/105\" rel=\"nofollow\">a postponed RFC</a> on them - but we're still not there yet.</p>\n"}, {"comments": [{"owner": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "edited": false, "score": 0, "creation_date": 1422649750, "post_id": 28210287, "comment_id": 44848924, "body": "This seems cool, but when I try to construct an <code>FnParser</code> the way you suggest, I get: &quot;error: cannot invoke tuple struct constructor with private fields&quot;. Just like in the Question: <a href=\"http://stackoverflow.com/questions/24110970/tuple-struct-constructor-complains-about-private-fields\" title=\"tuple struct constructor complains about private fields\">stackoverflow.com/questions/24110970/&hellip;</a>"}, {"owner": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "edited": false, "score": 0, "creation_date": 1422715162, "post_id": 28210287, "comment_id": 44864378, "body": "It seems like this has been fixed in the git repo already: <a href=\"https://github.com/Marwes/parser-combinators/commit/e713d7c7e05b424e69982e7e627537882f7a9482\" rel=\"nofollow noreferrer\">github.com/Marwes/parser-combinators/commit/&hellip;</a>"}], "tags": [], "owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "is_accepted": false, "score": 3, "last_activity_date": 1422520855, "creation_date": 1422520855, "answer_id": 28210287, "question_id": 28201792, "link": "https://stackoverflow.com/questions/28201792/calling-a-function-which-takes-a-closure-twice-with-different-closures/28210287#28210287", "title": "Calling a function which takes a closure twice with different closures", "body": "<p>As the author of parser-combinators I will just chime in on another way of solving this, without needing to use the compiler to generate the return type.</p>\n\n<p>As each parser is basically just a function together with 2 associated types there are implementations for the Parser trait for all function types.</p>\n\n<pre><code>impl &lt;I, O&gt; Parser for fn (State&lt;I&gt;) -&gt; ParseResult&lt;O, I&gt;\n    where I: Stream { ... }\npub struct FnParser&lt;I, O, F&gt;(F);\nimpl &lt;I, O, F&gt; Parser for FnParser&lt;I, O, F&gt;\n    where I: Stream, F: FnMut(State&lt;I&gt;) -&gt; ParseResult&lt;O, I&gt; { ... }\n</code></pre>\n\n<p>These should all be replaced by a single trait and the FnParser type removed, once the orphan checking allows it. In the meantime we can use the FnParser type to create a parser from a closure.</p>\n\n<p>Using these traits we can essentially hide the big parser type returned from in Vladimir Matveev's example.</p>\n\n<pre><code>fn prop_value&lt;'r, I, P, L, R&gt;(ident: I, value_type: P, l: L, r: R, input: State&lt;&amp;'r str&gt;) -&gt; ParseResult&lt;Property, &amp;'r str&gt;\n    where I: Parser&lt;Input=&amp;'r str, Output=&amp;'r str&gt;,\n      P: Parser&lt;Input=&amp;'r str, Output=Property&gt;,\n      L: Fn(char) -&gt; bool,\n      R: Fn(char) -&gt; bool {\n    parser::spaces().with(ident).with(parser::spaces()).with(\n        parser::between(\n            parser::satisfy(l),\n            parser::satisfy(r),\n            value_type\n        )\n    ).parse_state(input)\n}\n</code></pre>\n\n<p>And we can now construct the parser with this</p>\n\n<pre><code>let parser = FnParser(move |input| prop_value(ident, value_type, l, r, input));\n</code></pre>\n\n<p>And this is basically the best we can do at the moment using rust. Unboxed anonymous return types would make all of this significantly easier since complex return types would not be needed (nor created since the library itself could be written to utilize this, avoiding the complex types entirely).</p>\n"}], "owner": {"reputation": 1413, "user_id": 235170, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/008e1a809d4bfff794790c7cf51bcbba?s=128&d=identicon&r=PG", "display_name": "Andreas Vinter-Hviid", "link": "https://stackoverflow.com/users/235170/andreas-vinter-hviid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1363, "favorite_count": 0, "accepted_answer_id": 28202775, "answer_count": 4, "score": 2, "last_activity_date": 1422520855, "creation_date": 1422476909, "question_id": 28201792, "link": "https://stackoverflow.com/questions/28201792/calling-a-function-which-takes-a-closure-twice-with-different-closures", "title": "Calling a function which takes a closure twice with different closures", "body": "<p>As a project for learning rust, I am writing a program which can parse sgf files (a format for storing go games, and technically also other games). Currently the program is supposed to parse strings of the type (this is just an exampel) <code>\";B[ab]B[cd]W[ef]B[gh]\"</code> into <code>[Black((0,1)),Black((2,3,)),White((4,5)),Black((6,7))]</code></p>\n\n<p>For this I am using the parser-combinators library.</p>\n\n<p>I have run into the following error:</p>\n\n<pre><code>main.rs:44:15: 44:39 error: can't infer the \"kind\" of the closure; explicitly annotate it; e.g. `|&amp;:| {}` [E0187]\nmain.rs:44      pmove().map(|m| {Property::White(m)})\n                            ^~~~~~~~~~~~~~~~~~~~~~~~\nmain.rs:44:15: 44:39 error: mismatched types:\n expected `closure[main.rs:39:15: 39:39]`,\n    found `closure[main.rs:44:15: 44:39]`\n(expected closure,\n    found a different closure) [E0308]\nmain.rs:44      pmove().map(|m| {Property::White(m)})\n                            ^~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\nCould not compile `go`.\n</code></pre>\n\n<p>The function in question is below. I am completely new to rust, so I can't really isolate the problem further or recreate it in a context without the parser-combinators library (might even have something to do with that library?).</p>\n\n<pre><code>fn parse_go_sgf(input: &amp;str) -&gt; Vec&lt;Property&gt; {\n    let alphabetic = |&amp;:| {parser::satisfy(|c| {c.is_alphabetic()})};\n    let prop_value = |&amp;: ident, value_type| {\n        parser::spaces().with(ident).with(parser::spaces()).with(\n            parser::between(\n                parser::satisfy(|c| c == '['),\n                parser::satisfy(|c| c == ']'),\n                value_type\n            )\n        )\n    };\n\n    let pmove = |&amp;:| {\n        alphabetic().and(alphabetic())\n        .map(|a| {to_coord(a.0, a.1)})\n    };\n\n    let pblack = prop_value(\n        parser::string(\"B\"),\n        pmove().map(|m| {Property::Black(m)}) //This is where I am first calling the map function.\n    );\n\n    let pwhite = prop_value(\n        parser::string(\"W\"),\n        pmove().map(|m| {Property::White(m)}) //This is where the compiler complains\n    );\n\n    let pproperty = parser::try(pblack).or(pwhite);\n\n    let mut pnode = parser::spaces()\n        .with(parser::string(\";\"))\n        .with(parser::many(pproperty));\n\n    match pnode.parse(input) {\n        Ok((value, _)) =&gt; value,\n        Err(err) =&gt; {\n            println!(\"{}\",err);\n            vec!(Property::Unkown)\n        }\n    }\n}\n</code></pre>\n\n<p>So I am guessing this has something to do with closures all having different types. But in other cases it seems possible to call the same function with different closures. For example</p>\n\n<pre><code>let greater_than_forty_two = range(0, 100)\n                         .find(|x| *x &gt; 42);\nlet greater_than_forty_three = range(0, 100)\n                         .find(|x| *x &gt; 43);\n</code></pre>\n\n<p>Seems to work just fine.</p>\n\n<p>So what is going on in my case that is different.</p>\n\n<p>Also, as I am just learning, any general comments on the code are also welcome.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422468811, "post_id": 28196869, "comment_id": 44765162, "body": "It looks like the <a href=\"https://github.com/bjz/gl-rs/blob/master/.travis.yml\" rel=\"nofollow noreferrer\">TravisCI config</a> for that project is attempting to upload the docs to rust-ci.org. Perhaps filing a bug with the project would be the best course of action."}], "answers": [{"tags": [], "owner": {"reputation": 11, "user_id": 4503941, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/krhTA.jpg?s=128&g=1", "display_name": "Carl", "link": "https://stackoverflow.com/users/4503941/carl"}, "is_accepted": false, "score": 1, "last_activity_date": 1422464182, "creation_date": 1422464182, "answer_id": 28197971, "question_id": 28196869, "link": "https://stackoverflow.com/questions/28196869/api-docs-for-gl-rs-rust-opengl-bindings/28197971#28197971", "title": "API docs for gl-rs (Rust OpenGL bindings)", "body": "<p>I am not sure if it is official, but this site does seem to have the documentation: <a href=\"http://bvssvni.github.io/docs/gl-rs/gl/\" rel=\"nofollow\">http://bvssvni.github.io/docs/gl-rs/gl/</a></p>\n\n<p>It is likely to be out of date at this point, however, as <a href=\"https://github.com/bvssvni/bvssvni.github.io/commit/ddb2a7d7b8adae05a6a3c8325c630836bc255b2a\" rel=\"nofollow\">this webpage was created in May 2014.</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422475802, "post_id": 28200263, "comment_id": 44769051, "body": "I tried to build the docs, but this project seems to have a more-complex-than-usual build setup. It doesn&#39;t quite come out of the box, as far as I see."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1422559833, "post_id": 28200263, "comment_id": 44808981, "body": "Thus far for me, <code>cargo doc</code> crashes for <code>gl-rs</code>."}], "tags": [], "owner": {"reputation": 77, "user_id": 753988, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0110c10f48ba19d2b93f690db7f2bcf0?s=128&d=identicon&r=PG", "display_name": "Aaron Weiss", "link": "https://stackoverflow.com/users/753988/aaron-weiss"}, "is_accepted": false, "score": 2, "last_activity_date": 1422471605, "creation_date": 1422471605, "answer_id": 28200263, "question_id": 28196869, "link": "https://stackoverflow.com/questions/28196869/api-docs-for-gl-rs-rust-opengl-bindings/28200263#28200263", "title": "API docs for gl-rs (Rust OpenGL bindings)", "body": "<p>It should be uploading the docs to rust-ci, but rust-ci's upload script almost never seems to work. You can, however, pull the project and generate the latest documentation using <code>cargo doc</code>.</p>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1576, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1422471605, "creation_date": 1422461072, "last_edit_date": 1422463023, "question_id": 28196869, "link": "https://stackoverflow.com/questions/28196869/api-docs-for-gl-rs-rust-opengl-bindings", "title": "API docs for gl-rs (Rust OpenGL bindings)", "body": "<p>I'm new to Rust, and I'm using <a href=\"https://github.com/bjz/gl-rs\" rel=\"nofollow\">gl-rs</a>. The <a href=\"http://rust-ci.org/bjz/gl-rs\" rel=\"nofollow\">project's page</a> on rust-ci.org doesn't have a documentation link.</p>\n\n<p>Are the API docs available anywhere? Or, are there certain rules by which I can infer the Rust API based on the C API? In particular, I'd like to know type info for the Rust API. So, for example, how could I look up what the argument types are for <code>gl::TexImage2d</code>?</p>\n"}, {"tags": ["rust", "mutable", "ownership", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422454334, "post_id": 28194335, "comment_id": 44755563, "body": "This is an <i>exact</i> duplicate because both issues have to do with the fact that <code>unwrap</code> <i>consumes</i> the <code>Option</code>."}, {"owner": {"reputation": 83, "user_id": 3738827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8b8797d998406e34467352213660217?s=128&d=identicon&r=PG&f=1", "display_name": "mcdonalda1993", "link": "https://stackoverflow.com/users/3738827/mcdonalda1993"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422455328, "post_id": 28194335, "comment_id": 44756244, "body": "@Shepmaster I tried doing that, but then I get an error telling me I cannot assign to self.parent because it was already borrowed. And using <code>as_mut()</code> on the second error makes it so that I am returning a mutable reference to a mutable reference to the struct which didn&#39;t seem to work either. Even trying to spread this function out to take each part in step didn&#39;t seem to fix it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422455786, "post_id": 28194335, "comment_id": 44756549, "body": "You may also be interested in <a href=\"http://stackoverflow.com/questions/27337939/hand-over-hand-locking-with-rust\">Hand-over-hand locking with Rust</a> where someone was also trying to implement union-find / disjoint-set."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1529415436, "last_edit_date": 1529415436, "creation_date": 1422456600, "answer_id": 28195200, "question_id": 28194335, "link": "https://stackoverflow.com/questions/28194335/cannot-move-out-of-borrowed-content-when-unwrapping-a-member-variable-in-a-mut/28195200#28195200", "title": "cannot move out of borrowed content when unwrapping a member variable in a &amp;mut self method", "body": "<p>This match arm is going to take the enum variant components by value. Since your type isn't copyable, that would mean that the component would be moved out of the original place. This would make your original struct partially undefined - a big no-no in Rust.</p>\n\n<p>To fix that, take a reference instead, as suggested by the compiler:</p>\n\n<pre><code>Some(ref mut p) =&gt;\n</code></pre>\n\n<p>Next up, instead of storing the result in an <code>Option</code> and then immediately taking it back out, try to keep the reference in a variable, put it in the <code>Option</code> and return it:</p>\n\n<pre><code>let z = p.find();\nself.parent = Some(z);\nz\n</code></pre>\n\n<p>This leads to the core problem with the whole idea:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*z` as mutable more than once at a time\n  --&gt; src/main.rs:14:17\n   |\n13 |                 self.parent = Some(z);\n   |                                    - first mutable borrow occurs here\n14 |                 z\n   |                 ^ second mutable borrow occurs here\n15 |             }\n   |             - first borrow ends here\n</code></pre>\n\n<p>You are trying to store a mutable reference <em>and</em> return it. This would mean that there would be multiple concurrent mutable references to the same item (also known as aliasing). Preventing this is <em>another</em> core tenet of Rust's safety systems, because then it's harder for the compiler to guarantee when and where things are being changed.</p>\n\n<p>Check out <a href=\"https://stackoverflow.com/a/47737510/155423\">this answer</a> to see one way of working around that.</p>\n"}, {"tags": [], "owner": {"reputation": 881, "user_id": 4515912, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7902e54050ad7c00ed744dacef47318f?s=128&d=identicon&r=PG", "display_name": "Fr&#233;d&#233;ric Dumont", "link": "https://stackoverflow.com/users/4515912/fr%c3%a9d%c3%a9ric-dumont"}, "is_accepted": false, "score": 3, "last_activity_date": 1529415260, "last_edit_date": 1529415260, "creation_date": 1512898115, "answer_id": 47737510, "question_id": 28194335, "link": "https://stackoverflow.com/questions/28194335/cannot-move-out-of-borrowed-content-when-unwrapping-a-member-variable-in-a-mut/47737510#47737510", "title": "cannot move out of borrowed content when unwrapping a member variable in a &amp;mut self method", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.take\" rel=\"nofollow noreferrer\"><code>Option::take</code></a> as <code>match self.parent.take()</code>, which is a basic idiom in such a context.</p>\n\n<p>The <code>self.parent.unwrap()</code> expression will the cause an error as well; for that you need to work around the fact that <code>unwrap</code> consumes <code>self</code>; you use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut\" rel=\"nofollow noreferrer\"><code>Option::as_mut</code></a> to write <code>self.parent.as_mut().unwrap()</code> to have <code>unwrap</code> consume a reference instead.</p>\n\n<p>The final code would be:</p>\n\n<pre><code>pub struct Set&lt;'a, T: 'a&gt; {\n    rank: u32,\n    value: T,\n    parent: Option&lt;&amp;'a mut Set&lt;'a, T&gt;&gt;,\n}\n\nimpl&lt;'a, T&gt; Set&lt;'a, T&gt; {\n    pub fn find(&amp;'a mut self) -&gt; &amp;'a mut Set&lt;'a, T&gt; {\n        match self.parent.take() {\n            None =&gt; self,\n            Some(p) =&gt; {\n                self.parent = Some(p.find());\n                self.parent.as_mut().unwrap()\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 83, "user_id": 3738827, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b8b8797d998406e34467352213660217?s=128&d=identicon&r=PG&f=1", "display_name": "mcdonalda1993", "link": "https://stackoverflow.com/users/3738827/mcdonalda1993"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3807, "favorite_count": 1, "answer_count": 2, "score": 6, "last_activity_date": 1529415436, "creation_date": 1422454203, "last_edit_date": 1529414787, "question_id": 28194335, "link": "https://stackoverflow.com/questions/28194335/cannot-move-out-of-borrowed-content-when-unwrapping-a-member-variable-in-a-mut", "title": "cannot move out of borrowed content when unwrapping a member variable in a &amp;mut self method", "body": "<p>I was trying to make a Disjoint-Set data structure in Rust. The relevant code is: </p>\n\n<pre><code>pub struct Set&lt;'a, T: 'a&gt; {\n    rank: u32,\n    value: T,\n    parent: Option&lt;&amp;'a mut Set&lt;'a, T&gt;&gt;,\n}\n\nimpl&lt;'a, T&gt; Set&lt;'a, T&gt; {\n    pub fn find(&amp;'a mut self) -&gt; &amp;'a mut Set&lt;'a, T&gt; {\n        match self.parent {\n            None =&gt; self,\n            Some(mut p) =&gt; {\n                self.parent = Some(p.find());\n                self.parent.unwrap()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The errors I get are:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:9:15\n   |\n9  |         match self.parent {\n   |               ^^^^ cannot move out of borrowed content\n10 |             None =&gt; self,\n11 |             Some(mut p) =&gt; {\n   |                  ----- hint: to prevent move, use `ref p` or `ref mut p`\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:13:17\n   |\n13 |                 self.parent.unwrap()\n   |                 ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>I'm not sure I understand the borrow checker fully, but I am using references to avoid taking ownership of structs themselves so that they can be pointed to and reassigned similar to how you would in other languages.</p>\n\n<p>I can avoid these errors by removing the <code>mut</code> from the references in the struct, but then I cannot change the parent of each set because they are immutable.</p>\n\n<p>I have read through similar questions such as:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/23328702/rust-cannot-move-out-of-self-because-it-is-borrowed-error\">Rust: &quot;cannot move out of `self` because it is borrowed&quot; error</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28034646/cant-borrow-file-from-mut-self-error-msg-cannot-move-out-of-borrowed-content\">Can&#39;t borrow File from &amp;mut self (error msg: cannot move out of borrowed content)</a></li>\n</ul>\n\n<p>These aren't helping me work out how to solve this issue. I have also tried restructuring the function <code>find</code> as well as the struct itself to use <code>Rc&lt;RefCell&lt;Set&gt;&gt;</code> and <code>Box&lt;Set&gt;</code> but I always end up at the same error.</p>\n\n<p>What is this error and how do I fix it?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "is_accepted": true, "score": 6, "last_activity_date": 1422452737, "creation_date": 1422452737, "answer_id": 28193823, "question_id": 28193463, "link": "https://stackoverflow.com/questions/28193463/how-to-simplify-parsing-a-text-file-to-a-vector-of-values/28193823#28193823", "title": "How to simplify parsing a text file to a vector of values?", "body": "<p><code>filter_map</code> is what you're looking for:</p>\n\n<pre><code>let data: Vec&lt;u32&gt; = data_str.lines_any().filter_map(|s| s.trim().parse()).collect();\n</code></pre>\n"}], "owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2037, "favorite_count": 0, "accepted_answer_id": 28193823, "answer_count": 1, "score": 3, "last_activity_date": 1422455196, "creation_date": 1422451636, "last_edit_date": 1422455196, "question_id": 28193463, "link": "https://stackoverflow.com/questions/28193463/how-to-simplify-parsing-a-text-file-to-a-vector-of-values", "title": "How to simplify parsing a text file to a vector of values?", "body": "<p>I'm new to Rust and I'm trying to find the most simple and effective way of parsing text file like:</p>\n\n<pre><code>1\n2\n3\n4\n5\n</code></pre>\n\n<p>to a vector of u32 in my code. For now I have a solution for reading a file as string (it's just right from rustbyexample.com, I changed it a little):</p>\n\n<pre><code>let path = Path::new(\"J:/IntegerArray.txt\");\nlet display = path.display();\n\nlet mut file = match File::open(&amp;path)\n{\n    Err(why) =&gt; panic!(\"couldn't open {}: {}\", display, why.desc),\n    Ok(file) =&gt; file,\n};\n\nlet data_str = match file.read_to_string()\n{\n    Err(why) =&gt; panic!(\"couldn't read {}: {}\", display, why.desc),\n    Ok(string) =&gt;\n    {\n        string\n    }\n};\n</code></pre>\n\n<p>Then I parse it:</p>\n\n<pre><code>let mut data : Vec&lt;u32&gt; = vec![];\n\nfor str in data_str.lines_any()\n{\n    data.push(match str.trim().parse() { Some(x) =&gt; x, None =&gt; continue, } );\n}\n</code></pre>\n\n<p>However I think there's a solution where it could be done in one line without a loop, something like:</p>\n\n<pre><code>let mut data : Vec&lt;u32&gt; = data_str.lines_any().&lt;SOME MAGIC&gt;.collect();\n</code></pre>\n\n<p>Maybe it can be done with map and filter, but the main problem is in unwrapping Option to u32, because I can't see how to filter away Nones and unwrap to u32 at the same time. Otherwise, just filtering without unwrapping leads to checking for them again further. Is a one-line solution possible? And will it be an effective solution?</p>\n"}, {"tags": ["caching", "static", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1422451578, "post_id": 28193032, "comment_id": 44753687, "body": "Except, I suppose, that memory leaks at program exit don&#39;t really matter (on most modern OSes). So maybe this does work without extending the C API."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1422458310, "post_id": 28193032, "comment_id": 44758266, "body": "Have you been introduced to <a href=\"http://doc.rust-lang.org/std/sync/struct.Once.html\" rel=\"nofollow noreferrer\"><code>Once</code></a>?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1422460485, "post_id": 28193032, "comment_id": 44759848, "body": "using Once would break the possibility to repeatedly use cachefree and cacheload in arbitrary order and number, but in general it is a much better way to initialize once."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1422546781, "post_id": 28193032, "comment_id": 44801116, "body": "<code>Once</code> would work if I didn&#39;t have to modify my cache more than once."}, {"owner": {"reputation": 6454, "user_id": 248065, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/95fb14ef95ad722e78e25f065c9d8ec6?s=128&d=identicon&r=PG", "display_name": "Thom Wiggers", "link": "https://stackoverflow.com/users/248065/thom-wiggers"}, "edited": false, "score": 0, "creation_date": 1526478698, "post_id": 28193032, "comment_id": 87761413, "body": "You should probably use a Mutex if you want this to be thread-safe; and by now you can use <code>Box::into_raw()</code> to convert the Box into a <code>*mut i32</code>."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 3, "last_activity_date": 1422457507, "last_edit_date": 1422457507, "creation_date": 1422450275, "answer_id": 28193032, "question_id": 28190153, "link": "https://stackoverflow.com/questions/28190153/caching-externally-loaded-data-in-a-static-variable/28193032#28193032", "title": "Caching externally-loaded data in a static variable", "body": "<p>You cannot do the initialization at program start, but you can do it at the first method call. All further calls will access the cached value instead of recomputing your value.</p>\n\n<p>Since rust forbids things with destructors inside static variables, you need to do your own cleanup management. Logically this means you need unsafe code to break rust's safety system. The following example uses a <code>static mut</code> variable to cache a heap allocated object (an <code>i32</code> in this case).\nThe cacheload function works like a Singleton.</p>\n\n<p>Just remember to call cachefree() from c after you are done.</p>\n\n<pre><code>use std::{ptr, mem};\n\nstatic mut cache: *const i32 = 0 as *const i32;\n\nunsafe fn cacheload() -&gt; i32 {\n    if cache == ptr::null() {\n        // do an expensive operation here\n        cache = mem::transmute(Box::new(42));\n    }\n    return *cache;\n}\n\nunsafe fn cachefree() {\n    if cache != ptr::null() {\n        let temp: Box&lt;i32&gt; = mem::transmute(cache);\n        cache = ptr::null();\n        drop(temp);\n    }\n}\n\nfn main() {\n    let x;\n    unsafe {\n        x = cacheload();\n        cachefree();\n    }\n    println!(\"{}\" , x);\n}\n</code></pre>\n"}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 278, "favorite_count": 0, "accepted_answer_id": 28193032, "answer_count": 1, "score": 2, "last_activity_date": 1422457507, "creation_date": 1422441648, "last_edit_date": 1422444249, "question_id": 28190153, "link": "https://stackoverflow.com/questions/28190153/caching-externally-loaded-data-in-a-static-variable", "title": "Caching externally-loaded data in a static variable", "body": "<p>I'd like to load data from a file, then cache this data (including quite large arrays) in a static variable. This obviously is not the preferred way of doing this, but:</p>\n\n<ol>\n<li>I'm writing a Rust library invoked by a C(++) program, and don't currently have any objects which out-live invocation of the Rust functions. Using a static avoids me having to hack up the C code.</li>\n<li>The program doesn't do anything concurrently internally, so synchronisation is not an issue.</li>\n</ol>\n\n<p>How can this be done in Rust?</p>\n\n<p>I have found <a href=\"https://github.com/Kimundi/lazy-static.rs\" rel=\"nofollow\">lazy-static</a> which solves a similar problem, but only for code not requiring external resources (i.e. items which could in theory be evaluated at compile time).</p>\n"}, {"tags": ["testing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 556, "user_id": 284797, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/e60318d54c2437e791539af4df281f25?s=128&d=identicon&r=PG", "display_name": "Zach Smith", "link": "https://stackoverflow.com/users/284797/zach-smith"}, "edited": false, "score": 0, "creation_date": 1422477659, "post_id": 28186509, "comment_id": 44770137, "body": "This seems like it should be the correct way to do this, but when I try it and run <code>cargo test</code> I still get the following errors: <code>error: attempt to implement a nonexistent trait std::cmp::PartialEq</code> and <code>error: failed to resolve. Maybe a missing extern crate std?</code>"}, {"owner": {"reputation": 556, "user_id": 284797, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/e60318d54c2437e791539af4df281f25?s=128&d=identicon&r=PG", "display_name": "Zach Smith", "link": "https://stackoverflow.com/users/284797/zach-smith"}, "edited": false, "score": 0, "creation_date": 1422479226, "post_id": 28186509, "comment_id": 44770938, "body": "Also I should mention that simply removing the <code>#[cfg(test)]</code> line makes everything work."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 556, "user_id": 284797, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/e60318d54c2437e791539af4df281f25?s=128&d=identicon&r=PG", "display_name": "Zach Smith", "link": "https://stackoverflow.com/users/284797/zach-smith"}, "edited": false, "score": 1, "creation_date": 1422487129, "post_id": 28186509, "comment_id": 44774477, "body": "If you make it an unconditional <code>extern crate std;</code> then you&#39;ve kind of lost the whole point of <code>#![no_std]</code>. You should instead provide your own module std in such cases, like this: <code>mod std { pub use core::cmp; }</code>"}, {"owner": {"reputation": 556, "user_id": 284797, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/e60318d54c2437e791539af4df281f25?s=128&d=identicon&r=PG", "display_name": "Zach Smith", "link": "https://stackoverflow.com/users/284797/zach-smith"}, "edited": false, "score": 0, "creation_date": 1422491939, "post_id": 28186509, "comment_id": 44775967, "body": "I figured out what my problem was. In addition to the <code>#[cfg(test)] extern crate std;</code> line, I also needed <code>#[cfg(test)] use std::prelude::*;</code> because prelude was no longer automatically being imported. One more quick question, if you don&#39;t mind: is there a way to still use directives like <code>#[derive(Debug, PartialEq)]</code> with this setup?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 556, "user_id": 284797, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/e60318d54c2437e791539af4df281f25?s=128&d=identicon&r=PG", "display_name": "Zach Smith", "link": "https://stackoverflow.com/users/284797/zach-smith"}, "edited": false, "score": 1, "creation_date": 1422509718, "post_id": 28186509, "comment_id": 44780340, "body": "@ZachSmith: <code>mod std { pub use core::fmt; pub use core::cmp; }</code> &amp;c. &amp;c. will make it work."}, {"owner": {"reputation": 2348, "user_id": 864406, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd625e8a9c68a44bee8185847b7b59b0?s=128&d=identicon&r=PG", "display_name": "Lucretiel", "link": "https://stackoverflow.com/users/864406/lucretiel"}, "edited": false, "score": 0, "creation_date": 1550305884, "post_id": 28186509, "comment_id": 96227127, "body": "Rust 2018 Edition removes <code>extern crate</code>; is there an updated solution?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 2348, "user_id": 864406, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd625e8a9c68a44bee8185847b7b59b0?s=128&d=identicon&r=PG", "display_name": "Lucretiel", "link": "https://stackoverflow.com/users/864406/lucretiel"}, "edited": false, "score": 0, "creation_date": 1550384855, "post_id": 28186509, "comment_id": 96244448, "body": "@Lucretiel: no it doesn\u2019t: it simply makes it <a href=\"https://rust-lang-nursery.github.io/edition-guide/rust-2018/module-system/path-clarity.html#no-more-extern-crate\" rel=\"nofollow noreferrer\">unnecessary in most cases</a>. This solution should still be fine."}, {"owner": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 0, "creation_date": 1571430670, "post_id": 28186509, "comment_id": 103252600, "body": "When doing this, I still get an error for lacking an allocator."}, {"owner": {"reputation": 5513, "user_id": 2718801, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9d4b144cdafa73e1d470362ed8d7c3a9?s=128&d=identicon&r=PG", "display_name": "jhpratt", "link": "https://stackoverflow.com/users/2718801/jhpratt"}, "edited": false, "score": 0, "creation_date": 1571431028, "post_id": 28186509, "comment_id": 103252724, "body": "^^ Looks like <a href=\"https://github.com/rust-lang/rust/issues/54010\" rel=\"nofollow noreferrer\">rust-lang/rust#54010</a>. Unsure why it only sometimes causes an actual error."}, {"owner": {"reputation": 77, "user_id": 6589573, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b1d523f5b8ffb2394cda6f2cc88074c8?s=128&d=identicon&r=PG&f=1", "display_name": "uglyoldbob", "link": "https://stackoverflow.com/users/6589573/uglyoldbob"}, "edited": false, "score": 0, "creation_date": 1596744954, "post_id": 28186509, "comment_id": 111917621, "body": "This does not work for me when I specify <code>#![no_std]</code> in the same file"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 14, "last_activity_date": 1592241393, "last_edit_date": 1592241393, "creation_date": 1422428861, "answer_id": 28186509, "question_id": 28185854, "link": "https://stackoverflow.com/questions/28185854/how-do-i-test-crates-with-no-std/28186509#28186509", "title": "How do I test crates with #![no_std]?", "body": "<pre><code>#[cfg(test)]\n#[macro_use]\nextern crate std;\n</code></pre>\n\n<p>The <code>#[macro_use]</code> part is optional in Rust 2015 and not required in Rust 2018.</p>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 15628105, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-MsfdYJ6W1UA/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclWqsd_T5QJAm3a7TXWqlZUPRkKbw/s96-c/photo.jpg?sz=128", "display_name": "Matthew Meyer", "link": "https://stackoverflow.com/users/15628105/matthew-meyer"}, "is_accepted": false, "score": 0, "last_activity_date": 1618361412, "creation_date": 1618361412, "answer_id": 67084112, "question_id": 28185854, "link": "https://stackoverflow.com/questions/28185854/how-do-i-test-crates-with-no-std/67084112#67084112", "title": "How do I test crates with #![no_std]?", "body": "<p>You can cfg_attr to conditionally set no_std.</p>\n<pre><code>#![cfg_attr(not(test), no_std)]\n</code></pre>\n"}], "owner": {"reputation": 556, "user_id": 284797, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/e60318d54c2437e791539af4df281f25?s=128&d=identicon&r=PG", "display_name": "Zach Smith", "link": "https://stackoverflow.com/users/284797/zach-smith"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2765, "favorite_count": 0, "accepted_answer_id": 28186509, "answer_count": 2, "score": 10, "last_activity_date": 1618361412, "creation_date": 1422425696, "last_edit_date": 1592241336, "question_id": 28185854, "link": "https://stackoverflow.com/questions/28185854/how-do-i-test-crates-with-no-std", "title": "How do I test crates with #![no_std]?", "body": "<p>I'm writing a runtime for a programming language implementation in Rust. I'm planning on linking in this runtime with the compiled code I generate, so to keep the binary small I don't want to rely on <code>std</code>. </p>\n\n<p>When I try to <code>cargo test</code> my runtime, I get errors saying saying that <code>std::slice::AsSlice</code> can't be found, which I found is because some of the test harness requires std library code.</p>\n\n<p>How do I go about testing this code? Is there a way to conditionally include the <code>#![no_std]</code> pragma, i.e. still include the std library while testing? I've also tried creating a separate test crate with the std library included, <code>extern crate</code>ing the runtime crate into it and running my tests there, but that has introduced a whole new set of issues.</p>\n"}, {"tags": ["multithreading", "concurrency", "rust", "channel", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 504, "user_id": 1230227, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a68a876098837259af6af64d5a52c98b?s=128&d=identicon&r=PG", "display_name": "mrak", "link": "https://stackoverflow.com/users/1230227/mrak"}, "edited": false, "score": 0, "creation_date": 1422502658, "post_id": 28186635, "comment_id": 44778560, "body": "Awesome. That made the compiler happy. The <code>Box</code> was my final attempt at saying &quot;give me all the ownership, dangit&quot;. Looks like the <code>mut</code> directives were what I was missing in my arguments"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1422429356, "creation_date": 1422429356, "answer_id": 28186635, "question_id": 28185846, "link": "https://stackoverflow.com/questions/28185846/lifetime-for-passed-in-function-that-is-then-executed-in-a-thread/28186635#28186635", "title": "Lifetime for passed-in function that is then executed in a thread", "body": "<p><code>Thread::spawn</code> requires the function that is given to it to be <code>'static</code>; the closure must thus consume all things that come into it. You have gone taking a reference to <code>self.incoming</code>\u2014a non-static reference. This won\u2019t work; you must move the reader into it. The way to do this is probably to be consuming <code>self</code> in the method <code>pipe</code> rather than taking it by reference:</p>\n\n<pre><code>fn pipe&lt;F: FnOnce(&amp;mut ChanReader, &amp;mut ChanWriter) + Send&gt;(mut self, transform: F) -&gt; Pipe {\n    let (tx, rx) = channel();\n    let reader = ChanReader::new(rx);\n    let mut writer = ChanWriter::new(tx);\n\n    Thread::spawn(move || {\n        transform(&amp;mut self.incoming, &amp;mut writer);\n    });\n\n    Pipe { incoming: reader }\n}\n</code></pre>\n\n<p>Now, <code>self</code> and <code>writer</code> are moved into the spawned thread and everything is dandy.</p>\n\n<p>(For good measure I unboxed your closure as there\u2019s no reason for it to be boxed and changed it to <code>FnOnce</code> for maximal expressiveness.)</p>\n"}], "owner": {"reputation": 504, "user_id": 1230227, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a68a876098837259af6af64d5a52c98b?s=128&d=identicon&r=PG", "display_name": "mrak", "link": "https://stackoverflow.com/users/1230227/mrak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 151, "favorite_count": 0, "accepted_answer_id": 28186635, "answer_count": 1, "score": 1, "last_activity_date": 1422454741, "creation_date": 1422425653, "last_edit_date": 1422454741, "question_id": 28185846, "link": "https://stackoverflow.com/questions/28185846/lifetime-for-passed-in-function-that-is-then-executed-in-a-thread", "title": "Lifetime for passed-in function that is then executed in a thread", "body": "<p>I'm trying to build a simple pipeline-like functionality that executes each stage of the pipeline is separate threads and glues them all together with channel passing.</p>\n\n<pre><code>Pipe::source(buffer)\n     .pipe(|input, output| {...})\n     .pipe(|input, output| {...})\n     .sink(writer)\n</code></pre>\n\n<p>I cannot for the life of me figure out the function signature for the <code>pipe()</code> function. Here's my code:</p>\n\n<pre><code>use std::sync::mpsc::channel;\nuse std::io::{ChanReader,ChanWriter};\nuse std::thread::Thread;\n\nstruct Pipe {\n    incoming: ChanReader\n}\n\nimpl Pipe {\n    fn source(source: &amp;mut Buffer) -&gt; Pipe {\n        let (tx, rx) = channel();\n        let reader = ChanReader::new(rx);\n        let mut writer = ChanWriter::new(tx);\n\n        loop {\n            match source.read_char() {\n                Ok(c) =&gt; writer.write_char(c),\n                Err(_) =&gt; break\n            };\n        };\n\n        Pipe { incoming: reader }\n    }\n\n    fn sink(&amp;mut self, sink: &amp;mut Writer) {\n        loop {\n            match self.incoming.read_char() {\n                Ok(c) =&gt; sink.write_char(c),\n                Err(_) =&gt; break\n            };\n        };\n    }\n\n    fn pipe(&amp;self, transform: Box&lt;Fn(&amp;mut ChanReader, &amp;mut ChanWriter)+Send&gt;) -&gt; Pipe {\n        let (tx, rx) = channel();\n        let reader = ChanReader::new(rx);\n        let mut writer = ChanWriter::new(tx);\n\n        Thread::spawn(move || {\n            transform(&amp;self.incoming, &amp;writer);\n        });\n\n        Pipe { incoming: reader }\n    }\n}\n</code></pre>\n\n<p>And the compiler error:</p>\n\n<pre><code>src/lib.rs:39:28: 41:10 error: cannot infer an appropriate lifetime due to conflicting requirements\nsrc/lib.rs:39         Thread::spawn(move || {\nsrc/lib.rs:40             transform(&amp;self.incoming, &amp;writer);\nsrc/lib.rs:41         });\nsrc/lib.rs:39:9: 39:22 note: first, the lifetime cannot outlive the expression at 39:8...\nsrc/lib.rs:39         Thread::spawn(move || {\n                      ^~~~~~~~~~~~~\nsrc/lib.rs:39:9: 39:22 note: ...so that the declared lifetime parameter bounds are satisfied\nsrc/lib.rs:39         Thread::spawn(move || {\n                      ^~~~~~~~~~~~~\nsrc/lib.rs:39:9: 41:11 note: but, the lifetime must be valid for the call at 39:8...\nsrc/lib.rs:39         Thread::spawn(move || {\nsrc/lib.rs:40             transform(&amp;self.incoming, &amp;writer);\nsrc/lib.rs:41         });\nsrc/lib.rs:39:28: 41:10 note: ...so that argument is valid for the call\nsrc/lib.rs:39         Thread::spawn(move || {\nsrc/lib.rs:40             transform(&amp;self.incoming, &amp;writer);\nsrc/lib.rs:41         });\nsrc/lib.rs:39:9: 39:22 error: declared lifetime bound not satisfied\nsrc/lib.rs:39         Thread::spawn(move || {\n                      ^~~~~~~~~~~~~\nsrc/lib.rs:34:87: 44:6 note: lifetime parameter instantiated with the anonymous lifetime #1 defined on the block at 34:86\nsrc/lib.rs:34     fn pipe(&amp;self, transform: Box&lt;Fn(&amp;mut ChanReader, &amp;mut ChanWriter)+Send&gt;) -&gt; Pipe {\nsrc/lib.rs:35         let (tx, rx) = channel();\nsrc/lib.rs:36         let reader = ChanReader::new(rx);\nsrc/lib.rs:37         let mut writer = ChanWriter::new(tx);\nsrc/lib.rs:38\nsrc/lib.rs:39         Thread::spawn(move || {\n              ...\nnote: but lifetime parameter must outlive the static lifetime\nerror: aborting due to 2 previous errors\nCould not compile `pipes`.\n</code></pre>\n\n<p>I am using <code>1.0.0-dev</code>.</p>\n"}, {"tags": ["multithreading", "synchronization", "thread-safety", "rust"], "answers": [{"comments": [{"owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 0, "creation_date": 1422455057, "post_id": 28184456, "comment_id": 44756075, "body": "I tried this, but I got <code>core::result::Result&lt;i32, Box&lt;core::any::Any + Send&gt;&gt;</code> does not implement any method in scope named <code>unwrap</code>.  I tried to use .ok().unwrap() instead and got more <code>cannot infer an appropriate lifetime due to conflicting requirements.</code>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 1, "last_activity_date": 1422418054, "creation_date": 1422418054, "answer_id": 28184456, "question_id": 28184317, "link": "https://stackoverflow.com/questions/28184317/shipping-stack-data-in-and-out-of-closures/28184456#28184456", "title": "Shipping stack data in and out of closures", "body": "<p><a href=\"http://doc.rust-lang.org/std/thread/struct.Thread.html#method.spawn\" rel=\"nofollow\"><code>Thread::spawn</code></a> is defined thus:</p>\n\n<pre><code>fn spawn&lt;F&gt;(f: F) -&gt; Thread where F: FnOnce(), F: Send + 'static\n</code></pre>\n\n<p>The function you are passing it must own all its data (<code>'static</code> requires this). You, however, are trying to do something with <code>self</code> which is definitely not <code>'static</code>. Remember, Rust cares about safety; threads are not allowed to mess with other threads\u2019 data: you cannot access an object on more than one thread.</p>\n\n<p>What you want is actually easier than what you were trying: use <a href=\"http://doc.rust-lang.org/std/thread/struct.Thread.html#method.scoped\" rel=\"nofollow\"><code>Thread::scoped</code></a>:</p>\n\n<pre><code>impl Foo {\n    fn bar(&amp;self) {\n        let input = 5i32;\n        let output = Thread::scoped(|:| {\n            my_great_c_function(input)\n        }).join().unwrap();\n        println!(\"{}\", input);\n        println!(\"{}\", output);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 44, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1422454767, "creation_date": 1422416965, "last_edit_date": 1422454767, "question_id": 28184317, "link": "https://stackoverflow.com/questions/28184317/shipping-stack-data-in-and-out-of-closures", "title": "Shipping stack data in and out of closures", "body": "<p>I have a C function that for various C reasons can only be called from certain kinds of threads.  I'm trying to call this function from Rust.</p>\n\n<p>The idea that I had was to ship the input data onto the \"right\" thread, call the C function on that thread, and then wait on the thread using a semaphore before shipping its return value back out.</p>\n\n<p>The thread isn't used for concurrency; it's really a rather synchronous execution flow.  It's simply that the C function is persnickety about how it can be used.</p>\n\n<p>This was my attempt:</p>\n\n<pre><code>use std::thread::Thread;\n\nstruct Foo {\n    x: std::sync::Semaphore,\n}\n\n//Not the real C function, of course.\nfn my_great_c_function(i: i32) -&gt; i32 {\n    println!(\"{}\",i);\n    return 12;\n}\n\nimpl Foo {\n    fn bar(&amp;self) {\n        self.x = std::sync::Semaphore::new(0);\n        let input : i32 = 5;\n        let mut output : i32 = 10;\n        Thread::spawn(|:| {\n            //call out to our C function that only likes some threads\n            output = my_great_c_function(input);\n            self.x.release(); //our work is done; the parent thread can continue\n        });\n        self.x.acquire(); //wait for child thread to be done interacting with environment\n        println!(\"{}\",input); //check input\n        println!(\"{}\",output); //check output\n    }\n\n}\n</code></pre>\n\n<p>The Rust compiler outputs a whole page of errors explaining that it <code>cannot infer an appropriate lifetime due to conflicting requirements</code>.  </p>\n\n<p>From what I can piece together I think the compiler is concerned that the closure may outlive the stack frame, and the closure's references to <code>input</code> and <code>output</code> may get blown away while the closure is still using them (this is, I suspect, the meaning of <code>lifetime parameter must outlive the static lifetime</code>).  But in fact, the semaphore is used to keep the stack frame alive until the closure finishes, so that shouldn't happen.</p>\n\n<p>Is there some way to calm the compiler?  Is there a different way to solve this problem?</p>\n"}, {"tags": ["rust", "ffi", "lifetime"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1422415929, "post_id": 28183972, "comment_id": 44737349, "body": "It\u2019d be easier to make comment on this if you gave the full code which you\u2019re wanting to have work. I suspect that Stack Overflow isn\u2019t a good place for figuring this out, either; I recommend you try the Rust IRC channel."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422416188, "post_id": 28183972, "comment_id": 44737419, "body": "As a workaround for your first bug, you may want to go through a reference first. Instead of <code>foo: T = unsafe { *ptr }</code>, try <code>foo: &amp;mut T = unsafe { &amp;mut *ptr }</code> (redundant type annotations added for clarity)."}, {"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 0, "creation_date": 1422417417, "post_id": 28183972, "comment_id": 44737718, "body": "I think I ran into something like this and in my particular case I was able to solve it (and it made sense to) by implementing <code>Copy</code> for the type, which I guess for you would be <code>CassResult</code>."}, {"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1422420671, "post_id": 28183972, "comment_id": 44738618, "body": "Ding ding ding. Shep&#39;s workaround for this ICE is (I believe) the ideal answer, given my predicament. FWIW, the very work-in-progress code is <a href=\"https://github.com/tupshin/cql-ffi-safe\" rel=\"nofollow noreferrer\">github.com/tupshin/cql-ffi-safe</a>"}, {"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1422422044, "post_id": 28183972, "comment_id": 44739031, "body": "or not quite. added an edit."}], "answers": [{"comments": [{"owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "edited": false, "score": 0, "creation_date": 1422473335, "post_id": 28191001, "comment_id": 44767702, "body": "While I&#39;d really like that ICE to be fixed, I do like the streaming iterator idea. I&#39;ll give that a try and accept this answer if it works. tyvm"}], "tags": [], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "is_accepted": false, "score": 0, "last_activity_date": 1422444183, "creation_date": 1422444183, "answer_id": 28191001, "question_id": 28183972, "link": "https://stackoverflow.com/questions/28183972/caught-between-a-lifetime-and-an-ffi-place/28191001#28191001", "title": "Caught between a lifetime and an FFI place", "body": "<p>Only a partial answer: use the <a href=\"https://github.com/emk/rust-streaming/blob/master/src/iter.rs\" rel=\"nofollow\">\"streaming iterator\" trait and macro</a>.</p>\n\n<p>I have had a similar problem making Rust bindings around the C mysql API. The result is code like this, instead of native <code>for</code> syntax:</p>\n\n<pre><code>let query = format!(\"SELECT id_y, value FROM table_x WHERE id = {}\", id_x);\nlet res = try!(db::run_query(&amp;query));\nstreaming_for!( row, res.into_iter(), {\n    let id_y: usize = try!(row.convert::&lt;usize&gt;(0));\n    let value: f64 = try!(row.convert::&lt;f64&gt;(1));\n});\n</code></pre>\n\n<p>Here <code>res</code> holds the result and frees memory on drop. The lifetime of <code>row</code> is tied to <code>res</code>:</p>\n\n<pre><code>/// Res has an attached lifetime to guard an internal pointer.\nstruct Res&lt;'a&gt;{ p: *mut c_void }\n/// Wrapper created by into_iter()\nstruct ResMoveIter&lt;'a&gt;{ res: Res&lt;'a&gt; }\nimpl&lt;'a&gt; /*StreamingIterator&lt;'a, Row&lt;'a&gt;&gt; for*/ ResMoveIter&lt;'a&gt;{\n    /// Get the next row, or None if no more rows\n    pub fn next(&amp;'a mut self) -&gt; Option&lt;Row&lt;'a&gt;&gt;{\n        ...\n    }\n}\n#[unsafe_destructor]\nimpl&lt;'a&gt; Drop for Res&lt;'a&gt;{\n    fn drop(&amp;mut self){\n        ...\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "is_accepted": true, "score": 0, "last_activity_date": 1423106202, "creation_date": 1423106202, "answer_id": 28335592, "question_id": 28183972, "link": "https://stackoverflow.com/questions/28183972/caught-between-a-lifetime-and-an-ffi-place/28335592#28335592", "title": "Caught between a lifetime and an FFI place", "body": "<p>To answer my own question. The only decent answer was a way around the original <a href=\"https://github.com/rust-lang/rust/issues/20801\" rel=\"nofollow\">ICE</a>, but as thepowersgang comments, the correct way to do this now is to use :std::ptr::read, so using that approach, no ICE, and hopefully progress.</p>\n"}], "owner": {"reputation": 1217, "user_id": 881195, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n74Mq.jpg?s=128&g=1", "display_name": "Tupshin Harper", "link": "https://stackoverflow.com/users/881195/tupshin-harper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 284, "favorite_count": 0, "accepted_answer_id": 28335592, "answer_count": 2, "score": 1, "last_activity_date": 1423106202, "creation_date": 1422414747, "last_edit_date": 1422422026, "question_id": 28183972, "link": "https://stackoverflow.com/questions/28183972/caught-between-a-lifetime-and-an-ffi-place", "title": "Caught between a lifetime and an FFI place", "body": "<p>I am caught between two different issues/bugs, and can't come up with a decent solution. Any help would be greatly appreciated</p>\n\n<p>Context, FFI, and calling a lot of C functions, and wrapping C types in rust structs.</p>\n\n<p>The first problem is <a href=\"https://github.com/rust-lang/rust/issues/20801\" rel=\"nofollow\">ICE: this path should not cause illegal move</a>. </p>\n\n<p>This is forcing me to do all my struct-wrapping using &amp; references as in:</p>\n\n<pre><code>pub struct CassResult&lt;'a&gt; {\n    result:&amp;'a cql_ffi::CassResult\n}\n</code></pre>\n\n<p>Instead of the simpler, and preferable:</p>\n\n<pre><code>pub struct CassResult {\n    result:cql_ffi::CassResult\n}\n</code></pre>\n\n<p>Otherwise code like:</p>\n\n<pre><code>pub fn first_row(&amp;self) -&gt; Result&lt;CassRow,CassError&gt; {unsafe{\n    Ok(CassRow{row:*cql_ffi::cass_result_first_row(self.result)})\n}}\n</code></pre>\n\n<p>Will result in:</p>\n\n<pre><code>error: internal compiler error: this path should not cause illegal move\nOk(CassRow{row:*cql_ffi::cass_result_first_row(self.result)})\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>So, I go ahead and wrap everything using lifetime managed references, and all is not-horrible until I try to implement an iterator. At which point I see no way around <a href=\"http://www.reddit.com/r/rust/comments/2lkk4i/concrete_lifetime_vs_bound_lifetime/\" rel=\"nofollow\">this problem</a>.</p>\n\n<pre><code>method next has an incompatible type for trait: expected concrete lifetime, found bound lifetime parameter\n</code></pre>\n\n<p>So given those two conflicting issues, I am totally stuck and can't find any way to implement a proper rust iterator around a FFI iterator-like construct.</p>\n\n<p>Edit: With Shep's suggestion, I get:</p>\n\n<pre><code>pub struct CassResult {\n    pub result:cql_ffi::CassResult\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>pub fn get_result(&amp;mut future:future) -&gt; Option&lt;CassResult&gt; {unsafe{\n    let result:&amp;cql_ffi::CassResult = &amp;*cql_ffi::cass_future_get_result(&amp;mut future.future);\n    Some(CassResult{result:*result})\n}}\n</code></pre>\n\n<p>but then get:</p>\n\n<pre><code>error: cannot move out of borrowed content\nSome(CassResult{result:*result}\n</code></pre>\n\n<p>Is there any way to make that pattern work? It's repeated all over this FFI wrapping code.</p>\n"}, {"tags": ["windows", "gcc", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1422412479, "post_id": 28183497, "comment_id": 44736456, "body": "\u201cnote: ld: cannot find -lglfw3\u201d: I\u2019m presuming this means you need libglfw3 object files or source code handy."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422412746, "post_id": 28183497, "comment_id": 44736511, "body": "What command are you running? I didn&#39;t think that GCC would be required for normal Rust compilation."}, {"owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422412940, "post_id": 28183497, "comment_id": 44736556, "body": "@Shepmaster im running cargo build"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422413629, "post_id": 28183497, "comment_id": 44736735, "body": "I assume that this isn&#39;t just a standard &quot;Hello World&quot;, is it? <a href=\"http://www.glfw.org/docs/latest/\" rel=\"nofollow noreferrer\">GLFW</a> is an OpenGL library. Are you using some extra crates or anything like that? Can you provide us a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>(stackoverflow.com/help/mcve) so we can investigate more?"}, {"owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422414752, "post_id": 28183497, "comment_id": 44737049, "body": "@Shepmaster what&#39;s mcve? and im using gl-rs"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422414827, "post_id": 28183497, "comment_id": 44737057, "body": "@JayHall ugh. My link was mis-formatted in my previous comment:  <a href=\"https://stackoverflow.com/help/mcve\">MCVE</a>"}], "answers": [{"comments": [{"owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "edited": false, "score": 0, "creation_date": 1422416429, "post_id": 28184100, "comment_id": 44737484, "body": "Thanks, it works! The directory you were talking about was in Rust\\bin\\rustlib\\x86_64-pc-windows-gnu . I&#39;m not sure if I was supposed to but i used <a href=\"https://www.youtube.com/watch?v=hC6Axj1MNEQ\" rel=\"nofollow noreferrer\">youtube.com/watch?v=hC6Axj1MNEQ</a> to add libs and stuff to minigw."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "edited": false, "score": 0, "creation_date": 1422416562, "post_id": 28184100, "comment_id": 44737522, "body": "I don&#39;t think you should add project-specific libraries to your global path. In your output in the question, there&#39;s the line <code>&#39;-L&#39; &#39;C:\\Users\\jay\\projects\\hello_world\\bin\\x86_64-pc-windows-gnu&zwnj;&#8203;&#39;</code>. This means that a project-specific directory is already being searched for these libraries; it&#39;s probably much safer to keep things there! What if you wanted multiple versions of this library for different projects?"}, {"owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "edited": false, "score": 0, "creation_date": 1422416824, "post_id": 28184100, "comment_id": 44737592, "body": "Thanks, that makes sense. I need to start taking notes on these kind of things."}, {"owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "edited": false, "score": 0, "creation_date": 1422416962, "post_id": 28184100, "comment_id": 44737626, "body": "Hold up, the bin folder isn&#39;t in my project directory. Just src target and some other files"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "edited": false, "score": 0, "creation_date": 1422417130, "post_id": 28184100, "comment_id": 44737661, "body": "That&#39;s right. Create <code>bin</code> next to <code>src</code> and the <code>x86_64-pc-windows-gnu</code> inside of that."}, {"owner": {"reputation": 16905, "user_id": 1266326, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/dcbc6c3587f5c62e877500ac4061b8b1?s=128&d=identicon&r=PG&f=1", "display_name": "MLProgrammer-CiM", "link": "https://stackoverflow.com/users/1266326/mlprogrammer-cim"}, "edited": false, "score": 0, "creation_date": 1429225951, "post_id": 28184100, "comment_id": 47512085, "body": "Unless you have it in your path, you have to put the dll by the exe too."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1422415491, "creation_date": 1422415491, "answer_id": 28184100, "question_id": 28183497, "link": "https://stackoverflow.com/questions/28183497/gcc-exe-cannot-find-lglfw3-when-using-glfw-rs/28184100#28184100", "title": "gcc.exe cannot find -lglfw3 when using glfw-rs", "body": "<p>Try downloading the <a href=\"http://www.glfw.org/download.html\" rel=\"nofollow\">precompiled GLFW libraries</a>. I copied the files from the <code>lib-mingw</code> directory into my Rust project. On my 32-bit Windows VM, I put them in <code>hello-glfw\\bin\\i686-pc-windows-gnu</code>, but it looks like you want <code>hello_world\\bin\\x86_64-pc-windows-gnu</code>. This allowed me to run the <a href=\"https://github.com/bjz/glfw-rs\" rel=\"nofollow\">example from the glfw-rs README</a>.</p>\n"}], "owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1117, "favorite_count": 1, "accepted_answer_id": 28184100, "answer_count": 1, "score": 2, "last_activity_date": 1422415543, "creation_date": 1422411231, "last_edit_date": 1422415543, "question_id": 28183497, "link": "https://stackoverflow.com/questions/28183497/gcc-exe-cannot-find-lglfw3-when-using-glfw-rs", "title": "gcc.exe cannot find -lglfw3 when using glfw-rs", "body": "<p>I'm running Rust on Windows (probably my first mistake, but i'm not giving up) with mingw. I downloaded 64bit everything and when I build my project I get </p>\n\n<pre><code>error: linking with `gcc` failed: exit code: 1\nnote: gcc '-Wl,--enable-long-section-names' '-fno-use-linker-plugin' '-Wl,--nxcompat' '-static-libgcc' '-m64' '-L' 'C:\\R\nust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib' '-o' 'C:\\Users\\jay\\projects\\hello_world\\target\\hello_world.exe' 'C:\\Users\\jay\n\\projects\\hello_world\\target\\hello_world.o' '-Wl,--gc-sections' 'C:\\Users\\jay\\projects\\hello_world\\target\\deps\\libglfw-5\n007f9fddc425da6.rlib' 'C:\\Users\\jay\\projects\\hello_world\\target\\deps\\libbitflags-57b03d5337bba57b.rlib' 'C:\\Users\\jay\\pr\nojects\\hello_world\\target\\deps\\libsemver-693b3d5412b8e4b9.rlib' 'C:\\Users\\jay\\projects\\hello_world\\target\\deps\\liblog-4e\n79c2d7625e8c6f.rlib' 'C:\\Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\libstd-4e7c5e5c.rlib' 'C:\\Rust\\bin\\rustlib\\x86_64-pc\n-windows-gnu\\lib\\libcollections-4e7c5e5c.rlib' 'C:\\Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\libunicode-4e7c5e5c.rlib'\n'C:\\Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\librand-4e7c5e5c.rlib' 'C:\\Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\lib\nalloc-4e7c5e5c.rlib' 'C:\\Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\liblibc-4e7c5e5c.rlib' 'C:\\Rust\\bin\\rustlib\\x86_64-p\nc-windows-gnu\\lib\\libcore-4e7c5e5c.rlib' '-L' 'C:\\Users\\jay\\projects\\hello_world\\target' '-L' 'C:\\Users\\jay\\projects\\hel\nlo_world\\target\\deps' '-L' 'C:\\Rust\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib' '-L' 'C:\\Users\\jay\\projects\\hello_world\\.rust\n\\bin\\x86_64-pc-windows-gnu' '-L' 'C:\\Users\\jay\\projects\\hello_world\\bin\\x86_64-pc-windows-gnu' '-Wl,--whole-archive' '-W\nl,-Bstatic' '-Wl,--no-whole-archive' '-Wl,-Bdynamic' '-lglfw3' '-lopengl32' '-lgdi32' '-lws2_32' '-lcompiler-rt'\nnote: ld: cannot find -lglfw3\n\n    error: aborting due to previous error\n    Could not compile `hello_world`.\n</code></pre>\n\n<p>(Tried to format it but..?)</p>\n\n<p>I believe the problem is my gcc.exe, it says cannot find input file whenever i run it. Is there a gcc.exe i can replace it with?</p>\n"}, {"tags": ["multithreading", "rust", "semaphore"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422408705, "post_id": 28181869, "comment_id": 44735548, "body": "Would a <a href=\"http://doc.rust-lang.org/std/sync/struct.Condvar.html\" rel=\"nofollow noreferrer\"><code>Condvar</code></a> suit your case?"}, {"owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422469293, "post_id": 28181869, "comment_id": 44765426, "body": "As I understand it, in the case that nobody is waiting, calling Condvar.notify_one() has no effect, while Semaphore.release() will increase the semaphore.  In the case that a thread comes along and waits after the notification is sent, the behavior is different."}, {"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 1, "creation_date": 1422480533, "post_id": 28181869, "comment_id": 44771571, "body": "A <code>Mutex</code> plus a <code>Condvar</code> could satisfy this use case, in fact, that is how <code>Semaphore</code> itself is implemented. Copying the <code>Semaphore</code> code and adding an <code>acquire_with_timeout</code> wouldn&#39;t be too hard."}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 120, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1422400810, "creation_date": 1422400810, "question_id": 28181869, "link": "https://stackoverflow.com/questions/28181869/timeout-for-stdsyncsemaphore", "title": "timeout for std::sync::semaphore", "body": "<p>I have an <code>std::sync::Semaphore</code></p>\n\n<pre><code>pub struct MyStruct {\n    lock: std::sync::Semaphore\n}\n</code></pre>\n\n<p>There is a thread that calls <code>release</code> on the semaphore at some interval to indicate that new items are available in a queue.</p>\n\n<p>Meanwhile, to process items, I want to acquire the semaphore:</p>\n\n<pre><code>myStruct.lock.acquire();\n</code></pre>\n\n<p>But in the case that the acquisition takes a long time, I want to do something else, like return an error code rather than wait for the resource indefinitely.  But this call blocks forever.</p>\n\n<p>How do I set a timeout so that I only wait on the semaphore for a finite amount of time?</p>\n"}, {"tags": ["string", "pattern-matching", "rust"], "answers": [{"tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": true, "score": 6, "last_activity_date": 1422399341, "creation_date": 1422399341, "answer_id": 28181592, "question_id": 28181112, "link": "https://stackoverflow.com/questions/28181112/pattern-matching-a-struct-with-a-string/28181592#28181592", "title": "Pattern matching a struct with a String", "body": "<p><code>match</code> cases may not contain expressions like <code>\"Hi\".to_string()</code>, only constants (e.g. <code>3</code>, <code>\"Hi</code>\") or variables (e.g. <code>x</code>). To match on a <code>String</code> field you will need to use pattern guards:</p>\n\n<pre><code>match a {\n    Foo { x: x, y: y, str: ref str } if str == &amp;\"Hi\" =&gt;\n        println!(\"Found {}, {}\", x, y),\n    _ =&gt; {}\n}\n</code></pre>\n\n<p>The <code>if str == &amp;\"Hi\"</code> is the pattern guard to check the value of the <code>String</code>. Note that the pattern guard forces us to use <code>ref</code> to capture a reference to the <code>String</code>, rather than moving it out of the struct.</p>\n"}], "owner": {"reputation": 2189, "user_id": 1091424, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/W4Xu6.jpg?s=128&g=1", "display_name": "Tiago", "link": "https://stackoverflow.com/users/1091424/tiago"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 0, "accepted_answer_id": 28181592, "answer_count": 1, "score": 1, "last_activity_date": 1569814529, "creation_date": 1422397120, "last_edit_date": 1569814529, "question_id": 28181112, "link": "https://stackoverflow.com/questions/28181112/pattern-matching-a-struct-with-a-string", "title": "Pattern matching a struct with a String", "body": "<p>Is it possible to pattern match a String field? I can't make this code work.</p>\n\n<pre><code>struct Foo {\n    x: int,\n    y: int,\n    str: String\n}\n\npub fn main() {\n    let a = Foo { x: 1, y: 2 , str: \"Hi\".to_string()};\n    match a {\n        Foo { x: x, y: y, str: \"Hi\".to_string() } =&gt; println!(\"Found {}, {}\", x, y),\n        _ =&gt; {}\n    }\n}\n</code></pre>\n\n<p>Gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:10:36: 10:37 error: expected one of `,` or `...`, found `.`\n&lt;anon&gt;:10         Foo { x: x, y: y, str: \"Hi\".to_string() } =&gt; println!(\"Found {}, {}\", x, y),\n                                             ^\n</code></pre>\n"}, {"tags": ["multithreading", "rust", "messaging", "zero-copy"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 2, "last_activity_date": 1422395345, "creation_date": 1422395345, "answer_id": 28180681, "question_id": 28179867, "link": "https://stackoverflow.com/questions/28179867/implementing-move-thread-semantics/28180681#28180681", "title": "Implementing &quot;move&quot; thread semantics", "body": "<p>You get these sort of move semantics automatically, and get achieve light-weight moves by placing large values into a <code>Box</code> (i.e. allocate them on the heap). Using <code>type ConcurrentHashMap&lt;K, V&gt; = Mutex&lt;HashMap&lt;K, V&gt;&gt;;</code> as the threadsafe hashmap (there's various ways this could be improved), one might have:</p>\n\n<pre><code>use std::collections::{HashMap, RingBuf};\nuse std::sync::Mutex;\n\ntype ConcurrentHashMap&lt;K, V&gt; = Mutex&lt;HashMap&lt;K, V&gt;&gt;;\n\nlazy_static! {\n    pub static ref MAP: ConcurrentHashMap&lt;String, RingBuf&lt;String&gt;&gt; = {\n        Mutex::new(HashMap::new())\n    }\n}\n\nfn send(message: String, address: String) {\n    MAP.lock()\n       // find the place this message goes\n       .entry(address)\n       .get()\n       // create a new RingBuf if this address was empty\n       .unwrap_or_else(|v| v.insert(RingBuf::new()))\n       // add the message on the back\n       .push_back(message)\n}\nfn recv(address: &amp;str) -&gt; Option&lt;String&gt; {\n     MAP.lock()\n        .get_mut(address)\n        // pull the message off the front\n        .and_then(|buf| buf.pop_front())\n}\n</code></pre>\n\n<p>That code is using the <a href=\"https://crates.io/crates/lazy_static\" rel=\"nofollow\"><code>lazy_static!</code></a> macro to achieve a global hashmap (it may be better to use a local object that wraps an <code>Arc&lt;ConcurrentHashMap&lt;...&gt;</code>, fwiw, since global state can make reasoning about program behaviour hard). It also uses <code>RingBuf</code> as a queue, so that messages bank up for a given <code>address</code>. If you only wish to support one message at a time, the type could be <code>ConcurrentHashMap&lt;String, String&gt;</code>, <code>send</code> could become <code>MAP.lock().insert(address, message)</code> and <code>recv</code> just <code>MAP.lock().remove(address)</code>.</p>\n\n<p>(NB. I haven't compiled this, so the types may not match up precisely.)</p>\n"}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 79, "favorite_count": 0, "accepted_answer_id": 28180681, "answer_count": 1, "score": 0, "last_activity_date": 1422396556, "creation_date": 1422392267, "last_edit_date": 1495540620, "question_id": 28179867, "link": "https://stackoverflow.com/questions/28179867/implementing-move-thread-semantics", "title": "Implementing &quot;move&quot; thread semantics", "body": "<p>I want to write a function to be called like this:</p>\n\n<pre><code>send(\"message\",\"address\");\n</code></pre>\n\n<p>Where some other thread that is doing</p>\n\n<pre><code>let k = recv(\"address\");\nprintln!(\"{}\",k);\n</code></pre>\n\n<p>sees <code>message</code>.</p>\n\n<p>In particular, the message may be large, and so I'd like \"move\" or \"zero-copy\" semantics for sending the message.  </p>\n\n<p>In C, the solution is something like:</p>\n\n<ol>\n<li>Allocate messages on the heap</li>\n<li>Have a global, threadsafe hashmap that maps \"address\" to some memory location</li>\n<li>Write pointers into the memory location on send, and wake up the receiver using a semaphore</li>\n<li>Read pointers out of the memory location on receive, and wait on a  semaphore to process new messages</li>\n</ol>\n\n<p>But according to another SO question, step #2 \"<a href=\"https://stackoverflow.com/questions/27747785/how-to-create-a-static-mutable-hashmap\">sounds like a bad idea</a>\".  So I'd like to see a more Rust-idiomatic way to approach this problem.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 2, "creation_date": 1422382480, "post_id": 28177149, "comment_id": 44723527, "body": "Can you the result from <code>rustc --version</code> to the question? I couldn&#39;t reproduce your error locally."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1422382863, "post_id": 28177149, "comment_id": 44723722, "body": "This code also compiles <a href=\"http://is.gd/NF4K4w\" rel=\"nofollow noreferrer\">on the playpen</a>. Side note, you should probably remove the <code>return</code> statement to be more idiomatic."}, {"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "edited": false, "score": 0, "creation_date": 1422382899, "post_id": 28177149, "comment_id": 44723745, "body": "rustc 1.0.0-dev (73a25f55a 2015-01-09 20:10:07 +0000)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1422384001, "post_id": 28177149, "comment_id": 44724439, "body": "rust grammar regarding ranges improved since your version."}, {"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "edited": false, "score": 0, "creation_date": 1422384310, "post_id": 28177149, "comment_id": 44724609, "body": "word, I&#39;m currently building master, so I figure that will help."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1422399174, "post_id": 28177149, "comment_id": 44732313, "body": "Do you know about <a href=\"https://crates.io/crates/rlibc\" rel=\"nofollow noreferrer\"><code>rlibc</code></a>? It implements the memory functions <code>core</code> needs. Also, I believe the approach of implementing <code>memcpy</code> naively will cause infinite recursion (a bad interaction between rustc and LLVM), while <code>rlibc</code> is careful to avoid this."}, {"owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "edited": false, "score": 0, "creation_date": 1422473216, "post_id": 28177149, "comment_id": 44767627, "body": "I&#39;m aware, my implementation has feature parity. The bit of code I posted can be found almost unchanged in rlibc. I built master and my builds started working so I think it was just an issue with the version of rust I had."}], "owner": {"reputation": 1010, "user_id": 2067665, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0c86e226759ee03937af84103fd1b1ab?s=128&d=identicon&r=PG", "display_name": "ragingSloth", "link": "https://stackoverflow.com/users/2067665/ragingsloth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 457, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1422382530, "creation_date": 1422382161, "last_edit_date": 1422382530, "question_id": 28177149, "link": "https://stackoverflow.com/questions/28177149/problems-implementing-memcpy", "title": "Problems implementing memcpy", "body": "<p>I'm working on a project that uses <code>libcore</code> and <code>no_std</code>, this requires an implementation of various memory manipulation functions. However, when I try to implement memcpy,</p>\n\n<pre><code>#[no_mangle]\n#[no_stack_check]\npub unsafe extern fn memcpy(dest: *mut u8, src: *const u8, n: usize) -&gt; *mut u8{\n    for i in 0..n {\n        *dest.offset(i as isize) = *src.offset(i as isize);\n    }\n    return dest;\n}\n</code></pre>\n\n<p>I get </p>\n\n<pre><code>error: expected ident, found `*`\n*dest.offset(i as isize) = *src.offset(i as isize);\n^\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422379622, "post_id": 28175681, "comment_id": 44721864, "body": "Hmm. Removing the <code>mut</code> and making the signature <code>v: &amp;Vec&lt;isize&gt;</code> in the second case <i>does</i> allow it to compile."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422379915, "post_id": 28175681, "comment_id": 44722040, "body": "It does. But I&#39;m just trying to understand language mechanics."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422379946, "post_id": 28175681, "comment_id": 44722062, "body": "Oh, I agree it&#39;s odd - I&#39;m just adding information for whoever can help answer ;-)."}, {"owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "edited": false, "score": 0, "creation_date": 1422382652, "post_id": 28175681, "comment_id": 44723620, "body": "This look like a bug to me. The new <code>&amp;v[]</code> form also compiles"}], "answers": [{"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 2, "last_activity_date": 1422390612, "last_edit_date": 1422390612, "creation_date": 1422388471, "answer_id": 28178845, "question_id": 28175681, "link": "https://stackoverflow.com/questions/28175681/why-does-a-reference-not-live-long-enough-in-case-of-as-slice/28178845#28178845", "title": "Why does a reference not live long enough in case of &quot;as_slice&quot;?", "body": "<p>it's a \"bug\" or better a limitation of the <code>AsSlice</code> trait. Since <code>v.as_slice()</code> is now unstable and will probably be removed in favor of <code>&amp;v[]</code> (which already works as intended in your case) I will not open a bug, but I'll try explaining why the current trait does not work to the best of my knowledge.</p>\n\n<p>First, look at the <a href=\"http://doc.rust-lang.org/src/core/slice.rs.html#614-617\" rel=\"nofollow\">definition of the <code>as_slice</code></a> that is invoked in your case.</p>\n\n<pre><code>impl&lt;'a, T, U: ?Sized + AsSlice&lt;T&gt;&gt; AsSlice&lt;T&gt; for &amp;'a mut U {\n    #[inline(always)]\n    fn as_slice(&amp;self) -&gt; &amp;[T] { AsSlice::as_slice(*self) }\n}\n</code></pre>\n\n<p>note that as_slice is actually eliding a new lifetime. If we give it a name (<code>'b</code>) we're actually writing something like:</p>\n\n<pre><code>impl&lt;'a, T, U: ?Sized + AsSlice&lt;T&gt;&gt; AsSlice&lt;T&gt; for &amp;'a mut U {\n    #[inline(always)]\n    fn as_slice&lt;'b&gt;(&amp;'b self) -&gt; &amp;'b [T] { AsSlice::as_slice(*self) }\n}\n</code></pre>\n\n<p>What we would actually want is <code>'b</code> to be the same as <code>'a</code>, but I think there was no way to express this at the time <code>AsSlice</code> was created (now this might be possible with Higher Ranked Trait Bounds). The effect of this is that, when we call <code>as_slice()</code> in your function <code>f</code>, we're returning a fresh lifetime, that can't escape <code>f</code>. This is in fact the error you're getting.</p>\n\n<p>If <code>AsSlice</code> was written now, it would be using associated types and would be able to link lifetimes in the way we want. It would be something similar to this:</p>\n\n<pre><code>pub trait AsSlice2 {\n    type Item;\n    fn as_slice_2(&amp;self) -&gt; &amp; [Self::Item];\n}\n\nimpl&lt;T&gt; AsSlice2 for [T] {\n    type Item = T;\n    fn as_slice_2(&amp;self) -&gt; &amp;[T] { &amp;self[] }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unstable)%5D%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20v%20%3D%20vec!%5B1%2C2%2C3%5D%3B%0A%20%20%20%20let%20a%20%3D%20f(%26mut%20v)%3B%0A%20%20%20%20%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20a)%3B%0A%7D%0A%0Afn%20f(a%3A%20%26mut%20Vec%3Cisize%3E)%20-%3E%20%26%5Bisize%5D%20%7B%20a.as_slice_2()%20%7D%20%0A%0Apub%20trait%20AsSlice2%20%7B%0A%20%20%20%20type%20Item%3B%0A%20%20%20%20fn%20as_slice_2(%26self)%20-%3E%20%26%20%5BSelf%3A%3AItem%5D%3B%0A%7D%0A%0Aimpl%3CT%3E%20AsSlice2%20for%20%5BT%5D%20%7B%0A%20%20%20%20type%20Item%20%3D%20T%3B%0A%20%20%20%20fn%20as_slice_2(%26self)%20-%3E%20%26%5BT%5D%20%7B%20%26self%5B%5D%20%7D%0A%7D%0A\" rel=\"nofollow\">playpen</a></p>\n\n<p>This is similar to how as_mut_slice is currently implemented (that's why that one works)</p>\n"}], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 1, "accepted_answer_id": 28178845, "answer_count": 1, "score": 5, "last_activity_date": 1422390612, "creation_date": 1422377364, "question_id": 28175681, "link": "https://stackoverflow.com/questions/28175681/why-does-a-reference-not-live-long-enough-in-case-of-as-slice", "title": "Why does a reference not live long enough in case of &quot;as_slice&quot;?", "body": "<p>I cannot figure out why this code compiles:</p>\n\n<pre><code>fn f(v: &amp;mut Vec&lt;isize&gt;) -&gt; &amp;[isize] {\n    v.as_mut_slice()\n}\n</code></pre>\n\n<p>and this does not:</p>\n\n<pre><code>fn f(v: &amp;mut Vec&lt;isize&gt;) -&gt; &amp;[isize] {\n    v.as_slice()\n}\n</code></pre>\n\n<p>producing:</p>\n\n<pre><code>&lt;anon&gt;:2:5: 2:6 error: `v` does not live long enough\n&lt;anon&gt;:2     v.as_slice()\n             ^\n&lt;anon&gt;:1:38: 3:2 note: reference must be valid for the anonymous lifetime #1 defined on the block at 1:37...\n&lt;anon&gt;:1 fn f(v: &amp;mut Vec&lt;isize&gt;) -&gt; &amp;[isize] {\n&lt;anon&gt;:2     v.as_slice()\n&lt;anon&gt;:3 }\n&lt;anon&gt;:1:38: 3:2 note: ...but borrowed value is only valid for the block at 1:37\n&lt;anon&gt;:1 fn f(v: &amp;mut Vec&lt;isize&gt;) -&gt; &amp;[isize] {\n&lt;anon&gt;:2     v.as_slice()\n&lt;anon&gt;:3 }\n</code></pre>\n\n<p>If I understand correctly, in either case function signature is same, and return value lifetime is equal to the input parameter one. So why \"as_slice\" does not work?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1596465977, "last_edit_date": 1596465977, "creation_date": 1422377616, "answer_id": 28175750, "question_id": 28175528, "link": "https://stackoverflow.com/questions/28175528/getting-the-error-the-trait-sized-is-not-implemented-when-trying-to-return-a-v/28175750#28175750", "title": "Getting the error &quot;the trait Sized is not implemented&quot; when trying to return a value from a vector", "body": "<p>The compiler is telling you that it is impossible to return a <code>[T]</code>.</p>\n<p>Rust has owned vectors (<code>Vec&lt;T&gt;</code>), slices (<code>&amp;[T]</code>) and fixed-size arrays (<code>[T; N]</code>, where <code>N</code> is a non-negative integer like <code>6</code>).</p>\n<p>A slice is composed of a pointer to data and a length. This is what your <code>left</code> and <code>right</code> values are. However, what <em>isn't</em> specified in a slice is who ultimately <strong>owns the data</strong>. Slices just borrow data from something else. You can treat the <code>&amp;</code> as a signal that the data is borrowed.</p>\n<p>A <code>Vec</code> is one thing that owns data and can let other things borrow it via a slice. For your problem, you need to allocate some memory to store the values, and <code>Vec</code> does that for you. You can then return the entire <code>Vec</code>, transferring ownership to the caller.</p>\n<p>The specific error message means that the compiler doesn't know how much space to allocate for the type <code>[i32]</code>, because it's never meant to be allocated directly. You'll see this error for other things in Rust, usually when you try to dereference a <em>trait object</em>, but that's distinctly different from the case here.</p>\n<p>Here's the most likely fix you want:</p>\n<pre><code>fn merge(left: &amp;[i32], right: &amp;[i32]) -&gt; Vec&lt;i32&gt; {\n    let mut merged = Vec::new();\n    // push elements to merged\n    merged\n}\n</code></pre>\n<p>Additionally, you don't need to specify lifetimes here, and I removed the redundant type annotation on your <code>merged</code> declaration.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a></li>\n<li><a href=\"https://stackoverflow.com/q/54673145/155423\">Why can fixed-size arrays be on the stack, but str cannot?</a></li>\n<li><a href=\"https://stackoverflow.com/q/36057645/155423\">Why is `let ref a: Trait = Struct` forbidden?</a></li>\n</ul>\n"}], "owner": {"reputation": 93, "user_id": 4499569, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b409d8c2522cf7525b09d09e1b74e532?s=128&d=identicon&r=PG&f=1", "display_name": "jogleul", "link": "https://stackoverflow.com/users/4499569/jogleul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2295, "favorite_count": 3, "accepted_answer_id": 28175750, "answer_count": 1, "score": 9, "last_activity_date": 1596465977, "creation_date": 1422376912, "last_edit_date": 1596465884, "question_id": 28175528, "link": "https://stackoverflow.com/questions/28175528/getting-the-error-the-trait-sized-is-not-implemented-when-trying-to-return-a-v", "title": "Getting the error &quot;the trait Sized is not implemented&quot; when trying to return a value from a vector", "body": "<p>I am trying to return the values of a vector:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn merge&lt;'a&gt;(left: &amp;'a [i32], right: &amp;'a [i32]) -&gt; [i32] {\n    let mut merged: Vec&lt;i32&gt; = Vec::new();\n    // push elements to merged\n    *merged\n}\n</code></pre>\n<p>I get the error message:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n --&gt; src/lib.rs:1:52\n  |\n1 | fn merge&lt;'a&gt;(left: &amp;'a [i32], right: &amp;'a [i32]) -&gt; [i32] {\n  |                                                    ^^^^^ doesn't have a size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n  = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n  = note: the return type of a function must have a statically known size\n</code></pre>\n<p>I can't find out how to fix this.</p>\n"}, {"tags": ["rust", "ffi", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422374680, "post_id": 28174681, "comment_id": 44718621, "body": "Have you already been introduced to the <a href=\"http://doc.rust-lang.org/std/marker/struct.ContravariantLifetime.html\" rel=\"nofollow noreferrer\"><code>ContravariantLifetime</code></a> marker?"}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422377102, "post_id": 28174681, "comment_id": 44720202, "body": "That looks interesting, but I have no idea how to apply it.  My compulsion is to use heap&#39;s lifetime and attach it to handle, but in all the examples I&#39;ve seen you can only attach lifetimes to references (and handle is not a reference.)"}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422378461, "post_id": 28174681, "comment_id": 44721103, "body": "I&#39;ve got some leads.  At least part of the story is here: <a href=\"https://botbot.me/mozilla/rust/2015-01-18/?page=1\" rel=\"nofollow noreferrer\">botbot.me/mozilla/rust/2015-01-18/?page=1</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1422381576, "post_id": 28176203, "comment_id": 44722990, "body": "Fantastic!  The one thing that still looks weird to me is the creation of Handle in wrap_handle.  Why does the marker value have to be specified and what does it mean?  Is there really a choice of putting anything other than &quot;marker: ContravariantLifetime&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1422381756, "post_id": 28176203, "comment_id": 44723108, "body": "You have to put a value because that&#39;s the way Rust works - all fields need to be specified at construction to ensure that the struct is always in a valid state. In this example, you can only put a <code>ContravariantLifetime</code> (because that&#39;s what the field type is), but there are other options. I&#39;ll add a small bit about those to the answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1432686454, "last_edit_date": 1432686454, "creation_date": 1422379194, "answer_id": 28176203, "question_id": 28174681, "link": "https://stackoverflow.com/questions/28174681/adding-lifetime-constraints-to-non-reference-types/28176203#28176203", "title": "Adding lifetime constraints to non-reference types", "body": "<p><strong>Rust 1.0</strong></p>\n\n<p>The various marker types have been unified into one: <a href=\"http://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow\"><code>PhantomData</code></a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ptr;\nuse std::marker::PhantomData;\n\nstruct Heap {\n    ptr: *const u8,\n}\n\nimpl Heap {\n    fn new(c_ptr: *const u8) -&gt; Heap {\n        Heap {\n            ptr: c_ptr\n        }\n    }\n\n    fn wrap_handle&lt;'a&gt;(&amp;'a self, c_handle: *const u8) -&gt; Handle&lt;'a&gt; {\n        Handle {\n            ptr: c_handle,\n            marker: PhantomData,\n        }\n    }\n}\n\nstruct Handle&lt;'a&gt; {\n    ptr: *const u8,\n    marker: PhantomData&lt;&amp;'a ()&gt;, \n}\n\nfn main() {\n    let longer_heap = Heap::new(ptr::null());\n\n    let handle = {\n        let shorter_heap = Heap::new(ptr::null());\n\n        let longer_handle = longer_heap.wrap_handle(ptr::null());\n        let shorter_handle = shorter_heap.wrap_handle(ptr::null());\n\n        // longer_handle // ok to return\n        // shorter_handle // error: `shorter_heap` does not live long enough\n    };\n}\n</code></pre>\n\n<p><strong>Original Answer</strong></p>\n\n<p>Here's an example of using <a href=\"http://doc.rust-lang.org/std/marker/struct.ContravariantLifetime.html\" rel=\"nofollow\"><code>ContravariantLifetime</code></a>. We wrap the raw heap pointer into a struct and then wrap raw handle pointers in another struct, reusing the lifetime of the heap.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ptr;\nuse std::marker::ContravariantLifetime;\n\nstruct Heap {\n    ptr: *const u8,\n}\n\nimpl Heap {\n    fn new(c_ptr: *const u8) -&gt; Heap {\n        Heap {\n            ptr: c_ptr\n        }\n    }\n\n    fn wrap_handle&lt;'a&gt;(&amp;'a self, c_handle: *const u8) -&gt; Handle&lt;'a&gt; {\n        Handle {\n            ptr: c_handle,\n            marker: ContravariantLifetime,\n        }\n    }\n}\n\nstruct Handle&lt;'a&gt; {\n    ptr: *const u8,\n    marker: ContravariantLifetime&lt;'a&gt;,\n}\n\nfn main() {\n    let longer_heap = Heap::new(ptr::null());\n\n    let handle = {\n        let shorter_heap = Heap::new(ptr::null());\n\n        let longer_handle = longer_heap.wrap_handle(ptr::null());\n        let shorter_handle = shorter_heap.wrap_handle(ptr::null());\n\n        // longer_handle // ok to return\n        // shorter_handle // error: `shorter_heap` does not live long enough\n    };\n}\n</code></pre>\n\n<h3>Lifetime markers</h3>\n\n<p>There are 3 lifetime markers. I won't attempt to replicate the reasonably good but dense documentation here, but can also point out the dense <a href=\"http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)\" rel=\"nofollow\">Wikipedia</a> page, which might be some small assistance. I've listed them in the order that you are most likely to use them:</p>\n\n<ul>\n<li><a href=\"http://doc.rust-lang.org/std/marker/struct.ContravariantLifetime.html\" rel=\"nofollow\"><code>ContravariantLifetime</code></a></li>\n<li><a href=\"http://doc.rust-lang.org/std/marker/struct.InvariantLifetime.html\" rel=\"nofollow\"><code>InvariantLifetime</code></a></li>\n<li><a href=\"http://doc.rust-lang.org/std/marker/struct.CovariantLifetime.html\" rel=\"nofollow\"><code>CovariantLifetime</code></a></li>\n</ul>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1022, "favorite_count": 0, "accepted_answer_id": 28176203, "answer_count": 1, "score": 1, "last_activity_date": 1432686454, "creation_date": 1422374342, "last_edit_date": 1422381615, "question_id": 28174681, "link": "https://stackoverflow.com/questions/28174681/adding-lifetime-constraints-to-non-reference-types", "title": "Adding lifetime constraints to non-reference types", "body": "<p>I am trying to figure out how to apply Rust lifetimes to add some compile-time enforcement to Erlang NIF modules.  NIF modules are shared libraries normally written in C that provide extensions.</p>\n\n<p>A simplified prototype of the callback you would write in C looks like this:</p>\n\n<pre><code>Handle my_nif_function(Heap *heap, Handle handle);\n</code></pre>\n\n<p>You are provided a handle and a pointer to the heap that owns it.  In your callback you may inspect the input handle, create more handles on the heap, and return one of them as the function return.  The heap and all its handles become invalid after your callback returns, so you must not store copies of the heap or its handles during the callback.  Unfortunately I\u2019ve seen people do exactly this and it eventually results in a mysterious emulator crash.  Can Rust enforce these lifetime constraints?</p>\n\n<p>I <em>think</em> the heap can be easily managed by turning it into a reference.</p>\n\n<pre><code>fn my_nif_function(heap: &amp;Heap, handle: Handle) -&gt; Handle\n</code></pre>\n\n<p>But how can I link the lifetime of the input and output handles to the heap?</p>\n\n<p>Another wrinkle to this is that you can also create your own heaps and handles which <em>are</em> allowed to live outside the scope of a callback invocation. In C++ I would use <code>std::unique_ptr</code> with a custom destructor.  What is the Rust equivalent?  The [simplified] C API for managing heaps looks like this:</p>\n\n<pre><code>Heap *create_heap();\nvoid destroy_heap(Heap *);\n</code></pre>\n\n<p>Reference: NIFs are described here: <a href=\"http://www.erlang.org/doc/man/erl_nif.html\" rel=\"nofollow\">http://www.erlang.org/doc/man/erl_nif.html</a> .  The Erlang names for \"heaps\" and \"handles\" are \"environments\" and \"terms\".  I used the names \"heaps\" and \"handles\" so that the question would be more broadly understood.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1447979198, "post_id": 28174466, "comment_id": 55399564, "body": "As of Rust 1.4, the code in the question works fine."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1422373748, "creation_date": 1422373748, "answer_id": 28174466, "question_id": 28174144, "link": "https://stackoverflow.com/questions/28174144/traits-with-associated-type-in-templates/28174466#28174466", "title": "Traits with associated type in templates", "body": "<p>Unfortunately, you need to write this:</p>\n\n<pre><code>fn get_int&lt;'a, T: Foo&lt;'a, Bar=I&gt;, I: Iterator&lt;Item=&amp;'a usize&gt;&gt;(t: T) -&gt; usize {\n  t.make()\n}\n</code></pre>\n\n<p>That is, you have to specify explicitly that the type of <code>Bar</code> is an iterator of the corresponding type. The trait bound inside the trait definition alone is insufficient.</p>\n\n<p>This is very much like regular type parameters work. Even if you write something like</p>\n\n<pre><code>trait Parameterized&lt;T: Clone&gt; { ... }\n</code></pre>\n\n<p>You still need to write</p>\n\n<pre><code>fn do_something&lt;P: Parameterized&lt;T&gt;, T: Clone&gt;() { ... }\n</code></pre>\n\n<p>Or with structs:</p>\n\n<pre><code>struct S&lt;T: Iterator&lt;i32&gt;&gt; { ... }\n\nimpl&lt;T: Iterator&lt;i32&gt;&gt; for S&lt;T&gt; { ... }\n</code></pre>\n\n<p>This does look counterintuitive (and I've stumbled upon this several times as well) and probably deserves an issue in <a href=\"https://github.com/rust-lang/rfcs\">RFC</a> repo.</p>\n"}], "owner": {"reputation": 297, "user_id": 3420332, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e9514be1f2c0b2817b530e0c2de6c4fa?s=128&d=identicon&r=PG", "display_name": "yggie", "link": "https://stackoverflow.com/users/3420332/yggie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 314, "favorite_count": 0, "accepted_answer_id": 28174466, "answer_count": 1, "score": 3, "last_activity_date": 1447908721, "creation_date": 1422372818, "last_edit_date": 1447908721, "question_id": 28174144, "link": "https://stackoverflow.com/questions/28174144/traits-with-associated-type-in-templates", "title": "Traits with associated type in templates", "body": "<p>I have been having problems compiling my Rust code, I managed to boil down the issue to this snippet:</p>\n\n<pre><code>use std::slice::Iter;\n\npub trait Foo&lt;'a&gt; {\n    type Bar: Iterator&lt;Item=&amp;'a usize&gt;;\n\n    fn make(&amp;self) -&gt; usize;\n}\n\npub struct Juice;\n\nimpl &lt;'a&gt; Foo&lt;'a&gt; for Juice {\n    type Bar = Iter&lt;'a, usize&gt;;\n\n    fn make(&amp;self) -&gt; usize { 0us }\n}\n\n\n// Uncomment this line to break things\n// fn get_int&lt;'a, T: Foo&lt;'a&gt;&gt;(t: T) -&gt; usize {\n//   t.make()\n// }\n\n\nfn main() {\n    println!(\"Hello, {:?} world!\" , Juice.make());\n}\n</code></pre>\n\n<p>I am pretty sure I am just missing something, is there anything I need to do to make this trait work? I am using the latest nightly alpha build (at the time of writing):</p>\n\n<pre><code>rustc 1.0.0-nightly (458a6a2f6 2015-01-25 21:20:37 +0000)\n</code></pre>\n"}, {"tags": ["character-encoding", "rust", "iso-8859-1"], "comments": [{"owner": {"reputation": 4503, "user_id": 98460, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/bCJzr.jpg?s=128&g=1", "display_name": "OderWat", "link": "https://stackoverflow.com/users/98460/oderwat"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1422360873, "post_id": 28169745, "comment_id": 44709850, "body": "Well with Rust it is a bit hard to tell what is a &quot;standard library&quot; and what is not as this may change on a daily basis :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1422361528, "post_id": 28169745, "comment_id": 44710220, "body": "True enough, in this case however I could see the people concerned by binary size cringing at the idea of embedding a conversion algorithm to and fro every single known character encoding."}], "answers": [{"comments": [{"owner": {"reputation": 4503, "user_id": 98460, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/bCJzr.jpg?s=128&g=1", "display_name": "OderWat", "link": "https://stackoverflow.com/users/98460/oderwat"}, "edited": false, "score": 0, "creation_date": 1422365498, "post_id": 28170747, "comment_id": 44712565, "body": "Yeah... This is what we use already. I just wanted to double-check if we made any oversight in the current standard library. I also know that there is something going on with the IO overhaul. But as far as I read this discussion does not involve other Encodings beside UNICODE representations."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 4503, "user_id": 98460, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/bCJzr.jpg?s=128&g=1", "display_name": "OderWat", "link": "https://stackoverflow.com/users/98460/oderwat"}, "edited": false, "score": 0, "creation_date": 1422365677, "post_id": 28170747, "comment_id": 44712665, "body": "No, I don&#39;t think that encodings are a part of I/O reimplementation. Moreover, AFAIK it is kinda hard to obtain streaming decoders/encoders like Java&#39;s <code>InputStreamReader</code>/<code>OutputStreamWriter</code> with rust-encoding, so there is definitely a room for improvement."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 6, "last_activity_date": 1422362387, "creation_date": 1422362387, "answer_id": 28170747, "question_id": 28169745, "link": "https://stackoverflow.com/questions/28169745/what-are-the-options-to-convert-iso-8859-1-latin-1-to-a-string-utf-8/28170747#28170747", "title": "What are the options to convert ISO-8859-1 / Latin-1 to a String (UTF-8)?", "body": "<p>Standard library does not have any API to deal with encodings. Encodings, like date and time, are difficult to do right and need a lot of work, so they are not present in the <code>std</code>.</p>\n\n<p><em>The</em> crate to deal with encodings as of now is <a href=\"https://github.com/lifthrasiir/rust-encoding\" rel=\"noreferrer\">rust-encoding</a>. You will almost certainly find everything you need there.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1422384943, "post_id": 28175593, "comment_id": 44724930, "body": "Since I got tripped up by this, be aware that &quot;only codepoints 0 - 127 are encoded identically; code points 128 - 255 differ by becoming 2-byte sequence with UTF-8 whereas they are single bytes with Latin-1&quot; (<a href=\"http://stackoverflow.com/a/7048780/155423\">source</a>). This means you can&#39;t simply reinterpret a slice of <code>u8</code> in ISO-8859-1 as UTF-8."}, {"owner": {"reputation": 4503, "user_id": 98460, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/bCJzr.jpg?s=128&g=1", "display_name": "OderWat", "link": "https://stackoverflow.com/users/98460/oderwat"}, "edited": false, "score": 2, "creation_date": 1422717179, "post_id": 28175593, "comment_id": 44864937, "body": "Yes, &quot;encoded into UTF-8&quot; but the codepoints themselves are identical. This is what makes his answer the perfect solution for encoding ISO-8859-1 to UTF-8. It is just as simple as converting every ISO-8859-1 byte to char using &quot;as char&quot;. My special case deals with ISO-8859-15 which just means that we have to convert some few chars differently."}], "tags": [], "owner": {"reputation": 9735, "user_id": 112053, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/lObNt.jpg?s=128&g=1", "display_name": "barjak", "link": "https://stackoverflow.com/users/112053/barjak"}, "is_accepted": true, "score": 10, "last_activity_date": 1480284148, "last_edit_date": 1480284148, "creation_date": 1422377098, "answer_id": 28175593, "question_id": 28169745, "link": "https://stackoverflow.com/questions/28169745/what-are-the-options-to-convert-iso-8859-1-latin-1-to-a-string-utf-8/28175593#28175593", "title": "What are the options to convert ISO-8859-1 / Latin-1 to a String (UTF-8)?", "body": "<p>Strings in Rust are unicode (UTF-8), and unicode codepoints are a superset of iso-8859-1 characters. This specific conversion is actually trivial.</p>\n\n<pre><code>fn latin1_to_string(s: &amp;[u8]) -&gt; String {\n    s.iter().map(|&amp;c| c as char).collect()\n}\n</code></pre>\n\n<p>We interpret each byte as a unicode codepoint and then build a String from these codepoints.</p>\n"}], "owner": {"reputation": 4503, "user_id": 98460, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/bCJzr.jpg?s=128&g=1", "display_name": "OderWat", "link": "https://stackoverflow.com/users/98460/oderwat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3266, "favorite_count": 2, "accepted_answer_id": 28175593, "answer_count": 2, "score": 7, "last_activity_date": 1546946694, "creation_date": 1422359191, "last_edit_date": 1546946694, "question_id": 28169745, "link": "https://stackoverflow.com/questions/28169745/what-are-the-options-to-convert-iso-8859-1-latin-1-to-a-string-utf-8", "title": "What are the options to convert ISO-8859-1 / Latin-1 to a String (UTF-8)?", "body": "<p>I scanned the Rust documentation for some way to convert between character encodings but did not find anything. Did I miss something?</p>\n\n<p>Is it supported (directly or indirectly) by the Rust language and its standard libraries or even planned to be in the near future?</p>\n\n<p>As one of the answers suggested that there is an easy solution because <code>u8</code> can be cast to (Unicode) <code>char</code>s. With Unicode being a superset of the codepoints in ISO-8859-1, thats a 1:1 mapping which encodes to multiple bytes in UTF-8 which is the internal encoding of <code>String</code>s in Rust.</p>\n\n<pre><code>fn main() {\n    println!(\"{}\", 196u8 as char);\n    println!(\"{}\", (196u8 as char) as u8);\n    println!(\"{}\", '\u00c4' as u8);\n    println!(\"{:?}\", '\u00c4'.to_string().as_bytes());\n    println!(\"{:?}\", \"\u00c4\".as_bytes());\n    println!(\"{}\",'\u00c4' == 196u8 as char);\n}\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>\u00c4\n196\n196\n[195, 132]\n[195, 132]\ntrue\n</code></pre>\n\n<p>Which I had not even considered to work!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422365015, "post_id": 28165090, "comment_id": 44712252, "body": "I&#39;m curious what you want to do in the iterates. Both your examples use <code>map</code>, which is designed to transform an item. Throwing away that result means that the entire iterator was useless."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422374412, "post_id": 28165090, "comment_id": 44718416, "body": "For some reason I felt like not using a for loop anymore. Don&#39;t ask me why, maybe this question is relatively useless."}], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422345597, "post_id": 28165474, "comment_id": 44701708, "body": "I agree, it does look better, and maybe this is why there is no consuming iterator yet. It might make those blinded by iterators rethink their particular use-case."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1422344522, "creation_date": 1422344522, "answer_id": 28165474, "question_id": 28165090, "link": "https://stackoverflow.com/questions/28165090/is-there-a-zero-overhead-consuming-iterator/28165474#28165474", "title": "Is there a zero-overhead consuming iterator?", "body": "<p>No, Rust does not have this.</p>\n\n<p>There <a href=\"http://www.reddit.com/r/rust/comments/2s5jjs/does_having_foreach_implemented_for_iterators/\" rel=\"noreferrer\">were</a> <a href=\"http://discuss.rust-lang.org/t/add-foreach-method-to-iterators-for-side-effects/1312\" rel=\"noreferrer\">several</a> discussions and even <a href=\"https://github.com/rust-lang/rfcs/pull/582\" rel=\"noreferrer\">an RFC</a> about having a <code>for_each()</code> operation on iterators which will execute a closure for each element of an iterator, consuming it, but nothing is there yet.</p>\n\n<p>Consider using <code>for</code> loop instead:</p>\n\n<pre><code>for x in myvec.iter() {\n    some_operation(x);\n}\n</code></pre>\n\n<p>In this particular case it does look better than iterator operations.</p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 7, "last_activity_date": 1521769489, "last_edit_date": 1521769489, "creation_date": 1507044712, "answer_id": 46548274, "question_id": 28165090, "link": "https://stackoverflow.com/questions/28165090/is-there-a-zero-overhead-consuming-iterator/46548274#46548274", "title": "Is there a zero-overhead consuming iterator?", "body": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.for_each\" rel=\"noreferrer\"><code>Iterator::for_each</code></a> does what you want:</p>\n\n<pre><code>struct Int(i32);\n\nimpl Int {\n    fn print(&amp;self) {\n        println!(\"{}\", self.0)\n    }\n}\n\nfn main() {\n    [Int(1), Int(2), Int(3)].into_iter().for_each(Int::print);\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1597, "favorite_count": 0, "accepted_answer_id": 28165474, "answer_count": 2, "score": 5, "last_activity_date": 1521769489, "creation_date": 1422342764, "last_edit_date": 1507045617, "question_id": 28165090, "link": "https://stackoverflow.com/questions/28165090/is-there-a-zero-overhead-consuming-iterator", "title": "Is there a zero-overhead consuming iterator?", "body": "<p>I often find myself writing code like:</p>\n\n<pre><code>myvec.iter().map(|x| some_operation(x)).count()\n</code></pre>\n\n<p>The invocation of <code>count</code> triggers the iterator chain to be consumed, but also produces as non-unit result which is undesired.</p>\n\n<p>I am looking for something like </p>\n\n<pre><code>myvec.iter().map(|x| some_operation(x)).consume()\n</code></pre>\n\n<p>which should be equivalent to</p>\n\n<pre><code>for _ in myvec.iter().map(|x| some_operation(x)) {}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1422339858, "post_id": 28164326, "comment_id": 44699478, "body": "1), 2), 3) - it can be if I handle those cases in the code."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 2, "last_activity_date": 1422339942, "last_edit_date": 1422339942, "creation_date": 1422339283, "answer_id": 28164326, "question_id": 28163904, "link": "https://stackoverflow.com/questions/28163904/make-an-argument-of-type-btreemap-optional/28164326#28164326", "title": "Make an argument of type BTreeMap optional", "body": "<p>Your question is highly abstract and really can\u2019t be answered without reference to a concrete example. A lot depends on the desired semantics, frankly.</p>\n\n<p>Some questions you may wish to consider:</p>\n\n<ul>\n<li>Does it make sense to be passing it an empty BTreeMap?</li>\n<li>Is the behaviour consistent between an empty and a full BTreeMap?</li>\n<li>If it\u2019s made an Option, what happens if Some empty BTreeMap is passed?</li>\n</ul>\n\n<p>Based on these questions and others like them, you must decide what is most appropriate for your specific example.</p>\n\n<p>Another option that may be relevant is providing different functions.</p>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 0, "closed_date": 1422352594, "answer_count": 1, "score": 0, "last_activity_date": 1422339942, "creation_date": 1422336999, "question_id": 28163904, "link": "https://stackoverflow.com/questions/28163904/make-an-argument-of-type-btreemap-optional", "closed_reason": "Opinion-based", "title": "Make an argument of type BTreeMap optional", "body": "<p>Say, I have a function which accepts <code>BTreeMap</code> as an argument and I want to make it optional. What's the better way to indicate that: </p>\n\n<ul>\n<li>leave it as it is (<code>BTreeMap</code>) and pass an instance of <code>BTreeMap</code> with no key and values</li>\n<li>make it <code>Option&lt;BTreeMap&gt;</code></li>\n</ul>\n"}, {"tags": ["syntax", "rust", "idioms"], "answers": [{"comments": [{"owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "edited": false, "score": 0, "creation_date": 1422357134, "post_id": 28164240, "comment_id": 44707819, "body": "After C++ where any addition or syntax sugar in language happens only when zounds of dead corpses appearance shows its importance it is hard to believe for me that reasons for this dualism with comma in Rust are only easier macro and diffs. However it seems you are right."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 13, "last_activity_date": 1422338995, "last_edit_date": 1422338995, "creation_date": 1422338878, "answer_id": 28164240, "question_id": 28163772, "link": "https://stackoverflow.com/questions/28163772/why-and-when-should-a-comma-be-used-at-the-end-of-a-block/28164240#28164240", "title": "Why and when should a comma be used at the end of a block?", "body": "<p>As you say, the only time a trailing comma is required is the 1-tuple pattern, type and construction <code>let (x,): (Type,) = (1,)</code>. Everywhere else, trailing commas are optional, have no effect, but are allowed for a few reasons:</p>\n\n<ul>\n<li>it makes macros easier: no need to be careful to not insert a comma at the very end of a sequence of items.</li>\n<li><p>it makes diffs nicer when extending a list of things, e.g. adding a variant to</p>\n\n<pre><code>enum Foo {\n    Bar\n}\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>enum Foo {\n    Bar,\n    Baz\n}\n</code></pre>\n\n<p>which is changing two lines (i.e. tools like <code>git</code> will display the <code>Bar</code> line as modified, as well as the inserted line), even though only the second actually had anything interesting in the change. If <code>Bar</code> started out with a trailing comma, then inserting <code>Baz,</code> after it is fine, with only one line changed.</p></li>\n</ul>\n\n<p>They're not required (other than the 1-tuple) because that would be fairly strange (IMO), e.g. </p>\n\n<pre><code>fn foo(x: u16,) -&gt; (u8, u8,) {\n    (bar(x,), baz(x,),)\n}\n</code></pre>\n\n<p>(I guess it would look less strange for <code>enum</code>/<code>struct</code> declarations, but still, it's nice to be able to omit it.)</p>\n"}], "owner": {"reputation": 2641, "user_id": 1862998, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/x8Cr4.png?s=128&g=1", "display_name": "Arsenii Fomin", "link": "https://stackoverflow.com/users/1862998/arsenii-fomin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 798, "favorite_count": 2, "accepted_answer_id": 28164240, "answer_count": 1, "score": 6, "last_activity_date": 1559751483, "creation_date": 1422336362, "last_edit_date": 1559751483, "question_id": 28163772, "link": "https://stackoverflow.com/questions/28163772/why-and-when-should-a-comma-be-used-at-the-end-of-a-block", "title": "Why and when should a comma be used at the end of a block?", "body": "<p>There many cases in Rust when a block of code can end with or without comma.\nFor example:</p>\n\n<pre><code>enum WithoutComma \n{\n    x,\n    y\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>enum WithComma\n{\n    x,\n    y,\n}\n</code></pre>\n\n<p>There are also other examples with <code>match</code>, etc. It seems that both variants lead to the same result. The only case I know where adding or removing a comma changes behaviour is the 1-element tuple declaration (which isn't a block):</p>\n\n<pre><code>let just_int = (5);\nlet tuple = (5,);\n</code></pre>\n\n<p>Why can one use a comma or not at the end of a block? Why is there such dualism in  thelanguage and what are the reasons for it?</p>\n"}, {"tags": ["android-ndk", "linker", "shared-libraries", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422323137, "post_id": 28161628, "comment_id": 44695057, "body": "It would probably be good to indicate how you are compiling the Rust code to a (shared?) library."}, {"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422409739, "post_id": 28161628, "comment_id": 44735801, "body": "@Shepmaster Thanks for pointing that out, compilation notes have been added :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422410524, "post_id": 28161628, "comment_id": 44735984, "body": "At which stage does your error occur? Can you tell if it&#39;s when compiling the C++ shim? Is it at runtime? Some other point? Is there a way to get verbose output during the compilation / linking phase?"}, {"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422410973, "post_id": 28161628, "comment_id": 44736101, "body": "@Shepmaster When it&#39;s compiling the C++ shim.  I can&#39;t get it to launch.  I&#39;m starting to lean towards Android Studio not picking up my makefile, because I typed a bunch of garbage, and it produced the same result...  I&#39;ll make an edit and post the entire compilation errors"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422458610, "post_id": 28161628, "comment_id": 44758460, "body": "That&#39;s great you got it to work! You may want to give <a href=\"https://github.com/rust-lang/rust/wiki/Doc-building-for-android\" rel=\"nofollow noreferrer\">the Rust wiki</a> a once-over to see if there&#39;s anything you should update for future searchers. There&#39;s also <a href=\"http://stackoverflow.com/q/22200621/155423\">another SO question</a> that could be useful to others."}], "answers": [{"comments": [{"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1422409486, "post_id": 28161902, "comment_id": 44735738, "body": "Thanks for pointing that out!  Unfortunately, still get the same error message :("}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1422323081, "creation_date": 1422323081, "answer_id": 28161902, "question_id": 28161628, "link": "https://stackoverflow.com/questions/28161628/linking-shared-object-library-without-headers-with-ndk-in-android-studio/28161902#28161902", "title": "Linking shared object library without headers with NDK in Android Studio", "body": "<p>Give this a shot:</p>\n\n<pre><code>#[no_mangle]\npub extern fn rust_test() -&gt; i32 {\n    82 // Note simplified implementation\n}\n</code></pre>\n\n<p>The specific thing to try is <code>#[no_mangle]</code> and <code>pub</code>. <code>pub</code> will mark the function as being callable from outside the compiled library. <code>#[no_mangle]</code> instructs the compiler to not change the function name, so that the exported symbol will be the literal <code>rust_test</code>.</p>\n\n<p>I also took the liberty of making the actual method body more idiomatic.</p>\n\n<p>Another note is that you should match your Rust and C types more closely. If you want to use an <code>int</code> in C, you should use the Rust type <code>c_int</code>. C's <code>int</code> is allowed to change size depending on your platform! You could also use a <code>int32</code> in Rust, but then you should use something like <code>int32_t</code> in C.</p>\n"}, {"comments": [{"owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1422410006, "post_id": 28164799, "comment_id": 44735852, "body": "Thanks for pointing that out, but changing that did not solve it either.  I am beginning to think Android Studio is not even reading the makefile, because I just typed a bunch of garbage into it, and the result was the same... :("}, {"owner": {"reputation": 11902, "user_id": 3115956, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8eb57ac8f519e5655e4f436e5dd276fb?s=128&d=identicon&r=PG&f=1", "display_name": "mstorsjo", "link": "https://stackoverflow.com/users/3115956/mstorsjo"}, "reply_to_user": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "edited": false, "score": 0, "creation_date": 1422427819, "post_id": 28164799, "comment_id": 44741080, "body": "I see you did another edit saying that it actually uses <code>Android.mk</code> now. You shouldn&#39;t have <code>LOCAL_SHARED_LIBRARIES := $(TARGET_ARCH_ABI)&#47;libfaceblaster-engine.so</code>, you should have literally <code>LOCAL_SHARED_LIBRARIES := faceblaster-engine</code>, as I wrote in the answer. You should have kept the rest of the declaration of the <code>faceblaster-engine</code> prebuilt module (<code>include $(CLEAR_VARS) LOCAL_MODULE := faceblaster-engine LOCAL_SRC_FILES := $(TARGET_ARCH_ABI)&#47;libfaceblaster-engine.so include $(PREBUILT_SHARED_LIBRARY)</code>) as you had earlier."}], "tags": [], "owner": {"reputation": 11902, "user_id": 3115956, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8eb57ac8f519e5655e4f436e5dd276fb?s=128&d=identicon&r=PG&f=1", "display_name": "mstorsjo", "link": "https://stackoverflow.com/users/3115956/mstorsjo"}, "is_accepted": true, "score": 2, "last_activity_date": 1422341432, "creation_date": 1422341432, "answer_id": 28164799, "question_id": 28161628, "link": "https://stackoverflow.com/questions/28161628/linking-shared-object-library-without-headers-with-ndk-in-android-studio/28164799#28164799", "title": "Linking shared object library without headers with NDK in Android Studio", "body": "<p>Your <code>Android.mk</code> doesn't specify that the JNI wrapper actually should try to link to faceblaster-engine - the <code>LOCAL_SHARED_LIBRARIES</code> line instead says it should link to itself. Change it to <code>LOCAL_SHARED_LIBRARIES := faceblaster-engine</code> and it should hopefully work better.</p>\n\n<p>Then to actually load it at runtime, you need to load the libraries in reverse dependency order, i.e.:</p>\n\n<pre><code>System.loadLibrary(\"faceblaster-engine\");\nSystem.loadLibrary(\"faceblaster\");\n</code></pre>\n"}], "owner": {"reputation": 2628, "user_id": 1366913, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/bcd760432e7ba71d5f0c71350886456f?s=128&d=identicon&r=PG", "display_name": "nathansizemore", "link": "https://stackoverflow.com/users/1366913/nathansizemore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1527, "favorite_count": 0, "accepted_answer_id": 28164799, "answer_count": 2, "score": 3, "last_activity_date": 1422451006, "creation_date": 1422321074, "last_edit_date": 1422451006, "question_id": 28161628, "link": "https://stackoverflow.com/questions/28161628/linking-shared-object-library-without-headers-with-ndk-in-android-studio", "title": "Linking shared object library without headers with NDK in Android Studio", "body": "<p>I've got a shared library file, <code>faceblaster-engine.so</code>, compiled for <code>arm-linux-androideabi</code>, placed in the jniLibs folder for Android Studio.  I've also got a simple cpp file in the jni folder.</p>\n\n<p>My library is written in Rust, so I have no header files, and I'd like to call functions inside of it through the cpp file, but can't seem to get the library to link correctly. To test, I've made a simple function:</p>\n\n<p><strong>Rust</strong></p>\n\n<pre><code>#[no_mangle]\npub extern fn rust_test() -&gt; c_int {\n    82 as c_int\n}\n</code></pre>\n\n<p><strong>C++</strong></p>\n\n<pre><code>extern \"C\" {\n\n// Test for calling rust function\nint rust_test();\n\njint\nJava_com_fureality_faceblaster_MainActivity_testRustLaunch(JNIEnv* env, jobject thiz)\n{\n    return rust_test();\n}\n\n} // End extern\n</code></pre>\n\n<p><strong>Android.mk</strong></p>\n\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := faceblaster-engine\nLOCAL_SRC_FILES := ../jniLibs/$(TARGET_ARCH_ABI)/libfaceblaster-engine.so\ninclude $(PREBUILT_SHARED_LIBRARY)\n\ninclude $(CLEAR_VARS)\nLOCAL_MODULE    := faceblaster\nLOCAL_SRC_FILES := gl-tests.cpp\nLOCAL_SHARED_LIBRARIES := faceblaster-engine\ninclude $(BUILD_SHARED_LIBRARY)\n</code></pre>\n\n<p><strong>Error</strong></p>\n\n<pre><code>/home/nathan/Development/projects/faceblaster-android/app/src/main/jni/gl-tests.cpp\n\nError:(23) undefined reference to `rust_test'\nError:error: ld returned 1 exit status\nmake: *** [/home/nathan/Development/projects/faceblaster-android/app/build/intermediates/ndk/debug/obj/local/arm64-v8a/libfaceblaster.so] Error 1\nError:Execution failed for task ':app:compileDebugNdk'.\n&gt; com.android.ide.common.internal.LoggedErrorException: Failed to run command:\n    /home/nathan/Development/bin/android-ndk-r10d/ndk-build NDK_PROJECT_PATH=null APP_BUILD_SCRIPT=/home/nathan/Development/projects/faceblaster-android/app/build/intermediates/ndk/debug/Android.mk APP_PLATFORM=android-21 NDK_OUT=/home/nathan/Development/projects/faceblaster-android/app/build/intermediates/ndk/debug/obj NDK_LIBS_OUT=/home/nathan/Development/projects/faceblaster-android/app/build/intermediates/ndk/debug/lib APP_ABI=all\n  Error Code:\n    2\n  Output:\n    /home/nathan/Development/projects/faceblaster-android/app/build/intermediates/ndk/debug/obj/local/arm64-v8a/objs/faceblaster//home/nathan/Development/projects/faceblaster-android/app/src/main/jni/gl-tests.o: In function `Java_com_fureality_faceblaster_MainActivity_testRustLaunch':\n    /home/nathan/Development/projects/faceblaster-android/app/src/main/jni/gl-tests.cpp:23: undefined reference to `rust_test'\n    collect2: error: ld returned 1 exit status\n    make: *** [/home/nathan/Development/projects/faceblaster-android/app/build/intermediates/ndk/debug/obj/local/arm64-v8a/libfaceblaster.so] Error 1\n</code></pre>\n\n<p>I dunno if my makefile isn't being picked up, or if it is correct?  Anyone have an idea on how to properly link against this .so file and register functions I'd like to use?</p>\n\n<p>Thanks in advance for any help!</p>\n\n<p><strong>Edit - Added Java source and rust code compilation method</strong></p>\n\n<hr>\n\n<p><strong>Java</strong></p>\n\n<pre><code>public class MainActivity extends Activity {\n\n    // External libraries to load\n    static {\n        System.loadLibrary(\"faceblaster-engine\");\n        System.loadLibrary(\"faceblaster\");\n    }\n\n    // External functions to register\n    public native int testRustLaunch();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // Other stuff omitted for brevity\n        Log.d(TAG, \"Testing call...\");\n        int test = testRustLaunch();\n        Log.d(TAG, \"Received: \" + test);\n    }\n}\n</code></pre>\n\n<p><strong>Rust Compilation</strong></p>\n\n<pre><code>cargo build --target=arm-linux-androideabi\n\n# /project/.cargo/config file\n[target.arm-linux-androideabi]\nlinker = \"/opt/ndk_standalone/bin/arm-linux-androideabi-gcc\"\n\n# Cargo.toml\n[lib]\nname = \"faceblaster-engine\"\ncrate_type = [\"dylib\"]\n</code></pre>\n\n<p><strong>Edit 2</strong></p>\n\n<hr>\n\n<p>I've edited by <code>build.gradle</code> script, and my I know my Android.mk is being read and used now, but I am still getting the same compilation error :(</p>\n\n<p><strong>Edit 3</strong></p>\n\n<hr>\n\n<p>Turns out both of the answers below helped in solving the issue.  It was mainly in part of Android Studio not picking up my makefile, the rust code not being declared properly as <code>#[no_mangle] pub extern</code> and my makefile being all jacked up.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 0, "creation_date": 1422312827, "post_id": 28160027, "comment_id": 44691812, "body": "Isn&#39;t all that code simply <code>let example_state = [[9u8; 8]; 2]</code> ?"}, {"owner": {"reputation": 8863, "user_id": 592235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b07992c174ed5b627e20a32ab9c43ef5?s=128&d=identicon&r=PG", "display_name": "Mike Vella", "link": "https://stackoverflow.com/users/592235/mike-vella"}, "reply_to_user": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 1, "creation_date": 1422313154, "post_id": 28160027, "comment_id": 44691945, "body": "It&#39;s a simplified example of something more complicated - I&#39;m trying to understand why <i>this</i> doesn&#39;t work."}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 0, "creation_date": 1422313233, "post_id": 28160027, "comment_id": 44691977, "body": "Fair enough. It&#39;s a good question regardless."}], "answers": [{"comments": [{"owner": {"reputation": 8863, "user_id": 592235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b07992c174ed5b627e20a32ab9c43ef5?s=128&d=identicon&r=PG", "display_name": "Mike Vella", "link": "https://stackoverflow.com/users/592235/mike-vella"}, "edited": false, "score": 0, "creation_date": 1422392738, "post_id": 28160807, "comment_id": 44729028, "body": "how do you check a method signature?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 8863, "user_id": 592235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b07992c174ed5b627e20a32ab9c43ef5?s=128&d=identicon&r=PG", "display_name": "Mike Vella", "link": "https://stackoverflow.com/users/592235/mike-vella"}, "edited": false, "score": 0, "creation_date": 1422396062, "post_id": 28160807, "comment_id": 44730769, "body": "@MikeVella I just refer to the <a href=\"http://doc.rust-lang.org/std/\" rel=\"nofollow noreferrer\">documentation</a> which has a comprehensive search feature. Rustdoc is actively being worked on, so sometimes I do have to go <a href=\"https://github.com/rust-lang/rust\" rel=\"nofollow noreferrer\">source diving</a>. Then it&#39;s just a matter of looking for <code>fn my_name</code>!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1432684887, "last_edit_date": 1432684887, "creation_date": 1422315461, "answer_id": 28160807, "question_id": 28160027, "link": "https://stackoverflow.com/questions/28160027/error-cannot-assign-to-immutable-indexed-content-i/28160807#28160807", "title": "error: cannot assign to immutable indexed content `i[..]`", "body": "<p>Let's look at the signatures of the two methods, <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.iter\" rel=\"nofollow\"><code>iter</code></a> and <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.iter_mut\" rel=\"nofollow\"><code>iter_mut</code></a>:</p>\n\n<pre><code>fn iter(&amp;self) -&gt; Iter&lt;T&gt;;\nfn iter_mut(&amp;mut self) -&gt; IterMut&lt;T&gt;;\n</code></pre>\n\n<p>And the structs they return, <a href=\"http://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"nofollow\"><code>Iter</code></a> and <a href=\"http://doc.rust-lang.org/std/slice/struct.IterMut.html\" rel=\"nofollow\"><code>IterMut</code></a>, specifically the implementation of <code>Iterator</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Iter\ntype Item = &amp;'a T\n// IterMut\ntype Item = &amp;'a mut T \n</code></pre>\n\n<p>These are <em>associated types</em>, but basically in this case, they specify what the return type of calling <code>Iterator::next</code>. When you used <code>iter</code>, even though it was on a mutable variable, you were asking for an iterator to <em>immutable references</em> to a type <code>T</code> (<code>&amp;T</code>). That's why you weren't able to mutate them!</p>\n\n<p>When you switched to <code>iter_mut</code>, the return type of <code>Iterator::next</code> is <code>&amp;mut T</code>, a <em>mutable reference</em> to a type <code>T</code>. You are allowed to set these values!</p>\n\n<p>As an aside, your question used <em>arrays</em>, not <em>slices</em>, but there aren't documentation links for arrays (that I could find quickly), and slices are close enough to arrays so I used them for this explanation.</p>\n"}, {"tags": [], "owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "is_accepted": false, "score": 4, "last_activity_date": 1422315600, "creation_date": 1422315600, "answer_id": 28160826, "question_id": 28160027, "link": "https://stackoverflow.com/questions/28160027/error-cannot-assign-to-immutable-indexed-content-i/28160826#28160826", "title": "error: cannot assign to immutable indexed content `i[..]`", "body": "<p>There are two orthogonal concepts going on here:</p>\n\n<ul>\n<li><p>Whether the <em>reference itself</em> is mutable. That's the difference between <code>i</code> and <code>mut i</code>.</p></li>\n<li><p>Whether the <em>data it points to</em> is mutable. That's the difference between <code>.iter()</code>/<code>&amp;T</code> and <code>.iter_mut()</code>/<code>&amp;mut T</code>.</p></li>\n</ul>\n\n<p>If you use C, this distinction should be familiar. Your initial code creates <em>mutable references</em> to <em>immutable data</em>, or <code>const char *</code> in C. So while you can assign to the reference itself (<code>i = ...</code>), you can't modify the data it points to (<code>*i = ...</code>). That's why the compiler stops you.</p>\n\n<p>On the other hand, your fixed code creates <em>immutable references</em> to <em>mutable data</em>. That's <code>char * const</code> in C. This doesn't let you assign to the reference itself, but it does let you modify the underlying array, so it compiles as expected.</p>\n\n<hr>\n\n<p>So why does Rust have a separate <code>.iter()</code> and <code>.iter_mut()</code>? Because in Rust, while you can take as many <code>&amp;T</code> to a structure as you want, you can only modify it through a single <code>&amp;mut T</code>. In other words, mutable references are unique and never <a href=\"http://en.wikipedia.org/wiki/Pointer_aliasing\" rel=\"nofollow\">alias</a>.</p>\n\n<p>Having both <code>.iter()</code> and <code>.iter_mut()</code> gives you a choice. On one hand, you can have any number of immutable iterators in scope at once, all pointing to the same array. Here's a silly example that iterates forwards and backwards at the same time:</p>\n\n<pre><code>for i, j in array.iter().zip(array.iter().rev()) {\n    println!(\"{} {}\", i, j);\n}\n</code></pre>\n\n<p>But if you want a mutable iterator, you have to guarantee the references never alias. So this won't work:</p>\n\n<pre><code>// Won't compile\nfor i, j in array.iter_mut().zip(array.iter_mut().rev()) {\n    println!(\"{} {}\", i, j);\n}\n</code></pre>\n\n<p>because the compiler can't guarantee <code>i</code> and <code>j</code> don't point to the same location in memory.</p>\n"}], "owner": {"reputation": 8863, "user_id": 592235, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b07992c174ed5b627e20a32ab9c43ef5?s=128&d=identicon&r=PG", "display_name": "Mike Vella", "link": "https://stackoverflow.com/users/592235/mike-vella"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3087, "favorite_count": 0, "accepted_answer_id": 28160807, "answer_count": 2, "score": 10, "last_activity_date": 1432684887, "creation_date": 1422311807, "last_edit_date": 1422313346, "question_id": 28160027, "link": "https://stackoverflow.com/questions/28160027/error-cannot-assign-to-immutable-indexed-content-i", "title": "error: cannot assign to immutable indexed content `i[..]`", "body": "<p>In the following rust code I am trying to change the contents of an array:</p>\n\n<pre><code>    let mut example_state = [[0;8]; 2];\n    for mut i in example_state.iter() {\n        let mut k = 0;\n        for j in i.iter(){\n            i[k] = 9u8;\n            k +=1\n        }\n    }\n</code></pre>\n\n<p>However I get the error message:</p>\n\n<pre><code>src/main.rs:18:13: 18:23 error: cannot assign to immutable indexed content `i[..]`\nsrc/main.rs:18             i[k] = 9u8;\n</code></pre>\n\n<p>which I'm confused by because I am defining <code>i</code> to be <code>mut</code> and <code>example_state</code> is also mutable.</p>\n\n<p>I also don't know if this is the best way to change the contents of an array - do I need the counter <code>k</code> or can I simply use the iterator <code>j</code> in some way?</p>\n\n<p><strong>UPDATE:</strong>\nSo I found that this block of code works:</p>\n\n<pre><code>let mut example_state = [[n;8]; 2];\nfor i in example_state.iter_mut() {\n    for j in i.iter_mut(){\n        *j = 9u8;\n    }\n}\n</code></pre>\n\n<p>but I would appreciate some explanation of what the difference is between them, <code>iter_mut</code> doesn't throw up much on Google. </p>\n"}, {"tags": ["reference", "rust", "move-semantics", "borrow-checker"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1422306785, "post_id": 28158738, "comment_id": 44688950, "body": "Have you looked at <a href=\"http://stackoverflow.com/q/28034646/1256624\">questions like this</a>? (Btw, strings offer the <code>.bytes()</code> method.)"}, {"owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "edited": false, "score": 0, "creation_date": 1422306948, "post_id": 28158738, "comment_id": 44689053, "body": "Yes, I looked into it, but didn&#39;t understand :( And my string is a std::string::String, according to the documentation, there&#39;s no .bytes() method"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 4, "creation_date": 1422308278, "post_id": 28158738, "comment_id": 44689744, "body": "It&#39;s called <code>.as_bytes()</code>"}, {"owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "edited": false, "score": 0, "creation_date": 1422308949, "post_id": 28158738, "comment_id": 44690102, "body": "In fact, thank you, it works with <code>as_bytes()</code> without cloning. But I still don&#39;t understand why ?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422325646, "post_id": 28158738, "comment_id": 44695661, "body": "<code>String</code> gets the <a href=\"http://doc.rust-lang.org/nightly/std/str/trait.StrExt.html#tymethod.bytes\" rel=\"nofollow noreferrer\"><code>bytes</code></a> method from <code>str</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 121, "last_activity_date": 1499528171, "last_edit_date": 1499528171, "creation_date": 1422309097, "answer_id": 28159407, "question_id": 28158738, "link": "https://stackoverflow.com/questions/28158738/cannot-move-out-of-borrowed-content-cannot-move-out-of-behind-a-shared-referen/28159407#28159407", "title": "Cannot move out of borrowed content / cannot move out of behind a shared reference", "body": "<p>Let's look at the signature for <a href=\"http://doc.rust-lang.org/collections/string/struct.String.html#method.into_bytes\" rel=\"noreferrer\"><code>into_bytes</code></a>:</p>\n\n<pre><code>fn into_bytes(self) -&gt; Vec&lt;u8&gt;\n</code></pre>\n\n<p>This takes <code>self</code>, not a reference to self (<code>&amp;self</code>). That means that <code>self</code> will be <em>consumed</em> and won't be available after the call. In its place, you get a <code>Vec&lt;u8&gt;</code>. The prefix <code>into_</code> is a common way of denoting methods like this.</p>\n\n<p>I don't know exactly what your <code>iter()</code> method returns, but my guess is that it's an iterator over <code>&amp;String</code>, that is, it returns references to a <code>String</code> but doesn't give you ownership of them. That means you <em>cannot call a method that consumes the value</em>. </p>\n\n<p>As you've found, one solution is to use <code>clone</code>. This creates a duplicate object that you <em>do</em> own, and can call <code>into_bytes</code> on. As other commenters mention, you can also use <a href=\"http://doc.rust-lang.org/collections/string/struct.String.html#method.as_bytes\" rel=\"noreferrer\"><code>as_bytes</code></a> which takes <code>&amp;self</code>, so it will work on a borrowed value. Which one you should use depends on your end goal for what you do with the pointer.</p>\n\n<p>In the larger picture, this all has to do with the notion of <em>ownership</em>. Certain operations depend on owning the item, and other operations can get away with borrowing the object (perhaps mutably). A reference (<code>&amp;foo</code>) does not grant ownership, it's just a borrow.</p>\n\n<blockquote>\n  <p>Why is it interesting to use <code>self</code> instead of <code>&amp;self</code> in a function's arguments?</p>\n</blockquote>\n\n<p>Transferring ownership is a useful concept in general - when I am done with something, someone else may have it. In Rust, it's a way to be more efficient. I can avoid allocating a copy, giving you one copy, then throwing away my copy. Ownership is also the most permissive state; if I own an object I can do with it as I wish.</p>\n\n<hr>\n\n<p>Here's the code that I created to test with:</p>\n\n<pre><code>struct IteratorOfStringReference&lt;'a&gt;(&amp;'a String);\n\nimpl&lt;'a&gt; Iterator for IteratorOfStringReference&lt;'a&gt; {\n    type Item = &amp;'a String;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        None\n    }\n}\n\nstruct FileLikeThing {\n    string: String,\n}\n\nimpl FileLikeThing {\n    fn iter(&amp;self) -&gt; IteratorOfStringReference {\n        IteratorOfStringReference(&amp;self.string)\n    }\n}\n\nstruct Dummy {\n    xslg_file: FileLikeThing,\n    buffer: String,\n}\n\nimpl Dummy {\n    fn dummy(&amp;mut self) {\n        for line in self.xslg_file.iter() {\n            self.buffer.clear();\n\n            for current_char in line.into_bytes().iter() {\n                self.buffer.push(*current_char as char);\n            }\n\n            println!(\"{}\", line);\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70533, "favorite_count": 21, "accepted_answer_id": 28159407, "answer_count": 1, "score": 139, "last_activity_date": 1566909778, "creation_date": 1422306281, "last_edit_date": 1566909778, "question_id": 28158738, "link": "https://stackoverflow.com/questions/28158738/cannot-move-out-of-borrowed-content-cannot-move-out-of-behind-a-shared-referen", "title": "Cannot move out of borrowed content / cannot move out of behind a shared reference", "body": "<p>I don't understand the error <code>cannot move out of borrowed content</code>. I have received it many times and I have always solved it, but I've never understood why.</p>\n\n<p>For example:</p>\n\n<pre><code>for line in self.xslg_file.iter() {\n    self.buffer.clear();\n\n    for current_char in line.into_bytes().iter() {\n        self.buffer.push(*current_char as char);\n    }\n\n    println!(\"{}\", line);\n}\n</code></pre>\n\n<p>produces the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:31:33\n   |\n31 |             for current_char in line.into_bytes().iter() {\n   |                                 ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>In newer versions of Rust, the error is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of `*line` which is behind a shared reference\n  --&gt; src/main.rs:31:33\n   |\n31 |             for current_char in line.into_bytes().iter() {\n   |                                 ^^^^ move occurs because `*line` has type `std::string::String`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I solved it by cloning <code>line</code>:</p>\n\n<pre><code>for current_char in line.clone().into_bytes().iter() {\n</code></pre>\n\n<p>I don't understand the error even after reading other posts like:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/28034646/cant-borrow-file-from-mut-self-error-msg-cannot-move-out-of-borrowed-content\">Can&#39;t borrow File from &amp;mut self (error msg: cannot move out of borrowed content)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/28008585/changing-a-node-in-a-tree-in-rust\">Changing a node in a tree in Rust</a></li>\n</ul>\n\n<p>What is the origin of this kind of error?</p>\n"}, {"tags": ["c", "embedded", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1422291610, "post_id": 28154683, "comment_id": 44681165, "body": "Wild stab in the dark: <code>gpio_type</code> is zero-sized, which can cause some weird stuff to happen.  Try using a <code>struct gpio_type(u8)</code> instead to give it a size and see what happens.  In fact, there&#39;s an opaque <code>c_void</code> type in the <code>libc</code> crate, which has two private enum variants, presumably to avoid the same issue."}], "answers": [{"comments": [{"owner": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422360839, "post_id": 28157336, "comment_id": 44709831, "body": "Thanks for some pointers but still does not solve the above problem. C library is using gpio_type object (always the first parameter). The rust layer needs to define this gpio_type. How big is the gpio_type object? Depends on the target. I can retrieve the number in the runtime or via the global C constant. I would like to create an array of u8, cast it to gpio_type object, so can be used within any gpio function in the C layer. I emphasized this is for embedded devices, preferrably no std, libc is neither defined yet."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422367543, "post_id": 28157336, "comment_id": 44713844, "body": "@0xc0170 Could you expand on a bit on what is missing so that I can add it? My example <i>does</i> create an array of <code>u8</code> of length 4, then passes a pointer to that chunk of memory to the gpio functions. As you point out, the <code>4</code> is going to be target platform specific, but you seem to indicate that you already know how to deal with that."}, {"owner": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422382139, "post_id": 28157336, "comment_id": 44723323, "body": "It should have a member gpio which would be allocated space. So it can be expanded by other members. How is it with *mut u8 and C function expects *gpio_type object, will that link? We are getting closer"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422382408, "post_id": 28157336, "comment_id": 44723484, "body": "In C, a pointer is a pointer. So long as it points to a chunk of memory that is available to the process (either on the stack or on the heap) and has an appropriate size and alignment, then it should work. My struct <code>Gpio</code> is a <a href=\"http://doc.rust-lang.org/book/compound-data-types.html#tuple-structs-and-newtypes\" rel=\"nofollow noreferrer\"><i>tuple struct</i></a> which has a single (unnamed) member that occupies 4 bytes. That&#39;s what <code>self.0</code> is referring to. Can you explain more about what you mean by &quot;expanded by other members&quot;?"}, {"owner": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422387942, "post_id": 28157336, "comment_id": 44726534, "body": "Gpio is not a good example,  Spi - should contain an allocation for C library spi struct, then probably settings of a transfer like frequency, bit width..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422388508, "post_id": 28157336, "comment_id": 44726831, "body": "@0xc0170 But wouldn&#39;t the C struct already be the authoritative source for that data, and you should just use the accessors provided by the library? If you want the Rust structure to mirror the C structure, that&#39;s a <i>very</i> different question, but you said you don&#39;t want to rewrite it for every architecture."}, {"owner": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422391302, "post_id": 28157336, "comment_id": 44728243, "body": "True, dont mirror it. It was just as an illustration, a struct would be more appropriate than tuple struct. Could you update the extended example? I am failing in &quot;casting&quot; the array to *mut u8."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "edited": false, "score": 0, "creation_date": 1422396425, "post_id": 28157336, "comment_id": 44730972, "body": "@0xc0170 You don&#39;t have to cast it - just refer to <code>fn as_mut_ptr</code> that is defined on <code>Gpio</code>. That&#39;s how you go from the fixed-size array to a mutable slice to a mutable pointer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1431797482, "last_edit_date": 1431797482, "creation_date": 1422300596, "answer_id": 28157336, "question_id": 28154683, "link": "https://stackoverflow.com/questions/28154683/allocating-an-object-for-c-ffi-library-calls/28157336#28157336", "title": "Allocating an object for C / FFI library calls", "body": "<blockquote>\n  <p>looking for something to just allocate memory for the object which C will handle</p>\n</blockquote>\n\n<p>What about something like this? Give the struct an actual size (in this case by giving it a fixed-size array of byte-sized items), allocate that space on the heap, then treat that as a raw pointer.</p>\n\n<pre><code>use std::mem;\n\n#[allow(missing_copy_implementations)]\npub struct Gpio([u8; 4]);\n\nimpl Gpio {\n    fn new() -&gt; Gpio { Gpio([0,0,0,0]) }\n}\n\nfn main() {\n    // Allocate some bytes and get a raw pointer\n    let a: *mut u8 = unsafe { mem::transmute(Box::new(Gpio::new())) };\n\n    // Use it here!\n\n    // When done... back to a box\n    let b: Box&lt;Gpio&gt; = unsafe { mem::transmute(a) };\n\n    // Now it will be dropped automatically (and free the allocated memory)\n\n    // Or you can be explicit\n    drop(b);\n}\n</code></pre>\n\n<p>However, I'd suggest doing something like this; it's a lot more obvious and doesn't need a heap allocation:</p>\n\n<pre><code>#[allow(missing_copy_implementations)]\npub struct Gpio([u8; 4]);\n\nimpl Gpio {\n    fn new() -&gt; Gpio { Gpio([0,0,0,0]) }\n\n    fn as_mut_ptr(&amp;mut self) -&gt; *mut u8 {\n        self.0.as_mut_ptr()\n    }\n}\n\nfn main() {\n    let mut g = Gpio::new();\n    let b = g.as_mut_ptr();\n}\n</code></pre>\n\n<p>As a bonus, you get a nice place to hang some methods on. Potentially <code>as_mut_ptr</code> wouldn't need to be public, and could be hidden behind public methods on the <code>Gpio</code> struct.</p>\n\n<p>(might also be able to use <a href=\"http://doc.rust-lang.org/std/mem/fn.uninitialized.html\" rel=\"nofollow\"><code>uninitialized</code></a> instead of <code>[0,0,0,0]</code>)</p>\n\n<h3>An expanded example of the second suggestion</h3>\n\n<pre><code>// This depends on your library, check the FFI guide for details\nextern {\n    fn gpio_init(gpio: *mut u8, pin: u8);\n    fn gpio_pin_on(gpio: *mut u8);\n    fn gpio_pin_off(gpio: *mut u8);\n}\n\n#[allow(missing_copy_implementations)]\npub struct Gpio([u8; 4]);\n\nimpl Gpio {\n    fn new(pin: u8) -&gt; Gpio {\n        let mut g = Gpio([0,0,0,0]);\n        g.init(pin);\n        g\n    }\n\n    fn as_mut_ptr(&amp;mut self) -&gt; *mut u8 {\n        self.0.as_mut_ptr()\n    }\n\n    fn init(&amp;mut self, pin: u8) { unsafe { gpio_init(self.as_mut_ptr(), pin) } }\n    pub fn on(&amp;mut self) { unsafe { gpio_pin_on(self.as_mut_ptr()) } }\n    pub fn off(&amp;mut self) { unsafe { gpio_pin_off(self.as_mut_ptr()) } }\n}\n\nstatic BLUE_LED_PIN: u8 = 0x4;\n\nfn main() {\n    let mut g = Gpio::new(BLUE_LED_PIN);\n    g.on();\n    g.off();\n}\n</code></pre>\n"}], "owner": {"reputation": 58, "user_id": 1570605, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t1NLu.jpg?s=128&g=1", "display_name": "c0170", "link": "https://stackoverflow.com/users/1570605/c0170"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1130, "favorite_count": 1, "accepted_answer_id": 28157336, "answer_count": 1, "score": 1, "last_activity_date": 1431797482, "creation_date": 1422290800, "last_edit_date": 1422325001, "question_id": 28154683, "link": "https://stackoverflow.com/questions/28154683/allocating-an-object-for-c-ffi-library-calls", "title": "Allocating an object for C / FFI library calls", "body": "<p>I have a C library, which has gpio implementation. There's gpio_type which is target specific, each MCU has different definition for gpio_type. One of the functions in the library:</p>\n\n<pre><code>void gpio_init(gpio_type *object, int32_t pin);\n</code></pre>\n\n<p>I want to write abstraction of Gpio object in Rust, using C library functions. Therefore need something like opaque pointer type (in C++ I would just create a member variable with type: gpio_type). I figured I would create an empty enum (or struct), allocate a space needed for the object and transmute it to match the type in C layer. </p>\n\n<pre><code>pub enum gpio_type {}\n\n#[link(name = \"gpio_lib\", kind = \"static\")]\nextern {\n    pub fn gpio_init(obj: *mut gpio_type, value: i32);\n}\n\npub struct Gpio {\n    gpio : *mut gpio_type,\n}\n\nimpl Gpio {\n    pub fn new(pin: u32) -&gt; Gpio {\n        unsafe {\n            let mut gpio_ptr : &amp;'static [u8; 4] = init(); // size of gpio in C is 4 bytes for one target, will be changed later to obtain it dynamically\n            let gpio_out = Gpio { gpio: transmute(gpio_ptr)};\n            gpio_init(gpio_out.gpio, pin);\n            gpio_out\n        }\n    }\n}\n</code></pre>\n\n<p>This targets embedded devices, therefore no std, no libc. I don't want to redefine gpio_type for each target in rust (copy the C declaration for each target), looking for something to just allocate memory for the object which C will handle.</p>\n\n<p>The following snippet below produces pointer to address 0 according to disassembly. Disassembly for Gpio new method:</p>\n\n<pre><code> 45c:   b580        push    {r7, lr}\n 45e:   466f        mov r7, sp\n 460:   4601        mov r1, r0\n 462:   2000        movs    r0, #0\n 464:   f000 fae6   bl  a34 &lt;gpio_init&gt;\n 468:   2000        movs    r0, #0\n 46a:   bd80        pop {r7, pc}\n</code></pre>\n\n<p>Any ideas why 462 is 0 ?</p>\n"}, {"tags": ["concurrency", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1422296224, "last_edit_date": 1422296224, "creation_date": 1422291335, "answer_id": 28154872, "question_id": 28154563, "link": "https://stackoverflow.com/questions/28154563/threading-lifetime-error/28154872#28154872", "title": "Threading lifetime error", "body": "<p>This is a known limitation of the Rust type system. Currently Rust allows to send data between threads only if this data satisfies <code>Send</code> bound, and <code>Send</code> implies <code>'static</code> - that is, the only references which can be sent across thread boundaries are <code>'static</code> ones.</p>\n\n<p>There is <a href=\"https://github.com/rust-lang/rfcs/pull/458\" rel=\"nofollow\">an RFC</a> which partially lifts this limitation, allowing non-<code>'static</code> references to be sent across tasks. I thought that it already has been accepted, but it is not (which is strange). The API that supports such thing has already been created (and this is likely why you are confused), but the language is yet to be adjusted.</p>\n"}], "owner": {"reputation": 1073, "user_id": 2277915, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/e9dba1201139b216bbe3136b06fa2793?s=128&d=identicon&r=PG", "display_name": "Reignbeaux", "link": "https://stackoverflow.com/users/2277915/reignbeaux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 28154872, "answer_count": 1, "score": 2, "last_activity_date": 1422296224, "creation_date": 1422290444, "last_edit_date": 1422291674, "question_id": 28154563, "link": "https://stackoverflow.com/questions/28154563/threading-lifetime-error", "title": "Threading lifetime error", "body": "<p>I'm trying to implement the game \"Tower of Hanoi\" using concurrency in Rust. Honestly, I tried to understand the whole lifetime thing in Rust in the last time, but I'm not done yet. That's why I get some weird lifetime errors which I don't understand. First, here is the important piece of code</p>\n\n<pre><code>fn move_plate&lt;'a&gt;(stack_a: &amp;'a mut Vec&lt;i32&gt;, stack_b: &amp;'a mut Vec&lt;i32&gt;, \n    stack_c: &amp;'a mut Vec&lt;i32&gt;, moves: &amp;'a mut Vec&lt;(i32, i32)&gt;) \n{\n        let mut moves1: Vec&lt;(i32, i32)&gt; = Vec::new();\n        let guard1 = Thread::scoped(\n            move || { move_plate(stack_a, stack_c, stack_b, (1, 3, 2), &amp;mut moves1); \n        });\n        guard1.join().ok();\n}\n</code></pre>\n\n<p>And here is the error</p>\n\n<pre><code>error: cannot infer an appropriate lifetime due to conflicting requirements\n    let guard1 = Thread::scoped(move || {\n                     move_plate(height - 1, stack_a, stack_c, stack_b, (1, 3, 2), threads, depth + 1, &amp;mut moves1);\n                 });\nnote: first, the lifetime cannot outlive the expression at 93:25...\n             let guard1 = Thread::scoped(move || {\n\nnote: ...so that the declared lifetime parameter bounds are satisfied\n             let guard1 = Thread::scoped(move || {\n\nnote: but, the lifetime must be valid for the expression at 93:45...\n             let guard1 = Thread::scoped(move || {\n                 move_plate(height - 1, stack_a, stack_c, stack_b, (1, 3, 2), threads, depth + 1, &amp;mut moves1);\n             });\nnote: ...so type `closure[]` of expression is valid during the expression\n             let guard1 = Thread::scoped(move || {\n                 move_plate(height - 1, stack_a, stack_c, stack_b, (1, 3, 2), threads, depth + 1, &amp;mut moves1);\n             });\nerror: declared lifetime bound not satisfied\n             let guard1 = Thread::scoped(move || {\n</code></pre>\n\n<p>I understand that I have to avoid the thread to outlive the function, because otherwise the reference to moves would be gone. But since I join the thread, that should be all right, shouldn't it? What am I missing at that point?\nWould be really nice if somebody could help me, I'm just getting used to that cool (but complicated) kind of stuff</p>\n"}, {"tags": ["rust", "type-signature"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422289753, "post_id": 28154235, "comment_id": 44680092, "body": "You could also accept a trait object as a reference (<code>&amp;Fn(&amp;T) -&gt; bool</code>) instead of needing to heap-allocate."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422290814, "post_id": 28154235, "comment_id": 44680723, "body": "@Shepmaster: You know, I <i>completely</i> forgot about those.  <i>To the Editmobile!</i>"}, {"owner": {"reputation": 17673, "user_id": 139802, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/33c5692f72d9da5663651d034c4588b6?s=128&d=identicon&r=PG", "display_name": "Andrew Wagner", "link": "https://stackoverflow.com/users/139802/andrew-wagner"}, "edited": false, "score": 0, "creation_date": 1422290846, "post_id": 28154235, "comment_id": 44680738, "body": "Thanks a lot for the thorough answer!  It is going to take me a while to understand what the heck is going on, though. Somewhere in the run-up to alpha, rust flew over my head in complexity.  Is Fn the type of a function you declare with fn?  What does it mean for one to be in a Box?  Does that mean the local variables are all allocated on the heap whenever you call the function?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 17673, "user_id": 139802, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/33c5692f72d9da5663651d034c4588b6?s=128&d=identicon&r=PG", "display_name": "Andrew Wagner", "link": "https://stackoverflow.com/users/139802/andrew-wagner"}, "edited": false, "score": 0, "creation_date": 1422291354, "post_id": 28154235, "comment_id": 44681011, "body": "@AndrewWagner: Functions have a <code>fn</code> type.  <code>Fn</code>, <code>FnMut</code> and <code>FnOnce</code> are three &quot;callable&quot; traits which are implemented by things you can call, which includes functions as well as closures.  Boxing something does put it on the heap.  Basically, you can&#39;t use traits by-value, so you need <i>some kind</i> of indirection, be that a box or a borrowed reference.  It&#39;s a bit much to go into in a comment."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1422290949, "last_edit_date": 1422290949, "creation_date": 1422289438, "answer_id": 28154235, "question_id": 28153830, "link": "https://stackoverflow.com/questions/28153830/how-can-you-figure-out-the-type-signature-of-a-reference-to-a-function/28154235#28154235", "title": "How can you figure out the type signature of (a reference to) a function?", "body": "<p>You can't, at least, not with that function.</p>\n\n<p>First of all, you have can't have a generic variable.  That is, <code>x</code> can't depend on <code>T</code>.  To take a simpler example:</p>\n\n<pre><code>fn test&lt;T&gt;(_: &amp;T) { unimplemented!() }\n\nfn main() {\n    let x: fn(&amp;u8) = test;\n}\n</code></pre>\n\n<p>This works because the compiler can infer the concrete type <code>T</code> is (in this case, <code>u8</code>).  So why can't you do that?  Because of <code>F</code>.  You're asking for a closure type, and closure types are <em>anonymous</em>; no matter what you do, you can't name one.  If you managed to get the type system to <em>infer</em> the closure type, it would only be valid for <em>exactly</em> one specific closure.  Much like functions, each closure has its own unique type, even if it is <em>literally</em> the same.  Unlike functions, closures don't have a common base type you can use.</p>\n\n<p>It's hard to give any recommendations without knowing what it is you're actually trying to accomplish.  To take a stab in the dark, however, you might want to try something like:</p>\n\n<pre><code>pub fn take_while2&lt;'a,T&gt;(initial: &amp;'a [T], predicate: Box&lt;Fn(&amp;T) -&gt; bool&gt;) -&gt; Option&lt;&amp;'a [T]&gt; { // '\n    // ...\n}\n\nfn main() {\n    let functions: Vec&lt;for&lt;'a&gt; fn(&amp;'a [u8], Box&lt;Fn(&amp;u8) -&gt; bool&gt;) -&gt; Option&lt;&amp;'a [u8]&gt;&gt; = vec![take_while2]; // '\n    // ...\n}\n</code></pre>\n\n<p>Note the use of <code>for&lt;'a&gt;</code> which is a higher-ranked lifetime, which has the same function as the <code>'a</code> generic parameter for the <code>take_while2</code> definition.  <em>Also</em> note that this syntax <em>does not</em> work for type arguments.</p>\n\n<p>Credit to Shepmaster for reminding me that you can <em>also</em> use <code>&amp;Fn(&amp;T) -&gt; bool</code> instead of a boxed closure.  That lifts the requirement of a heap allocation for the caller.</p>\n\n<p>This will also require you to box any closures you want to pass to <code>predicate</code>.</p>\n"}], "owner": {"reputation": 17673, "user_id": 139802, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/33c5692f72d9da5663651d034c4588b6?s=128&d=identicon&r=PG", "display_name": "Andrew Wagner", "link": "https://stackoverflow.com/users/139802/andrew-wagner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 616, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1518562807, "creation_date": 1422288132, "last_edit_date": 1518562807, "question_id": 28153830, "link": "https://stackoverflow.com/questions/28153830/how-can-you-figure-out-the-type-signature-of-a-reference-to-a-function", "title": "How can you figure out the type signature of (a reference to) a function?", "body": "<p>I have a few implementations of a function that I would like to test.  To do that cleanly, I want to put references to them into an array and call them one by one.  Due to recent syntax changes, to do this, you need to first explicitly cast functions to function references with correct type signatures.  Since the syntax you use to declare a function is different from its actual type, this is a non-trivial task.  </p>\n\n<p>How do you figure out the type of a reference to a Rust function with non-trivial signature (e.g. it involves generics, lifetimes, takes another function, etc.)?</p>\n\n<p>A particular <a href=\"https://play.rust-lang.org/?gist=3f50a4b5811ecf13dbda43f9fab4339b&amp;version=undefined\" rel=\"nofollow noreferrer\">function</a> (which I wrote) was declared with signature:</p>\n\n<pre><code>pub fn take_while2&lt;'a,T,F:Fn(&amp;T)-&gt;bool &gt;(initial: &amp;'a [T], predicate: F) -&gt; Option&lt;&amp;'a [T]&gt; {...}\n</code></pre>\n"}, {"tags": ["c", "gcc", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422283866, "post_id": 28152418, "comment_id": 44676197, "body": "This is a nit, but when doing C / Rust interop, you should be particular about the types. I&#39;d use <code>i32</code> or <code>i64</code> instead of <code>isize</code> (which changes depending on 32- or 64-bit). Use the matching type on the C side. You could also use something like <code>intptr</code>."}, {"owner": {"reputation": 361191, "user_id": 440558, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/9ZYta.jpg?s=128&g=1", "display_name": "Some programmer dude", "link": "https://stackoverflow.com/users/440558/some-programmer-dude"}, "edited": false, "score": 1, "creation_date": 1422283988, "post_id": 28152418, "comment_id": 44676272, "body": "This is a very common problem for newbies, and is solved by placing the libraries you link with <i>after</i> the source/object files, so <code>$ gcc -L. test.c -ltest</code>"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1422284146, "post_id": 28152418, "comment_id": 44676386, "body": "Doesn&#39;t work :/ (I get the same error)"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1422284433, "post_id": 28152418, "comment_id": 44676559, "body": "@Shepmaster, @aochagavia: You shouldn&#39;t use types like <code>i32</code> or <code>isize</code> when you&#39;re dealing with C interop and types like <code>int</code> or <code>short</code>.  You should use the types in the <code>libc</code> crate like <code>c_int</code>, which are guaranteed to be the right size on all platforms."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1422284495, "post_id": 28152418, "comment_id": 44676596, "body": "@DK Is <code>i32</code> not guaranteed to be te same width on all platforms?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422284626, "post_id": 28152418, "comment_id": 44676682, "body": "@Shepmaster I am on Windows 8 64bit. Dependency Walker throws an error when I open <code>libtest.a</code>: &quot;No DOS or PE signature found. This file is not a valid 32-bit or 64-bit Windows module.&quot;"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1422288442, "post_id": 28152418, "comment_id": 44679227, "body": "@aochagavia: It is.  But <code>int</code> isn&#39;t.  <code>libc::c_int</code> is guaranteed to be the same size as <code>int</code> everywhere."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1422289060, "post_id": 28152418, "comment_id": 44679625, "body": "Which Rust version? I&#39;m using <code>rustc 1.0.0-nightly (4be79d6ac 2015-01-23 16:08:14 +0000)</code> and it works with clang and GCC perfectly."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1422302171, "post_id": 28152418, "comment_id": 44686634, "body": "@hauleth Are you also on windows? I am using rustc 1.0.0-nightly (4e4e8cff1 2015-01-24 22:14:14 +0000) and gcc 4.8.1"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422303236, "post_id": 28152418, "comment_id": 44687187, "body": "@Shepmaster this is the output of DUMPBIN /SYMBOLS <a href=\"https://gist.github.com/aochagavia/ea441d6225bb5fe8912d\" rel=\"nofollow noreferrer\">gist.github.com/aochagavia/ea441d6225bb5fe8912d</a>. There is a <code>squared</code> entry... I am on 64 bit"}, {"owner": {"reputation": 4724, "user_id": 1024740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/1037d544b43c71c34225fac55e0c7750?s=128&d=identicon&r=PG", "display_name": "Rob Latham", "link": "https://stackoverflow.com/users/1024740/rob-latham"}, "edited": false, "score": 0, "creation_date": 1422305619, "post_id": 28152418, "comment_id": 44688349, "body": "woah woah woah... where&#39;s your c code for the squared() function?  I only see a squared prototype"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4724, "user_id": 1024740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/1037d544b43c71c34225fac55e0c7750?s=128&d=identicon&r=PG", "display_name": "Rob Latham", "link": "https://stackoverflow.com/users/1024740/rob-latham"}, "edited": false, "score": 0, "creation_date": 1422305754, "post_id": 28152418, "comment_id": 44688419, "body": "@RobLatham the first line of the question says: &quot;a minimal example of calling a Rust function from C&quot;. <code>squared</code> is supposed to be coming from Rust code compiled to a library."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422306114, "post_id": 28152418, "comment_id": 44688611, "body": "@Shepmaster I have incorporated the relevant info in the question"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422307182, "post_id": 28152418, "comment_id": 44689159, "body": "I followed your instructions on a Windows 7, 32-bit VM with Rust from 2015-01-14, and was able to correctly link and run the program..."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1422312742, "post_id": 28152418, "comment_id": 44691775, "body": "@aochagavia no I&#39;m on Ubuntu (Linux niuniobook 3.13.0-45-generic #74-Ubuntu SMP Tue Jan 13 19:36:28 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422297975, "post_id": 28156554, "comment_id": 44684509, "body": "This seems related to <a href=\"http://stackoverflow.com/questions/28152418/unable-to-link-to-a-rust-compiled-library-when-compiling-a-c-program#comment44676272_28152418\">this comment</a>. OP <a href=\"http://stackoverflow.com/questions/28152418/unable-to-link-to-a-rust-compiled-library-when-compiling-a-c-program#comment44676386_28152418\">said that didn&#39;t work</a>"}, {"owner": {"reputation": 46, "user_id": 4401077, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ff061680f94784a28a2827232d8b0b8?s=128&d=identicon&r=PG", "display_name": "Dave Korn", "link": "https://stackoverflow.com/users/4401077/dave-korn"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422298991, "post_id": 28156554, "comment_id": 44685057, "body": "Oops, I missed that.  OP, try running &quot;nm libtest.a&quot; to verify that libtest.a actually has the squared() function in it,"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1422302082, "post_id": 28156554, "comment_id": 44686587, "body": "This is the output: <a href=\"https://gist.github.com/aochagavia/53891d88988826fba955\" rel=\"nofollow noreferrer\">gist.github.com/aochagavia/53891d88988826fba955</a> (no square function in it)"}], "tags": [], "owner": {"reputation": 46, "user_id": 4401077, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3ff061680f94784a28a2827232d8b0b8?s=128&d=identicon&r=PG", "display_name": "Dave Korn", "link": "https://stackoverflow.com/users/4401077/dave-korn"}, "is_accepted": false, "score": 0, "last_activity_date": 1422297647, "creation_date": 1422297647, "answer_id": 28156554, "question_id": 28152418, "link": "https://stackoverflow.com/questions/28152418/unable-to-link-to-a-rust-compiled-library-when-compiling-a-c-program/28156554#28156554", "title": "Unable to link to a Rust-compiled library when compiling a C program", "body": "<p>Put \"-ltest\" <em>after</em> \"test.c\".  ld only links in required parts of library archives, and doesn't know squared() is required until it sees the .o file generated from test.c, at which time libtest.a has already been linked earlier when no functions were yet required from it.</p>\n"}], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 906, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1422305820, "creation_date": 1422283645, "last_edit_date": 1422305820, "question_id": 28152418, "link": "https://stackoverflow.com/questions/28152418/unable-to-link-to-a-rust-compiled-library-when-compiling-a-c-program", "title": "Unable to link to a Rust-compiled library when compiling a C program", "body": "<p>I have been trying to compile and run a minimal example of calling a Rust function from C. However, I keep getting a linker error:</p>\n\n<pre><code>$ gcc -L . test.c -ltest\nC:\\Users\\...\\AppData\\Local\\Temp\\ccWuOBbj.o:test.c:(.text+0x16): undefined reference to `squared'\ncollect2.exe: error: ld returned 1 exit status\n</code></pre>\n\n<p>The C code:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nint squared(int);\n\nint main() {\n    printf(\"5 * 5 = %d\", squared(5));\n    return 0;\n}\n</code></pre>\n\n<p>The Rust code:</p>\n\n<pre><code>#![no_std]\n#![feature(lang_items)]\n\nextern crate core;\n\n#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n#[lang = \"eh_personality\"] extern fn eh_personality() {}\n#[lang = \"panic_fmt\"] fn panic_fmt() -&gt; ! { loop {} }\n\n#[no_mangle]\npub extern \"C\" fn squared(x: isize) -&gt; isize {\n    x * x\n}\n</code></pre>\n\n<p>I am compiling the Rust code with <code>rustc --crate-type staticlib -o libtest.a test.rs</code></p>\n\n<p>Some details:</p>\n\n<ul>\n<li>Windows 8 x64</li>\n<li>Rustc version: <code>1.0.0-nightly (4e4e8cff1 2015-01-24 22:14:14 +0000)</code></li>\n<li>GCC version: <code>4.8.1</code></li>\n<li><a href=\"https://gist.github.com/aochagavia/ea441d6225bb5fe8912d\" rel=\"nofollow\">Output of DUMPBIN /SYMBOLS</a></li>\n</ul>\n"}, {"tags": ["arrays", "function-pointers", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1549943313, "post_id": 28151073, "comment_id": 96076577, "body": "Curiously, this is only a limitation of <code>vec![]</code> (actually, <a href=\"https://stackoverflow.com/questions/54632524/why-does-boxing-an-array-of-function-pointers-with-box-syntax-only-work-with-a\">it&#39;s a problem with <code>box [...]</code></a>). You can easily create an array or slice of function pointers: <code>let arr = [foo, bar]</code>."}], "answers": [{"comments": [{"owner": {"reputation": 17673, "user_id": 139802, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/33c5692f72d9da5663651d034c4588b6?s=128&d=identicon&r=PG", "display_name": "Andrew Wagner", "link": "https://stackoverflow.com/users/139802/andrew-wagner"}, "edited": false, "score": 0, "creation_date": 1422281058, "post_id": 28151275, "comment_id": 44674415, "body": "Thanks! It&#39;s always a shame to see a use case get harder; I hope they had some reason for this breaking change.  Annotating the type on the left hand side isn&#39;t so bad ~if you know how to write function type signatures, which I did not yet."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1422305235, "post_id": 28151275, "comment_id": 44688155, "body": "&quot;fn items&quot; have a benefit: It avoids a call through a function pointer which is a virtual call. LLVM may <i>devirtualize</i> that call in an optimization pass, but fn item and unboxed closure calls should always be direct, without relying on the optimizer to get it right."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1462492276, "post_id": 28151275, "comment_id": 61671004, "body": "You can place them in an array, but you have to have a bit more casting: <code>let functions = [foo as fn() -&gt; isize, bar as fn() -&gt; isize];</code> or even <code>let functions: [fn() -&gt; isize; 2] = [foo, bar];</code>. You could also make a slice <code>let functions: &amp;[fn() -&gt; isize] = &amp;[foo, bar];</code>."}, {"owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "edited": false, "score": 0, "creation_date": 1502281652, "post_id": 28151275, "comment_id": 78140206, "body": "I wish I could upvote this more than once. Without inheritance in the language I completely forgot about the idea that it might be inferring too specific a type, and need to be reined in. Spent several frustrated hours on this...."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 15, "last_activity_date": 1462491125, "last_edit_date": 1462491125, "creation_date": 1422279937, "answer_id": 28151275, "question_id": 28151073, "link": "https://stackoverflow.com/questions/28151073/how-can-i-store-function-pointers-in-an-array/28151275#28151275", "title": "How can I store function pointers in an array?", "body": "<p>At some point recently, each function was given its own, distinct type for... reasons that I don't recall.  Upshot is that you need to give the compiler a hint (note the type on <code>functions</code>):</p>\n\n<pre><code>fn foo() -&gt; isize {\n    1\n}\nfn bar() -&gt; isize {\n    2\n}\nfn main() {\n    let functions: Vec&lt;fn() -&gt; isize&gt; = vec![foo, bar];\n    println!(\"foo() = {}, bar() = {}\", functions[0](), functions[1]());\n}\n</code></pre>\n\n<p>You can also do this like so:</p>\n\n<pre><code>let functions = vec![foo as fn() -&gt; isize, bar];\n</code></pre>\n"}], "owner": {"reputation": 17673, "user_id": 139802, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/33c5692f72d9da5663651d034c4588b6?s=128&d=identicon&r=PG", "display_name": "Andrew Wagner", "link": "https://stackoverflow.com/users/139802/andrew-wagner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3959, "favorite_count": 2, "closed_date": 1471829908, "accepted_answer_id": 28151275, "answer_count": 1, "score": 14, "last_activity_date": 1462491125, "creation_date": 1422279122, "last_edit_date": 1462491019, "question_id": 28151073, "link": "https://stackoverflow.com/questions/28151073/how-can-i-store-function-pointers-in-an-array", "closed_reason": "Duplicate", "title": "How can I store function pointers in an array?", "body": "<p>How do you stick functions (or function pointers) into an array for testing purposes?</p>\n\n<pre><code>fn foo() -&gt; isize { 1 }\nfn bar() -&gt; isize { 2 }\n\nfn main() {\n    let functions = vec![foo, bar];\n    println!(\"foo() = {}, bar() = {}\", functions[0](), functions[1]());\n}\n</code></pre>\n\n<p>This code in the <a href=\"https://play.rust-lang.org/?gist=e89a4cbd1b7f2b73235c624a41167bc8&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Rust playground</a></p>\n\n<p>This is the error code I get:  </p>\n\n<pre><code>error: mismatched types:\n expected `fn() -&gt; isize {foo}`,\n    found `fn() -&gt; isize {bar}`\n(expected fn item,\n    found a different fn item) [E0308]\n\n    let functions = vec![foo, bar];\n                              ^~~\n</code></pre>\n\n<p>Rust is treating my functions (values) as different types despite having the same signatures, which I find surprising.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422256922, "post_id": 28145732, "comment_id": 44663772, "body": "What syntax have you been using?"}, {"owner": {"reputation": 25, "user_id": 783176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/271a844cdb7c87b1cc6d21301c0f8b9e?s=128&d=identicon&r=PG", "display_name": "cevn", "link": "https://stackoverflow.com/users/783176/cevn"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422258020, "post_id": 28145732, "comment_id": 44664105, "body": "I&#39;ll update the post with what I just tried"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422258175, "post_id": 28145732, "comment_id": 44664148, "body": "What are the errors?"}, {"owner": {"reputation": 25, "user_id": 783176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/271a844cdb7c87b1cc6d21301c0f8b9e?s=128&d=identicon&r=PG", "display_name": "cevn", "link": "https://stackoverflow.com/users/783176/cevn"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1422258415, "post_id": 28145732, "comment_id": 44664212, "body": "Updated post again with errors"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1422259459, "creation_date": 1422259459, "answer_id": 28146483, "question_id": 28145732, "link": "https://stackoverflow.com/questions/28145732/instantiating-a-2d-vec-in-a-struct/28146483#28146483", "title": "Instantiating a 2d Vec in a Struct?", "body": "<p>Yes, you're doing it incorrectly. The similar code will also be incorrect in C/C++, BTW.</p>\n\n<pre><code>        let mut t = Vec::new();\n        let mut t2 = Vec::new();\n        for x in range(0, 80) {\n            for y in range(0, 24) {\n                t2.push(Tile::new());\n            }\n            t.push(t2);\n        }\n</code></pre>\n\n<p>The problem is, you're always pushing into the same <code>t2</code> in the inner loop and then you're always pushing the same <code>t2</code> into <code>t</code>. The latter is a violation of ownership semantics, so Rust compiler correctly tells you about using a moved value.</p>\n\n<p>The idiomatic approach is to use iterators and it could look like this:</p>\n\n<pre><code>(0..80).map(|_| (0..24).map(|_| Tile::new()).collect()).collect()\n</code></pre>\n\n<p>If you need to access indices you can use <code>map()</code> closure arguments:</p>\n\n<pre><code>(0..80).map(|x| (0..24).map(|y| Tile::new(x, y)).collect()).collect()\n</code></pre>\n\n<p>The compiler should automatically deduce the desired type of <code>collect()</code> result.</p>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422264390, "post_id": 28146789, "comment_id": 44666454, "body": "Well, the &quot;functional style&quot; is <i>the</i> idiomatic approach now, that is, in the future most of the code will be written like that :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1422265551, "post_id": 28146789, "comment_id": 44666922, "body": "@VladimirMatveev: I agree, and it is so much neater and more concise too; however I am afraid it might be too big a step up from the OP&#39;s current code so I prefer to point down <i>exactly</i> what the current problem is on top of recommending a change in style (or I should mean, letting YOU recommend a change in style)."}, {"owner": {"reputation": 25, "user_id": 783176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/271a844cdb7c87b1cc6d21301c0f8b9e?s=128&d=identicon&r=PG", "display_name": "cevn", "link": "https://stackoverflow.com/users/783176/cevn"}, "edited": false, "score": 0, "creation_date": 1422282125, "post_id": 28146789, "comment_id": 44675075, "body": "I ended up using Vladimir&#39;s solution, but yours helped me understand exactly what I was doing wrong - thanks!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1422261263, "creation_date": 1422261263, "answer_id": 28146789, "question_id": 28145732, "link": "https://stackoverflow.com/questions/28145732/instantiating-a-2d-vec-in-a-struct/28146789#28146789", "title": "Instantiating a 2d Vec in a Struct?", "body": "<p>Vladimir's answer is really nice, however I have a feeling that the functional style might hide the error here.</p>\n\n<p>You are actually not far from the solution; the issue is simply that you cannot reuse the same <code>t2</code> at each iteration of the outer loop. The simplest transformation, therefore, is to create <code>t2</code> <strong>inside</strong> the outer loop:</p>\n\n<pre><code>impl Level {\n    fn new() -&gt; Level {\n        Level {\n            tiles: {\n            let mut t = Vec::new();\n            for x in range(0, 80) {\n                let mut t2 = Vec::new(); // Moved!\n                for y in range(0, 24) {\n                    t2.push(Tile::new(x, y));\n                }\n                t.push(t2);\n            }\n            t\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 25, "user_id": 783176, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/271a844cdb7c87b1cc6d21301c0f8b9e?s=128&d=identicon&r=PG", "display_name": "cevn", "link": "https://stackoverflow.com/users/783176/cevn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 800, "favorite_count": 1, "accepted_answer_id": 28146483, "answer_count": 2, "score": 0, "last_activity_date": 1422261263, "creation_date": 1422254731, "last_edit_date": 1422259122, "question_id": 28145732, "link": "https://stackoverflow.com/questions/28145732/instantiating-a-2d-vec-in-a-struct", "title": "Instantiating a 2d Vec in a Struct?", "body": "<p>I'm having trouble instantiating a vec when using a constructor to return a new struct object. The syntax I've tried (using collect() improperly, probably) spat out a ton of compiler errors.</p>\n\n<pre><code>fn main() {\n    let level = Level::new();\n}\n\nstruct Level {\n    tiles: Vec&lt;Vec&lt;Tile&gt;&gt;\n}\n\nstruct Tile {\n    idx: i32\n}\n\nimpl Level {\n    fn new() -&gt; Level {\n        Level {\n            tiles: {\n            let mut t = Vec::new();\n            let mut t2 = Vec::new();\n            for x in range(0, 80) {\n                for y in range(0, 24) {\n                    t2.push(Tile::new(x, y));\n                }\n                t.push(t2);\n            }\n            t\n        }\n    }\n}\n\nimpl Tile {\n    fn new(x: i32, y: i32) -&gt; Tile {\n        Tile { pos: Point { x: x, y: y } }\n    }\n}\n\nstruct Point {\n    x: i32,\n    y: i32\n}\n</code></pre>\n\n<p>I get these errors: </p>\n\n<pre><code>src/game/dungeon/level/mod.rs:47:25: 47:27 error: use of moved value: `t2`\nsrc/game/dungeon/level/mod.rs:47                 t2.push(Tile::new(x, y));\n                                                     ^~\nsrc/game/dungeon/level/mod.rs:49:28: 49:30 note: `t2` moved here because it has type `collections::vec::Vec&lt;game::dungeon::level::Tile&gt;`, which is non-copyable\nsrc/game/dungeon/level/mod.rs:49                     t.push(t2);\n                                                        ^~\nsrc/game/dungeon/level/mod.rs:49:28: 49:30 error: use of moved value: `t2`\nsrc/game/dungeon/level/mod.rs:49                     t.push(t2);\n                                                        ^~\nsrc/game/dungeon/level/mod.rs:49:28: 49:30 note: `t2` moved here because it has type `collections::vec::Vec&lt;game::dungeon::level::Tile&gt;`, which is non-copyable\nsrc/game/dungeon/level/mod.rs:49                     t.push(t2);\n                                                        ^~\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422226363, "post_id": 28142410, "comment_id": 44656602, "body": "I don&#39;t understand why I need to tie <code>&#39;b</code> to <code>&#39;a</code> here. There are no references held to <code>iter</code> or any of the items in it in a <code>Node</code> instance. Why wouldn&#39;t it be sufficient for the lifetime of <code>iter</code> and the items to just be the scope of <code>lookup</code> itself?"}, {"owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422226848, "post_id": 28142410, "comment_id": 44656766, "body": "Also, according to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0192-bounds-on-object-and-generic-types.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>, <code>`b : `a</code> implies that b outlives a, not the other way around. So saying that is akin to saying that the keys used for look-up are guaranteed to live longer than the node, which isn&#39;t the case."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422244137, "post_id": 28142410, "comment_id": 44660846, "body": "Ugh. I always get that mixed up when I talk about it, thanks for the correction. I&#39;ve added a bit more exposition to my answer, maybe that helps explain a bit?"}, {"owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422247003, "post_id": 28142410, "comment_id": 44661490, "body": "Thanks for the explanation. That &quot;the type also includes the lifetime&quot; is the key insight I was missing. However, I&#39;ve got to admit I find the consequences baffling. Is there really no way to see if a container contains a key without the key living as long as the container? Isn&#39;t that fairly limiting? And also, what is the &quot;conflicting requirement&quot; the compiler talks about?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1422244090, "last_edit_date": 1422244090, "creation_date": 1422225434, "answer_id": 28142410, "question_id": 28142316, "link": "https://stackoverflow.com/questions/28142316/conflicting-requirements-for-lifetime-of-item-of-iterator-passed-as-parameter/28142410#28142410", "title": "&quot;Conflicting requirements&quot; for lifetime of item of iterator passed as parameter to method", "body": "<p>I agree that the diagnostics are less-than-ideal. I would recommend that a bug is filed; perhaps that suggester doesn't know about lifetimes in associated types yet.</p>\n\n<p>To fix your problem, I'd suggest using the same lifetime that you are already holding:</p>\n\n<pre><code>impl&lt;'a&gt; Node&lt;'a&gt; {\n    fn lookup(&amp;self, mut iter: Box&lt;Iterator&lt;Item = Key&lt;'a&gt;&gt;&gt;) -&gt; bool { //'\n        match iter.next() {\n            Some(key) =&gt; match self.children.get(&amp;key) {\n                             Some(node) =&gt; node.lookup(iter),\n                             None =&gt; false\n                         },\n            None =&gt; true\n        }\n    }\n}\n</code></pre>\n\n<p>I actually am unclear what your original code was trying to do. You define a new lifetime parameter <code>'b</code>. That lifetime will be determined <em>by the caller</em> for each call made. That's bad news, because that lifetime might last longer than the <code>Node</code> itself, leading to references to memory that are no longer valid. Yay! Rust saved us!</p>\n\n<p>Another solution would be to have an explicit lifetime <code>'b</code>, but inform Rust that it's <s>shorter or equal to than <code>'a</code> (said \"a outlives b\")</s> longer than or equal to <code>'a</code> (said \"b outlives a\"):</p>\n\n<pre><code>fn lookup&lt;'b : 'a&gt;(&amp;self, mut iter: Box&lt;Iterator&lt;Item = Key&lt;'b&gt;&gt;&gt;) -&gt; bool\n</code></pre>\n\n<h3>Further exposition</h3>\n\n<p>Here's a smaller example that shows the same problem:</p>\n\n<pre><code>use std::collections::HashSet;\n\nfn example&lt;'a, 'b&gt;(set: HashSet&lt;&amp;'a u8&gt;, key: &amp;'b u8) -&gt; bool {\n    set.contains(&amp;key)\n}\n\nfn main() {}\n</code></pre>\n\n<p>Similarly, if you setup a relationship between the lifetimes (<code>&lt;'a, 'b : 'a&gt;</code>) or make both parameters the same lifetime, then this code will compile.</p>\n\n<p>Both <a href=\"http://doc.rust-lang.org/std/collections/struct.HashSet.html#method.contains\" rel=\"nofollow\"><code>HashSet::contains</code></a> and <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get\" rel=\"nofollow\"><code>HashMap::get</code></a> lookup the key by taking a reference to the key type (or something that can <a href=\"http://doc.rust-lang.org/std/borrow/trait.BorrowFrom.html\" rel=\"nofollow\">lend out a reference</a> to the key type). However, the key that you are looking up must be the same type (or subtype) that you have stored. In this case, the type <em>also includes the lifetime</em>. That's why using the same lifetime (or one that outlives the key) allows it to compile.</p>\n"}, {"comments": [{"owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 1, "creation_date": 1422328309, "post_id": 28147254, "comment_id": 44696268, "body": "Thanks for the explanation. I suspect I&#39;m still a little fuzzy on what exactly <code>&#39;a</code> denotes here. Consider the code at this (modified) playpen: <a href=\"http://is.gd/fEkekL\" rel=\"nofollow noreferrer\">is.gd/fEkekL</a>. Clearly, the iterator and its items don&#39;t live as long as the <code>Node</code> instance lifetime, which is what I thought <code>&#39;a</code> denoted. Yet this compiles. What am I overlooking?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422704357, "post_id": 28147254, "comment_id": 44861725, "body": "@Ray: I&#39;m not sure I understand the question. But I&#39;m almost sure that this playpen code snippet is not really what you want. I just realized what you are actually trying to achieve here. Let me get back to you later."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422753087, "post_id": 28147254, "comment_id": 44874765, "body": "@Ray: Please have a look at my updated answer. I think, it should solve your problem just fine \u2013 that is, as long as you still want to stick to HashMaps storing references to string slices (which surely led you to this level of complexity)"}, {"owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422758111, "post_id": 28147254, "comment_id": 44875534, "body": "Thanks a lot, @sellibitze! I&#39;ve accepted the answer. I did have a question regarding your last sentence, though. It seems like you&#39;re implying there&#39;s a better design that avoids the complexity. Is there? FWIW, the <code>Key</code> definition I provided was oversimplified for illustration purposes. The real <code>Key</code> is <code>enum Key { A(String), B(String) }</code> and I was hoping to use something equivalent but with <code>&amp;str</code> for querying (I have no idea if that&#39;s at all possible)."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422759603, "post_id": 28147254, "comment_id": 44875759, "body": "@Ray: If you make the <code>HashMap</code> store <code>String</code> keys instead of something like <code>&amp;str</code>, things will automatically get easier and less constrained at the cost of additional allocations for all the <code>String</code>s&#39; buffers. And thanks to <code>BorrowFrom</code> you can still directly pass a <code>&amp;str</code> via <code>get</code>. So, for the lookup, you could still benefit from string slices in the sense of avoiding unnecessary String allocations."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422759820, "post_id": 28147254, "comment_id": 44875788, "body": "If you want to use <code>enum Key { A(String), B(String) }</code> as key type and be able to query the map with a <code>&amp;str</code> then you can do that by implementing <code>BorrowFrom&lt;Key&gt;</code> for <code>str</code>. I just don&#39;t see the point in this A/B thingy. You might have to be careful about <code>Key</code> and <code>&amp;str</code> both being hashable in a compatible way."}, {"owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422762358, "post_id": 28147254, "comment_id": 44876199, "body": "What I was getting at was potentially using something like <code>enum KeyRef { A(&amp;str), B(&amp;str) }</code> for lookup. I&#39;m assuming I can use <code>BorrowFrom</code> here, as well. The use case is something more like (but not actually) <code>enum Shoe { Men(String), Women(String) }</code> where the string is the shoe model name, assuming that the same model name can have a men&#39;s and women&#39;s variant."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "edited": false, "score": 0, "creation_date": 1422787532, "post_id": 28147254, "comment_id": 44880711, "body": "@Ray: Do, do you want Men(x) to always be a different key than Woman(y) regardless of x and y? If so, you could not use <code>str</code> for lookup, because it will hash differently and lack the Men/Woman distinction."}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": true, "score": 7, "last_activity_date": 1422754441, "last_edit_date": 1422754441, "creation_date": 1422263542, "answer_id": 28147254, "question_id": 28142316, "link": "https://stackoverflow.com/questions/28142316/conflicting-requirements-for-lifetime-of-item-of-iterator-passed-as-parameter/28147254#28147254", "title": "&quot;Conflicting requirements&quot; for lifetime of item of iterator passed as parameter to method", "body": "<p>First, one suggestion: Since a boxed iterator is also an iterator, you can change your lookup function to</p>\n\n<pre><code>fn lookup&lt;'b, I: Iterator&lt;Item = Key&lt;'b&gt;&gt;&gt;(&amp;self, mut iter: I) -&gt; bool {\n    match iter.next() {\n        Some(key) =&gt; match self.children.get(&amp;key) {\n                         Some(node) =&gt; node.lookup(iter),\n                         None =&gt; false\n                     },\n        None =&gt; true\n    }\n}\n</code></pre>\n\n<p>which is a bit more general. But the problem still persists. You're trying to pass a <code>&amp;Key&lt;'b&gt;</code> in <code>self.children.get(&amp;key)</code> to the HashMap which actually expects a <code>&amp;Q</code> where <code>Q</code> implements <code>BorrowFrom&lt;Key&lt;'a&gt;&gt;</code>. The compiler's suggestion is now to replace <code>'b</code> with <code>'a</code> like this:</p>\n\n<pre><code>fn lookup&lt;I: Iterator&lt;Item = Key&lt;'a&gt;&gt;&gt;(&amp;self, mut iter: I) -&gt; bool { //'\n    match iter.next() {\n        Some(key) =&gt; match self.children.get(&amp;key) {\n                         Some(node) =&gt; node.lookup(iter),\n                         None =&gt; false\n                     },\n        None =&gt; true\n    }\n}\n</code></pre>\n\n<p>which surely will make the compiler happy. But this is not really what you want! It would unnecessarily restrict the set of string slices you could use as parameters for your lookup. This way, you can only use string slices which refer to memory that is at least as long-lived as the scope that <code>'a</code> is referring to. But for a lookup this restriction is not actually needed.</p>\n\n<p>The solution is to completely get rid of any lifetime parameters in the type parameter <code>Q</code> of the HashMap's <code>get</code> function. Instead of using <code>Q=Key&lt;'something&gt;</code>, we can actually use <code>Q=str</code>. We just need to add the following <code>BorrowFrom</code> implementation</p>\n\n<pre><code>impl&lt;'a&gt; BorrowFrom&lt;Key&lt;'a&gt;&gt; for str {\n    fn borrow_from&lt;'s&gt;(owned: &amp;'s Key&lt;'a&gt;) -&gt; &amp;'s str {\n        owned.v\n    }\n}\n</code></pre>\n\n<p>and make the <code>Key</code> type public (since it's used as parameter in a public trait). The lookup function that worked for me looks like this:</p>\n\n<pre><code>fn lookup_iter&lt;'b, I: Iterator&lt;Item = Key&lt;'b&gt;&gt;&gt;(&amp;self, mut i: I) -&gt; bool {\n    if let Some(key) = i.next() {\n        match self.children.get(key.v) {\n            Some(node_box_ref) =&gt; node_box_ref.lookup_iter(i),\n            None =&gt; false\n        }\n    } else {\n        true\n    }\n}\n</code></pre>\n\n<p>And if we piece everything together, we get</p>\n\n<pre><code>#![feature(core)]\n#![feature(hash)]\n#![feature(std_misc)]\n#![feature(collections)]\n\nuse std::collections::HashMap;\nuse std::collections::hash_map::Entry::{ Occupied, Vacant };\nuse std::borrow::BorrowFrom;\n\n#[derive(PartialEq, Eq, Hash, Clone)]\npub struct Key&lt;'a&gt; {\n    v: &amp;'a str\n}\n\nimpl&lt;'a&gt; BorrowFrom&lt;Key&lt;'a&gt;&gt; for str {\n    fn borrow_from&lt;'s&gt;(owned: &amp;'s Key&lt;'a&gt;) -&gt; &amp;'s str {\n        owned.v\n    }\n}\n\nfn str_to_key(s: &amp;str) -&gt; Key { \n    Key { v: s }\n}\n\nstruct Node&lt;'a&gt; {\n    children: HashMap&lt;Key&lt;'a&gt;, Box&lt;Node&lt;'a&gt;&gt;&gt;\n}\n\nimpl&lt;'a&gt; Node&lt;'a&gt; {\n    fn add_str(&amp;mut self, s: &amp;'a str) {\n        self.add_iter(s.split('.').map(str_to_key))\n    }\n\n    fn add_iter&lt;I&gt;(&amp;mut self, mut i: I) where I: Iterator&lt;Item = Key&lt;'a&gt;&gt; { //'\n        if let Some(key) = i.next() {\n            let noderef =\n                match self.children.entry(key) {\n                    Vacant(e) =&gt; {\n                        let n = Node { children: HashMap::new() };\n                        e.insert(Box::new(n))\n                    }\n                    Occupied(e) =&gt; {\n                        e.into_mut()\n                    }\n                };\n            noderef.add_iter(i);\n        }\n    }\n\n    fn lookup_str(&amp;self, s: &amp;str) -&gt; bool {\n        self.lookup_iter(s.split('.').map(str_to_key))\n    }\n\n    fn lookup_iter&lt;'b, I&gt;(&amp;self, mut i: I) -&gt; bool where I: Iterator&lt;Item = Key&lt;'b&gt;&gt; {\n        if let Some(key) = i.next() {\n            match self.children.get(key.v) {\n                Some(node_box_ref) =&gt; node_box_ref.lookup_iter(i),\n                None =&gt; false\n            }\n        } else {\n            true\n        }\n    }\n}\n\nfn main() {\n    let mut node: Node&lt;'static&gt; = Node { children: HashMap::new() }; //'\n    node.add_str(\"one.two.three\");\n    { // &lt;-- \"inner scope\"\n        let s = String::from_str(\"one.two.three\");\n        println!(\"lookup: {:?}\", node.lookup_str(&amp;*s));\n    }\n    println!(\"The End\");\n}\n</code></pre>\n\n<p>As you can see, I deliberately made <code>node</code> a <code>Node&lt;'static&gt;</code>, so the node's lifetime parameter <code>'a</code> actually refers to the lifetime of the whole program. It's OK in this example because the only string slice it will store is a string literal. Note that for the lookup I created a short-lived <code>String</code> object. So, the lifetime parameter <code>'b</code> in <code>node.lookup_str</code> will refer to the \"inner scope\" which is obviously shorter than <code>'a='static</code>. And it all works out! :)</p>\n\n<p>Oh, I also got rid of the iterator boxing.</p>\n"}], "owner": {"reputation": 1549, "user_id": 104180, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b7513dc7fb65986529417c59f044901e?s=128&d=identicon&r=PG", "display_name": "Ray", "link": "https://stackoverflow.com/users/104180/ray"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 705, "favorite_count": 1, "accepted_answer_id": 28147254, "answer_count": 2, "score": 2, "last_activity_date": 1422754441, "creation_date": 1422224798, "last_edit_date": 1422380968, "question_id": 28142316, "link": "https://stackoverflow.com/questions/28142316/conflicting-requirements-for-lifetime-of-item-of-iterator-passed-as-parameter", "title": "&quot;Conflicting requirements&quot; for lifetime of item of iterator passed as parameter to method", "body": "<p>I'm trying to get this code to compile:</p>\n\n<pre><code>use std::collections::HashMap;\n\n#[derive(PartialEq, Eq, Hash, Clone)]\nstruct Key&lt;'a&gt; {\n    v: &amp;'a str\n}\n\nfn make_key_iter(s: &amp;str) -&gt; Box&lt;Iterator&lt;Item = Key&gt;&gt; {\n    Box::new(s.split('.').map(|e| Key { v: e }))\n}\n\nstruct Node&lt;'a&gt; {\n    children: HashMap&lt;Key&lt;'a&gt;, Box&lt;Node&lt;'a&gt;&gt;&gt;\n}\n\nimpl&lt;'a&gt; Node&lt;'a&gt; {\n    fn lookup&lt;'b&gt;(&amp;self, mut iter: Box&lt;Iterator&lt;Item = Key&lt;'b&gt;&gt;&gt;) -&gt; bool {\n        match iter.next() {\n            Some(key) =&gt; match self.children.get(&amp;key) {\n                             Some(node) =&gt; node.lookup(iter),\n                             None =&gt; false\n                         },\n            None =&gt; true\n        }\n    }\n}\n\nfn main() {\n    let s = \"a.b.c.d\".to_string();\n    let iter = make_key_iter(s.as_slice());\n    let node = Node { children: HashMap::new() };\n    node.lookup(iter);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Acollections%3A%3AHashMap%3B%0A%0A%23%5Bderive(PartialEq%2C%20Eq%2C%20Hash%2C%20Clone)%5D%0Astruct%20Key%3C%27a%3E%20%7B%0A%20%20%20%20v%3A%20%26%27a%20str%0A%7D%0A%0Afn%20make_key_iter(s%3A%20%26str)%20-%3E%20Box%3CIterator%3CItem%20%3D%20Key%3E%3E%20%7B%0A%20%20%20%20Box%3A%3Anew(s.split(%27.%27).map(%7Ce%7C%20Key%20%7B%20v%3A%20e%20%7D))%0A%7D%0A%0Astruct%20Node%3C%27a%3E%20%7B%0A%20%20%20%20children%3A%20HashMap%3CKey%3C%27a%3E%2C%20Box%3CNode%3C%27a%3E%3E%3E%0A%7D%0A%0Aimpl%3C%27a%3E%20Node%3C%27a%3E%20%7B%0A%20%20%20%20fn%20lookup%3C%27b%3E(%26self%2C%20mut%20iter%3A%20Box%3CIterator%3CItem%20%3D%20Key%3C%27b%3E%3E%3E)%20-%3E%20bool%20%7B%0A%20%20%20%20%20%20%20%20match%20iter.next()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Some(key)%20%3D%3E%20match%20self.children.get(%26key)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Some(node)%20%3D%3E%20node.lookup(iter)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20None%20%3D%3E%20false%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20None%20%3D%3E%20true%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20s%20%3D%20%22a.b.c.d%22.to_string()%3B%0A%20%20%20%20let%20iter%20%3D%20make_key_iter(s.as_slice())%3B%0A%20%20%20%20let%20node%20%3D%20Node%20%7B%20children%3A%20HashMap%3A%3Anew()%20%7D%3B%0A%20%20%20%20node.lookup(iter)%3B%0A%7D\" rel=\"nofollow\">Playpen link</a></p>\n\n<p>Compiling that gives the following error:</p>\n\n<pre><code>&lt;anon&gt;:18:20: 18:26 error: cannot infer an appropriate lifetime due to conflicting requirements\n&lt;anon&gt;:18         match iter.next() {\n                         ^~~~~~\n&lt;anon&gt;:17:5: 25:6 help: consider using an explicit lifetime parameter as shown: fn lookup(&amp;self, mut iter: Box&lt;Iterator&lt;Item = Key&lt;'b&gt;&gt;&gt;) -&gt; bool\n</code></pre>\n\n<p>What's really confusing is that the signature the compiler suggests is invalid altogether because it uses an undefined lifetime.</p>\n"}, {"tags": ["rust", "inferred-type"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1422222137, "post_id": 28141695, "comment_id": 44655306, "body": "I certainly would expect the type inference to unify the return type (which has the <code>f32</code>) with the type of the expression <code>Ok(value)</code> and deduce that <code>value : f32</code>. Can you make sure that&#39;s really the issue by adding a type hint to the <code>from_str</code> call? I.e. <code>&lt;f32 as FromStr&gt;::from_str(strvalue)</code>? <b>Edit</b>: Yeah, that fixes it for me. Still no clue as to why, or whether that&#39;s the best solution, so I won&#39;t post an answer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422224100, "post_id": 28141695, "comment_id": 44655932, "body": "@delnan I think it&#39;s fine to post &quot;partial&quot; answers when the question is actually multiple questions."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1422224794, "post_id": 28141695, "comment_id": 44656139, "body": "This is got to be a bug. If I change the original code to be <code>if 0.0 &lt;= value</code>, it compiles. I&#39;ve filed <a href=\"https://github.com/rust-lang/rust/issues/21634\" rel=\"nofollow noreferrer\">21634</a>"}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 1, "creation_date": 1422776021, "post_id": 28141695, "comment_id": 44878354, "body": "For the record, the <code>FromStr::from_str</code> has been changed to return a <code>Result&lt;_, _&gt;</code> instead of <code>Option&lt;_&gt;</code>. So if you try it on Rust master, keep this in mind."}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1422776386, "post_id": 28141695, "comment_id": 44878418, "body": "And the fix (<a href=\"https://github.com/rust-lang/rust/pull/21817\" rel=\"nofollow noreferrer\">21817</a>) is on its way to the master :D"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1422223754, "last_edit_date": 1422223754, "creation_date": 1422223369, "answer_id": 28142085, "question_id": 28141695, "link": "https://stackoverflow.com/questions/28141695/inferring-types-and-using-type-annotations-when-parsing-a-string-to-a-number/28142085#28142085", "title": "Inferring types and using type annotations when parsing a string to a number", "body": "<p>To work around it, I'd suggest using the <a href=\"http://doc.rust-lang.org/std/str/trait.StrExt.html#tymethod.parse\" rel=\"nofollow\"><code>parse</code></a> method with a type parameter. To specify a functions type parameter, instead of calling <code>foo()</code>, you call <code>foo::&lt;types&gt;()</code>:</p>\n\n<pre><code>fn read_value(strvalue: &amp;str) -&gt; Result&lt;f32, u8&gt; {\n    match strvalue.parse::&lt;f32&gt;() {\n        None =&gt; Err(1),\n        Some(value) =&gt; if value &gt;= 0.0 {Ok(value)} else {Err(2)}\n    }\n}\n</code></pre>\n\n<p>Another form that works without a type annotation (and hints that this might be a bug). This version uses a <em>match guard</em>:</p>\n\n<pre><code>fn read_value(strvalue: &amp;str) -&gt; Result&lt;f32, u8&gt; {\n    match FromStr::from_str(strvalue) {\n        None =&gt; Err(1),\n        Some(value) if value &gt;= 0.0 =&gt; Ok(value),\n        _ =&gt; Err(2),\n    }\n}\n</code></pre>\n\n<p>And another using chained methods, representing it as a series of transforms:</p>\n\n<pre><code>fn read_value_chain(strvalue: &amp;str) -&gt; Result&lt;f32, u8&gt; {\n    strvalue.parse()\n        .ok_or(1)\n        .and_then(|v: f32| if v &gt; 0.0 { Ok(v) } else { Err(2) })\n}\n</code></pre>\n"}], "owner": {"reputation": 385, "user_id": 2850247, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1103bf4cf6a2d352956f4b42dd8209bc?s=128&d=identicon&r=PG", "display_name": "uv.nikita", "link": "https://stackoverflow.com/users/2850247/uv-nikita"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3665, "favorite_count": 0, "accepted_answer_id": 28142085, "answer_count": 1, "score": 3, "last_activity_date": 1422324686, "creation_date": 1422221085, "last_edit_date": 1422324686, "question_id": 28141695, "link": "https://stackoverflow.com/questions/28141695/inferring-types-and-using-type-annotations-when-parsing-a-string-to-a-number", "title": "Inferring types and using type annotations when parsing a string to a number", "body": "<p>I'm trying to write a function that will parse float from given string. It should return error in case of wrong or negative value.</p>\n\n<pre><code>fn read_value(strvalue: &amp;str) -&gt; Result&lt;f32, Error&gt; {\n    match FromStr::from_str(strvalue) {\n        None =&gt; Err(Error::InvalidValue),\n        Some(value) =&gt; if value &gt;= 0.0 {Ok(value)} else {Err(Error::InvalidValue)}\n    }\n}\n</code></pre>\n\n<p>This code gives:</p>\n\n<pre><code>src/main.rs:50:27: 50:32 error: the type of this value must be known in this context\nsrc/main.rs:50         Some(value) =&gt; if value &gt;= 0.0 {Ok(value)} else {Err(Error::InvalidValue)}\n</code></pre>\n\n<p>The first point. This error seems strange to me because, if I understand correctly, type of <code>value</code> can be inferred automatically. From the result type the type of <code>value</code> must be <code>f32</code>.</p>\n\n<p>The second question. How can I fix this error? Or more general - how to annotate types of expressions in Rust?</p>\n\n<p>E.g. in Haskell I can write something like:</p>\n\n<pre><code>if (value :: f32) &gt; 0.0 ...\n</code></pre>\n\n<p>Or put type annotation in pattern match::</p>\n\n<pre><code>Some(value :: f32) =&gt; ...\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user4413591"}, "edited": false, "score": 0, "creation_date": 1422194880, "post_id": 28137192, "comment_id": 44646299, "body": "It coverted to usize implicitly"}, {"owner": {"reputation": 3804, "user_id": 541794, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e68f829331a1daed2bc631493c6e9e92?s=128&d=identicon&r=PG", "display_name": "forgemo", "link": "https://stackoverflow.com/users/541794/forgemo"}, "edited": false, "score": 0, "creation_date": 1422195430, "post_id": 28137192, "comment_id": 44646471, "body": "I know, but why would the compiler allow me to do something like this!?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422204824, "post_id": 28137694, "comment_id": 44649252, "body": "Is this really a case of under/overflow? I was under the impression that under/overflow always required a math operation (add, subtract, etc.)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422205296, "post_id": 28137694, "comment_id": 44649444, "body": "@Shepmaster: I am not sure there is an exact definition, I certainly do not see why a lossy conversation could not be considered to either underflow or overflow. Whether Rust chooses to qualify it so hinges on the RFC though."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1422207480, "post_id": 28137694, "comment_id": 44650208, "body": "Usually wraparound is a behavior (possibly well-defined) and overflow is the name of an error condition. In C, unsigned arithmetic wraps around. In C, signed addition may overflow."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422208134, "post_id": 28137694, "comment_id": 44650425, "body": "Looks like theres been discussion in <a href=\"https://github.com/rust-lang/rust/issues/5477\" rel=\"nofollow noreferrer\">issue #5477</a> and the <a href=\"http://discuss.rust-lang.org/t/a-tale-of-twos-complement/1062/61\" rel=\"nofollow noreferrer\">forum</a>"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1422197281, "creation_date": 1422197281, "answer_id": 28137694, "question_id": 28137192, "link": "https://stackoverflow.com/questions/28137192/why-can-i-assign-a-negative-number-to-an-unsigned-integer-variable/28137694#28137694", "title": "Why can I assign a negative number to an unsigned integer variable?", "body": "<p>Up until now, Rust has defined the semantics of underflow and overflow on integral types as wrap-around modulo 2. Therefore, assigning <code>-2</code> to an unsigned integer is simply asking for its maximum minus one.</p>\n\n<p>Those semantics are <a href=\"https://github.com/rust-lang/rfcs/pull/560\" rel=\"noreferrer\">being challenged right now</a> and the gist of it is that for 1.0 underflow and overflow will yield an unspecified value (and possibly <code>panic!</code>); though for performance reasons the tests will only be systemic in Debug mode and will be disabled by default in Release mode.</p>\n\n<p>In this new direction, it would be reasonable to consider assigning a negative value to an unsigned integer an error, and I can only invite you to chime in on the linked RFC so as to voice your concern.</p>\n"}], "owner": {"reputation": 3804, "user_id": 541794, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e68f829331a1daed2bc631493c6e9e92?s=128&d=identicon&r=PG", "display_name": "forgemo", "link": "https://stackoverflow.com/users/541794/forgemo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2133, "favorite_count": 0, "accepted_answer_id": 28137694, "answer_count": 1, "score": 3, "last_activity_date": 1422204892, "creation_date": 1422194167, "last_edit_date": 1422204892, "question_id": 28137192, "link": "https://stackoverflow.com/questions/28137192/why-can-i-assign-a-negative-number-to-an-unsigned-integer-variable", "title": "Why can I assign a negative number to an unsigned integer variable?", "body": "<p>Why isn't the following Rust-Code failing?!</p>\n\n<pre><code>fn main() {\n    let a:usize = -2;\n    assert!(a == -2);\n}\n</code></pre>\n\n<ul>\n<li>I would expect a compile time error, since I'm trying to assign a signed number to an unsigned variable.</li>\n<li>I would also expect the assertion to fail, since <code>a</code> can't be negative. </li>\n</ul>\n\n<p>Neither of both is happening, why? </p>\n\n<p>Shouldn't the compiler protect me from common overflow issues?</p>\n"}, {"tags": ["generics", "methods", "static", "rust"], "answers": [{"comments": [{"owner": {"reputation": 317, "user_id": 4491989, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh6.googleusercontent.com/-Njq06U36KfI/AAAAAAAAAAI/AAAAAAAAACI/LDsRnAz9u_c/photo.jpg?sz=128", "display_name": "faiface", "link": "https://stackoverflow.com/users/4491989/faiface"}, "edited": false, "score": 0, "creation_date": 1422193269, "post_id": 28136991, "comment_id": 44645861, "body": "Thanks, this works. The general syntax however must have been added recently, because it doesn&#39;t work on my local compiler (which is not the bleeding-edge version), but it works on the Rust&#39;s website, so I will have to update my compiler. :)"}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422280571, "post_id": 28136991, "comment_id": 44674142, "body": "I found it very interesting that it is possible to call methods on traits directly !"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 7, "last_activity_date": 1422192864, "creation_date": 1422192864, "answer_id": 28136991, "question_id": 28136946, "link": "https://stackoverflow.com/questions/28136946/how-to-call-a-static-trait-method-like-stdnumfloatepsilon/28136991#28136991", "title": "How to call a static trait method like std::num::Float::epsilon()?", "body": "<p>Static methods on traits are called like <code>Float::epsilon</code>. That means that this will work, if you give it a type hint to match against the <code>Self</code> type of the trait.</p>\n\n<pre><code>use std::num::Float;\n\nlet eps: f32 = Float::epsilon();\n</code></pre>\n\n<p>There is a general syntax for calling a particular trait method, if it is impossible to deduce the concrete trait implementor any other way, for example if there is no <code>Self</code> in the signature at all:</p>\n\n<pre><code>&lt;f32 as Float&gt;::epsilon()\n</code></pre>\n\n<p>or if you have a type parameter <code>F: Float</code>:</p>\n\n<pre><code>&lt;F as Float&gt;::epsilon()\n</code></pre>\n"}], "owner": {"reputation": 317, "user_id": 4491989, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh6.googleusercontent.com/-Njq06U36KfI/AAAAAAAAAAI/AAAAAAAAACI/LDsRnAz9u_c/photo.jpg?sz=128", "display_name": "faiface", "link": "https://stackoverflow.com/users/4491989/faiface"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 177, "favorite_count": 0, "accepted_answer_id": 28136991, "answer_count": 1, "score": 3, "last_activity_date": 1422205016, "creation_date": 1422192529, "last_edit_date": 1422205016, "question_id": 28136946, "link": "https://stackoverflow.com/questions/28136946/how-to-call-a-static-trait-method-like-stdnumfloatepsilon", "title": "How to call a static trait method like std::num::Float::epsilon()?", "body": "<p>I'm just starting learning Rust a little and I have hit this issue I am unable to solve.</p>\n\n<p>In Rust, there are static methods in std::num::Float trait (and in other traits as well), that take no parameters. That would be ok, but I'm finding them unable to call. I have tried these options:</p>\n\n<pre><code>Float::epsilon()         // complains that \"type annotations required\"\nFloat::&lt;f32&gt;::epsilon()  // complains \"too many type parameters provided\"\nFloat::epsilon::&lt;f32&gt;()  // same thing as the previous one\nf32::epsilon()           // I'd love this syntax to work, but it doesn't\n</code></pre>\n\n<p>Has anyone out there tackled this problem? Is it just me being stupid, or is this a real problem within Rust itself?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1422192288, "post_id": 28136739, "comment_id": 44645525, "body": "I don&#39;t think so, but <a href=\"http://www.reddit.com/r/rust/comments/1z3dnx/ints_in_generic_type_parameters/\" rel=\"nofollow noreferrer\">it has been discussed before</a>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1489062283, "post_id": 28137604, "comment_id": 72512663, "body": "@Byron: For information, non-type parameters are coming with the <a href=\"https://github.com/rust-lang/rfcs/issues/1930\" rel=\"nofollow noreferrer\">Pi Types Trilogy</a>, still at RFC stage though."}, {"owner": {"reputation": 5405, "user_id": 4619958, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/cVA9W.png?s=128&g=1", "display_name": "ch271828n", "link": "https://stackoverflow.com/users/4619958/ch271828n"}, "edited": false, "score": 0, "creation_date": 1600495781, "post_id": 28137604, "comment_id": 113112094, "body": "In 2020 it seems we still cannot use it? Thanks!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5405, "user_id": 4619958, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/cVA9W.png?s=128&g=1", "display_name": "ch271828n", "link": "https://stackoverflow.com/users/4619958/ch271828n"}, "edited": false, "score": 0, "creation_date": 1600511350, "post_id": 28137604, "comment_id": 113115135, "body": "@ch271828n: Not quite yet, indeed. There is a proposal to stabilize a <a href=\"https://github.com/rust-lang/rust/issues/74878\" rel=\"nofollow noreferrer\">minimum subset of const generics</a> which would allow it, and hope that it will be implemented around the end of the year."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 36, "last_activity_date": 1617029499, "last_edit_date": 1617029499, "creation_date": 1422196768, "answer_id": 28137604, "question_id": 28136739, "link": "https://stackoverflow.com/questions/28136739/is-it-possible-to-control-the-size-of-an-array-using-the-type-parameter-of-a-gen/28137604#28137604", "title": "Is it possible to control the size of an array using the type parameter of a generic?", "body": "<h1>Rust 1.51</h1>\n<p>Use <em>const generics</em>:</p>\n<pre><code>struct Vec&lt;T: Sized, const COUNT: usize&gt; {\n    a: [T; COUNT],\n}\n</code></pre>\n<h1>Previous versions</h1>\n<p><a href=\"https://rust-lang.github.io/rfcs/2000-const-generics.html\" rel=\"nofollow noreferrer\">RFC 2000 \u2014 const generics</a> introduces support for this and progress is tracked in <a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"nofollow noreferrer\">issue #44580</a>.</p>\n<p>If you look at the design of Rust, you will notice that it started first by tackling the hardest problems (memory-safe, data-race free) but there are otherwise lots of areas where it is &quot;incomplete&quot; (compared to what could be achieved).</p>\n<p>In particular, generic structures and functions started out somewhat limited:</p>\n<ul>\n<li>lack of Higher Kinded Types (HKT)</li>\n<li>lack of non-type parameters =&gt; arrays are special-cased, and implementing a trait for an array is <a href=\"https://github.com/rust-lang/rust/issues/7622\" rel=\"nofollow noreferrer\">a known issue</a>, the work-around being to implement it for a few different dimensions</li>\n<li>lack of variadic parameters =&gt; tuples are special-cased, and implementing a trait for all tuples is similarly difficult</li>\n</ul>\n<p>For the moment, not all of these are implemented, not because they are not desired but simply because time was lacking. The idea of Rust 1.0 was not to release a final product that would not evolve, but a stable base from which to start; some or maybe all will come.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1554056526, "last_edit_date": 1554056526, "creation_date": 1489113347, "answer_id": 42709150, "question_id": 28136739, "link": "https://stackoverflow.com/questions/28136739/is-it-possible-to-control-the-size-of-an-array-using-the-type-parameter-of-a-gen/42709150#42709150", "title": "Is it possible to control the size of an array using the type parameter of a generic?", "body": "<p>While waiting for Rust to gain first-class support for this, there are crates that provide certain levels of this functionality, such as: </p>\n\n<ul>\n<li><a href=\"https://crates.io/crates/typenum\" rel=\"noreferrer\">typenum</a></li>\n<li><a href=\"https://crates.io/crates/generic-array\" rel=\"noreferrer\">generic-array</a></li>\n</ul>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7278, "favorite_count": 8, "accepted_answer_id": 28137604, "answer_count": 2, "score": 34, "last_activity_date": 1617029499, "creation_date": 1422191244, "last_edit_date": 1489113194, "question_id": 28136739, "link": "https://stackoverflow.com/questions/28136739/is-it-possible-to-control-the-size-of-an-array-using-the-type-parameter-of-a-gen", "title": "Is it possible to control the size of an array using the type parameter of a generic?", "body": "<p>What follows is just used as an example, and not valid Rust code.</p>\n\n<pre><code>struct Vec&lt;T: Sized, Count&gt; {\n    a: [T; Count]\n}\n</code></pre>\n\n<p>Something like it is possible in C++ templates, but I haven't seen it in Rust.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1422184145, "post_id": 28135637, "comment_id": 44643333, "body": "Your solution is even better than the one I found in the meanwhile while studying the iterator implementation. Thanks a lot for the fast reply !"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1422183713, "creation_date": 1422183713, "answer_id": 28135637, "question_id": 28135373, "link": "https://stackoverflow.com/questions/28135373/inheritance-of-generic-trait-implementation/28135637#28135637", "title": "&#39;inheritance&#39; of generic trait implementation", "body": "<p>The problem is that, as of the last day or so (due to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0565-show-string-guidelines.md\" rel=\"noreferrer\">RFC 565</a>), it's not called <code>Show</code> any more.  You need to use <code>Debug</code> instead:</p>\n\n<pre><code>#![allow(unstable)]\nuse std::borrow::ToOwned;\nuse std::fmt::Debug;\n\ntrait Outspoken {\n    fn speak(&amp;self) -&gt; String;\n}\n\nimpl&lt;T&gt; Outspoken for T where T: Debug {\n    fn speak(&amp;self) -&gt; String {\n        format!(\"{:?}\", self)\n    }\n}\n\n#[derive(Debug)]\nstruct MyType(i32);\n\nfn main() {\n    assert_eq!(format!(\"{:?}\", MyType(15)), \"MyType(15)\");\n    assert_eq!(MyType(20).speak(), \"MyType(20)\".to_owned());\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2944, "favorite_count": 0, "accepted_answer_id": 28135637, "answer_count": 1, "score": 1, "last_activity_date": 1422186054, "creation_date": 1422181571, "last_edit_date": 1422186054, "question_id": 28135373, "link": "https://stackoverflow.com/questions/28135373/inheritance-of-generic-trait-implementation", "title": "&#39;inheritance&#39; of generic trait implementation", "body": "<p>I wanted to try implementing a trait generically and have users of the trait inherit this 'base' implementation automatically as long as they are compatible.</p>\n\n<p>This is the test-code I came up with (note that <code>fmt::Show</code> is <code>std::fmt::Show</code>):</p>\n\n<pre><code>trait Outspoken {\n    fn speak(&amp;self) -&gt; String;\n}\n\nimpl&lt;T: fmt::Show&gt; Outspoken for T {\n    fn speak(&amp;self) -&gt; String {\n        format!(\"{:?}\", self)\n    }\n}\n\n// In theory, we can now let my-types speak\n#[derive(Show)]\nstruct MyType(i32);\n\n// 'Show' works\nassert_eq!(format!(\"{:?}\", MyType(15)), \"MyType(15)\");\n// speak() however, doesn't\nlet mti = MyType(20);\nmti.speak();\n</code></pre>\n\n<p>However, rust doesn't know that <code>MyType</code> is a viable candidate for the generic implementation as it didn't associate the trait with it yet. The code above produces the following errors:</p>\n\n<p><code>\ntests/lang.rs:523:9: 523:16 error: type `generics_and_traits::MyType` does not implement any method in scope named `speak`\ntests/lang.rs:523     mti.speak();\n                          ^~~~~~~\ntests/lang.rs:523:16: 523:16 help: methods from traits can only be called if the trait is implemented and in scope; the following trait defines a method `speak`, perhaps you need to implement it:\ntests/lang.rs:523:16: 523:16 help: candidate #1: `generics_and_traits::Outspoken`\nerror: aborting due to previous error\n</code></p>\n\n<p><strong>How can I associate the trait with my type ?</strong>\nAre there any alternatives to achieve that instead of actually implementing the trait ?</p>\n\n<h2>My Conclusion</h2>\n\n<p>The approved answer clearly is the absolute right way to implement this. Just for completeness, I am showing the code I came up with in the meanwhile, which also taught me how traits can be amended to.</p>\n\n<p>Lesson learned is that <em>traits</em> in the generic system are used like markers to select (and thus restrict) the set of types you want to apply the generic implementation to.</p>\n\n<p>Trait amendments are useful if you want to separate your interface from generic implementation that use such interface, which should automatically be made available to anyone who implements your trait.</p>\n\n<p>Generic trait implementations as seen in the approved answer can then be used to automatically make traits available to types matching the generic bound.</p>\n\n<pre><code>trait Outspoken : fmt::Debug {};\n\ntrait Outspoken : fmt::Debug {};\n\n// This defines a default implementation to any Trait. : Outspoken is any bound\ntrait OutspokenImpl : Outspoken {\n    fn speak(&amp;self) -&gt; String {\n        format!(\"{:?}\", self)\n    }\n}\n\n// This line tells the generics system to provide the implementation to all types\n// which are outspoken\nimpl&lt;T&gt; OutspokenImpl for T where T: Outspoken {}\n\n#[derive(Debug)]\nstruct MyType(i32);\n\n// Add Outspoken marker to my type\nimpl Outspoken for MyType {};\n\n\nassert_eq!(format!(\"{:?}\", MyType(15)), \"MyType(15)\");\nlet mti = MyType(20);\nassert_eq!(mti.speak(), \"MyType(20)\");\n\n// You can bark even though the implementation follows later.\n// Makes sense as we handle generics at compile time\nassert_eq!(mti.bark(), \"wuff\");\n\n// Add your own methods to any existing type who is Outspoken\ntrait AmendDoggyness : Outspoken {\n    fn bark(&amp;self) -&gt; &amp;str {\n        \"wuff\"\n    }\n}\n\nimpl&lt;T&gt; AmendDoggyness for T where T: Outspoken {}any bound\ntrait OutspokenImpl : Outspoken {\n    fn speak(&amp;self) -&gt; String {\n        format!(\"{:?}\", self)\n    }\n}\n\n// This line tells the generics system to provide the implementation to all types\n// which are outspoken\nimpl&lt;T&gt; OutspokenImpl for T where T: Outspoken {}\n\n#[derive(Debug)]\nstruct MyType(i32);\n\n// Add Outspoken marker to my type\nimpl Outspoken for MyType {};\n\n\nassert_eq!(format!(\"{:?}\", MyType(15)), \"MyType(15)\");\nlet mti = MyType(20);\nassert_eq!(mti.speak(), \"MyType(20)\");\n\n// You can bark even though the implementation follows later.\n// Makes sense as we handle generics at compile time\nassert_eq!(mti.bark(), \"wuff\");\n\n// Add your own methods to any existing type who is Outspoken\ntrait AmendDoggyness : Outspoken {\n    fn bark(&amp;self) -&gt; &amp;str {\n        \"wuff\"\n    }\n}\n\nimpl&lt;T&gt; AmendDoggyness for T where T: Outspoken {}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422141568, "post_id": 28131319, "comment_id": 44635387, "body": "&quot;But then I move parameter V into Handler type signature&quot; why do you do that, when <code>Handler</code> doesn&#39;t have any members of that type?"}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422142029, "post_id": 28131319, "comment_id": 44635524, "body": "Because with parameter in method signature I&#39;m able to use both find::&lt;&amp;u64&gt; and find::&lt;&amp;u32&gt; for one Handler instance, and I want to force compiler forbid it."}], "answers": [{"comments": [{"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1422143655, "post_id": 28131510, "comment_id": 44635894, "body": "But there is a trait function signature: &quot;fn choose(a: &amp;&#39;o u64, _b: &amp;&#39;o u32) -&gt; &amp;&#39;o u64&quot; which says, that lifetime of the result is the same as lifetime of the parameters, which is the same lifetime as &amp;self? Even with storing a reference to the struct inside object, what bad things can happen?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422167578, "post_id": 28131510, "comment_id": 44640211, "body": "@Shepmaster, it&#39;s impossible to do what you have described because you can&#39;t store references into the struct inside that struct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1422205322, "post_id": 28131510, "comment_id": 44649457, "body": "@VladimirMatveev I must be misunderstanding you. The code I pasted compiles and runs (in the context of the OP code). Theres also <a href=\"http://stackoverflow.com/a/28114482/155423\">this answer</a> that describes some tricks to keep references to your own struct (for better or worse)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1422142466, "creation_date": 1422142466, "answer_id": 28131510, "question_id": 28131319, "link": "https://stackoverflow.com/questions/28131319/type-parameter-for-function-vs-struct-lifetime-issue/28131510#28131510", "title": "type parameter for function vs struct (lifetime issue)", "body": "<p>Here's my understanding of the problem, others may be able to provide more concrete explanations.</p>\n\n<p>By adding the type parameter to your struct, you are able to <em>store that type in the struct</em>. Since you also specify that your type has the trait <code>Choose&lt;'a&gt;</code> <strong>and</strong> <code>'a</code> is tied to the lifetime of <code>self</code>, Rust has to assume that you are potentially going to store a (mutable) reference to the struct when you make the function call. The compiler must then transfer your mutable borrow to the function, and it doesn't know when it ends. The only safe time is when the object itself goes out of scope</p>\n\n<p>Here's an example of storing a <code>V</code>:</p>\n\n<pre><code>fn find&lt;'a, W&gt;(&amp;'a mut self, value: W) -&gt; Option&lt;V&gt; where V: Choose&lt;'a&gt;, W: PartialEq&lt;V&gt; { //'\n    let v = Choose::choose(&amp;self.a, &amp;self.b);\n\n    self.c = Some(Choose::choose(&amp;self.a, &amp;self.b)); // saved\n\n    if value == v {\n        Some(v)\n    } else {\n        None\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422205582, "post_id": 28134238, "comment_id": 44649544, "body": "This seems like a similar solution as <a href=\"http://stackoverflow.com/a/27950119/155423\">described here</a>, and I swear there was another question from the OP asking the same thing in a slightly different manner but I can&#39;t find it."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 1, "last_activity_date": 1422181860, "last_edit_date": 1422181860, "creation_date": 1422170890, "answer_id": 28134238, "question_id": 28131319, "link": "https://stackoverflow.com/questions/28131319/type-parameter-for-function-vs-struct-lifetime-issue/28134238#28134238", "title": "type parameter for function vs struct (lifetime issue)", "body": "<p>I think what is happening here is:\nin your <code>main</code>, when you do <code>let mut h = Handler::&lt;&amp;u64&gt;::new();</code>, your Handler is now tied to the lifetime of that reference to <code>u64</code>.\nSo even if <code>v_a</code> dies in the following block, the lifetime of V must be that of <code>h</code>, which is still alive.</p>\n\n<p>The problem, by the way, is not so much in the code you already wrote, but in the code you or somebody else could still write.\nGiven your definition of Handler with an unconstrained V, I could go ahead and do:</p>\n\n<pre><code>// in the meanwhile, in another crate...\n// I create another trait\ntrait MyTrait {\n    fn foo(&amp;self) -&gt; &amp;u64;\n}\n\n// and implement it for Handler&lt;&amp;u64&gt;\nimpl&lt;'a&gt; MyTrait for Handler&lt;&amp;'a u64&gt; {\n    fn foo(&amp;self) -&gt; &amp;u64 { &amp;self.a }\n}\n</code></pre>\n\n<p>and then this would be legal:</p>\n\n<pre><code>let h = Handler::&lt;&amp;u64&gt;::new();    \nprintln!(\"{}\", h.foo()); // prints 14\n</code></pre>\n\n<p>So, whenever I do <code>let h = Handler::&lt;&amp;u64&gt;::new();</code> like you did, the only safe option is for the &amp;64 to live at least as long as h.</p>\n\n<p>If you could use <code>u64</code> as <code>V</code>, instead of <code>&amp;u64</code> you would be fine. Something like this changes your program very little (note that I'm still working with references, not passing by value), but allows you to parametrize Handler for u32/64 instead of &amp;u32/64 :</p>\n\n<pre><code>trait Choose&lt;'o&gt; { \n    fn choose(a: &amp;'o u64, b: &amp;'o u32) -&gt; &amp;'o Self; \n}\n\nimpl&lt;'o&gt; Choose&lt;'o&gt; for u64 { \n    fn choose(a: &amp;'o u64, _b: &amp;'o u32) -&gt; &amp;'o u64 { a }\n}\n\nimpl&lt;'o&gt; Choose&lt;'o&gt; for u32 { \n    fn choose(_a: &amp;'o u64, b: &amp;'o u32) -&gt; &amp;'o u32 { b }\n}\n\nstruct Handler&lt;V&gt; {\n    a: u64,\n    b: u32,\n}\n\nimpl&lt;V&gt; Handler&lt;V&gt; {\n    fn new() -&gt; Handler&lt;V&gt; {\n        Handler { a: 14, b: 15 }\n    }\n\n    fn find&lt;'a, W&gt;(&amp;'a mut self, value: W) -&gt; Option&lt;&amp;'a V&gt; where V: Choose&lt;'a&gt;, W: PartialEq&lt;&amp;'a V&gt; {\n        let v = Choose::choose(&amp;self.a, &amp;self.b);\n        if value == v {\n            Some(v)\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let mut h = Handler::&lt;u64&gt;::new();\n\n    {\n        let v_a = h.find(&amp;14u64);\n        println!(\"v_a = {:?}\", v_a);\n    }\n\n    {\n        let v_b = h.find(&amp;15u64);\n        println!(\"v_b = {:?}\", v_b);\n    }\n}\n</code></pre>\n\n<p><a href=\"http://play.rust-lang.org/?code=%23!%5Ballow(unstable)%5D%0Atrait%20Choose%3C%27o%3E%20%7B%20%0A%20%20%20%20fn%20choose(a%3A%20%26%27o%20u64%2C%20b%3A%20%26%27o%20u32)%20-%3E%20%26%27o%20Self%3B%20%0A%7D%0A%0Aimpl%3C%27o%3E%20Choose%3C%27o%3E%20for%20u64%20%7B%20%0A%20%20%20%20fn%20choose(a%3A%20%26%27o%20u64%2C%20_b%3A%20%26%27o%20u32)%20-%3E%20%26%27o%20u64%20%7B%20a%20%7D%0A%7D%0A%0Aimpl%3C%27o%3E%20Choose%3C%27o%3E%20for%20u32%20%7B%20%0A%20%20%20%20fn%20choose(_a%3A%20%26%27o%20u64%2C%20b%3A%20%26%27o%20u32)%20-%3E%20%26%27o%20u32%20%7B%20b%20%7D%0A%7D%0A%0Astruct%20Handler%3CV%3E%20%7B%0A%20%20%20%20a%3A%20u64%2C%0A%20%20%20%20b%3A%20u32%2C%0A%7D%0A%0Aimpl%3CV%3E%20Handler%3CV%3E%20%7B%0A%20%20%20%20fn%20new()%20-%3E%20Handler%3CV%3E%20%7B%0A%20%20%20%20%20%20%20%20Handler%20%7B%20a%3A%2014%2C%20b%3A%2015%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20fn%20find%3C%27a%2C%20W%3E(%26%27a%20mut%20self%2C%20value%3A%20W)%20-%3E%20Option%3C%26%27a%20V%3E%20where%20V%3A%20Choose%3C%27a%3E%2C%20W%3A%20PartialEq%3C%26%27a%20V%3E%20%7B%0A%20%20%20%20%20%20%20%20let%20v%20%3D%20Choose%3A%3Achoose(%26self.a%2C%20%26self.b)%3B%0A%20%20%20%20%20%20%20%20if%20value%20%3D%3D%20v%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Some(v)%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20None%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20mut%20h%20%3D%20Handler%3A%3A%3Cu64%3E%3A%3Anew()%3B%0A%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20let%20v_a%20%3D%20h.find(%2614u64)%3B%0A%20%20%20%20%20%20%20%20println!(%22v_a%20%3D%20%7B%3A%3F%7D%22%2C%20v_a)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20let%20v_b%20%3D%20h.find(%2615u64)%3B%0A%20%20%20%20%20%20%20%20println!(%22v_b%20%3D%20%7B%3A%3F%7D%22%2C%20v_b)%3B%0A%20%20%20%20%7D%0A%7D%0A\" rel=\"nofollow\">playpen</a></p>\n"}], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 382, "favorite_count": 1, "accepted_answer_id": 28134238, "answer_count": 2, "score": 3, "last_activity_date": 1422181860, "creation_date": 1422140996, "question_id": 28131319, "link": "https://stackoverflow.com/questions/28131319/type-parameter-for-function-vs-struct-lifetime-issue", "title": "type parameter for function vs struct (lifetime issue)", "body": "<p>Consider the following test case: </p>\n\n<pre><code>#![allow(unstable)]\ntrait Choose&lt;'o&gt; { \n    fn choose(a: &amp;'o u64, b: &amp;'o u32) -&gt; Self; \n}\n\nimpl&lt;'o&gt; Choose&lt;'o&gt; for &amp;'o u64 { \n    fn choose(a: &amp;'o u64, _b: &amp;'o u32) -&gt; &amp;'o u64 { a }\n}\n\nimpl&lt;'o&gt; Choose&lt;'o&gt; for &amp;'o u32 { \n    fn choose(_a: &amp;'o u64, b: &amp;'o u32) -&gt; &amp;'o u32 { b }\n} // '\n\nstruct Handler {\n    a: u64,\n    b: u32,\n}\n\nimpl Handler {\n    fn new() -&gt; Handler {\n        Handler { a: 14, b: 15 }\n    }\n\n    fn find&lt;'a, V, W&gt;(&amp;'a mut self, value: W) -&gt; Option&lt;V&gt; where V: Choose&lt;'a&gt;, W: PartialEq&lt;V&gt; { // '\n        let v = Choose::choose(&amp;self.a, &amp;self.b);\n        if value == v {\n            Some(v)\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let mut h = Handler::new();\n\n    {\n        let v_a = h.find::&lt;&amp;u64, &amp;u64&gt;(&amp;14u64);\n        println!(\"v_a = {:?}\", v_a);\n    }\n\n    {\n        let v_b = h.find::&lt;&amp;u64, &amp;u64&gt;(&amp;15u64);\n        println!(\"v_b = {:?}\", v_b);\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/2eIWqB\" rel=\"nofollow\">playpen</a></p>\n\n<p>Suppose I have some changing state inside <em>Handler::find</em>, so I need <em>&amp;mut self</em>. But both <em>v_a</em> and <em>v_b</em> variables pointing to <em>Handler</em> internals live inside their own blocks, so there is no borrow problems here. In this case a type parameter <em>V</em> is specified for a <em>find</em> method directly, and everything compiles as expected. </p>\n\n<p>But then I move parameter <em>V</em> into <em>Handler</em> type signature and it stops compiling with \"cannot borrow <code>h</code> as mutable more than once at a time\" error: </p>\n\n<pre><code>#![allow(unstable)]\ntrait Choose&lt;'o&gt; { \n    fn choose(a: &amp;'o u64, b: &amp;'o u32) -&gt; Self; \n}\n\nimpl&lt;'o&gt; Choose&lt;'o&gt; for &amp;'o u64 { \n    fn choose(a: &amp;'o u64, _b: &amp;'o u32) -&gt; &amp;'o u64 { a }\n}\n\nimpl&lt;'o&gt; Choose&lt;'o&gt; for &amp;'o u32 { \n    fn choose(_a: &amp;'o u64, b: &amp;'o u32) -&gt; &amp;'o u32 { b }\n} // '\n\nstruct Handler&lt;V&gt; {\n    a: u64,\n    b: u32,\n}\n\nimpl&lt;V&gt; Handler&lt;V&gt; {\n    fn new() -&gt; Handler&lt;V&gt; {\n        Handler { a: 14, b: 15 }\n    }\n\n    fn find&lt;'a, W&gt;(&amp;'a mut self, value: W) -&gt; Option&lt;V&gt; where V: Choose&lt;'a&gt;, W: PartialEq&lt;V&gt; { // '\n        let v = Choose::choose(&amp;self.a, &amp;self.b);\n        if value == v {\n            Some(v)\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let mut h = Handler::&lt;&amp;u64&gt;::new();\n\n    {\n        let v_a = h.find(&amp;14u64);\n        println!(\"v_a = {:?}\", v_a);\n    }\n\n    {\n        let v_b = h.find(&amp;15u64);\n        println!(\"v_b = {:?}\", v_b);\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/In6lo4\" rel=\"nofollow\">playpen</a></p>\n\n<p>I really cannot understand the difference. Why mutable borrow is not released after variable <em>v_a</em> is dead?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 5, "creation_date": 1487465794, "post_id": 28127268, "comment_id": 71798195, "body": "Worth noting that this isn&#39;t a direct conversion, while the encoding/decoding uses a binary format, this is not simply accessing the struct&#39;s memory (which may be seen as both a good and a bad thing) depending on what you want, it&#39;s performing some conversions. Bincode also does endian conversion for example."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1575903004, "last_edit_date": 1575903004, "creation_date": 1422114934, "answer_id": 28127268, "question_id": 28127165, "link": "https://stackoverflow.com/questions/28127165/how-to-convert-struct-to-u8/28127268#28127268", "title": "How to convert &#39;struct&#39; to &#39;&amp;[u8]&#39;?", "body": "<p>(Shamelessly stolen and adapted from <a href=\"https://stackoverflow.com/questions/28059483/serialize-a-struct-enum-to-bytes#comment44501192_28059483\">Renato Zannon's comment</a> on a similar question)</p>\n\n<p>Perhaps a solution like <a href=\"https://crates.io/crates/bincode\" rel=\"nofollow noreferrer\"><code>bincode</code></a> would suit your case? Here's a working excerpt:</p>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"foo\"\nversion = \"0.1.0\"\nauthors = [\"An Devloper &lt;an.devloper@example.com&gt;\"]\nedition = \"2018\"\n\n[dependencies]\nbincode = \"1.0\"\nserde = { version = \"1.0\", features = [\"derive\"] }\n</code></pre>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>use serde::{Deserialize, Serialize};\nuse std::fs::File;\n\n#[derive(Serialize, Deserialize)]\nstruct A {\n    id: i8,\n    key: i16,\n    name: String,\n    values: Vec&lt;String&gt;,\n}\n\nfn main() {\n    let a = A {\n        id: 42,\n        key: 1337,\n        name: \"Hello world\".to_string(),\n        values: vec![\"alpha\".to_string(), \"beta\".to_string()],\n    };\n\n    // Encode to something implementing `Write`\n    let mut f = File::create(\"/tmp/output.bin\").unwrap();\n    bincode::serialize_into(&amp;mut f, &amp;a).unwrap();\n\n    // Or just to a buffer\n    let bytes = bincode::serialize(&amp;a).unwrap();\n    println!(\"{:?}\", bytes);\n}\n</code></pre>\n\n<p>You would then be able to send the bytes wherever you want. I assume you are already aware of the issues with naively sending bytes around (like potential endianness issues or versioning), but I'll mention them just in case ^_^.</p>\n"}, {"comments": [{"owner": {"reputation": 564, "user_id": 1326803, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9b3dd18b2a308772c0aefae7f1bc1c86?s=128&d=identicon&r=PG", "display_name": "Jason Dreyzehner", "link": "https://stackoverflow.com/users/1326803/jason-dreyzehner"}, "edited": false, "score": 0, "creation_date": 1529548045, "post_id": 42186553, "comment_id": 88916158, "body": "What&#39;s the difference between this solution and one which uses transmutes? Is there a reason to prefer one over the other? <a href=\"https://doc.rust-lang.org/nomicon/transmutes.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nomicon/transmutes.html</a>"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 564, "user_id": 1326803, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9b3dd18b2a308772c0aefae7f1bc1c86?s=128&d=identicon&r=PG", "display_name": "Jason Dreyzehner", "link": "https://stackoverflow.com/users/1326803/jason-dreyzehner"}, "edited": false, "score": 0, "creation_date": 1529574294, "post_id": 42186553, "comment_id": 88927055, "body": "As stated in the answer: <i>&quot;it prevents buffer over-run since the output is read-only, fixed number of bytes, and its lifetime is bound to the input.&quot;</i>"}, {"owner": {"reputation": 1054, "user_id": 3478959, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/b52236406c4b6e4fa0bb619db556cf14?s=128&d=identicon&r=PG&f=1", "display_name": "Lev", "link": "https://stackoverflow.com/users/3478959/lev"}, "edited": false, "score": 11, "creation_date": 1544080221, "post_id": 42186553, "comment_id": 94150958, "body": "Is there a way to go in the opposite direction, i.e. convert the bytes back to the struct?"}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 31, "last_activity_date": 1519648002, "last_edit_date": 1519648002, "creation_date": 1486895954, "answer_id": 42186553, "question_id": 28127165, "link": "https://stackoverflow.com/questions/28127165/how-to-convert-struct-to-u8/42186553#42186553", "title": "How to convert &#39;struct&#39; to &#39;&amp;[u8]&#39;?", "body": "<p>A correctly sized struct as zero-copied bytes can be done using <code>stdlib</code> and a generic function.</p>\n\n<p>In the example below there there is a reusable function called <code>any_as_u8_slice</code> instead of <code>convert_struct</code>, since this is a utility to wrap cast and slice creation.</p>\n\n<p>Note that the question asks about <em>converting</em>, this example creates a read-only slice, so has the advantage of not needing to copy the memory.</p>\n\n<p>Heres a working example based on the question:</p>\n\n<pre><code>unsafe fn any_as_u8_slice&lt;T: Sized&gt;(p: &amp;T) -&gt; &amp;[u8] {\n    ::std::slice::from_raw_parts(\n        (p as *const T) as *const u8,\n        ::std::mem::size_of::&lt;T&gt;(),\n    )\n}\n\nfn main() {\n    struct MyStruct {\n        id: u8,\n        data: [u8; 1024],\n    }\n    let my_struct = MyStruct { id: 0, data: [1; 1024] };\n    let bytes: &amp;[u8] = unsafe { any_as_u8_slice(&amp;my_struct) };\n    // tcp_stream.write(bytes);\n    println!(\"{:?}\", bytes);\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Note 1)</strong> even though 3rd party crates might be better in some cases, this is such a primitive operation that its useful to know how to do in Rust.</p>\n\n<p><strong>Note 2)</strong> at time of writing (Rust 1.15), there is no support for <code>const</code> functions. Once there is, it will be possible to cast into a fixed sized array instead of a slice.</p>\n\n<p><strong>Note 3)</strong> the <code>any_as_u8_slice</code> function is marked <code>unsafe</code> because any padding bytes in the <code>struct</code> may be uninitialized memory (giving undefined behavior).\nIf there were a way to ensure input arguments used only structs which were <a href=\"https://doc.rust-lang.org/reference.html#ffi-attributes\" rel=\"noreferrer\"><code>#[repr(packed)]</code></a>, then it could be safe.</p>\n\n<p>Otherwise the function is fairly safe since it prevents buffer over-run since the output is read-only, fixed number of bytes, and its lifetime is bound to the input.<br>If you wanted a version that returned a <code>&amp;mut [u8]</code>, that would be quite dangerous since modifying could easily create inconsistent/corrupt data.</p>\n"}], "owner": {"reputation": 385, "user_id": 4489993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7da5b64b0090361295ae727caa6a86a?s=128&d=identicon&r=PG&f=1", "display_name": "agatana", "link": "https://stackoverflow.com/users/4489993/agatana"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 16047, "favorite_count": 3, "accepted_answer_id": 28127268, "answer_count": 2, "score": 26, "last_activity_date": 1575903004, "creation_date": 1422114226, "last_edit_date": 1488983632, "question_id": 28127165, "link": "https://stackoverflow.com/questions/28127165/how-to-convert-struct-to-u8", "title": "How to convert &#39;struct&#39; to &#39;&amp;[u8]&#39;?", "body": "<p>I want to send my struct via a <code>TcpStream</code>. I could send <code>String</code> or <code>u8</code>, but I can not send an arbitrary struct. For example:</p>\n\n<pre><code>struct MyStruct {\n    id: u8,\n    data: [u8; 1024],\n}\n\nlet my_struct = MyStruct { id: 0, data: [1; 1024] };\nlet bytes: &amp;[u8] = convert_struct(my_struct); // how??\ntcp_stream.write(bytes);\n</code></pre>\n\n<p>After receiving the data, I want to convert <code>&amp;[u8]</code> back to <code>MyStruct</code>. How can I convert between these two representations?</p>\n\n<p>I know Rust has a JSON module for serializing data, but I don't want to use JSON because I want to send data as fast and small as possible, so I want to no or very small overhead.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1422113787, "creation_date": 1422113787, "answer_id": 28127113, "question_id": 28127089, "link": "https://stackoverflow.com/questions/28127089/is-there-a-way-of-doing-something-like-allowunstable-on-the-command-line/28127113#28127113", "title": "Is there a way of doing something like #![allow(unstable)] on the command line?", "body": "<pre><code>rustc -A unstable foo.rs\n</code></pre>\n\n<p>Running <code>rustc --help</code> has this snippet of arguments:</p>\n\n<pre><code>-W --warn OPT       Set lint warnings\n-A --allow OPT      Set lint allowed\n-D --deny OPT       Set lint denied\n-F --forbid OPT     Set lint forbidden\n</code></pre>\n\n<p>You can get the current list of lints with <code>rustc -W help</code></p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 221, "favorite_count": 1, "accepted_answer_id": 28127113, "answer_count": 1, "score": 3, "last_activity_date": 1422113803, "creation_date": 1422113593, "last_edit_date": 1422113803, "question_id": 28127089, "link": "https://stackoverflow.com/questions/28127089/is-there-a-way-of-doing-something-like-allowunstable-on-the-command-line", "title": "Is there a way of doing something like #![allow(unstable)] on the command line?", "body": "<p>By command line, I mean by using a <code>rustc</code> flag.</p>\n\n<p>It would be a convenient option, compared to adding <code>#![allow(unstable)]</code> lines in those source files... I am building a whole bunch at once.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422166125, "post_id": 28126735, "comment_id": 44639942, "body": "Answerers might be able to give more concrete examples if you explain what you want <code>s[&quot;something&quot;] = 533</code> to <i>do</i>. Otherwise, we will just be able to show you the syntax and traits you will need to implement."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422174287, "post_id": 28126735, "comment_id": 44641288, "body": "@Shepmaster, you don&#39;t understand what <code>s[&quot;something&quot;] = 533</code> does?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422205928, "post_id": 28126735, "comment_id": 44649698, "body": "There&#39;s not enough context presented to truly sure what you want. It has the possibility of doing <i>anything Rust can do</i> (writing a file, sending data over the network, <code>panic</code>ing, so on) as long as in the end it returns a mutable reference to an integral variable (and it&#39;s not clear if you&#39;d want a 16-, 32- or 64-bit value, but that&#39;s just being pedantic)."}], "answers": [{"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 1, "creation_date": 1422112371, "post_id": 28126796, "comment_id": 44626795, "body": "That&#39;s copy-paste from the documentation, how is it related to my question? I mean, how can I adopt it for my case where the index type is a string?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 7, "creation_date": 1422112624, "post_id": 28126796, "comment_id": 44626864, "body": "It is indeed copy-paste; why would I rewrite a perfectly serviceable example when the Rust documentation already provides it? I copied it here in case the link breaks over time. If you aren&#39;t able to translate from the examples in the documentation to your specific case, then you should have linked to the docs in your original question and asked a specific question about the part you are having trouble with."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1422161698, "post_id": 28126796, "comment_id": 44639269, "body": "What are you trying to convince me in?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1432684168, "last_edit_date": 1432684168, "creation_date": 1422111407, "answer_id": 28126796, "question_id": 28126735, "link": "https://stackoverflow.com/questions/28126735/is-there-a-way-to-perform-an-index-access-to-an-instance-of-a-struct/28126796#28126796", "title": "Is there a way to perform an index access to an instance of a struct?", "body": "<p>You want to use the <a href=\"http://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"noreferrer\"><code>Index</code> trait</a> (and its pair <a href=\"http://doc.rust-lang.org/std/ops/trait.IndexMut.html\" rel=\"noreferrer\"><code>IndexMut</code></a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ops::Index;\n\n#[derive(Copy, Clone)]\nstruct Foo;\nstruct Bar;\n\nimpl Index&lt;Bar&gt; for Foo {\n    type Output = Foo;\n\n    fn index&lt;'a&gt;(&amp;'a self, _index: Bar) -&gt; &amp;'a Foo {\n        println!(\"Indexing!\");\n        self\n    }\n}\n\nfn main() {\n    Foo[Bar];\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1422112465, "post_id": 28126836, "comment_id": 44626822, "body": "do I have to use them both?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 2, "creation_date": 1422116379, "post_id": 28126836, "comment_id": 44627954, "body": "If you want both operations, yes."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1422162273, "post_id": 28126836, "comment_id": 44639371, "body": "So how is <code>foo[&#39;y&#39;]</code> it beneficial  from <code>f.y</code>? We have <code>f.y</code> anyway, right? But what I want is to have <code>foo[&#39;y&#39;]</code> <b>only</b> and not to able to do <code>f.y</code> at all."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 2, "creation_date": 1422164526, "post_id": 28126836, "comment_id": 44639691, "body": "It was just an example; there&#39;s no reason that the value retrieved with the index has to be a field of a struct. E.g. <code>HashMap</code> supports indexing with whatever it&#39;s key type is, including <code>&amp;str</code>, say <code>map: HashMap&lt;&amp;str, u32&gt;</code>, <code>let value: u32 = map[&quot;foo&quot;];</code>."}, {"owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 0, "creation_date": 1422165483, "post_id": 28126836, "comment_id": 44639829, "body": "You probably don&#39;t understand my question. What does it have to do with HashMap as I want to use my own struct, not HashMap or BTreeMap <b>instead</b>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1422165814, "post_id": 28126836, "comment_id": 44639885, "body": "@dbaupp is simply using <code>HashMap</code> as an example of another way that the <code>Index(Mut)</code> trait is implemented. Your only requirement is to return a (mutable) reference to the type <code>Index::Output</code>. How you implement that logic is <i>completely up to you</i>. Your original example is a bit sparse, so we are just guessing at possible things that you might find useful."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "edited": false, "score": 2, "creation_date": 1422175800, "post_id": 28126836, "comment_id": 44641547, "body": "@AlexanderSupertramp, I understand the question you asked perfectly (note, the one you actually asked isn&#39;t necessarily the one you <i>wanted</i> to ask :) ), and was giving a working example of using the traits. You just need to change the contents of the struct and the contents of the implementations to suit your use case. <code>HashMap</code> is just a custom struct defined in <code>std</code> that implements those traits, it hasn&#39;t got anything special and so is just another example of using those traits to get the <code>[]</code> notation."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 8, "last_activity_date": 1591121659, "last_edit_date": 1591121659, "creation_date": 1422111752, "answer_id": 28126836, "question_id": 28126735, "link": "https://stackoverflow.com/questions/28126735/is-there-a-way-to-perform-an-index-access-to-an-instance-of-a-struct/28126836#28126836", "title": "Is there a way to perform an index access to an instance of a struct?", "body": "<p>You can use the <a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>Index</code></a> and <a href=\"https://doc.rust-lang.org/std/ops/trait.IndexMut.html\" rel=\"nofollow noreferrer\"><code>IndexMut</code></a> traits.</p>\n\n<pre><code>use std::ops::{Index, IndexMut};\n\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nimpl Index&lt;&amp;'_ str&gt; for Foo {\n    type Output = i32;\n    fn index(&amp;self, s: &amp;str) -&gt; &amp;i32 {\n        match s {\n            \"x\" =&gt; &amp;self.x,\n            \"y\" =&gt; &amp;self.y,\n            _ =&gt; panic!(\"unknown field: {}\", s),\n        }\n    }\n}\n\nimpl IndexMut&lt;&amp;'_ str&gt; for Foo {\n    fn index_mut(&amp;mut self, s: &amp;str) -&gt; &amp;mut i32 {\n        match s {\n            \"x\" =&gt; &amp;mut self.x,\n            \"y\" =&gt; &amp;mut self.y,\n            _ =&gt; panic!(\"unknown field: {}\", s),\n        }\n    }\n}\n\nfn main() {\n    let mut foo = Foo { x: 0, y: 0 };\n\n    foo[\"y\"] += 2;\n    println!(\"x: {}\", foo[\"x\"]);\n    println!(\"y: {}\", foo[\"y\"]);\n}\n</code></pre>\n\n<p>It prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>x: 0\ny: 2\n</code></pre>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1969, "favorite_count": 0, "accepted_answer_id": 28126836, "answer_count": 2, "score": 2, "last_activity_date": 1591121659, "creation_date": 1422111013, "last_edit_date": 1526503436, "question_id": 28126735, "link": "https://stackoverflow.com/questions/28126735/is-there-a-way-to-perform-an-index-access-to-an-instance-of-a-struct", "title": "Is there a way to perform an index access to an instance of a struct?", "body": "<p>Is there a way to perform an index access to an instance of a struct like this:</p>\n\n<pre><code>struct MyStruct {\n    // ...\n}\n\nimpl MyStruct {\n    // ...    \n}\n\nfn main() {\n    let s = MyStruct::new();\n    s[\"something\"] = 533; // This is what I need\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "edited": false, "score": 0, "creation_date": 1422103438, "post_id": 28125513, "comment_id": 44624393, "body": "It adds a bit of code duplication but not overly so. I like this approach, thank you!"}, {"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422167146, "post_id": 28125513, "comment_id": 44640134, "body": "<a href=\"http://is.gd/ieAsSW\" rel=\"nofollow noreferrer\"><code>Fn*</code> traits do work through indirection</a>. That said, your answer results in more efficient code than having to allocate a box for the closure, so this is still the best approach."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422179119, "post_id": 28125513, "comment_id": 44642223, "body": "@wingedsubmariner: That&#39;s not a relevant example.  The <code>filter</code> method expects a type that implements <code>FnMut(..)</code>.  Although you can call a <code>Fn*</code> through a box (via auto-<code>Deref</code>), a <code>Box&lt;Fn*&gt;</code> does not itself implement the <code>Fn*</code> trait, which is what I was referring to.  You can&#39;t deref the box to get at the closure either, since you&#39;d get a trait type and those are unsized."}, {"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422244578, "post_id": 28125513, "comment_id": 44660961, "body": "@DK. My bad then, I misunderstood."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1422102932, "creation_date": 1422102932, "answer_id": 28125513, "question_id": 28125341, "link": "https://stackoverflow.com/questions/28125341/filter-iterator-with-arguments/28125513#28125513", "title": "Filter iterator with arguments", "body": "<p>Things that don't work:</p>\n\n<ul>\n<li><p>You can't define a function or method that returns a closure because closure types are anonymous and can't be named.  I tried boxing the result, but it doesn't look like the <code>Fn*</code> traits work through indirection (might not have been implemented yet).</p></li>\n<li><p>You can almost define a <code>filter_by_scope</code> method that takes the iterator itself, filters it, and returns the result... except that you can't name the return type because it would contain a closure type.</p></li>\n<li><p>You could define a <code>ScopeFilter</code> type that implements the <code>FnMut(&amp;&amp;isize) -&gt; bool</code> interface... except because the traits are unstable, that's not really a good idea (even if it works now, it <em>definitely</em> won't work with 1.0).</p></li>\n<li><p>You can't pass a member function/method to <code>filter</code> because it won't partially apply the <code>self</code> argument.</p></li>\n</ul>\n\n<p>The simplest thing I can think of is to just call the filter logic method directly:</p>\n\n<pre><code>struct Collection {\n    elements: Vec&lt;isize&gt;,\n    scope: isize\n}\n\nimpl Collection {\n    fn action1(&amp;self) {\n        for e in self.elements.iter().filter(|e| self.filter(e)) {\n            println!(\"got {:?}\", e);\n        }\n    }\n\n    fn filter(&amp;self, cur: &amp;&amp;isize) -&gt; bool {\n        // Determine if current element needs to be filtered based on the scope value\n        **cur &lt;= self.scope\n    }\n}\n\nfn main() {\n    let c = Collection { elements: vec![1, 2, 3, 4, 5, 6, 7, 8], scope: 2 };\n    c.action1();\n}\n</code></pre>\n\n<p>Yes, you have to write the closure everywhere you use it... but it's only six extra characters, and the only other thing I can think of would be a <em>macro</em>, which would be even longer.</p>\n\n<p>So yeah.  This is, I think, something that near future Rust will handle quite reasonably, less so <em>right now</em>.</p>\n"}], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 913, "favorite_count": 0, "accepted_answer_id": 28125513, "answer_count": 1, "score": 1, "last_activity_date": 1422102932, "creation_date": 1422101623, "last_edit_date": 1495539810, "question_id": 28125341, "link": "https://stackoverflow.com/questions/28125341/filter-iterator-with-arguments", "title": "Filter iterator with arguments", "body": "<p>I want to call a custom defined filter in multiple struct methods, but it should somehow have access to a certain property of the struct.</p>\n\n<p>Here is a basic example of what I have so far:</p>\n\n<pre><code>struct Collection {\n    elements: Vec&lt;isize&gt;,\n    scope: isize\n}\n\nimpl Collection {\n    fn action1(&amp;self) {\n        for e in (&amp;self.elements).iter().filter(Collection::filter) {\n            println!(\"do something ...\");\n        }\n    }\n\n    fn action2(&amp;self) {\n        // filter and do something with the elements\n    }\n\n    fn action3(&amp;self) {\n        // filter and do something with the elements\n    }\n\n    fn filter(cur: &amp;&amp;isize) -&gt; bool {\n        // Determine if current element needs to be filtered based on the scope value\n        true\n    }\n}\n\nfn main() {\n    let c = Collection { elements: vec![1, 2, 3, 4, 5, 6, 7, 8], scope: 2 };\n    c.action1();\n    c.action2();\n}\n</code></pre>\n\n<p>I'm aware that I could pass a closure / block directly as an argument, but that would imply copying the filter logic across multiple methods, which is what I want to avoid.</p>\n\n<p>It would had been nice to be able to do the following:</p>\n\n<pre><code>fn filter(&amp;self, cur: &amp;&amp;isize) -&gt; bool {\n\n}\n</code></pre>\n\n<p>However this won't compile, most likely because it's really a method, not a function. </p>\n\n<p>Perhaps this is doable if the function <a href=\"https://stackoverflow.com/questions/25445761/returning-a-closure-from-a-function\">returns a closure</a>, but I just couldn't make the filter accept it as a response.</p>\n\n<p>Having this said, how should I handle the data filtering?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 3, "creation_date": 1422310691, "post_id": 28124323, "comment_id": 44690924, "body": "By the way: you can use <a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html#tymethod.cloned\" rel=\"nofollow noreferrer\"><code>.cloned()</code></a> on the second example instead of <code>.map(|&amp;x| x)</code>."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 11, "last_activity_date": 1422094256, "creation_date": 1422094256, "answer_id": 28124378, "question_id": 28124323, "link": "https://stackoverflow.com/questions/28124323/differences-between-0-3-and-0-1-2-iter/28124378#28124378", "title": "Differences between 0..3 and [0, 1, 2].iter()", "body": "<p>They're not the same thing.</p>\n\n<p>The problem here is that the call to <code>iter</code> on the array produces an <code>Iterator</code> of <code>&amp;i32</code>s.  In order to work on every possible array, it can't return elements by value, since not all types implement <code>Copy</code> and you can't partially move out of an array.  So, in order to collect into a <code>Vec&lt;i32&gt;</code>, you have to turn the <code>&amp;i32</code>s into <code>i32</code>s by copying them.</p>\n\n<p>The <em>other</em> way in which they're not the same: the range doesn't require there to be an array containing all elements somewhere.  So there's that, too.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 241, "favorite_count": 2, "accepted_answer_id": 28124378, "answer_count": 1, "score": 4, "last_activity_date": 1492192386, "creation_date": 1422093719, "last_edit_date": 1492192386, "question_id": 28124323, "link": "https://stackoverflow.com/questions/28124323/differences-between-0-3-and-0-1-2-iter", "title": "Differences between 0..3 and [0, 1, 2].iter()", "body": "<p>I can do this for a range type:</p>\n\n<pre><code>(0..3).collect::&lt;Vec&lt;i32&gt;&gt;();\n</code></pre>\n\n<p>But I can't do the same for:</p>\n\n<pre><code>[0, 1, 2].iter().collect::&lt;Vec&lt;i32&gt;&gt;();\n</code></pre>\n\n<p>With that I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> error: the trait `core::iter::FromIterator&lt;&amp;_&gt;` is not implemented for the type `collections::vec::Vec&lt;i32&gt;` [E0277]\n</code></pre>\n\n<p>To avoid that error, I have to do:</p>\n\n<pre><code>[0, 1, 2].iter().map(|&amp;x| x).collect::&lt;Vec&lt;i32&gt;&gt;();\n</code></pre>\n\n<p>Why is that so? I thought the two were a different way of doing the same thing.</p>\n"}, {"tags": ["macos", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1486, "user_id": 3173115, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/c8e1daf73bdb957276e472a5b335f5e5?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/3173115/alex"}, "edited": false, "score": 0, "creation_date": 1596463704, "post_id": 28124504, "comment_id": 111811344, "body": "Spot on. I had a very similar problem, and this answer was helpful in narrowing down the error message."}], "tags": [], "owner": {"reputation": 6067, "user_id": 918124, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7dca4113cc56449a8bc144e82a8a916e?s=128&d=identicon&r=PG", "display_name": "DrYap", "link": "https://stackoverflow.com/users/918124/dryap"}, "is_accepted": true, "score": 5, "last_activity_date": 1422095245, "creation_date": 1422095245, "answer_id": 28124504, "question_id": 28124221, "link": "https://stackoverflow.com/questions/28124221/error-linking-with-cc-failed-exit-code-1/28124504#28124504", "title": "error: linking with `cc` failed: exit code: 1", "body": "<p>From your command <code>rustc test1.rs</code> the compiler infers the name of the executable should be <code>test1</code>. The linker tries to open this file so it can write the executable but fails with <code>errno=21</code> whose stringified version is \"Is a directory\".</p>\n\n<p>This suggests you have a directory in your working directory called <code>test1</code> which is causing a conflict.</p>\n"}, {"comments": [{"owner": {"reputation": 1486, "user_id": 3173115, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/c8e1daf73bdb957276e472a5b335f5e5?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/3173115/alex"}, "edited": false, "score": 0, "creation_date": 1594661237, "post_id": 58468589, "comment_id": 111197113, "body": "This answer is for Linux, not macOS. It will not work on the platform the OP requested. In addition, it does not solve the specific problem outlined in OP&#39;s question."}], "tags": [], "owner": {"reputation": 11, "user_id": 12244818, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-97orb6E3-JQ/AAAAAAAAAAI/AAAAAAAABeQ/ujP3RMkHhO4/photo.jpg?sz=128", "display_name": "Shin Play", "link": "https://stackoverflow.com/users/12244818/shin-play"}, "is_accepted": false, "score": 0, "last_activity_date": 1571524696, "creation_date": 1571524696, "answer_id": 58468589, "question_id": 28124221, "link": "https://stackoverflow.com/questions/28124221/error-linking-with-cc-failed-exit-code-1/58468589#58468589", "title": "error: linking with `cc` failed: exit code: 1", "body": "<p>In my case I did need to install a lib for rust to work:</p>\n\n<p><code>sudo apt-get install libfreetype6-dev</code></p>\n"}, {"comments": [{"owner": {"reputation": 1486, "user_id": 3173115, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/c8e1daf73bdb957276e472a5b335f5e5?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/3173115/alex"}, "edited": false, "score": 0, "creation_date": 1594661243, "post_id": 60250726, "comment_id": 111197115, "body": "This answer is for Linux, not macOS. It will not work on the platform the OP requested. In addition, it does not solve the specific problem outlined in OP&#39;s question."}, {"owner": {"reputation": 490, "user_id": 5322506, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/706cb330de139e4f5423ee1702c3167d?s=128&d=identicon&r=PG&f=1", "display_name": "my-", "link": "https://stackoverflow.com/users/5322506/my"}, "reply_to_user": {"reputation": 1486, "user_id": 3173115, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/c8e1daf73bdb957276e472a5b335f5e5?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/3173115/alex"}, "edited": false, "score": 2, "creation_date": 1596374837, "post_id": 60250726, "comment_id": 111785663, "body": "And is why I have: &gt; I know answer is for Mac but in case some Linux user come by. I saw quite a few answers on SO  not exactly matching question, but closely related."}, {"owner": {"reputation": 1486, "user_id": 3173115, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/c8e1daf73bdb957276e472a5b335f5e5?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/3173115/alex"}, "edited": false, "score": 0, "creation_date": 1596463486, "post_id": 60250726, "comment_id": 111811228, "body": "The error message contains <code>warning: directory not found for option</code> - that comes from cmake. The problem is not that cmake isn&#39;t installed, and it&#39;s not running linux. So installing cmake with apt solves a totally different problem, on a totally different platform. This answer is not for the question OP asked."}], "tags": [], "owner": {"reputation": 490, "user_id": 5322506, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/706cb330de139e4f5423ee1702c3167d?s=128&d=identicon&r=PG&f=1", "display_name": "my-", "link": "https://stackoverflow.com/users/5322506/my"}, "is_accepted": false, "score": 1, "last_activity_date": 1590771257, "last_edit_date": 1590771257, "creation_date": 1581871167, "answer_id": 60250726, "question_id": 28124221, "link": "https://stackoverflow.com/questions/28124221/error-linking-with-cc-failed-exit-code-1/60250726#60250726", "title": "error: linking with `cc` failed: exit code: 1", "body": "<p>I know answer is for Mac but in case some Linux user come by.<br>\nIn my case I needed:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>sudo apt install cmake\n</code></pre>\n\n<p>(Peppermint Linux)</p>\n"}, {"comments": [{"owner": {"reputation": 53, "user_id": 11634455, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/vbpEp.png?s=128&g=1", "display_name": "initvik", "link": "https://stackoverflow.com/users/11634455/initvik"}, "edited": false, "score": 2, "creation_date": 1613185795, "post_id": 65698711, "comment_id": 117005609, "body": "Whenever you update the Mac with the new major mac release, usually the XCODE toolchain gets outdated that&#39;s the root cause of getting this error. Reinstalling the latest Xcode most of the time fixed the issue."}, {"owner": {"reputation": 150, "user_id": 4880022, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5a8493b9bc9111ca38a4c0c30df1c0bb?s=128&d=identicon&r=PG&f=1", "display_name": "dcchuck", "link": "https://stackoverflow.com/users/4880022/dcchuck"}, "edited": false, "score": 1, "creation_date": 1618672055, "post_id": 65698711, "comment_id": 118675453, "body": "The cargo config was the missing piece for me. Thank you!"}], "tags": [], "owner": {"reputation": 8171, "user_id": 311655, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6bad9300ce17b6a89678ed9343647906?s=128&d=identicon&r=PG", "display_name": "DenisKolodin", "link": "https://stackoverflow.com/users/311655/deniskolodin"}, "is_accepted": false, "score": 5, "last_activity_date": 1612287535, "last_edit_date": 1612287535, "creation_date": 1610528939, "answer_id": 65698711, "question_id": 28124221, "link": "https://stackoverflow.com/questions/28124221/error-linking-with-cc-failed-exit-code-1/65698711#65698711", "title": "error: linking with `cc` failed: exit code: 1", "body": "<p>I was faced with <strong>three problems</strong> on Mac compiling Rust:</p>\n<p><strong>First:</strong> If you have any issue with writing files/dirs by <code>ld</code> just remove that files and try to recompile. I don't know why, but on Mac this issue happens time to time.</p>\n<p><strong>Second:</strong> If you have other <code>ld</code> errors (not about file access): try to add the following sections to your <code>~/.cargo/config</code> (if you don't have this file feel free to create):</p>\n<pre><code>[target.x86_64-apple-darwin]\nrustflags = [\n  &quot;-C&quot;, &quot;link-arg=-undefined&quot;,\n  &quot;-C&quot;, &quot;link-arg=dynamic_lookup&quot;,\n]\n\n[target.aarch64-apple-darwin]\nrustflags = [\n  &quot;-C&quot;, &quot;link-arg=-undefined&quot;,\n  &quot;-C&quot;, &quot;link-arg=dynamic_lookup&quot;,\n]\n</code></pre>\n<p><strong>Third:</strong> Sometimes your Mac lack of some dev tools/dependencies. Install the most important of them automatically with the command:</p>\n<pre><code>xcode-select --install\n</code></pre>\n"}], "owner": {"reputation": 23981, "user_id": 2813589, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/9axBj.jpg?s=128&g=1", "display_name": "\u30a2\u30ec\u30c3\u30af\u30b9", "link": "https://stackoverflow.com/users/2813589/%e3%82%a2%e3%83%ac%e3%83%83%e3%82%af%e3%82%b9"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10791, "favorite_count": 0, "accepted_answer_id": 28124504, "answer_count": 4, "score": 9, "last_activity_date": 1612287535, "creation_date": 1422092993, "last_edit_date": 1422097578, "question_id": 28124221, "link": "https://stackoverflow.com/questions/28124221/error-linking-with-cc-failed-exit-code-1", "title": "error: linking with `cc` failed: exit code: 1", "body": "<p>I have a <strong>single</strong> .rs file. When I compile it by <code>rustc test1.rs</code>, I get an error:</p>\n\n<pre><code>    error: linking with `cc` failed: exit code: 1\nnote: cc '-m64' '-L' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib' '-o' 'test1' 'test1.o' '-Wl,-force_load,/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/libmorestack.a' '-Wl,-dead_strip' '-nodefaultlibs' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/libstd-4e7c5e5c.rlib' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/libcollections-4e7c5e5c.rlib' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/libunicode-4e7c5e5c.rlib' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/librand-4e7c5e5c.rlib' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/liballoc-4e7c5e5c.rlib' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/liblibc-4e7c5e5c.rlib' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib/libcore-4e7c5e5c.rlib' '-L' '/usr/local/Cellar/rust/1.0.0-alpha/lib/rustlib/x86_64-apple-darwin/lib' '-L' '/Users/alex/Documents/projects/rust/.rust/lib/x86_64-apple-darwin' '-L' '/Users/alex/Documents/projects/rust/lib/x86_64-apple-darwin' '-lSystem' '-lpthread' '-lc' '-lm' '-lcompiler-rt'\nnote: ld: warning: directory not found for option '-L/Users/alex/Documents/projects/rust/.rust/lib/x86_64-apple-darwin'\nld: warning: directory not found for option '-L/Users/alex/Documents/projects/rust/lib/x86_64-apple-darwin'\nld: can't open output file for writing: test1, errno=21 for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\nerror: aborting due to previous error\n\n\n$ rustc --version\nrustc 1.0.0-dev\n</code></pre>\n\n<p>I've seen some topic related to this one but none of them helped me to solve the problem.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422112397, "post_id": 28123923, "comment_id": 44626804, "body": "Welcome to Stack Overflow! In the spirit of asking great questions, you may want to reword your question a bit. Your title makes it sound like you just want to <a href=\"http://is.gd/1kODTT\" rel=\"nofollow noreferrer\">print the vector of bytes</a>, which is fairly easy. Your body makes it seem like you want to treat a sequence of bytes as a UTF-8 string, but you don&#39;t mention what encoding the bytes are in. You may also want to include some detail about what you are trying to do; perhaps a solution like <a href=\"http://doc.rust-lang.org/std/io/trait.Reader.html#method.read_to_string\" rel=\"nofollow noreferrer\"><code>read_to_string</code></a> would solve your real problem."}], "answers": [{"comments": [{"owner": {"reputation": 181, "user_id": 2398732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/574d2bc84692c7ccba3f282dac77a985?s=128&d=identicon&r=PG", "display_name": "AAnderson", "link": "https://stackoverflow.com/users/2398732/aanderson"}, "edited": false, "score": 0, "creation_date": 1422329013, "post_id": 28124260, "comment_id": 44696464, "body": "Hi DK, could you please link me to a resource clarifying re-borrowing? To expand further, when I try to do println!(&quot;{}&quot;, &amp;*altbuf); I get &quot;trait core::fmt::String is not implemented for type [u8]&quot;."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 181, "user_id": 2398732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/574d2bc84692c7ccba3f282dac77a985?s=128&d=identicon&r=PG", "display_name": "AAnderson", "link": "https://stackoverflow.com/users/2398732/aanderson"}, "edited": false, "score": 1, "creation_date": 1422329772, "post_id": 28124260, "comment_id": 44696663, "body": "@AAnderson: You probably want <code>println!(&quot;{:?}&quot;, &amp;*altbuf)</code>.  <code>{}</code> uses the <code>String</code> formatter which is for user-facing display, whilst <code>{:?}</code> is for just any sort of internal representation.  Not everything <i>has</i> a <code>String</code> formatter, but almost everything has a <code>Show</code> formatter (which is what <code>{:?}</code> uses).  To clarify re-borrowing: it&#39;s basically just calling <code>Deref::deref</code> on a thing and preserving the reference it returns (normally, the result of a <code>deref</code> call is automatically de-referenced; the extra <code>&amp;</code> prevents that).  I don&#39;t know of any more explicit explanation anywhere."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 17, "last_activity_date": 1422093258, "creation_date": 1422093258, "answer_id": 28124260, "question_id": 28123923, "link": "https://stackoverflow.com/questions/28123923/how-do-i-print-a-vector-of-u8-as-a-string/28124260#28124260", "title": "How do I print a vector of u8 as a string?", "body": "<p>If you look at the <a href=\"http://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noreferrer\"><code>String</code> documentation</a>, there are a few methods you could use.  There's <a href=\"http://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8\" rel=\"noreferrer\"><code>String::from_utf8</code></a> that takes a <code>Vec&lt;u8&gt;</code>, and there's also <a href=\"http://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8_lossy\" rel=\"noreferrer\"><code>String::from_utf8_lossy</code></a> which takes a <code>&amp;[u8]</code>.</p>\n\n<p>Note that a <code>Vec&lt;T&gt;</code> is more-or-less an owned, resizable wrapper around a <code>[T]</code>.  That is, if you have a <code>Vec&lt;u8&gt;</code>, you can turn it into a <code>&amp;[u8]</code>, most easily by re-borrowing it (<em>i.e.</em> <code>&amp;*some_vec</code>).  You can also call any methods defined on <code>&amp;[T]</code> directly on a <code>Vec&lt;T&gt;</code> (in general, this is true of things that implement the <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noreferrer\"><code>Deref</code></a> trait).</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471352055, "post_id": 38974914, "comment_id": 65304059, "body": "<a href=\"http://play.integer32.com/?gist=f270884d23f154f96e98e2deaca6625b\" rel=\"nofollow noreferrer\">Using a byte literal</a> would probably be a clearer example than using FFI and <code>unsafe</code>. Could you show an example of printing the entire slice as hex numbers? I <a href=\"http://stackoverflow.com/q/27650312/155423\">don&#39;t believe that works</a>, but would be happy to be proven wrong."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471352203, "post_id": 38974914, "comment_id": 65304169, "body": "I think that&#39;s enough, and printing is different formats can be an exercise for the reader."}], "tags": [], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "is_accepted": false, "score": 4, "last_activity_date": 1471351898, "last_edit_date": 1471351898, "creation_date": 1471350293, "answer_id": 38974914, "question_id": 28123923, "link": "https://stackoverflow.com/questions/28123923/how-do-i-print-a-vector-of-u8-as-a-string/38974914#38974914", "title": "How do I print a vector of u8 as a string?", "body": "<p>If your <code>altbuf</code> is a vector of <code>u8</code> as shown, this should work:</p>\n\n<pre><code>println!(\"{:?}\", altbuf);\n</code></pre>\n\n<p>Here is an edited piece of code I have that does something similar:</p>\n\n<pre><code>let rebuilt: Vec&lt;u8&gt;;\n\nunsafe {\n    ret = proc_pidpath(pid, buffer_ptr, buffer_size);\n    rebuilt = Vec::from_raw_parts(buffer_ptr as *mut u8, ret as usize, buffer_size as usize);\n};\n\nprintln!(\"Returned a {} byte string\", ret);\nprintln!(\"{:?}\", rebuilt);\n</code></pre>\n\n<p>That rebuilds a vector of <code>u8</code> values from a buffer filled by a C function called via FFI so the bytes could be anything, maybe not valid UTF-8.</p>\n\n<p>When I run it, the output is:</p>\n\n<blockquote>\n  <p>Returned a 49 byte string</p>\n  \n  <p>[47, 85, 115, 101, 114, 115, 47, 97, 110,\n  100, 114, 101, 119, 47, 46, 114, 98, 101, 110, 118, 47, 118, 101, 114,\n  115, 105, 111, 110, 115, 47, 49, 46, 57, 46, 51, 45, 112, 51, 57, 50,\n  47, 98, 105, 110, 47, 114, 117, 98, 121]</p>\n</blockquote>\n\n<p>You could format the numbers printed (in hex, octal, etc) using <a href=\"https://doc.rust-lang.org/std/fmt/#formatting-traits\" rel=\"nofollow\">different format strings</a> inside the <code>{}</code>.</p>\n\n<p>You can get a <code>String</code> from that using <code>String::from_utf8(rebuilt)</code> - which may return an error.</p>\n\n<pre><code>match String::from_utf8(rebuilt) {\n    Ok(path) =&gt; Ok(path),\n    Err(e) =&gt; Err(format!(\"Invalid UTF-8 sequence: {}\", e)),\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 709, "user_id": 1786241, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0cd05dc8a5b7ebb13141d3ff41ac035d?s=128&d=identicon&r=PG", "display_name": "youknowone", "link": "https://stackoverflow.com/users/1786241/youknowone"}, "is_accepted": false, "score": 0, "last_activity_date": 1603816292, "last_edit_date": 1603816292, "creation_date": 1599190410, "answer_id": 63734458, "question_id": 28123923, "link": "https://stackoverflow.com/questions/28123923/how-do-i-print-a-vector-of-u8-as-a-string/63734458#63734458", "title": "How do I print a vector of u8 as a string?", "body": "<p>To print bytes as a UTF-8 string, use <a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8.html\" rel=\"nofollow noreferrer\"><code>std::str::from_utf8</code></a> when the bytes may be malformed. Use the unsafe <a href=\"https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\" rel=\"nofollow noreferrer\"><code>std::str::from_utf8_unchecked</code></a> when the bytes are always valid UTF-8.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>println!(&quot;{}&quot;, std::str::from_utf8(&amp;altbuf).unwrap());\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 80945, "user_id": 1002260, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/5ec9c21c8d54825b04def7a41998d18d?s=128&d=identicon&r=PG", "display_name": "Steven Penny", "link": "https://stackoverflow.com/users/1002260/steven-penny"}, "is_accepted": false, "score": 1, "last_activity_date": 1603818847, "last_edit_date": 1603818847, "creation_date": 1603813749, "answer_id": 64558074, "question_id": 28123923, "link": "https://stackoverflow.com/questions/28123923/how-do-i-print-a-vector-of-u8-as-a-string/64558074#64558074", "title": "How do I print a vector of u8 as a string?", "body": "<p>Use the <code>write</code> method from <code>std::io</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::{io, io::Write};\n\nfn main() -&gt; io::Result&lt;()&gt; {\n   io::stdout().write(b&quot;March\\n&quot;)?;\n   Ok(())\n}\n</code></pre>\n<p>It prints a slice of <code>u8</code>, also known as a bytestring.</p>\n<p><a href=\"https://doc.rust-lang.org/std/io/fn.stdout.html\" rel=\"nofollow noreferrer\"><code>io::stdout</code></a></p>\n"}], "owner": {"reputation": 181, "user_id": 2398732, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/574d2bc84692c7ccba3f282dac77a985?s=128&d=identicon&r=PG", "display_name": "AAnderson", "link": "https://stackoverflow.com/users/2398732/aanderson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 22334, "favorite_count": 2, "accepted_answer_id": 28124260, "answer_count": 4, "score": 17, "last_activity_date": 1603818847, "creation_date": 1422090467, "last_edit_date": 1422095094, "question_id": 28123923, "link": "https://stackoverflow.com/questions/28123923/how-do-i-print-a-vector-of-u8-as-a-string", "title": "How do I print a vector of u8 as a string?", "body": "<p>Here's my code:</p>\n\n<pre><code>let mut altbuf: Vec&lt;u8&gt; = Vec::new();\n\n// Stuff here...\n\nmatch stream.read_byte() {\n    Ok(d) =&gt; altbuf.push(d),\n    Err(e) =&gt; { println!(\"Error: {}\", e); doneflag = true; }\n}\n\nfor x in altbuf.iter() {\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>The code prints u8 bytes which are correct, but I can't figure out for the life of me how to convert a vector of pure u8 bytes into a string? The only other answer to a similar question on stack overflow assumes that you're working with a vector of type &amp;[u8].</p>\n"}, {"tags": ["haskell", "rust", "traits"], "comments": [{"owner": {"reputation": 126907, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 8, "creation_date": 1422137557, "post_id": 28123453, "comment_id": 44634336, "body": "I don&#39;t know much about Rust. But common stumbling blocks for similar technologies in other languages are higher kinds (e.g. can traits range over parameterized types, but not their parameters?) and return-type polymorphism (e.g. can a trait type appear in the result of a function, but not anywhere in the arguments?). An example of the former in Haskell is <code>class Functor f where fmap :: (a -&gt; b) -&gt; (f a -&gt; f b)</code>; an example of the latter is <code>class Bounded a where maxBound :: a</code>."}, {"owner": {"reputation": 126907, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 4, "creation_date": 1422138076, "post_id": 28123453, "comment_id": 44634475, "body": "GHC also supports multi-parameter type classes (that is, traits involving several types) and functional dependencies, though this is not a part of the official Haskell specification. Judging from the Rust syntax suggested at your link, it can only support traits ranging over one type at a time, though that judgment is again not based on deep experience."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 126907, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 4, "creation_date": 1422153520, "post_id": 28123453, "comment_id": 44637733, "body": "@DanielWagner Return-type polymorphism exists (e.g. <code>std::default</code>), and multiparameter traits sort-of work (including an analogue of functional dependencies), though AFAIK one needs to work around the first parameter being privileged. No HKT however. They&#39;re on the far-future wishlist but not on the horizon yet."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 4, "creation_date": 1422285015, "post_id": 28123453, "comment_id": 44676964, "body": "another difference is the treatment of orphan instances. Rust tries to have stricter coherence rules on where a new impl for a trait can be written. See <a href=\"http://discuss.rust-lang.org/t/orphan-rules/1322\" rel=\"nofollow noreferrer\">this discussion</a> for more detail (in particular <a href=\"http://discuss.rust-lang.org/t/orphan-rules/1322/7\" rel=\"nofollow noreferrer\">here</a> )"}, {"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 1, "creation_date": 1422311283, "post_id": 28123453, "comment_id": 44691190, "body": "Rust supports <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\" rel=\"nofollow noreferrer\">associated types and equality constraints</a> now, though they aren&#39;t as powerful as Haskell&#39;s type families. It also has existential types via <a href=\"https://github.com/rust-lang/rust-guidelines/blob/master/features/traits/objects.md\" rel=\"nofollow noreferrer\">trait objects</a>."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 126907, "user_id": 791604, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ce991df7a056248d5e4f6fc3659ba733?s=128&d=identicon&r=PG", "display_name": "Daniel Wagner", "link": "https://stackoverflow.com/users/791604/daniel-wagner"}, "edited": false, "score": 0, "creation_date": 1424352567, "post_id": 28123453, "comment_id": 45519242, "body": "@DanielWagner: I think parameterized traits qualify as something similar to multi-parameter type classes. <code>Self</code> is just another \u201cinput parameter\u201d that gets a bit of special treatment and is implicit."}, {"owner": {"reputation": 8277, "user_id": 1682419, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/19B6c.png?s=128&g=1", "display_name": "Jerry101", "link": "https://stackoverflow.com/users/1682419/jerry101"}, "edited": false, "score": 0, "creation_date": 1424589050, "post_id": 28123453, "comment_id": 45607416, "body": "I don&#39;t know enough about Haskell type classes to compare, but here&#39;s the Rust reference on traits <a href=\"http://doc.rust-lang.org/reference.html#traits\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference.html#traits</a> (it&#39;s currently out of date) and the accepted + partially implemented RFC to add associated items to traits <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 2, "creation_date": 1554942207, "post_id": 29388580, "comment_id": 97938900, "body": "Traits in Rust do not &quot;only intervene for expressions with dot notation&quot;. For example, consider the <code>Default</code> trait which has no methods, only non-method associated functions."}], "tags": [], "owner": {"reputation": 121, "user_id": 4716257, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a18cf30545c1f8fbedccc373cbdd19b5?s=128&d=identicon&r=PG&f=1", "display_name": "Anuj Gupta", "link": "https://stackoverflow.com/users/4716257/anuj-gupta"}, "is_accepted": false, "score": 8, "last_activity_date": 1427884519, "creation_date": 1427884519, "answer_id": 29388580, "question_id": 28123453, "link": "https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell/29388580#29388580", "title": "What is the difference between traits in Rust and typeclasses in Haskell?", "body": "<p>Rust's \u201ctraits\u201d are analogous to Haskell's type classes.</p>\n\n<p>The main difference with Haskell is that traits only intervene for expressions with dot notation, i.e. of the form a.foo(b).</p>\n\n<p>Haskell type classes extend to higher-order types. Rust traits only don't support higher order types because they are missing from the whole language, i.e. it's not a philosophical difference between traits and type classes</p>\n"}, {"comments": [{"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 4, "creation_date": 1554941960, "post_id": 32659986, "comment_id": 97938845, "body": "Rust still does not have any form of higher kinded types. &quot;Infamous&quot; needs justification. Functor are incredibly pervasive and useful as a concept. Type families are the same as associated types. Functional dependencies are essentially redundant with associated types (including in Haskell). The thing Rust lacks wrt. fundeps is injectivity annotations. You have it backwards, Rust&#39;s traits and Haskell&#39;s type classes are different on the surface but many differences evaporate when you look beneath. Differences that remain are mostly inherent to the different domains the languages operate in."}, {"owner": {"reputation": 706, "user_id": 2640937, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/2bdde9ada4ed0bf5df04bad03a51642d?s=128&d=identicon&r=PG", "display_name": "Vaelus", "link": "https://stackoverflow.com/users/2640937/vaelus"}, "edited": false, "score": 0, "creation_date": 1571058300, "post_id": 32659986, "comment_id": 103103557, "body": "Associated items are now considered idomatic in many circumstances, right?"}, {"owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "reply_to_user": {"reputation": 706, "user_id": 2640937, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/2bdde9ada4ed0bf5df04bad03a51642d?s=128&d=identicon&r=PG", "display_name": "Vaelus", "link": "https://stackoverflow.com/users/2640937/vaelus"}, "edited": false, "score": 0, "creation_date": 1571086591, "post_id": 32659986, "comment_id": 103115976, "body": "@Vaelus You&#39;re right\u2014This answer should be updated a bit. Editing now."}], "tags": [], "owner": {"reputation": 11366, "user_id": 3922954, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/76ba47d2fdd24ab56b0b273cce2075e5?s=128&d=identicon&r=PG&f=1", "display_name": "AJF", "link": "https://stackoverflow.com/users/3922954/ajf"}, "is_accepted": true, "score": 69, "last_activity_date": 1571086952, "last_edit_date": 1571086952, "creation_date": 1442605838, "answer_id": 32659986, "question_id": 28123453, "link": "https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell/32659986#32659986", "title": "What is the difference between traits in Rust and typeclasses in Haskell?", "body": "<p>At the basic level, there's not much difference, but they're still there.</p>\n\n<p>Haskell describes functions or values defined in a typeclass as 'methods', just as traits describe OOP methods in the objects they enclose. However, Haskell deals with these differently, treating them as individual values rather than pinning them to an object as OOP would lead one to do. This is about the most obvious surface-level difference there is.</p>\n\n<p>The one thing that Rust could not do for a while was <em>higher-order typed traits</em>, such as the infamous <code>Functor</code> and <code>Monad</code> typeclasses.</p>\n\n<p>This means that Rust traits could only describe what's often called a 'concrete type', in other words, one without a generic argument. Haskell from the start could make higher-order typeclasses which use types similar to how higher-order functions use other functions: using one to describe another. For a period of time this was not possible in Rust, but since <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md#encoding-higher-kinded-types\" rel=\"noreferrer\">associated items</a> have been implemented, such traits have become commonplace and idiomatic.</p>\n\n<p>So if we ignore extensions, they are not exactly the same, but each can approximate what the other can do.</p>\n\n<p>It is also mentionable, as said in the comments, that GHC (Haskell's principal compiler) supports further options for typeclasses, including <a href=\"https://wiki.haskell.org/Multi-parameter_type_class\" rel=\"noreferrer\">multi-parameter</a> (i.e. many types involved) typeclasses, and <a href=\"https://wiki.haskell.org/Functional_dependencies\" rel=\"noreferrer\">functional dependencies</a>, a lovely option that allows for type-level computations, and leads on to <a href=\"https://wiki.haskell.org/GHC/Type_families\" rel=\"noreferrer\">type families</a>. To my knowledge, Rust has neither funDeps or type families, though it may in the future.\u2020</p>\n\n<p>All in all, traits and typeclasses have fundamental differences, which due to the way they interact, make them act and seem quite similar in the end.</p>\n\n<hr>\n\n<p></p>\n\n<p>\u2020 A nice article on Haskell's typeclasses (including higher-typed ones) can be found <a href=\"https://www.haskell.org/tutorial/classes.html\" rel=\"noreferrer\">here</a>, and the Rust by Example chapter on traits may be found <a href=\"https://doc.rust-lang.org/stable/rust-by-example/trait.html\" rel=\"noreferrer\">here</a></p>\n"}, {"comments": [{"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 3, "creation_date": 1554942563, "post_id": 45576167, "comment_id": 97938965, "body": "&quot;Type classes create no types&quot; -- I think it is best to understand <code>dyn Trait</code> as a form of existential typing as they relate to traits/type-classes. We can consider <code>dyn</code> an operator on bounds projecting them to types, i.e. <code>dyn : List Bound -&gt; Type</code>. Taking this idea to Haskell, and with regards to &quot;so you can&#39;t declare variables with the class name.&quot;, we can do this indirectly in Haskell: <code>data Dyn (c :: * -&gt; Constraint) = forall (t :: Type). c t =&gt; D t</code>. Having defined this, we may work with <code>[D True, D &quot;abc&quot;, D 42] :: [D Show]</code>."}, {"owner": {"reputation": 619, "user_id": 4996524, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/5b7910ac129ed37a15e32deb4a2c3bd9?s=128&d=identicon&r=PG&f=1", "display_name": "YoTengoUnLCD", "link": "https://stackoverflow.com/users/4996524/yotengounlcd"}, "edited": false, "score": 0, "creation_date": 1607892123, "post_id": 45576167, "comment_id": 115408813, "body": "@Lii so traits are type classes that just also happen to implicitly define an existential type? That&#39;s not a big difference."}], "tags": [], "owner": {"reputation": 9895, "user_id": 452775, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/88963e7cc58eabf150447e7b78a24793?s=128&d=identicon&r=PG", "display_name": "Lii", "link": "https://stackoverflow.com/users/452775/lii"}, "is_accepted": false, "score": 22, "last_activity_date": 1576000741, "last_edit_date": 1576000741, "creation_date": 1502218929, "answer_id": 45576167, "question_id": 28123453, "link": "https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell/45576167#45576167", "title": "What is the difference between traits in Rust and typeclasses in Haskell?", "body": "<p>I think the current answers overlook the most fundamental differences between Rust traits and Haskell type classes. These differences have to do with the way traits are related to object oriented language constructs. For information about this, see the <a href=\"https://doc.rust-lang.org/book/ch17-02-trait-objects.html\" rel=\"noreferrer\">Rust book</a>.</p>\n\n<ol>\n<li><p><strong>A trait declaration creates a trait type</strong>. This means that you can declare variables of such a type (or rather, references of the type). You can also use trait types as parameters on function, struct fields and type parameter instantiations.</p>\n\n<p>A trait reference variable can at runtime contain objects of different types, as long as the runtime type of the referenced object implements the trait.</p>\n\n<pre><code>// The shape variable might contain a Square or a Circle, \n// we don't know until runtime\nlet shape: &amp;Shape = get_unknown_shape();\n\n// Might contain different kinds of shapes at the same time\nlet shapes: Vec&lt;&amp;Shape&gt; = get_shapes();\n</code></pre>\n\n<p>This is not how type classes work. <strong>Type classes create no types</strong>, so you can't declare variables with the class name. <strong>Type classes act as bounds</strong> on type parameters, but the type parameters must be instantiated with a concrete type, not the type class itself.</p>\n\n<p>You can not have a list of different things of different types which implement the same type class. (Instead, existential types are used in Haskell to express a similar thing.) <sup><em>Note 1</em></sup></p></li>\n<li><p><strong>Trait methods can be dynamically dispatched</strong>. This is strongly related to the things that are described in the section above.</p>\n\n<p>Dynamic dispatch means that the runtime type of the object a reference points is used to determine which method that is called though the reference.</p>\n\n<pre><code>let shape: &amp;Shape = get_unknown_shape();\n\n// This calls a method, which might be Square.area or\n// Circle.area depending on the runtime type of shape\nprint!(\"Area: {}\", shape.area());\n</code></pre>\n\n<p>Again, existential types are used for this in Haskell.</p></li>\n</ol>\n\n<h3>In Conclusion</h3>\n\n<p>It seems to me like traits are in many aspects the same concept as type classes. It addition, they have the functionality of object oriented interfaces.</p>\n\n<p>On the other hand Haskell's type classes are more advanced. Haskell has for example higher-kinded types and extension like multi-parameter type classes.</p>\n\n<hr>\n\n<p><em>Note 1</em>: Recent versions of Rust have an update to differentiate the usage of trait names as types and the usage of trait names as bounds. In a trait type the name is prefixed by the <code>dyn</code> keyword. See for example this <a href=\"https://stackoverflow.com/questions/50650070/what-does-dyn-mean-in-a-type\">answer</a> for more information.</p>\n"}], "owner": {"reputation": 3832, "user_id": 2553416, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/3cb1756924bd03cc01d107852dd81acf?s=128&d=identicon&r=PG", "display_name": "LogicChains", "link": "https://stackoverflow.com/users/2553416/logicchains"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15876, "favorite_count": 33, "accepted_answer_id": 32659986, "answer_count": 3, "score": 172, "last_activity_date": 1576000741, "creation_date": 1422085844, "last_edit_date": 1445119771, "question_id": 28123453, "link": "https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell", "title": "What is the difference between traits in Rust and typeclasses in Haskell?", "body": "<p><a href=\"http://rustbyexample.com/trait.html\">Traits</a> in Rust seem at least superficially similar to <a href=\"http://en.wikipedia.org/wiki/Type_class\">typeclasses</a> in Haskell, however I've seen people write that there are some differences between them. I was wondering exactly what these differences are.</p>\n"}, {"tags": ["rust", "traits", "type-parameter"], "answers": [{"comments": [{"owner": {"reputation": 748, "user_id": 2128597, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000157613328/picture?type=large", "display_name": "\u76db\u5b89\u5b89", "link": "https://stackoverflow.com/users/2128597/%e7%9b%9b%e5%ae%89%e5%ae%89"}, "edited": false, "score": 0, "creation_date": 1422087518, "post_id": 28123539, "comment_id": 44620858, "body": "Wow, I didn&#39;t know it&#39;s already possible to use where clause on methods. Rust is really an amazing language."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 7, "last_activity_date": 1506388037, "last_edit_date": 1506388037, "creation_date": 1422086684, "answer_id": 28123539, "question_id": 28123445, "link": "https://stackoverflow.com/questions/28123445/is-there-any-way-to-work-around-an-unused-type-parameter/28123539#28123539", "title": "Is there any way to work around an unused type parameter?", "body": "<p>A type parameter that's unused in the struct can use <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\"><code>PhantomData</code></a>:</p>\n\n<pre><code>struct Struct&lt;U&gt; {\n    _marker: PhantomData&lt;U&gt;,\n}\n\nimpl&lt;U&gt; Struct&lt;U&gt; {\n    fn example&lt;T&gt;(&amp;self)\n    where\n        U: Trait&lt;T&gt;,\n    {\n        // use `T` and `U`\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 748, "user_id": 2128597, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000157613328/picture?type=large", "display_name": "\u76db\u5b89\u5b89", "link": "https://stackoverflow.com/users/2128597/%e7%9b%9b%e5%ae%89%e5%ae%89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1168, "favorite_count": 0, "accepted_answer_id": 28123539, "answer_count": 1, "score": 7, "last_activity_date": 1506388037, "creation_date": 1422085718, "last_edit_date": 1506387596, "question_id": 28123445, "link": "https://stackoverflow.com/questions/28123445/is-there-any-way-to-work-around-an-unused-type-parameter", "title": "Is there any way to work around an unused type parameter?", "body": "<p>Code:</p>\n\n<pre><code>trait Trait&lt;T&gt; {}\n\nstruct Struct&lt;U&gt;;\n\nimpl&lt;T, U: Trait&lt;T&gt;&gt; Struct&lt;U&gt; {}\n</code></pre>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n --&gt; src/main.rs:5:6\n  |\n5 | impl&lt;T, U: Trait&lt;T&gt;&gt; Struct&lt;U&gt; {}\n  |      ^ unconstrained type parameter\n</code></pre>\n\n<p>It seems that <a href=\"https://github.com/rust-lang/rfcs/pull/447\" rel=\"nofollow noreferrer\">RFC 447</a> prohibits this pattern; is there any way to work around this? I think it could be solved by changing <code>T</code> to an associated type, but that would prevent me from doing multidispatch.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422112064, "post_id": 28122233, "comment_id": 44626713, "body": "To be clear, you need the special features as indicated by &quot;If you need a specific version of OpenGL, or you need a different API&quot;? Otherwise, it looks like you could use the standard crate and skip the extra hassle."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422215177, "post_id": 28122233, "comment_id": 44652994, "body": "It&#39;s also considered good citizenship to <a href=\"http://www.reddit.com/r/rust/comments/2thg0w/not_finding_crate_gl/\" rel=\"nofollow noreferrer\">note that you have cross-posted the question</a> to other sources. (assuming that both instances are the same person!)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1422111913, "creation_date": 1422111913, "answer_id": 28126860, "question_id": 28122233, "link": "https://stackoverflow.com/questions/28122233/unable-to-find-gl-crate/28126860#28126860", "title": "Unable to find gl crate", "body": "<p>The documentation you linked to says:</p>\n\n<blockquote>\n  <p>Under the <code>[package]</code> section, add <code>build = \"build.rs\"</code></p>\n</blockquote>\n\n<p>But I don't see that in your <code>Cargo.toml</code>.</p>\n"}], "owner": {"reputation": 185, "user_id": 4414317, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-z7zBoPJUaLQ/AAAAAAAAAAI/AAAAAAAAABI/lhiohDzAXCA/photo.jpg?sz=128", "display_name": "Joe", "link": "https://stackoverflow.com/users/4414317/joe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 381, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1422111992, "creation_date": 1422073010, "last_edit_date": 1422111992, "question_id": 28122233, "link": "https://stackoverflow.com/questions/28122233/unable-to-find-gl-crate", "title": "Unable to find gl crate", "body": "<p>I'm following the instructions from <a href=\"https://github.com/bjz/gl-rs\" rel=\"nofollow\">here</a>. In the example folder, I use the <a href=\"https://github.com/bjz/gl-rs/blob/master/examples/static_basic.rs\" rel=\"nofollow\">first</a> example. For some reason console says it can't find the external crate \"gl\". Here's what my Cargo.toml looks like.</p>\n\n<pre><code>[package]\n\nname = \"hello_world\"\nversion = \"0.0.1\"\nauthors = [ \"bob &lt;bobbuilder@gmail.com&gt;\" ]\n\n\n\n[dependencies.gl]\ngit = \"https://github.com/bjz/gl-rs\"\n\n[dependencies.glfw]\ngit = \"https://github.com/bjz/glfw-rs.git\"\n\n[build-dependencies]\ngl_generator = \"*\"\n\n[dependencies]\ngl_common = \"*\"\n\n[[bin]]\n\nname = \"hello_world\"\n</code></pre>\n\n<p>My build.rs</p>\n\n<pre><code>extern crate gl_generator;    // &lt;-- this is your build dependency\nextern crate khronos_api;    // included by gl_generator\n\nuse std::os;\nuse std::io::File;\n\nfn main() {\nlet dest = Path::new(os::getenv(\"OUT_DIR\").unwrap());\n\nlet mut file = File::create(&amp;dest.join(\"gl_bindings.rs\")).unwrap();\n\n// This generates bindsings for OpenGL ES v3.1\ngl_generator::generate_bindings(gl_generator::GlobalGenerator,\n                                gl_generator::registry::Ns::Gles2,\n                                khronos_api::GL_XML,\n                                vec![],\n                                \"3.1\", \"core\", &amp;mut file).unwrap();\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422162301, "post_id": 28122133, "comment_id": 44639376, "body": "As a work around, you can either define a function <code>fn hack(a: &amp;Alpha) -&gt; u8 { Alpha::alpha(a) }</code> or use <code>mem::transmute</code> to get a suitable value for <code>Try1</code> or <code>Try2</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "edited": false, "score": 0, "creation_date": 1422206095, "post_id": 28122133, "comment_id": 44649732, "body": "@wingedsubmariner If you add the first workaround as an answer, I&#39;d be happy to accept it."}], "answers": [{"tags": [], "owner": {"reputation": 12420, "user_id": 1224627, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/011b3ee0350155b8827cdc9918d2907c?s=128&d=identicon&r=PG", "display_name": "wingedsubmariner", "link": "https://stackoverflow.com/users/1224627/wingedsubmariner"}, "is_accepted": true, "score": 1, "last_activity_date": 1422852361, "creation_date": 1422852361, "answer_id": 28271253, "question_id": 28122133, "link": "https://stackoverflow.com/questions/28122133/what-is-the-correct-type-for-a-method-on-a-lifetime-parameterized-struct/28271253#28271253", "title": "What is the correct type for a method on a lifetime-parameterized struct?", "body": "<p>Unfortunately, the function <code>alpha</code> implemented on the struct <code>Alpha</code> effectively takes the struct's lifetime as a parameter, despite not actually using it. This is a limitation of the syntax for defining methods on structs with lifetimes. So even though it is possible to take a pointer to it as a <code>for&lt;'z&gt; fn(&amp;Alpha&lt;'z&gt;) -&gt; u8</code>, it is not possible to treat it as a <code>fn(&amp;Alpha) -&gt; u8</code>, even though the definition suggests this should be possible.</p>\n\n<p>This can be worked around by defining a function that invokes the method and take a pointer to it instead:</p>\n\n<pre><code>fn workaround(a: &amp;Alpha) -&gt; u8 { Alpha::alpha(a) }\nTry1(workaround);\n</code></pre>\n\n<p>In fact, it may be better to do it the other way around, with the definition in the function and the method invoking the function. Then when the function is invoked through a <code>fn(&amp;Alpha) -&gt; u8</code> pointer a second jump won't be necessary into the method, and calls to the method can be inlined as calls to the function.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 119, "favorite_count": 0, "accepted_answer_id": 28271253, "answer_count": 1, "score": 4, "last_activity_date": 1422852361, "creation_date": 1422071868, "question_id": 28122133, "link": "https://stackoverflow.com/questions/28122133/what-is-the-correct-type-for-a-method-on-a-lifetime-parameterized-struct", "title": "What is the correct type for a method on a lifetime-parameterized struct?", "body": "<p>I have a struct that contains a reference and so it has a lifetime parameter. I'd like to pass around the function pointer of a method of this struct. Later, I will call that function with an instance of the struct. I ran into snags while trying to store the function pointer, eventually finding this solution:</p>\n\n<pre><code>struct Alpha&lt;'a&gt; { a: &amp;'a u8 }\n\nimpl&lt;'a&gt; Alpha&lt;'a&gt; {\n    fn alpha(&amp;self) -&gt; u8 { *self.a }\n}\n\nstruct Try1(fn(&amp;Alpha) -&gt; u8);\nstruct Try2(for&lt;'z&gt; fn(&amp;Alpha&lt;'z&gt;) -&gt; u8);\nstruct Try3&lt;'z&gt;(fn(&amp;Alpha&lt;'z&gt;) -&gt; u8);\n\nfn main() {\n    Try1(Alpha::alpha); // Nope\n    Try2(Alpha::alpha); // Nope\n    Try3(Alpha::alpha);\n}\n</code></pre>\n\n<p>Unfortunately, this solution doesn't work for my real case because I want to implement a trait that has its own notion of lifetimes:</p>\n\n<pre><code>trait Zippy {\n    fn greet&lt;'a&gt;(&amp;self, &amp;Alpha&lt;'a&gt;);\n}\n\nimpl&lt;'z&gt; Zippy for Try3&lt;'z&gt; {\n    fn greet&lt;'a&gt;(&amp;self, a: &amp;Alpha&lt;'a&gt;) { println!(\"Hello, {}\", self.0(a)) }\n}\n</code></pre>\n\n<p>Produces the error:</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;Alpha&lt;'z&gt;`,\n    found `&amp;Alpha&lt;'a&gt;`\n</code></pre>\n\n<p>I feel that I shouldn't need to tie the lifetime of my struct <code>Try3</code> to the lifetime of the parameter of the function pointer, but the compiler must be seeing something I'm not.</p>\n"}, {"tags": ["floating-point", "rust", "rounding"], "comments": [{"owner": {"reputation": 75299, "user_id": 139746, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/BhJLC.png?s=128&g=1", "display_name": "Pascal Cuoq", "link": "https://stackoverflow.com/users/139746/pascal-cuoq"}, "edited": false, "score": 2, "creation_date": 1422087700, "post_id": 28121957, "comment_id": 44620888, "body": "There is no \u201cnearest-ties-to-plus-infinity\u201d rounding mode in the IEEE 754 floating-point standard. Even if Rust gave you full access to the hardware&#39;s capabilities (which it may or it may not), it wouldn&#39;t provide this rounding mode. You have to do the rounding by hand. Three different methods are presented in <a href=\"http://blog.frama-c.com/index.php?post/2013/05/02/nearbyintf1\" rel=\"nofollow noreferrer\">blog.frama-c.com/index.php?post/2013/05/02/nearbyintf1</a> , and the second one at least should be easy to modify so as to round the way you want."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 75299, "user_id": 139746, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/BhJLC.png?s=128&g=1", "display_name": "Pascal Cuoq", "link": "https://stackoverflow.com/users/139746/pascal-cuoq"}, "edited": false, "score": 0, "creation_date": 1422117848, "post_id": 28121957, "comment_id": 44628438, "body": "@PascalCuoq oops! That&#39;s what I get for assuming! For future reference, <a href=\"http://en.wikipedia.org/wiki/IEEE_floating_point#Rounding_rules\" rel=\"nofollow noreferrer\">here&#39;s the list of the 5 rounding modes</a> that actually exist."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1422076538, "creation_date": 1422076538, "answer_id": 28122536, "question_id": 28121957, "link": "https://stackoverflow.com/questions/28121957/how-do-i-specify-the-rounding-mode-for-floating-point-numbers/28122536#28122536", "title": "How do I specify the rounding mode for floating point numbers?", "body": "<p>It appears that the implementation of <code>Float::round</code>, at least for <code>f32</code> and <code>f64</code>, forward to the <code>roundf32</code>/<code>roundf64</code> instrinsics, which themselves are implemented using the LLVM functions <code>llvm.round.f32</code> and <code>llvm.round.f64</code>.  The <a href=\"http://llvm.org/docs/LangRef.html#llvm-round-intrinsic\" rel=\"noreferrer\">documentation for <code>llvm.round.*</code></a> doesn't say anything about how to control the rounding mode, sadly.  There doesn't appear to be anything else in the LLVM reference about it, either.  The other functions I could find that even mentioned rounding modes either specified <em>one</em> particular rounding mode, or said it was undefined.</p>\n\n<p>I couldn't find any solid information about this.  There was <a href=\"http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-July/041416.html\" rel=\"noreferrer\">a post on the LLVM mailing list from 2011</a> that talks about x86-specific intrinsics, and a <a href=\"https://code.google.com/p/nativeclient/issues/detail?id=3540\" rel=\"noreferrer\">2013 post to the Native Client issue tracker</a> that appears to talk about a <em>hypothetical</em> intrinsic and how it would be hard to do portably.</p>\n\n<p>Taking a blind stab at it: I'd try writing a little C library that does it and just link to that.  It doesn't appear to be directly supported in LLVM.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422117720, "post_id": 28124775, "comment_id": 44628406, "body": "Thank you! I did a <a href=\"http://is.gd/18B288\" rel=\"nofollow noreferrer\">na&#239;ve transformation</a> of your code into Rust, and it seems to be passing my tests!"}], "tags": [], "owner": {"reputation": 7214, "user_id": 392585, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/5ac7b1da0f2e9107b5020f88023a15e5?s=128&d=identicon&r=PG", "display_name": "Simon Byrne", "link": "https://stackoverflow.com/users/392585/simon-byrne"}, "is_accepted": false, "score": 2, "last_activity_date": 1422097367, "creation_date": 1422097367, "answer_id": 28124775, "question_id": 28121957, "link": "https://stackoverflow.com/questions/28121957/how-do-i-specify-the-rounding-mode-for-floating-point-numbers/28124775#28124775", "title": "How do I specify the rounding mode for floating point numbers?", "body": "<p>I'm afraid I don't know Rust, but I wrote the following <a href=\"https://github.com/JuliaLang/julia/blob/ff9cebe45e6c39933ab26ca134b59b3ef47ec821/base/floatfuncs.jl#L56-L59\" rel=\"nofollow\">for Julia</a> (based on a similar sequence for ties away from zero by Arch Robinson), which you should be able to adapt:</p>\n\n<pre><code>y = floor(x)\nifelse(x==y, y, copysign(floor(2*x-y),x))\n</code></pre>\n\n<p>A quick explanation of what is going on:</p>\n\n<ol>\n<li><code>floor</code> finds the nearest integer less than or equal to <code>x</code>.</li>\n<li>If <code>y==x</code>, then <code>x</code> is an integer, so no rounding is necessary: note that this captures all cases where the absolute value of <code>x</code> is greater than 2<sup>53</sup>.</li>\n<li><code>floor(2*x-y)</code> will give the desired answer: <code>2*x</code> is exact, and we don't have to worry about overflow due to step 2. The subtraction will be exact for all cases except <code>-0.25 &lt; x &lt; 0</code>, which will clearly give the right answer anyway.</li>\n<li>The <code>copysign</code> is there just to ensure the zero has the correct sign. If you're not bothered by such things, you could leave it off.</li>\n</ol>\n\n<p>Steps 2 &amp; 3 could be replaced by a simple branch:</p>\n\n<pre><code>x-y &lt; 0.5 ? y : y+1.0\n</code></pre>\n\n<p>but if I recall correctly, avoiding the branch here made the code more vectorisation friendly (which is also the reason for using <code>ifelse</code> instead of an <code>if</code> block).</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1739, "favorite_count": 0, "accepted_answer_id": 28122536, "answer_count": 2, "score": 4, "last_activity_date": 1422097367, "creation_date": 1422069860, "question_id": 28121957, "link": "https://stackoverflow.com/questions/28121957/how-do-i-specify-the-rounding-mode-for-floating-point-numbers", "title": "How do I specify the rounding mode for floating point numbers?", "body": "<p>I'd like to round floating point numbers to the nearest integer, going towards positive infinity when there is a tie for \"nearest integer\".</p>\n\n<pre><code>use std::num::Float;\n\nfn main() {\n    assert_eq!(-0.0, (-0.5).round()); // fails!\n}\n</code></pre>\n\n<p>However, the docs for <code>round</code> say:</p>\n\n<blockquote>\n  <p>Round half-way cases away from 0.0.</p>\n</blockquote>\n\n<p>I haven't seen anything that would allow me to change the rounding mode, but there's got to be some way, right?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1422058452, "post_id": 28120483, "comment_id": 44615800, "body": "Dietrich Epp was right on the money with his now-deleted answer, specifically the first suggestion. It was just missing a <code>mut</code> (<code>&amp;mut self, mut slave: Slave</code>). That doesn&#39;t even influence the function signature (one could also omit it and write <code>let mut slave = slave;</code> as the first line of the body). I hope he sees this and brings the answer back."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1422061983, "creation_date": 1422061983, "answer_id": 28121239, "question_id": 28120483, "link": "https://stackoverflow.com/questions/28120483/how-to-declare-and-implement-a-struct-that-keeps-track-of-a-collection-of-struct/28121239#28121239", "title": "How to declare and implement a struct that keeps track of a collection of structs?", "body": "<p>Containers <em>contain</em> the value. In this case, you are taking a <em>reference</em> (<code>slave: &amp;mut Slave</code>) and then attempting to <strong>steal the ownership</strong> of the <code>Slave</code> inside your function. This is a big no-no, as the caller of this method wouldn't know that you had consumed the item.</p>\n\n<p>Instead, give up the ownership of your item when adding it:</p>\n\n<pre><code>pub fn add_slave(&amp;mut self, slave: Slave) {\n    let mut slave = slave; // let us mutate it, now that we own it \n    let new_id = self.get_unique_id();\n    slave.set_id(new_id);\n    self.slaves.insert(new_id, slave); \n}\n</code></pre>\n\n<p>I prefer to accept the item (<code>slave: Slave</code>) and then make it mutable in the function body. That way, callers of the method don't need to care about implementation details. You could also declare the argument as <code>mut slave: Slave</code> if this bothers you.</p>\n\n<p>Another alternative would be to change your struct to hold <code>&amp;mut Slave</code> items instead, but my guess is that you want the first solution.</p>\n"}], "owner": {"reputation": 4230, "user_id": 945873, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/d561be4c73996732e6639b5421abfb97?s=128&d=identicon&r=PG&f=1", "display_name": "itdoesntwork", "link": "https://stackoverflow.com/users/945873/itdoesntwork"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "accepted_answer_id": 28121239, "answer_count": 1, "score": 0, "last_activity_date": 1422062106, "creation_date": 1422056346, "last_edit_date": 1422062106, "question_id": 28120483, "link": "https://stackoverflow.com/questions/28120483/how-to-declare-and-implement-a-struct-that-keeps-track-of-a-collection-of-struct", "title": "How to declare and implement a struct that keeps track of a collection of structs?", "body": "<p>I have a struct, call it <code>Master</code>, that needs to have a field <code>slaves</code> that is a collection of <code>Slave</code>s. When added to the <code>Master</code>, each <code>Slave</code> needs to be tagged with an unique id assigned to it by the <code>Master</code>.</p>\n\n<p>The way I'm trying to do this currently is like so:</p>\n\n<pre><code>pub struct Master {\n    slaves: VecMap&lt;Slave&gt;\n}\n\nimpl Master {\n    // omitted constructor\n    // fn get_unique_id(&amp;self) -&gt; usize {...}\n\n    pub fn add_slave(&amp;mut self, slave: &amp;mut Slave) {\n        let new_id = self.get_unique_id();\n        slave.set_id(new_id);\n        self.slaves.insert(new_id, *slave); \n        // Previous line causes \"cannot move out of borrowed content\" error\n    }\n\n    pub fn get_slave(&amp;self, id: usize) -&gt; Option&lt;&amp;Slave&gt; {\n        self.slaves.get(&amp;id)\n    }\n}\n</code></pre>\n\n<p>How should I declare the field of slaves (<code>VecMap</code> of refs or values) and implement these methods properly?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1526608603, "last_edit_date": 1526608603, "creation_date": 1422045138, "answer_id": 28118258, "question_id": 28118159, "link": "https://stackoverflow.com/questions/28118159/iteration-over-a-struct-vector/28118258#28118258", "title": "Iteration over a struct vector", "body": "<p>Switch to this:</p>\n\n<pre><code>for entry in self.elements.iter_mut() { /* ... */ }\n</code></pre>\n\n<p>Or more idiomatically:</p>\n\n<pre><code>for entry in &amp;mut self.elements { /* ... */ }\n</code></pre>\n\n<p><code>IterMut</code> contains a <em>reference</em> to the items in the vector (and thus will change the vector items directly), but it is itself an object on the stack that will be changed as the iteration progresses.</p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>the trait bound `&amp;std::slice::IterMut&lt;'_, Element&gt;: std::iter::Iterator` is not satisfied\n</code></pre>\n</blockquote>\n\n<p>This is saying that you've got an <code>IterMut</code> by reference. That is, the precedence is different from what you think it is:</p>\n\n<pre><code>&amp;self.elements.iter_mut() \n&amp;(self.elements.iter_mut()) // Is this\n(&amp;self.elements).iter_mut() // Not this\n</code></pre>\n\n<p>However, we'd have to do something like this:</p>\n\n<pre><code>(&amp;mut self.elements).iter_mut()\n</code></pre>\n\n<p>because <code>iter_mut</code> needs a mutable reference as the receiver. Rust understands that and lets us just do the straightforward version and appropriately pass the mutability around:</p>\n\n<pre><code>self.elements.iter_mut()\n</code></pre>\n"}], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6876, "favorite_count": 0, "accepted_answer_id": 28118258, "answer_count": 1, "score": 5, "last_activity_date": 1526608603, "creation_date": 1422044674, "last_edit_date": 1526608468, "question_id": 28118159, "link": "https://stackoverflow.com/questions/28118159/iteration-over-a-struct-vector", "title": "Iteration over a struct vector", "body": "<p>I have a struct that has a vector of another struct type.</p>\n\n<pre><code>struct Element {\n    val: String,\n}\n\nstruct Collection {\n    elements: Vec&lt;Element&gt;,\n}\n\nimpl Collection {\n    fn process(&amp;mut self) {\n        for entry in &amp;self.elements.iter_mut() {\n            entry.val = \"New value\".to_string();\n            println!(\"{}\", entry.val);\n        }\n    }\n}\n\nfn main() {\n    let e1 = Element {\n        val: \"My first entry\".to_string(),\n    };\n    let e2 = Element {\n        val: \"My second entry\".to_string(),\n    };\n    let mut c = Collection { elements: vec![] };\n    c.elements.push(e1);\n    c.elements.push(e2);\n    c.process();\n}\n</code></pre>\n\n<p>When I try to iterate over it, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;std::slice::IterMut&lt;'_, Element&gt;: std::iter::Iterator` is not satisfied\n  --&gt; src/main.rs:11:22\n   |\n11 |         for entry in &amp;self.elements.iter_mut() {\n   |                      -^^^^^^^^^^^^^^^^^^^^^^^^\n   |                      |\n   |                      `&amp;std::slice::IterMut&lt;'_, Element&gt;` is not an iterator; maybe try calling `.iter()` or a similar method\n   |                      help: consider removing 1 leading `&amp;`-references\n   |\n   = help: the trait `std::iter::Iterator` is not implemented for `&amp;std::slice::IterMut&lt;'_, Element&gt;`\n   = note: required by `std::iter::IntoIterator::into_iter`\n</code></pre>\n\n<p>I think this is because <code>&amp;self.elements</code> is really a reference. Using <code>self.elements</code> would work, but I was hoping to modify the actual objects rather than a copy.</p>\n\n<p>What would be a proper way of doing this?</p>\n"}, {"tags": ["pointers", "rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 24277, "user_id": 667984, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/0425d6234a21e166e8cc37878d0e87cd?s=128&d=identicon&r=PG", "display_name": "Renato Zannon", "link": "https://stackoverflow.com/users/667984/renato-zannon"}, "is_accepted": true, "score": 5, "last_activity_date": 1422042259, "last_edit_date": 1422042259, "creation_date": 1422038394, "answer_id": 28116557, "question_id": 28116147, "link": "https://stackoverflow.com/questions/28116147/static-struct-with-raw-pointer-gives-coremarkersync-is-not-implemented/28116557#28116557", "title": "static struct with raw pointer gives &quot;`core::marker::Sync` is not implemented...&quot;", "body": "<p>Here, <a href=\"http://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow\"><code>Sync</code> means \"can be safely shared between tasks when aliased\"</a>. Rust considers types that contain raw pointers to not be shareable between threads by default, and a static variable needs to be shareable.</p>\n\n<p>If you have reasons to believe that your type is indeed shareable between threads with no problem, then you can assert to the compiler that you know better:</p>\n\n<pre><code>unsafe impl Sync for MyStruct { }\n</code></pre>\n\n<p>If you have control over the C library however, I would encourage lifting the requirement that the struct needs to be static - maybe designing the library around a handle of some sort.</p>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1213, "favorite_count": 0, "accepted_answer_id": 28116557, "answer_count": 1, "score": 1, "last_activity_date": 1422042259, "creation_date": 1422036799, "question_id": 28116147, "link": "https://stackoverflow.com/questions/28116147/static-struct-with-raw-pointer-gives-coremarkersync-is-not-implemented", "title": "static struct with raw pointer gives &quot;`core::marker::Sync` is not implemented...&quot;", "body": "<p>I am trying to create some static data structures in Rust that will be passed to C code.  Below is a minimal example that fails to compile, and I have no idea what the error means in this context.  So the question is, why is it failing and how do I fix it?</p>\n\n<pre><code>pub struct MyStruct {\n    pub name: *const str,\n}\n\nstatic mystruct: MyStruct = MyStruct {name: \"why!!!\\0\"};\n\n// src/lib.rs:52:29: 52:56 error: the trait `core::marker::Sync` is not implemented for the type `*const str`\n// src/lib.rs:52 static mystruct: MyStruct = MyStruct {name: \"why!!!\\0\"};\n//                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["sublimetext3", "rust"], "answers": [{"tags": [], "owner": {"reputation": 89500, "user_id": 1426065, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/476e67c92121154e7910301e56cdfc4c?s=128&d=identicon&r=PG", "display_name": "MattDMo", "link": "https://stackoverflow.com/users/1426065/mattdmo"}, "is_accepted": true, "score": 1, "last_activity_date": 1422032648, "creation_date": 1422032648, "answer_id": 28115000, "question_id": 28114218, "link": "https://stackoverflow.com/questions/28114218/how-to-change-the-font-style-for-rust-primitive-types-in-sublimetext-3/28115000#28115000", "title": "How to change the font style for Rust primitive types in SublimeText 3?", "body": "<p>You will need to edit your color scheme to change the syntax highlighting. Look for the scope <code>storage</code> or <code>storage.type</code> and remove the <code>italic</code> setting. <a href=\"http://tmtheme-editor.herokuapp.com\" rel=\"nofollow\">This resource</a> is great for editing color schemes. If you're using Monokai, it comes up automatically. If not, click the <code>Gallery</code> button and select the color scheme you're using.</p>\n"}], "owner": {"reputation": 1315, "user_id": 812906, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/uy9sl.jpg?s=128&g=1", "display_name": "Dragonborn", "link": "https://stackoverflow.com/users/812906/dragonborn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 288, "favorite_count": 0, "accepted_answer_id": 28115000, "answer_count": 1, "score": 0, "last_activity_date": 1422076495, "creation_date": 1422030105, "last_edit_date": 1422076495, "question_id": 28114218, "link": "https://stackoverflow.com/questions/28114218/how-to-change-the-font-style-for-rust-primitive-types-in-sublimetext-3", "title": "How to change the font style for Rust primitive types in SublimeText 3?", "body": "<p>Right now types like i32 etc. are being shown as Italics.</p>\n\n<p>I wish to avoid that, but the only Rust preferences I see are in compiled form in ~/Library!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422028898, "post_id": 28113504, "comment_id": 44601507, "body": "&quot;the Mmu can live its own life by itself&quot; - but do you want to share the MMU across multiple CPUs at the same time?"}, {"owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1422028964, "post_id": 28113504, "comment_id": 44601561, "body": "&quot;&gt; do you want to share the MMU across multiple CPUs at the same time?&quot; that is not required (and doesn&#39;t work with the refs as explained here). That would be a nice feature tho."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1422029984, "post_id": 28113504, "comment_id": 44602275, "body": "I don&#39;t understand why you can&#39;t aggregate by value. You only say an <code>Mmu</code> needs to be able to live on its own, but a <code>Cpu</code> containing a <code>Mmu</code> by value doesn&#39;t prevent that. You can have an <code>Mmu</code> floating around doing whatever a free-range <code>Mmu</code> does, and at some point move it into a <code>Cpu</code> (and even move it back out, invaliding the <code>Cpu</code> in the process). The only thing you lose is the ability to have an MMU shared by multiple CPUs (or a RAM shared by multiple MMUs), which is semantically questionable. It could probably be done with <code>Rc</code> though."}, {"owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "edited": false, "score": 0, "creation_date": 1422030510, "post_id": 28113504, "comment_id": 44602653, "body": "&quot;&gt; You can have an Mmu, and then move it into a Cpu (and even move it back out, invaliding the Cpu in the process).&quot; Well there are 2 reasons: 1) It doesn&#39;t really make much sense with the analogy. The Ram is not a part of the Mmu. Later on, the Mmu will be able to switch between a Ram and a Cartridge. The cartridge is also clearly not semantically a part of the Mmu. 2) Wouldn&#39;t that mean copying tons of stuff around? Imagine the Ram is one big huge <code>u8</code> array."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1422030806, "post_id": 28113504, "comment_id": 44602850, "body": "@Aur&#233;lienVall&#233;e Aggregation does not imply a part-of relationship of the entities modeled. It only implies ownership, and ownership is certainly appropriate (though not something you&#39;d normally consider). And yes, moving copies, but that also applies to passing parameters, returning values, ordinary local assignments, etc. so if the type is big enough for moving to be prohibitive, there are already many good reasons to <code>Box</code> it (which keeps ownership but makes moves as cheap as a pointer copy). Plus, if it&#39;s more than a megabyte, it shouldn&#39;t be on the stack anyway."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1516110625, "last_edit_date": 1516110625, "creation_date": 1422029347, "answer_id": 28113990, "question_id": 28113504, "link": "https://stackoverflow.com/questions/28113504/structure-containing-fields-that-know-each-other/28113990#28113990", "title": "Structure containing fields that know each other", "body": "<p>I'd suggest adding an <em>exploder</em> (a term I just made up). It's a function that consumes the value and returns all the constituent parts:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Mmu(u32);\n\nimpl Mmu {\n    fn manage_that_memory(&amp;mut self) {\n        self.0 += 1\n    }\n}\n\nstruct Cpu {\n    mmu: Mmu,\n}\n\nimpl Cpu {\n    fn compute_like_a_computer(&amp;mut self) {\n        println!(\"Gonna compute! {:?}\", self.mmu);\n        self.mmu.manage_that_memory();\n        println!(\"Computed! {:?}\", self.mmu)\n    }\n\n    fn halt_and_catch_fire(self) -&gt; Mmu {\n        self.mmu\n    }\n}\n\nfn main() {\n    let mmu = Mmu(42);\n    let mut cpu = Cpu { mmu: mmu };\n    // println!(\"{:?}\", mmu); // Consumed by the CPU, for now\n    cpu.compute_like_a_computer();\n    let mmu = cpu.halt_and_catch_fire();\n    println!(\"{:?}\", mmu); // And we get it again\n}\n</code></pre>\n\n<p>Here, we go ahead and let the CPU have a MMU <strong>by value</strong>. Then, when we are done with the CPU, we break it down to the component parts which we can then reuse.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1422031488, "post_id": 28114482, "comment_id": 44603307, "body": "&quot;to share the underlying pieces, albeit immutably&quot; - which you can partially work around by using another <a href=\"http://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow noreferrer\"><code>Cell</code></a> or <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>, if you need to."}, {"owner": {"reputation": 826, "user_id": 542825, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8450ee8725542418165ffbb0921a7024?s=128&d=identicon&r=PG", "display_name": "Ned Ruggeri", "link": "https://stackoverflow.com/users/542825/ned-ruggeri"}, "edited": false, "score": 0, "creation_date": 1540966714, "post_id": 28114482, "comment_id": 93052357, "body": "Good and useful answer! Thanks!  Just a random note: I think you have to be careful in the <code>drop</code> methods. Say the <code>drop</code> for Mmu uses Ram. I&#39;m not sure what Rust guarantees in terms of drop order. It&#39;s possible that Rust will first drop Ram, then try to drop Mmu, but uh-oh this tries to use the already-dropped Ram.  I suppose in such a case you would have to write a <code>drop</code> for Computer as well."}], "tags": [], "owner": {"reputation": 6718, "user_id": 2455707, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/768bc63471394edee20bcd4131186118?s=128&d=identicon&r=PG", "display_name": "reem", "link": "https://stackoverflow.com/users/2455707/reem"}, "is_accepted": true, "score": 13, "last_activity_date": 1516110821, "last_edit_date": 1516110821, "creation_date": 1422031005, "answer_id": 28114482, "question_id": 28113504, "link": "https://stackoverflow.com/questions/28113504/structure-containing-fields-that-know-each-other/28114482#28114482", "title": "Structure containing fields that know each other", "body": "<p>In this answer I will discuss two approaches to solving this problem, one in safe Rust with zero dynamic allocation and very little runtime cost, but which can be constricting, and one with dynamic allocation that uses unsafe invariants.</p>\n\n<h2>The Safe Way (<code>Cell&lt;Option&lt;&amp;'a T&gt;</code>)</h2>\n\n<pre><code>use std::cell::Cell;\n\n#[derive(Debug)]\nstruct Computer&lt;'a&gt; {\n    ram: Ram,\n    mmu: Mmu&lt;'a&gt;,\n    cpu: Cpu&lt;'a&gt;,\n}\n\n#[derive(Debug)]\nstruct Ram;\n\n#[derive(Debug)]\nstruct Cpu&lt;'a&gt; {\n    mmu: Cell&lt;Option&lt;&amp;'a Mmu&lt;'a&gt;&gt;&gt;,\n}\n\n#[derive(Debug)]\nstruct Mmu&lt;'a&gt; {\n    ram: Cell&lt;Option&lt;&amp;'a Ram&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Computer&lt;'a&gt; {\n    fn new() -&gt; Computer&lt;'a&gt; {\n        Computer {\n            ram: Ram,\n            cpu: Cpu {\n                mmu: Cell::new(None),\n            },\n            mmu: Mmu {\n                ram: Cell::new(None),\n            },\n        }\n    }\n\n    fn freeze(&amp;'a self) {\n        self.mmu.ram.set(Some(&amp;self.ram));\n        self.cpu.mmu.set(Some(&amp;self.mmu));\n    }\n}\n\nfn main() {\n    let computer = Computer::new();\n    computer.freeze();\n\n    println!(\"{:?}, {:?}, {:?}\", computer.ram, computer.mmu, computer.cpu);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c3abed32895507cc5c1094a85ef5ad9b&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Contrary to popular belief, self-references <em>are</em> in fact possible in safe Rust, and even better, when you use them Rust will continue to enforce memory safety for you.</p>\n\n<p>The main \"hack\" needed to get self, recursive, or cyclical references using <code>&amp;'a T</code> is the use of a <code>Cell&lt;Option&lt;&amp;'a T&gt;</code> to contain the reference. You won't be able to do this without the <code>Cell&lt;Option&lt;T&gt;&gt;</code> wrapper.</p>\n\n<p>The clever bit of this solution is splitting initial creation of the struct from proper initialization. This has the unfortunate downside that it's possible to use this struct incorrectly by initializing it and using it before calling <code>freeze</code>, but it can't result in memory unsafety without further usage of <code>unsafe</code>.</p>\n\n<p>The initial creation of the struct only sets the stage for our later hackery - it creates the <code>Ram</code>, which has no dependencies, and sets the <code>Cpu</code> and <code>Mmu</code> to their unusable state, containing <code>Cell::new(None)</code> instead of the references they need.</p>\n\n<p>Then, we call the <code>freeze</code> method, which deliberately holds a borrow of self with lifetime <code>'a</code>, or the full lifetime of the struct. After we call this method, the compiler will prevent us from getting mutable references to the <code>Computer</code> <em>or</em> moving the <code>Computer</code>, as either could invalidate the reference that we are holding. The <code>freeze</code> method then sets up the <code>Cpu</code> and <code>Mmu</code> appropriately by setting the <code>Cell</code>s to contain <code>Some(&amp;self.cpu)</code> or <code>Some(&amp;self.ram)</code> respectively.</p>\n\n<p>After <code>freeze</code> is called our struct is ready to be used, but only immutably.</p>\n\n<h2>The Unsafe Way (<code>Box&lt;T&gt;</code> never moves <code>T</code>)</h2>\n\n<pre><code>#![allow(dead_code)]\n\nuse std::mem;\n\n// CRUCIAL INFO:\n//\n// In order for this scheme to be safe, Computer *must not*\n// expose any functionality that allows setting the ram or\n// mmu to a different Box with a different memory location.\n//\n// Care must also be taken to prevent aliasing of &amp;mut references\n// to mmu and ram. This is not a completely safe interface,\n// and its use must be restricted.\nstruct Computer {\n    ram: Box&lt;Ram&gt;,\n    cpu: Cpu,\n    mmu: Box&lt;Mmu&gt;,\n}\n\nstruct Ram;\n\n// Cpu and Mmu are unsafe to use directly, and *must only*\n// be exposed when properly set up inside a Computer\nstruct Cpu {\n    mmu: *mut Mmu,\n}\nstruct Mmu {\n    ram: *mut Ram,\n}\n\nimpl Cpu {\n    // Safe if we uphold the invariant that Cpu must be\n    // constructed in a Computer.\n    fn mmu(&amp;self) -&gt; &amp;Mmu {\n        unsafe { mem::transmute(self.mmu) }\n    }\n}\n\nimpl Mmu {\n    // Safe if we uphold the invariant that Mmu must be\n    // constructed in a Computer.\n    fn ram(&amp;self) -&gt; &amp;Ram {\n        unsafe { mem::transmute(self.ram) }\n    }\n}\n\nimpl Computer {\n    fn new() -&gt; Computer {\n        let ram = Box::new(Ram);\n\n        let mmu = Box::new(Mmu {\n            ram: unsafe { mem::transmute(&amp;*ram) },\n        });\n        let cpu = Cpu {\n            mmu: unsafe { mem::transmute(&amp;*mmu) },\n        };\n\n        // Safe to move the components in here because all the\n        // references are references to data behind a Box, so the\n        // data will not move.\n        Computer {\n            ram: ram,\n            mmu: mmu,\n            cpu: cpu,\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e3522a3cad0eb91e43a03b5702061670&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p><em>NOTE</em>: This solution is not completely safe given an unrestricted interface to <code>Computer</code> - care must be taken to not allow aliasing or removal of the <code>Mmu</code> or <code>Ram</code> in the public interface of Computer.</p>\n\n<p>This solution instead uses the invariant that data stored inside of a <code>Box</code> will never move - it's address will never change - as long as the <code>Box</code> remains alive. Rust doesn't allow you to depend on this in safe code, since moving a <code>Box</code> can cause the memory behind it be deallocated, thereby leaving a dangling pointer, but we can rely on it in unsafe code.</p>\n\n<p>The main trick in this solution is to use raw pointers into the contents of the <code>Box&lt;Mmu&gt;</code> and <code>Box&lt;Ram&gt;</code> to store references into them in the <code>Cpu</code> and <code>Mmu</code> respectively. This gets you a mostly safe interface, and doesn't prevent you from moving the <code>Computer</code> around or even mutating it in restricted cases.</p>\n\n<h2>An Ending Note</h2>\n\n<p>All of this said, I don't think either of these should really be the way you approach this problem. Ownership is a central concept in Rust, and it permeates the design choices of almost all code. If the <code>Mmu</code> owns the <code>Ram</code> and the <code>Cpu</code> owns the <code>Mmu</code>, that's the relationship you should have in your code. If you use <code>Rc</code>, you can even maintain the ability to share the underlying pieces, albeit immutably.</p>\n"}], "owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 884, "favorite_count": 1, "accepted_answer_id": 28114482, "answer_count": 2, "score": 5, "last_activity_date": 1516110967, "creation_date": 1422027921, "last_edit_date": 1516110967, "question_id": 28113504, "link": "https://stackoverflow.com/questions/28113504/structure-containing-fields-that-know-each-other", "title": "Structure containing fields that know each other", "body": "<p>I have a set of objects that need to know each other to cooperate. These objects are stored in a container. I'm trying to get a very simplistic idea of how to architecture my code in Rust.</p>\n\n<p>Let's use an analogy. A <code>Computer</code> contains:</p>\n\n<ul>\n<li>1 <code>Mmu</code></li>\n<li>1 <code>Ram</code></li>\n<li>1 <code>Processor</code></li>\n</ul>\n\n<p>In Rust:</p>\n\n<pre><code>struct Computer {\n    mmu: Mmu,\n    ram: Ram,\n    cpu: Cpu,\n}\n</code></pre>\n\n<p>For anything to work, the <code>Cpu</code> needs to know about the <code>Mmu</code> it is linked to, and the <code>Mmu</code> needs to know the <code>Ram</code> it is linked to.</p>\n\n<p><img src=\"https://i.stack.imgur.com/v6shC.png\" alt=\"\"></p>\n\n<p>I do <strong>not</strong> want the <code>Cpu</code> to <em>aggregate by value</em> the <code>Mmu</code>. Their lifetimes differ: the <code>Mmu</code> can live its own life by itself. It just happens that I can plug it to the <code>Cpu</code>. However, there is no sense in creating a <code>Cpu</code> without an <code>Mmu</code> attached to it, since it would not be able to do its job. The same relation exists between <code>Mmu</code> and <code>Ram</code>.</p>\n\n<p>Therefore:</p>\n\n<ul>\n<li>A <code>Ram</code> can live by itself.</li>\n<li>An <code>Mmu</code> needs a <code>Ram</code>.</li>\n<li>A <code>Cpu</code> needs an <code>Mmu</code>.</li>\n</ul>\n\n<p>How can I model that kind of design in Rust, one with <strong>a struct whose fields know about each other</strong>.</p>\n\n<p>In C++, it would be along the lines of:</p>\n\n<p>></p>\n\n<pre><code>struct Ram\n{\n};\n\nstruct Mmu\n{\n  Ram&amp; ram;\n  Mmu(Ram&amp; r) : ram(r) {}\n};\n\nstruct Cpu\n{\n  Mmu&amp; mmu;\n  Cpu(Mmu&amp; m) : mmu(m) {}\n};\n\nstruct Computer\n{\n    Ram ram;\n    Mmu mmu;\n    Cpu cpu;\n    Computer() : ram(), mmu(ram), cpu(mmu) {}\n};\n</code></pre>\n\n<p>Here is how I started translating that in Rust:</p>\n\n<pre><code>struct Ram;\n\nstruct Mmu&lt;'a&gt; {\n    ram: &amp;'a Ram,\n}\n\nstruct Cpu&lt;'a&gt; {\n    mmu: &amp;'a Mmu&lt;'a&gt;,\n}\n\nimpl Ram {\n    fn new() -&gt; Ram {\n        Ram\n    }\n}\n\nimpl&lt;'a&gt; Mmu&lt;'a&gt; {\n    fn new(ram: &amp;'a Ram) -&gt; Mmu&lt;'a&gt; {\n        Mmu {\n            ram: ram\n        }\n    }\n}\n\nimpl&lt;'a&gt; Cpu&lt;'a&gt; {\n    fn new(mmu: &amp;'a Mmu) -&gt; Cpu&lt;'a&gt; {\n        Cpu {\n            mmu: mmu,\n        }\n    }\n}\n\nfn main() {\n    let ram = Ram::new();\n    let mmu = Mmu::new(&amp;ram);\n    let cpu = Cpu::new(&amp;mmu);\n}\n</code></pre>\n\n<p>That is fine and all, but now I just can't find a way to create the <code>Computer</code> struct.</p>\n\n<p>I started with:</p>\n\n<pre><code>struct Computer&lt;'a&gt; {\n    ram: Ram,\n    mmu: Mmu&lt;'a&gt;,\n    cpu: Cpu&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; Computer&lt;'a&gt; {\n    fn new() -&gt; Computer&lt;'a&gt; {\n        // Cannot do that, since struct fields are not accessible from the initializer\n        Computer {\n            ram: Ram::new(),\n            mmu: Mmu::new(&amp;ram),\n            cpu: Cpu::new(&amp;mmu),\n        }\n\n        // Of course cannot do that, since local variables won't live long enough\n        let ram = Ram::new();\n        let mmu = Mmu::new(&amp;ram);\n        let cpu = Cpu::new(&amp;mmu);\n        Computer {\n            ram: ram,\n            mmu: mmu,\n            cpu: cpu,\n        }\n    }\n}\n</code></pre>\n\n<p>Okay, whatever, I won't be able to find a way to reference structure fields between them. I thought I could come up with something by creating the <code>Ram</code>, <code>Mmu</code> and <code>Cpu</code> on the heap; and put that inside the struct:</p>\n\n<pre><code>struct Computer&lt;'a&gt; {\n    ram: Box&lt;Ram&gt;,\n    mmu: Box&lt;Mmu&lt;'a&gt;&gt;,\n    cpu: Box&lt;Cpu&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Computer&lt;'a&gt; {\n    fn new() -&gt; Computer&lt;'a&gt; {\n        let ram = Box::new(Ram::new());\n        // V-- ERROR: reference must be valid for the lifetime 'a\n        let mmu = Box::new(Mmu::new(&amp;*ram));\n        let cpu = Box::new(Cpu::new(&amp;*mmu));\n        Computer {\n            ram: ram,\n            mmu: mmu,\n            cpu: cpu,\n        }\n    }\n}\n</code></pre>\n\n<p>Yeah that's right, at this point in time Rust has no way to know that I'm going to transfer ownership of <code>let ram = Box::new(Ram::new())</code> to the <code>Computer</code>, so it will get a lifetime of <code>'a</code>.</p>\n\n<p>I've been trying various more or less hackish ways to get that right, but I just can't come up with a clean solution. The closest I've come is to drop the reference and use an <code>Option</code>, but then all my methods have to check whether the <code>Option</code> is <code>Some</code> or <code>None</code>, which is rather ugly.</p>\n\n<p>I think I'm just on the wrong track here, trying to map what I would do in C++ in Rust, but that doesn't work. That's why I would need help finding out what is the idiomatic Rust way of creating this architecture.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1422012394, "post_id": 28108689, "comment_id": 44591641, "body": "I don&#39;t know what you want to do, but what you are doing is trying to create a reference to a value whose lifetime is smaller than &#39;a. It has the lifetime of the function&#39;s body."}, {"owner": {"reputation": 362, "user_id": 2961358, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nF8Dm.jpg?s=128&g=1", "display_name": "Hinogary", "link": "https://stackoverflow.com/users/2961358/hinogary"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1422012501, "post_id": 28108689, "comment_id": 44591694, "body": "I&#39;m trying to expose that variable to outside of body with lifetime parameter. If it&#39;s possible."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1422013208, "post_id": 28108689, "comment_id": 44592103, "body": "that variable is dead outside of the function body. if you could access it, you would be overwriting other memory. The error message (see <a href=\"http://is.gd/ju7hFZ\" rel=\"nofollow noreferrer\">is.gd/ju7hFZ</a>) tells you exactly that."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1598028584, "post_id": 28108689, "comment_id": 112334601, "body": "These functions now <i>do</i> compile due to <code>static</code> promotion (see <a href=\"/q/50345139/3650362\">Why can I return a reference to a local literal but not a variable?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1422013678, "post_id": 28109180, "comment_id": 44592305, "body": "Discarding my own in-progress answer, but I want to point out a third option: if it&#39;s <i>always</i> returning <code>5</code>, or any finite set of answers, you can return a borrowed reference to a static variable: <code>static FIVE: isize = 5;</code>, then <code>&amp;FIVE</code> as the result of the function."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 22, "last_activity_date": 1598023292, "last_edit_date": 1598023292, "creation_date": 1422013458, "answer_id": 28109180, "question_id": 28108689, "link": "https://stackoverflow.com/questions/28108689/how-to-initialize-a-variable-with-a-lifetime/28109180#28109180", "title": "How to initialize a variable with a lifetime?", "body": "<p>You can't. A lifetime parameter does not allow you to choose how long a value lives, it only allows you to communicate to the compiler that two or more references are &quot;related&quot; to the same memory and are expected to share the same lifetime.</p>\n<p>A function (like <code>new_int</code> in your case) can allocate memory in two ways:</p>\n<ul>\n<li>locally in an area that is allocated to the function itself and is destroyed when you return from the function (the stack)</li>\n<li>dynamically in an area of memory that is common to all functions (the heap)</li>\n</ul>\n<p>A reference (<code>&amp;</code>) is a pointer to an area of memory. It can point to the local stack, or to the heap. Since dynamic allocations are much more expensive in terms of performance than writing on the stack, Rust uses the stack by default (you have to use a Box to perform a dynamic allocation).</p>\n<p>So, in a nutshell, this is why your code is illegal:</p>\n<pre><code>fn new_int&lt;'a&gt;() -&gt; &amp;'a isize {\n    let a: &amp;'a isize = &amp;5; // write 5 on the function's local stack\n    a // return a pointer to that area of memory\n} // the function ends and its stack (where I wrote 5) is destroyed\n  // so the pointer I'm trying to return is no longer valid\n</code></pre>\n<p>You can either return the value</p>\n<pre><code>fn new_int() -&gt; isize {\n    5\n}\n\nfn main() {\n    let a = new_int(); // the value 5 (not a pointer) is copied into a\n}\n</code></pre>\n<p>or perform a dynamic allocation (which is overkill in case of an isize but might make sense if you're actually working with a big structure)</p>\n<pre><code>fn new_int() -&gt; Box&lt;isize&gt; {\n    Box::new(5) // a Box allocates memory and writes in the heap\n}\n\nfn main() {\n    let a = *new_int();\n}\n</code></pre>\n<p>alternatively, you can allocate memory outside of the function and mutate it in the function. You don't typically do it for a primitive type, but it makes sense in some scenarios (e.g. streaming of data):</p>\n<pre><code>// new_int does not return anything. Instead it mutates\n// the old_int in place\nfn new_int(old_int: &amp;mut isize) {\n    *old_int = 5;\n}\n\nfn main() {\n    let mut a = 2; // memory for an int is allocated locally\n                   // in main()\n    new_int(&amp;mut a); // a mutable reference to that memory is passed\n                     // to new_int, that overwrites it with another value\n}\n</code></pre>\n<p>As <a href=\"https://stackoverflow.com/questions/28108689/how-to-initialize-a-variable-with-a-lifetime/28109180#comment44592305_28109180\">@dk mentions in the comment below,</a>, in this specific case (i.e. your function always returns 5 or some other statically known value, not something calculated dynamically by the function) you can also return a reference with a <code>'static</code> lifetime:</p>\n<pre><code>fn new_int&lt;'a&gt;() -&gt; &amp;'a isize {\n    static FIVE: isize = 5;\n    &amp;FIVE\n}\n</code></pre>\n<p>You can read more about '<code>static</code> <a href=\"https://doc.rust-lang.org/reference/items/static-items.html\" rel=\"nofollow noreferrer\">in the Rust Reference</a>.</p>\n<p>As of Rust 1.21, this &quot;static promotion&quot; is now performed for you automatically and your original code compiles. It creates the equivalent of the <code>static FIVE</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 9, "last_activity_date": 1515520619, "last_edit_date": 1515520619, "creation_date": 1422027672, "answer_id": 28113411, "question_id": 28108689, "link": "https://stackoverflow.com/questions/28108689/how-to-initialize-a-variable-with-a-lifetime/28113411#28113411", "title": "How to initialize a variable with a lifetime?", "body": "<p>An alternative way of understanding why</p>\n\n<pre><code>fn new_int&lt;'a&gt;() -&gt; &amp;'a isize {\n    &amp;5\n}\n</code></pre>\n\n<p>can't work is as follows. <code>'a</code> is a lifetime <em>parameter</em> of the function; that is, it is the <em>caller</em> who chooses the actual value of this parameter, not the function itself. For example, the caller can choose <code>'static</code> lifetime:</p>\n\n<pre><code>let i: &amp;'static isize = new_int();\n</code></pre>\n\n<p>However, <code>&amp;5</code> can not have the <code>'static</code> lifetime so the function is rejected.</p>\n\n<p>In other words, such declaration essentially says \"I can give you a reference of any lifetime you want\". Naturally, this is only valid if the reference returned from the function is of <code>'static</code> lifetime, which is the largest lifetime possible. That's what DK. is telling about, by the way.</p>\n"}, {"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1596553769, "creation_date": 1596553769, "answer_id": 63249808, "question_id": 28108689, "link": "https://stackoverflow.com/questions/28108689/how-to-initialize-a-variable-with-a-lifetime/63249808#63249808", "title": "How to initialize a variable with a lifetime?", "body": "<p>Lifetimes only describe what the code is already doing. They don't affect behavior of the code in any way.</p>\n<p>They're not an instruction to make something live as long as required, but a consistency check that ensures the code actually does what is says it does.</p>\n<p>In fact, Rust strips all lifetimes from the code after checking them, and then compiles the code without any knowledge of lifetimes.</p>\n<p>Variables are destroyed at the end of their scope, and that is their lifetime. You can't say declare that they're not doing this.</p>\n"}], "owner": {"reputation": 362, "user_id": 2961358, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nF8Dm.jpg?s=128&g=1", "display_name": "Hinogary", "link": "https://stackoverflow.com/users/2961358/hinogary"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8426, "favorite_count": 1, "accepted_answer_id": 28109180, "answer_count": 3, "score": 17, "last_activity_date": 1598023292, "creation_date": 1422011736, "last_edit_date": 1515520562, "question_id": 28108689, "link": "https://stackoverflow.com/questions/28108689/how-to-initialize-a-variable-with-a-lifetime", "title": "How to initialize a variable with a lifetime?", "body": "<p>I have following code and don't know how to get it working:</p>\n\n<pre><code>fn new_int&lt;'a&gt;() -&gt; &amp;'a isize {\n    &amp;5\n}\n\nfn main() {\n    let x = new_int();\n}\n</code></pre>\n\n<p>Or another attempt:</p>\n\n<pre><code>fn new_int&lt;'a&gt;() -&gt; &amp;'a isize {\n    let a: &amp;'a isize = &amp;5;\n    a\n}\n\nfn main() {\n    let x = new_int();\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 65, "user_id": 4301036, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3732a9cbfbdcfe302171931e49d7a3e9?s=128&d=identicon&r=PG&f=1", "display_name": "Spiderpig", "link": "https://stackoverflow.com/users/4301036/spiderpig"}, "edited": false, "score": 1, "creation_date": 1422023254, "post_id": 28110600, "comment_id": 44597663, "body": "Thanks! The problem was in libxinerama-dev."}], "tags": [], "owner": {"reputation": 786, "user_id": 108611, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/eb2d8324a32de112e4714635dc2f6058?s=128&d=identicon&r=PG", "display_name": "buster", "link": "https://stackoverflow.com/users/108611/buster"}, "is_accepted": true, "score": 3, "last_activity_date": 1422018322, "creation_date": 1422018322, "answer_id": 28110600, "question_id": 28106795, "link": "https://stackoverflow.com/questions/28106795/usr-bin-ld-cannot-find-lxinerama-when-compiling-window-manager/28110600#28110600", "title": "/usr/bin/ld: cannot find -lXinerama when compiling window manager", "body": "<p>You might want to install libxinerama and libxinerama-dev</p>\n"}], "owner": {"reputation": 65, "user_id": 4301036, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3732a9cbfbdcfe302171931e49d7a3e9?s=128&d=identicon&r=PG&f=1", "display_name": "Spiderpig", "link": "https://stackoverflow.com/users/4301036/spiderpig"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1531, "favorite_count": 0, "accepted_answer_id": 28110600, "answer_count": 1, "score": 1, "last_activity_date": 1422018322, "creation_date": 1422005606, "question_id": 28106795, "link": "https://stackoverflow.com/questions/28106795/usr-bin-ld-cannot-find-lxinerama-when-compiling-window-manager", "title": "/usr/bin/ld: cannot find -lXinerama when compiling window manager", "body": "<p>When I'm trying to compile <a href=\"https://github.com/Kintaro/wtftw\" rel=\"nofollow\">https://github.com/Kintaro/wtftw</a> or code from tutorial <a href=\"https://kintaro.github.io/rust/window-manager-in-rust-01/\" rel=\"nofollow\">https://kintaro.github.io/rust/window-manager-in-rust-01/</a> written by the same author, I get an error message that says </p>\n\n<p><code>note: /usr/bin/ld: cannot find -lXinerama\n</code> The problem seems to be in this crate </p>\n\n<p><code>extern crate xinerama;\n</code>\nBut xinerama itself builds successfully.\nHow can I change code/cargo settings or anything else to fix it? I'm using Ubuntu 14.04 and rust nightly.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5222, "user_id": 818420, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6a3ae1214b4d2450f85a2039c38af7f1?s=128&d=identicon&r=PG", "display_name": "Toni C&#225;rdenas", "link": "https://stackoverflow.com/users/818420/toni-c%c3%a1rdenas"}, "edited": false, "score": 0, "creation_date": 1421977897, "post_id": 28101716, "comment_id": 44579046, "body": "Could you expand a bit on what &quot;do auto deref&quot; means? A <code>core::Object</code> is just some trait, that yes, it inherits from <code>Clone</code>."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 5222, "user_id": 818420, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6a3ae1214b4d2450f85a2039c38af7f1?s=128&d=identicon&r=PG", "display_name": "Toni C&#225;rdenas", "link": "https://stackoverflow.com/users/818420/toni-c%c3%a1rdenas"}, "edited": false, "score": 1, "creation_date": 1421982856, "post_id": 28101716, "comment_id": 44580170, "body": "some_box.foo() will call the <code>foo()</code> method on what is in the box, not on the box itself. It will do this as many times as it needs to call the inner method, say, if it was wrapped in three boxes."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 2, "last_activity_date": 1421977098, "creation_date": 1421977098, "answer_id": 28101716, "question_id": 28101655, "link": "https://stackoverflow.com/questions/28101655/dealing-with-boxes-and-trait-objects/28101716#28101716", "title": "Dealing with boxes and trait objects", "body": "<blockquote>\n  <p>So I don't get why I'm getting a T and not a Box out of clone().</p>\n</blockquote>\n\n<p>Methods <em>also</em> do auto deref. I don't know what a <code>core::Object</code> is, but if it implements <code>Clone</code>, that's why, I'd bet.</p>\n"}, {"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 2, "last_activity_date": 1421977747, "creation_date": 1421977747, "answer_id": 28101818, "question_id": 28101655, "link": "https://stackoverflow.com/questions/28101655/dealing-with-boxes-and-trait-objects/28101818#28101818", "title": "Dealing with boxes and trait objects", "body": "<p>If you're fine with just a reference to the object, you can do something like:</p>\n\n<pre><code>Some(&amp;self.objects[*i])\n</code></pre>\n\n<p>You can even implement <a href=\"http://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow\"><code>Index</code></a> to be able to leverage the indexing operator, so you can do <code>some_packfile[3]</code>.</p>\n"}], "owner": {"reputation": 5222, "user_id": 818420, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6a3ae1214b4d2450f85a2039c38af7f1?s=128&d=identicon&r=PG", "display_name": "Toni C&#225;rdenas", "link": "https://stackoverflow.com/users/818420/toni-c%c3%a1rdenas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 696, "favorite_count": 0, "accepted_answer_id": 28101818, "answer_count": 2, "score": 1, "last_activity_date": 1421977747, "creation_date": 1421976641, "question_id": 28101655, "link": "https://stackoverflow.com/questions/28101655/dealing-with-boxes-and-trait-objects", "title": "Dealing with boxes and trait objects", "body": "<p>I have a vector of boxes of some trait <code>core::Object</code> objects:</p>\n\n<pre><code>pub struct Packfile&lt;'a&gt; {\n    pub version: u32,\n    pub objects: Vec&lt;Box&lt;core::Object + 'a&gt;&gt;,\n    ...\n</code></pre>\n\n<p>Now, I want one method of <code>Packfile</code> to return one of those objects optionally: <code>-&gt; Option&lt;Box&lt;core::Object + 'a&gt;&gt;</code>. So, having <code>i</code> as a reference to the index I want, I return this:</p>\n\n<pre><code>Some(self.objects[*i])\n</code></pre>\n\n<p>OK, this doesn't work because I'm moving the box outside of the vec. Makes sense. Let's <code>clone</code> it (<code>core::Object</code> inherits from <code>Clone</code>).</p>\n\n<pre><code>Some(self.objects[*i].clone())\n</code></pre>\n\n<p>Now, here is what I don't understand. <code>self.objects[*i]</code> is a box, and <code>clone()</code> on boxes <a href=\"http://doc.rust-lang.org/nightly/std/boxed/struct.Box.html#method.clone\" rel=\"nofollow\">do this</a>: <code>impl&lt;T&gt; Clone for Box&lt;T&gt; where T: Clone { fn clone(&amp;self) -&gt; Box&lt;T&gt;; }</code> so <code>clone()</code> should be giving me a box, right? But I get this error:</p>\n\n<pre><code>src/packfile/mod.rs:190:20: 190:44 error: mismatched types:\n expected `Box&lt;core::Object + 'a&gt;`,\n    found `core::Object + 'a`\n(expected box,\n    found trait core::Object)\nsrc/packfile/mod.rs:190             Some(self.objects[*i].clone()),\n                                         ^~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>So I don't get why I'm getting a <code>T</code> and not a <code>Box&lt;T&gt;</code> out of <code>clone()</code>.</p>\n\n<p>Can you help me?</p>\n"}, {"tags": ["macros", "include", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421958148, "post_id": 28097572, "comment_id": 44571781, "body": "I was able to <code>include!</code> a file without a wrapper module. You may want to ask a second question if this continues to be a problem."}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421959168, "post_id": 28097572, "comment_id": 44572322, "body": "I tried the unwrapped include! and what do you know, it worked!  I must have had something else messing up compilation."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421958070, "post_id": 28097808, "comment_id": 44571737, "body": "You may want to put the <code>use libc::c_int;</code> <i>into</i> the snippet as well, since it&#39;s more appropriately tied there..."}, {"owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "edited": false, "score": 0, "creation_date": 1421958443, "post_id": 28097808, "comment_id": 44571932, "body": "Shepmaster:  That alone doesn&#39;t compile, but if I bring the module wrapper into the snippet then it <i>does</i> work.  I think I will do it that way and think of my snippets as fully self contained modules rather than fragments of code."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1421957451, "creation_date": 1421957451, "answer_id": 28097808, "question_id": 28097572, "link": "https://stackoverflow.com/questions/28097572/included-source-does-not-see-types-imported-with-use/28097808#28097808", "title": "Included source does not see types imported with use", "body": "<p>You just need to move <code>use libc::c_int</code> to the inner <code>mod</code> declaration because <code>use</code>s are only valid inside the module they are used:</p>\n\n<pre><code>mod nif_versions {\n    use libc::c_int;\n    include!(concat!(env!(\"OUT_DIR\"), \"/nif_versions.snippet\"));\n}\n</code></pre>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 39, "favorite_count": 0, "accepted_answer_id": 28097808, "answer_count": 1, "score": 0, "last_activity_date": 1421957922, "creation_date": 1421956698, "last_edit_date": 1421957922, "question_id": 28097572, "link": "https://stackoverflow.com/questions/28097572/included-source-does-not-see-types-imported-with-use", "title": "Included source does not see types imported with use", "body": "<p>I am struggling to include! some automatically generated code into a module.  My module looks like...</p>\n\n<pre><code>use libc::c_int;\n\nmod nif_versions {\ninclude!(concat!(env!(\"OUT_DIR\"), \"/nif_versions.snippet\"));\n}\n</code></pre>\n\n<p>... and nif_versions.snippet looks like ...</p>\n\n<pre><code>const NIF_MAJOR_VERSION: c_int = 2;\nconst NIF_MINOR_VERSION: c_int = 7;\n</code></pre>\n\n<p>But this gives me the following error:</p>\n\n<pre><code>/home/goertzen/ruster/target/build/ruster-7f1b6b5473eea720/out/nif_versions.snippet:1:26: 1:31 error: use of undeclared type name `c_int`\n/home/goertzen/ruster/target/build/ruster-7f1b6b5473eea720/out/nif_versions.snippet:1 const NIF_MAJOR_VERSION: c_int = 2;\n                                                                                                               ^~~~~\nnote: in expansion of include!\n</code></pre>\n\n<p>If I skip the include! and paste those 2 lines manually, everything works.  Also, I had to wrap the include in a module to make it work at all.  I would like to get rid of that if possible.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421949408, "post_id": 28094636, "comment_id": 44566911, "body": "Which kind of string do you have, a <code>&amp;str</code> or a <code>String</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421949729, "post_id": 28094636, "comment_id": 44567094, "body": "Please include the signature of the C function, as it will contain details about how the method is supposed to be called. Specifically, I&#39;m curious how the function knows how much space there is in the string so it doesn&#39;t extend past allocated memory."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1421955443, "post_id": 28094636, "comment_id": 44570252, "body": "Ideally <code>CString</code> would have <code>DerefMut</code> implementation with <code>Output = [c_char]</code>, so it would be possible to obtain <code>*mut c_char</code> just with <code>c_str.as_mut_ptr()</code>. But I think that the reason there is no such implementation is that it could break <code>CString</code> guarantee that it does not contain zeros inside: <code>c_str[2] = 0</code> would be possible in that case. So, I think, your <code>Vec</code>-based solution is fine; just don&#39;t forget to push a zero byte at the end if your C API needs a zero-terminated string."}], "answers": [{"tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": false, "score": 1, "last_activity_date": 1421949256, "last_edit_date": 1421949256, "creation_date": 1421947646, "answer_id": 28095006, "question_id": 28094636, "link": "https://stackoverflow.com/questions/28094636/how-do-i-get-a-mut-c-char-from-a-str/28095006#28095006", "title": "How do I get a *mut c_char from a Str?", "body": "<p>Look at <a href=\"http://doc.rust-lang.org/std/slice/trait.SliceExt.html#tymethod.as_mut_ptr\" rel=\"nofollow\">this piece of documentation</a>, the <code>fn as_mut_ptr()</code> has been moved to the <em>slice</em> part of the API. So you need a mutable slice of type <code>&amp;mut [c_char]</code>. And AFAIK you cannot get that from a <code>CString</code>, those would be read-only.</p>\n\n<p>Instead you can use a <code>mut Vec&lt;c_char&gt;</code>:</p>\n\n<pre><code>let mut x : Vec&lt;c_char&gt; = ...;\nlet slice = x.as_mut_slice();\nlet ptr = slice.as_mut_ptr();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1421961151, "post_id": 28095797, "comment_id": 44573346, "body": "Nice, but I think you can omit the <code>map_in_place</code>. Maybe the compiler is able to optimize out that code, because a <code>u8</code> and a <code>c_char</code> (aka <code>i8</code>) are guaranteed to be bit-identical, IIANM."}, {"owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1421965757, "post_id": 28095797, "comment_id": 44575359, "body": "No, it does not compile without the map_in_place ;)"}, {"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1421970714, "post_id": 28095797, "comment_id": 44577080, "body": "What I mean is that you can declare <code>name : *mut u8</code> and change the API import code accordingly and all should just work. Or maybe you could <code>transmute()</code> it, but I don&#39;t know the exact rules."}], "tags": [], "owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "is_accepted": false, "score": 0, "last_activity_date": 1421953840, "last_edit_date": 1421953840, "creation_date": 1421950171, "answer_id": 28095797, "question_id": 28094636, "link": "https://stackoverflow.com/questions/28094636/how-do-i-get-a-mut-c-char-from-a-str/28095797#28095797", "title": "How do I get a *mut c_char from a Str?", "body": "<p>Thanks to rodrigo's post, I found a way (very dirty, but it works) to solve my problem. Here is the code :</p>\n\n<pre><code>let mut string = std::string::String::from_str(\"Test\");\nlet bytes = string.into_bytes();\nlet mut cchar : Vec&lt;c_char&gt; = bytes.map_in_place(|w| w as c_char);\nlet slice = cchar.as_mut_slice();\nlet name: *mut c_char = slice.as_mut_ptr();\n</code></pre>\n\n<p>A bit complex in my opinion</p>\n"}, {"comments": [{"owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "edited": false, "score": 0, "creation_date": 1421965809, "post_id": 28097311, "comment_id": 44575385, "body": "Thank you, in fact, one less function to call that&#39;s always better ^^"}, {"owner": {"reputation": 4031, "user_id": 4142087, "user_type": "registered", "accept_rate": 92, "profile_image": "https://graph.facebook.com/100004205677206/picture?type=large", "display_name": "Anton Shkurenko", "link": "https://stackoverflow.com/users/4142087/anton-shkurenko"}, "edited": false, "score": 0, "creation_date": 1611237593, "post_id": 28097311, "comment_id": 116390276, "body": "It doesn&#39;t work now :("}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1421955788, "creation_date": 1421955788, "answer_id": 28097311, "question_id": 28094636, "link": "https://stackoverflow.com/questions/28094636/how-do-i-get-a-mut-c-char-from-a-str/28097311#28097311", "title": "How do I get a *mut c_char from a Str?", "body": "<pre><code>let bytes = String::from_str(\"Test\").into_bytes() + b\"\\0\";\nlet cchars = bytes.map_in_place(|b| b as c_char);\nlet name: *mut c_char = cchars.as_mut_ptr();\n</code></pre>\n\n<p>The basic idea is the same as yours but there is no need to slice the <code>Vec</code> explicitly; also a zero byte is appended to the buffer. See also my comment to the question.</p>\n"}], "owner": {"reputation": 2223, "user_id": 2592187, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a5596919cd864333c80fec0a2aa8ff9a?s=128&d=identicon&r=PG", "display_name": "Peekmo", "link": "https://stackoverflow.com/users/2592187/peekmo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2141, "favorite_count": 0, "accepted_answer_id": 28097311, "answer_count": 3, "score": 2, "last_activity_date": 1421955788, "creation_date": 1421946472, "last_edit_date": 1421949369, "question_id": 28094636, "link": "https://stackoverflow.com/questions/28094636/how-do-i-get-a-mut-c-char-from-a-str", "title": "How do I get a *mut c_char from a Str?", "body": "<p>To be able to use C library, I need to give a <code>*mut c_char</code> parameter to a function. But I don't find a way to have it from a <code>str</code>.</p>\n\n<p>I converted my str to a <a href=\"http://doc.rust-lang.org/std/ffi/struct.CString.html\" rel=\"nofollow\">CString</a>, that's ok, but there's no more way from CString to get a <code>*mut c_char</code> in the nightly build. I found that in 0.12.0 there was a <a href=\"http://doc.rust-lang.org/0.12.0/std/c_str/struct.CString.html#method.as_mut_ptr\" rel=\"nofollow\">method</a>, but now, what is the process to get that <code>*mut c_char</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421939399, "post_id": 28091340, "comment_id": 44560502, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/26349778/how-can-i-provide-a-reference-to-a-struct-that-is-a-sibling\">How can I provide a reference to a struct that is a sibling?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "edited": false, "score": 0, "creation_date": 1421940616, "post_id": 28091408, "comment_id": 44561348, "body": "There has to be a &quot;rusty&quot; way to handle this case? Maybe I could use <code>Option&lt;Foo&gt;</code>, and check in each function that there is something inside?"}, {"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 0, "creation_date": 1421944431, "post_id": 28091408, "comment_id": 44564002, "body": "I may misunderstand, but I think this <i>must</i> be unsafe because rust &quot;moves&quot; always involve memcpy&#39;s. So, if you have a function <code>fn takeContainer(c: Container) {...}</code>, the address of <code>c</code> in the body of this function is allowed be different than the address of <code>c</code> in the caller. This means that the address of <code>c.f</code> and <code>c.b</code> will also change. So the contents of <code>c.b</code> have to change when the value is moved. But that won&#39;t happen with a <code>memcpy</code>, so the reference would point to the wrong address."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 2, "last_activity_date": 1421937578, "creation_date": 1421937578, "answer_id": 28091408, "question_id": 28091340, "link": "https://stackoverflow.com/questions/28091340/how-to-get-the-equivalent-of-c-initializer-lists/28091408#28091408", "title": "How to get the equivalent of C++ initializer lists", "body": "<p>It is not possible to express this concept in safe code in Rust.</p>\n"}, {"comments": [{"owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "edited": false, "score": 0, "creation_date": 1421972231, "post_id": 28100656, "comment_id": 44577522, "body": "I get your point here, but I don&#39;t understand how this is related to the problem. Doesn&#39;t that just imply that <code>Container</code> is not implicitely byte-copyable, and thus should implement the <code>Copy</code> trait to handle this case? (and initialize the reference to point to the newly created other field)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "edited": false, "score": 0, "creation_date": 1421973894, "post_id": 28100656, "comment_id": 44577966, "body": "<a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a> doesn&#39;t have any methods to implement, none of the marker traits do. <code>Copy</code> also specifically says: &quot;Types that can be copied by simply copying bits&quot;."}, {"owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "edited": false, "score": 0, "creation_date": 1421974414, "post_id": 28100656, "comment_id": 44578110, "body": "My bad, I misread the meaning of the <code>Copy</code> trait. I think your explanation is starting to find its way through my brain... thanks a lot."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "edited": false, "score": 1, "creation_date": 1421999714, "post_id": 28100656, "comment_id": 44585195, "body": "@Aur&#233;lienVall&#233;e: it is less a matter of copy and more a matter of <i>move</i>. For simplicity reasons, all structures in Rust are byte-movable; this has huge advantages in terms of designing containers for example because 1/ it guarantees the operation is No Throw and 2/ it is easy to bulk-move (memcpy). To regain that, C++ containers have to have multiple execution paths depending on whether the move/copy is <code>noexcept</code> and whether a type is trivially movable/copyable; the alternatives are eliminated at compile-time thanks to monomorphisation, but that&#39;s a lot more complex."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1421969896, "creation_date": 1421969896, "answer_id": 28100656, "question_id": 28091340, "link": "https://stackoverflow.com/questions/28091340/how-to-get-the-equivalent-of-c-initializer-lists/28100656#28100656", "title": "How to get the equivalent of C++ initializer lists", "body": "<p>Consider this simplified view of memory. I'm making up sizes and offsets to illustrate the problem, they bear no resemblance to reality.</p>\n\n<p>We start by stack-allocating a brand-new <code>Container</code> with your desired structure at address 80.</p>\n\n<pre><code>80 Container\n..   foo: Foo (size 8)\n88   bar: Bar\n       foo: &amp;Foo (size 8, value 80)\n</code></pre>\n\n<p>Now we pass the structure by value into a method, or return it from where we created it, like a constructor would. Moving by value involves a bit-for-bit copy, so let's move it to address 40:</p>\n\n<pre><code>40 Container\n..   foo: Foo (size 8)\n48   bar: Bar\n       foo: &amp;Foo (size 8, value 80)\n</code></pre>\n\n<p>Uh oh! The inner <code>foo</code> now points to a piece of memory that <em>isn't part of our struct anymore</em>! That's the type of unsafe code that Rust tries to prevent.</p>\n\n<p>Conceptually, there are some ways to prevent this. Rust could track that a pointer is really just some offset into itself and then rewrite the value every time the item is moved. I don't know, but that seems expensive. It might also need some special syntax to denote it.</p>\n\n<p>A solution I would like to see would involve indirection and the heap. If we heap-allocated the top-level <code>foo</code> <em>and if Rust tracked stack and heap lifetimes separately</em>, then we could have something like:</p>\n\n<pre><code>== stack\n80 Container\n..   foo: Box&lt;Foo&gt; (size 8, value 10)\n88   bar: Bar\n       foo: &amp;Foo (size 8, value 10)\n\n== heap\n10 Foo (size 8) \n</code></pre>\n\n<p>Moving the structure would change the addresses, but the value would be safe-and-sound because <code>Foo</code> is off in the heap and not moving around.</p>\n\n<p>I don't know that there are any plans to support this kind of solution, but I don't think there's been much clamor for it, either. Maybe it's not even technically feasible!</p>\n"}], "owner": {"reputation": 2218, "user_id": 158049, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ae7b79be8bafc0f649589174bb15eefe?s=128&d=identicon&r=PG&f=1", "display_name": "NewbiZ", "link": "https://stackoverflow.com/users/158049/newbiz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 364, "favorite_count": 0, "accepted_answer_id": 28100656, "answer_count": 2, "score": 1, "last_activity_date": 1421969896, "creation_date": 1421937402, "last_edit_date": 1421967208, "question_id": 28091340, "link": "https://stackoverflow.com/questions/28091340/how-to-get-the-equivalent-of-c-initializer-lists", "title": "How to get the equivalent of C++ initializer lists", "body": "<p>I have two simple structures like that:</p>\n\n<pre><code>struct Foo {\n}\n\nstruct Bar&lt;'a&gt; {\n    foo: &amp;'a mut Foo;\n}\n\nimpl Foo {\n    pub fn new() -&gt; Foo {\n        Foo\n    }\n}\n\nimpl&lt;'a&gt; Bar&lt;'a&gt; {\n    pub fn new(foo: &amp;'a mut Foo) -&gt; Bar&lt;'a&gt; {\n        Bar {\n            foo: foo,\n        }\n    }\n}\n</code></pre>\n\n<p>So basically the structure <code>Bar</code> needs a reference to a <code>Foo</code> to work on. This is how I use it:</p>\n\n<pre><code>let mut foo = Foo::new();\nlet mut bar = Bar::new(&amp;mut foo);\n</code></pre>\n\n<p>Now I want to create a \"glue\" structure to handle the creation of all these <code>Foo</code>s and <code>Bar</code>s. So I just want the structure <code>Container</code> to have 1 <code>Foo</code>, 1 <code>Bar</code>.</p>\n\n<p>I tried doing something like:</p>\n\n<pre><code>impl Container {\n    pub fn new() -&gt; Container {\n        Container {\n          foo: Foo::new(),\n          bar: Bar::new(&amp;mut foo),\n        }\n    }\n}\n</code></pre>\n\n<p>But it doesnt work, I cannot reference the field <code>foo</code> from the <code>bar</code> initializer.\nI basically want to mimic the following C++ code:</p>\n\n<pre><code>Container::Container() :\n    foo(),\n    bar(&amp;foo)\n{}\n</code></pre>\n\n<p>Any ideas on how to solve this? Of course using any kind of dynamic allocation/reference counting would be highly overkill here.</p>\n\n<p><strong>--- EDIT ---</strong></p>\n\n<p>To be clear, I want to create the Rust code equivalent to this C++ snippet:</p>\n\n<pre><code>struct Foo {\n};\n\nstruct Bar {\n    Bar(Foo&amp; f) : foo(f) {}\n    Foo&amp; foo;\n};\n\nFoo f;\nBar b(f);\n\nstruct Container {\n    Container() : f(), b(f) {}\n    Foo f;\n    Bar b;\n};\n</code></pre>\n\n<p><strong>--- EDIT ---</strong></p>\n\n<p>Here is what I ended up doing, using <code>Rc&lt;&gt;</code>.</p>\n\n<pre><code>use std::rc::Rc;\n\nstruct Foo {\n  pub bar: Rc&lt;Bar&gt;,\n}\n\nimpl Foo {\n  pub fn new(bar: Rc&lt;Bar&gt;) -&gt; Foo {\n    Foo {\n      bar: bar,\n    }\n  }\n}\n\nstruct Bar {\n  a: u8,\n}\n\nimpl Bar {\n  pub fn new() -&gt; Bar {\n    Bar {\n      a: 42,\n    }\n  }\n}\n\nstruct Container {\n  pub bar: Rc&lt;Bar&gt;,\n  pub foo: Foo,\n}\n\nimpl Container {\n  pub fn new() -&gt; Container {\n    let bar = Rc::new(Bar::new());\n    Container {\n      bar: bar.clone(),\n      foo: Foo::new(bar.clone()),\n    }\n  }\n}\n\nfn main() {\n  // Just checking that we get the same bar for both\n  // inside Container and inside Foo\n  let c = Container::new();\n  println!(\"{:p}\", &amp;*c.bar);\n  println!(\"{:p}\", &amp;*c.foo.bar);\n\n  // So from what I understand, here bar is on the stack\n  // then byte-copied to the heap where that Rc&lt;&gt; will point?\n  let bar = Bar::new();\n  println!(\"{:p}\", &amp;bar);\n  let foo = Foo::new(Rc::new(bar));\n  println!(\"{:p}\", &amp;*foo.bar);\n\n  // Sad story is that using this Rc&lt;&gt; I now use the \"cuteness\"\n  // and safety that I had with reference borrowing:\n  // struct Foo&lt;'a&gt; {\n  //   bar: &amp;'a mut Bar,\n  // }\n  // impl&lt;'a&gt; Foo&lt;'a&gt; {\n  //   pub fn new(bar: &amp;'a Bar) -&gt; Foo&lt;'a&gt; {\n  //     Foo { bar: bar }\n  //   }\n  // }\n  // let bar = Bar::new();\n  // let foo = Foo::new(&amp;bar);\n}\n</code></pre>\n\n<p>But this is not really satisfying, I feel like I used a machine gun to kill a rabbit. Any insight greatly appreciated :(</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 19296, "user_id": 394868, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/3f3761369e373891b8a811157385f421?s=128&d=identicon&r=PG", "display_name": "Chiron", "link": "https://stackoverflow.com/users/394868/chiron"}, "edited": false, "score": 0, "creation_date": 1421934463, "post_id": 28090120, "comment_id": 44557184, "body": "I&#39;m voting to close this question as off-topic because it is about checking Rust documentation and roadmap."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "reply_to_user": {"reputation": 19296, "user_id": 394868, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/3f3761369e373891b8a811157385f421?s=128&d=identicon&r=PG", "display_name": "Chiron", "link": "https://stackoverflow.com/users/394868/chiron"}, "edited": false, "score": 4, "creation_date": 1421936089, "post_id": 28090120, "comment_id": 44558310, "body": "Could you please provide a link to the documentation and the roadmap? As a new Rust user, I haven&#39;t discovered all the documentation yet. I, as I imagine many new users do, am going through the book, and when that doesn&#39;t go into enough detail I&#39;m left searching for answers elsewhere."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 19296, "user_id": 394868, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/3f3761369e373891b8a811157385f421?s=128&d=identicon&r=PG", "display_name": "Chiron", "link": "https://stackoverflow.com/users/394868/chiron"}, "edited": false, "score": 0, "creation_date": 1421939720, "post_id": 28090120, "comment_id": 44560728, "body": "@Chiron I think the core question is a good one, the title just needed to be tweaked a bit to be a concrete question (like the body is), not a future plans question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1421939832, "post_id": 28090120, "comment_id": 44560802, "body": "@njpaul the <a href=\"http://doc.rust-lang.org/\" rel=\"nofollow noreferrer\">documentation index</a> links to the <a href=\"http://doc.rust-lang.org/book/\" rel=\"nofollow noreferrer\">Rust Book</a>, the <a href=\"http://doc.rust-lang.org/reference.html\" rel=\"nofollow noreferrer\">Reference</a> and the <a href=\"http://doc.rust-lang.org/std/\" rel=\"nofollow noreferrer\">standard library</a>. Bigger future plans are generally found in the <a href=\"https://github.com/rust-lang/rfcs\" rel=\"nofollow noreferrer\">RFCs</a>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1421940778, "post_id": 28090120, "comment_id": 44561467, "body": "@Shepmaster Thanks for the links. I found the first three pretty easily from the website, but didn&#39;t know about the RFCs."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1422004711, "post_id": 28090996, "comment_id": 44587497, "body": "why would you advise against that? Because it looks a lot like a design pattern?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1422270721, "post_id": 28090996, "comment_id": 44669292, "body": "@ker: there is no inherent evil in \u201cdesign patterns\u201d. It is merely that this is not in general going to be idiomatic Rust, though there may be certain cases that are well suited for this (I can\u2019t think of any off-hand to give examples, though)."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 10, "last_activity_date": 1421936343, "creation_date": 1421936343, "answer_id": 28090996, "question_id": 28090120, "link": "https://stackoverflow.com/questions/28090120/can-i-create-private-enum-constructors/28090996#28090996", "title": "Can I create private enum constructors?", "body": "<p>In a general sense, no; Rust does not have private enum constructors. Enums are purely public things.</p>\n\n<p>Structs, however, are not like that, and so you can combine them to make the variants purely an implementation detail:</p>\n\n<pre><code>// This type isn\u2019t made public anywhere, so it\u2019s hidden.\nenum ShapeInner {\n    // Oh, and let\u2019s use struct variants \u2019cos they\u2019re cool.\n    Circle {\n        x: i32,\n        y: i32,\n        radius: f64,\n    },\n    Rectangle {\n        x1: i32,\n        y1: i32,\n        x2: i32,\n        y2: i32,\n    },\n}\n\n// Struct fields are private by default, so this is hidden.\npub struct Shape(ShapeInner);\n\nimpl Shape {\n    pub fn new_circle(radius: f64) -&gt; Shape {\n        Shape(Circle { x: 0, y: 0, radius: radius })\n    }\n\n    pub fn new_rectangle(width: i32, height: i32) -&gt; Shape {\n        Shape(Rectangle { x1: 0, y1: 0, x2: width, y2: height })\n    }\n\n    // \u201cmatch self.0 { Circle { .. } =&gt; \u2026, \u2026 }\u201d, &amp;c.\n}\n</code></pre>\n\n<p>I would advise against this as a general practice, however.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1096614"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2642, "favorite_count": 0, "accepted_answer_id": 28090996, "answer_count": 1, "score": 10, "last_activity_date": 1421939655, "creation_date": 1421933780, "last_edit_date": 1421939655, "question_id": 28090120, "link": "https://stackoverflow.com/questions/28090120/can-i-create-private-enum-constructors", "title": "Can I create private enum constructors?", "body": "<p>In Haskell I could do something like this (example adapted from <a href=\"http://learnyouahaskell.com/making-our-own-types-and-typeclasses#algebraic-data-types\" rel=\"noreferrer\">Learn You A Haskell</a>)</p>\n\n<pre><code>module Shapes (\n    Shape,\n    newCircle,\n    newRectangle,\n    ... -- other functions for manipulating the shapes\n)\n\ndata Shape = Circle Int Int Float       -- x, y, radius\n           | Rectangle Int Int Int Int  -- x1, y1, x2, y2\n\nnewCircle :: Float -&gt; Shape\nnewCircle r = Circle 0 0 r\n\nnewRectangle :: Int -&gt; Int -&gt; Shape\nnewRectangle w h = Rectangle 0 0 w h\n\n... -- other functions for manipulating the shapes\n</code></pre>\n\n<p>That would allow me to only expose the <code>Shape</code> type and the <code>newCircle</code> and <code>newRectangle</code> functions.</p>\n\n<p>Does Rust have an equivalent for this?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1421933935, "post_id": 28089695, "comment_id": 44556808, "body": "Thanks for the expanded error messages!"}], "answers": [{"comments": [{"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1421934313, "post_id": 28090230, "comment_id": 44557081, "body": "Thanks. Still confused about one thing though: the <code>x</code> reference most definitely does not have long enough lifetime, but regardless the output of <code>x.description()</code> should have lifetime <code>&#39;static</code>, no? Or does it not due to the changed lifetimes, but the compiler doesn&#39;t tell me this?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1421935420, "post_id": 28090230, "comment_id": 44557897, "body": "@dhardy: your <code>description</code> method should not be dealing in <code>&amp;&#39;static str</code>s, and the fact that it partially \u201cfixes\u201d it for you (being lenient and allowing <code>&#39;static</code> rather than objecting violently) is what\u2019s tripping you up."}, {"owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1421935561, "post_id": 28090230, "comment_id": 44557983, "body": "Yeah, so the compiler&#39;s demoted a lifetime without telling me about it. :("}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "edited": false, "score": 0, "creation_date": 1421936490, "post_id": 28090230, "comment_id": 44558550, "body": "Thanks for saving me the trouble!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1421936479, "last_edit_date": 1421936479, "creation_date": 1421934083, "answer_id": 28090230, "question_id": 28089695, "link": "https://stackoverflow.com/questions/28089695/lifetime-of-variable-in-a-match-pattern/28090230#28090230", "title": "Lifetime of variable in a match pattern", "body": "<p>As for <code>x</code> versus <code>ref x</code>, <code>x</code> won\u2019t work because you have only a reference to <code>self</code> and so cannot move the <code>E1</code> value out of it\u2014all you can do is take a reference to it.</p>\n\n<p>But now the more important thing: you\u2019ve got your definition of the <code>description</code> method incorrect, and the Rust compiler isn\u2019t warning you about <em>that</em> but is rather making life unpleasant for you.</p>\n\n<p>This is the <em>actual</em> definition of the <code>description</code> method:</p>\n\n<pre><code>fn description(&amp;self) -&gt; &amp;str;\n</code></pre>\n\n<p>Note carefully: <code>&amp;str</code>, not <code>&amp;'static str</code>. The compiler should have objected to the <code>'static</code> in the signature, but alas, it did not. (This is the subject of <a href=\"https://github.com/rust-lang/rust/issues/21508\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/21508</a>, filed on account of this question.) Normally having specified a greater lifetime will be just fine, for it will just shrink it down to size, but in some situations it won\u2019t do what you thought it would\u2014specifically, it has changed <code>E1</code>\u2019s <code>description</code> method to return a <code>&amp;str</code> with its own lifetime, <em>but in the <code>E2</code> definition it is still wanting to return <code>&amp;'static str</code></em>. Of course, the <code>x</code> reference is not <code>'static</code>, so it fails to do it. Confusing, huh? Don\u2019t worry, it\u2019s mostly not your fault!</p>\n\n<p>To fix this, remove all occurrences of <code>'static</code>, to match the trait definition. Then because <code>x</code> is inside <code>self</code> the lifetimes will line up appropriately.</p>\n"}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 908, "favorite_count": 0, "accepted_answer_id": 28090230, "answer_count": 1, "score": 0, "last_activity_date": 1421939480, "creation_date": 1421932447, "last_edit_date": 1421939480, "question_id": 28089695, "link": "https://stackoverflow.com/questions/28089695/lifetime-of-variable-in-a-match-pattern", "title": "Lifetime of variable in a match pattern", "body": "<p>Trying to compile the following code:</p>\n\n<pre><code>#[derive(Show)]\npub enum E1 {\n    A,\n    B,\n}\n#[derive(Show)]\npub enum E2 {\n    X(E1),\n    Y(i32),\n}\n\nimpl std::fmt::String for E1 {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        std::fmt::Show::fmt(self, f)\n    }\n}\n\nimpl std::fmt::String for E2 {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        std::fmt::Show::fmt(self, f)\n    }\n}\n\nimpl std::error::Error for E2 {\n    fn description(&amp;self) -&gt; &amp;'static str {\n        match *self {\n            E2::X(x) =&gt; {\n                let d: &amp;'static str = x.description();\n                d\n            },\n            E2::Y(_) =&gt; \"Unknown error\",\n        }\n    }\n}\n\nimpl std::error::Error for E1 {\n    fn description(&amp;self) -&gt; &amp;'static str {\n        match *self {\n            E1::A =&gt; \"Error A\",\n            E1::B =&gt; \"Error B\",\n        }\n    }\n}\n\nfn main() { }\n</code></pre>\n\n<p>yields an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>a.rs:17:39: 17:40 error: `x` does not live long enough\na.rs:17                 let d: &amp;'static str = x.description();\n                                              ^\nnote: reference must be valid for the static lifetime...\na.rs:15:9: 21:10 note: ...but borrowed value is only valid for the match at 15:8\na.rs:15         match *self {\na.rs:16             E2::X(x) =&gt; {\na.rs:17                 let d: &amp;'static str = x.description();\na.rs:18                 d\na.rs:19             },\na.rs:20             E2::Y(_) =&gt; \"Unknown error\"\n        ...\na.rs:15:15: 15:20 error: cannot move out of borrowed content\na.rs:15         match *self {\n                      ^~~~~\na.rs:16:19: 16:20 note: attempting to move value to here\na.rs:16             E2::X(x) =&gt; {\n                          ^\na.rs:16:19: 16:20 help: to prevent the move, use `ref x` or `ref mut x` to capture value by reference\na.rs:16             E2::X(x) =&gt; {\n                          ^\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>Changing the match pattern to <code>E2::X(ref x)</code> produces a perhaps more detailed error but leaves me just as confused:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>a.rs:16:19: 16:24 error: cannot infer an appropriate lifetime for pattern due to conflicting requirements\na.rs:16             E2::X(ref x) =&gt; {\n                          ^~~~~\na.rs:17:39: 17:40 note: first, the lifetime cannot outlive the expression at 17:38...\na.rs:17                 let d: &amp;'static str = x.description();\n                                              ^\na.rs:17:39: 17:40 note: ...so that pointer is not dereferenced outside its lifetime\na.rs:17                 let d: &amp;'static str = x.description();\n                                              ^\na.rs:15:9: 21:10 note: but, the lifetime must be valid for the match at 15:8...\na.rs:15         match *self {\na.rs:16             E2::X(ref x) =&gt; {\na.rs:17                 let d: &amp;'static str = x.description();\na.rs:18                 d\na.rs:19             },\na.rs:20             E2::Y(_) =&gt; \"Unknown error\"\n        ...\na.rs:16:19: 16:24 note: ...so that variable is valid at time of its declaration\na.rs:16             E2::X(ref x) =&gt; {\n                          ^~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>The way I see it, <code>x</code> only has to live until <code>x.description()</code> returns, but the compiler seems to thing it needs to outlive the whole match block. Why? Why does it also insist on treating <code>x</code> as a reference when copying would probably be more logical?</p>\n"}, {"tags": ["operator-overloading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1470627497, "post_id": 28087570, "comment_id": 65008559, "body": "This answer was correct at the time but has since been implemented. Added own answer."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 5, "last_activity_date": 1421925885, "creation_date": 1421925885, "answer_id": 28087570, "question_id": 28087314, "link": "https://stackoverflow.com/questions/28087314/how-can-i-overload-the-plus-equals-operator/28087570#28087570", "title": "How can I overload the += &quot;plus equals&quot; operator?", "body": "<p>You can't, at the moment but it's definitely something much desired. Covered by <a href=\"https://github.com/rust-lang/rfcs/issues/393\">RFC issue #393</a>.</p>\n\n<p>A very long time ago <code>x += y</code> was implemented as <code>x = x + y</code> but there was always bugs in it. I don't think any were fundamental problems with the approach at the time, but now I think the switch to the operator traits taking the arguments by-value makes that desugaring harder to work well.</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": true, "score": 10, "last_activity_date": 1470659741, "last_edit_date": 1470659741, "creation_date": 1470627638, "answer_id": 38820970, "question_id": 28087314, "link": "https://stackoverflow.com/questions/28087314/how-can-i-overload-the-plus-equals-operator/38820970#38820970", "title": "How can I overload the += &quot;plus equals&quot; operator?", "body": "<p>This is now supported, called <code>AddAssign</code> (<code>SubAssign</code>, <code>MulAssign</code>... etc).</p>\n\n<p>This is a basic example:</p>\n\n<pre><code>use std::ops::{Add, AddAssign};\nstruct Float2(f64, f64);\n\nimpl AddAssign for Float2 {\n    fn add_assign(&amp;mut self, rhs: Float2) {\n        self.0 += rhs.0;\n        self.1 += rhs.1;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 8176, "user_id": 314345, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d2c8b7c25f4cd87a65001a2f952c0008?s=128&d=identicon&r=PG", "display_name": "dhardy", "link": "https://stackoverflow.com/users/314345/dhardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2432, "favorite_count": 1, "accepted_answer_id": 38820970, "answer_count": 2, "score": 8, "last_activity_date": 1470659741, "creation_date": 1421925061, "last_edit_date": 1421939447, "question_id": 28087314, "link": "https://stackoverflow.com/questions/28087314/how-can-i-overload-the-plus-equals-operator", "title": "How can I overload the += &quot;plus equals&quot; operator?", "body": "<p>How can I use compound operators like \"+=\" with custom types?</p>\n\n<p>Overloading some basic operators is possible by implementing <a href=\"http://doc.rust-lang.org/1.0.0-alpha/std/ops/\" rel=\"noreferrer\"><code>Add</code>, <code>Sub</code>, etc</a>. But there does not appear to be any support for <code>+=</code>, neither is <code>x += y</code> automatically interpreted as <code>x = x + y</code> (as of the 1.0 alpha release).</p>\n"}]