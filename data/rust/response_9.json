[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4794, "user_id": 783019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d66d2f631a8cba1c8f6a84caac3817d?s=128&d=identicon&r=PG", "display_name": "julen", "link": "https://stackoverflow.com/users/783019/julen"}, "edited": false, "score": 0, "creation_date": 1609320562, "post_id": 29004582, "comment_id": 115809645, "body": "You mention <i>&quot;std::borrow::ToOwned::to_owned could also be used and would be slightly more efficient.&quot;</i>; mind elaborating on why would it be slightly more efficient? OTOH, which one of <code>to_string()</code>/<code>to_owned()</code> would be more idiomatic in this case?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 4794, "user_id": 783019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d66d2f631a8cba1c8f6a84caac3817d?s=128&d=identicon&r=PG", "display_name": "julen", "link": "https://stackoverflow.com/users/783019/julen"}, "edited": false, "score": 1, "creation_date": 1609701611, "post_id": 29004582, "comment_id": 115899182, "body": "<code>.to_string()</code> uses the <code>std::fmt</code> infrastructure, which is comparatively heavy. On simple cases like a string it should now optimise away fully at runtime (this was not <i>quite</i> true when I wrote the answer), but there are certain slight variants that you can form which won\u2019t optimise away perfectly, and there\u2019s still a little compile-time overhead too. I myself would probably most commonly write <code>String::from(text)</code> these days, but I wouldn\u2019t blink at <code>text.to_string()</code>."}, {"owner": {"reputation": 4794, "user_id": 783019, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d66d2f631a8cba1c8f6a84caac3817d?s=128&d=identicon&r=PG", "display_name": "julen", "link": "https://stackoverflow.com/users/783019/julen"}, "edited": false, "score": 0, "creation_date": 1609711866, "post_id": 29004582, "comment_id": 115902165, "body": "Thanks for your reply!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1426147344, "last_edit_date": 1495540840, "creation_date": 1426147344, "answer_id": 29004582, "question_id": 28999226, "link": "https://stackoverflow.com/questions/28999226/str-string-and-lifetime/29004582#29004582", "title": "&amp;str String and lifetime", "body": "<p>(By the way: <code>foo[i..foo.len()]</code> should always be equivalent to <code>foo[i..]</code>.)</p>\n\n<p>The type of <code>self.text[i..]</code> is the unsized type <code>str</code> if <code>self.text</code> is of type <code>String</code> or <code>&amp;str</code>. In order to make it sized (thus, in order to make it work), you need to turn it into the same type as <code>text</code>.</p>\n\n<p>If <code>text</code> is <code>String</code>, this could be done by calling <code>.to_string()</code> on the result of the slicing; a reference will automatically be taken, making it legal. Thus, <code>self.text = self.text[i..].to_string();</code>. (<a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.to_owned\" rel=\"nofollow noreferrer\"><code>std::borrow::ToOwned::to_owned</code></a> could also be used and would be slightly more efficient.)</p>\n\n<p>If <code>text</code> is <code>&amp;str</code>, just prefix the slicing operation with <code>&amp;</code>, making it take a reference as is needed: <code>self.text = &amp;self.text[i..];</code>.</p>\n\n<p>For the whole lifetime matter, please read my answer to <a href=\"https://stackoverflow.com/a/24575591/497043\">https://stackoverflow.com/a/24575591/497043</a>; it explains your problems with <code>fn next(&amp;'a mut self)</code> and so forth.</p>\n\n<p>It looks to me like you want the whole thing to be based around string slices (<code>&amp;str</code>) rather than owned strings (<code>String</code>). The former works for iterators (see the aforementioned answer) while the latter does not.</p>\n"}], "owner": {"reputation": 2849, "user_id": 1431255, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/6ac58ecb70f5b8dc7a3e2801d4750a8a?s=128&d=identicon&r=PG", "display_name": "wirrbel", "link": "https://stackoverflow.com/users/1431255/wirrbel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3789, "favorite_count": 0, "accepted_answer_id": 29004582, "answer_count": 1, "score": 3, "last_activity_date": 1426147344, "creation_date": 1426116007, "last_edit_date": 1426145945, "question_id": 28999226, "link": "https://stackoverflow.com/questions/28999226/str-string-and-lifetime", "title": "&amp;str String and lifetime", "body": "<p>I am working on a small lexer in Rust. I had the idea of putting the lexing phase into the implementation of the <code>Iterator</code> trait.</p>\n\n<pre><code>struct Lexer {\n    text: String\n}\n\nimpl Iterator for Lexer {\n    ...\n    fn next(&amp;mut self) -&gt; Option&lt;LexItem&gt;{\n        ....\n        // slicing issue\n        self.text = self.text[i .. self.text.len()]\n\n    }\n}\n</code></pre>\n\n<p>I have not quite grokked lifetime management here completely. I would be fine by defining the struct with a lifetime for the <code>text</code> attribute which would (probably) make the subslicing more easy. Yet I fail to incorporate such a lifetime in my code. On the other hand, I have a hard time converting the slice <code>self.text[i .. .....]</code> into a <code>String</code> again (dunno if that is possible).</p>\n\n<h2>What I tried:</h2>\n\n<p>I tried the following modification:</p>\n\n<pre><code>struct Lexer&lt;'a&gt; {\n    text: &amp;'a str\n}\n\nimpl&lt;'a&gt; Iterator for Lexer&lt;'a&gt; {\n    ...\n    fn next(&amp;'a mut self) -&gt; Option&lt;LexItem&gt;{\n        ....\n        // slicing issue\n        self.text = self.text[i .. self.text.len()]\n\n    }\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre>\nsrc/lexer.rs:64:5: 81:6 error: method `next` has an incompatible type for trait: expected bound lifetime parameter , found concrete lifetime [E0053]\n</pre>\n\n<p>the other implementation I tried</p>\n\n<pre><code>impl&lt;'a&gt; Iterator for Lexer&lt;'a&gt; {\n    ...\n    fn next&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;LexItem&gt;{\n        ....\n        // slicing issue\n        self.text = self.text[i .. self.text.len()]\n\n    }\n}\n</code></pre>\n\n<pre>\nsrc/lexer.rs:66:21: 66:52 error: mismatched types:\n expected `&'a str`,\n    found `str`\n(expected &-ptr,\n    found str) [E0308]\nsrc/lexer.rs:66         self.text = self.text[i .. self.text.len()];\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</pre>\n\n<p>I figure that something like this should work, as I would work with subslices only. </p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1426115885, "post_id": 28999104, "comment_id": 46246282, "body": "Please post enough code so that we can copy and paste it and it compiles with the same error. This is called <a href=\"http://stackoverflow.com/help/mcve\">an MCVE</a> and it helps us answer your question quicker, and it might even help you understand it more. Also include the <i>exact</i> error, not &quot;<i>it swears up and down</i>&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1426116291, "creation_date": 1426116291, "answer_id": 28999285, "question_id": 28999104, "link": "https://stackoverflow.com/questions/28999104/trait-not-implemented-for-thing-that-implements-trait/28999285#28999285", "title": "Trait not implemented for (thing that implements trait)", "body": "<p>Here's the actual error generated:</p>\n\n<pre><code>&lt;anon&gt;:10:11: 10:31 error: the trait `rand::Rng` is not implemented for the type `&amp;mut R` [E0277]\n&lt;anon&gt;:10     range.ind_sample(&amp;mut rng)\n                    ^~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I'll highlight <strong>for the type &amp;mut R</strong>. Your issue stems from the fact that you are taking too many references. Your <code>rng</code> is a <code>&amp;mut R</code>. You are <em>then</em> trying to take another reference to it when calling <code>ind_sample</code>. This would create a <code>&amp;mut &amp;mut R</code>, which doesn't implement <code>Rng</code>.</p>\n\n<pre><code>use std::rand::distributions::range::SampleRange;\nuse std::rand::Rng;\nuse std::rand::distributions::Range;\nuse std::rand::distributions::IndependentSample;\n\n fn get_random&lt;T, R&gt;(range: Range&lt;T&gt;, rng: &amp;mut R) -&gt; T\n    where T: SampleRange + PartialOrd,\n          R: Rng\n{\n    range.ind_sample(rng)\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 459, "favorite_count": 0, "accepted_answer_id": 28999285, "answer_count": 1, "score": -1, "last_activity_date": 1426116291, "creation_date": 1426115430, "question_id": 28999104, "link": "https://stackoverflow.com/questions/28999104/trait-not-implemented-for-thing-that-implements-trait", "title": "Trait not implemented for (thing that implements trait)", "body": "<p>So, Rust is trying to tell me a fib, I think, but maybe I'm just out of my mind...</p>\n\n<pre><code>fn get_random&lt;T, R&gt;(range: Range&lt;T&gt;, rng: &amp;mut R) -&gt; T\n    where T: SampleRange + PartialOrd,\n          R: Rng\n{\n    range.ind_sample(&amp;mut rng)\n}\n</code></pre>\n\n<p>The where clause there should indicate that R <em>definitely</em> implements Rng, otherwise... Well, come on, right? But when I try to compile this, it swears up and down that rng does not implement rand::Rng.</p>\n\n<p>What on earth?</p>\n\n<blockquote>\n  <p>rustc 1.0.0-nightly (cfea8ec41 2015-03-10) (built 2015-03-11) (in case you were wondering)</p>\n</blockquote>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 803, "user_id": 4651500, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b838d7d269aaa02004aa2dede86379d0?s=128&d=identicon&r=PG&f=1", "display_name": "bitloner", "link": "https://stackoverflow.com/users/4651500/bitloner"}, "edited": false, "score": 1, "creation_date": 1426160605, "post_id": 28995703, "comment_id": 46262877, "body": "Shepmaster, can you stop downvoting all my questions and editing them. I am not bothering to use SO for Rust anymore because of you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1426164066, "post_id": 28995703, "comment_id": 46265140, "body": "I&#39;m sad to see you go, and I hope you reconsider. For what it&#39;s worth, I didn&#39;t downvote your question, and I&#39;ve just upvoted it as it&#39;s not a <i>bad</i> question. However, I don&#39;t apologize for editing questions to try to improve them for future searchers. If you disagree with any of my edits, feel free to roll them back; I&#39;m not going to start an edit war with anyone!"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1426170891, "post_id": 28995703, "comment_id": 46270128, "body": "@Shepmaster is keeping the SO-questions with [rust] tag clean. He&#39;s doing a great job at that. You should not feel offended if he edits your question, rather remember he thought it useful enough to want it to fit into the general look of Rust/SO questions."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1426148705, "post_id": 28995704, "comment_id": 46256092, "body": "aren&#39;t <code>i</code> and <code>j</code> always the same and could therefor be merged? I&#39;m thinking <code>a.iter().zip(b.iter()).enumerate()</code>"}, {"owner": {"reputation": 803, "user_id": 4651500, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b838d7d269aaa02004aa2dede86379d0?s=128&d=identicon&r=PG&f=1", "display_name": "bitloner", "link": "https://stackoverflow.com/users/4651500/bitloner"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1426160467, "post_id": 28995704, "comment_id": 46262775, "body": "true! that&#39;s a much better solution. add it as an answer so you can have all the fame and glory of having a better answer ^^"}], "tags": [], "owner": {"reputation": 803, "user_id": 4651500, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b838d7d269aaa02004aa2dede86379d0?s=128&d=identicon&r=PG&f=1", "display_name": "bitloner", "link": "https://stackoverflow.com/users/4651500/bitloner"}, "is_accepted": false, "score": 0, "last_activity_date": 1426109339, "last_edit_date": 1426109339, "creation_date": 1426102313, "answer_id": 28995704, "question_id": 28995703, "link": "https://stackoverflow.com/questions/28995703/how-to-zip-vect-with-indexed-position/28995704#28995704", "title": "How to zip Vec&lt;T&gt; with indexed position", "body": "<pre><code>fn main() {\n    let a = vec![1; 10];\n    let b = vec![2; 10];\n\n    for ((i,x),(j,y)) in a.iter().enumerate().zip(b.iter().enumerate()) {\n        println!(\"(({},{}),({},{}))\", i, x, j, y);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 11, "last_activity_date": 1426170913, "creation_date": 1426170913, "answer_id": 29012610, "question_id": 28995703, "link": "https://stackoverflow.com/questions/28995703/how-to-zip-vect-with-indexed-position/29012610#29012610", "title": "How to zip Vec&lt;T&gt; with indexed position", "body": "<p>The <code>enumerate</code> function exists for all iterators. Using <code>zip</code> on two iterators <code>a</code> and <code>b</code> yields another iterator. Therefor you can also call <code>enumerate</code> on the resulting iterator.</p>\n\n<pre><code>fn main() {\n    let a = vec![1; 10];\n    let b = vec![2; 10];\n\n    let it = a.iter().zip(b.iter());\n\n    for (i, (x, y)) in it.enumerate() {\n        println!(\"{}: ({}, {})\", i, x, y);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 803, "user_id": 4651500, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b838d7d269aaa02004aa2dede86379d0?s=128&d=identicon&r=PG&f=1", "display_name": "bitloner", "link": "https://stackoverflow.com/users/4651500/bitloner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4839, "favorite_count": 1, "accepted_answer_id": 29012610, "answer_count": 2, "score": 2, "last_activity_date": 1426170913, "creation_date": 1426102313, "last_edit_date": 1495535345, "question_id": 28995703, "link": "https://stackoverflow.com/questions/28995703/how-to-zip-vect-with-indexed-position", "title": "How to zip Vec&lt;T&gt; with indexed position", "body": "<p>Following my question, <a href=\"https://stackoverflow.com/questions/28991050/how-to-iterate-a-vect-with-indexed-position-in-rust\">How to iterate a Vec with indexed position in Rust</a>, now I need to zip two dynamic vectors with their indexed position.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 4348, "user_id": 173787, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/0d59a32fa490017d6457aec0e917aced?s=128&d=identicon&r=PG", "display_name": "Davide Aversa", "link": "https://stackoverflow.com/users/173787/davide-aversa"}, "edited": false, "score": 0, "creation_date": 1426162758, "post_id": 29001438, "comment_id": 46264327, "body": "Yes, thank you Steve. I should have checked the bug tracker before asking this question. When I download a new nightly I have some problem understanding if it is a problem of mine or a bug in rust/Cargo :)"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 4348, "user_id": 173787, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/0d59a32fa490017d6457aec0e917aced?s=128&d=identicon&r=PG", "display_name": "Davide Aversa", "link": "https://stackoverflow.com/users/173787/davide-aversa"}, "edited": false, "score": 0, "creation_date": 1426178212, "post_id": 29001438, "comment_id": 46275437, "body": "No worries! It&#39;s hard to find things in the tracker sometimes."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 1, "last_activity_date": 1426131409, "creation_date": 1426131409, "answer_id": 29001438, "question_id": 28994012, "link": "https://stackoverflow.com/questions/28994012/cargo-package-error-extern-location-for-foo-does-not-exist/29001438#29001438", "title": "`cargo package` error: extern location for foo does not exist", "body": "<p>I believe this was <a href=\"https://github.com/rust-lang/cargo/issues/1404\" rel=\"nofollow\">https://github.com/rust-lang/cargo/issues/1404</a> which was just fixed with <a href=\"https://github.com/rust-lang/cargo/pull/1406\" rel=\"nofollow\">https://github.com/rust-lang/cargo/pull/1406</a></p>\n"}], "owner": {"reputation": 4348, "user_id": 173787, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/0d59a32fa490017d6457aec0e917aced?s=128&d=identicon&r=PG", "display_name": "Davide Aversa", "link": "https://stackoverflow.com/users/173787/davide-aversa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 767, "favorite_count": 0, "accepted_answer_id": 29001438, "answer_count": 1, "score": 2, "last_activity_date": 1426131409, "creation_date": 1426096688, "last_edit_date": 1426096952, "question_id": 28994012, "link": "https://stackoverflow.com/questions/28994012/cargo-package-error-extern-location-for-foo-does-not-exist", "title": "`cargo package` error: extern location for foo does not exist", "body": "<p>I have very simple program <a href=\"https://github.com/THeK3nger/CellularMaps-Rust\" rel=\"nofollow\">here</a>. I was able to build this program with <code>cargo build</code> and, as you can see in the GitHub page, it also build correctly on Travis-CI.</p>\n\n<p>However, the command <code>cargo package</code> fails with the error:</p>\n\n<pre><code>error: extern location for cellular_maps does not exist: D:\\UserFolder\\Code\\CellularMaps-Rust\\target/package/cellular_maps-0.0.3\\target\\debug\\libcellular_maps-ae97300493a8edd3.rlib\nsrc\\main.rs:1:1: 1:28 error: can't find crate for `cellular_maps`\nsrc\\main.rs:1 extern crate cellular_maps;\n</code></pre>\n\n<p>I was able to publish this small library on crates.io with an older rust build. It is changed something or it is just a bug in cargo? (If you look close, you can see that there are mixed backslashes and slashes in the path.)</p>\n\n<p>Rust version is </p>\n\n<pre><code>rustc 1.0.0-nightly (91bdf23f5 2015-03-09) (built 2015-03-09)\n</code></pre>\n\n<p>Cargo version is</p>\n\n<pre><code>cargo 0.0.1-pre-nightly (b27cd47 2015-03-07) (built 2015-03-09)\n</code></pre>\n\n<p>I'm working on a Windows machine.</p>\n\n<p>thanks!</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426110767, "post_id": 28993698, "comment_id": 46244230, "body": "But then, how do I use that main function? I specifically was trying not to use main because I want to return name you see. Also, the trait reference DOES exist, I just didnt put it in the code. The trait is Storage and for the train, I implement method get then use my_storage to return a vector of bytes and run tests with it. Should I repost my question or edit it for you to have a look at the entire thing?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426112983, "post_id": 28993698, "comment_id": 46245141, "body": "@Lexka It&#39;s generally a good idea to produce a <a href=\"http://stackoverflow.com/help/mcve\">small example</a> that reproduces your problem. To that end, you should have tried to remove as much as you could before posting, but I think your question is OK to leave for now."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426113116, "post_id": 28993698, "comment_id": 46245194, "body": "@Lexka Where would you like to return the name <i>to</i>? In my example, <code>name</code> is being removed from <code>MyStorage</code> and returned by <code>get</code> back to the <code>main</code> function. Do you mean printed to the console?"}, {"owner": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426153272, "post_id": 28993698, "comment_id": 46258361, "body": "Hey Shepmaster. The function is simply meant to be used within an another function and return name, then I run an assert comparison test. If it works in main, it should work in any function, I am not looking to print anything for now. Anyways, would you have an idea how to produce a random vector of it with dynamic size at all (maybe fixed size to start). I looked about the net and can&#39;t quite find anything yet. So if you can help with this, smashing. And oh, thanks for your help ealrier, I will adapt your changes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "edited": false, "score": 0, "creation_date": 1426163545, "post_id": 28993698, "comment_id": 46264820, "body": "@Lexka that sounds like a good question to ask separately. Asking separate, well-worded questions helps future searchers find what they are looking for. Would <i>you</i> have looked at a question with this title to figure out how to make a random vector of dynamic size? ^_^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1606322140, "last_edit_date": 1606322140, "creation_date": 1426095780, "answer_id": 28993698, "question_id": 28993446, "link": "https://stackoverflow.com/questions/28993446/what-does-expected-item-found-let-mean/28993698#28993698", "title": "What does &quot;expected item, found let&quot; mean?", "body": "<p>There's a number of issues with this code, but the error you are getting is because you are trying to <em>execute</em> code but not from within a function:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let my_storage = MyStorage { name = [0x11] };\n</code></pre>\n<p>You need to put that in something. Here, I've added it to <code>main</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct MyStorage {\n    name: Vec&lt;u8&gt;,\n}\n\nimpl MyStorage {\n    fn get(self) -&gt; Vec&lt;u8&gt; {\n        self.name\n    }\n}\n\nfn main() {\n    let my_storage = MyStorage { name: vec![0x11] };\n}\n</code></pre>\n<p>I also had to:</p>\n<ul>\n<li>fix the vector construction (<code>vec!</code>)</li>\n<li>remove the usage of a trait that doesn't exist (<code>Storage</code>)</li>\n<li>change the type of <code>self</code> in <code>get</code></li>\n<li>change from <code>=</code> to <code>:</code></li>\n</ul>\n<p>With all that, the code compiles.</p>\n"}], "owner": {"reputation": 299, "user_id": 4659640, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/cbaf106b9a7badd5fbf1170ed303f4b1?s=128&d=identicon&r=PG&f=1", "display_name": "Lexka", "link": "https://stackoverflow.com/users/4659640/lexka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3625, "favorite_count": 0, "answer_count": 1, "score": 10, "last_activity_date": 1606322140, "creation_date": 1426095120, "last_edit_date": 1606322030, "question_id": 28993446, "link": "https://stackoverflow.com/questions/28993446/what-does-expected-item-found-let-mean", "title": "What does &quot;expected item, found let&quot; mean?", "body": "<p>My code</p>\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct MyStorage {\n    name: Vec&lt;u8&gt;,\n}\n\nimpl Storage for MyStorage {\n    //let mut name: Vec&lt;u8&gt; = [0x11];\n    fn get(&amp;mut self) -&gt; Vec&lt;u8&gt; {\n        self.name\n    }\n}\n\nlet my_storage = MyStorage { name = [0x11] };\n</code></pre>\n<p>returns the error</p>\n<pre class=\"lang-none prettyprint-override\"><code>error: expected item, found keyword `let`\n  --&gt; src/lib.rs:12:1\n   |\n12 | let my_storage = MyStorage { name = [0x11] };\n   | ^^^ expected item\n</code></pre>\n<p>What does that mean?</p>\n"}, {"tags": ["generics", "rust", "undefined-behavior"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1426097557, "post_id": 28991866, "comment_id": 46236620, "body": "Oh, nevermind then, carry on then."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1426097671, "post_id": 28991866, "comment_id": 46236705, "body": "the safe version with the U as [T; N] works fine: <a href=\"http://is.gd/enk0I3\" rel=\"nofollow noreferrer\">is.gd/enk0I3</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1426118154, "creation_date": 1426118154, "answer_id": 28999618, "question_id": 28991866, "link": "https://stackoverflow.com/questions/28991866/what-is-the-difference-between-t-n-and-u-if-u-is-always-set-to-t-n/28999618#28999618", "title": "What is the difference between [T; N] and U if U is always set to [T; N]?", "body": "<p>I believe that you are hitting some bug with <code>#[unsafe_destructor]</code>. I reduced your code to this:</p>\n\n<pre><code>#![feature(unsafe_destructor)]\n\nstruct IntoIter&lt;U&gt; {\n    inner: Option&lt;U&gt;,\n}\n\nimpl&lt;T&gt; Iterator for IntoIter&lt;[T; 8]&gt; {\n    type Item = T;\n    fn next(&amp;mut self) -&gt; Option&lt;T&gt; { None }\n}\n\n#[unsafe_destructor]\nimpl&lt;T&gt; Drop for IntoIter&lt;[T; 8]&gt; {\n    fn drop(&amp;mut self) {\n        // destroy the remaining elements\n        for _ in self.by_ref() {}\n\n        unsafe { std::intrinsics::forget(self.inner.take()) }\n    }\n}\n\nfn main() {\n    let arr = [1; 8];\n    IntoIter { inner: Some(arr) };\n}\n</code></pre>\n\n<p>I then compiled (<code>rustc -g unsafe.rs</code>) and ran it in <code>rust-lldb</code>. I set a breakpoint on the drop implementation and printed out <code>self</code>:</p>\n\n<pre><code>(lldb) p self\n(unsafe::IntoIter&lt;[[i32; 8]; 8]&gt; *) $0 = &amp;0x7fff5fbff568\n</code></pre>\n\n<p>You can see that it thinks that the type parameter is an array of arrays, just like you noticed. At this point, we are going to trash memory if we actually drop. I believe that Rust still zeroes memory on drop, so we could possibly be writing zeroes all over some arbitrary chunk of memory.</p>\n\n<p>For good measure:</p>\n\n<pre><code>rustc --verbose --version\nrustc 1.0.0-dev (cfea8ec41 2015-03-10) (built 2015-03-10)\nbinary: rustc\ncommit-hash: cfea8ec41699e25c8fb524d625190f0cb860dc71\ncommit-date: 2015-03-10\nbuild-date: 2015-03-10\nhost: x86_64-apple-darwin\nrelease: 1.0.0-dev\n</code></pre>\n"}], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "accepted_answer_id": 28999618, "answer_count": 1, "score": 5, "last_activity_date": 1525721480, "creation_date": 1426090508, "last_edit_date": 1525721480, "question_id": 28991866, "link": "https://stackoverflow.com/questions/28991866/what-is-the-difference-between-t-n-and-u-if-u-is-always-set-to-t-n", "title": "What is the difference between [T; N] and U if U is always set to [T; N]?", "body": "<p>I was trying to implement <code>IntoIterator</code> for <code>[T; N]</code>. I wrote a completely safe version using <code>Default</code> and <code>swap</code> (<a href=\"http://is.gd/t87wys\" rel=\"noreferrer\">PlayPen</a>). Then I ported it to use <code>uninitialized</code>, <code>ptr::copy</code>, <code>Drop</code> and <code>forget</code> (<a href=\"http://is.gd/jKuxt4\" rel=\"noreferrer\">PlayPen</a>).\nMy Iterator struct looks like this:</p>\n\n<pre><code>struct IntoIter&lt;T&gt; {\n    inner: Option&lt;[T; N]&gt;,\n    i: usize,\n}\nimpl&lt;T&gt; Iterator for IntoIter&lt;T&gt; { ... }\n</code></pre>\n\n<p>Since I did not want to create an Iterator struct per value of <code>N</code>, I changed the struct to</p>\n\n<pre><code>struct IntoIter&lt;U&gt; {\n    inner: Option&lt;U&gt;,\n    i: usize,\n}\nimpl&lt;T&gt; Iterator for IntoIter&lt;[T; N]&gt; { ... }\n</code></pre>\n\n<p>Obviously I had to adjust the <code>Iterator</code> and <code>Drop</code> implementations (<a href=\"http://is.gd/ByY2mC\" rel=\"noreferrer\">PlayPen</a>).</p>\n\n<p>But now I somehow introduced undefined behavior. Panics happen or not depending on <code>println</code>s, optimization levels or zodiacal signs. </p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'index out of bounds: the len is 5 but the index is 139924442675478', &lt;anon&gt;:25\nthread '&lt;main&gt;' panicked at 'index out of bounds: the len is 5 but the index is 140451355506257', &lt;anon&gt;:25\napplication terminated abnormally with signal 4 (Illegal instruction)\n</code></pre>\n\n<hr>\n\n<p>Either my second implementation already exhibits undefined behavior, or there is a difference between the second and third implementations. Looking at the generated (not optimized) LLVM-IR, I found that the only fundamental differences happen in the third version which ends up with <code>[[Box&lt;i32&gt;; 5]; 5]</code> types. I can see how I might accidentally create such a type, but I specifically checked the third version for such a mistake and cannot find it.</p>\n"}, {"tags": ["for-loop", "rust", "iterator"], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user4316209"}, "is_accepted": true, "score": 68, "last_activity_date": 1573067654, "last_edit_date": 1573067654, "creation_date": 1426088696, "answer_id": 28991157, "question_id": 28991050, "link": "https://stackoverflow.com/questions/28991050/how-to-iterate-a-vect-with-the-indexed-position/28991157#28991157", "title": "How to iterate a Vec&lt;T&gt; with the indexed position?", "body": "<p>You can use the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.enumerate\" rel=\"noreferrer\"><code>Iterator::enumerate</code></a> method:</p>\n\n<pre><code>fn main() {\n    let v = vec![1; 10];\n    for (pos, e) in v.iter().enumerate() {\n        println!(\"Element at position {}: {:?}\", pos, e);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=594ad9cb0e4d4ac0851f12a3cee0443d\" rel=\"noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 803, "user_id": 4651500, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b838d7d269aaa02004aa2dede86379d0?s=128&d=identicon&r=PG&f=1", "display_name": "bitloner", "link": "https://stackoverflow.com/users/4651500/bitloner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14388, "favorite_count": 3, "accepted_answer_id": 28991157, "answer_count": 1, "score": 51, "last_activity_date": 1573067698, "creation_date": 1426088427, "last_edit_date": 1573067698, "question_id": 28991050, "link": "https://stackoverflow.com/questions/28991050/how-to-iterate-a-vect-with-the-indexed-position", "title": "How to iterate a Vec&lt;T&gt; with the indexed position?", "body": "<p>I need to iterate a <code>Vec</code> including the position for each iterated element. I'm sure this is already in the API but I cannot see it. </p>\n\n<p>I need something like this:</p>\n\n<pre><code>fn main() {\n    let v = vec![1; 10];\n    for (pos, e) in v.iter() {\n        // do something here\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1426067559, "post_id": 28982814, "comment_id": 46215724, "body": "What are you exactly trying to do? If you want to make a library you don&#39;t need to provide a <code>main</code> function."}, {"owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1426070182, "post_id": 28982814, "comment_id": 46217311, "body": "I just encountered an error when I tried compiling my library by the command <code>rustc &lt;mylibrary.rs&gt;</code> individually. What I learned now is that, if you wanted to build a library then just use <code>cargo build</code>. The question is does every rust code need a <code>main</code> method ? When does it know that it doe not need it ? Tested this by creating the easiest package I know and it seems when you try to compile a standalone file it will always error out if no main method is defined, or you can tell it not to do that with the no_main argument."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 5, "creation_date": 1426070983, "post_id": 28982814, "comment_id": 46217866, "body": "The <code>#![no_main]</code> feature is rather specialized. It&#39;s not something you commonly use. If you want an application, then write a <code>main</code> function. If you want a library, then don&#39;t write a <code>main</code> function. It&#39;s that simple."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1426092453, "post_id": 28982814, "comment_id": 46233123, "body": "If you&#39;re building a library crate, then I think <code>rustc</code> needs the <code>--crate-type=lib</code> option."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1426098343, "post_id": 28982814, "comment_id": 46237087, "body": "You can also specify in <code>Cargo.toml</code> that the crate is a library. By default, <code>cargo new</code> will create a library."}], "answers": [{"tags": [], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "is_accepted": false, "score": -1, "last_activity_date": 1426066741, "creation_date": 1426066741, "answer_id": 28982975, "question_id": 28982814, "link": "https://stackoverflow.com/questions/28982814/why-does-compiling-this-program-without-a-main-function-result-in-undefined-ref/28982975#28982975", "title": "Why does compiling this program without a main function result in &quot;undefined reference to main&quot;?", "body": "<p>Okay I found it needs a top level <code>main</code> function like so:</p>\n\n<pre><code>pub mod struct_example {                                                                                                                                                                                     \n\n    struct Pair {                                                                                                                                                                                            \n        a: f64,                                                                                                                                                                                              \n        b: f64,                                                                                                                                                                                              \n    }                                                                                                                                                                                                        \n\n    pub fn example () {                                                                                                                                                                                      \n        println!(\"##### Struct Example #####\");                                                                                                                                                              \n        let pair: Pair = Pair {a: 0.3, b: 0.4};                                                                                                                                                              \n        println!(\"{} and {}\", pair.a, pair.b);                                                                                                                                                               \n    }                                                                                                                                                                                                        \n\n}                                                                                                                                                                                                            \n\nfn main() {                                                                                                                                                                                                  \n    println!(\"Hello world\");                                                                                                                                                                                 \n}  \n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 4, "last_activity_date": 1426111021, "creation_date": 1426111021, "answer_id": 28998175, "question_id": 28982814, "link": "https://stackoverflow.com/questions/28982814/why-does-compiling-this-program-without-a-main-function-result-in-undefined-ref/28998175#28998175", "title": "Why does compiling this program without a main function result in &quot;undefined reference to main&quot;?", "body": "<p>By default, <code>rustc</code> produces a binary crate, not a library one, which needs a <code>main()</code>. You can pass <code>--crate-type=lib</code> if you're attempting to build a library instead of a binary.</p>\n"}], "owner": {"reputation": 6831, "user_id": 501800, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/5fc72638da7598b350733c5a51fce596?s=128&d=identicon&r=PG", "display_name": "Muhammad Lukman Low", "link": "https://stackoverflow.com/users/501800/muhammad-lukman-low"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1567, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1426111021, "creation_date": 1426066332, "last_edit_date": 1426087086, "question_id": 28982814, "link": "https://stackoverflow.com/questions/28982814/why-does-compiling-this-program-without-a-main-function-result-in-undefined-ref", "title": "Why does compiling this program without a main function result in &quot;undefined reference to main&quot;?", "body": "<p>I have this code below: </p>\n\n<pre><code>#![no_main]\n\npub mod struct_example {\n    struct Pair {\n        a: f64,\n        b: f64,\n    }\n\n    pub fn example () {\n        println!(\"##### Struct Example #####\");\n        let pair: Pair = Pair {a: 0.3, b: 0.4};\n        println!(\"{} and {}\", pair.a, pair.b);\n    }\n}\n</code></pre>\n\n<p>That I am trying to compile by issuing:</p>\n\n<pre><code>rustc src/structures.rs \n</code></pre>\n\n<p>What I get is the error below:</p>\n\n<pre><code>$ rustc src/structures.rs         \nerror: linking with `cc` failed: exit code: 1\nnote: \"cc\" \"-Wl,--as-needed\" \"-m64\" \"-L\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-o\" \"./structures\" \"./structures.o\" \"-Wl,--whole-archive\" \"-lmorestack\" \"-Wl,--no-whole-archive\" \"-Wl,--gc-sections\" \"-pie\" \"-nodefaultlibs\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-4e7c5e5c.rlib\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcollections-4e7c5e5c.rlib\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/libunicode-4e7c5e5c.rlib\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/librand-4e7c5e5c.rlib\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc-4e7c5e5c.rlib\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-4e7c5e5c.rlib\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-4e7c5e5c.rlib\" \"-L\" \"/usr/local/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-L\" \"/home/lowks/src/rust/gettingrusty/.rust/lib/x86_64-unknown-linux-gnu\" \"-L\" \"/home/lowks/src/rust/gettingrusty/lib/x86_64-unknown-linux-gnu\" \"-Wl,--whole-archive\" \"-Wl,-Bstatic\" \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\" \"-ldl\" \"-lpthread\" \"-lrt\" \"-lgcc_s\" \"-lpthread\" \"-lc\" \"-lm\" \"-lcompiler-rt\"\nnote: /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 0 has invalid symbol index 11\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 1 has invalid symbol index 12\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 2 has invalid symbol index 2\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 3 has invalid symbol index 2\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 4 has invalid symbol index 11\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 5 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 6 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 7 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 8 has invalid symbol index 12\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 9 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 10 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 11 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 12 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 13 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 14 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 15 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 16 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 17 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 18 has invalid symbol index 13\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_info): relocation 19 has invalid symbol index 22\n/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/Scrt1.o(.debug_line): relocation 0 has invalid symbol index 2\n/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../x86_64-linux-gnu/Scrt1.o: In function `_start':\n(.text+0x20): undefined reference to `main'\ncollect2: error: ld returned 1 exit status\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>Why is this? Is there something I am missing here ?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1426033723, "post_id": 28976259, "comment_id": 46204096, "body": "There is no need for <code>Option&lt;*T&gt;</code>. Check out <a href=\"https://doc.rust-lang.org/book/ffi.html#the-&quot;nullable-pointer-optimization&quot;\" rel=\"nofollow noreferrer\">nullable pointer optimization</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "edited": false, "score": 0, "creation_date": 1426033096, "post_id": 28976400, "comment_id": 46203935, "body": "I guess there is no way to achieve what I&#39;m trying to do..? (reach the <b>correct</b> <code>bob</code> through <code>susan</code>  (<code>bob.mate.mate</code> or <code>bob.susan.bob</code>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "edited": false, "score": 0, "creation_date": 1426033888, "post_id": 28976400, "comment_id": 46204152, "body": "@goo I wouldn&#39;t say <i>no</i> way, you just have to be more careful. I&#39;ve added some potential solutions."}, {"owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "edited": false, "score": 0, "creation_date": 1426053146, "post_id": 28976400, "comment_id": 46209248, "body": "I switched the raw pointers to` Box` and now I&#39;m getting <code>cannot move out of borrowed content</code> and <code>use of moved value:</code> errors everywhere."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "edited": false, "score": 1, "creation_date": 1426082059, "post_id": 28976400, "comment_id": 46225333, "body": "@goo for the <code>Box</code> example, the <code>mate</code> field is still a raw pointer. Only the constructed people (<code>bob</code>, <code>susan</code>) and <code>Bar</code> use <code>Box</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 16, "last_activity_date": 1426033861, "last_edit_date": 1426033861, "creation_date": 1426032756, "answer_id": 28976400, "question_id": 28976259, "link": "https://stackoverflow.com/questions/28976259/raw-pointers-data-disappearing/28976400#28976400", "title": "Raw pointer&#39;s data disappearing", "body": "<p>This would be a good example of what Rust helps prevent, but you've deliberately turned off the safety checks, and now we are back to C. Check this line:</p>\n\n<pre><code>let bar = Bar { person: bob };\n</code></pre>\n\n<p>This line <em>moves</em> the data stored in <code>bob</code> into <code>bar</code>. This means that the pointer has been <strong>invalidated</strong> and you can't trust any of the values. Let's add this afterwards:</p>\n\n<pre><code>println!(\"\\nthis is bob's address: {:p}\", &amp;bob);\nlet bar = Bar { person: bob };\nprintln!(\"\\nthis is the bar's address: {:p}\", &amp;bar);\nprintln!(\"\\nthis is bob's new address: {:p}\", &amp;bar.person);\n\n// this is bob's address:     0x7fffe10518c0\n// this is the bar's address: 0x7fffe10517d0\n// this is bob's new address: 0x7fffe10517d0\n</code></pre>\n\n<p>You are in for a world of hurt now, as you try to wrangle which pointers are correct and which aren't!</p>\n\n<p>One way to solve this is to not move <code>bob</code>. Instead, take a reference:</p>\n\n<pre><code>struct Bar&lt;'a&gt; {\n  person: &amp;'a Person,\n}\n// ...\nlet bar = Bar { person: &amp;bob };\n</code></pre>\n\n<p>Another would be to call <code>meets</code> <em>after</em> moving it into the <code>bar</code>:</p>\n\n<pre><code>let mut bar = Bar { person: bob };\nbar.person.meets(&amp;mut susan);\n</code></pre>\n\n<p>Another would be to <code>Box</code> (or use <code>Arena</code>) the the data. Then the data is not allocated on the stack and so the value's address doesn't change when it is moved:</p>\n\n<pre><code>struct Bar {\n    person: Box&lt;Person&gt;,\n}\n// ...\nlet mut bob = Box::new(Person { });\nlet mut susan = Box::new(Person { });\n</code></pre>\n"}], "owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 316, "favorite_count": 0, "accepted_answer_id": 28976400, "answer_count": 1, "score": 0, "last_activity_date": 1426033861, "creation_date": 1426031979, "question_id": 28976259, "link": "https://stackoverflow.com/questions/28976259/raw-pointers-data-disappearing", "title": "Raw pointer&#39;s data disappearing", "body": "<p>Consider the code below:</p>\n\n<pre><code>struct Person {\n  mate: Option&lt;*const Person&gt;,\n  siblings: Vec&lt;i32&gt;,\n}\n\nimpl Person {\n  fn meets(&amp;mut self, mate: &amp;mut Person) {\n    self.mate = Some(mate);\n    mate.mate = Some(self); \n  }\n}\n\nstruct Bar {\n  person: Person,\n}\n\nimpl Bar {\n  fn addr(&amp;self) {\n    unsafe {\n      println!(\"\\n`bob.siblings.len()`: {}, `bob.susan.siblings.len()`: {}\", \n        self.person.siblings.len(), (*self.person.mate.unwrap()).siblings.len());\n\n      println!(\"\\n but wait -&gt; `bob.susan.bob.siblings.len()`: {} ??\", \n        (*(*self.person.mate.unwrap()).mate.unwrap()).siblings.len());\n\n      println!(\"\\nthis is `bob.susan.bob's address`: {:p} =&gt; same address inside bar ???\", \n        (*self.person.mate.unwrap()).mate.unwrap());\n    }\n  }\n}\n\nfn main() {\n  let mut bob = Person {\n    mate: None,\n    siblings: {\n      let mut stuff: Vec&lt;i32&gt; = Vec::new();\n      unsafe {\n        stuff.set_len(2);\n      }\n      stuff\n    }\n  };\n\n  let mut susan = Person { \n    mate: None, \n    siblings: {\n      let mut stuff: Vec&lt;i32&gt; = Vec::new();\n      unsafe {\n        stuff.set_len(4);\n      }\n      stuff\n    } \n  };\n\n  bob.meets(&amp;mut susan);\n\n  println!(\"\\nbob has {} `siblings` before entering the `bar`.\", bob.siblings.len());\n  println!(\"\\nthis is bob's address: {:p}\", &amp;bob);\n  let bar = Bar { person: bob };\n  bar.addr();\n}\n</code></pre>\n\n<p>The result:</p>\n\n<pre><code>bob has 2 `siblings` before entering the `bar`.\n\nthis is bob's address: 0x7fff556ab470\n\n`bob.siblings.len()`: 2, `bob.susan.siblings.len()`: 4\n\n but wait -&gt; `bob.susan.bob.siblings.len()`: 0 ??\n\nthis is `bob.susan.bob's address`: 0x7fff556ab470 =&gt; same address inside bar ???\n</code></pre>\n\n<hr>\n\n<p>My question is, where did <code>bob.siblings</code> go? Even though I'm calling <code>bob.siblings</code> through <code>susan</code> (<code>bob.mate.mate.siblings</code> -> <code>bob.susan.bob.siblings</code>), shouldn't the result be the same?</p>\n\n<p>How can I call <code>bob.susan.bob.siblings</code> and get the same result as if I had called <code>bob.siblings</code>?</p>\n\n<p>Rust version: <code>rustc 1.0.0-nightly (270a677d4 2015-03-07) (built 2015-03-07)</code></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1148, "user_id": 1357841, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/467ad63b3850c64aa9b1cb76063c2c57?s=128&d=identicon&r=PG", "display_name": "chessofnerd", "link": "https://stackoverflow.com/users/1357841/chessofnerd"}, "edited": false, "score": 1, "creation_date": 1425963801, "post_id": 28956434, "comment_id": 46166030, "body": "I confess I know <i>nothing</i> about rust, but is it possible that if $to is too long then <code>&amp;$array[..$to]</code> it will throw an error anyways? If so, the error message would make sense (ie, the type will perform the comparison anyways)."}, {"owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "reply_to_user": {"reputation": 1148, "user_id": 1357841, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/467ad63b3850c64aa9b1cb76063c2c57?s=128&d=identicon&r=PG", "display_name": "chessofnerd", "link": "https://stackoverflow.com/users/1357841/chessofnerd"}, "edited": false, "score": 0, "creation_date": 1425965000, "post_id": 28956434, "comment_id": 46166367, "body": "@chessofnerd: <code>$to</code> is an integer cast-able to <code>usize</code> (The compiler insures this). The if statement assert that execution will not reach the <code>&amp;$array[..$to]</code> statement unless $to is less the length of the array. So I don&#39;t think that&#39;s the problem."}, {"owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "reply_to_user": {"reputation": 1148, "user_id": 1357841, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/467ad63b3850c64aa9b1cb76063c2c57?s=128&d=identicon&r=PG", "display_name": "chessofnerd", "link": "https://stackoverflow.com/users/1357841/chessofnerd"}, "edited": false, "score": 0, "creation_date": 1425965264, "post_id": 28956434, "comment_id": 46166424, "body": "@chessofnerd: Explicitly casting <code>$to</code> seems to make the compiler happy. So that&#39;s one part of the problem solved."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 2, "creation_date": 1425976451, "post_id": 28956434, "comment_id": 46170745, "body": "Explicitly casting probably only silences the warning without fixing the problem, assuming there is one. Please give a working example (playpen) that produces the warning so we can figure out whether the warning is bogus. I suspect it only occurs when <code>$to</code> is constant, <code>$array</code> has a known length, or both."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1426007356, "post_id": 28956434, "comment_id": 46191320, "body": "Here is <i>one possible</i> reduced example of OPs macro: <code>fn main() { if 0 &lt;= 0_usize { } }</code>"}], "answers": [{"comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1426028733, "post_id": 28974698, "comment_id": 46202472, "body": "&quot;new control flow structures&quot; is a perfectly reasonable reason to use macros. It ensures that <code>return</code>/<code>continue</code>/<code>break</code> will work from the code the users passes into the control flow structure, which isn&#39;t true for closures."}], "tags": [], "owner": {"reputation": 6718, "user_id": 2455707, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/768bc63471394edee20bcd4131186118?s=128&d=identicon&r=PG", "display_name": "reem", "link": "https://stackoverflow.com/users/2455707/reem"}, "is_accepted": false, "score": 5, "last_activity_date": 1426047041, "last_edit_date": 1426047041, "creation_date": 1426023967, "answer_id": 28974698, "question_id": 28956434, "link": "https://stackoverflow.com/questions/28956434/what-is-the-best-strategy-to-handle-type-related-warnings-in-macros/28974698#28974698", "title": "What is the best strategy to handle type-related warnings in macros?", "body": "<p>If you use this macro with <code>$to</code> set to <code>0</code> then rustc will complain since <code>0 &lt;= X</code> will always be true since we are working with <code>usize</code>, which is unsigned. Note that <code>&amp;x[..0]</code> will never trigger an out-of-bounds error.</p>\n\n<p>On a related note, here is a more idiomatic way to write this code:</p>\n\n<pre><code>fn slice_opt&lt;T&gt;(buf: &amp;[T], ind: usize) -&gt; Option&lt;&amp;[T]&gt; {\n     if ind &lt;= buf.len() {\n         Some(&amp;buf[..ind])\n     } else {\n         None\n     }\n}\n\n// Usage site                 // $err\nslice_opt(x).unwrap_or_else(|| { &amp;[] })\n</code></pre>\n\n<p>You should not use macros unless you <em>must</em> use a macro.</p>\n\n<p>Things you need to use a macro for:</p>\n\n<ul>\n<li>new syntax</li>\n<li>return/break/continue from enclosing scope</li>\n<li>checked code generation</li>\n<li>some subtle type tricks (borrowing only one field of a type, &amp;c.)</li>\n</ul>\n\n<p>Things that you don't need to use a macro for:</p>\n\n<ul>\n<li>anything that could be a function (use functions)</li>\n<li>inlining (use #[inline])</li>\n<li>polymorphism/generics (use actual generics)</li>\n</ul>\n"}], "owner": {"reputation": 647, "user_id": 4523058, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/a975dc9f5de333ddaf78b50c048548ec?s=128&d=identicon&r=PG", "display_name": "urubi", "link": "https://stackoverflow.com/users/4523058/urubi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 656, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1426078409, "creation_date": 1425963370, "last_edit_date": 1426078409, "question_id": 28956434, "link": "https://stackoverflow.com/questions/28956434/what-is-the-best-strategy-to-handle-type-related-warnings-in-macros", "title": "What is the best strategy to handle type-related warnings in macros?", "body": "<p>I have defined a macro to gracefully handle out-of-bounds slicing. The following is the macro's definition:</p>\n\n<pre><code>macro_rules! slice_or_else {\n    ($array: expr, $to:expr, $err: block) =&gt; ({\n        if $to &lt;= $array.len() {\n            &amp;$array[..$to]\n        }\n        else $err\n    })\n}\n</code></pre>\n\n<p>When I compile a function using it, the compiler complains that</p>\n\n<pre><code>warning: comparison is useless due to type limits, #[warn(unused_comparisons)] on by default\n</code></pre>\n\n<p>despite the fact that comparison is used determine whether the requested slice is valid, and that the macro passes testing. Am I missing something?  Can these warnings be turned off for macros?</p>\n\n<hr>\n\n<p><strong>Update:</strong> It appears that passing <code>0</code> as <code>$to</code> causes the problem, as Reem suggested. An example (<a href=\"http://is.gd/EzNUk6\" rel=\"nofollow\" title=\"Playpen Example\">Playpen Example</a>):</p>\n\n<pre><code>fn main() {\n    let a: [u8; 4] = [0, 1, 2, 3];\n    assert!(slice_or_else!(a, 0, {return;}).len() == 0);\n}\n</code></pre>\n\n<p>I am using macros because I want to be able to affect the flow of the calling function.</p>\n\n<p>Since the warning is justified, what is the best strategy to deal with this use case? Binding <code>$to</code> to temporary variable? casting it explicitly? </p>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1426216959, "post_id": 28956823, "comment_id": 46291333, "body": "Why, in this code, if I change <code>Box::new(f)</code> to <code>Box::&lt;FnMut() + &#39;a&gt;::new(f)</code> does it fail to compile? Am I not just specifying the type parameters fully instead of letting Rust infer them?"}, {"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1426217273, "post_id": 28956823, "comment_id": 46291396, "body": "Also, in your example, in <code>add_to_vec</code>, why must we fully specify out <code>Box&lt;FnMut() + &#39;a&gt;</code>, and why is that not equivalent to just <code>T</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1426217493, "post_id": 28956823, "comment_id": 46291465, "body": "@Thanatos: you mean in the vector, how it is <code>&amp;mut Vec&lt;Box&lt;FnMut() + &#39;a&gt;&gt;</code> rather than <code>Vec&lt;T&gt;</code>? Think about it and it should become apparent: what is the type of the vector supposed to be?"}, {"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1426220681, "post_id": 28956823, "comment_id": 46292236, "body": "Yes, the vector, but rather than <code>Vec&lt;Box&lt;T&gt;&gt;</code>; since <code>T</code> is <code>FnMut() + &#39;a</code>, <code>Vec&lt;T&gt;</code> would be <code>Vec&lt;FnMut() + &#39;a&gt;</code> which lacks our <code>Box</code>, which is clearly different; I&#39;m asking how <code>&amp;mut Vec&lt;Box&lt;FnMut() + &#39;a&gt;&gt;</code> different from <code>&amp;mut Vec&lt;Box&lt;T&gt;&gt;</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 1, "creation_date": 1426224498, "post_id": 28956823, "comment_id": 46293194, "body": "<code>T</code> is <i>not</i> <code>FnMut() + &#39;a</code>; <code>T</code> is a concrete type that <i>implements</i> <code>FnMut()</code> and lives for at least <code>&#39;a</code>. Remember that when dealing with functions and closures, <i>each is of a unique type</i>. Taking just <code>call_b</code>, it has a type which is in friendly form (for compiler errors) written <code>fn() {call_b}</code>, <code>T</code> is <code>fn() {call_b}</code>, and so <code>Vec&lt;Box&lt;T&gt;&gt;</code> would be <code>Vec&lt;Box&lt;fn() {call_b}&gt;&gt;</code>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1425965831, "creation_date": 1425965831, "answer_id": 28956823, "question_id": 28956195, "link": "https://stackoverflow.com/questions/28956195/how-do-i-create-use-a-list-of-callback-functions/28956823#28956823", "title": "How do I create &amp; use a list of callback functions?", "body": "<p>There are a few problems with your code. Here\u2019s a fully fixed version to begin with:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::vec::Vec;\n\nfn add_to_vec&lt;'a, T: FnMut() + 'a&gt;(v: &amp;mut Vec&lt;Box&lt;FnMut() + 'a&gt;&gt;, f: T) {\n    v.push(Box::new(f));\n}\n\nfn call_b() {\n    println!(\"Call b.\");\n}\n\n#[test]\nfn it_works() {\n    let mut calls: Vec&lt;Box&lt;FnMut()&gt;&gt; = Vec::new();\n\n    add_to_vec(&amp;mut calls, || { println!(\"Call a.\"); });\n    add_to_vec(&amp;mut calls, call_b);\n\n    for mut c in calls.drain() {\n        c();\n    }\n}\n</code></pre>\n\n<p>The lifetime issue is that the boxed function objects must have a common base lifetime; if you just write the generic constraint <code>T: FnMut()</code>, it is assumed to only need to live as long as the function call and not any longer. Therefore two things need to be added to it all: the generic parameter <code>T</code> must be constrained to a specified lifetime, and in order to store it inside the vector, the trait object type must similarly be constrained, as <code>Box&lt;FnMut() + 'a&gt;</code>. That way they both match up and memory safety is ensured and so the compiler lets it through. The <code>-&gt; ()</code> part of <code>FnMut() -&gt; ()</code> is superfluous, by the way.</p>\n\n<p>The remaining fixes that need to be made are the insertion of a few <code>mut</code>; in order to push to the vector, you naturally need a mutable reference, hence the <code>&amp;</code> to <code>&amp;mut</code> changes, and in order to take mutable references to <code>calls</code> and <code>c</code> the bindings must be made <code>mut</code>.</p>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 403, "favorite_count": 0, "accepted_answer_id": 28956823, "answer_count": 1, "score": 1, "last_activity_date": 1425965831, "creation_date": 1425961777, "last_edit_date": 1495540253, "question_id": 28956195, "link": "https://stackoverflow.com/questions/28956195/how-do-i-create-use-a-list-of-callback-functions", "title": "How do I create &amp; use a list of callback functions?", "body": "<p>In Rust, I'm trying to create a list of callbacks functions to invoke later:</p>\n\n<pre><code>use std::vec::Vec;\n\nfn add_to_vec&lt;T: FnMut() -&gt; ()&gt;(v: &amp;Vec&lt;Box&lt;FnMut() -&gt; ()&gt;&gt;, f: T) {\n    v.push(Box::new(f));\n}\n\nfn call_b() {\n    println!(\"Call b.\");\n}\n\n#[test]\nfn it_works() {\n    let calls: Vec&lt;Box&lt;FnMut() -&gt; ()&gt;&gt; = Vec::new();\n\n    add_to_vec(&amp;calls, || { println!(\"Call a.\"); });\n    add_to_vec(&amp;calls, call_b);\n\n    for c in calls.drain() {\n        c();\n    }\n}\n</code></pre>\n\n<p>I'm mostly following the advice <a href=\"https://stackoverflow.com/a/27832320/101999\">here on how to store a closure</a>, however, I'm still seeing some errors:</p>\n\n<pre><code>src/lib.rs:6:12: 6:23 error: the parameter type `T` may not live long enough [E0311]\nsrc/lib.rs:6     v.push(Box::new(f));\n                        ^~~~~~~~~~~\nsrc/lib.rs:6:23: 6:23 help: consider adding an explicit lifetime bound for `T`\nsrc/lib.rs:5:68: 7:2 note: the parameter type `T` must be valid for the anonymous lifetime #1 defined on the block at 5:67...\nsrc/lib.rs:5 fn add_to_vec&lt;T: FnMut() -&gt; ()&gt;(v: &amp;Vec&lt;Box&lt;FnMut() -&gt; ()&gt;&gt;, f: T) {\nsrc/lib.rs:6     v.push(Box::new(f));\nsrc/lib.rs:7 }\nsrc/lib.rs:6:12: 6:23 note: ...so that the type `T` will meet its required lifetime bounds\nsrc/lib.rs:6     v.push(Box::new(f));\n                        ^~~~~~~~~~~\n</code></pre>\n\n<p>I've tried changing the function signature to:</p>\n\n<pre><code>fn add_to_vec&lt;'a, T: FnMut() -&gt; ()&gt;(v: &amp;Vec&lt;Box&lt;FnMut() -&gt; ()&gt;&gt;, f: &amp;'a T) {\n</code></pre>\n\n<p>\u2026 but this gets me:</p>\n\n<pre><code>src/lib.rs:6:12: 6:23 error: the trait `core::ops::Fn&lt;()&gt;` is not implemented for the type `&amp;T` [E0277]\nsrc/lib.rs:6     v.push(Box::new(f));\n                        ^~~~~~~~~~~\nerror: aborting due to previous error\nsrc/lib.rs:6:12: 6:23 error: the trait `core::ops::Fn&lt;()&gt;` is not implemented for the type `&amp;T` [E0277]\nsrc/lib.rs:6     v.push(Box::new(f));\n                        ^~~~~~~~~~~\nsrc/lib.rs:18:24: 18:51 error: mismatched types:\n expected `&amp;_`,\n    found `[closure src/lib.rs:18:24: 18:51]`\n(expected &amp;-ptr,\n    found closure) [E0308]\nsrc/lib.rs:18     add_to_vec(&amp;calls, || { println!(\"Call a.\"); });\n                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>(The last error I can correct by adding a <code>&amp;</code>; while I think this is something I should need, because <code>add_to_vec</code> is going to end up owning the closure, and thus needs to borrow it, I'm not entirely sure.)</p>\n"}, {"tags": ["rust", "grammar", "language-design"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1425958400, "post_id": 28955563, "comment_id": 46164678, "body": "They aren&#39;t called <i>templates</i> in Rust; I think your C++ is showing. :-) Anecdotally, I&#39;ve never seen that particular usage of specifying the type parameters. Using type inference, you can just say <code>Vec::new()</code>. The only time I&#39;ve seen specifying the type like that is for functions that return a trait and you have to pick a concrete type, like <code>parse</code> or <code>collect</code>."}, {"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425958530, "post_id": 28955563, "comment_id": 46164708, "body": "@Shepmaster: Ack, they&#39;re generics aren&#39;t they? And yes, some amount of type inference can avoid you needing to specify the actual type; I think I stumbled on this mostly as a newcomer to Rust not yet realizing that type inference can do this, and still wonder why."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425958742, "post_id": 28955563, "comment_id": 46164760, "body": "I think it&#39;s a good question; I didn&#39;t even realize that you could specify type parameters at that location! I look forward to an answer, but my guess is that it&#39;s going to boil down to simplicity of parsing, as you suggested. I just wanted to comment to indicate that your example code wasn&#39;t common, hoping to help other newcomers who read this question. Cheers!"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1426009334, "post_id": 28955563, "comment_id": 46192541, "body": "In most cases type inference can indeed do the trick, but some functions have type parameters that appear neither in parameters nor in return values, in which case you have to use that syntax. An example of such a function is <a href=\"http://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"nofollow noreferrer\">std::mem::size_of()</a>"}], "answers": [{"comments": [{"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1425959064, "post_id": 28955786, "comment_id": 46164841, "body": "Do you know if there was any reason to not also replicate the syntax during variable declaration, something like <code>let v: Vec::&lt;int&gt;</code>?"}, {"owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "reply_to_user": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1425959165, "post_id": 28955786, "comment_id": 46164866, "body": "I made an edit at the end addressing this. I think, basically, <code>::&lt;</code> is ugly and we want to avoid it as much as possible. Using <code>&lt;</code> in types and having type inference saves us from it most of the time."}, {"owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1425959489, "post_id": 28955786, "comment_id": 46164957, "body": "Is that lexed/parsed as a single symbol <code>::&lt;</code>?"}, {"owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "reply_to_user": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "edited": false, "score": 0, "creation_date": 1425959755, "post_id": 28955786, "comment_id": 46165029, "body": "Nope, you could write <code>:: &lt;</code> if you wished."}, {"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1453257231, "post_id": 28955786, "comment_id": 57519299, "body": "I lament, if only rust had followed scala and reserved <code>[ ]</code> for generics instead of wasting them on array indexing, which is just as well served with the <code>( )</code>s of the <code>apply</code> operator."}], "tags": [], "owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "is_accepted": true, "score": 11, "last_activity_date": 1425958834, "last_edit_date": 1495542658, "creation_date": 1425958834, "answer_id": 28955786, "question_id": 28955563, "link": "https://stackoverflow.com/questions/28955563/why-does-rust-put-a-before-the-parameters-in-generics-sometimes/28955786#28955786", "title": "Why does Rust put a :: before the parameters in generics sometimes?", "body": "<p>When parsing an expression, it would be ambiguous whether a <code>&lt;</code> was the start of a type parameter list or a less-than operator. Rust always assumes the latter and requires <code>::&lt;</code> for type parameter lists.</p>\n\n<p>When parsing a type, it's always unambiguously a type parameter list, so <code>::&lt;</code> is never necessary.</p>\n\n<p>In C++, this ambiguity is kept in the parser, which makes parsing C++ much more difficult than parsing Rust. See <a href=\"https://stackoverflow.com/a/7304730/1535283\">here</a> for an explanation why this matters.</p>\n\n<p>Anyway, <em>most</em> of the time in Rust, the types can be inferred and you can just write <code>Vec::new()</code>. Since <code>::&lt;</code> is usually not needed and is fairly ugly, it makes sense to keep only <code>&lt;</code> in types, rather than making the two syntaxes match up.</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 3, "last_activity_date": 1426103981, "creation_date": 1426103981, "answer_id": 28996202, "question_id": 28955563, "link": "https://stackoverflow.com/questions/28955563/why-does-rust-put-a-before-the-parameters-in-generics-sometimes/28996202#28996202", "title": "Why does Rust put a :: before the parameters in generics sometimes?", "body": "<p>The two different syntaxes don't even specify the same type parameters necessarily.</p>\n\n<p>In this example:</p>\n\n<pre><code>let mut map: HashMap&lt;K, V&gt;;\n</code></pre>\n\n<p><code>K</code> and <code>V</code> fill the type parameters of the <code>struct HashMap</code> declaration, the type itself.</p>\n\n<p>In this expression:</p>\n\n<pre><code>HashMap::&lt;K, V&gt;::new()\n</code></pre>\n\n<p><code>K</code> and <code>V</code> <strong>fill the type parameters of the impl block</strong> where the method <code>new</code> is defined! The impl block need not have the same, as many, or the same default, type parameters as the type itself.</p>\n\n<p>In this particular case, the struct has the parameters <code>HashMap&lt;K, V, S = RandomState&gt;</code>  (3 parameters, 1 defaulted). And the impl block containing <code>::new()</code> has parameters <code>impl&lt;K, V&gt;</code> (2 parameters, not implemented for arbitrary states).</p>\n"}], "owner": {"reputation": 37636, "user_id": 101999, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/ab9e16b1296c16bc63f02f6dff5e3dc6?s=128&d=identicon&r=PG", "display_name": "Thanatos", "link": "https://stackoverflow.com/users/101999/thanatos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 28955786, "answer_count": 2, "score": 8, "last_activity_date": 1426103981, "creation_date": 1425957317, "last_edit_date": 1425996335, "question_id": 28955563, "link": "https://stackoverflow.com/questions/28955563/why-does-rust-put-a-before-the-parameters-in-generics-sometimes", "title": "Why does Rust put a :: before the parameters in generics sometimes?", "body": "<p>When declaring a variable of type vector or a hash map in Rust, we do:</p>\n\n<pre><code>let v: Vec&lt;int&gt;\nlet m: HashMap&lt;int, int&gt;\n</code></pre>\n\n<p>To instantiate, we need to call <code>new()</code>. However, we do so thusly:</p>\n\n<pre><code>Vec::&lt;int&gt;::new()\n   ^^\nHashMap::&lt;int, int&gt;::new()\n       ^^\n</code></pre>\n\n<p>Note the sudden appearance of <code>::</code>. Coming from C++, these are odd. Why do these occur? Does having a leading <code>::</code> make <code>IDENTIFIER :: &lt; IDENTFIER \u2026</code> easier to parse than <code>IDENTIFIER &lt; IDENTIFIER</code>, which might be construed as a less-than operation? (And thus, this is simply a thing to make the language easier to parse? But if so, why not also do it during type specifications, so as to have the two mirror each other?)</p>\n\n<p>(As Shepmaster notes, often <code>Vec::new()</code> is enough; the type can often be inferred.)</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1526318781, "last_edit_date": 1526318781, "creation_date": 1425944342, "answer_id": 28953714, "question_id": 28953262, "link": "https://stackoverflow.com/questions/28953262/pass-member-function-body-as-macro-parameter/28953714#28953714", "title": "Pass member function body as macro parameter", "body": "<p>One solution would be to accept a closure instead of a block:</p>\n\n<pre><code>macro_rules! iterator{\n    ($ty:ty, $ident:ident; $($state_ident:ident: $state_ty:ty),*; $next:expr) =&gt; (\n        struct $ident {\n            $($state_ident: $state_ty), *\n        }\n\n        impl Iterator for $ident {\n            type Item = $ty;\n\n            fn next(&amp;mut self) -&gt; Option&lt;$ty&gt; {\n                $next(self)\n            }\n        }\n    );\n}\n\niterator!(i32, TestIterator; index: i32; |me: &amp;mut TestIterator| {\n    let value = Some(me.index);\n    me.index += 1;\n    value\n});\n\nfn main() {}\n</code></pre>\n\n<p>This requires explicitly passing <code>self</code> to the closure. You cannot use the identifier <code>self</code> in the closure because <code>self</code> is only allowed to be declared in the parameter list of a function. </p>\n\n<p>You'll also need to specify the type of the closure parameter, this is a limitation of closures that are defined as a variable and used later, as opposed to being immediately used.</p>\n"}], "owner": {"reputation": 290, "user_id": 1140850, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c7a4a30f02f1b1f0d06f422139f7c4ac?s=128&d=identicon&r=PG", "display_name": "Kyle Mayes", "link": "https://stackoverflow.com/users/1140850/kyle-mayes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2604, "favorite_count": 0, "accepted_answer_id": 28953714, "answer_count": 1, "score": 4, "last_activity_date": 1526318781, "creation_date": 1425941742, "last_edit_date": 1526318651, "question_id": 28953262, "link": "https://stackoverflow.com/questions/28953262/pass-member-function-body-as-macro-parameter", "title": "Pass member function body as macro parameter", "body": "<p>I am trying to pass the body of a member function as a macro parameter. Is it possible to alter the code below so that it works?</p>\n\n<pre><code>macro_rules! iterator{\n    ($ty:ty, $ident:ident; $($state_ident:ident: $state_ty:ty), *; $next:block) =&gt; (\n        struct $ident {                                         // ^ the parameter\n            $($state_ident: $state_ty), *\n        }\n\n        impl Iterator for $ident {\n            type Item = $ty;\n\n            fn next(&amp;mut self) -&gt; Option&lt;$ty&gt; {\n                $next // &lt;- cannot refer to 'self' parameter in this block\n            }\n        }\n    );\n}\n\niterator!(i32, TestIterator; index: i32; {\n    let value = Some(self.index);\n    self.index += 1;\n    value\n});\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2d8cbe7c2e62769072fad185bf0050c9&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>Compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0424]: expected value, found module `self`\n  --&gt; src/main.rs:18:22\n   |\n18 |     let value = Some(self.index);\n   |                      ^^^^ `self` value is only available in methods with `self` parameter\n\nerror[E0424]: expected value, found module `self`\n  --&gt; src/main.rs:19:5\n   |\n19 |     self.index += 1;\n   |     ^^^^ `self` value is only available in methods with `self` parameter\n</code></pre>\n"}, {"tags": ["rust", "sleep"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 44, "last_activity_date": 1464747206, "last_edit_date": 1464747206, "creation_date": 1425943768, "answer_id": 28953618, "question_id": 28952938, "link": "https://stackoverflow.com/questions/28952938/how-can-i-put-the-current-thread-to-sleep/28953618#28953618", "title": "How can I put the current thread to sleep?", "body": "<h3>Rust 1.4+</h3>\n\n<p><a href=\"http://doc.rust-lang.org/std/time/struct.Duration.html\" rel=\"noreferrer\"><code>Duration</code></a> and <a href=\"http://doc.rust-lang.org/std/thread/fn.sleep.html\" rel=\"noreferrer\"><code>sleep</code></a> have returned and are stable!</p>\n\n<pre><code>use std::time::Duration;\nuse std::thread;\n\nfn main() {\n    thread::sleep(Duration::from_millis(4000))\n}\n</code></pre>\n\n<p>You could also use <code>Duration::from_secs(4)</code>, which might be more obvious in this case.</p>\n\n<p>The solution below for 1.0 will continue to work if you prefer it, due to the nature of semantic versioning.</p>\n\n<h3>Rust 1.0+</h3>\n\n<p>Duration wasn't made stable in time for 1.0, so there's a new function in town - <a href=\"http://doc.rust-lang.org/std/thread/fn.sleep_ms.html\" rel=\"noreferrer\"><code>thread::sleep_ms</code></a>:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    thread::sleep_ms(4000);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1244, "user_id": 606961, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/V8mtj.png?s=128&g=1", "display_name": "cardiff space man", "link": "https://stackoverflow.com/users/606961/cardiff-space-man"}, "edited": false, "score": 0, "creation_date": 1446158249, "post_id": 29258753, "comment_id": 54640818, "body": "error: #[feature] may not be used on the stable release channel. A great many wonderful APIs are unlocked using #[feature] but if you download Rust from the prominent web sites you can&#39;t use #[feature]."}], "tags": [], "owner": {"reputation": 2189, "user_id": 1091424, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/W4Xu6.jpg?s=128&g=1", "display_name": "Tiago", "link": "https://stackoverflow.com/users/1091424/tiago"}, "is_accepted": true, "score": 13, "last_activity_date": 1447156298, "last_edit_date": 1447156298, "creation_date": 1427294371, "answer_id": 29258753, "question_id": 28952938, "link": "https://stackoverflow.com/questions/28952938/how-can-i-put-the-current-thread-to-sleep/29258753#29258753", "title": "How can I put the current thread to sleep?", "body": "<p><strong>Updated answer</strong></p>\n\n<p>This is the updated code for the current Rust version:</p>\n\n<pre><code>use std::time::Duration;\nuse std::thread::sleep;\n\nfn main() {\n    sleep(Duration::from_millis(2));\n}\n</code></pre>\n\n<p>Rust play url: <a href=\"http://is.gd/U7Oyip\">http://is.gd/U7Oyip</a></p>\n\n<p><strong>Old answer pre-1.0</strong></p>\n\n<p>According the pull request <a href=\"https://github.com/rust-lang/rust/pull/23330\">https://github.com/rust-lang/rust/pull/23330</a> the feature that will replace the old <code>std::old_io::timer::sleep</code> is the new <code>std::thread::sleep</code>.</p>\n\n<p>Pull request description on GitHub:</p>\n\n<blockquote>\n  <p>This function is the current replacement for std::old_io::timer which\n  will soon be deprecated. This function is unstable and has its own\n  feature gate as it does not yet have an RFC nor has it existed for\n  very long.</p>\n</blockquote>\n\n<p>Code example:</p>\n\n<pre><code>#![feature(std_misc, thread_sleep)]\n\nuse std::time::Duration;\nuse std::thread::sleep;\n\nfn main() {\n    sleep(Duration::milliseconds(2));\n}\n</code></pre>\n\n<p>This uses <a href=\"http://doc.rust-lang.org/std/thread/fn.sleep.html\"><code>sleep</code></a> and <a href=\"http://doc.rust-lang.org/std/time/duration/struct.Duration.html\"><code>Duration</code></a>, which are currently behind the feature gates of <code>thread_sleep</code> and <code>std_misc</code>, respectively.</p>\n"}], "owner": {"reputation": 2189, "user_id": 1091424, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/W4Xu6.jpg?s=128&g=1", "display_name": "Tiago", "link": "https://stackoverflow.com/users/1091424/tiago"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12976, "favorite_count": 3, "accepted_answer_id": 29258753, "answer_count": 2, "score": 35, "last_activity_date": 1464747206, "creation_date": 1425940235, "last_edit_date": 1425943899, "question_id": 28952938, "link": "https://stackoverflow.com/questions/28952938/how-can-i-put-the-current-thread-to-sleep", "title": "How can I put the current thread to sleep?", "body": "<p>There is so much outdated information, it is really hard to find out how to sleep. I'd like something similar to this Java code:</p>\n\n<pre><code>Thread.sleep(4000);\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": false, "score": 2, "last_activity_date": 1464536459, "last_edit_date": 1464536459, "creation_date": 1425938433, "answer_id": 28952546, "question_id": 28952411, "link": "https://stackoverflow.com/questions/28952411/what-is-the-idiomatic-way-to-pop-the-last-n-elements-in-a-mutable-vec/28952546#28952546", "title": "What is the idiomatic way to pop the last N elements in a mutable Vec?", "body": "<p>You should take a look at the <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.truncate\" rel=\"nofollow\"><code>Vec::truncate</code></a> function from the standard library, that can do this for you.</p>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=355db0a3ae62aed1841418ed64930f91&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a>)</p>\n\n<pre><code>fn main() {\n    let mut nums: Vec&lt;u32&gt; = Vec::new();\n    nums.push(1);\n    nums.push(2);\n    nums.push(3);\n    nums.push(4);\n    nums.push(5);\n\n    let n = 2;\n    let new_len = nums.len() - n;\n    nums.truncate(new_len);\n\n    for e in nums {\n        println!(\"{}\", e)\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 18, "last_activity_date": 1464536354, "last_edit_date": 1464536354, "creation_date": 1425938447, "answer_id": 28952552, "question_id": 28952411, "link": "https://stackoverflow.com/questions/28952411/what-is-the-idiomatic-way-to-pop-the-last-n-elements-in-a-mutable-vec/28952552#28952552", "title": "What is the idiomatic way to pop the last N elements in a mutable Vec?", "body": "<p>I'd recommend using <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.truncate\" rel=\"noreferrer\"><code>Vec::truncate</code></a>:</p>\n\n<pre><code>fn main() {\n    let mut nums = vec![1, 2, 3, 4, 5];\n\n    let n = 2;\n    let final_length = nums.len().saturating_sub(n);\n    nums.truncate(final_length);\n\n    println!(\"{:?}\", nums);\n}\n</code></pre>\n\n<p>Additionally, I</p>\n\n<ul>\n<li>used <a href=\"http://doc.rust-lang.org/std/primitive.i32.html#method.saturating_sub\" rel=\"noreferrer\"><code>saturating_sub</code></a> to handle the case where there aren't <code>N</code> elements in the vector</li>\n<li>used <a href=\"http://doc.rust-lang.org/std/macro.vec!.html\" rel=\"noreferrer\"><code>vec![]</code></a> to construct the vector of numbers easily</li>\n<li>printed out the entire vector in one go</li>\n</ul>\n\n<hr>\n\n<p>Normally when you \"pop\" something, you want to have those values. If you want the values in another vector, you can use <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_off\" rel=\"noreferrer\"><code>Vec::split_off</code></a>:</p>\n\n<pre><code>let tail = nums.split_off(final_length);\n</code></pre>\n\n<p>If you want access to the elements but do not want to create a whole new vector, you can use <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\" rel=\"noreferrer\"><code>Vec::drain</code></a>:</p>\n\n<pre><code>for i in nums.drain(final_length..) {\n    println!(\"{}\", i)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1120, "user_id": 2647192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b37079565635fea4d46f300ce26766e1?s=128&d=identicon&r=PG", "display_name": "allTwentyQuestions", "link": "https://stackoverflow.com/users/2647192/alltwentyquestions"}, "is_accepted": false, "score": 5, "last_activity_date": 1471011762, "creation_date": 1471011762, "answer_id": 38920294, "question_id": 28952411, "link": "https://stackoverflow.com/questions/28952411/what-is-the-idiomatic-way-to-pop-the-last-n-elements-in-a-mutable-vec/38920294#38920294", "title": "What is the idiomatic way to pop the last N elements in a mutable Vec?", "body": "<p>An alternate approach would be to use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\" rel=\"noreferrer\">Vec::drain</a> instead. This gives you an iterator so you can actually use the elements that are removed.</p>\n\n<pre><code>fn main() {\n    let mut nums: Vec&lt;u32&gt; = Vec::new();\n    nums.push(1);\n    nums.push(2);\n    nums.push(3);\n    nums.push(4);\n    nums.push(5);\n\n    let n = 2;\n    let new_len = nums.len() - n;\n\n    for removed_element in nums.drain(new_len..) {\n        println!(\"removed: {}\", removed_element);\n    }\n\n    for retained_element in nums {\n        println!(\"retained: {}\", retained_element);\n    }\n}\n</code></pre>\n\n<p>The drain method accepts a <code>RangeArgument</code> in the form of <code>&lt;start-inclusive&gt;..&lt;end-exclusive&gt;</code>. Both start and end may be omitted to default to the beginning/end of the vector. So above, we're really just saying start at <code>new_len</code> and drain to the end.</p>\n"}], "owner": {"reputation": 803, "user_id": 4651500, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b838d7d269aaa02004aa2dede86379d0?s=128&d=identicon&r=PG&f=1", "display_name": "bitloner", "link": "https://stackoverflow.com/users/4651500/bitloner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5908, "favorite_count": 0, "accepted_answer_id": 28952552, "answer_count": 3, "score": 14, "last_activity_date": 1471011762, "creation_date": 1425937840, "last_edit_date": 1464536408, "question_id": 28952411, "link": "https://stackoverflow.com/questions/28952411/what-is-the-idiomatic-way-to-pop-the-last-n-elements-in-a-mutable-vec", "title": "What is the idiomatic way to pop the last N elements in a mutable Vec?", "body": "<p>I am contributing Rust code to RosettaCode to both learn Rust and contribute to the Rust community at the same time. What is the best idiomatic way to pop the last <em>n</em> elements in a mutable <code>Vec</code>?</p>\n\n<p>Here's roughly what I have written but I'm wanting to see if there's a better way: </p>\n\n<pre><code>fn main() {\n    let mut nums: Vec&lt;u32&gt; = Vec::new();\n    nums.push(1);\n    nums.push(2);\n    nums.push(3);\n    nums.push(4);\n    nums.push(5);\n\n    let n = 2;\n    for _ in 0..n {\n        nums.pop();\n    }\n\n    for e in nums {\n        println!(\"{}\", e)\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=4961b011516314597f63ebbb9aa3abbe&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground link</a>)</p>\n"}, {"tags": ["rust", "variadic-functions"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 58, "last_activity_date": 1467121368, "last_edit_date": 1467121368, "creation_date": 1425934573, "answer_id": 28951583, "question_id": 28951503, "link": "https://stackoverflow.com/questions/28951503/how-can-i-create-a-function-with-a-variable-number-of-arguments/28951583#28951583", "title": "How can I create a function with a variable number of arguments?", "body": "<p>In general, you can't - Rust does not support variadic functions, except when interoperating with C code that uses varargs.</p>\n\n<p>In <em>this</em> case, since all of your arguments are the same type, you can accept a slice:</p>\n\n<pre><code>fn foo(args: &amp;[&amp;str]) {\n    for arg in args {\n        println!(\"{}\", arg);\n    }\n}\n\nfn main() {\n    foo(&amp;[\"hello\", \"world\", \"I\", \"am\", \"arguments\"]);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=8eab75bf1cea2d00df4f42ac3458aa83&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>Beyond that, you can explicitly accept optional arguments:</p>\n\n<pre><code>fn foo(name: &amp;str, age: Option&lt;u8&gt;) {\n    match age {\n        Some(age) =&gt; println!(\"{} is {}.\", name, age),\n        None      =&gt; println!(\"Who knows how old {} is?\", name),\n    }\n}\n\nfn main() {\n    foo(\"Sally\", Some(27));\n    foo(\"Bill\", None);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=dfd79c6ca28a3c9705bdb2dffe9781a5\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>If you need to accept many arguments, optional or not, you can implement a builder:</p>\n\n<pre><code>struct Arguments&lt;'a&gt; {\n    name: &amp;'a str,\n    age: Option&lt;u8&gt;,\n}\n\nimpl&lt;'a&gt; Arguments&lt;'a&gt; {\n    fn new(name: &amp;'a str) -&gt; Arguments&lt;'a&gt; {\n        Arguments {\n            name: name,\n            age: None\n        }\n    }\n\n    fn age(self, age: u8) -&gt; Self {\n        Arguments {\n            age: Some(age),\n            ..self\n        }\n    }\n}\n\nfn foo(arg: Arguments) {\n    match arg.age {\n        Some(age) =&gt; println!(\"{} is {}.\", arg.name, age),\n        None      =&gt; println!(\"Who knows how old {} is?\", arg.name),\n    }\n}\n\nfn main() {\n    foo(Arguments::new(\"Sally\").age(27));\n    foo(Arguments::new(\"Bill\"));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=f1894e84541f9ee6120c7a0e8cf9da37&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>)</p>\n"}, {"comments": [{"owner": {"reputation": 399, "user_id": 2139291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8E5jB.jpg?s=128&g=1", "display_name": "creativcoder", "link": "https://stackoverflow.com/users/2139291/creativcoder"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499797586, "post_id": 45033220, "comment_id": 77058227, "body": "@Shepmaster Compiles now. Yes, i agree on the allocation part. Is there a similar way without allocation ?"}, {"owner": {"reputation": 399, "user_id": 2139291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8E5jB.jpg?s=128&g=1", "display_name": "creativcoder", "link": "https://stackoverflow.com/users/2139291/creativcoder"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1499798159, "post_id": 45033220, "comment_id": 77058597, "body": "ah yes, the macro is really not needed here. I will modify the answer according to your comment."}, {"owner": {"reputation": 5397, "user_id": 495865, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/55640fcb7f3c5effcf7d73924dceef1b?s=128&d=identicon&r=PG", "display_name": "qiuxiafei", "link": "https://stackoverflow.com/users/495865/qiuxiafei"}, "edited": false, "score": 0, "creation_date": 1510144691, "post_id": 45033220, "comment_id": 81308689, "body": "what if i want the function take the ownership of the array?"}, {"owner": {"reputation": 1027, "user_id": 814422, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad082805d1ce2e3766886195c720fca6?s=128&d=identicon&r=PG", "display_name": "kbolino", "link": "https://stackoverflow.com/users/814422/kbolino"}, "reply_to_user": {"reputation": 5397, "user_id": 495865, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/55640fcb7f3c5effcf7d73924dceef1b?s=128&d=identicon&r=PG", "display_name": "qiuxiafei", "link": "https://stackoverflow.com/users/495865/qiuxiafei"}, "edited": false, "score": 1, "creation_date": 1510197749, "post_id": 45033220, "comment_id": 81335849, "body": "@qiuxiafei unless you can hard-code the size of the array (thus making it not variadic), or you write a variant for every <code>[T; N]</code> you want to support, you&#39;ll have to give it a <code>Vec&lt;T&gt;</code>"}, {"owner": {"reputation": 5397, "user_id": 495865, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/55640fcb7f3c5effcf7d73924dceef1b?s=128&d=identicon&r=PG", "display_name": "qiuxiafei", "link": "https://stackoverflow.com/users/495865/qiuxiafei"}, "reply_to_user": {"reputation": 1027, "user_id": 814422, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad082805d1ce2e3766886195c720fca6?s=128&d=identicon&r=PG", "display_name": "kbolino", "link": "https://stackoverflow.com/users/814422/kbolino"}, "edited": false, "score": 0, "creation_date": 1510200016, "post_id": 45033220, "comment_id": 81336435, "body": "@kbolino yes, i thinks Vec&lt;T&gt; is the only solution."}], "tags": [], "owner": {"reputation": 399, "user_id": 2139291, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8E5jB.jpg?s=128&g=1", "display_name": "creativcoder", "link": "https://stackoverflow.com/users/2139291/creativcoder"}, "is_accepted": false, "score": 5, "last_activity_date": 1499798225, "last_edit_date": 1499798225, "creation_date": 1499772317, "answer_id": 45033220, "question_id": 28951503, "link": "https://stackoverflow.com/questions/28951503/how-can-i-create-a-function-with-a-variable-number-of-arguments/45033220#45033220", "title": "How can I create a function with a variable number of arguments?", "body": "<pre><code>fn variable_func&lt;T&gt;(_vargs: &amp;[T]) {}\n\nfn main() {\n    variable_func(&amp;[1]);\n    variable_func(&amp;[1, 2]);\n    variable_func(&amp;[\"A\", \"B\", \"C\"]);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 21009, "user_id": 1896169, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/jap8U.png?s=128&g=1", "display_name": "Justin", "link": "https://stackoverflow.com/users/1896169/justin"}, "is_accepted": false, "score": 6, "last_activity_date": 1565572997, "creation_date": 1565572997, "answer_id": 57454769, "question_id": 28951503, "link": "https://stackoverflow.com/questions/28951503/how-can-i-create-a-function-with-a-variable-number-of-arguments/57454769#57454769", "title": "How can I create a function with a variable number of arguments?", "body": "<p>In the general case where your types may differ, you can use a macro:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! print_all {\n    ($($args:expr),*) =&gt; {{\n        $(\n            println!(\"{}\", $args);\n        )*\n    }}\n}\n\nfn main() {\n    print_all!(1, 2, \"Hello\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b5edad3d4718d9f05caaef062ddb2bb8\" rel=\"noreferrer\">Playground</a></p>\n\n<p>As another example, if you want to fold over the arguments, you can do something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! sum {\n    ($($args:expr),*) =&gt; {{\n        let result = 0;\n        $(\n            let result = result + $args;\n        )*\n        result\n    }}\n}\n\nfn main() {\n    assert_eq!(sum!(1, 2, 3), 6);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7e28f83f773033f7d57692a18f14c15d\" rel=\"noreferrer\">Playground</a></p>\n\n<p>See the <a href=\"https://doc.rust-lang.org/1.7.0/book/macros.html#defining-a-macro\" rel=\"noreferrer\">Rust book's simplified implementation of <code>vec![...]</code></a> for another example.</p>\n"}], "owner": {"reputation": 2189, "user_id": 1091424, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/W4Xu6.jpg?s=128&g=1", "display_name": "Tiago", "link": "https://stackoverflow.com/users/1091424/tiago"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 21583, "favorite_count": 7, "accepted_answer_id": 28951583, "answer_count": 3, "score": 54, "last_activity_date": 1565572997, "creation_date": 1425934262, "last_edit_date": 1425934609, "question_id": 28951503, "link": "https://stackoverflow.com/questions/28951503/how-can-i-create-a-function-with-a-variable-number-of-arguments", "title": "How can I create a function with a variable number of arguments?", "body": "<p>How can I create a function with a variable number of arguments in Rust?</p>\n\n<p>Like this Java code:</p>\n\n<pre><code>void foo(String... args) {\n    for (String arg : args) {\n        System.out.println(arg);\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425927904, "post_id": 28949524, "comment_id": 46153504, "body": "Note that the error message <i>includes</i> the problem line and even contains a span (<code>^~~~</code>) that <a href=\"http://is.gd/poWU1h\" rel=\"nofollow noreferrer\">helps show where the problem is</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425928021, "post_id": 28949706, "comment_id": 46153553, "body": "While <code>&#39;a</code> works, in this case you might as well pick <code>&#39;static</code>, since the string lives for the entire lifetime of the program."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425928116, "post_id": 28949706, "comment_id": 46153604, "body": "Personally, I&#39;d have just made it String instead of &amp;&#39;whatever str, but that&#39;s not the question asked. Curious what the difference would be between the two options."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425928345, "post_id": 28949706, "comment_id": 46153730, "body": "Between which two options? If you use String, then you&#39;d allocate memory each time you call <code>mercury</code>, which isn&#39;t really needed here. If you stay with a lifetime parameter on <code>mercury</code>, then the <i>caller</i> of <code>mercury</code> decides what lifetime <code>&#39;a</code> will be. This is fine, because the <code>&#39;static</code> lifetime will always outlive it. Marking the return lifetime as <code>&#39;static</code> just ends up being more flexible and useful for this case."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user1949917"}, "is_accepted": true, "score": 7, "last_activity_date": 1425927384, "creation_date": 1425927384, "answer_id": 28949706, "question_id": 28949524, "link": "https://stackoverflow.com/questions/28949524/wrong-number-of-lifetime-parameters-expected-1-found-0/28949706#28949706", "title": "wrong number of lifetime parameters: expected 1, found 0", "body": "<p>It's saying that your definition for the struct includes a type parameter and, therefore, so must your function that creates one.</p>\n\n<pre><code>struct Planet&lt;'a&gt;{\n    name : &amp;'a str,\n    radius_km: i32,\n    surface_area_km2: i64,\n    orbital_period_days: i32,\n    distance_from_sun: i64\n}\n\nfn mercury&lt;'a&gt;()-&gt;Planet&lt;'a&gt;{\n    Planet{\n        name:\"Mercudy\",\n        radius_km: 2_440,\n        surface_area_km2: 74_800_000,\n        orbital_period_days: 88,\n        distance_from_sun: 57_910_000\n    }\n}\n\nfn main(){\n    let planet = mercury();\n    println!(\"{}\", planet.name)\n}\n</code></pre>\n"}], "owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2862, "favorite_count": 1, "accepted_answer_id": 28949706, "answer_count": 1, "score": 6, "last_activity_date": 1447675514, "creation_date": 1425926738, "last_edit_date": 1447675514, "question_id": 28949524, "link": "https://stackoverflow.com/questions/28949524/wrong-number-of-lifetime-parameters-expected-1-found-0", "title": "wrong number of lifetime parameters: expected 1, found 0", "body": "<p>I'm having a really hard time fathoming pointers in Rust. This code won't compile because: <code>wrong number of lifetime parameters: expected 1, found 0 [E0107]</code>. What does that mean?</p>\n\n<pre><code>struct Planet&lt;'a&gt; {\n    name: &amp;'a str,\n    radius_km: i32,\n    surface_area_km2: i64,\n    orbital_period_days: i32,\n    distance_from_sun: i64\n}\n\nfn mercury() -&gt; Planet {\n    Planet {\n        name: \"Mercury\",\n        radius_km: 2_440,\n        surface_area_km2: 74_800_000,\n        orbital_period_days: 88,\n        distance_from_sun: 57_910_000\n    }\n}\n\nfn main() {\n    let mercury = Box::new(mercury());\n    println!(\"{}\",mercury.name)\n}\n</code></pre>\n"}, {"tags": ["rust", "ownership"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1425966361, "post_id": 28948716, "comment_id": 46166715, "body": "At present, drop flags are used, but I do not believe that this is specified as the only correct behaviour; there have been mutterings of changing it in one of a few directions."}], "answers": [{"comments": [{"owner": {"reputation": 1436, "user_id": 406309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/25f8ea5948e459788767ca9b08aee824?s=128&d=identicon&r=PG", "display_name": "Jim Blandy", "link": "https://stackoverflow.com/users/406309/jim-blandy"}, "edited": false, "score": 0, "creation_date": 1425970163, "post_id": 28957613, "comment_id": 46168097, "body": "Rust code is full of moves, at the source level, and my answer shows them appearing at the machine language level as well. However, I would expect that SSA-based code generators like LLVM would generally be excellent at eliminating them, when asked to optimize: the SSA should see right through all the intermediate homes for the value. I wonder if it&#39;s so..."}], "tags": [], "owner": {"reputation": 1436, "user_id": 406309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/25f8ea5948e459788767ca9b08aee824?s=128&d=identicon&r=PG", "display_name": "Jim Blandy", "link": "https://stackoverflow.com/users/406309/jim-blandy"}, "is_accepted": false, "score": 4, "last_activity_date": 1426002735, "last_edit_date": 1426002735, "creation_date": 1425969758, "answer_id": 28957613, "question_id": 28948716, "link": "https://stackoverflow.com/questions/28948716/ownership-and-conditionally-executed-code/28957613#28957613", "title": "Ownership and conditionally executed code", "body": "<p>In non-optimized code, Rust uses dynamic checks, but it's likely that they will be eliminated in optimized code.</p>\n\n<p>I looked at the behavior of the following code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct A {\n    s: String\n}\n\nimpl Drop for A {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping {:?}\", &amp;self);\n    }\n}\n\nfn flip_coin() -&gt; bool { false }\n\n#[allow(unused_variables)]\npub fn test() {\n    let x;\n    {\n        let y1 = A { s: \"y1\".to_string() };\n        let y2 = A { s: \"y2\".to_string() };\n        x = if flip_coin() { y1 } else { y2 };\n        println!(\"leaving inner scope\");\n    }\n    println!(\"leaving middle scope\");\n}\n</code></pre>\n\n<p>Consistent with your comment on the other answer, the call to <code>drop</code> for the String that was left alone occurs after the \"leaving inner scope\" println. That does seem consistent with one's expectation that the y's scopes extend to the end of their block.</p>\n\n<p>Looking at the assembly language, compiled without optimization, it seems that the <code>if</code> statement not only copies either y1 or y2 to x, but also zeroes out whichever variable provided the source for the move. Here's the test:</p>\n\n<pre><code>.LBB14_8:\n    movb    -437(%rbp), %al\n    andb    $1, %al\n    movb    %al, -177(%rbp)\n    testb   $1, -177(%rbp)\n    jne     .LBB14_11\n    jmp     .LBB14_12\n</code></pre>\n\n<p>Here's the 'then' branch, which moves the \"y1\" String to x. Note especially the call to <code>memset</code>, which is zeroing out y1 after the move:</p>\n\n<pre><code>.LBB14_11:\n    xorl    %esi, %esi\n    movl    $32, %eax\n    movl    %eax, %edx\n    leaq    -64(%rbp), %rcx\n    movq    -64(%rbp), %rdi\n    movq    %rdi, -176(%rbp)\n    movq    -56(%rbp), %rdi\n    movq    %rdi, -168(%rbp)\n    movq    -48(%rbp), %rdi\n    movq    %rdi, -160(%rbp)\n    movq    -40(%rbp), %rdi\n    movq    %rdi, -152(%rbp)\n    movq    %rcx, %rdi\n    callq   memset@PLT\n    jmp     .LBB14_13\n</code></pre>\n\n<p>(It looks horrible until you realize that all those <code>movq</code> instructions are just copying 32 bytes from <code>%rbp-64</code>, which is y1, to <code>%rbp-176</code>, which is x, or at least some temporary that'll eventually be x.) Note that it copies 32 bytes, not the 24 you'd expect for a Vec (one pointer plus two usizes). This is because Rust adds a hidden \"drop flag\" to the structure, indicating whether the value is live or not, following the three visible fields.</p>\n\n<p>And here's the 'else' branch, doing exactly the same for y2:</p>\n\n<pre><code>.LBB14_12:\n    xorl    %esi, %esi\n    movl    $32, %eax\n    movl    %eax, %edx\n    leaq    -128(%rbp), %rcx\n    movq    -128(%rbp), %rdi\n    movq    %rdi, -176(%rbp)\n    movq    -120(%rbp), %rdi\n    movq    %rdi, -168(%rbp)\n    movq    -112(%rbp), %rdi\n    movq    %rdi, -160(%rbp)\n    movq    -104(%rbp), %rdi\n    movq    %rdi, -152(%rbp)\n    movq    %rcx, %rdi\n    callq   memset@PLT\n.LBB14_13:\n</code></pre>\n\n<p>This is followed by the code for the \"leaving inner scope\" println, which is painful to behold, so I won't include it here.</p>\n\n<p>We then call a \"glue_drop\" routine on both y1 and y2. This seems to be a compiler-generated function that takes an A, checks its String's Vec's drop flag, and if that's set, invokes A's drop routine, followed by the drop routine for the String it contains.</p>\n\n<p>If I'm reading this right, it's pretty clever: even though it's the A that has the <code>drop</code> method we need to call first, Rust knows that it can use ... <em>inhale</em> ... the drop flag of the Vec inside the String inside the A as the flag that indicates whether the A needs to be dropped.</p>\n\n<p>Now, when compiled with optimization, inlining and flow analysis should recognize situations where the drop definitely will happen (and omit the run-time check), or definitely will not happen (and omit the drop altogether). And I believe I have heard of optimizations that duplicate the code following a then/else clause into both paths, and then specialize them. This would eliminate all run-time checks from this code (but duplicate the println! call).</p>\n\n<p>As the original poster points out, there's an <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0320-nonzeroing-dynamic-drop.md\" rel=\"nofollow\">RFC</a> proposal to move drop flags out of the values and instead associate them with the stack slots holding the values.</p>\n\n<p>So it's plausible that the optimized code might not have any run-time checks at all. I can't bring myself to read the optimized code, though. Why not give it a try yourself?</p>\n"}, {"comments": [{"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 1, "creation_date": 1504231402, "post_id": 28967550, "comment_id": 78944709, "body": "Drop flags on stack are now implemented in Rust."}], "tags": [], "owner": {"reputation": 131, "user_id": 4650923, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db2551fe9482d1da22b42dcfbb9e40d7?s=128&d=identicon&r=PG&f=1", "display_name": "ESiQ52323", "link": "https://stackoverflow.com/users/4650923/esiq52323"}, "is_accepted": true, "score": 7, "last_activity_date": 1426005945, "last_edit_date": 1426005945, "creation_date": 1426000901, "answer_id": 28967550, "question_id": 28948716, "link": "https://stackoverflow.com/questions/28948716/ownership-and-conditionally-executed-code/28967550#28967550", "title": "Ownership and conditionally executed code", "body": "<p>After some research I found out that Rust <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0320-nonzeroing-dynamic-drop.md#how-dynamic-drop-semantics-works\" rel=\"nofollow\">currently</a> adds a flag to every type that implements the <code>Drop</code> trait so that it knows whether the value has been dropped or not, which of course incurs a run-time cost. There have been proposals to avoid that cost by using <a href=\"https://github.com/rust-lang/rfcs/pull/210\" rel=\"nofollow\">static drops</a> or <a href=\"https://github.com/rust-lang/rfcs/pull/239\" rel=\"nofollow\">eager drops</a> but those solutions had problems with their semantics, namely that drops could occur at places that you wouldn't expect (e.g. in the middle of a code block), especially if you are used to C++ style RAII. There is now consensus that the best compromise is a <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0320-nonzeroing-dynamic-drop.md\" rel=\"nofollow\">different solution</a> where the flags are removed from the types. Instead flags will be added to the stack, but only when the compiler cannot figure out when to do the <code>drop</code> statically (while having the same semantics as C++) which specifically happens when there are conditional moves like the example given in this question. For all other cases there will be no run-time cost. It appears though, that this proposal will not be implemented in time for 1.0.</p>\n\n<p>Note that C++ has similar run-time costs associated with <code>unique_ptr</code>. When the new <code>Drop</code> is implemented, Rust will be strictly better than C++ in that respect.</p>\n\n<p>I hope this is a correct summary of the situation. Credit goes to u/dyoll1013, u/pcwalton, u/!!kibwen, u/Kimundi on reddit, and Chris Morgan here on SO.</p>\n"}], "owner": {"reputation": 131, "user_id": 4650923, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db2551fe9482d1da22b42dcfbb9e40d7?s=128&d=identicon&r=PG&f=1", "display_name": "ESiQ52323", "link": "https://stackoverflow.com/users/4650923/esiq52323"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 330, "favorite_count": 1, "accepted_answer_id": 28967550, "answer_count": 2, "score": 6, "last_activity_date": 1426005945, "creation_date": 1425923890, "question_id": 28948716, "link": "https://stackoverflow.com/questions/28948716/ownership-and-conditionally-executed-code", "title": "Ownership and conditionally executed code", "body": "<p>I read the rust <a href=\"http://doc.rust-lang.org/book/\" rel=\"noreferrer\">book</a> over the weekend and I have a question about the concept of ownership. The impression I got is that ownership is used to statically determine where a resource can be deallocated. Now, suppose that we have the following:</p>\n\n<pre><code>{                                                 // 1\n    let x;                                        // 2\n    {                                             // 3\n        let y = Box::new(1);                      // 4\n        x = if flip_coin() {y} else {Box::new(2)} // 5\n    }                                             // 6\n}                                                 // 7\n</code></pre>\n\n<p>I was surprised to see that the compiler accepts this program. By inserting <code>println!</code>s and implementing the <code>Drop</code> trait for the boxed value, I saw that the box containing the value 1 will be deallocated at either line 6 or 7 depending on the return value of <code>flip_coin</code>. How does the compiler know when to deallocate that box? Is this decided at run-time using some run-time information (like a flag to indicate if the box is still in use)?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425944531, "post_id": 28953266, "comment_id": 46161099, "body": "One thing I&#39;m still unclear on after reading this - is there a way to make the OP&#39;s code work?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425944874, "post_id": 28953266, "comment_id": 46161211, "body": "Err, yeah, forgot to actually answer the question. :)"}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1425977393, "post_id": 28953266, "comment_id": 46171221, "body": "Thank you, but what I don\u2019t understand is why it is not possible to transform &amp;Self to &amp;Caller. Shouldn\u2019t that be just an identity transform as &amp;Self is already a &amp;Caller? Edit: The answer is probably that &amp;Self is not &amp;Caller but might be something else but sounds like it should be fixable in rustc."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1425982785, "post_id": 28953266, "comment_id": 46174298, "body": "If <code>Self</code> isn&#39;t <code>Sized</code>, it could be <code>SomeOtherTrait</code>, or <code>[SomeType]</code>, i.e. <code>&amp;Self</code> is some &quot;random&quot; fat pointer that isn&#39;t <code>&amp;Caller</code>. We would need a bound like <code>Self: SizedOrCaller</code> to ensure that either <code>&amp;Self</code> is a thin pointer or <code>&amp;Self</code> is <code>&amp;Caller</code>."}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1426338548, "post_id": 28953266, "comment_id": 46336754, "body": "Thanks. I actually found a nicer solution of my problem. I now require the implementation of <code>borrow_mut(&amp;mut self) -&gt; &amp;mut Caller</code>. Unfortunately it is not possible to require <code>BorrowMut&lt;Caller&gt;</code> as a trait bound on <code>Caller</code> since that creates some cycle."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 3, "last_activity_date": 1425944862, "last_edit_date": 1425944862, "creation_date": 1425941773, "answer_id": 28953266, "question_id": 28940727, "link": "https://stackoverflow.com/questions/28940727/using-callbacks-on-trait-objects/28953266#28953266", "title": "Using callbacks on trait objects", "body": "<p>The argument <code>call</code> in <code>fn call</code> takes a trait object <code>&amp;Caller</code>, so calling it requires coercing the <code>self</code> reference (of type <code>&amp;Self</code>) to a <code>&amp;Caller</code> trait object. The coercion is only possible when <code>&amp;Self</code> is a thin pointer rather than a fat pointer like a trait object or a <code>&amp;[T]</code> slice. <code>&amp;Self</code> is a thin pointer exactly when <code>Self: Sized</code>. The compiler defaults to <code>Self</code> in traits not being <code>Sized</code>, and so the extra restriction is required. The <a href=\"http://huonw.github.io/blog/2015/01/the-sized-trait/\" rel=\"nofollow\"><code>Sized</code> trait</a> represents that the type has a size that is known at compile time, there is no need to store extra info (next to the pointer, making it \"fat\") to compute it at runtime.</p>\n\n<p>Unfortunately, this leaves a hole: AFAIK, it's actually not possible to have such a method be a default method and still be able to call it on trait objects, since a trait object <code>&amp;Caller</code> has <code>Self = Caller</code> which isn't <code>Sized</code>. However, it should work if the method is implemented manually for each type:</p>\n\n<pre><code>trait Caller {\n    fn call(&amp;self, call: fn(&amp;Caller));\n}\n\nstruct Type;\nimpl Caller for Type {\n    fn call(&amp;self, call: fn(&amp;Caller)) {\n        call(self)\n    }\n}\n\nfn callme(_: &amp;Caller) {}\n\nfn main() {\n    let caller: Box&lt;Caller&gt; = Box::new(Type);\n    caller.call(callme);\n}\n</code></pre>\n\n<p>The <code>call</code> method declaration in the trait no longer needs the <code>where Self: Sized</code> since it isn't trying to do the trait object coercion itself, and the concrete implementations have much more control over how the <code>&amp;Caller</code> trait object is obtained. For <code>Sized</code> types, it works directly, like the original <code>where Self: Sized</code> code.</p>\n"}], "owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 594, "favorite_count": 0, "accepted_answer_id": 28953266, "answer_count": 1, "score": 5, "last_activity_date": 1426338909, "creation_date": 1425899966, "last_edit_date": 1426338909, "question_id": 28940727, "link": "https://stackoverflow.com/questions/28940727/using-callbacks-on-trait-objects", "title": "Using callbacks on trait objects", "body": "<p>I\u2019m trying to use a callback function on a trait object. I reduced my problem to the following code (<a href=\"http://is.gd/qJGub6\" rel=\"nofollow\">playpen</a>):</p>\n\n<pre><code>trait Caller {\n    fn call(&amp;self, call: fn(&amp;Caller)) where Self: Sized {\n        call(self)\n    }\n}\n\nstruct Type;\nimpl Caller for Type {}\n\nfn callme(_: &amp;Caller) {}\n\nfn main() {\n    let caller: Box&lt;Caller&gt; = Box::new(Type);\n    caller.call(callme); // does not work\n    //callme(&amp;*caller);  // works\n}\n</code></pre>\n\n<p>which results in </p>\n\n<pre><code>&lt;anon&gt;:14:12: 14:24 error: the trait `core::marker::Sized` is not implemented for the type `Caller` [E0277]\n&lt;anon&gt;:14     caller.call(callme); // does not work\n                     ^~~~~~~~~~~~\n</code></pre>\n\n<p>Adding a <code>Sized</code> bound to <code>Caller</code> results in:</p>\n\n<pre><code>&lt;anon&gt;:3:14: 3:18 error: cannot convert to a trait object because trait `Caller` is not object-safe [E0038]\n</code></pre>\n\n<p>I really don\u2019t understand why I need the <code>Sized</code> bound on the trait. Funnily it works if I use the callback directly. How do I get this to work?</p>\n\n<p>Edit: Thanks to the answer I now came up with a nice solution</p>\n\n<pre><code>trait Caller {\n    fn borrow(&amp;self) -&gt; &amp;Caller;\n    fn call(&amp;self, call: fn(&amp;Caller)) {\n        call(self.borrow())\n    }\n}\n\nstruct Type;\nimpl Caller for Type {\n    fn borrow(&amp;self) -&gt; &amp;Caller { self }\n}\n\nfn callme(_: &amp;Caller) {}\n\nfn main() {\n    let caller: Box&lt;Caller&gt; = Box::new(Type);\n    caller.call(callme);\n}\n</code></pre>\n"}, {"tags": ["shell", "parsing", "rust", "parser-generator", "peg"], "comments": [{"owner": {"reputation": 199706, "user_id": 1566221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/ce3ea4ffd1023d4382f397312352726d?s=128&d=identicon&r=PG", "display_name": "rici", "link": "https://stackoverflow.com/users/1566221/rici"}, "edited": false, "score": 0, "creation_date": 1425872258, "post_id": 28934609, "comment_id": 46125394, "body": "FWIW, bash uses a fairly straightforward bison-generated parser, combined with an extremely complicated handwritten lexer. I have no idea how well PEG would work, but if you give it a try, let us know."}, {"owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "edited": false, "score": 5, "creation_date": 1425876148, "post_id": 28934609, "comment_id": 46126163, "body": "Three reasons: it is GPL while my shell is under MIT/Apache 2, it is in C while my shell is in Rust, and I would learn nothing from it."}, {"owner": {"reputation": 8099, "user_id": 545637, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/51dcf0a6e20c2734423118e7eee9e45d?s=128&d=identicon&r=PG", "display_name": "Apalala", "link": "https://stackoverflow.com/users/545637/apalala"}, "edited": false, "score": 0, "creation_date": 1425919202, "post_id": 28934609, "comment_id": 46148449, "body": "Yes. PEG parsers do scanning. The grammar language is more powerful than regular expressions, and as compact and convenient. I&#39;ve translated several ANTLR grammars to Grako (PEG), and the lexical part has translated easily. PEG will be less efficient than a state-machine based lexer, though."}, {"owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "reply_to_user": {"reputation": 8099, "user_id": 545637, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/51dcf0a6e20c2734423118e7eee9e45d?s=128&d=identicon&r=PG", "display_name": "Apalala", "link": "https://stackoverflow.com/users/545637/apalala"}, "edited": false, "score": 0, "creation_date": 1425920399, "post_id": 28934609, "comment_id": 46149282, "body": "@Apalala I do not just mean for lexing; I mean for parsing too."}, {"owner": {"reputation": 71199, "user_id": 1301972, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/T5G7N.jpg?s=128&g=1", "display_name": "Todd A. Jacobs", "link": "https://stackoverflow.com/users/1301972/todd-a-jacobs"}, "edited": false, "score": 0, "creation_date": 1443418001, "post_id": 28934609, "comment_id": 53468571, "body": "This question is probably a better fit for Programmers Stack Exchange than Stack Overflow. As an SO question, it seems too broad and too much of an opinion poll. YMMV."}], "answers": [{"comments": [{"owner": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "edited": false, "score": 0, "creation_date": 1446529841, "post_id": 33491714, "comment_id": 54768772, "body": "I&#39;m a little off my turf, but I read the word &quot;alias&quot; as &quot;parameterless macro&quot;.  Who says a macro expansion has to form a phrase in the grammar you provide?   If it does not, you can&#39;t just a &quot;tree replacement&quot;.  (Frankly, these are easily handled by simply expanding them when the lexer encounters them)."}, {"owner": {"reputation": 2278, "user_id": 1772828, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b7831a9963c2207377c46468f6e797a?s=128&d=identicon&r=PG", "display_name": "cliffordheath", "link": "https://stackoverflow.com/users/1772828/cliffordheath"}, "reply_to_user": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "edited": false, "score": 0, "creation_date": 1446606706, "post_id": 33491714, "comment_id": 54809284, "body": "@Ira: Traditional shell aliases are basically textual substitutions - any following text on the invocation is parsed as part of the expansion. So while what you say may be true of aliases in other languages, or in more advanced shells, a textual replacement will almost always be correct. Further: the AST is not a parse tree, as I already said. You do whatever replacement creates the right alias semantics."}, {"owner": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "edited": false, "score": 0, "creation_date": 1446609082, "post_id": 33491714, "comment_id": 54809837, "body": "&quot;Almost always?&quot;   given the string    &quot; if  (pqr abc&quot; with pqr being an alias of &quot;a&gt;b)&quot;,  how can you parse the string and then substitute the alias later?"}, {"owner": {"reputation": 2278, "user_id": 1772828, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b7831a9963c2207377c46468f6e797a?s=128&d=identicon&r=PG", "display_name": "cliffordheath", "link": "https://stackoverflow.com/users/1772828/cliffordheath"}, "reply_to_user": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "edited": false, "score": 0, "creation_date": 1446609471, "post_id": 33491714, "comment_id": 54809932, "body": "You can&#39;t, and the shells don&#39;t. By almost always, I mean &quot;in most contexts where an alias is legal&quot;. Your example is not legal in any shell I&#39;ve used. I said &quot;most&quot; because I&#39;m not sure; the OP should check. In any case, I&#39;m done arguing about it, because this has nothing to do with the question as asked."}, {"owner": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "edited": false, "score": 0, "creation_date": 1446613854, "post_id": 33491714, "comment_id": 54811063, "body": "It has everything to do with your answer.     Unless the shell language insists that &quot;aliases&quot; can only occur where the grammar for the shell language allows only a single terminal or nonterminal, your solution simply doesn&#39;t work.   I&#39;ve only seen one langauge where that was true (because I designed the language that way on purpose).  My example is essentially legal in every other macro language I&#39;ve encountered."}, {"owner": {"reputation": 2278, "user_id": 1772828, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b7831a9963c2207377c46468f6e797a?s=128&d=identicon&r=PG", "display_name": "cliffordheath", "link": "https://stackoverflow.com/users/1772828/cliffordheath"}, "reply_to_user": {"reputation": 88411, "user_id": 120163, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/OPDmg.jpg?s=128&g=1", "display_name": "Ira Baxter", "link": "https://stackoverflow.com/users/120163/ira-baxter"}, "edited": false, "score": 1, "creation_date": 1446615234, "post_id": 33491714, "comment_id": 54811461, "body": "A shell alias is not a macro, parameterless or otherwise, so your argument doesn&#39;t apply. Shell aliases are only detected and expanded where a command is valid. However, I may have gone too far in suggesting a simple AST substitution, so I generalised my answer above. Thanks for pointing out the possible misunderstanding."}], "tags": [], "owner": {"reputation": 2278, "user_id": 1772828, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0b7831a9963c2207377c46468f6e797a?s=128&d=identicon&r=PG", "display_name": "cliffordheath", "link": "https://stackoverflow.com/users/1772828/cliffordheath"}, "is_accepted": true, "score": 4, "last_activity_date": 1446614911, "last_edit_date": 1446614911, "creation_date": 1446527236, "answer_id": 33491714, "question_id": 28934609, "link": "https://stackoverflow.com/questions/28934609/are-parsing-expression-grammars-suited-to-parsing-the-shell-command-language/33491714#33491714", "title": "Are parsing expression grammars suited to parsing the shell command language?", "body": "<p>Yes, a PEG can be used, and none of the issues you note should be a problem.\nIn particular:</p>\n\n<p>1) parsing line by line: most PEG tools will not have any built-in white-space skipping. All white space including newlines must be explicitly handled by you, which means you can handle newline any way you like.</p>\n\n<p>2) You should not use the parse tree from PEG as your AST. Instead you should descend the parse tree and build an AST. For aliases then, after the parse has completed and you're building your AST, you can detect the alias and insert the appropriate expansion for the alias instead.</p>\n\n<p>3) Reserved words are not reserved unless you reserve them. That is, if you have a context where either a reserved word or another alphanumeric symbol can occur, you must first check for the reserved words explicitly, then the arbitrary alphanumeric symbol, because once the PEG decides it has a match, that will not back-track. Anywhere a reserved word is not permitted, simply don't check for it, and your generalised alphanumeric symbol rule will succeed instead.</p>\n"}], "owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 659, "favorite_count": 0, "accepted_answer_id": 33491714, "answer_count": 1, "score": 6, "last_activity_date": 1446614911, "creation_date": 1425869936, "last_edit_date": 1425870872, "question_id": 28934609, "link": "https://stackoverflow.com/questions/28934609/are-parsing-expression-grammars-suited-to-parsing-the-shell-command-language", "title": "Are parsing expression grammars suited to parsing the shell command language?", "body": "<p>The POSIX shell command language is not easy to parse, largely because of tight coupling between lexing and parsing.</p>\n\n<p>However, parsing expression grammars (PEGs) are often scannerless. By combining lexing and parsing, it seems that I could avoid these problems. The language that I am using (Rust) has a well-maintained PEG library. However, I know of three difficulties that could make it impractical to use this library:</p>\n\n<ul>\n<li>Shells must be able to parse line by line, not reading characters past the end of the line.</li>\n<li>Aliases are purely lexical, and can cause a token to be replaced by any sequence of other tokens in certain situations</li>\n<li>Shell reserved words are only recognized in certain situations</li>\n</ul>\n\n<p>Is a PEG suited to parsing the shell command language given these requirements, or is a hand-written recursive-descent parser more suitable?</p>\n"}, {"tags": ["collections", "types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1425861985, "post_id": 28933431, "comment_id": 46123141, "body": "Hi, thanks for your suggestions. You&#39;re correct that vectors are homogenous in Rust, but it&#39;s possible to convert the elements to the same type (such as a Box trait object) to make them all fit.  I considered creating a new <code>enum</code> with every possible checker in it, but I plan to have dozens of these checkers with many lines of code each, and the code would quickly get repetitive and unwieldy. Basically, I&#39;d like a way to use trait objects in order to write all this code for me!"}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1425867694, "post_id": 28933431, "comment_id": 46124377, "body": "I don&#39;t believe, that there is a way to convert all the elements to the same type in your case. Just imagine if you are a compiler, then how much stack space would you allocate for <code>check.check_number(number)</code> result in the loop? It definitely shoud be something of constant size, so we came again to either union type (enum), either pointer, like your <code>Option&lt;Box&lt;Check&gt;&gt;</code> version. So maybe you should consider to get rid of <code>PartialEq</code> impl to make it work."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1425859629, "creation_date": 1425859629, "answer_id": 28933431, "question_id": 28932450, "link": "https://stackoverflow.com/questions/28932450/how-can-i-have-a-collection-of-objects-that-differ-by-their-associated-type/28933431#28933431", "title": "How can I have a collection of objects that differ by their associated type?", "body": "<p>I'd suggest you some refactoring.</p>\n\n<p>First, I'm pretty sure, that vectors should be homogeneous in Rust, so there is no way to supply elements of different types for them. Also you cannot downcast traits to reduce them to a common base trait (as I remember, there was a question about it on SO).</p>\n\n<p>So I'd use algebraic type with explicit match for this task, like this: </p>\n\n<pre><code>enum Checker {\n    Even(EvenCheck),\n    Negative(NegativeCheck),\n}\n\nlet checks = vec![\n    Checker::Even(EvenCheck),\n    Checker::Negative(NegativeCheck),\n];\n</code></pre>\n\n<p>As for error handling, consider use <a href=\"http://doc.rust-lang.org/std/error/trait.FromError.html\" rel=\"nofollow\">FromError</a> framework, so you will able to involve <a href=\"http://doc.rust-lang.org/std/macro.try!.html\" rel=\"nofollow\">try!</a> macro in your code and to convert error types from one to another. </p>\n"}, {"tags": [], "owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "is_accepted": true, "score": 1, "last_activity_date": 1425871709, "creation_date": 1425871709, "answer_id": 28934830, "question_id": 28932450, "link": "https://stackoverflow.com/questions/28932450/how-can-i-have-a-collection-of-objects-that-differ-by-their-associated-type/28934830#28934830", "title": "How can I have a collection of objects that differ by their associated type?", "body": "<p>I eventually found a way to do it that I'm happy with. Instead of having a vector of <code>Box&lt;Check&lt;???&gt;&gt;</code> objects, have a vector of closures that all have the same type, abstracting away the very functions that get called:</p>\n\n<pre><code>fn main() {\n    type Probe = Box&lt;Fn(i32) -&gt; Option&lt;Box&lt;Error&gt;&gt;&gt;;\n\n    let numbers: Vec&lt;i32&gt; = vec![ 1, -4, 64, -25 ];\n    let checks = vec![\n        Box::new(|num| EvenCheck.check_number(num).map(|u| Box::new(u) as Box&lt;Error&gt;)) as Probe,\n        Box::new(|num| NegativeCheck.check_number(num).map(|u| Box::new(u) as Box&lt;Error&gt;)) as Probe,\n    ];\n\n    for number in numbers {\n        for check in checks.iter() {\n            if let Some(error) = check(number) {\n                println!(\"{}\", error.description());\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Not only does this allow for a vector of <code>Box&lt;Error&gt;</code> objects to be returned, it allows the <code>Check</code> objects to provide their own Error associated type which doesn't need to implement <code>PartialEq</code>. The multiple <code>as</code>es look a little messy, but on the whole it's not <em>that</em> bad.</p>\n"}, {"comments": [{"owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1527327847, "post_id": 35510665, "comment_id": 88094024, "body": "I ended up coming back to this problem three years later, and your answer proved extremely useful! Thanks."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 6, "last_activity_date": 1548722437, "last_edit_date": 1548722437, "creation_date": 1455901151, "answer_id": 35510665, "question_id": 28932450, "link": "https://stackoverflow.com/questions/28932450/how-can-i-have-a-collection-of-objects-that-differ-by-their-associated-type/35510665#35510665", "title": "How can I have a collection of objects that differ by their associated type?", "body": "<p>When you write an <code>impl Check</code> and specialize your <code>type Error</code> with a concrete type, you are ending up with different types. </p>\n\n<p>In other words, <code>Check&lt;Error = NegativeError&gt;</code> and <code>Check&lt;Error = EvenError&gt;</code> are statically different types. Although you might expect <code>Check&lt;Error&gt;</code> to describe both, note that in Rust <code>NegativeError</code> and <code>EvenError</code> are not <em>sub-types</em> of <code>Error</code>. They are guaranteed to implement all methods defined by the <code>Error</code> trait, but then calls to those methods will be statically dispatched to physically different functions that the compiler creates (each will have a version for <code>NegativeError</code>, one for <code>EvenError</code>).</p>\n\n<p>Therefore, you can't put them in the same <code>Vec</code>, even boxed (as you discovered). It's not so much a matter of knowing how much space to allocate, it's that <code>Vec</code> requires its types to be homogeneous (you can't have a <code>vec![1u8, 'a']</code> either, although a <code>char</code> is representable as a <code>u8</code> in memory).</p>\n\n<p>Rust's way to \"erase\" some of the type information and gain the dynamic dispatch part of subtyping is, as you discovered, trait objects.</p>\n\n<p>If you want to give another try to the trait object approach, you might find it more appealing with a few tweaks...</p>\n\n<ol>\n<li><p>You might find it much easier if you used the <code>Error</code> trait in <a href=\"http://doc.rust-lang.org/std/error/index.html\" rel=\"nofollow noreferrer\"><code>std::error</code></a> instead of your own version of it.</p>\n\n<p>You may need to <code>impl Display</code> to create a description with a dynamically built <code>String</code>, like so: </p>\n\n<pre><code>impl fmt::Display for EvenError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{} is even\", self.number)\n    }\n}\n\nimpl Error for EvenError {\n    fn description(&amp;self) -&gt; &amp;str { \"even error\" }\n}\n</code></pre></li>\n<li><p>Now you can drop the associated type and have <code>Check</code> return a trait object:</p>\n\n<pre><code>trait Check  {\n    fn check_number(&amp;self, number: i32) -&gt; Option&lt;Box&lt;Error&gt;&gt;;\n}\n</code></pre>\n\n<p>your <code>Vec</code> now has an expressible type:</p>\n\n<pre><code>let mut checks: Vec&lt;Box&lt;Check&gt;&gt; = vec![\n    Box::new(EvenCheck) ,\n    Box::new(NegativeCheck) ,\n];\n</code></pre></li>\n<li><p>The best part of using <code>std::error::Error</code>...</p>\n\n<p>is that now you don't need to use <code>PartialEq</code> to understand what error was thrown. <code>Error</code> has various types of downcasts and type checks if you do need to retrieve the concrete <code>Error</code> type out of your trait object.</p>\n\n<pre><code>for number in numbers {\n    for check in &amp;mut checks {\n        if let Some(error) = check.check_number(number) {\n            println!(\"{}\", error);\n\n            if let Some(s_err)= error.downcast_ref::&lt;EvenError&gt;() {\n                println!(\"custom logic for EvenErr: {} - {}\", s_err.number, s_err)                    \n            }\n        }\n    }\n}\n</code></pre></li>\n</ol>\n\n<p><a href=\"https://play.rust-lang.org/?gist=92c48becd46daf6af647&amp;version=stable\" rel=\"nofollow noreferrer\">full example on the playground</a></p>\n"}], "owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3674, "favorite_count": 0, "accepted_answer_id": 28934830, "answer_count": 3, "score": 13, "last_activity_date": 1553711872, "creation_date": 1425852195, "last_edit_date": 1553711872, "question_id": 28932450, "link": "https://stackoverflow.com/questions/28932450/how-can-i-have-a-collection-of-objects-that-differ-by-their-associated-type", "title": "How can I have a collection of objects that differ by their associated type?", "body": "<p>I have a program that involves examining a complex data structure to see if it has any defects. (It's quite complicated, so I'm posting example code.) All of the checks are unrelated to each other, and will all have their own modules and tests.</p>\n\n<p>More importantly, each check has its own error type that contains different information about how the check failed for each number. I'm doing it this way instead of just returning an error string so I can test the errors (it's why <code>Error</code> relies on <code>PartialEq</code>).</p>\n\n<h2>My Code So Far</h2>\n\n<p>I have traits for <code>Check</code> and <code>Error</code>:</p>\n\n<pre><code>trait Check {\n    type Error;\n    fn check_number(&amp;self, number: i32) -&gt; Option&lt;Self::Error&gt;;\n}\n\ntrait Error: std::fmt::Debug + PartialEq {\n    fn description(&amp;self) -&gt; String;\n}\n</code></pre>\n\n<p>And two example checks, with their error structs. In this example, I want to show errors if a number is negative or even:</p>\n\n<pre><code>\n#[derive(PartialEq, Debug)]\nstruct EvenError {\n    number: i32,\n}\nstruct EvenCheck;\n\nimpl Check for EvenCheck {\n    type Error = EvenError;\n\n    fn check_number(&amp;self, number: i32) -&gt; Option&lt;EvenError&gt; {\n        if number &lt; 0 {\n            Some(EvenError { number: number })\n        } else {\n            None\n        }\n    }\n}\n\nimpl Error for EvenError {\n    fn description(&amp;self) -&gt; String {\n        format!(\"{} is even\", self.number)\n    }\n}\n\n#[derive(PartialEq, Debug)]\nstruct NegativeError {\n    number: i32,\n}\nstruct NegativeCheck;\n\nimpl Check for NegativeCheck {\n    type Error = NegativeError;\n\n    fn check_number(&amp;self, number: i32) -&gt; Option&lt;NegativeError&gt; {\n        if number &lt; 0 {\n            Some(NegativeError { number: number })\n        } else {\n            None\n        }\n    }\n}\n\nimpl Error for NegativeError {\n    fn description(&amp;self) -&gt; String {\n        format!(\"{} is negative\", self.number)\n    }\n}\n</code></pre>\n\n<p>I know that in this example, the two structs look identical, but in my code, there are many different structs, so I can't merge them. Lastly, an example <code>main</code> function, to illustrate the kind of thing I want to do:</p>\n\n<pre><code>fn main() {\n    let numbers = vec![1, -4, 64, -25];\n    let checks = vec![\n        Box::new(EvenCheck) as Box&lt;Check&lt;Error = Error&gt;&gt;,\n        Box::new(NegativeCheck) as Box&lt;Check&lt;Error = Error&gt;&gt;,\n    ]; // What should I put for this Vec's type?\n\n    for number in numbers {\n        for check in checks {\n            if let Some(error) = check.check_number(number) {\n                println!(\"{:?} - {}\", error, error.description())\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>You can see the code in <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1804e0f83d0183de071b05cf040d7a2a\" rel=\"nofollow noreferrer\">the Rust playground</a>.</p>\n\n<h2>Solutions I've Tried</h2>\n\n<p>The closest thing I've come to a solution is to remove the associated types and have the checks return <code>Option&lt;Box&lt;Error&gt;&gt;</code>. However, I get this error instead:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `Error` cannot be made into an object\n --&gt; src/main.rs:4:55\n  |\n4 |     fn check_number(&amp;self, number: i32) -&gt; Option&lt;Box&lt;Error&gt;&gt;;\n  |                                                       ^^^^^ the trait `Error` cannot be made into an object\n  |\n  = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n</code></pre>\n\n<p>because of the <code>PartialEq</code> in the <code>Error</code> trait. Rust has been great to me thus far, and I really hope I'm able to bend the type system into supporting something like this!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425847468, "post_id": 28931515, "comment_id": 46119008, "body": "Is there a reason to not just make this a constructor?"}, {"owner": {"reputation": 920, "user_id": 217275, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/f01054ce44a50811a5fc96f634e8a0d2?s=128&d=identicon&r=PG", "display_name": "Piotr Zolnierek", "link": "https://stackoverflow.com/users/217275/piotr-zolnierek"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425849061, "post_id": 28931515, "comment_id": 46119541, "body": "Yes, I use it in a parser, where I only hold references in order not do any copies"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1425863292, "post_id": 28931515, "comment_id": 46123457, "body": "This is the same issue as I dealt with at <a href=\"http://stackoverflow.com/a/24575591/497043\">stackoverflow.com/a/24575591/497043</a>; it&#39;s not possible to do what you want."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1504096964, "last_edit_date": 1504096964, "creation_date": 1425849484, "answer_id": 28931999, "question_id": 28931515, "link": "https://stackoverflow.com/questions/28931515/how-do-i-implement-fromstr-with-a-concrete-lifetime/28931999#28931999", "title": "How do I implement FromStr with a concrete lifetime?", "body": "<p>I don't believe that you can implement <code>FromStr</code> in this case. </p>\n\n<pre><code>fn from_str(s: &amp;str) -&gt; Result&lt;Self, &lt;Self as FromStr&gt;::Err&gt;;\n</code></pre>\n\n<p>There's nothing in the trait definition that ties the lifetime of the input to the lifetime of the output.</p>\n\n<p><strong>Not a direct answer</strong>, but I'd just suggest making a constructor that accepts the reference:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    bar: &amp;'a str\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn new(s: &amp;str) -&gt; Foo {\n        Foo { bar: s }\n    }\n}\n\npub fn main() {\n    let foo = Foo::new(\"foobar\"); \n}\n</code></pre>\n\n<p>This has the side benefit of there not being any failure modes - no need to <code>unwrap</code>.</p>\n\n<p>You could also just implement <code>From</code>:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    bar: &amp;'a str,\n}\n\nimpl&lt;'a&gt; From&lt;&amp;'a str&gt; for Foo&lt;'a&gt; {\n    fn from(s: &amp;'a str) -&gt; Foo&lt;'a&gt; {\n        Foo { bar: s }\n    }\n}\n\npub fn main() {\n    let foo: Foo = \"foobar\".into();\n}\n</code></pre>\n"}], "owner": {"reputation": 920, "user_id": 217275, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/f01054ce44a50811a5fc96f634e8a0d2?s=128&d=identicon&r=PG", "display_name": "Piotr Zolnierek", "link": "https://stackoverflow.com/users/217275/piotr-zolnierek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1930, "favorite_count": 0, "accepted_answer_id": 28931999, "answer_count": 1, "score": 7, "last_activity_date": 1504096964, "creation_date": 1425846493, "last_edit_date": 1485440863, "question_id": 28931515, "link": "https://stackoverflow.com/questions/28931515/how-do-i-implement-fromstr-with-a-concrete-lifetime", "title": "How do I implement FromStr with a concrete lifetime?", "body": "<p>I want to implement <code>FromStr</code> for a struct with a lifetime parameter:</p>\n\n<pre><code>use std::str::FromStr;\n\nstruct Foo&lt;'a&gt; {\n    bar: &amp;'a str,\n}\n\nimpl&lt;'a&gt; FromStr for Foo&lt;'a&gt; {\n    type Err = ();\n    fn from_str(s: &amp;str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n\n        Ok(Foo { bar: s })\n    }\n}\n\npub fn main() {\n    let foo: Foo = \"foobar\".parse().unwrap();\n}\n</code></pre>\n\n<p>However, the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:11:12\n   |\n11 |         Ok(Foo { bar: s })\n   |            ^^^\n   |\nhelp: consider using an explicit lifetime parameter as shown: fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt;\n  --&gt; src/main.rs:9:5\n   |\n9  |     fn from_str(s: &amp;str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n   |     ^\n</code></pre>\n\n<p>Changing the impl to</p>\n\n<pre><code>impl&lt;'a&gt; FromStr for Foo&lt;'a&gt; {\n    type Err = ();\n    fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n        Ok(Foo { bar: s })\n    }\n}\n</code></pre>\n\n<p>gives this error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: method not compatible with trait\n  --&gt; src/main.rs:9:5\n   |\n9  |     fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n   |     ^ lifetime mismatch\n   |\n   = note: expected type `fn(&amp;str) -&gt; std::result::Result&lt;Foo&lt;'a&gt;, ()&gt;`\n   = note:    found type `fn(&amp;'a str) -&gt; std::result::Result&lt;Foo&lt;'a&gt;, ()&gt;`\nnote: the anonymous lifetime #1 defined on the block at 9:51...\n  --&gt; src/main.rs:9:52\n   |\n9  |     fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n   |                                                    ^\nnote: ...does not necessarily outlive the lifetime 'a as defined on the block at 9:51\n  --&gt; src/main.rs:9:52\n   |\n9  |     fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n   |                                                    ^\nhelp: consider using an explicit lifetime parameter as shown: fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt;\n  --&gt; src/main.rs:9:5\n   |\n9  |     fn from_str(s: &amp;'a str) -&gt; Result&lt;Foo&lt;'a&gt;, ()&gt; {\n   |     ^\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ed5c4813d25ce241e2b60e63ff2033b0&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\" title=\"Playpen\">Playpen</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1425845717, "post_id": 28929864, "comment_id": 46118416, "body": "I&#39;ve submitted <a href=\"https://github.com/rust-lang/rust/pull/23202\" rel=\"nofollow noreferrer\">a PR</a> to fix the original docs."}, {"owner": {"reputation": 1287, "user_id": 106275, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/43vfP.png?s=128&g=1", "display_name": "Stein", "link": "https://stackoverflow.com/users/106275/stein"}, "edited": false, "score": 0, "creation_date": 1547027813, "post_id": 28929864, "comment_id": 95046953, "body": "Since this question keeps coming up for me: thread::scoped was <a href=\"https://users.rust-lang.org/t/why-does-thread-spawn-need-static-lifetime-for-generic-bounds/4541\" rel=\"nofollow noreferrer\">abandoned for a good reason</a> and the alternative mentioned there is <code>thread</code> <a href=\"https://docs.rs/crossbeam\" rel=\"nofollow noreferrer\">in the crossbeam crate</a>."}], "answers": [{"comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 2, "creation_date": 1425912803, "post_id": 28931006, "comment_id": 46144088, "body": "Looks like this <code>JoinGuard</code> is a candidate for <code>#[must_use]</code> mabye?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1425915054, "post_id": 28931006, "comment_id": 46145682, "body": "@sellibitze certainly seems like that could be a good possibility! What&#39;s the right process for that?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1425930153, "post_id": 28931006, "comment_id": 46154677, "body": "Try pitching it to the core devs in <code>#rust-internals</code> and see what happens, I guess. :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1425843478, "creation_date": 1425843478, "answer_id": 28931006, "question_id": 28929864, "link": "https://stackoverflow.com/questions/28929864/code-not-running-in-parallel-when-using-threadscoped/28931006#28931006", "title": "Code not running in parallel when using thread::scoped", "body": "<p>This is a tricky case. The problem is the humble semicolon. Look at this minimized code:</p>\n\n<pre><code>thread::scoped(|| {});\n</code></pre>\n\n<p>That semicolon means that the result of the <code>collect</code> <em>isn't</em> a vector of <code>JoinGuard</code>s \u2014 it's a <code>Vec&lt;()&gt;</code>! Each <code>JoinGuard</code> is dropped immediately, forcing the thread to finish before the next iteration starts.</p>\n\n<p>When you fix this issue, you'll hit the next problem, which is that <code>i</code> and <code>mtx</code> don't live long enough. You'll need to <code>move</code> them into the closure:</p>\n\n<pre><code>thread::scoped(move || {})\n</code></pre>\n"}], "owner": {"reputation": 1488, "user_id": 2417347, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6be6de9a9f6d32c008ea322627ffacd6?s=128&d=identicon&r=PG", "display_name": "mhristache", "link": "https://stackoverflow.com/users/2417347/mhristache"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 427, "favorite_count": 1, "accepted_answer_id": 28931006, "answer_count": 1, "score": 6, "last_activity_date": 1425843478, "creation_date": 1425837345, "question_id": 28929864, "link": "https://stackoverflow.com/questions/28929864/code-not-running-in-parallel-when-using-threadscoped", "title": "Code not running in parallel when using thread::scoped", "body": "<p>Can someone please explain why the code below does not run in parallel? I guess I don't understand how <code>thread::scoped</code> works..</p>\n\n<pre><code>use std::thread;\nuse std::sync::{Arc, Mutex};\nuse std::time::Duration;\nuse std::old_io::timer;\n\nfn main() {\n    let buf = Arc::new(Mutex::new(Vec::&lt;String&gt;::new()));\n    let res = test(buf);\n    println!(\"{:?}\", *res.lock().unwrap());\n}\n\nfn test(buf: Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt;) -&gt; Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt; {\n    let guards: Vec&lt;_&gt; = (0..3).map( |i| {\n        let mtx = buf.clone();\n        thread::scoped(|| {\n            println!(\"Thread: {}\", i);\n            let mut res = mtx.lock().unwrap();\n            timer::sleep(Duration::seconds(5));\n            res.push(format!(\"thread {}\", i));\n        });\n    }).collect();\n    buf\n}\n</code></pre>\n\n<p>The code is based on the examples <a href=\"http://doc.rust-lang.org/intro.html#concurrency\" rel=\"noreferrer\">here</a> where it's stated:</p>\n\n<blockquote>\n  <p>The scoped function takes one argument, a closure, indicated by the double bars ||. This closure is executed in a new thread created by scoped. The method is called scoped because it returns a 'join guard', which will automatically join the child thread when it goes out of scope. Because we collect these guards into a Vec, and that vector goes out of scope at the end of our program, our program will wait for every thread to finish before finishing.</p>\n</blockquote>\n\n<p>Thanks</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "edited": false, "score": 0, "creation_date": 1425833663, "post_id": 28928343, "comment_id": 46114107, "body": "Thanks for answering :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1425833394, "last_edit_date": 1425833394, "creation_date": 1425829376, "answer_id": 28928343, "question_id": 28928242, "link": "https://stackoverflow.com/questions/28928242/struct-method-type-inference/28928343#28928343", "title": "Struct method type inference", "body": "<p>You are mixing the worlds of generics and not-generics (specifics?). Here's the fix:</p>\n\n<pre><code>impl Journal&lt;BufferedReader&lt;IoResult&lt;File&gt;&gt;&gt; {\n    fn new() -&gt; Journal&lt;BufferedReader&lt;IoResult&lt;File&gt;&gt;&gt; {\n        let path = Path::new(\"/tmp/allocator-journal.txt\");\n        let mut file = BufferedReader::new(File::open(&amp;path));\n        Journal {file: file}\n    }\n}\n</code></pre>\n\n<p>Note the lack of <code>T</code> here. The whole point is that you are deciding what type <code>T</code> must be (<code>BufferedReader&lt;IoResult&lt;File&gt;&gt;</code>), so there's no need for the type variable. </p>\n\n<p>By <em>having</em> the type variable, the compiler is attempting to figure out what <code>T</code> should be. However, you don't use <code>T</code> anywhere, so it has nothing to connect the dots with, and you get an error stating as much.</p>\n\n<p>This brings up the question: <em>why have generics at all?</em> You aren't actually using them for anything, so you might as well just replace <code>T</code> with <code>BufferedReader&lt;IoResult&lt;File&gt;&gt;</code> everywhere.</p>\n"}], "owner": {"reputation": 4518, "user_id": 122446, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9b5b7efa78974560f6cb1b21cefd309e?s=128&d=identicon&r=PG", "display_name": "Peter Horne", "link": "https://stackoverflow.com/users/122446/peter-horne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 369, "favorite_count": 0, "accepted_answer_id": 28928343, "answer_count": 1, "score": 0, "last_activity_date": 1425833394, "creation_date": 1425828914, "last_edit_date": 1425829515, "question_id": 28928242, "link": "https://stackoverflow.com/questions/28928242/struct-method-type-inference", "title": "Struct method type inference", "body": "<p>Given the following:</p>\n\n<pre><code>use std::old_io::{BufferedReader, File};\n\nstruct Journal&lt;T&gt; where T: Buffer {\n    file: T,\n}\n\nimpl&lt;T: Buffer&gt; Iterator for Journal&lt;T&gt; {\n    type Item = String;\n\n    fn next(&amp;mut self) -&gt; Option&lt;String&gt; {\n        match self.file.read_line() {\n            Ok(line) =&gt; Some(line.to_string()),\n            Err(_) =&gt; None,\n        }\n    }\n}\n\nfn main() {\n    let path = Path::new(\"/tmp/allocator-journal.txt\");\n    let mut file = BufferedReader::new(File::open(&amp;path));\n\n    let journal = Journal {file: file};\n    for line in journal {\n        print!(\"{}\", line);\n    }\n}\n</code></pre>\n\n<p>I would like to move the file opening logic into a <code>new</code> method on Journal. The following fails to compile due to <code>unable to infer enough type information about '_'; type annotations required [E0282]</code>:</p>\n\n<pre><code>use std::old_io::{BufferedReader, File, IoResult};\n\nstruct Journal&lt;T&gt; where T: Buffer {\n    file: T,\n}\n\nimpl&lt;T: Buffer&gt; Journal&lt;T&gt; {\n    fn new() -&gt; Journal&lt;BufferedReader&lt;IoResult&lt;File&gt;&gt;&gt; {\n        let path = Path::new(\"/tmp/allocator-journal.txt\");\n        let mut file = BufferedReader::new(File::open(&amp;path));\n        Journal {file: file}\n    }\n}\n\nimpl&lt;T: Buffer&gt; Iterator for Journal&lt;T&gt; {\n    type Item = String;\n\n    fn next(&amp;mut self) -&gt; Option&lt;String&gt; {\n        match self.file.read_line() {\n            Ok(line) =&gt; Some(line.to_string()),\n            Err(_) =&gt; None,\n        }\n    }\n}\n\nfn main() {\n    let journal = Journal::new();\n    for line in journal {\n        print!(\"{}\", line);\n    }\n}\n</code></pre>\n\n<p>Neither adding type hints to the variable binding or the method call (<code>Journal::new::&lt;Journal&lt;BufferedReader&lt;etc..&gt;&gt;&gt;</code>) fix the problem.</p>\n\n<p>Why can the type not be infered? The signature of Journal::new is explicit, right?</p>\n\n<p>As an aside, why can't the return type of <code>Journal::new()</code> be <code>Journal&lt;T&gt;</code> where T = Buffer?</p>\n"}, {"tags": ["naming-conventions", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425828769, "post_id": 28927215, "comment_id": 46112259, "body": "I&#39;d suggest you check out the <a href=\"https://github.com/rust-lang/rust-guidelines\" rel=\"nofollow noreferrer\">proto style guide</a>, and the <a href=\"http://aturon.github.io/\" rel=\"nofollow noreferrer\">rendered version</a>. If your case isn&#39;t there, the first link contains instructions for starting a discussion and getting it into the guide proper. FWIW, I&#39;d vote to use CamelCase for those types, as I&#39;d expect the code to be mostly read by Rustaceans. Isn&#39;t that the point of making a nice, safe, wrapper?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1480867219, "post_id": 40960088, "comment_id": 69130187, "body": "Your first bullet point sounds very similar to the best practice of creating a <a href=\"http://doc.crates.io/build-script.html#-sys-packages\" rel=\"nofollow noreferrer\">*-sys package</a> for C libraries. In that case it <b>should</b> be a separate crate for linking reasons, and it also allows other people to build on the unsafe code to make different high-level bindings."}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1480887965, "last_edit_date": 1480887965, "creation_date": 1480864552, "answer_id": 40960088, "question_id": 28927215, "link": "https://stackoverflow.com/questions/28927215/naming-conventions-for-rust-safe-bindings/40960088#40960088", "title": "Naming conventions for Rust safe bindings", "body": "<p>I think it's entirely a matter of taste. Personally I split C library wrappers into two levels:</p>\n\n<ul>\n<li><p>FFI, as a separate module or even separate crate, which is as close to C library as possible, including its naming conventions and data types. In that case I'd keep <code>-&gt; *mut libc::void</code> (<a href=\"https://github.com/pornel/rust-lcms2-sys/blob/810c9b0f97f8a0302c608e04eea30970057b01ef/src/ffi.rs#L1263\" rel=\"nofollow noreferrer\">example</a>).</p></li>\n<li><p>Safe, high-level wrapper, using Rust's data types and naming conventions (<a href=\"https://github.com/pornel/rust-lcms2/blob/c340fad90d44f858681d8bd5f125914a6d641326/src/profile.rs#L211\" rel=\"nofollow noreferrer\">example</a>).</p></li>\n</ul>\n"}], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 503, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1480887965, "creation_date": 1425822870, "last_edit_date": 1425828413, "question_id": 28927215, "link": "https://stackoverflow.com/questions/28927215/naming-conventions-for-rust-safe-bindings", "title": "Naming conventions for Rust safe bindings", "body": "<p>I am currently doing safe Rust bindings for a C library, that has a lot of constants defined in <code>#define</code> which have an <code>UPPER_SNAKE_CASE</code> name.</p>\n\n<p>For most cases it is not a problem (Rust uses the same convention) but actually, in this C library, some functions use them to give a type to a <code>void*</code> pointer, so I was thinking about wrapping them in a structure containing the correct data and use them as an interface for the user.</p>\n\n<p>However what is the preferred way of naming those structures? Should I use a CamelCase name to match with Rust conventions or keep close to the C library names and use an upper snake case?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50175, "user_id": 1307905, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a38a4f5f180194ac457cdc057f1be6e3?s=128&d=identicon&r=PG", "display_name": "Anthon", "link": "https://stackoverflow.com/users/1307905/anthon"}, "edited": false, "score": 3, "creation_date": 1425802381, "post_id": 28924134, "comment_id": 46105265, "body": "If the code you presented does something, don&#39;t let readers guess (or have to try out) what it does. Should this not echo the password but it does, or doesn&#39;t the code work at all? Please <b>edit</b> your question to extend it with that information."}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1425821318, "post_id": 28924134, "comment_id": 46109903, "body": "I think whether stdin is automatically echoed to stdout is controlled by the ECHO flag in some of the termios functions (under a POSIX system). A quick research on github showed some Rust bindings to it: <a href=\"https://github.com/nathan7/termios.rs\" rel=\"nofollow noreferrer\">github.com/nathan7/termios.rs</a>. I haven&#39;t taken a deep look at this library so I can&#39;t tell how easy to use it will be, but you may find some useful information here."}], "answers": [{"comments": [{"owner": {"reputation": 3719, "user_id": 2550406, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/GhBMm.png?s=128&g=1", "display_name": "lucidbrot", "link": "https://stackoverflow.com/users/2550406/lucidbrot"}, "edited": false, "score": 0, "creation_date": 1577095088, "post_id": 28926931, "comment_id": 105088268, "body": "This works if run in cmd but fails if run in cygwin"}, {"owner": {"reputation": 647, "user_id": 177203, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e24c0b3909b15da0afeb5be520e0af18?s=128&d=identicon&r=PG", "display_name": "Poulsbo", "link": "https://stackoverflow.com/users/177203/poulsbo"}, "edited": false, "score": 0, "creation_date": 1579889048, "post_id": 28926931, "comment_id": 105930387, "body": "As written, the prompt <code>Type a password: </code> won&#39;t be shown on line-buffered stdout. You&#39;ll need to manually flush it (<code>std::io::stdout().flush().unwrap();</code>)."}], "tags": [], "owner": {"reputation": 5549, "user_id": 775982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/87058ec6a2d1628e392fc444e8c159df?s=128&d=identicon&r=PG", "display_name": "Caspar", "link": "https://stackoverflow.com/users/775982/caspar"}, "is_accepted": false, "score": 12, "last_activity_date": 1435045200, "last_edit_date": 1495540956, "creation_date": 1425821163, "answer_id": 28926931, "question_id": 28924134, "link": "https://stackoverflow.com/questions/28924134/how-can-i-get-password-input-without-showing-user-input/28926931#28926931", "title": "How can I get password input without showing user input?", "body": "<p><em>Update:</em> you can use the <a href=\"https://crates.io/crates/rpassword\" rel=\"noreferrer\">rpassword crate</a>. Quoting from the README:</p>\n\n<p>Add the <code>rpassword</code> crate to your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nrpassword = \"0.0.4\"\n</code></pre>\n\n<p>Then use the <code>read_password()</code> function:</p>\n\n<pre><code>extern crate rpassword;\n\nuse rpassword::read_password;\n\nfn main() {\n    print!(\"Type a password: \");\n    let password = read_password().unwrap();\n    println!(\"The password is: '{}'\", password);\n}\n</code></pre>\n\n<hr>\n\n<h3>Old answer</h3>\n\n<p>I suspect your best bet is <a href=\"http://doc.rust-lang.org/nightly/book/ffi.html\" rel=\"noreferrer\">calling some C functions from rust</a>: either <a href=\"http://man7.org/linux/man-pages/man3/getpass.3.html\" rel=\"noreferrer\">getpass (3)</a> or its recommended alternatives (see\n<a href=\"https://stackoverflow.com/questions/1196418/getting-a-password-in-c-without-using-getpass-3\">Getting a password in C without using getpass</a>). The tricky thing is that it differs by platform, of course (if you get it working, it'd be handy as a crate).</p>\n\n<p>Depending on your requirements, you could also try using <a href=\"https://github.com/jeaye/ncurses-rs\" rel=\"noreferrer\">ncurses-rs</a> (crate \"<a href=\"https://crates.io/crates/ncurses/\" rel=\"noreferrer\">ncurses</a>\"); I haven't tested it but it looks like <a href=\"https://github.com/jeaye/ncurses-rs/blob/master/examples/ex_2.rs\" rel=\"noreferrer\">example 2</a> might demo turning off echoing input.</p>\n"}], "owner": {"reputation": 815, "user_id": 2814365, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/494b61d6331885ec1e9d33f58d00ff69?s=128&d=identicon&r=PG", "display_name": "fengsp", "link": "https://stackoverflow.com/users/2814365/fengsp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3220, "favorite_count": 0, "answer_count": 1, "score": 12, "last_activity_date": 1435045200, "creation_date": 1425799765, "last_edit_date": 1425828298, "question_id": 28924134, "link": "https://stackoverflow.com/questions/28924134/how-can-i-get-password-input-without-showing-user-input", "title": "How can I get password input without showing user input?", "body": "<p>How can I get password input without showing user input?</p>\n\n<pre><code>fn main() {\n    println!(\"Type Your Password\");\n\n    // I want to hide input here, and do not know how\n    let input = std::old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n\n    println!(\"{}\", input);\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1425786577, "post_id": 28922832, "comment_id": 46102718, "body": "<code>[type; length]</code> isn&#39;t a <i>slice</i> - it&#39;s an <i>array</i>. Arrays have a known fixed size at compile time. Slices only have a known length at run time."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425786758, "post_id": 28922832, "comment_id": 46102740, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27393166/how-do-i-initialize-an-array-of-vectors\">How do I initialize an array of vectors?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1048, "user_id": 6304086, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/caa738c746aa91abc66814ac589b16b1?s=128&d=identicon&r=PG&f=1", "display_name": "Hadus", "link": "https://stackoverflow.com/users/6304086/hadus"}, "edited": false, "score": 0, "creation_date": 1613143368, "post_id": 30312459, "comment_id": 116993046, "body": "Const generics will save us soon :)"}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": true, "score": 0, "last_activity_date": 1613160429, "last_edit_date": 1613160429, "creation_date": 1431981692, "answer_id": 30312459, "question_id": 28922832, "link": "https://stackoverflow.com/questions/28922832/how-do-i-initialize-a-slice-of-hashmaps/30312459#30312459", "title": "How do I initialize a slice of HashMaps?", "body": "<p>It's not a slice, but a fixed-size array.</p>\n<p>You can't create a slice with some content, because slice is only a &quot;view&quot; into a memory that belongs to something else (like an array or a vector).</p>\n<p>Fixed-size arrays in Rust &lt; 1.52 are generally useless. That's because Rust doesn't support generic types with integer arguments yet, but almost all things in Rust are implemented as traits (generics), so they don't work for arrays.</p>\n<p>You'll need to use a <code>Vec</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1048, "user_id": 6304086, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/caa738c746aa91abc66814ac589b16b1?s=128&d=identicon&r=PG&f=1", "display_name": "Hadus", "link": "https://stackoverflow.com/users/6304086/hadus"}, "is_accepted": false, "score": 0, "last_activity_date": 1613143303, "creation_date": 1613143303, "answer_id": 66174435, "question_id": 28922832, "link": "https://stackoverflow.com/questions/28922832/how-do-i-initialize-a-slice-of-hashmaps/66174435#66174435", "title": "How do I initialize a slice of HashMaps?", "body": "<p>Using <code>MaybeUninit</code> is the best way I can think of. Exactly the same thing is in its docs: <a href=\"https://doc.rust-lang.org/std/mem/union.MaybeUninit.html#initializing-an-array-element-by-element\" rel=\"nofollow noreferrer\">initializing-an-array-element-by-element</a>.</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e99e14cfe855d4bba31f672faa25ddb7\" rel=\"nofollow noreferrer\">playground</a></p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\nuse std::mem::{MaybeUninit, transmute};\n\nconst LENGTH: usize = 10;\n\nfn main() {\n    let _data: [HashMap&lt;String, u32&gt;; LENGTH] = {\n        let mut data: [MaybeUninit&lt;HashMap&lt;String, u32&gt;&gt;; LENGTH] = unsafe {\n            MaybeUninit::uninit().assume_init()\n        };\n\n        for elem in &amp;mut data[..] {\n            *elem = MaybeUninit::new(HashMap::new());\n        }\n\n        unsafe { transmute::&lt;_, [HashMap&lt;String, u32&gt;; LENGTH]&gt;(data) }\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 341, "user_id": 384057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/b8e6ce842c15ea85bc9a1f4aae300adf?s=128&d=identicon&r=PG", "display_name": "Watts", "link": "https://stackoverflow.com/users/384057/watts"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1543, "favorite_count": 0, "accepted_answer_id": 30312459, "answer_count": 2, "score": 2, "last_activity_date": 1613160429, "creation_date": 1425786363, "last_edit_date": 1425786793, "question_id": 28922832, "link": "https://stackoverflow.com/questions/28922832/how-do-i-initialize-a-slice-of-hashmaps", "title": "How do I initialize a slice of HashMaps?", "body": "<p>I have a situation where I want a slice of HashMaps, with the length of the slice specified by a constant. How can I initialize such a beast?</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::default::Default;\n\nconst LENGTH: usize = 10;\n\nfn main() {\n    let f: [HashMap&lt;String, u32&gt;; LENGTH] = ???;\n}\n</code></pre>\n\n<p>I've tried several versions of things in the ??? spot:</p>\n\n<pre><code>Default::default()\n[HashMap::new(); LENGTH]\n[Default::default(); LENGTH]\niter::repeat(HashMap::new()).take(LENGTH).collect().as_slice()\n</code></pre>\n\n<p>Each one gives me different errors:</p>\n\n<pre><code>test.rs:7:45: 7:61 error: the trait `core::default::Default` is not implemented for the type `[std::collections::hash::map::HashMap&lt;collections::string::String, u32&gt;; 10]` [E0277]\ntest.rs:7     let f: [HashMap&lt;String, u32&gt;; LENGTH] = Default::default();\n                                                      ^~~~~~~~~~~~~~~~\n\ntest.rs:7:45: 7:69 error: the trait `core::marker::Copy` is not implemented for the type `std::collections::hash::map::HashMap&lt;collections::string::String, u32&gt;` [E0277]\ntest.rs:7     let f: [HashMap&lt;String, u32&gt;; LENGTH] = [HashMap::new(); LENGTH];\n                                                      ^~~~~~~~~~~~~~~~~~~~~~~~\n\ntest.rs:7:45: 7:73 error: the trait `core::marker::Copy` is not implemented for the type `std::collections::hash::map::HashMap&lt;collections::string::String, u32&gt;` [E0277]\ntest.rs:7     let f: [HashMap&lt;String, u32&gt;; LENGTH] = [Default::default(); LENGTH];\n                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ntest.rs:8:45: 8:107 error: the type of this value must be known in this context\ntest.rs:8     let f: [HashMap&lt;String, u32&gt;; LENGTH] = iter::repeat(HashMap::new()).take(LENGTH).collect().as_slice();\n                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Is there some special magic that I'm missing here? Or am I hitting a bug?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1825, "user_id": 521571, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/xfSlc.jpg?s=128&g=1", "display_name": "Vladimir Lagunov", "link": "https://stackoverflow.com/users/521571/vladimir-lagunov"}, "edited": false, "score": 0, "creation_date": 1425793851, "post_id": 28917983, "comment_id": 46103752, "body": "So, path <code>std::borrow::Borrow&lt;str&gt;</code> strictly specifies that we know the real type of key at code generation stage. Can it be replaced with something like <code>std::borrow::Borrow&lt;AnotherGeneric&gt;</code> to force Rust to resolve key type at first <code>self.value.get</code> call? (Code generator guarantees that each field of Context will be accessed at least once)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1825, "user_id": 521571, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/xfSlc.jpg?s=128&g=1", "display_name": "Vladimir Lagunov", "link": "https://stackoverflow.com/users/521571/vladimir-lagunov"}, "edited": false, "score": 0, "creation_date": 1425828137, "post_id": 28917983, "comment_id": 46112026, "body": "@werehuman I&#39;ve attempted to answer your questions. I don&#39;t understand why you mention &quot;<i>guarantees that each field of Context will be accessed at least once</i>&quot; - what effect will that have on the problem?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1425828046, "last_edit_date": 1425828046, "creation_date": 1425750282, "answer_id": 28917983, "question_id": 28917594, "link": "https://stackoverflow.com/questions/28917594/generic-hashmap-does-not-implement-method-get/28917983#28917983", "title": "Generic HashMap does not implement method get", "body": "<p>Let's check out the <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get\" rel=\"nofollow\">type signature of <code>get</code></a>:</p>\n\n<pre><code>impl&lt;K, V, S&gt; HashMap&lt;K, V, S&gt;\n    where K: Eq + Hash,\n          S: HashState\n{\n    fn get&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt; \n        where K: Borrow&lt;Q&gt;,\n              Q: Hash + Eq\n    {}\n}\n</code></pre>\n\n<p>All of those conditions need to be true for the <code>get</code> method to be available. Specifically, in your case, you need for the <code>Key</code> to be <code>Eq + Hash</code>:</p>\n\n<pre><code>impl &lt;Key, Value&gt; Context &lt;Key, Value&gt;\n    where Key: Eq + std::hash::Hash,\n          Value: ToString\n</code></pre>\n\n<p>This leads to a new error, because you are using a <code>&amp;str</code> as the key to get, so you really have to specify that a <code>&amp;str</code> <em>can</em> be used as a key:</p>\n\n<pre><code>impl&lt;Key, Value&gt; Context &lt;Key, Value&gt;\n    where Key: Eq + std::hash::Hash + std::borrow::Borrow&lt;str&gt;,\n          Value: ToString\n</code></pre>\n\n<p>Then, remove the reference from your <code>get</code> line:</p>\n\n<pre><code>self.value.get(\"foobar\")\n</code></pre>\n\n<blockquote>\n  <p>So, path <code>std::borrow::Borrow&lt;str&gt;</code> strictly specifies that we know the real type of key at code generation stage.</p>\n</blockquote>\n\n<p>It does <strong>not</strong> specify you know the real type of the key. It only requires that whatever your key is, a <code>&amp;str</code> can be borrowed from a <code>&amp;Key</code>. For example, your <code>Key</code> could be a <code>String</code> or a <code>CowString</code>. This is required because you are using <code>\"foobar\"</code> as the key.</p>\n\n<blockquote>\n  <p>[The key] can be integer or another field from &amp;self instead of static string.</p>\n</blockquote>\n\n<p>If it's another member of self, then you could parameterize the struct appropriately:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::string::ToString;\nuse std::hash::Hash;\n\npub struct Context&lt;Key, Value&gt; {\n    value: HashMap&lt;Key, Value&gt;,\n    key: Key,\n}\n\nimpl &lt;Key, Value&gt; Context &lt;Key, Value&gt;\n    where Key: Eq + Hash,\n          Value: ToString,\n{\n    pub fn render_to_string(&amp;self) -&gt; String {\n        let mut r = \"text before ... \".to_string();\n\n        self.value.get(&amp;self.key).map(|v| r.push_str(&amp;v.to_string()));\n\n        r.push_str(\" ... text after\");\n        r\n    }\n}\n\nfn main() {\n    let ctx1 = Context {\n        key: 42,\n        value: {\n            let mut v = HashMap::new();\n            v.insert(42, 123u64);\n            v\n        },\n    };\n    println!(\"{:?}\", ctx1.render_to_string());\n}\n</code></pre>\n\n<blockquote>\n  <p>to force Rust to resolve key type at first self.value.get call</p>\n</blockquote>\n\n<p>This sounds like you want dynamic (runtime) typing - which doesn't exist. Rust is a statically-typed language, so types must be determined at compile time.</p>\n\n<p>If you have a fixed set of key types, you could simply create an enum:</p>\n\n<pre><code>enum Key {\n    String(String),\n    Int(i32),\n}\n</code></pre>\n\n<p>And then use that instead of a generic.</p>\n"}], "owner": {"reputation": 1825, "user_id": 521571, "user_type": "registered", "accept_rate": 58, "profile_image": "https://i.stack.imgur.com/xfSlc.jpg?s=128&g=1", "display_name": "Vladimir Lagunov", "link": "https://stackoverflow.com/users/521571/vladimir-lagunov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1573, "favorite_count": 0, "accepted_answer_id": 28917983, "answer_count": 1, "score": 2, "last_activity_date": 1425828046, "creation_date": 1425748344, "question_id": 28917594, "link": "https://stackoverflow.com/questions/28917594/generic-hashmap-does-not-implement-method-get", "title": "Generic HashMap does not implement method get", "body": "<p>I am trying to create generic structure that will contain lots of generic typed fields. AST of this structure will be generated by the compiler plugin and will be used for rendering text from template.</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::string::ToString;\n\n\npub struct Context&lt;Key, Value&gt;\n    where Value: ToString\n{\n    value: HashMap&lt;Key, Value&gt;,\n    // here will be other fields with different generic types\n}\n\n\nimpl &lt;Key, Value&gt; Context &lt;Key, Value&gt;\n    where Value: ToString\n{\n    // In Jinja2 this can be written like\n    // `some text before ... {{ value[\"foobar\"] }} ... text after`\n    pub fn render_to_string(&amp;self) -&gt; String {\n        let mut r = String::new();\n        r.push_str(\"text before ... \");\n\n        // We see that the type of key is &amp;'static str.\n        // It is easy to determine when code written manually by human.\n        // But such code will be generated by compiler plugin.\n        // Here can be integer or another field from &amp;self\n        // instead of static string.\n        self.value.get(&amp;(\"foobar\")).map(|v: &amp;Value| r.push_str(&amp;v.to_string()));\n\n        r.push_str(\" ... text after\");\n        r\n    }\n}\n\n\nfn main() {\n    let ctx1 = Context {\n        value: {\n            let mut v = HashMap::new();\n            v.insert(\"foobar\", 123u64);\n            v\n        },\n    };\n    println!(\"{:?}\", ctx1.render_to_string());\n}\n</code></pre>\n\n<p>Unfortunately Rust refuses to compile code with such fuzzy types, but instead of telling what traits should be defined for generics it outputs:</p>\n\n<pre><code>&lt;anon&gt;:25:20: 25:36 error: type `std::collections::hash::map::HashMap&lt;Key, Value&gt;` does not implement any method in scope named `get`\n&lt;anon&gt;:25         self.value.get(&amp;(\"foobar\")).map(|v: &amp;Value| r.push_str(&amp;v.to_string()));\n                             ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Can this code will be fixed without specifying exact types of <code>Key</code> and <code>Value</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16953, "user_id": 2799037, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/2uPVa.png?s=128&g=1", "display_name": "usr1234567", "link": "https://stackoverflow.com/users/2799037/usr1234567"}, "edited": false, "score": 0, "creation_date": 1425726261, "post_id": 28914042, "comment_id": 46086467, "body": "What&#39;s the exact error? During compile time or run time?"}, {"owner": {"reputation": 105, "user_id": 4618816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0e8c8f583e93b273b7323fa839ab78e?s=128&d=identicon&r=PG&f=1", "display_name": "Deffe", "link": "https://stackoverflow.com/users/4618816/deffe"}, "reply_to_user": {"reputation": 16953, "user_id": 2799037, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/2uPVa.png?s=128&g=1", "display_name": "usr1234567", "link": "https://stackoverflow.com/users/2799037/usr1234567"}, "edited": false, "score": 0, "creation_date": 1425727127, "post_id": 28914042, "comment_id": 46086705, "body": "It s compile normally. I get this error when run program"}, {"owner": {"reputation": 16953, "user_id": 2799037, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/2uPVa.png?s=128&g=1", "display_name": "usr1234567", "link": "https://stackoverflow.com/users/2799037/usr1234567"}, "edited": false, "score": 5, "creation_date": 1425728480, "post_id": 28914042, "comment_id": 46087063, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/28660362/thread-main-has-overflowed-its-stack-when-constructing-a-large-tree\">&quot;thread &#39;&lt;main&gt;&#39; has overflowed its stack&quot; when constructing a large tree</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1425745721, "post_id": 28914042, "comment_id": 46091872, "body": "<i>Does this mean that Rust is not as safe as positioned?</i> - Please <a href=\"http://doc.rust-lang.org/reference.html#behaviour-not-considered-unsafe\" rel=\"nofollow noreferrer\">review what safety means</a> in the context of Rust. In this case, &quot;safety&quot; does <b>not</b> mean that a program cannot abort."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425918968, "post_id": 28945803, "comment_id": 46148294, "body": "<i>&quot;about what exactly is causing stack exhaustion in your code&quot;</i> - that should be explained by the duplicate question."}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425949269, "post_id": 28945803, "comment_id": 46162579, "body": "@Shepmaster personally I still don&#39;t understand the answer in the other question. If I have a Box&lt;T&gt; and it gets dropped, it <i>recursively</i> performs drops on all the child elements, so it&#39;s not possible <i>ever drop</i> a large graph structure in rust because it&#39;ll overflow in the recursive calls? That can&#39;t be right?"}, {"owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425949285, "post_id": 28945803, "comment_id": 46162588, "body": "@Shepmaster ...but you do seem to be right. If you forget(t); it works fine."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1425950211, "post_id": 28945803, "comment_id": 46162811, "body": "It is <i>possible</i>, you just can&#39;t use the na&#239;ve built-in recursive <code>Drop</code> implementation. That&#39;s why the linked question shows an iterative version that drops all the children using a fixed depth of function calls."}, {"owner": {"reputation": 1010, "user_id": 1020714, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/391f4eea1002054903fb6ca60c6b5d04?s=128&d=identicon&r=PG", "display_name": "Lilian A. Moraru", "link": "https://stackoverflow.com/users/1020714/lilian-a-moraru"}, "edited": false, "score": 0, "creation_date": 1452978240, "post_id": 28945803, "comment_id": 57405817, "body": "Why the complex example. Here is a short 1 liner on Rust Playground: <a href=\"http://is.gd/zJ7UNi\" rel=\"nofollow noreferrer\">is.gd/zJ7UNi</a> . But this is one of those good segfaults :), that doesn&#39;t corrupt your memory."}, {"owner": {"reputation": 727, "user_id": 11392896, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/240a1abd4a401577fa990ad0b7aecb51?s=128&d=identicon&r=PG&f=1", "display_name": "brundolf", "link": "https://stackoverflow.com/users/11392896/brundolf"}, "edited": false, "score": 1, "creation_date": 1572192308, "post_id": 28945803, "comment_id": 103476555, "body": "I am actually more interested in @Doug&#39;s case, where the offending structure is a single large array that&#39;s been Box&#39;ed. Does anyone have insight into why the Box doesn&#39;t work there?"}, {"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "edited": false, "score": 0, "creation_date": 1607347061, "post_id": 28945803, "comment_id": 115235130, "body": "Please update the link: <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/behavior-considered-undefined.ht&zwnj;&#8203;ml</a>"}], "tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": false, "score": 7, "last_activity_date": 1425914992, "creation_date": 1425914992, "answer_id": 28945803, "question_id": 28914042, "link": "https://stackoverflow.com/questions/28914042/thread-main-has-overflowed-its-stack-in-rust/28945803#28945803", "title": "thread &#39;&lt;main&gt;&#39; has overflowed its stack in Rust", "body": "<blockquote>\n  <p>Does this mean that Rust is not as safe as positioned?</p>\n</blockquote>\n\n<p>Rust is only safe against <em>certain kinds</em> of failures; specifically memory corrupting crashes, which are documented here: <a href=\"http://doc.rust-lang.org/reference.html#behavior-considered-undefined\" rel=\"noreferrer\">http://doc.rust-lang.org/reference.html#behavior-considered-undefined</a></p>\n\n<p>Unfortunately there is a tendency to sometimes expect rust to be more robust against certain sorts of failures that are not memory corrupting. Specifically, you should read <a href=\"http://doc.rust-lang.org/reference.html#behavior-considered-undefined\" rel=\"noreferrer\">http://doc.rust-lang.org/reference.html#behavior-considered-undefined</a>.</p>\n\n<p>tldr; In rust, many things can cause a panic. A panic will cause the current <em>thread</em> to halt, performing shutdown operations.</p>\n\n<p>This may superficially appear similar to a memory corrupting crash from other languages, but it is important to understand although it is an <em>application failure</em>, it is not a memory corrupting failure.</p>\n\n<p>For example, you can treat panic's like exceptions by running actions in a different thread and gracefully handling failure when the thread panics (for whatever reason).</p>\n\n<p>In this specific example, you're using up too much memory on the stack.</p>\n\n<p>This simple example will also fail:</p>\n\n<pre><code>fn main() {\n  let foo:&amp;mut [i8] = &amp;mut [1i8; 1024 * 1024];\n}\n</code></pre>\n\n<p>(On most rustc; depending on the stack size on that particularly implementation)</p>\n\n<p>I would have thought that moving your allocations to the stack using Box::new() would fix it in this example...</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\n#[derive(Debug)]\nstruct Node {\n    a : Option&lt;Box&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;&gt;,\n    value: i32\n}\n\nimpl Node {\n    fn new(value: i32) -&gt; Box&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt; {\n        let node = Node {\n            a: None,\n            value: value\n        };\n        Box::new(Rc::new(RefCell::new(node)))\n    }\n}\n\nfn main() {\n    let first  = Node::new(0);\n    let mut t = first.clone();\n    for i in 1 .. 10000\n    {\n        if t.borrow().a.is_none() {\n            t.borrow_mut().a = Some(Node::new(i));\n        }\n        if t.borrow().a.is_some() {\n            let c:Box&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;;\n            { c = t.borrow().a.as_ref().unwrap().clone(); }\n            t = c;\n            println!(\"{:?}\", t);\n        }\n    }\n    println!(\"Done!\");\n}\n</code></pre>\n\n<p>...but it doesn't. I don't really understand why, but hopefully someone else can look at this and post a more authoritative answer about what exactly is causing stack exhaustion in your code.</p>\n"}, {"tags": [], "owner": {"reputation": 727, "user_id": 11392896, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/240a1abd4a401577fa990ad0b7aecb51?s=128&d=identicon&r=PG&f=1", "display_name": "brundolf", "link": "https://stackoverflow.com/users/11392896/brundolf"}, "is_accepted": false, "score": 2, "last_activity_date": 1572197111, "creation_date": 1572197111, "answer_id": 58581695, "question_id": 28914042, "link": "https://stackoverflow.com/questions/28914042/thread-main-has-overflowed-its-stack-in-rust/58581695#58581695", "title": "thread &#39;&lt;main&gt;&#39; has overflowed its stack in Rust", "body": "<p>For those who come here and are specifically interested in the case where the large struct is a contiguous chunk of memory (instead of a tree of boxes), I found this GitHub issue with further discussion, as well as a solution that worked for me:\n<a href=\"https://github.com/rust-lang/rust/issues/53827\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/53827</a></p>\n\n<blockquote>\n  <p>Vec's method <code>into_boxed_slice()</code> returns a <code>Box&lt;[T]&gt;</code>, and does not overflow the stack for me.</p>\n  \n  <p><code>vec![-1; 3000000].into_boxed_slice()</code></p>\n  \n  <p>A note of difference with the vec! macro and array expressions from the docs:</p>\n  \n  <blockquote>\n    <p>This will use clone to duplicate an expression, so one should be careful using this with types having a nonstandard Clone implementation.</p>\n  </blockquote>\n  \n  <p>There is also the <code>with_capacity()</code> method on Vec, which is shown in the <code>into_boxed_slice()</code> examples.</p>\n</blockquote>\n"}], "owner": {"reputation": 105, "user_id": 4618816, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0e8c8f583e93b273b7323fa839ab78e?s=128&d=identicon&r=PG&f=1", "display_name": "Deffe", "link": "https://stackoverflow.com/users/4618816/deffe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7179, "favorite_count": 2, "answer_count": 2, "score": 7, "last_activity_date": 1572197111, "creation_date": 1425725123, "last_edit_date": 1480553097, "question_id": 28914042, "link": "https://stackoverflow.com/questions/28914042/thread-main-has-overflowed-its-stack-in-rust", "title": "thread &#39;&lt;main&gt;&#39; has overflowed its stack in Rust", "body": "<p>I got an error trying this code, which realizes a simple linked list.</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\nstruct Node {\n    a : Option&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;,\n    value: i32\n}\n\nimpl Node {\n    fn new(value: i32) -&gt; Rc&lt;RefCell&lt;Node&gt;&gt; {\n        let node = Node {\n            a: None,\n            value: value\n        };\n        Rc::new(RefCell::new(node))\n    }\n}\n\nfn main() {\n    let first  = Node::new(0);\n    let mut t = first.clone();\n    for i in 1 .. 10_000\n    {\n        if t.borrow().a.is_none() { \n            t.borrow_mut().a = Some(Node::new(i));\n        }\n        if t.borrow().a.is_some() {\n            t = t.borrow().a.as_ref().unwrap().clone();\n        }\n    }\n    println!(\"Done!\");\n}\n</code></pre>\n\n<p>Why does it happen? Does this mean that Rust is not as safe as positioned?</p>\n\n<p>UPD:\nIf I add this method, the program does not crash.</p>\n\n<pre><code>impl Drop for Node {\n    fn drop(&amp;mut self) {\n        let mut children = mem::replace(&amp;mut self.a, None);\n\n        loop {\n            children = match children {\n                Some(mut n) =&gt; mem::replace(&amp;mut n.borrow_mut().a, None),\n                None =&gt; break,\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>But I am not sure that this is the right solution.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 14, "last_activity_date": 1461737869, "last_edit_date": 1461737869, "creation_date": 1425710063, "answer_id": 28912145, "question_id": 28911833, "link": "https://stackoverflow.com/questions/28911833/error-handling-best-practices/28912145#28912145", "title": "Error handling best-practices", "body": "<p>Defining things like this is not a particularly neat thing at present; there are a few things you need to set up with your custom error type, but after you\u2019ve done that things are a lot easier.</p>\n\n<p>First of all, you will want to implement <code>std::error::Error</code> for <code>CmdError</code> (which requires <code>std::fmt::Display</code> and <code>std::fmt::Debug</code>), and then in order that <code>try!</code> can work automatically, <code>std::convert::From&lt;std::string::FromUtf8Error&gt;</code> and <code>std::convert::From&lt;std::io::Error&gt;</code>. Here are the implementations of those:</p>\n\n<pre><code>use std::error::Error;\nuse std::string::FromUtf8Error;\nuse std::fmt;\nuse std::io;\n\n#[derive(Debug)]\nenum CmdError {\n    UtfError(FromUtf8Error),\n    IoError(io::Error),\n}\n\nimpl From&lt;FromUtf8Error&gt; for CmdError {\n    fn from(err: FromUtf8Error) -&gt; CmdError {\n        CmdError::UtfError(err)\n    }\n}\n\nimpl From&lt;io::Error&gt; for CmdError {\n    fn from(err: io::Error) -&gt; CmdError {\n        CmdError::IoError(err)\n    }\n}\n\nimpl Error for CmdError {\n    fn description(&amp;self) -&gt; &amp;str {\n        match *self {\n            CmdError::UtfError(ref err) =&gt; err.description(),\n            CmdError::IoError(ref err) =&gt; err.description(),\n        }\n    }\n\n    fn cause(&amp;self) -&gt; Option&lt;&amp;Error&gt; {\n        Some(match *self {\n            CmdError::UtfError(ref err) =&gt; err as &amp;Error,\n            CmdError::IoError(ref err) =&gt; err as &amp;Error,\n        })\n    }\n}\n\nimpl fmt::Display for CmdError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self {\n            CmdError::UtfError(ref err) =&gt; fmt::Display::fmt(err, f),\n            CmdError::IoError(ref err) =&gt; fmt::Display::fmt(err, f),\n        }\n    }\n}\n</code></pre>\n\n<p>(The <code>description</code> method in the <code>Error</code> implementation could possibly return a string not based on the wrapped error, e.g. \u201cfailed to run command\u201d. If one wants the details, they\u2019ll still be there in <code>Error.cause()</code>.)</p>\n\n<p>After implementing that lot, things are a lot easier because we can use <a href=\"http://doc.rust-lang.org/std/macro.try!.html\" rel=\"noreferrer\"><code>try!</code></a>. <code>run_cmd</code> can be written thus:</p>\n\n<pre><code>fn run_cmd(cmd: &amp;str) -&gt; Result&lt;String, CmdError&gt; {\n    let output = try!(Command::new(\"sh\").arg(\"-c\").arg(cmd).output());\n    Ok(try!(String::from_utf8(output.stdout)))\n}\n</code></pre>\n\n<p>Because <code>try!</code> uses the <code>From</code> infrastructure, this is all a lot simpler; the first line may return an <code>Err(CmdError::IoError(_))</code> (for <code>Command.output()</code> returns <code>Result&lt;_, io::Error&gt;</code>), and the second line may return an <code>Err(CmdError::UtfError(_))</code> (for <code>String::from_utf8(\u2026)</code> returns <code>Result&lt;_, FromUtf8Error&gt;</code>).</p>\n\n<p>Your <code>main</code> can also be somewhat simpler then, with the <code>err</code> branch not needing any further matching if you don\u2019t care about the particular error; as it implements <code>fmt::Display</code> now, you can just use it directly.</p>\n\n<p>Incidentally, in a format string, <code>{:}</code> should be written as <code>{}</code>; the <code>:</code> is superfluous if not followed by anything. (<code>{:?}</code> would work for showing <code>Debug</code> output, but you should prefer to use <code>Display</code> if it\u2019s user-facing.)</p>\n"}, {"tags": [], "owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "is_accepted": false, "score": 2, "last_activity_date": 1552920199, "last_edit_date": 1552920199, "creation_date": 1552919691, "answer_id": 55223802, "question_id": 28911833, "link": "https://stackoverflow.com/questions/28911833/error-handling-best-practices/55223802#55223802", "title": "Error handling best-practices", "body": "<h2>How to do it in 2019</h2>\n\n<h3>Question mark operator (<code>?</code>)</h3>\n\n<p>Rust now has the question mark operator that makes propagating errors easy. You can read about it in the very complete <a href=\"https://doc.rust-lang.org/1.30.0/book/second-edition/ch09-02-recoverable-errors-with-result.html\" rel=\"nofollow noreferrer\">chapter about recoverable errors</a> in the Rust book.</p>\n\n<h3>Easy error type definition</h3>\n\n<p>There are several crates on <a href=\"https://crates.io/\" rel=\"nofollow noreferrer\">crates.io</a> that make it easy to define custom error types without having to write all the boilerplate that you had to write before. \nOne very easy way to declare zero-overhead error types is to use the <a href=\"https://crates.io/crates/custom_error\" rel=\"nofollow noreferrer\"><strong><code>custom_error</code></strong></a> crate. I am the author of that crate.</p>\n\n<h3>Example: parsing the output of an external command</h3>\n\n<p>Combining the two points above, the example given in the question can be re-written in a very concise and readable way:</p>\n\n<pre><code>use std::string::FromUtf8Error;\nuse std::io;\nuse std::process::Command;\nuse custom_error::custom_error;\n\ncustom_error! {CmdError\n    UtfError{source: FromUtf8Error} = \"The command returned an invalid string: {}\",\n    IoError{source: io::Error} = \"Unable to launch command: {}\"\n}\n\nfn run_cmd(cmd: &amp;str) -&gt; Result&lt;String, CmdError&gt; {\n    let out_bytes = Command::new(\"sh\").arg(\"-c\").arg(cmd).output()?.stdout;\n    let out_string = String::from_utf8(out_bytes)?;\n    Ok(out_string)\n}\n\nfn main() {\n    match run_cmd(\"echo 'Hello World'\") {\n        Ok(res) =&gt; println!(\"{}\", res),\n        Err(e)  =&gt; eprintln!(\"{}\", e)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 336, "user_id": 1322843, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0a4a926440c966aface5e4c4bbf4c7d?s=128&d=identicon&r=PG&f=1", "display_name": "zjagannatha", "link": "https://stackoverflow.com/users/1322843/zjagannatha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6200, "favorite_count": 4, "answer_count": 2, "score": 14, "last_activity_date": 1552920199, "creation_date": 1425707208, "last_edit_date": 1425745781, "question_id": 28911833, "link": "https://stackoverflow.com/questions/28911833/error-handling-best-practices", "title": "Error handling best-practices", "body": "<p>I've been fumbling through Rust's documentation trying to execute a simple esoteric example for my own educational benefit more than practicality. While doing this, I can't seem to wrap my head around how Rust's error handling is meant to be used.</p>\n\n<p>The programming example I'm using is to write a function that runs a command in a shell. From the result of the command I want to retrieve <code>stdout</code> (as a <code>String</code> or <code>&amp;str</code>) and know whether or not the command failed.</p>\n\n<p>The <a href=\"http://doc.rust-lang.org/std/process/struct.Command.html\"><code>std::process::Command</code></a> struct gives me the methods I want, but it seems that the only way to combine them is kludgy and awkward:</p>\n\n<pre><code>use std::process::Command;\nuse std::string::{String, FromUtf8Error};\nuse std::io::Error;\n\n\nenum CmdError {\n    UtfError(FromUtf8Error),\n    IoError(Error),\n}\n\n\n// I would really like to use std::error::Error instead of CmdError,\n// but the compiler complains about using a trait in this context.\nfn run_cmd(cmd: &amp;str) -&gt; Result&lt;String, CmdError&gt; {\n    let cmd_result = Command::new(\"sh\").arg(\"-c\").arg(cmd).output();\n\n    match cmd_result {\n        Err(e) =&gt; {\n            return Err(CmdError::IoError(e));\n        }\n        Ok(v) =&gt; {\n            let out_result = String::from_utf8(v.stdout);\n\n            match out_result {\n                Err(e) =&gt; {\n                    return Err(CmdError::UtfError(e));\n                }\n                Ok(v) =&gt; {\n                    return Ok(v);\n                }\n            }\n        }\n    }\n}\n\n\nfn main() {\n    let r = run_cmd(\"echo 'Hello World!'\");\n\n    match r {\n        Err(e) =&gt; {\n            match e {\n                CmdError::IoError(e) =&gt; {\n                    panic!(\"Failed to run command {:}\", e);\n                }\n                CmdError::UtfError(e) =&gt; {\n                    panic!(\"Failed to run command {:}\", e);\n                }\n            }\n        }\n        Ok(e) =&gt; {\n            print!(\"{:}\", e);\n        }\n    }\n}\n</code></pre>\n\n<p>In particular, the nested match blocks inside <code>run_cmd</code> seem really awkward, and the nested match blocks in <code>main</code> are even worse.</p>\n\n<p>What I'd really like to do is be able to use a more general class of error than <code>FromUtf8Error</code> or <code>io::Error</code> which I can type convert into easily from either concrete type, but it doesn't appear the type system is designed in this way, so I had to use the crude <code>CmdError</code> as somewhat of a <a href=\"http://en.wikipedia.org/wiki/Union_type\">union type</a> instead.</p>\n\n<p>I'm sure there's an easier way to do this which is more idiomatic, but I haven't found it from the documentation I've read so far.</p>\n\n<p>Any <a href=\"http://xkcd.com/138/\">pointers</a> appreciated.</p>\n"}, {"tags": ["path", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1425699401, "post_id": 28911010, "comment_id": 46080982, "body": "I presume that was <code>&quot;\\\\test.txt&quot;</code>; <code>&quot;\\test.txt&quot;</code> would behave rather differently, interpreting <code>\\t</code> as HTAB."}, {"owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1425850224, "post_id": 28911010, "comment_id": 46119947, "body": "ah my mistake it was /test.txt Just fixed it"}], "answers": [{"tags": [], "owner": {"reputation": 3313, "user_id": 1535283, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ca8a8e4326ecde562aad35781a0e4e2a?s=128&d=identicon&r=PG", "display_name": "Scott Olson", "link": "https://stackoverflow.com/users/1535283/scott-olson"}, "is_accepted": true, "score": 3, "last_activity_date": 1425698753, "creation_date": 1425698753, "answer_id": 28911039, "question_id": 28911010, "link": "https://stackoverflow.com/questions/28911010/why-does-pathbuf-lose-the-current-directory-when-i-push-a-file-onto-it/28911039#28911039", "title": "Why does PathBuf lose the current directory when I push a file onto it?", "body": "<p>From the <a href=\"http://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html#method.push\" rel=\"nofollow\">docs</a>:</p>\n\n<blockquote>\n  <p>If <code>path</code> is absolute, it replaces the current path.</p>\n  \n  <p>On Windows:</p>\n  \n  <ul>\n  <li>if <code>path</code> has a root but no prefix (e.g. <code>\\windows</code>), it replaces\n  everything except for the prefix (if any) of <code>self</code>.</li>\n  <li>if <code>path</code> has a\n  prefix but no root, it replaces <code>self</code>.</li>\n  </ul>\n</blockquote>\n\n<p>Your example falls under the first bullet point, where it replaces everything but <code>C:</code> with <code>\\test.txt</code>.</p>\n\n<p>The solution is to use a non-absolute path, ie, <code>test.txt</code>.</p>\n"}], "owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 28911039, "answer_count": 1, "score": 2, "last_activity_date": 1425850303, "creation_date": 1425698415, "last_edit_date": 1425850303, "question_id": 28911010, "link": "https://stackoverflow.com/questions/28911010/why-does-pathbuf-lose-the-current-directory-when-i-push-a-file-onto-it", "title": "Why does PathBuf lose the current directory when I push a file onto it?", "body": "<p>Part of the current directory stored seems to be lost when I push a string onto a path. For example, if I do...</p>\n\n<pre><code>let mut path = \"/test.txt\";\nlet mut localpath = env::current_dir().unwrap();\nprintln!(\"{}\", localpath.display());\nlocalpath.push(path);\nprintln!(\"{}\", localpath.display());\n</code></pre>\n\n<p>I get outputs on the console similar to</p>\n\n<pre><code>C:\\User\\JohnDoe\\Desktop\\testfolder\nC:\\test.txt\n</code></pre>\n\n<p>Does anyone know why <code>push(path)</code> might be deleting <code>\\User\\JohnDoe\\Desktop\\testfolder</code>?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 1, "creation_date": 1425739969, "post_id": 28913638, "comment_id": 46090221, "body": "This raises the interesting question why <code>HashMap</code> does not have an iterator that returns <code>Entry</code> (or <code>(Key, Entry)</code> tuples). I can&#39;t see any reason why this should not be possible. Does anyone know if this is just a case of &quot;Well, no-one has bothered to implement it yet&quot;?"}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 1, "creation_date": 1425774868, "post_id": 28913638, "comment_id": 46100684, "body": "<code>HashMap</code>&#39;s <code>iter</code> function (as used above) <i>does</i> create an iterator over <code>Key, Entry</code> tuples. I may be misunderstanding your question..."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 5, "last_activity_date": 1425722513, "creation_date": 1425722513, "answer_id": 28913638, "question_id": 28909583, "link": "https://stackoverflow.com/questions/28909583/removing-entries-from-a-hashmap-based-on-value/28913638#28913638", "title": "Removing entries from a HashMap based on value", "body": "<p>There is no way to delete values from hashmap during iteration (neither via <code>remove</code>, neither via <code>Entry</code> api) because of borrowing restrictions, so your idea (collecting keys to remove) is pretty close to the right solution.</p>\n\n<p>You just don't need to clone the whole hash table, it is sufficient to collect only key copies:</p>\n\n<pre><code>fn strip_empties(x: &amp;mut HashMap&lt;String, i8&gt;) {\n    let empties: Vec&lt;_&gt; = x\n         .iter()\n         .filter(|&amp;(_, &amp;v)| v == 0)\n         .map(|(k, _)| k.clone())\n         .collect();\n    for empty in empties { x.remove(&amp;empty); }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1425729916, "post_id": 28914594, "comment_id": 46087430, "body": "While this looks really nice on paper, it&#39;ll involve a lot of deallocations and allocations for the HashMap entries. That&#39;s why a mutation might be preferable."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1425766959, "post_id": 28914594, "comment_id": 46098792, "body": "I think it will only involve one allocation and deallocation (for the whole backing table)."}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425774764, "post_id": 28914594, "comment_id": 46100661, "body": "Can you give me a sense of why you call this &quot;immutable&quot;, when it consumes (destroys) the source hashmap? I understand the approach and like it -- but I&#39;m trying to figure out why &quot;immutable&quot; is the right word for it."}, {"owner": {"user_type": "does_not_exist", "display_name": "user4316209"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425804884, "post_id": 28914594, "comment_id": 46105824, "body": "@Bosh In this case the source HashMap is destroyed, yes. But it could be retained in it&#39;s original form if another variable was used. So it&#39;s immutable as the original HashMap is not mutated."}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425853393, "post_id": 28914594, "comment_id": 46120928, "body": "@lummax: My understanding is that even if you used another variable, as in <code>let mut stripped_map = strip_empties_immutable(map);</code>, the original <code>map</code> variable would no longer be usable, because of the behavior of <code>into_iter</code> (which consumes the thing). Is that right?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user4316209"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425891790, "post_id": 28914594, "comment_id": 46131461, "body": "@Bosh: Of course. The <code>into_iter()</code> is consuming (<code>strip_empties()</code> is consuming). But that could easily be changed into a reference. This is about if it&#39;s ok to construct a new Hashmap."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1503075042, "post_id": 28914594, "comment_id": 78480947, "body": "What about usage of <code>drain</code> for inplace filter?"}, {"owner": {"reputation": 1259, "user_id": 839238, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/xfSs2.jpg?s=128&g=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/839238/chris"}, "edited": false, "score": 0, "creation_date": 1594893042, "post_id": 28914594, "comment_id": 111288556, "body": "There&#39;s now a tracking issue to add drain_filter to HashMap. It&#39;s not merged at time of writing but might be soon: <a href=\"https://github.com/rust-lang/rust/issues/59618\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/59618</a>"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user4316209"}, "is_accepted": false, "score": 14, "last_activity_date": 1425748071, "last_edit_date": 1425748071, "creation_date": 1425729221, "answer_id": 28914594, "question_id": 28909583, "link": "https://stackoverflow.com/questions/28909583/removing-entries-from-a-hashmap-based-on-value/28914594#28914594", "title": "Removing entries from a HashMap based on value", "body": "<p>Why the mutation of the HashMap? Just create a new one (all hail immutability):</p>\n\n<pre><code>fn strip_empties(x: HashMap&lt;String, i8&gt;) -&gt; HashMap&lt;String, i8&gt; {\n    return x.into_iter()\n        .filter(|&amp;(_, v)| v != 0)\n        .collect();\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/7lbr9d\">Playpen</a></p>\n\n<hr>\n\n<h2>Edit: Why this is feasible.</h2>\n\n<p>Of course you have to consider your use case. The best approach may vary if\nyou have a large HashMap or filter many/few elements. Lets compare the\nimplementations.</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn strip_empties_mutable(x: &amp;mut HashMap&lt;String, i8&gt;) {\n    let empties: Vec&lt;_&gt; = x\n        .iter()\n        .filter(|&amp;(_, &amp;v)| v == 0)\n        .map(|(k, _)| k.clone())\n        .collect();\n    for empty in empties { x.remove(&amp;empty); }\n}\n\nfn strip_empties_immutable(x: HashMap&lt;String, i8&gt;) -&gt; HashMap&lt;String, i8&gt; {\n    return x.into_iter()\n        .filter(|&amp;(_, v)| v != 0)\n        .collect();\n}\n\nfn build_hashmap() -&gt; HashMap&lt;String, i8&gt; {\n    let mut map = HashMap::new();\n    for chr in \"abcdefghijklmnopqrstuvmxyz\".chars() {\n        map.insert(chr.to_string(), chr as i8 % 2);\n    }\n    return map;\n}\n\n#[cfg(mutable)]\nfn main() {\n    let mut map = build_hashmap();\n    strip_empties_mutable(&amp;mut map);\n    println!(\"Now down to {:?}\" , map);\n}\n\n#[cfg(immutable)]\nfn main() {\n    let mut map = build_hashmap();\n    map = strip_empties_immutable(map);\n    println!(\"Now down to {:?}\" , map);\n}\n</code></pre>\n\n<p>Save this as <code>hashmap.rs</code> and run:</p>\n\n<pre><code>rustc --cfg mutable -O -o mutable hashmap.rs\nrustc --cfg immutable -O -o immutable hashmap.rs\n</code></pre>\n\n<p>If we look at the different runtimes (e.g. using <code>perf stat -r 1000 ./XXX</code>) we\ndon't see significant differences.</p>\n\n<p>But lets look at the number of allocations:</p>\n\n<pre><code>valgrind --tool=callgrind --callgrind-out-file=callgrind_mutable ./mutable\nvalgrind --tool=callgrind --callgrind-out-file=callgrind_immutable ./immutable\ncallgrind_annotate callgrind_mutable | grep 'je_.*alloc'\ncallgrind_annotate callgrind_immutable | grep 'je_.*alloc'\n</code></pre>\n\n<ul>\n<li><p>callgrind_mutable:</p>\n\n<pre><code>7,000  ???:je_arena_malloc_small [$HOME/hashmap/mutable]\n6,457  ???:je_arena_dalloc_bin_locked [$HOME/hashmap/mutable]\n4,800  ???:je_mallocx [$HOME/hashmap/mutable]\n3,903  ???:je_sdallocx [$HOME/hashmap/mutable]\n2,520  ???:je_arena_dalloc_small [$HOME/hashmap/mutable]\n  502  ???:je_rallocx [$HOME/hashmap/mutable]\n  304  ???:je_arena_ralloc [$HOME/hashmap/mutable]\n</code></pre></li>\n<li><p>callgrind_immutable:</p>\n\n<pre><code>5,114  ???:je_arena_malloc_small [$HOME/hashmap/immutable]\n4,725  ???:je_arena_dalloc_bin_locked [$HOME/hashmap/immutable]\n3,669  ???:je_mallocx [$HOME/hashmap/immutable]\n2,980  ???:je_sdallocx [$HOME/hashmap/immutable]\n1,845  ???:je_arena_dalloc_small [$HOME/hashmap/immutable]\n  158  ???:je_rallocx [$HOME/hashmap/immutable]\n</code></pre></li>\n</ul>\n\n<p>And this is not very suprising as the <code>clone()</code> calls in the mutable approach\nallocates memory aswell. Of course the mutable version might yield a HashMap\nwith a larger capacity.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1538342595, "post_id": 52582218, "comment_id": 92099599, "body": "An example showing how to solve the problem in OPs code would go a long way to making this a good answer."}, {"owner": {"reputation": 1000, "user_id": 5164339, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z22ht.jpg?s=128&g=1", "display_name": "Michael Allwright", "link": "https://stackoverflow.com/users/5164339/michael-allwright"}, "edited": false, "score": 0, "creation_date": 1601377736, "post_id": 52582218, "comment_id": 113383082, "body": "meta question: is there a way to somehow push a more updated answer to the top? e.g., perhaps changing this to the accepted answer?"}], "tags": [], "owner": {"reputation": 567, "user_id": 5223579, "user_type": "registered", "profile_image": "https://graph.facebook.com/887572487994048/picture?type=large", "display_name": "Johannes", "link": "https://stackoverflow.com/users/5223579/johannes"}, "is_accepted": false, "score": 13, "last_activity_date": 1557690959, "last_edit_date": 1557690959, "creation_date": 1538341972, "answer_id": 52582218, "question_id": 28909583, "link": "https://stackoverflow.com/questions/28909583/removing-entries-from-a-hashmap-based-on-value/52582218#52582218", "title": "Removing entries from a HashMap based on value", "body": "<p>The other answers are outdated. As of Rust 1.27, you can use <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.retain\" rel=\"noreferrer\"><code>HashMap::retain</code></a> to keep only the elements you are interested in. You specify the elements to keep using a closure.</p>\n\n<pre><code>x.retain(|_, v| *v != 0);\n</code></pre>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7047, "favorite_count": 1, "answer_count": 3, "score": 12, "last_activity_date": 1557690959, "creation_date": 1425685772, "question_id": 28909583, "link": "https://stackoverflow.com/questions/28909583/removing-entries-from-a-hashmap-based-on-value", "title": "Removing entries from a HashMap based on value", "body": "<p>I've written the following code (<a href=\"http://is.gd/weRHua\" rel=\"noreferrer\">+ demo</a>) to remove entries from a <code>HashMap</code> based on value. <em>It works, but I feel like I'm struggling against the borrow-checker</em> with the use of:</p>\n\n<ul>\n<li><code>clone()</code> to avoid two references to the same set of keys</li>\n<li>an extra <code>let tmp =</code> binding to increase the lifetime of my temp value</li>\n</ul>\n\n<hr>\n\n<pre><code>use std::collections::HashMap;\n\nfn strip_empties(x: &amp;mut HashMap&lt;String, i8&gt;) {\n    let tmp = x.clone();\n    let empties = tmp\n         .iter()\n         .filter(|&amp;(_, &amp;v)| v == 0)\n         .map(|(k, _)| k);\n\n    for k in empties { x.remove(k); }\n}\n\nfn main() {\n    let mut x: HashMap&lt;String, i8&gt; = HashMap::new();\n    x.insert(\"a\".to_string(), 1);\n    x.insert(\"b\".to_string(), 0);\n    strip_empties(&amp;mut x);\n\n    println!(\"Now down to {:?}\" , x);\n}\n</code></pre>\n\n<p>Is there a cleaner, more idiomatic way to accomplish this?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 2, "last_activity_date": 1425674671, "creation_date": 1425674671, "answer_id": 28907322, "question_id": 28905810, "link": "https://stackoverflow.com/questions/28905810/match-statement-with-explicit-return-of-a-borrowed-reference/28907322#28907322", "title": "Match statement with explicit return of a borrowed reference", "body": "<p>I don't know exactly, but I suspect that your code:</p>\n\n<pre><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    match v.get(0) {\n        Some(x) =&gt; return x,\n        None =&gt; ()\n    }\n\n    println!(\"creating foo\");\n    v.push(\"foo\".to_string());\n    v.get(0).unwrap()\n}\n</code></pre>\n\n<p>is translated by the compiler into something with equivalent syntax by eliminating explicit <code>return</code>, like this:</p>\n\n<pre><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    match v.get(0) {\n        Some(x) =&gt; x,\n        None =&gt; {\n            println!(\"creating foo\");\n            v.push(\"foo\".to_string());\n            v.get(0).unwrap()\n        },\n    }\n}\n</code></pre>\n\n<p>which obviously fails with the same error. Here <code>get</code> produces <code>Option&lt;&amp;String&gt;</code>, so <code>v</code> remains borrowed even in <code>None</code> branch, where no reference is captured.</p>\n\n<p>Fortunately, there is an easy way to rewrite the function:</p>\n\n<pre><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    if v.get(0).is_none() {\n        println!(\"creating foo\");\n        v.push(\"foo\".to_string());\n    }\n\n    v.get(0).unwrap()\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 118, "user_id": 4207988, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fg6fh.png?s=128&g=1", "display_name": "El&#228;m&#228;&#228;ns&#228; Kyll&#228;stynyt", "link": "https://stackoverflow.com/users/4207988/el%c3%a4m%c3%a4%c3%a4ns%c3%a4-kyll%c3%a4stynyt"}, "is_accepted": true, "score": 1, "last_activity_date": 1425675411, "last_edit_date": 1592644375, "creation_date": 1425675411, "answer_id": 28907510, "question_id": 28905810, "link": "https://stackoverflow.com/questions/28905810/match-statement-with-explicit-return-of-a-borrowed-reference/28907510#28907510", "title": "Match statement with explicit return of a borrowed reference", "body": "<p>I am new to Rust myself too, but I believe I might have found the source of your problem.</p>\n<p>You can inspect the type signature of &quot;get&quot; function <a href=\"https://doc.rust-lang.org/std/slice/trait.SliceExt.html#tymethod.get\" rel=\"nofollow noreferrer\">here</a>. As you can see, &quot;get&quot; function returns a borrowed reference to the requested member of the vector (wrapped inside Option). My guess is that the compiler is unable to verify in your situation that &quot;x&quot; can not &quot;escape&quot; from match block.</p>\n<p>Here is a simpler, but similar example from <strong><a href=\"https://doc.rust-lang.org/intro.html#ownership\" rel=\"nofollow noreferrer\">A 30-minute Introduction to Rust</a></strong>:</p>\n<blockquote>\n<pre><code>fn main() {\n   let mut v = vec![];\n\n   v.push(&quot;Hello&quot;);\n\n   let x = &amp;v[0];\n\n   v.push(&quot;world&quot;);\n\n   println!(&quot;{}&quot;, x);\n}\n</code></pre>\n<p>In Rust, the type system encodes the notion of ownership. The variable v is an owner of the vector. When we make a reference to v, we let that variable (in this case, x) borrow it for a while. Just like if you own a book, and you lend it to me, I'm borrowing the book.</p>\n<p>So, when I try to modify the vector with the second call to push, I need to be owning it. But x is borrowing it. You can't modify something that you've lent to someone. And so Rust throws an error.</p>\n</blockquote>\n<p>Here is how I am imaging it:</p>\n<pre><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    let a: &amp;str;\n\n    match v.get(0) {\n        Some(x) =&gt; {\n            a = x;\n            return x;\n        },\n        None =&gt; ()\n    }\n\n    // Now &quot;a&quot; is still borrowing &quot;v&quot; immutably!\n    // println!(&quot;{:?}&quot;, a);\n\n    println!(&quot;creating foo&quot;);\n    v.push(&quot;foo&quot;.to_string());\n    v.get(0).unwrap()\n}\n</code></pre>\n<p>As I said I'm still a beginner so there might be more to this. I came to my conclusion after toying around with your code a bit.</p>\n<p>A simple refactor would fix this problem:</p>\n<pre><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    match v.get(0) {\n        // Notice how the borrowed value is never used and\n        // thus can not &quot;escape&quot; our match block.\n        Some(_) =&gt; (),\n        _       =&gt; v.push(&quot;foo&quot;.to_string())\n    }\n    \n    // No need to use &quot;get&quot; here since we are 100% sure that\n    // the indexed vector contains at least one item.\n    return &amp;v[0];\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 920, "user_id": 217275, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/f01054ce44a50811a5fc96f634e8a0d2?s=128&d=identicon&r=PG", "display_name": "Piotr Zolnierek", "link": "https://stackoverflow.com/users/217275/piotr-zolnierek"}, "is_accepted": false, "score": 2, "last_activity_date": 1425709242, "creation_date": 1425709242, "answer_id": 28912041, "question_id": 28905810, "link": "https://stackoverflow.com/questions/28905810/match-statement-with-explicit-return-of-a-borrowed-reference/28912041#28912041", "title": "Match statement with explicit return of a borrowed reference", "body": "<p>You can slightly improve swizard's solution:</p>\n\n<pre><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    if v.is_empty() {\n        println!(\"creating foo\");\n        v.push(\"foo\".to_string());        \n    }\n\n    &amp;v[0]\n}\n</code></pre>\n"}], "owner": {"reputation": 43, "user_id": 2339636, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72136d764383c4f37889978125972ab9?s=128&d=identicon&r=PG", "display_name": "Marcin Radomski", "link": "https://stackoverflow.com/users/2339636/marcin-radomski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 950, "favorite_count": 0, "accepted_answer_id": 28907510, "answer_count": 3, "score": 4, "last_activity_date": 1425709242, "creation_date": 1425668501, "last_edit_date": 1425668717, "question_id": 28905810, "link": "https://stackoverflow.com/questions/28905810/match-statement-with-explicit-return-of-a-borrowed-reference", "title": "Match statement with explicit return of a borrowed reference", "body": "<p>While taking a look at Rust I noticed a behavior I do not quite understand.</p>\n\n<p>I've got this code, which works as expected:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; String {\n    match v.get(0) {\n        Some(x) =&gt; return x.clone(),\n        None =&gt; ()\n    }\n\n    println!(\"creating foo\");\n    v.push(\"foo\".to_string());\n    v.get(0).unwrap().clone()\n}\n\nfn main() {\n    let mut v = Vec::new();\n    println!(\"{}\", get_or_create_foo(&amp;mut v));\n    println!(\"{}\", get_or_create_foo(&amp;mut v));\n}\n</code></pre>\n\n<p>When I change the <code>get_or_create_foo()</code> to make it return a borrowed string slice, the compiler refuses to compile it.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n    match v.get(0) {\n        Some(x) =&gt; return x,\n        None =&gt; ()\n    }\n\n    println!(\"creating foo\");\n    v.push(\"foo\".to_string());\n    v.get(0).unwrap()\n}\n</code></pre>\n\n<p>Compilation log:</p>\n\n<pre><code>$ rustc --verbose src/main.rs\nsrc/main.rs:8:5: 8:6 error: cannot borrow `*v` as mutable because it is also borrowed as immutable\nsrc/main.rs:8     v.push(\"foo\".to_string());\n                  ^\nsrc/main.rs:2:11: 2:12 note: previous borrow of `*v` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `*v` until the borrow ends\nsrc/main.rs:2     match v.get(0) {\n                        ^\nsrc/main.rs:10:2: 10:2 note: previous borrow ends here\nsrc/main.rs:1 fn get_or_create_foo(v: &amp;mut Vec&lt;String&gt;) -&gt; &amp;str {\n...\nsrc/main.rs:10 }\n               ^\nerror: aborting due to previous error\n</code></pre>\n\n<p>In my understanding that code is valid: the mentioned borrow may be returned as soon as control leaves the <code>match</code> clause by taking the path leading to the code mutating <code>v</code>.</p>\n\n<p>Am I wrong? Could anyone give an example when allowing such code would cause problems?</p>\n"}, {"tags": ["r", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1425653250, "post_id": 28901036, "comment_id": 46061699, "body": "Potentially useful - <a href=\"http://stackoverflow.com/questions/2463437/r-from-c-simplest-possible-helloworld\">R from C \u2014 Simplest Possible Helloworld</a>"}, {"owner": {"reputation": 329671, "user_id": 143305, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4e96ca7ae02c37e7d940d17997d780e5?s=128&d=identicon&r=PG", "display_name": "Dirk Eddelbuettel", "link": "https://stackoverflow.com/users/143305/dirk-eddelbuettel"}, "edited": false, "score": 2, "creation_date": 1425657412, "post_id": 28901036, "comment_id": 46064446, "body": "Do you want to call R from Rust, or Rust from R?  If you the latter, look at <code>.Call()</code> rather than <code>.C()</code> which nobody should use anymore.  Rcpp may help you with an intermediate layer."}, {"owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "edited": false, "score": 0, "creation_date": 1425658227, "post_id": 28901036, "comment_id": 46065022, "body": "I would like to call Rust code from within R and use Rust libraries on objects in my R session."}, {"owner": {"reputation": 329671, "user_id": 143305, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4e96ca7ae02c37e7d940d17997d780e5?s=128&d=identicon&r=PG", "display_name": "Dirk Eddelbuettel", "link": "https://stackoverflow.com/users/143305/dirk-eddelbuettel"}, "edited": false, "score": 0, "creation_date": 1425674068, "post_id": 28901036, "comment_id": 46073787, "body": "The you should be able to (easily) go from R to C++ via Rcpp. At that point the answer by @swizard becomes usable as is.   If you are interested, we could cook up a little demo up as an example in the <a href=\"http://gallery.rcpp.org\" rel=\"nofollow noreferrer\">Rcpp Gallery</a> -- as there is eg one of <a href=\"http://gallery.rcpp.org/articles/rcpp-python/\" rel=\"nofollow noreferrer\">embedding Python via Boost</a>."}], "answers": [{"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 2, "last_activity_date": 1425661998, "creation_date": 1425661998, "answer_id": 28904020, "question_id": 28901036, "link": "https://stackoverflow.com/questions/28901036/what-are-the-steps-necessary-to-pass-r-objects-to-a-rust-program/28904020#28904020", "title": "What are the steps necessary to pass R objects to a Rust program?", "body": "<p>If R can interface with C code, so it is no problem at all to compile shared library from Rust code which exposes C-style functions.</p>\n\n<p>Then you can easily use your library as it was written in C or C++. Of course, you will not able to use Rust object and libraries directly from R, you will have to make appropriate C interface for converting their functions.</p>\n\n<p>Here is how can I do that for SBCL, and I suppose it would be very similar for R:</p>\n\n<h3>On Rust side</h3>\n\n<p>Some code:</p>\n\n<p><code>% cat experiment.rs</code></p>\n\n<pre><code>extern crate libc;\n\nuse libc::{c_int, c_char};\nuse std::{ffi, str};\n\n#[no_mangle]\npub extern fn rust_code_string_to_int(s: *const c_char, r: *mut c_int) -&gt; c_int { \n    let string = String::from_utf8_lossy(unsafe { ffi::CStr::from_ptr(s).to_bytes() });\n    match &lt;isize as str::FromStr&gt;::from_str(&amp;*string) {\n        Ok(value) =&gt; { unsafe { *r = value as c_int }; 0 },\n        Err(_) =&gt; -1,\n    }\n}\n</code></pre>\n\n<p>Then I'm making shared lib:</p>\n\n<pre><code>% rustc --crate-type dylib experiment.rs\n% nm -a libexperiment.dylib | grep rust_code_string_to_int\n0000000000001630 t __ZN23rust_code_string_to_int10__rust_abiE\n00000000000015e0 T _rust_code_string_to_int\n</code></pre>\n\n<h3>Next, on SBCL side</h3>\n\n<p>Now I'm just loading my shared lib and then I have access to my <code>rust_code_string_to_int</code> function:</p>\n\n<pre><code>RUST&gt; (sb-alien:load-shared-object \"libexperiment.dylib\")\n#P\"libexperiment.dylib\"\nRUST&gt; (sb-alien:with-alien ((result sb-alien:int 0))  \n          (values (sb-alien:alien-funcall (sb-alien:extern-alien \"rust_code_string_to_int\" \n                                                                 (sb-alien:function sb-alien:int \n                                                                                    (sb-alien:c-string :external-format :utf-8)\n                                                                                    (sb-alien:* sb-alien:int)))\n                                          (sb-alien:make-alien-string \"42\")\n                                          (sb-alien:addr result))\n                  result))\n0\n42\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1317, "user_id": 2496293, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/00f8e804a4fc2e35e44f88aae73100d9?s=128&d=identicon&r=PG", "display_name": "Sam De Meyer", "link": "https://stackoverflow.com/users/2496293/sam-de-meyer"}, "is_accepted": false, "score": 9, "last_activity_date": 1472917412, "last_edit_date": 1472917412, "creation_date": 1450969700, "answer_id": 34454695, "question_id": 28901036, "link": "https://stackoverflow.com/questions/28901036/what-are-the-steps-necessary-to-pass-r-objects-to-a-rust-program/34454695#34454695", "title": "What are the steps necessary to pass R objects to a Rust program?", "body": "<p>I have been struggling on this for a while as well, but once you know how I'ts actually not that difficult.</p>\n\n<p>First create a Rust library following these instructions: <a href=\"https://doc.rust-lang.org/stable/book/rust-inside-other-languages.html\" rel=\"noreferrer\">rust-inside-other-languages</a>.\nHere is an example Rust library:</p>\n\n<pre><code>//src/lib.rs\n\n#[no_mangle]\npub fn kelvin_to_fahrenheit(n: f64) -&gt; f64 {\n    n * 9.0/5.0 - 459.67\n}\n</code></pre>\n\n<p>If you follow the instructions in <a href=\"https://doc.rust-lang.org/stable/book/rust-inside-other-languages.html\" rel=\"noreferrer\">rust-inside-other-languages</a>, then you should be able to generate a <code>*.so</code> (or <code>*.dll</code> or <code>.dylib</code>, depending on your system). Let's presume this compiled file is called <code>libtempr.so</code>.</p>\n\n<p>Now create a C++ file which will pass the functions you need to R:</p>\n\n<pre><code>//embed.cpp\n\nextern \"C\" {\n    double kelvin_to_fahrenheit(double);\n}\n\n// [[Rcpp::export]]\ndouble cpp_kelvin_to_fahrenheit(double k) {\n  double f = kelvin_to_fahrenheit(k);\n  return(f);\n}\n</code></pre>\n\n<p>Now before starting R, make sure the environment variable <code>LD_LIBRARY_PATH</code> contains the directory where the shared object generated previously (<code>libtempr.so</code>) is stored. In the shell do:</p>\n\n<pre><code>$ export LD_LIBRARY_PATH=/home/sam/path/to/shared/object:$LD_LIBRARY_PATH\n$ rstudio # I highly recommend using Rstudio for your R coding\n</code></pre>\n\n<p>Finally in Rstudo, write this file:</p>\n\n<pre><code>library(Rcpp)\n\nSys.setenv(\"PKG_LIBS\"=\"-L/home/sam/path/to/shared/object -ltempr\")\n\nsourceCpp(\"/home/sam/path/to/embed.cpp\", verbose = T, rebuild = T)\n\ncpp_kelvin_to_fahrenheit(300)\n</code></pre>\n\n<ul>\n<li>Be careful that in <code>Sys.setenv</code> the <code>-L</code> option points to the directory containing your Rust shared object.</li>\n<li>Also be careful that <code>-l</code> option is the name of your shared object without the <code>lib</code> prefix and without the <code>.so</code> (or whatever it is on your system) postfix.</li>\n<li>Using <code>Sys.setenv</code> in R to set the <code>LD_LIBRARY_PATH</code> variable <strong>DOES NOT WORK</strong>. Export the variable before starting R.</li>\n<li>The <code>verbose</code> option is there so that you can see what <code>Rcpp</code> does to compile your C++ file. Notice how the options in <code>PKG_LIBS</code> above are used for compiling your C++ file.</li>\n<li>The <code>rebuild</code> options is there to force a rebuild of the C++ file every time you run this line of R code.</li>\n</ul>\n\n<p>If you did everything well, then run the R file above in the interactive console and it should output <code>80.33</code> when you reach the last line.</p>\n\n<p>If anything is not clear, ask in the comments, and I'll try to improve my answer.</p>\n\n<p>Hope it helped :)</p>\n\n<hr>\n\n<p>Final note, the base functions <code>dyn.load</code> and <code>.C</code> can be used as an alternative approach. But this requires writing a lot more boilerplate wrapper code than this approach.</p>\n"}], "owner": {"reputation": 34690, "user_id": 919872, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/4dbc53382955c1a7ee0a92c0d3e94066?s=128&d=identicon&r=PG", "display_name": "Zelazny7", "link": "https://stackoverflow.com/users/919872/zelazny7"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 898, "favorite_count": 3, "accepted_answer_id": 28904020, "answer_count": 2, "score": 9, "last_activity_date": 1472917412, "creation_date": 1425652542, "last_edit_date": 1425653175, "question_id": 28901036, "link": "https://stackoverflow.com/questions/28901036/what-are-the-steps-necessary-to-pass-r-objects-to-a-rust-program", "title": "What are the steps necessary to pass R objects to a Rust program?", "body": "<p>Both R and Rust can interface with C code, so I think it is very possible. I am a bit unclear about how to proceed, however.</p>\n\n<p>I have read these sections looking for answers:</p>\n\n<ol>\n<li><a href=\"http://cran.r-project.org/doc/manuals/r-release/R-exts.html#System-and-foreign-language-interfaces\" rel=\"noreferrer\">R-extensions System-and-foreign-language-interfaces</a></li>\n<li><a href=\"http://doc.rust-lang.org/0.11.0/guide-ffi.html\" rel=\"noreferrer\">The Rust foreign function interface guide</a></li>\n</ol>\n\n<p>But while I am well-versed in <code>R</code> I am <em>not</em> a systems programmer and confused by what the build-chain looks like for such an endeavor.</p>\n\n<p>Using <code>Rinternals.h</code> would be ideal, but I would settle for the simpler <code>.C</code> interface as well.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1488, "user_id": 2417347, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6be6de9a9f6d32c008ea322627ffacd6?s=128&d=identicon&r=PG", "display_name": "mhristache", "link": "https://stackoverflow.com/users/2417347/mhristache"}, "edited": false, "score": 0, "creation_date": 1425650425, "post_id": 28899268, "comment_id": 46059962, "body": "Thanks. Defining both variables on the same line makes it work independent of the order, e.g. like this: <code>let (mut v, mut val) = (Vec::&lt;&amp;str&gt;::new(), String::new());</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1425651592, "post_id": 28899268, "comment_id": 46060602, "body": "Now that brings an interesting question: in which order are <code>v</code> and <code>val</code> destroyed when they are declared at once? Because you would still need <code>val</code> to be destroyed after <code>v</code>, does the compiler infer the right order?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1425654176, "post_id": 28899268, "comment_id": 46062302, "body": "@MatthieuM. Good question. There are two parts to the change, one are the drop rules (that a linear type <i>strictly</i> outlives all references inside of it), and the other is that <code>let x; let y; ...</code> is parsed as <code>let x; { let y; { ... }}</code>. The latter is technically syntactic sugar, it makes it easier to meet the restriction from the first part. My best guess is that the &quot;structly outlives&quot; requirement doesn&#39;t apply to Vec, perhaps because it still uses <code>#[unsafe_destructor]</code> or because it has no lifetime parameter? Then both having the same lifetime would be kosher."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 3, "last_activity_date": 1425647566, "last_edit_date": 1425647566, "creation_date": 1425646651, "answer_id": 28899268, "question_id": 28898872, "link": "https://stackoverflow.com/questions/28898872/why-is-variable-scope-dependent-on-the-definition-order/28899268#28899268", "title": "Why is variable scope dependent on the definition order?", "body": "<p>Bindings are dropped in reverse order of declaration, i.e. the most recently declared thing is destroyed first. Specifically, in the code that doesn't work, the destructor of <code>val</code> runs before the destructor of <code>v</code>. Without careful consideration of what <code>Vec&lt;&amp;str&gt;::drop()</code> does, this is not safe: It could for example try to look at the contents of the string slices it contains, despite the fact that the <code>String</code> from which they derive is already destroyed.</p>\n\n<p><code>Vec</code> doesn't actually do that, but other legitimate types do something along those lines. Previously it was impossible to safely implement <code>Drop</code> for types that contain lifetimes/borrowed pointers. A <a href=\"https://github.com/rust-lang/rust/pull/21972\" rel=\"nofollow\">relatively recent change</a> makes it safe by introducing these additional restrictions.</p>\n\n<p>Note that if you declare <code>let v, val;</code> or <code>let val, v;</code> and later assign, the two bindings <em>do</em> have the same lifetime, so it's not impossible to have two variables of the same lifetime.</p>\n"}], "owner": {"reputation": 1488, "user_id": 2417347, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6be6de9a9f6d32c008ea322627ffacd6?s=128&d=identicon&r=PG", "display_name": "mhristache", "link": "https://stackoverflow.com/users/2417347/mhristache"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 227, "favorite_count": 0, "accepted_answer_id": 28899268, "answer_count": 1, "score": 3, "last_activity_date": 1425651296, "creation_date": 1425645123, "last_edit_date": 1425651296, "question_id": 28898872, "link": "https://stackoverflow.com/questions/28898872/why-is-variable-scope-dependent-on-the-definition-order", "title": "Why is variable scope dependent on the definition order?", "body": "<p>I have a basic (and probably stupid) ownership question. I am trying to create a vector of <code>&amp;str</code> from <code>String</code> values wrapped inside <code>Some(String)</code>. I am using an intermediate variable to store the extracted/unwrapped <code>String</code> and it seems I need to define this intermediary variable <strong>before</strong> the vector in order to satisfy the borrow checker:</p>\n\n<p>Working code:</p>\n\n<pre><code>fn main() {\n    let a = Some(\"a\".to_string());\n\n    let mut val = String::new();\n    let mut v = Vec::&lt;&amp;str&gt;::new();\n\n    if a.is_some() {\n        val = a.unwrap();\n        v.push(&amp;val[..]);\n    }\n    println!(\"{:?}\", val);\n}\n</code></pre>\n\n<p>Non working code:</p>\n\n<pre><code>fn main() {\n    let a = Some(\"a\".to_string());\n\n    let mut v = Vec::&lt;&amp;str&gt;::new();\n    let mut val = String::new();\n\n    if a.is_some() {\n        val = a.unwrap();\n        v.push(&amp;val[..]);\n    }\n    println!(\"{:?}\", val);\n}\n</code></pre>\n\n<p>And the compiler errors:</p>\n\n<pre><code>&lt;anon&gt;:9:17: 9:20 error: `val` does not live long enough\n&lt;anon&gt;:9         v.push(&amp;val[..]);\n                        ^~~\n&lt;anon&gt;:4:35: 12:2 note: reference must be valid for the block suffix following statement 1 at 4:34...\n&lt;anon&gt;:4     let mut v = Vec::&lt;&amp;str&gt;::new();\n&lt;anon&gt;:5     let mut val = String::new();\n&lt;anon&gt;:6 \n&lt;anon&gt;:7     if a.is_some() {\n&lt;anon&gt;:8         val = a.unwrap();\n&lt;anon&gt;:9         v.push(&amp;val[..]);\n        ...\n&lt;anon&gt;:5:32: 12:2 note: ...but borrowed value is only valid for the block suffix following statement 2 at 5:31\n&lt;anon&gt;:5     let mut val = String::new();\n&lt;anon&gt;:6 \n&lt;anon&gt;:7     if a.is_some() {\n&lt;anon&gt;:8         val = a.unwrap();\n&lt;anon&gt;:9         v.push(&amp;val[..]);\n&lt;anon&gt;:10     }\n        ...\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p><a href=\"http://is.gd/f8IM54\" rel=\"nofollow\">The playpen code</a></p>\n\n<p>The question is: why do I have to define the <code>val</code> variable before the vector <code>v</code>? As I see it, <code>val</code> scope is the same as <code>v</code> scope, or am I missing something?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 20, "last_activity_date": 1529594633, "last_edit_date": 1529594633, "creation_date": 1425644032, "answer_id": 28898575, "question_id": 28897297, "link": "https://stackoverflow.com/questions/28897297/can-i-get-a-trait-object-of-a-multi-trait-instance-without-using-a-generic-type/28898575#28898575", "title": "Can I get a trait object of a multi-trait instance without using a generic type?", "body": "<p>You can create an empty trait that merges those two traits:</p>\n\n<pre><code>use std::io::{Read, Seek};\n\ntrait SeekRead: Seek + Read {}\nimpl&lt;T: Seek + Read&gt; SeekRead for T {}\n\nfn user_dynamic(stream: &amp;mut SeekRead) {}\n</code></pre>\n\n<p>This will create a new vtable for <code>SeekRead</code> that contains all the function pointers of both <code>Seek</code> and <code>Read</code>.</p>\n\n<p>You will not be able to cast your <code>&amp;mut SeekRead</code> to either <code>&amp;mut Seek</code> or <code>&amp;mut Read</code> without some trickery (see <a href=\"https://stackoverflow.com/questions/28632968/why-doesnt-rust-support-trait-object-upcasting\">Why doesn&#39;t Rust support trait object upcasting?</a>)</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1991, "favorite_count": 1, "accepted_answer_id": 28898575, "answer_count": 1, "score": 15, "last_activity_date": 1529594633, "creation_date": 1425639350, "last_edit_date": 1529593716, "question_id": 28897297, "link": "https://stackoverflow.com/questions/28897297/can-i-get-a-trait-object-of-a-multi-trait-instance-without-using-a-generic-type", "title": "Can I get a trait object of a multi-trait instance without using a generic type?", "body": "<p>I am trying to get a dynamically dispatchable borrow to an instance of an object implementing both <code>Reader</code> and <code>Seek</code>.</p>\n\n<p>I understand that Rust can do dynamic dispatch as long as there is only one trait involved.</p>\n\n<pre><code>use std::io::{Read, Seek};\nfn user(stream: &amp;mut Read) {}\n</code></pre>\n\n<p>With two or more trait bounds though, I am forced to use a type parameter:</p>\n\n<pre><code>fn user_gen&lt;T: Read + Seek&gt;(stream: &amp;mut T) {}\n</code></pre>\n\n<p>As the actual type underneath is a builder, it would have to store the borrowed object in some way, and using a type parameter for this would make the implementation more complex (I have three type parameters already). </p>\n\n<p>Ideally, I would be able to do something like that:</p>\n\n<pre><code>fn user_dynamic(stream: &amp;mut (Read + Seek)) {}\n</code></pre>\n\n<p>This does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0225]: only auto traits can be used as additional traits in a trait object\n --&gt; src/main.rs:3:38\n  |\n3 | fn user_dynamic(stream: &amp;mut (Read + Seek)) {}\n  |                                      ^^^^ non-auto additional trait\n</code></pre>\n\n<p>I understand that dynamic dispatch is done through fat pointers, and usually these only refer to one method table, not to multiple ones. I have not seen a statically compiled language that would support this, but such a feature would help me a lot.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 8771, "user_id": 2050, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/2d1e9a607c47a89730352dd7b9dacaab?s=128&d=identicon&r=PG", "display_name": "Eric Platon", "link": "https://stackoverflow.com/users/2050/eric-platon"}, "edited": false, "score": 0, "creation_date": 1425651957, "post_id": 28898429, "comment_id": 46060838, "body": "Thanks for the detail. The <a href=\"http://doc.rust-lang.org/1.0.0-alpha.2/book/iterators.html\" rel=\"nofollow noreferrer\">docs</a> also recommend to use vectors&#39; iterators to loop (<code>vector.iter()</code> or <code>&amp;vector</code>)."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 8771, "user_id": 2050, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/2d1e9a607c47a89730352dd7b9dacaab?s=128&d=identicon&r=PG", "display_name": "Eric Platon", "link": "https://stackoverflow.com/users/2050/eric-platon"}, "edited": false, "score": 1, "creation_date": 1425652815, "post_id": 28898429, "comment_id": 46061425, "body": "that won&#39;t work in this case, as you want to take ownership of <code>guards</code> content. If you just want to access, iterate over <code>&amp;guards</code> or <code>&amp;mut guards</code>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1425652870, "last_edit_date": 1592644375, "creation_date": 1425643551, "answer_id": 28898429, "question_id": 28896850, "link": "https://stackoverflow.com/questions/28896850/why-doesnt-this-compile-use-of-undeclared-type-name-threadscoped/28898429#28898429", "title": "Why doesn&#39;t this compile - use of undeclared type name `thread::scoped`", "body": "<p>Your error is due to the fact that <code>thread::scoped</code> is a function, not a type. What you want is a <code>Vec&lt;T&gt;</code> where <code>T</code> is the result type of the function. Rust has a neat feature that helps you here: It automatically detects the correct type of your variables in many situations.\nIf you use</p>\n<pre><code>let mut guards = Vec::with_capacity(3);\n</code></pre>\n<p>the type of <code>guards</code> will be chosen when you use <code>.push()</code> the first time.</p>\n<hr />\n<blockquote>\n<p>There also seem to be a number of other problems.</p>\n</blockquote>\n<ol>\n<li><p>you are accessing <code>guards[i]</code> in the first for loop, but the length of the <code>guards</code> vector is <code>0</code>. Its capacity is <code>3</code>, which means that you won't have any unnecessary allocations as long as the vector never contains more than 3 elements. use <code>guards.push(x)</code> instead of <code>guards[i] = x</code>.</p>\n</li>\n<li><p><code>thread::scoped</code> expects a <code>Fn() -&gt; T</code>, so your closure can return an object. You get that object when you call <code>.join()</code>, so you don't need an answer-vector.</p>\n</li>\n<li><p><code>vin</code> is moved to the closure. Therefore in the second iteration of the loop that creates your guards, <code>vin</code> isn't available anymore to be moved to the &quot;second&quot; closure. Every loop iteration creates a new closure.</p>\n</li>\n<li><p><code>i</code> is moved to the closure. I have no idea what's going on there. But the solution is to <code>let inval = vin[i];</code> outside the closure, and then use <code>inval</code> inside the closure. This also solves Point 3.</p>\n</li>\n<li><p><code>vin</code> is mutable. Yet you never mutate it. Don't bind variables mutably if you don't need to.</p>\n</li>\n<li><p><code>vin</code> is an array of <code>f64</code>. Therefore <code>(vin[i] as f64)</code> does nothing. Therefore you can simply use <code>vin[i]</code> directly.</p>\n</li>\n<li><p><code>join</code> moves out of the guard. Since you cannot move out of an array, your cannot index into an array of guards and join the element at the specified index. What you can do is loop over the elements of the array and join each guard.</p>\n<p>Basically this means: don't iterate over indices (<code>for i in 1..3</code>), but iterate over elements (<code>for element in vector</code>) whenever possible.</p>\n</li>\n</ol>\n<hr />\n<p>All of the above implemented:</p>\n<pre><code>use std::thread;\nuse std::old_io::timer;\nuse std::time::duration::Duration;\n\nfn main() {\n    let vin = vec![1.4f64, 1.2f64, 1.5f64];\n    let mut guards = Vec::with_capacity(3);\n\n    for inval in vin {\n        guards.push(thread::scoped( move || {\n            let ms = (1000.0f64 * inval) as i64;\n            let d = Duration::milliseconds(ms);\n            timer::sleep(d);\n            println!(&quot;Waited {}&quot;, inval);\n            10.0f64 + inval\n        }));\n    }\n\n    for guard in guards {\n        let answer = guard.join();\n        println!(&quot;{}&quot;, answer);\n    };\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": false, "score": 1, "last_activity_date": 1425645051, "creation_date": 1425645051, "answer_id": 28898851, "question_id": 28896850, "link": "https://stackoverflow.com/questions/28896850/why-doesnt-this-compile-use-of-undeclared-type-name-threadscoped/28898851#28898851", "title": "Why doesn&#39;t this compile - use of undeclared type name `thread::scoped`", "body": "<p>In supplement of Ker's answer: if you really need to mutate arrays within a thread, I suppose the most closest valid solution for your task will be something like this:</p>\n\n<pre><code>use std::thread::spawn;\nuse std::old_io::timer;\nuse std::sync::{Arc, Mutex};\nuse std::time::duration::Duration;\n\nfn main() {\n    let vin = Arc::new(vec![1.4f64, 1.2f64, 1.5f64]);\n    let answers = Arc::new(Mutex::new(vec![0f64, 0f64, 0f64]));\n    let mut workers = Vec::new();\n\n    for i in 0..3 {\n        let worker_vin = vin.clone();\n        let worker_answers = answers.clone();\n        let worker = spawn( move || {\n            let ms = (1000.0f64 * worker_vin[i]) as i64;\n            let d = Duration::milliseconds(ms);\n            timer::sleep(d);\n            println!(\"Waited {}\", worker_vin[i]);\n            let mut answers = worker_answers.lock().unwrap();\n            answers[i] = 10.0f64 + (worker_vin[i] as f64);\n        });\n        workers.push(worker);\n    }\n\n    for worker in workers { worker.join().unwrap(); }\n    for answer in answers.lock().unwrap().iter() {\n        println!(\"{}\", answer);\n    }\n}\n</code></pre>\n\n<p>In order to share vectors between several threads, I have to prove, that these vectors outlive all of my threads. I cannot use just <code>Vec</code>, because it will be destroyed at the end of <code>main</code> block, and another thread could live longer, possibly accessing freed memory. So I took <code>Arc</code> reference counter, which guarantees, that my vectors will be destroyed only when the counter downs to zero.</p>\n\n<p><code>Arc</code> allows me to share read-only data. In order to mutate <code>answers</code> array, I should use some synchronize tools, like <code>Mutex</code>. That is how Rust prevents me to make data races.</p>\n"}], "owner": {"reputation": 1260, "user_id": 4037492, "user_type": "registered", "accept_rate": 41, "profile_image": "https://www.gravatar.com/avatar/3ab2516e92f7539d8ed2b184c35514b1?s=128&d=identicon&r=PG&f=1", "display_name": "blippy", "link": "https://stackoverflow.com/users/4037492/blippy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 715, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1425652870, "creation_date": 1425637667, "last_edit_date": 1425651426, "question_id": 28896850, "link": "https://stackoverflow.com/questions/28896850/why-doesnt-this-compile-use-of-undeclared-type-name-threadscoped", "title": "Why doesn&#39;t this compile - use of undeclared type name `thread::scoped`", "body": "<p>I'm trying to get my head around Rust. I've got an alpha version of 1.</p>\n\n<p>Here's the problem I'm trying to program: I have a vector of floats. I want to set up some threads asynchronously. Each thread should wait for the number of seconds specified by each element of the vector, and return the value of the element, plus 10. The results need to be in input order.</p>\n\n<p>It's an artificial example, to be sure, but I wanted to see if I could implement something simple before moving onto more complex code. Here is my code so far:</p>\n\n<pre><code>use std::thread;\nuse std::old_io::timer;\nuse std::time::duration::Duration;\n\nfn main() {\n    let mut vin = vec![1.4f64, 1.2f64, 1.5f64];\n    let mut guards: Vec&lt;thread::scoped&gt; = Vec::with_capacity(3);\n    let mut answers: Vec&lt;f64&gt; = Vec::with_capacity(3);\n\n    for i in 0..3 {\n        guards[i] = thread::scoped( move || {\n            let ms = (1000.0f64 * vin[i]) as i64;\n            let d = Duration::milliseconds(ms);\n            timer::sleep(d);\n            println!(\"Waited {}\", vin[i]);\n            answers[i] = 10.0f64 + (vin[i] as f64);\n        })};\n\n    for i in 0..3 {guards[i].join(); };\n\n    for i in 0..3 {println!(\"{}\", vin[i]); }\n\n}\n</code></pre>\n\n<p>So the input vector is <code>[1.4, 1.2, 1.5]</code>, and I'm expecting the output vector to be <code>[11.4, 11.2, 11.5]</code>.</p>\n\n<p>There appear to be a number of problems with my code, but the first one is that I get a compilation error:</p>\n\n<pre><code>threads.rs:7:25: 7:39 error: use of undeclared type name `thread::scoped`\nthreads.rs:7     let mut guards: Vec&lt;thread::scoped&gt; = Vec::with_capacity(3);\n                                 ^~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>There also seem to be a number of other problems, including using <code>vin</code> within a closure. Also, I have no idea what <code>move</code> does, other than the fact that every example I've seen seems to use it.</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1425623640, "post_id": 28893183, "comment_id": 46047214, "body": "A hint on reading the error messages: \u201cborrowed value does not live long enough\u201d. Which borrowed value? Look at the span, it\u2019s <code>get_m()</code>. \u201cConsider using a let binding to increase its lifetime\u201d. That is, use a let binding <i>on the <code>get_m()</code> part</i>."}, {"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1425679315, "post_id": 28893183, "comment_id": 46076155, "body": "Thanks @ChrisMorgan! The extent of the squiggles is a nice clue."}], "answers": [{"tags": [], "owner": {"reputation": 339, "user_id": 4627839, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e732c601f43fd04180823fdce02d35da?s=128&d=identicon&r=PG", "display_name": "Ryen Nelsen", "link": "https://stackoverflow.com/users/4627839/ryen-nelsen"}, "is_accepted": false, "score": 5, "last_activity_date": 1517887450, "last_edit_date": 1517887450, "creation_date": 1425623378, "answer_id": 28893429, "question_id": 28893183, "link": "https://stackoverflow.com/questions/28893183/why-does-the-compiler-tell-me-to-consider-using-a-let-binding-when-i-already/28893429#28893429", "title": "Why does the compiler tell me to consider using a `let` binding&quot; when I already am?", "body": "<p>This is happening because you are trying to run your <code>.iter().peekable()</code> on the actual vector inside of <code>get_m()</code>, which is getting re-referenced by <code>vals</code>.</p>\n\n<p>Basically, you want something like this:</p>\n\n<pre><code>fn get_m() -&gt; Vec&lt;i8&gt; {\n    vec![1, 2, 3]\n}\n\nfn main() {\n    let vals = get_m();\n    let mut val = vals.iter().peekable();\n    println!(\"Saw a {:?}\", val.peek());\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=0a6628aa1ac9ac5689e3e8aecb67c278&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Saw a Some(1)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 0, "creation_date": 1425680349, "post_id": 28897418, "comment_id": 46076624, "body": "Thanks very much for taking the time to dig in here! Quick question: where can I go to learn things like &quot;Any method call checks whether its self value implements the Deref trait, and applies it if necessary.&quot;? I mean, the language specs are one source; but is there anything higher-level?"}, {"owner": {"reputation": 1436, "user_id": 406309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/25f8ea5948e459788767ca9b08aee824?s=128&d=identicon&r=PG", "display_name": "Jim Blandy", "link": "https://stackoverflow.com/users/406309/jim-blandy"}, "reply_to_user": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "edited": false, "score": 1, "creation_date": 1425926145, "post_id": 28897418, "comment_id": 46152573, "body": "Well, I got it from reading the Rust reference: <a href=\"http://doc.rust-lang.org/reference.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference.html</a> See especially the section on &quot;field expressions&quot;. But that&#39;s not really very clear; I&#39;m told the reference is due for a major refresh soon. The other source is the docs for the Deref trait itself: <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/ops/trait.Deref.html</a> But that&#39;s not great either. I do a lot of experimentation."}, {"owner": {"reputation": 1786, "user_id": 1209714, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8f9e4181f2951ca8f21ed5c541686367?s=128&d=identicon&r=PG", "display_name": "Niko Matsakis", "link": "https://stackoverflow.com/users/1209714/niko-matsakis"}, "edited": false, "score": 0, "creation_date": 1426187049, "post_id": 28897418, "comment_id": 46280425, "body": "I&#39;m not sure what&#39;s the best reference for the temporary lifetime rules, but certainly that quote from the reference is incorrect. This blog post covers a lot of the reasoning that went into the current rule, but I don&#39;t think it&#39;s fully up to date with the rule as implemented: <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/\" rel=\"nofollow noreferrer\">smallcultfollowing.com/babysteps/blog/2014/01/09/&hellip;</a> Hopefully, we&#39;ll update the reference soon (note also that there is an accepted, but unimplemented, RFC that tweaks the rules in some cases, #66)"}], "tags": [], "owner": {"reputation": 1436, "user_id": 406309, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/25f8ea5948e459788767ca9b08aee824?s=128&d=identicon&r=PG", "display_name": "Jim Blandy", "link": "https://stackoverflow.com/users/406309/jim-blandy"}, "is_accepted": true, "score": 7, "last_activity_date": 1425639779, "creation_date": 1425639779, "answer_id": 28897418, "question_id": 28893183, "link": "https://stackoverflow.com/questions/28893183/why-does-the-compiler-tell-me-to-consider-using-a-let-binding-when-i-already/28897418#28897418", "title": "Why does the compiler tell me to consider using a `let` binding&quot; when I already am?", "body": "<p>The problem is that the <code>Peekable</code> iterator lives to the end of the function, but it holds a reference to the vector returned by <code>get_m</code>, which only lasts as long as the statement containing that call.</p>\n\n<p>There are actually a lot of things going on here, so let's take it step by step:</p>\n\n<ul>\n<li><code>get_m</code> allocates and returns a vector, of type <code>Vec&lt;i8&gt;</code>.</li>\n<li>We make the call <code>.iter()</code>. Surprisingly, <code>Vec&lt;i8&gt;</code> has no <code>iter</code> method, nor does it implement any trait that has one. So there are three sub-steps here:\n<ul>\n<li>Any method call checks whether its <code>self</code> value implements the <code>Deref</code> trait, and applies it if necessary. <code>Vec&lt;i8&gt;</code> does implement <code>Deref</code>, so we implicitly call its <code>deref</code> method. However, <code>deref</code> takes its <code>self</code> argument by reference, which means that <code>get_m()</code> is now an rvalue appearing in an lvalue context. In this situation, Rust creates a temporary to hold the value, and passes a reference to that. (Keep an eye on this temporary!)</li>\n<li>We call <code>deref</code>, yielding a slice of type <code>&amp;[i8]</code> borrowing the vector's elements.</li>\n<li>This slice implements the <code>SliceExt</code> trait, which <em>does</em> have an <code>iter</code> method. Finally! This <code>iter</code> also takes its <code>self</code> argument by reference, and returns a <code>std::slice::Iter</code> holding a reference to the slice.</li>\n</ul></li>\n<li>We make the call <code>.peekable()</code>. As before, <code>std::slice::Iter</code> has no <code>peekable</code> method, but it does implement <code>Iterator</code>; <code>IteratorExt</code> is implemented for every <code>Iterator</code>; and <code>IteratorExt</code> <em>does</em> have a <code>peekable</code> method. This takes its <code>self</code> by value, so the <code>Iter</code> is consumed, and we get a <code>std::iter::Peekable</code> back in return, again holding a reference to the slice.</li>\n<li>This <code>Peekable</code> is then bound to the variable <code>vals</code>, which lives to the end of the function.</li>\n<li>The temporary holding the original <code>Vec&lt;i8&gt;</code>, to whose elements the <code>Peekable</code> refers, now dies. Oops. This is the borrowed value not living long enough.</li>\n</ul>\n\n<p>But the temporary dies there only because that's the rule for temporaries. If we give it a name, then it lasts as long as its name is in scope:</p>\n\n<pre><code>let vec = get_m();\nlet mut peekable = vec.iter().peekable();\nprintln!(\"Saw a {:?}\", vals.peek());\n</code></pre>\n\n<p>I think that's the story. What still confuses me, though, is why that temporary doesn't live longer, even without a name. The Rust reference says, \"A temporary's lifetime equals the largest lifetime of any reference that points to it.\" But that's clearly not the case here.</p>\n"}], "owner": {"reputation": 6604, "user_id": 318206, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/f30e68fd58551b03172a66098e37db95?s=128&d=identicon&r=PG", "display_name": "Bosh", "link": "https://stackoverflow.com/users/318206/bosh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1584, "favorite_count": 3, "accepted_answer_id": 28897418, "answer_count": 2, "score": 5, "last_activity_date": 1517887450, "creation_date": 1425621790, "last_edit_date": 1517887329, "question_id": 28893183, "link": "https://stackoverflow.com/questions/28893183/why-does-the-compiler-tell-me-to-consider-using-a-let-binding-when-i-already", "title": "Why does the compiler tell me to consider using a `let` binding&quot; when I already am?", "body": "<p>What is my error and how to fix it?</p>\n\n<pre><code>fn get_m() -&gt; Vec&lt;i8&gt; {\n    vec![1, 2, 3]\n}\n\nfn main() {\n    let mut vals = get_m().iter().peekable();\n    println!(\"Saw a {:?}\", vals.peek());\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=ef5d900909a0e1e64161cef57088e47e&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>The compiler's error suggests \"consider using a <code>let</code> binding\" \u2014 but I already am:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n --&gt; src/main.rs:6:45\n  |\n6 |     let mut vals = get_m().iter().peekable();\n  |                    -------                  ^ temporary value dropped here while still borrowed\n  |                    |\n  |                    temporary value created here\n7 |     println!(\"Saw a {:?}\", vals.peek());\n8 | }\n  | - temporary value needs to live until here\n  |\n  = note: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>This is obviously a newbie question -- though I thought I'd written enough Rust at this point that I had a handle on the borrow checker... apparently I haven't.</p>\n\n<p>This question is similar to <a href=\"https://stackoverflow.com/questions/26080157/using-a-let-binding-to-increase-value-lifetime?rq=1\">Using a `let` binding to increase value lifetime</a>, but doesn't involve breaking down an expression into multiple statements, so I don't think the problem is identical.</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "edited": false, "score": 0, "creation_date": 1425698579, "post_id": 28899326, "comment_id": 46080853, "body": "I don\u2019t think that adding a method for it would be the right thing to do, but implementing <code>Sub&lt;*const T, Output = isize&gt;</code> for <code>*const T</code> mightn\u2019t be such a bad idea."}, {"owner": {"reputation": 570, "user_id": 2780630, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57f6fdc404f5a270e608f3df85f40dfb?s=128&d=identicon&r=PG&f=1", "display_name": "DanielV", "link": "https://stackoverflow.com/users/2780630/danielv"}, "edited": false, "score": 2, "creation_date": 1577127236, "post_id": 28899326, "comment_id": 105101361, "body": "Note that for x : *mut T, y = x.offset(z), then  (y as usize - x as usize) == z * size_of::&lt;T&gt;() as opposed to being equal to exactly z."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 12, "last_activity_date": 1425646856, "creation_date": 1425646856, "answer_id": 28899326, "question_id": 28893145, "link": "https://stackoverflow.com/questions/28893145/calculate-distance-between-two-raw-pointers/28899326#28899326", "title": "Calculate distance between two raw pointers", "body": "<p>A raw pointer can be cast to <code>usize</code>; you can then perform subtraction on those.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>end as usize - start as usize\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 5398, "user_id": 570879, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/55Zcu.png?s=128&g=1", "display_name": "davidg", "link": "https://stackoverflow.com/users/570879/davidg"}, "is_accepted": false, "score": 5, "last_activity_date": 1605623153, "last_edit_date": 1605623153, "creation_date": 1605590663, "answer_id": 64869779, "question_id": 28893145, "link": "https://stackoverflow.com/questions/28893145/calculate-distance-between-two-raw-pointers/64869779#64869779", "title": "Calculate distance between two raw pointers", "body": "<p>Since 1.47.0 (October 2020), Rust has the <a href=\"https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset_from\" rel=\"noreferrer\"><code>offset_from</code></a> method on the pointer type, allowing you to write:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let offset: isize = end.offset_from(start);\n</code></pre>\n<p>to get the offset from <code>start</code> to <code>end</code>.</p>\n"}], "owner": {"reputation": 65310, "user_id": 201725, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/616f7a1cbb20fe949d883393657c039a?s=128&d=identicon&r=PG", "display_name": "Jan Hudec", "link": "https://stackoverflow.com/users/201725/jan-hudec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1383, "favorite_count": 0, "accepted_answer_id": 28899326, "answer_count": 2, "score": 9, "last_activity_date": 1605623153, "creation_date": 1425621587, "question_id": 28893145, "link": "https://stackoverflow.com/questions/28893145/calculate-distance-between-two-raw-pointers", "title": "Calculate distance between two raw pointers", "body": "<p>Some C interfaces return pointer to end of buffer. So then I need to convert the range to a slice. But slice can only be created from pointer and count. So how do I get the count.</p>\n\n<p>Writing <code>end - start</code> simply gives me <code>error: binary operation `-` cannot be applied to type `*mut i8`</code> and <code>std::ptr::PtrExt</code> only has <code>offset</code> method to calculate end from the offset, but not the inverse operation.</p>\n"}, {"tags": ["loops", "rust"], "answers": [{"comments": [{"owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 4, "creation_date": 1425852793, "post_id": 28892433, "comment_id": 46120729, "body": "Thanks, although that begs the question: Why?"}, {"owner": {"reputation": 4400, "user_id": 1617331, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/6e12a50cae37935a96e198982bba9f93?s=128&d=identicon&r=PG", "display_name": "Richiban", "link": "https://stackoverflow.com/users/1617331/richiban"}, "reply_to_user": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "edited": false, "score": 1, "creation_date": 1576667026, "post_id": 28892433, "comment_id": 104971277, "body": "@aij Almost certainly because <code>while true</code> implies that you can extract the <code>true</code> into a variable or return it from a function, which would cause the loop to break. Not a good developer experience."}], "tags": [], "owner": {"reputation": 2877, "user_id": 207384, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/1babd2bd76ffc91f5fe08c5a8b88afea?s=128&d=identicon&r=PG", "display_name": "telotortium", "link": "https://stackoverflow.com/users/207384/telotortium"}, "is_accepted": true, "score": 29, "last_activity_date": 1425616785, "creation_date": 1425616785, "answer_id": 28892433, "question_id": 28892351, "link": "https://stackoverflow.com/questions/28892351/what-is-the-difference-between-loop-and-while-true/28892433#28892433", "title": "What is the difference between loop and while true?", "body": "<p>This was answered on <a href=\"http://www.reddit.com/r/rust/comments/1v9rgp/rust_has_dowhile_loops/cer0ki4\">Reddit</a>. As you said, the compiler could special-case <code>while true</code>, but it doesn't. Since it doesn't, the compiler doesn't semantically infer that an undeclared variable that's set inside a <code>while true</code> loop must always be initialized if you break out of the loop, while it does for a <code>loop</code> loop:</p>\n\n<blockquote>\n  <p>It also helps the compiler reason about the loops, for example</p>\n\n<pre><code>let x;\nloop { x = 1; break; }\nprintln!(\"{}\", x)\n</code></pre>\n  \n  <p>is perfectly valid, while</p>\n\n<pre><code>let x;\nwhile true { x = 1; break; }\nprintln!(\"{}\", x);\n</code></pre>\n  \n  <p>fails to compile with \"use of possibly uninitialised variable\" pointing to the <code>x</code> in the <code>println</code>. In the second case, the compiler is not detecting that the body of the loop will always run at least once.</p>\n  \n  <p>(Of course, we could special case the construct <code>while true</code> to act like <code>loop</code> does now. I believe this is what Java does.)</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 5, "last_activity_date": 1523686849, "last_edit_date": 1523686849, "creation_date": 1523297846, "answer_id": 49739227, "question_id": 28892351, "link": "https://stackoverflow.com/questions/28892351/what-is-the-difference-between-loop-and-while-true/49739227#49739227", "title": "What is the difference between loop and while true?", "body": "<p>The first thing to say is, in terms of performance, these are likely to be identical. While Rust itself doesn't do anything special with <code>while true</code>, LLVM likely does make that optimisation. The Rust compiler tries to keep things simple by delegating optimisations to LLVM where it can.</p>\n\n<blockquote>\n  <p>in general, the more information we can give to the compiler, the better it can do with safety and code generation</p>\n</blockquote>\n\n<p>While certain constant expressions might get optimised away by LLVM, the semantics of the language are not altered by whether an expression is constant or not. This is good, because it helps humans reason about code better too. </p>\n\n<p>Just because <code>true</code> is a simple expression, we know it's constant. And so is <code>true != false</code> and <code>[0; 1].len() == 1</code>. But what about <code>num_cpus::get() == 1</code>? I actually don't know if there are some compilation targets where that could be constant, and I shouldn't have to think about it either!</p>\n\n<p>The error in <a href=\"https://stackoverflow.com/questions/28892351/what-is-the-difference-between-loop-and-while-true/28892433#28892433\">telotortium's example</a> would be more significant when combined with generated code or macros. Imagine a macro which <em>sometimes</em> results in a simple static expression like <code>true == true</code>, but <em>sometimes</em> references a variable or calls a function. Sometimes the compiler is able to ascertain that the loop runs once, but other times it just can't. In Rust right now, the error in that example will <em>always</em> be an error, no matter what code was generated for that condition. No surprises.</p>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 0, "last_activity_date": 1523306480, "last_edit_date": 1523306480, "creation_date": 1523302502, "answer_id": 49740386, "question_id": 28892351, "link": "https://stackoverflow.com/questions/28892351/what-is-the-difference-between-loop-and-while-true/49740386#49740386", "title": "What is the difference between loop and while true?", "body": "<blockquote>\n  <p>What is the difference between loop and while true?</p>\n</blockquote>\n\n<p>You could ask what is the difference between <code>for</code> and <code>while</code>? The answer will be close to: <a href=\"https://stackoverflow.com/q/302459/7076153\">What is a programming idiom?</a></p>\n\n<p>When you write <code>while condition {}</code>, you say \"while condition is true, do that\", but we can see that say \"while true is true, do that\", is redundant. This is where <code>loop</code> comes from, it can express infinite loops very well  because we say \"loop on that\". We don't have any condition, this is better.</p>\n\n<blockquote>\n  <p>So, how does the compiler treat them differently?</p>\n</blockquote>\n\n<p>I can't answer the \"how\" question, but I suppose you want to know \"why\". It allows the compiler to know that this loop will run at least one time, like the <code>do {} while (condition);</code> from C. The compiler can use this information to produce better code or warnings. Plus, you will be certain that the loop will be executed where a <code>while</code> loop could be gone because the compiler optimize it away. The fun part is that internally Rust uses LLVM, and it looks like LLVM doesn't have a way to express infinite loop, so it produces <a href=\"https://github.com/rust-lang/rust/issues/28728\" rel=\"nofollow noreferrer\">bugs</a> in some cases.</p>\n"}, {"tags": [], "owner": {"reputation": 1555, "user_id": 2859458, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/fc778faba894aa4ded4c99e2811b0194?s=128&d=identicon&r=PG&f=1", "display_name": "user2859458", "link": "https://stackoverflow.com/users/2859458/user2859458"}, "is_accepted": false, "score": 10, "last_activity_date": 1565120249, "last_edit_date": 1565120249, "creation_date": 1565119940, "answer_id": 57382838, "question_id": 28892351, "link": "https://stackoverflow.com/questions/28892351/what-is-the-difference-between-loop-and-while-true/57382838#57382838", "title": "What is the difference between loop and while true?", "body": "<p>One major difference is that <code>loop</code> can <a href=\"https://doc.rust-lang.org/stable/rust-by-example/flow_control/loop/return.html\" rel=\"noreferrer\">return a value</a> by passing a value to <code>break</code>. <code>while</code> and <code>for</code> <a href=\"https://github.com/rust-lang/rfcs/issues/1767\" rel=\"noreferrer\">will not</a>:</p>\n\n<pre><code>fn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    assert_eq!(result, 20);\n}\n</code></pre>\n"}], "owner": {"reputation": 4208, "user_id": 2343847, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/cf8c5e3c346c7734cb1ff728264f6cfb?s=128&d=identicon&r=PG", "display_name": "aij", "link": "https://stackoverflow.com/users/2343847/aij"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3918, "favorite_count": 5, "accepted_answer_id": 28892433, "answer_count": 4, "score": 33, "last_activity_date": 1565120249, "creation_date": 1425616117, "last_edit_date": 1592644375, "question_id": 28892351, "link": "https://stackoverflow.com/questions/28892351/what-is-the-difference-between-loop-and-while-true", "title": "What is the difference between loop and while true?", "body": "<p>The Rust tutorial, and now <a href=\"http://doc.rust-lang.org/book/looping.html\" rel=\"noreferrer\">book</a> claim there is a difference between <code>while true</code> and <code>loop</code>, but that it isn't super important to understand at this stage.</p>\n<blockquote>\n<p>If you need an infinite loop, you may be tempted to write this:</p>\n<pre><code>while true {\n</code></pre>\n<p>However, Rust has a dedicated keyword, loop, to handle this case:</p>\n<pre><code>loop {\n</code></pre>\n<p>Rust's control-flow analysis treats this construct differently than a while true, since we know that it will always loop. The details of what that means aren't super important to understand at this stage, but in general, the more information we can give to the compiler, the better it can do with safety and code generation, so you should always prefer loop when you plan to loop infinitely.</p>\n</blockquote>\n<p>Having done a little bit of compiler-type work, I have to wonder what possible semantic difference there is, since it would be trivial for the compiler to figure out both are an infinite loop.</p>\n<p>So, how does the compiler treat them differently?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 2, "last_activity_date": 1425609893, "creation_date": 1425609893, "answer_id": 28891567, "question_id": 28891416, "link": "https://stackoverflow.com/questions/28891416/how-do-i-access-the-data-sent-over-udp/28891567#28891567", "title": "How do I access the data sent over UDP?", "body": "<pre><code>fn recv_from(&amp;self, buf: &amp;mut [u8]) -&gt; Result&lt;(usize, SocketAddr)&gt;\n</code></pre>\n\n<p>The data is read into the start of <code>buf</code>. Thus, the data read can be accessed as a <code>&amp;[u8]</code> like so:</p>\n\n<pre><code>match socket.recv_from(buf) {\n    Ok((bytes_read, _)) =&gt; Some(&amp;buf[0..bytes_read]),\n    Err(_) =&gt; None,\n}\n</code></pre>\n"}], "owner": {"reputation": 950, "user_id": 1254034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6134973ba87381d21fe7ba6ab1e8a45e?s=128&d=identicon&r=PG", "display_name": "Eduardo Bautista", "link": "https://stackoverflow.com/users/1254034/eduardo-bautista"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70, "favorite_count": 0, "accepted_answer_id": 28891567, "answer_count": 1, "score": 1, "last_activity_date": 1425613607, "creation_date": 1425608930, "last_edit_date": 1425613607, "question_id": 28891416, "link": "https://stackoverflow.com/questions/28891416/how-do-i-access-the-data-sent-over-udp", "title": "How do I access the data sent over UDP?", "body": "<p><a href=\"http://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.recv_from\" rel=\"nofollow\">Looking at the documentation</a>, I can only find a way to return the size of the content sent over UDP:</p>\n\n<blockquote>\n  <p>Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.</p>\n</blockquote>\n\n<p>Is there currently a way to output the content?</p>\n"}, {"tags": ["networking", "posix", "rust"], "comments": [{"owner": {"reputation": 288867, "user_id": 207421, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=128&d=identicon&r=PG", "display_name": "user207421", "link": "https://stackoverflow.com/users/207421/user207421"}, "edited": false, "score": 0, "creation_date": 1425542138, "post_id": 28871598, "comment_id": 46008062, "body": "If that&#39;s what the documentation says it&#39;s too modest. It doesn&#39;t have any choice but to block if the underlying socket is in blocking mode and there is no data. And surely the API provides access to FIONREAD somehow?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 288867, "user_id": 207421, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=128&d=identicon&r=PG", "display_name": "user207421", "link": "https://stackoverflow.com/users/207421/user207421"}, "edited": false, "score": 0, "creation_date": 1425542221, "post_id": 28871598, "comment_id": 46008098, "body": "@EJP: but with what is written, it reserves the right to simply return no data. Whether it <i>will</i> or not may merely be a matter of present implementation."}, {"owner": {"reputation": 288867, "user_id": 207421, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=128&d=identicon&r=PG", "display_name": "user207421", "link": "https://stackoverflow.com/users/207421/user207421"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1425543738, "post_id": 28871598, "comment_id": 46008819, "body": "@ChrisMorgan I&#39;d like someone to point us to what actually is written."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 288867, "user_id": 207421, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=128&d=identicon&r=PG", "display_name": "user207421", "link": "https://stackoverflow.com/users/207421/user207421"}, "edited": false, "score": 0, "creation_date": 1425560150, "post_id": 28871598, "comment_id": 46018442, "body": "@EJP: what? The documentation, or the implementation? It shouldn\u2019t be too hard to trace through the code if you\u2019re interested."}], "answers": [{"comments": [{"owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 0, "creation_date": 1425627478, "post_id": 28881513, "comment_id": 46048425, "body": "If I&#39;m not mistaken, that line should read <code>ret if ret &gt; 0 &amp;&amp; fdset.events &amp; fdset.revents != 0 =&gt;</code>"}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 0, "creation_date": 1425642025, "post_id": 28881513, "comment_id": 46055398, "body": "You are right, that would be more accurate. However, I don&#39;t think that <code>poll</code> can return positive value in case when no given events was tiggered."}, {"owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 0, "creation_date": 1425793686, "post_id": 28881513, "comment_id": 46103719, "body": "It can return nonnegative values (e.g., zero) however."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "edited": false, "score": 0, "creation_date": 1425865814, "post_id": 28881513, "comment_id": 46123954, "body": "Zero values should be processed by <code>_</code> match as well. It executes <code>break</code> in my example, but you can use <code>continue</code> in case you want process <code>EINTR</code> errors."}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 1, "last_activity_date": 1425569227, "creation_date": 1425569227, "answer_id": 28881513, "question_id": 28871598, "link": "https://stackoverflow.com/questions/28871598/determining-if-data-is-available-on-tcpstream/28881513#28881513", "title": "Determining if data is available on TcpStream", "body": "<blockquote>\n  <p>I suppose this is a job for select(2), but constructing the fd_sets for the C arguments seems rather hairy.</p>\n</blockquote>\n\n<p>I suppose <code>poll(2)</code> should be more convenient. For example:</p>\n\n<p></p>\n\n<pre><code>#![feature(std_misc, net, libc, os, io)]\n\nextern crate libc;\nuse libc::{c_int, c_uint, c_short};\nuse std::thread::spawn;\nuse std::net::{TcpListener, TcpStream};\nuse std::os;\nuse std::io::Read;\nuse std::os::unix::AsRawFd;\n\n#[repr(C)]\nstruct pollfd {\n    fd: c_int,\n    events: c_short,\n    revents: c_short,\n}\n\nextern { fn poll(fds: *mut pollfd, nfds: c_uint, timeout: c_int) -&gt; c_int; }\n\nconst POLLIN: c_short = 1;\n\nfn handle_client(mut stream: TcpStream) {\n    let mut fdset = pollfd { fd: stream.as_raw_fd(), events: POLLIN, revents: 0, };\n    loop {\n        match unsafe { poll(&amp;mut fdset as *mut _, 1, -1) } {\n            ret if ret &lt; 0 =&gt; panic!(\"poll error: {}\", os::last_os_error()),\n            ret if ret &gt; 0 &amp;&amp; fdset.events == fdset.revents =&gt; {\n                let mut byte: &amp;mut [u8] = &amp;mut [0];\n                match stream.read(&amp;mut byte).unwrap() {\n                    0 =&gt; break,\n                    1 =&gt; println!(\"A byte read: {}\", byte[0]),\n                    _ =&gt; unreachable!(),\n                }\n            },\n            _ =&gt; break,\n        }\n    }\n}\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:9999\").unwrap();\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) =&gt; { spawn(move || handle_client(stream)); },\n            Err(e) =&gt; panic!(\"connection error: {}\", e),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7587, "user_id": 116834, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/a3ee59b76d1593605ffb5be0ddca035b?s=128&d=identicon&r=PG", "display_name": "Drew", "link": "https://stackoverflow.com/users/116834/drew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 928, "favorite_count": 1, "accepted_answer_id": 28881513, "answer_count": 1, "score": 4, "last_activity_date": 1425569227, "creation_date": 1425537963, "last_edit_date": 1495540713, "question_id": 28871598, "link": "https://stackoverflow.com/questions/28871598/determining-if-data-is-available-on-tcpstream", "title": "Determining if data is available on TcpStream", "body": "<p>I have a <code>std::net::TcpStream</code>.  I want to determine if there is data available to be read without actually reading it yet.</p>\n\n<p>The only relevant API I can find on TcpStream itself is <code>read</code> which</p>\n\n<blockquote>\n  <p>does not provide any guarantees about whether it blocks waiting for data</p>\n</blockquote>\n\n<p>which does not sound encouraging for this problem.</p>\n\n<p>A <a href=\"https://stackoverflow.com/questions/28503514/force-non-blocking-read-with-tcpstream\">related question</a> seems to drop down to file descriptors and <code>read(2)</code> to force an nonblocking read. However I cannot figure out how to use <code>read(2)</code> to peek at an fd without actually reading it.  </p>\n\n<p>I suppose this is a job for <code>select(2)</code>, but constructing the <code>fd_set</code>s for the C arguments seems rather hairy.  There certainly is not a Rust type for that, and it's not immediately clear how I would invent one.</p>\n"}]