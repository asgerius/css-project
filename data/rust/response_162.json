[{"tags": ["casting", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 24, "last_activity_date": 1610374487, "last_edit_date": 1610374487, "creation_date": 1518639535, "answer_id": 48795524, "question_id": 48795329, "link": "https://stackoverflow.com/questions/48795329/what-is-the-difference-between-fromfrom-and-as-in-rust/48795524#48795524", "title": "What is the difference between From::from and as in Rust?", "body": "<p><code>as</code> can only be used in a small, fixed set of transformations. <a href=\"https://doc.rust-lang.org/1.49.0/reference/expressions/operator-expr.html#type-cast-expressions\" rel=\"nofollow noreferrer\">The reference documents <code>as</code></a>:</p>\n<blockquote>\n<p><code>as</code> can be used to explicitly perform <a href=\"https://doc.rust-lang.org/1.49.0/reference/type-coercions.html\" rel=\"nofollow noreferrer\">coercions</a>, as\nwell as the following additional casts. Here <code>*T</code> means either <code>*const T</code> or\n<code>*mut T</code>.</p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Type of <code>e</code></th>\n<th><code>U</code></th>\n<th>Cast performed by <code>e as U</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integer or Float type</td>\n<td>Integer or Float type</td>\n<td>Numeric cast</td>\n</tr>\n<tr>\n<td>C-like enum</td>\n<td>Integer type</td>\n<td>Enum cast</td>\n</tr>\n<tr>\n<td><code>bool</code> or <code>char</code></td>\n<td>Integer type</td>\n<td>Primitive to integer cast</td>\n</tr>\n<tr>\n<td><code>u8</code></td>\n<td><code>char</code></td>\n<td><code>u8</code> to <code>char</code> cast</td>\n</tr>\n<tr>\n<td><code>*T</code></td>\n<td><code>*V</code> where <code>V: Sized</code> *</td>\n<td>Pointer to pointer cast</td>\n</tr>\n<tr>\n<td><code>*T</code> where <code>T: Sized</code></td>\n<td>Numeric type</td>\n<td>Pointer to address cast</td>\n</tr>\n<tr>\n<td>Integer type</td>\n<td><code>*V</code> where <code>V: Sized</code></td>\n<td>Address to pointer cast</td>\n</tr>\n<tr>\n<td><code>&amp;[T; n]</code></td>\n<td><code>*const T</code></td>\n<td>Array to pointer cast</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.rust-lang.org/1.49.0/reference/types/function-item.html\" rel=\"nofollow noreferrer\">Function item</a></td>\n<td><a href=\"https://doc.rust-lang.org/1.49.0/reference/types/function-pointer.html\" rel=\"nofollow noreferrer\">Function pointer</a></td>\n<td>Function item to function pointer cast</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.rust-lang.org/1.49.0/reference/types/function-item.html\" rel=\"nofollow noreferrer\">Function item</a></td>\n<td><code>*V</code> where <code>V: Sized</code></td>\n<td>Function item to pointer cast</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.rust-lang.org/1.49.0/reference/types/function-item.html\" rel=\"nofollow noreferrer\">Function item</a></td>\n<td>Integer</td>\n<td>Function item to address cast</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.rust-lang.org/1.49.0/reference/types/function-pointer.html\" rel=\"nofollow noreferrer\">Function pointer</a></td>\n<td><code>*V</code> where <code>V: Sized</code></td>\n<td>Function pointer to pointer cast</td>\n</tr>\n<tr>\n<td><a href=\"https://doc.rust-lang.org/1.49.0/reference/types/function-pointer.html\" rel=\"nofollow noreferrer\">Function pointer</a></td>\n<td>Integer</td>\n<td>Function pointer to address cast</td>\n</tr>\n<tr>\n<td>Closure **</td>\n<td>Function pointer</td>\n<td>Closure to function pointer cast</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>* or <code>T</code> and <code>V</code> are compatible unsized types, e.g., both slices, both the\nsame trait object.</p>\n<p>** only for closures that do not capture (close over) any local variables</p>\n</blockquote>\n<p>Because <code>as</code> is known to the compiler and only valid for certain transformations, it can do certain types of more complicated transformations.</p>\n<p><a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>From</code> is a trait</a>, which means that any programmer can implement it for their own types and it is thus able to be applied in more situations. It pairs with <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow noreferrer\"><code>Into</code></a>. <a href=\"https://doc.rust-lang.org/std/convert/trait.TryFrom.html\" rel=\"nofollow noreferrer\"><code>TryFrom</code></a> and <a href=\"https://doc.rust-lang.org/std/convert/trait.TryInto.html\" rel=\"nofollow noreferrer\"><code>TryInto</code></a> have been stable since Rust 1.34.</p>\n<p>Because it's a trait, it can be used in a generic context (<code>fn foo(name: impl Into&lt;String&gt;) { /* ... */ }</code>). This is not possible with <code>as</code> (although see <a href=\"https://docs.rs/num/0.3.1/num/traits/trait.AsPrimitive.html\" rel=\"nofollow noreferrer\"><code>AsPrimitive</code></a> from the num crate).</p>\n<p>When converting between numeric types, one thing to note is that <code>From</code> is only implemented for <em>lossless conversions</em> (e.g. you can convert from <code>i32</code> to <code>i64</code> with <code>From</code>, but not the other way around), whereas <code>as</code> works for both lossless and lossy conversions (if the conversion is lossy, it truncates). Thus, if you want to ensure that you don't accidentally perform a lossy conversion, you may prefer using <code>From::from</code> rather than <code>as</code>.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29812530/155423\">When should I implement std::convert::From vs std::convert::Into?</a></li>\n</ul>\n"}], "owner": {"reputation": 630, "user_id": 9361705, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3480b01ac2475fdc98d6d64b1f1d6143?s=128&d=identicon&r=PG&f=1", "display_name": "John Doe", "link": "https://stackoverflow.com/users/9361705/john-doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5300, "favorite_count": 2, "accepted_answer_id": 48795524, "answer_count": 1, "score": 11, "last_activity_date": 1610374487, "creation_date": 1518638649, "last_edit_date": 1519462645, "question_id": 48795329, "link": "https://stackoverflow.com/questions/48795329/what-is-the-difference-between-fromfrom-and-as-in-rust", "title": "What is the difference between From::from and as in Rust?", "body": "<p>I can cast between types by using either <code>from</code> or <code>as</code>:</p>\n\n<pre><code>i64::from(42i32);\n42i32 as i64;\n</code></pre>\n\n<p>What is the difference between those?</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 283, "user_id": 4259341, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PaO0Z.jpg?s=128&g=1", "display_name": "g.delgado", "link": "https://stackoverflow.com/users/4259341/g-delgado"}, "edited": false, "score": 0, "creation_date": 1535227223, "post_id": 48795231, "comment_id": 90991994, "body": "What if I want to see if a string contains, say, one more more capital letters?"}, {"owner": {"reputation": 1413, "user_id": 8833540, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-u4GPpN87OaU/AAAAAAAAAAI/AAAAAAAAABs/yhNtRU_zCaM/photo.jpg?sz=128", "display_name": "Kevin Hoerr", "link": "https://stackoverflow.com/users/8833540/kevin-hoerr"}, "reply_to_user": {"reputation": 283, "user_id": 4259341, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PaO0Z.jpg?s=128&g=1", "display_name": "g.delgado", "link": "https://stackoverflow.com/users/4259341/g-delgado"}, "edited": false, "score": 7, "creation_date": 1535258170, "post_id": 48795231, "comment_id": 90996709, "body": "You should probably post that as a separate question. Personally, I&#39;d try to use regex for that."}], "tags": [], "owner": {"reputation": 1413, "user_id": 8833540, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-u4GPpN87OaU/AAAAAAAAAAI/AAAAAAAAABs/yhNtRU_zCaM/photo.jpg?sz=128", "display_name": "Kevin Hoerr", "link": "https://stackoverflow.com/users/8833540/kevin-hoerr"}, "is_accepted": true, "score": 68, "last_activity_date": 1518639135, "last_edit_date": 1518639135, "creation_date": 1518638269, "answer_id": 48795231, "question_id": 48794974, "link": "https://stackoverflow.com/questions/48794974/how-to-check-if-a-string-contains-a-substring-in-rust/48795231#48795231", "title": "How to check if a string contains a substring in Rust?", "body": "<p>Rust has no such operator. You can use the <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.contains\" rel=\"noreferrer\"><code>String::contains</code> method</a> instead:</p>\n\n<pre><code>if a.contains(\"bc\") {\n    do_something();\n}\n</code></pre>\n"}], "owner": {"reputation": 630, "user_id": 9361705, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3480b01ac2475fdc98d6d64b1f1d6143?s=128&d=identicon&r=PG&f=1", "display_name": "John Doe", "link": "https://stackoverflow.com/users/9361705/john-doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 22895, "favorite_count": 4, "accepted_answer_id": 48795231, "answer_count": 1, "score": 47, "last_activity_date": 1518639135, "creation_date": 1518637195, "last_edit_date": 1518639116, "question_id": 48794974, "link": "https://stackoverflow.com/questions/48794974/how-to-check-if-a-string-contains-a-substring-in-rust", "title": "How to check if a string contains a substring in Rust?", "body": "<p>I'm trying to find whether a substring is in a string. In Python, this involves the <code>in</code> operator, so I wrote this code:</p>\n\n<pre><code>let a = \"abcd\";\nif \"bc\" in a {\n    do_something();\n}\n</code></pre>\n\n<p>I get a strange error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected `{`, found `in`\n --&gt; src/main.rs:3:13\n  |\n3 |       if \"bc\" in a {\n  |  _____________-^\n4 | |         do_something();\n5 | |     }\n  | |_____- help: try placing this code inside a block: `{ a &lt;- { do_something(); }; }`\n</code></pre>\n\n<p>The message suggests that I put it in a block, but I have no idea how to do that.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518623150, "post_id": 48790820, "comment_id": 84584040, "body": "There are two (usable) <code>Write</code> traits (<code>std::io</code> and <code>std::fmt</code>)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518624310, "post_id": 48790820, "comment_id": 84584859, "body": "@Stefan: Yes. I didn&#39;t feel like calling it out explicitly since it&#39;s mentioned in the <code>write!</code> macro documentation that I linked, but since you felt the need for it, it now is :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1518624241, "last_edit_date": 1518624241, "creation_date": 1518622392, "answer_id": 48790820, "question_id": 48790708, "link": "https://stackoverflow.com/questions/48790708/how-to-efficiently-push-displayable-item-into-string/48790820#48790820", "title": "How to efficiently push displayable item into String?", "body": "<p>There are multiple formatting macros, and in your case you want the <a href=\"https://doc.rust-lang.org/1.13.0/std/macro.write.html\" rel=\"nofollow noreferrer\"><code>write!</code></a> macro:</p>\n\n<pre><code>use std::fmt::{Display, Write};\n\nfn concat&lt;T: Display&gt;(s: &amp;mut String, thing: &amp;T) {\n    write!(s, \"{}\", thing).unwrap();\n}\n\nfn main() {\n    let mut s = \"Hello \".into();\n    concat(&amp;mut s, &amp;42);\n\n    assert_eq!(&amp;s, \"Hello 42\");\n}\n</code></pre>\n\n<p>Anything that implements one of the <code>Write</code> trait (and <code>String</code> does) is a valid target for <code>write!</code>.</p>\n\n<p><em>Note: actually anything that implements a <code>write_fmt</code> method, as macro don't care much about semantics; which is why either <code>fmt::Write</code> or <code>io::Write</code> work.</em></p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 308, "favorite_count": 0, "closed_date": 1518623222, "accepted_answer_id": 48790820, "answer_count": 1, "score": 3, "last_activity_date": 1518624241, "creation_date": 1518622061, "question_id": 48790708, "link": "https://stackoverflow.com/questions/48790708/how-to-efficiently-push-displayable-item-into-string", "closed_reason": "Duplicate", "title": "How to efficiently push displayable item into String?", "body": "<p>See this example:</p>\n\n<pre><code>fn concat&lt;T: std::fmt::Display&gt;(s: &amp;mut String, thing: T) {\n    // TODO\n}\n\nfn main() {\n    let mut s = \"Hello \".into();\n    concat(&amp;mut s, 42);\n\n    assert_eq!(&amp;s, \"Hello 42\");\n}\n</code></pre>\n\n<p>I know that I can use this:</p>\n\n<pre><code>s.push_str(&amp;format!(\"{}\", thing))\n</code></pre>\n\n<p>but this is not the most efficient, because <code>format!</code> allocate a <code>String</code> that is not necessary.</p>\n\n<p>The most efficient is to write directly the string representation of the displayable item into the <code>String</code> buffer. How to do this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518616552, "post_id": 48788257, "comment_id": 84579484, "body": "I don&#39;t think you need <code>assert_32_bit</code> -- if you try to compile the <code>i32</code>-using wrapper on a platform where <code>int</code> is 64 bits, won&#39;t that be a compile error by itself?"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518617215, "post_id": 48788257, "comment_id": 84579921, "body": "@trentcl you are right, but in your case you will get N errors for every place where <code>i32</code> is not <code>c_int</code>. On the other hand, we can place <code>assert_32_bit</code> in one single place, such as <code>build.rs</code> and have just one self-descriptive error, before even trying to build anything :)"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1518616092, "creation_date": 1518616092, "answer_id": 48788769, "question_id": 48788257, "link": "https://stackoverflow.com/questions/48788257/should-library-expose-c-int-to-consumers-or-force-i32-compatibility/48788769#48788769", "title": "Should library expose c_int to consumers or force i32 compatibility", "body": "<p>I don't think there <em>is</em> anything remotely like an \"official\" position on this.  What follows is opinion... perhaps suggesting this question isn't suitable for SO in the first place.</p>\n\n<p>If the correct type is <code>c_int</code>, use <code>c_int</code>.  Rust programmers shouldn't be so very fragile that they curl into the fetal position just because you use a C type in an interface <em>to a C/C++ library</em>.</p>\n\n<p>Ask yourself this: do your users <strong>benefit</strong> from you locking out any and all potential platforms where <code>c_int</code> is not <code>i32</code> (<em>e.g.</em> embedded platforms)?</p>\n\n<p>If the answer is \"they don't\", then don't do it.  If they <em>do</em> benefit somehow, well, you'll have to weigh that against locking out platforms yourself.  Maybe the use of <code>c_int</code> imposes some kind of wider interface issue.</p>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 0, "accepted_answer_id": 48788769, "answer_count": 1, "score": 4, "last_activity_date": 1518616092, "creation_date": 1518614438, "question_id": 48788257, "link": "https://stackoverflow.com/questions/48788257/should-library-expose-c-int-to-consumers-or-force-i32-compatibility", "title": "Should library expose c_int to consumers or force i32 compatibility", "body": "<p>I'm writing a simple Rust wrapper over C++ library. And this library is written using native <code>int</code> type. And I don't know what's the best approach to expose these API via rust. Here we have two considerations:</p>\n\n<ol>\n<li><p>Library is just a wrapper over C++ code and it's not our responsability to check <code>int</code> size. Thus, just expose <code>c_int</code> in our high level interfaces.</p></li>\n<li><p>High level interfaces <em>must</em> use native Rust types such as <code>i32</code> so we use it everywhere while statically checking that <code>int</code> is <code>i32</code> via some healthcheck like</p></li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[allow(unused)]\nfn assert_32_bit() {\n    let _: c_int = 0_i32;\n}\n</code></pre>\n\n<p>The latter just forbid user to use this library anywhere <code>int</code> is not <code>i32</code>.</p>\n\n<p>I have read nomicon opinion about this problem (<a href=\"https://doc.rust-lang.org/beta/nomicon/ffi.html\" rel=\"nofollow noreferrer\">link</a>), and its opinion is:</p>\n\n<blockquote>\n  <p>The raw C API needs to be wrapped to provide memory safety and make\n  use of higher-level concepts like vectors.</p>\n</blockquote>\n\n<p>But all examples with <code>safe wrappers</code> are using <code>int32_t</code> and similar types, that  are easy to map on <code>Rust</code> type system.</p>\n\n<p>Which approach should I take, and why? What's the official community position about this question?</p>\n\n<p>For example, here is sample C++ function:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>int sum(int a, int b);\n</code></pre>\n\n<p>Should I write</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn high_level_api_sum(a: c_int, b: c_int) { unsafe {sum(a, b)} }\n</code></pre>\n\n<p>or </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn high_level_api_sum(a: i32, b: i32) { unsafe {sum(a, b)} }\n\n#[allow(unused)]\nfn assert_32_bit() {\n    let _: c_int = 0_i32;\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 64, "user_id": 5875980, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2dccd33d45f17c2e51781719d7142e8?s=128&d=identicon&r=PG&f=1", "display_name": "Peng Guanwen", "link": "https://stackoverflow.com/users/5875980/peng-guanwen"}, "edited": false, "score": 0, "creation_date": 1518618393, "post_id": 48788138, "comment_id": 84580759, "body": "But in that way the items will be evaluated one by one, rather than simultaneously. Is there a <code>Stream</code> version of <code>futures_unordered</code>?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 64, "user_id": 5875980, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2dccd33d45f17c2e51781719d7142e8?s=128&d=identicon&r=PG&f=1", "display_name": "Peng Guanwen", "link": "https://stackoverflow.com/users/5875980/peng-guanwen"}, "edited": false, "score": 2, "creation_date": 1518622063, "post_id": 48788138, "comment_id": 84583369, "body": "@PengGuanwen your requirement is not clear.  You wanted a <code>Stream</code> of items that are produced by the inner streams.  How could anything be delivered &quot;simultaneously&quot;?"}, {"owner": {"reputation": 64, "user_id": 5875980, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2dccd33d45f17c2e51781719d7142e8?s=128&d=identicon&r=PG&f=1", "display_name": "Peng Guanwen", "link": "https://stackoverflow.com/users/5875980/peng-guanwen"}, "edited": false, "score": 1, "creation_date": 1518661044, "post_id": 48788138, "comment_id": 84600993, "body": "I need an unordered buffered <code>Stream</code>. When you combine an <code>Iterator</code> of <code>Future</code>s, you can use either <code>stream::futures_ordered</code> or <code>stream::futures_unordered</code>, and if you use the latter, the <code>Stream</code> will produce value whenever one of the <code>Future</code>s is available. When you have an <code>Stream</code> of <code>Future</code>s, you can use <code>stream::Stream::buffer_unordered</code> to achieve this. But in my case, a <code>Iterator</code> of <code>Stream</code>s is hard to combine that way. I can&#39;t figure out the reason."}], "tags": [], "owner": {"reputation": 17388, "user_id": 921321, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3f4c4737cb30134f58cc76f06ef5113a?s=128&d=identicon&r=PG", "display_name": "Lukazoid", "link": "https://stackoverflow.com/users/921321/lukazoid"}, "is_accepted": false, "score": 3, "last_activity_date": 1518614047, "creation_date": 1518614047, "answer_id": 48788138, "question_id": 48785894, "link": "https://stackoverflow.com/questions/48785894/how-to-merge-iterator-of-streams/48788138#48788138", "title": "How to merge iterator of streams?", "body": "<p>An iterator may be turned into a stream using <a href=\"https://docs.rs/futures/0.1.18/futures/stream/fn.iter_ok.html\" rel=\"nofollow noreferrer\"><code>futures::stream::iter_ok</code></a>, this allows your iterator of streams to be turned into a stream of streams:</p>\n\n<pre><code>::futures::stream::iter_ok(jobs)\n</code></pre>\n\n<p>You can then flatten this stream of streams into a single stream of all items using <a href=\"https://docs.rs/futures/0.1.18/futures/stream/trait.Stream.html#method.flatten\" rel=\"nofollow noreferrer\"><code>Stream::flatten()</code></a>:</p>\n\n<pre><code>let flattened = ::futures::stream::iter_ok(jobs)\n    .flatten();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 10697, "user_id": 2456263, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a3cf0df72502fdc81fad7301b2b887d8?s=128&d=identicon&r=PG", "display_name": "0xcaff", "link": "https://stackoverflow.com/users/2456263/0xcaff"}, "edited": false, "score": 0, "creation_date": 1541962093, "post_id": 48798025, "comment_id": 93388697, "body": "It seems that there is a <a href=\"https://docs.rs/futures/0.2/futures/stream/fn.select_all.html\" rel=\"nofollow noreferrer\"><code>select_all</code></a> for streams in futures 0.2 (not stable version). It seems to be implemented without any use of <code>Box</code>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 0, "last_activity_date": 1518651868, "creation_date": 1518651868, "answer_id": 48798025, "question_id": 48785894, "link": "https://stackoverflow.com/questions/48785894/how-to-merge-iterator-of-streams/48798025#48798025", "title": "How to merge iterator of streams?", "body": "<p>The <a href=\"https://docs.rs/futures/0.1.18/futures/stream/trait.Stream.html#method.select\" rel=\"nofollow noreferrer\"><code>select</code></a> combinator takes two <code>Stream</code>s and yields when one of the two streams is ready.</p>\n\n<p>In order to select from more than two streams, you can chain calls to <code>select</code>. However, since you don't know in advance the number of streams you have to select on, you'll have to box the intermediate streams in order to erase the specific <code>Stream</code> type, so that the program type-checks.</p>\n\n<pre><code>extern crate futures;\n\nuse futures::Stream;\n\nfn select_all&lt;'a, I, T, E&gt;(seq: I) -&gt; Box&lt;Stream&lt;Item = T, Error = E&gt; + 'a&gt;\nwhere\n    I: IntoIterator,\n    I::Item: Stream&lt;Item = T, Error = E&gt; + 'a,\n    T: 'a,\n    E: 'a,\n{\n    let mut iter = seq.into_iter();\n    let mut result = Box::new(iter.next().expect(\"got an empty list of streams\"))\n        as Box&lt;Stream&lt;Item = T, Error = E&gt;&gt;;\n    while let Some(next) = iter.next() {\n        result = Box::new(result.select(next));\n    }\n\n    result\n}\n</code></pre>\n\n<p>There's certainly a more efficient way to implement this, though. There is a <a href=\"https://docs.rs/futures/0.1.18/futures/future/fn.select_all.html\" rel=\"nofollow noreferrer\"><code>select_all</code></a> combinator for futures, but there isn't one yet for streams. Perhaps you could implement it yourself and submit it as a pull request!</p>\n"}], "owner": {"reputation": 64, "user_id": 5875980, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a2dccd33d45f17c2e51781719d7142e8?s=128&d=identicon&r=PG&f=1", "display_name": "Peng Guanwen", "link": "https://stackoverflow.com/users/5875980/peng-guanwen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1131, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1518661734, "creation_date": 1518607063, "last_edit_date": 1518661734, "question_id": 48785894, "link": "https://stackoverflow.com/questions/48785894/how-to-merge-iterator-of-streams", "title": "How to merge iterator of streams?", "body": "<p>I'm writing a program that scrapes links from <a href=\"https://www.oxfordlearnersdictionaries.com/wordlist/english/oxford3000/\" rel=\"nofollow noreferrer\">oxfordlearnersdictionaries.com</a> using Rust. I'm using <code>hyper</code> and <code>futures</code>.</p>\n\n<p>I have a collection of links to each section and use <code>stream::unfold</code> to construct access to each page:</p>\n\n<pre><code>// Returns the links scraped, and probably Uri to the next page.\nfn process_body_and_return_next(body: Body) -&gt; (Vec&lt;String&gt;, Option&lt;Uri&gt;) { ... }\n\n// In main()\nlet mut core = Core::new().unwrap();\nlet handle = core.handle();\nlet client = Client::new(&amp;handle);\nlet uris = ...\n\nlet jobs = uris.map(|uri| {\n    stream::unfold(Some(uri), |uri| {\n        uri.map(|uri| {\n            client\n                .get(uri)\n                .and_then(|res| res.body().concat2())\n                .map(process_body_and_return_next)\n        })\n    })\n});\n</code></pre>\n\n<p>Now I've got a <code>impl Iterator&lt;Item = impl Stream&lt;Item = Vec&lt;String&gt;&gt;&gt;</code>. How can I merge it to a single <code>Stream</code> of <code>Vec</code>s, like using <code>stream::futures_unordered</code> to merge <code>Future</code>s?</p>\n\n<hr>\n\n<p>Edit: I tried combine <code>stream::iter_ok</code> and <code>stream::Stream::flatten</code>:</p>\n\n<pre><code>let flattened = ::futures::stream::iter_ok(jobs)\n    .flatten();\n</code></pre>\n\n<p>But that's not efficient since I want to send several web request asynchronously. The combined <code>Stream</code> should produce value whenever a inner <code>Stream</code> is ready.</p>\n"}, {"tags": ["arrays", "serialization", "rust", "deserialization", "serde"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1518596697, "post_id": 48782047, "comment_id": 84566427, "body": "See also <a href=\"https://stackoverflow.com/questions/44468386/how-do-i-map-a-c-struct-with-padding-over-32-bytes-using-serde-and-bincode\" title=\"how do i map a c struct with padding over 32 bytes using serde and bincode\">stackoverflow.com/questions/44468386/&hellip;</a>."}], "answers": [{"comments": [{"owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1546002642, "post_id": 48976823, "comment_id": 94755792, "body": "Could you explain how come this solution doesn&#39;t suffer from the error: <code>type parameter ``T`` must be used as the type parameter for some local type</code>? Because T could be anything here, so I thought <code>for [T; $len]</code> should fail (it doesn&#39;t fail, the solution is valid)"}, {"owner": {"reputation": 28979, "user_id": 266720, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/7c9333e1816aefc7fc97f64b09afe05c?s=128&d=identicon&r=PG", "display_name": "Vi.", "link": "https://stackoverflow.com/users/266720/vi"}, "edited": false, "score": 0, "creation_date": 1580417535, "post_id": 48976823, "comment_id": 106101181, "body": "<code>for ... { seq.serialize_element ... }</code> -&gt; Will it be properly inlined and optimized, or do something byte by byte? Can it be somehow done with <code>serialize_bytes</code>?"}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 11, "last_activity_date": 1519582598, "creation_date": 1519582598, "answer_id": 48976823, "question_id": 48782047, "link": "https://stackoverflow.com/questions/48782047/how-do-i-use-serde-to-deserialize-arrays-greater-than-32-elements-such-as-u8/48976823#48976823", "title": "How do I use Serde to (de)serialize arrays greater than 32 elements, such as [u8; 128]?", "body": "<p>Currently there is no way for Serde to provide <code>Serialize</code> and <code>Deserialize</code> impls that work for <strong>every</strong> array size. This is blocked on <a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"noreferrer\">const generics</a> which is being worked on and will hopefully land in nightly later in 2018.</p>\n\n<p>For now you can define your own \"big array\" helper that can serialize and deserialize arrays of any specific sizes used in your crate. Fields for which you want to use the big array helper will need to be tagged with <code>#[serde(with = \"BigArray\")]</code> or else Serde will look for non-existent <code>Serialize</code> and <code>Deserialize</code> impls.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\n\nextern crate serde;\nextern crate bincode;\n\nmod big_array;\nuse big_array::BigArray;\n\nconst BYTECOUNT: usize = 128;\ntype DataArr = [u8; BYTECOUNT];\n\n#[derive(Serialize, Deserialize)]\nstruct Entry {\n    number: i64,\n    #[serde(with = \"BigArray\")]\n    data: DataArr\n}\n\nfn main() {\n    let mut my_entry = Entry { number: 12345, data: [0; BYTECOUNT] };\n    my_entry.data[4] = 42;\n\n    // Convert the Entry to binary.\n    let serialized: Vec&lt;u8&gt; = bincode::serialize(&amp;my_entry).unwrap();\n    println!(\"serialized = {:?}\", serialized);\n\n    // Convert the binary representation back to an Entry.\n    let deserialized: Entry = bincode::deserialize(&amp;serialized).unwrap();\n    println!(\"deserialized = {} {:?}\", deserialized.number, &amp;deserialized.data[..]);\n}\n</code></pre>\n\n<p>The big array helper can be defined in <code>src/big_array.rs</code> as follows. Maybe this would make a good crate by itself if you would like to own it!</p>\n\n<pre><code>use std::fmt;\nuse std::marker::PhantomData;\nuse serde::ser::{Serialize, Serializer, SerializeTuple};\nuse serde::de::{Deserialize, Deserializer, Visitor, SeqAccess, Error};\n\npub trait BigArray&lt;'de&gt;: Sized {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n        where S: Serializer;\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;Self, D::Error&gt;\n        where D: Deserializer&lt;'de&gt;;\n}\n\nmacro_rules! big_array {\n    ($($len:expr,)+) =&gt; {\n        $(\n            impl&lt;'de, T&gt; BigArray&lt;'de&gt; for [T; $len]\n                where T: Default + Copy + Serialize + Deserialize&lt;'de&gt;\n            {\n                fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n                    where S: Serializer\n                {\n                    let mut seq = serializer.serialize_tuple(self.len())?;\n                    for elem in &amp;self[..] {\n                        seq.serialize_element(elem)?;\n                    }\n                    seq.end()\n                }\n\n                fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;[T; $len], D::Error&gt;\n                    where D: Deserializer&lt;'de&gt;\n                {\n                    struct ArrayVisitor&lt;T&gt; {\n                        element: PhantomData&lt;T&gt;,\n                    }\n\n                    impl&lt;'de, T&gt; Visitor&lt;'de&gt; for ArrayVisitor&lt;T&gt;\n                        where T: Default + Copy + Deserialize&lt;'de&gt;\n                    {\n                        type Value = [T; $len];\n\n                        fn expecting(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n                            formatter.write_str(concat!(\"an array of length \", $len))\n                        }\n\n                        fn visit_seq&lt;A&gt;(self, mut seq: A) -&gt; Result&lt;[T; $len], A::Error&gt;\n                            where A: SeqAccess&lt;'de&gt;\n                        {\n                            let mut arr = [T::default(); $len];\n                            for i in 0..$len {\n                                arr[i] = seq.next_element()?\n                                    .ok_or_else(|| Error::invalid_length(i, &amp;self))?;\n                            }\n                            Ok(arr)\n                        }\n                    }\n\n                    let visitor = ArrayVisitor { element: PhantomData };\n                    deserializer.deserialize_tuple($len, visitor)\n                }\n            }\n        )+\n    }\n}\n\nbig_array! {\n    40, 48, 50, 56, 64, 72, 96, 100, 128, 160, 192, 200, 224, 256, 384, 512,\n    768, 1024, 2048, 4096, 8192, 16384, 32768, 65536,\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 37702, "user_id": 129805, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/F1gxS.png?s=128&g=1", "display_name": "fadedbee", "link": "https://stackoverflow.com/users/129805/fadedbee"}, "is_accepted": false, "score": 0, "last_activity_date": 1618203340, "creation_date": 1618203340, "answer_id": 67052854, "question_id": 48782047, "link": "https://stackoverflow.com/questions/48782047/how-do-i-use-serde-to-deserialize-arrays-greater-than-32-elements-such-as-u8/67052854#67052854", "title": "How do I use Serde to (de)serialize arrays greater than 32 elements, such as [u8; 128]?", "body": "<p>I think this is just waiting on <a href=\"https://github.com/serde-rs/serde/issues/1937\" rel=\"nofollow noreferrer\">const generics support</a> in Serde.</p>\n"}], "owner": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2069, "favorite_count": 0, "accepted_answer_id": 48976823, "answer_count": 2, "score": 14, "last_activity_date": 1618203340, "creation_date": 1518594307, "last_edit_date": 1593550414, "question_id": 48782047, "link": "https://stackoverflow.com/questions/48782047/how-do-i-use-serde-to-deserialize-arrays-greater-than-32-elements-such-as-u8", "title": "How do I use Serde to (de)serialize arrays greater than 32 elements, such as [u8; 128]?", "body": "<p>I have a struct containing a byte array that I would like to serialize and deserialize to and from binary, but it only works for arrays <a href=\"https://github.com/serde-rs/serde/blob/v1.0.114/serde/src/de/impls.rs#L1050-L1083\" rel=\"nofollow noreferrer\">up to 32 elements</a>.</p>\n<p>Here is my minimal example code</p>\n<p><strong>main.rs</strong>:</p>\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde;\nextern crate bincode;\n\nuse bincode::{serialize, deserialize, Infinite};\n\nconst BYTECOUNT: usize = 32; // 33 and more does not work, I need 128\ntype DataArr = [u8; BYTECOUNT];\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Entry {\n    number: i64,\n    data: DataArr\n}\n\nfn main() {\n    let mut my_entry = Entry { number: 12345, data: [0; BYTECOUNT] };\n    my_entry.data[4] = 42;\n\n    // Convert the Entry to binary.\n    let serialized: Vec&lt;u8&gt; = serialize(&amp;my_entry, Infinite).unwrap();\n    println!(&quot;serialized = {:?}&quot;, serialized);\n\n    // Convert the binary representation back to an Entry.\n    let deserialized: Entry = deserialize(&amp;serialized).unwrap();\n    println!(&quot;deserialized = {:?}&quot;, deserialized);\n}\n</code></pre>\n<p><code>Cargo.toml</code>:</p>\n<pre><code>[package]\nname = &quot;array_serialization_test&quot;\nversion = &quot;0.1.0&quot;\n\n[dependencies]\nserde = &quot;*&quot;\nserde_derive = &quot;*&quot;\nbincode = &quot;*&quot;\n</code></pre>\n<p>output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>serialized = [57, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndeserialized = Entry { number: 12345, data: [0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] \n</code></pre>\n<p>How can I make it work for 128 elements in the array? Can I  somehow manually extend <code>array_impls!</code> in my user code? Is there an alternative approach?</p>\n<p>I think this question is different from <a href=\"https://stackoverflow.com/questions/44468386/how-do-i-map-a-c-struct-with-padding-over-32-bytes-using-serde-and-bincode\">How do I map a C struct with padding over 32 bytes using serde and bincode?</a> because I actually need the content of the array, since it is not just used for padding. Also I would like to know if I can extend <code>array_impls!</code> on my code.</p>\n"}, {"tags": ["regex", "rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 6, "creation_date": 1518568097, "post_id": 48777856, "comment_id": 84557326, "body": "<a href=\"https://stackoverflow.com/a/1732454/234590\">Please, don&#39;t use regular expressions to parse XML.</a> (That answer is about HTML, but the same reasoning applies to XML.)"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518568274, "post_id": 48777856, "comment_id": 84557375, "body": "Did you compile in release mode (<code>cargo run --release</code>)?"}, {"owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518568462, "post_id": 48777856, "comment_id": 84557440, "body": "Fair point on regex with XML, this was just convenient data to learn rust with regex with. Release mode made it run in 1.72 seconds, which is a vast improvement.  Is the line with map doing something inefficient? This was pulled together from a few examples, so it wasn&#39;t well thought out."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518568688, "post_id": 48777856, "comment_id": 84557499, "body": "Try wrapping your <code>File</code> in a <a href=\"https://doc.rust-lang.org/stable/std/io/struct.BufReader.html\" rel=\"nofollow noreferrer\"><code>BufReader</code></a>."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518569561, "post_id": 48777856, "comment_id": 84557748, "body": "Is the regex <code>&quot;url=\\&quot;(?P&lt;url&gt;[^\\&quot;]+)\\&quot;&quot;</code> faster?"}, {"owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518569692, "post_id": 48777856, "comment_id": 84557780, "body": "I just independently came up with the same regex :) Unfortunately it seems to be around the same speed. It seems like the regex is the bottleneck, reading the data from the file seems to be very fast, as expected."}, {"owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518569771, "post_id": 48777856, "comment_id": 84557803, "body": "I tried this code, and it seems like it is the actual regex processing which is slow, not map etc:  let mut counter = 0; for cap in re.captures_iter(&amp;contents) {      counter += 1 }"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1518570167, "post_id": 48777856, "comment_id": 84557919, "body": "Please provide enough details so that other people can reproduce your problem. This includes your Python program and data."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518574787, "post_id": 48777856, "comment_id": 84559025, "body": "Please <i>do</i> use <a href=\"https://crates.io/crates/sxd-document\" rel=\"nofollow noreferrer\">my crate, sxd-document</a>, to parse XML. ;-)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518575038, "post_id": 48777856, "comment_id": 84559085, "body": "Please don&#39;t respond with vital information in comments; instead, <a href=\"https://stackoverflow.com/posts/48777856/edit\">edit</a> your question to include the requested feedback. Comments are ephemeral (may be deleted at any time) and it&#39;s <i>really</i> hard to read code in them (on purpose)."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1518576651, "post_id": 48777856, "comment_id": 84559441, "body": "Your Python program is not doing equivalent work. It is merely counting matches. The Rust program isn&#39;t just getting matches, but collecting all instances of a specific capture group into a vec. You also don&#39;t include the timing information for your Python program."}, {"owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "edited": false, "score": 0, "creation_date": 1518579648, "post_id": 48777856, "comment_id": 84560195, "body": "The python program is generating a set of the strings of all matches, which is then being counted, but the set does exist in memory. It takes 0.47 seconds to run.  This is equivalent and takes the same time to run:  urls = set(re.findall(&#39;url=&quot;(.+?)&quot;&#39;, data)); print len(urls)"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1518642637, "post_id": 48777856, "comment_id": 84594976, "body": "No, it is most certainly <i>not</i> equivalent. The Rust program is extracting a capture group, but your Python program doesn&#39;t. This Rust program does the equivalent work of your Python program, and is faster: <a href=\"https://gist.github.com/anonymous/4936167a5ee28bb66b345f5642a3bdf8\" rel=\"nofollow noreferrer\">gist.github.com/anonymous/4936167a5ee28bb66b345f5642a3bdf8</a> --- With that said, adding the capturing group code to the Python program doesn&#39;t impact its runtime significantly. I&#39;ll elaborate in a proper answer."}], "answers": [{"comments": [{"owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "edited": false, "score": 1, "creation_date": 1518649056, "post_id": 48796391, "comment_id": 84597777, "body": "Thank you for your response, apologies for misunderstanding what you meant by capture group. With your first answer example, the rust program is now 3x faster than the python program for me.  Thanks again"}], "tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": true, "score": 6, "last_activity_date": 1518643120, "creation_date": 1518643120, "answer_id": 48796391, "question_id": 48777856, "link": "https://stackoverflow.com/questions/48777856/regexcaptures-iter-on-an-xml-file-is-slower-than-expected/48796391#48796391", "title": "Regex::captures_iter on an XML file is slower than expected", "body": "<p>The answer to your question is that the Rust code you've written is optimal with respect to standard usage of the regex crate. The reason why it's a little bit slower than Python here (about 3x slower on my machine) is because resolving capturing groups hasn't received much optimization attention in Rust's regex crate. In particular, resolving capture groups requires running a slower internal regex engine.</p>\n\n<p>In the question as stated today, do note though that your Python program isn't doing equivalent work because all it's doing is collecting the matches and counting them. The Rust program is actually extracting a capture group, which is more work. For example, if you use this instead:</p>\n\n<pre><code>let urls: Vec&lt;&amp;str&gt; = re.find_iter(&amp;contents).map(|m| m.as_str()).collect();\n</code></pre>\n\n<p>then the Rust program is doing the same work as the Python program, and it is about 2x faster on my machine. Now, to be fair, if you modify the Python program to do the same work as your original Rust program, i.e.,</p>\n\n<pre><code>urls = set(m.group('url') for m in re.finditer('url=\"(?P&lt;url&gt;.+?)\"', data))\n</code></pre>\n\n<p>then the Python program only gets a little slower, and the original Rust program is still noticeably slower as explained above.</p>\n\n<p>If, instead of waiting for the regex crate to better optimize capture handling, you'd like to make your program run more quickly today, then you can exploit a particular feature of your regex. That is, avoid asking for a capture group and just extract the URL from the matched text directly. Like so:</p>\n\n<pre><code>let urls: Vec&lt;&amp;str&gt; = re\n    .find_iter(&amp;contents)\n    .map(|m| {\n        let text = m.as_str();\n        &amp;text[5..text.len() - 1]\n    })\n    .collect();\n</code></pre>\n\n<p>This runs as fast as my modification above, which is about 2x faster than Python. Not ideal, but it's something.</p>\n"}], "owner": {"reputation": 1583, "user_id": 964375, "user_type": "registered", "accept_rate": 39, "profile_image": "https://www.gravatar.com/avatar/38430929bc031983e074dafea21b3d88?s=128&d=identicon&r=PG", "display_name": "user964375", "link": "https://stackoverflow.com/users/964375/user964375"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 306, "favorite_count": 0, "accepted_answer_id": 48796391, "answer_count": 1, "score": 2, "last_activity_date": 1518643120, "creation_date": 1518567945, "last_edit_date": 1518580121, "question_id": 48777856, "link": "https://stackoverflow.com/questions/48777856/regexcaptures-iter-on-an-xml-file-is-slower-than-expected", "title": "Regex::captures_iter on an XML file is slower than expected", "body": "<p>One of my first minor Rust projects involves running a regex on a large XML file:</p>\n\n<pre><code>extern crate regex;\n\nuse regex::Regex;\nuse std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let filename = \"data.xml\";\n    let mut f = File::open(filename).expect(\"file not found\");\n\n    let mut contents = String::new();\n    f.read_to_string(&amp;mut contents)\n        .expect(\"something went wrong reading the file\");\n\n    let re = Regex::new(\"url=\\\"(?P&lt;url&gt;.+?)\\\"\").unwrap();\n    let urls: Vec&lt;&amp;str&gt; = re.captures_iter(&amp;contents)\n        .map(|c| c.name(\"url\").unwrap().as_str())\n        .collect();\n\n    println!(\"{}\", urls.len());\n}\n</code></pre>\n\n<p>I am sure I am doing something very inefficient:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>time ./target/release/hello_cargo 144408 ./target/release/hello_cargo\n1.60s user\n0.03s system\n99% cpu\n1.643 total \n</code></pre>\n\n<p>It seems unusual that 99% of the CPU usage is by system.</p>\n\n<p>Python 2.7 does the same job in far less than a second:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import re \ndata = open('data.xml').read()\nurls = set(re.findall('url=\"(.+?)\"', data))\nprint len(urls)\n</code></pre>\n\n<p>Using a <code>BufReader</code> like this doesn't seem to change performance:</p>\n\n<pre><code>let f = File::open(filename).expect(\"file not found\");\nlet mut reader = BufReader::new(f);\nlet mut contents = String::new();\nreader\n    .read_to_string(&amp;mut contents)\n    .expect(\"something went wrong reading the file\");\n</code></pre>\n\n<p>If you'd like to try it locally, this is <a href=\"https://www.dropbox.com/s/778fy6k91z496gi/data.xml.zip?dl=1\" rel=\"nofollow noreferrer\">the zipped XML file</a>.</p>\n\n<p>What am I doing inefficiently?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 15, "last_activity_date": 1596475120, "last_edit_date": 1596475120, "creation_date": 1518564247, "answer_id": 48777304, "question_id": 48777194, "link": "https://stackoverflow.com/questions/48777194/can-i-find-out-if-a-filtered-iterator-is-empty/48777304#48777304", "title": "Can I find out if a filtered iterator is empty?", "body": "<p>You can make your iterator <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.peekable\" rel=\"noreferrer\"><code>peekable</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/iter/struct.Peekable.html#method.peek\" rel=\"noreferrer\"><code>peek</code></a> the first item; if it's <code>None</code>, then the iterator is empty. <code>peek</code> doesn't consume the item<sup>1</sup>, so the next call to <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#tymethod.next\" rel=\"noreferrer\"><code>next</code></a> will return it. However, <code>peekable</code> consumes the iterator, so you'll have to pass the <code>Peekable</code> around \u2014 but <code>Peekable</code> is also an <code>Iterator</code>, so if your code expects an <code>Iterator</code> or an <code>IntoIterator</code>, it'll work fine.</p>\n<pre><code>let filt_it = a_vector.iter().filter(|x| condition_on_x).peekable();\nif filt_it.peek().is_some() {\n    // The iterator is not empty, process it.\n    process(filt_it);\n}\n</code></pre>\n<hr />\n<p>Another option is to clone the iterator, call <code>next</code> once on the cloned iterator; again, if the result is <code>None</code>, then the iterator is empty. Then, you can process the original iterator, which will yield the first item again.</p>\n<p>This option might not always work; not all iterators can be cloned. However, <a href=\"https://doc.rust-lang.org/stable/std/iter/struct.Filter.html#impl-Clone\" rel=\"noreferrer\"><code>Filter</code> implements <code>Clone</code></a> when both the iterator and the predicate function are <code>Clone</code>. <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1260-2018-05-10\" rel=\"noreferrer\">Starting with Rust 1.26.0</a>, closures implement <code>Clone</code> when possible (before 1.26.0, closures would never implement <code>Clone</code>).</p>\n<p>Also, this option is probably not viable if the iterator has a side effect, since the side effect may occur twice, or if the iterator is not deterministic, as both copies of the iterator may yield different results.</p>\n<hr />\n<p><sup>1</sup> If you call <code>peekable</code> with a <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.by_ref\" rel=\"noreferrer\">mutable reference to your iterator</a>, you can actually keep the original iterator around after dropping the <code>Peekable</code>. However, if you had called <code>peek</code> before dropping the <code>Peekable</code>, you'll see that it actually consumed the first item in the original iterator. That's completely normal; <code>Iterator</code> itself doesn't provide an interface for peeking. <code>Peekable</code> will store the peeked-at item so it can return it in the following call to <code>next</code>, but if you drop the <code>Peekable</code>, then that stored item will also be dropped.</p>\n"}], "owner": {"reputation": 706, "user_id": 7595633, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/084d26f8f90cdf209f682e0c31d999e5?s=128&d=identicon&r=PG&f=1", "display_name": "SquattingSlavInTracksuit", "link": "https://stackoverflow.com/users/7595633/squattingslavintracksuit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4383, "favorite_count": 0, "closed_date": 1518564361, "answer_count": 1, "score": 9, "last_activity_date": 1596475120, "creation_date": 1518563497, "last_edit_date": 1518564269, "question_id": 48777194, "link": "https://stackoverflow.com/questions/48777194/can-i-find-out-if-a-filtered-iterator-is-empty", "closed_reason": "Duplicate", "title": "Can I find out if a filtered iterator is empty?", "body": "<p>I have a filtered iterator like so:</p>\n\n<pre><code>let filt_it = a_vector.iter().filter(|x| condition_on_x);\n</code></pre>\n\n<p>Is there a way I can find out whether it's empty?</p>\n\n<p>I need the iterator to <strong>stay an iterator</strong> for later use and it doesn't seem possible to clone filtered iterators.</p>\n"}, {"tags": ["rust", "nom"], "answers": [{"comments": [{"owner": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "edited": false, "score": 0, "creation_date": 1518587067, "post_id": 48777218, "comment_id": 84562278, "body": "thank you! I wasn&#39;t aware of <code>synom</code>. I am a little scared to use it because original <code>nom</code> has more built-in parsers and documentation and I am newbie enough that I couldn&#39;t write something like <code>take_s</code> myself (like you did). As far as I can see <code>synom::IResult::Error</code> doesn&#39;t contain error itself. Is it okay?  Actually my hole task is to parse URL like: <code>api&#47;v1&#47;rooms&#47;UUID&#47;tracks&#47;UUID</code> Is it possible with <code>synom</code>?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "edited": false, "score": 0, "creation_date": 1518602924, "post_id": 48777218, "comment_id": 84570292, "body": "I just realized <code>synom</code> isn&#39;t maintained anymore.  Maybe <a href=\"https://docs.rs/strom/0.1.1/strom/\" rel=\"nofollow noreferrer\"><code>strom</code></a> is an alternative, but it seems dead too.  Maybe I&#39;ll write my own :)  Maybe <a href=\"https://docs.rs/router/0.6.0/router/macro.router.html\" rel=\"nofollow noreferrer\"><code>router</code></a> is a solution in your case?"}, {"owner": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "edited": false, "score": 0, "creation_date": 1518605107, "post_id": 48777218, "comment_id": 84571773, "body": "Not sure <code>router</code> can be used outside of Iron. I build MQTT-based application, so, I need to parse topics and it looks like very custom logic. I have just add <code>eof!</code> to my initial version and it results in <code>Error</code>. Bad thing is that it is <code>Error(Eof)</code> and I would like in to be <code>Error(Verify)</code> or similar. Still hoping it is possible to implement using <code>nom</code>."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 2, "last_activity_date": 1518602651, "last_edit_date": 1518602651, "creation_date": 1518563615, "answer_id": 48777218, "question_id": 48774708, "link": "https://stackoverflow.com/questions/48774708/optional-field-with-strict-format/48777218#48777218", "title": "Optional field with strict format", "body": "<p>Given parsing URLs doesn't need a streaming interface you could use <a href=\"https://docs.rs/synom/0.11.3/synom/\" rel=\"nofollow noreferrer\"><code>synom</code></a> instead.  It was maintained as part of the <a href=\"https://docs.rs/syn/0.12.12/syn/\" rel=\"nofollow noreferrer\"><code>syn</code></a> crate, but is sadly not maintained anymore (it was <a href=\"https://github.com/dtolnay/syn/issues/208\" rel=\"nofollow noreferrer\">merged into <code>syn</code></a> and changed to only process rust tokens).</p>\n\n<p>Sadly <code>synom</code> doesn't provide <code>take_s!</code> and <code>eof!</code> (the latter one is going to forbid the trailing \"unparsed\" <code>123</code>), but it's easy enough to implement those.</p>\n\n<p>Using <code>eof!</code> also means you can't return an unparsed <code>\"/\"</code> (although I consider that a good thing); and the nested <code>option!</code> needs some unwrapping at the end (you could return <code>Option&lt;Option&lt;Uuid&gt;&gt;</code> instead to detect the trailing <code>\"/\"</code>).</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=7634c0c2f8a5257baeb6c62eca5205cf&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>#[macro_use]\nextern crate synom;\n\nextern crate uuid;\nuse uuid::Uuid;\n\nmacro_rules! take_s {\n    ($i:expr, $length:expr) =&gt; {{\n        let length: usize = $length;\n        if 0 == length {\n            synom::IResult::Done($i, \"\")\n        } else {\n            let mut ci = $i.char_indices().skip(length - 1);\n            match ci.next() {\n                None =&gt; synom::IResult::Error,\n                Some(_) =&gt; {\n                    match ci.next() {\n                        None =&gt; synom::IResult::Done(\"\", $i),\n                        Some((pos, _)) =&gt; {\n                            let (value, rem) = $i.split_at(pos);\n                            synom::IResult::Done(rem, value)\n                        },\n                    }\n                }\n            }\n        }\n    }};\n}\n\nmacro_rules! eof {\n    ($i:expr,) =&gt; {{\n        if $i.is_empty() {\n            synom::IResult::Done($i, ())\n        } else {\n            synom::IResult::Error\n        }\n    }};\n}\n\nnamed!(room_uuid -&gt; Option&lt;Uuid&gt;,\n    do_parse!(\n        tag!(\"rooms\") &gt;&gt;\n        id: option!(preceded!(\n            tag!(\"/\"),\n            option!(\n                switch!(map!(take_s!(36), str::parse),\n                    Ok(v) =&gt; value!(v)\n                )\n            )\n        )) &gt;&gt;\n        eof!() &gt;&gt;\n\n        (id.unwrap_or(None))\n    )\n);\n\nfn main() {\n    use synom::IResult::*;\n\n    assert_eq!(room_uuid(\"rooms\"), Done(\"\", None));\n    assert_eq!(room_uuid(\"rooms/\"), Done(\"\", None));\n    assert_eq!(\n        room_uuid(\"rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912\"),\n        Done(\n            \"\",\n            Some(Uuid::parse_str(\"e19c94cf-53eb-4048-9c94-7ae74ff6d912\").unwrap())\n        )\n    );\n    assert_eq!(room_uuid(\"rooms/123\"), Error);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "edited": false, "score": 1, "creation_date": 1518635545, "post_id": 48790344, "comment_id": 84591344, "body": "Thank you very much Mike! I also thought about using functions and not only macros but I didn&#39;t have an idea how to do it. <code>&#47;</code> as remaining part is totally not required thing to have (I just managed to parse it only this way and that is it) so no problem here. However, with <code>rooms&#47;123</code> it fails not because of wrong format but because of <code>Incomplete</code> (less than 36). Also with <code>rooms&#47;e19c94cf-53eb-4048-9c94-7ae74ff6d912-12312</code> (valid UUID and some more symbols) it succeeds with just taking 36 out of remaining. But I get the idea, I will try to improve the solution, thanks once again!"}, {"owner": {"reputation": 28753, "user_id": 371184, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cebee1b08fb960edf79a359af330391a?s=128&d=identicon&r=PG", "display_name": "Mike Cluck", "link": "https://stackoverflow.com/users/371184/mike-cluck"}, "reply_to_user": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "edited": false, "score": 0, "creation_date": 1518635905, "post_id": 48790344, "comment_id": 84591549, "body": "@Aleksey Very true. I should have made this more robust lol But I&#39;m glad I could help! Good luck!"}, {"owner": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "edited": false, "score": 1, "creation_date": 1518640643, "post_id": 48790344, "comment_id": 84593989, "body": "Looks like one can use <code>take_while_s!(|chr| nom::is_hex_digit(chr as u8) || chr == &#39;-&#39;)</code> instead of <code>take_s!(36)</code>. This way it fails with <code>Err(MapRes)</code>. Actually my use case suppose that <code>room</code> can have nested resources, e.g. <code>rooms&#47;UUID&#47;tracks&#47;UUID</code>. That is why I can&#39;t just read to the end of line."}], "tags": [], "owner": {"reputation": 28753, "user_id": 371184, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cebee1b08fb960edf79a359af330391a?s=128&d=identicon&r=PG", "display_name": "Mike Cluck", "link": "https://stackoverflow.com/users/371184/mike-cluck"}, "is_accepted": true, "score": 1, "last_activity_date": 1518621513, "last_edit_date": 1518621513, "creation_date": 1518620926, "answer_id": 48790344, "question_id": 48774708, "link": "https://stackoverflow.com/questions/48774708/optional-field-with-strict-format/48790344#48790344", "title": "Optional field with strict format", "body": "<p>I've only started working with nom myself in the last couple of weeks but I found one way of solving this. It doesn't fit exclusively within a macro but it does give the correct behavior with one modification. I swallow the <code>/</code> rather than leave it dangling after when a UUID is not given.</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\nextern crate uuid;\n\nuse std::str::FromStr;\nuse nom::IResult;\nuse uuid::Uuid;\n\nfn room_uuid(input: &amp;str) -&gt; IResult&lt;&amp;str, Option&lt;Uuid&gt;&gt; {\n    // Check that it starts with \"rooms\"\n    let res = tag_s!(input, \"rooms\");\n    let remaining = match res {\n        IResult::Incomplete(i) =&gt; return IResult::Incomplete(i),\n        IResult::Error(e) =&gt; return IResult::Error(e),\n        IResult::Done(i, _) =&gt; i\n    };\n\n    // If a slash is not present, return early\n    let optional_slash = opt!(remaining, tag_s!(\"/\"));\n    let remaining = match optional_slash {\n        IResult::Error(_) |\n        IResult::Incomplete(_) =&gt; return IResult::Done(remaining, None),\n        IResult::Done(i, _) =&gt; i\n    };\n\n    // If something follows a slash, make sure\n    // it's a valid UUID\n    if remaining.len() &gt; 0 {\n        let res = complete!(remaining, map_res!(take_s!(36), FromStr::from_str));\n        match res {\n            IResult::Done(i, o) =&gt; IResult::Done(i, Some(o)),\n            IResult::Error(e) =&gt; IResult::Error(e),\n            IResult::Incomplete(n) =&gt; IResult::Incomplete(n)\n        }\n    } else {\n        // This branch allows for \"rooms/\"\n        IResult::Done(remaining, None)\n    }\n}\n\n#[test]\nfn match_room_plus_uuid() {\n    use nom::IResult::*;\n\n    assert_eq!(room_uuid(\"rooms\"), Done(\"\", None));\n    assert_eq!(room_uuid(\"rooms/\"), Done(\"\", None));\n    assert_eq!(room_uuid(\"rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912\"), Done(\"\", Some(Uuid::parse_str(\"e19c94cf-53eb-4048-9c94-7ae74ff6d912\").unwrap())));\n    assert!(room_uuid(\"rooms/123\").is_err());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 1, "last_activity_date": 1518648171, "creation_date": 1518648171, "answer_id": 48797438, "question_id": 48774708, "link": "https://stackoverflow.com/questions/48774708/optional-field-with-strict-format/48797438#48797438", "title": "Optional field with strict format", "body": "<p>Ok, so I got it working with <code>nom</code> and the extended URL format <code>api/v1/rooms/UUID/tracks/UUID</code>.</p>\n\n<p>The basics are the same as before: you want to check for <code>eof</code>, ignore trailing <code>\"/\"</code> and never wait for incomplete results (<code>alt_complete!</code> is doing a good job here).</p>\n\n<p>Regarding your <code>ErrorKind::Verify</code> wish: I don't think the error kind is actually important, just ignore it, or map it to whatever you want manually.</p>\n\n<p>Be careful with the <code>alt_complete!</code> branches: in case of overlaps the preferred option (usually the \"longer one\") should come first.</p>\n\n<p>I like my <code>with!</code> helper, but you could also inline it.</p>\n\n<p>Playground doesn't support <code>nom</code>, so no link this time.</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\n\nextern crate uuid;\nuse uuid::Uuid;\n\nnamed!(uuid&lt;&amp;str, Uuid&gt;, preceded!(\n    tag_s!(\"/\"),\n    map_res!(take_s!(36), str::parse)\n));\n\n#[derive(Clone, PartialEq, Eq, Debug)]\nenum ApiRequest {\n    Rooms,\n    Room { room: Uuid },\n    Tracks { room: Uuid },\n    Track { room: Uuid, track: Uuid },\n}\n\n/// shortcut for: `do_parse!(name: expr &gt;&gt; r: otherexpr &gt;&gt; (r))`\n///\n/// `otherexpr` should use `name`, otherwise you could just use `preceded!`.\nmacro_rules! with {\n    ($i:expr, $var:ident: $submac:ident!( $($args:tt)* ) &gt;&gt; $($rest:tt)*) =&gt; {\n        do_parse!($i, $var: $submac!($($args)*) &gt;&gt; r: $($rest)* &gt;&gt; (r));\n    };\n    ($i:expr, $var:ident: $submac:ident &gt;&gt; $($rest:tt)*) =&gt; {\n        do_parse!($i, $var: $submac &gt;&gt; r: $($rest)* &gt;&gt; (r));\n    };\n}\n\n// /api/v1/rooms/UUID/tracks/UUID\nnamed!(apiv1&lt;&amp;str, ApiRequest&gt;, preceded!(tag_s!(\"/api/v1\"),\n    alt_complete!(\n        preceded!(tag_s!(\"/rooms\"), alt_complete!(\n            with!(room: uuid &gt;&gt; alt_complete!(\n                preceded!(tag_s!(\"/tracks\"), alt_complete!(\n                    with!(track: uuid &gt;&gt; alt_complete!(\n                        // ... sub track requests?\n                        value!(ApiRequest::Track{room, track})\n                    ))\n                    |\n                    value!(ApiRequest::Tracks{room})\n                ))\n                // other room requests\n                |\n                value!(ApiRequest::Room{room})\n            ))\n            |\n            value!(ApiRequest::Rooms)\n        ))\n        // | ... other requests\n    )\n));\n\nnamed!(api&lt;&amp;str, ApiRequest&gt;, terminated!(\n    alt_complete!(\n        apiv1\n        // | ... other versions\n        // also could wrap in new enum like:\n        //     apiv1 =&gt; { ApiRequest::V1 }\n        //     |\n        //     apiv2 =&gt; { ApiRequest::V2 }\n    ),\n    tuple!(\n        alt_complete!(tag_s!(\"/\") | value!(\"\")), // ignore trailing \"/\"\n        eof!() // make sure full URL was parsed\n    )\n));\n\nfn main() {\n    use nom::IResult::*;\n    use nom::ErrorKind;\n\n    let room = Uuid::parse_str(\"e19c94cf-53eb-4048-9c94-7ae74ff6d912\").unwrap();\n    let track = Uuid::parse_str(\"83d235e8-03cd-420d-a8c6-6e42440a5573\").unwrap();\n\n    assert_eq!(api(\"/api/v1/rooms\"), Done(\"\", ApiRequest::Rooms));\n    assert_eq!(api(\"/api/v1/rooms/\"), Done(\"\", ApiRequest::Rooms));\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912\"),\n        Done(\"\", ApiRequest::Room { room })\n    );\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/\"),\n        Done(\"\", ApiRequest::Room { room })\n    );\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/tracks\"),\n        Done(\"\", ApiRequest::Tracks { room })\n    );\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/tracks/\"),\n        Done(\"\", ApiRequest::Tracks { room })\n    );\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/tracks/83d235e8-03cd-420d-a8c6-6e42440a5573\"),\n        Done(\"\", ApiRequest::Track{room, track})\n    );\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/tracks/83d235e8-03cd-420d-a8c6-6e42440a5573/\"),\n        Done(\"\", ApiRequest::Track{room, track})\n    );\n    assert_eq!(api(\"/api/v1\"), Error(ErrorKind::Alt));\n    assert_eq!(api(\"/api/v1/foo\"), Error(ErrorKind::Alt));\n    assert_eq!(api(\"/api/v1/rooms/123\"), Error(ErrorKind::Eof));\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/bar\"),\n        Error(ErrorKind::Eof)\n    );\n    assert_eq!(\n        api(\"/api/v1/rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912/tracks/83d235e8-03cd-420d-a8c6-6e42440a5573/123\"),\n        Error(ErrorKind::Eof)\n    );\n    assert_eq!(api(\"/api/v2\"), Error(ErrorKind::Alt));\n}\n</code></pre>\n\n<p>You could also use a more strict <code>alt_full_opt_slash!</code> branch method, which would ensure a branch only matches if it fully parsed the input.</p>\n\n<p>You could then use a more \"flat\" way (although nested branches should still be working) to parse the alternatives (although this means you might end up parsing some UUIDs more than once; also now all errors are of kind <code>Alt</code>):</p>\n\n<pre><code>/// Similar to alt_complete, but also requires the branch parses until\n/// the end of the input (but ignores a trailing \"/\").\nmacro_rules! alt_full_opt_slash {\n    (__impl_push2 ($i:expr,) ($($new:tt)*), $($rest:tt)*) =&gt; {\n        alt_full_opt_slash!(__impl ($i, $($new)*), $($rest)*)\n    };\n    (__impl_push2 ($i:expr, $($result:tt)+) ($($new:tt)*), $($rest:tt)*) =&gt; {\n        alt_full_opt_slash!(__impl ($i, $($result)+ | $($new)*), $($rest)*)\n    };\n    (__impl_push ($($result:tt)*) ($($new:tt)*), $($rest:tt)*) =&gt; {\n        // modify branch:\n        alt_full_opt_slash!(__impl_push2 ($($result)*) (\n            terminated!(\n                $($new)*,\n                tuple!(\n                    alt_complete!(tag_s!(\"/\") | value!(\"\")), // ignore trailing \"/\"\n                    eof!() // make sure full URL was parsed\n                )\n            )\n        ), $($rest)*)\n    };\n    (__impl ($($result:tt)*), $e:ident | $($rest:tt)*) =&gt; {\n        alt_full_opt_slash!(__impl_push ($($result)*) ( $e ), $($rest)*)\n    };\n    (__impl ($($result:tt)*), $subrule:ident!( $($args:tt)*) | $($rest:tt)*) =&gt; {\n        alt_full_opt_slash!(__impl_push ($($result)*) ( $subrule!($($args)*) ), $($rest)*)\n    };\n    (__impl ($($result:tt)*), $subrule:ident!( $($args:tt)* ) =&gt; { $gen:expr } | $($rest:tt)*) =&gt; {\n        alt_full_opt_slash!(__impl_push ($($result)*) ( $subrule!($($args)*) =&gt; { $gen } ), $($rest)*)\n    };\n    (__impl ($($result:tt)*), $e:ident =&gt; { $gen:expr } | $($rest:tt)*) =&gt; {\n        alt_full_opt_slash!(__impl_push ($($result)*) ( $e =&gt; { $gen } ), $($rest)*)\n    };\n    (__impl ($i:expr, $($result:tt)*), __end) =&gt; {\n        alt_complete!($i, $($result)*)\n    };\n    ($i:expr, $($rest:tt)*) =&gt; {{\n        alt_full_opt_slash!(__impl ($i, ), $($rest)* | __end)\n    }};\n}\n\n// /api/v1/rooms/UUID/tracks/UUID\nnamed!(apiv1&lt;&amp;str, ApiRequest&gt;, preceded!(tag_s!(\"/api/v1\"),\n    alt_full_opt_slash!(\n        do_parse!(\n            tag_s!(\"/rooms\") &gt;&gt;\n            (ApiRequest::Rooms)\n        )\n        |\n        do_parse!(\n            tag_s!(\"/rooms\") &gt;&gt;\n            room: uuid &gt;&gt;\n            (ApiRequest::Room{room})\n        )\n        |\n        do_parse!(\n            tag_s!(\"/rooms\") &gt;&gt;\n            room: uuid &gt;&gt;\n            tag_s!(\"/tracks\") &gt;&gt;\n            (ApiRequest::Tracks{room})\n        )\n        |\n        do_parse!(\n            tag_s!(\"/rooms\") &gt;&gt;\n            room: uuid &gt;&gt;\n            tag_s!(\"/tracks\") &gt;&gt;\n            track: uuid &gt;&gt;\n            (ApiRequest::Track{room, track})\n        )\n    )\n));\n\nnamed!(api&lt;&amp;str, ApiRequest&gt;, alt_complete!(\n    apiv1\n    // | ... other versions\n    // also could wrap in new enum like:\n    //     apiv1 =&gt; { ApiRequest::V1 }\n    //     |\n    //     apiv2 =&gt; { ApiRequest::V2 }\n));\n</code></pre>\n"}], "owner": {"reputation": 2131, "user_id": 3475678, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/230e565cac4491b28134bb92bfc28a70?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksey", "link": "https://stackoverflow.com/users/3475678/aleksey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 304, "favorite_count": 1, "accepted_answer_id": 48790344, "answer_count": 3, "score": 4, "last_activity_date": 1518648171, "creation_date": 1518552102, "question_id": 48774708, "link": "https://stackoverflow.com/questions/48774708/optional-field-with-strict-format", "title": "Optional field with strict format", "body": "<p>I am trying to build <em>nom</em> parser to examine URLs with ID as UUID</p>\n\n<pre><code>rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912\n</code></pre>\n\n<p>I created the following:</p>\n\n<pre><code>extern crate uuid;\nuse uuid::Uuid;\n\nnamed!(room_uuid&lt;&amp;str, Option&lt;Uuid&gt;&gt;,\n    do_parse!(\n        tag_s!(\"rooms\") &gt;&gt;\n        id: opt!(complete!(preceded!(\n            tag_s!(\"/\"),\n            map_res!(take_s!(36), FromStr::from_str)\n        ))) &gt;&gt;\n\n        (id)\n    )\n);\n</code></pre>\n\n<p>It handles almost all cases well:</p>\n\n<pre><code>assert_eq!(room_uuid(\"rooms\"), Done(\"\", None));\nassert_eq!(room_uuid(\"rooms/\"), Done(\"/\", None));\nassert_eq!(room_uuid(\"rooms/e19c94cf-53eb-4048-9c94-7ae74ff6d912\"), Done(\"\", Some(Uuid::parse_str(\"e19c94cf-53eb-4048-9c94-7ae74ff6d912\").unwrap())));\n</code></pre>\n\n<p>Except cases where ID is not a valid UUID:</p>\n\n<pre><code>assert!(room_uuid(\"rooms/123\").is_err()); # it fails\n# room_uuid(\"rooms/123\").to_result() =&gt; Ok(None)\n</code></pre>\n\n<p>As far as I understand it happens because <code>opt!</code> converts inner <code>Err</code> into <code>None</code>.</p>\n\n<p>I would like to have ID as optional section but if it is present it should be a valid UUID.<br>\nUnfortunately, I don't understand how to combine both those things: optionality and strict format.</p>\n"}, {"tags": ["rust", "unsafe"], "comments": [{"owner": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 0, "creation_date": 1518550256, "post_id": 48773898, "comment_id": 84550041, "body": "so, just to be sure what you&#39;re asking, you want to be able to copy <code>Cell</code>, but <i>not</i> the value inside it, right ?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 0, "creation_date": 1518550607, "post_id": 48773898, "comment_id": 84550221, "body": "@Tigran That wouldn&#39;t make any sense. <code>Cell</code> doesn&#39;t provide shared ownership (unlike <code>Rc</code> or <code>Arc</code>) so in order to copy a <code>Cell</code>, you <i>must</i> copy the value inside it."}, {"owner": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518550714, "post_id": 48773898, "comment_id": 84550274, "body": "@FrancisGagn&#233;: agree, but that&#39;s what I understand from the question, which, rightfully, goes against language logic. I just wanted to clarify the point."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 1, "creation_date": 1518550715, "post_id": 48773898, "comment_id": 84550276, "body": "@Tigran: I want to <code>Copy</code> both. For what it&#39;s worth my usecase is for a <code>Cell&lt;u32&gt;</code> (which is why <code>&amp;Cell</code> is irksome, as it triples the memory requirement)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 1, "creation_date": 1518550787, "post_id": 48773898, "comment_id": 84550318, "body": "@Tigran: I added a code excerpt to clarify my intended usage."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518565663, "post_id": 48773898, "comment_id": 84556671, "body": "A <a href=\"https://github.com/rust-lang/rust/issues/45683\" rel=\"nofollow noreferrer\">related issue</a>."}], "answers": [{"comments": [{"owner": {"reputation": 59217, "user_id": 156695, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/3390f053c9414f150c48f700afaa3e7a?s=128&d=identicon&r=PG", "display_name": "Tigran", "link": "https://stackoverflow.com/users/156695/tigran"}, "edited": false, "score": 0, "creation_date": 1518552269, "post_id": 48774574, "comment_id": 84551043, "body": "I kind of relate to reasoning behind refusing to support <code>Copy</code> on those types, but from other side it doesn&#39;t fill right, to completely erase it from the <code>Cell</code>. There is also discussion about it on <a href=\"https://github.com/rust-lang/rust/pull/20199\" rel=\"nofollow noreferrer\">this</a> link. There has to be a way to explicitly define it for a given type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518593535, "post_id": 48774574, "comment_id": 84564934, "body": "I am not worried about <i>performance</i>, only about <i>convenience</i>. <code>Clone</code> and <code>Copy</code> have the same cost, one is just much easier to use than the other."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518593762, "post_id": 48774574, "comment_id": 84565039, "body": "You make a good point about <code>UnsafeCell</code>, but it does leave one in a quandary. Is there a way to <i>force</i> the implementation of <code>Copy</code> on a <code>MagicCell</code> despite the underlying <code>UnsafeCell</code> not being <code>Copy</code>?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518602233, "post_id": 48774574, "comment_id": 84569849, "body": "@MatthieuM. No, there&#39;s no way to work around that validation in the compiler; <a href=\"https://github.com/rust-lang/rust/blob/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032/src/librustc/ty/util.rs#L176-L209\" rel=\"nofollow noreferrer\">here&#39;s the code that implements that validation</a>."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1518551560, "creation_date": 1518551560, "answer_id": 48774574, "question_id": 48773898, "link": "https://stackoverflow.com/questions/48773898/how-to-get-interior-mutability-on-a-copy-type/48774574#48774574", "title": "How to get Interior Mutability on a Copy type?", "body": "<p>I think there's a good reason that <code>UnsafeCell</code> doesn't implement <code>Copy</code>: it would be unsafe in the general case. <em>Reading</em> from an <code>UnsafeCell</code> is an unsafe operation, as shown by the <code>get</code> method's signature: it returns a raw pointer, and dereferencing a raw pointer is an unsafe operation. A copy would implicitly read the value, which could race with another thread writing to the same <code>UnsafeCell</code>. <code>Cell</code> doesn't have that race because it is <code>!Sync</code> (i.e. two threads can't access the same <code>Cell</code>).</p>\n\n<p>Personally, I would just use <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html#tymethod.clone\" rel=\"nofollow noreferrer\"><code>Clone::clone</code></a> instead of messing with references. <code>Cell</code>'s <code>clone</code> is <code>#[inline]</code>, so it's highly likely that the call will be optimized away in release builds.</p>\n"}], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 149, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1518610398, "creation_date": 1518548791, "last_edit_date": 1518551245, "question_id": 48773898, "link": "https://stackoverflow.com/questions/48773898/how-to-get-interior-mutability-on-a-copy-type", "title": "How to get Interior Mutability on a Copy type?", "body": "<p>I have a few <code>Copy</code> types, and I really appreciate the handiness of them being <code>Copy</code>.</p>\n\n<p>I would like one of those types to contain a mutable field, using Interior Mutability as in <code>cell::Cell</code>. There are probably other solutions for the problem I am trying to solve, but Interior Mutability is <em>cheap</em>. I like <em>cheap</em>.</p>\n\n<p>However, <a href=\"https://github.com/rust-lang/rust/issues/20813\" rel=\"nofollow noreferrer\">it turns out that <code>cell::Cell</code> is not <code>Copy</code></a>, and from the comments is unlikely to become <code>Copy</code> as the maintainers fear this would be error-prone.</p>\n\n<p>A comment by the OP is my current beacon of hope:</p>\n\n<blockquote>\n  <p>It's not the absolute end of the world if it doesn't for my own data structures (since I can just make my own version of <code>Cell</code>)</p>\n</blockquote>\n\n<p>Though I do not see how they purport to achieve this feat.</p>\n\n<p>The core issue I have is that <a href=\"https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\" rel=\"nofollow noreferrer\"><code>UnsafeCell</code></a>:</p>\n\n<ul>\n<li>is mandatory to implement Interior Mutability,</li>\n<li>is not <code>Copy</code>.</li>\n</ul>\n\n<p>Which seems to close the door to any hope of implementing a <code>CopyCell</code>, unless I am missing a trick (a way to <code>unsafe impl</code> the <code>Copy</code> trait?).</p>\n\n<hr>\n\n<p><a href=\"https://play.rust-lang.org/?gist=820c948e608902a88da13edc93278ac7&amp;version=stable\" rel=\"nofollow noreferrer\">MCVE</a>:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct HelloWorld(Cell&lt;u32&gt;);\n</code></pre>\n\n<blockquote>\n<pre><code>  |\n3 | #[derive(Clone, Copy)]\n  |                 ^^^^\n4 | struct HelloWorld(Cell&lt;u32&gt;);\n  |                   ---------- this field does not implement `Copy`\n</code></pre>\n</blockquote>\n\n<p>What should I replace <code>Cell</code> with for <code>HelloWorld</code> to be <code>Copy</code>?</p>\n\n<hr>\n\n<p><em>Note: at the moment, the only way I can see of achieving the desired outcome is to use a <code>&amp;Cell&lt;T&gt;</code>; with all the lifetimes implications.</em></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1518545904, "last_edit_date": 1518545904, "creation_date": 1518545377, "answer_id": 48773009, "question_id": 48772728, "link": "https://stackoverflow.com/questions/48772728/accept-types-compatible-with-path-to-produce-a-pathbuf/48773009#48773009", "title": "Accept types compatible with Path to produce a PathBuf?", "body": "<p>Take a generic type that can be converted <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow noreferrer\"><code>Into</code></a> a <code>PathBuf</code>:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\nstruct Foo {\n    p: PathBuf,\n}\n\nimpl Foo {\n    fn new&lt;P&gt;(p: P) -&gt; Foo\n    where\n        P: Into&lt;PathBuf&gt;,\n    {\n        Foo { p: p.into() }\n    }\n}\n\nfn main() {\n    Foo::new(Path::new(\"a\").join(\"b\"));\n    Foo::new(Path::new(\"a\"));\n    Foo::new(\"a\");\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 99, "favorite_count": 0, "accepted_answer_id": 48773009, "answer_count": 1, "score": 1, "last_activity_date": 1518545904, "creation_date": 1518544206, "last_edit_date": 1518545118, "question_id": 48772728, "link": "https://stackoverflow.com/questions/48772728/accept-types-compatible-with-path-to-produce-a-pathbuf", "title": "Accept types compatible with Path to produce a PathBuf?", "body": "<p>I want to hold a <code>PathBuf</code> inside my structure:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\nstruct Foo {\n    p: PathBuf,\n}\n\nimpl Foo {\n    fn new(p: PathBuf) -&gt; Foo {\n        Foo { p }\n    }\n}\n</code></pre>\n\n<p>Something like this works fine for <code>Foo::new(Path::new(\"a\").join(\"b\"))</code>, but I also want to support <code>Foo::new(Path::new(\"a\"))</code>:</p>\n\n<pre><code>fn main() {\n    Foo::new(Path::new(\"a\").join(\"b\"));\n    // Foo::new(Path::new(\"a\"));\n}\n</code></pre>\n\n<p>How should I do it? Is it possible to implement with one method, or should I use two methods? I know about <code>P: AsRef&lt;Path&gt;</code>, but looks like it requires additional copy in the case of</p>\n\n<pre><code>let p: PathBuf = Path::new(\"a\").join(\"b\");\nlet foo = Foo::new(p);\n</code></pre>\n\n<p>so it is not suitable for me.</p>\n"}, {"tags": ["if-statement", "rust", "binary-search-tree", "variable-assignment"], "comments": [{"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 1, "creation_date": 1518542724, "post_id": 48772143, "comment_id": 84546026, "body": "I&#39;m not sure why you&#39;re using <code>ref</code> keyword. See this playground link that works without it: <a href=\"https://play.rust-lang.org/?gist=9b072fcef00aa9ac73ee6e2273df7d03&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> . I assign <code>a</code> to be a mutable reference to either <code>self.left</code> or <code>self.right</code>"}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 2, "creation_date": 1518542968, "post_id": 48772143, "comment_id": 84546181, "body": "TBH as a beginner I find bindings with <code>ref</code> to be confusing and only would use it in a pattern-matching context (<code>match</code> or <code>if let</code>) where I can&#39;t get the code to compile without it."}, {"owner": {"reputation": 1309, "user_id": 3549754, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6mGu.png?s=128&g=1", "display_name": "G. M.", "link": "https://stackoverflow.com/users/3549754/g-m"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1518543462, "post_id": 48772143, "comment_id": 84546487, "body": "Thank you, it works. I think I was just getting confused because after I&#39;m using actually a match... at this point I show the insert code..."}, {"owner": {"reputation": 1309, "user_id": 3549754, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6mGu.png?s=128&g=1", "display_name": "G. M.", "link": "https://stackoverflow.com/users/3549754/g-m"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1518543878, "post_id": 48772143, "comment_id": 84546716, "body": "As you see, later I do some match etc. I guess I started using ref because the 1st versions didn&#39;t work... I smashed my head against the borrow checker so many times I became numb."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518545460, "post_id": 48772143, "comment_id": 84547584, "body": "Is that last edit an <i>answer</i>? If so, it doesn&#39;t belong in the <i>question</i>. You are welcome to put your own answer below, instead."}, {"owner": {"reputation": 1309, "user_id": 3549754, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6mGu.png?s=128&g=1", "display_name": "G. M.", "link": "https://stackoverflow.com/users/3549754/g-m"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1518547161, "post_id": 48772143, "comment_id": 84548442, "body": "No, it&#39;s not an answer. The answer was provided by @turbulencetoo"}], "answers": [{"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 0, "last_activity_date": 1519543666, "creation_date": 1519543666, "answer_id": 48971252, "question_id": 48772143, "link": "https://stackoverflow.com/questions/48772143/if-else-assignment-move-out-of-borrowed-content/48971252#48971252", "title": "If else assignment &quot;move out of borrowed content&quot;", "body": "<p>As you observed, in your original attempt the \"then\" and \"else\" branches both attempt to <strong>move</strong> the left or right box out of your <code>&amp;mut self</code> borrowed content, and this is not allowed.</p>\n\n<pre><code>let ref mut a = if elem &lt; self.value {\n    self.left\n} else {\n    self.right\n};\n</code></pre>\n\n<p>Your second attempt compiles but is ugly, as you said. This code avoids moving out of the borrowed content by referring to the left and right box by <code>ref mut</code> mutable reference.</p>\n\n<pre><code>let a = if elem &lt; self.value {\n    let ref mut b = self.left;\n    b\n} else {\n    let ref mut b = self.right;\n    b\n};\n</code></pre>\n\n<p>A cleaner way to refer to something by mutable reference is with the <code>&amp;mut</code> operator. The if-statement should be:</p>\n\n<pre><code>let a = if elem &lt; self.value {\n    &amp;mut self.left\n} else {\n    &amp;mut self.right\n};\n</code></pre>\n"}], "owner": {"reputation": 1309, "user_id": 3549754, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X6mGu.png?s=128&g=1", "display_name": "G. M.", "link": "https://stackoverflow.com/users/3549754/g-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 48971252, "answer_count": 1, "score": -2, "last_activity_date": 1519543666, "creation_date": 1518541967, "last_edit_date": 1518545709, "question_id": 48772143, "link": "https://stackoverflow.com/questions/48772143/if-else-assignment-move-out-of-borrowed-content", "title": "If else assignment &quot;move out of borrowed content&quot;", "body": "<p>This is a snippet of Rust code which performs an insertion on a common binary search tree. I want the reference to the branch on which I'll perform the insertion.</p>\n\n<pre><code>struct Node {\n    value: i32,\n    left: Option&lt;Box&lt;Node&gt;&gt;,\n    right: Option&lt;Box&lt;Node&gt;&gt;,\n}\n\nimpl Node {\n    fn insert(&amp;mut self, elem: i32) {\n        let ref mut a = if elem &lt; self.value {\n            self.left\n        } else {\n            self.right\n        };\n\n        // ...\n    }\n}\n</code></pre>\n\n<p>This code is invalid. After tweaking it, I came to understand when I perform a if/else statement, Rust moves the content before assigning it. This solution works, but it's really ugly...</p>\n\n<pre><code>let a = if elem &lt; self.value {\n    let ref mut b = self.left;\n    b\n} else {\n    let ref mut b = self.right;\n    b\n};\n</code></pre>\n\n<p>Is there a way to handle the thing without recurring to a Box? I could use a pointer, but it really looks like overkill.</p>\n\n<p><em>After commenting, this is the entire code</em></p>\n\n<pre><code>fn insert(&amp;mut self, elem: i32) {\n    let target = if elem &lt; self.value {\n        &amp;mut self.left\n    } else {\n        &amp;mut self.right\n    };\n\n    match target.as_mut() {\n        None =&gt; {}\n        Some(ref mut node) =&gt; {\n            node.insert(elem);\n            return;\n        }\n    }\n\n    mem::replace(&amp;mut *target, Some(Box::new(Node::new(elem))));\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1518526854, "post_id": 48767287, "comment_id": 84535121, "body": "<i>Which</i> <code>Url</code> type are you using? There are many possible choices."}], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 5, "last_activity_date": 1518530076, "last_edit_date": 1518530076, "creation_date": 1518527380, "answer_id": 48767602, "question_id": 48767287, "link": "https://stackoverflow.com/questions/48767287/strip-trailing-filename-of-a-url-path/48767602#48767602", "title": "Strip trailing filename of a Url path", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.rsplitn\" rel=\"nofollow noreferrer\"><code>rsplitn</code></a></p>\n\n<pre><code>extern crate url;\n\nuse url::Url;\n\nfn shorten(url: &amp;Url) -&gt; Option&lt;&amp;str&gt; {\n    url.path().rsplitn(2, '/').skip(1).next()\n}\n\nfn main() {\n    let url = Url::parse(\"http://my.com/dir1/dir2/file.ext\").unwrap();\n    assert_eq!(shorten(&amp;url), Some(\"/dir1/dir2\"));\n}\n</code></pre>\n\n<p>This is not as easy as calling one method, but this is at least efficient.</p>\n\n<p>If you want to <em>change</em> the current url to do so, you can use <a href=\"https://docs.rs/url/1.6.0/url/struct.Url.html#method.path_segments_mut\" rel=\"nofollow noreferrer\"><code>Url::path_segments_mut</code></a>:</p>\n\n<pre><code>extern crate url;\n\nuse url::Url;\n\nfn shorten(mut url: Url) -&gt; Result&lt;Url, ()&gt; {\n    url.path_segments_mut()?.pop();\n    Ok(url)\n}\n\nfn main() {        \n    let url = Url::parse(\"http://my.com/dir1/dir2/file.ext\").unwrap();\n    assert_eq!(shorten(url).unwrap().path(), \"/dir1/dir2\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1566222046, "last_edit_date": 1566222046, "creation_date": 1518529346, "answer_id": 48768208, "question_id": 48767287, "link": "https://stackoverflow.com/questions/48767287/strip-trailing-filename-of-a-url-path/48768208#48768208", "title": "Strip trailing filename of a Url path", "body": "<p>When using a crate, it's useful to understand the domain that the crate focuses on. Resolving a relative path against an absolute URL is a pretty common case. For the <a href=\"https://crates.io/crates/url\" rel=\"nofollow noreferrer\">url crate</a>, this is done with <a href=\"https://docs.rs/url/2.1.0/url/struct.Url.html#method.join\" rel=\"nofollow noreferrer\"><code>join</code></a>:</p>\n\n<pre><code>use url::Url; // 2.1.0\n\nfn main() {\n    let u = Url::parse(\"http://my.com/dir1/dir2/file.ext\").unwrap();\n    let u2 = u.join(\"./\").unwrap();\n    assert_eq!(\"/dir1/dir2/\", u2.path());\n}\n</code></pre>\n\n<p>You can also use <a href=\"https://docs.rs/url/2.1.0/url/struct.Url.html#method.path_segments_mut\" rel=\"nofollow noreferrer\"><code>path_segments_mut</code></a>:</p>\n\n<pre><code>use url::Url; // 2.1.0\n\nfn main() {\n    let mut u = Url::parse(\"http://my.com/dir1/dir2/file.ext\").unwrap();\n    u.path_segments_mut().unwrap().pop();\n    assert_eq!(\"/dir1/dir2\", u.path());\n}\n</code></pre>\n"}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 335, "favorite_count": 0, "accepted_answer_id": 48768208, "answer_count": 2, "score": 3, "last_activity_date": 1566222046, "creation_date": 1518526308, "last_edit_date": 1518526911, "question_id": 48767287, "link": "https://stackoverflow.com/questions/48767287/strip-trailing-filename-of-a-url-path", "title": "Strip trailing filename of a Url path", "body": "<p>I have a <code>Url</code> and I would like to get the path part but without the trailing file name. If the <code>Url</code> is <code>http://my.com/dir1/dir2/file.ext</code> then I would like to get <code>/dir1/dir2</code>.</p>\n\n<p>I've tried all kinds of splitting (<code>let parts = url.path().split(\"/\");</code>, etc.) and gathering and joining and the code is horrible and looks inefficient.</p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518530163, "post_id": 48764839, "comment_id": 84537487, "body": "It is not clear what exactly you are asking. The compiler is telling you that you have to provide a type that meets a certain set of restrictions and you are not. Perhaps you are looking for <a href=\"https://stackoverflow.com/q/30177395/155423\">When does a closure implement Fn, FnMut and FnOnce</a>? For sharing stuff between handlers, maybe you wanted <a href=\"https://stackoverflow.com/q/38042592/155423\">How do I share a HashMap between Hyper handlers</a>?"}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518608945, "post_id": 48764839, "comment_id": 84574303, "body": "@Shepmaster thanks a lot. I viewed the links you provided, I think these are not my case. The problem is &quot;closure that implements the <code>Fn</code> trait&quot;, I don&#39;t know how to fix it in HelloWorld !"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1518686661, "post_id": 48764839, "comment_id": 84610070, "body": "The second link is <i>very</i> close to your problem, and if you completely understand the first link, you should be able to adapt the solution to the second to your situation. Or in other words, the first link explains why you get the compiler error you do, and the second how to fix it."}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1518849663, "post_id": 48764839, "comment_id": 84681698, "body": "@SebastianRedl, I read the links carefully, and I know the things what they said, but I just couldn&#39;t make it work. could you help me fixing my code? I would appreciate very much!"}], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518857034, "post_id": 48839081, "comment_id": 84683184, "body": "You could put a <code>&amp;&#39;a Dao</code> instead of a <code>Box&lt;&amp;&#39;a Dao&gt;</code> in <code>HelloWorld</code>. There is no reason to box a reference here."}], "tags": [], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "is_accepted": true, "score": 2, "last_activity_date": 1518880478, "last_edit_date": 1518880478, "creation_date": 1518852961, "answer_id": 48839081, "question_id": 48764839, "link": "https://stackoverflow.com/questions/48764839/expected-a-closure-that-implements-the-fn-trait-but-this-closure-only-impleme/48839081#48839081", "title": "expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`", "body": "<p>I made these changes to the <code>HelloWorld</code> struct:</p>\n\n<pre><code>struct HelloWorld&lt;'a&gt; {\n    dao: &amp;'a Dao,\n}\n</code></pre>\n\n<p>I also changed the <code>let server</code> statement to:</p>\n\n<pre><code>let server = Http::new()\n    .bind(&amp;addr, move || Ok(HelloWorld { dao: &amp;dao }))\n    .unwrap();\n</code></pre>\n\n<p>The entire code: </p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\n\nuse futures::future::Future;\nuse hyper::header::ContentLength;\nuse hyper::server::{Http, Request, Response, Service};\n\ntrait Dao {}\n\nstruct MysqlDao;\n\nimpl Dao for MysqlDao {}\n\nstruct HelloWorld&lt;'a&gt; {\n    dao: &amp;'a Dao,\n}\n\nconst PHRASE: &amp;'static str = \"Hello, World!\";\n\nimpl&lt;'a&gt; Service for HelloWorld&lt;'a&gt; {\n    // boilerplate hooking up hyper's server types\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    // The future representing the eventual Response your call will\n    // resolve to. This can change to whatever Future you need.\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, _req: Request) -&gt; Self::Future {\n        // We're currently ignoring the Request\n        // And returning an 'ok' Future, which means it's ready\n        // immediately, and build a Response with the 'PHRASE' body.\n        Box::new(futures::future::ok(\n            Response::new()\n                .with_header(ContentLength(PHRASE.len() as u64))\n                .with_body(PHRASE),\n        ))\n    }\n}\n\nfn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    let dao = MysqlDao;\n    let server = Http::new()\n        .bind(&amp;addr, move || Ok(HelloWorld { dao: &amp;dao }))\n        .unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1795, "favorite_count": 0, "accepted_answer_id": 48839081, "answer_count": 1, "score": 2, "last_activity_date": 1518880478, "creation_date": 1518518499, "last_edit_date": 1518707810, "question_id": 48764839, "link": "https://stackoverflow.com/questions/48764839/expected-a-closure-that-implements-the-fn-trait-but-this-closure-only-impleme", "title": "expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`", "body": "<p>I want use Hyper to implement a web service. I copied code from <a href=\"https://hyper.rs/guides/server/hello-world/\" rel=\"nofollow noreferrer\">the hello world example</a> and it succeeded. When I try to to add a data access object to the <code>HelloWorld</code> struct, I get an error, and I don't know how to fix it. How do add a trait member to a Hyper server?</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\n\nuse futures::future::Future;\nuse hyper::header::ContentLength;\nuse hyper::server::{Http, Request, Response, Service};\n\ntrait Dao {}\n\nstruct MysqlDao;\n\nimpl Dao for MysqlDao {}\n\nstruct HelloWorld {\n    dao: Box&lt;Dao&gt;,\n}\n\nconst PHRASE: &amp;'static str = \"Hello, World!\";\n\nimpl Service for HelloWorld {\n    // boilerplate hooking up hyper's server types\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    // The future representing the eventual Response your call will\n    // resolve to. This can change to whatever Future you need.\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, _req: Request) -&gt; Self::Future {\n        // We're currently ignoring the Request\n        // And returning an 'ok' Future, which means it's ready\n        // immediately, and build a Response with the 'PHRASE' body.\n        Box::new(futures::future::ok(\n            Response::new()\n                .with_header(ContentLength(PHRASE.len() as u64))\n                .with_body(PHRASE),\n        ))\n    }\n}\n\nfn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    let dao = Box::new(MysqlDao);\n    let server = Http::new().bind(&amp;addr, || Ok(HelloWorld { dao })).unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n\n<p>The error info:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n  --&gt; src/main.rs:44:42\n   |\n44 |     let server = Http::new().bind(&amp;addr, || Ok(HelloWorld { dao })).unwrap();\n   |                              ----        ^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                              |\n   |                              the requirement to implement `Fn` derives from here\n   |\nnote: closure is `FnOnce` because it moves the variable `dao` out of its environment\n  --&gt; src/main.rs:44:61\n   |\n44 |     let server = Http::new().bind(&amp;addr, || Ok(HelloWorld { dao })).unwrap();\n   |                                                             ^^^\n</code></pre>\n"}, {"tags": ["rust", "thread-safety", "hyper"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518549930, "post_id": 48764798, "comment_id": 84549857, "body": "The compiler is giving you a hint: <code>to prevent move, use `ref tx` or `ref mut tx` </code>. Did you try any of these options?"}], "answers": [{"tags": [], "owner": {"reputation": 566, "user_id": 1480374, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/5534b0e86f957dafe87c9b244a0face4?s=128&d=identicon&r=PG", "display_name": "fyaa", "link": "https://stackoverflow.com/users/1480374/fyaa"}, "is_accepted": false, "score": 0, "last_activity_date": 1519896947, "creation_date": 1519896947, "answer_id": 49046644, "question_id": 48764798, "link": "https://stackoverflow.com/questions/48764798/start-a-thread-in-one-web-service-request-and-stop-it-in-another-request/49046644#49046644", "title": "Start a thread in one web service request and stop it in another request", "body": "<p>You can manage to put <code>None</code> into <code>*current_tx</code> with little modifications:</p>\n\n<pre><code>fn stop_sensors(&amp;self) -&gt; &lt;Sensor as Service&gt;::Future {\n    let mut current_tx = self.current_tx.lock().unwrap();\n\n    match std::mem::replace(&amp;mut *current_tx, None) {\n        Some(tx) =&gt; {\n            let mut current_thread = self.current_thread.lock().unwrap();\n\n            // just to trying to communicate with the thread\n            let vals = vec![String::from(\"hi\"), String::from(\"stop\")];\n\n            for val in vals {\n                tx.send(val).unwrap();\n            }\n\n            // *current_tx = None;\n            *current_thread = None;\n            Box::new(futures::future::ok(Response::new()))\n        }\n        None =&gt; self.response_with_body(format!(\"No thread running\")),\n    }\n}\n</code></pre>\n\n<p><code>std::mem::replace</code> puts the None into <code>*current_tx</code> and returns the old value.</p>\n"}], "owner": {"reputation": 11, "user_id": 6093585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2b94a910f8b0b5883f7ae4d28551e942?s=128&d=identicon&r=PG&f=1", "display_name": "florian.bellotti", "link": "https://stackoverflow.com/users/6093585/florian-bellotti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 96, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1519896947, "creation_date": 1518518403, "last_edit_date": 1518534313, "question_id": 48764798, "link": "https://stackoverflow.com/questions/48764798/start-a-thread-in-one-web-service-request-and-stop-it-in-another-request", "title": "Start a thread in one web service request and stop it in another request", "body": "<p>I would like to start a thread which records sensor values thanks to a web service request using Hyper.rs. Then, with another request, I would like to stop the thread and take all recorded data.</p>\n\n<p>I know if a thread is already running thanks to <code>Mutex</code>, so I tried to put <code>Sender&lt;T&gt;</code> into a <code>Mutex</code>, but I can't use values of this <code>Mutex</code> because of \"cannot move out of borrowed content\". </p>\n\n<p>This is my code:</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\n\nuse futures::future::Future;\nuse hyper::{Method, StatusCode};\nuse hyper::server::{Http, Request, Response, Service};\nuse std::sync::Mutex;\nuse std::sync::mpsc::{channel, Sender};\nuse std::thread;\nuse std::thread::ThreadId;\n\nfn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    let server = Http::new().bind(&amp;addr, || Ok(Sensor::new())).unwrap();\n    server.run().unwrap();\n}\n\nstruct Sensor {\n    current_thread: Mutex&lt;Option&lt;ThreadId&gt;&gt;,\n    current_tx: Mutex&lt;Option&lt;Sender&lt;String&gt;&gt;&gt;,\n}\n\nimpl Sensor {\n    pub fn new() -&gt; Sensor {\n        Sensor {\n            current_thread: Mutex::new(None),\n            current_tx: Mutex::new(None),\n        }\n    }\n\n    fn start_sensors(&amp;self) -&gt; &lt;Sensor as Service&gt;::Future {\n        let mut current_thread = self.current_thread.lock().unwrap();\n        match *current_thread {\n            Some(id) =&gt; {\n                self.response_with_body(format!(\"thread with id {:?} is already running\", id))\n            }\n            None =&gt; {\n                let (tx, rx) = channel();\n                let builder = thread::Builder::new();\n                let join_handle = builder\n                    .spawn(|| {\n                        for received in rx {\n                            println!(\"Got: {}\", received);\n                            if received == \"stop\" {\n                                break;\n                            }\n                        }\n                    })\n                    .unwrap();\n                let thread = join_handle.thread();\n\n                let mut current_tx = self.current_tx.lock().unwrap();\n                *current_tx = Some(tx);\n\n                let message = format!(\"thread id: {:?}\", &amp;thread.id());\n                *current_thread = Some(thread.id());\n\n                self.response_with_body(message)\n            }\n        }\n    }\n\n    fn stop_sensors(&amp;self) -&gt; &lt;Sensor as Service&gt;::Future {\n        let mut current_tx = self.current_tx.lock().unwrap();\n        match *current_tx {\n            Some(tx) =&gt; {\n                let mut current_thread = self.current_thread.lock().unwrap();\n\n                // just to trying to communicate with the thread\n                let vals = vec![String::from(\"hi\"), String::from(\"stop\")];\n\n                for val in vals {\n                    tx.send(val).unwrap();\n                }\n\n                *current_tx = None;\n                *current_thread = None;\n                Box::new(futures::future::ok(Response::new()))\n            }\n            None =&gt; self.response_with_body(format!(\"No thread running\")),\n        }\n    }\n\n    fn response_with_body(&amp;self, body: String) -&gt; &lt;Sensor as Service&gt;::Future {\n        Box::new(futures::future::ok(Response::new().with_body(body)))\n    }\n}\n\nimpl Service for Sensor {\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, req: Request) -&gt; Self::Future {\n        //let mut current_thread: Option&lt;ThreadId&gt; = None;\n        match (req.method(), req.path()) {\n            (&amp;Method::Get, \"/sensors/start\") =&gt; self.start_sensors(),\n            (&amp;Method::Get, \"/sensors/stop\") =&gt; self.stop_sensors(),\n            _ =&gt; Box::new(futures::future::ok(\n                Response::new().with_status(StatusCode::NotFound),\n            )),\n        }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:65:15\n   |\n65 |         match *current_tx {\n   |               ^^^^^^^^^^^ cannot move out of borrowed content\n66 |             Some(tx) =&gt; {\n   |                  -- hint: to prevent move, use `ref tx` or `ref mut tx`\n</code></pre>\n\n<p>How should I do this? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1518460013, "post_id": 48753019, "comment_id": 84506809, "body": "What leads you to believe that you can get a mutable reference from this immutable variable? Have you already read <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>, the free official book which explains Rust concepts like mutability?"}], "answers": [{"comments": [{"owner": {"reputation": 49, "user_id": 9139587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22bdded367394777a4e26622beaed391?s=128&d=identicon&r=PG&f=1", "display_name": "Skemp", "link": "https://stackoverflow.com/users/9139587/skemp"}, "edited": false, "score": 0, "creation_date": 1518461824, "post_id": 48753267, "comment_id": 84507811, "body": "Thanks for quick answer. The trick is I did try to mut trait the same way you did and fixed impl accordingly and had downcast_mut, but it didn&#39;t work for me becuse I missed &#39;let b: &amp;mut TestAi ...&#39;. I had  &#39;let mut b: &amp;TestAi&#39; instead."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 49, "user_id": 9139587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22bdded367394777a4e26622beaed391?s=128&d=identicon&r=PG&f=1", "display_name": "Skemp", "link": "https://stackoverflow.com/users/9139587/skemp"}, "edited": false, "score": 0, "creation_date": 1518461942, "post_id": 48753267, "comment_id": 84507880, "body": "@Skemp there&#39;s no reason to have an explicit type there to start with. Idiomatic Rust eschews them."}, {"owner": {"reputation": 49, "user_id": 9139587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22bdded367394777a4e26622beaed391?s=128&d=identicon&r=PG&f=1", "display_name": "Skemp", "link": "https://stackoverflow.com/users/9139587/skemp"}, "edited": false, "score": 0, "creation_date": 1518462018, "post_id": 48753267, "comment_id": 84507916, "body": "I&#39;m just used to do it like this from other languages and it&#39;s also more readable to me."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 49, "user_id": 9139587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22bdded367394777a4e26622beaed391?s=128&d=identicon&r=PG&f=1", "display_name": "Skemp", "link": "https://stackoverflow.com/users/9139587/skemp"}, "edited": false, "score": 0, "creation_date": 1518518308, "post_id": 48753267, "comment_id": 84529939, "body": "@Skemp How <code>let ai_data: TestAi = TestAi::new();</code> is more readable? That&#39;s like, for example, writing <code>FooBar f = new FooBar();</code> in C#. You duplicate information without any benefit. Furthermore, if you want to replicate some irrelevant foreign idioms in Rust (same for any language), you are on the wrong path."}, {"owner": {"reputation": 49, "user_id": 9139587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22bdded367394777a4e26622beaed391?s=128&d=identicon&r=PG&f=1", "display_name": "Skemp", "link": "https://stackoverflow.com/users/9139587/skemp"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1518545180, "post_id": 48753267, "comment_id": 84547414, "body": "@Boiethios In this case readability is not improved. But in this <code>let b: &amp;TestAi = match ai.ai_data.as_any().downcast_ref::&lt;TestAi&gt;() {         Some(b) =&gt; b,         None =&gt; panic!(&quot;&amp;a isn&#39;t a B!&quot;),     };</code> it is, at least for me. Also, I&#39;m rust noob, but I&#39;m trying to improve."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1518461985, "last_edit_date": 1518461985, "creation_date": 1518460681, "answer_id": 48753267, "question_id": 48753019, "link": "https://stackoverflow.com/questions/48753019/how-to-get-mutable-struct-from-boxed-trait/48753267#48753267", "title": "How to get mutable struct from boxed trait", "body": "<blockquote>\n  <p>How to get mutable struct from boxed trait</p>\n</blockquote>\n\n<p>You cannot get a struct from the boxed trait object. You can get a reference to the struct, however. </p>\n\n<p>As <a href=\"https://doc.rust-lang.org/book/second-edition/ch03-01-variables-and-mutability.html\" rel=\"nofollow noreferrer\">explained in <em>The Rust Programming Language</em>'s chapter on variables and mutability</a>, mutability is a property of the binding. Additionally, as described in <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html\" rel=\"nofollow noreferrer\">the chapter on references and borrowing</a>, a mutable reference (<code>&amp;mut T</code>) is distinct from an immutable reference (<code>&amp;T</code>). Based on these two points, you cannot get a mutable reference from an immutable variable<sup>1</sup>.</p>\n\n<p>The code has:</p>\n\n<ul>\n<li>An immutable variable</li>\n<li>An immutable reference to that variable</li>\n<li>Calls <code>Any::downcast_ref</code>, which returns an immutable reference</li>\n</ul>\n\n<p>When you fix all of those, the code works:</p>\n\n<pre><code>use std::any::Any;\n\npub trait AiData {\n    fn tick(&amp;mut self);\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any;\n}\n\npub struct Ai {\n    pub ai_data: Box&lt;AiData&gt;,\n}\n\nimpl Ai {\n    pub fn new(ai_data: Box&lt;AiData&gt;) -&gt; Ai {\n        Ai { ai_data }\n    }\n}\n\npub struct TestAi {\n    pub index: u8,\n}\n\nimpl TestAi {\n    pub fn new() -&gt; TestAi {\n        TestAi { index: 1 }\n    }\n}\n\nimpl AiData for TestAi {\n    fn tick(&amp;mut self) {\n        println!(\"tick\");\n    }\n\n    fn as_any_mut(&amp;mut self) -&gt; &amp;mut Any {\n        self\n    }\n}\n\nfn main() {\n    let ai_data = TestAi::new();\n    let mut ai = Ai::new(Box::new(ai_data));\n\n    let b = ai.ai_data\n        .as_any_mut()\n        .downcast_mut::&lt;TestAi&gt;()\n        .expect(\"&amp;a isn't a B!\");\n    println!(\"{:?}\", b.index);\n\n    b.tick();\n    b.index = 2;\n}\n</code></pre>\n\n<p><sup>1</sup> You can read about <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-05-interior-mutability.html\" rel=\"nofollow noreferrer\">interior mutability</a> which actually does allow you to get a mutable reference from an immutable variable, at the expense of introducing runtime checks to prevent aliasing.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25246443/155423\">Rust: downcasting and Box&lt;Any&gt;</a></li>\n<li><a href=\"https://stackoverflow.com/q/33687447/155423\">How to get a struct reference from a boxed trait?</a></li>\n</ul>\n"}], "owner": {"reputation": 49, "user_id": 9139587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22bdded367394777a4e26622beaed391?s=128&d=identicon&r=PG&f=1", "display_name": "Skemp", "link": "https://stackoverflow.com/users/9139587/skemp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1461, "favorite_count": 0, "accepted_answer_id": 48753267, "answer_count": 1, "score": -1, "last_activity_date": 1518461985, "creation_date": 1518459660, "last_edit_date": 1518459848, "question_id": 48753019, "link": "https://stackoverflow.com/questions/48753019/how-to-get-mutable-struct-from-boxed-trait", "title": "How to get mutable struct from boxed trait", "body": "<p>I'd like to modify data in a struct based on a trait that is boxed. The following code prints the value but gives me \"cannot mutably borrow immutable field\" when I try to change it or \"cannot borrow as mutable\" when calling its function.</p>\n\n<p>My plan is to have a vector of <code>Ai</code> each containing the <code>AiData</code> derived struct and then iterate over them, set some data in it and call the <code>tick()</code> function. </p>\n\n<pre><code>use std::any::Any;\n\npub trait AiData {\n    fn tick(&amp;mut self);\n    fn as_any(&amp;self) -&gt; &amp;Any;\n}\n\npub struct Ai {\n    pub ai_data: Box&lt;AiData&gt;,\n}\n\nimpl Ai {\n    pub fn new(ai_data: Box&lt;AiData&gt;) -&gt; Ai {\n        Ai { ai_data: ai_data }\n    }\n}\n\npub struct TestAi {\n    pub index: u8,\n}\n\nimpl TestAi {\n    pub fn new() -&gt; TestAi {\n        TestAi { index: 1 }\n    }\n}\n\nimpl AiData for TestAi {\n    fn tick(&amp;mut self) {\n        println!(\"tick\");\n    }\n\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self\n    }\n}\n\nfn main() {\n    let ai_data: TestAi = TestAi::new();\n    let ai: Ai = Ai::new(Box::new(ai_data));\n\n    let b: &amp;TestAi = match ai.ai_data.as_any().downcast_ref::&lt;TestAi&gt;() {\n        Some(b) =&gt; b,\n        None =&gt; panic!(\"&amp;a isn't a B!\"),\n    };\n    println!(\"{:?}\", b.index);\n\n    b.tick();\n    b.index = 2;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable borrowed content `*b` as mutable\n  --&gt; src/main.rs:48:5\n   |\n48 |     b.tick();\n   |     ^ cannot borrow as mutable\n\nerror[E0594]: cannot assign to immutable field `b.index`\n  --&gt; src/main.rs:49:5\n   |\n49 |     b.index = 2;\n   |     ^^^^^^^^^^^ cannot mutably borrow immutable field\n</code></pre>\n"}, {"tags": ["rust", "mime"], "answers": [{"comments": [{"owner": {"reputation": 191, "user_id": 6372072, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/00658b4be4698ff8eb3b20edd3f95281?s=128&d=identicon&r=PG&f=1", "display_name": "Marc Flury", "link": "https://stackoverflow.com/users/6372072/marc-flury"}, "edited": false, "score": 0, "creation_date": 1518442826, "post_id": 48747358, "comment_id": 84495528, "body": "Thanks a lot. I changed to last line to     <code>out_file.write_all(&amp;attached_file).unwrap();</code>  I should have checked that."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 191, "user_id": 6372072, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/00658b4be4698ff8eb3b20edd3f95281?s=128&d=identicon&r=PG&f=1", "display_name": "Marc Flury", "link": "https://stackoverflow.com/users/6372072/marc-flury"}, "edited": false, "score": 0, "creation_date": 1518464752, "post_id": 48747358, "comment_id": 84509392, "body": "@MarcFlury Likewise, when you read your <code>test_mail</code> file, you should load its contents into a <code>Vec&lt;u8&gt;</code> using <a href=\"https://doc.rust-lang.org/stable/std/io/trait.Read.html#method.read_to_end\" rel=\"nofollow noreferrer\"><code>read_to_end</code></a> rather than <code>read_to_string</code>. Reading to a <code>String</code> happens to work when the binary attachment is encoded in an ASCII-compatible encoding, but <code>parse_mail</code> accepts a byte slice, so you are unnecessarily validating that the file is UTF-8."}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 1, "last_activity_date": 1518441211, "creation_date": 1518441211, "answer_id": 48747358, "question_id": 48743636, "link": "https://stackoverflow.com/questions/48743636/binary-attachments-are-corrupted-when-using-mailparses-parsedmailget-body/48747358#48747358", "title": "Binary attachments are corrupted when using mailparse&#39;s ParsedMail::get_body", "body": "<p><code>ParsedMail::get_body</code> only works for text data (that can be converted to a unicode string). You want to use <a href=\"https://staktrace.github.io/mailparse/target/doc/mailparse/struct.ParsedMail.html#method.get_body_raw\" rel=\"nofollow noreferrer\"><code>ParsedMail::get_body_raw</code></a> to access binary attachments:</p>\n\n<pre><code>let attached_file = parsed.subparts[2].get_body()_raw.unwrap();\n\n// Write the file\nlet mut out_file = File::create(\"out_file.xlsx\").unwrap();\nout_file.write_all(attached_file).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 191, "user_id": 6372072, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/00658b4be4698ff8eb3b20edd3f95281?s=128&d=identicon&r=PG&f=1", "display_name": "Marc Flury", "link": "https://stackoverflow.com/users/6372072/marc-flury"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "accepted_answer_id": 48747358, "answer_count": 1, "score": 0, "last_activity_date": 1518443858, "creation_date": 1518429362, "last_edit_date": 1518443858, "question_id": 48743636, "link": "https://stackoverflow.com/questions/48743636/binary-attachments-are-corrupted-when-using-mailparses-parsedmailget-body", "title": "Binary attachments are corrupted when using mailparse&#39;s ParsedMail::get_body", "body": "<p>I am trying to parse emails saved as MIME files using Rust. I am able to extract the body and also attachments. When the attachment is a CSV file, everything works fine. When the file is a PDF or XLSX file, the saved file is corrupted. I suspect that there is a problem with the encoding because when I inspect the headers I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Content-Type = \"application/vnd.openxmlformats officedocument.spreadsheetml.sheet\"\n</code></pre>\n\n<p>This is my code which works for CSV but not for XLSX:</p>\n\n<pre><code>extern crate base64;\nextern crate mailparse;\n\nuse mailparse::*;\nuse std::fs::File;\nuse std::string::*;\nuse std::io::prelude::*;\n\nfn main() {\n    let mut file = File::open(\"test_mail\").unwrap();\n    let mut contents = String::new();\n    let _silent = file.read_to_string(&amp;mut contents);\n    let parsed = parse_mail(contents.as_bytes()).unwrap();\n\n    // This is the attached file\n    let attached_file = parsed.subparts[2].get_body().unwrap();\n\n    // Write the file\n    let mut out_file = File::create(\"out_file.xlsx\").unwrap();\n    out_file.write_all(attached_file.as_bytes()).unwrap();\n\n    println!(\"Done\")\n}\n</code></pre>\n\n<p>I am using Rust 1.23.0, Cargo 0.24.0, and I'm  running this on Debian.</p>\n"}, {"tags": ["struct", "enums", "rust"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 3, "creation_date": 1518426278, "post_id": 48739776, "comment_id": 84485105, "body": "Another small detail: <code>pub enum</code> makes all details (variants and their fields) public, <code>pub struct</code> still keeps the fields private by default.  If you need to expose <code>enum</code> data in a public interface but want to hide the details, you need to wrap the (private) <code>enum</code> in a <code>pub struct</code>."}], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1518443339, "post_id": 48739831, "comment_id": 84495848, "body": "What do you mean by &quot;Rust can optimize around it&quot;? By the time you get to codegen, structs are really just enums with a single variant, so they should be identical for optimization purposes."}], "tags": [], "owner": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "is_accepted": false, "score": 2, "last_activity_date": 1518411915, "creation_date": 1518411915, "answer_id": 48739831, "question_id": 48739776, "link": "https://stackoverflow.com/questions/48739776/when-should-we-use-a-struct-as-opposed-to-an-enum/48739831#48739831", "title": "When should we use a struct as opposed to an enum?", "body": "<p>Enums have multiple possibilities. Structs have only one possible \"type\" of thing they can be. Mathematically, we say a struct is a product type and an enum is a sum of products. If you only have one possibility, use a struct. For example, a point in space is <em>always</em> going to be three numbers. It's never going to be a string, or a function, or something else. So it should be a struct containing three numbers. On the other hand, if you're building a mathematical expression, it could be (for instance) a number or two expressions joined by an operator. It has multiple possibilities, so it should be an enum.</p>\n\n<p>In short, if a struct works, use a struct. Rust can optimize around it, and it's going to be clearer to anyone reading your code what the value is supposed to be treated as.</p>\n"}, {"tags": [], "owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "is_accepted": false, "score": 0, "last_activity_date": 1518412140, "creation_date": 1518412140, "answer_id": 48739858, "question_id": 48739776, "link": "https://stackoverflow.com/questions/48739776/when-should-we-use-a-struct-as-opposed-to-an-enum/48739858#48739858", "title": "When should we use a struct as opposed to an enum?", "body": "<p>An <code>Enum</code> is a type with a constrained set of values.</p>\n\n<pre><code>enum Rainbow {\n    Red,\n    Orange,\n    Yellow,\n    Green,\n    Blue,\n    Indigo,\n    Violet\n}\n\nlet color = Red;\n\nmatch color {\n    Red =&gt; { handle Red case },\n    // all the rest would go here\n}\n</code></pre>\n\n<p>You can store data in the Enum if you need it.</p>\n\n<pre><code>enum ParseData {\n    Whitespace,\n    Token(String),\n    Number(i32),\n}\n\nfn parse(input: String) -&gt; Result&lt;String, ParseData&gt;;\n</code></pre>\n\n<p>A struct is a way to represent a thing.</p>\n\n<pre><code>struct Window {\n    title: String,\n    position: Position,\n    visible: boolean,\n}\n</code></pre>\n\n<p>Now you can make new <code>Window</code> objects that represent a window on your screen.</p>\n"}, {"comments": [{"owner": {"reputation": 1785, "user_id": 1932934, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/73ceb0d823c0168b55045d7ffaaf2364?s=128&d=identicon&r=PG", "display_name": "Taztingo", "link": "https://stackoverflow.com/users/1932934/taztingo"}, "edited": false, "score": 0, "creation_date": 1518705051, "post_id": 48756348, "comment_id": 84622455, "body": "What about structs that implement a trait? (i.e trait HTTPResponse, and structs Ok, BadRequest, NotFound). Would the difference be that structs that implement traits have different method implementations, but enums are required to have the same method implementations?"}, {"owner": {"reputation": 1455, "user_id": 6073823, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iK5jZ.jpg?s=128&g=1", "display_name": "S&#248;ren Mortensen", "link": "https://stackoverflow.com/users/6073823/s%c3%b8ren-mortensen"}, "reply_to_user": {"reputation": 1785, "user_id": 1932934, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/73ceb0d823c0168b55045d7ffaaf2364?s=128&d=identicon&r=PG", "display_name": "Taztingo", "link": "https://stackoverflow.com/users/1932934/taztingo"}, "edited": false, "score": 0, "creation_date": 1519231646, "post_id": 48756348, "comment_id": 84828669, "body": "@Taztingo If I understand what you&#39;re asking correctly, then the answer is yes, that&#39;s one of the significant differences: the trait could be implemented differently for each of the structs, whereas you implement a trait once for an entire enum. However, you could always match on <code>self</code> in the trait method implementations, and create effectively different implementations for each variant."}], "tags": [], "owner": {"reputation": 1455, "user_id": 6073823, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iK5jZ.jpg?s=128&g=1", "display_name": "S&#248;ren Mortensen", "link": "https://stackoverflow.com/users/6073823/s%c3%b8ren-mortensen"}, "is_accepted": true, "score": 4, "last_activity_date": 1547060014, "last_edit_date": 1547060014, "creation_date": 1518473364, "answer_id": 48756348, "question_id": 48739776, "link": "https://stackoverflow.com/questions/48739776/when-should-we-use-a-struct-as-opposed-to-an-enum/48756348#48756348", "title": "When should we use a struct as opposed to an enum?", "body": "<p>Perhaps the easiest way to explain the fundamental difference is that an enum contains \"variants\", of which you can only ever have one at a time, whereas a struct contains one or more fields, <em>all</em> of which you must have.</p>\n\n<p>So you might use an <code>enum</code> to model something like an error code, where you can only ever have one at a time:</p>\n\n<pre><code>enum ErrorCode {\n    NoDataReceived,\n    CorruptedData,\n    BadResponse,\n}\n</code></pre>\n\n<p>Enum variants can contain values if needed. For example, we could add a case to <code>ErrorCode</code> like so:</p>\n\n<pre><code>enum ErrorCode {\n    NoDataReceived,\n    CorruptedData,\n    BadResponse,\n    BadHTTPCode(u16),\n}\n</code></pre>\n\n<p>In this case, an instance of <code>ErrorCode::BadHTTPCode</code> always contains a <code>u16</code>.</p>\n\n<p>This makes each individual variant behave kind of like either a <a href=\"https://rustbyexample.com/custom_types/structs.html\" rel=\"nofollow noreferrer\">tuple struct or unit struct</a>:</p>\n\n<pre><code>// Unit structs have no fields\nstruct UnitStruct;\n\n// Tuple structs contain anonymous values.\nstruct TupleStruct(u16, &amp;'static str);\n</code></pre>\n\n<p>However, the advantage of writing them as enum variants is that each of the cases of <code>ErrorCode</code> can be stored in a value of type <code>ErrorCode</code>, as below (this would not be possible with unrelated structs).</p>\n\n<pre><code>fn handle_error(error: ErrorCode) {\n    match error {\n        ErrorCode::NoDataReceived =&gt; println!(\"No data received.\"),\n        ErrorCode::CorruptedData =&gt; println!(\"Data corrupted.\"),\n        ErrorCode::BadResponse =&gt; println!(\"Bad response received from server.\"),\n        ErrorCode::BadHTTPCode(code) =&gt; println!(\"Bad HTTP code received: {}\", code)\n    };\n}\n\nfn main() {\n    handle_error(ErrorCode::NoDataReceived); // prints \"No data received.\"\n    handle_error(ErrorCode::BadHTTPCode(404)); // prints \"Bad HTTP code received: 404\"\n}\n</code></pre>\n\n<p>You can then <code>match</code> on the enum to determine which variant you've been given, and perform different actions depending on which one it is.</p>\n\n<hr>\n\n<p>By contrast, the third type of struct that I didn't mention above is the most commonly used - it's the type of struct that everyone is referring to when they simply say \"struct\".</p>\n\n<pre><code>struct Response {\n    data: Option&lt;Data&gt;,\n    response: HTTPResponse,\n    error: String,\n}\n\nfn main() {\n    let response = Response {\n        data: Option::None,\n        response: HTTPResponse::BadRequest,\n        error: \"Bad request\".to_owned()\n    }\n}\n</code></pre>\n\n<p>Note that in that case, in order to create a <code>Response</code>, all of its fields must be given values.</p>\n\n<p>Also, the way that the value of <code>response</code> is created (i.e. <code>HTTPResponse::Something</code>) implies that <code>HTTPResponse</code> is an enum. It might look something like this:</p>\n\n<pre><code>enum HTTPResponse {\n    Ok,         // 200\n    BadRequest, // 400\n    NotFound,   // 404\n}\n</code></pre>\n"}], "owner": {"reputation": 1785, "user_id": 1932934, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/73ceb0d823c0168b55045d7ffaaf2364?s=128&d=identicon&r=PG", "display_name": "Taztingo", "link": "https://stackoverflow.com/users/1932934/taztingo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1855, "favorite_count": 3, "accepted_answer_id": 48756348, "answer_count": 3, "score": 10, "last_activity_date": 1547060014, "creation_date": 1518411499, "last_edit_date": 1518564825, "question_id": 48739776, "link": "https://stackoverflow.com/questions/48739776/when-should-we-use-a-struct-as-opposed-to-an-enum", "title": "When should we use a struct as opposed to an enum?", "body": "<p>Structs and enums are similar to each other. </p>\n\n<p>When would it be better to use a struct as opposed to an enum (or vice-versa)?  Can someone give a clear example where using a struct is preferable to using an enum?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518385915, "post_id": 48736833, "comment_id": 84473218, "body": "You literally just want a sequence of characters without caring for what they are, just that they are in some sort of order?"}, {"owner": {"reputation": 781, "user_id": 5314214, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/JnTI4.png?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/5314214/alex"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518385965, "post_id": 48736833, "comment_id": 84473235, "body": "@Shepmaster Actually, I want them to start with 0x30A0. Have to edit the question"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518386157, "post_id": 48736833, "comment_id": 84473293, "body": "<code>(1..9).map(|i| char::from_u32(0x30A0 + i).unwrap())</code>"}, {"owner": {"reputation": 781, "user_id": 5314214, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/JnTI4.png?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/5314214/alex"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518386210, "post_id": 48736833, "comment_id": 84473309, "body": "@Shepmaster got it, thanks!"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1518389883, "post_id": 48736833, "comment_id": 84474334, "body": "<i>&quot;Coming from a JavaScript background,&quot;</i> the code below is not valid JavaScript code however. One might as well just say it is just pseudo-code."}], "owner": {"reputation": 781, "user_id": 5314214, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/JnTI4.png?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/5314214/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 198, "favorite_count": 0, "closed_date": 1518386142, "answer_count": 0, "score": 0, "last_activity_date": 1518386325, "creation_date": 1518385787, "last_edit_date": 1518386192, "question_id": 48736833, "link": "https://stackoverflow.com/questions/48736833/how-do-i-get-a-character-from-a-unicode-value", "closed_reason": "Duplicate", "title": "How do I get a character from a Unicode value?", "body": "<p>Coming from a JavaScript background, the following code would generate a list of chars one after the other, starting with <code>0x30A0</code>:</p>\n\n<pre><code>for i = 1 to 9\n   String.fromCharCode(0x30A0 + i)\n</code></pre>\n\n<p>chars like \u30a1 etc.</p>\n\n<p>How do I achieve this in Rust?</p>\n"}, {"tags": ["select", "rust", "future"], "answers": [{"comments": [{"owner": {"reputation": 313, "user_id": 7085243, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d9eb042d6fbc096ff6cbe4db83f16e5?s=128&d=identicon&r=PG&f=1", "display_name": "Sergey", "link": "https://stackoverflow.com/users/7085243/sergey"}, "edited": false, "score": 0, "creation_date": 1518381910, "post_id": 48736148, "comment_id": 84471842, "body": "is it possible to do the same manipulaton with <code>Timeout</code> using <code>CpuPool</code> from <code>futures_cpupool::CpuPool</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 313, "user_id": 7085243, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d9eb042d6fbc096ff6cbe4db83f16e5?s=128&d=identicon&r=PG&f=1", "display_name": "Sergey", "link": "https://stackoverflow.com/users/7085243/sergey"}, "edited": false, "score": 0, "creation_date": 1518382264, "post_id": 48736148, "comment_id": 84471956, "body": "@Sergey I&#39;m not sure I understand your question, but I&#39;ve attempted to answer."}, {"owner": {"reputation": 1460, "user_id": 2655102, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/a14dc4fa847dd6fe776da0cc90cce8cf?s=128&d=identicon&r=PG", "display_name": "Renkai", "link": "https://stackoverflow.com/users/2655102/renkai"}, "edited": false, "score": 0, "creation_date": 1583738046, "post_id": 48736148, "comment_id": 107203718, "body": "Will the check rate of <code>async-based timer</code> effect the performance of the program?If yes how could I configure it,if no why ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1460, "user_id": 2655102, "user_type": "registered", "accept_rate": 22, "profile_image": "https://www.gravatar.com/avatar/a14dc4fa847dd6fe776da0cc90cce8cf?s=128&d=identicon&r=PG", "display_name": "Renkai", "link": "https://stackoverflow.com/users/2655102/renkai"}, "edited": false, "score": 1, "creation_date": 1583765668, "post_id": 48736148, "comment_id": 107216857, "body": "@Renkai a great question. My original story doesn&#39;t cover that, but I&#39;ve just added a section that does. Does that help?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1583765591, "last_edit_date": 1583765591, "creation_date": 1518381186, "answer_id": 48736148, "question_id": 48735952, "link": "https://stackoverflow.com/questions/48735952/why-does-futureselect-choose-the-future-with-a-longer-sleep-period-first/48736148#48736148", "title": "Why does Future::select choose the future with a longer sleep period first?", "body": "<h1>TL;DR: use <code>tokio::time</code></h1>\n\n<p>If there's one thing to take away from this: <strong><em>never</strong> perform blocking or long-running operations inside of asynchronous operations</em>.</p>\n\n<p>If you want a timeout, use something from <a href=\"https://docs.rs/tokio/0.2.10/tokio/time/index.html\" rel=\"nofollow noreferrer\"><code>tokio::time</code></a>, such as <a href=\"https://docs.rs/tokio/0.2.10/tokio/time/fn.delay_for.html\" rel=\"nofollow noreferrer\"><code>delay_for</code></a> or <a href=\"https://docs.rs/tokio/0.2.10/tokio/time/fn.timeout.html\" rel=\"nofollow noreferrer\"><code>timeout</code></a>:</p>\n\n<pre><code>use futures::future::{self, Either}; // 0.3.1\nuse std::time::Duration;\nuse tokio::time; // 0.2.9\n\n#[tokio::main]\nasync fn main() {\n    let time_out1 = time::delay_for(Duration::from_secs(5));\n    let time_out2 = time::delay_for(Duration::from_secs(1));\n\n    match future::select(time_out1, time_out2).await {\n        Either::Left(_) =&gt; println!(\"Timer 1 finished\"),\n        Either::Right(_) =&gt; println!(\"Timer 2 finished\"),\n    }\n}\n</code></pre>\n\n<h1>What's the problem?</h1>\n\n<p>To understand why you get the behavior you do, you have to understand the implementation of futures at a high level. </p>\n\n<p>When you call <code>run</code>, there's a loop that calls <code>poll</code> on the passed-in future. It loops until the future returns success or failure, otherwise the future isn't done yet.</p>\n\n<p>Your implementation of <code>poll</code> \"locks up\" this loop for 5 seconds because nothing can break the call to <code>sleep</code>. By the time the sleep is done, the future is ready, thus that future is selected.</p>\n\n<p>The implementation of an async timeout conceptually works by checking the clock every time it's polled, saying if enough time has passed or not.</p>\n\n<p>The big difference is that when a future returns that it's not ready, <em>another future</em> can be checked. This is what <code>select</code> does!</p>\n\n<p>A dramatic re-enactment:</p>\n\n<p><strong>sleep-based timer</strong></p>\n\n<blockquote>\n  <p><strong>core</strong>: Hey <code>select</code>, are you ready to go?</p>\n  \n  <p><strong>select</strong>: Hey <code>future1</code>, are you ready to go?</p>\n  \n  <p><strong>future1</strong>: Hold on a seconnnnnnnn [... 5 seconds pass ...] nnnnd. Yes!</p>\n</blockquote>\n\n<p><strong>simplistic async-based timer</strong></p>\n\n<blockquote>\n  <p><strong>core</strong>: Hey <code>select</code>, are you ready to go?</p>\n  \n  <p><strong>select</strong>: Hey <code>future1</code>, are you ready to go?</p>\n  \n  <p><strong>future1</strong>: <em>Checks watch</em> No.</p>\n  \n  <p><strong>select</strong>: Hey <code>future2</code>, are you ready to go?</p>\n  \n  <p><strong>future2</strong>: <em>Checks watch</em> No.</p>\n  \n  <p><strong>core</strong>: Hey <code>select</code>, are you ready to go?</p>\n  \n  <p>[... polling continues ...]</p>\n  \n  <p>[... 1 second passes ...]</p>\n  \n  <p><strong>core</strong>: Hey <code>select</code>, are you ready to go?</p>\n  \n  <p><strong>select</strong>: Hey <code>future1</code>, are you ready to go?</p>\n  \n  <p><strong>future1</strong>: <em>Checks watch</em> No.</p>\n  \n  <p><strong>select</strong>: Hey <code>future2</code>, are you ready to go?</p>\n  \n  <p><strong>future2</strong>: <em>Checks watch</em> Yes!</p>\n</blockquote>\n\n<p>This simple implementation polls the futures over and over until they are all complete. This is not the most efficient, and not what most executors do.</p>\n\n<p>See <a href=\"https://stackoverflow.com/q/56252798/155423\">How do I execute an async/await function without using any external dependencies?</a> for an implementation of this kind of executor.</p>\n\n<p><strong>smart async-based timer</strong></p>\n\n<blockquote>\n  <p><strong>core</strong>: Hey <code>select</code>, are you ready to go?</p>\n  \n  <p><strong>select</strong>: Hey <code>future1</code>, are you ready to go?</p>\n  \n  <p><strong>future1</strong>: <em>Checks watch</em> No, but I'll call you when something changes.</p>\n  \n  <p><strong>select</strong>: Hey <code>future2</code>, are you ready to go?</p>\n  \n  <p><strong>future2</strong>: <em>Checks watch</em> No, but I'll call you when something changes.</p>\n  \n  <p>[... core stops polling ...]</p>\n  \n  <p>[... 1 second passes ...]</p>\n  \n  <p><strong>future2</strong>: Hey core, something changed.</p>\n  \n  <p><strong>core</strong>: Hey <code>select</code>, are you ready to go?</p>\n  \n  <p><strong>select</strong>: Hey <code>future1</code>, are you ready to go?</p>\n  \n  <p><strong>future1</strong>: <em>Checks watch</em> No.</p>\n  \n  <p><strong>select</strong>: Hey <code>future2</code>, are you ready to go?</p>\n  \n  <p><strong>future2</strong>: <em>Checks watch</em> Yes!</p>\n</blockquote>\n\n<p>This more efficient implementation hands a <em>waker</em> to each future when it is polled. When a future is not ready, it saves that waker for later. When something changes, the waker notifies the core of the executor that now would be a good time to re-check the futures. This allows the executor to not perform what is effectively a busy-wait.</p>\n\n<h1>The generic solution</h1>\n\n<p>When you have have an operation that is blocking or long-running, then the appropriate thing to do is to move that work out of the async loop. See <a href=\"https://stackoverflow.com/q/41932137/155423\">What is the best approach to encapsulate blocking I/O in future-rs?</a> for details and examples.</p>\n"}], "owner": {"reputation": 313, "user_id": 7085243, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d9eb042d6fbc096ff6cbe4db83f16e5?s=128&d=identicon&r=PG&f=1", "display_name": "Sergey", "link": "https://stackoverflow.com/users/7085243/sergey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2218, "favorite_count": 1, "accepted_answer_id": 48736148, "answer_count": 1, "score": 6, "last_activity_date": 1583765591, "creation_date": 1518379979, "last_edit_date": 1580660680, "question_id": 48735952, "link": "https://stackoverflow.com/questions/48735952/why-does-futureselect-choose-the-future-with-a-longer-sleep-period-first", "title": "Why does Future::select choose the future with a longer sleep period first?", "body": "<p>I'm trying to understand <a href=\"https://docs.rs/futures/0.1.18/futures/future/trait.Future.html#method.select\" rel=\"nofollow noreferrer\"><code>Future::select</code></a>: in this example, the future with a longer time delay is returned first.</p>\n\n<p>When I read <a href=\"https://dev.to/mindflavor/rust-futures-an-uneducated-short-and-hopefully-not-boring-tutorial---part-3---the-reactor-433\" rel=\"nofollow noreferrer\">this article</a> with its example, I get cognitive dissonance. The author writes:</p>\n\n<blockquote>\n  <p>The <code>select</code> function runs two (or more in case of <code>select_all</code>) futures and returns the first one coming to completion. This is useful for implementing timeouts.</p>\n</blockquote>\n\n<p>It seems I don't understand the sense of <code>select</code>.</p>\n\n<pre><code>extern crate futures; // v0.1 (old)\nextern crate tokio_core;\n\nuse std::thread;\nuse std::time::Duration;\nuse futures::{Async, Future};\nuse tokio_core::reactor::Core;\n\nstruct Timeout {\n    time: u32,\n}\n\nimpl Timeout {\n    fn new(period: u32) -&gt; Timeout {\n        Timeout { time: period }\n    }\n}\n\nimpl Future for Timeout {\n    type Item = u32;\n    type Error = String;\n\n    fn poll(&amp;mut self) -&gt; Result&lt;Async&lt;u32&gt;, Self::Error&gt; {\n        thread::sleep(Duration::from_secs(self.time as u64));\n        println!(\"Timeout is done with time {}.\", self.time);\n        Ok(Async::Ready(self.time))\n    }\n}\n\nfn main() {\n    let mut reactor = Core::new().unwrap();\n\n    let time_out1 = Timeout::new(5);\n    let time_out2 = Timeout::new(1);\n\n    let task = time_out1.select(time_out2);\n\n    let mut reactor = Core::new().unwrap();\n    reactor.run(task);\n}\n</code></pre>\n\n<p>I need to process the early future with the smaller time delay, and then work with the future with a longer delay. How can I do it?</p>\n"}, {"tags": ["ecmascript-6", "vue.js", "rust", "webassembly"], "comments": [{"owner": {"reputation": 64343, "user_id": 249933, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/458f2e0d08d4114f8b323798cfea141d?s=128&d=identicon&r=PG", "display_name": "ColinE", "link": "https://stackoverflow.com/users/249933/coline"}, "edited": false, "score": 1, "creation_date": 1518383954, "post_id": 48735713, "comment_id": 84472534, "body": "You could just capture a reference to the module as a global variable? You don\u2019t need anything sophisticated just because it is WebAssembly"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518390951, "post_id": 48735713, "comment_id": 84474591, "body": "What do you want the behavior of your component to be if it is used <i>before</i> the WebAssembly module has been loaded/initialized? I think the solution will be the same as what you would do to support code-splitting / asynchronous components. I don&#39;t know Vue, but I&#39;ve used similar techniques for React. I second the point around &quot;it&#39;s not special because it&#39;s WebAssembly&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 70, "user_id": 5387062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/S3vY1.gif?s=128&g=1", "display_name": "SavageS", "link": "https://stackoverflow.com/users/5387062/savages"}, "edited": false, "score": 0, "creation_date": 1518569208, "post_id": 48756687, "comment_id": 84557646, "body": "I am using your first example. the result is a fullfilled promise. I still have to add a .then( api =&gt; {}). Is there way to just call api.doub(2)?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "reply_to_user": {"reputation": 70, "user_id": 5387062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/S3vY1.gif?s=128&g=1", "display_name": "SavageS", "link": "https://stackoverflow.com/users/5387062/savages"}, "edited": false, "score": 0, "creation_date": 1518577105, "post_id": 48756687, "comment_id": 84559545, "body": "If you wanted, but it would require a separate side-channel to make sure the module has loaded first. From an API level that&#39;s not an ideal design. I think your approach of using method 1 and caching it is a good one for what you want, as long as you&#39;re sure it exists by the time you need it."}], "tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": false, "score": 1, "last_activity_date": 1518474970, "creation_date": 1518474970, "answer_id": 48756687, "question_id": 48735713, "link": "https://stackoverflow.com/questions/48735713/how-do-i-load-a-wasm-module-in-a-vue-component-without-initializing-the-module-e/48756687#48756687", "title": "How do I load a WASM module in a Vue component without initializing the module every time?", "body": "<p>Making a wrapper JS module that performs initialization and re-exports the promise seems like the most straightforward approach. </p>\n\n<pre><code>// main.js\nmodule.exports = require(\"./main.rs\").initialize().then(module =&gt; {\n  return {\n    doub: module.cwrap('doub', 'number', ['number'])\n  };\n});\n</code></pre>\n\n<p>Then anything can do</p>\n\n<pre><code>require(\"./main.js\").then(api =&gt; {\n  console.log(api.doub(21));\n});\n</code></pre>\n\n<p>and will always get the same module. Or alternatively you could invert the async part and do</p>\n\n<pre><code>// main.js\nconst api = require(\"./main.rs\").initialize().then(module =&gt; {\n  return {\n    doub: module.cwrap('doub', 'number', ['number'])\n  };\n});\n\nexports.doub = async function (val) {\n  return (await api).doub(val);\n};\n</code></pre>\n\n<p>Then users of your module could do</p>\n\n<pre><code>const api = require(\"./main.js\");\napi.doub(21).then(result =&gt; {\n  console.log(result);\n});\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": false, "score": 2, "last_activity_date": 1518489061, "last_edit_date": 1518489061, "creation_date": 1518474974, "answer_id": 48756688, "question_id": 48735713, "link": "https://stackoverflow.com/questions/48735713/how-do-i-load-a-wasm-module-in-a-vue-component-without-initializing-the-module-e/48756688#48756688", "title": "How do I load a WASM module in a Vue component without initializing the module every time?", "body": "<p>Since the loading of WebAssembly is asynchronous and may actually take some time for large modules, you need to handle the state when the module is not loaded, and then let the rest of the application know when the WebAssembly module is loaded.</p>\n\n<p>You do not say how you are handling state in your Vue application, but if you are e.g. using Vuex you can do something like this:</p>\n\n<pre><code>const doubPlugin = store =&gt; {\n  wasm.initialize().then(module =&gt; {\n    const doub = module.cwrap('doub', 'number', ['number'])\n\n    store.subscribe((mutation, state) =&gt; {\n      if (mutation.type === 'DOUB_REQUEST') {\n        store.commit('DOUB_RESULT', doub(mutation.payload))\n      }\n    })\n\n    store.commit('DOUB_READY')\n  })\n}\n\nconst store = new Vuex.Store({\n  state,\n  mutations,\n  plugins: [doubPlugin]\n})\n</code></pre>\n\n<p>I've done a similar thing in an Elm/WebAssembly application (<a href=\"https://github.com/evestera/json-typegen-elm-wasm/blob/master/src/index.js\" rel=\"nofollow noreferrer\">relevant JavaScript</a>), so if you want to see how this can be applied in practice you can check that out.</p>\n"}, {"tags": [], "owner": {"reputation": 70, "user_id": 5387062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/S3vY1.gif?s=128&g=1", "display_name": "SavageS", "link": "https://stackoverflow.com/users/5387062/savages"}, "is_accepted": false, "score": 0, "last_activity_date": 1518817647, "last_edit_date": 1518817647, "creation_date": 1518572303, "answer_id": 48778399, "question_id": 48735713, "link": "https://stackoverflow.com/questions/48735713/how-do-i-load-a-wasm-module-in-a-vue-component-without-initializing-the-module-e/48778399#48778399", "title": "How do I load a WASM module in a Vue component without initializing the module every time?", "body": "<p>I created a class to wrap the WebAssembly loading and created a cwrap for every function:</p>\n\n<pre><code>class mkLib {\n  ready = false\n  _mod = require(\"./main.rs\").initialize().then(module =&gt; {\n    this._mod = module\n    this.doub = module.cwrap('doub', 'number', ['number'])\n    this.ready = true\n  })\n\n}\nexport default mkLib\n</code></pre>\n\n<p>In the Vue component's <code>data</code> there is a variable for the new class and in <code>watch</code> I wait for a change in the <code>ready</code> property:</p>\n\n<pre><code>data () {\n  return {\n    mod: new mkLib,\n    ready: false\n  }\n},\nwatch: {\n  'mod.ready': function () {\n    this.ready = true\n    // now this.mod.FUNC(PARAMS) can be used\n    console.log(this.mod.doub(20))\n  }\n}\n</code></pre>\n"}], "owner": {"reputation": 70, "user_id": 5387062, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/S3vY1.gif?s=128&g=1", "display_name": "SavageS", "link": "https://stackoverflow.com/users/5387062/savages"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1174, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1518817647, "creation_date": 1518378420, "last_edit_date": 1518379131, "question_id": 48735713, "link": "https://stackoverflow.com/questions/48735713/how-do-i-load-a-wasm-module-in-a-vue-component-without-initializing-the-module-e", "title": "How do I load a WASM module in a Vue component without initializing the module every time?", "body": "<p>I have created a Rust library of type <code>cdylib</code> using </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo web build --target=wasm32-unknown-unknown\n</code></pre>\n\n<p>I use a modified version of the \"rust-wasm-loader\" NPM package to build and load the WASM file. rust-wasm-loader uses this as a way to use the Rust code:</p>\n\n<pre><code>const wasm = require('./main.rs')\nwasm.initialize().then(module =&gt; {\n    // Use your module here \n    const doub = module.cwrap('doub', 'number', ['number'])\n    console.log(doub(21))\n})\n</code></pre>\n\n<p>I do not want to initialize the module every time I want to use the code. How do I load the module and use it like a library?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518370064, "post_id": 48734211, "comment_id": 84467757, "body": "While complete, your example isn&#39;t really <i>minimal</i>. It appears you just copy-pasted your entire file in. What does the <code>DoubleEndedIterator</code> have to do with the problem? Or the implementation of <code>size_hint</code>? Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518370364, "post_id": 48734211, "comment_id": 84467856, "body": "Really, this is a duplicate of <a href=\"https://stackoverflow.com/questions/32062866/how-to-use-the-lifetime-on-asref\">How to use the lifetime on AsRef</a> \u2014 you are trying to take a reference to an owned value that will go out of scope (<code>Some(x) =&gt; Some(x.as_ref())</code>)"}, {"owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518370501, "post_id": 48734211, "comment_id": 84467905, "body": "Thanks, removed the suggested superfluous parts.  I wanted to keep in the test to show usage, since as you can see, a and b would stay alive for the length of the test, so it seems like there ought to be a way to describe this in Rust.  I&#39;m still learning the language, so it&#39;s difficult for me to know whether my approach is wrong or something specific that I&#39;m doing is wrong."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518370517, "post_id": 48734211, "comment_id": 84467914, "body": "Also, FYI, you don&#39;t need <code>S1</code>/<code>S2</code>; you can just say <code>I1::Item: AsRef&lt;OsStr&gt; + &#39;a</code>."}, {"owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518370622, "post_id": 48734211, "comment_id": 84467948, "body": "No, I don&#39;t think this is a duplicate of that question.  I&#39;m specifically using types that contain references to OsStr."}], "answers": [{"comments": [{"owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "edited": false, "score": 0, "creation_date": 1518371763, "post_id": 48734486, "comment_id": 84468319, "body": "Adding <code>&amp;&#39;a</code> into the Iterator type bounds did the trick, thanks!"}, {"owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "edited": false, "score": 0, "creation_date": 1518454080, "post_id": 48734486, "comment_id": 84503378, "body": "One last tweak that I found in making this work well in my program: separating the lifetime parameters and declaring that the iterator returns the shorter of the two."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "edited": false, "score": 0, "creation_date": 1518454213, "post_id": 48734486, "comment_id": 84503482, "body": "@RossLight that seems very unlikely to have a useful effect. The lifetimes need to be unified to produce the end iterator, so there&#39;s no reason to have multiple distinct input lifetimes. What sample of code didn&#39;t work before you made this change? Is this with my last edit which no longer has the lifetime on the struct?"}, {"owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "edited": false, "score": 0, "creation_date": 1518454627, "post_id": 48734486, "comment_id": 84503760, "body": "I want to produce an iterator over two sources that have distinct lifetimes (imagine a and b in my test are in different scopes), and have it return references that are valid for the shorter of the two lifetimes: <a href=\"https://gist.github.com/zombiezen/802979e9d64bd82ad76760ad9675a3de\" rel=\"nofollow noreferrer\">gist.github.com/zombiezen/802979e9d64bd82ad76760ad9675a3de</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "edited": false, "score": 0, "creation_date": 1518454748, "post_id": 48734486, "comment_id": 84503827, "body": "@RossLight my point is that having two input lifetimes makes no sense if you only have one output lifetime. The code presented here <a href=\"https://play.rust-lang.org/?gist=3fb0334ae920825de6a52ccdb8f46ad1&amp;version=stable\" rel=\"nofollow noreferrer\">already works if <code>a</code> and <code>b</code> are in different scopes</a>."}, {"owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "edited": false, "score": 0, "creation_date": 1518455569, "post_id": 48734486, "comment_id": 84504354, "body": "The code I was trying to use looked like <a href=\"https://play.rust-lang.org/?gist=5d49508554ab9ffc3d97fdd3f8edeb69&amp;version=stable\" rel=\"nofollow noreferrer\">this</a>.  I realize that the way I tried to bound the output lifetime doesn&#39;t work if I flip argument order, so now I&#39;m thoroughly confused."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1518373240, "last_edit_date": 1518373240, "creation_date": 1518371104, "answer_id": 48734486, "question_id": 48734211, "link": "https://stackoverflow.com/questions/48734211/how-do-i-specify-the-lifetime-of-an-asref/48734486#48734486", "title": "How do I specify the lifetime of an AsRef?", "body": "<p><strong>You don't</strong>.</p>\n\n<p><code>AsRef</code> is a trait and its definition is fixed:</p>\n\n<pre><code>pub trait AsRef&lt;T&gt;\nwhere\n    T: ?Sized, \n{\n    fn as_ref(&amp;self) -&gt; &amp;T;\n}\n</code></pre>\n\n<p>It can <em>only</em> be used to take a reference to one thing and get another reference with the same lifetime.</p>\n\n<p>Your code would allow an <code>Iterator&lt;Item = OsString&gt;</code>:</p>\n\n<pre><code>use std::ffi::{OsStr, OsString};\n\nfn proof&lt;'a, I&gt;(_: I)\nwhere\n    I: Iterator,\n    I::Item: AsRef&lt;OsStr&gt; + 'a,\n{}\n\nfn main() {\n    proof(vec![OsString::new()].into_iter());\n}\n</code></pre>\n\n<p>If you then called <code>AsRef</code> on the item, you'd have a reference to something that doesn't live beyond the function. However, you are attempting to return that reference, which would be invalid. Thus, Rust has prevented you from introducing memory unsafety; hooray!</p>\n\n<p>This is the exact same problem as <a href=\"https://stackoverflow.com/q/32062866/155423\">How to use the lifetime on AsRef</a></p>\n\n<hr>\n\n<p>The good news is that you can express what you want, you just need to state that your iterator <em>returns references</em>:</p>\n\n<pre><code>impl&lt;'a, A, B, S1, S2&gt; Iterator for JoinArgs&lt;'a, A, B&gt;\nwhere\n    A: Iterator&lt;Item = &amp;'a S1&gt;,\n    S1: AsRef&lt;OsStr&gt; + 'a,\n    B: Iterator&lt;Item = &amp;'a S2&gt;,\n    S2: AsRef&lt;OsStr&gt; + 'a,\n{\n    // ...\n}\n</code></pre>\n\n<hr>\n\n<p>As an aside, you don't need to have the <code>PhantomData</code> or the lifetime on your struct:</p>\n\n<pre><code>use std::convert::AsRef;\nuse std::ffi::OsStr;\n\n#[derive(Clone, Debug)]\n#[must_use = \"join_args is lazy and does nothing unless consumed\"]\npub struct JoinArgs&lt;A, B&gt; {\n    a: A,\n    b: B,\n    state: JoinState,\n}\n\n#[derive(Clone, Debug)]\nenum JoinState {\n    Both,\n    Front,\n    Back,\n}\n\n/// Chains two iterable argument lists.\npub fn join_args&lt;I1, I2&gt;(iter1: I1, iter2: I2) -&gt; JoinArgs&lt;I1::IntoIter, I2::IntoIter&gt;\nwhere\n    I1: IntoIterator,\n    I2: IntoIterator,\n{\n    JoinArgs {\n        a: iter1.into_iter(),\n        b: iter2.into_iter(),\n        state: JoinState::Both,\n    }\n}\n\nimpl&lt;'a, A, B, S1, S2&gt; Iterator for JoinArgs&lt;A, B&gt;\nwhere\n    A: Iterator&lt;Item = &amp;'a S1&gt;,\n    S1: AsRef&lt;OsStr&gt; + 'a,\n    B: Iterator&lt;Item = &amp;'a S2&gt;,\n    S2: AsRef&lt;OsStr&gt; + 'a,\n{\n    type Item = &amp;'a OsStr;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        match self.state {\n            JoinState::Both =&gt; match self.a.next() {\n                Some(x) =&gt; Some(x.as_ref()),\n                None =&gt; {\n                    self.state = JoinState::Back;\n                    self.b.next().map(AsRef::as_ref)\n                }\n            },\n            JoinState::Front =&gt; self.a.next().map(AsRef::as_ref),\n            JoinState::Back =&gt; self.b.next().map(AsRef::as_ref),\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    use std::ffi::OsString;\n\n    #[test]\n    fn test_join_args() {\n        let a = &amp;[OsStr::new(\"abc\"), OsStr::new(\"def\")];\n        let b = vec![OsString::from(\"ghi\")];\n        let result: Vec&lt;&amp;OsStr&gt; = join_args(a, &amp;b).collect();\n        assert_eq!(\n            result,\n            [OsStr::new(\"abc\"), OsStr::new(\"def\"), OsStr::new(\"ghi\"),]\n        );\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32062866/155423\">How to use the lifetime on AsRef</a></li>\n</ul>\n"}], "owner": {"reputation": 3575, "user_id": 111866, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/e742e21c1b64a037eaa90aea1fdf7874?s=128&d=identicon&r=PG", "display_name": "Ross Light", "link": "https://stackoverflow.com/users/111866/ross-light"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1339, "favorite_count": 0, "accepted_answer_id": 48734486, "answer_count": 1, "score": 3, "last_activity_date": 1518373240, "creation_date": 1518369520, "last_edit_date": 1518370289, "question_id": 48734211, "link": "https://stackoverflow.com/questions/48734211/how-do-i-specify-the-lifetime-of-an-asref", "title": "How do I specify the lifetime of an AsRef?", "body": "<p>I'm trying to write a function that joins two iterables whose items can be converted into <code>OsStr</code> references and have had a tremendous amount of difficulty trying to specify the reference's lifetime.</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::convert::AsRef;\nuse std::ffi::OsStr;\nuse std::marker::PhantomData;\n\n#[derive(Clone, Debug)]\n#[must_use = \"join_args is lazy and does nothing unless consumed\"]\npub struct JoinArgs&lt;'a, A: 'a, B: 'a&gt; {\n    a: A,\n    b: B,\n    state: JoinState,\n\n    phantomA: PhantomData&lt;&amp;'a A&gt;,\n    phantomB: PhantomData&lt;&amp;'a B&gt;,\n}\n\n#[derive(Clone, Debug)]\nenum JoinState {\n    Both,\n    Front,\n    Back,\n}\n\n/// Chains two iterable argument lists.\npub fn join_args&lt;'a, I1, S1, I2, S2&gt;(iter1: I1, iter2: I2) -&gt; JoinArgs&lt;'a, I1::IntoIter, I2::IntoIter&gt;\nwhere\n    I1: IntoIterator&lt;Item = S1&gt;,\n    S1: AsRef&lt;OsStr&gt; + 'a,\n    I2: IntoIterator&lt;Item = S2&gt;,\n    S2: AsRef&lt;OsStr&gt; + 'a\n{\n    let a = iter1.into_iter();\n    let b = iter2.into_iter();\n    JoinArgs{a, b, state: JoinState::Both, phantomA: PhantomData, phantomB: PhantomData}\n}\n\nimpl&lt;'a, A, SA, B, SB&gt; Iterator for JoinArgs&lt;'a, A, B&gt;\nwhere\n    A: Iterator&lt;Item = SA&gt;,\n    SA: AsRef&lt;OsStr&gt; + 'a,\n    B: Iterator&lt;Item = SB&gt;,\n    SB: AsRef&lt;OsStr&gt; + 'a\n{\n    type Item = &amp;'a OsStr;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // All throughout here, I'm getting E0597 errors.\n        match self.state {\n            JoinState::Both =&gt; match self.a.next() {\n                Some(x) =&gt; Some(x.as_ref()),\n                None =&gt; {\n                    self.state = JoinState::Back;\n                    self.b.next().map(|x| x.as_ref())\n                }\n            },\n            JoinState::Front =&gt; self.a.next().map(|x| x.as_ref()),\n            JoinState::Back =&gt; self.b.next().map(|x| x.as_ref()),\n        }\n    }\n}\n</code></pre>\n\n<p>I'm trying to clean up a bunch of code I have where I'm using <code>map</code> and <code>chain</code> to coerce the types myself (like in the test below).  If there's a better way to do this, I'm all ears. :)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[cfg(test)]\nmod tests {\n    use super::*;\n\n    use std::ffi::OsString;\n\n    #[test]\n    fn test_join_args() {\n        let a = &amp;[OsStr::new(\"abc\"), OsStr::new(\"def\")];\n        let b = vec![OsString::from(\"ghi\")];\n        let result: Vec&lt;&amp;OsStr&gt; = join_args(a, &amp;b).collect();\n        assert_eq!(result, [\n                   OsStr::new(\"abc\"),\n                   OsStr::new(\"def\"),\n                   OsStr::new(\"ghi\"),\n        ]);\n    }\n}\n</code></pre>\n\n<p>(This is on Rust stable, version 1.23.0)</p>\n"}, {"tags": ["static", "rust", "destroy"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518360059, "post_id": 48732387, "comment_id": 84464411, "body": "See <a href=\"https://github.com/rust-lang/rfcs/pull/1440\" rel=\"nofollow noreferrer\">RFC - Allow Drop types in statics/const functions</a> and (slightly outdated) <a href=\"https://doc.rust-lang.org/reference/items/static-items.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/items/static-items.html</a>"}, {"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518363040, "post_id": 48732387, "comment_id": 84465317, "body": "So as the docs say: &amp;quot;Statics may not contain any destructors.&amp;quot;, how should I then run some code when the proccess ends. I think I can make it work but any suggestions?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518378895, "post_id": 48732387, "comment_id": 84470914, "body": "See also: <a href=\"https://stackoverflow.com/q/39426452/155423\">How to make a Rust singleton&#39;s destructor run?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "edited": false, "score": 0, "creation_date": 1518373255, "post_id": 48733480, "comment_id": 84468882, "body": "Thanks for the information, makes sense. Since I am writing an library maybe asking the user to execute some function from my library at the could be a thing. I&#39;ll have to think about it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 7, "last_activity_date": 1518365104, "creation_date": 1518365104, "answer_id": 48733480, "question_id": 48732387, "link": "https://stackoverflow.com/questions/48732387/how-can-i-run-clean-up-code-in-a-rust-library/48733480#48733480", "title": "How can I run clean-up code in a Rust library?", "body": "<p>One of the principles of Rust is <a href=\"https://doc.rust-lang.org/1.4.0/complement-design-faq.html#there-is-no-life-before-or-after-main-(no-static-ctors/dtors)\" rel=\"noreferrer\"><strong>no life before main</strong></a>, which implies <em>no life after main</em>.</p>\n\n<p>There are considerable challenges in correctly ordering constructors and destructors before or after main. In C++ the situation is referred to as <a href=\"https://isocpp.org/wiki/faq/ctors#static-init-order\" rel=\"noreferrer\">static initialization order fiasco</a>, and while there are work-arounds for it, its pendant (static destruction order fiasco) has none.</p>\n\n<p>In Rust, the challenge is exacerbated by the <code>'static</code> lifetime: running a destructor in statics could lead to observing partially destructed <em>other</em> statics. Which is unsafe.</p>\n\n<p>In order to allow safe destruction of statics, the language would need to introduce subsets of <code>'static</code> lifetimes to order the construction/destruction of statics while having those lifetimes still be <code>'static</code> from inside <code>main</code>...</p>\n\n<hr>\n\n<p><strong>How to run code at the start/end of the program?</strong></p>\n\n<p>Simply run code at the start/end of <code>main</code>. Note that any structure built at the beginning of <code>main</code> will be dropped at its end in reverse order of construction.</p>\n\n<p><strong>And if I am not writing <code>main</code> myself?</strong></p>\n\n<p>Ask the writer of <code>main</code>, nicely.</p>\n"}, {"comments": [{"owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "edited": false, "score": 0, "creation_date": 1518473586, "post_id": 48755465, "comment_id": 84513864, "body": "Marked your answer because it is an way of solving the problem."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 8, "last_activity_date": 1518469372, "creation_date": 1518469372, "answer_id": 48755465, "question_id": 48732387, "link": "https://stackoverflow.com/questions/48732387/how-can-i-run-clean-up-code-in-a-rust-library/48755465#48755465", "title": "How can I run clean-up code in a Rust library?", "body": "<p>One way to enforce initialization and clean-up code in a library is to introduce a <code>Context</code> type that can only be constructed with a public <code>new()</code> function, and implementing the <code>Drop</code> trait. Every function in the library requiring initialization can take a <code>Context</code> as argument, so the user needs to create one before calling these functions.  Any clean-up code can be included in <code>Context::drop()</code>.</p>\n\n<pre><code>pub struct Context {\n    // private field to enforce use of Context::new()\n    some_value: Option&lt;i32&gt;,\n}\n\nimpl Context {\n    pub fn new() -&gt; Context {\n        // Add initialization code here.\n        Context { some_value: Some(42) }\n    }\n}\n\nimpl Drop for Context {\n    fn drop(&amp;mut self) {\n        // Add cleanup code here\n        println!(\"Context dropped\");\n    }\n}\n\n// The type system will statically enforce that the initialization\n// code in Context::new() is called before this function, and the\n// cleanup code in drop() when the context goes out of scope.\npub fn some_function(_ctx: &amp;Context, some_arg: i32) {\n    println!(\"some_function called with argument {}\", some_arg);\n}\n</code></pre>\n"}], "owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 759, "favorite_count": 0, "accepted_answer_id": 48755465, "answer_count": 2, "score": 5, "last_activity_date": 1518469372, "creation_date": 1518358199, "last_edit_date": 1518379365, "question_id": 48732387, "link": "https://stackoverflow.com/questions/48732387/how-can-i-run-clean-up-code-in-a-rust-library", "title": "How can I run clean-up code in a Rust library?", "body": "<p>I am making an crossplatform terminal library. Because my library changes the state of the terminal, I need to revert all the changes that are made to the terminal when the process ends. I am now implementing this feature and thinking of ways how to restore to the original terminal state at the end. </p>\n\n<p>I thought that a static variable is initialized when the program starts and that when the program ends this static variable will be destroyed. Since my static variable is a struct which has implemented the <a href=\"https://doc.rust-lang.org/1.22.1/std/ops/trait.Drop.html\" rel=\"noreferrer\"><code>Drop</code></a> trait, it would be dropped at the end of the program, but this is not the case  because the string \"drop called\" is never printed: </p>\n\n<pre><code>static mut SOME_STATIC_VARIABLE: SomeStruct = SomeStruct { some_value: None };\n\nstruct SomeStruct {\n    pub some_value: Option&lt;i32&gt;,\n}\n\nimpl Drop for SomeStruct {\n    fn drop(&amp;mut self) {\n        println!(\"drop called\");\n    }\n}\n</code></pre>\n\n<p>Why is <code>drop()</code> not called when the program ends? Are my thoughts wrong and should I do this another way?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1518357962, "post_id": 48732263, "comment_id": 84463800, "body": "Looks like it&#39;s evaluating the expressions."}, {"owner": {"reputation": 1725, "user_id": 1170857, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46e689f74969edede9e5acd75843151c?s=128&d=identicon&r=PG", "display_name": "udoprog", "link": "https://stackoverflow.com/users/1170857/udoprog"}, "edited": false, "score": 4, "creation_date": 1518359636, "post_id": 48732263, "comment_id": 84464302, "body": "The principal motivator seems to be to extend the lifetime of temporary values created in the match statement to make assert_eq! more useful, see this commit: <a href=\"https://github.com/rust-lang/rust/commit/d3c831ba4a4\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/commit/d3c831ba4a4</a> - I&#39;m not answering since I can&#39;t explain why this works (yet). See this playground link for experiments: <a href=\"https://play.rust-lang.org/?gist=3e103c5eac005189947a868cd9ec5174&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 7, "creation_date": 1518361380, "post_id": 48732525, "comment_id": 84464781, "body": "Wouldn&#39;t this be possible with something like <code>let left = $left;</code>?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 4, "creation_date": 1518361538, "post_id": 48732525, "comment_id": 84464825, "body": "@JeroenBollen There is a slight difference between that and a match which crops up in edge cases, but I don&#39;t recall the details.  I <i>think</i> it has something to do with the exact lifetime of the temporaries.  Since I don&#39;t know, I avoided mentioning it."}, {"owner": {"reputation": 723, "user_id": 431056, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hMZ64wPE1ds/AAAAAAAAAAI/AAAAAAAAACk/09SSkGPaJFE/photo.jpg?sz=128", "display_name": "eddyb", "link": "https://stackoverflow.com/users/431056/eddyb"}, "edited": false, "score": 36, "creation_date": 1518363050, "post_id": 48732525, "comment_id": 84465322, "body": "Indeed, <code>match expr { x =&gt; {...} }</code> is the Rust equivalent of <code>let x = expr in ...</code>, in that it&#39;s the most relaxed with respect to lifetime temporaries and &quot;should always work&quot;, e.g. <code>match e { x =&gt; f(x) }</code> should be always equivalent to <code>f(e)</code>.    On the other hand, <code>let x = expr;</code> is more &quot;imperative&quot; and doesn&#39;t allow keeping nested temporaries around, e.g. <code>let x = f(&amp;g());</code> only compiles if <code>f</code> uses its reference argument without returning it, as the temporary it points to only lives for the duration of the call."}, {"owner": {"reputation": 723, "user_id": 431056, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hMZ64wPE1ds/AAAAAAAAAAI/AAAAAAAAACk/09SSkGPaJFE/photo.jpg?sz=128", "display_name": "eddyb", "link": "https://stackoverflow.com/users/431056/eddyb"}, "edited": false, "score": 2, "creation_date": 1518377715, "post_id": 48732525, "comment_id": 84470476, "body": "I couldn&#39;t find it before, but this is one of the blog posts about lifetimes of temporaries (note that it might not entirely reflect current Rust): <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/01/09/rvalue-lifetimes-in-rust/\" rel=\"nofollow noreferrer\">smallcultfollowing.com/babysteps/blog/2014/01/09/&hellip;</a>"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1518916420, "post_id": 48732525, "comment_id": 84699099, "body": "Aside: the code is formatted the way it is because it&#39;s the middle of a multi-line raw string literal with embedded leading spaces.  Indenting the text changes how it prints."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 52, "last_activity_date": 1518916353, "last_edit_date": 1518916353, "creation_date": 1518359205, "answer_id": 48732525, "question_id": 48732263, "link": "https://stackoverflow.com/questions/48732263/why-is-rusts-assert-eq-implemented-using-a-match/48732525#48732525", "title": "Why is Rust&#39;s assert_eq! implemented using a match?", "body": "<p>Alright, let's remove the match.</p>\n\n<pre><code>    macro_rules! assert_eq_2 {\n        ($left:expr, $right:expr) =&gt; ({\n            if !($left == $right) {\n                panic!(r#\"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`\"#, $left, $right)\n            }\n        });\n    }\n</code></pre>\n\n<p>Now, let's pick a completely random example...</p>\n\n<pre><code>fn really_complex_fn() -&gt; i32 {\n    // Hit the disk, send some network requests,\n    // and mine some bitcoin, then...\n    return 1;\n}\n\nassert_eq_2!(really_complex_fn(), 1);\n</code></pre>\n\n<p>This would expand to...</p>\n\n<pre><code>{\n    if !(really_complex_fn() == 1) {\n        panic!(r#\"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`\"#, really_complex_fn(), 1)\n    }\n}\n</code></pre>\n\n<p>As you can see, we're calling the function <em>twice</em>.  That's less than ideal, even more so if the result of the function could change each time it's called.</p>\n\n<p>The <code>match</code> is just a quick, easy way to evaluate both \"arguments\" to the macro exactly once and bind them to variable names.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1551045112, "post_id": 54855986, "comment_id": 96485375, "body": "What does this answer add to the existing answer, which already states <i>As you can see, we&#39;re calling the function twice.</i>?"}, {"owner": {"reputation": 26837, "user_id": 52207, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a82409021ddf415a8027872b889c5f74?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/52207/john"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1551058753, "post_id": 54855986, "comment_id": 96488076, "body": "IMHO, the other answer is essentially incorrect, or at least leaves out the <i>main</i> reason to use <code>match</code>. Avoiding double evaluation could be done with <code>let left = $left; let right = $right;</code> The essence of the OP&#39;s question, I believe, is: why doesn&#39;t that work?"}, {"owner": {"reputation": 4971, "user_id": 1122351, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/8ec0ac61efa8cf07f7427726bc602b5b?s=128&d=identicon&r=PG", "display_name": "benesch", "link": "https://stackoverflow.com/users/1122351/benesch"}, "edited": false, "score": 0, "creation_date": 1553663809, "post_id": 54855986, "comment_id": 97463174, "body": "I&#39;ll second that sentiment. I was left confused about why <code>match</code> was used over <code>let</code> after reading the other answer; this answer does a nice job of walking through the explanation that&#39;s alluded to in the comment thread on the other answer. Thank you for writing it up, @John! (The first comment is rather accusatory, so I wanted to leave you some words of encouragement. It&#39;s really useful to have both answers!)"}, {"owner": {"reputation": 381, "user_id": 2197587, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2145fb9dff1eec2badb45f58e8fd936f?s=128&d=identicon&r=PG&f=1", "display_name": "Federico", "link": "https://stackoverflow.com/users/2197587/federico"}, "edited": false, "score": 0, "creation_date": 1607513758, "post_id": 54855986, "comment_id": 115294491, "body": "Same feeling. The accepted answer only explains why <code>match</code> works, not why it is necessary, as the question asks. This should probably be the accepted answer."}], "tags": [], "owner": {"reputation": 26837, "user_id": 52207, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a82409021ddf415a8027872b889c5f74?s=128&d=identicon&r=PG", "display_name": "John", "link": "https://stackoverflow.com/users/52207/john"}, "is_accepted": false, "score": 6, "last_activity_date": 1551045085, "last_edit_date": 1551045085, "creation_date": 1551038626, "answer_id": 54855986, "question_id": 48732263, "link": "https://stackoverflow.com/questions/48732263/why-is-rusts-assert-eq-implemented-using-a-match/54855986#54855986", "title": "Why is Rust&#39;s assert_eq! implemented using a match?", "body": "<p>Using <code>match</code> ensures that the expressions <code>$left</code> and <code>$right</code> are each evaluated only once, <em>and</em> that any temporaries created during their evaluation live at least as long as the result bindings <code>left</code> and <code>right</code>.</p>\n\n<p>An expansion which used <code>$left</code> and <code>$right</code> multiple times -- once while performing the comparison, and again when interpolating into an error message -- would behave unexpectedly if either expression had side effects. But why can't the expansion do something like <code>let left = &amp;$left; let right = &amp;$right;</code>?</p>\n\n<p>Consider:</p>\n\n<pre><code>let vals = vec![1, 2, 3, 4].into_iter();\nassert_eq!(vals.collect::&lt;Vec&lt;_&gt;&gt;().as_slice(), [1, 2, 3, 4]);\n</code></pre>\n\n<p>Suppose this expanded to:</p>\n\n<pre><code>let left = &amp;vals.collect::&lt;Vec&lt;_&gt;&gt;().as_slice();\nlet right = &amp;[1,2,3,4];\nif !(*left == *right) {\n    panic!(\"...\");\n}\n</code></pre>\n\n<p>In Rust, the lifetime of temporaries produced within a statement is generally limited to the statement itself. Therefore, this expansion <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=6ddf6d18bfd14db40c11ad202f0b6c31\" rel=\"noreferrer\">is an error</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:5:21\n   |\n5  |         let left = &amp;vals.collect::&lt;Vec&lt;_&gt;&gt;().as_slice();\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^           - temporary value dropped here while still borrowed\n   |                     |\n   |                     temporary value does not live long enough\n</code></pre>\n\n<p>The temporary <code>vals.collect::&lt;Vec&lt;_&gt;&gt;()</code> needs to live at least as long as <code>left</code>, but in fact it is dropped at the end of the <code>let</code> statement.</p>\n\n<p>Contrast this with the expansion</p>\n\n<pre><code>match (&amp;vals.collect::&lt;Vec&lt;_&gt;&gt;().as_slice(), &amp;[1,2,3,4]) {\n    (left, right) =&gt; {\n        if !(*left == *right) {\n            panic!(\"...\");\n        }\n    }\n}\n</code></pre>\n\n<p>This produces the same temporary, but its lifetime extends over the entire match expression -- long enough for us to compare <code>left</code> and <code>right</code>, and interpolate them into the error message if the comparison fails.</p>\n\n<p>In this sense, <code>match</code> is Rust's <code>let ... in</code> construct.</p>\n\n<p>Note that this situation is unchanged with <a href=\"https://rust-lang-nursery.github.io/edition-guide/rust-2018/ownership-and-lifetimes/non-lexical-lifetimes.html\" rel=\"noreferrer\">non-lexical lifetimes</a>. Despite its name, NLL does not change the lifetime of any values -- i.e. when they are dropped. It only makes the scopes of <em>borrows</em> more precise. So it does not help us in this situation.</p>\n"}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7392, "favorite_count": 8, "accepted_answer_id": 48732525, "answer_count": 2, "score": 44, "last_activity_date": 1551045085, "creation_date": 1518357425, "last_edit_date": 1518379466, "question_id": 48732263, "link": "https://stackoverflow.com/questions/48732263/why-is-rusts-assert-eq-implemented-using-a-match", "title": "Why is Rust&#39;s assert_eq! implemented using a match?", "body": "<p>Here's Rust's <a href=\"https://github.com/rust-lang/rust/blob/1.23.0/src/libcore/macros.rs#L109-L138\" rel=\"noreferrer\"><code>assert_eq!</code> macro implementation</a>. I've copied only the first branch for brevity:</p>\n\n<pre><code>macro_rules! assert_eq {\n    ($left:expr, $right:expr) =&gt; ({\n        match (&amp;$left, &amp;$right) {\n            (left_val, right_val) =&gt; {\n                if !(*left_val == *right_val) {\n                    panic!(r#\"assertion failed: `(left == right)`\n  left: `{:?}`,\n right: `{:?}`\"#, left_val, right_val)\n                }\n            }\n        }\n    });\n}\n</code></pre>\n\n<p>What's the purpose of the <code>match</code> here? Why isn't checking for non-equality enough?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 4, "last_activity_date": 1518349154, "creation_date": 1518349154, "answer_id": 48731081, "question_id": 48730151, "link": "https://stackoverflow.com/questions/48730151/get-value-mapped-to-range-of-numbers-using-an-integer-to-find-the-key-in-rust/48731081#48731081", "title": "Get value mapped to range of numbers using an integer to find the key in Rust", "body": "<p>The <em>simplest</em> way is to use a vector of pairs and iterate through them sequentially to find the right entry in the vector.</p>\n\n<pre><code>use std::ops::Range;\n\nfn get_value&lt;'a&gt;(range_values: &amp;[(Range&lt;i32&gt;, &amp;'a str)], key: i32) -&gt; Option&lt;&amp;'a str&gt; {\n    for &amp;(ref range, value) in range_values {\n        //if range.contains(key) { // unstable as of Rust 1.23.0\n        if (range.start &lt;= key) &amp;&amp; (key &lt; range.end) {\n            return Some(value);\n        }\n    }\n\n    return None;\n}\n\nfn main() {\n    let mut range_values = vec![];\n    range_values.push((0..1000, \"A\"));\n    range_values.push((1001..2000, \"B\"));\n\n    println!(\"{:?}\", get_value(&amp;range_values, -1));   // prints None\n    println!(\"{:?}\", get_value(&amp;range_values, 0));    // prints Some(\"A\")\n    println!(\"{:?}\", get_value(&amp;range_values, 500));  // prints Some(\"A\")\n    println!(\"{:?}\", get_value(&amp;range_values, 1000)); // prints None\n    println!(\"{:?}\", get_value(&amp;range_values, 1500)); // prints Some(\"B\")\n    println!(\"{:?}\", get_value(&amp;range_values, 2500)); // prints None\n}\n</code></pre>\n\n<p>However, it's not the most <em>efficient</em> way, especially as the vector gets larger. If the vector is sorted, then it's more efficient to perform a binary search (<em>O(log n)</em>) instead of a linear scan (<em>O(n)</em>). This assumes that the ranges don't overlap. (If the vector is not sorted and you only use it once, then it's faster to do a linear scan, since sorting is <em>O(n log n)</em>, i.e. slower than a single linear scan.)</p>\n\n<pre><code>use std::ops::Range;\n\nfn get_value&lt;'a&gt;(range_values: &amp;[(Range&lt;i32&gt;, &amp;'a str)], key: i32) -&gt; Option&lt;&amp;'a str&gt; {\n    // Find the index of the first item where `range.start &lt;= key`.\n    let index =\n        match range_values.binary_search_by_key(&amp;key, |&amp;(ref range, _)| range.start) {\n            Ok(index) =&gt; Some(index),\n\n            // If the requested key is smaller than the smallest range in the slice,\n            // we would be computing `0 - 1`, which would underflow an `usize`.\n            // We use `checked_sub` to get `None` instead.\n            Err(index) =&gt; index.checked_sub(1),\n        };\n\n    if let Some(index) = index {\n        let (ref range, value) = range_values[index];\n        if key &lt; range.end {\n            return Some(value);\n        }\n    }\n\n    return None;\n}\n\nfn main() {\n    let mut range_values = vec![];\n    range_values.push((0..1000, \"A\"));\n    range_values.push((1001..2000, \"B\"));\n\n    // if the vector is not already sorted:\n    range_values.sort_by_key(|&amp;(ref range, _)| range.start);\n\n    println!(\"{:?}\", get_value(&amp;range_values, -1));   // prints None\n    println!(\"{:?}\", get_value(&amp;range_values, 0));    // prints Some(\"A\")\n    println!(\"{:?}\", get_value(&amp;range_values, 500));  // prints Some(\"A\")\n    println!(\"{:?}\", get_value(&amp;range_values, 1000)); // prints None\n    println!(\"{:?}\", get_value(&amp;range_values, 1500)); // prints Some(\"B\")\n    println!(\"{:?}\", get_value(&amp;range_values, 2500)); // prints None\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1518369714, "last_edit_date": 1518369714, "creation_date": 1518368577, "answer_id": 48734046, "question_id": 48730151, "link": "https://stackoverflow.com/questions/48730151/get-value-mapped-to-range-of-numbers-using-an-integer-to-find-the-key-in-rust/48734046#48734046", "title": "Get value mapped to range of numbers using an integer to find the key in Rust", "body": "<p>Similar to <a href=\"https://stackoverflow.com/a/48731081/155423\">Francis Gagn\u00e9's idea of using binary search</a>, we can use a <code>BTreeMap</code> for the same purpose. This has the benefit of easier additions and removals without having to re-sort the list each time. Like the other answer, it only works for cases where the intervals are non-overlapping.</p>\n\n<p>We need to construct a <em>newtype</em> around the <code>Range</code> to use the lower bound of the range as the key to look up by. We also wrap the <code>BTreeMap</code> to provide nicer access methods.</p>\n\n<pre><code>#![feature(inclusive_range_syntax)]\n\nuse std::collections::BTreeMap;\nuse std::{borrow, cmp}; \n\nfn main() {\n    let mut range_values = RangeMap::default();\n\n    range_values.insert(0..1000, \"A\");\n    range_values.insert(1001..2000, \"B\");\n\n    assert_eq!(range_values.get(-1),   None);\n    assert_eq!(range_values.get(0),    Some(&amp;\"A\"));\n    assert_eq!(range_values.get(500),  Some(&amp;\"A\"));\n    assert_eq!(range_values.get(1000), None);\n    assert_eq!(range_values.get(1500), Some(&amp;\"B\"));\n    assert_eq!(range_values.get(2500), None);\n}\n\n#[derive(Debug, Default, Clone)]\nstruct RangeMap&lt;V&gt;(BTreeMap&lt;RangeKey, V&gt;);\n\nimpl&lt;V&gt; RangeMap&lt;V&gt; {\n    fn insert(&amp;mut self, r: std::ops::Range&lt;i32&gt;, v: V) {\n        self.0.insert(RangeKey(r), v);\n    }\n\n    fn get(&amp;self, id: i32) -&gt; Option&lt;&amp;V&gt; {\n        self.0.range(..=id).rev().next().and_then(|(k, v)| {\n            // Recheck inside range\n            if k.contains(id) {\n                Some(v)\n            } else {\n                None\n            }\n        })\n    }\n}\n\n#[derive(Debug, Clone, Eq)]\nstruct RangeKey(std::ops::Range&lt;i32&gt;);\n\nimpl RangeKey {\n    fn contains(&amp;self, k: i32) -&gt; bool {\n        k &gt;= self.0.start &amp;&amp; k &lt; self.0.end\n    }\n\n    fn key(&amp;self) -&gt; &amp;i32 {\n        &amp;self.0.start\n    }\n}\n\nimpl PartialEq for RangeKey {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.key().eq(&amp;other.key())\n    }\n}\n\nimpl PartialOrd for RangeKey {\n    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;cmp::Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n\nimpl Ord for RangeKey {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; cmp::Ordering {\n        self.key().cmp(&amp;other.key())\n    }\n}\n\nimpl borrow::Borrow&lt;i32&gt; for RangeKey {\n    fn borrow(&amp;self) -&gt; &amp;i32 {\n        self.key()\n    }\n}\n</code></pre>\n\n<p>This unfortunately requires the not-yet-stable <code>RangeInclusive</code>.</p>\n\n<p>For more complicated solutions, you will want an <a href=\"https://en.wikipedia.org/wiki/Interval_tree\" rel=\"nofollow noreferrer\">interval tree</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518443602, "post_id": 48743408, "comment_id": 84496018, "body": "Pedantically, the OP&#39;s question has <i>sequential</i> numbers, but not <i>continuous</i> ranges. For example, <code>1000</code> is included in <b>neither</b> of the ranges <code>0..1000</code> or <code>1001..2000</code>. This solution would return a value for 1000. This solution also takes up <code>O(N)</code> memory and requires that the key be able to be cloned / copied, so I&#39;m not sure which measure of &quot;most efficient&quot; you are using."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518446351, "post_id": 48743408, "comment_id": 84497829, "body": "&quot;Most efficient&quot; as in O(1) lookup time. Space efficiency depends on the size of the ranges in the real application: for long ranges yours of Francis&#39; solution will be more efficient, but for short ranges direct indexing may still be the winner."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518446590, "post_id": 48743408, "comment_id": 84497999, "body": "You&#39;re right that I missed the gap at 1000. If this gap is intentional and not a typo in the question then my solution looses some of its interest, although if there are only a few gaps those can be filled with canary values without incurring too high a memory cost and preserving the O(1) lookup times."}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 0, "last_activity_date": 1518443493, "last_edit_date": 1518443493, "creation_date": 1518428644, "answer_id": 48743408, "question_id": 48730151, "link": "https://stackoverflow.com/questions/48730151/get-value-mapped-to-range-of-numbers-using-an-integer-to-find-the-key-in-rust/48743408#48743408", "title": "Get value mapped to range of numbers using an integer to find the key in Rust", "body": "<p>If the numbers are sequential starting with 0 like in your example, the simplest and most efficient way is simply to use a vector:</p>\n\n<pre><code>let mut range_values = vec![\"A\"; 1000];\nrange_values.append(&amp;mut vec![\"B\"; 1000]);\nassert_eq!(range_values[1500], \"B\");\n</code></pre>\n\n<p>If they are sequential but don't start with 0, you can still do it with a simple translation:</p>\n\n<pre><code>assert_eq!(range_values[1500 - start], \"B\");\n</code></pre>\n\n<p>If they are not sequential, then you need to use either <a href=\"https://stackoverflow.com/a/48731081/5397009\">Francis Gagn\u00e9's</a> or <a href=\"https://stackoverflow.com/a/48734046/5397009\">Shepmaster's</a> answer.</p>\n"}], "owner": {"reputation": 379, "user_id": 428700, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/4c0466bac394b07164330f5346bdf50e?s=128&d=identicon&r=PG", "display_name": "Craig", "link": "https://stackoverflow.com/users/428700/craig"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 287, "favorite_count": 0, "answer_count": 3, "score": 0, "last_activity_date": 1520149660, "creation_date": 1518341917, "last_edit_date": 1520149660, "question_id": 48730151, "link": "https://stackoverflow.com/questions/48730151/get-value-mapped-to-range-of-numbers-using-an-integer-to-find-the-key-in-rust", "title": "Get value mapped to range of numbers using an integer to find the key in Rust", "body": "<p>In Rust, what is the simplest way I can select for a value mapped to a range of numbers, using an integer that lies within that range?</p>\n\n<p>Something like:</p>\n\n<pre><code>range_values.insert(0..1000, \"A\");\nrange_values.insert(1001..2000, \"B\");\n\nget_value(range_values, 1500); // returns \"B\"\n</code></pre>\n"}, {"tags": ["rust", "dependency-management", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 384, "user_id": 2223436, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/6a57064dd49b113f94f7325c0be57b27?s=128&d=identicon&r=PG", "display_name": "Josh Burkart", "link": "https://stackoverflow.com/users/2223436/josh-burkart"}, "edited": false, "score": 0, "creation_date": 1518328663, "post_id": 48728349, "comment_id": 84456422, "body": "Oh sorry! The explanation (which may be wrong) that was in my head (but which I didn&#39;t express) was: features are opt in, meaning you have to explicitly ask for them, rather than it just being automatic if the right dependencies are satisfied. (Am I making sense?) So making another crate or instead using features each necessitate a user adding an extra blurb in their <code>Cargo.toml</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1518324314, "creation_date": 1518324314, "answer_id": 48728349, "question_id": 48728104, "link": "https://stackoverflow.com/questions/48728104/options-for-adding-a-minor-feature-to-a-crate-that-necessitates-a-new-dependency/48728349#48728349", "title": "Options for adding a minor feature to a crate that necessitates a new dependency", "body": "<p>This is <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\" rel=\"nofollow noreferrer\"><em>exactly</em> the case optional features</a> solve:</p>\n\n<blockquote>\n  <p>Cargo supports features to allow expression of:</p>\n  \n  <ul>\n  <li>conditional compilation options (usable through <code>cfg</code> attributes);</li>\n  <li><strong>optional dependencies, which enhance a package, but are not required</strong>; and</li>\n  <li>clusters of optional dependencies, such as <code>postgres</code>, that would include the <code>postgres</code> package, the <code>postgres-macros</code> package, and\n  possibly other packages (such as development-time mocking libraries,\n  debugging tools, etc.).</li>\n  </ul>\n</blockquote>\n\n<p>Unfortunately, you seem to have already dismissed this option without any explanation as to why it's \"almost bad\", so... I guess the only option you have left is to fork the crate and apply your changes.</p>\n"}], "owner": {"reputation": 384, "user_id": 2223436, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/6a57064dd49b113f94f7325c0be57b27?s=128&d=identicon&r=PG", "display_name": "Josh Burkart", "link": "https://stackoverflow.com/users/2223436/josh-burkart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1518324431, "creation_date": 1518321071, "last_edit_date": 1518324431, "question_id": 48728104, "link": "https://stackoverflow.com/questions/48728104/options-for-adding-a-minor-feature-to-a-crate-that-necessitates-a-new-dependency", "title": "Options for adding a minor feature to a crate that necessitates a new dependency", "body": "<p>I want to add a relatively small feature to crate <code>A</code> which necessitates depending on a second crate <code>B</code>. <code>A</code>'s maintainer reasonably objects about introducing a whole new dependency for a small, although potentially useful, feature.</p>\n\n<p>What are the best ways of handling this? The options I can think of are:</p>\n\n<ol>\n<li>make a new crate with the new feature (with dependencies on both <code>A</code> and <code>B</code>)</li>\n<li>use Cargo \"features\" somehow so users have to opt in to the extra dependency. </li>\n</ol>\n\n<p><strong>1</strong> seems suboptimal since it's a small feature that's pretty tied in to <code>A</code>, and it seems annoying to have to specially depend on a third crate, but <strong>2</strong> seems almost as bad... </p>\n\n<p>Is there some way to compile my minor feature if and only if a crate explicitly depends on both <code>A</code> and <code>B</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1518325172, "last_edit_date": 1518325172, "creation_date": 1518314675, "answer_id": 48727554, "question_id": 48727483, "link": "https://stackoverflow.com/questions/48727483/why-does-rust-need-to-know-the-code-in-module-belong-to-whom/48727554#48727554", "title": "Why does Rust need to know the code in module belong to whom?", "body": "<p>The compiler has rules about where the source file for an external module can be. Those rules ensure that <strong>there aren't two modules that use the same source file</strong>.</p>\n\n<p>If you really want to, you can override the rules with a <code>#[path]</code> <a href=\"https://doc.rust-lang.org/reference/attributes.html\" rel=\"nofollow noreferrer\">attribute</a>:</p>\n\n<pre><code>mod client; // defaults to client.rs relative to the current file\n\nmod network {\n    #[path=\"client.rs\"] // reads the same source as the outer `mod client;`\n    mod client;\n}\n</code></pre>\n\n<p>However, doing so would lead to duplicate code, i.e. the code in <code>client.rs</code> would be compiled twice, and everything that's defined in <code>client.rs</code> would be defined twice, in two separate modules. It's as if you made <code>network/client.rs</code> an exact copy of <code>client.rs</code> and didn't write the <code>#[path]</code> attribute.</p>\n\n<p>Another thing you can do is provide an <em>alias</em> for a module by <em>reexporting</em> it elsewhere. This can be useful when building a library: it enables you to present an external module hierarchy that is different from the internal module hierarchy.</p>\n\n<pre><code>mod client; // not accessible externally\n\npub mod network {\n    pub use client; // network::client::* will refer to the same definitions as client::*\n}\n</code></pre>\n\n<p>For example, with the above, the <code>client</code> module is defined in <code>client.rs</code>, but clients use it through <code>my_crate::network::client</code>.</p>\n"}], "owner": {"reputation": 63, "user_id": 6740567, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/kWVJ1.jpg?s=128&g=1", "display_name": "DRL", "link": "https://stackoverflow.com/users/6740567/drl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 75, "favorite_count": 0, "accepted_answer_id": 48727554, "answer_count": 1, "score": -1, "last_activity_date": 1518325172, "creation_date": 1518313945, "last_edit_date": 1518323854, "question_id": 48727483, "link": "https://stackoverflow.com/questions/48727483/why-does-rust-need-to-know-the-code-in-module-belong-to-whom", "title": "Why does Rust need to know the code in module belong to whom?", "body": "<p>I encountered some problems <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch07-01-mod-and-the-filesystem.html\" rel=\"nofollow noreferrer\">reading the Rust documentation</a>:</p>\n\n<blockquote>\n  <p>In this example, we have three modules again: <code>client</code>, <code>network</code>, and <code>network::client</code>. Following the same steps we did earlier for extracting modules into files, we would create <em>src/client.rs</em> for the <code>client</code> module. For the <code>network</code> module, we would create <em>src/network.rs</em>. But we wouldn\u2019t be able to extract the <code>network::client</code> module into a <em>src/client.rs</em> file because that already exists for the top-level <code>client</code> module! If we could put the code for <em>both</em> the <code>client</code> and <code>network::client</code> modules in the <em>src/client.rs</em> file, Rust wouldn\u2019t have any way to know whether the code was for <code>client</code> or for <code>network::client</code></p>\n</blockquote>\n\n<p>Why does Rust need to know the code in <code>client.rs</code> belongs to <code>client</code> or <code>network::client</code>? Can it belong to both?</p>\n"}, {"tags": ["rust", "integer", "overflow", "rational-number"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1518286368, "post_id": 48723752, "comment_id": 84446776, "body": "Please note the difference between your original code and the current code. This is what we mean when we ask for a MCVE. Having a MCVE prevents your question from being downvoted (or closed) and also <b>greatly</b> increases the chance of a good answer. By providing a MCVE <i>once</i>, you avoid forcing <i>every</i> potential answerer from having to re-create your entire setup (guessing types, guessing values, etc.). The process of reduction helps you understand the core problem, and it makes your question more useful to people who search for the same thing in the future. It&#39;s a win for basically everyone."}, {"owner": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "edited": false, "score": 1, "creation_date": 1518485435, "post_id": 48723752, "comment_id": 84517332, "body": "Reliably doing 128-bit arithmetic using 64-bit types is tricky.  You&#39;d probably be better off turning the arguments into <code>BigRational</code>s, doing the arithmetic, then converting back."}, {"owner": {"reputation": 16549, "user_id": 836390, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/tNl4E.jpg?s=128&g=1", "display_name": "joshlf", "link": "https://stackoverflow.com/users/836390/joshlf"}, "edited": false, "score": 1, "creation_date": 1518575006, "post_id": 48723752, "comment_id": 84559081, "body": "Yeah that&#39;s what I ended up doing. I was afraid of the performance hit, but it turned out to be acceptable for my use case. It&#39;d still be interesting to see how this might be done, though."}], "owner": {"reputation": 16549, "user_id": 836390, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/tNl4E.jpg?s=128&g=1", "display_name": "joshlf", "link": "https://stackoverflow.com/users/836390/joshlf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 134, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1518286250, "creation_date": 1518284766, "last_edit_date": 1518286250, "question_id": 48723752, "link": "https://stackoverflow.com/questions/48723752/round-a-rational64-down-to-next-multiple-of-a-fraction-without-overflow", "title": "Round a Rational64 down to next multiple of a fraction without overflow?", "body": "<p>I'm representing numbers as ratios of signed 64-bit integers using the num-rational crate's <a href=\"https://docs.rs/num-rational/0.1.42/num_rational/type.Rational64.html\" rel=\"nofollow noreferrer\"><code>Rational64</code></a> type. I'm trying to round a number down to the next multiple of another number, and I'm getting integer overflow issues when I do it in either of the two obvious ways. Note that both of the numbers may be fractions.</p>\n\n<h2>Normalize to an integer</h2>\n\n<pre><code>extern crate num_rational;\nextern crate num_traits;\n\nuse num_rational::Rational64;\nuse num_traits::identities::Zero;\n\nfn round(mut n: Rational64, increment: Rational64) -&gt; Rational64 {\n    let rem = n % increment;\n    if !rem.is_zero() {\n        // normalize to a multiple of the increment, round down\n        // to the next integer, and then undo the normalization\n        n = (n * increment.recip()).trunc() * increment;\n    }\n    n\n}\n\nfn main() {\n    let a = Rational64::new(10_000_676_909_441, 8_872_044_800_000_000);\n    let b = Rational64::new(1, 1_000_000);\n    let c = round(a, b);\n    println!(\"{}\", c);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=45fa573984b65eaf4573d50f6646c263&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<h2>Subtract the remainder</h2>\n\n<pre><code>extern crate num_rational;\nextern crate num_traits;\n\nuse num_rational::Rational64;\nuse num_traits::identities::Zero;\n\nfn round(mut n: Rational64, increment: Rational64) -&gt; Rational64 {\n    let rem = n % increment;\n    if !rem.is_zero() {\n        n -= rem;\n    }\n    n\n}\n\nfn main() {\n    let a = Rational64::new(10_000_676_909_441, 8_872_044_800_000_000);\n    let b = Rational64::new(1, 1_000_000);\n    let c = round(a, b);\n    println!(\"{}\", c);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=d333e908bd43427a6c00a00e9fadd5fc&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>Is there a way to make it so that <code>n</code> is rounded down to a multiple of <code>increment</code> such that integer overflow is less likely? It's fine if I have to extract the numerator and denominator (both Rust <code>i64</code> types) and do math on them directly.</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518267559, "post_id": 48720914, "comment_id": 84440875, "body": "I think this really needs a reference to <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow</code></a>, the linked duplicate is not good enough."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518267647, "post_id": 48720914, "comment_id": 84440904, "body": "<a href=\"https://stackoverflow.com/questions/36706429/return-either-a-borrowed-or-owned-type-in-rust/36707468#36707468\" title=\"return either a borrowed or owned type in rust\">stackoverflow.com/questions/36706429/&hellip;</a> is a start"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518267682, "post_id": 48720914, "comment_id": 84440914, "body": "<a href=\"https://play.rust-lang.org/?gist=cae31659a0caa396c2702039b5e16964&amp;version=stable\" rel=\"nofollow noreferrer\">Example in playground</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518275434, "post_id": 48720914, "comment_id": 84443192, "body": "<i>I&#39;m trying to figure how to interpolate an integer with a string and then return a <code>&amp;static str</code></i> =&gt; &quot;I&#39;m trying to figure how to [create a <code>String</code>] and then return a <code>&amp;static str</code>&quot;. This is indeed a duplicate; the path you take to create the <code>String</code> doesn&#39;t matter. <code>format!</code> creates a <code>String</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518275884, "post_id": 48720914, "comment_id": 84443320, "body": "As an aside, your function will not produce the correct output for numbers like <code>23</code>."}, {"owner": {"reputation": 568, "user_id": 1491929, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/c804b3e0f1c1cbb4c6e6c6d633d19c46?s=128&d=identicon&r=PG&f=1", "display_name": "user1491929", "link": "https://stackoverflow.com/users/1491929/user1491929"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518572084, "post_id": 48720914, "comment_id": 84558374, "body": "@Shepmaster, you&#39;re right. Luckily this only needs to go to 12 ;)"}], "owner": {"reputation": 568, "user_id": 1491929, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/c804b3e0f1c1cbb4c6e6c6d633d19c46?s=128&d=identicon&r=PG&f=1", "display_name": "user1491929", "link": "https://stackoverflow.com/users/1491929/user1491929"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 2178, "favorite_count": 1, "closed_date": 1518267348, "answer_count": 0, "score": 1, "last_activity_date": 1518278070, "creation_date": 1518266765, "last_edit_date": 1518278070, "question_id": 48720914, "link": "https://stackoverflow.com/questions/48720914/convert-format-from-string-to-static-str", "closed_reason": "Duplicate", "title": "Convert format!() from String to &amp;&#39;static str", "body": "<p>I'm stumped on how to interpolate a number and return it in the correct format. I started with the function returning <code>String</code> but then the compiler wanted <code>&amp;'static str</code>. I've read about <code>to_owned</code> but it's not clicking in my head yet. What is the \"right\" way to do what I'm attempting? </p>\n\n<pre><code>fn ordinal_name(num: i32) -&gt; &amp;'static str {\n    if num == 1 {\n        \"1st\"\n    } else if num == 2 {\n        \"2nd\"\n    } else if num == 3 {\n        \"3rd\"\n    } else {\n        format!(\"{}th\", num)\n    }\n}\n\nfn main() {\n    println!(\"{}\", ordinal_name(5));\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:9:9\n  |\n1 | fn ordinal_name(num: i32) -&gt; &amp;'static str {\n  |                              ------------ expected `&amp;'static str` because of return type\n...\n9 |         format!(\"{}th\", num)\n  |         ^^^^^^^^^^^^^^^^^^^^ expected reference, found struct `std::string::String`\n  |\n  = note: expected type `&amp;'static str`\n             found type `std::string::String`\n  = note: this error originates in a macro outside of the current crate\n</code></pre>\n\n<p>This is not a duplicate of <code>String to &amp;'static str</code> - I'm trying to figure how to interpolate an integer with a string and then return a <code>&amp;static str</code>. </p>\n"}, {"tags": ["rust", "closures", "borrow-checker", "mutability"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1518252344, "post_id": 48717833, "comment_id": 84436787, "body": "<code>fn get_*(&amp;mut self)</code> - that&#39;s not how getter usually work.  How about making the fields private, and initialize them to the default value you&#39;re looking for?  Also don&#39;t use <code>&amp;String</code> - use <code>&amp;str</code> instead."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1518252473, "post_id": 48717833, "comment_id": 84436821, "body": "Maybe <a href=\"https://vorner.github.io/difficult.html#rust-is-different\" rel=\"nofollow noreferrer\">vorner.github.io/difficult.html#rust-is-different</a> is a good read for you.  TLDR: you&#39;re trying to solve a problem the way you&#39;re used to, but it doesn&#39;t fit Rust - if you tell us more about the actual problem, you might get better answers about the Rust way to solve them."}, {"owner": {"reputation": 331, "user_id": 9140568, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-NqeKkbmLaRs/AAAAAAAAAAI/AAAAAAAAAAo/cqqwHvUKL_g/photo.jpg?sz=128", "display_name": "Aqrun", "link": "https://stackoverflow.com/users/9140568/aqrun"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1518259145, "post_id": 48717833, "comment_id": 84438561, "body": "thank you all . here is a solution from IRC <a href=\"https://client00.chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust-beginners\" rel=\"nofollow noreferrer\">#rust-beginners</a> .&lt;br/&gt; Code sample at <a href=\"https://play.rust-lang.org/?gist=0c9423ecda9057d763cd5cd2260e2511&amp;version=stable\" rel=\"nofollow noreferrer\">Rust Play Ground Code Link</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518277674, "post_id": 48717833, "comment_id": 84443845, "body": "@Aqrun please do not put <i>answers</i> in a <i>comment</i>. You are welcome to add your own answer below. If you feel that you should not take credit for someone else&#39;s answer (e.g. whoever on IRC), you can choose to make the answer a &quot;community wiki&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 331, "user_id": 9140568, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-NqeKkbmLaRs/AAAAAAAAAAI/AAAAAAAAAAo/cqqwHvUKL_g/photo.jpg?sz=128", "display_name": "Aqrun", "link": "https://stackoverflow.com/users/9140568/aqrun"}, "edited": false, "score": 0, "creation_date": 1518249854, "post_id": 48718387, "comment_id": 84436174, "body": "thanks, but as you said i think there must be more effective way, or another code structure to solve problem like this in rust style"}], "tags": [], "owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "is_accepted": false, "score": 1, "last_activity_date": 1518248044, "creation_date": 1518248044, "answer_id": 48718387, "question_id": 48717833, "link": "https://stackoverflow.com/questions/48717833/how-to-use-struct-self-in-member-method-closure/48718387#48718387", "title": "How to use struct self in member method closure", "body": "<p>The closure passed to the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.get_or_insert_with\" rel=\"nofollow noreferrer\"><code>get_or_insert_with</code></a> method in <code>Option&lt;T&gt;</code> is of type <a href=\"https://doc.rust-lang.org/std/ops/trait.FnOnce.html\" rel=\"nofollow noreferrer\"><code>FnOnce</code></a> - it thus <em>consumes</em> or <em>moves</em> the captured variables. In this case <code>self</code> is captured because of the usage of <code>self.get_base_url()</code> in the closure. However, since <code>self</code> is already borrowed, the closure cannot consume or move the value of <code>self</code> for unique access.</p>\n\n<p>This can be circumvented by using the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.get_or_insert\" rel=\"nofollow noreferrer\"><code>get_or_insert</code></a> method, but it will require you to perform the potentially expensive operation of fetching the access token every time <code>get_access_token</code> is called regardless of whether <code>access_token</code> is <code>None</code> or not.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518278528, "post_id": 48719960, "comment_id": 84444149, "body": "This works, but an <code>unwrap</code> that can never fail always makes me sad."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 1, "last_activity_date": 1518260089, "creation_date": 1518260089, "answer_id": 48719960, "question_id": 48717833, "link": "https://stackoverflow.com/questions/48717833/how-to-use-struct-self-in-member-method-closure/48719960#48719960", "title": "How to use struct self in member method closure", "body": "<p>I'd use something like this instead:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=1c1285d7856cba668c45b3970c965ce3&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>fn fetch_access_token(base_url: &amp;str) -&gt; Result&lt;String, ()&gt; {\n    let _url = format!(\"{}/v3/auth/token\", base_url);\n    // ...\n    let token = String::from(\"test token\");\n    Ok(token)\n}\n\nfn get_env_url() -&gt; String {\n    String::from(\"http://www.test.com\")\n}\n\npub struct App {\n    // private fields!\n    base_url: String,\n    access_token: Option&lt;String&gt;,\n}\n\nimpl App {\n    pub fn new() -&gt; App {\n        App {\n            base_url: get_env_url(),\n            access_token: None,\n        }\n    }\n\n    /// set new base url; clears cached access token\n    pub fn set_base_url(&amp;mut self, base_url: String) {\n        self.base_url = base_url;\n        self.access_token = None;\n    }\n\n    pub fn get_base_url(&amp;self) -&gt; &amp;str {\n        &amp;self.base_url\n    }\n\n    /// retrieve (possibly cached) access token. tries again if previous attempt failed.\n    pub fn retrieve_access_token(&amp;mut self) -&gt; Result&lt;&amp;str, ()&gt; {\n        if self.access_token.is_none() {\n            self.access_token = Some(fetch_access_token(&amp;self.base_url)?);\n        }\n        Ok(self.access_token.as_ref().unwrap())\n    }\n}\n\nfn main() {\n    let mut app = App::new();\n    println!(\"{}\", app.retrieve_access_token().unwrap());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1518279187, "last_edit_date": 1518279187, "creation_date": 1518278472, "answer_id": 48722688, "question_id": 48717833, "link": "https://stackoverflow.com/questions/48717833/how-to-use-struct-self-in-member-method-closure/48722688#48722688", "title": "How to use struct self in member method closure", "body": "<p>Split your data and methods into smaller components, then you can take disjoint borrows to various components on <code>self</code>:</p>\n\n<pre><code>fn fetch_access_token(_base_url: &amp;str) -&gt; String { String::new() }\nfn get_env_url() -&gt; String { String::new() }\n\n#[derive(Default)]\nstruct BaseUrl(Option&lt;String&gt;);\n\nimpl BaseUrl {\n    fn get(&amp;mut self) -&gt; &amp;str {\n        self.0.get_or_insert_with(|| get_env_url())\n    }\n}\n\n#[derive(Default)]\nstruct App {\n    base_url: BaseUrl,\n    access_token: Option&lt;String&gt;,\n}\n\nimpl App {\n    fn new() -&gt; App {\n        App::default()\n    }\n\n    fn get_access_token(&amp;mut self) -&gt; &amp;str {\n        let base_url = &amp;mut self.base_url;\n        self.access_token\n            .get_or_insert_with(|| fetch_access_token(base_url.get()))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>You can go further and do this for both values:</p>\n\n<pre><code>fn fetch_access_token(_base_url: &amp;str) -&gt; String { String::new() }\nfn get_env_url() -&gt; String { String::new() }\n\n#[derive(Default)]\nstruct BaseUrl(Option&lt;String&gt;);\n\nimpl BaseUrl {\n    fn get(&amp;mut self) -&gt; &amp;str {\n        self.0.get_or_insert_with(|| get_env_url())\n    }\n}\n\n#[derive(Default)]\nstruct AccessToken(Option&lt;String&gt;);\n\nimpl AccessToken {\n    fn get(&amp;mut self, base_url: &amp;str) -&gt; &amp;str {\n        self.0.get_or_insert_with(|| fetch_access_token(base_url))\n    }\n}\n\n#[derive(Default)]\nstruct App {\n    base_url: BaseUrl,\n    access_token: AccessToken,\n}\n\nimpl App {\n    fn new() -&gt; App {\n        App::default()\n    }\n\n    fn get_access_token(&amp;mut self) -&gt; &amp;str {\n        let base_url = self.base_url.get();\n        self.access_token.get(base_url)\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Which lets you see that you can abstract out common functionality:</p>\n\n<pre><code>fn fetch_access_token(_base_url: &amp;str) -&gt; String { String::new() }\nfn get_env_url() -&gt; String { String::new() }\n\n#[derive(Default)]\nstruct StringCache(Option&lt;String&gt;);\n\nimpl StringCache {\n    fn get&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;str\n    where\n        F: FnOnce() -&gt; String,\n    {\n        self.0.get_or_insert_with(f)\n    }\n}\n\n#[derive(Default)]\nstruct App {\n    base_url: StringCache,\n    access_token: StringCache,\n}\n\nimpl App {\n    fn new() -&gt; App {\n        App::default()\n    }\n\n    fn get_access_token(&amp;mut self) -&gt; &amp;str {\n        let base_url = self.base_url.get(get_env_url);\n        self.access_token.get(|| fetch_access_token(base_url))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>And then you realize the abstraction can be made generic:</p>\n\n<pre><code>fn fetch_access_token(_base_url: &amp;str) -&gt; String { String::new() }\nfn get_env_url() -&gt; String { String::new() }\n\n#[derive(Default)]\nstruct Cache&lt;T&gt;(Option&lt;T&gt;);\n\nimpl&lt;T&gt; Cache&lt;T&gt; {\n    fn get&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;T\n    where\n        F: FnOnce() -&gt; T,\n    {\n        self.0.get_or_insert_with(f)\n    }\n}\n\n#[derive(Default)]\nstruct App {\n    base_url: Cache&lt;String&gt;,\n    access_token: Cache&lt;String&gt;,\n}\n\nimpl App {\n    fn new() -&gt; App {\n        App::default()\n    }\n\n    fn get_access_token(&amp;mut self) -&gt; &amp;str {\n        let base_url = self.base_url.get(get_env_url);\n        self.access_token.get(|| fetch_access_token(base_url))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25513755/155423\">Borrowing references to attributes in a struct</a></li>\n<li><a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html\" rel=\"noreferrer\"><em>The Rust Programming Language</em> chapter on closures</a>, which creates this caching struct as part of the exercises.</li>\n</ul>\n"}], "owner": {"reputation": 331, "user_id": 9140568, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-NqeKkbmLaRs/AAAAAAAAAAI/AAAAAAAAAAo/cqqwHvUKL_g/photo.jpg?sz=128", "display_name": "Aqrun", "link": "https://stackoverflow.com/users/9140568/aqrun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2975, "favorite_count": 1, "accepted_answer_id": 48722688, "answer_count": 3, "score": 5, "last_activity_date": 1555856185, "creation_date": 1518243114, "last_edit_date": 1555856185, "question_id": 48717833, "link": "https://stackoverflow.com/questions/48717833/how-to-use-struct-self-in-member-method-closure", "title": "How to use struct self in member method closure", "body": "<p>How can I call a method in closure? <code>get_access_token</code> method can set new access token based on <code>self.get_base_url()</code>:</p>\n\n<pre><code>fn fetch_access_token(_base_url: &amp;String) -&gt; String {\n    String::new()\n}\n\nfn get_env_url() -&gt; String {\n    String::new()\n}\n\npub struct App {\n    pub base_url: Option&lt;String&gt;,\n    pub access_token: Option&lt;String&gt;,\n}\n\nimpl App {\n    pub fn new() -&gt; App {\n        App {\n            base_url: None,\n            access_token: None,\n        }\n    }\n    pub fn get_base_url(&amp;mut self) -&gt; &amp;String {\n        self.base_url.get_or_insert_with(|| get_env_url())\n    }\n    pub fn get_access_token(&amp;mut self) -&gt; &amp;String {\n        self.access_token\n            .get_or_insert_with(|| fetch_access_token(self.get_base_url()))\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>error:</p>\n\n<p><strong>Rust 2015</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0500]: closure requires unique access to `self` but `self.access_token` is already borrowed\n  --&gt; src/main.rs:26:33\n   |\n25 |         self.access_token\n   |         ----------------- borrow occurs here\n26 |             .get_or_insert_with(|| fetch_access_token(self.get_base_url()))\n   |                                 ^^                    ---- borrow occurs due to use of `self` in closure\n   |                                 |\n   |                                 closure construction occurs here\n27 |     }\n   |     - borrow ends here\n</code></pre>\n\n<p><strong>Rust 2018</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0501]: cannot borrow `self.access_token` as mutable because previous closure requires unique access\n  --&gt; src/main.rs:25:9\n   |\n25 | /         self.access_token\n26 | |             .get_or_insert_with(|| fetch_access_token(self.get_base_url()))\n   | |______________------------------_--____________________----________________^ second borrow occurs here\n   |                |                  |                     |\n   |                |                  |                     first borrow occurs due to use of `self` in closure\n   |                |                  closure construction occurs here\n   |                first borrow later used by call\n\nerror[E0500]: closure requires unique access to `self` but it is already borrowed\n  --&gt; src/main.rs:26:33\n   |\n24 |       pub fn get_access_token(&amp;mut self) -&gt; &amp;String {\n   |                               - let's call the lifetime of this reference `'1`\n25 |           self.access_token\n   |           -----------------\n   |           |\n   |  _________borrow occurs here\n   | |\n26 | |             .get_or_insert_with(|| fetch_access_token(self.get_base_url()))\n   | |_________________________________^^____________________----________________- returning this value requires that `self.access_token` is borrowed for `'1`\n   |                                   |                     |\n   |                                   |                     second borrow occurs due to use of `self` in closure\n   |                                   closure construction occurs here\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 875, "user_id": 7957846, "user_type": "registered", "profile_image": "https://graph.facebook.com/1052262428/picture?type=large", "display_name": "Guilherme Marthe", "link": "https://stackoverflow.com/users/7957846/guilherme-marthe"}, "edited": false, "score": 0, "creation_date": 1518199723, "post_id": 48711618, "comment_id": 84422448, "body": "Ah! Beautiful! My goal was to re-write it as a assigned expression as you suggested. But the one liner you showed is extremely elegant. However, I still didn&#39;t grasp the need for unwrap. Is it some implementation detail?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "reply_to_user": {"reputation": 875, "user_id": 7957846, "user_type": "registered", "profile_image": "https://graph.facebook.com/1052262428/picture?type=large", "display_name": "Guilherme Marthe", "link": "https://stackoverflow.com/users/7957846/guilherme-marthe"}, "edited": false, "score": 4, "creation_date": 1518200628, "post_id": 48711618, "comment_id": 84422860, "body": "There is no <code>max</code> if the <code>Vec</code> is empty, so it will return <code>None</code> in that case. Your <code>vector[0]</code> would panic in the same way but you&#39;re running on the assumption that it&#39;ll always have at least one."}], "tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 8, "last_activity_date": 1518199186, "creation_date": 1518199186, "answer_id": 48711618, "question_id": 48711405, "link": "https://stackoverflow.com/questions/48711405/shouldnt-borrowed-values-end-after-an-expression/48711618#48711618", "title": "Shouldn&#39;t borrowed values end after an expression?", "body": "<p>You're missing one small detail, which is that the type of <code>gv</code> (and thus <code>greatest_value</code>) is <code>&amp;i32</code>, not <code>i32</code>, so <code>greatest_value</code> is holding a reference to <code>vector</code>.</p>\n\n<p>You'll want to do</p>\n\n<pre><code>greatest_value = *gv;\n</code></pre>\n\n<p>to store just the numeric value.</p>\n\n<p>You can also simplify your logic to avoid needing to leave the variable uninitialized that way, which can help readability, e.g.</p>\n\n<pre><code>let greatest_value = {\n    let mut gv = &amp;vector[0];\n    for x in &amp;vector {\n        if x &gt; gv {\n            gv = x;\n        }\n    }\n    *gv\n};\n</code></pre>\n\n<p>However really, you can simplify your code a bit with</p>\n\n<pre><code>let greatest_value = *vector.iter().max().unwrap();\n</code></pre>\n\n<p>if you'd like.</p>\n"}], "owner": {"reputation": 875, "user_id": 7957846, "user_type": "registered", "profile_image": "https://graph.facebook.com/1052262428/picture?type=large", "display_name": "Guilherme Marthe", "link": "https://stackoverflow.com/users/7957846/guilherme-marthe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 48711618, "answer_count": 1, "score": 2, "last_activity_date": 1518211732, "creation_date": 1518198307, "last_edit_date": 1518211732, "question_id": 48711405, "link": "https://stackoverflow.com/questions/48711405/shouldnt-borrowed-values-end-after-an-expression", "title": "Shouldn&#39;t borrowed values end after an expression?", "body": "<p>I'm trying to figure out why the following code doesn't compile. </p>\n\n<p>The desired behavior is: given an integer vector, find its greatest value and push a value that is the greatest value + 1 onto the same vector.</p>\n\n<pre><code>fn main() {\n    let mut vector = vec![1, 3, 2];\n    let greatest_value;\n    { // 1\n        let mut gv = &amp;vector[0]; // 2\n        for x in &amp;vector {\n            if x &gt; gv {\n                gv = x;\n            }\n        }\n        greatest_value = gv;\n    } // 3\n    vector.push(greatest_value + 1);\n    println!(\"O maior \u00e9: {}\", greatest_value);\n}\n</code></pre>\n\n<p>The delicate part is that the push method from the <code>Vec</code> class needs a mutable borrow in order to modify the self instance <code>vector</code>. The compiler sees that I did an immutable borrow in the line commented with  <code>// 2</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:13:5\n   |\n5  |         let mut gv = &amp;vector[0]; // 2\n   |                       ------ immutable borrow occurs here\n...\n13 |     vector.push(greatest_value + 1);\n   |     ^^^^^^ mutable borrow occurs here\n14 |     println!(\"O maior \u00e9: {}\", greatest_value);\n15 | }\n   | - immutable borrow ends here\n</code></pre>\n\n<p>Shouldn't that borrow have ended at the line commented with <code>// 3</code>?</p>\n"}, {"tags": ["struct", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518207411, "post_id": 48711176, "comment_id": 84425959, "body": "<i>Playground link so I don&#39;t have to paste error msg</i> \u2014 it&#39;s not polite to force <b>every</b> person who reads your question to click a link in exchange for <b>one</b> person avoiding the time to copy-and-paste some text."}, {"owner": {"reputation": 781, "user_id": 3265676, "user_type": "registered", "profile_image": "https://graph.facebook.com/100003359168861/picture?type=large", "display_name": "Dominik Dosoudil", "link": "https://stackoverflow.com/users/3265676/dominik-dosoudil"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518541247, "post_id": 48711176, "comment_id": 84545055, "body": "@Shepmaster, it wasn&#39;t meant like that. I thought it&#39;s better to see the code &#39;in action&#39; and it seemed to me more DRY when the error can be generated."}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1518199307, "post_id": 48711627, "comment_id": 84422241, "body": "note that <code>String</code> has the <code>into_bytes</code> method that creates a <code>Vec</code> without any copies, simply by taking ownership of the <code>String</code>, so you can skip the <code>as_bytes()</code>, <code>Vec::from</code> dance. But your <code>to_vec</code> solution is even more elegant!"}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1518200080, "post_id": 48711627, "comment_id": 84422605, "body": "@oli_obk-ker Good point. I just wanted to first show the &quot;obvious&quot; solution to get a <code>Vec</code> without changing the code too much, and then develop it into the solution I actually recommend."}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 1, "last_activity_date": 1518199211, "creation_date": 1518199211, "answer_id": 48711627, "question_id": 48711176, "link": "https://stackoverflow.com/questions/48711176/outlive-struct-method/48711627#48711627", "title": "Outlive struct method", "body": "<p>As you've worked out, the slice can't outlive the scope. I don't think you can fix this with lifetime annotations: explicit lifetimes can't actually make objects live for longer, they only stop the compiler making too-strict assumptions about which lifetimes are the same.</p>\n\n<p>The way to do this is to give ownership of these bytes back to the caller, instead of borrowing them in a slice. The obvious candidate for that is a <code>Vec</code>:</p>\n\n<pre><code>pub fn to_utf8(&amp;self) -&gt; Vec&lt;u8&gt; {\n    Vec::from(serde_json::to_string(&amp;self).unwrap().as_bytes())\n}\n</code></pre>\n\n<p>This is an extra copy, which is unfortunate, but luckily Serde provides a function that gives you this output directly!</p>\n\n<pre><code>pub fn to_utf8(&amp;self) -&gt; Vec&lt;u8&gt; {\n    serde_json::to_vec(&amp;self).unwrap()\n} \n</code></pre>\n\n<p>Now you can return a <code>Vec&lt;u8&gt;</code> which will be owned by the caller and last as long as the caller needs. You can use the <code>Vec&lt;u8&gt;</code> exactly the same way you would use the slice, and you can even borrow the underlying slice from it if you need to.</p>\n"}], "owner": {"reputation": 781, "user_id": 3265676, "user_type": "registered", "profile_image": "https://graph.facebook.com/100003359168861/picture?type=large", "display_name": "Dominik Dosoudil", "link": "https://stackoverflow.com/users/3265676/dominik-dosoudil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 130, "favorite_count": 0, "closed_date": 1518199248, "accepted_answer_id": 48711627, "answer_count": 1, "score": 0, "last_activity_date": 1518207327, "creation_date": 1518197400, "last_edit_date": 1518207327, "question_id": 48711176, "link": "https://stackoverflow.com/questions/48711176/outlive-struct-method", "closed_reason": "Duplicate", "title": "Outlive struct method", "body": "<p>I want some data object to serialize itself and make a version of itself that is possible to send via UDP. The problem is that the <code>String</code> created by serialization (<code>serde_json::to_string</code>) lives only until end of scope (which makes sense to me) so the byte version (a <code>&amp;[u8]</code> from <code>as_bytes</code>) cannot reference it out of scope. I've tried adding some lifetime parameters but without success; I don't actually understand lifetime parameters that much yet. </p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\n\nuse std::str;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Test {\n    text: String,\n}\n\nimpl Test {\n    pub fn new(input: &amp;str) -&gt; Self {\n        Test {\n            text: String::from(input),\n        }\n    }\n\n    pub fn to_utf8(&amp;self) -&gt; &amp;[u8] {\n        // serde_json::to_string returns Result&lt;String, ...&gt;\n        // String.as_bytes() returns &amp;[u8]\n        serde_json::to_string(&amp;self).unwrap().as_bytes()\n    }\n}\n\nfn main() {\n    let a = Test::new(\"abc\");\n    println!(\"{:?}\", a.to_utf8());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f7ed7e6368744f4f09ba42a4ff4487ad&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:22:9\n   |\n22 |         serde_json::to_string(&amp;self).unwrap().as_bytes()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ does not live long enough\n23 |     }\n   |     - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 19:5...\n  --&gt; src/main.rs:19:5\n   |\n19 | /     pub fn to_utf8(&amp;self) -&gt; &amp;[u8] {\n20 | |         // serde_json::to_string returns Result&lt;String, ...&gt;\n21 | |         // String.as_bytes() returns &amp;[u8]\n22 | |         serde_json::to_string(&amp;self).unwrap().as_bytes()\n23 | |     }\n   | |_____^\n</code></pre>\n"}, {"tags": ["dependency-injection", "rust", "iron"], "owner": {"reputation": 23, "user_id": 9295715, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e6836be73e8fc82b3a92ed8d7e33f00?s=128&d=identicon&r=PG&f=1", "display_name": "rusty doe", "link": "https://stackoverflow.com/users/9295715/rusty-doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 27, "favorite_count": 0, "closed_date": 1518206682, "answer_count": 0, "score": 1, "last_activity_date": 1518206828, "creation_date": 1518194835, "last_edit_date": 1518206828, "question_id": 48710477, "link": "https://stackoverflow.com/questions/48710477/how-does-one-inject-dependencies-like-a-logger-database-connection-or-sha256-g", "closed_reason": "Duplicate", "title": "How does one inject dependencies like a logger, database connection, or SHA256 generator in Iron?", "body": "<p>I picked an example from Iron router extension and tried to add a single SHA256 hash generator instance that could be used throughout the lifetime of the server:</p>\n\n<pre><code>extern crate crypto;\nextern crate iron;\nextern crate router;\n\nuse iron::prelude::*;\nuse iron::status;\nuse router::Router;\n\nuse crypto::digest::Digest;\nuse crypto::sha2::Sha256;\n\nfn main() {\n    let mut sha256 = Sha256::new();\n    let mut router = Router::new();\n    router.get(\"/\", handler, \"index\");\n    router.get(\"/:query\", handler, \"query\");\n\n    Iron::new(router).http(\"localhost:3000\").unwrap();\n\n    fn handler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n        let ref query = req.extensions\n            .get::&lt;Router&gt;()\n            .unwrap()\n            .find(\"query\")\n            .unwrap_or(\"/\");\n\n        sha256.input_str(\"abc123\");\n        println!(\"sha: {}\", sha256.result_str());\n        Ok(Response::with((status::Ok, *query)))\n    }\n}\n</code></pre>\n\n<p>When I used it inside the <code>handler</code>, I get the following error:</p>\n\n<blockquote>\n  <p>error[E0434]: can't capture dynamic environment in a fn item; use the || { ... } closure form instead</p>\n</blockquote>\n\n<p>I tried to change the line the handler from fn to closure like this:</p>\n\n<pre><code>let handler = |req: &amp;mut Request| -&gt; IronResult&lt;Response&gt; {\n    let ref query = req.extensions\n        .get::&lt;Router&gt;()\n        .unwrap()\n        .find(\"query\")\n        .unwrap_or(\"/\");\n\n    sha256.input_str(\"abc123\");\n    println!(\"sha: {}\", sha256.result_str());\n    Ok(Response::with((status::Ok, *query)))\n};\n</code></pre>\n\n<p>Then I get a new error:</p>\n\n<blockquote>\n  <p>error[E0525]: expected a closure that implements the <code>Fn</code> trait, but this closure only implements <code>FnMut</code></p>\n</blockquote>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 7, "last_activity_date": 1586913937, "last_edit_date": 1586913937, "creation_date": 1518195185, "answer_id": 48710597, "question_id": 48710302, "link": "https://stackoverflow.com/questions/48710302/how-to-get-an-options-value-or-set-it-if-its-empty/48710597#48710597", "title": "How to get an Option&#39;s value or set it if it&#39;s empty?", "body": "<p>Looks to me like you want the <a href=\"https://doc.rust-lang.org/1.22.0/std/option/enum.Option.html#method.get_or_insert_with\" rel=\"nofollow noreferrer\"><code>get_or_insert_with()</code> method</a>. This executes a closure when the <code>Option</code> is <code>None</code> and uses the result as the new value:</p>\n\n<pre><code>fn get_name(&amp;mut self) -&gt; &amp;String {\n    self.name.get_or_insert_with(|| String::from(\"234\"))\n}\n</code></pre>\n\n<p>If you already have a value to insert, or creating the value isn't expensive, you can also use the <a href=\"https://doc.rust-lang.org/1.22.0/std/option/enum.Option.html#method.get_or_insert\" rel=\"nofollow noreferrer\"><code>get_or_insert()</code> method</a>:</p>\n\n<pre><code>fn get_name(&amp;mut self) -&gt; &amp;String {\n    self.name.get_or_insert(String::from(\"234\"))\n}\n</code></pre>\n\n<hr>\n\n<p>You'll also need to change your <code>main()</code> function to avoid the borrowing issue. An easy solution would be to derive <code>Clone</code> on your struct and then <code>.clone()</code> it in the call to <code>println!()</code>:</p>\n\n<pre><code>fn main() {\n    let mut app = App {\n        name: None,\n        age: 10,\n    };\n\n    println!(\"{:?} and name is {}\", app.clone(), app.get_name())\n}\n</code></pre>\n"}], "owner": {"reputation": 331, "user_id": 9140568, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-NqeKkbmLaRs/AAAAAAAAAAI/AAAAAAAAAAo/cqqwHvUKL_g/photo.jpg?sz=128", "display_name": "Aqrun", "link": "https://stackoverflow.com/users/9140568/aqrun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4915, "favorite_count": 1, "accepted_answer_id": 48710597, "answer_count": 1, "score": 9, "last_activity_date": 1586913937, "creation_date": 1518194257, "last_edit_date": 1518206904, "question_id": 48710302, "link": "https://stackoverflow.com/questions/48710302/how-to-get-an-options-value-or-set-it-if-its-empty", "title": "How to get an Option&#39;s value or set it if it&#39;s empty?", "body": "<p>I want to get the <code>name</code> if it's not empty or set a new value. How can I do that?</p>\n\n<pre><code>#[derive(Debug)]\nstruct App {\n    name: Option&lt;String&gt;,\n    age: i32,\n}\n\nimpl App {\n    fn get_name&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a Option&lt;String&gt; {\n        match self.name {\n            Some(_) =&gt; &amp;self.name,\n            None =&gt; {\n                self.name = Some(String::from(\"234\"));\n                &amp;self.name\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut app = App {\n        name: None,\n        age: 10,\n    };\n\n    println!(\"{:?} and name is {}\", &amp;app, &amp;app.get_name().unwrap())\n}\n</code></pre>\n\n<p>The error I'm getting is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:25:44\n   |\n25 |     println!(\"{:?} and name is {}\", &amp;app, &amp;app.get_name().unwrap())\n   |                                            ^^^^^^^^^^^^^^ cannot move out of borrowed content\n\nerror[E0502]: cannot borrow `app` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:25:44\n   |\n25 |     println!(\"{:?} and name is {}\", &amp;app, &amp;app.get_name().unwrap())\n   |     ---------------------------------------^^^---------------------\n   |     |                                |     |\n   |     |                                |     mutable borrow occurs here\n   |     |                                immutable borrow occurs here\n   |     immutable borrow ends here\n   |\n   = note: this error originates in a macro outside of the current crate\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518186120, "post_id": 48707861, "comment_id": 84414416, "body": "In your first example, <code>length: u8</code> means that there is no lifetime (it&#39;s copied every time), and if there&#39;s no lifetime for this the error is elsewhere..."}, {"owner": {"reputation": 922, "user_id": 3402665, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/08Ff2.jpg?s=128&g=1", "display_name": "Oli", "link": "https://stackoverflow.com/users/3402665/oli"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518190038, "post_id": 48707861, "comment_id": 84416915, "body": "it&#39;s odd that the compiler complains about <code>length</code> not living long enough then. The line of that error is on the line <code>.map( |(slot,yaw,pitch)| Branch { slot, yaw, pitch, length } )</code>.  If length is only being copied why would it complain that it doesn&#39;t live long enough?"}, {"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 2, "creation_date": 1518192941, "post_id": 48707861, "comment_id": 84418667, "body": "Can you edit in the complete Error?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518208952, "post_id": 48707861, "comment_id": 84426639, "body": "And a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>? Without it, any answer has to put in <i>a lot</i> of effort to reproduce the problem."}], "answers": [{"tags": [], "owner": {"reputation": 922, "user_id": 3402665, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/08Ff2.jpg?s=128&g=1", "display_name": "Oli", "link": "https://stackoverflow.com/users/3402665/oli"}, "is_accepted": false, "score": 1, "last_activity_date": 1518265738, "creation_date": 1518265738, "answer_id": 48720773, "question_id": 48707861, "link": "https://stackoverflow.com/questions/48707861/rust-ownership-and-lifetimes-using-combine/48720773#48720773", "title": "Rust Ownership and Lifetimes using Combine", "body": "<p>This solved it:</p>\n\n<pre><code>let hex_re = Regex:new(r\"[0-9a-fA-F]\").unwrap();\nlet hex = || find(&amp;hex_re).map(|s| u8::from_str_radix(s, 16));\nlet branch = |length: u8| {\n    (hex(), hex(), hex())\n        .map( |t| (t.0.unwrap(), t.1.unwrap(), t.2.unwrap()) )\n        .map( move |(slot,yaw,pitch)| Branch { slot, yaw, pitch, length } )\n}\n</code></pre>\n\n<p>placing move on the second .map works.</p>\n"}], "owner": {"reputation": 922, "user_id": 3402665, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/08Ff2.jpg?s=128&g=1", "display_name": "Oli", "link": "https://stackoverflow.com/users/3402665/oli"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1518265738, "creation_date": 1518185832, "question_id": 48707861, "link": "https://stackoverflow.com/questions/48707861/rust-ownership-and-lifetimes-using-combine", "title": "Rust Ownership and Lifetimes using Combine", "body": "<p>I've read the docs on ownership and lifetimes and I think I understand them but I'm having trouble with a specific bit of code.</p>\n\n<p>I have a struct called <code>Branch</code> like this:</p>\n\n<pre><code>struct Branch {\n    slot: u8,\n    yaw: u8,\n    pitch: u8,\n    length: u8\n}\n</code></pre>\n\n<p>I'm using the <code>combine</code> library (it's a parser combinator) to parse a string into a Branch. The parsers look like this:</p>\n\n<pre><code>let hex_re = Regex:new(r\"[0-9a-fA-F]\").unwrap();\nlet hex = || find(&amp;hex_re).map(|s| u8::from_str_radix(s, 16));\nlet branch = |length: u8| {\n    (hex(), hex(), hex())\n        .map( |t| (t.0.unwrap(), t.1.unwrap(), t.2.unwrap()) )\n        .map( |(slot,yaw,pitch)| Branch { slot, yaw, pitch, length } )\n}\n</code></pre>\n\n<p>The parsers are fairly simple, the first <code>hex</code> takes a regular-expression which matches a single hexidecimal character and maps it into a u8. The second <code>branch</code> maps 3 hex characters into a Branch e.g. 3d2.</p>\n\n<p>The problem arises when I call the parser <code>branch(1).parse(\"3d2\")</code>, the compiler reports an error <code>'length' does not live long enough</code>. I think I understand this error, if I'm not mistaken it's because <code>length</code> goes out of scope when the closure completes and so the <code>length</code> variable is deallocated even though it is still being used by the newly created Branch.</p>\n\n<p>So, I tried to get around this by converting <code>length: u8</code> to <code>length: &amp;u8</code> like so:</p>\n\n<pre><code>let branch = |len: &amp;u8| {\n    (hex(), hex(), hex())\n        .map( |t| (t.0.unwrap(), t.1.unwrap(), t.2.unwrap()) )\n        .map( |(slot,yaw,pitch)| Branch { slot, yaw, pitch, length: *len } )\n};\n\n// calling the parser\nbranch(&amp;(1 as u8)).parse(\"3d2\");\n</code></pre>\n\n<p>But that results in this error:</p>\n\n<pre><code>type of expression contains references that are not valid during the expression: `combine::combinator::Map&lt;combine::combinator::Map&lt;(combine::combinator::Map&lt;combine::regex::Find&lt;&amp;regex::Regex, &amp;str&gt;, [closure@src\\lsystem.rs:26:37: 26:70]&gt;, combine::combinator::Map&lt;combine::regex::Find&lt;&amp;regex::Regex, &amp;str&gt;, [closure@src\\lsystem.rs:26:37: 26:70]&gt;, combine::combinator::Map&lt;combine::regex::Find&lt;&amp;regex::Regex, &amp;str&gt;, [closure@src\\lsystem.rs:26:37: 26:70]&gt;, combine::combinator::Map&lt;combine::regex::Find&lt;&amp;regex::Regex, &amp;str&gt;, [closure@src\\lsystem.rs:26:37: 26:70]&gt;), [closure@src\\lsystem.rs:30:19: 30:65]&gt;, [closure@src\\lsystem.rs:31:19: 31:80 length:&amp;&amp;u8]&gt;`\n</code></pre>\n\n<p>I have no idea what this error is about. Any help would be much appreciated.</p>\n"}, {"tags": ["struct", "rust", "lifetime"], "comments": [{"owner": {"reputation": 205, "user_id": 4846418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/be82940aac7db2359ec9e7b64a9e511b?s=128&d=identicon&r=PG&f=1", "display_name": "raggy", "link": "https://stackoverflow.com/users/4846418/raggy"}, "edited": false, "score": 0, "creation_date": 1518180400, "post_id": 48704474, "comment_id": 84410726, "body": "Think about who owns the values that ColVector referes to. Yes you return a Struct with a reference, but a reference to where? It is not shown in the question but most likely the reference is to a local variable inside mat_mult."}, {"owner": {"reputation": 11, "user_id": 9337945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78cd0d3e9272254b47295da7c899b124?s=128&d=identicon&r=PG&f=1", "display_name": "spyduck", "link": "https://stackoverflow.com/users/9337945/spyduck"}, "reply_to_user": {"reputation": 205, "user_id": 4846418, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/be82940aac7db2359ec9e7b64a9e511b?s=128&d=identicon&r=PG&f=1", "display_name": "raggy", "link": "https://stackoverflow.com/users/4846418/raggy"}, "edited": false, "score": 0, "creation_date": 1518181021, "post_id": 48704474, "comment_id": 84411159, "body": "Ah, yes, that is pretty much what happens. I chose a slice in the struct, because I do not know the size of the array at compile-time, and I do not yet understand how to solve this without slices or just making a lot of structs with different sizes.  So, you&#39;re saying I am trying to do something impossible, I guess, and my question makes no sense.  EDIT: can I accept a comment as an answer?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1518181528, "post_id": 48704474, "comment_id": 84411506, "body": "@spyduck an &quot;array&quot; with a runtime-size is a <code>Vec</code> in Rust. So you definitely can do it, just like the duplicate uses <code>String</code> over <code>&amp;str</code>, you can use <code>Vec&lt;f64&gt;</code> over <code>&amp;[f64]</code>"}, {"owner": {"reputation": 11, "user_id": 9337945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78cd0d3e9272254b47295da7c899b124?s=128&d=identicon&r=PG&f=1", "display_name": "spyduck", "link": "https://stackoverflow.com/users/9337945/spyduck"}, "edited": false, "score": 0, "creation_date": 1518183069, "post_id": 48704474, "comment_id": 84412464, "body": "Yeah, but vectors always get assigned on the heap, right? Since I expect to do a lot of numerical integration that doesn&#39;t seem very favorable."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518206028, "post_id": 48704474, "comment_id": 84425362, "body": "<i>My function does not return a reference, but a struct containing a reference to a newly created slice.</i> \u2014 Why do you believe that returning a reference wrapped in a struct is different than returning a reference directly?"}], "owner": {"reputation": 11, "user_id": 9337945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/78cd0d3e9272254b47295da7c899b124?s=128&d=identicon&r=PG&f=1", "display_name": "spyduck", "link": "https://stackoverflow.com/users/9337945/spyduck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 343, "favorite_count": 0, "closed_date": 1518179208, "answer_count": 0, "score": 1, "last_activity_date": 1518206047, "creation_date": 1518174392, "last_edit_date": 1518179850, "question_id": 48704474, "link": "https://stackoverflow.com/questions/48704474/declare-lifetime-of-output-struct-to-be-unrelated-to-inputs", "closed_reason": "Duplicate", "title": "Declare lifetime of output struct to be unrelated to inputs", "body": "<p>I have defined two structs and a function in my Rust program, in which I am implementing my own linear algebra. While doing so I stumbled onto a gap in my knowledge of lifetimes in Rust. To my understanding, a lifetime annotation simply tells the compiler that one input variable must live at least as long as output variable.</p>\n\n<p>But now I am actually trying to tell the compiler that my output is NOT related to the input. Sure, I take in references, but the new struct is constructed by creating new slices, and filling these with new values (f64).</p>\n\n<p>So, my idea was that I have two inputs, whose lifetimes can be unrelated when the function is called, and a third one, saying it is unrelated to the inputs, because a new struct with no references to the old one is created. (See code below).</p>\n\n<p>Sadly, this returns an error, and to be perfectly honest, I have no idea what it really means. I mean, I can read the words and know these words, but it doesn't really fit in the idea of lifetimes I have in my head. I need a fresh new look on lifetimes, or someone to point out to me what I understood wrong.</p>\n\n<p>What I get from this is that it complains that my output is not related/constrained to the inputs, which is precisely what I want!</p>\n\n<pre><code>error[E0207]: the lifetime parameter `'c` is not constrained by the impl      trait, self type, or predicates\n--&gt; src/mat.rs:199:14\n|\n199 | impl&lt;'a, 'b, 'c\n|                  ^^ unconstrained lifetime parameter\nerror[E0207]: the lifetime parameter `'c` is not constrained by the impl trait, self type, or predicates\n</code></pre>\n\n<p>I do not require any information on how to properly implement a matrix multiplication, or matrices, because I am toying around to learn Rust. I need an answer that shows me what I misunderstood about Rust.</p>\n\n<p>The two structs:</p>\n\n<pre><code>pub struct ColVector&lt;'a&gt; {\n    values: &amp;'a [f64],\n}\n\npub struct Matrix&lt;'a&gt; {\n    values: &amp;'a [&amp;'a [f64]], \n    shape: (usize, usize) // Tuple containing size. First value is rows, second is columns\n}\n</code></pre>\n\n<p>The implementation over-ride of the *-operator (I have 3 other ones, all giving the same error)</p>\n\n<pre><code>impl&lt;'a, 'b, 'c&gt; Mul&lt;&amp;'a ColVector&lt;'a&gt;&gt; for &amp;'b Matrix&lt;'b&gt; {\n    type Output = ColVector&lt;'c&gt;;\n\n    fn mul(self, v: &amp;'a ColVector) -&gt; ColVector&lt;'c&gt; {\n        self.mat_mult(v)\n    }\n}\n</code></pre>\n\n<p><strong>EDIT</strong>: I fail to see how this is a duplicate of the question <a href=\"https://stackoverflow.com/questions/29428227/return-local-string-as-a-slice-str\">Return local String as a slice (&amp;str)</a> . That question is about someone trying to return a reference to a variable local to the function, which is not what I am trying to do. My function does not return a reference, but a struct containing a reference to a newly created slice.</p>\n"}, {"tags": ["rust", "embedded", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 63, "user_id": 4428260, "user_type": "registered", "profile_image": "https://graph.facebook.com/1465032950/picture?type=large", "display_name": "Kriszti&#225;n Szegi", "link": "https://stackoverflow.com/users/4428260/kriszti%c3%a1n-szegi"}, "edited": false, "score": 0, "creation_date": 1518167833, "post_id": 48702164, "comment_id": 84403046, "body": "That one won&#39;t work as const initialization has the same restriction as static init - error[E0396]: raw pointers cannot be dereferenced in constants However this works          const ROM_I2C_API2: *const RomI2cApi = 0x1fff_200c as *const RomI2cApi;"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 63, "user_id": 4428260, "user_type": "registered", "profile_image": "https://graph.facebook.com/1465032950/picture?type=large", "display_name": "Kriszti&#225;n Szegi", "link": "https://stackoverflow.com/users/4428260/kriszti%c3%a1n-szegi"}, "edited": false, "score": 0, "creation_date": 1518168073, "post_id": 48702164, "comment_id": 84403195, "body": "oh... sorry about that. I was so used to it working I forgot it&#39;s not working yet. Should be in stable rustc in 3 months or so: <a href=\"https://github.com/rust-lang/rust/pull/46882\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/46882</a>"}, {"owner": {"reputation": 63, "user_id": 4428260, "user_type": "registered", "profile_image": "https://graph.facebook.com/1465032950/picture?type=large", "display_name": "Kriszti&#225;n Szegi", "link": "https://stackoverflow.com/users/4428260/kriszti%c3%a1n-szegi"}, "edited": false, "score": 0, "creation_date": 1518168803, "post_id": 48702164, "comment_id": 84403637, "body": "Thanks, I think I will settle with that. Naked most likely won&#39;t work in my case, but I hope compiler will do its best to optimize out the call chain."}, {"owner": {"reputation": 63, "user_id": 4428260, "user_type": "registered", "profile_image": "https://graph.facebook.com/1465032950/picture?type=large", "display_name": "Kriszti&#225;n Szegi", "link": "https://stackoverflow.com/users/4428260/kriszti%c3%a1n-szegi"}, "edited": false, "score": 0, "creation_date": 1518169135, "post_id": 48702164, "comment_id": 84403835, "body": "Also, thanks for the info on rust feature update, I am accepting the answer partly because of this!"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1519494924, "last_edit_date": 1519494924, "creation_date": 1518167027, "answer_id": 48702164, "question_id": 48701896, "link": "https://stackoverflow.com/questions/48701896/how-do-i-declare-a-static-variable-as-a-reference-to-a-hard-coded-memory-address/48702164#48702164", "title": "How do I declare a static variable as a reference to a hard-coded memory address?", "body": "<p><strike>You can get around having a static at all:</p>\n\n<pre><code>const ROM_I2C_API: &amp;RomI2cApi = &amp;*(0x1fff_200c as *const RomI2cApi);\n</code></pre>\n\n<p></strike> Not yet working, but is planned to work in the future. For now use</p>\n\n<pre><code>const ROM_I2C_API: *const RomI2cApi = 0x1fff_200c as *const RomI2cApi;\n\nfn api_table() -&gt; &amp;'static RomI2cApi {\n    unsafe { &amp;*(ROM_I2C_API) }\n}\n</code></pre>\n\n<p>This creates a <code>&amp;'static RomI2cApi</code> and allows you to access the functions everywhere directly by calling <code>api_table().master_transmit_poll()</code></p>\n"}], "owner": {"reputation": 63, "user_id": 4428260, "user_type": "registered", "profile_image": "https://graph.facebook.com/1465032950/picture?type=large", "display_name": "Kriszti&#225;n Szegi", "link": "https://stackoverflow.com/users/4428260/kriszti%c3%a1n-szegi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 753, "favorite_count": 0, "accepted_answer_id": 48702164, "answer_count": 1, "score": 5, "last_activity_date": 1519494924, "creation_date": 1518166048, "last_edit_date": 1519494914, "question_id": 48701896, "link": "https://stackoverflow.com/questions/48701896/how-do-i-declare-a-static-variable-as-a-reference-to-a-hard-coded-memory-address", "title": "How do I declare a static variable as a reference to a hard-coded memory address?", "body": "<p>I am working on embedded Rust code for LPC82X series controllers from NXP - the exact toolchain does not matter for the question.</p>\n\n<p>These controllers contain peripheral drivers in ROM. I want to use these drivers, which means I need to use unsafe Rust and FFI without linking actual code.</p>\n\n<p>The ROM APIs expose function pointers packed into C structs at specific address locations. If somebody wants the details of this API, chapter 29 of <a href=\"https://www.nxp.com/docs/en/user-guide/UM10800.pdf\" rel=\"nofollow noreferrer\">the LPC82X manual</a> describes the API in question. </p>\n\n<p>My Rust playground dummy sketch looks like this, that would be hidden from application code, by a yet unwritten I2C abstraction lib. This compiles.</p>\n\n<pre><code>#![feature(naked_functions)]\n\nconst I2C_ROM_API_ADDRESS: usize = 0x1fff_200c;\nstatic mut ROM_I2C_API: Option&lt;&amp;RomI2cApi&gt; = None;\n\n#[repr(C)]\nstruct RomI2cApi {\n    // Dummy functions, real ones take arguments, and have different return\n    // These won't be called directly, only through the struct's implemented methods\n    // value\n    master_transmit_poll: extern \"C\" fn() -&gt; bool,\n    master_receive_poll: extern \"C\" fn() -&gt; bool,\n}\n\nimpl RomI2cApi {\n    fn api_table() -&gt; &amp;'static RomI2cApi {\n        unsafe {\n            match ROM_I2C_API {\n                None =&gt; RomI2cApi::new(),\n                Some(table) =&gt; table,\n            }\n        }\n    }\n\n    unsafe fn new() -&gt; &amp;'static RomI2cApi {\n        ROM_I2C_API = Some(&amp;*(I2C_ROM_API_ADDRESS as *const RomI2cApi));\n        ROM_I2C_API.unwrap()\n    }\n\n    #[inline]\n    fn master_transmit_poll(&amp;self) -&gt; bool {\n        (self.master_transmit_poll)()\n    }\n\n    #[inline]\n    fn master_receive_poll(&amp;self) -&gt; bool {\n        (self.master_receive_poll)()\n    }\n}\n\nimpl From&lt;usize&gt; for &amp;'static RomI2cApi {\n    fn from(address: usize) -&gt; &amp;'static RomI2cApi {\n        unsafe { &amp;*(address as *const RomI2cApi) }\n    }\n}\n\nfn main() {\n    let rom_api = unsafe { RomI2cApi::api_table() };\n    println!(\"ROM I2C API address is: {:p}\", rom_api);\n    // Should be commented out when trying !\n    rom_api.master_transmit_poll();\n}\n</code></pre>\n\n<p>I cannot declare the function pointer structs as non-mutable static as statics have many restrictions, including not dereferencing pointers in the assignment. Is there a better workaround than <code>Option</code>? Using <code>Option</code> with the <code>api_table</code> function at least guarantees that initialization happens.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1518143339, "creation_date": 1518143339, "answer_id": 48697872, "question_id": 48697700, "link": "https://stackoverflow.com/questions/48697700/the-trait-stdopsfn-is-not-implemented-for-closure-but-only-with/48697872#48697872", "title": "the trait `std::ops::Fn&lt;()&gt;` is not implemented for [closure ...] but only with a binding from the outer scope", "body": "<p>If this was allowed, what would happen the second time the closure was called? Remember, the first time the closure is called, it moves <code>s</code>, so <code>s</code> now has no valid value.</p>\n\n<p>There are a few ways to make this work, depending on what you need exactly.</p>\n\n<ol>\n<li><p>Make the closure return a reference to the string instead.</p>\n\n<p><em>Note:</em> We need to write out <code>'a</code> explicitly on the right-hand side of the <code>as</code> cast expression, otherwise the compiler gives an error. I don't think we can write a correct lifetime without introducing an intermediate function (<code>make_foo</code> here).</p>\n\n<pre><code>fn make_foo&lt;'a&gt;(s: &amp;'a Option&lt;String&gt;) -&gt; Box&lt;Fn() -&gt; Option&lt;&amp;'a str&gt; + 'a&gt; {\n    Box::new(move || s.as_ref().map(|s| &amp;**s)) as Box&lt;Fn() -&gt; Option&lt;&amp;'a str&gt; + 'a&gt;\n}\n\nfn main() {\n    let s = Some(\"xyz\".to_string());\n    let foo = make_foo(&amp;s);\n\n    println!(\"{:?}\", foo());\n}\n</code></pre></li>\n<li><p>Use <del><a href=\"https://doc.rust-lang.org/stable/std/ops/trait.FnOnce.html\" rel=\"noreferrer\"><code>FnOnce</code></a></del> <a href=\"https://doc.rust-lang.org/1.23.0/std/boxed/trait.FnBox.html\" rel=\"noreferrer\"><code>FnBox</code></a> instead of <code>Fn</code>. <code>FnOnce</code> closures can move, but can be called at most once. Since we can't call a <code>Box&lt;FnOnce()&gt;</code> as of Rust 1.23.0, we need to use <code>Box&lt;FnBox()&gt;</code>.</p>\n\n<pre><code>#![feature(fnbox)]\n\nuse std::boxed::FnBox;\n\nfn main() {\n    let s = Some(\"xyz\".to_string());\n    let foo = Box::new(|| s) as Box&lt;FnBox() -&gt; Option&lt;String&gt;&gt;;\n\n    println!(\"{:?}\", foo());\n}\n</code></pre></li>\n</ol>\n\n<p>However, since <code>FnBox</code> is unstable, you can only use it with a nightly compiler. If you want to support stable compilers, you can use the <code>BoxFnOnce</code> type defined in the <a href=\"https://crates.io/crates/boxfnonce\" rel=\"noreferrer\"><code>boxfnonce</code> crate</a> instead (though you need to explicitly call the closure as <code>x.call()</code>; <code>x()</code> won't work).</p>\n"}], "owner": {"reputation": 6509, "user_id": 356011, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/d17ff41be1044be6fb5ef186b83efb20?s=128&d=identicon&r=PG", "display_name": "marathon", "link": "https://stackoverflow.com/users/356011/marathon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 896, "favorite_count": 0, "accepted_answer_id": 48697872, "answer_count": 1, "score": 3, "last_activity_date": 1518143339, "creation_date": 1518141878, "question_id": 48697700, "link": "https://stackoverflow.com/questions/48697700/the-trait-stdopsfn-is-not-implemented-for-closure-but-only-with", "title": "the trait `std::ops::Fn&lt;()&gt;` is not implemented for [closure ...] but only with a binding from the outer scope", "body": "<pre><code>fn main() {\n\n    let s = Some(\"xyz\".to_string());  //compiler error\n\n    let foo = Box::new(|| s) as Box&lt;Fn() -&gt; Option&lt;String&gt;&gt;;  //ok\n\n    let bar = Box::new(|| Some(\"xyz\".to_string())) as Box&lt;Fn() -&gt; Option&lt;String&gt;&gt;;\n\n    println!(\"{:?}\", foo());\n    println!(\"{:?}\", bar());\n}\n</code></pre>\n\n<p>gives the error</p>\n\n<pre><code>error[E0277]: the trait bound `[closure@src/main.rs:5:24: 5:28 s:std::option::Option&lt;std::string::String&gt;]: std::ops::Fn&lt;()&gt;` is not satisfied\n --&gt; src/main.rs:5:15\n  |\n5 |     let foo = Box::new(|| s) as Box&lt;Fn() -&gt; Option&lt;String&gt;&gt;;\n  |               ^^^^^^^^^^^^^^ the trait `std::ops::Fn&lt;()&gt;` is not implemented for `[closure@src/main.rs:5:24: 5:28 s:std::option::Option&lt;std::string::String&gt;]`\n  |\n  = note: required for the cast to the object type `std::ops::Fn() -&gt; std::option::Option&lt;std::string::String&gt;`\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>The docs for <a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"nofollow noreferrer\">Trait std::ops::Fn</a> state: </p>\n\n<blockquote>\n  <p>Fn is implemented automatically by closures which only take immutable references to captured variables or don't capture anything at all,</p>\n</blockquote>\n\n<p><code>s</code> isn't mutable, but it's not a reference and I'm moving it.</p>\n\n<p>If I call <code>s.clone()</code> the compiler error goes away, but in my real case I want to avoid that.</p>\n\n<p>Same error if I use <code>FnMut</code>   <code>FnOnce</code> complains about not knowing the size, even though it is Boxed.</p>\n\n<p>Is there a way I can make this work with moved data?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=98709024e37385428e0600a467f62b84&amp;version=undefined\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": ["rust", "rust-diesel"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1595959987, "last_edit_date": 1595959987, "creation_date": 1518204029, "answer_id": 48712715, "question_id": 48696290, "link": "https://stackoverflow.com/questions/48696290/creating-diesel-rs-queries-with-a-dynamic-number-of-ands/48712715#48712715", "title": "Creating Diesel.rs queries with a dynamic number of .and()&#39;s", "body": "<p>The first thing you need to do is look at the <strong>complete</strong> error message:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:23:13\n   |\n23 |     inner = inner.and(author.like(format!(&quot;%{}%&quot;, authors[2])));//&lt;2&gt;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `diesel::expression::operators::Like`, found struct `diesel::expression::operators::And`\n   |\n   = note: expected type `diesel::expression::operators::And&lt;diesel::expression::operators::Like&lt;_, _&gt;, _&gt;`\n              found type `diesel::expression::operators::And&lt;diesel::expression::operators::And&lt;diesel::expression::operators::Like&lt;_, _&gt;, diesel::expression::operators::Like&lt;schema::ebook::columns::author, diesel::expression::bound::Bound&lt;diesel::sql_types::Text, std::string::String&gt;&gt;&gt;, _&gt;`\n</code></pre>\n<p>It's long, but that's because it's fully qualified. Lets shorten the last part a bit:</p>\n<pre class=\"lang-none prettyprint-override\"><code>expected type `And&lt;Like&lt;_, _&gt;, _&gt;`\n   found type `And&lt;And&lt;Like&lt;_, _&gt;, Like&lt;author, Bound&lt;Text, String&gt;&gt;&gt;, _&gt;`\n</code></pre>\n<p>If you review the documentation for <a href=\"http://docs.diesel.rs/diesel/expression_methods/trait.BoolExpressionMethods.html#method.and\" rel=\"nofollow noreferrer\"><code>and</code></a>, you'll see that every call to <code>and</code> consumes the receiver and returns a brand new type \u2014 <code>And</code>:</p>\n<pre><code>fn and&lt;T: AsExpression&lt;Bool&gt;&gt;(self, other: T) -&gt; And&lt;Self, T::Expression&gt;\n</code></pre>\n<p>This is the core of Diesel's ability to generate strongly-typed SQL expressions with no run-time overhead. All of the work is delegated to the type system. In fact, the creator of Diesel has <a href=\"https://confreaks.tv/videos/rustconf2017-type-system-tips-for-the-real-world\" rel=\"nofollow noreferrer\">an entire talk where he shows how far Diesel pushes the type system and what benefits it has</a>.</p>\n<p>Turning back to your question, it's impossible to store an <code>And&lt;_, _&gt;</code> in the same location as an <code>And&lt;And&lt;_, _&gt;, _&gt;</code> because they will have different sizes and are in fact different types. At the root, this is the same as trying to store an integer in a boolean.</p>\n<p>In fact, there's <strong>no</strong> way to know what concrete type you need because you <em>don't even know how many conditions</em> you will have \u2014 it depends on the size of the vector.</p>\n<p>In this case, we have to give up static dispatch and move to dynamic dispatch via a <em>trait object</em>. Diesel has a specific trait for this case (which also has good examples): <a href=\"http://docs.diesel.rs/diesel/expression/trait.BoxableExpression.html\" rel=\"nofollow noreferrer\"><code>BoxableExpression</code></a>.</p>\n<p>The remaining piece is to convert your authors to <code>like</code> expressions and combine them. We need a base case, however, for when <code>authors</code> is empty. We construct a trivially true statement (<code>author = author</code>) for that.</p>\n<pre><code>#[macro_use]\nextern crate diesel;\n\nuse diesel::SqliteConnection;\nuse diesel::prelude::*;\nuse diesel::sql_types::Bool;\n\nmod schema {\n    table! {\n        ebook (id) {\n            id -&gt; Int4,\n            author -&gt; Text,\n        }\n    }\n}\n\nfn get_books(authors: Vec&lt;String&gt;, connection: SqliteConnection) {\n    use schema::ebook::dsl::*;\n\n    let always_true = Box::new(author.eq(author));\n    let query: Box&lt;BoxableExpression&lt;schema::ebook::table, _, SqlType = Bool&gt;&gt; = authors\n        .into_iter()\n        .map(|name| author.like(format!(&quot;%{}%&quot;, name)))\n        .fold(always_true, |query, item| {\n            Box::new(query.and(item))\n        });\n\n    ebook\n        .filter(query)\n        .load::&lt;(i32, String)&gt;(&amp;connection)\n        .expect(&quot;Error loading ebook&quot;);\n}\n\nfn main() {}\n</code></pre>\n<hr />\n<p>I also wouldn't be surprised if there wasn't a better <em>SQL</em> way of doing this. It appears that PostgreSQL has the <code>WHERE col LIKE ANY( subselect )</code> and <code>WHERE col LIKE ALL( subselect )</code> forms, for example.</p>\n"}], "owner": {"reputation": 75, "user_id": 9335669, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/170e0d9b1f20f3cba4b4be2960147dfc?s=128&d=identicon&r=PG&f=1", "display_name": "unknown rustacean", "link": "https://stackoverflow.com/users/9335669/unknown-rustacean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2635, "favorite_count": 2, "accepted_answer_id": 48712715, "answer_count": 1, "score": 7, "last_activity_date": 1595959987, "creation_date": 1518131402, "last_edit_date": 1518202051, "question_id": 48696290, "link": "https://stackoverflow.com/questions/48696290/creating-diesel-rs-queries-with-a-dynamic-number-of-ands", "title": "Creating Diesel.rs queries with a dynamic number of .and()&#39;s", "body": "<p>While playing with Diesel, I got stuck writing a function which takes an vector of <code>String</code>s as input and does the following:</p>\n\n<ol>\n<li>Combine all <code>String</code>s to a large query</li>\n<li>run the query on the <code>Connection</code></li>\n<li>process the result</li>\n<li>return a <code>Vec</code></li>\n</ol>\n\n<p>If I construct the query in one step, it works just fine:</p>\n\n<pre><code>fn get_books(authors: Vec&lt;String&gt;, connection: SqliteConnection) {\n    use schema::ebook::dsl::*;\n\n    let inner = author\n        .like(format!(\"%{}%\", authors[0]))\n        .and(author.like(format!(\"%{}%\", authors[1])))\n        .and(author.like(format!(\"%{}%\", authors[2])));\n\n    ebook\n        .filter(inner)\n        .load::&lt;Ebook&gt;(&amp;connection)\n        .expect(\"Error loading ebook\");\n}\n</code></pre>\n\n<p>If I try to generate the query in more steps (needed in order to work with  the variable length of the input vector) I can't get it to compile:</p>\n\n<pre><code>fn get_books(authors: Vec&lt;String&gt;, connection: SqliteConnection) {\n    use schema::ebook::dsl::*;\n\n    let mut inner = author\n        .like(format!(\"%{}%\", authors[0]))\n        .and(author.like(format!(\"%{}%\", authors[1]))); // &lt;1&gt;\n\n    inner = inner.and(author.like(format!(\"%{}%\", authors[2]))); // &lt;2&gt;\n\n    ebook\n        .filter(inner)\n        .load::&lt;Ebook&gt;(&amp;connection)\n        .expect(\"Error loading ebook\");\n}\n</code></pre>\n\n<p>This generates the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>inner = inner.and(author.like(format!(\"%{}%\",authors[2])));\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `diesel::expression::operators::Like`, found struct `diesel::expression::operators::And`\n</code></pre>\n\n<p>I don't understand why Rust expects a <code>Like</code> and not an <code>And</code>. The function an the line line marked <code>&lt;1&gt;</code> returns an <code>And</code> and therefore an <code>And</code> is stored in <code>inner</code>. </p>\n\n<p>What am I missing? Why does the first bit of code compile and the second won't? What is the right way to generate this kind of query?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1518128260, "creation_date": 1518128260, "answer_id": 48695694, "question_id": 48694602, "link": "https://stackoverflow.com/questions/48694602/re-export-optional-cargo-feature-that-can-be-turned-off/48695694#48695694", "title": "Re-export optional cargo feature that can be turned off", "body": "<p>In <code>dep_a/Cargo.toml</code>, you did not specify <code>default-features = false</code> on the <code>dep_b</code> dependency. Therefore, the <code>rustc-serialize</code> feature in <code>dep_b</code> is enabled by default. The fact that you included a feature in <code>dep_a</code> to enable <code>dep_b</code>'s <code>rustc-serialize</code> doesn't change the fact that it's still enabled when <code>dep_a</code>'s feature is not enabled.</p>\n\n<p>Thus, in <code>dep_a/Cargo.toml</code>, you should have:</p>\n\n<pre><code>[dependencies]\ndep_b = { version = \"0.1.0\", path = \"../dep_b\", default-features = false }\n</code></pre>\n"}], "owner": {"reputation": 16817, "user_id": 386279, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=128&d=identicon&r=PG", "display_name": "beardc", "link": "https://stackoverflow.com/users/386279/beardc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 175, "favorite_count": 0, "accepted_answer_id": 48695694, "answer_count": 1, "score": 1, "last_activity_date": 1518128260, "creation_date": 1518123172, "last_edit_date": 1518123448, "question_id": 48694602, "link": "https://stackoverflow.com/questions/48694602/re-export-optional-cargo-feature-that-can-be-turned-off", "title": "Re-export optional cargo feature that can be turned off", "body": "<p>With the following directory structure:</p>\n\n<pre><code>tree hello_dep\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 dep_a\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 main.rs\n\u251c\u2500\u2500 dep_b\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 main.rs\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p>And the following dependency chain: <code>hello_dep -&gt; dep_a -&gt; dep_b -&gt; (optional feature) rustc-serialize</code>, \nI would like to create a feature in dep_a that re-exports the optional rustc-serialize feature in dep_b.</p>\n\n<p>At the bottom, I have dep_b, which has rustc-serialize as an optional default feature:</p>\n\n<pre><code># dep_b/Cargo.toml\n[package]\nname = \"dep_b\"\nversion = \"0.1.0\"\n\n[dependencies]\nrustc-serialize = { version = \"0.3.19\", optional = true }\n\n[features]\ndefault = [\"rustc-serialize\"]\n</code></pre>\n\n<p>I would like to create a feature in dep_a to optionally reexport \"rustc-serialize\". Here is the attempt:</p>\n\n<pre><code># dep_a/Cargo.toml\n[package]\nname = \"dep_a\"\nversion = \"0.1.0\"\n\n[dependencies]\ndep_b = { version = \"0.1.0\", path = \"../dep_b\" }\n\n[features]\nrustc-serialize = [\"dep_b/rustc-serialize\"]\ndefault = [\"rustc-serialize\"]\n</code></pre>\n\n<p>However, when I try to add this as a dependency with the default off using the following Cargo.toml:</p>\n\n<pre><code># hello_dep/Cargo.toml\n[package]\nname = \"hello_dep\"\nversion = \"0.1.0\"\n\n[dependencies]\ndep_a = { version = \"0.1.0\", path = \"dep_a\", default-features = false, optional = true }\n</code></pre>\n\n<p><code>cargo build</code> still yields rustc-serialize in Cargo.lock. But directly depending on dep_b correctly avoids pulling in rustc-serialize with the following line</p>\n\n<p><code>dep_b = { version = \"0.1.0\", path = \"dep_b\", default-features = false }</code></p>\n\n<p>Is this a bug in Cargo, or am I doing something wrong? Here is a <a href=\"https://stackoverflow.com/questions/48677352/turn-off-default-features-in-dependency-of-dependency\">related question</a></p>\n"}, {"tags": ["memory", "memory-management", "memory-leaks", "scope", "rust"], "comments": [{"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 4, "creation_date": 1518121509, "post_id": 48694103, "comment_id": 84386881, "body": "&quot;In C/C++ that is the birth of a memory leak since nobody is gonna free that memory and you no longer have a way to do so either.&quot; In C++ <code>vector::operator=</code> will free the old memory, so there&#39;d be no leak. In C there are no vectors and you simply can&#39;t assign to arrays, so you wouldn&#39;t be able to write code like that."}, {"owner": {"reputation": 1192, "user_id": 7023187, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/321015561587503/picture?type=large", "display_name": "Rares Dima", "link": "https://stackoverflow.com/users/7023187/rares-dima"}, "reply_to_user": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 0, "creation_date": 1518121794, "post_id": 48694103, "comment_id": 84387027, "body": "@sepp2k I&#39;m sorry for not being clear enough. I&#39;m not referring to the particulars of a vector, but to <i>something</i>, a value, an object, you name it, that takes up space in memory. Maybe a vector wasn&#39;t the right example if it cleans up after itself, but the idea is still there, if it wouldn&#39;t clean up after itself trough the actual implementation, the compiler/runtime is not gonna do it either. I&#39;m sure you inderstand"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1518122017, "post_id": 48694103, "comment_id": 84387135, "body": "For the code you provided, the Rust compiler will statically (i.e. at compile time) determine that <code>v</code> is already initialized whe the statement <code>v = Vec::new()</code> is reached, so the compiler will simply emit code to drop the old value before the assignment."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1518122048, "post_id": 48694103, "comment_id": 84387145, "body": "A proper implementation of <code>operator=</code> should <i>always</i> handle memory properly. If it doesn&#39;t, run away from this type."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1518122223, "post_id": 48694103, "comment_id": 84387228, "body": "@mcarton So did you just tell us that <code>operator=</code> isn&#39;t implemented properly for raw pointers in C++?  I guess you have a point here. :)"}, {"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 2, "creation_date": 1518122283, "post_id": 48694103, "comment_id": 84387252, "body": "Everything that isn&#39;t directly created using <code>new</code>, or broken, cleans up after itself in C++. To create a memory leak, you&#39;d have to work with raw pointers to dynamically allocated memory. And once you&#39;ve realized that and tried to do the same in Rust, you&#39;ll find that Rust doesn&#39;t allow you to touch raw pointers outside of <code>unsafe</code> blocks."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1518122463, "post_id": 48694103, "comment_id": 84387340, "body": "@SvenMarnach Raw pointers? What are those? Oh, you mean C++ from the older times! But it&#39;s 2018 now, nobody uses those."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1518123645, "post_id": 48694103, "comment_id": 84387912, "body": "The suggested duplicate target demonstrates shadowing, not overwriting. The behavior in this case is different (compare <a href=\"https://play.rust-lang.org/?gist=1f896de77082e3d04ed61df61e596dd4&amp;version=stable\" rel=\"nofollow noreferrer\">1</a> and <a href=\"https://play.rust-lang.org/?gist=7179c02d7b63a062fb2cfabd1bb825e5&amp;version=stable\" rel=\"nofollow noreferrer\">2</a>)"}, {"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1518124235, "post_id": 48694103, "comment_id": 84388204, "body": "@trentcl In your second example (that I believe represents shadowing) -- looks like the memory is kept on the stack (not freed) until the scope ends as in <a href=\"https://play.rust-lang.org/?gist=33044c4a8cf22411269dff967a0b2c31&amp;version=stable\" rel=\"nofollow noreferrer\">modified 2</a>. So if you run a large loop -- this approach may accumulate quite large &quot;temporary memory leak&quot;, right?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 1, "creation_date": 1518129278, "post_id": 48694103, "comment_id": 84390528, "body": "@LoganReed The shadowing variable only exists for a single iteration of the loop and is dropped afterward (each iteration), so no. <a href=\"https://play.rust-lang.org/?gist=f239b41680bbc8c68c004daa39513b7a&amp;version=stable\" rel=\"nofollow noreferrer\">Demonstration.</a> Great question though!"}], "answers": [{"comments": [{"owner": {"reputation": 1192, "user_id": 7023187, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/321015561587503/picture?type=large", "display_name": "Rares Dima", "link": "https://stackoverflow.com/users/7023187/rares-dima"}, "edited": false, "score": 0, "creation_date": 1518124575, "post_id": 48694311, "comment_id": 84388365, "body": "I see, that makes sense! I&#39;m going on intuition here but I guess that what you said, along with Rust&#39;s concept of ownership and how the compiler tends to bark at you if you end up with dangling pointers pretty much assures memory safety. However, what if the variable is in the top level? Like one of the first variable in the <code>main</code> function? Meaning it only goes out of scope when the program terminates"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 1192, "user_id": 7023187, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/321015561587503/picture?type=large", "display_name": "Rares Dima", "link": "https://stackoverflow.com/users/7023187/rares-dima"}, "edited": false, "score": 1, "creation_date": 1518194854, "post_id": 48694311, "comment_id": 84419845, "body": "@RaresDima The old value of <code>a</code> is dropped right before assigning the new value, independently of the scope of <code>a</code>.  This answer is slightly incomplete, as it only mentions <code>drop()</code> being called when a variable goes out of scope.  There are many other places where the Rust compiler inserts implicit drops, e.g. right before assignments, or if a variable gets moved out only in one <code>if</code> branch it gets implicitly dropped in the other <code>if</code> branch. There are even cases that the compiler can&#39;t solve statically, so variables called &quot;drop flags&quot; are used to track whether a variable needs to be dropped."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1518195129, "post_id": 48694311, "comment_id": 84420011, "body": "See also <a href=\"https://doc.rust-lang.org/beta/nomicon/drop-flags.html\" rel=\"nofollow noreferrer\">the chapter on drop flags in the Rustonomicon</a>.  Also note that RAII in C++ really only calls the destructor at the end of the scope.  In other situations (like the assignment) the implementation of <code>operator=</code> is responsible for cleaning up, rather than static analysis by the compiler.  Simply stating that &quot;Rust (just as C++) uses RAII to handle this&quot; may be accurate (not sure about the terminology), but it is also somewhat misleading since the implementations of the conecpt in Rust and C++ are quite different."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 3, "last_activity_date": 1518122396, "last_edit_date": 1518122396, "creation_date": 1518121984, "answer_id": 48694311, "question_id": 48694103, "link": "https://stackoverflow.com/questions/48694103/what-happens-to-an-allocation-when-the-variable-containing-it-is-reassigned/48694311#48694311", "title": "What happens to an allocation when the variable containing it is reassigned?", "body": "<p>Rust (just as C++) uses RAII to handle this. Types that need to be destroyed implement the <code>Drop</code> trait (in C++, they have a destructor), which is automatically called when a variable goes out of scope.</p>\n\n<p>In Rust:</p>\n\n<pre><code>{\n    let a = foo();\n    a = b; // `b` is moved to `a`,\n           // the previous value of `a` is dropped, which frees memory\n} // `a` goes out of scope, it is dropped, which frees memory\n</code></pre>\n\n<p>In C++:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>{\n    auto a = foo();\n    a = b; // `=` is essentially a function call,\n           // but a proper `=` implementation should handle memory properly\n} // `a` goes out of scope, its destructor is called, which frees memory\n</code></pre>\n\n<p>For properly implemented types in Rust or C++, there are no memory leaks.\nC on the other hand has no such concept, and memory always has to be freed explicitly.</p>\n"}], "owner": {"reputation": 1192, "user_id": 7023187, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/321015561587503/picture?type=large", "display_name": "Rares Dima", "link": "https://stackoverflow.com/users/7023187/rares-dima"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 146, "favorite_count": 0, "closed_date": 1518122030, "accepted_answer_id": 48694311, "answer_count": 1, "score": 0, "last_activity_date": 1518122396, "creation_date": 1518121129, "last_edit_date": 1518121861, "question_id": 48694103, "link": "https://stackoverflow.com/questions/48694103/what-happens-to-an-allocation-when-the-variable-containing-it-is-reassigned", "closed_reason": "Duplicate", "title": "What happens to an allocation when the variable containing it is reassigned?", "body": "<p>I am pretty certain that there is a dedicated name for this but I have no idea what it is.</p>\n\n<p>When you have a pointer that stops pointing to a valid object, that's a dangling pointer, but what about an object that has no references to it, particularly in Rust?</p>\n\n<p>Take the following code for example:</p>\n\n<pre><code>{ \n    let mut v: Vec&lt;u32&gt; = vec![1, 2, 3];\n    v = Vec::new();\n    v.push(0);\n}\n</code></pre>\n\n<p>When <code>v</code> is reassigned to a whole new vector, what happens to the old one? In C/C++ that is the birth of a memory leak since nobody is gonna free that memory and you no longer have a way to do so either. However, in Rust, there's all kinds of magic happening when exiting a scope (hence the <code>{}</code> in the sample code. </p>\n\n<p>From a logical point of view, since Rust has no GC, that would dictate that the vector just stays in memory until the process terminates, scanning for unreachable objects when going out of scope would tread on actual GC but I don't yet know enough about Rust internals to make those kinds of guesses (though I'd like to at some point).</p>\n\n<p>What exactly happens in the above code? Is that a memory leak that you have to watch out for just like in C/C++?</p>\n"}, {"tags": ["datetime", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1518098027, "post_id": 48686533, "comment_id": 84371894, "body": "<a href=\"https://play.rust-lang.org/?gist=d1112e8bd8d23600e722342cf2dcd273&amp;version=stable\" rel=\"nofollow noreferrer\">The duplicate applied to your situation</a>."}], "owner": {"reputation": 4768, "user_id": 787366, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a49b6d8775416297257c4c4d36e39967?s=128&d=identicon&r=PG", "display_name": "Shmoopy", "link": "https://stackoverflow.com/users/787366/shmoopy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 90, "favorite_count": 0, "closed_date": 1518097405, "answer_count": 0, "score": 1, "last_activity_date": 1518097485, "creation_date": 1518096207, "last_edit_date": 1518097485, "question_id": 48686533, "link": "https://stackoverflow.com/questions/48686533/what-is-the-rust-equivalent-of-c-system-datetime-ticks", "closed_reason": "Duplicate", "title": "What is the Rust equivalent of C# System.DateTime.Ticks?", "body": "<p>In C#, I can do something like this:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var dt = DateTime.Parse(\"2018-02-08 10:00\");\nConsole.WriteLine(dt.Ticks);\n</code></pre>\n\n<p>Which prints <code>636536808000000000</code>, which is:</p>\n\n<blockquote>\n  <p>The value of this property represents the number of 100-nanosecond\n  intervals that have elapsed since 12:00:00 midnight, January 1, 0001\n  (0:00:00 UTC on January 1, 0001, in the Gregorian calendar)</p>\n</blockquote>\n\n<p>Is there a way to achieve the same using Rust's <code>chrono</code> crate?</p>\n\n<pre><code>extern crate chrono;\n\nuse chrono::DateTime;\nuse chrono::offset::FixedOffset;\n\nfn get_ticks() -&gt; u64 {\n    let str = \"Tue, 1 Jul 2003 10:52:37 +0200\";\n    let dt = DateTime::&lt;FixedOffset&gt;::parse_from_rfc2822(str).unwrap();\n    // Now what?    \n}\n</code></pre>\n"}, {"tags": ["rust", "one-definition-rule"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1518075631, "post_id": 48679615, "comment_id": 84357171, "body": "Could you explain which <i>symbol</i> ASAN reported? Is it a symbol from your crates or not? Is it a static value or a function? ... Your question is quite lacking in details at the moment :x"}, {"owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518077416, "post_id": 48679615, "comment_id": 84358012, "body": "@MatthieuM. Oh, yes, that would be important, wouldn&#39;t it..."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1518079504, "post_id": 48679615, "comment_id": 84359207, "body": "One Definition Rule is a rule of C and C++. Running the check on Rust executables doesn&#39;t make sense to me."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1518087732, "post_id": 48679615, "comment_id": 84364900, "body": "@SebastianRedl If I understand well, that&#39;s the OP&#39;s question: &quot;Does this concept make sense in Rust, and why?&quot;. You should elaborate your comment in an answer."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1518107952, "post_id": 48679615, "comment_id": 84379006, "body": "@Boiethios I don&#39;t want to make an answer since I don&#39;t know what the odr-checker actually does that makes it think Rust programs contain violations. The documentation isn&#39;t clear on the mechanism."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1518110538, "post_id": 48679615, "comment_id": 84380794, "body": "@SebastianRedl based on my reading <a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizerOneDefinitionRuleViolation\" rel=\"nofollow noreferrer\">1</a>, <a href=\"https://en.wikipedia.org/wiki/One_Definition_Rule\" rel=\"nofollow noreferrer\">2</a>, it <i>does</i> seem like something to be worried about. Why wouldn&#39;t having two symbols with different definitions matter to Rust?"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518123377, "post_id": 48679615, "comment_id": 84387770, "body": "@Shepmaster So one interesting aspect is that ASAN reports two different names, &#39;ref.c&#39; vs &#39;ref.l&#39;. All the Wiki examples show the same name. If the names are different, how is that a conflict? The other part is that from my understanding of how Rust name mangling works, it shouldn&#39;t be possible to produce ODR violations at all, except with extern C symbols. My understanding may be faulty though."}, {"owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "edited": false, "score": 0, "creation_date": 1518157089, "post_id": 48679615, "comment_id": 84398153, "body": "Also seems like the symbols in which the globals were registered (e.g. <code>__asan_register_globals.part.11</code>) don&#39;t occur in the code when compiling without ASAN (i.e. no <code>-Z sanitizer=address</code>), insofar as my grepping the output of <code>nm</code> on the compiled binaries for the string <code>asan</code> goes. I&#39;m not sure, but this might be a bug in the ASAN hooks generated by <code>rustc</code>? I&#39;unno."}], "owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 396, "favorite_count": 0, "answer_count": 0, "score": 11, "last_activity_date": 1518156460, "creation_date": 1518073969, "last_edit_date": 1518156460, "question_id": 48679615, "link": "https://stackoverflow.com/questions/48679615/should-i-care-about-a-one-definition-rule-violation-in-a-rust-executable-reporte", "title": "Should I care about a one-definition-rule violation in a Rust executable reported by ASAN?", "body": "<p>I have a Rust executable which was compiled purely within the Rust ecosystem; no external C code or linked libraries, sans whatever the compiler drags in.</p>\n\n<p>After compiling it with ASAN on Linux, ASAN reports a one-definition-rule (ODR) violation. Should I have concerns about the correctness of my executable? What are some common concerns? What are some corner cases?</p>\n\n<p>My understanding is that because all my Rust dependencies were compiled to <code>.rlib</code>s, and because none of my code is in a foreign language, and because none of my code explicitly refers to foreign libraries, the compiler should have been aware of <em>all</em> of my program's symbol names at compile time, with the possible exception of system libraries that it drags in itself and thus should be aware of. Thus I'm leaning towards ignoring the ODR violation as \"nothing I can do about it.\"</p>\n\n<p>I'm not able to produce a minimal repro example of this currently, and merely need an answer that gives me enough to determine whether or not I should care enough to investigate.</p>\n\n<p>The command that I used to build/run with ASAN:</p>\n\n<pre><code>CARGO_INCREMENTAL=0 RUSTFLAGS=\"-Z sanitizer=address\" cargo run --target x86_64-unknown-linux-gnu --example name_of_example\n</code></pre>\n\n<p>The error message (with the executable name and file path removed)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>==18003==ERROR: AddressSanitizer: odr-violation (0x5625fb39f760):\n  [1] size=0 'ref.c' executable_name_here12-d0d02bd82d5d1b2688ff68a1707ea7a1.rs\n  [2] size=0 'ref.l' executable_name_here10-d0d02bd82d5d1b2688ff68a1707ea7a1.rs\n\nThese globals were registered at these points:\n  [1]:\n    #0 0x5625fb2a5727 in __asan_register_globals.part.11 /checkout/src/libcompiler_builtins/compiler-rt/lib/asan/asan_globals.cc:338\n    #1 0x5625faf4e26d in asan.module_ctor (/executable/path/here+0x1c326d)\n\n  [2]:\n    #0 0x5625fb2a5727 in __asan_register_globals.part.11 /checkout/src/libcompiler_builtins/compiler-rt/lib/asan/asan_globals.cc:338\n    #1 0x5625fae9d9cd in asan.module_ctor (/executable/path/here+0x1129cd)\n</code></pre>\n\n<p>As far as I can tell, this isn't from my crates (and I don't otherwise observe bad behavior, hence my leaning towards not caring) but I have multiple interdependent crates getting instrumented here, and am not sure if this could reflect some more sinister underlying problem.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 502, "user_id": 3298826, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d80d437d6d9e6b9bc7835a7307792c19?s=128&d=identicon&r=PG", "display_name": "H2O", "link": "https://stackoverflow.com/users/3298826/h2o"}, "is_accepted": false, "score": 3, "last_activity_date": 1518101533, "last_edit_date": 1518101533, "creation_date": 1518095157, "answer_id": 48686214, "question_id": 48677352, "link": "https://stackoverflow.com/questions/48677352/turn-off-default-features-in-dependency-of-dependency/48686214#48686214", "title": "Turn off default-features in dependency of dependency", "body": "<p>I am fairly certain that this is not currently possible. I looked into doing this with Cargo's <code>[patch]</code> <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-patch-section\" rel=\"nofollow noreferrer\">section</a> but it looks like you can't actually specify features in the patch section but can only overwrite the path or git url of a given dependency.</p>\n\n<p>Using this section you could, however, make your workaround a bit neater. Just fork num-complex and remove the <code>rustc-serialize</code> feature from the defaults. Using cargo-patch supply your fork like this:</p>\n\n<pre><code>[patch.crates-io]\nnum-complex = { git = \"https://github.com/your-github-name/num-complex.git\" }\n</code></pre>\n\n<p>That way your fork will be used all the way down in the dependency chain without having to change each crate individually.</p>\n\n<p>As I alluded to earlier, specifying <code>default-features = false</code> in this section doesn't seem to do anything. From looking at Cargo's code I don't think this is a bug, just a lack of a feature or a design decision. (After all, messing with dependencies like this is not really a great idea in the general case).</p>\n"}, {"comments": [{"owner": {"reputation": 16817, "user_id": 386279, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=128&d=identicon&r=PG", "display_name": "beardc", "link": "https://stackoverflow.com/users/386279/beardc"}, "edited": false, "score": 0, "creation_date": 1518101153, "post_id": 48687713, "comment_id": 84374173, "body": "&quot;add a feature that opts-in to the rustc-serialize&quot; do you mean opts out of rustc-serialize?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16817, "user_id": 386279, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=128&d=identicon&r=PG", "display_name": "beardc", "link": "https://stackoverflow.com/users/386279/beardc"}, "edited": false, "score": 0, "creation_date": 1518101380, "post_id": 48687713, "comment_id": 84374322, "body": "@beardc no, features are intended to be <i>additive</i>. A crate should have features that enable additional functionality, but they can also have a default feature set. You&#39;d make <i>rustc-serialize</i> an optional dependency and then add it to the default features to maintain backwards compatibility. A future breaking change release of the library could remove it from the default features. Then you&#39;d go up to the next level, disable default features, add the ones the library needs, and repeat."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1518119058, "last_edit_date": 1518119058, "creation_date": 1518099683, "answer_id": 48687713, "question_id": 48677352, "link": "https://stackoverflow.com/questions/48677352/turn-off-default-features-in-dependency-of-dependency/48687713#48687713", "title": "Turn off default-features in dependency of dependency", "body": "<p>As <a href=\"https://stackoverflow.com/a/48686214/155423\">H2O states</a>, this is not possible, but check their answer for a good temporary workaround to get things working again. I want to discuss why it <strong>should not</strong> be possible and what the long-term fix is.</p>\n\n<p>In general, you cannot tell what a crate uses a dependency for. It's completely possible that <em>alga</em> makes use of the rustc-serialize functionality of <em>num-complex</em> internally. </p>\n\n<p>The correct thing to do is to track the dependency chain upwards. Go to each project and add a feature that opts-in to the rustc-serialize functionality of its direct dependents. You would also add the <code>rustc-serialize</code> feature to the default features to maintain backwards compatibility.</p>\n\n<p>Either you will end up being able to submit a PR to the project to improve <em>everyone's</em> case, or you will understand why what you think is optional actually isn't.</p>\n"}], "owner": {"reputation": 16817, "user_id": 386279, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=128&d=identicon&r=PG", "display_name": "beardc", "link": "https://stackoverflow.com/users/386279/beardc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1779, "favorite_count": 1, "accepted_answer_id": 48687713, "answer_count": 2, "score": 4, "last_activity_date": 1518119058, "creation_date": 1518062696, "last_edit_date": 1518099187, "question_id": 48677352, "link": "https://stackoverflow.com/questions/48677352/turn-off-default-features-in-dependency-of-dependency", "title": "Turn off default-features in dependency of dependency", "body": "<p>I have a chain of dependencies that end in depending <em>optionally</em> on a deprecated library. Concretely, I want to use nalgebra which depends indirectly on rustc-serialize as follows:</p>\n\n<p>nalgebra -> alga -> num-complex -> (optional default) rustc-serialize</p>\n\n<p>I can list the num-complex dependency in my Cargo.toml file and turn off the optional rustc-serialize dependency (<code>num-complex = { version = \"0.1.42\", default-features = false }</code>), but is there a way to turn off this option all the way up the chain in Cargo.toml?</p>\n\n<p>I have tried an alternative of cloning each of these and manipulating the local copies\u2019 Cargo.toml file to refer to all the local dependencies, which works, but I would like a more maintainable way to do this if possible. </p>\n"}, {"tags": ["rust", "arguments", "clap"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1518054176, "post_id": 48676079, "comment_id": 84350743, "body": "clap has documentation. There are several methods for overriding various aspects of the -h/--help output: <a href=\"https://docs.rs/clap/2.29.4/clap/struct.App.html\" rel=\"nofollow noreferrer\">docs.rs/clap/2.29.4/clap/struct.App.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1607733473, "last_edit_date": 1607733473, "creation_date": 1518054703, "answer_id": 48676226, "question_id": 48676079, "link": "https://stackoverflow.com/questions/48676079/is-there-a-way-to-make-clap-override-the-h-help-flags-help-text/48676226#48676226", "title": "Is there a way to make clap override the [ -h | --help ] flags help text?", "body": "<p>To change the description of the <code>-h</code>/<code>--help</code> parameter in the help text, use the <a href=\"https://docs.rs/clap/*/clap/struct.App.html#method.help_message\" rel=\"nofollow noreferrer\"><code>help_message</code></a> method. Likewise, to change the description of <code>-V</code>/<code>--version</code>, use <a href=\"https://docs.rs/clap/*/clap/struct.App.html#method.version_message\" rel=\"nofollow noreferrer\"><code>version_message</code></a>.</p>\n<pre><code>extern crate clap;\n\nuse clap::App;\n\nfn main() {\n    let matches = App::new(&quot;app&quot;)\n        .help_message(&quot;this is the help command&quot;)\n        .version_message(&quot;this is the version command&quot;)\n        .get_matches_from(&amp;[&quot;app&quot;, &quot;--help&quot;]);\n}\n</code></pre>\n<p>Output:</p>\n<pre><code>app \n\nUSAGE:\n    app\n\nFLAGS:\n    -h, --help       this is the help command\n    -V, --version    this is the version command\n</code></pre>\n"}], "owner": {"reputation": 31, "user_id": 9330525, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gHwy7.jpg?s=128&g=1", "display_name": "Just Somebody", "link": "https://stackoverflow.com/users/9330525/just-somebody"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 703, "favorite_count": 1, "accepted_answer_id": 48676226, "answer_count": 1, "score": -1, "last_activity_date": 1607733473, "creation_date": 1518053524, "last_edit_date": 1518056286, "question_id": 48676079, "link": "https://stackoverflow.com/questions/48676079/is-there-a-way-to-make-clap-override-the-h-help-flags-help-text", "title": "Is there a way to make clap override the [ -h | --help ] flags help text?", "body": "<p>I'm following the sample code from Rust Clap Package's docs but can't find any reference regarding help text for auto-generated flags [-h and --help].</p>\n\n<pre><code>extern crate clap;\n\nuse clap::{App, Arg, SubCommand};\n\nfn main() {\n    let matches = App::new(\"Command One\")\n        .version(\"1.0\")\n        .author(\"Some Author &lt;the_account@provider.com&gt;\")\n        .about(\"Descripci\u00f3n del comando.\")\n        .arg(Arg::with_name(\"config\")\n            .short(\"c\")\n            .long(\"config\")\n            .value_name(\"FILE\")\n            .help(\"Sets a custom config file\")\n            .takes_value(true))\n        .arg(Arg::with_name(\"INPUT\")\n            .help(\"Sets the input file to use\")\n            .required(true)\n            .index(1))\n        .arg(Arg::with_name(\"v\")\n            .short(\"v\")\n            .multiple(true)\n            .help(\"Sets the level of verbosity\"))\n\n        // *** I'm trying this ***\n        .arg(Arg::with_name(\"help\")\n            .short(\"h\")\n            .long(\"help\")\n            .help(\"A new help text.\"))\n        // ***********\n\n        .subcommand(SubCommand::with_name(\"test\")\n            .about(\"controls testing features\")\n            .version(\"1.3\")\n            .author(\"Someone E. &lt;someone_else@other.com&gt;\")\n            .arg(Arg::with_name(\"debug\")\n                .short(\"d\")\n                .help(\"print debug information verbosely\")))\n        .get_matches();\n\n    let config = matches.value_of(\"config\").unwrap_or(\"default.conf\");\n    println!(\"Value for config: {}\", config);\n\n    println!(\"Using input file: {}\", matches.value_of(\"INPUT\").unwrap());\n\n    match matches.occurrences_of(\"v\") {\n        0 =&gt; println!(\"No verbose info\"),\n        1 =&gt; println!(\"Some verbose info\"),\n        2 =&gt; println!(\"Tons of verbose info\"),\n        3 | _ =&gt; println!(\"Don't be crazy\"),\n    }\n\n    if let Some(matches) = matches.subcommand_matches(\"test\") {\n        if matches.is_present(\"debug\") {\n            println!(\"Printing debug info...\");\n        } else {\n            println!(\"Printing normally...\");\n        }\n    }\n}\n</code></pre>\n"}]